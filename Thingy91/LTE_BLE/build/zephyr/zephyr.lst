
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00008000 <_vector_table>:
    8000:	08 4e 01 20 a1 2e 01 00 7b 0c 03 00 75 2e 01 00     .N. ....{...u...
    8010:	75 2e 01 00 75 2e 01 00 75 2e 01 00 75 2e 01 00     u...u...u...u...
	...
    802c:	d9 26 01 00 75 2e 01 00 00 00 00 00 79 26 01 00     .&..u.......y&..
    803c:	75 2e 01 00                                         u...

00008040 <_irq_vector_table>:
    8040:	61 27 01 00 61 27 01 00 61 27 01 00 61 27 01 00     a'..a'..a'..a'..
    8050:	61 27 01 00 61 27 01 00 61 27 01 00 61 27 01 00     a'..a'..a'..a'..
    8060:	61 27 01 00 61 27 01 00 61 27 01 00 61 27 01 00     a'..a'..a'..a'..
    8070:	61 27 01 00 61 27 01 00 61 27 01 00 61 27 01 00     a'..a'..a'..a'..
    8080:	61 27 01 00 61 27 01 00 61 27 01 00 61 27 01 00     a'..a'..a'..a'..
    8090:	61 27 01 00 61 27 01 00 61 27 01 00 61 27 01 00     a'..a'..a'..a'..
    80a0:	61 27 01 00 61 27 01 00 61 27 01 00 61 27 01 00     a'..a'..a'..a'..
    80b0:	61 27 01 00 61 27 01 00 61 27 01 00 61 27 01 00     a'..a'..a'..a'..
    80c0:	61 27 01 00 61 27 01 00 61 27 01 00 61 27 01 00     a'..a'..a'..a'..
    80d0:	61 27 01 00 61 27 01 00 61 27 01 00 61 27 01 00     a'..a'..a'..a'..
    80e0:	61 27 01 00 61 27 01 00 61 27 01 00 61 27 01 00     a'..a'..a'..a'..
    80f0:	61 27 01 00 61 27 01 00 61 27 01 00 61 27 01 00     a'..a'..a'..a'..
    8100:	61 27 01 00 61 27 01 00 61 27 01 00 61 27 01 00     a'..a'..a'..a'..
    8110:	61 27 01 00 61 27 01 00 61 27 01 00 61 27 01 00     a'..a'..a'..a'..
    8120:	61 27 01 00 61 27 01 00 61 27 01 00 61 27 01 00     a'..a'..a'..a'..
    8130:	61 27 01 00 61 27 01 00 61 27 01 00 61 27 01 00     a'..a'..a'..a'..
    8140:	61 27 01 00                                         a'..

Disassembly of section text:

00008148 <__aeabi_fmul>:
    8148:	f04f 0cff 	mov.w	ip, #255	; 0xff
    814c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    8150:	bf1e      	ittt	ne
    8152:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    8156:	ea92 0f0c 	teqne	r2, ip
    815a:	ea93 0f0c 	teqne	r3, ip
    815e:	d06f      	beq.n	8240 <__aeabi_fmul+0xf8>
    8160:	441a      	add	r2, r3
    8162:	ea80 0c01 	eor.w	ip, r0, r1
    8166:	0240      	lsls	r0, r0, #9
    8168:	bf18      	it	ne
    816a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    816e:	d01e      	beq.n	81ae <__aeabi_fmul+0x66>
    8170:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    8174:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    8178:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    817c:	fba0 3101 	umull	r3, r1, r0, r1
    8180:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    8184:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    8188:	bf3e      	ittt	cc
    818a:	0049      	lslcc	r1, r1, #1
    818c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    8190:	005b      	lslcc	r3, r3, #1
    8192:	ea40 0001 	orr.w	r0, r0, r1
    8196:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    819a:	2afd      	cmp	r2, #253	; 0xfd
    819c:	d81d      	bhi.n	81da <__aeabi_fmul+0x92>
    819e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    81a2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    81a6:	bf08      	it	eq
    81a8:	f020 0001 	biceq.w	r0, r0, #1
    81ac:	4770      	bx	lr
    81ae:	f090 0f00 	teq	r0, #0
    81b2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    81b6:	bf08      	it	eq
    81b8:	0249      	lsleq	r1, r1, #9
    81ba:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    81be:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    81c2:	3a7f      	subs	r2, #127	; 0x7f
    81c4:	bfc2      	ittt	gt
    81c6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    81ca:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    81ce:	4770      	bxgt	lr
    81d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    81d4:	f04f 0300 	mov.w	r3, #0
    81d8:	3a01      	subs	r2, #1
    81da:	dc5d      	bgt.n	8298 <__aeabi_fmul+0x150>
    81dc:	f112 0f19 	cmn.w	r2, #25
    81e0:	bfdc      	itt	le
    81e2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    81e6:	4770      	bxle	lr
    81e8:	f1c2 0200 	rsb	r2, r2, #0
    81ec:	0041      	lsls	r1, r0, #1
    81ee:	fa21 f102 	lsr.w	r1, r1, r2
    81f2:	f1c2 0220 	rsb	r2, r2, #32
    81f6:	fa00 fc02 	lsl.w	ip, r0, r2
    81fa:	ea5f 0031 	movs.w	r0, r1, rrx
    81fe:	f140 0000 	adc.w	r0, r0, #0
    8202:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    8206:	bf08      	it	eq
    8208:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    820c:	4770      	bx	lr
    820e:	f092 0f00 	teq	r2, #0
    8212:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    8216:	bf02      	ittt	eq
    8218:	0040      	lsleq	r0, r0, #1
    821a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    821e:	3a01      	subeq	r2, #1
    8220:	d0f9      	beq.n	8216 <__aeabi_fmul+0xce>
    8222:	ea40 000c 	orr.w	r0, r0, ip
    8226:	f093 0f00 	teq	r3, #0
    822a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    822e:	bf02      	ittt	eq
    8230:	0049      	lsleq	r1, r1, #1
    8232:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    8236:	3b01      	subeq	r3, #1
    8238:	d0f9      	beq.n	822e <__aeabi_fmul+0xe6>
    823a:	ea41 010c 	orr.w	r1, r1, ip
    823e:	e78f      	b.n	8160 <__aeabi_fmul+0x18>
    8240:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    8244:	ea92 0f0c 	teq	r2, ip
    8248:	bf18      	it	ne
    824a:	ea93 0f0c 	teqne	r3, ip
    824e:	d00a      	beq.n	8266 <__aeabi_fmul+0x11e>
    8250:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    8254:	bf18      	it	ne
    8256:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    825a:	d1d8      	bne.n	820e <__aeabi_fmul+0xc6>
    825c:	ea80 0001 	eor.w	r0, r0, r1
    8260:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    8264:	4770      	bx	lr
    8266:	f090 0f00 	teq	r0, #0
    826a:	bf17      	itett	ne
    826c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    8270:	4608      	moveq	r0, r1
    8272:	f091 0f00 	teqne	r1, #0
    8276:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    827a:	d014      	beq.n	82a6 <__aeabi_fmul+0x15e>
    827c:	ea92 0f0c 	teq	r2, ip
    8280:	d101      	bne.n	8286 <__aeabi_fmul+0x13e>
    8282:	0242      	lsls	r2, r0, #9
    8284:	d10f      	bne.n	82a6 <__aeabi_fmul+0x15e>
    8286:	ea93 0f0c 	teq	r3, ip
    828a:	d103      	bne.n	8294 <__aeabi_fmul+0x14c>
    828c:	024b      	lsls	r3, r1, #9
    828e:	bf18      	it	ne
    8290:	4608      	movne	r0, r1
    8292:	d108      	bne.n	82a6 <__aeabi_fmul+0x15e>
    8294:	ea80 0001 	eor.w	r0, r0, r1
    8298:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    829c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    82a0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    82a4:	4770      	bx	lr
    82a6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    82aa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    82ae:	4770      	bx	lr

000082b0 <__aeabi_drsub>:
    82b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    82b4:	e002      	b.n	82bc <__adddf3>
    82b6:	bf00      	nop

000082b8 <__aeabi_dsub>:
    82b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000082bc <__adddf3>:
    82bc:	b530      	push	{r4, r5, lr}
    82be:	ea4f 0441 	mov.w	r4, r1, lsl #1
    82c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
    82c6:	ea94 0f05 	teq	r4, r5
    82ca:	bf08      	it	eq
    82cc:	ea90 0f02 	teqeq	r0, r2
    82d0:	bf1f      	itttt	ne
    82d2:	ea54 0c00 	orrsne.w	ip, r4, r0
    82d6:	ea55 0c02 	orrsne.w	ip, r5, r2
    82da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    82de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    82e2:	f000 80e2 	beq.w	84aa <__adddf3+0x1ee>
    82e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
    82ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    82ee:	bfb8      	it	lt
    82f0:	426d      	neglt	r5, r5
    82f2:	dd0c      	ble.n	830e <__adddf3+0x52>
    82f4:	442c      	add	r4, r5
    82f6:	ea80 0202 	eor.w	r2, r0, r2
    82fa:	ea81 0303 	eor.w	r3, r1, r3
    82fe:	ea82 0000 	eor.w	r0, r2, r0
    8302:	ea83 0101 	eor.w	r1, r3, r1
    8306:	ea80 0202 	eor.w	r2, r0, r2
    830a:	ea81 0303 	eor.w	r3, r1, r3
    830e:	2d36      	cmp	r5, #54	; 0x36
    8310:	bf88      	it	hi
    8312:	bd30      	pophi	{r4, r5, pc}
    8314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    8318:	ea4f 3101 	mov.w	r1, r1, lsl #12
    831c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    8320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    8324:	d002      	beq.n	832c <__adddf3+0x70>
    8326:	4240      	negs	r0, r0
    8328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    832c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    8330:	ea4f 3303 	mov.w	r3, r3, lsl #12
    8334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    8338:	d002      	beq.n	8340 <__adddf3+0x84>
    833a:	4252      	negs	r2, r2
    833c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8340:	ea94 0f05 	teq	r4, r5
    8344:	f000 80a7 	beq.w	8496 <__adddf3+0x1da>
    8348:	f1a4 0401 	sub.w	r4, r4, #1
    834c:	f1d5 0e20 	rsbs	lr, r5, #32
    8350:	db0d      	blt.n	836e <__adddf3+0xb2>
    8352:	fa02 fc0e 	lsl.w	ip, r2, lr
    8356:	fa22 f205 	lsr.w	r2, r2, r5
    835a:	1880      	adds	r0, r0, r2
    835c:	f141 0100 	adc.w	r1, r1, #0
    8360:	fa03 f20e 	lsl.w	r2, r3, lr
    8364:	1880      	adds	r0, r0, r2
    8366:	fa43 f305 	asr.w	r3, r3, r5
    836a:	4159      	adcs	r1, r3
    836c:	e00e      	b.n	838c <__adddf3+0xd0>
    836e:	f1a5 0520 	sub.w	r5, r5, #32
    8372:	f10e 0e20 	add.w	lr, lr, #32
    8376:	2a01      	cmp	r2, #1
    8378:	fa03 fc0e 	lsl.w	ip, r3, lr
    837c:	bf28      	it	cs
    837e:	f04c 0c02 	orrcs.w	ip, ip, #2
    8382:	fa43 f305 	asr.w	r3, r3, r5
    8386:	18c0      	adds	r0, r0, r3
    8388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    838c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    8390:	d507      	bpl.n	83a2 <__adddf3+0xe6>
    8392:	f04f 0e00 	mov.w	lr, #0
    8396:	f1dc 0c00 	rsbs	ip, ip, #0
    839a:	eb7e 0000 	sbcs.w	r0, lr, r0
    839e:	eb6e 0101 	sbc.w	r1, lr, r1
    83a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    83a6:	d31b      	bcc.n	83e0 <__adddf3+0x124>
    83a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    83ac:	d30c      	bcc.n	83c8 <__adddf3+0x10c>
    83ae:	0849      	lsrs	r1, r1, #1
    83b0:	ea5f 0030 	movs.w	r0, r0, rrx
    83b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
    83b8:	f104 0401 	add.w	r4, r4, #1
    83bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
    83c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    83c4:	f080 809a 	bcs.w	84fc <__adddf3+0x240>
    83c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    83cc:	bf08      	it	eq
    83ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    83d2:	f150 0000 	adcs.w	r0, r0, #0
    83d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    83da:	ea41 0105 	orr.w	r1, r1, r5
    83de:	bd30      	pop	{r4, r5, pc}
    83e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    83e4:	4140      	adcs	r0, r0
    83e6:	eb41 0101 	adc.w	r1, r1, r1
    83ea:	3c01      	subs	r4, #1
    83ec:	bf28      	it	cs
    83ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    83f2:	d2e9      	bcs.n	83c8 <__adddf3+0x10c>
    83f4:	f091 0f00 	teq	r1, #0
    83f8:	bf04      	itt	eq
    83fa:	4601      	moveq	r1, r0
    83fc:	2000      	moveq	r0, #0
    83fe:	fab1 f381 	clz	r3, r1
    8402:	bf08      	it	eq
    8404:	3320      	addeq	r3, #32
    8406:	f1a3 030b 	sub.w	r3, r3, #11
    840a:	f1b3 0220 	subs.w	r2, r3, #32
    840e:	da0c      	bge.n	842a <__adddf3+0x16e>
    8410:	320c      	adds	r2, #12
    8412:	dd08      	ble.n	8426 <__adddf3+0x16a>
    8414:	f102 0c14 	add.w	ip, r2, #20
    8418:	f1c2 020c 	rsb	r2, r2, #12
    841c:	fa01 f00c 	lsl.w	r0, r1, ip
    8420:	fa21 f102 	lsr.w	r1, r1, r2
    8424:	e00c      	b.n	8440 <__adddf3+0x184>
    8426:	f102 0214 	add.w	r2, r2, #20
    842a:	bfd8      	it	le
    842c:	f1c2 0c20 	rsble	ip, r2, #32
    8430:	fa01 f102 	lsl.w	r1, r1, r2
    8434:	fa20 fc0c 	lsr.w	ip, r0, ip
    8438:	bfdc      	itt	le
    843a:	ea41 010c 	orrle.w	r1, r1, ip
    843e:	4090      	lslle	r0, r2
    8440:	1ae4      	subs	r4, r4, r3
    8442:	bfa2      	ittt	ge
    8444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    8448:	4329      	orrge	r1, r5
    844a:	bd30      	popge	{r4, r5, pc}
    844c:	ea6f 0404 	mvn.w	r4, r4
    8450:	3c1f      	subs	r4, #31
    8452:	da1c      	bge.n	848e <__adddf3+0x1d2>
    8454:	340c      	adds	r4, #12
    8456:	dc0e      	bgt.n	8476 <__adddf3+0x1ba>
    8458:	f104 0414 	add.w	r4, r4, #20
    845c:	f1c4 0220 	rsb	r2, r4, #32
    8460:	fa20 f004 	lsr.w	r0, r0, r4
    8464:	fa01 f302 	lsl.w	r3, r1, r2
    8468:	ea40 0003 	orr.w	r0, r0, r3
    846c:	fa21 f304 	lsr.w	r3, r1, r4
    8470:	ea45 0103 	orr.w	r1, r5, r3
    8474:	bd30      	pop	{r4, r5, pc}
    8476:	f1c4 040c 	rsb	r4, r4, #12
    847a:	f1c4 0220 	rsb	r2, r4, #32
    847e:	fa20 f002 	lsr.w	r0, r0, r2
    8482:	fa01 f304 	lsl.w	r3, r1, r4
    8486:	ea40 0003 	orr.w	r0, r0, r3
    848a:	4629      	mov	r1, r5
    848c:	bd30      	pop	{r4, r5, pc}
    848e:	fa21 f004 	lsr.w	r0, r1, r4
    8492:	4629      	mov	r1, r5
    8494:	bd30      	pop	{r4, r5, pc}
    8496:	f094 0f00 	teq	r4, #0
    849a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    849e:	bf06      	itte	eq
    84a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    84a4:	3401      	addeq	r4, #1
    84a6:	3d01      	subne	r5, #1
    84a8:	e74e      	b.n	8348 <__adddf3+0x8c>
    84aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    84ae:	bf18      	it	ne
    84b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    84b4:	d029      	beq.n	850a <__adddf3+0x24e>
    84b6:	ea94 0f05 	teq	r4, r5
    84ba:	bf08      	it	eq
    84bc:	ea90 0f02 	teqeq	r0, r2
    84c0:	d005      	beq.n	84ce <__adddf3+0x212>
    84c2:	ea54 0c00 	orrs.w	ip, r4, r0
    84c6:	bf04      	itt	eq
    84c8:	4619      	moveq	r1, r3
    84ca:	4610      	moveq	r0, r2
    84cc:	bd30      	pop	{r4, r5, pc}
    84ce:	ea91 0f03 	teq	r1, r3
    84d2:	bf1e      	ittt	ne
    84d4:	2100      	movne	r1, #0
    84d6:	2000      	movne	r0, #0
    84d8:	bd30      	popne	{r4, r5, pc}
    84da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    84de:	d105      	bne.n	84ec <__adddf3+0x230>
    84e0:	0040      	lsls	r0, r0, #1
    84e2:	4149      	adcs	r1, r1
    84e4:	bf28      	it	cs
    84e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    84ea:	bd30      	pop	{r4, r5, pc}
    84ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    84f0:	bf3c      	itt	cc
    84f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    84f6:	bd30      	popcc	{r4, r5, pc}
    84f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    84fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    8500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    8504:	f04f 0000 	mov.w	r0, #0
    8508:	bd30      	pop	{r4, r5, pc}
    850a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    850e:	bf1a      	itte	ne
    8510:	4619      	movne	r1, r3
    8512:	4610      	movne	r0, r2
    8514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    8518:	bf1c      	itt	ne
    851a:	460b      	movne	r3, r1
    851c:	4602      	movne	r2, r0
    851e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    8522:	bf06      	itte	eq
    8524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    8528:	ea91 0f03 	teqeq	r1, r3
    852c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    8530:	bd30      	pop	{r4, r5, pc}
    8532:	bf00      	nop

00008534 <__aeabi_ui2d>:
    8534:	f090 0f00 	teq	r0, #0
    8538:	bf04      	itt	eq
    853a:	2100      	moveq	r1, #0
    853c:	4770      	bxeq	lr
    853e:	b530      	push	{r4, r5, lr}
    8540:	f44f 6480 	mov.w	r4, #1024	; 0x400
    8544:	f104 0432 	add.w	r4, r4, #50	; 0x32
    8548:	f04f 0500 	mov.w	r5, #0
    854c:	f04f 0100 	mov.w	r1, #0
    8550:	e750      	b.n	83f4 <__adddf3+0x138>
    8552:	bf00      	nop

00008554 <__aeabi_i2d>:
    8554:	f090 0f00 	teq	r0, #0
    8558:	bf04      	itt	eq
    855a:	2100      	moveq	r1, #0
    855c:	4770      	bxeq	lr
    855e:	b530      	push	{r4, r5, lr}
    8560:	f44f 6480 	mov.w	r4, #1024	; 0x400
    8564:	f104 0432 	add.w	r4, r4, #50	; 0x32
    8568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    856c:	bf48      	it	mi
    856e:	4240      	negmi	r0, r0
    8570:	f04f 0100 	mov.w	r1, #0
    8574:	e73e      	b.n	83f4 <__adddf3+0x138>
    8576:	bf00      	nop

00008578 <__aeabi_f2d>:
    8578:	0042      	lsls	r2, r0, #1
    857a:	ea4f 01e2 	mov.w	r1, r2, asr #3
    857e:	ea4f 0131 	mov.w	r1, r1, rrx
    8582:	ea4f 7002 	mov.w	r0, r2, lsl #28
    8586:	bf1f      	itttt	ne
    8588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    858c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    8590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    8594:	4770      	bxne	lr
    8596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    859a:	bf08      	it	eq
    859c:	4770      	bxeq	lr
    859e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    85a2:	bf04      	itt	eq
    85a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    85a8:	4770      	bxeq	lr
    85aa:	b530      	push	{r4, r5, lr}
    85ac:	f44f 7460 	mov.w	r4, #896	; 0x380
    85b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    85b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    85b8:	e71c      	b.n	83f4 <__adddf3+0x138>
    85ba:	bf00      	nop

000085bc <__aeabi_ul2d>:
    85bc:	ea50 0201 	orrs.w	r2, r0, r1
    85c0:	bf08      	it	eq
    85c2:	4770      	bxeq	lr
    85c4:	b530      	push	{r4, r5, lr}
    85c6:	f04f 0500 	mov.w	r5, #0
    85ca:	e00a      	b.n	85e2 <__aeabi_l2d+0x16>

000085cc <__aeabi_l2d>:
    85cc:	ea50 0201 	orrs.w	r2, r0, r1
    85d0:	bf08      	it	eq
    85d2:	4770      	bxeq	lr
    85d4:	b530      	push	{r4, r5, lr}
    85d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    85da:	d502      	bpl.n	85e2 <__aeabi_l2d+0x16>
    85dc:	4240      	negs	r0, r0
    85de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    85e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
    85e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
    85ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    85ee:	f43f aed8 	beq.w	83a2 <__adddf3+0xe6>
    85f2:	f04f 0203 	mov.w	r2, #3
    85f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    85fa:	bf18      	it	ne
    85fc:	3203      	addne	r2, #3
    85fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    8602:	bf18      	it	ne
    8604:	3203      	addne	r2, #3
    8606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    860a:	f1c2 0320 	rsb	r3, r2, #32
    860e:	fa00 fc03 	lsl.w	ip, r0, r3
    8612:	fa20 f002 	lsr.w	r0, r0, r2
    8616:	fa01 fe03 	lsl.w	lr, r1, r3
    861a:	ea40 000e 	orr.w	r0, r0, lr
    861e:	fa21 f102 	lsr.w	r1, r1, r2
    8622:	4414      	add	r4, r2
    8624:	e6bd      	b.n	83a2 <__adddf3+0xe6>
    8626:	bf00      	nop

00008628 <__aeabi_dmul>:
    8628:	b570      	push	{r4, r5, r6, lr}
    862a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    862e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    8632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    8636:	bf1d      	ittte	ne
    8638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    863c:	ea94 0f0c 	teqne	r4, ip
    8640:	ea95 0f0c 	teqne	r5, ip
    8644:	f000 f8de 	bleq	8804 <__aeabi_dmul+0x1dc>
    8648:	442c      	add	r4, r5
    864a:	ea81 0603 	eor.w	r6, r1, r3
    864e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    8652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    8656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    865a:	bf18      	it	ne
    865c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    8660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    8664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    8668:	d038      	beq.n	86dc <__aeabi_dmul+0xb4>
    866a:	fba0 ce02 	umull	ip, lr, r0, r2
    866e:	f04f 0500 	mov.w	r5, #0
    8672:	fbe1 e502 	umlal	lr, r5, r1, r2
    8676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    867a:	fbe0 e503 	umlal	lr, r5, r0, r3
    867e:	f04f 0600 	mov.w	r6, #0
    8682:	fbe1 5603 	umlal	r5, r6, r1, r3
    8686:	f09c 0f00 	teq	ip, #0
    868a:	bf18      	it	ne
    868c:	f04e 0e01 	orrne.w	lr, lr, #1
    8690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    8694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    8698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    869c:	d204      	bcs.n	86a8 <__aeabi_dmul+0x80>
    869e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    86a2:	416d      	adcs	r5, r5
    86a4:	eb46 0606 	adc.w	r6, r6, r6
    86a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    86ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    86b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    86b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    86b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    86bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    86c0:	bf88      	it	hi
    86c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    86c6:	d81e      	bhi.n	8706 <__aeabi_dmul+0xde>
    86c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    86cc:	bf08      	it	eq
    86ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    86d2:	f150 0000 	adcs.w	r0, r0, #0
    86d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    86da:	bd70      	pop	{r4, r5, r6, pc}
    86dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    86e0:	ea46 0101 	orr.w	r1, r6, r1
    86e4:	ea40 0002 	orr.w	r0, r0, r2
    86e8:	ea81 0103 	eor.w	r1, r1, r3
    86ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    86f0:	bfc2      	ittt	gt
    86f2:	ebd4 050c 	rsbsgt	r5, r4, ip
    86f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    86fa:	bd70      	popgt	{r4, r5, r6, pc}
    86fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    8700:	f04f 0e00 	mov.w	lr, #0
    8704:	3c01      	subs	r4, #1
    8706:	f300 80ab 	bgt.w	8860 <__aeabi_dmul+0x238>
    870a:	f114 0f36 	cmn.w	r4, #54	; 0x36
    870e:	bfde      	ittt	le
    8710:	2000      	movle	r0, #0
    8712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    8716:	bd70      	pople	{r4, r5, r6, pc}
    8718:	f1c4 0400 	rsb	r4, r4, #0
    871c:	3c20      	subs	r4, #32
    871e:	da35      	bge.n	878c <__aeabi_dmul+0x164>
    8720:	340c      	adds	r4, #12
    8722:	dc1b      	bgt.n	875c <__aeabi_dmul+0x134>
    8724:	f104 0414 	add.w	r4, r4, #20
    8728:	f1c4 0520 	rsb	r5, r4, #32
    872c:	fa00 f305 	lsl.w	r3, r0, r5
    8730:	fa20 f004 	lsr.w	r0, r0, r4
    8734:	fa01 f205 	lsl.w	r2, r1, r5
    8738:	ea40 0002 	orr.w	r0, r0, r2
    873c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    8740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    8744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    8748:	fa21 f604 	lsr.w	r6, r1, r4
    874c:	eb42 0106 	adc.w	r1, r2, r6
    8750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    8754:	bf08      	it	eq
    8756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    875a:	bd70      	pop	{r4, r5, r6, pc}
    875c:	f1c4 040c 	rsb	r4, r4, #12
    8760:	f1c4 0520 	rsb	r5, r4, #32
    8764:	fa00 f304 	lsl.w	r3, r0, r4
    8768:	fa20 f005 	lsr.w	r0, r0, r5
    876c:	fa01 f204 	lsl.w	r2, r1, r4
    8770:	ea40 0002 	orr.w	r0, r0, r2
    8774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    877c:	f141 0100 	adc.w	r1, r1, #0
    8780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    8784:	bf08      	it	eq
    8786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    878a:	bd70      	pop	{r4, r5, r6, pc}
    878c:	f1c4 0520 	rsb	r5, r4, #32
    8790:	fa00 f205 	lsl.w	r2, r0, r5
    8794:	ea4e 0e02 	orr.w	lr, lr, r2
    8798:	fa20 f304 	lsr.w	r3, r0, r4
    879c:	fa01 f205 	lsl.w	r2, r1, r5
    87a0:	ea43 0302 	orr.w	r3, r3, r2
    87a4:	fa21 f004 	lsr.w	r0, r1, r4
    87a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    87ac:	fa21 f204 	lsr.w	r2, r1, r4
    87b0:	ea20 0002 	bic.w	r0, r0, r2
    87b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    87b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    87bc:	bf08      	it	eq
    87be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    87c2:	bd70      	pop	{r4, r5, r6, pc}
    87c4:	f094 0f00 	teq	r4, #0
    87c8:	d10f      	bne.n	87ea <__aeabi_dmul+0x1c2>
    87ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    87ce:	0040      	lsls	r0, r0, #1
    87d0:	eb41 0101 	adc.w	r1, r1, r1
    87d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    87d8:	bf08      	it	eq
    87da:	3c01      	subeq	r4, #1
    87dc:	d0f7      	beq.n	87ce <__aeabi_dmul+0x1a6>
    87de:	ea41 0106 	orr.w	r1, r1, r6
    87e2:	f095 0f00 	teq	r5, #0
    87e6:	bf18      	it	ne
    87e8:	4770      	bxne	lr
    87ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    87ee:	0052      	lsls	r2, r2, #1
    87f0:	eb43 0303 	adc.w	r3, r3, r3
    87f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    87f8:	bf08      	it	eq
    87fa:	3d01      	subeq	r5, #1
    87fc:	d0f7      	beq.n	87ee <__aeabi_dmul+0x1c6>
    87fe:	ea43 0306 	orr.w	r3, r3, r6
    8802:	4770      	bx	lr
    8804:	ea94 0f0c 	teq	r4, ip
    8808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    880c:	bf18      	it	ne
    880e:	ea95 0f0c 	teqne	r5, ip
    8812:	d00c      	beq.n	882e <__aeabi_dmul+0x206>
    8814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    8818:	bf18      	it	ne
    881a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    881e:	d1d1      	bne.n	87c4 <__aeabi_dmul+0x19c>
    8820:	ea81 0103 	eor.w	r1, r1, r3
    8824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8828:	f04f 0000 	mov.w	r0, #0
    882c:	bd70      	pop	{r4, r5, r6, pc}
    882e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    8832:	bf06      	itte	eq
    8834:	4610      	moveq	r0, r2
    8836:	4619      	moveq	r1, r3
    8838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    883c:	d019      	beq.n	8872 <__aeabi_dmul+0x24a>
    883e:	ea94 0f0c 	teq	r4, ip
    8842:	d102      	bne.n	884a <__aeabi_dmul+0x222>
    8844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    8848:	d113      	bne.n	8872 <__aeabi_dmul+0x24a>
    884a:	ea95 0f0c 	teq	r5, ip
    884e:	d105      	bne.n	885c <__aeabi_dmul+0x234>
    8850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    8854:	bf1c      	itt	ne
    8856:	4610      	movne	r0, r2
    8858:	4619      	movne	r1, r3
    885a:	d10a      	bne.n	8872 <__aeabi_dmul+0x24a>
    885c:	ea81 0103 	eor.w	r1, r1, r3
    8860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    8868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    886c:	f04f 0000 	mov.w	r0, #0
    8870:	bd70      	pop	{r4, r5, r6, pc}
    8872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    8876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    887a:	bd70      	pop	{r4, r5, r6, pc}

0000887c <__aeabi_ddiv>:
    887c:	b570      	push	{r4, r5, r6, lr}
    887e:	f04f 0cff 	mov.w	ip, #255	; 0xff
    8882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    8886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    888a:	bf1d      	ittte	ne
    888c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    8890:	ea94 0f0c 	teqne	r4, ip
    8894:	ea95 0f0c 	teqne	r5, ip
    8898:	f000 f8a7 	bleq	89ea <__aeabi_ddiv+0x16e>
    889c:	eba4 0405 	sub.w	r4, r4, r5
    88a0:	ea81 0e03 	eor.w	lr, r1, r3
    88a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    88a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
    88ac:	f000 8088 	beq.w	89c0 <__aeabi_ddiv+0x144>
    88b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    88b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    88b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    88bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    88c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
    88c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    88c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    88cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
    88d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    88d4:	429d      	cmp	r5, r3
    88d6:	bf08      	it	eq
    88d8:	4296      	cmpeq	r6, r2
    88da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    88de:	f504 7440 	add.w	r4, r4, #768	; 0x300
    88e2:	d202      	bcs.n	88ea <__aeabi_ddiv+0x6e>
    88e4:	085b      	lsrs	r3, r3, #1
    88e6:	ea4f 0232 	mov.w	r2, r2, rrx
    88ea:	1ab6      	subs	r6, r6, r2
    88ec:	eb65 0503 	sbc.w	r5, r5, r3
    88f0:	085b      	lsrs	r3, r3, #1
    88f2:	ea4f 0232 	mov.w	r2, r2, rrx
    88f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    88fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    88fe:	ebb6 0e02 	subs.w	lr, r6, r2
    8902:	eb75 0e03 	sbcs.w	lr, r5, r3
    8906:	bf22      	ittt	cs
    8908:	1ab6      	subcs	r6, r6, r2
    890a:	4675      	movcs	r5, lr
    890c:	ea40 000c 	orrcs.w	r0, r0, ip
    8910:	085b      	lsrs	r3, r3, #1
    8912:	ea4f 0232 	mov.w	r2, r2, rrx
    8916:	ebb6 0e02 	subs.w	lr, r6, r2
    891a:	eb75 0e03 	sbcs.w	lr, r5, r3
    891e:	bf22      	ittt	cs
    8920:	1ab6      	subcs	r6, r6, r2
    8922:	4675      	movcs	r5, lr
    8924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    8928:	085b      	lsrs	r3, r3, #1
    892a:	ea4f 0232 	mov.w	r2, r2, rrx
    892e:	ebb6 0e02 	subs.w	lr, r6, r2
    8932:	eb75 0e03 	sbcs.w	lr, r5, r3
    8936:	bf22      	ittt	cs
    8938:	1ab6      	subcs	r6, r6, r2
    893a:	4675      	movcs	r5, lr
    893c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    8940:	085b      	lsrs	r3, r3, #1
    8942:	ea4f 0232 	mov.w	r2, r2, rrx
    8946:	ebb6 0e02 	subs.w	lr, r6, r2
    894a:	eb75 0e03 	sbcs.w	lr, r5, r3
    894e:	bf22      	ittt	cs
    8950:	1ab6      	subcs	r6, r6, r2
    8952:	4675      	movcs	r5, lr
    8954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    8958:	ea55 0e06 	orrs.w	lr, r5, r6
    895c:	d018      	beq.n	8990 <__aeabi_ddiv+0x114>
    895e:	ea4f 1505 	mov.w	r5, r5, lsl #4
    8962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    8966:	ea4f 1606 	mov.w	r6, r6, lsl #4
    896a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    896e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    8972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    8976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    897a:	d1c0      	bne.n	88fe <__aeabi_ddiv+0x82>
    897c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8980:	d10b      	bne.n	899a <__aeabi_ddiv+0x11e>
    8982:	ea41 0100 	orr.w	r1, r1, r0
    8986:	f04f 0000 	mov.w	r0, #0
    898a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    898e:	e7b6      	b.n	88fe <__aeabi_ddiv+0x82>
    8990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8994:	bf04      	itt	eq
    8996:	4301      	orreq	r1, r0
    8998:	2000      	moveq	r0, #0
    899a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    899e:	bf88      	it	hi
    89a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    89a4:	f63f aeaf 	bhi.w	8706 <__aeabi_dmul+0xde>
    89a8:	ebb5 0c03 	subs.w	ip, r5, r3
    89ac:	bf04      	itt	eq
    89ae:	ebb6 0c02 	subseq.w	ip, r6, r2
    89b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    89b6:	f150 0000 	adcs.w	r0, r0, #0
    89ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    89be:	bd70      	pop	{r4, r5, r6, pc}
    89c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    89c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    89c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    89cc:	bfc2      	ittt	gt
    89ce:	ebd4 050c 	rsbsgt	r5, r4, ip
    89d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    89d6:	bd70      	popgt	{r4, r5, r6, pc}
    89d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    89dc:	f04f 0e00 	mov.w	lr, #0
    89e0:	3c01      	subs	r4, #1
    89e2:	e690      	b.n	8706 <__aeabi_dmul+0xde>
    89e4:	ea45 0e06 	orr.w	lr, r5, r6
    89e8:	e68d      	b.n	8706 <__aeabi_dmul+0xde>
    89ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    89ee:	ea94 0f0c 	teq	r4, ip
    89f2:	bf08      	it	eq
    89f4:	ea95 0f0c 	teqeq	r5, ip
    89f8:	f43f af3b 	beq.w	8872 <__aeabi_dmul+0x24a>
    89fc:	ea94 0f0c 	teq	r4, ip
    8a00:	d10a      	bne.n	8a18 <__aeabi_ddiv+0x19c>
    8a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    8a06:	f47f af34 	bne.w	8872 <__aeabi_dmul+0x24a>
    8a0a:	ea95 0f0c 	teq	r5, ip
    8a0e:	f47f af25 	bne.w	885c <__aeabi_dmul+0x234>
    8a12:	4610      	mov	r0, r2
    8a14:	4619      	mov	r1, r3
    8a16:	e72c      	b.n	8872 <__aeabi_dmul+0x24a>
    8a18:	ea95 0f0c 	teq	r5, ip
    8a1c:	d106      	bne.n	8a2c <__aeabi_ddiv+0x1b0>
    8a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    8a22:	f43f aefd 	beq.w	8820 <__aeabi_dmul+0x1f8>
    8a26:	4610      	mov	r0, r2
    8a28:	4619      	mov	r1, r3
    8a2a:	e722      	b.n	8872 <__aeabi_dmul+0x24a>
    8a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    8a30:	bf18      	it	ne
    8a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    8a36:	f47f aec5 	bne.w	87c4 <__aeabi_dmul+0x19c>
    8a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    8a3e:	f47f af0d 	bne.w	885c <__aeabi_dmul+0x234>
    8a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    8a46:	f47f aeeb 	bne.w	8820 <__aeabi_dmul+0x1f8>
    8a4a:	e712      	b.n	8872 <__aeabi_dmul+0x24a>

00008a4c <__gedf2>:
    8a4c:	f04f 3cff 	mov.w	ip, #4294967295
    8a50:	e006      	b.n	8a60 <__cmpdf2+0x4>
    8a52:	bf00      	nop

00008a54 <__ledf2>:
    8a54:	f04f 0c01 	mov.w	ip, #1
    8a58:	e002      	b.n	8a60 <__cmpdf2+0x4>
    8a5a:	bf00      	nop

00008a5c <__cmpdf2>:
    8a5c:	f04f 0c01 	mov.w	ip, #1
    8a60:	f84d cd04 	str.w	ip, [sp, #-4]!
    8a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    8a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8a70:	bf18      	it	ne
    8a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    8a76:	d01b      	beq.n	8ab0 <__cmpdf2+0x54>
    8a78:	b001      	add	sp, #4
    8a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    8a7e:	bf0c      	ite	eq
    8a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    8a84:	ea91 0f03 	teqne	r1, r3
    8a88:	bf02      	ittt	eq
    8a8a:	ea90 0f02 	teqeq	r0, r2
    8a8e:	2000      	moveq	r0, #0
    8a90:	4770      	bxeq	lr
    8a92:	f110 0f00 	cmn.w	r0, #0
    8a96:	ea91 0f03 	teq	r1, r3
    8a9a:	bf58      	it	pl
    8a9c:	4299      	cmppl	r1, r3
    8a9e:	bf08      	it	eq
    8aa0:	4290      	cmpeq	r0, r2
    8aa2:	bf2c      	ite	cs
    8aa4:	17d8      	asrcs	r0, r3, #31
    8aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    8aaa:	f040 0001 	orr.w	r0, r0, #1
    8aae:	4770      	bx	lr
    8ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    8ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8ab8:	d102      	bne.n	8ac0 <__cmpdf2+0x64>
    8aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    8abe:	d107      	bne.n	8ad0 <__cmpdf2+0x74>
    8ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8ac8:	d1d6      	bne.n	8a78 <__cmpdf2+0x1c>
    8aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    8ace:	d0d3      	beq.n	8a78 <__cmpdf2+0x1c>
    8ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
    8ad4:	4770      	bx	lr
    8ad6:	bf00      	nop

00008ad8 <__aeabi_cdrcmple>:
    8ad8:	4684      	mov	ip, r0
    8ada:	4610      	mov	r0, r2
    8adc:	4662      	mov	r2, ip
    8ade:	468c      	mov	ip, r1
    8ae0:	4619      	mov	r1, r3
    8ae2:	4663      	mov	r3, ip
    8ae4:	e000      	b.n	8ae8 <__aeabi_cdcmpeq>
    8ae6:	bf00      	nop

00008ae8 <__aeabi_cdcmpeq>:
    8ae8:	b501      	push	{r0, lr}
    8aea:	f7ff ffb7 	bl	8a5c <__cmpdf2>
    8aee:	2800      	cmp	r0, #0
    8af0:	bf48      	it	mi
    8af2:	f110 0f00 	cmnmi.w	r0, #0
    8af6:	bd01      	pop	{r0, pc}

00008af8 <__aeabi_dcmpeq>:
    8af8:	f84d ed08 	str.w	lr, [sp, #-8]!
    8afc:	f7ff fff4 	bl	8ae8 <__aeabi_cdcmpeq>
    8b00:	bf0c      	ite	eq
    8b02:	2001      	moveq	r0, #1
    8b04:	2000      	movne	r0, #0
    8b06:	f85d fb08 	ldr.w	pc, [sp], #8
    8b0a:	bf00      	nop

00008b0c <__aeabi_dcmplt>:
    8b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
    8b10:	f7ff ffea 	bl	8ae8 <__aeabi_cdcmpeq>
    8b14:	bf34      	ite	cc
    8b16:	2001      	movcc	r0, #1
    8b18:	2000      	movcs	r0, #0
    8b1a:	f85d fb08 	ldr.w	pc, [sp], #8
    8b1e:	bf00      	nop

00008b20 <__aeabi_dcmple>:
    8b20:	f84d ed08 	str.w	lr, [sp, #-8]!
    8b24:	f7ff ffe0 	bl	8ae8 <__aeabi_cdcmpeq>
    8b28:	bf94      	ite	ls
    8b2a:	2001      	movls	r0, #1
    8b2c:	2000      	movhi	r0, #0
    8b2e:	f85d fb08 	ldr.w	pc, [sp], #8
    8b32:	bf00      	nop

00008b34 <__aeabi_dcmpge>:
    8b34:	f84d ed08 	str.w	lr, [sp, #-8]!
    8b38:	f7ff ffce 	bl	8ad8 <__aeabi_cdrcmple>
    8b3c:	bf94      	ite	ls
    8b3e:	2001      	movls	r0, #1
    8b40:	2000      	movhi	r0, #0
    8b42:	f85d fb08 	ldr.w	pc, [sp], #8
    8b46:	bf00      	nop

00008b48 <__aeabi_dcmpgt>:
    8b48:	f84d ed08 	str.w	lr, [sp, #-8]!
    8b4c:	f7ff ffc4 	bl	8ad8 <__aeabi_cdrcmple>
    8b50:	bf34      	ite	cc
    8b52:	2001      	movcc	r0, #1
    8b54:	2000      	movcs	r0, #0
    8b56:	f85d fb08 	ldr.w	pc, [sp], #8
    8b5a:	bf00      	nop

00008b5c <__aeabi_dcmpun>:
    8b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    8b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8b64:	d102      	bne.n	8b6c <__aeabi_dcmpun+0x10>
    8b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    8b6a:	d10a      	bne.n	8b82 <__aeabi_dcmpun+0x26>
    8b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8b74:	d102      	bne.n	8b7c <__aeabi_dcmpun+0x20>
    8b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    8b7a:	d102      	bne.n	8b82 <__aeabi_dcmpun+0x26>
    8b7c:	f04f 0000 	mov.w	r0, #0
    8b80:	4770      	bx	lr
    8b82:	f04f 0001 	mov.w	r0, #1
    8b86:	4770      	bx	lr

00008b88 <__aeabi_d2iz>:
    8b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
    8b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    8b90:	d215      	bcs.n	8bbe <__aeabi_d2iz+0x36>
    8b92:	d511      	bpl.n	8bb8 <__aeabi_d2iz+0x30>
    8b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    8b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    8b9c:	d912      	bls.n	8bc4 <__aeabi_d2iz+0x3c>
    8b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    8ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    8ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    8baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    8bae:	fa23 f002 	lsr.w	r0, r3, r2
    8bb2:	bf18      	it	ne
    8bb4:	4240      	negne	r0, r0
    8bb6:	4770      	bx	lr
    8bb8:	f04f 0000 	mov.w	r0, #0
    8bbc:	4770      	bx	lr
    8bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    8bc2:	d105      	bne.n	8bd0 <__aeabi_d2iz+0x48>
    8bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    8bc8:	bf08      	it	eq
    8bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    8bce:	4770      	bx	lr
    8bd0:	f04f 0000 	mov.w	r0, #0
    8bd4:	4770      	bx	lr
    8bd6:	bf00      	nop

00008bd8 <__aeabi_d2f>:
    8bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
    8bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    8be0:	bf24      	itt	cs
    8be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    8be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    8bea:	d90d      	bls.n	8c08 <__aeabi_d2f+0x30>
    8bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    8bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    8bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    8bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    8bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    8c00:	bf08      	it	eq
    8c02:	f020 0001 	biceq.w	r0, r0, #1
    8c06:	4770      	bx	lr
    8c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    8c0c:	d121      	bne.n	8c52 <__aeabi_d2f+0x7a>
    8c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    8c12:	bfbc      	itt	lt
    8c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    8c18:	4770      	bxlt	lr
    8c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    8c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
    8c22:	f1c2 0218 	rsb	r2, r2, #24
    8c26:	f1c2 0c20 	rsb	ip, r2, #32
    8c2a:	fa10 f30c 	lsls.w	r3, r0, ip
    8c2e:	fa20 f002 	lsr.w	r0, r0, r2
    8c32:	bf18      	it	ne
    8c34:	f040 0001 	orrne.w	r0, r0, #1
    8c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    8c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    8c40:	fa03 fc0c 	lsl.w	ip, r3, ip
    8c44:	ea40 000c 	orr.w	r0, r0, ip
    8c48:	fa23 f302 	lsr.w	r3, r3, r2
    8c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
    8c50:	e7cc      	b.n	8bec <__aeabi_d2f+0x14>
    8c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
    8c56:	d107      	bne.n	8c68 <__aeabi_d2f+0x90>
    8c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    8c5c:	bf1e      	ittt	ne
    8c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    8c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    8c66:	4770      	bxne	lr
    8c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    8c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    8c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8c74:	4770      	bx	lr
    8c76:	bf00      	nop

00008c78 <__aeabi_frsub>:
    8c78:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    8c7c:	e002      	b.n	8c84 <__addsf3>
    8c7e:	bf00      	nop

00008c80 <__aeabi_fsub>:
    8c80:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00008c84 <__addsf3>:
    8c84:	0042      	lsls	r2, r0, #1
    8c86:	bf1f      	itttt	ne
    8c88:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    8c8c:	ea92 0f03 	teqne	r2, r3
    8c90:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    8c94:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    8c98:	d06a      	beq.n	8d70 <__addsf3+0xec>
    8c9a:	ea4f 6212 	mov.w	r2, r2, lsr #24
    8c9e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    8ca2:	bfc1      	itttt	gt
    8ca4:	18d2      	addgt	r2, r2, r3
    8ca6:	4041      	eorgt	r1, r0
    8ca8:	4048      	eorgt	r0, r1
    8caa:	4041      	eorgt	r1, r0
    8cac:	bfb8      	it	lt
    8cae:	425b      	neglt	r3, r3
    8cb0:	2b19      	cmp	r3, #25
    8cb2:	bf88      	it	hi
    8cb4:	4770      	bxhi	lr
    8cb6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    8cba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8cbe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    8cc2:	bf18      	it	ne
    8cc4:	4240      	negne	r0, r0
    8cc6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    8cca:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    8cce:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    8cd2:	bf18      	it	ne
    8cd4:	4249      	negne	r1, r1
    8cd6:	ea92 0f03 	teq	r2, r3
    8cda:	d03f      	beq.n	8d5c <__addsf3+0xd8>
    8cdc:	f1a2 0201 	sub.w	r2, r2, #1
    8ce0:	fa41 fc03 	asr.w	ip, r1, r3
    8ce4:	eb10 000c 	adds.w	r0, r0, ip
    8ce8:	f1c3 0320 	rsb	r3, r3, #32
    8cec:	fa01 f103 	lsl.w	r1, r1, r3
    8cf0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    8cf4:	d502      	bpl.n	8cfc <__addsf3+0x78>
    8cf6:	4249      	negs	r1, r1
    8cf8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    8cfc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    8d00:	d313      	bcc.n	8d2a <__addsf3+0xa6>
    8d02:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    8d06:	d306      	bcc.n	8d16 <__addsf3+0x92>
    8d08:	0840      	lsrs	r0, r0, #1
    8d0a:	ea4f 0131 	mov.w	r1, r1, rrx
    8d0e:	f102 0201 	add.w	r2, r2, #1
    8d12:	2afe      	cmp	r2, #254	; 0xfe
    8d14:	d251      	bcs.n	8dba <__addsf3+0x136>
    8d16:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    8d1a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    8d1e:	bf08      	it	eq
    8d20:	f020 0001 	biceq.w	r0, r0, #1
    8d24:	ea40 0003 	orr.w	r0, r0, r3
    8d28:	4770      	bx	lr
    8d2a:	0049      	lsls	r1, r1, #1
    8d2c:	eb40 0000 	adc.w	r0, r0, r0
    8d30:	3a01      	subs	r2, #1
    8d32:	bf28      	it	cs
    8d34:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
    8d38:	d2ed      	bcs.n	8d16 <__addsf3+0x92>
    8d3a:	fab0 fc80 	clz	ip, r0
    8d3e:	f1ac 0c08 	sub.w	ip, ip, #8
    8d42:	ebb2 020c 	subs.w	r2, r2, ip
    8d46:	fa00 f00c 	lsl.w	r0, r0, ip
    8d4a:	bfaa      	itet	ge
    8d4c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    8d50:	4252      	neglt	r2, r2
    8d52:	4318      	orrge	r0, r3
    8d54:	bfbc      	itt	lt
    8d56:	40d0      	lsrlt	r0, r2
    8d58:	4318      	orrlt	r0, r3
    8d5a:	4770      	bx	lr
    8d5c:	f092 0f00 	teq	r2, #0
    8d60:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    8d64:	bf06      	itte	eq
    8d66:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    8d6a:	3201      	addeq	r2, #1
    8d6c:	3b01      	subne	r3, #1
    8d6e:	e7b5      	b.n	8cdc <__addsf3+0x58>
    8d70:	ea4f 0341 	mov.w	r3, r1, lsl #1
    8d74:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    8d78:	bf18      	it	ne
    8d7a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    8d7e:	d021      	beq.n	8dc4 <__addsf3+0x140>
    8d80:	ea92 0f03 	teq	r2, r3
    8d84:	d004      	beq.n	8d90 <__addsf3+0x10c>
    8d86:	f092 0f00 	teq	r2, #0
    8d8a:	bf08      	it	eq
    8d8c:	4608      	moveq	r0, r1
    8d8e:	4770      	bx	lr
    8d90:	ea90 0f01 	teq	r0, r1
    8d94:	bf1c      	itt	ne
    8d96:	2000      	movne	r0, #0
    8d98:	4770      	bxne	lr
    8d9a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    8d9e:	d104      	bne.n	8daa <__addsf3+0x126>
    8da0:	0040      	lsls	r0, r0, #1
    8da2:	bf28      	it	cs
    8da4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    8da8:	4770      	bx	lr
    8daa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    8dae:	bf3c      	itt	cc
    8db0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    8db4:	4770      	bxcc	lr
    8db6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    8dba:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    8dbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8dc2:	4770      	bx	lr
    8dc4:	ea7f 6222 	mvns.w	r2, r2, asr #24
    8dc8:	bf16      	itet	ne
    8dca:	4608      	movne	r0, r1
    8dcc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    8dd0:	4601      	movne	r1, r0
    8dd2:	0242      	lsls	r2, r0, #9
    8dd4:	bf06      	itte	eq
    8dd6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    8dda:	ea90 0f01 	teqeq	r0, r1
    8dde:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    8de2:	4770      	bx	lr

00008de4 <__aeabi_ui2f>:
    8de4:	f04f 0300 	mov.w	r3, #0
    8de8:	e004      	b.n	8df4 <__aeabi_i2f+0x8>
    8dea:	bf00      	nop

00008dec <__aeabi_i2f>:
    8dec:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    8df0:	bf48      	it	mi
    8df2:	4240      	negmi	r0, r0
    8df4:	ea5f 0c00 	movs.w	ip, r0
    8df8:	bf08      	it	eq
    8dfa:	4770      	bxeq	lr
    8dfc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    8e00:	4601      	mov	r1, r0
    8e02:	f04f 0000 	mov.w	r0, #0
    8e06:	e01c      	b.n	8e42 <__aeabi_l2f+0x2a>

00008e08 <__aeabi_ul2f>:
    8e08:	ea50 0201 	orrs.w	r2, r0, r1
    8e0c:	bf08      	it	eq
    8e0e:	4770      	bxeq	lr
    8e10:	f04f 0300 	mov.w	r3, #0
    8e14:	e00a      	b.n	8e2c <__aeabi_l2f+0x14>
    8e16:	bf00      	nop

00008e18 <__aeabi_l2f>:
    8e18:	ea50 0201 	orrs.w	r2, r0, r1
    8e1c:	bf08      	it	eq
    8e1e:	4770      	bxeq	lr
    8e20:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    8e24:	d502      	bpl.n	8e2c <__aeabi_l2f+0x14>
    8e26:	4240      	negs	r0, r0
    8e28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8e2c:	ea5f 0c01 	movs.w	ip, r1
    8e30:	bf02      	ittt	eq
    8e32:	4684      	moveq	ip, r0
    8e34:	4601      	moveq	r1, r0
    8e36:	2000      	moveq	r0, #0
    8e38:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    8e3c:	bf08      	it	eq
    8e3e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    8e42:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    8e46:	fabc f28c 	clz	r2, ip
    8e4a:	3a08      	subs	r2, #8
    8e4c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    8e50:	db10      	blt.n	8e74 <__aeabi_l2f+0x5c>
    8e52:	fa01 fc02 	lsl.w	ip, r1, r2
    8e56:	4463      	add	r3, ip
    8e58:	fa00 fc02 	lsl.w	ip, r0, r2
    8e5c:	f1c2 0220 	rsb	r2, r2, #32
    8e60:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    8e64:	fa20 f202 	lsr.w	r2, r0, r2
    8e68:	eb43 0002 	adc.w	r0, r3, r2
    8e6c:	bf08      	it	eq
    8e6e:	f020 0001 	biceq.w	r0, r0, #1
    8e72:	4770      	bx	lr
    8e74:	f102 0220 	add.w	r2, r2, #32
    8e78:	fa01 fc02 	lsl.w	ip, r1, r2
    8e7c:	f1c2 0220 	rsb	r2, r2, #32
    8e80:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    8e84:	fa21 f202 	lsr.w	r2, r1, r2
    8e88:	eb43 0002 	adc.w	r0, r3, r2
    8e8c:	bf08      	it	eq
    8e8e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    8e92:	4770      	bx	lr

00008e94 <__aeabi_uldivmod>:
    8e94:	b953      	cbnz	r3, 8eac <__aeabi_uldivmod+0x18>
    8e96:	b94a      	cbnz	r2, 8eac <__aeabi_uldivmod+0x18>
    8e98:	2900      	cmp	r1, #0
    8e9a:	bf08      	it	eq
    8e9c:	2800      	cmpeq	r0, #0
    8e9e:	bf1c      	itt	ne
    8ea0:	f04f 31ff 	movne.w	r1, #4294967295
    8ea4:	f04f 30ff 	movne.w	r0, #4294967295
    8ea8:	f000 b82a 	b.w	8f00 <__aeabi_idiv0>
    8eac:	f1ad 0c08 	sub.w	ip, sp, #8
    8eb0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8eb4:	f000 f85d 	bl	8f72 <__udivmoddi4>
    8eb8:	f8dd e004 	ldr.w	lr, [sp, #4]
    8ebc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8ec0:	b004      	add	sp, #16
    8ec2:	4770      	bx	lr

00008ec4 <__aeabi_d2ulz>:
    8ec4:	b5d0      	push	{r4, r6, r7, lr}
    8ec6:	2200      	movs	r2, #0
    8ec8:	4b0b      	ldr	r3, [pc, #44]	; (8ef8 <__aeabi_d2ulz+0x34>)
    8eca:	4606      	mov	r6, r0
    8ecc:	460f      	mov	r7, r1
    8ece:	f7ff fbab 	bl	8628 <__aeabi_dmul>
    8ed2:	f000 f817 	bl	8f04 <__aeabi_d2uiz>
    8ed6:	4604      	mov	r4, r0
    8ed8:	f7ff fb2c 	bl	8534 <__aeabi_ui2d>
    8edc:	2200      	movs	r2, #0
    8ede:	4b07      	ldr	r3, [pc, #28]	; (8efc <__aeabi_d2ulz+0x38>)
    8ee0:	f7ff fba2 	bl	8628 <__aeabi_dmul>
    8ee4:	4602      	mov	r2, r0
    8ee6:	460b      	mov	r3, r1
    8ee8:	4630      	mov	r0, r6
    8eea:	4639      	mov	r1, r7
    8eec:	f7ff f9e4 	bl	82b8 <__aeabi_dsub>
    8ef0:	f000 f808 	bl	8f04 <__aeabi_d2uiz>
    8ef4:	4621      	mov	r1, r4
    8ef6:	bdd0      	pop	{r4, r6, r7, pc}
    8ef8:	3df00000 	.word	0x3df00000
    8efc:	41f00000 	.word	0x41f00000

00008f00 <__aeabi_idiv0>:
    8f00:	4770      	bx	lr
    8f02:	bf00      	nop

00008f04 <__aeabi_d2uiz>:
    8f04:	004a      	lsls	r2, r1, #1
    8f06:	d211      	bcs.n	8f2c <__aeabi_d2uiz+0x28>
    8f08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    8f0c:	d211      	bcs.n	8f32 <__aeabi_d2uiz+0x2e>
    8f0e:	d50d      	bpl.n	8f2c <__aeabi_d2uiz+0x28>
    8f10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    8f14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    8f18:	d40e      	bmi.n	8f38 <__aeabi_d2uiz+0x34>
    8f1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    8f1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    8f22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    8f26:	fa23 f002 	lsr.w	r0, r3, r2
    8f2a:	4770      	bx	lr
    8f2c:	f04f 0000 	mov.w	r0, #0
    8f30:	4770      	bx	lr
    8f32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    8f36:	d102      	bne.n	8f3e <__aeabi_d2uiz+0x3a>
    8f38:	f04f 30ff 	mov.w	r0, #4294967295
    8f3c:	4770      	bx	lr
    8f3e:	f04f 0000 	mov.w	r0, #0
    8f42:	4770      	bx	lr

00008f44 <__aeabi_d2lz>:
    8f44:	b538      	push	{r3, r4, r5, lr}
    8f46:	2200      	movs	r2, #0
    8f48:	2300      	movs	r3, #0
    8f4a:	4604      	mov	r4, r0
    8f4c:	460d      	mov	r5, r1
    8f4e:	f7ff fddd 	bl	8b0c <__aeabi_dcmplt>
    8f52:	b928      	cbnz	r0, 8f60 <__aeabi_d2lz+0x1c>
    8f54:	4620      	mov	r0, r4
    8f56:	4629      	mov	r1, r5
    8f58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8f5c:	f7ff bfb2 	b.w	8ec4 <__aeabi_d2ulz>
    8f60:	4620      	mov	r0, r4
    8f62:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
    8f66:	f7ff ffad 	bl	8ec4 <__aeabi_d2ulz>
    8f6a:	4240      	negs	r0, r0
    8f6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8f70:	bd38      	pop	{r3, r4, r5, pc}

00008f72 <__udivmoddi4>:
    8f72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8f76:	4686      	mov	lr, r0
    8f78:	468c      	mov	ip, r1
    8f7a:	4608      	mov	r0, r1
    8f7c:	9e08      	ldr	r6, [sp, #32]
    8f7e:	4615      	mov	r5, r2
    8f80:	4674      	mov	r4, lr
    8f82:	4619      	mov	r1, r3
    8f84:	2b00      	cmp	r3, #0
    8f86:	f040 80c1 	bne.w	910c <__udivmoddi4+0x19a>
    8f8a:	4285      	cmp	r5, r0
    8f8c:	fab2 f282 	clz	r2, r2
    8f90:	d945      	bls.n	901e <__udivmoddi4+0xac>
    8f92:	b14a      	cbz	r2, 8fa8 <__udivmoddi4+0x36>
    8f94:	f1c2 0320 	rsb	r3, r2, #32
    8f98:	fa00 fc02 	lsl.w	ip, r0, r2
    8f9c:	4095      	lsls	r5, r2
    8f9e:	4094      	lsls	r4, r2
    8fa0:	fa2e f303 	lsr.w	r3, lr, r3
    8fa4:	ea43 0c0c 	orr.w	ip, r3, ip
    8fa8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    8fac:	b2a8      	uxth	r0, r5
    8fae:	0c23      	lsrs	r3, r4, #16
    8fb0:	fbbc f8fe 	udiv	r8, ip, lr
    8fb4:	fb0e cc18 	mls	ip, lr, r8, ip
    8fb8:	fb08 f900 	mul.w	r9, r8, r0
    8fbc:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    8fc0:	4599      	cmp	r9, r3
    8fc2:	d928      	bls.n	9016 <__udivmoddi4+0xa4>
    8fc4:	18eb      	adds	r3, r5, r3
    8fc6:	f108 37ff 	add.w	r7, r8, #4294967295
    8fca:	d204      	bcs.n	8fd6 <__udivmoddi4+0x64>
    8fcc:	4599      	cmp	r9, r3
    8fce:	d902      	bls.n	8fd6 <__udivmoddi4+0x64>
    8fd0:	f1a8 0702 	sub.w	r7, r8, #2
    8fd4:	442b      	add	r3, r5
    8fd6:	eba3 0309 	sub.w	r3, r3, r9
    8fda:	b2a4      	uxth	r4, r4
    8fdc:	fbb3 fcfe 	udiv	ip, r3, lr
    8fe0:	fb0e 331c 	mls	r3, lr, ip, r3
    8fe4:	fb0c f000 	mul.w	r0, ip, r0
    8fe8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    8fec:	42a0      	cmp	r0, r4
    8fee:	d914      	bls.n	901a <__udivmoddi4+0xa8>
    8ff0:	192c      	adds	r4, r5, r4
    8ff2:	f10c 33ff 	add.w	r3, ip, #4294967295
    8ff6:	d204      	bcs.n	9002 <__udivmoddi4+0x90>
    8ff8:	42a0      	cmp	r0, r4
    8ffa:	d902      	bls.n	9002 <__udivmoddi4+0x90>
    8ffc:	f1ac 0302 	sub.w	r3, ip, #2
    9000:	442c      	add	r4, r5
    9002:	1a24      	subs	r4, r4, r0
    9004:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    9008:	b11e      	cbz	r6, 9012 <__udivmoddi4+0xa0>
    900a:	40d4      	lsrs	r4, r2
    900c:	2300      	movs	r3, #0
    900e:	6034      	str	r4, [r6, #0]
    9010:	6073      	str	r3, [r6, #4]
    9012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9016:	4647      	mov	r7, r8
    9018:	e7dd      	b.n	8fd6 <__udivmoddi4+0x64>
    901a:	4663      	mov	r3, ip
    901c:	e7f1      	b.n	9002 <__udivmoddi4+0x90>
    901e:	bb92      	cbnz	r2, 9086 <__udivmoddi4+0x114>
    9020:	1b43      	subs	r3, r0, r5
    9022:	2101      	movs	r1, #1
    9024:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    9028:	b2af      	uxth	r7, r5
    902a:	0c20      	lsrs	r0, r4, #16
    902c:	fbb3 fcfe 	udiv	ip, r3, lr
    9030:	fb0e 331c 	mls	r3, lr, ip, r3
    9034:	fb0c f807 	mul.w	r8, ip, r7
    9038:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    903c:	4598      	cmp	r8, r3
    903e:	d961      	bls.n	9104 <__udivmoddi4+0x192>
    9040:	18eb      	adds	r3, r5, r3
    9042:	f10c 30ff 	add.w	r0, ip, #4294967295
    9046:	d204      	bcs.n	9052 <__udivmoddi4+0xe0>
    9048:	4598      	cmp	r8, r3
    904a:	d902      	bls.n	9052 <__udivmoddi4+0xe0>
    904c:	f1ac 0002 	sub.w	r0, ip, #2
    9050:	442b      	add	r3, r5
    9052:	eba3 0308 	sub.w	r3, r3, r8
    9056:	b2a4      	uxth	r4, r4
    9058:	fbb3 fcfe 	udiv	ip, r3, lr
    905c:	fb0e 331c 	mls	r3, lr, ip, r3
    9060:	fb0c f707 	mul.w	r7, ip, r7
    9064:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    9068:	42a7      	cmp	r7, r4
    906a:	d94d      	bls.n	9108 <__udivmoddi4+0x196>
    906c:	192c      	adds	r4, r5, r4
    906e:	f10c 33ff 	add.w	r3, ip, #4294967295
    9072:	d204      	bcs.n	907e <__udivmoddi4+0x10c>
    9074:	42a7      	cmp	r7, r4
    9076:	d902      	bls.n	907e <__udivmoddi4+0x10c>
    9078:	f1ac 0302 	sub.w	r3, ip, #2
    907c:	442c      	add	r4, r5
    907e:	1be4      	subs	r4, r4, r7
    9080:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    9084:	e7c0      	b.n	9008 <__udivmoddi4+0x96>
    9086:	f1c2 0320 	rsb	r3, r2, #32
    908a:	4095      	lsls	r5, r2
    908c:	4094      	lsls	r4, r2
    908e:	fa20 f103 	lsr.w	r1, r0, r3
    9092:	fa2e f303 	lsr.w	r3, lr, r3
    9096:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    909a:	4090      	lsls	r0, r2
    909c:	b2af      	uxth	r7, r5
    909e:	4303      	orrs	r3, r0
    90a0:	fbb1 fcfe 	udiv	ip, r1, lr
    90a4:	fb0e 101c 	mls	r0, lr, ip, r1
    90a8:	0c19      	lsrs	r1, r3, #16
    90aa:	fb0c f807 	mul.w	r8, ip, r7
    90ae:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    90b2:	4588      	cmp	r8, r1
    90b4:	d922      	bls.n	90fc <__udivmoddi4+0x18a>
    90b6:	1869      	adds	r1, r5, r1
    90b8:	f10c 30ff 	add.w	r0, ip, #4294967295
    90bc:	d204      	bcs.n	90c8 <__udivmoddi4+0x156>
    90be:	4588      	cmp	r8, r1
    90c0:	d902      	bls.n	90c8 <__udivmoddi4+0x156>
    90c2:	f1ac 0002 	sub.w	r0, ip, #2
    90c6:	4429      	add	r1, r5
    90c8:	eba1 0108 	sub.w	r1, r1, r8
    90cc:	b29b      	uxth	r3, r3
    90ce:	fbb1 fcfe 	udiv	ip, r1, lr
    90d2:	fb0e 111c 	mls	r1, lr, ip, r1
    90d6:	fb0c f707 	mul.w	r7, ip, r7
    90da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    90de:	429f      	cmp	r7, r3
    90e0:	d90e      	bls.n	9100 <__udivmoddi4+0x18e>
    90e2:	18eb      	adds	r3, r5, r3
    90e4:	f10c 31ff 	add.w	r1, ip, #4294967295
    90e8:	d204      	bcs.n	90f4 <__udivmoddi4+0x182>
    90ea:	429f      	cmp	r7, r3
    90ec:	d902      	bls.n	90f4 <__udivmoddi4+0x182>
    90ee:	f1ac 0102 	sub.w	r1, ip, #2
    90f2:	442b      	add	r3, r5
    90f4:	1bdb      	subs	r3, r3, r7
    90f6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    90fa:	e793      	b.n	9024 <__udivmoddi4+0xb2>
    90fc:	4660      	mov	r0, ip
    90fe:	e7e3      	b.n	90c8 <__udivmoddi4+0x156>
    9100:	4661      	mov	r1, ip
    9102:	e7f7      	b.n	90f4 <__udivmoddi4+0x182>
    9104:	4660      	mov	r0, ip
    9106:	e7a4      	b.n	9052 <__udivmoddi4+0xe0>
    9108:	4663      	mov	r3, ip
    910a:	e7b8      	b.n	907e <__udivmoddi4+0x10c>
    910c:	4283      	cmp	r3, r0
    910e:	d906      	bls.n	911e <__udivmoddi4+0x1ac>
    9110:	b916      	cbnz	r6, 9118 <__udivmoddi4+0x1a6>
    9112:	2100      	movs	r1, #0
    9114:	4608      	mov	r0, r1
    9116:	e77c      	b.n	9012 <__udivmoddi4+0xa0>
    9118:	e9c6 e000 	strd	lr, r0, [r6]
    911c:	e7f9      	b.n	9112 <__udivmoddi4+0x1a0>
    911e:	fab3 f783 	clz	r7, r3
    9122:	b98f      	cbnz	r7, 9148 <__udivmoddi4+0x1d6>
    9124:	4283      	cmp	r3, r0
    9126:	d301      	bcc.n	912c <__udivmoddi4+0x1ba>
    9128:	4572      	cmp	r2, lr
    912a:	d808      	bhi.n	913e <__udivmoddi4+0x1cc>
    912c:	ebbe 0402 	subs.w	r4, lr, r2
    9130:	eb60 0303 	sbc.w	r3, r0, r3
    9134:	2001      	movs	r0, #1
    9136:	469c      	mov	ip, r3
    9138:	b91e      	cbnz	r6, 9142 <__udivmoddi4+0x1d0>
    913a:	2100      	movs	r1, #0
    913c:	e769      	b.n	9012 <__udivmoddi4+0xa0>
    913e:	4638      	mov	r0, r7
    9140:	e7fa      	b.n	9138 <__udivmoddi4+0x1c6>
    9142:	e9c6 4c00 	strd	r4, ip, [r6]
    9146:	e7f8      	b.n	913a <__udivmoddi4+0x1c8>
    9148:	f1c7 0c20 	rsb	ip, r7, #32
    914c:	40bb      	lsls	r3, r7
    914e:	fa0e f507 	lsl.w	r5, lr, r7
    9152:	fa22 f40c 	lsr.w	r4, r2, ip
    9156:	fa2e f10c 	lsr.w	r1, lr, ip
    915a:	40ba      	lsls	r2, r7
    915c:	431c      	orrs	r4, r3
    915e:	fa20 f30c 	lsr.w	r3, r0, ip
    9162:	40b8      	lsls	r0, r7
    9164:	ea4f 4914 	mov.w	r9, r4, lsr #16
    9168:	4301      	orrs	r1, r0
    916a:	fa1f fe84 	uxth.w	lr, r4
    916e:	fbb3 f8f9 	udiv	r8, r3, r9
    9172:	fb09 3018 	mls	r0, r9, r8, r3
    9176:	0c0b      	lsrs	r3, r1, #16
    9178:	fb08 fa0e 	mul.w	sl, r8, lr
    917c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    9180:	459a      	cmp	sl, r3
    9182:	d940      	bls.n	9206 <__udivmoddi4+0x294>
    9184:	18e3      	adds	r3, r4, r3
    9186:	f108 30ff 	add.w	r0, r8, #4294967295
    918a:	d204      	bcs.n	9196 <__udivmoddi4+0x224>
    918c:	459a      	cmp	sl, r3
    918e:	d902      	bls.n	9196 <__udivmoddi4+0x224>
    9190:	f1a8 0002 	sub.w	r0, r8, #2
    9194:	4423      	add	r3, r4
    9196:	eba3 030a 	sub.w	r3, r3, sl
    919a:	b289      	uxth	r1, r1
    919c:	fbb3 f8f9 	udiv	r8, r3, r9
    91a0:	fb09 3318 	mls	r3, r9, r8, r3
    91a4:	fb08 fe0e 	mul.w	lr, r8, lr
    91a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    91ac:	458e      	cmp	lr, r1
    91ae:	d92c      	bls.n	920a <__udivmoddi4+0x298>
    91b0:	1861      	adds	r1, r4, r1
    91b2:	f108 33ff 	add.w	r3, r8, #4294967295
    91b6:	d204      	bcs.n	91c2 <__udivmoddi4+0x250>
    91b8:	458e      	cmp	lr, r1
    91ba:	d902      	bls.n	91c2 <__udivmoddi4+0x250>
    91bc:	f1a8 0302 	sub.w	r3, r8, #2
    91c0:	4421      	add	r1, r4
    91c2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    91c6:	eba1 010e 	sub.w	r1, r1, lr
    91ca:	fba0 9802 	umull	r9, r8, r0, r2
    91ce:	4541      	cmp	r1, r8
    91d0:	46ce      	mov	lr, r9
    91d2:	4643      	mov	r3, r8
    91d4:	d302      	bcc.n	91dc <__udivmoddi4+0x26a>
    91d6:	d106      	bne.n	91e6 <__udivmoddi4+0x274>
    91d8:	454d      	cmp	r5, r9
    91da:	d204      	bcs.n	91e6 <__udivmoddi4+0x274>
    91dc:	3801      	subs	r0, #1
    91de:	ebb9 0e02 	subs.w	lr, r9, r2
    91e2:	eb68 0304 	sbc.w	r3, r8, r4
    91e6:	2e00      	cmp	r6, #0
    91e8:	d0a7      	beq.n	913a <__udivmoddi4+0x1c8>
    91ea:	ebb5 020e 	subs.w	r2, r5, lr
    91ee:	eb61 0103 	sbc.w	r1, r1, r3
    91f2:	fa01 fc0c 	lsl.w	ip, r1, ip
    91f6:	fa22 f307 	lsr.w	r3, r2, r7
    91fa:	40f9      	lsrs	r1, r7
    91fc:	ea4c 0303 	orr.w	r3, ip, r3
    9200:	e9c6 3100 	strd	r3, r1, [r6]
    9204:	e799      	b.n	913a <__udivmoddi4+0x1c8>
    9206:	4640      	mov	r0, r8
    9208:	e7c5      	b.n	9196 <__udivmoddi4+0x224>
    920a:	4643      	mov	r3, r8
    920c:	e7d9      	b.n	91c2 <__udivmoddi4+0x250>

0000920e <strcmp>:
    920e:	f810 2b01 	ldrb.w	r2, [r0], #1
    9212:	f811 3b01 	ldrb.w	r3, [r1], #1
    9216:	2a01      	cmp	r2, #1
    9218:	bf28      	it	cs
    921a:	429a      	cmpcs	r2, r3
    921c:	d0f7      	beq.n	920e <strcmp>
    921e:	1ad0      	subs	r0, r2, r3
    9220:	4770      	bx	lr

00009222 <strlen>:
    9222:	4603      	mov	r3, r0
    9224:	f813 2b01 	ldrb.w	r2, [r3], #1
    9228:	2a00      	cmp	r2, #0
    922a:	d1fb      	bne.n	9224 <strlen+0x2>
    922c:	1a18      	subs	r0, r3, r0
    922e:	3801      	subs	r0, #1
    9230:	4770      	bx	lr
    9232:	0000      	movs	r0, r0
    9234:	0000      	movs	r0, r0
	...

00009238 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
    9238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    923c:	4606      	mov	r6, r0
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
    923e:	460c      	mov	r4, r1
{
    9240:	b092      	sub	sp, #72	; 0x48
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
    9242:	2900      	cmp	r1, #0
    9244:	f000 80bd 	beq.w	93c2 <parse_value+0x18a>
    9248:	680f      	ldr	r7, [r1, #0]
    924a:	2f00      	cmp	r7, #0
    924c:	f000 80b9 	beq.w	93c2 <parse_value+0x18a>
        return false; /* no input */
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
    9250:	688d      	ldr	r5, [r1, #8]
    9252:	f8d1 8004 	ldr.w	r8, [r1, #4]
    9256:	f105 0904 	add.w	r9, r5, #4
    925a:	45c1      	cmp	r9, r8
    925c:	d80a      	bhi.n	9274 <parse_value+0x3c>
    925e:	2204      	movs	r2, #4
    9260:	49ab      	ldr	r1, [pc, #684]	; (9510 <parse_value+0x2d8>)
    9262:	1978      	adds	r0, r7, r5
    9264:	f02d faf4 	bl	36850 <strncmp>
    9268:	b9a8      	cbnz	r0, 9296 <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
    926a:	2304      	movs	r3, #4
    926c:	60f3      	str	r3, [r6, #12]
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
    {
        item->type = cJSON_True;
        item->valueint = 1;
        input_buffer->offset += 4;
    926e:	68a3      	ldr	r3, [r4, #8]
    9270:	3304      	adds	r3, #4
        return true;
    9272:	e01d      	b.n	92b0 <parse_value+0x78>
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
    9274:	1d6b      	adds	r3, r5, #5
    9276:	4598      	cmp	r8, r3
    9278:	d210      	bcs.n	929c <parse_value+0x64>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
    927a:	4545      	cmp	r5, r8
    927c:	f080 80a1 	bcs.w	93c2 <parse_value+0x18a>
    9280:	5d7b      	ldrb	r3, [r7, r5]
    9282:	1978      	adds	r0, r7, r5
    9284:	2b22      	cmp	r3, #34	; 0x22
    9286:	d124      	bne.n	92d2 <parse_value+0x9a>
    {
        return parse_string(item, input_buffer);
    9288:	4621      	mov	r1, r4
    928a:	4630      	mov	r0, r6
    {
        return parse_object(item, input_buffer);
    }

    return false;
}
    928c:	b012      	add	sp, #72	; 0x48
    928e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        return parse_string(item, input_buffer);
    9292:	f003 bebd 	b.w	d010 <parse_string>
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
    9296:	1d6b      	adds	r3, r5, #5
    9298:	4598      	cmp	r8, r3
    929a:	d30e      	bcc.n	92ba <parse_value+0x82>
    929c:	2205      	movs	r2, #5
    929e:	499d      	ldr	r1, [pc, #628]	; (9514 <parse_value+0x2dc>)
    92a0:	1978      	adds	r0, r7, r5
    92a2:	f02d fad5 	bl	36850 <strncmp>
    92a6:	b930      	cbnz	r0, 92b6 <parse_value+0x7e>
        item->type = cJSON_False;
    92a8:	2301      	movs	r3, #1
    92aa:	60f3      	str	r3, [r6, #12]
        input_buffer->offset += 5;
    92ac:	68a3      	ldr	r3, [r4, #8]
    92ae:	3305      	adds	r3, #5
        return true;
    92b0:	2001      	movs	r0, #1
        input_buffer->offset += 4;
    92b2:	60a3      	str	r3, [r4, #8]
    92b4:	e086      	b.n	93c4 <parse_value+0x18c>
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
    92b6:	45c1      	cmp	r9, r8
    92b8:	d8df      	bhi.n	927a <parse_value+0x42>
    92ba:	2204      	movs	r2, #4
    92bc:	4996      	ldr	r1, [pc, #600]	; (9518 <parse_value+0x2e0>)
    92be:	1978      	adds	r0, r7, r5
    92c0:	f02d fac6 	bl	36850 <strncmp>
    92c4:	2800      	cmp	r0, #0
    92c6:	d1d8      	bne.n	927a <parse_value+0x42>
        item->type = cJSON_True;
    92c8:	2302      	movs	r3, #2
    92ca:	60f3      	str	r3, [r6, #12]
        item->valueint = 1;
    92cc:	2301      	movs	r3, #1
    92ce:	6173      	str	r3, [r6, #20]
    92d0:	e7cd      	b.n	926e <parse_value+0x36>
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
    92d2:	2b2d      	cmp	r3, #45	; 0x2d
    92d4:	d003      	beq.n	92de <parse_value+0xa6>
    92d6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    92da:	2a09      	cmp	r2, #9
    92dc:	d853      	bhi.n	9386 <parse_value+0x14e>
    unsigned char *after_end = NULL;
    92de:	2300      	movs	r3, #0
    92e0:	f10d 0c08 	add.w	ip, sp, #8
    92e4:	4667      	mov	r7, ip
        switch (buffer_at_offset(input_buffer)[i])
    92e6:	f04f 0e01 	mov.w	lr, #1
    92ea:	eba8 0505 	sub.w	r5, r8, r5
    92ee:	f8df 822c 	ldr.w	r8, [pc, #556]	; 951c <parse_value+0x2e4>
    unsigned char *after_end = NULL;
    92f2:	9301      	str	r3, [sp, #4]
        switch (buffer_at_offset(input_buffer)[i])
    92f4:	f810 2b01 	ldrb.w	r2, [r0], #1
    92f8:	2a45      	cmp	r2, #69	; 0x45
    92fa:	d83c      	bhi.n	9376 <parse_value+0x13e>
    92fc:	2a2a      	cmp	r2, #42	; 0x2a
    92fe:	d910      	bls.n	9322 <parse_value+0xea>
    9300:	f1a2 012b 	sub.w	r1, r2, #43	; 0x2b
    9304:	b2c9      	uxtb	r1, r1
    9306:	fa0e f101 	lsl.w	r1, lr, r1
    930a:	ea11 0f08 	tst.w	r1, r8
    930e:	d101      	bne.n	9314 <parse_value+0xdc>
    9310:	2a2e      	cmp	r2, #46	; 0x2e
    9312:	d106      	bne.n	9322 <parse_value+0xea>
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
    9314:	3301      	adds	r3, #1
    9316:	2b3f      	cmp	r3, #63	; 0x3f
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
    9318:	f80c 2b01 	strb.w	r2, [ip], #1
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
    931c:	d001      	beq.n	9322 <parse_value+0xea>
    931e:	42ab      	cmp	r3, r5
    9320:	d1e8      	bne.n	92f4 <parse_value+0xbc>
    number_c_string[i] = '\0';
    9322:	2500      	movs	r5, #0
    9324:	3348      	adds	r3, #72	; 0x48
    9326:	446b      	add	r3, sp
    number = strtod((const char*)number_c_string, (char**)&after_end);
    9328:	4638      	mov	r0, r7
    932a:	a901      	add	r1, sp, #4
    number_c_string[i] = '\0';
    932c:	f803 5c40 	strb.w	r5, [r3, #-64]
    number = strtod((const char*)number_c_string, (char**)&after_end);
    9330:	f023 fd50 	bl	2cdd4 <strtod>
    if (number_c_string == after_end)
    9334:	f8dd a004 	ldr.w	sl, [sp, #4]
    number = strtod((const char*)number_c_string, (char**)&after_end);
    9338:	4680      	mov	r8, r0
    if (number_c_string == after_end)
    933a:	45ba      	cmp	sl, r7
    number = strtod((const char*)number_c_string, (char**)&after_end);
    933c:	4689      	mov	r9, r1
    if (number_c_string == after_end)
    933e:	d040      	beq.n	93c2 <parse_value+0x18a>
    if (number >= INT_MAX)
    9340:	a371      	add	r3, pc, #452	; (adr r3, 9508 <parse_value+0x2d0>)
    9342:	e9d3 2300 	ldrd	r2, r3, [r3]
    9346:	f7ff fbf5 	bl	8b34 <__aeabi_dcmpge>
    934a:	b9b0      	cbnz	r0, 937a <parse_value+0x142>
    else if (number <= (double)INT_MIN)
    934c:	2200      	movs	r2, #0
    934e:	4640      	mov	r0, r8
    9350:	4649      	mov	r1, r9
    9352:	4b73      	ldr	r3, [pc, #460]	; (9520 <parse_value+0x2e8>)
    9354:	f7ff fbe4 	bl	8b20 <__aeabi_dcmple>
    9358:	b990      	cbnz	r0, 9380 <parse_value+0x148>
        item->valueint = (int)number;
    935a:	4640      	mov	r0, r8
    935c:	4649      	mov	r1, r9
    935e:	f7ff fc13 	bl	8b88 <__aeabi_d2iz>
    item->type = cJSON_Number;
    9362:	2308      	movs	r3, #8
    item->valuedouble = number;
    9364:	e9c6 8906 	strd	r8, r9, [r6, #24]
        item->valueint = INT_MAX;
    9368:	6170      	str	r0, [r6, #20]
    item->type = cJSON_Number;
    936a:	60f3      	str	r3, [r6, #12]
    input_buffer->offset += (size_t)(after_end - number_c_string);
    936c:	68a3      	ldr	r3, [r4, #8]
    936e:	ebaa 0a07 	sub.w	sl, sl, r7
    9372:	4453      	add	r3, sl
    9374:	e79c      	b.n	92b0 <parse_value+0x78>
        switch (buffer_at_offset(input_buffer)[i])
    9376:	2a65      	cmp	r2, #101	; 0x65
    9378:	e7cb      	b.n	9312 <parse_value+0xda>
    937a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    937e:	e7f0      	b.n	9362 <parse_value+0x12a>
    9380:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    9384:	e7ed      	b.n	9362 <parse_value+0x12a>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
    9386:	2b5b      	cmp	r3, #91	; 0x5b
    9388:	d158      	bne.n	943c <parse_value+0x204>
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
    cJSON *head = NULL; /* head of the linked list */
    cJSON *current_item = NULL;

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
    938a:	f8d4 900c 	ldr.w	r9, [r4, #12]
    938e:	f5b9 7f7a 	cmp.w	r9, #1000	; 0x3e8
    9392:	d216      	bcs.n	93c2 <parse_value+0x18a>
    {
        return false; /* to deeply nested */
    }
    input_buffer->depth++;
    9394:	f109 0301 	add.w	r3, r9, #1
    9398:	60e3      	str	r3, [r4, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
    939a:	5d7b      	ldrb	r3, [r7, r5]
    939c:	2b5b      	cmp	r3, #91	; 0x5b
    939e:	d110      	bne.n	93c2 <parse_value+0x18a>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
    93a0:	3501      	adds	r5, #1
    buffer_skip_whitespace(input_buffer);
    93a2:	4620      	mov	r0, r4
    input_buffer->offset++;
    93a4:	60a5      	str	r5, [r4, #8]
    buffer_skip_whitespace(input_buffer);
    93a6:	f025 fcfa 	bl	2ed9e <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
    93aa:	68a3      	ldr	r3, [r4, #8]
    93ac:	4598      	cmp	r8, r3
    93ae:	d906      	bls.n	93be <parse_value+0x186>
    93b0:	5cfa      	ldrb	r2, [r7, r3]
    93b2:	2a5d      	cmp	r2, #93	; 0x5d
    93b4:	d109      	bne.n	93ca <parse_value+0x192>
    cJSON *head = NULL; /* head of the linked list */
    93b6:	2700      	movs	r7, #0
    {
        goto fail; /* expected end of array */
    }

success:
    input_buffer->depth--;
    93b8:	f8c4 900c 	str.w	r9, [r4, #12]

    if (head != NULL) {
    93bc:	e036      	b.n	942c <parse_value+0x1f4>
        input_buffer->offset--;
    93be:	3b01      	subs	r3, #1
    93c0:	60a3      	str	r3, [r4, #8]
        return false; /* to deeply nested */
    93c2:	2000      	movs	r0, #0
}
    93c4:	b012      	add	sp, #72	; 0x48
    93c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cJSON *current_item = NULL;
    93ca:	2500      	movs	r5, #0
    cJSON *head = NULL; /* head of the linked list */
    93cc:	462f      	mov	r7, r5
    input_buffer->offset--;
    93ce:	3b01      	subs	r3, #1
    93d0:	60a3      	str	r3, [r4, #8]
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
    93d2:	6920      	ldr	r0, [r4, #16]
    93d4:	f025 fcfa 	bl	2edcc <cJSON_New_Item.isra.0>
        if (new_item == NULL)
    93d8:	46a8      	mov	r8, r5
    93da:	4605      	mov	r5, r0
    93dc:	2800      	cmp	r0, #0
    93de:	f000 80a3 	beq.w	9528 <parse_value+0x2f0>
        if (head == NULL)
    93e2:	b34f      	cbz	r7, 9438 <parse_value+0x200>
            current_item->next = new_item;
    93e4:	f8c8 0000 	str.w	r0, [r8]
            new_item->prev = current_item;
    93e8:	f8c0 8004 	str.w	r8, [r0, #4]
        input_buffer->offset++;
    93ec:	68a3      	ldr	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
    93ee:	4620      	mov	r0, r4
        input_buffer->offset++;
    93f0:	3301      	adds	r3, #1
    93f2:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
    93f4:	f025 fcd3 	bl	2ed9e <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
    93f8:	4621      	mov	r1, r4
    93fa:	4628      	mov	r0, r5
    93fc:	f7ff ff1c 	bl	9238 <parse_value>
    9400:	2800      	cmp	r0, #0
    9402:	f000 8091 	beq.w	9528 <parse_value+0x2f0>
        buffer_skip_whitespace(input_buffer);
    9406:	4620      	mov	r0, r4
    9408:	f025 fcc9 	bl	2ed9e <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
    940c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    9410:	4293      	cmp	r3, r2
    9412:	f080 808c 	bcs.w	952e <parse_value+0x2f6>
    9416:	6822      	ldr	r2, [r4, #0]
    9418:	5cd3      	ldrb	r3, [r2, r3]
    941a:	2b2c      	cmp	r3, #44	; 0x2c
    941c:	d0d9      	beq.n	93d2 <parse_value+0x19a>
    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
    941e:	2b5d      	cmp	r3, #93	; 0x5d
    9420:	f040 8085 	bne.w	952e <parse_value+0x2f6>
    input_buffer->depth--;
    9424:	68e3      	ldr	r3, [r4, #12]
    9426:	3b01      	subs	r3, #1
    9428:	60e3      	str	r3, [r4, #12]
        head->prev = current_item;
    942a:	607d      	str	r5, [r7, #4]
    }

    item->type = cJSON_Array;
    942c:	2320      	movs	r3, #32
    if (head != NULL) {
        head->prev = current_item;
    }

    item->type = cJSON_Object;
    item->child = head;
    942e:	e9c6 7302 	strd	r7, r3, [r6, #8]

    input_buffer->offset++;
    9432:	68a3      	ldr	r3, [r4, #8]
    9434:	3301      	adds	r3, #1
    return true;
    9436:	e73b      	b.n	92b0 <parse_value+0x78>
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
    9438:	4607      	mov	r7, r0
    943a:	e7d7      	b.n	93ec <parse_value+0x1b4>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
    943c:	2b7b      	cmp	r3, #123	; 0x7b
    943e:	d1c0      	bne.n	93c2 <parse_value+0x18a>
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
    9440:	f8d4 900c 	ldr.w	r9, [r4, #12]
    9444:	f5b9 7f7a 	cmp.w	r9, #1000	; 0x3e8
    9448:	d2bb      	bcs.n	93c2 <parse_value+0x18a>
    input_buffer->depth++;
    944a:	f109 0301 	add.w	r3, r9, #1
    944e:	60e3      	str	r3, [r4, #12]
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
    9450:	5d7b      	ldrb	r3, [r7, r5]
    9452:	2b7b      	cmp	r3, #123	; 0x7b
    9454:	d1b5      	bne.n	93c2 <parse_value+0x18a>
    input_buffer->offset++;
    9456:	3501      	adds	r5, #1
    buffer_skip_whitespace(input_buffer);
    9458:	4620      	mov	r0, r4
    input_buffer->offset++;
    945a:	60a5      	str	r5, [r4, #8]
    buffer_skip_whitespace(input_buffer);
    945c:	f025 fc9f 	bl	2ed9e <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
    9460:	68a3      	ldr	r3, [r4, #8]
    9462:	4598      	cmp	r8, r3
    9464:	d9ab      	bls.n	93be <parse_value+0x186>
    9466:	5cfa      	ldrb	r2, [r7, r3]
    9468:	2a7d      	cmp	r2, #125	; 0x7d
    946a:	d103      	bne.n	9474 <parse_value+0x23c>
    cJSON *head = NULL; /* linked list head */
    946c:	2700      	movs	r7, #0
    input_buffer->depth--;
    946e:	f8c4 900c 	str.w	r9, [r4, #12]
    if (head != NULL) {
    9472:	e047      	b.n	9504 <parse_value+0x2cc>
    cJSON *current_item = NULL;
    9474:	2500      	movs	r5, #0
    cJSON *head = NULL; /* linked list head */
    9476:	462f      	mov	r7, r5
        current_item->valuestring = NULL;
    9478:	46a8      	mov	r8, r5
    input_buffer->offset--;
    947a:	3b01      	subs	r3, #1
    947c:	60a3      	str	r3, [r4, #8]
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
    947e:	6920      	ldr	r0, [r4, #16]
    9480:	f025 fca4 	bl	2edcc <cJSON_New_Item.isra.0>
        if (new_item == NULL)
    9484:	46a9      	mov	r9, r5
    9486:	4605      	mov	r5, r0
    9488:	2800      	cmp	r0, #0
    948a:	d04d      	beq.n	9528 <parse_value+0x2f0>
        if (head == NULL)
    948c:	2f00      	cmp	r7, #0
    948e:	d049      	beq.n	9524 <parse_value+0x2ec>
            current_item->next = new_item;
    9490:	f8c9 0000 	str.w	r0, [r9]
            new_item->prev = current_item;
    9494:	f8c0 9004 	str.w	r9, [r0, #4]
        input_buffer->offset++;
    9498:	68a3      	ldr	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
    949a:	4620      	mov	r0, r4
        input_buffer->offset++;
    949c:	3301      	adds	r3, #1
    949e:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
    94a0:	f025 fc7d 	bl	2ed9e <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
    94a4:	4621      	mov	r1, r4
    94a6:	4628      	mov	r0, r5
    94a8:	f003 fdb2 	bl	d010 <parse_string>
    94ac:	2800      	cmp	r0, #0
    94ae:	d03b      	beq.n	9528 <parse_value+0x2f0>
        buffer_skip_whitespace(input_buffer);
    94b0:	4620      	mov	r0, r4
    94b2:	f025 fc74 	bl	2ed9e <buffer_skip_whitespace>
        current_item->string = current_item->valuestring;
    94b6:	692b      	ldr	r3, [r5, #16]
        current_item->valuestring = NULL;
    94b8:	f8c5 8010 	str.w	r8, [r5, #16]
        current_item->string = current_item->valuestring;
    94bc:	622b      	str	r3, [r5, #32]
        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
    94be:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    94c2:	4293      	cmp	r3, r2
    94c4:	d230      	bcs.n	9528 <parse_value+0x2f0>
    94c6:	6822      	ldr	r2, [r4, #0]
    94c8:	5cd2      	ldrb	r2, [r2, r3]
    94ca:	2a3a      	cmp	r2, #58	; 0x3a
    94cc:	d12c      	bne.n	9528 <parse_value+0x2f0>
        input_buffer->offset++;
    94ce:	3301      	adds	r3, #1
        buffer_skip_whitespace(input_buffer);
    94d0:	4620      	mov	r0, r4
        input_buffer->offset++;
    94d2:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
    94d4:	f025 fc63 	bl	2ed9e <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
    94d8:	4621      	mov	r1, r4
    94da:	4628      	mov	r0, r5
    94dc:	f7ff feac 	bl	9238 <parse_value>
    94e0:	b310      	cbz	r0, 9528 <parse_value+0x2f0>
        buffer_skip_whitespace(input_buffer);
    94e2:	4620      	mov	r0, r4
    94e4:	f025 fc5b 	bl	2ed9e <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
    94e8:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    94ec:	4293      	cmp	r3, r2
    94ee:	d21e      	bcs.n	952e <parse_value+0x2f6>
    94f0:	6822      	ldr	r2, [r4, #0]
    94f2:	5cd3      	ldrb	r3, [r2, r3]
    94f4:	2b2c      	cmp	r3, #44	; 0x2c
    94f6:	d0c2      	beq.n	947e <parse_value+0x246>
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
    94f8:	2b7d      	cmp	r3, #125	; 0x7d
    94fa:	d118      	bne.n	952e <parse_value+0x2f6>
    input_buffer->depth--;
    94fc:	68e3      	ldr	r3, [r4, #12]
    94fe:	3b01      	subs	r3, #1
    9500:	60e3      	str	r3, [r4, #12]
        head->prev = current_item;
    9502:	607d      	str	r5, [r7, #4]
    item->type = cJSON_Object;
    9504:	2340      	movs	r3, #64	; 0x40
    9506:	e792      	b.n	942e <parse_value+0x1f6>
    9508:	ffc00000 	.word	0xffc00000
    950c:	41dfffff 	.word	0x41dfffff
    9510:	00039a28 	.word	0x00039a28
    9514:	00039a2d 	.word	0x00039a2d
    9518:	00039a33 	.word	0x00039a33
    951c:	04007fe5 	.word	0x04007fe5
    9520:	c1e00000 	.word	0xc1e00000
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
    9524:	4607      	mov	r7, r0
    9526:	e7b7      	b.n	9498 <parse_value+0x260>

fail:
    if (head != NULL)
    9528:	2f00      	cmp	r7, #0
    952a:	f43f af4a 	beq.w	93c2 <parse_value+0x18a>
    {
        cJSON_Delete(head);
    952e:	4638      	mov	r0, r7
    9530:	f003 fea2 	bl	d278 <cJSON_Delete>
    9534:	e745      	b.n	93c2 <parse_value+0x18a>
    9536:	bf00      	nop

00009538 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
    9538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    953c:	b088      	sub	sp, #32
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    953e:	4d6b      	ldr	r5, [pc, #428]	; (96ec <bt_init+0x1b4>)
{
    9540:	af00      	add	r7, sp, #0
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    9542:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
    9546:	6899      	ldr	r1, [r3, #8]
    9548:	f011 0101 	ands.w	r1, r1, #1
    954c:	d11d      	bne.n	958a <bt_init+0x52>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    954e:	f640 4003 	movw	r0, #3075	; 0xc03
    9552:	1d3a      	adds	r2, r7, #4
    9554:	f00a ff84 	bl	14460 <bt_hci_cmd_send_sync>
		if (err) {
    9558:	4604      	mov	r4, r0
    955a:	2800      	cmp	r0, #0
    955c:	f040 80c0 	bne.w	96e0 <bt_init+0x1a8>
		hci_reset_complete(rsp);
    9560:	687c      	ldr	r4, [r7, #4]
	uint8_t status = buf->data[0];
    9562:	68e3      	ldr	r3, [r4, #12]
	if (status) {
    9564:	781b      	ldrb	r3, [r3, #0]
    9566:	b96b      	cbnz	r3, 9584 <bt_init+0x4c>
		bt_scan_reset();
    9568:	f00c fc56 	bl	15e18 <bt_scan_reset>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    956c:	f105 03d4 	add.w	r3, r5, #212	; 0xd4
    9570:	e8d3 2faf 	lda	r2, [r3]
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    9574:	f002 0209 	and.w	r2, r2, #9
    9578:	e8d3 1fef 	ldaex	r1, [r3]
    957c:	e8c3 2fe0 	stlex	r0, r2, [r3]
    9580:	2800      	cmp	r0, #0
    9582:	d1f9      	bne.n	9578 <bt_init+0x40>
		net_buf_unref(rsp);
    9584:	4620      	mov	r0, r4
    9586:	f014 fe01 	bl	1e18c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    958a:	2100      	movs	r1, #0
    958c:	f241 0003 	movw	r0, #4099	; 0x1003
    9590:	1d3a      	adds	r2, r7, #4
    9592:	f00a ff65 	bl	14460 <bt_hci_cmd_send_sync>
	if (err) {
    9596:	4604      	mov	r4, r0
    9598:	2800      	cmp	r0, #0
    959a:	f040 80a1 	bne.w	96e0 <bt_init+0x1a8>
	read_local_features_complete(rsp);
    959e:	687b      	ldr	r3, [r7, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    95a0:	4e53      	ldr	r6, [pc, #332]	; (96f0 <bt_init+0x1b8>)
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
    95a2:	68da      	ldr	r2, [r3, #12]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    95a4:	f8d2 0001 	ldr.w	r0, [r2, #1]
    95a8:	f8d2 1005 	ldr.w	r1, [r2, #5]
    95ac:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
    95ae:	4618      	mov	r0, r3
    95b0:	f014 fdec 	bl	1e18c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    95b4:	4621      	mov	r1, r4
    95b6:	f241 0001 	movw	r0, #4097	; 0x1001
    95ba:	1d3a      	adds	r2, r7, #4
    95bc:	f00a ff50 	bl	14460 <bt_hci_cmd_send_sync>
	if (err) {
    95c0:	4604      	mov	r4, r0
    95c2:	2800      	cmp	r0, #0
    95c4:	f040 808c 	bne.w	96e0 <bt_init+0x1a8>
	read_local_ver_complete(rsp);
    95c8:	6878      	ldr	r0, [r7, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    95ca:	68c3      	ldr	r3, [r0, #12]
	bt_dev.hci_version = rp->hci_version;
    95cc:	785a      	ldrb	r2, [r3, #1]
    95ce:	f885 2070 	strb.w	r2, [r5, #112]	; 0x70
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    95d2:	885a      	ldrh	r2, [r3, #2]
    95d4:	f8a5 2072 	strh.w	r2, [r5, #114]	; 0x72
	bt_dev.lmp_version = rp->lmp_version;
    95d8:	791a      	ldrb	r2, [r3, #4]
    95da:	f885 2071 	strb.w	r2, [r5, #113]	; 0x71
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    95de:	f8b3 2007 	ldrh.w	r2, [r3, #7]
    95e2:	f8a5 2074 	strh.w	r2, [r5, #116]	; 0x74
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    95e6:	f8b3 3005 	ldrh.w	r3, [r3, #5]
    95ea:	f8a5 3076 	strh.w	r3, [r5, #118]	; 0x76
	net_buf_unref(rsp);
    95ee:	f014 fdcd 	bl	1e18c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    95f2:	4621      	mov	r1, r4
    95f4:	f241 0002 	movw	r0, #4098	; 0x1002
    95f8:	1d3a      	adds	r2, r7, #4
    95fa:	f00a ff31 	bl	14460 <bt_hci_cmd_send_sync>
	if (err) {
    95fe:	4604      	mov	r4, r0
    9600:	2800      	cmp	r0, #0
    9602:	d16d      	bne.n	96e0 <bt_init+0x1a8>
	read_supported_commands_complete(rsp);
    9604:	f8d7 c004 	ldr.w	ip, [r7, #4]
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
    9608:	f8dc 200c 	ldr.w	r2, [ip, #12]
	memcpy(bt_dev.supported_commands, rp->commands,
    960c:	1c53      	adds	r3, r2, #1
    960e:	3241      	adds	r2, #65	; 0x41
    9610:	4634      	mov	r4, r6
    9612:	6818      	ldr	r0, [r3, #0]
    9614:	6859      	ldr	r1, [r3, #4]
    9616:	3308      	adds	r3, #8
    9618:	c403      	stmia	r4!, {r0, r1}
    961a:	4293      	cmp	r3, r2
    961c:	4626      	mov	r6, r4
    961e:	d1f7      	bne.n	9610 <bt_init+0xd8>
	net_buf_unref(rsp);
    9620:	4660      	mov	r0, ip
    9622:	f014 fdb3 	bl	1e18c <net_buf_unref>
		err = prng_init();
    9626:	f00c fe35 	bl	16294 <prng_init>
		if (err) {
    962a:	4604      	mov	r4, r0
    962c:	2800      	cmp	r0, #0
    962e:	d157      	bne.n	96e0 <bt_init+0x1a8>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    9630:	f895 308a 	ldrb.w	r3, [r5, #138]	; 0x8a
    9634:	0699      	lsls	r1, r3, #26
    9636:	d41c      	bmi.n	9672 <bt_init+0x13a>
		LOG_WRN("Controller to host flow control not supported");
    9638:	4b2e      	ldr	r3, [pc, #184]	; (96f4 <bt_init+0x1bc>)
    963a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    963e:	61fb      	str	r3, [r7, #28]
    9640:	2302      	movs	r3, #2
    9642:	482d      	ldr	r0, [pc, #180]	; (96f8 <bt_init+0x1c0>)
    9644:	61bb      	str	r3, [r7, #24]
    9646:	f107 0218 	add.w	r2, r7, #24
    964a:	f027 fc6b 	bl	30f24 <z_log_msg_static_create.constprop.0>
	if (!BT_FEAT_LE(bt_dev.features)) {
    964e:	f895 307c 	ldrb.w	r3, [r5, #124]	; 0x7c
    9652:	065a      	lsls	r2, r3, #25
    9654:	d454      	bmi.n	9700 <bt_init+0x1c8>
		LOG_ERR("Non-LE capable controller detected!");
    9656:	4b29      	ldr	r3, [pc, #164]	; (96fc <bt_init+0x1c4>)
    9658:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    965c:	61fb      	str	r3, [r7, #28]
    965e:	2302      	movs	r3, #2
    9660:	4825      	ldr	r0, [pc, #148]	; (96f8 <bt_init+0x1c0>)
    9662:	61bb      	str	r3, [r7, #24]
    9664:	f107 0218 	add.w	r2, r7, #24
    9668:	f027 fc5c 	bl	30f24 <z_log_msg_static_create.constprop.0>
		return -ENODEV;
    966c:	f06f 0412 	mvn.w	r4, #18
    9670:	e036      	b.n	96e0 <bt_init+0x1a8>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_BUFFER_SIZE,
    9672:	2107      	movs	r1, #7
    9674:	f640 4033 	movw	r0, #3123	; 0xc33
    9678:	f00a fea4 	bl	143c4 <bt_hci_cmd_create>
	if (!buf) {
    967c:	4606      	mov	r6, r0
    967e:	2800      	cmp	r0, #0
    9680:	f000 814b 	beq.w	991a <bt_init+0x3e2>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
    9684:	2107      	movs	r1, #7
    9686:	300c      	adds	r0, #12
    9688:	f014 ff06 	bl	1e498 <net_buf_simple_add>
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
    968c:	2313      	movs	r3, #19
    968e:	f04f 0801 	mov.w	r8, #1
    9692:	7003      	strb	r3, [r0, #0]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    9694:	2306      	movs	r3, #6

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    9696:	f8c0 4002 	str.w	r4, [r0, #2]
    969a:	7184      	strb	r4, [r0, #6]
    969c:	7104      	strb	r4, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    969e:	4622      	mov	r2, r4
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
    96a0:	f880 8001 	strb.w	r8, [r0, #1]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    96a4:	70c3      	strb	r3, [r0, #3]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    96a6:	4631      	mov	r1, r6
    96a8:	f640 4033 	movw	r0, #3123	; 0xc33
    96ac:	f00a fed8 	bl	14460 <bt_hci_cmd_send_sync>
	if (err) {
    96b0:	4604      	mov	r4, r0
    96b2:	b9a8      	cbnz	r0, 96e0 <bt_init+0x1a8>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, 1);
    96b4:	4641      	mov	r1, r8
    96b6:	f640 4031 	movw	r0, #3121	; 0xc31
    96ba:	f00a fe83 	bl	143c4 <bt_hci_cmd_create>
	if (!buf) {
    96be:	4606      	mov	r6, r0
    96c0:	2800      	cmp	r0, #0
    96c2:	f000 812a 	beq.w	991a <bt_init+0x3e2>
 *
 * @return Pointer to the value added
 */
static inline uint8_t *net_buf_add_u8(struct net_buf *buf, uint8_t val)
{
	return net_buf_simple_add_u8(&buf->b, val);
    96c6:	4641      	mov	r1, r8
    96c8:	300c      	adds	r0, #12
    96ca:	f029 fd5f 	bl	3318c <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, buf, NULL);
    96ce:	4622      	mov	r2, r4
    96d0:	4631      	mov	r1, r6
    96d2:	f640 4031 	movw	r0, #3121	; 0xc31
    96d6:	f00a fec3 	bl	14460 <bt_hci_cmd_send_sync>
	if (err) {
    96da:	4604      	mov	r4, r0
    96dc:	2800      	cmp	r0, #0
    96de:	d0b6      	beq.n	964e <bt_init+0x116>
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
    96e0:	4620      	mov	r0, r4
    96e2:	3720      	adds	r7, #32
    96e4:	46bd      	mov	sp, r7
    96e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    96ea:	bf00      	nop
    96ec:	2000c580 	.word	0x2000c580
    96f0:	2000c5f8 	.word	0x2000c5f8
    96f4:	0003beb2 	.word	0x0003beb2
    96f8:	000378f0 	.word	0x000378f0
    96fc:	0003bee0 	.word	0x0003bee0
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    9700:	2100      	movs	r1, #0
    9702:	f242 0003 	movw	r0, #8195	; 0x2003
    9706:	f107 0208 	add.w	r2, r7, #8
    970a:	f00a fea9 	bl	14460 <bt_hci_cmd_send_sync>
	if (err) {
    970e:	4604      	mov	r4, r0
    9710:	2800      	cmp	r0, #0
    9712:	d1e5      	bne.n	96e0 <bt_init+0x1a8>
	read_le_features_complete(rsp);
    9714:	68bb      	ldr	r3, [r7, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    9716:	4eac      	ldr	r6, [pc, #688]	; (99c8 <bt_init+0x490>)
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
    9718:	68da      	ldr	r2, [r3, #12]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    971a:	f8d2 0001 	ldr.w	r0, [r2, #1]
    971e:	f8d2 1005 	ldr.w	r1, [r2, #5]
    9722:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
    9724:	4618      	mov	r0, r3
    9726:	f014 fd31 	bl	1e18c <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    972a:	4621      	mov	r1, r4
    972c:	f242 0002 	movw	r0, #8194	; 0x2002
    9730:	f107 0208 	add.w	r2, r7, #8
    9734:	f00a fe94 	bl	14460 <bt_hci_cmd_send_sync>
		if (err) {
    9738:	4604      	mov	r4, r0
    973a:	2800      	cmp	r0, #0
    973c:	d1d0      	bne.n	96e0 <bt_init+0x1a8>
		le_read_buffer_size_complete(rsp);
    973e:	68bc      	ldr	r4, [r7, #8]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
    9740:	68e3      	ldr	r3, [r4, #12]
	uint16_t acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    9742:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    9746:	b291      	uxth	r1, r2
	if (!acl_mtu || !rp->le_max_num) {
    9748:	b149      	cbz	r1, 975e <bt_init+0x226>
    974a:	78d9      	ldrb	r1, [r3, #3]
    974c:	b139      	cbz	r1, 975e <bt_init+0x226>
	bt_dev.le.acl_mtu = acl_mtu;
    974e:	f8a5 2104 	strh.w	r2, [r5, #260]	; 0x104
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    9752:	78da      	ldrb	r2, [r3, #3]
		union { uintptr_t x; unsigned int val; } parm2 = { .val = limit };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
    9754:	4611      	mov	r1, r2
    9756:	f106 0028 	add.w	r0, r6, #40	; 0x28
    975a:	f02c fd09 	bl	36170 <z_impl_k_sem_init>
		net_buf_unref(rsp);
    975e:	4620      	mov	r0, r4
    9760:	f014 fd14 	bl	1e18c <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    9764:	f895 607c 	ldrb.w	r6, [r5, #124]	; 0x7c
    9768:	f016 0620 	ands.w	r6, r6, #32
    976c:	d118      	bne.n	97a0 <bt_init+0x268>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    976e:	2102      	movs	r1, #2
    9770:	f640 406d 	movw	r0, #3181	; 0xc6d
    9774:	f00a fe26 	bl	143c4 <bt_hci_cmd_create>
		if (!buf) {
    9778:	4604      	mov	r4, r0
    977a:	2800      	cmp	r0, #0
    977c:	f000 80cd 	beq.w	991a <bt_init+0x3e2>
	return net_buf_simple_add(&buf->b, len);
    9780:	2102      	movs	r1, #2
    9782:	300c      	adds	r0, #12
    9784:	f014 fe88 	bl	1e498 <net_buf_simple_add>
		cp_le->le = 0x01;
    9788:	2301      	movs	r3, #1
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    978a:	4621      	mov	r1, r4
		cp_le->le = 0x01;
    978c:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    978e:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    9790:	4632      	mov	r2, r6
    9792:	f640 406d 	movw	r0, #3181	; 0xc6d
    9796:	f00a fe63 	bl	14460 <bt_hci_cmd_send_sync>
		if (err) {
    979a:	4604      	mov	r4, r0
    979c:	2800      	cmp	r0, #0
    979e:	d19f      	bne.n	96e0 <bt_init+0x1a8>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    97a0:	f895 309c 	ldrb.w	r3, [r5, #156]	; 0x9c
    97a4:	071b      	lsls	r3, r3, #28
    97a6:	d513      	bpl.n	97d0 <bt_init+0x298>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    97a8:	2100      	movs	r1, #0
    97aa:	f242 001c 	movw	r0, #8220	; 0x201c
    97ae:	f107 0208 	add.w	r2, r7, #8
    97b2:	f00a fe55 	bl	14460 <bt_hci_cmd_send_sync>
		if (err) {
    97b6:	4604      	mov	r4, r0
    97b8:	2800      	cmp	r0, #0
    97ba:	d191      	bne.n	96e0 <bt_init+0x1a8>
		le_read_supp_states_complete(rsp);
    97bc:	68b8      	ldr	r0, [r7, #8]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    97be:	68c3      	ldr	r3, [r0, #12]
    97c0:	f8d3 2001 	ldr.w	r2, [r3, #1]
    97c4:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    97c8:	e9c5 2338 	strd	r2, r3, [r5, #224]	; 0xe0
		net_buf_unref(rsp);
    97cc:	f014 fcde 	bl	1e18c <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    97d0:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
    97d4:	069e      	lsls	r6, r3, #26
    97d6:	d522      	bpl.n	981e <bt_init+0x2e6>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    97d8:	1d39      	adds	r1, r7, #4
    97da:	1cb8      	adds	r0, r7, #2
    97dc:	f00a fec0 	bl	14560 <hci_le_read_max_data_len>
		if (err) {
    97e0:	4604      	mov	r4, r0
    97e2:	2800      	cmp	r0, #0
    97e4:	f47f af7c 	bne.w	96e0 <bt_init+0x1a8>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    97e8:	2104      	movs	r1, #4
    97ea:	f242 0024 	movw	r0, #8228	; 0x2024
    97ee:	f00a fde9 	bl	143c4 <bt_hci_cmd_create>
		if (!buf) {
    97f2:	4606      	mov	r6, r0
    97f4:	2800      	cmp	r0, #0
    97f6:	f000 8090 	beq.w	991a <bt_init+0x3e2>
    97fa:	2104      	movs	r1, #4
    97fc:	300c      	adds	r0, #12
    97fe:	f014 fe4b 	bl	1e498 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    9802:	887b      	ldrh	r3, [r7, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    9804:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    9806:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    9808:	88bb      	ldrh	r3, [r7, #4]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    980a:	4631      	mov	r1, r6
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    980c:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    980e:	f242 0024 	movw	r0, #8228	; 0x2024
    9812:	f00a fe25 	bl	14460 <bt_hci_cmd_send_sync>
		if (err) {
    9816:	4604      	mov	r4, r0
    9818:	2800      	cmp	r0, #0
    981a:	f47f af61 	bne.w	96e0 <bt_init+0x1a8>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
    981e:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
    9822:	065c      	lsls	r4, r3, #25
    9824:	d511      	bpl.n	984a <bt_init+0x312>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
    9826:	2100      	movs	r1, #0
    9828:	f242 002a 	movw	r0, #8234	; 0x202a
    982c:	f107 0208 	add.w	r2, r7, #8
    9830:	f00a fe16 	bl	14460 <bt_hci_cmd_send_sync>
		if (err) {
    9834:	4604      	mov	r4, r0
    9836:	2800      	cmp	r0, #0
    9838:	f47f af52 	bne.w	96e0 <bt_init+0x1a8>
		le_read_resolving_list_size_complete(rsp);
    983c:	68b8      	ldr	r0, [r7, #8]
	bt_dev.le.rl_size = rp->rl_size;
    983e:	68c3      	ldr	r3, [r0, #12]
    9840:	785b      	ldrb	r3, [r3, #1]
    9842:	f885 3120 	strb.w	r3, [r5, #288]	; 0x120
		net_buf_unref(rsp);
    9846:	f014 fca1 	bl	1e18c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    984a:	2108      	movs	r1, #8
    984c:	f242 0001 	movw	r0, #8193	; 0x2001
    9850:	f00a fdb8 	bl	143c4 <bt_hci_cmd_create>
	if (!buf) {
    9854:	4604      	mov	r4, r0
    9856:	2800      	cmp	r0, #0
    9858:	d05f      	beq.n	991a <bt_init+0x3e2>
    985a:	2108      	movs	r1, #8
    985c:	300c      	adds	r0, #12
    985e:	f014 fe1b 	bl	1e498 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
    9862:	f895 10d8 	ldrb.w	r1, [r5, #216]	; 0xd8
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
    9866:	f240 2302 	movw	r3, #514	; 0x202
    986a:	f011 0f40 	tst.w	r1, #64	; 0x40
    986e:	bf08      	it	eq
    9870:	2303      	moveq	r3, #3
    9872:	4602      	mov	r2, r0
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    9874:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    9876:	bf4c      	ite	mi
    9878:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    987c:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    9880:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    9882:	f895 30d9 	ldrb.w	r3, [r5, #217]	; 0xd9
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    9886:	bf48      	it	mi
    9888:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    988c:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    9890:	f895 30a2 	ldrb.w	r3, [r5, #162]	; 0xa2
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    9894:	bf18      	it	ne
    9896:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    989a:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    989e:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    98a0:	bf48      	it	mi
    98a2:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    98a6:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    98a8:	bf08      	it	eq
    98aa:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
    98ae:	2100      	movs	r1, #0
    98b0:	f027 fb43 	bl	30f3a <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    98b4:	4621      	mov	r1, r4
    98b6:	2200      	movs	r2, #0
    98b8:	f242 0001 	movw	r0, #8193	; 0x2001
    98bc:	f00a fdd0 	bl	14460 <bt_hci_cmd_send_sync>
	if (err) {
    98c0:	4604      	mov	r4, r0
    98c2:	2800      	cmp	r0, #0
    98c4:	f47f af0c 	bne.w	96e0 <bt_init+0x1a8>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    98c8:	f895 307c 	ldrb.w	r3, [r5, #124]	; 0x7c
	if (bt_dev.le.acl_mtu) {
    98cc:	f8b5 1104 	ldrh.w	r1, [r5, #260]	; 0x104
	if (BT_FEAT_BREDR(bt_dev.features)) {
    98d0:	0698      	lsls	r0, r3, #26
    98d2:	d425      	bmi.n	9920 <bt_init+0x3e8>
	if (bt_dev.le.acl_mtu) {
    98d4:	b9d1      	cbnz	r1, 990c <bt_init+0x3d4>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    98d6:	f241 0005 	movw	r0, #4101	; 0x1005
    98da:	f107 0208 	add.w	r2, r7, #8
    98de:	f00a fdbf 	bl	14460 <bt_hci_cmd_send_sync>
	if (err) {
    98e2:	4604      	mov	r4, r0
    98e4:	2800      	cmp	r0, #0
    98e6:	f47f aefb 	bne.w	96e0 <bt_init+0x1a8>
	if (bt_dev.le.acl_mtu) {
    98ea:	f8b5 3104 	ldrh.w	r3, [r5, #260]	; 0x104
	read_buffer_size_complete(rsp);
    98ee:	68bc      	ldr	r4, [r7, #8]
	if (bt_dev.le.acl_mtu) {
    98f0:	b94b      	cbnz	r3, 9906 <bt_init+0x3ce>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
    98f2:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    98f4:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    98f8:	f8a5 2104 	strh.w	r2, [r5, #260]	; 0x104
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    98fc:	889a      	ldrh	r2, [r3, #4]
    98fe:	4833      	ldr	r0, [pc, #204]	; (99cc <bt_init+0x494>)
    9900:	4611      	mov	r1, r2
    9902:	f02c fc35 	bl	36170 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    9906:	4620      	mov	r0, r4
    9908:	f014 fc40 	bl	1e18c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    990c:	2108      	movs	r1, #8
    990e:	f640 4001 	movw	r0, #3073	; 0xc01
    9912:	f00a fd57 	bl	143c4 <bt_hci_cmd_create>
	if (!buf) {
    9916:	4604      	mov	r4, r0
    9918:	b990      	cbnz	r0, 9940 <bt_init+0x408>
		return -ENOBUFS;
    991a:	f06f 0468 	mvn.w	r4, #104	; 0x68
    991e:	e6df      	b.n	96e0 <bt_init+0x1a8>
	else if (!bt_dev.le.acl_mtu) {
    9920:	2900      	cmp	r1, #0
    9922:	d1f3      	bne.n	990c <bt_init+0x3d4>
		LOG_ERR("ACL BR/EDR buffers not initialized");
    9924:	4b2a      	ldr	r3, [pc, #168]	; (99d0 <bt_init+0x498>)
    9926:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    992a:	61fb      	str	r3, [r7, #28]
    992c:	2302      	movs	r3, #2
    992e:	4829      	ldr	r0, [pc, #164]	; (99d4 <bt_init+0x49c>)
    9930:	61bb      	str	r3, [r7, #24]
    9932:	f107 0218 	add.w	r2, r7, #24
    9936:	f027 faf5 	bl	30f24 <z_log_msg_static_create.constprop.0>
		return -EIO;
    993a:	f06f 0404 	mvn.w	r4, #4
    993e:	e6cf      	b.n	96e0 <bt_init+0x1a8>
    9940:	2108      	movs	r1, #8
    9942:	300c      	adds	r0, #12
    9944:	f014 fda8 	bl	1e498 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    9948:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
    994c:	4602      	mov	r2, r0
    994e:	07d9      	lsls	r1, r3, #31
    9950:	d430      	bmi.n	99b4 <bt_init+0x47c>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    9952:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    9956:	4820      	ldr	r0, [pc, #128]	; (99d8 <bt_init+0x4a0>)
	sys_put_le64(mask, ev->events);
    9958:	f027 faef 	bl	30f3a <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    995c:	4621      	mov	r1, r4
    995e:	2200      	movs	r2, #0
    9960:	f640 4001 	movw	r0, #3073	; 0xc01
    9964:	f00a fd7c 	bl	14460 <bt_hci_cmd_send_sync>
	if (err) {
    9968:	4604      	mov	r4, r0
    996a:	2800      	cmp	r0, #0
    996c:	f47f aeb8 	bne.w	96e0 <bt_init+0x1a8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    9970:	4601      	mov	r1, r0
    9972:	1d3a      	adds	r2, r7, #4
    9974:	f64f 4001 	movw	r0, #64513	; 0xfc01
    9978:	f00a fd72 	bl	14460 <bt_hci_cmd_send_sync>
	if (err) {
    997c:	b380      	cbz	r0, 99e0 <bt_init+0x4a8>
		LOG_WRN("Vendor HCI extensions not available");
    997e:	4b17      	ldr	r3, [pc, #92]	; (99dc <bt_init+0x4a4>)
			LOG_WRN("Failed to read supported vendor features");
    9980:	61fb      	str	r3, [r7, #28]
    9982:	2302      	movs	r3, #2
    9984:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    9988:	4812      	ldr	r0, [pc, #72]	; (99d4 <bt_init+0x49c>)
    998a:	61bb      	str	r3, [r7, #24]
    998c:	f107 0218 	add.w	r2, r7, #24
    9990:	f027 fac8 	bl	30f24 <z_log_msg_static_create.constprop.0>
	err = bt_id_init();
    9994:	f027 fc2b 	bl	311ee <bt_id_init>
	if (err) {
    9998:	4604      	mov	r4, r0
    999a:	2800      	cmp	r0, #0
    999c:	f47f aea0 	bne.w	96e0 <bt_init+0x1a8>
		err = bt_conn_init();
    99a0:	f00d ff54 	bl	1784c <bt_conn_init>
		if (err) {
    99a4:	4604      	mov	r4, r0
    99a6:	2800      	cmp	r0, #0
    99a8:	f47f ae9a 	bne.w	96e0 <bt_init+0x1a8>
    99ac:	f00b fd1c 	bl	153e8 <bt_init.part.0>
    99b0:	4604      	mov	r4, r0
    99b2:	e695      	b.n	96e0 <bt_init+0x1a8>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    99b4:	a102      	add	r1, pc, #8	; (adr r1, 99c0 <bt_init+0x488>)
    99b6:	e9d1 0100 	ldrd	r0, r1, [r1]
    99ba:	e7cd      	b.n	9958 <bt_init+0x420>
    99bc:	f3af 8000 	nop.w
    99c0:	02008890 	.word	0x02008890
    99c4:	20008000 	.word	0x20008000
    99c8:	2000c658 	.word	0x2000c658
    99cc:	2000c688 	.word	0x2000c688
    99d0:	0003bf04 	.word	0x0003bf04
    99d4:	000378f0 	.word	0x000378f0
    99d8:	02008810 	.word	0x02008810
    99dc:	0003bf27 	.word	0x0003bf27
	rp.info = (void *)rsp->data;
    99e0:	687b      	ldr	r3, [r7, #4]
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
    99e2:	466d      	mov	r5, sp
	rp.info = (void *)rsp->data;
    99e4:	68dc      	ldr	r4, [r3, #12]
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
    99e6:	b08a      	sub	sp, #40	; 0x28
    99e8:	f8b4 3001 	ldrh.w	r3, [r4, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
    99ec:	2b03      	cmp	r3, #3
		return plat_str[platform];
    99ee:	bf96      	itet	ls
    99f0:	4a42      	ldrls	r2, [pc, #264]	; (9afc <bt_init+0x5c4>)
	return "unknown";
    99f2:	4943      	ldrhi	r1, [pc, #268]	; (9b00 <bt_init+0x5c8>)
		return plat_str[platform];
    99f4:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
    99f8:	466a      	mov	r2, sp
    99fa:	61d3      	str	r3, [r2, #28]
    99fc:	f44f 7300 	mov.w	r3, #512	; 0x200
    9a00:	4840      	ldr	r0, [pc, #256]	; (9b04 <bt_init+0x5cc>)
    9a02:	8413      	strh	r3, [r2, #32]
    9a04:	4b40      	ldr	r3, [pc, #256]	; (9b08 <bt_init+0x5d0>)
    9a06:	e9c2 0105 	strd	r0, r1, [r2, #20]
    9a0a:	f842 3f10 	str.w	r3, [r2, #16]!
    9a0e:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    9a12:	483e      	ldr	r0, [pc, #248]	; (9b0c <bt_init+0x5d4>)
    9a14:	f027 fa86 	bl	30f24 <z_log_msg_static_create.constprop.0>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    9a18:	f8b4 2001 	ldrh.w	r2, [r4, #1]
    9a1c:	46ad      	mov	sp, r5
    9a1e:	2a02      	cmp	r2, #2
	LOG_INF("HW Variant: %s (0x%04x)",
    9a20:	f8b4 3003 	ldrh.w	r3, [r4, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    9a24:	d148      	bne.n	9ab8 <bt_init+0x580>
	if (variant < ARRAY_SIZE(nordic_str)) {
    9a26:	2b03      	cmp	r3, #3
    9a28:	d846      	bhi.n	9ab8 <bt_init+0x580>
		return nordic_str[variant];
    9a2a:	4a39      	ldr	r2, [pc, #228]	; (9b10 <bt_init+0x5d8>)
    9a2c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
	LOG_INF("HW Variant: %s (0x%04x)",
    9a30:	466d      	mov	r5, sp
    9a32:	b08a      	sub	sp, #40	; 0x28
    9a34:	466a      	mov	r2, sp
    9a36:	61d3      	str	r3, [r2, #28]
    9a38:	f44f 7300 	mov.w	r3, #512	; 0x200
    9a3c:	4835      	ldr	r0, [pc, #212]	; (9b14 <bt_init+0x5dc>)
    9a3e:	8413      	strh	r3, [r2, #32]
    9a40:	4b31      	ldr	r3, [pc, #196]	; (9b08 <bt_init+0x5d0>)
    9a42:	e9c2 0105 	strd	r0, r1, [r2, #20]
    9a46:	f842 3f10 	str.w	r3, [r2, #16]!
    9a4a:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    9a4e:	482f      	ldr	r0, [pc, #188]	; (9b0c <bt_init+0x5d4>)
    9a50:	f027 fa68 	bl	30f24 <z_log_msg_static_create.constprop.0>
    9a54:	46ad      	mov	sp, r5
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
    9a56:	7963      	ldrb	r3, [r4, #5]
    9a58:	79a6      	ldrb	r6, [r4, #6]
	if (variant < ARRAY_SIZE(var_str)) {
    9a5a:	2b03      	cmp	r3, #3
		return var_str[variant];
    9a5c:	bf98      	it	ls
    9a5e:	4a2e      	ldrls	r2, [pc, #184]	; (9b18 <bt_init+0x5e0>)
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
    9a60:	f8b4 5007 	ldrh.w	r5, [r4, #7]
    9a64:	f8d4 0009 	ldr.w	r0, [r4, #9]
    9a68:	466c      	mov	r4, sp
    9a6a:	b08c      	sub	sp, #48	; 0x30
		return var_str[variant];
    9a6c:	bf94      	ite	ls
    9a6e:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
	return "unknown";
    9a72:	4923      	ldrhi	r1, [pc, #140]	; (9b00 <bt_init+0x5c8>)
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
    9a74:	466a      	mov	r2, sp
    9a76:	e9c2 3607 	strd	r3, r6, [r2, #28]
    9a7a:	f44f 7300 	mov.w	r3, #512	; 0x200
    9a7e:	f8df c09c 	ldr.w	ip, [pc, #156]	; 9b1c <bt_init+0x5e4>
    9a82:	8593      	strh	r3, [r2, #44]	; 0x2c
    9a84:	4b26      	ldr	r3, [pc, #152]	; (9b20 <bt_init+0x5e8>)
    9a86:	e9c2 c105 	strd	ip, r1, [r2, #20]
    9a8a:	e9c2 5009 	strd	r5, r0, [r2, #36]	; 0x24
    9a8e:	f44f 5173 	mov.w	r1, #15552	; 0x3cc0
    9a92:	f842 3f10 	str.w	r3, [r2, #16]!
    9a96:	481d      	ldr	r0, [pc, #116]	; (9b0c <bt_init+0x5d4>)
    9a98:	f027 fa44 	bl	30f24 <z_log_msg_static_create.constprop.0>
    9a9c:	46a5      	mov	sp, r4
	net_buf_unref(rsp);
    9a9e:	6878      	ldr	r0, [r7, #4]
    9aa0:	f014 fb74 	bl	1e18c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    9aa4:	2100      	movs	r1, #0
    9aa6:	f64f 4002 	movw	r0, #64514	; 0xfc02
    9aaa:	1d3a      	adds	r2, r7, #4
    9aac:	f00a fcd8 	bl	14460 <bt_hci_cmd_send_sync>
	if (err) {
    9ab0:	4604      	mov	r4, r0
    9ab2:	b118      	cbz	r0, 9abc <bt_init+0x584>
		LOG_WRN("Failed to read supported vendor commands");
    9ab4:	4b1b      	ldr	r3, [pc, #108]	; (9b24 <bt_init+0x5ec>)
    9ab6:	e763      	b.n	9980 <bt_init+0x448>
		return "unknown";
    9ab8:	4911      	ldr	r1, [pc, #68]	; (9b00 <bt_init+0x5c8>)
    9aba:	e7b9      	b.n	9a30 <bt_init+0x4f8>
	rp.cmds = (void *)rsp->data;
    9abc:	6878      	ldr	r0, [r7, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    9abe:	4d1a      	ldr	r5, [pc, #104]	; (9b28 <bt_init+0x5f0>)
    9ac0:	68c3      	ldr	r3, [r0, #12]
    9ac2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
    9ac6:	f8a5 30c1 	strh.w	r3, [r5, #193]	; 0xc1
	net_buf_unref(rsp);
    9aca:	f014 fb5f 	bl	1e18c <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    9ace:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
    9ad2:	075b      	lsls	r3, r3, #29
    9ad4:	f57f af5e 	bpl.w	9994 <bt_init+0x45c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    9ad8:	4621      	mov	r1, r4
    9ada:	f64f 4003 	movw	r0, #64515	; 0xfc03
    9ade:	1d3a      	adds	r2, r7, #4
    9ae0:	f00a fcbe 	bl	14460 <bt_hci_cmd_send_sync>
		if (err) {
    9ae4:	b108      	cbz	r0, 9aea <bt_init+0x5b2>
			LOG_WRN("Failed to read supported vendor features");
    9ae6:	4b11      	ldr	r3, [pc, #68]	; (9b2c <bt_init+0x5f4>)
    9ae8:	e74a      	b.n	9980 <bt_init+0x448>
		rp.feat = (void *)rsp->data;
    9aea:	6878      	ldr	r0, [r7, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
    9aec:	68c3      	ldr	r3, [r0, #12]
    9aee:	785b      	ldrb	r3, [r3, #1]
    9af0:	f885 30c0 	strb.w	r3, [r5, #192]	; 0xc0
		net_buf_unref(rsp);
    9af4:	f014 fb4a 	bl	1e18c <net_buf_unref>
    9af8:	e74c      	b.n	9994 <bt_init+0x45c>
    9afa:	bf00      	nop
    9afc:	00037ff0 	.word	0x00037ff0
    9b00:	0003b90a 	.word	0x0003b90a
    9b04:	0003bf4b 	.word	0x0003bf4b
    9b08:	01000004 	.word	0x01000004
    9b0c:	000378f0 	.word	0x000378f0
    9b10:	00037fe0 	.word	0x00037fe0
    9b14:	0003bf64 	.word	0x0003bf64
    9b18:	00037fd0 	.word	0x00037fd0
    9b1c:	0003bf7c 	.word	0x0003bf7c
    9b20:	01000007 	.word	0x01000007
    9b24:	0003bfa9 	.word	0x0003bfa9
    9b28:	2000c580 	.word	0x2000c580
    9b2c:	0003bfd2 	.word	0x0003bfd2

00009b30 <parse_edrx>:

int parse_edrx(const char *at_response, struct lte_lc_edrx_cfg *cfg)
{
	int err, tmp_int;
	uint8_t idx;
	struct at_param_list resp_list = {0};
    9b30:	2300      	movs	r3, #0
{
    9b32:	b5f0      	push	{r4, r5, r6, r7, lr}
    9b34:	b08d      	sub	sp, #52	; 0x34
    9b36:	af00      	add	r7, sp, #0
	struct at_param_list resp_list = {0};
    9b38:	e9c7 3304 	strd	r3, r3, [r7, #16]
	char tmp_buf[5];
	size_t len = sizeof(tmp_buf) - 1;
    9b3c:	2304      	movs	r3, #4
{
    9b3e:	460d      	mov	r5, r1
	float ptw_multiplier;

	if ((at_response == NULL) || (cfg == NULL)) {
    9b40:	4606      	mov	r6, r0
	size_t len = sizeof(tmp_buf) - 1;
    9b42:	607b      	str	r3, [r7, #4]
	if ((at_response == NULL) || (cfg == NULL)) {
    9b44:	2800      	cmp	r0, #0
    9b46:	f000 80e0 	beq.w	9d0a <parse_edrx+0x1da>
    9b4a:	2900      	cmp	r1, #0
    9b4c:	f000 80dd 	beq.w	9d0a <parse_edrx+0x1da>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_CEDRXP_PARAMS_COUNT_MAX);
    9b50:	2106      	movs	r1, #6
    9b52:	f107 0010 	add.w	r0, r7, #16
    9b56:	f02b f99a 	bl	34e8e <at_params_list_init>
	if (err) {
    9b5a:	4604      	mov	r4, r0
    9b5c:	b190      	cbz	r0, 9b84 <parse_edrx+0x54>
		LOG_ERR("Could not init AT params list, error: %d", err);
    9b5e:	466d      	mov	r5, sp
    9b60:	b088      	sub	sp, #32
    9b62:	466a      	mov	r2, sp
    9b64:	4b6c      	ldr	r3, [pc, #432]	; (9d18 <parse_edrx+0x1e8>)
    9b66:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    9b6a:	e9c2 3005 	strd	r3, r0, [r2, #20]
    9b6e:	2303      	movs	r3, #3
    9b70:	486a      	ldr	r0, [pc, #424]	; (9d1c <parse_edrx+0x1ec>)
    9b72:	f842 3f10 	str.w	r3, [r2, #16]!
    9b76:	f02b fada 	bl	3512e <z_log_msg_static_create.constprop.0>
    9b7a:	46ad      	mov	sp, r5

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
    9b7c:	4620      	mov	r0, r4
    9b7e:	3734      	adds	r7, #52	; 0x34
    9b80:	46bd      	mov	sp, r7
    9b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_parser_params_from_str(at_response,
    9b84:	4601      	mov	r1, r0
    9b86:	f107 0210 	add.w	r2, r7, #16
    9b8a:	4630      	mov	r0, r6
    9b8c:	f02b f97c 	bl	34e88 <at_parser_params_from_str>
	if (err) {
    9b90:	4604      	mov	r4, r0
    9b92:	b198      	cbz	r0, 9bbc <parse_edrx+0x8c>
		LOG_ERR("Could not parse +CEDRXP response, error: %d", err);
    9b94:	466d      	mov	r5, sp
    9b96:	b088      	sub	sp, #32
    9b98:	466a      	mov	r2, sp
    9b9a:	4b61      	ldr	r3, [pc, #388]	; (9d20 <parse_edrx+0x1f0>)
		LOG_ERR("Failed to get LTE mode, error: %d", err);
    9b9c:	e9c2 3405 	strd	r3, r4, [r2, #20]
    9ba0:	2303      	movs	r3, #3
    9ba2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    9ba6:	485d      	ldr	r0, [pc, #372]	; (9d1c <parse_edrx+0x1ec>)
    9ba8:	f842 3f10 	str.w	r3, [r2, #16]!
    9bac:	f02b fabf 	bl	3512e <z_log_msg_static_create.constprop.0>
    9bb0:	46ad      	mov	sp, r5
	at_params_list_free(&resp_list);
    9bb2:	f107 0010 	add.w	r0, r7, #16
    9bb6:	f02b f97d 	bl	34eb4 <at_params_list_free>
	return err;
    9bba:	e7df      	b.n	9b7c <parse_edrx+0x4c>
	err = at_params_int_get(&resp_list, AT_CEDRXP_ACTT_INDEX, &tmp_int);
    9bbc:	463a      	mov	r2, r7
    9bbe:	2101      	movs	r1, #1
    9bc0:	f107 0010 	add.w	r0, r7, #16
    9bc4:	f02b fa2a 	bl	3501c <at_params_int_get>
	if (err) {
    9bc8:	4604      	mov	r4, r0
    9bca:	b120      	cbz	r0, 9bd6 <parse_edrx+0xa6>
		LOG_ERR("Failed to get LTE mode, error: %d", err);
    9bcc:	466d      	mov	r5, sp
    9bce:	b088      	sub	sp, #32
    9bd0:	466a      	mov	r2, sp
    9bd2:	4b54      	ldr	r3, [pc, #336]	; (9d24 <parse_edrx+0x1f4>)
    9bd4:	e7e2      	b.n	9b9c <parse_edrx+0x6c>
	cfg->mode = tmp_int == 0 ? LTE_LC_LTE_MODE_NONE :
    9bd6:	683c      	ldr	r4, [r7, #0]
    9bd8:	b1ac      	cbz	r4, 9c06 <parse_edrx+0xd6>
    9bda:	2c04      	cmp	r4, #4
    9bdc:	d018      	beq.n	9c10 <parse_edrx+0xe0>
    9bde:	2c05      	cmp	r4, #5
    9be0:	bf0c      	ite	eq
    9be2:	2309      	moveq	r3, #9
    9be4:	23ff      	movne	r3, #255	; 0xff
    9be6:	702b      	strb	r3, [r5, #0]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
    9be8:	2103      	movs	r1, #3
    9bea:	1d3b      	adds	r3, r7, #4
    9bec:	f107 0208 	add.w	r2, r7, #8
    9bf0:	f107 0010 	add.w	r0, r7, #16
    9bf4:	f02b fa40 	bl	35078 <at_params_string_get>
	if (err) {
    9bf8:	4604      	mov	r4, r0
    9bfa:	b158      	cbz	r0, 9c14 <parse_edrx+0xe4>
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
    9bfc:	466d      	mov	r5, sp
    9bfe:	b088      	sub	sp, #32
    9c00:	466a      	mov	r2, sp
    9c02:	4b49      	ldr	r3, [pc, #292]	; (9d28 <parse_edrx+0x1f8>)
    9c04:	e7ca      	b.n	9b9c <parse_edrx+0x6c>
		cfg->edrx = 0;
    9c06:	2300      	movs	r3, #0
	cfg->mode = tmp_int == 0 ? LTE_LC_LTE_MODE_NONE :
    9c08:	702c      	strb	r4, [r5, #0]
		cfg->edrx = 0;
    9c0a:	606b      	str	r3, [r5, #4]
		cfg->ptw = 0;
    9c0c:	60ab      	str	r3, [r5, #8]
		return 0;
    9c0e:	e7b5      	b.n	9b7c <parse_edrx+0x4c>
    9c10:	2307      	movs	r3, #7
    9c12:	e7e8      	b.n	9be6 <parse_edrx+0xb6>
	tmp_buf[len] = '\0';
    9c14:	687b      	ldr	r3, [r7, #4]
	idx = strtoul(tmp_buf, NULL, 2);
    9c16:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
    9c18:	3330      	adds	r3, #48	; 0x30
    9c1a:	443b      	add	r3, r7
    9c1c:	f803 0c28 	strb.w	r0, [r3, #-40]
	idx = strtoul(tmp_buf, NULL, 2);
    9c20:	2202      	movs	r2, #2
    9c22:	f107 0008 	add.w	r0, r7, #8
    9c26:	f023 fa79 	bl	2d11c <strtoul>
	err = get_ptw_multiplier(cfg->mode, &ptw_multiplier);
    9c2a:	782b      	ldrb	r3, [r5, #0]
	idx = strtoul(tmp_buf, NULL, 2);
    9c2c:	b2c0      	uxtb	r0, r0
	switch (lte_mode) {
    9c2e:	2b07      	cmp	r3, #7
    9c30:	d025      	beq.n	9c7e <parse_edrx+0x14e>
    9c32:	2b09      	cmp	r3, #9
    9c34:	d115      	bne.n	9c62 <parse_edrx+0x132>
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
    9c36:	280f      	cmp	r0, #15
    9c38:	d942      	bls.n	9cc0 <parse_edrx+0x190>
		LOG_ERR("Failed to get eDRX value, error; %d", err);
    9c3a:	466c      	mov	r4, sp
    9c3c:	b088      	sub	sp, #32
    9c3e:	466a      	mov	r2, sp
    9c40:	4b3a      	ldr	r3, [pc, #232]	; (9d2c <parse_edrx+0x1fc>)
    9c42:	6153      	str	r3, [r2, #20]
    9c44:	f06f 0315 	mvn.w	r3, #21
    9c48:	6193      	str	r3, [r2, #24]
    9c4a:	2303      	movs	r3, #3
    9c4c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    9c50:	4832      	ldr	r0, [pc, #200]	; (9d1c <parse_edrx+0x1ec>)
    9c52:	f842 3f10 	str.w	r3, [r2, #16]!
    9c56:	f02b fa6a 	bl	3512e <z_log_msg_static_create.constprop.0>
    9c5a:	46a5      	mov	sp, r4
		return -ENOTCONN;
    9c5c:	f06f 0415 	mvn.w	r4, #21
    9c60:	e7a7      	b.n	9bb2 <parse_edrx+0x82>
		LOG_WRN("Active LTE mode could not be determined");
    9c62:	4b33      	ldr	r3, [pc, #204]	; (9d30 <parse_edrx+0x200>)
    9c64:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    9c68:	62fb      	str	r3, [r7, #44]	; 0x2c
    9c6a:	2302      	movs	r3, #2
    9c6c:	482b      	ldr	r0, [pc, #172]	; (9d1c <parse_edrx+0x1ec>)
    9c6e:	f107 0228 	add.w	r2, r7, #40	; 0x28
    9c72:	62bb      	str	r3, [r7, #40]	; 0x28
		return -ENOTCONN;
    9c74:	f06f 047f 	mvn.w	r4, #127	; 0x7f
		LOG_WRN("Active LTE mode could not be determined");
    9c78:	f02b fa59 	bl	3512e <z_log_msg_static_create.constprop.0>
		goto clean_exit;
    9c7c:	e799      	b.n	9bb2 <parse_edrx+0x82>
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
    9c7e:	280f      	cmp	r0, #15
    9c80:	d8db      	bhi.n	9c3a <parse_edrx+0x10a>
		multiplier = edrx_lookup_ltem[idx];
    9c82:	4b2c      	ldr	r3, [pc, #176]	; (9d34 <parse_edrx+0x204>)
		*ptw_multiplier = 1.28;
    9c84:	4e2c      	ldr	r6, [pc, #176]	; (9d38 <parse_edrx+0x208>)
		multiplier = edrx_lookup_ltem[idx];
    9c86:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
    9c8a:	b1f0      	cbz	r0, 9cca <parse_edrx+0x19a>
    9c8c:	f7fe fc62 	bl	8554 <__aeabi_i2d>
    9c90:	a31f      	add	r3, pc, #124	; (adr r3, 9d10 <parse_edrx+0x1e0>)
    9c92:	e9d3 2300 	ldrd	r2, r3, [r3]
    9c96:	f7fe fcc7 	bl	8628 <__aeabi_dmul>
    9c9a:	f7fe ff9d 	bl	8bd8 <__aeabi_d2f>
	len = sizeof(tmp_buf) - 1;
    9c9e:	2104      	movs	r1, #4
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
    9ca0:	6068      	str	r0, [r5, #4]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
    9ca2:	187b      	adds	r3, r7, r1
    9ca4:	f107 0208 	add.w	r2, r7, #8
    9ca8:	f107 0010 	add.w	r0, r7, #16
	len = sizeof(tmp_buf) - 1;
    9cac:	6079      	str	r1, [r7, #4]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
    9cae:	f02b f9e3 	bl	35078 <at_params_string_get>
	if (err) {
    9cb2:	4604      	mov	r4, r0
    9cb4:	b158      	cbz	r0, 9cce <parse_edrx+0x19e>
		LOG_ERR("Failed to get PTW configuration, error: %d", err);
    9cb6:	466d      	mov	r5, sp
    9cb8:	b088      	sub	sp, #32
    9cba:	466a      	mov	r2, sp
    9cbc:	4b1f      	ldr	r3, [pc, #124]	; (9d3c <parse_edrx+0x20c>)
    9cbe:	e76d      	b.n	9b9c <parse_edrx+0x6c>
		multiplier = edrx_lookup_nbiot[idx];
    9cc0:	4b1f      	ldr	r3, [pc, #124]	; (9d40 <parse_edrx+0x210>)
		*ptw_multiplier = 2.56;
    9cc2:	4e20      	ldr	r6, [pc, #128]	; (9d44 <parse_edrx+0x214>)
		multiplier = edrx_lookup_nbiot[idx];
    9cc4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
		break;
    9cc8:	e7df      	b.n	9c8a <parse_edrx+0x15a>
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
    9cca:	481f      	ldr	r0, [pc, #124]	; (9d48 <parse_edrx+0x218>)
    9ccc:	e7e7      	b.n	9c9e <parse_edrx+0x16e>
	tmp_buf[len] = '\0';
    9cce:	687b      	ldr	r3, [r7, #4]
	idx = strtoul(tmp_buf, NULL, 2);
    9cd0:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
    9cd2:	3330      	adds	r3, #48	; 0x30
    9cd4:	443b      	add	r3, r7
    9cd6:	f803 0c28 	strb.w	r0, [r3, #-40]
	idx = strtoul(tmp_buf, NULL, 2);
    9cda:	2202      	movs	r2, #2
    9cdc:	f107 0008 	add.w	r0, r7, #8
    9ce0:	f023 fa1c 	bl	2d11c <strtoul>
    9ce4:	b2c0      	uxtb	r0, r0
	if (idx > 15) {
    9ce6:	280f      	cmp	r0, #15
    9ce8:	d906      	bls.n	9cf8 <parse_edrx+0x1c8>
		LOG_ERR("Invalid PTW lookup index: %d", idx);
    9cea:	466c      	mov	r4, sp
    9cec:	b088      	sub	sp, #32
    9cee:	466a      	mov	r2, sp
    9cf0:	4b16      	ldr	r3, [pc, #88]	; (9d4c <parse_edrx+0x21c>)
    9cf2:	e9c2 3005 	strd	r3, r0, [r2, #20]
    9cf6:	e7a8      	b.n	9c4a <parse_edrx+0x11a>
	idx += 1;
    9cf8:	3001      	adds	r0, #1
	cfg->ptw = idx * ptw_multiplier;
    9cfa:	b2c0      	uxtb	r0, r0
    9cfc:	f7ff f876 	bl	8dec <__aeabi_i2f>
    9d00:	4631      	mov	r1, r6
    9d02:	f7fe fa21 	bl	8148 <__aeabi_fmul>
    9d06:	60a8      	str	r0, [r5, #8]
	LOG_DBG("eDRX value for %s: %d.%02d, PTW: %d.%02d",
    9d08:	e753      	b.n	9bb2 <parse_edrx+0x82>
		return -EINVAL;
    9d0a:	f06f 0415 	mvn.w	r4, #21
    9d0e:	e735      	b.n	9b7c <parse_edrx+0x4c>
    9d10:	47ae147b 	.word	0x47ae147b
    9d14:	40247ae1 	.word	0x40247ae1
    9d18:	0003fa6e 	.word	0x0003fa6e
    9d1c:	00037998 	.word	0x00037998
    9d20:	0003fa97 	.word	0x0003fa97
    9d24:	0003fac3 	.word	0x0003fac3
    9d28:	0003fae5 	.word	0x0003fae5
    9d2c:	0003fb39 	.word	0x0003fb39
    9d30:	0003fb11 	.word	0x0003fb11
    9d34:	00038afc 	.word	0x00038afc
    9d38:	3fa3d70a 	.word	0x3fa3d70a
    9d3c:	0003fb5d 	.word	0x0003fb5d
    9d40:	00038adc 	.word	0x00038adc
    9d44:	4023d70a 	.word	0x4023d70a
    9d48:	40a3d70a 	.word	0x40a3d70a
    9d4c:	0003fb88 	.word	0x0003fb88

00009d50 <_strtod_l>:
    9d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9d54:	461f      	mov	r7, r3
    9d56:	b09d      	sub	sp, #116	; 0x74
    9d58:	2300      	movs	r3, #0
    9d5a:	460c      	mov	r4, r1
    9d5c:	4682      	mov	sl, r0
    9d5e:	920e      	str	r2, [sp, #56]	; 0x38
    9d60:	9318      	str	r3, [sp, #96]	; 0x60
    9d62:	f04f 0800 	mov.w	r8, #0
    9d66:	4b97      	ldr	r3, [pc, #604]	; (9fc4 <_strtod_l+0x274>)
    9d68:	f04f 0900 	mov.w	r9, #0
    9d6c:	681d      	ldr	r5, [r3, #0]
    9d6e:	4628      	mov	r0, r5
    9d70:	f7ff fa57 	bl	9222 <strlen>
    9d74:	4622      	mov	r2, r4
    9d76:	4683      	mov	fp, r0
    9d78:	9217      	str	r2, [sp, #92]	; 0x5c
    9d7a:	7813      	ldrb	r3, [r2, #0]
    9d7c:	2b2b      	cmp	r3, #43	; 0x2b
    9d7e:	d03b      	beq.n	9df8 <_strtod_l+0xa8>
    9d80:	d82c      	bhi.n	9ddc <_strtod_l+0x8c>
    9d82:	2b0d      	cmp	r3, #13
    9d84:	d826      	bhi.n	9dd4 <_strtod_l+0x84>
    9d86:	2b08      	cmp	r3, #8
    9d88:	d826      	bhi.n	9dd8 <_strtod_l+0x88>
    9d8a:	2b00      	cmp	r3, #0
    9d8c:	d02f      	beq.n	9dee <_strtod_l+0x9e>
    9d8e:	2300      	movs	r3, #0
    9d90:	930c      	str	r3, [sp, #48]	; 0x30
    9d92:	9e17      	ldr	r6, [sp, #92]	; 0x5c
    9d94:	7833      	ldrb	r3, [r6, #0]
    9d96:	2b30      	cmp	r3, #48	; 0x30
    9d98:	d172      	bne.n	9e80 <_strtod_l+0x130>
    9d9a:	7873      	ldrb	r3, [r6, #1]
    9d9c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    9da0:	2b58      	cmp	r3, #88	; 0x58
    9da2:	d163      	bne.n	9e6c <_strtod_l+0x11c>
    9da4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9da6:	a917      	add	r1, sp, #92	; 0x5c
    9da8:	4a87      	ldr	r2, [pc, #540]	; (9fc8 <_strtod_l+0x278>)
    9daa:	4650      	mov	r0, sl
    9dac:	9301      	str	r3, [sp, #4]
    9dae:	ab18      	add	r3, sp, #96	; 0x60
    9db0:	9702      	str	r7, [sp, #8]
    9db2:	9300      	str	r3, [sp, #0]
    9db4:	ab19      	add	r3, sp, #100	; 0x64
    9db6:	f023 fa19 	bl	2d1ec <__gethex>
    9dba:	f010 0507 	ands.w	r5, r0, #7
    9dbe:	4604      	mov	r4, r0
    9dc0:	d035      	beq.n	9e2e <_strtod_l+0xde>
    9dc2:	2d06      	cmp	r5, #6
    9dc4:	d11a      	bne.n	9dfc <_strtod_l+0xac>
    9dc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9dc8:	b10b      	cbz	r3, 9dce <_strtod_l+0x7e>
    9dca:	3601      	adds	r6, #1
    9dcc:	601e      	str	r6, [r3, #0]
    9dce:	4640      	mov	r0, r8
    9dd0:	4649      	mov	r1, r9
    9dd2:	e037      	b.n	9e44 <_strtod_l+0xf4>
    9dd4:	2b20      	cmp	r3, #32
    9dd6:	d1da      	bne.n	9d8e <_strtod_l+0x3e>
    9dd8:	3201      	adds	r2, #1
    9dda:	e7cd      	b.n	9d78 <_strtod_l+0x28>
    9ddc:	2b2d      	cmp	r3, #45	; 0x2d
    9dde:	d1d6      	bne.n	9d8e <_strtod_l+0x3e>
    9de0:	2301      	movs	r3, #1
    9de2:	930c      	str	r3, [sp, #48]	; 0x30
    9de4:	1c53      	adds	r3, r2, #1
    9de6:	9317      	str	r3, [sp, #92]	; 0x5c
    9de8:	7853      	ldrb	r3, [r2, #1]
    9dea:	2b00      	cmp	r3, #0
    9dec:	d1d1      	bne.n	9d92 <_strtod_l+0x42>
    9dee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9df0:	2b00      	cmp	r3, #0
    9df2:	d0ec      	beq.n	9dce <_strtod_l+0x7e>
    9df4:	601c      	str	r4, [r3, #0]
    9df6:	e7ea      	b.n	9dce <_strtod_l+0x7e>
    9df8:	2300      	movs	r3, #0
    9dfa:	e7f2      	b.n	9de2 <_strtod_l+0x92>
    9dfc:	9a18      	ldr	r2, [sp, #96]	; 0x60
    9dfe:	b13a      	cbz	r2, 9e10 <_strtod_l+0xc0>
    9e00:	2135      	movs	r1, #53	; 0x35
    9e02:	a81a      	add	r0, sp, #104	; 0x68
    9e04:	f02d f81b 	bl	36e3e <__copybits>
    9e08:	9918      	ldr	r1, [sp, #96]	; 0x60
    9e0a:	4650      	mov	r0, sl
    9e0c:	f023 fc80 	bl	2d710 <_Bfree>
    9e10:	3d01      	subs	r5, #1
    9e12:	9a19      	ldr	r2, [sp, #100]	; 0x64
    9e14:	2d04      	cmp	r5, #4
    9e16:	d806      	bhi.n	9e26 <_strtod_l+0xd6>
    9e18:	e8df f005 	tbb	[pc, r5]
    9e1c:	23200317 	.word	0x23200317
    9e20:	17          	.byte	0x17
    9e21:	00          	.byte	0x00
    9e22:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
    9e26:	0721      	lsls	r1, r4, #28
    9e28:	d501      	bpl.n	9e2e <_strtod_l+0xde>
    9e2a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
    9e2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9e30:	b113      	cbz	r3, 9e38 <_strtod_l+0xe8>
    9e32:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9e34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9e36:	6013      	str	r3, [r2, #0]
    9e38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9e3a:	2b00      	cmp	r3, #0
    9e3c:	d0c7      	beq.n	9dce <_strtod_l+0x7e>
    9e3e:	4640      	mov	r0, r8
    9e40:	f109 4100 	add.w	r1, r9, #2147483648	; 0x80000000
    9e44:	b01d      	add	sp, #116	; 0x74
    9e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9e4a:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
    9e4e:	f202 4233 	addw	r2, r2, #1075	; 0x433
    9e52:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    9e56:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
    9e5a:	e7e4      	b.n	9e26 <_strtod_l+0xd6>
    9e5c:	f8df 916c 	ldr.w	r9, [pc, #364]	; 9fcc <_strtod_l+0x27c>
    9e60:	e7e1      	b.n	9e26 <_strtod_l+0xd6>
    9e62:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
    9e66:	f04f 38ff 	mov.w	r8, #4294967295
    9e6a:	e7dc      	b.n	9e26 <_strtod_l+0xd6>
    9e6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9e6e:	1c5a      	adds	r2, r3, #1
    9e70:	9217      	str	r2, [sp, #92]	; 0x5c
    9e72:	785b      	ldrb	r3, [r3, #1]
    9e74:	2b30      	cmp	r3, #48	; 0x30
    9e76:	d0f9      	beq.n	9e6c <_strtod_l+0x11c>
    9e78:	2b00      	cmp	r3, #0
    9e7a:	d0d8      	beq.n	9e2e <_strtod_l+0xde>
    9e7c:	2301      	movs	r3, #1
    9e7e:	e000      	b.n	9e82 <_strtod_l+0x132>
    9e80:	2300      	movs	r3, #0
    9e82:	2700      	movs	r7, #0
    9e84:	9304      	str	r3, [sp, #16]
    9e86:	220a      	movs	r2, #10
    9e88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9e8a:	e9cd 7705 	strd	r7, r7, [sp, #20]
    9e8e:	930a      	str	r3, [sp, #40]	; 0x28
    9e90:	9817      	ldr	r0, [sp, #92]	; 0x5c
    9e92:	7806      	ldrb	r6, [r0, #0]
    9e94:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
    9e98:	b2d9      	uxtb	r1, r3
    9e9a:	2909      	cmp	r1, #9
    9e9c:	d924      	bls.n	9ee8 <_strtod_l+0x198>
    9e9e:	465a      	mov	r2, fp
    9ea0:	4629      	mov	r1, r5
    9ea2:	f02c fcd5 	bl	36850 <strncmp>
    9ea6:	2800      	cmp	r0, #0
    9ea8:	d02d      	beq.n	9f06 <_strtod_l+0x1b6>
    9eaa:	2000      	movs	r0, #0
    9eac:	4632      	mov	r2, r6
    9eae:	9d05      	ldr	r5, [sp, #20]
    9eb0:	4683      	mov	fp, r0
    9eb2:	4603      	mov	r3, r0
    9eb4:	2a65      	cmp	r2, #101	; 0x65
    9eb6:	d001      	beq.n	9ebc <_strtod_l+0x16c>
    9eb8:	2a45      	cmp	r2, #69	; 0x45
    9eba:	d113      	bne.n	9ee4 <_strtod_l+0x194>
    9ebc:	b91d      	cbnz	r5, 9ec6 <_strtod_l+0x176>
    9ebe:	9a04      	ldr	r2, [sp, #16]
    9ec0:	4302      	orrs	r2, r0
    9ec2:	d094      	beq.n	9dee <_strtod_l+0x9e>
    9ec4:	2500      	movs	r5, #0
    9ec6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    9ec8:	1c62      	adds	r2, r4, #1
    9eca:	9217      	str	r2, [sp, #92]	; 0x5c
    9ecc:	7862      	ldrb	r2, [r4, #1]
    9ece:	2a2b      	cmp	r2, #43	; 0x2b
    9ed0:	d06e      	beq.n	9fb0 <_strtod_l+0x260>
    9ed2:	2a2d      	cmp	r2, #45	; 0x2d
    9ed4:	d072      	beq.n	9fbc <_strtod_l+0x26c>
    9ed6:	f04f 0c00 	mov.w	ip, #0
    9eda:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    9ede:	2909      	cmp	r1, #9
    9ee0:	d97a      	bls.n	9fd8 <_strtod_l+0x288>
    9ee2:	9417      	str	r4, [sp, #92]	; 0x5c
    9ee4:	2600      	movs	r6, #0
    9ee6:	e099      	b.n	a01c <_strtod_l+0x2cc>
    9ee8:	9905      	ldr	r1, [sp, #20]
    9eea:	3001      	adds	r0, #1
    9eec:	2908      	cmp	r1, #8
    9eee:	9017      	str	r0, [sp, #92]	; 0x5c
    9ef0:	bfd7      	itett	le
    9ef2:	9906      	ldrle	r1, [sp, #24]
    9ef4:	fb02 3707 	mlagt	r7, r2, r7, r3
    9ef8:	fb02 3301 	mlale	r3, r2, r1, r3
    9efc:	9306      	strle	r3, [sp, #24]
    9efe:	9b05      	ldr	r3, [sp, #20]
    9f00:	3301      	adds	r3, #1
    9f02:	9305      	str	r3, [sp, #20]
    9f04:	e7c4      	b.n	9e90 <_strtod_l+0x140>
    9f06:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9f08:	eb03 020b 	add.w	r2, r3, fp
    9f0c:	9217      	str	r2, [sp, #92]	; 0x5c
    9f0e:	f813 200b 	ldrb.w	r2, [r3, fp]
    9f12:	9b05      	ldr	r3, [sp, #20]
    9f14:	b3a3      	cbz	r3, 9f80 <_strtod_l+0x230>
    9f16:	4683      	mov	fp, r0
    9f18:	461d      	mov	r5, r3
    9f1a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    9f1e:	2b09      	cmp	r3, #9
    9f20:	d912      	bls.n	9f48 <_strtod_l+0x1f8>
    9f22:	2301      	movs	r3, #1
    9f24:	e7c6      	b.n	9eb4 <_strtod_l+0x164>
    9f26:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9f28:	3001      	adds	r0, #1
    9f2a:	1c5a      	adds	r2, r3, #1
    9f2c:	9217      	str	r2, [sp, #92]	; 0x5c
    9f2e:	785a      	ldrb	r2, [r3, #1]
    9f30:	2a30      	cmp	r2, #48	; 0x30
    9f32:	d0f8      	beq.n	9f26 <_strtod_l+0x1d6>
    9f34:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
    9f38:	2b08      	cmp	r3, #8
    9f3a:	f200 84ea 	bhi.w	a912 <_strtod_l+0xbc2>
    9f3e:	4683      	mov	fp, r0
    9f40:	2000      	movs	r0, #0
    9f42:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9f44:	4605      	mov	r5, r0
    9f46:	930a      	str	r3, [sp, #40]	; 0x28
    9f48:	3a30      	subs	r2, #48	; 0x30
    9f4a:	f100 0301 	add.w	r3, r0, #1
    9f4e:	d011      	beq.n	9f74 <_strtod_l+0x224>
    9f50:	449b      	add	fp, r3
    9f52:	eb00 0c05 	add.w	ip, r0, r5
    9f56:	462b      	mov	r3, r5
    9f58:	210a      	movs	r1, #10
    9f5a:	4563      	cmp	r3, ip
    9f5c:	d112      	bne.n	9f84 <_strtod_l+0x234>
    9f5e:	182b      	adds	r3, r5, r0
    9f60:	3501      	adds	r5, #1
    9f62:	2b08      	cmp	r3, #8
    9f64:	4405      	add	r5, r0
    9f66:	dc19      	bgt.n	9f9c <_strtod_l+0x24c>
    9f68:	9906      	ldr	r1, [sp, #24]
    9f6a:	230a      	movs	r3, #10
    9f6c:	fb03 2301 	mla	r3, r3, r1, r2
    9f70:	9306      	str	r3, [sp, #24]
    9f72:	2300      	movs	r3, #0
    9f74:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    9f76:	4618      	mov	r0, r3
    9f78:	1c51      	adds	r1, r2, #1
    9f7a:	9117      	str	r1, [sp, #92]	; 0x5c
    9f7c:	7852      	ldrb	r2, [r2, #1]
    9f7e:	e7cc      	b.n	9f1a <_strtod_l+0x1ca>
    9f80:	9805      	ldr	r0, [sp, #20]
    9f82:	e7d5      	b.n	9f30 <_strtod_l+0x1e0>
    9f84:	2b08      	cmp	r3, #8
    9f86:	f103 0301 	add.w	r3, r3, #1
    9f8a:	dc03      	bgt.n	9f94 <_strtod_l+0x244>
    9f8c:	9e06      	ldr	r6, [sp, #24]
    9f8e:	434e      	muls	r6, r1
    9f90:	9606      	str	r6, [sp, #24]
    9f92:	e7e2      	b.n	9f5a <_strtod_l+0x20a>
    9f94:	2b10      	cmp	r3, #16
    9f96:	bfd8      	it	le
    9f98:	434f      	mulle	r7, r1
    9f9a:	e7de      	b.n	9f5a <_strtod_l+0x20a>
    9f9c:	2b0f      	cmp	r3, #15
    9f9e:	bfdc      	itt	le
    9fa0:	230a      	movle	r3, #10
    9fa2:	fb03 2707 	mlale	r7, r3, r7, r2
    9fa6:	e7e4      	b.n	9f72 <_strtod_l+0x222>
    9fa8:	f04f 0b00 	mov.w	fp, #0
    9fac:	2301      	movs	r3, #1
    9fae:	e786      	b.n	9ebe <_strtod_l+0x16e>
    9fb0:	f04f 0c00 	mov.w	ip, #0
    9fb4:	1ca2      	adds	r2, r4, #2
    9fb6:	9217      	str	r2, [sp, #92]	; 0x5c
    9fb8:	78a2      	ldrb	r2, [r4, #2]
    9fba:	e78e      	b.n	9eda <_strtod_l+0x18a>
    9fbc:	f04f 0c01 	mov.w	ip, #1
    9fc0:	e7f8      	b.n	9fb4 <_strtod_l+0x264>
    9fc2:	bf00      	nop
    9fc4:	00038a64 	.word	0x00038a64
    9fc8:	00038a4c 	.word	0x00038a4c
    9fcc:	7ff00000 	.word	0x7ff00000
    9fd0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    9fd2:	1c51      	adds	r1, r2, #1
    9fd4:	9117      	str	r1, [sp, #92]	; 0x5c
    9fd6:	7852      	ldrb	r2, [r2, #1]
    9fd8:	2a30      	cmp	r2, #48	; 0x30
    9fda:	d0f9      	beq.n	9fd0 <_strtod_l+0x280>
    9fdc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
    9fe0:	2908      	cmp	r1, #8
    9fe2:	f63f af7f 	bhi.w	9ee4 <_strtod_l+0x194>
    9fe6:	3a30      	subs	r2, #48	; 0x30
    9fe8:	9207      	str	r2, [sp, #28]
    9fea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    9fec:	920d      	str	r2, [sp, #52]	; 0x34
    9fee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    9ff0:	1c56      	adds	r6, r2, #1
    9ff2:	9617      	str	r6, [sp, #92]	; 0x5c
    9ff4:	7852      	ldrb	r2, [r2, #1]
    9ff6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
    9ffa:	f1be 0f09 	cmp.w	lr, #9
    9ffe:	d938      	bls.n	a072 <_strtod_l+0x322>
    a000:	990d      	ldr	r1, [sp, #52]	; 0x34
    a002:	1a76      	subs	r6, r6, r1
    a004:	2e08      	cmp	r6, #8
    a006:	f644 661f 	movw	r6, #19999	; 0x4e1f
    a00a:	dc03      	bgt.n	a014 <_strtod_l+0x2c4>
    a00c:	9907      	ldr	r1, [sp, #28]
    a00e:	428e      	cmp	r6, r1
    a010:	bfa8      	it	ge
    a012:	460e      	movge	r6, r1
    a014:	f1bc 0f00 	cmp.w	ip, #0
    a018:	d000      	beq.n	a01c <_strtod_l+0x2cc>
    a01a:	4276      	negs	r6, r6
    a01c:	2d00      	cmp	r5, #0
    a01e:	d14f      	bne.n	a0c0 <_strtod_l+0x370>
    a020:	9904      	ldr	r1, [sp, #16]
    a022:	4308      	orrs	r0, r1
    a024:	f47f af03 	bne.w	9e2e <_strtod_l+0xde>
    a028:	2b00      	cmp	r3, #0
    a02a:	f47f aee0 	bne.w	9dee <_strtod_l+0x9e>
    a02e:	2a69      	cmp	r2, #105	; 0x69
    a030:	d029      	beq.n	a086 <_strtod_l+0x336>
    a032:	dc26      	bgt.n	a082 <_strtod_l+0x332>
    a034:	2a49      	cmp	r2, #73	; 0x49
    a036:	d026      	beq.n	a086 <_strtod_l+0x336>
    a038:	2a4e      	cmp	r2, #78	; 0x4e
    a03a:	f47f aed8 	bne.w	9dee <_strtod_l+0x9e>
    a03e:	499d      	ldr	r1, [pc, #628]	; (a2b4 <_strtod_l+0x564>)
    a040:	a817      	add	r0, sp, #92	; 0x5c
    a042:	f02c fda1 	bl	36b88 <__match>
    a046:	2800      	cmp	r0, #0
    a048:	f43f aed1 	beq.w	9dee <_strtod_l+0x9e>
    a04c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a04e:	781b      	ldrb	r3, [r3, #0]
    a050:	2b28      	cmp	r3, #40	; 0x28
    a052:	d12f      	bne.n	a0b4 <_strtod_l+0x364>
    a054:	aa1a      	add	r2, sp, #104	; 0x68
    a056:	4998      	ldr	r1, [pc, #608]	; (a2b8 <_strtod_l+0x568>)
    a058:	a817      	add	r0, sp, #92	; 0x5c
    a05a:	f02c fda9 	bl	36bb0 <__hexnan>
    a05e:	2805      	cmp	r0, #5
    a060:	d128      	bne.n	a0b4 <_strtod_l+0x364>
    a062:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    a064:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
    a068:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
    a06c:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
    a070:	e6dd      	b.n	9e2e <_strtod_l+0xde>
    a072:	9e07      	ldr	r6, [sp, #28]
    a074:	210a      	movs	r1, #10
    a076:	fb01 2106 	mla	r1, r1, r6, r2
    a07a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
    a07e:	9207      	str	r2, [sp, #28]
    a080:	e7b5      	b.n	9fee <_strtod_l+0x29e>
    a082:	2a6e      	cmp	r2, #110	; 0x6e
    a084:	e7d9      	b.n	a03a <_strtod_l+0x2ea>
    a086:	498d      	ldr	r1, [pc, #564]	; (a2bc <_strtod_l+0x56c>)
    a088:	a817      	add	r0, sp, #92	; 0x5c
    a08a:	f02c fd7d 	bl	36b88 <__match>
    a08e:	2800      	cmp	r0, #0
    a090:	f43f aead 	beq.w	9dee <_strtod_l+0x9e>
    a094:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a096:	a817      	add	r0, sp, #92	; 0x5c
    a098:	4989      	ldr	r1, [pc, #548]	; (a2c0 <_strtod_l+0x570>)
    a09a:	3b01      	subs	r3, #1
    a09c:	9317      	str	r3, [sp, #92]	; 0x5c
    a09e:	f02c fd73 	bl	36b88 <__match>
    a0a2:	b910      	cbnz	r0, a0aa <_strtod_l+0x35a>
    a0a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a0a6:	3301      	adds	r3, #1
    a0a8:	9317      	str	r3, [sp, #92]	; 0x5c
    a0aa:	f8df 9218 	ldr.w	r9, [pc, #536]	; a2c4 <_strtod_l+0x574>
    a0ae:	f04f 0800 	mov.w	r8, #0
    a0b2:	e6bc      	b.n	9e2e <_strtod_l+0xde>
    a0b4:	4884      	ldr	r0, [pc, #528]	; (a2c8 <_strtod_l+0x578>)
    a0b6:	f024 fa9b 	bl	2e5f0 <nan>
    a0ba:	4680      	mov	r8, r0
    a0bc:	4689      	mov	r9, r1
    a0be:	e6b6      	b.n	9e2e <_strtod_l+0xde>
    a0c0:	eba6 030b 	sub.w	r3, r6, fp
    a0c4:	9806      	ldr	r0, [sp, #24]
    a0c6:	462c      	mov	r4, r5
    a0c8:	930f      	str	r3, [sp, #60]	; 0x3c
    a0ca:	9b05      	ldr	r3, [sp, #20]
    a0cc:	2b00      	cmp	r3, #0
    a0ce:	bf08      	it	eq
    a0d0:	462b      	moveq	r3, r5
    a0d2:	2d10      	cmp	r5, #16
    a0d4:	9305      	str	r3, [sp, #20]
    a0d6:	bfa8      	it	ge
    a0d8:	2410      	movge	r4, #16
    a0da:	f7fe fa2b 	bl	8534 <__aeabi_ui2d>
    a0de:	2d09      	cmp	r5, #9
    a0e0:	4680      	mov	r8, r0
    a0e2:	4689      	mov	r9, r1
    a0e4:	dc14      	bgt.n	a110 <_strtod_l+0x3c0>
    a0e6:	eba6 030b 	sub.w	r3, r6, fp
    a0ea:	2b00      	cmp	r3, #0
    a0ec:	f43f ae9f 	beq.w	9e2e <_strtod_l+0xde>
    a0f0:	eba6 030b 	sub.w	r3, r6, fp
    a0f4:	dd79      	ble.n	a1ea <_strtod_l+0x49a>
    a0f6:	2b16      	cmp	r3, #22
    a0f8:	dc45      	bgt.n	a186 <_strtod_l+0x436>
    a0fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a0fc:	4642      	mov	r2, r8
    a0fe:	4973      	ldr	r1, [pc, #460]	; (a2cc <_strtod_l+0x57c>)
    a100:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    a104:	464b      	mov	r3, r9
    a106:	e9d1 0100 	ldrd	r0, r1, [r1]
    a10a:	f7fe fa8d 	bl	8628 <__aeabi_dmul>
    a10e:	e7d4      	b.n	a0ba <_strtod_l+0x36a>
    a110:	4b6e      	ldr	r3, [pc, #440]	; (a2cc <_strtod_l+0x57c>)
    a112:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    a116:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
    a11a:	f7fe fa85 	bl	8628 <__aeabi_dmul>
    a11e:	4680      	mov	r8, r0
    a120:	4689      	mov	r9, r1
    a122:	4638      	mov	r0, r7
    a124:	f7fe fa06 	bl	8534 <__aeabi_ui2d>
    a128:	4602      	mov	r2, r0
    a12a:	460b      	mov	r3, r1
    a12c:	4640      	mov	r0, r8
    a12e:	4649      	mov	r1, r9
    a130:	f7fe f8c4 	bl	82bc <__adddf3>
    a134:	2d0f      	cmp	r5, #15
    a136:	4680      	mov	r8, r0
    a138:	4689      	mov	r9, r1
    a13a:	ddd4      	ble.n	a0e6 <_strtod_l+0x396>
    a13c:	1b2c      	subs	r4, r5, r4
    a13e:	eba6 030b 	sub.w	r3, r6, fp
    a142:	441c      	add	r4, r3
    a144:	2c00      	cmp	r4, #0
    a146:	dc26      	bgt.n	a196 <_strtod_l+0x446>
    a148:	f000 80a3 	beq.w	a292 <_strtod_l+0x542>
    a14c:	4264      	negs	r4, r4
    a14e:	f014 020f 	ands.w	r2, r4, #15
    a152:	d00a      	beq.n	a16a <_strtod_l+0x41a>
    a154:	4b5d      	ldr	r3, [pc, #372]	; (a2cc <_strtod_l+0x57c>)
    a156:	4640      	mov	r0, r8
    a158:	4649      	mov	r1, r9
    a15a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    a15e:	e9d3 2300 	ldrd	r2, r3, [r3]
    a162:	f7fe fb8b 	bl	887c <__aeabi_ddiv>
    a166:	4680      	mov	r8, r0
    a168:	4689      	mov	r9, r1
    a16a:	1124      	asrs	r4, r4, #4
    a16c:	f000 8091 	beq.w	a292 <_strtod_l+0x542>
    a170:	2c1f      	cmp	r4, #31
    a172:	f340 80b3 	ble.w	a2dc <_strtod_l+0x58c>
    a176:	2322      	movs	r3, #34	; 0x22
    a178:	f04f 0800 	mov.w	r8, #0
    a17c:	f04f 0900 	mov.w	r9, #0
    a180:	f8ca 3000 	str.w	r3, [sl]
    a184:	e653      	b.n	9e2e <_strtod_l+0xde>
    a186:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
    a18a:	eba6 020b 	sub.w	r2, r6, fp
    a18e:	4293      	cmp	r3, r2
    a190:	da19      	bge.n	a1c6 <_strtod_l+0x476>
    a192:	1b2c      	subs	r4, r5, r4
    a194:	4414      	add	r4, r2
    a196:	f014 030f 	ands.w	r3, r4, #15
    a19a:	d00a      	beq.n	a1b2 <_strtod_l+0x462>
    a19c:	494b      	ldr	r1, [pc, #300]	; (a2cc <_strtod_l+0x57c>)
    a19e:	4642      	mov	r2, r8
    a1a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    a1a4:	464b      	mov	r3, r9
    a1a6:	e9d1 0100 	ldrd	r0, r1, [r1]
    a1aa:	f7fe fa3d 	bl	8628 <__aeabi_dmul>
    a1ae:	4680      	mov	r8, r0
    a1b0:	4689      	mov	r9, r1
    a1b2:	f034 040f 	bics.w	r4, r4, #15
    a1b6:	d06c      	beq.n	a292 <_strtod_l+0x542>
    a1b8:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
    a1bc:	dd41      	ble.n	a242 <_strtod_l+0x4f2>
    a1be:	2322      	movs	r3, #34	; 0x22
    a1c0:	f8ca 3000 	str.w	r3, [sl]
    a1c4:	e771      	b.n	a0aa <_strtod_l+0x35a>
    a1c6:	f1c5 050f 	rsb	r5, r5, #15
    a1ca:	4c40      	ldr	r4, [pc, #256]	; (a2cc <_strtod_l+0x57c>)
    a1cc:	4642      	mov	r2, r8
    a1ce:	464b      	mov	r3, r9
    a1d0:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    a1d4:	e9d1 0100 	ldrd	r0, r1, [r1]
    a1d8:	f7fe fa26 	bl	8628 <__aeabi_dmul>
    a1dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a1de:	1b5d      	subs	r5, r3, r5
    a1e0:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    a1e4:	e9d4 2300 	ldrd	r2, r3, [r4]
    a1e8:	e78f      	b.n	a10a <_strtod_l+0x3ba>
    a1ea:	3316      	adds	r3, #22
    a1ec:	dba6      	blt.n	a13c <_strtod_l+0x3ec>
    a1ee:	ebab 0206 	sub.w	r2, fp, r6
    a1f2:	4b36      	ldr	r3, [pc, #216]	; (a2cc <_strtod_l+0x57c>)
    a1f4:	4640      	mov	r0, r8
    a1f6:	4649      	mov	r1, r9
    a1f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    a1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
    a200:	f7fe fb3c 	bl	887c <__aeabi_ddiv>
    a204:	e759      	b.n	a0ba <_strtod_l+0x36a>
    a206:	2300      	movs	r3, #0
    a208:	9306      	str	r3, [sp, #24]
    a20a:	2322      	movs	r3, #34	; 0x22
    a20c:	f8df 90b4 	ldr.w	r9, [pc, #180]	; a2c4 <_strtod_l+0x574>
    a210:	f04f 0800 	mov.w	r8, #0
    a214:	f8ca 3000 	str.w	r3, [sl]
    a218:	9918      	ldr	r1, [sp, #96]	; 0x60
    a21a:	4650      	mov	r0, sl
    a21c:	f023 fa78 	bl	2d710 <_Bfree>
    a220:	9906      	ldr	r1, [sp, #24]
    a222:	4650      	mov	r0, sl
    a224:	f023 fa74 	bl	2d710 <_Bfree>
    a228:	9905      	ldr	r1, [sp, #20]
    a22a:	4650      	mov	r0, sl
    a22c:	f023 fa70 	bl	2d710 <_Bfree>
    a230:	9910      	ldr	r1, [sp, #64]	; 0x40
    a232:	4650      	mov	r0, sl
    a234:	f023 fa6c 	bl	2d710 <_Bfree>
    a238:	9907      	ldr	r1, [sp, #28]
    a23a:	4650      	mov	r0, sl
    a23c:	f023 fa68 	bl	2d710 <_Bfree>
    a240:	e5f5      	b.n	9e2e <_strtod_l+0xde>
    a242:	2300      	movs	r3, #0
    a244:	1124      	asrs	r4, r4, #4
    a246:	4640      	mov	r0, r8
    a248:	4649      	mov	r1, r9
    a24a:	4f21      	ldr	r7, [pc, #132]	; (a2d0 <_strtod_l+0x580>)
    a24c:	9304      	str	r3, [sp, #16]
    a24e:	2c01      	cmp	r4, #1
    a250:	dc22      	bgt.n	a298 <_strtod_l+0x548>
    a252:	b10b      	cbz	r3, a258 <_strtod_l+0x508>
    a254:	4680      	mov	r8, r0
    a256:	4689      	mov	r9, r1
    a258:	9b04      	ldr	r3, [sp, #16]
    a25a:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
    a25e:	491c      	ldr	r1, [pc, #112]	; (a2d0 <_strtod_l+0x580>)
    a260:	4642      	mov	r2, r8
    a262:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    a266:	464b      	mov	r3, r9
    a268:	e9d1 0100 	ldrd	r0, r1, [r1]
    a26c:	f7fe f9dc 	bl	8628 <__aeabi_dmul>
    a270:	4b14      	ldr	r3, [pc, #80]	; (a2c4 <_strtod_l+0x574>)
    a272:	460a      	mov	r2, r1
    a274:	4680      	mov	r8, r0
    a276:	400b      	ands	r3, r1
    a278:	4916      	ldr	r1, [pc, #88]	; (a2d4 <_strtod_l+0x584>)
    a27a:	428b      	cmp	r3, r1
    a27c:	d89f      	bhi.n	a1be <_strtod_l+0x46e>
    a27e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
    a282:	428b      	cmp	r3, r1
    a284:	bf86      	itte	hi
    a286:	f8df 9050 	ldrhi.w	r9, [pc, #80]	; a2d8 <_strtod_l+0x588>
    a28a:	f04f 38ff 	movhi.w	r8, #4294967295
    a28e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
    a292:	2300      	movs	r3, #0
    a294:	9304      	str	r3, [sp, #16]
    a296:	e04c      	b.n	a332 <_strtod_l+0x5e2>
    a298:	07e2      	lsls	r2, r4, #31
    a29a:	d504      	bpl.n	a2a6 <_strtod_l+0x556>
    a29c:	e9d7 2300 	ldrd	r2, r3, [r7]
    a2a0:	f7fe f9c2 	bl	8628 <__aeabi_dmul>
    a2a4:	2301      	movs	r3, #1
    a2a6:	9a04      	ldr	r2, [sp, #16]
    a2a8:	1064      	asrs	r4, r4, #1
    a2aa:	3708      	adds	r7, #8
    a2ac:	3201      	adds	r2, #1
    a2ae:	9204      	str	r2, [sp, #16]
    a2b0:	e7cd      	b.n	a24e <_strtod_l+0x4fe>
    a2b2:	bf00      	nop
    a2b4:	0003c9c4 	.word	0x0003c9c4
    a2b8:	00038a38 	.word	0x00038a38
    a2bc:	0003a3d2 	.word	0x0003a3d2
    a2c0:	00042033 	.word	0x00042033
    a2c4:	7ff00000 	.word	0x7ff00000
    a2c8:	0003a4ea 	.word	0x0003a4ea
    a2cc:	00037c98 	.word	0x00037c98
    a2d0:	00037c70 	.word	0x00037c70
    a2d4:	7ca00000 	.word	0x7ca00000
    a2d8:	7fefffff 	.word	0x7fefffff
    a2dc:	f014 0310 	ands.w	r3, r4, #16
    a2e0:	4640      	mov	r0, r8
    a2e2:	4649      	mov	r1, r9
    a2e4:	4fab      	ldr	r7, [pc, #684]	; (a594 <_strtod_l+0x844>)
    a2e6:	bf18      	it	ne
    a2e8:	236a      	movne	r3, #106	; 0x6a
    a2ea:	9304      	str	r3, [sp, #16]
    a2ec:	2300      	movs	r3, #0
    a2ee:	07e2      	lsls	r2, r4, #31
    a2f0:	d504      	bpl.n	a2fc <_strtod_l+0x5ac>
    a2f2:	e9d7 2300 	ldrd	r2, r3, [r7]
    a2f6:	f7fe f997 	bl	8628 <__aeabi_dmul>
    a2fa:	2301      	movs	r3, #1
    a2fc:	1064      	asrs	r4, r4, #1
    a2fe:	f107 0708 	add.w	r7, r7, #8
    a302:	d1f4      	bne.n	a2ee <_strtod_l+0x59e>
    a304:	b10b      	cbz	r3, a30a <_strtod_l+0x5ba>
    a306:	4680      	mov	r8, r0
    a308:	4689      	mov	r9, r1
    a30a:	9b04      	ldr	r3, [sp, #16]
    a30c:	b143      	cbz	r3, a320 <_strtod_l+0x5d0>
    a30e:	f3c9 520a 	ubfx	r2, r9, #20, #11
    a312:	4649      	mov	r1, r9
    a314:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
    a318:	2b00      	cmp	r3, #0
    a31a:	dc50      	bgt.n	a3be <_strtod_l+0x66e>
    a31c:	236a      	movs	r3, #106	; 0x6a
    a31e:	9304      	str	r3, [sp, #16]
    a320:	2200      	movs	r2, #0
    a322:	2300      	movs	r3, #0
    a324:	4640      	mov	r0, r8
    a326:	4649      	mov	r1, r9
    a328:	f7fe fbe6 	bl	8af8 <__aeabi_dcmpeq>
    a32c:	2800      	cmp	r0, #0
    a32e:	f47f af22 	bne.w	a176 <_strtod_l+0x426>
    a332:	9b06      	ldr	r3, [sp, #24]
    a334:	4650      	mov	r0, sl
    a336:	9a05      	ldr	r2, [sp, #20]
    a338:	9300      	str	r3, [sp, #0]
    a33a:	462b      	mov	r3, r5
    a33c:	990a      	ldr	r1, [sp, #40]	; 0x28
    a33e:	f023 fa51 	bl	2d7e4 <__s2b>
    a342:	9010      	str	r0, [sp, #64]	; 0x40
    a344:	2800      	cmp	r0, #0
    a346:	f43f af3a 	beq.w	a1be <_strtod_l+0x46e>
    a34a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a34c:	ebab 0b06 	sub.w	fp, fp, r6
    a350:	2b00      	cmp	r3, #0
    a352:	bfb4      	ite	lt
    a354:	465b      	movlt	r3, fp
    a356:	2300      	movge	r3, #0
    a358:	9311      	str	r3, [sp, #68]	; 0x44
    a35a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a35c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    a360:	9314      	str	r3, [sp, #80]	; 0x50
    a362:	2300      	movs	r3, #0
    a364:	9307      	str	r3, [sp, #28]
    a366:	9305      	str	r3, [sp, #20]
    a368:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a36a:	4650      	mov	r0, sl
    a36c:	6859      	ldr	r1, [r3, #4]
    a36e:	f023 f98f 	bl	2d690 <_Balloc>
    a372:	9006      	str	r0, [sp, #24]
    a374:	2800      	cmp	r0, #0
    a376:	f43f af48 	beq.w	a20a <_strtod_l+0x4ba>
    a37a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a37c:	300c      	adds	r0, #12
    a37e:	691a      	ldr	r2, [r3, #16]
    a380:	f103 010c 	add.w	r1, r3, #12
    a384:	3202      	adds	r2, #2
    a386:	0092      	lsls	r2, r2, #2
    a388:	f02c f8ce 	bl	36528 <memcpy>
    a38c:	ab1a      	add	r3, sp, #104	; 0x68
    a38e:	4642      	mov	r2, r8
    a390:	4650      	mov	r0, sl
    a392:	9301      	str	r3, [sp, #4]
    a394:	ab19      	add	r3, sp, #100	; 0x64
    a396:	9300      	str	r3, [sp, #0]
    a398:	464b      	mov	r3, r9
    a39a:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
    a39e:	f023 fcf1 	bl	2dd84 <__d2b>
    a3a2:	9018      	str	r0, [sp, #96]	; 0x60
    a3a4:	2800      	cmp	r0, #0
    a3a6:	f43f af30 	beq.w	a20a <_strtod_l+0x4ba>
    a3aa:	2101      	movs	r1, #1
    a3ac:	4650      	mov	r0, sl
    a3ae:	f023 fa63 	bl	2d878 <__i2b>
    a3b2:	4603      	mov	r3, r0
    a3b4:	9005      	str	r0, [sp, #20]
    a3b6:	b9d0      	cbnz	r0, a3ee <_strtod_l+0x69e>
    a3b8:	2300      	movs	r3, #0
    a3ba:	9305      	str	r3, [sp, #20]
    a3bc:	e725      	b.n	a20a <_strtod_l+0x4ba>
    a3be:	2b1f      	cmp	r3, #31
    a3c0:	dd0e      	ble.n	a3e0 <_strtod_l+0x690>
    a3c2:	2b34      	cmp	r3, #52	; 0x34
    a3c4:	f04f 0800 	mov.w	r8, #0
    a3c8:	bfdb      	ittet	le
    a3ca:	f04f 33ff 	movle.w	r3, #4294967295
    a3ce:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
    a3d2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
    a3d6:	4093      	lslle	r3, r2
    a3d8:	bfd8      	it	le
    a3da:	ea03 0901 	andle.w	r9, r3, r1
    a3de:	e79d      	b.n	a31c <_strtod_l+0x5cc>
    a3e0:	f04f 32ff 	mov.w	r2, #4294967295
    a3e4:	fa02 f303 	lsl.w	r3, r2, r3
    a3e8:	ea03 0808 	and.w	r8, r3, r8
    a3ec:	e796      	b.n	a31c <_strtod_l+0x5cc>
    a3ee:	9c19      	ldr	r4, [sp, #100]	; 0x64
    a3f0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    a3f2:	2c00      	cmp	r4, #0
    a3f4:	bfa9      	itett	ge
    a3f6:	9b11      	ldrge	r3, [sp, #68]	; 0x44
    a3f8:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
    a3fa:	18e7      	addge	r7, r4, r3
    a3fc:	9e14      	ldrge	r6, [sp, #80]	; 0x50
    a3fe:	bfb8      	it	lt
    a400:	1b1e      	sublt	r6, r3, r4
    a402:	9b04      	ldr	r3, [sp, #16]
    a404:	bfb8      	it	lt
    a406:	9f11      	ldrlt	r7, [sp, #68]	; 0x44
    a408:	1ae4      	subs	r4, r4, r3
    a40a:	4b63      	ldr	r3, [pc, #396]	; (a598 <_strtod_l+0x848>)
    a40c:	4414      	add	r4, r2
    a40e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
    a412:	3c01      	subs	r4, #1
    a414:	429c      	cmp	r4, r3
    a416:	f280 80b0 	bge.w	a57a <_strtod_l+0x82a>
    a41a:	1b1b      	subs	r3, r3, r4
    a41c:	2501      	movs	r5, #1
    a41e:	2b1f      	cmp	r3, #31
    a420:	eba2 0203 	sub.w	r2, r2, r3
    a424:	bfcd      	iteet	gt
    a426:	f1c4 447f 	rsbgt	r4, r4, #4278190080	; 0xff000000
    a42a:	409d      	lslle	r5, r3
    a42c:	2400      	movle	r4, #0
    a42e:	f504 047f 	addgt.w	r4, r4, #16711680	; 0xff0000
    a432:	bfc2      	ittt	gt
    a434:	f504 447b 	addgt.w	r4, r4, #64256	; 0xfb00
    a438:	34e2      	addgt	r4, #226	; 0xe2
    a43a:	fa05 f404 	lslgt.w	r4, r5, r4
    a43e:	eb07 0b02 	add.w	fp, r7, r2
    a442:	9b04      	ldr	r3, [sp, #16]
    a444:	4416      	add	r6, r2
    a446:	455f      	cmp	r7, fp
    a448:	441e      	add	r6, r3
    a44a:	463b      	mov	r3, r7
    a44c:	bfa8      	it	ge
    a44e:	465b      	movge	r3, fp
    a450:	42b3      	cmp	r3, r6
    a452:	bfa8      	it	ge
    a454:	4633      	movge	r3, r6
    a456:	2b00      	cmp	r3, #0
    a458:	bfc2      	ittt	gt
    a45a:	ebab 0b03 	subgt.w	fp, fp, r3
    a45e:	1af6      	subgt	r6, r6, r3
    a460:	1aff      	subgt	r7, r7, r3
    a462:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a464:	2b00      	cmp	r3, #0
    a466:	dd16      	ble.n	a496 <_strtod_l+0x746>
    a468:	461a      	mov	r2, r3
    a46a:	9905      	ldr	r1, [sp, #20]
    a46c:	4650      	mov	r0, sl
    a46e:	f023 fac3 	bl	2d9f8 <__pow5mult>
    a472:	9005      	str	r0, [sp, #20]
    a474:	2800      	cmp	r0, #0
    a476:	d09f      	beq.n	a3b8 <_strtod_l+0x668>
    a478:	4601      	mov	r1, r0
    a47a:	9a18      	ldr	r2, [sp, #96]	; 0x60
    a47c:	4650      	mov	r0, sl
    a47e:	f023 fa11 	bl	2d8a4 <__multiply>
    a482:	900d      	str	r0, [sp, #52]	; 0x34
    a484:	2800      	cmp	r0, #0
    a486:	f43f aec0 	beq.w	a20a <_strtod_l+0x4ba>
    a48a:	9918      	ldr	r1, [sp, #96]	; 0x60
    a48c:	4650      	mov	r0, sl
    a48e:	f023 f93f 	bl	2d710 <_Bfree>
    a492:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a494:	9318      	str	r3, [sp, #96]	; 0x60
    a496:	f1bb 0f00 	cmp.w	fp, #0
    a49a:	dc71      	bgt.n	a580 <_strtod_l+0x830>
    a49c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a49e:	2b00      	cmp	r3, #0
    a4a0:	dd08      	ble.n	a4b4 <_strtod_l+0x764>
    a4a2:	9a14      	ldr	r2, [sp, #80]	; 0x50
    a4a4:	4650      	mov	r0, sl
    a4a6:	9906      	ldr	r1, [sp, #24]
    a4a8:	f023 faa6 	bl	2d9f8 <__pow5mult>
    a4ac:	9006      	str	r0, [sp, #24]
    a4ae:	2800      	cmp	r0, #0
    a4b0:	f43f aea9 	beq.w	a206 <_strtod_l+0x4b6>
    a4b4:	2e00      	cmp	r6, #0
    a4b6:	dd08      	ble.n	a4ca <_strtod_l+0x77a>
    a4b8:	4632      	mov	r2, r6
    a4ba:	9906      	ldr	r1, [sp, #24]
    a4bc:	4650      	mov	r0, sl
    a4be:	f023 faf5 	bl	2daac <__lshift>
    a4c2:	9006      	str	r0, [sp, #24]
    a4c4:	2800      	cmp	r0, #0
    a4c6:	f43f ae9e 	beq.w	a206 <_strtod_l+0x4b6>
    a4ca:	2f00      	cmp	r7, #0
    a4cc:	dd08      	ble.n	a4e0 <_strtod_l+0x790>
    a4ce:	463a      	mov	r2, r7
    a4d0:	9905      	ldr	r1, [sp, #20]
    a4d2:	4650      	mov	r0, sl
    a4d4:	f023 faea 	bl	2daac <__lshift>
    a4d8:	9005      	str	r0, [sp, #20]
    a4da:	2800      	cmp	r0, #0
    a4dc:	f43f ae95 	beq.w	a20a <_strtod_l+0x4ba>
    a4e0:	9a06      	ldr	r2, [sp, #24]
    a4e2:	4650      	mov	r0, sl
    a4e4:	9918      	ldr	r1, [sp, #96]	; 0x60
    a4e6:	f023 fb4d 	bl	2db84 <__mdiff>
    a4ea:	9007      	str	r0, [sp, #28]
    a4ec:	2800      	cmp	r0, #0
    a4ee:	f43f ae8c 	beq.w	a20a <_strtod_l+0x4ba>
    a4f2:	68c3      	ldr	r3, [r0, #12]
    a4f4:	9905      	ldr	r1, [sp, #20]
    a4f6:	930d      	str	r3, [sp, #52]	; 0x34
    a4f8:	2300      	movs	r3, #0
    a4fa:	60c3      	str	r3, [r0, #12]
    a4fc:	f02c fc54 	bl	36da8 <__mcmp>
    a500:	2800      	cmp	r0, #0
    a502:	da4b      	bge.n	a59c <_strtod_l+0x84c>
    a504:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a506:	ea53 0308 	orrs.w	r3, r3, r8
    a50a:	f040 80bc 	bne.w	a686 <_strtod_l+0x936>
    a50e:	f3c9 0313 	ubfx	r3, r9, #0, #20
    a512:	2b00      	cmp	r3, #0
    a514:	f040 80b7 	bne.w	a686 <_strtod_l+0x936>
    a518:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
    a51c:	0d1b      	lsrs	r3, r3, #20
    a51e:	051b      	lsls	r3, r3, #20
    a520:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    a524:	f240 80af 	bls.w	a686 <_strtod_l+0x936>
    a528:	9b07      	ldr	r3, [sp, #28]
    a52a:	695b      	ldr	r3, [r3, #20]
    a52c:	b923      	cbnz	r3, a538 <_strtod_l+0x7e8>
    a52e:	9b07      	ldr	r3, [sp, #28]
    a530:	691b      	ldr	r3, [r3, #16]
    a532:	2b01      	cmp	r3, #1
    a534:	f340 80a7 	ble.w	a686 <_strtod_l+0x936>
    a538:	2201      	movs	r2, #1
    a53a:	9907      	ldr	r1, [sp, #28]
    a53c:	4650      	mov	r0, sl
    a53e:	f023 fab5 	bl	2daac <__lshift>
    a542:	9905      	ldr	r1, [sp, #20]
    a544:	9007      	str	r0, [sp, #28]
    a546:	f02c fc2f 	bl	36da8 <__mcmp>
    a54a:	2800      	cmp	r0, #0
    a54c:	f340 809b 	ble.w	a686 <_strtod_l+0x936>
    a550:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
    a554:	9a04      	ldr	r2, [sp, #16]
    a556:	0d1b      	lsrs	r3, r3, #20
    a558:	051b      	lsls	r3, r3, #20
    a55a:	2a00      	cmp	r2, #0
    a55c:	d079      	beq.n	a652 <_strtod_l+0x902>
    a55e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    a562:	d86d      	bhi.n	a640 <_strtod_l+0x8f0>
    a564:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
    a568:	d846      	bhi.n	a5f8 <_strtod_l+0x8a8>
    a56a:	f04f 0800 	mov.w	r8, #0
    a56e:	f04f 0900 	mov.w	r9, #0
    a572:	2322      	movs	r3, #34	; 0x22
    a574:	f8ca 3000 	str.w	r3, [sl]
    a578:	e64e      	b.n	a218 <_strtod_l+0x4c8>
    a57a:	2400      	movs	r4, #0
    a57c:	2501      	movs	r5, #1
    a57e:	e75e      	b.n	a43e <_strtod_l+0x6ee>
    a580:	465a      	mov	r2, fp
    a582:	9918      	ldr	r1, [sp, #96]	; 0x60
    a584:	4650      	mov	r0, sl
    a586:	f023 fa91 	bl	2daac <__lshift>
    a58a:	9018      	str	r0, [sp, #96]	; 0x60
    a58c:	2800      	cmp	r0, #0
    a58e:	d185      	bne.n	a49c <_strtod_l+0x74c>
    a590:	e63b      	b.n	a20a <_strtod_l+0x4ba>
    a592:	bf00      	nop
    a594:	00037c48 	.word	0x00037c48
    a598:	fffffc02 	.word	0xfffffc02
    a59c:	46cb      	mov	fp, r9
    a59e:	f040 80a3 	bne.w	a6e8 <_strtod_l+0x998>
    a5a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    a5a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
    a5a8:	2a00      	cmp	r2, #0
    a5aa:	d040      	beq.n	a62e <_strtod_l+0x8de>
    a5ac:	4a96      	ldr	r2, [pc, #600]	; (a808 <_strtod_l+0xab8>)
    a5ae:	4293      	cmp	r3, r2
    a5b0:	d158      	bne.n	a664 <_strtod_l+0x914>
    a5b2:	9b04      	ldr	r3, [sp, #16]
    a5b4:	4642      	mov	r2, r8
    a5b6:	b97b      	cbnz	r3, a5d8 <_strtod_l+0x888>
    a5b8:	f1b8 3fff 	cmp.w	r8, #4294967295
    a5bc:	f040 8089 	bne.w	a6d2 <_strtod_l+0x982>
    a5c0:	4b92      	ldr	r3, [pc, #584]	; (a80c <_strtod_l+0xabc>)
    a5c2:	4599      	cmp	r9, r3
    a5c4:	f43f ae21 	beq.w	a20a <_strtod_l+0x4ba>
    a5c8:	4b91      	ldr	r3, [pc, #580]	; (a810 <_strtod_l+0xac0>)
    a5ca:	f8dd 8010 	ldr.w	r8, [sp, #16]
    a5ce:	ea09 0303 	and.w	r3, r9, r3
    a5d2:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
    a5d6:	e61f      	b.n	a218 <_strtod_l+0x4c8>
    a5d8:	4b8d      	ldr	r3, [pc, #564]	; (a810 <_strtod_l+0xac0>)
    a5da:	ea09 0303 	and.w	r3, r9, r3
    a5de:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
    a5e2:	d916      	bls.n	a612 <_strtod_l+0x8c2>
    a5e4:	f118 0101 	adds.w	r1, r8, #1
    a5e8:	d11b      	bne.n	a622 <_strtod_l+0x8d2>
    a5ea:	4a88      	ldr	r2, [pc, #544]	; (a80c <_strtod_l+0xabc>)
    a5ec:	4591      	cmp	r9, r2
    a5ee:	f43f ae0c 	beq.w	a20a <_strtod_l+0x4ba>
    a5f2:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
    a5f6:	4680      	mov	r8, r0
    a5f8:	4b86      	ldr	r3, [pc, #536]	; (a814 <_strtod_l+0xac4>)
    a5fa:	4640      	mov	r0, r8
    a5fc:	4649      	mov	r1, r9
    a5fe:	2200      	movs	r2, #0
    a600:	f7fe f812 	bl	8628 <__aeabi_dmul>
    a604:	460b      	mov	r3, r1
    a606:	4680      	mov	r8, r0
    a608:	4689      	mov	r9, r1
    a60a:	4303      	orrs	r3, r0
    a60c:	f47f ae04 	bne.w	a218 <_strtod_l+0x4c8>
    a610:	e7af      	b.n	a572 <_strtod_l+0x822>
    a612:	0d1e      	lsrs	r6, r3, #20
    a614:	f04f 31ff 	mov.w	r1, #4294967295
    a618:	f1c6 066b 	rsb	r6, r6, #107	; 0x6b
    a61c:	40b1      	lsls	r1, r6
    a61e:	4588      	cmp	r8, r1
    a620:	d0e7      	beq.n	a5f2 <_strtod_l+0x8a2>
    a622:	2c00      	cmp	r4, #0
    a624:	d05e      	beq.n	a6e4 <_strtod_l+0x994>
    a626:	ea14 0f0b 	tst.w	r4, fp
    a62a:	d0e5      	beq.n	a5f8 <_strtod_l+0x8a8>
    a62c:	e01e      	b.n	a66c <_strtod_l+0x91c>
    a62e:	2b00      	cmp	r3, #0
    a630:	d14a      	bne.n	a6c8 <_strtod_l+0x978>
    a632:	f1b8 0f00 	cmp.w	r8, #0
    a636:	d08b      	beq.n	a550 <_strtod_l+0x800>
    a638:	b364      	cbz	r4, a694 <_strtod_l+0x944>
    a63a:	ea14 0f0b 	tst.w	r4, fp
    a63e:	e02b      	b.n	a698 <_strtod_l+0x948>
    a640:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
    a644:	f04f 38ff 	mov.w	r8, #4294967295
    a648:	ea6f 5913 	mvn.w	r9, r3, lsr #20
    a64c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
    a650:	e7d2      	b.n	a5f8 <_strtod_l+0x8a8>
    a652:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
    a656:	f04f 38ff 	mov.w	r8, #4294967295
    a65a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
    a65e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
    a662:	e5d9      	b.n	a218 <_strtod_l+0x4c8>
    a664:	b19c      	cbz	r4, a68e <_strtod_l+0x93e>
    a666:	ea14 0f09 	tst.w	r4, r9
    a66a:	d00c      	beq.n	a686 <_strtod_l+0x936>
    a66c:	9a04      	ldr	r2, [sp, #16]
    a66e:	4640      	mov	r0, r8
    a670:	4649      	mov	r1, r9
    a672:	f02c f934 	bl	368de <sulp>
    a676:	4602      	mov	r2, r0
    a678:	460b      	mov	r3, r1
    a67a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    a67e:	f7fd fe1d 	bl	82bc <__adddf3>
    a682:	4680      	mov	r8, r0
    a684:	4689      	mov	r9, r1
    a686:	9b04      	ldr	r3, [sp, #16]
    a688:	2b00      	cmp	r3, #0
    a68a:	d1b5      	bne.n	a5f8 <_strtod_l+0x8a8>
    a68c:	e5c4      	b.n	a218 <_strtod_l+0x4c8>
    a68e:	ea15 0f08 	tst.w	r5, r8
    a692:	e7ea      	b.n	a66a <_strtod_l+0x91a>
    a694:	ea18 0f05 	tst.w	r8, r5
    a698:	d0f5      	beq.n	a686 <_strtod_l+0x936>
    a69a:	9a04      	ldr	r2, [sp, #16]
    a69c:	4640      	mov	r0, r8
    a69e:	4649      	mov	r1, r9
    a6a0:	f02c f91d 	bl	368de <sulp>
    a6a4:	4602      	mov	r2, r0
    a6a6:	460b      	mov	r3, r1
    a6a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    a6ac:	f7fd fe04 	bl	82b8 <__aeabi_dsub>
    a6b0:	2200      	movs	r2, #0
    a6b2:	2300      	movs	r3, #0
    a6b4:	4604      	mov	r4, r0
    a6b6:	460d      	mov	r5, r1
    a6b8:	f7fe fa1e 	bl	8af8 <__aeabi_dcmpeq>
    a6bc:	2800      	cmp	r0, #0
    a6be:	f47f af54 	bne.w	a56a <_strtod_l+0x81a>
    a6c2:	46a0      	mov	r8, r4
    a6c4:	46a9      	mov	r9, r5
    a6c6:	e7de      	b.n	a686 <_strtod_l+0x936>
    a6c8:	2c00      	cmp	r4, #0
    a6ca:	d1b6      	bne.n	a63a <_strtod_l+0x8ea>
    a6cc:	ea15 0f08 	tst.w	r5, r8
    a6d0:	e7e2      	b.n	a698 <_strtod_l+0x948>
    a6d2:	b124      	cbz	r4, a6de <_strtod_l+0x98e>
    a6d4:	ea14 0f09 	tst.w	r4, r9
    a6d8:	f43f ad9e 	beq.w	a218 <_strtod_l+0x4c8>
    a6dc:	e7c6      	b.n	a66c <_strtod_l+0x91c>
    a6de:	ea18 0f05 	tst.w	r8, r5
    a6e2:	e7f9      	b.n	a6d8 <_strtod_l+0x988>
    a6e4:	422a      	tst	r2, r5
    a6e6:	e7a0      	b.n	a62a <_strtod_l+0x8da>
    a6e8:	9905      	ldr	r1, [sp, #20]
    a6ea:	9807      	ldr	r0, [sp, #28]
    a6ec:	f02c fb77 	bl	36dde <__ratio>
    a6f0:	2200      	movs	r2, #0
    a6f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a6f6:	4604      	mov	r4, r0
    a6f8:	460d      	mov	r5, r1
    a6fa:	f7fe fa11 	bl	8b20 <__aeabi_dcmple>
    a6fe:	2800      	cmp	r0, #0
    a700:	d06d      	beq.n	a7de <_strtod_l+0xa8e>
    a702:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a704:	2b00      	cmp	r3, #0
    a706:	d178      	bne.n	a7fa <_strtod_l+0xaaa>
    a708:	f1b8 0f00 	cmp.w	r8, #0
    a70c:	d156      	bne.n	a7bc <_strtod_l+0xa6c>
    a70e:	f3c9 0313 	ubfx	r3, r9, #0, #20
    a712:	2b00      	cmp	r3, #0
    a714:	d159      	bne.n	a7ca <_strtod_l+0xa7a>
    a716:	2200      	movs	r2, #0
    a718:	4b3f      	ldr	r3, [pc, #252]	; (a818 <_strtod_l+0xac8>)
    a71a:	4620      	mov	r0, r4
    a71c:	4629      	mov	r1, r5
    a71e:	f7fe f9f5 	bl	8b0c <__aeabi_dcmplt>
    a722:	2800      	cmp	r0, #0
    a724:	d158      	bne.n	a7d8 <_strtod_l+0xa88>
    a726:	4620      	mov	r0, r4
    a728:	4629      	mov	r1, r5
    a72a:	2200      	movs	r2, #0
    a72c:	4b3b      	ldr	r3, [pc, #236]	; (a81c <_strtod_l+0xacc>)
    a72e:	f7fd ff7b 	bl	8628 <__aeabi_dmul>
    a732:	4604      	mov	r4, r0
    a734:	460d      	mov	r5, r1
    a736:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
    a73a:	9408      	str	r4, [sp, #32]
    a73c:	9309      	str	r3, [sp, #36]	; 0x24
    a73e:	4b34      	ldr	r3, [pc, #208]	; (a810 <_strtod_l+0xac0>)
    a740:	4a33      	ldr	r2, [pc, #204]	; (a810 <_strtod_l+0xac0>)
    a742:	ea0b 0303 	and.w	r3, fp, r3
    a746:	ea0b 0202 	and.w	r2, fp, r2
    a74a:	9315      	str	r3, [sp, #84]	; 0x54
    a74c:	4b34      	ldr	r3, [pc, #208]	; (a820 <_strtod_l+0xad0>)
    a74e:	429a      	cmp	r2, r3
    a750:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
    a754:	f040 809e 	bne.w	a894 <_strtod_l+0xb44>
    a758:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
    a75c:	4640      	mov	r0, r8
    a75e:	4649      	mov	r1, r9
    a760:	f023 faa6 	bl	2dcb0 <__ulp>
    a764:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    a768:	f7fd ff5e 	bl	8628 <__aeabi_dmul>
    a76c:	4642      	mov	r2, r8
    a76e:	464b      	mov	r3, r9
    a770:	f7fd fda4 	bl	82bc <__adddf3>
    a774:	460b      	mov	r3, r1
    a776:	4926      	ldr	r1, [pc, #152]	; (a810 <_strtod_l+0xac0>)
    a778:	4680      	mov	r8, r0
    a77a:	4a2a      	ldr	r2, [pc, #168]	; (a824 <_strtod_l+0xad4>)
    a77c:	4019      	ands	r1, r3
    a77e:	4291      	cmp	r1, r2
    a780:	d954      	bls.n	a82c <_strtod_l+0xadc>
    a782:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a784:	4b21      	ldr	r3, [pc, #132]	; (a80c <_strtod_l+0xabc>)
    a786:	429a      	cmp	r2, r3
    a788:	d103      	bne.n	a792 <_strtod_l+0xa42>
    a78a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a78c:	3301      	adds	r3, #1
    a78e:	f43f ad3c 	beq.w	a20a <_strtod_l+0x4ba>
    a792:	f8df 9078 	ldr.w	r9, [pc, #120]	; a80c <_strtod_l+0xabc>
    a796:	f04f 38ff 	mov.w	r8, #4294967295
    a79a:	9918      	ldr	r1, [sp, #96]	; 0x60
    a79c:	4650      	mov	r0, sl
    a79e:	f022 ffb7 	bl	2d710 <_Bfree>
    a7a2:	9906      	ldr	r1, [sp, #24]
    a7a4:	4650      	mov	r0, sl
    a7a6:	f022 ffb3 	bl	2d710 <_Bfree>
    a7aa:	9905      	ldr	r1, [sp, #20]
    a7ac:	4650      	mov	r0, sl
    a7ae:	f022 ffaf 	bl	2d710 <_Bfree>
    a7b2:	9907      	ldr	r1, [sp, #28]
    a7b4:	4650      	mov	r0, sl
    a7b6:	f022 ffab 	bl	2d710 <_Bfree>
    a7ba:	e5d5      	b.n	a368 <_strtod_l+0x618>
    a7bc:	f1b8 0f01 	cmp.w	r8, #1
    a7c0:	d103      	bne.n	a7ca <_strtod_l+0xa7a>
    a7c2:	f1b9 0f00 	cmp.w	r9, #0
    a7c6:	f43f aed0 	beq.w	a56a <_strtod_l+0x81a>
    a7ca:	4c17      	ldr	r4, [pc, #92]	; (a828 <_strtod_l+0xad8>)
    a7cc:	2300      	movs	r3, #0
    a7ce:	4d12      	ldr	r5, [pc, #72]	; (a818 <_strtod_l+0xac8>)
    a7d0:	e9cd 3408 	strd	r3, r4, [sp, #32]
    a7d4:	2400      	movs	r4, #0
    a7d6:	e7b2      	b.n	a73e <_strtod_l+0x9ee>
    a7d8:	2400      	movs	r4, #0
    a7da:	4d10      	ldr	r5, [pc, #64]	; (a81c <_strtod_l+0xacc>)
    a7dc:	e7ab      	b.n	a736 <_strtod_l+0x9e6>
    a7de:	4b0f      	ldr	r3, [pc, #60]	; (a81c <_strtod_l+0xacc>)
    a7e0:	4620      	mov	r0, r4
    a7e2:	4629      	mov	r1, r5
    a7e4:	2200      	movs	r2, #0
    a7e6:	f7fd ff1f 	bl	8628 <__aeabi_dmul>
    a7ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a7ec:	4604      	mov	r4, r0
    a7ee:	460d      	mov	r5, r1
    a7f0:	2b00      	cmp	r3, #0
    a7f2:	d0a0      	beq.n	a736 <_strtod_l+0x9e6>
    a7f4:	e9cd 4508 	strd	r4, r5, [sp, #32]
    a7f8:	e7a1      	b.n	a73e <_strtod_l+0x9ee>
    a7fa:	4c07      	ldr	r4, [pc, #28]	; (a818 <_strtod_l+0xac8>)
    a7fc:	2300      	movs	r3, #0
    a7fe:	4625      	mov	r5, r4
    a800:	e9cd 3408 	strd	r3, r4, [sp, #32]
    a804:	461c      	mov	r4, r3
    a806:	e79a      	b.n	a73e <_strtod_l+0x9ee>
    a808:	000fffff 	.word	0x000fffff
    a80c:	7fefffff 	.word	0x7fefffff
    a810:	7ff00000 	.word	0x7ff00000
    a814:	39500000 	.word	0x39500000
    a818:	3ff00000 	.word	0x3ff00000
    a81c:	3fe00000 	.word	0x3fe00000
    a820:	7fe00000 	.word	0x7fe00000
    a824:	7c9fffff 	.word	0x7c9fffff
    a828:	bff00000 	.word	0xbff00000
    a82c:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
    a830:	9b04      	ldr	r3, [sp, #16]
    a832:	464e      	mov	r6, r9
    a834:	2b00      	cmp	r3, #0
    a836:	d1b0      	bne.n	a79a <_strtod_l+0xa4a>
    a838:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
    a83c:	9a15      	ldr	r2, [sp, #84]	; 0x54
    a83e:	0d1b      	lsrs	r3, r3, #20
    a840:	051b      	lsls	r3, r3, #20
    a842:	429a      	cmp	r2, r3
    a844:	d1a9      	bne.n	a79a <_strtod_l+0xa4a>
    a846:	4620      	mov	r0, r4
    a848:	4629      	mov	r1, r5
    a84a:	f7fe fb7b 	bl	8f44 <__aeabi_d2lz>
    a84e:	f3c9 0613 	ubfx	r6, r9, #0, #20
    a852:	f7fd febb 	bl	85cc <__aeabi_l2d>
    a856:	460b      	mov	r3, r1
    a858:	4602      	mov	r2, r0
    a85a:	4629      	mov	r1, r5
    a85c:	4620      	mov	r0, r4
    a85e:	ea46 0608 	orr.w	r6, r6, r8
    a862:	f7fd fd29 	bl	82b8 <__aeabi_dsub>
    a866:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a868:	4604      	mov	r4, r0
    a86a:	460d      	mov	r5, r1
    a86c:	431e      	orrs	r6, r3
    a86e:	d04a      	beq.n	a906 <_strtod_l+0xbb6>
    a870:	a32d      	add	r3, pc, #180	; (adr r3, a928 <_strtod_l+0xbd8>)
    a872:	e9d3 2300 	ldrd	r2, r3, [r3]
    a876:	f7fe f949 	bl	8b0c <__aeabi_dcmplt>
    a87a:	2800      	cmp	r0, #0
    a87c:	f47f accc 	bne.w	a218 <_strtod_l+0x4c8>
    a880:	4620      	mov	r0, r4
    a882:	4629      	mov	r1, r5
    a884:	a32a      	add	r3, pc, #168	; (adr r3, a930 <_strtod_l+0xbe0>)
    a886:	e9d3 2300 	ldrd	r2, r3, [r3]
    a88a:	f7fe f95d 	bl	8b48 <__aeabi_dcmpgt>
    a88e:	2800      	cmp	r0, #0
    a890:	d083      	beq.n	a79a <_strtod_l+0xa4a>
    a892:	e4c1      	b.n	a218 <_strtod_l+0x4c8>
    a894:	9b04      	ldr	r3, [sp, #16]
    a896:	b313      	cbz	r3, a8de <_strtod_l+0xb8e>
    a898:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a89a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
    a89e:	d81e      	bhi.n	a8de <_strtod_l+0xb8e>
    a8a0:	4620      	mov	r0, r4
    a8a2:	4629      	mov	r1, r5
    a8a4:	a324      	add	r3, pc, #144	; (adr r3, a938 <_strtod_l+0xbe8>)
    a8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
    a8aa:	f7fe f939 	bl	8b20 <__aeabi_dcmple>
    a8ae:	b190      	cbz	r0, a8d6 <_strtod_l+0xb86>
    a8b0:	4629      	mov	r1, r5
    a8b2:	4620      	mov	r0, r4
    a8b4:	f7fe fb26 	bl	8f04 <__aeabi_d2uiz>
    a8b8:	2801      	cmp	r0, #1
    a8ba:	bf38      	it	cc
    a8bc:	2001      	movcc	r0, #1
    a8be:	f7fd fe39 	bl	8534 <__aeabi_ui2d>
    a8c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a8c4:	4604      	mov	r4, r0
    a8c6:	460d      	mov	r5, r1
    a8c8:	b9d3      	cbnz	r3, a900 <_strtod_l+0xbb0>
    a8ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    a8ce:	9012      	str	r0, [sp, #72]	; 0x48
    a8d0:	9313      	str	r3, [sp, #76]	; 0x4c
    a8d2:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
    a8d6:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
    a8da:	9a15      	ldr	r2, [sp, #84]	; 0x54
    a8dc:	1a9f      	subs	r7, r3, r2
    a8de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    a8e2:	f023 f9e5 	bl	2dcb0 <__ulp>
    a8e6:	4602      	mov	r2, r0
    a8e8:	460b      	mov	r3, r1
    a8ea:	4630      	mov	r0, r6
    a8ec:	4639      	mov	r1, r7
    a8ee:	f7fd fe9b 	bl	8628 <__aeabi_dmul>
    a8f2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    a8f6:	f7fd fce1 	bl	82bc <__adddf3>
    a8fa:	4680      	mov	r8, r0
    a8fc:	4689      	mov	r9, r1
    a8fe:	e797      	b.n	a830 <_strtod_l+0xae0>
    a900:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
    a904:	e7e5      	b.n	a8d2 <_strtod_l+0xb82>
    a906:	a30e      	add	r3, pc, #56	; (adr r3, a940 <_strtod_l+0xbf0>)
    a908:	e9d3 2300 	ldrd	r2, r3, [r3]
    a90c:	f7fe f8fe 	bl	8b0c <__aeabi_dcmplt>
    a910:	e7bd      	b.n	a88e <_strtod_l+0xb3e>
    a912:	2a65      	cmp	r2, #101	; 0x65
    a914:	f43f ab48 	beq.w	9fa8 <_strtod_l+0x258>
    a918:	2a45      	cmp	r2, #69	; 0x45
    a91a:	f43f ab45 	beq.w	9fa8 <_strtod_l+0x258>
    a91e:	2301      	movs	r3, #1
    a920:	f7ff bb7e 	b.w	a020 <_strtod_l+0x2d0>
    a924:	f3af 8000 	nop.w
    a928:	94a03595 	.word	0x94a03595
    a92c:	3fdfffff 	.word	0x3fdfffff
    a930:	35afe535 	.word	0x35afe535
    a934:	3fe00000 	.word	0x3fe00000
    a938:	ffc00000 	.word	0xffc00000
    a93c:	41dfffff 	.word	0x41dfffff
    a940:	94a03595 	.word	0x94a03595
    a944:	3fcfffff 	.word	0x3fcfffff

0000a948 <_dtoa_r>:
    a948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a94c:	4614      	mov	r4, r2
    a94e:	b097      	sub	sp, #92	; 0x5c
    a950:	461d      	mov	r5, r3
    a952:	6a47      	ldr	r7, [r0, #36]	; 0x24
    a954:	4683      	mov	fp, r0
    a956:	9e23      	ldr	r6, [sp, #140]	; 0x8c
    a958:	e9cd 4504 	strd	r4, r5, [sp, #16]
    a95c:	b97f      	cbnz	r7, a97e <_dtoa_r+0x36>
    a95e:	2010      	movs	r0, #16
    a960:	f021 fdd4 	bl	2c50c <malloc>
    a964:	4602      	mov	r2, r0
    a966:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
    a96a:	b920      	cbnz	r0, a976 <_dtoa_r+0x2e>
    a96c:	4ba2      	ldr	r3, [pc, #648]	; (abf8 <_dtoa_r+0x2b0>)
    a96e:	21ea      	movs	r1, #234	; 0xea
    a970:	48a2      	ldr	r0, [pc, #648]	; (abfc <_dtoa_r+0x2b4>)
    a972:	f023 fe43 	bl	2e5fc <__assert_func>
    a976:	e9c0 7701 	strd	r7, r7, [r0, #4]
    a97a:	6007      	str	r7, [r0, #0]
    a97c:	60c7      	str	r7, [r0, #12]
    a97e:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    a982:	6819      	ldr	r1, [r3, #0]
    a984:	b159      	cbz	r1, a99e <_dtoa_r+0x56>
    a986:	685a      	ldr	r2, [r3, #4]
    a988:	2301      	movs	r3, #1
    a98a:	4658      	mov	r0, fp
    a98c:	4093      	lsls	r3, r2
    a98e:	604a      	str	r2, [r1, #4]
    a990:	608b      	str	r3, [r1, #8]
    a992:	f022 febd 	bl	2d710 <_Bfree>
    a996:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    a99a:	2200      	movs	r2, #0
    a99c:	601a      	str	r2, [r3, #0]
    a99e:	1e2b      	subs	r3, r5, #0
    a9a0:	bfb7      	itett	lt
    a9a2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    a9a6:	2300      	movge	r3, #0
    a9a8:	2201      	movlt	r2, #1
    a9aa:	9305      	strlt	r3, [sp, #20]
    a9ac:	bfa8      	it	ge
    a9ae:	6033      	strge	r3, [r6, #0]
    a9b0:	9f05      	ldr	r7, [sp, #20]
    a9b2:	4b93      	ldr	r3, [pc, #588]	; (ac00 <_dtoa_r+0x2b8>)
    a9b4:	bfb8      	it	lt
    a9b6:	6032      	strlt	r2, [r6, #0]
    a9b8:	43bb      	bics	r3, r7
    a9ba:	d119      	bne.n	a9f0 <_dtoa_r+0xa8>
    a9bc:	f242 730f 	movw	r3, #9999	; 0x270f
    a9c0:	9a22      	ldr	r2, [sp, #136]	; 0x88
    a9c2:	6013      	str	r3, [r2, #0]
    a9c4:	f3c7 0313 	ubfx	r3, r7, #0, #20
    a9c8:	4323      	orrs	r3, r4
    a9ca:	f000 85e0 	beq.w	b58e <_dtoa_r+0xc46>
    a9ce:	9b24      	ldr	r3, [sp, #144]	; 0x90
    a9d0:	b953      	cbnz	r3, a9e8 <_dtoa_r+0xa0>
    a9d2:	4b8c      	ldr	r3, [pc, #560]	; (ac04 <_dtoa_r+0x2bc>)
    a9d4:	e021      	b.n	aa1a <_dtoa_r+0xd2>
    a9d6:	4b8c      	ldr	r3, [pc, #560]	; (ac08 <_dtoa_r+0x2c0>)
    a9d8:	9308      	str	r3, [sp, #32]
    a9da:	3308      	adds	r3, #8
    a9dc:	9a24      	ldr	r2, [sp, #144]	; 0x90
    a9de:	6013      	str	r3, [r2, #0]
    a9e0:	9808      	ldr	r0, [sp, #32]
    a9e2:	b017      	add	sp, #92	; 0x5c
    a9e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a9e8:	4b86      	ldr	r3, [pc, #536]	; (ac04 <_dtoa_r+0x2bc>)
    a9ea:	9308      	str	r3, [sp, #32]
    a9ec:	3303      	adds	r3, #3
    a9ee:	e7f5      	b.n	a9dc <_dtoa_r+0x94>
    a9f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    a9f4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    a9f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    a9fc:	2200      	movs	r2, #0
    a9fe:	2300      	movs	r3, #0
    aa00:	f7fe f87a 	bl	8af8 <__aeabi_dcmpeq>
    aa04:	4680      	mov	r8, r0
    aa06:	b150      	cbz	r0, aa1e <_dtoa_r+0xd6>
    aa08:	2301      	movs	r3, #1
    aa0a:	9a22      	ldr	r2, [sp, #136]	; 0x88
    aa0c:	6013      	str	r3, [r2, #0]
    aa0e:	9b24      	ldr	r3, [sp, #144]	; 0x90
    aa10:	b113      	cbz	r3, aa18 <_dtoa_r+0xd0>
    aa12:	4b7e      	ldr	r3, [pc, #504]	; (ac0c <_dtoa_r+0x2c4>)
    aa14:	9a24      	ldr	r2, [sp, #144]	; 0x90
    aa16:	6013      	str	r3, [r2, #0]
    aa18:	4b7d      	ldr	r3, [pc, #500]	; (ac10 <_dtoa_r+0x2c8>)
    aa1a:	9308      	str	r3, [sp, #32]
    aa1c:	e7e0      	b.n	a9e0 <_dtoa_r+0x98>
    aa1e:	ab14      	add	r3, sp, #80	; 0x50
    aa20:	f3c7 560a 	ubfx	r6, r7, #20, #11
    aa24:	4658      	mov	r0, fp
    aa26:	9301      	str	r3, [sp, #4]
    aa28:	ab15      	add	r3, sp, #84	; 0x54
    aa2a:	9300      	str	r3, [sp, #0]
    aa2c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    aa30:	f023 f9a8 	bl	2dd84 <__d2b>
    aa34:	9003      	str	r0, [sp, #12]
    aa36:	2e00      	cmp	r6, #0
    aa38:	d078      	beq.n	ab2c <_dtoa_r+0x1e4>
    aa3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    aa3c:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
    aa40:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    aa44:	f3c3 0313 	ubfx	r3, r3, #0, #20
    aa48:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
    aa4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    aa50:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    aa54:	4619      	mov	r1, r3
    aa56:	2200      	movs	r2, #0
    aa58:	4b6e      	ldr	r3, [pc, #440]	; (ac14 <_dtoa_r+0x2cc>)
    aa5a:	f7fd fc2d 	bl	82b8 <__aeabi_dsub>
    aa5e:	a360      	add	r3, pc, #384	; (adr r3, abe0 <_dtoa_r+0x298>)
    aa60:	e9d3 2300 	ldrd	r2, r3, [r3]
    aa64:	f7fd fde0 	bl	8628 <__aeabi_dmul>
    aa68:	a35f      	add	r3, pc, #380	; (adr r3, abe8 <_dtoa_r+0x2a0>)
    aa6a:	e9d3 2300 	ldrd	r2, r3, [r3]
    aa6e:	f7fd fc25 	bl	82bc <__adddf3>
    aa72:	4604      	mov	r4, r0
    aa74:	460d      	mov	r5, r1
    aa76:	4630      	mov	r0, r6
    aa78:	f7fd fd6c 	bl	8554 <__aeabi_i2d>
    aa7c:	a35c      	add	r3, pc, #368	; (adr r3, abf0 <_dtoa_r+0x2a8>)
    aa7e:	e9d3 2300 	ldrd	r2, r3, [r3]
    aa82:	f7fd fdd1 	bl	8628 <__aeabi_dmul>
    aa86:	4602      	mov	r2, r0
    aa88:	460b      	mov	r3, r1
    aa8a:	4620      	mov	r0, r4
    aa8c:	4629      	mov	r1, r5
    aa8e:	f7fd fc15 	bl	82bc <__adddf3>
    aa92:	4604      	mov	r4, r0
    aa94:	460d      	mov	r5, r1
    aa96:	f7fe f877 	bl	8b88 <__aeabi_d2iz>
    aa9a:	2200      	movs	r2, #0
    aa9c:	4607      	mov	r7, r0
    aa9e:	2300      	movs	r3, #0
    aaa0:	4620      	mov	r0, r4
    aaa2:	4629      	mov	r1, r5
    aaa4:	f7fe f832 	bl	8b0c <__aeabi_dcmplt>
    aaa8:	b140      	cbz	r0, aabc <_dtoa_r+0x174>
    aaaa:	4638      	mov	r0, r7
    aaac:	f7fd fd52 	bl	8554 <__aeabi_i2d>
    aab0:	4622      	mov	r2, r4
    aab2:	462b      	mov	r3, r5
    aab4:	f7fe f820 	bl	8af8 <__aeabi_dcmpeq>
    aab8:	b900      	cbnz	r0, aabc <_dtoa_r+0x174>
    aaba:	3f01      	subs	r7, #1
    aabc:	2f16      	cmp	r7, #22
    aabe:	d854      	bhi.n	ab6a <_dtoa_r+0x222>
    aac0:	4b55      	ldr	r3, [pc, #340]	; (ac18 <_dtoa_r+0x2d0>)
    aac2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    aac6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    aaca:	e9d3 2300 	ldrd	r2, r3, [r3]
    aace:	f7fe f81d 	bl	8b0c <__aeabi_dcmplt>
    aad2:	2800      	cmp	r0, #0
    aad4:	d04b      	beq.n	ab6e <_dtoa_r+0x226>
    aad6:	3f01      	subs	r7, #1
    aad8:	2300      	movs	r3, #0
    aada:	9312      	str	r3, [sp, #72]	; 0x48
    aadc:	9b14      	ldr	r3, [sp, #80]	; 0x50
    aade:	1b9b      	subs	r3, r3, r6
    aae0:	1e5a      	subs	r2, r3, #1
    aae2:	bf4c      	ite	mi
    aae4:	f1c3 0301 	rsbmi	r3, r3, #1
    aae8:	2300      	movpl	r3, #0
    aaea:	920a      	str	r2, [sp, #40]	; 0x28
    aaec:	bf45      	ittet	mi
    aaee:	9306      	strmi	r3, [sp, #24]
    aaf0:	2300      	movmi	r3, #0
    aaf2:	9306      	strpl	r3, [sp, #24]
    aaf4:	930a      	strmi	r3, [sp, #40]	; 0x28
    aaf6:	2f00      	cmp	r7, #0
    aaf8:	db3b      	blt.n	ab72 <_dtoa_r+0x22a>
    aafa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    aafc:	970f      	str	r7, [sp, #60]	; 0x3c
    aafe:	443b      	add	r3, r7
    ab00:	930a      	str	r3, [sp, #40]	; 0x28
    ab02:	2300      	movs	r3, #0
    ab04:	930b      	str	r3, [sp, #44]	; 0x2c
    ab06:	9b20      	ldr	r3, [sp, #128]	; 0x80
    ab08:	2b09      	cmp	r3, #9
    ab0a:	f200 8089 	bhi.w	ac20 <_dtoa_r+0x2d8>
    ab0e:	2b05      	cmp	r3, #5
    ab10:	bfc5      	ittet	gt
    ab12:	3b04      	subgt	r3, #4
    ab14:	2400      	movgt	r4, #0
    ab16:	2401      	movle	r4, #1
    ab18:	9320      	strgt	r3, [sp, #128]	; 0x80
    ab1a:	9b20      	ldr	r3, [sp, #128]	; 0x80
    ab1c:	3b02      	subs	r3, #2
    ab1e:	2b03      	cmp	r3, #3
    ab20:	f200 8089 	bhi.w	ac36 <_dtoa_r+0x2ee>
    ab24:	e8df f003 	tbb	[pc, r3]
    ab28:	59383a2d 	.word	0x59383a2d
    ab2c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	; 0x50
    ab30:	441e      	add	r6, r3
    ab32:	f206 4332 	addw	r3, r6, #1074	; 0x432
    ab36:	2b20      	cmp	r3, #32
    ab38:	bfc9      	itett	gt
    ab3a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
    ab3e:	f1c3 0320 	rsble	r3, r3, #32
    ab42:	409f      	lslgt	r7, r3
    ab44:	f206 4312 	addwgt	r3, r6, #1042	; 0x412
    ab48:	bfd8      	it	le
    ab4a:	fa04 f003 	lslle.w	r0, r4, r3
    ab4e:	f106 36ff 	add.w	r6, r6, #4294967295
    ab52:	bfc4      	itt	gt
    ab54:	fa24 f303 	lsrgt.w	r3, r4, r3
    ab58:	ea47 0003 	orrgt.w	r0, r7, r3
    ab5c:	f7fd fcea 	bl	8534 <__aeabi_ui2d>
    ab60:	2201      	movs	r2, #1
    ab62:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
    ab66:	9213      	str	r2, [sp, #76]	; 0x4c
    ab68:	e774      	b.n	aa54 <_dtoa_r+0x10c>
    ab6a:	2301      	movs	r3, #1
    ab6c:	e7b5      	b.n	aada <_dtoa_r+0x192>
    ab6e:	9012      	str	r0, [sp, #72]	; 0x48
    ab70:	e7b4      	b.n	aadc <_dtoa_r+0x194>
    ab72:	9b06      	ldr	r3, [sp, #24]
    ab74:	1bdb      	subs	r3, r3, r7
    ab76:	9306      	str	r3, [sp, #24]
    ab78:	427b      	negs	r3, r7
    ab7a:	930b      	str	r3, [sp, #44]	; 0x2c
    ab7c:	2300      	movs	r3, #0
    ab7e:	930f      	str	r3, [sp, #60]	; 0x3c
    ab80:	e7c1      	b.n	ab06 <_dtoa_r+0x1be>
    ab82:	2300      	movs	r3, #0
    ab84:	930e      	str	r3, [sp, #56]	; 0x38
    ab86:	9b21      	ldr	r3, [sp, #132]	; 0x84
    ab88:	2b00      	cmp	r3, #0
    ab8a:	dc57      	bgt.n	ac3c <_dtoa_r+0x2f4>
    ab8c:	2301      	movs	r3, #1
    ab8e:	4699      	mov	r9, r3
    ab90:	461a      	mov	r2, r3
    ab92:	9309      	str	r3, [sp, #36]	; 0x24
    ab94:	9221      	str	r2, [sp, #132]	; 0x84
    ab96:	e00c      	b.n	abb2 <_dtoa_r+0x26a>
    ab98:	2301      	movs	r3, #1
    ab9a:	e7f3      	b.n	ab84 <_dtoa_r+0x23c>
    ab9c:	2300      	movs	r3, #0
    ab9e:	930e      	str	r3, [sp, #56]	; 0x38
    aba0:	9b21      	ldr	r3, [sp, #132]	; 0x84
    aba2:	18fb      	adds	r3, r7, r3
    aba4:	f103 0901 	add.w	r9, r3, #1
    aba8:	9309      	str	r3, [sp, #36]	; 0x24
    abaa:	464b      	mov	r3, r9
    abac:	2b01      	cmp	r3, #1
    abae:	bfb8      	it	lt
    abb0:	2301      	movlt	r3, #1
    abb2:	f8db 0024 	ldr.w	r0, [fp, #36]	; 0x24
    abb6:	2100      	movs	r1, #0
    abb8:	2204      	movs	r2, #4
    abba:	f102 0514 	add.w	r5, r2, #20
    abbe:	429d      	cmp	r5, r3
    abc0:	d940      	bls.n	ac44 <_dtoa_r+0x2fc>
    abc2:	6041      	str	r1, [r0, #4]
    abc4:	4658      	mov	r0, fp
    abc6:	f022 fd63 	bl	2d690 <_Balloc>
    abca:	9008      	str	r0, [sp, #32]
    abcc:	2800      	cmp	r0, #0
    abce:	d13c      	bne.n	ac4a <_dtoa_r+0x302>
    abd0:	4b12      	ldr	r3, [pc, #72]	; (ac1c <_dtoa_r+0x2d4>)
    abd2:	4602      	mov	r2, r0
    abd4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    abd8:	e6ca      	b.n	a970 <_dtoa_r+0x28>
    abda:	2301      	movs	r3, #1
    abdc:	e7df      	b.n	ab9e <_dtoa_r+0x256>
    abde:	bf00      	nop
    abe0:	636f4361 	.word	0x636f4361
    abe4:	3fd287a7 	.word	0x3fd287a7
    abe8:	8b60c8b3 	.word	0x8b60c8b3
    abec:	3fc68a28 	.word	0x3fc68a28
    abf0:	509f79fb 	.word	0x509f79fb
    abf4:	3fd34413 	.word	0x3fd34413
    abf8:	0004203d 	.word	0x0004203d
    abfc:	00042054 	.word	0x00042054
    ac00:	7ff00000 	.word	0x7ff00000
    ac04:	00042039 	.word	0x00042039
    ac08:	00042030 	.word	0x00042030
    ac0c:	0003ea9f 	.word	0x0003ea9f
    ac10:	0003ea9e 	.word	0x0003ea9e
    ac14:	3ff80000 	.word	0x3ff80000
    ac18:	00037c98 	.word	0x00037c98
    ac1c:	000420c8 	.word	0x000420c8
    ac20:	2401      	movs	r4, #1
    ac22:	2300      	movs	r3, #0
    ac24:	940e      	str	r4, [sp, #56]	; 0x38
    ac26:	9320      	str	r3, [sp, #128]	; 0x80
    ac28:	f04f 33ff 	mov.w	r3, #4294967295
    ac2c:	2200      	movs	r2, #0
    ac2e:	4699      	mov	r9, r3
    ac30:	9309      	str	r3, [sp, #36]	; 0x24
    ac32:	2312      	movs	r3, #18
    ac34:	e7ae      	b.n	ab94 <_dtoa_r+0x24c>
    ac36:	2301      	movs	r3, #1
    ac38:	930e      	str	r3, [sp, #56]	; 0x38
    ac3a:	e7f5      	b.n	ac28 <_dtoa_r+0x2e0>
    ac3c:	9b21      	ldr	r3, [sp, #132]	; 0x84
    ac3e:	4699      	mov	r9, r3
    ac40:	9309      	str	r3, [sp, #36]	; 0x24
    ac42:	e7b6      	b.n	abb2 <_dtoa_r+0x26a>
    ac44:	3101      	adds	r1, #1
    ac46:	0052      	lsls	r2, r2, #1
    ac48:	e7b7      	b.n	abba <_dtoa_r+0x272>
    ac4a:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    ac4e:	f1b9 0f0e 	cmp.w	r9, #14
    ac52:	9a08      	ldr	r2, [sp, #32]
    ac54:	601a      	str	r2, [r3, #0]
    ac56:	d86f      	bhi.n	ad38 <_dtoa_r+0x3f0>
    ac58:	2c00      	cmp	r4, #0
    ac5a:	d06d      	beq.n	ad38 <_dtoa_r+0x3f0>
    ac5c:	2f00      	cmp	r7, #0
    ac5e:	dd36      	ble.n	acce <_dtoa_r+0x386>
    ac60:	f007 020f 	and.w	r2, r7, #15
    ac64:	4ba0      	ldr	r3, [pc, #640]	; (aee8 <_dtoa_r+0x5a0>)
    ac66:	05f8      	lsls	r0, r7, #23
    ac68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    ac6c:	e9d3 3400 	ldrd	r3, r4, [r3]
    ac70:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    ac74:	ea4f 1427 	mov.w	r4, r7, asr #4
    ac78:	d517      	bpl.n	acaa <_dtoa_r+0x362>
    ac7a:	4b9c      	ldr	r3, [pc, #624]	; (aeec <_dtoa_r+0x5a4>)
    ac7c:	f004 040f 	and.w	r4, r4, #15
    ac80:	f04f 0803 	mov.w	r8, #3
    ac84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    ac88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    ac8c:	f7fd fdf6 	bl	887c <__aeabi_ddiv>
    ac90:	e9cd 0104 	strd	r0, r1, [sp, #16]
    ac94:	4d95      	ldr	r5, [pc, #596]	; (aeec <_dtoa_r+0x5a4>)
    ac96:	b95c      	cbnz	r4, acb0 <_dtoa_r+0x368>
    ac98:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    ac9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    aca0:	f7fd fdec 	bl	887c <__aeabi_ddiv>
    aca4:	e9cd 0104 	strd	r0, r1, [sp, #16]
    aca8:	e02b      	b.n	ad02 <_dtoa_r+0x3ba>
    acaa:	f04f 0802 	mov.w	r8, #2
    acae:	e7f1      	b.n	ac94 <_dtoa_r+0x34c>
    acb0:	07e1      	lsls	r1, r4, #31
    acb2:	d509      	bpl.n	acc8 <_dtoa_r+0x380>
    acb4:	f108 0801 	add.w	r8, r8, #1
    acb8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    acbc:	e9d5 2300 	ldrd	r2, r3, [r5]
    acc0:	f7fd fcb2 	bl	8628 <__aeabi_dmul>
    acc4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    acc8:	1064      	asrs	r4, r4, #1
    acca:	3508      	adds	r5, #8
    accc:	e7e3      	b.n	ac96 <_dtoa_r+0x34e>
    acce:	f000 8107 	beq.w	aee0 <_dtoa_r+0x598>
    acd2:	427c      	negs	r4, r7
    acd4:	4b84      	ldr	r3, [pc, #528]	; (aee8 <_dtoa_r+0x5a0>)
    acd6:	4d85      	ldr	r5, [pc, #532]	; (aeec <_dtoa_r+0x5a4>)
    acd8:	f04f 0802 	mov.w	r8, #2
    acdc:	f004 020f 	and.w	r2, r4, #15
    ace0:	1124      	asrs	r4, r4, #4
    ace2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    ace6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    acea:	e9d3 2300 	ldrd	r2, r3, [r3]
    acee:	f7fd fc9b 	bl	8628 <__aeabi_dmul>
    acf2:	2300      	movs	r3, #0
    acf4:	e9cd 0104 	strd	r0, r1, [sp, #16]
    acf8:	2c00      	cmp	r4, #0
    acfa:	f040 80e5 	bne.w	aec8 <_dtoa_r+0x580>
    acfe:	2b00      	cmp	r3, #0
    ad00:	d1d0      	bne.n	aca4 <_dtoa_r+0x35c>
    ad02:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ad04:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    ad08:	2b00      	cmp	r3, #0
    ad0a:	f000 814c 	beq.w	afa6 <_dtoa_r+0x65e>
    ad0e:	2200      	movs	r2, #0
    ad10:	4b77      	ldr	r3, [pc, #476]	; (aef0 <_dtoa_r+0x5a8>)
    ad12:	4620      	mov	r0, r4
    ad14:	4629      	mov	r1, r5
    ad16:	f7fd fef9 	bl	8b0c <__aeabi_dcmplt>
    ad1a:	2800      	cmp	r0, #0
    ad1c:	f000 8143 	beq.w	afa6 <_dtoa_r+0x65e>
    ad20:	f1b9 0f00 	cmp.w	r9, #0
    ad24:	f000 813f 	beq.w	afa6 <_dtoa_r+0x65e>
    ad28:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ad2a:	2b00      	cmp	r3, #0
    ad2c:	f300 80e4 	bgt.w	aef8 <_dtoa_r+0x5b0>
    ad30:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    ad34:	e9cd 3404 	strd	r3, r4, [sp, #16]
    ad38:	9b15      	ldr	r3, [sp, #84]	; 0x54
    ad3a:	2b00      	cmp	r3, #0
    ad3c:	db02      	blt.n	ad44 <_dtoa_r+0x3fc>
    ad3e:	2f0e      	cmp	r7, #14
    ad40:	f340 8242 	ble.w	b1c8 <_dtoa_r+0x880>
    ad44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    ad46:	2a00      	cmp	r2, #0
    ad48:	f040 8267 	bne.w	b21a <_dtoa_r+0x8d2>
    ad4c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    ad4e:	2500      	movs	r5, #0
    ad50:	f8dd 8018 	ldr.w	r8, [sp, #24]
    ad54:	f1b8 0f00 	cmp.w	r8, #0
    ad58:	d00d      	beq.n	ad76 <_dtoa_r+0x42e>
    ad5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ad5c:	2b00      	cmp	r3, #0
    ad5e:	dd0a      	ble.n	ad76 <_dtoa_r+0x42e>
    ad60:	4543      	cmp	r3, r8
    ad62:	9a06      	ldr	r2, [sp, #24]
    ad64:	bfa8      	it	ge
    ad66:	4643      	movge	r3, r8
    ad68:	1ad2      	subs	r2, r2, r3
    ad6a:	eba8 0803 	sub.w	r8, r8, r3
    ad6e:	9206      	str	r2, [sp, #24]
    ad70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ad72:	1ad3      	subs	r3, r2, r3
    ad74:	930a      	str	r3, [sp, #40]	; 0x28
    ad76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ad78:	b30b      	cbz	r3, adbe <_dtoa_r+0x476>
    ad7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ad7c:	2b00      	cmp	r3, #0
    ad7e:	f000 82a6 	beq.w	b2ce <_dtoa_r+0x986>
    ad82:	2c00      	cmp	r4, #0
    ad84:	f000 82a1 	beq.w	b2ca <_dtoa_r+0x982>
    ad88:	4629      	mov	r1, r5
    ad8a:	4622      	mov	r2, r4
    ad8c:	4658      	mov	r0, fp
    ad8e:	f022 fe33 	bl	2d9f8 <__pow5mult>
    ad92:	9a03      	ldr	r2, [sp, #12]
    ad94:	4601      	mov	r1, r0
    ad96:	4605      	mov	r5, r0
    ad98:	4658      	mov	r0, fp
    ad9a:	f022 fd83 	bl	2d8a4 <__multiply>
    ad9e:	9903      	ldr	r1, [sp, #12]
    ada0:	4606      	mov	r6, r0
    ada2:	4658      	mov	r0, fp
    ada4:	f022 fcb4 	bl	2d710 <_Bfree>
    ada8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    adaa:	1b1b      	subs	r3, r3, r4
    adac:	930b      	str	r3, [sp, #44]	; 0x2c
    adae:	f000 8291 	beq.w	b2d4 <_dtoa_r+0x98c>
    adb2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    adb4:	4631      	mov	r1, r6
    adb6:	4658      	mov	r0, fp
    adb8:	f022 fe1e 	bl	2d9f8 <__pow5mult>
    adbc:	9003      	str	r0, [sp, #12]
    adbe:	2101      	movs	r1, #1
    adc0:	4658      	mov	r0, fp
    adc2:	f022 fd59 	bl	2d878 <__i2b>
    adc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    adc8:	4604      	mov	r4, r0
    adca:	2b00      	cmp	r3, #0
    adcc:	f000 8284 	beq.w	b2d8 <_dtoa_r+0x990>
    add0:	461a      	mov	r2, r3
    add2:	4601      	mov	r1, r0
    add4:	4658      	mov	r0, fp
    add6:	f022 fe0f 	bl	2d9f8 <__pow5mult>
    adda:	9b20      	ldr	r3, [sp, #128]	; 0x80
    addc:	4604      	mov	r4, r0
    adde:	2b01      	cmp	r3, #1
    ade0:	dc03      	bgt.n	adea <_dtoa_r+0x4a2>
    ade2:	9b04      	ldr	r3, [sp, #16]
    ade4:	2b00      	cmp	r3, #0
    ade6:	f000 827c 	beq.w	b2e2 <_dtoa_r+0x99a>
    adea:	2600      	movs	r6, #0
    adec:	6923      	ldr	r3, [r4, #16]
    adee:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    adf2:	6918      	ldr	r0, [r3, #16]
    adf4:	f02b ff89 	bl	36d0a <__hi0bits>
    adf8:	f1c0 0020 	rsb	r0, r0, #32
    adfc:	960f      	str	r6, [sp, #60]	; 0x3c
    adfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ae00:	4418      	add	r0, r3
    ae02:	f010 001f 	ands.w	r0, r0, #31
    ae06:	f000 8291 	beq.w	b32c <_dtoa_r+0x9e4>
    ae0a:	f1c0 0320 	rsb	r3, r0, #32
    ae0e:	2b04      	cmp	r3, #4
    ae10:	f340 8281 	ble.w	b316 <_dtoa_r+0x9ce>
    ae14:	f1c0 001c 	rsb	r0, r0, #28
    ae18:	9b06      	ldr	r3, [sp, #24]
    ae1a:	4403      	add	r3, r0
    ae1c:	4480      	add	r8, r0
    ae1e:	9306      	str	r3, [sp, #24]
    ae20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ae22:	4403      	add	r3, r0
    ae24:	930a      	str	r3, [sp, #40]	; 0x28
    ae26:	9b06      	ldr	r3, [sp, #24]
    ae28:	2b00      	cmp	r3, #0
    ae2a:	dd05      	ble.n	ae38 <_dtoa_r+0x4f0>
    ae2c:	461a      	mov	r2, r3
    ae2e:	9903      	ldr	r1, [sp, #12]
    ae30:	4658      	mov	r0, fp
    ae32:	f022 fe3b 	bl	2daac <__lshift>
    ae36:	9003      	str	r0, [sp, #12]
    ae38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ae3a:	2b00      	cmp	r3, #0
    ae3c:	dd05      	ble.n	ae4a <_dtoa_r+0x502>
    ae3e:	4621      	mov	r1, r4
    ae40:	461a      	mov	r2, r3
    ae42:	4658      	mov	r0, fp
    ae44:	f022 fe32 	bl	2daac <__lshift>
    ae48:	4604      	mov	r4, r0
    ae4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ae4c:	2b00      	cmp	r3, #0
    ae4e:	f000 8276 	beq.w	b33e <_dtoa_r+0x9f6>
    ae52:	4621      	mov	r1, r4
    ae54:	9803      	ldr	r0, [sp, #12]
    ae56:	f02b ffa7 	bl	36da8 <__mcmp>
    ae5a:	2800      	cmp	r0, #0
    ae5c:	f280 826f 	bge.w	b33e <_dtoa_r+0x9f6>
    ae60:	2300      	movs	r3, #0
    ae62:	220a      	movs	r2, #10
    ae64:	9903      	ldr	r1, [sp, #12]
    ae66:	4658      	mov	r0, fp
    ae68:	f022 fc74 	bl	2d754 <__multadd>
    ae6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ae6e:	1e7e      	subs	r6, r7, #1
    ae70:	9003      	str	r0, [sp, #12]
    ae72:	2b00      	cmp	r3, #0
    ae74:	f000 825c 	beq.w	b330 <_dtoa_r+0x9e8>
    ae78:	2300      	movs	r3, #0
    ae7a:	4629      	mov	r1, r5
    ae7c:	220a      	movs	r2, #10
    ae7e:	4658      	mov	r0, fp
    ae80:	f022 fc68 	bl	2d754 <__multadd>
    ae84:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ae86:	4605      	mov	r5, r0
    ae88:	2b00      	cmp	r3, #0
    ae8a:	dc03      	bgt.n	ae94 <_dtoa_r+0x54c>
    ae8c:	9b20      	ldr	r3, [sp, #128]	; 0x80
    ae8e:	2b02      	cmp	r3, #2
    ae90:	f300 825e 	bgt.w	b350 <_dtoa_r+0xa08>
    ae94:	f1b8 0f00 	cmp.w	r8, #0
    ae98:	dd05      	ble.n	aea6 <_dtoa_r+0x55e>
    ae9a:	4629      	mov	r1, r5
    ae9c:	4642      	mov	r2, r8
    ae9e:	4658      	mov	r0, fp
    aea0:	f022 fe04 	bl	2daac <__lshift>
    aea4:	4605      	mov	r5, r0
    aea6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    aea8:	2b00      	cmp	r3, #0
    aeaa:	f000 82d0 	beq.w	b44e <_dtoa_r+0xb06>
    aeae:	6869      	ldr	r1, [r5, #4]
    aeb0:	4658      	mov	r0, fp
    aeb2:	f022 fbed 	bl	2d690 <_Balloc>
    aeb6:	4607      	mov	r7, r0
    aeb8:	2800      	cmp	r0, #0
    aeba:	f040 827f 	bne.w	b3bc <_dtoa_r+0xa74>
    aebe:	4b0d      	ldr	r3, [pc, #52]	; (aef4 <_dtoa_r+0x5ac>)
    aec0:	4602      	mov	r2, r0
    aec2:	f240 21ea 	movw	r1, #746	; 0x2ea
    aec6:	e553      	b.n	a970 <_dtoa_r+0x28>
    aec8:	07e2      	lsls	r2, r4, #31
    aeca:	d506      	bpl.n	aeda <_dtoa_r+0x592>
    aecc:	f108 0801 	add.w	r8, r8, #1
    aed0:	e9d5 2300 	ldrd	r2, r3, [r5]
    aed4:	f7fd fba8 	bl	8628 <__aeabi_dmul>
    aed8:	2301      	movs	r3, #1
    aeda:	1064      	asrs	r4, r4, #1
    aedc:	3508      	adds	r5, #8
    aede:	e70b      	b.n	acf8 <_dtoa_r+0x3b0>
    aee0:	f04f 0802 	mov.w	r8, #2
    aee4:	e70d      	b.n	ad02 <_dtoa_r+0x3ba>
    aee6:	bf00      	nop
    aee8:	00037c98 	.word	0x00037c98
    aeec:	00037c70 	.word	0x00037c70
    aef0:	3ff00000 	.word	0x3ff00000
    aef4:	000420c8 	.word	0x000420c8
    aef8:	4620      	mov	r0, r4
    aefa:	2200      	movs	r2, #0
    aefc:	4bac      	ldr	r3, [pc, #688]	; (b1b0 <_dtoa_r+0x868>)
    aefe:	4629      	mov	r1, r5
    af00:	f7fd fb92 	bl	8628 <__aeabi_dmul>
    af04:	1e7e      	subs	r6, r7, #1
    af06:	f108 0801 	add.w	r8, r8, #1
    af0a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    af0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    af10:	4640      	mov	r0, r8
    af12:	f7fd fb1f 	bl	8554 <__aeabi_i2d>
    af16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    af1a:	f7fd fb85 	bl	8628 <__aeabi_dmul>
    af1e:	4ba5      	ldr	r3, [pc, #660]	; (b1b4 <_dtoa_r+0x86c>)
    af20:	2200      	movs	r2, #0
    af22:	f7fd f9cb 	bl	82bc <__adddf3>
    af26:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
    af2a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    af2e:	9311      	str	r3, [sp, #68]	; 0x44
    af30:	2c00      	cmp	r4, #0
    af32:	d13b      	bne.n	afac <_dtoa_r+0x664>
    af34:	2200      	movs	r2, #0
    af36:	4ba0      	ldr	r3, [pc, #640]	; (b1b8 <_dtoa_r+0x870>)
    af38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    af3c:	f7fd f9bc 	bl	82b8 <__aeabi_dsub>
    af40:	4602      	mov	r2, r0
    af42:	460b      	mov	r3, r1
    af44:	e9cd 2304 	strd	r2, r3, [sp, #16]
    af48:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    af4c:	f7fd fdfc 	bl	8b48 <__aeabi_dcmpgt>
    af50:	2800      	cmp	r0, #0
    af52:	f040 8157 	bne.w	b204 <_dtoa_r+0x8bc>
    af56:	e9dd 2110 	ldrd	r2, r1, [sp, #64]	; 0x40
    af5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    af5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    af62:	f7fd fdd3 	bl	8b0c <__aeabi_dcmplt>
    af66:	2800      	cmp	r0, #0
    af68:	f43f aee2 	beq.w	ad30 <_dtoa_r+0x3e8>
    af6c:	2400      	movs	r4, #0
    af6e:	4625      	mov	r5, r4
    af70:	9b21      	ldr	r3, [sp, #132]	; 0x84
    af72:	f8dd a020 	ldr.w	sl, [sp, #32]
    af76:	43de      	mvns	r6, r3
    af78:	f04f 0800 	mov.w	r8, #0
    af7c:	4621      	mov	r1, r4
    af7e:	4658      	mov	r0, fp
    af80:	f022 fbc6 	bl	2d710 <_Bfree>
    af84:	2d00      	cmp	r5, #0
    af86:	f000 80a9 	beq.w	b0dc <_dtoa_r+0x794>
    af8a:	f1b8 0f00 	cmp.w	r8, #0
    af8e:	d005      	beq.n	af9c <_dtoa_r+0x654>
    af90:	45a8      	cmp	r8, r5
    af92:	d003      	beq.n	af9c <_dtoa_r+0x654>
    af94:	4641      	mov	r1, r8
    af96:	4658      	mov	r0, fp
    af98:	f022 fbba 	bl	2d710 <_Bfree>
    af9c:	4629      	mov	r1, r5
    af9e:	4658      	mov	r0, fp
    afa0:	f022 fbb6 	bl	2d710 <_Bfree>
    afa4:	e09a      	b.n	b0dc <_dtoa_r+0x794>
    afa6:	463e      	mov	r6, r7
    afa8:	464c      	mov	r4, r9
    afaa:	e7b1      	b.n	af10 <_dtoa_r+0x5c8>
    afac:	4b83      	ldr	r3, [pc, #524]	; (b1bc <_dtoa_r+0x874>)
    afae:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    afb2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
    afb6:	9b08      	ldr	r3, [sp, #32]
    afb8:	441c      	add	r4, r3
    afba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    afbc:	2b00      	cmp	r3, #0
    afbe:	d04a      	beq.n	b056 <_dtoa_r+0x70e>
    afc0:	4602      	mov	r2, r0
    afc2:	460b      	mov	r3, r1
    afc4:	2000      	movs	r0, #0
    afc6:	497e      	ldr	r1, [pc, #504]	; (b1c0 <_dtoa_r+0x878>)
    afc8:	f7fd fc58 	bl	887c <__aeabi_ddiv>
    afcc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    afd0:	f7fd f972 	bl	82b8 <__aeabi_dsub>
    afd4:	f8dd a020 	ldr.w	sl, [sp, #32]
    afd8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    afdc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    afe0:	f7fd fdd2 	bl	8b88 <__aeabi_d2iz>
    afe4:	4605      	mov	r5, r0
    afe6:	f7fd fab5 	bl	8554 <__aeabi_i2d>
    afea:	4602      	mov	r2, r0
    afec:	3530      	adds	r5, #48	; 0x30
    afee:	460b      	mov	r3, r1
    aff0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    aff4:	f7fd f960 	bl	82b8 <__aeabi_dsub>
    aff8:	f80a 5b01 	strb.w	r5, [sl], #1
    affc:	4602      	mov	r2, r0
    affe:	460b      	mov	r3, r1
    b000:	e9cd 0104 	strd	r0, r1, [sp, #16]
    b004:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    b008:	f7fd fd9e 	bl	8b48 <__aeabi_dcmpgt>
    b00c:	2800      	cmp	r0, #0
    b00e:	d165      	bne.n	b0dc <_dtoa_r+0x794>
    b010:	2000      	movs	r0, #0
    b012:	496c      	ldr	r1, [pc, #432]	; (b1c4 <_dtoa_r+0x87c>)
    b014:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    b018:	f7fd f94e 	bl	82b8 <__aeabi_dsub>
    b01c:	4602      	mov	r2, r0
    b01e:	460b      	mov	r3, r1
    b020:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    b024:	f7fd fd90 	bl	8b48 <__aeabi_dcmpgt>
    b028:	2800      	cmp	r0, #0
    b02a:	f040 810d 	bne.w	b248 <_dtoa_r+0x900>
    b02e:	45a2      	cmp	sl, r4
    b030:	f000 80ea 	beq.w	b208 <_dtoa_r+0x8c0>
    b034:	2200      	movs	r2, #0
    b036:	4b5e      	ldr	r3, [pc, #376]	; (b1b0 <_dtoa_r+0x868>)
    b038:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    b03c:	f7fd faf4 	bl	8628 <__aeabi_dmul>
    b040:	2200      	movs	r2, #0
    b042:	4b5b      	ldr	r3, [pc, #364]	; (b1b0 <_dtoa_r+0x868>)
    b044:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    b048:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    b04c:	f7fd faec 	bl	8628 <__aeabi_dmul>
    b050:	e9cd 0104 	strd	r0, r1, [sp, #16]
    b054:	e7c2      	b.n	afdc <_dtoa_r+0x694>
    b056:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    b05a:	f7fd fae5 	bl	8628 <__aeabi_dmul>
    b05e:	46a0      	mov	r8, r4
    b060:	f8dd a020 	ldr.w	sl, [sp, #32]
    b064:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    b068:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    b06c:	f7fd fd8c 	bl	8b88 <__aeabi_d2iz>
    b070:	4605      	mov	r5, r0
    b072:	f7fd fa6f 	bl	8554 <__aeabi_i2d>
    b076:	4602      	mov	r2, r0
    b078:	3530      	adds	r5, #48	; 0x30
    b07a:	460b      	mov	r3, r1
    b07c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    b080:	f7fd f91a 	bl	82b8 <__aeabi_dsub>
    b084:	f80a 5b01 	strb.w	r5, [sl], #1
    b088:	4602      	mov	r2, r0
    b08a:	460b      	mov	r3, r1
    b08c:	45a2      	cmp	sl, r4
    b08e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    b092:	f04f 0200 	mov.w	r2, #0
    b096:	d123      	bne.n	b0e0 <_dtoa_r+0x798>
    b098:	4b49      	ldr	r3, [pc, #292]	; (b1c0 <_dtoa_r+0x878>)
    b09a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    b09e:	f7fd f90d 	bl	82bc <__adddf3>
    b0a2:	4602      	mov	r2, r0
    b0a4:	460b      	mov	r3, r1
    b0a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    b0aa:	f7fd fd4d 	bl	8b48 <__aeabi_dcmpgt>
    b0ae:	2800      	cmp	r0, #0
    b0b0:	f040 80ca 	bne.w	b248 <_dtoa_r+0x900>
    b0b4:	2000      	movs	r0, #0
    b0b6:	4942      	ldr	r1, [pc, #264]	; (b1c0 <_dtoa_r+0x878>)
    b0b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    b0bc:	f7fd f8fc 	bl	82b8 <__aeabi_dsub>
    b0c0:	4602      	mov	r2, r0
    b0c2:	460b      	mov	r3, r1
    b0c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    b0c8:	f7fd fd20 	bl	8b0c <__aeabi_dcmplt>
    b0cc:	b170      	cbz	r0, b0ec <_dtoa_r+0x7a4>
    b0ce:	46c2      	mov	sl, r8
    b0d0:	f108 38ff 	add.w	r8, r8, #4294967295
    b0d4:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    b0d8:	2b30      	cmp	r3, #48	; 0x30
    b0da:	d0f8      	beq.n	b0ce <_dtoa_r+0x786>
    b0dc:	4637      	mov	r7, r6
    b0de:	e055      	b.n	b18c <_dtoa_r+0x844>
    b0e0:	4b33      	ldr	r3, [pc, #204]	; (b1b0 <_dtoa_r+0x868>)
    b0e2:	f7fd faa1 	bl	8628 <__aeabi_dmul>
    b0e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
    b0ea:	e7bd      	b.n	b068 <_dtoa_r+0x720>
    b0ec:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    b0f0:	e9cd 3404 	strd	r3, r4, [sp, #16]
    b0f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
    b0f6:	2b00      	cmp	r3, #0
    b0f8:	f6ff ae28 	blt.w	ad4c <_dtoa_r+0x404>
    b0fc:	2f0e      	cmp	r7, #14
    b0fe:	f73f ae25 	bgt.w	ad4c <_dtoa_r+0x404>
    b102:	4b2e      	ldr	r3, [pc, #184]	; (b1bc <_dtoa_r+0x874>)
    b104:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    b108:	e9d3 3400 	ldrd	r3, r4, [r3]
    b10c:	e9cd 3406 	strd	r3, r4, [sp, #24]
    b110:	9b21      	ldr	r3, [sp, #132]	; 0x84
    b112:	2b00      	cmp	r3, #0
    b114:	da02      	bge.n	b11c <_dtoa_r+0x7d4>
    b116:	f1b9 0f00 	cmp.w	r9, #0
    b11a:	d064      	beq.n	b1e6 <_dtoa_r+0x89e>
    b11c:	f8dd a020 	ldr.w	sl, [sp, #32]
    b120:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    b124:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    b128:	4620      	mov	r0, r4
    b12a:	4629      	mov	r1, r5
    b12c:	f7fd fba6 	bl	887c <__aeabi_ddiv>
    b130:	f7fd fd2a 	bl	8b88 <__aeabi_d2iz>
    b134:	4606      	mov	r6, r0
    b136:	f7fd fa0d 	bl	8554 <__aeabi_i2d>
    b13a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    b13e:	f7fd fa73 	bl	8628 <__aeabi_dmul>
    b142:	4602      	mov	r2, r0
    b144:	4620      	mov	r0, r4
    b146:	f106 0430 	add.w	r4, r6, #48	; 0x30
    b14a:	460b      	mov	r3, r1
    b14c:	4629      	mov	r1, r5
    b14e:	f7fd f8b3 	bl	82b8 <__aeabi_dsub>
    b152:	f80a 4b01 	strb.w	r4, [sl], #1
    b156:	9c08      	ldr	r4, [sp, #32]
    b158:	4602      	mov	r2, r0
    b15a:	460b      	mov	r3, r1
    b15c:	ebaa 0404 	sub.w	r4, sl, r4
    b160:	45a1      	cmp	r9, r4
    b162:	f040 8082 	bne.w	b26a <_dtoa_r+0x922>
    b166:	f7fd f8a9 	bl	82bc <__adddf3>
    b16a:	4604      	mov	r4, r0
    b16c:	460d      	mov	r5, r1
    b16e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    b172:	f7fd fce9 	bl	8b48 <__aeabi_dcmpgt>
    b176:	2800      	cmp	r0, #0
    b178:	d165      	bne.n	b246 <_dtoa_r+0x8fe>
    b17a:	4620      	mov	r0, r4
    b17c:	4629      	mov	r1, r5
    b17e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    b182:	f7fd fcb9 	bl	8af8 <__aeabi_dcmpeq>
    b186:	b108      	cbz	r0, b18c <_dtoa_r+0x844>
    b188:	07f3      	lsls	r3, r6, #31
    b18a:	d45c      	bmi.n	b246 <_dtoa_r+0x8fe>
    b18c:	9903      	ldr	r1, [sp, #12]
    b18e:	4658      	mov	r0, fp
    b190:	f022 fabe 	bl	2d710 <_Bfree>
    b194:	2300      	movs	r3, #0
    b196:	3701      	adds	r7, #1
    b198:	f88a 3000 	strb.w	r3, [sl]
    b19c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    b19e:	601f      	str	r7, [r3, #0]
    b1a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
    b1a2:	2b00      	cmp	r3, #0
    b1a4:	f43f ac1c 	beq.w	a9e0 <_dtoa_r+0x98>
    b1a8:	f8c3 a000 	str.w	sl, [r3]
    b1ac:	e418      	b.n	a9e0 <_dtoa_r+0x98>
    b1ae:	bf00      	nop
    b1b0:	40240000 	.word	0x40240000
    b1b4:	401c0000 	.word	0x401c0000
    b1b8:	40140000 	.word	0x40140000
    b1bc:	00037c98 	.word	0x00037c98
    b1c0:	3fe00000 	.word	0x3fe00000
    b1c4:	3ff00000 	.word	0x3ff00000
    b1c8:	4ba2      	ldr	r3, [pc, #648]	; (b454 <_dtoa_r+0xb0c>)
    b1ca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    b1ce:	e9d3 3400 	ldrd	r3, r4, [r3]
    b1d2:	e9cd 3406 	strd	r3, r4, [sp, #24]
    b1d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
    b1d8:	2b00      	cmp	r3, #0
    b1da:	da9f      	bge.n	b11c <_dtoa_r+0x7d4>
    b1dc:	f1b9 0f00 	cmp.w	r9, #0
    b1e0:	dc9c      	bgt.n	b11c <_dtoa_r+0x7d4>
    b1e2:	f47f aec3 	bne.w	af6c <_dtoa_r+0x624>
    b1e6:	2200      	movs	r2, #0
    b1e8:	4b9b      	ldr	r3, [pc, #620]	; (b458 <_dtoa_r+0xb10>)
    b1ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    b1ee:	f7fd fa1b 	bl	8628 <__aeabi_dmul>
    b1f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    b1f6:	f7fd fc9d 	bl	8b34 <__aeabi_dcmpge>
    b1fa:	4604      	mov	r4, r0
    b1fc:	2800      	cmp	r0, #0
    b1fe:	f47f aeb5 	bne.w	af6c <_dtoa_r+0x624>
    b202:	463e      	mov	r6, r7
    b204:	4625      	mov	r5, r4
    b206:	e0b4      	b.n	b372 <_dtoa_r+0xa2a>
    b208:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    b20c:	e9cd 3404 	strd	r3, r4, [sp, #16]
    b210:	9b15      	ldr	r3, [sp, #84]	; 0x54
    b212:	2b00      	cmp	r3, #0
    b214:	db01      	blt.n	b21a <_dtoa_r+0x8d2>
    b216:	2f0e      	cmp	r7, #14
    b218:	ddd6      	ble.n	b1c8 <_dtoa_r+0x880>
    b21a:	9a20      	ldr	r2, [sp, #128]	; 0x80
    b21c:	2a01      	cmp	r2, #1
    b21e:	dc36      	bgt.n	b28e <_dtoa_r+0x946>
    b220:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    b222:	b382      	cbz	r2, b286 <_dtoa_r+0x93e>
    b224:	f203 4333 	addw	r3, r3, #1075	; 0x433
    b228:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    b22a:	f8dd 8018 	ldr.w	r8, [sp, #24]
    b22e:	9a06      	ldr	r2, [sp, #24]
    b230:	2101      	movs	r1, #1
    b232:	4658      	mov	r0, fp
    b234:	441a      	add	r2, r3
    b236:	9206      	str	r2, [sp, #24]
    b238:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b23a:	441a      	add	r2, r3
    b23c:	920a      	str	r2, [sp, #40]	; 0x28
    b23e:	f022 fb1b 	bl	2d878 <__i2b>
    b242:	4605      	mov	r5, r0
    b244:	e586      	b.n	ad54 <_dtoa_r+0x40c>
    b246:	463e      	mov	r6, r7
    b248:	4653      	mov	r3, sl
    b24a:	469a      	mov	sl, r3
    b24c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    b250:	2a39      	cmp	r2, #57	; 0x39
    b252:	d106      	bne.n	b262 <_dtoa_r+0x91a>
    b254:	9a08      	ldr	r2, [sp, #32]
    b256:	429a      	cmp	r2, r3
    b258:	d1f7      	bne.n	b24a <_dtoa_r+0x902>
    b25a:	2230      	movs	r2, #48	; 0x30
    b25c:	9908      	ldr	r1, [sp, #32]
    b25e:	3601      	adds	r6, #1
    b260:	700a      	strb	r2, [r1, #0]
    b262:	781a      	ldrb	r2, [r3, #0]
    b264:	3201      	adds	r2, #1
    b266:	701a      	strb	r2, [r3, #0]
    b268:	e738      	b.n	b0dc <_dtoa_r+0x794>
    b26a:	2200      	movs	r2, #0
    b26c:	4b7b      	ldr	r3, [pc, #492]	; (b45c <_dtoa_r+0xb14>)
    b26e:	f7fd f9db 	bl	8628 <__aeabi_dmul>
    b272:	2200      	movs	r2, #0
    b274:	2300      	movs	r3, #0
    b276:	4604      	mov	r4, r0
    b278:	460d      	mov	r5, r1
    b27a:	f7fd fc3d 	bl	8af8 <__aeabi_dcmpeq>
    b27e:	2800      	cmp	r0, #0
    b280:	f43f af50 	beq.w	b124 <_dtoa_r+0x7dc>
    b284:	e782      	b.n	b18c <_dtoa_r+0x844>
    b286:	9b14      	ldr	r3, [sp, #80]	; 0x50
    b288:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    b28c:	e7cc      	b.n	b228 <_dtoa_r+0x8e0>
    b28e:	f109 34ff 	add.w	r4, r9, #4294967295
    b292:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b294:	42a3      	cmp	r3, r4
    b296:	db08      	blt.n	b2aa <_dtoa_r+0x962>
    b298:	f1b9 0f00 	cmp.w	r9, #0
    b29c:	eba3 0404 	sub.w	r4, r3, r4
    b2a0:	db0e      	blt.n	b2c0 <_dtoa_r+0x978>
    b2a2:	f8dd 8018 	ldr.w	r8, [sp, #24]
    b2a6:	464b      	mov	r3, r9
    b2a8:	e7c1      	b.n	b22e <_dtoa_r+0x8e6>
    b2aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b2ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    b2ae:	1ae3      	subs	r3, r4, r3
    b2b0:	940b      	str	r4, [sp, #44]	; 0x2c
    b2b2:	f8dd 8018 	ldr.w	r8, [sp, #24]
    b2b6:	2400      	movs	r4, #0
    b2b8:	441a      	add	r2, r3
    b2ba:	464b      	mov	r3, r9
    b2bc:	920f      	str	r2, [sp, #60]	; 0x3c
    b2be:	e7b6      	b.n	b22e <_dtoa_r+0x8e6>
    b2c0:	9b06      	ldr	r3, [sp, #24]
    b2c2:	eba3 0809 	sub.w	r8, r3, r9
    b2c6:	2300      	movs	r3, #0
    b2c8:	e7b1      	b.n	b22e <_dtoa_r+0x8e6>
    b2ca:	9e03      	ldr	r6, [sp, #12]
    b2cc:	e571      	b.n	adb2 <_dtoa_r+0x46a>
    b2ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b2d0:	9903      	ldr	r1, [sp, #12]
    b2d2:	e570      	b.n	adb6 <_dtoa_r+0x46e>
    b2d4:	9603      	str	r6, [sp, #12]
    b2d6:	e572      	b.n	adbe <_dtoa_r+0x476>
    b2d8:	9b20      	ldr	r3, [sp, #128]	; 0x80
    b2da:	2b01      	cmp	r3, #1
    b2dc:	dc17      	bgt.n	b30e <_dtoa_r+0x9c6>
    b2de:	9b04      	ldr	r3, [sp, #16]
    b2e0:	b9ab      	cbnz	r3, b30e <_dtoa_r+0x9c6>
    b2e2:	9b05      	ldr	r3, [sp, #20]
    b2e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
    b2e8:	b99b      	cbnz	r3, b312 <_dtoa_r+0x9ca>
    b2ea:	9b05      	ldr	r3, [sp, #20]
    b2ec:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
    b2f0:	0d36      	lsrs	r6, r6, #20
    b2f2:	0536      	lsls	r6, r6, #20
    b2f4:	b136      	cbz	r6, b304 <_dtoa_r+0x9bc>
    b2f6:	9b06      	ldr	r3, [sp, #24]
    b2f8:	2601      	movs	r6, #1
    b2fa:	3301      	adds	r3, #1
    b2fc:	9306      	str	r3, [sp, #24]
    b2fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b300:	3301      	adds	r3, #1
    b302:	930a      	str	r3, [sp, #40]	; 0x28
    b304:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b306:	2b00      	cmp	r3, #0
    b308:	f47f ad70 	bne.w	adec <_dtoa_r+0x4a4>
    b30c:	960f      	str	r6, [sp, #60]	; 0x3c
    b30e:	2001      	movs	r0, #1
    b310:	e575      	b.n	adfe <_dtoa_r+0x4b6>
    b312:	2600      	movs	r6, #0
    b314:	e7f6      	b.n	b304 <_dtoa_r+0x9bc>
    b316:	f43f ad86 	beq.w	ae26 <_dtoa_r+0x4de>
    b31a:	331c      	adds	r3, #28
    b31c:	9a06      	ldr	r2, [sp, #24]
    b31e:	441a      	add	r2, r3
    b320:	4498      	add	r8, r3
    b322:	9206      	str	r2, [sp, #24]
    b324:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b326:	441a      	add	r2, r3
    b328:	920a      	str	r2, [sp, #40]	; 0x28
    b32a:	e57c      	b.n	ae26 <_dtoa_r+0x4de>
    b32c:	4603      	mov	r3, r0
    b32e:	e7f4      	b.n	b31a <_dtoa_r+0x9d2>
    b330:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b332:	2b00      	cmp	r3, #0
    b334:	dc2b      	bgt.n	b38e <_dtoa_r+0xa46>
    b336:	9b20      	ldr	r3, [sp, #128]	; 0x80
    b338:	2b02      	cmp	r3, #2
    b33a:	dc09      	bgt.n	b350 <_dtoa_r+0xa08>
    b33c:	e027      	b.n	b38e <_dtoa_r+0xa46>
    b33e:	f1b9 0f00 	cmp.w	r9, #0
    b342:	dc1d      	bgt.n	b380 <_dtoa_r+0xa38>
    b344:	9b20      	ldr	r3, [sp, #128]	; 0x80
    b346:	2b02      	cmp	r3, #2
    b348:	dd1a      	ble.n	b380 <_dtoa_r+0xa38>
    b34a:	463e      	mov	r6, r7
    b34c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    b350:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b352:	2b00      	cmp	r3, #0
    b354:	f47f ae0c 	bne.w	af70 <_dtoa_r+0x628>
    b358:	4621      	mov	r1, r4
    b35a:	2205      	movs	r2, #5
    b35c:	4658      	mov	r0, fp
    b35e:	f022 f9f9 	bl	2d754 <__multadd>
    b362:	4601      	mov	r1, r0
    b364:	4604      	mov	r4, r0
    b366:	9803      	ldr	r0, [sp, #12]
    b368:	f02b fd1e 	bl	36da8 <__mcmp>
    b36c:	2800      	cmp	r0, #0
    b36e:	f77f adff 	ble.w	af70 <_dtoa_r+0x628>
    b372:	f8dd a020 	ldr.w	sl, [sp, #32]
    b376:	2331      	movs	r3, #49	; 0x31
    b378:	3601      	adds	r6, #1
    b37a:	f80a 3b01 	strb.w	r3, [sl], #1
    b37e:	e5fb      	b.n	af78 <_dtoa_r+0x630>
    b380:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b382:	463e      	mov	r6, r7
    b384:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    b388:	2b00      	cmp	r3, #0
    b38a:	f47f ad83 	bne.w	ae94 <_dtoa_r+0x54c>
    b38e:	9f08      	ldr	r7, [sp, #32]
    b390:	4621      	mov	r1, r4
    b392:	9803      	ldr	r0, [sp, #12]
    b394:	f02b faf3 	bl	3697e <quorem>
    b398:	9b08      	ldr	r3, [sp, #32]
    b39a:	f100 0930 	add.w	r9, r0, #48	; 0x30
    b39e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b3a0:	f807 9b01 	strb.w	r9, [r7], #1
    b3a4:	1afb      	subs	r3, r7, r3
    b3a6:	429a      	cmp	r2, r3
    b3a8:	f340 80cb 	ble.w	b542 <_dtoa_r+0xbfa>
    b3ac:	2300      	movs	r3, #0
    b3ae:	220a      	movs	r2, #10
    b3b0:	9903      	ldr	r1, [sp, #12]
    b3b2:	4658      	mov	r0, fp
    b3b4:	f022 f9ce 	bl	2d754 <__multadd>
    b3b8:	9003      	str	r0, [sp, #12]
    b3ba:	e7e9      	b.n	b390 <_dtoa_r+0xa48>
    b3bc:	692a      	ldr	r2, [r5, #16]
    b3be:	f105 010c 	add.w	r1, r5, #12
    b3c2:	300c      	adds	r0, #12
    b3c4:	3202      	adds	r2, #2
    b3c6:	0092      	lsls	r2, r2, #2
    b3c8:	f02b f8ae 	bl	36528 <memcpy>
    b3cc:	2201      	movs	r2, #1
    b3ce:	4639      	mov	r1, r7
    b3d0:	4658      	mov	r0, fp
    b3d2:	f022 fb6b 	bl	2daac <__lshift>
    b3d6:	9b08      	ldr	r3, [sp, #32]
    b3d8:	46a8      	mov	r8, r5
    b3da:	4605      	mov	r5, r0
    b3dc:	f103 0a01 	add.w	sl, r3, #1
    b3e0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    b3e4:	4413      	add	r3, r2
    b3e6:	930a      	str	r3, [sp, #40]	; 0x28
    b3e8:	9b04      	ldr	r3, [sp, #16]
    b3ea:	f003 0301 	and.w	r3, r3, #1
    b3ee:	930b      	str	r3, [sp, #44]	; 0x2c
    b3f0:	f10a 33ff 	add.w	r3, sl, #4294967295
    b3f4:	4621      	mov	r1, r4
    b3f6:	9803      	ldr	r0, [sp, #12]
    b3f8:	9306      	str	r3, [sp, #24]
    b3fa:	f02b fac0 	bl	3697e <quorem>
    b3fe:	4641      	mov	r1, r8
    b400:	9009      	str	r0, [sp, #36]	; 0x24
    b402:	f100 0930 	add.w	r9, r0, #48	; 0x30
    b406:	9803      	ldr	r0, [sp, #12]
    b408:	f02b fcce 	bl	36da8 <__mcmp>
    b40c:	462a      	mov	r2, r5
    b40e:	4621      	mov	r1, r4
    b410:	4607      	mov	r7, r0
    b412:	4658      	mov	r0, fp
    b414:	f022 fbb6 	bl	2db84 <__mdiff>
    b418:	68c2      	ldr	r2, [r0, #12]
    b41a:	4601      	mov	r1, r0
    b41c:	b302      	cbz	r2, b460 <_dtoa_r+0xb18>
    b41e:	4658      	mov	r0, fp
    b420:	f022 f976 	bl	2d710 <_Bfree>
    b424:	2f00      	cmp	r7, #0
    b426:	da3a      	bge.n	b49e <_dtoa_r+0xb56>
    b428:	2201      	movs	r2, #1
    b42a:	9903      	ldr	r1, [sp, #12]
    b42c:	4658      	mov	r0, fp
    b42e:	f022 fb3d 	bl	2daac <__lshift>
    b432:	4621      	mov	r1, r4
    b434:	9003      	str	r0, [sp, #12]
    b436:	f02b fcb7 	bl	36da8 <__mcmp>
    b43a:	2800      	cmp	r0, #0
    b43c:	dc03      	bgt.n	b446 <_dtoa_r+0xafe>
    b43e:	d129      	bne.n	b494 <_dtoa_r+0xb4c>
    b440:	f019 0f01 	tst.w	r9, #1
    b444:	d026      	beq.n	b494 <_dtoa_r+0xb4c>
    b446:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    b44a:	d11d      	bne.n	b488 <_dtoa_r+0xb40>
    b44c:	e032      	b.n	b4b4 <_dtoa_r+0xb6c>
    b44e:	4628      	mov	r0, r5
    b450:	e7c1      	b.n	b3d6 <_dtoa_r+0xa8e>
    b452:	bf00      	nop
    b454:	00037c98 	.word	0x00037c98
    b458:	40140000 	.word	0x40140000
    b45c:	40240000 	.word	0x40240000
    b460:	900e      	str	r0, [sp, #56]	; 0x38
    b462:	9803      	ldr	r0, [sp, #12]
    b464:	f02b fca0 	bl	36da8 <__mcmp>
    b468:	990e      	ldr	r1, [sp, #56]	; 0x38
    b46a:	900c      	str	r0, [sp, #48]	; 0x30
    b46c:	4658      	mov	r0, fp
    b46e:	f022 f94f 	bl	2d710 <_Bfree>
    b472:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    b474:	bb5a      	cbnz	r2, b4ce <_dtoa_r+0xb86>
    b476:	9b20      	ldr	r3, [sp, #128]	; 0x80
    b478:	b953      	cbnz	r3, b490 <_dtoa_r+0xb48>
    b47a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b47c:	b943      	cbnz	r3, b490 <_dtoa_r+0xb48>
    b47e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    b482:	d017      	beq.n	b4b4 <_dtoa_r+0xb6c>
    b484:	2f00      	cmp	r7, #0
    b486:	dd05      	ble.n	b494 <_dtoa_r+0xb4c>
    b488:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b48a:	f103 0931 	add.w	r9, r3, #49	; 0x31
    b48e:	e001      	b.n	b494 <_dtoa_r+0xb4c>
    b490:	2f00      	cmp	r7, #0
    b492:	da2a      	bge.n	b4ea <_dtoa_r+0xba2>
    b494:	f8dd a018 	ldr.w	sl, [sp, #24]
    b498:	f80a 9b01 	strb.w	r9, [sl], #1
    b49c:	e56e      	b.n	af7c <_dtoa_r+0x634>
    b49e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    b4a0:	433b      	orrs	r3, r7
    b4a2:	d104      	bne.n	b4ae <_dtoa_r+0xb66>
    b4a4:	9b04      	ldr	r3, [sp, #16]
    b4a6:	f003 0301 	and.w	r3, r3, #1
    b4aa:	2b00      	cmp	r3, #0
    b4ac:	d0bc      	beq.n	b428 <_dtoa_r+0xae0>
    b4ae:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    b4b2:	d136      	bne.n	b522 <_dtoa_r+0xbda>
    b4b4:	9f06      	ldr	r7, [sp, #24]
    b4b6:	2339      	movs	r3, #57	; 0x39
    b4b8:	f807 3b01 	strb.w	r3, [r7], #1
    b4bc:	46ba      	mov	sl, r7
    b4be:	3f01      	subs	r7, #1
    b4c0:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    b4c4:	2b39      	cmp	r3, #57	; 0x39
    b4c6:	d05a      	beq.n	b57e <_dtoa_r+0xc36>
    b4c8:	3301      	adds	r3, #1
    b4ca:	703b      	strb	r3, [r7, #0]
    b4cc:	e556      	b.n	af7c <_dtoa_r+0x634>
    b4ce:	2f00      	cmp	r7, #0
    b4d0:	db06      	blt.n	b4e0 <_dtoa_r+0xb98>
    b4d2:	9b20      	ldr	r3, [sp, #128]	; 0x80
    b4d4:	433b      	orrs	r3, r7
    b4d6:	d106      	bne.n	b4e6 <_dtoa_r+0xb9e>
    b4d8:	9b04      	ldr	r3, [sp, #16]
    b4da:	f003 0301 	and.w	r3, r3, #1
    b4de:	b913      	cbnz	r3, b4e6 <_dtoa_r+0xb9e>
    b4e0:	2a00      	cmp	r2, #0
    b4e2:	dca1      	bgt.n	b428 <_dtoa_r+0xae0>
    b4e4:	e7d6      	b.n	b494 <_dtoa_r+0xb4c>
    b4e6:	2a00      	cmp	r2, #0
    b4e8:	dce1      	bgt.n	b4ae <_dtoa_r+0xb66>
    b4ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b4ec:	4657      	mov	r7, sl
    b4ee:	f80a 9c01 	strb.w	r9, [sl, #-1]
    b4f2:	4553      	cmp	r3, sl
    b4f4:	d02e      	beq.n	b554 <_dtoa_r+0xc0c>
    b4f6:	2300      	movs	r3, #0
    b4f8:	220a      	movs	r2, #10
    b4fa:	9903      	ldr	r1, [sp, #12]
    b4fc:	4658      	mov	r0, fp
    b4fe:	f022 f929 	bl	2d754 <__multadd>
    b502:	45a8      	cmp	r8, r5
    b504:	9003      	str	r0, [sp, #12]
    b506:	f04f 0300 	mov.w	r3, #0
    b50a:	f04f 020a 	mov.w	r2, #10
    b50e:	4641      	mov	r1, r8
    b510:	4658      	mov	r0, fp
    b512:	d10b      	bne.n	b52c <_dtoa_r+0xbe4>
    b514:	f022 f91e 	bl	2d754 <__multadd>
    b518:	4680      	mov	r8, r0
    b51a:	4605      	mov	r5, r0
    b51c:	f10a 0a01 	add.w	sl, sl, #1
    b520:	e766      	b.n	b3f0 <_dtoa_r+0xaa8>
    b522:	f8dd a018 	ldr.w	sl, [sp, #24]
    b526:	f109 0901 	add.w	r9, r9, #1
    b52a:	e7b5      	b.n	b498 <_dtoa_r+0xb50>
    b52c:	f022 f912 	bl	2d754 <__multadd>
    b530:	4629      	mov	r1, r5
    b532:	4680      	mov	r8, r0
    b534:	2300      	movs	r3, #0
    b536:	220a      	movs	r2, #10
    b538:	4658      	mov	r0, fp
    b53a:	f022 f90b 	bl	2d754 <__multadd>
    b53e:	4605      	mov	r5, r0
    b540:	e7ec      	b.n	b51c <_dtoa_r+0xbd4>
    b542:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b544:	f04f 0800 	mov.w	r8, #0
    b548:	2b00      	cmp	r3, #0
    b54a:	bfcc      	ite	gt
    b54c:	461f      	movgt	r7, r3
    b54e:	2701      	movle	r7, #1
    b550:	9b08      	ldr	r3, [sp, #32]
    b552:	441f      	add	r7, r3
    b554:	2201      	movs	r2, #1
    b556:	9903      	ldr	r1, [sp, #12]
    b558:	4658      	mov	r0, fp
    b55a:	f022 faa7 	bl	2daac <__lshift>
    b55e:	4621      	mov	r1, r4
    b560:	9003      	str	r0, [sp, #12]
    b562:	f02b fc21 	bl	36da8 <__mcmp>
    b566:	2800      	cmp	r0, #0
    b568:	dca8      	bgt.n	b4bc <_dtoa_r+0xb74>
    b56a:	d102      	bne.n	b572 <_dtoa_r+0xc2a>
    b56c:	f019 0f01 	tst.w	r9, #1
    b570:	d1a4      	bne.n	b4bc <_dtoa_r+0xb74>
    b572:	46ba      	mov	sl, r7
    b574:	f817 3d01 	ldrb.w	r3, [r7, #-1]!
    b578:	2b30      	cmp	r3, #48	; 0x30
    b57a:	d0fa      	beq.n	b572 <_dtoa_r+0xc2a>
    b57c:	e4fe      	b.n	af7c <_dtoa_r+0x634>
    b57e:	9b08      	ldr	r3, [sp, #32]
    b580:	42bb      	cmp	r3, r7
    b582:	d19b      	bne.n	b4bc <_dtoa_r+0xb74>
    b584:	2331      	movs	r3, #49	; 0x31
    b586:	9a08      	ldr	r2, [sp, #32]
    b588:	3601      	adds	r6, #1
    b58a:	7013      	strb	r3, [r2, #0]
    b58c:	e4f6      	b.n	af7c <_dtoa_r+0x634>
    b58e:	9b24      	ldr	r3, [sp, #144]	; 0x90
    b590:	2b00      	cmp	r3, #0
    b592:	f47f aa20 	bne.w	a9d6 <_dtoa_r+0x8e>
    b596:	4b01      	ldr	r3, [pc, #4]	; (b59c <_dtoa_r+0xc54>)
    b598:	f7ff ba3f 	b.w	aa1a <_dtoa_r+0xd2>
    b59c:	00042030 	.word	0x00042030

0000b5a0 <data_print>:
}

/**@brief Function to print strings without null-termination
 */
static void data_print(uint8_t *prefix, uint8_t *data, size_t len)
{
    b5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char buf[len + 1];
    b5a2:	f102 0308 	add.w	r3, r2, #8
    b5a6:	f023 0307 	bic.w	r3, r3, #7
{
    b5aa:	af00      	add	r7, sp, #0
	char buf[len + 1];
    b5ac:	ebad 0d03 	sub.w	sp, sp, r3
{
    b5b0:	4605      	mov	r5, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    b5b2:	4668      	mov	r0, sp
    b5b4:	4614      	mov	r4, r2
    b5b6:	f02a ffb7 	bl	36528 <memcpy>

	memcpy(buf, data, len);
	buf[len] = 0;
    b5ba:	2300      	movs	r3, #0
	char buf[len + 1];
    b5bc:	466e      	mov	r6, sp
	buf[len] = 0;
    b5be:	f80d 3004 	strb.w	r3, [sp, r4]
	LOG_INF("%s%s", (char *)prefix, (char *)buf);
    b5c2:	b08a      	sub	sp, #40	; 0x28
    b5c4:	466a      	mov	r2, sp
    b5c6:	4b08      	ldr	r3, [pc, #32]	; (b5e8 <data_print+0x48>)
    b5c8:	61d6      	str	r6, [r2, #28]
    b5ca:	e9c2 3505 	strd	r3, r5, [r2, #20]
    b5ce:	4b07      	ldr	r3, [pc, #28]	; (b5ec <data_print+0x4c>)
    b5d0:	f44f 5123 	mov.w	r1, #10432	; 0x28c0
    b5d4:	6213      	str	r3, [r2, #32]
    b5d6:	4b06      	ldr	r3, [pc, #24]	; (b5f0 <data_print+0x50>)
    b5d8:	4806      	ldr	r0, [pc, #24]	; (b5f4 <data_print+0x54>)
    b5da:	f842 3f10 	str.w	r3, [r2, #16]!
    b5de:	f023 fba0 	bl	2ed22 <z_log_msg_static_create.constprop.0>
}
    b5e2:	46bd      	mov	sp, r7
    b5e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b5e6:	bf00      	nop
    b5e8:	00038b1c 	.word	0x00038b1c
    b5ec:	03010200 	.word	0x03010200
    b5f0:	02000004 	.word	0x02000004
    b5f4:	00037988 	.word	0x00037988

0000b5f8 <mqtt_evt_handler>:
}
/**@brief MQTT client event handler
 */
void mqtt_evt_handler(struct mqtt_client *const c,
		      const struct mqtt_evt *evt)
{
    b5f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b5fc:	b0b7      	sub	sp, #220	; 0xdc
	int err;

	switch (evt->type) {
    b5fe:	780b      	ldrb	r3, [r1, #0]
{
    b600:	4606      	mov	r6, r0
    b602:	460c      	mov	r4, r1
    b604:	af16      	add	r7, sp, #88	; 0x58
	switch (evt->type) {
    b606:	2b09      	cmp	r3, #9
    b608:	f200 81bf 	bhi.w	b98a <mqtt_evt_handler+0x392>
    b60c:	e8df f013 	tbh	[pc, r3, lsl #1]
    b610:	0048000a 	.word	0x0048000a
    b614:	01670055 	.word	0x01670055
    b618:	01bd01bd 	.word	0x01bd01bd
    b61c:	017401bd 	.word	0x017401bd
    b620:	01b401bd 	.word	0x01b401bd
	case MQTT_EVT_CONNACK:
	/* STEP 5 - Subscribe to the topic CONFIG_MQTT_SUB_TOPIC when we have a successful connection */
		if (evt->result != 0) {
    b624:	69cb      	ldr	r3, [r1, #28]
    b626:	b14b      	cbz	r3, b63c <mqtt_evt_handler+0x44>
			LOG_ERR("MQTT connect failed: %d", evt->result);
    b628:	466c      	mov	r4, sp
    b62a:	b088      	sub	sp, #32
    b62c:	aa16      	add	r2, sp, #88	; 0x58
    b62e:	49b6      	ldr	r1, [pc, #728]	; (b908 <mqtt_evt_handler+0x310>)
		LOG_INF("SUBACK packet id: %u", evt->param.suback.message_id);
		break;

	case MQTT_EVT_PINGRESP:
		if (evt->result != 0) {
			LOG_ERR("MQTT PINGRESP error: %d", evt->result);
    b630:	e9c2 1305 	strd	r1, r3, [r2, #20]
    b634:	2303      	movs	r3, #3
    b636:	f842 3f10 	str.w	r3, [r2, #16]!
    b63a:	e14d      	b.n	b8d8 <mqtt_evt_handler+0x2e0>
		LOG_INF("MQTT client connected");
    b63c:	466d      	mov	r5, sp
    b63e:	4bb3      	ldr	r3, [pc, #716]	; (b90c <mqtt_evt_handler+0x314>)
    b640:	f107 0228 	add.w	r2, r7, #40	; 0x28
    b644:	62fb      	str	r3, [r7, #44]	; 0x2c
    b646:	2302      	movs	r3, #2
    b648:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    b64c:	62bb      	str	r3, [r7, #40]	; 0x28
    b64e:	48b0      	ldr	r0, [pc, #704]	; (b910 <mqtt_evt_handler+0x318>)
    b650:	f023 fb67 	bl	2ed22 <z_log_msg_static_create.constprop.0>
	struct mqtt_topic subscribe_topic = {
    b654:	4baf      	ldr	r3, [pc, #700]	; (b914 <mqtt_evt_handler+0x31c>)
		LOG_INF("MQTT client connected");
    b656:	f107 0418 	add.w	r4, r7, #24
	struct mqtt_topic subscribe_topic = {
    b65a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
	const struct mqtt_subscription_list subscription_list = {
    b65e:	4bae      	ldr	r3, [pc, #696]	; (b918 <mqtt_evt_handler+0x320>)
	LOG_INF("Subscribing to: %s len %u", CONFIG_MQTT_SUB_TOPIC,
    b660:	b08a      	sub	sp, #40	; 0x28
	struct mqtt_topic subscribe_topic = {
    b662:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	const struct mqtt_subscription_list subscription_list = {
    b666:	603c      	str	r4, [r7, #0]
    b668:	607b      	str	r3, [r7, #4]
	LOG_INF("Subscribing to: %s len %u", CONFIG_MQTT_SUB_TOPIC,
    b66a:	aa16      	add	r2, sp, #88	; 0x58
    b66c:	4bab      	ldr	r3, [pc, #684]	; (b91c <mqtt_evt_handler+0x324>)
    b66e:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    b672:	6153      	str	r3, [r2, #20]
    b674:	4baa      	ldr	r3, [pc, #680]	; (b920 <mqtt_evt_handler+0x328>)
    b676:	48a6      	ldr	r0, [pc, #664]	; (b910 <mqtt_evt_handler+0x318>)
    b678:	6193      	str	r3, [r2, #24]
    b67a:	2330      	movs	r3, #48	; 0x30
    b67c:	61d3      	str	r3, [r2, #28]
    b67e:	f44f 7300 	mov.w	r3, #512	; 0x200
    b682:	8413      	strh	r3, [r2, #32]
    b684:	4ba7      	ldr	r3, [pc, #668]	; (b924 <mqtt_evt_handler+0x32c>)
    b686:	f842 3f10 	str.w	r3, [r2, #16]!
    b68a:	f023 fb4a 	bl	2ed22 <z_log_msg_static_create.constprop.0>
	return mqtt_subscribe(c, &subscription_list);
    b68e:	4639      	mov	r1, r7
    b690:	46ad      	mov	sp, r5
    b692:	4630      	mov	r0, r6
    b694:	f028 fab7 	bl	33c06 <mqtt_subscribe>

	default:
		LOG_INF("Unhandled MQTT event type: %d", evt->type);
		break;
	}
}
    b698:	3784      	adds	r7, #132	; 0x84
    b69a:	46bd      	mov	sp, r7
    b69c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LOG_INF("MQTT client disconnected: %d", evt->result);
    b6a0:	466c      	mov	r4, sp
    b6a2:	b088      	sub	sp, #32
    b6a4:	69cb      	ldr	r3, [r1, #28]
    b6a6:	aa16      	add	r2, sp, #88	; 0x58
    b6a8:	499f      	ldr	r1, [pc, #636]	; (b928 <mqtt_evt_handler+0x330>)
	switch (evt->type) {
    b6aa:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_INF("Unhandled MQTT event type: %d", evt->type);
    b6ae:	2303      	movs	r3, #3
    b6b0:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    b6b4:	f842 3f10 	str.w	r3, [r2, #16]!
    b6b8:	e04d      	b.n	b756 <mqtt_evt_handler+0x15e>
		LOG_INF("MQTT PUBLISH result=%d len=%d",
    b6ba:	466d      	mov	r5, sp
    b6bc:	b088      	sub	sp, #32
    b6be:	69c9      	ldr	r1, [r1, #28]
    b6c0:	6963      	ldr	r3, [r4, #20]
    b6c2:	aa16      	add	r2, sp, #88	; 0x58
    b6c4:	61d3      	str	r3, [r2, #28]
    b6c6:	2304      	movs	r3, #4
    b6c8:	4898      	ldr	r0, [pc, #608]	; (b92c <mqtt_evt_handler+0x334>)
    b6ca:	e9c2 0105 	strd	r0, r1, [r2, #20]
    b6ce:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    b6d2:	488f      	ldr	r0, [pc, #572]	; (b910 <mqtt_evt_handler+0x318>)
    b6d4:	f842 3f10 	str.w	r3, [r2, #16]!
    b6d8:	f023 fb23 	bl	2ed22 <z_log_msg_static_create.constprop.0>
		err = get_received_payload(c, p->message.payload.len);
    b6dc:	f8d4 8014 	ldr.w	r8, [r4, #20]
    b6e0:	46ad      	mov	sp, r5
	if (length > sizeof(payload_buf)) {
    b6e2:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
    b6e6:	d912      	bls.n	b70e <mqtt_evt_handler+0x116>
		ret = mqtt_read_publish_payload_blocking(
    b6e8:	f8df 9244 	ldr.w	r9, [pc, #580]	; b930 <mqtt_evt_handler+0x338>
    b6ec:	4649      	mov	r1, r9
    b6ee:	4630      	mov	r0, r6
    b6f0:	f1a8 0280 	sub.w	r2, r8, #128	; 0x80
    b6f4:	f028 fb34 	bl	33d60 <mqtt_read_publish_payload_blocking>
		if (ret == 0) {
    b6f8:	1e05      	subs	r5, r0, #0
    b6fa:	d031      	beq.n	b760 <mqtt_evt_handler+0x168>
		} else if (ret < 0) {
    b6fc:	db32      	blt.n	b764 <mqtt_evt_handler+0x16c>
		length -= ret;
    b6fe:	eba8 0805 	sub.w	r8, r8, r5
	while (length > sizeof(payload_buf)) {
    b702:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
    b706:	d8f1      	bhi.n	b6ec <mqtt_evt_handler+0xf4>
		err = -EMSGSIZE;
    b708:	f06f 0979 	mvn.w	r9, #121	; 0x79
    b70c:	e001      	b.n	b712 <mqtt_evt_handler+0x11a>
	int err = 0;
    b70e:	f04f 0900 	mov.w	r9, #0
	ret = mqtt_readall_publish_payload(c, payload_buf, length);
    b712:	4642      	mov	r2, r8
    b714:	4630      	mov	r0, r6
    b716:	4986      	ldr	r1, [pc, #536]	; (b930 <mqtt_evt_handler+0x338>)
    b718:	f028 fb25 	bl	33d66 <mqtt_readall_publish_payload>
	if (ret) {
    b71c:	4605      	mov	r5, r0
    b71e:	bb08      	cbnz	r0, b764 <mqtt_evt_handler+0x16c>
		if (p->message.topic.qos == MQTT_QOS_1_AT_LEAST_ONCE) {
    b720:	7b23      	ldrb	r3, [r4, #12]
    b722:	2b01      	cmp	r3, #1
    b724:	d106      	bne.n	b734 <mqtt_evt_handler+0x13c>
			const struct mqtt_puback_param ack = {
    b726:	8b23      	ldrh	r3, [r4, #24]
			mqtt_publish_qos1_ack(c, &ack);
    b728:	4630      	mov	r0, r6
			const struct mqtt_puback_param ack = {
    b72a:	833b      	strh	r3, [r7, #24]
			mqtt_publish_qos1_ack(c, &ack);
    b72c:	f107 0118 	add.w	r1, r7, #24
    b730:	f028 fa1b 	bl	33b6a <mqtt_publish_qos1_ack>
		if (err >= 0) {
    b734:	f1b9 0f00 	cmp.w	r9, #0
    b738:	d021      	beq.n	b77e <mqtt_evt_handler+0x186>
			LOG_ERR("Received payload (%d bytes) is larger than the payload buffer size (%d bytes).",
    b73a:	6963      	ldr	r3, [r4, #20]
    b73c:	466c      	mov	r4, sp
    b73e:	b088      	sub	sp, #32
    b740:	aa16      	add	r2, sp, #88	; 0x58
    b742:	497c      	ldr	r1, [pc, #496]	; (b934 <mqtt_evt_handler+0x33c>)
    b744:	e9c2 1305 	strd	r1, r3, [r2, #20]
    b748:	2380      	movs	r3, #128	; 0x80
    b74a:	61d3      	str	r3, [r2, #28]
    b74c:	2304      	movs	r3, #4
    b74e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    b752:	f842 3f10 	str.w	r3, [r2, #16]!
		LOG_INF("Unhandled MQTT event type: %d", evt->type);
    b756:	486e      	ldr	r0, [pc, #440]	; (b910 <mqtt_evt_handler+0x318>)
    b758:	f023 fae3 	bl	2ed22 <z_log_msg_static_create.constprop.0>
    b75c:	46a5      	mov	sp, r4
    b75e:	e79b      	b.n	b698 <mqtt_evt_handler+0xa0>
			return -EIO;
    b760:	f06f 0504 	mvn.w	r5, #4
		if (p->message.topic.qos == MQTT_QOS_1_AT_LEAST_ONCE) {
    b764:	7b23      	ldrb	r3, [r4, #12]
    b766:	2b01      	cmp	r3, #1
    b768:	d106      	bne.n	b778 <mqtt_evt_handler+0x180>
			const struct mqtt_puback_param ack = {
    b76a:	8b23      	ldrh	r3, [r4, #24]
			mqtt_publish_qos1_ack(c, &ack);
    b76c:	4630      	mov	r0, r6
			const struct mqtt_puback_param ack = {
    b76e:	833b      	strh	r3, [r7, #24]
			mqtt_publish_qos1_ack(c, &ack);
    b770:	f107 0118 	add.w	r1, r7, #24
    b774:	f028 f9f9 	bl	33b6a <mqtt_publish_qos1_ack>
		if (err >= 0) {
    b778:	2d00      	cmp	r5, #0
    b77a:	f2c0 8082 	blt.w	b882 <mqtt_evt_handler+0x28a>
			data_print("Received: ", payload_buf, p->message.payload.len);
    b77e:	6962      	ldr	r2, [r4, #20]
    b780:	496b      	ldr	r1, [pc, #428]	; (b930 <mqtt_evt_handler+0x338>)
    b782:	486d      	ldr	r0, [pc, #436]	; (b938 <mqtt_evt_handler+0x340>)
    b784:	f7ff ff0c 	bl	b5a0 <data_print>
			cJSON *json_payload = cJSON_Parse(payload_buf);
    b788:	4869      	ldr	r0, [pc, #420]	; (b930 <mqtt_evt_handler+0x338>)
    b78a:	f023 fb3b 	bl	2ee04 <cJSON_Parse>
			if (!json_payload)
    b78e:	4605      	mov	r5, r0
    b790:	b958      	cbnz	r0, b7aa <mqtt_evt_handler+0x1b2>
				LOG_ERR("Failed to parse JSON payload");
    b792:	4b6a      	ldr	r3, [pc, #424]	; (b93c <mqtt_evt_handler+0x344>)
    b794:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b798:	62fb      	str	r3, [r7, #44]	; 0x2c
    b79a:	2302      	movs	r3, #2
    b79c:	485c      	ldr	r0, [pc, #368]	; (b910 <mqtt_evt_handler+0x318>)
    b79e:	62bb      	str	r3, [r7, #40]	; 0x28
    b7a0:	f107 0228 	add.w	r2, r7, #40	; 0x28
    b7a4:	f023 fabd 	bl	2ed22 <z_log_msg_static_create.constprop.0>
				return;
    b7a8:	e776      	b.n	b698 <mqtt_evt_handler+0xa0>
			cJSON *rqi = cJSON_GetObjectItem(json_payload, "rqi"); //Do I need case sensitive here? Check later.
    b7aa:	4965      	ldr	r1, [pc, #404]	; (b940 <mqtt_evt_handler+0x348>)
    b7ac:	f023 fb2e 	bl	2ee0c <cJSON_GetObjectItem>
			if (rqi && cJSON_IsString(rqi) && (rqi->valuestring != NULL))
    b7b0:	4606      	mov	r6, r0
    b7b2:	2800      	cmp	r0, #0
    b7b4:	d05e      	beq.n	b874 <mqtt_evt_handler+0x27c>
    b7b6:	f023 fb2c 	bl	2ee12 <cJSON_IsString>
    b7ba:	2800      	cmp	r0, #0
    b7bc:	d05a      	beq.n	b874 <mqtt_evt_handler+0x27c>
    b7be:	f8d6 8010 	ldr.w	r8, [r6, #16]
    b7c2:	f1b8 0f00 	cmp.w	r8, #0
    b7c6:	d055      	beq.n	b874 <mqtt_evt_handler+0x27c>
				if (strcmp(rqi->valuestring, "LED1ON") == 0)	//These are just test functions to make sure string parse worked. I'll get rid of it soon enough.
    b7c8:	f8df 9178 	ldr.w	r9, [pc, #376]	; b944 <mqtt_evt_handler+0x34c>
    b7cc:	4640      	mov	r0, r8
    b7ce:	4649      	mov	r1, r9
    b7d0:	f7fd fd1d 	bl	920e <strcmp>
    b7d4:	4606      	mov	r6, r0
    b7d6:	b988      	cbnz	r0, b7fc <mqtt_evt_handler+0x204>
					LOG_INF("LED1ON");
    b7d8:	2302      	movs	r3, #2
    b7da:	484d      	ldr	r0, [pc, #308]	; (b910 <mqtt_evt_handler+0x318>)
    b7dc:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    b7e0:	f8c7 902c 	str.w	r9, [r7, #44]	; 0x2c
    b7e4:	62bb      	str	r3, [r7, #40]	; 0x28
    b7e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
    b7ea:	f023 fa9a 	bl	2ed22 <z_log_msg_static_create.constprop.0>
					dk_set_led_on(LED_CONTROL_OVER_MQTT);
    b7ee:	4630      	mov	r0, r6
    b7f0:	f029 fb1f 	bl	34e32 <dk_set_led_on>
			cJSON_Delete(json_payload);
    b7f4:	4628      	mov	r0, r5
    b7f6:	f001 fd3f 	bl	d278 <cJSON_Delete>
    b7fa:	e74d      	b.n	b698 <mqtt_evt_handler+0xa0>
				else if (strcmp(rqi->valuestring, "LED1OFF") == 0)
    b7fc:	f8df 9148 	ldr.w	r9, [pc, #328]	; b948 <mqtt_evt_handler+0x350>
    b800:	4640      	mov	r0, r8
    b802:	4649      	mov	r1, r9
    b804:	f7fd fd03 	bl	920e <strcmp>
    b808:	4606      	mov	r6, r0
    b80a:	b970      	cbnz	r0, b82a <mqtt_evt_handler+0x232>
					LOG_INF("LED1OFF");
    b80c:	2302      	movs	r3, #2
    b80e:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    b812:	483f      	ldr	r0, [pc, #252]	; (b910 <mqtt_evt_handler+0x318>)
    b814:	f8c7 902c 	str.w	r9, [r7, #44]	; 0x2c
    b818:	62bb      	str	r3, [r7, #40]	; 0x28
    b81a:	f107 0228 	add.w	r2, r7, #40	; 0x28
    b81e:	f023 fa80 	bl	2ed22 <z_log_msg_static_create.constprop.0>
					dk_set_led_off(LED_CONTROL_OVER_MQTT);
    b822:	4630      	mov	r0, r6
    b824:	f029 fb08 	bl	34e38 <dk_set_led_off>
    b828:	e7e4      	b.n	b7f4 <mqtt_evt_handler+0x1fc>
					packet.type = downlink_TEXT;
    b82a:	2300      	movs	r3, #0
					packet.length = p->message.payload.len;
    b82c:	6962      	ldr	r2, [r4, #20]
					packet.type = downlink_TEXT;
    b82e:	767b      	strb	r3, [r7, #25]
					if (p->message.payload.len <= sizeof(packet.data)) {
    b830:	2a64      	cmp	r2, #100	; 0x64
					packet.length = p->message.payload.len;
    b832:	763a      	strb	r2, [r7, #24]
					packet.destination = DESTINATION_ESP32;
    b834:	76bb      	strb	r3, [r7, #26]
					if (p->message.payload.len <= sizeof(packet.data)) {
    b836:	d811      	bhi.n	b85c <mqtt_evt_handler+0x264>
						memcpy(packet.data, payload_buf, p->message.payload.len);
    b838:	493d      	ldr	r1, [pc, #244]	; (b930 <mqtt_evt_handler+0x338>)
    b83a:	f107 001b 	add.w	r0, r7, #27
    b83e:	f02a fe73 	bl	36528 <memcpy>
    b842:	f107 0418 	add.w	r4, r7, #24
						downlink_aggregator_put(packet);
    b846:	f107 0128 	add.w	r1, r7, #40	; 0x28
    b84a:	2257      	movs	r2, #87	; 0x57
    b84c:	4668      	mov	r0, sp
    b84e:	f02a fe6b 	bl	36528 <memcpy>
    b852:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    b856:	f001 fb59 	bl	cf0c <downlink_aggregator_put>
    b85a:	e7cb      	b.n	b7f4 <mqtt_evt_handler+0x1fc>
						LOG_ERR("Payload size exceeds data packet buffer size");
    b85c:	4b3b      	ldr	r3, [pc, #236]	; (b94c <mqtt_evt_handler+0x354>)
    b85e:	f107 0210 	add.w	r2, r7, #16
    b862:	617b      	str	r3, [r7, #20]
    b864:	2302      	movs	r3, #2
    b866:	613b      	str	r3, [r7, #16]
				LOG_ERR("Failed to extract rqi");
    b868:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b86c:	4828      	ldr	r0, [pc, #160]	; (b910 <mqtt_evt_handler+0x318>)
    b86e:	f023 fa58 	bl	2ed22 <z_log_msg_static_create.constprop.0>
    b872:	e7bf      	b.n	b7f4 <mqtt_evt_handler+0x1fc>
    b874:	4b36      	ldr	r3, [pc, #216]	; (b950 <mqtt_evt_handler+0x358>)
    b876:	f107 0228 	add.w	r2, r7, #40	; 0x28
    b87a:	62fb      	str	r3, [r7, #44]	; 0x2c
    b87c:	2302      	movs	r3, #2
    b87e:	62bb      	str	r3, [r7, #40]	; 0x28
    b880:	e7f2      	b.n	b868 <mqtt_evt_handler+0x270>
		} else if (err == -EMSGSIZE) {
    b882:	f115 0f7a 	cmn.w	r5, #122	; 0x7a
    b886:	f43f af58 	beq.w	b73a <mqtt_evt_handler+0x142>
			LOG_ERR("get_received_payload failed: %d", err);
    b88a:	466c      	mov	r4, sp
    b88c:	b088      	sub	sp, #32
    b88e:	aa16      	add	r2, sp, #88	; 0x58
    b890:	4b30      	ldr	r3, [pc, #192]	; (b954 <mqtt_evt_handler+0x35c>)
    b892:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    b896:	e9c2 3505 	strd	r3, r5, [r2, #20]
    b89a:	2503      	movs	r5, #3
    b89c:	481c      	ldr	r0, [pc, #112]	; (b910 <mqtt_evt_handler+0x318>)
    b89e:	f842 5f10 	str.w	r5, [r2, #16]!
    b8a2:	f023 fa3e 	bl	2ed22 <z_log_msg_static_create.constprop.0>
    b8a6:	46a5      	mov	sp, r4
			LOG_INF("Disconnecting MQTT client...");
    b8a8:	4b2b      	ldr	r3, [pc, #172]	; (b958 <mqtt_evt_handler+0x360>)
    b8aa:	4819      	ldr	r0, [pc, #100]	; (b910 <mqtt_evt_handler+0x318>)
    b8ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    b8ae:	2302      	movs	r3, #2
    b8b0:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    b8b4:	62bb      	str	r3, [r7, #40]	; 0x28
    b8b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
    b8ba:	f023 fa32 	bl	2ed22 <z_log_msg_static_create.constprop.0>
			err = mqtt_disconnect(c);
    b8be:	4630      	mov	r0, r6
    b8c0:	f028 f979 	bl	33bb6 <mqtt_disconnect>
			if (err) {
    b8c4:	2800      	cmp	r0, #0
    b8c6:	f43f aee7 	beq.w	b698 <mqtt_evt_handler+0xa0>
				LOG_ERR("Could not disconnect: %d", err);
    b8ca:	b088      	sub	sp, #32
    b8cc:	aa16      	add	r2, sp, #88	; 0x58
    b8ce:	4b23      	ldr	r3, [pc, #140]	; (b95c <mqtt_evt_handler+0x364>)
    b8d0:	e9c2 3005 	strd	r3, r0, [r2, #20]
    b8d4:	f842 5f10 	str.w	r5, [r2, #16]!
			LOG_ERR("MQTT PINGRESP error: %d", evt->result);
    b8d8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    b8dc:	e73b      	b.n	b756 <mqtt_evt_handler+0x15e>
		if (evt->result != 0) {
    b8de:	69cb      	ldr	r3, [r1, #28]
    b8e0:	b123      	cbz	r3, b8ec <mqtt_evt_handler+0x2f4>
			LOG_ERR("MQTT PUBACK error: %d", evt->result);
    b8e2:	466c      	mov	r4, sp
    b8e4:	b088      	sub	sp, #32
    b8e6:	aa16      	add	r2, sp, #88	; 0x58
    b8e8:	491d      	ldr	r1, [pc, #116]	; (b960 <mqtt_evt_handler+0x368>)
    b8ea:	e6a1      	b.n	b630 <mqtt_evt_handler+0x38>
		LOG_INF("PUBACK packet id: %u", evt->param.puback.message_id);
    b8ec:	466c      	mov	r4, sp
    b8ee:	b088      	sub	sp, #32
    b8f0:	888b      	ldrh	r3, [r1, #4]
    b8f2:	aa16      	add	r2, sp, #88	; 0x58
    b8f4:	491b      	ldr	r1, [pc, #108]	; (b964 <mqtt_evt_handler+0x36c>)
    b8f6:	e6d8      	b.n	b6aa <mqtt_evt_handler+0xb2>
		if (evt->result != 0) {
    b8f8:	69cb      	ldr	r3, [r1, #28]
    b8fa:	b3bb      	cbz	r3, b96c <mqtt_evt_handler+0x374>
			LOG_ERR("MQTT SUBACK error: %d", evt->result);
    b8fc:	466c      	mov	r4, sp
    b8fe:	b088      	sub	sp, #32
    b900:	aa16      	add	r2, sp, #88	; 0x58
    b902:	4919      	ldr	r1, [pc, #100]	; (b968 <mqtt_evt_handler+0x370>)
    b904:	e694      	b.n	b630 <mqtt_evt_handler+0x38>
    b906:	bf00      	nop
    b908:	00038b21 	.word	0x00038b21
    b90c:	00038b39 	.word	0x00038b39
    b910:	00037988 	.word	0x00037988
    b914:	00037af0 	.word	0x00037af0
    b918:	04d20001 	.word	0x04d20001
    b91c:	00038b4f 	.word	0x00038b4f
    b920:	00038b69 	.word	0x00038b69
    b924:	01000004 	.word	0x01000004
    b928:	00038b9a 	.word	0x00038b9a
    b92c:	00038bb7 	.word	0x00038bb7
    b930:	2000efa0 	.word	0x2000efa0
    b934:	00038bd5 	.word	0x00038bd5
    b938:	00038c24 	.word	0x00038c24
    b93c:	00038c2f 	.word	0x00038c2f
    b940:	00038c9a 	.word	0x00038c9a
    b944:	00038c4c 	.word	0x00038c4c
    b948:	00038c53 	.word	0x00038c53
    b94c:	00038c5b 	.word	0x00038c5b
    b950:	00038c88 	.word	0x00038c88
    b954:	00038c9e 	.word	0x00038c9e
    b958:	00038cbe 	.word	0x00038cbe
    b95c:	00038cdb 	.word	0x00038cdb
    b960:	00038cf4 	.word	0x00038cf4
    b964:	00038d0a 	.word	0x00038d0a
    b968:	00038d1f 	.word	0x00038d1f
		LOG_INF("SUBACK packet id: %u", evt->param.suback.message_id);
    b96c:	466c      	mov	r4, sp
    b96e:	b088      	sub	sp, #32
    b970:	888b      	ldrh	r3, [r1, #4]
    b972:	aa16      	add	r2, sp, #88	; 0x58
    b974:	4907      	ldr	r1, [pc, #28]	; (b994 <mqtt_evt_handler+0x39c>)
    b976:	e698      	b.n	b6aa <mqtt_evt_handler+0xb2>
		if (evt->result != 0) {
    b978:	69cb      	ldr	r3, [r1, #28]
    b97a:	2b00      	cmp	r3, #0
    b97c:	f43f ae8c 	beq.w	b698 <mqtt_evt_handler+0xa0>
			LOG_ERR("MQTT PINGRESP error: %d", evt->result);
    b980:	466c      	mov	r4, sp
    b982:	b088      	sub	sp, #32
    b984:	aa16      	add	r2, sp, #88	; 0x58
    b986:	4904      	ldr	r1, [pc, #16]	; (b998 <mqtt_evt_handler+0x3a0>)
    b988:	e652      	b.n	b630 <mqtt_evt_handler+0x38>
		LOG_INF("Unhandled MQTT event type: %d", evt->type);
    b98a:	466c      	mov	r4, sp
    b98c:	b088      	sub	sp, #32
    b98e:	aa16      	add	r2, sp, #88	; 0x58
    b990:	4902      	ldr	r1, [pc, #8]	; (b99c <mqtt_evt_handler+0x3a4>)
    b992:	e68a      	b.n	b6aa <mqtt_evt_handler+0xb2>
    b994:	00038d35 	.word	0x00038d35
    b998:	00038d4a 	.word	0x00038d4a
    b99c:	00038d62 	.word	0x00038d62

0000b9a0 <data_publish>:
{
    b9a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	param.message.topic.topic.size = strlen(CONFIG_MQTT_PUB_TOPIC);
    b9a4:	f04f 082f 	mov.w	r8, #47	; 0x2f
{
    b9a8:	b087      	sub	sp, #28
	param.message.topic.topic.utf8 = CONFIG_MQTT_PUB_TOPIC;
    b9aa:	f8df 9068 	ldr.w	r9, [pc, #104]	; ba14 <data_publish+0x74>
{
    b9ae:	af00      	add	r7, sp, #0
    b9b0:	4606      	mov	r6, r0
    b9b2:	4614      	mov	r4, r2
    b9b4:	461d      	mov	r5, r3
	param.message.payload.len = len;
    b9b6:	e9c7 2303 	strd	r2, r3, [r7, #12]
	param.message.topic.qos = qos;
    b9ba:	7239      	strb	r1, [r7, #8]
	param.message.topic.topic.utf8 = CONFIG_MQTT_PUB_TOPIC;
    b9bc:	f8c7 9000 	str.w	r9, [r7]
	param.message.topic.topic.size = strlen(CONFIG_MQTT_PUB_TOPIC);
    b9c0:	f8c7 8004 	str.w	r8, [r7, #4]
	if (z_syscall_trap()) {
		return (uint32_t) arch_syscall_invoke0(K_SYSCALL_SYS_RAND32_GET);
	}
#endif
	compiler_barrier();
	return z_impl_sys_rand32_get();
    b9c4:	f007 fee8 	bl	13798 <z_impl_sys_rand32_get>
	param.dup_flag = 0;
    b9c8:	7dbb      	ldrb	r3, [r7, #22]
	data_print("Publishing: ", data, len);
    b9ca:	462a      	mov	r2, r5
    b9cc:	4621      	mov	r1, r4
	param.message_id = sys_rand32_get();
    b9ce:	82b8      	strh	r0, [r7, #20]
	param.dup_flag = 0;
    b9d0:	f023 0303 	bic.w	r3, r3, #3
	data_print("Publishing: ", data, len);
    b9d4:	4810      	ldr	r0, [pc, #64]	; (ba18 <data_publish+0x78>)
	LOG_INF("to topic: %s len: %u",
    b9d6:	466c      	mov	r4, sp
	param.dup_flag = 0;
    b9d8:	75bb      	strb	r3, [r7, #22]
	data_print("Publishing: ", data, len);
    b9da:	f7ff fde1 	bl	b5a0 <data_print>
	LOG_INF("to topic: %s len: %u",
    b9de:	b08a      	sub	sp, #40	; 0x28
    b9e0:	466a      	mov	r2, sp
    b9e2:	4b0e      	ldr	r3, [pc, #56]	; (ba1c <data_publish+0x7c>)
    b9e4:	f8c2 801c 	str.w	r8, [r2, #28]
    b9e8:	e9c2 3905 	strd	r3, r9, [r2, #20]
    b9ec:	f44f 7300 	mov.w	r3, #512	; 0x200
    b9f0:	8413      	strh	r3, [r2, #32]
    b9f2:	4b0b      	ldr	r3, [pc, #44]	; (ba20 <data_publish+0x80>)
    b9f4:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    b9f8:	f842 3f10 	str.w	r3, [r2, #16]!
    b9fc:	4809      	ldr	r0, [pc, #36]	; (ba24 <data_publish+0x84>)
    b9fe:	f023 f990 	bl	2ed22 <z_log_msg_static_create.constprop.0>
	return mqtt_publish(c, &param);
    ba02:	4639      	mov	r1, r7
    ba04:	46a5      	mov	sp, r4
    ba06:	4630      	mov	r0, r6
    ba08:	f028 f86b 	bl	33ae2 <mqtt_publish>
}
    ba0c:	371c      	adds	r7, #28
    ba0e:	46bd      	mov	sp, r7
    ba10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ba14:	00038d80 	.word	0x00038d80
    ba18:	00038db0 	.word	0x00038db0
    ba1c:	00038dbd 	.word	0x00038dbd
    ba20:	01000004 	.word	0x01000004
    ba24:	00037988 	.word	0x00037988

0000ba28 <client_init>:

/**@brief Initialize the MQTT client structure
 */
/* STEP 3 - Define the function client_init() to initialize the MQTT client instance.  */
int client_init(struct mqtt_client *client)
{
    ba28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ba2c:	b09d      	sub	sp, #116	; 0x74
    ba2e:	af02      	add	r7, sp, #8
	struct addrinfo hints = {
    ba30:	f107 0818 	add.w	r8, r7, #24
{
    ba34:	4604      	mov	r4, r0
	int err;
	/* Initializes the client instance. */
	mqtt_client_init(client);
    ba36:	f027 fffb 	bl	33a30 <mqtt_client_init>
	struct addrinfo hints = {
    ba3a:	2250      	movs	r2, #80	; 0x50
    ba3c:	2100      	movs	r1, #0
    ba3e:	4640      	mov	r0, r8
    ba40:	f02a fd92 	bl	36568 <memset>
    ba44:	2301      	movs	r3, #1
/** POSIX wrapper for @ref zsock_getaddrinfo */
static inline int getaddrinfo(const char *host, const char *service,
			      const struct zsock_addrinfo *hints,
			      struct zsock_addrinfo **res)
{
	return zsock_getaddrinfo(host, service, hints, res);
    ba46:	4642      	mov	r2, r8
    ba48:	e9c7 3308 	strd	r3, r3, [r7, #32]
    ba4c:	2100      	movs	r1, #0
    ba4e:	4852      	ldr	r0, [pc, #328]	; (bb98 <client_init+0x170>)
    ba50:	1d3b      	adds	r3, r7, #4
    ba52:	f024 f8ff 	bl	2fc54 <zsock_getaddrinfo>
	if (err) {
    ba56:	4605      	mov	r5, r0
    ba58:	b300      	cbz	r0, ba9c <client_init+0x74>
		LOG_ERR("getaddrinfo failed: %d", err);
    ba5a:	466c      	mov	r4, sp
    ba5c:	b088      	sub	sp, #32
    ba5e:	aa02      	add	r2, sp, #8
    ba60:	4b4e      	ldr	r3, [pc, #312]	; (bb9c <client_init+0x174>)
    ba62:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ba66:	e9c2 3005 	strd	r3, r0, [r2, #20]
    ba6a:	2303      	movs	r3, #3
    ba6c:	484c      	ldr	r0, [pc, #304]	; (bba0 <client_init+0x178>)
    ba6e:	f842 3f10 	str.w	r3, [r2, #16]!
    ba72:	f023 f956 	bl	2ed22 <z_log_msg_static_create.constprop.0>
    ba76:	46a5      	mov	sp, r4

	/* Resolves the configured hostname and initializes the MQTT broker structure */
	err = broker_init();
	if (err) {
		LOG_ERR("Failed to initialize broker connection");
    ba78:	4b4a      	ldr	r3, [pc, #296]	; (bba4 <client_init+0x17c>)
		return -ECHILD;
    ba7a:	f06f 0509 	mvn.w	r5, #9
		LOG_ERR("Failed to initialize broker connection");
    ba7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    ba80:	2302      	movs	r3, #2
    ba82:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ba86:	4846      	ldr	r0, [pc, #280]	; (bba0 <client_init+0x178>)
    ba88:	62bb      	str	r3, [r7, #40]	; 0x28
    ba8a:	f107 0228 	add.w	r2, r7, #40	; 0x28
    ba8e:	f023 f948 	bl	2ed22 <z_log_msg_static_create.constprop.0>
	/* We are not using TLS in Exercise 1 */
	client->transport.type = MQTT_TRANSPORT_NON_SECURE;


	return err;
}
    ba92:	4628      	mov	r0, r5
    ba94:	376c      	adds	r7, #108	; 0x6c
    ba96:	46bd      	mov	sp, r7
    ba98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LOG_ERR("ai_addrlen = %u should be %u or %u",
    ba9c:	f04f 0a08 	mov.w	sl, #8
	addr = result;
    baa0:	687e      	ldr	r6, [r7, #4]
			LOG_ERR("ai_addrlen = %u should be %u or %u",
    baa2:	f8df 9104 	ldr.w	r9, [pc, #260]	; bba8 <client_init+0x180>
		addr = addr->ai_next;
    baa6:	483e      	ldr	r0, [pc, #248]	; (bba0 <client_init+0x178>)
	while (addr != NULL) {
    baa8:	b32e      	cbz	r6, baf6 <client_init+0xce>
		if (addr->ai_addrlen == sizeof(struct sockaddr_in)) {
    baaa:	6973      	ldr	r3, [r6, #20]
    baac:	2b08      	cmp	r3, #8
    baae:	d154      	bne.n	bb5a <client_init+0x132>
				->sin_addr.s_addr;
    bab0:	69b3      	ldr	r3, [r6, #24]
			broker4->sin_addr.s_addr =
    bab2:	493e      	ldr	r1, [pc, #248]	; (bbac <client_init+0x184>)
				->sin_addr.s_addr;
    bab4:	685b      	ldr	r3, [r3, #4]
			broker4->sin_family = AF_INET;
    bab6:	2001      	movs	r0, #1
			broker4->sin_addr.s_addr =
    bab8:	604b      	str	r3, [r1, #4]
			broker4->sin_port = htons(CONFIG_MQTT_BROKER_PORT);
    baba:	f645 3307 	movw	r3, #23303	; 0x5b07
			broker4->sin_family = AF_INET;
    babe:	8008      	strh	r0, [r1, #0]
			broker4->sin_port = htons(CONFIG_MQTT_BROKER_PORT);
    bac0:	804b      	strh	r3, [r1, #2]
		union { uintptr_t x; size_t val; } parm3 = { .val = size };
		return (char *) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_NET_ADDR_NTOP);
	}
#endif
	compiler_barrier();
	return z_impl_net_addr_ntop(family, src, dst, size);
    bac2:	f107 0608 	add.w	r6, r7, #8
    bac6:	2310      	movs	r3, #16
    bac8:	4632      	mov	r2, r6
    baca:	3104      	adds	r1, #4
    bacc:	f012 fe4e 	bl	1e76c <z_impl_net_addr_ntop>
			LOG_INF("IPv4 Address found %s", (char *)(ipv4_addr));
    bad0:	46e9      	mov	r9, sp
    bad2:	b088      	sub	sp, #32
    bad4:	ab02      	add	r3, sp, #8
    bad6:	4a36      	ldr	r2, [pc, #216]	; (bbb0 <client_init+0x188>)
    bad8:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
    badc:	e9c3 2605 	strd	r2, r6, [r3, #20]
    bae0:	f44f 7200 	mov.w	r2, #512	; 0x200
    bae4:	839a      	strh	r2, [r3, #28]
    bae6:	461a      	mov	r2, r3
    bae8:	4b32      	ldr	r3, [pc, #200]	; (bbb4 <client_init+0x18c>)
    baea:	482d      	ldr	r0, [pc, #180]	; (bba0 <client_init+0x178>)
    baec:	f842 3f10 	str.w	r3, [r2, #16]!
    baf0:	f023 f917 	bl	2ed22 <z_log_msg_static_create.constprop.0>
    baf4:	46cd      	mov	sp, r9
}

/** POSIX wrapper for @ref zsock_freeaddrinfo */
static inline void freeaddrinfo(struct zsock_addrinfo *ai)
{
	zsock_freeaddrinfo(ai);
    baf6:	6878      	ldr	r0, [r7, #4]
    baf8:	f024 f8ae 	bl	2fc58 <zsock_freeaddrinfo>
	client->broker = &broker;
    bafc:	4b2b      	ldr	r3, [pc, #172]	; (bbac <client_init+0x184>)
	err = nrf_modem_at_cmd(imei_buf, sizeof(imei_buf), "AT+CGSN");
    bafe:	2117      	movs	r1, #23
	client->broker = &broker;
    bb00:	6363      	str	r3, [r4, #52]	; 0x34
	client->evt_cb = mqtt_evt_handler;
    bb02:	4b2d      	ldr	r3, [pc, #180]	; (bbb8 <client_init+0x190>)
	err = nrf_modem_at_cmd(imei_buf, sizeof(imei_buf), "AT+CGSN");
    bb04:	4640      	mov	r0, r8
    bb06:	4a2d      	ldr	r2, [pc, #180]	; (bbbc <client_init+0x194>)
	client->evt_cb = mqtt_evt_handler;
    bb08:	64a3      	str	r3, [r4, #72]	; 0x48
	err = nrf_modem_at_cmd(imei_buf, sizeof(imei_buf), "AT+CGSN");
    bb0a:	f01b fb89 	bl	27220 <nrf_modem_at_cmd>
	if (err) {
    bb0e:	2800      	cmp	r0, #0
    bb10:	d036      	beq.n	bb80 <client_init+0x158>
		LOG_ERR("Failed to obtain IMEI, error: %d", err);
    bb12:	466e      	mov	r6, sp
    bb14:	b088      	sub	sp, #32
    bb16:	aa02      	add	r2, sp, #8
    bb18:	4b29      	ldr	r3, [pc, #164]	; (bbc0 <client_init+0x198>)
    bb1a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    bb1e:	e9c2 3005 	strd	r3, r0, [r2, #20]
    bb22:	2303      	movs	r3, #3
    bb24:	481e      	ldr	r0, [pc, #120]	; (bba0 <client_init+0x178>)
    bb26:	f842 3f10 	str.w	r3, [r2, #16]!
    bb2a:	f023 f8fa 	bl	2ed22 <z_log_msg_static_create.constprop.0>
    bb2e:	46b5      	mov	sp, r6
	client->client_id.utf8 = client_id_get();
    bb30:	4824      	ldr	r0, [pc, #144]	; (bbc4 <client_init+0x19c>)
    bb32:	62e0      	str	r0, [r4, #44]	; 0x2c
	client->client_id.size = strlen(client->client_id.utf8);
    bb34:	f7fd fb75 	bl	9222 <strlen>
	client->protocol_version = MQTT_VERSION_3_1_1;
    bb38:	2204      	movs	r2, #4
    bb3a:	f884 205e 	strb.w	r2, [r4, #94]	; 0x5e
	client->rx_buf = rx_buffer;
    bb3e:	4a22      	ldr	r2, [pc, #136]	; (bbc8 <client_init+0x1a0>)
	client->password = NULL;
    bb40:	2300      	movs	r3, #0
	client->rx_buf = rx_buffer;
    bb42:	64e2      	str	r2, [r4, #76]	; 0x4c
	client->rx_buf_size = sizeof(rx_buffer);
    bb44:	2280      	movs	r2, #128	; 0x80
	client->tx_buf = tx_buffer;
    bb46:	4921      	ldr	r1, [pc, #132]	; (bbcc <client_init+0x1a4>)
	client->user_name = NULL;
    bb48:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
	client->tx_buf_size = sizeof(tx_buffer);
    bb4c:	e9c4 1215 	strd	r1, r2, [r4, #84]	; 0x54
	client->client_id.size = strlen(client->client_id.utf8);
    bb50:	6320      	str	r0, [r4, #48]	; 0x30
	client->rx_buf_size = sizeof(rx_buffer);
    bb52:	6522      	str	r2, [r4, #80]	; 0x50
	client->transport.type = MQTT_TRANSPORT_NON_SECURE;
    bb54:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	return err;
    bb58:	e79b      	b.n	ba92 <client_init+0x6a>
			LOG_ERR("ai_addrlen = %u should be %u or %u",
    bb5a:	46eb      	mov	fp, sp
    bb5c:	b08a      	sub	sp, #40	; 0x28
    bb5e:	aa02      	add	r2, sp, #8
    bb60:	e9c2 9305 	strd	r9, r3, [r2, #20]
    bb64:	2318      	movs	r3, #24
    bb66:	6213      	str	r3, [r2, #32]
    bb68:	2305      	movs	r3, #5
    bb6a:	f8c2 a01c 	str.w	sl, [r2, #28]
    bb6e:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    bb72:	f842 3f10 	str.w	r3, [r2, #16]!
    bb76:	f023 f8d4 	bl	2ed22 <z_log_msg_static_create.constprop.0>
    bb7a:	46dd      	mov	sp, fp
		addr = addr->ai_next;
    bb7c:	6836      	ldr	r6, [r6, #0]
    bb7e:	e792      	b.n	baa6 <client_init+0x7e>
	imei_buf[IMEI_LEN] = '\0';
    bb80:	f887 0027 	strb.w	r0, [r7, #39]	; 0x27
	snprintf(client_id, sizeof(client_id), "nrf-%.*s", IMEI_LEN, imei_buf);
    bb84:	230f      	movs	r3, #15
    bb86:	2114      	movs	r1, #20
    bb88:	4a11      	ldr	r2, [pc, #68]	; (bbd0 <client_init+0x1a8>)
    bb8a:	f8cd 8000 	str.w	r8, [sp]
    bb8e:	480d      	ldr	r0, [pc, #52]	; (bbc4 <client_init+0x19c>)
    bb90:	f021 f8ec 	bl	2cd6c <sniprintf>
    bb94:	e7cc      	b.n	bb30 <client_init+0x108>
    bb96:	bf00      	nop
    bb98:	00038dd2 	.word	0x00038dd2
    bb9c:	00038dde 	.word	0x00038dde
    bba0:	00037988 	.word	0x00037988
    bba4:	00038df5 	.word	0x00038df5
    bba8:	00038e32 	.word	0x00038e32
    bbac:	2000ef50 	.word	0x2000ef50
    bbb0:	00038e1c 	.word	0x00038e1c
    bbb4:	01000003 	.word	0x01000003
    bbb8:	0000b5f9 	.word	0x0000b5f9
    bbbc:	00038e55 	.word	0x00038e55
    bbc0:	00038e5d 	.word	0x00038e5d
    bbc4:	2000ef8c 	.word	0x2000ef8c
    bbc8:	2000f0a0 	.word	0x2000f0a0
    bbcc:	2000f020 	.word	0x2000f020
    bbd0:	00038e7e 	.word	0x00038e7e

0000bbd4 <leds_update>:
	error_handler(ERROR_MODEM_RECOVERABLE, (int)fault_info->reason);
}

/**@brief Update LEDs state. */
static void leds_update(struct k_work *work)
{
    bbd4:	b570      	push	{r4, r5, r6, lr}
	static bool led_on;
	static uint8_t current_led_on_mask;
	uint8_t led_on_mask = current_led_on_mask;
    bbd6:	4d11      	ldr	r5, [pc, #68]	; (bc1c <leds_update+0x48>)
	led_on_mask &= ~(DK_LED3_MSK | DK_LED4_MSK);

	/* Set LED3 and LED4 to match current state. */
	led_on_mask |= LED_GET_ON(display_state);

	led_on = !led_on;
    bbd8:	4811      	ldr	r0, [pc, #68]	; (bc20 <leds_update+0x4c>)
	led_on_mask |= LED_GET_ON(display_state);
    bbda:	4b12      	ldr	r3, [pc, #72]	; (bc24 <leds_update+0x50>)
	uint8_t led_on_mask = current_led_on_mask;
    bbdc:	7829      	ldrb	r1, [r5, #0]
	led_on_mask |= LED_GET_ON(display_state);
    bbde:	881b      	ldrh	r3, [r3, #0]
	led_on = !led_on;
    bbe0:	7802      	ldrb	r2, [r0, #0]
	led_on_mask &= ~(DK_LED3_MSK | DK_LED4_MSK);
    bbe2:	f021 040c 	bic.w	r4, r1, #12
	led_on_mask |= LED_GET_ON(display_state);
    bbe6:	431c      	orrs	r4, r3
	led_on = !led_on;
    bbe8:	f082 0201 	eor.w	r2, r2, #1
	led_on_mask |= LED_GET_ON(display_state);
    bbec:	b264      	sxtb	r4, r4
	led_on = !led_on;
    bbee:	7002      	strb	r2, [r0, #0]
	if (led_on) {
		led_on_mask |= LED_GET_BLINK(display_state);
    bbf0:	f343 2307 	sbfx	r3, r3, #8, #8
	if (led_on) {
    bbf4:	b17a      	cbz	r2, bc16 <leds_update+0x42>
		led_on_mask |= LED_GET_BLINK(display_state);
    bbf6:	431c      	orrs	r4, r3
	} else {
		led_on_mask &= ~LED_GET_BLINK(display_state);
    bbf8:	b2e4      	uxtb	r4, r4
	}

	if (led_on_mask != current_led_on_mask) {
    bbfa:	428c      	cmp	r4, r1
    bbfc:	d003      	beq.n	bc06 <leds_update+0x32>
		dk_set_leds(led_on_mask);
    bbfe:	4620      	mov	r0, r4
    bc00:	f029 f914 	bl	34e2c <dk_set_leds>
		current_led_on_mask = led_on_mask;
    bc04:	702c      	strb	r4, [r5, #0]
	}

	k_work_schedule(&leds_update_work, LEDS_UPDATE_INTERVAL);
    bc06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
}
    bc0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_schedule(&leds_update_work, LEDS_UPDATE_INTERVAL);
    bc0e:	2300      	movs	r3, #0
    bc10:	4805      	ldr	r0, [pc, #20]	; (bc28 <leds_update+0x54>)
    bc12:	f01e b9e1 	b.w	29fd8 <k_work_schedule>
		led_on_mask &= ~LED_GET_BLINK(display_state);
    bc16:	ea24 0403 	bic.w	r4, r4, r3
    bc1a:	e7ed      	b.n	bbf8 <leds_update+0x24>
    bc1c:	2000f121 	.word	0x2000f121
    bc20:	2000f120 	.word	0x2000f120
    bc24:	2000ef68 	.word	0x2000ef68
    bc28:	2000d218 	.word	0x2000d218

0000bc2c <button_handler.part.0>:


/**@brief Callback for button events from the DK buttons and LEDs library. */
static void button_handler(uint32_t buttons, uint32_t has_changed)
    bc2c:	b598      	push	{r3, r4, r7, lr}
{
	switch (has_changed) {
	case DK_BTN1_MSK:
		/* STEP 7.2 - When button 1 is pressed, call data_publish() to publish a message */
		if (buttons & DK_BTN1_MSK){
			int err = data_publish(&client, MQTT_QOS_1_AT_LEAST_ONCE,
    bc2e:	2101      	movs	r1, #1
static void button_handler(uint32_t buttons, uint32_t has_changed)
    bc30:	af00      	add	r7, sp, #0
			int err = data_publish(&client, MQTT_QOS_1_AT_LEAST_ONCE,
    bc32:	235e      	movs	r3, #94	; 0x5e
    bc34:	4a0a      	ldr	r2, [pc, #40]	; (bc60 <button_handler.part.0+0x34>)
    bc36:	480b      	ldr	r0, [pc, #44]	; (bc64 <button_handler.part.0+0x38>)
    bc38:	f7ff feb2 	bl	b9a0 <data_publish>
				   CONFIG_BUTTON_EVENT_PUBLISH_MSG, sizeof(CONFIG_BUTTON_EVENT_PUBLISH_MSG)-1);
			if (err) {
    bc3c:	b170      	cbz	r0, bc5c <button_handler.part.0+0x30>
				LOG_INF("Failed to send message, %d", err);
    bc3e:	466c      	mov	r4, sp
    bc40:	b088      	sub	sp, #32
    bc42:	466a      	mov	r2, sp
    bc44:	4b08      	ldr	r3, [pc, #32]	; (bc68 <button_handler.part.0+0x3c>)
    bc46:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    bc4a:	e9c2 3005 	strd	r3, r0, [r2, #20]
    bc4e:	2303      	movs	r3, #3
    bc50:	4806      	ldr	r0, [pc, #24]	; (bc6c <button_handler.part.0+0x40>)
    bc52:	f842 3f10 	str.w	r3, [r2, #16]!
    bc56:	f023 f873 	bl	2ed40 <z_log_msg_static_create.constprop.0>
    bc5a:	46a5      	mov	sp, r4
				return;
			}
		}
		break;
	}
}
    bc5c:	46bd      	mov	sp, r7
    bc5e:	bd98      	pop	{r3, r4, r7, pc}
    bc60:	00038e87 	.word	0x00038e87
    bc64:	2000e1d8 	.word	0x2000e1d8
    bc68:	00038ee6 	.word	0x00038ee6
    bc6c:	00037988 	.word	0x00037988

0000bc70 <lte_handler>:
{
    bc70:	b598      	push	{r3, r4, r7, lr}
     switch (evt->type) {
    bc72:	7803      	ldrb	r3, [r0, #0]
{
    bc74:	af00      	add	r7, sp, #0
     switch (evt->type) {
    bc76:	b11b      	cbz	r3, bc80 <lte_handler+0x10>
    bc78:	2b03      	cmp	r3, #3
    bc7a:	d01f      	beq.n	bcbc <lte_handler+0x4c>
}
    bc7c:	46bd      	mov	sp, r7
    bc7e:	bd98      	pop	{r3, r4, r7, pc}
        if ((evt->nw_reg_status != LTE_LC_NW_REG_REGISTERED_HOME) &&
    bc80:	7a03      	ldrb	r3, [r0, #8]
    bc82:	2b01      	cmp	r3, #1
    bc84:	d018      	beq.n	bcb8 <lte_handler+0x48>
    bc86:	2b05      	cmp	r3, #5
    bc88:	d1f8      	bne.n	bc7c <lte_handler+0xc>
		LOG_INF("Network registration status: %s",
    bc8a:	4b19      	ldr	r3, [pc, #100]	; (bcf0 <lte_handler+0x80>)
    bc8c:	466c      	mov	r4, sp
    bc8e:	b088      	sub	sp, #32
    bc90:	466a      	mov	r2, sp
    bc92:	4918      	ldr	r1, [pc, #96]	; (bcf4 <lte_handler+0x84>)
    bc94:	4818      	ldr	r0, [pc, #96]	; (bcf8 <lte_handler+0x88>)
    bc96:	e9c2 1305 	strd	r1, r3, [r2, #20]
    bc9a:	f44f 7300 	mov.w	r3, #512	; 0x200
    bc9e:	8393      	strh	r3, [r2, #28]
    bca0:	4b16      	ldr	r3, [pc, #88]	; (bcfc <lte_handler+0x8c>)
    bca2:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
    bca6:	f842 3f10 	str.w	r3, [r2, #16]!
    bcaa:	f023 f849 	bl	2ed40 <z_log_msg_static_create.constprop.0>
    bcae:	46a5      	mov	sp, r4
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    bcb0:	4813      	ldr	r0, [pc, #76]	; (bd00 <lte_handler+0x90>)
    bcb2:	f01d fcf9 	bl	296a8 <z_impl_k_sem_give>
}
    bcb6:	e7e1      	b.n	bc7c <lte_handler+0xc>
    bcb8:	4b12      	ldr	r3, [pc, #72]	; (bd04 <lte_handler+0x94>)
    bcba:	e7e7      	b.n	bc8c <lte_handler+0x1c>
		LOG_INF("RRC mode: %s", evt->rrc_mode == LTE_LC_RRC_MODE_CONNECTED ?
    bcbc:	7a01      	ldrb	r1, [r0, #8]
    bcbe:	4a12      	ldr	r2, [pc, #72]	; (bd08 <lte_handler+0x98>)
    bcc0:	4b12      	ldr	r3, [pc, #72]	; (bd0c <lte_handler+0x9c>)
    bcc2:	466c      	mov	r4, sp
    bcc4:	b088      	sub	sp, #32
    bcc6:	2901      	cmp	r1, #1
    bcc8:	bf08      	it	eq
    bcca:	4613      	moveq	r3, r2
    bccc:	466a      	mov	r2, sp
    bcce:	4910      	ldr	r1, [pc, #64]	; (bd10 <lte_handler+0xa0>)
    bcd0:	4809      	ldr	r0, [pc, #36]	; (bcf8 <lte_handler+0x88>)
    bcd2:	e9c2 1305 	strd	r1, r3, [r2, #20]
    bcd6:	f44f 7300 	mov.w	r3, #512	; 0x200
    bcda:	8393      	strh	r3, [r2, #28]
    bcdc:	4b07      	ldr	r3, [pc, #28]	; (bcfc <lte_handler+0x8c>)
    bcde:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
    bce2:	f842 3f10 	str.w	r3, [r2, #16]!
    bce6:	f023 f82b 	bl	2ed40 <z_log_msg_static_create.constprop.0>
    bcea:	46a5      	mov	sp, r4
}
    bcec:	e7c6      	b.n	bc7c <lte_handler+0xc>
    bcee:	bf00      	nop
    bcf0:	00038f1a 	.word	0x00038f1a
    bcf4:	00038f3d 	.word	0x00038f3d
    bcf8:	00037988 	.word	0x00037988
    bcfc:	01000003 	.word	0x01000003
    bd00:	2000cf40 	.word	0x2000cf40
    bd04:	00038f01 	.word	0x00038f01
    bd08:	00038f2e 	.word	0x00038f2e
    bd0c:	00038f38 	.word	0x00038f38
    bd10:	00038f5d 	.word	0x00038f5d

0000bd14 <main>:

	return 0;
}

int main(void)
{
    bd14:	b5f0      	push	{r4, r5, r6, r7, lr}
    bd16:	b087      	sub	sp, #28
    bd18:	af00      	add	r7, sp, #0
	int err;
	uint32_t connect_attempt = 0;
	LOG_INF("LTE Sensor Gateway sample started");
    bd1a:	2402      	movs	r4, #2
    bd1c:	4bad      	ldr	r3, [pc, #692]	; (bfd4 <main+0x2c0>)
    bd1e:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    bd22:	48ad      	ldr	r0, [pc, #692]	; (bfd8 <main+0x2c4>)
    bd24:	617b      	str	r3, [r7, #20]
    bd26:	f107 0210 	add.w	r2, r7, #16
    bd2a:	613c      	str	r4, [r7, #16]
    bd2c:	f023 f808 	bl	2ed40 <z_log_msg_static_create.constprop.0>

	
	
	

	if (dk_leds_init() != 0) {
    bd30:	f016 fc9c 	bl	2266c <dk_leds_init>
    bd34:	b148      	cbz	r0, bd4a <main+0x36>
		LOG_ERR("Failed to initialize the LED library");
    bd36:	4ba9      	ldr	r3, [pc, #676]	; (bfdc <main+0x2c8>)
    bd38:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    bd3c:	e9c7 4304 	strd	r4, r3, [r7, #16]
    bd40:	48a5      	ldr	r0, [pc, #660]	; (bfd8 <main+0x2c4>)
    bd42:	f107 0210 	add.w	r2, r7, #16
    bd46:	f022 fffb 	bl	2ed40 <z_log_msg_static_create.constprop.0>
	LOG_INF("Initializing modem library");
    bd4a:	466d      	mov	r5, sp
    bd4c:	2402      	movs	r4, #2
    bd4e:	4ba4      	ldr	r3, [pc, #656]	; (bfe0 <main+0x2cc>)
    bd50:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    bd54:	48a0      	ldr	r0, [pc, #640]	; (bfd8 <main+0x2c4>)
    bd56:	617b      	str	r3, [r7, #20]
    bd58:	f107 0210 	add.w	r2, r7, #16
    bd5c:	613c      	str	r4, [r7, #16]
    bd5e:	f022 ffef 	bl	2ed40 <z_log_msg_static_create.constprop.0>
	err = nrf_modem_lib_init();
    bd62:	f015 fb91 	bl	21488 <nrf_modem_lib_init>
	if (err) {
    bd66:	b1e0      	cbz	r0, bda2 <main+0x8e>
		LOG_ERR("Failed to initialize the modem library, error: %d", err);
    bd68:	b088      	sub	sp, #32
    bd6a:	466a      	mov	r2, sp
    bd6c:	4b9d      	ldr	r3, [pc, #628]	; (bfe4 <main+0x2d0>)
    bd6e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    bd72:	e9c2 3005 	strd	r3, r0, [r2, #20]
    bd76:	2303      	movs	r3, #3
    bd78:	f842 3f10 	str.w	r3, [r2, #16]!
		LOG_INF("Modem could not be configured, error: %d", err);
    bd7c:	4896      	ldr	r0, [pc, #600]	; (bfd8 <main+0x2c4>)
    bd7e:	f022 ffdf 	bl	2ed40 <z_log_msg_static_create.constprop.0>
    bd82:	46ad      	mov	sp, r5
	}

	err = modem_configure();
	if (err) {
		LOG_ERR("Failed to configure the modem");
    bd84:	4b98      	ldr	r3, [pc, #608]	; (bfe8 <main+0x2d4>)
    bd86:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    bd8a:	617b      	str	r3, [r7, #20]
    bd8c:	2302      	movs	r3, #2
    bd8e:	4892      	ldr	r0, [pc, #584]	; (bfd8 <main+0x2c4>)
    bd90:	613b      	str	r3, [r7, #16]
    bd92:	f107 0210 	add.w	r2, r7, #16
    bd96:	f022 ffd3 	bl	2ed40 <z_log_msg_static_create.constprop.0>
	}
	goto do_connect;
	LOG_ERR("How'd we get here?");
	/* This is never reached */
	return 0;
}
    bd9a:	2000      	movs	r0, #0
    bd9c:	371c      	adds	r7, #28
    bd9e:	46bd      	mov	sp, r7
    bda0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LOG_INF("Connecting to LTE network");
    bda2:	4b92      	ldr	r3, [pc, #584]	; (bfec <main+0x2d8>)
    bda4:	488c      	ldr	r0, [pc, #560]	; (bfd8 <main+0x2c4>)
    bda6:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    bdaa:	e9c7 4304 	strd	r4, r3, [r7, #16]
    bdae:	f107 0210 	add.w	r2, r7, #16
    bdb2:	f022 ffc5 	bl	2ed40 <z_log_msg_static_create.constprop.0>
	err = lte_lc_init_and_connect_async(lte_handler);
    bdb6:	488e      	ldr	r0, [pc, #568]	; (bff0 <main+0x2dc>)
    bdb8:	f029 f9ac 	bl	35114 <lte_lc_init_and_connect_async>
	if (err) {
    bdbc:	b150      	cbz	r0, bdd4 <main+0xc0>
		LOG_INF("Modem could not be configured, error: %d", err);
    bdbe:	b088      	sub	sp, #32
    bdc0:	466a      	mov	r2, sp
    bdc2:	4b8c      	ldr	r3, [pc, #560]	; (bff4 <main+0x2e0>)
    bdc4:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    bdc8:	e9c2 3005 	strd	r3, r0, [r2, #20]
    bdcc:	2303      	movs	r3, #3
    bdce:	f842 3f10 	str.w	r3, [r2, #16]!
    bdd2:	e7d3      	b.n	bd7c <main+0x68>
	return z_impl_k_sem_take(sem, timeout);
    bdd4:	f04f 32ff 	mov.w	r2, #4294967295
    bdd8:	f04f 33ff 	mov.w	r3, #4294967295
    bddc:	4886      	ldr	r0, [pc, #536]	; (bff8 <main+0x2e4>)
    bdde:	f01d fca7 	bl	29730 <z_impl_k_sem_take>
	LOG_INF("Connected to LTE network");
    bde2:	4b86      	ldr	r3, [pc, #536]	; (bffc <main+0x2e8>)
    bde4:	487c      	ldr	r0, [pc, #496]	; (bfd8 <main+0x2c4>)
    bde6:	e9c7 4304 	strd	r4, r3, [r7, #16]
    bdea:	f107 0210 	add.w	r2, r7, #16
    bdee:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    bdf2:	f022 ffa5 	bl	2ed40 <z_log_msg_static_create.constprop.0>
	display_state = LEDS_LTE_CONNECTED;
    bdf6:	2204      	movs	r2, #4
    bdf8:	4b81      	ldr	r3, [pc, #516]	; (c000 <main+0x2ec>)
	if (dk_buttons_init(button_handler) != 0) {
    bdfa:	4882      	ldr	r0, [pc, #520]	; (c004 <main+0x2f0>)
	display_state = LEDS_LTE_CONNECTED;
    bdfc:	801a      	strh	r2, [r3, #0]
	if (dk_buttons_init(button_handler) != 0) {
    bdfe:	f016 fc71 	bl	226e4 <dk_buttons_init>
    be02:	b148      	cbz	r0, be18 <main+0x104>
		LOG_ERR("Failed to initialize the buttons library");
    be04:	4b80      	ldr	r3, [pc, #512]	; (c008 <main+0x2f4>)
    be06:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    be0a:	e9c7 4304 	strd	r4, r3, [r7, #16]
    be0e:	4872      	ldr	r0, [pc, #456]	; (bfd8 <main+0x2c4>)
    be10:	f107 0210 	add.w	r2, r7, #16
    be14:	f022 ff94 	bl	2ed40 <z_log_msg_static_create.constprop.0>
	err = client_init(&client);
    be18:	487c      	ldr	r0, [pc, #496]	; (c00c <main+0x2f8>)
    be1a:	f7ff fe05 	bl	ba28 <client_init>
	if (err) {
    be1e:	b178      	cbz	r0, be40 <main+0x12c>
		LOG_ERR("Failed to initialize MQTT client: %d", err);
    be20:	466c      	mov	r4, sp
    be22:	b088      	sub	sp, #32
    be24:	466a      	mov	r2, sp
    be26:	4b7a      	ldr	r3, [pc, #488]	; (c010 <main+0x2fc>)
		LOG_ERR("Error in fds_init: %d", err);
    be28:	e9c2 3005 	strd	r3, r0, [r2, #20]
    be2c:	2303      	movs	r3, #3
    be2e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    be32:	4869      	ldr	r0, [pc, #420]	; (bfd8 <main+0x2c4>)
    be34:	f842 3f10 	str.w	r3, [r2, #16]!
    be38:	f022 ff82 	bl	2ed40 <z_log_msg_static_create.constprop.0>
    be3c:	46a5      	mov	sp, r4
		return 0;
    be3e:	e7ac      	b.n	bd9a <main+0x86>
	k_work_init_delayable(&leds_update_work, leds_update);
    be40:	4974      	ldr	r1, [pc, #464]	; (c014 <main+0x300>)
    be42:	4875      	ldr	r0, [pc, #468]	; (c018 <main+0x304>)
    be44:	f01e f826 	bl	29e94 <k_work_init_delayable>
	k_work_schedule(&leds_update_work, LEDS_UPDATE_INTERVAL);
    be48:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    be4c:	2300      	movs	r3, #0
    be4e:	4872      	ldr	r0, [pc, #456]	; (c018 <main+0x304>)
    be50:	f01e f8c2 	bl	29fd8 <k_work_schedule>
	k_work_init_delayable(&periodic_transmit_work, transmit_aggregated_data);
    be54:	4971      	ldr	r1, [pc, #452]	; (c01c <main+0x308>)
    be56:	4872      	ldr	r0, [pc, #456]	; (c020 <main+0x30c>)
    be58:	f01e f81c 	bl	29e94 <k_work_init_delayable>
	k_work_schedule(&periodic_transmit_work, K_MSEC(10000));
    be5c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    be60:	2300      	movs	r3, #0
    be62:	486f      	ldr	r0, [pc, #444]	; (c020 <main+0x30c>)
    be64:	f01e f8b8 	bl	29fd8 <k_work_schedule>
	k_work_init_delayable(&periodic_publish_work, publish_aggregated_data);
    be68:	496e      	ldr	r1, [pc, #440]	; (c024 <main+0x310>)
    be6a:	486f      	ldr	r0, [pc, #444]	; (c028 <main+0x314>)
    be6c:	f01e f812 	bl	29e94 <k_work_init_delayable>
	k_work_schedule(&periodic_publish_work, K_MSEC(10000));
    be70:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    be74:	2300      	movs	r3, #0
    be76:	486c      	ldr	r0, [pc, #432]	; (c028 <main+0x314>)
    be78:	f01e f8ae 	bl	29fd8 <k_work_schedule>
	err = ble_init();		    //Initializes bluetooth (ble.c)
    be7c:	f000 fd80 	bl	c980 <ble_init>
	if (err) {
    be80:	4604      	mov	r4, r0
    be82:	2800      	cmp	r0, #0
    be84:	d03a      	beq.n	befc <main+0x1e8>
		LOG_ERR("Failed to initialize BLE: %d", err);
    be86:	466d      	mov	r5, sp
    be88:	b088      	sub	sp, #32
    be8a:	466a      	mov	r2, sp
    be8c:	4b67      	ldr	r3, [pc, #412]	; (c02c <main+0x318>)
    be8e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    be92:	e9c2 3005 	strd	r3, r0, [r2, #20]
    be96:	2303      	movs	r3, #3
    be98:	484f      	ldr	r0, [pc, #316]	; (bfd8 <main+0x2c4>)
    be9a:	f842 3f10 	str.w	r3, [r2, #16]!
    be9e:	f022 ff4f 	bl	2ed40 <z_log_msg_static_create.constprop.0>
    bea2:	46ad      	mov	sp, r5
		return 0;
    bea4:	e779      	b.n	bd9a <main+0x86>
	if (connect_attempt++ > 0) {
    bea6:	3401      	adds	r4, #1
    bea8:	d014      	beq.n	bed4 <main+0x1c0>
		LOG_INF("Reconnecting in %d seconds...",
    beaa:	466e      	mov	r6, sp
    beac:	b088      	sub	sp, #32
    beae:	466a      	mov	r2, sp
    beb0:	4b5f      	ldr	r3, [pc, #380]	; (c030 <main+0x31c>)
    beb2:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    beb6:	6153      	str	r3, [r2, #20]
    beb8:	233c      	movs	r3, #60	; 0x3c
    beba:	6193      	str	r3, [r2, #24]
    bebc:	2303      	movs	r3, #3
    bebe:	4846      	ldr	r0, [pc, #280]	; (bfd8 <main+0x2c4>)
    bec0:	f842 3f10 	str.w	r3, [r2, #16]!
    bec4:	f022 ff3c 	bl	2ed40 <z_log_msg_static_create.constprop.0>
    bec8:	46b5      	mov	sp, r6
	return z_impl_k_sleep(timeout);
    beca:	f44f 10f0 	mov.w	r0, #1966080	; 0x1e0000
    bece:	2100      	movs	r1, #0
    bed0:	f01f fa3c 	bl	2b34c <z_impl_k_sleep>
	err = mqtt_connect(&client);
    bed4:	484d      	ldr	r0, [pc, #308]	; (c00c <main+0x2f8>)
    bed6:	f027 fdc2 	bl	33a5e <mqtt_connect>
	if (err) {
    beda:	b188      	cbz	r0, bf00 <main+0x1ec>
		LOG_ERR("Error in mqtt_connect: %d", err);
    bedc:	466e      	mov	r6, sp
    bede:	b088      	sub	sp, #32
    bee0:	466a      	mov	r2, sp
    bee2:	4b54      	ldr	r3, [pc, #336]	; (c034 <main+0x320>)
		LOG_ERR("Could not disconnect MQTT client: %d", err);
    bee4:	e9c2 3005 	strd	r3, r0, [r2, #20]
    bee8:	2303      	movs	r3, #3
    beea:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    beee:	483a      	ldr	r0, [pc, #232]	; (bfd8 <main+0x2c4>)
    bef0:	f842 3f10 	str.w	r3, [r2, #16]!
    bef4:	f022 ff24 	bl	2ed40 <z_log_msg_static_create.constprop.0>
    bef8:	46b5      	mov	sp, r6
    befa:	e7d4      	b.n	bea6 <main+0x192>
	err = fds_init(&client,&fds);
    befc:	4d4e      	ldr	r5, [pc, #312]	; (c038 <main+0x324>)
    befe:	e7e9      	b.n	bed4 <main+0x1c0>
    bf00:	4629      	mov	r1, r5
    bf02:	4842      	ldr	r0, [pc, #264]	; (c00c <main+0x2f8>)
    bf04:	f022 ff10 	bl	2ed28 <fds_init>
	if (err) {
    bf08:	bb88      	cbnz	r0, bf6e <main+0x25a>
		err = poll(&fds, 1, mqtt_keepalive_time_left(&client));
    bf0a:	4e40      	ldr	r6, [pc, #256]	; (c00c <main+0x2f8>)
    bf0c:	4630      	mov	r0, r6
    bf0e:	f027 feef 	bl	33cf0 <mqtt_keepalive_time_left>
    bf12:	4602      	mov	r2, r0
		union { uintptr_t x; int val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_ZSOCK_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_poll(fds, nfds, timeout);
    bf14:	2101      	movs	r1, #1
    bf16:	4628      	mov	r0, r5
    bf18:	f023 ffb3 	bl	2fe82 <z_impl_zsock_poll>
		if (err < 0) {
    bf1c:	2800      	cmp	r0, #0
    bf1e:	da2b      	bge.n	bf78 <main+0x264>
			LOG_ERR("Error in poll(): %d", errno);
    bf20:	f024 ff04 	bl	30d2c <__errno>
    bf24:	466e      	mov	r6, sp
    bf26:	b088      	sub	sp, #32
    bf28:	6803      	ldr	r3, [r0, #0]
    bf2a:	466a      	mov	r2, sp
    bf2c:	4943      	ldr	r1, [pc, #268]	; (c03c <main+0x328>)
    bf2e:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_ERR("Error in mqtt_live: %d", err);
    bf32:	2303      	movs	r3, #3
    bf34:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    bf38:	4827      	ldr	r0, [pc, #156]	; (bfd8 <main+0x2c4>)
    bf3a:	f842 3f10 	str.w	r3, [r2, #16]!
    bf3e:	f022 feff 	bl	2ed40 <z_log_msg_static_create.constprop.0>
    bf42:	46b5      	mov	sp, r6
	LOG_INF("Disconnecting MQTT client");
    bf44:	466e      	mov	r6, sp
    bf46:	4b3e      	ldr	r3, [pc, #248]	; (c040 <main+0x32c>)
    bf48:	4823      	ldr	r0, [pc, #140]	; (bfd8 <main+0x2c4>)
    bf4a:	617b      	str	r3, [r7, #20]
    bf4c:	2302      	movs	r3, #2
    bf4e:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    bf52:	613b      	str	r3, [r7, #16]
    bf54:	f107 0210 	add.w	r2, r7, #16
    bf58:	f022 fef2 	bl	2ed40 <z_log_msg_static_create.constprop.0>
	err = mqtt_disconnect(&client);
    bf5c:	482b      	ldr	r0, [pc, #172]	; (c00c <main+0x2f8>)
    bf5e:	f027 fe2a 	bl	33bb6 <mqtt_disconnect>
	if (err) {
    bf62:	2800      	cmp	r0, #0
    bf64:	d09f      	beq.n	bea6 <main+0x192>
		LOG_ERR("Could not disconnect MQTT client: %d", err);
    bf66:	b088      	sub	sp, #32
    bf68:	466a      	mov	r2, sp
    bf6a:	4b36      	ldr	r3, [pc, #216]	; (c044 <main+0x330>)
    bf6c:	e7ba      	b.n	bee4 <main+0x1d0>
		LOG_ERR("Error in fds_init: %d", err);
    bf6e:	466c      	mov	r4, sp
    bf70:	b088      	sub	sp, #32
    bf72:	466a      	mov	r2, sp
    bf74:	4b34      	ldr	r3, [pc, #208]	; (c048 <main+0x334>)
    bf76:	e757      	b.n	be28 <main+0x114>
		err = mqtt_live(&client);
    bf78:	4630      	mov	r0, r6
    bf7a:	f027 fe94 	bl	33ca6 <mqtt_live>
		if ((err != 0) && (err != -EAGAIN)) {
    bf7e:	b148      	cbz	r0, bf94 <main+0x280>
    bf80:	f110 0f0b 	cmn.w	r0, #11
    bf84:	d006      	beq.n	bf94 <main+0x280>
			LOG_ERR("Error in mqtt_live: %d", err);
    bf86:	466e      	mov	r6, sp
    bf88:	b088      	sub	sp, #32
    bf8a:	466a      	mov	r2, sp
    bf8c:	4b2f      	ldr	r3, [pc, #188]	; (c04c <main+0x338>)
    bf8e:	e9c2 3005 	strd	r3, r0, [r2, #20]
    bf92:	e7ce      	b.n	bf32 <main+0x21e>
		if ((fds.revents & POLLIN) == POLLIN) {
    bf94:	88eb      	ldrh	r3, [r5, #6]
    bf96:	07d9      	lsls	r1, r3, #31
    bf98:	d508      	bpl.n	bfac <main+0x298>
			err = mqtt_input(&client);
    bf9a:	4630      	mov	r0, r6
    bf9c:	f027 febf 	bl	33d1e <mqtt_input>
			if (err != 0) {
    bfa0:	b120      	cbz	r0, bfac <main+0x298>
				LOG_ERR("Error in mqtt_input: %d", err);
    bfa2:	466e      	mov	r6, sp
    bfa4:	b088      	sub	sp, #32
    bfa6:	466a      	mov	r2, sp
    bfa8:	4b29      	ldr	r3, [pc, #164]	; (c050 <main+0x33c>)
    bfaa:	e7f0      	b.n	bf8e <main+0x27a>
		if ((fds.revents & POLLERR) == POLLERR) {
    bfac:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
    bfb0:	071a      	lsls	r2, r3, #28
    bfb2:	d50b      	bpl.n	bfcc <main+0x2b8>
			LOG_ERR("POLLERR");
    bfb4:	4b27      	ldr	r3, [pc, #156]	; (c054 <main+0x340>)
			LOG_ERR("POLLNVAL");
    bfb6:	617b      	str	r3, [r7, #20]
    bfb8:	2302      	movs	r3, #2
    bfba:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    bfbe:	4806      	ldr	r0, [pc, #24]	; (bfd8 <main+0x2c4>)
    bfc0:	613b      	str	r3, [r7, #16]
    bfc2:	f107 0210 	add.w	r2, r7, #16
    bfc6:	f022 febb 	bl	2ed40 <z_log_msg_static_create.constprop.0>
    bfca:	e7bb      	b.n	bf44 <main+0x230>
		if ((fds.revents & POLLNVAL) == POLLNVAL) {
    bfcc:	069b      	lsls	r3, r3, #26
    bfce:	d59d      	bpl.n	bf0c <main+0x1f8>
			LOG_ERR("POLLNVAL");
    bfd0:	4b21      	ldr	r3, [pc, #132]	; (c058 <main+0x344>)
    bfd2:	e7f0      	b.n	bfb6 <main+0x2a2>
    bfd4:	00038f6a 	.word	0x00038f6a
    bfd8:	00037988 	.word	0x00037988
    bfdc:	00038f8c 	.word	0x00038f8c
    bfe0:	00038fb1 	.word	0x00038fb1
    bfe4:	00038fcc 	.word	0x00038fcc
    bfe8:	0003905a 	.word	0x0003905a
    bfec:	00038ffe 	.word	0x00038ffe
    bff0:	0000bc71 	.word	0x0000bc71
    bff4:	00039018 	.word	0x00039018
    bff8:	2000cf40 	.word	0x2000cf40
    bffc:	00039041 	.word	0x00039041
    c000:	2000ef68 	.word	0x2000ef68
    c004:	0002ed47 	.word	0x0002ed47
    c008:	00039078 	.word	0x00039078
    c00c:	2000e1d8 	.word	0x2000e1d8
    c010:	000390a1 	.word	0x000390a1
    c014:	0000bbd5 	.word	0x0000bbd5
    c018:	2000d218 	.word	0x2000d218
    c01c:	0000ccd1 	.word	0x0000ccd1
    c020:	2000d1e8 	.word	0x2000d1e8
    c024:	0000cc55 	.word	0x0000cc55
    c028:	2000d1b8 	.word	0x2000d1b8
    c02c:	000390c6 	.word	0x000390c6
    c030:	000390e3 	.word	0x000390e3
    c034:	00039101 	.word	0x00039101
    c038:	2000e1d0 	.word	0x2000e1d0
    c03c:	00039131 	.word	0x00039131
    c040:	00039185 	.word	0x00039185
    c044:	0003919f 	.word	0x0003919f
    c048:	0003911b 	.word	0x0003911b
    c04c:	00039145 	.word	0x00039145
    c050:	0003915c 	.word	0x0003915c
    c054:	00039174 	.word	0x00039174
    c058:	0003917c 	.word	0x0003917c

0000c05c <discovery_error>:
}

static void discovery_error(struct bt_conn *conn,
			    int err,
			    void *context)
{
    c05c:	b580      	push	{r7, lr}
    c05e:	af00      	add	r7, sp, #0
	LOG_WRN("Error while discovering GATT database: (%d)", err);
    c060:	b088      	sub	sp, #32
    c062:	466a      	mov	r2, sp
    c064:	4b06      	ldr	r3, [pc, #24]	; (c080 <discovery_error+0x24>)
    c066:	4807      	ldr	r0, [pc, #28]	; (c084 <discovery_error+0x28>)
    c068:	e9c2 3105 	strd	r3, r1, [r2, #20]
    c06c:	2303      	movs	r3, #3
    c06e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    c072:	f842 3f10 	str.w	r3, [r2, #16]!
    c076:	2300      	movs	r3, #0
    c078:	f022 fe70 	bl	2ed5c <z_log_msg_static_create>
}
    c07c:	46bd      	mov	sp, r7
    c07e:	bd80      	pop	{r7, pc}
    c080:	000391cf 	.word	0x000391cf
    c084:	00037988 	.word	0x00037988

0000c088 <discovery_service_not_found>:
{
    c088:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_ERR("Service not found");
    c08a:	4b07      	ldr	r3, [pc, #28]	; (c0a8 <discovery_service_not_found+0x20>)
    c08c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    c090:	9305      	str	r3, [sp, #20]
    c092:	2302      	movs	r3, #2
    c094:	4805      	ldr	r0, [pc, #20]	; (c0ac <discovery_service_not_found+0x24>)
    c096:	9304      	str	r3, [sp, #16]
    c098:	aa04      	add	r2, sp, #16
    c09a:	2300      	movs	r3, #0
    c09c:	f022 fe5e 	bl	2ed5c <z_log_msg_static_create>
}
    c0a0:	b007      	add	sp, #28
    c0a2:	f85d fb04 	ldr.w	pc, [sp], #4
    c0a6:	bf00      	nop
    c0a8:	000391fb 	.word	0x000391fb
    c0ac:	00037988 	.word	0x00037988

0000c0b0 <scan_connecting_error>:

	LOG_INF("Device found: %s", addr);
}

void scan_connecting_error(struct bt_scan_device_info *device_info)
{
    c0b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_ERR("Connection to peer failed!");
    c0b2:	4b07      	ldr	r3, [pc, #28]	; (c0d0 <scan_connecting_error+0x20>)
    c0b4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    c0b8:	9305      	str	r3, [sp, #20]
    c0ba:	2302      	movs	r3, #2
    c0bc:	4805      	ldr	r0, [pc, #20]	; (c0d4 <scan_connecting_error+0x24>)
    c0be:	9304      	str	r3, [sp, #16]
    c0c0:	aa04      	add	r2, sp, #16
    c0c2:	2300      	movs	r3, #0
    c0c4:	f022 fe4a 	bl	2ed5c <z_log_msg_static_create>
}
    c0c8:	b007      	add	sp, #28
    c0ca:	f85d fb04 	ldr.w	pc, [sp], #4
    c0ce:	bf00      	nop
    c0d0:	0003920d 	.word	0x0003920d
    c0d4:	00037988 	.word	0x00037988

0000c0d8 <discovery_completed>:
{
    c0d8:	b530      	push	{r4, r5, lr}
    c0da:	4604      	mov	r4, r0
    c0dc:	b087      	sub	sp, #28
    c0de:	460d      	mov	r5, r1
    LOG_INF("Service discovery completed");
    c0e0:	4b0b      	ldr	r3, [pc, #44]	; (c110 <discovery_completed+0x38>)
    c0e2:	aa04      	add	r2, sp, #16
    c0e4:	9305      	str	r3, [sp, #20]
    c0e6:	2302      	movs	r3, #2
    c0e8:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    c0ec:	9304      	str	r3, [sp, #16]
    c0ee:	4809      	ldr	r0, [pc, #36]	; (c114 <discovery_completed+0x3c>)
    c0f0:	2300      	movs	r3, #0
    c0f2:	f022 fe33 	bl	2ed5c <z_log_msg_static_create>
	bt_nus_handles_assign(dm, nus);
    c0f6:	4629      	mov	r1, r5
    c0f8:	4620      	mov	r0, r4
    c0fa:	f005 ff13 	bl	11f24 <bt_nus_handles_assign>
	bt_nus_subscribe_receive(nus);
    c0fe:	4628      	mov	r0, r5
    c100:	f005 ffd4 	bl	120ac <bt_nus_subscribe_receive>
    bt_gatt_dm_data_release(dm);
    c104:	4620      	mov	r0, r4
}
    c106:	b007      	add	sp, #28
    c108:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    bt_gatt_dm_data_release(dm);
    c10c:	f024 b8d5 	b.w	302ba <bt_gatt_dm_data_release>
    c110:	00039228 	.word	0x00039228
    c114:	00037988 	.word	0x00037988

0000c118 <exchange_func.part.0>:
static void exchange_func(struct bt_conn *conn, uint8_t err, struct bt_gatt_exchange_params *params)
    c118:	b580      	push	{r7, lr}
    c11a:	af00      	add	r7, sp, #0
		LOG_WRN("MTU exchange failed (err %" PRIu8 ")", err);
    c11c:	b088      	sub	sp, #32
    c11e:	466a      	mov	r2, sp
    c120:	4b06      	ldr	r3, [pc, #24]	; (c13c <exchange_func.part.0+0x24>)
    c122:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    c126:	e9c2 3005 	strd	r3, r0, [r2, #20]
    c12a:	2303      	movs	r3, #3
    c12c:	4804      	ldr	r0, [pc, #16]	; (c140 <exchange_func.part.0+0x28>)
    c12e:	f842 3f10 	str.w	r3, [r2, #16]!
    c132:	2300      	movs	r3, #0
    c134:	f022 fe12 	bl	2ed5c <z_log_msg_static_create>
}
    c138:	46bd      	mov	sp, r7
    c13a:	bd80      	pop	{r7, pc}
    c13c:	00039244 	.word	0x00039244
    c140:	00037988 	.word	0x00037988

0000c144 <exchange_func>:
{
    c144:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (!err) {
    c146:	460b      	mov	r3, r1
    c148:	b961      	cbnz	r1, c164 <exchange_func+0x20>
		LOG_INF("exchange_func succesfully executed.");
    c14a:	4a09      	ldr	r2, [pc, #36]	; (c170 <exchange_func+0x2c>)
    c14c:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    c150:	9205      	str	r2, [sp, #20]
    c152:	2202      	movs	r2, #2
    c154:	4807      	ldr	r0, [pc, #28]	; (c174 <exchange_func+0x30>)
    c156:	9204      	str	r2, [sp, #16]
    c158:	aa04      	add	r2, sp, #16
    c15a:	f022 fdff 	bl	2ed5c <z_log_msg_static_create>
}
    c15e:	b007      	add	sp, #28
    c160:	f85d fb04 	ldr.w	pc, [sp], #4
    c164:	4608      	mov	r0, r1
    c166:	b007      	add	sp, #28
    c168:	f85d eb04 	ldr.w	lr, [sp], #4
    c16c:	f7ff bfd4 	b.w	c118 <exchange_func.part.0>
    c170:	00039263 	.word	0x00039263
    c174:	00037988 	.word	0x00037988

0000c178 <gatt_discover.part.0>:
static void gatt_discover(struct bt_conn *conn)
    c178:	b5f0      	push	{r4, r5, r6, r7, lr}
    c17a:	b087      	sub	sp, #28
    c17c:	af00      	add	r7, sp, #0
			       BT_UUID_NUS_SERVICE,
    c17e:	1d3a      	adds	r2, r7, #4
static void gatt_discover(struct bt_conn *conn)
    c180:	4605      	mov	r5, r0
    c182:	4616      	mov	r6, r2
			       BT_UUID_NUS_SERVICE,
    c184:	4b13      	ldr	r3, [pc, #76]	; (c1d4 <gatt_discover.part.0+0x5c>)
    c186:	f103 0c10 	add.w	ip, r3, #16
    c18a:	4614      	mov	r4, r2
    c18c:	6818      	ldr	r0, [r3, #0]
    c18e:	6859      	ldr	r1, [r3, #4]
    c190:	3308      	adds	r3, #8
    c192:	c403      	stmia	r4!, {r0, r1}
    c194:	4563      	cmp	r3, ip
    c196:	4622      	mov	r2, r4
    c198:	d1f7      	bne.n	c18a <gatt_discover.part.0+0x12>
    c19a:	781b      	ldrb	r3, [r3, #0]
	err = bt_gatt_dm_start(conn,
    c19c:	4631      	mov	r1, r6
			       BT_UUID_NUS_SERVICE,
    c19e:	7023      	strb	r3, [r4, #0]
	err = bt_gatt_dm_start(conn,
    c1a0:	4628      	mov	r0, r5
    c1a2:	4b0d      	ldr	r3, [pc, #52]	; (c1d8 <gatt_discover.part.0+0x60>)
    c1a4:	4a0d      	ldr	r2, [pc, #52]	; (c1dc <gatt_discover.part.0+0x64>)
    c1a6:	f005 fc11 	bl	119cc <bt_gatt_dm_start>
	if (err) {
    c1aa:	b178      	cbz	r0, c1cc <gatt_discover.part.0+0x54>
		LOG_ERR("could not start the discovery procedure, error "
    c1ac:	466c      	mov	r4, sp
    c1ae:	b088      	sub	sp, #32
    c1b0:	466a      	mov	r2, sp
    c1b2:	4b0b      	ldr	r3, [pc, #44]	; (c1e0 <gatt_discover.part.0+0x68>)
    c1b4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c1b8:	e9c2 3005 	strd	r3, r0, [r2, #20]
    c1bc:	2303      	movs	r3, #3
    c1be:	4809      	ldr	r0, [pc, #36]	; (c1e4 <gatt_discover.part.0+0x6c>)
    c1c0:	f842 3f10 	str.w	r3, [r2, #16]!
    c1c4:	2300      	movs	r3, #0
    c1c6:	f022 fdc9 	bl	2ed5c <z_log_msg_static_create>
    c1ca:	46a5      	mov	sp, r4
}
    c1cc:	371c      	adds	r7, #28
    c1ce:	46bd      	mov	sp, r7
    c1d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c1d2:	bf00      	nop
    c1d4:	00037bbc 	.word	0x00037bbc
    c1d8:	2000e240 	.word	0x2000e240
    c1dc:	2000c7e8 	.word	0x2000c7e8
    c1e0:	00039287 	.word	0x00039287
    c1e4:	00037988 	.word	0x00037988

0000c1e8 <gatt_discover>:
	if (conn != default_conn) {
    c1e8:	4b03      	ldr	r3, [pc, #12]	; (c1f8 <gatt_discover+0x10>)
    c1ea:	681b      	ldr	r3, [r3, #0]
    c1ec:	4283      	cmp	r3, r0
    c1ee:	d101      	bne.n	c1f4 <gatt_discover+0xc>
    c1f0:	f7ff bfc2 	b.w	c178 <gatt_discover.part.0>
}
    c1f4:	4770      	bx	lr
    c1f6:	bf00      	nop
    c1f8:	2000e288 	.word	0x2000e288

0000c1fc <ble_data_received>:
	.pairing_failed = pairing_failed
};


static uint8_t ble_data_received(struct bt_nus_client *nus, const uint8_t *data, uint16_t len)
{
    c1fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c200:	b0b1      	sub	sp, #196	; 0xc4
    c202:	4688      	mov	r8, r1
    c204:	af16      	add	r7, sp, #88	; 0x58
    c206:	4614      	mov	r4, r2
    ARG_UNUSED(nus);

    LOG_INF("Data received via NUS...");
    c208:	466e      	mov	r6, sp
    c20a:	f04f 0902 	mov.w	r9, #2
    c20e:	4b2d      	ldr	r3, [pc, #180]	; (c2c4 <ble_data_received+0xc8>)
    c210:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    c214:	617b      	str	r3, [r7, #20]
    c216:	482c      	ldr	r0, [pc, #176]	; (c2c8 <ble_data_received+0xcc>)
    c218:	2300      	movs	r3, #0
    c21a:	f8c7 9010 	str.w	r9, [r7, #16]
    c21e:	f107 0210 	add.w	r2, r7, #16
    c222:	f022 fd9b 	bl	2ed5c <z_log_msg_static_create>
    if (len > 0) {
    c226:	2c00      	cmp	r4, #0
    c228:	d047      	beq.n	c2ba <ble_data_received+0xbe>
        // Log the received data as a hex string
        LOG_HEXDUMP_INF(data, len, "Received data:");
    c22a:	b088      	sub	sp, #32
    c22c:	aa16      	add	r2, sp, #88	; 0x58
    c22e:	4b27      	ldr	r3, [pc, #156]	; (c2cc <ble_data_received+0xd0>)
    c230:	0521      	lsls	r1, r4, #20
    c232:	6153      	str	r3, [r2, #20]
    c234:	4b26      	ldr	r3, [pc, #152]	; (c2d0 <ble_data_received+0xd4>)
    c236:	4824      	ldr	r0, [pc, #144]	; (c2c8 <ble_data_received+0xcc>)
    c238:	6193      	str	r3, [r2, #24]
    c23a:	f44f 7300 	mov.w	r3, #512	; 0x200
    c23e:	8393      	strh	r3, [r2, #28]
    c240:	4b24      	ldr	r3, [pc, #144]	; (c2d4 <ble_data_received+0xd8>)
    c242:	f441 51e6 	orr.w	r1, r1, #7360	; 0x1cc0
    c246:	f842 3f10 	str.w	r3, [r2, #16]!
    c24a:	4643      	mov	r3, r8
    c24c:	f022 fd86 	bl	2ed5c <z_log_msg_static_create>
    c250:	46b5      	mov	sp, r6
        struct uplink_data_packet data_packet;

        // Your logic for determining packet type and source can be added here
        // For now, using the default values:
        LOG_INF("Received data from ESP32");
    c252:	4b21      	ldr	r3, [pc, #132]	; (c2d8 <ble_data_received+0xdc>)
    c254:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    c258:	e9c7 9304 	strd	r9, r3, [r7, #16]
    c25c:	481a      	ldr	r0, [pc, #104]	; (c2c8 <ble_data_received+0xcc>)
    c25e:	2300      	movs	r3, #0
    c260:	f107 0210 	add.w	r2, r7, #16
    c264:	f022 fd7a 	bl	2ed5c <z_log_msg_static_create>
        data_packet.type = uplink_TEXT;
        data_packet.source = SOURCE_ESP32;

        // Setting length and copying data
        data_packet.length = MIN(len, ENTRY_MAX_SIZE);
    c268:	2c64      	cmp	r4, #100	; 0x64
    c26a:	4622      	mov	r2, r4
        data_packet.type = uplink_TEXT;
    c26c:	f04f 0900 	mov.w	r9, #0
        data_packet.length = MIN(len, ENTRY_MAX_SIZE);
    c270:	bf28      	it	cs
    c272:	2264      	movcs	r2, #100	; 0x64
        memcpy(data_packet.data, data, data_packet.length);
    c274:	4641      	mov	r1, r8
        data_packet.length = MIN(len, ENTRY_MAX_SIZE);
    c276:	703a      	strb	r2, [r7, #0]
        data_packet.type = uplink_TEXT;
    c278:	f887 9001 	strb.w	r9, [r7, #1]
        data_packet.source = SOURCE_ESP32;
    c27c:	f887 9002 	strb.w	r9, [r7, #2]
        memcpy(data_packet.data, data, data_packet.length);
    c280:	1cf8      	adds	r0, r7, #3
    c282:	f02a f951 	bl	36528 <memcpy>

        // Add the packet to the aggregator
        int err = uplink_aggregator_put(data_packet);
    c286:	2257      	movs	r2, #87	; 0x57
    c288:	f107 0110 	add.w	r1, r7, #16
    c28c:	4668      	mov	r0, sp
    c28e:	f02a f94b 	bl	36528 <memcpy>
    c292:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
    c296:	f000 fd6b 	bl	cd70 <uplink_aggregator_put>
        if (err) {
    c29a:	b170      	cbz	r0, c2ba <ble_data_received+0xbe>
            LOG_ERR("Failed to put data into aggregator, err %d", err);
    c29c:	b088      	sub	sp, #32
    c29e:	aa16      	add	r2, sp, #88	; 0x58
    c2a0:	4b0e      	ldr	r3, [pc, #56]	; (c2dc <ble_data_received+0xe0>)
    c2a2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c2a6:	e9c2 3005 	strd	r3, r0, [r2, #20]
    c2aa:	2303      	movs	r3, #3
    c2ac:	4806      	ldr	r0, [pc, #24]	; (c2c8 <ble_data_received+0xcc>)
    c2ae:	f842 3f10 	str.w	r3, [r2, #16]!
    c2b2:	464b      	mov	r3, r9
    c2b4:	f022 fd52 	bl	2ed5c <z_log_msg_static_create>
    c2b8:	46b5      	mov	sp, r6
    } else {
        LOG_DBG("Notification with 0 length");
    }

    return BT_GATT_ITER_CONTINUE;
}
    c2ba:	2001      	movs	r0, #1
    c2bc:	376c      	adds	r7, #108	; 0x6c
    c2be:	46bd      	mov	sp, r7
    c2c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    c2c4:	000392bf 	.word	0x000392bf
    c2c8:	00037988 	.word	0x00037988
    c2cc:	0003f578 	.word	0x0003f578
    c2d0:	000392d8 	.word	0x000392d8
    c2d4:	01000003 	.word	0x01000003
    c2d8:	000392e7 	.word	0x000392e7
    c2dc:	00039300 	.word	0x00039300

0000c2e0 <ble_data_sent>:
{
    c2e0:	b5b0      	push	{r4, r5, r7, lr}
    c2e2:	b086      	sub	sp, #24
    c2e4:	460c      	mov	r4, r1
    c2e6:	af00      	add	r7, sp, #0
	LOG_INF("Data sent via NUS");
    c2e8:	466d      	mov	r5, sp
    c2ea:	4b11      	ldr	r3, [pc, #68]	; (c330 <ble_data_sent+0x50>)
    c2ec:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    c2f0:	617b      	str	r3, [r7, #20]
    c2f2:	2302      	movs	r3, #2
    c2f4:	480f      	ldr	r0, [pc, #60]	; (c334 <ble_data_sent+0x54>)
    c2f6:	613b      	str	r3, [r7, #16]
    c2f8:	f107 0210 	add.w	r2, r7, #16
    c2fc:	2300      	movs	r3, #0
    c2fe:	f022 fd2d 	bl	2ed5c <z_log_msg_static_create>
	z_impl_k_sem_give(sem);
    c302:	480d      	ldr	r0, [pc, #52]	; (c338 <ble_data_sent+0x58>)
    c304:	f01d f9d0 	bl	296a8 <z_impl_k_sem_give>
	if (err) {
    c308:	b174      	cbz	r4, c328 <ble_data_sent+0x48>
		LOG_WRN("ATT error code: 0x%02X", err);
    c30a:	b088      	sub	sp, #32
    c30c:	466a      	mov	r2, sp
    c30e:	4b0b      	ldr	r3, [pc, #44]	; (c33c <ble_data_sent+0x5c>)
    c310:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    c314:	e9c2 3405 	strd	r3, r4, [r2, #20]
    c318:	2303      	movs	r3, #3
    c31a:	4806      	ldr	r0, [pc, #24]	; (c334 <ble_data_sent+0x54>)
    c31c:	f842 3f10 	str.w	r3, [r2, #16]!
    c320:	2300      	movs	r3, #0
    c322:	f022 fd1b 	bl	2ed5c <z_log_msg_static_create>
    c326:	46ad      	mov	sp, r5
}
    c328:	3718      	adds	r7, #24
    c32a:	46bd      	mov	sp, r7
    c32c:	bdb0      	pop	{r4, r5, r7, pc}
    c32e:	bf00      	nop
    c330:	0003932b 	.word	0x0003932b
    c334:	00037988 	.word	0x00037988
    c338:	2000cf58 	.word	0x2000cf58
    c33c:	0003933d 	.word	0x0003933d

0000c340 <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    c340:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    c342:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    c344:	b08a      	sub	sp, #40	; 0x28
    c346:	4604      	mov	r4, r0
    c348:	460e      	mov	r6, r1
    c34a:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    c34c:	2b03      	cmp	r3, #3
    c34e:	d820      	bhi.n	c392 <bt_addr_le_to_str.constprop.0.isra.0+0x52>
    c350:	e8df f003 	tbb	[pc, r3]
    c354:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    c358:	4911      	ldr	r1, [pc, #68]	; (c3a0 <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    c35a:	4628      	mov	r0, r5
    c35c:	f02a fa70 	bl	36840 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    c360:	9505      	str	r5, [sp, #20]
    c362:	7863      	ldrb	r3, [r4, #1]
    c364:	211e      	movs	r1, #30
    c366:	9304      	str	r3, [sp, #16]
    c368:	78a3      	ldrb	r3, [r4, #2]
    c36a:	4630      	mov	r0, r6
    c36c:	9303      	str	r3, [sp, #12]
    c36e:	78e3      	ldrb	r3, [r4, #3]
    c370:	4a0c      	ldr	r2, [pc, #48]	; (c3a4 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
    c372:	9302      	str	r3, [sp, #8]
    c374:	7923      	ldrb	r3, [r4, #4]
    c376:	9301      	str	r3, [sp, #4]
    c378:	7963      	ldrb	r3, [r4, #5]
    c37a:	9300      	str	r3, [sp, #0]
    c37c:	79a3      	ldrb	r3, [r4, #6]
    c37e:	f022 fe51 	bl	2f024 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    c382:	b00a      	add	sp, #40	; 0x28
    c384:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    c386:	4908      	ldr	r1, [pc, #32]	; (c3a8 <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
    c388:	e7e7      	b.n	c35a <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
    c38a:	4908      	ldr	r1, [pc, #32]	; (c3ac <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
    c38c:	e7e5      	b.n	c35a <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
    c38e:	4908      	ldr	r1, [pc, #32]	; (c3b0 <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
    c390:	e7e3      	b.n	c35a <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    c392:	210a      	movs	r1, #10
    c394:	4628      	mov	r0, r5
    c396:	4a07      	ldr	r2, [pc, #28]	; (c3b4 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
    c398:	f022 fe44 	bl	2f024 <snprintk>
		break;
    c39c:	e7e0      	b.n	c360 <bt_addr_le_to_str.constprop.0.isra.0+0x20>
    c39e:	bf00      	nop
    c3a0:	00039354 	.word	0x00039354
    c3a4:	00039376 	.word	0x00039376
    c3a8:	0003935b 	.word	0x0003935b
    c3ac:	00039362 	.word	0x00039362
    c3b0:	0003936c 	.word	0x0003936c
    c3b4:	0003d859 	.word	0x0003d859

0000c3b8 <scan_filter_match>:
{
    c3b8:	b580      	push	{r7, lr}
    c3ba:	b088      	sub	sp, #32
	bt_addr_le_to_str(device_info->recv_info->addr, addr, sizeof(addr));
    c3bc:	6803      	ldr	r3, [r0, #0]
{
    c3be:	af00      	add	r7, sp, #0
	bt_addr_le_to_str(device_info->recv_info->addr, addr, sizeof(addr));
    c3c0:	4639      	mov	r1, r7
    c3c2:	6818      	ldr	r0, [r3, #0]
    c3c4:	f7ff ffbc 	bl	c340 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Device found: %s", addr);
    c3c8:	b088      	sub	sp, #32
    c3ca:	466a      	mov	r2, sp
    c3cc:	4b08      	ldr	r3, [pc, #32]	; (c3f0 <scan_filter_match+0x38>)
    c3ce:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
    c3d2:	e9c2 3705 	strd	r3, r7, [r2, #20]
    c3d6:	f44f 7300 	mov.w	r3, #512	; 0x200
    c3da:	8393      	strh	r3, [r2, #28]
    c3dc:	4b05      	ldr	r3, [pc, #20]	; (c3f4 <scan_filter_match+0x3c>)
    c3de:	4806      	ldr	r0, [pc, #24]	; (c3f8 <scan_filter_match+0x40>)
    c3e0:	f842 3f10 	str.w	r3, [r2, #16]!
    c3e4:	2300      	movs	r3, #0
    c3e6:	f022 fcb9 	bl	2ed5c <z_log_msg_static_create>
}
    c3ea:	3720      	adds	r7, #32
    c3ec:	46bd      	mov	sp, r7
    c3ee:	bd80      	pop	{r7, pc}
    c3f0:	00039399 	.word	0x00039399
    c3f4:	01000003 	.word	0x01000003
    c3f8:	00037988 	.word	0x00037988

0000c3fc <pairing_failed>:
{
    c3fc:	b590      	push	{r4, r7, lr}
    c3fe:	b089      	sub	sp, #36	; 0x24
    c400:	af00      	add	r7, sp, #0
    c402:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    c404:	f025 f860 	bl	314c8 <bt_conn_get_dst>
    c408:	4639      	mov	r1, r7
    c40a:	f7ff ff99 	bl	c340 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_WRN("Pairing failed conn: %s, reason %d", addr, reason);
    c40e:	b08a      	sub	sp, #40	; 0x28
    c410:	466a      	mov	r2, sp
    c412:	4b09      	ldr	r3, [pc, #36]	; (c438 <pairing_failed+0x3c>)
    c414:	61d4      	str	r4, [r2, #28]
    c416:	e9c2 3705 	strd	r3, r7, [r2, #20]
    c41a:	f44f 7300 	mov.w	r3, #512	; 0x200
    c41e:	8413      	strh	r3, [r2, #32]
    c420:	4b06      	ldr	r3, [pc, #24]	; (c43c <pairing_failed+0x40>)
    c422:	f44f 5112 	mov.w	r1, #9344	; 0x2480
    c426:	f842 3f10 	str.w	r3, [r2, #16]!
    c42a:	4805      	ldr	r0, [pc, #20]	; (c440 <pairing_failed+0x44>)
    c42c:	2300      	movs	r3, #0
    c42e:	f022 fc95 	bl	2ed5c <z_log_msg_static_create>
}
    c432:	3724      	adds	r7, #36	; 0x24
    c434:	46bd      	mov	sp, r7
    c436:	bd90      	pop	{r4, r7, pc}
    c438:	000393aa 	.word	0x000393aa
    c43c:	01000004 	.word	0x01000004
    c440:	00037988 	.word	0x00037988

0000c444 <pairing_complete>:
{
    c444:	b590      	push	{r4, r7, lr}
    c446:	b089      	sub	sp, #36	; 0x24
    c448:	af00      	add	r7, sp, #0
    c44a:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    c44c:	f025 f83c 	bl	314c8 <bt_conn_get_dst>
    c450:	4639      	mov	r1, r7
    c452:	f7ff ff75 	bl	c340 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Pairing completed: %s, bonded: %d", addr, bonded);
    c456:	b08a      	sub	sp, #40	; 0x28
    c458:	466a      	mov	r2, sp
    c45a:	4b09      	ldr	r3, [pc, #36]	; (c480 <pairing_complete+0x3c>)
    c45c:	61d4      	str	r4, [r2, #28]
    c45e:	e9c2 3705 	strd	r3, r7, [r2, #20]
    c462:	f44f 7300 	mov.w	r3, #512	; 0x200
    c466:	8413      	strh	r3, [r2, #32]
    c468:	4b06      	ldr	r3, [pc, #24]	; (c484 <pairing_complete+0x40>)
    c46a:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    c46e:	f842 3f10 	str.w	r3, [r2, #16]!
    c472:	4805      	ldr	r0, [pc, #20]	; (c488 <pairing_complete+0x44>)
    c474:	2300      	movs	r3, #0
    c476:	f022 fc71 	bl	2ed5c <z_log_msg_static_create>
}
    c47a:	3724      	adds	r7, #36	; 0x24
    c47c:	46bd      	mov	sp, r7
    c47e:	bd90      	pop	{r4, r7, pc}
    c480:	000393cd 	.word	0x000393cd
    c484:	01000004 	.word	0x01000004
    c488:	00037988 	.word	0x00037988

0000c48c <auth_cancel>:
{
    c48c:	b580      	push	{r7, lr}
    c48e:	b088      	sub	sp, #32
    c490:	af00      	add	r7, sp, #0
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    c492:	f025 f819 	bl	314c8 <bt_conn_get_dst>
    c496:	4639      	mov	r1, r7
    c498:	f7ff ff52 	bl	c340 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Pairing cancelled: %s", addr);
    c49c:	b088      	sub	sp, #32
    c49e:	466a      	mov	r2, sp
    c4a0:	4b08      	ldr	r3, [pc, #32]	; (c4c4 <auth_cancel+0x38>)
    c4a2:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
    c4a6:	e9c2 3705 	strd	r3, r7, [r2, #20]
    c4aa:	f44f 7300 	mov.w	r3, #512	; 0x200
    c4ae:	8393      	strh	r3, [r2, #28]
    c4b0:	4b05      	ldr	r3, [pc, #20]	; (c4c8 <auth_cancel+0x3c>)
    c4b2:	4806      	ldr	r0, [pc, #24]	; (c4cc <auth_cancel+0x40>)
    c4b4:	f842 3f10 	str.w	r3, [r2, #16]!
    c4b8:	2300      	movs	r3, #0
    c4ba:	f022 fc4f 	bl	2ed5c <z_log_msg_static_create>
}
    c4be:	3720      	adds	r7, #32
    c4c0:	46bd      	mov	sp, r7
    c4c2:	bd80      	pop	{r7, pc}
    c4c4:	000393ef 	.word	0x000393ef
    c4c8:	01000003 	.word	0x01000003
    c4cc:	00037988 	.word	0x00037988

0000c4d0 <security_changed>:
{
    c4d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c4d4:	4614      	mov	r4, r2
    c4d6:	b088      	sub	sp, #32
    c4d8:	af00      	add	r7, sp, #0
    c4da:	460d      	mov	r5, r1
    c4dc:	4606      	mov	r6, r0
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    c4de:	f024 fff3 	bl	314c8 <bt_conn_get_dst>
    c4e2:	4639      	mov	r1, r7
    c4e4:	f7ff ff2c 	bl	c340 <bt_addr_le_to_str.constprop.0.isra.0>
		LOG_INF("Security changed: %s level %u", addr, level);
    c4e8:	46e8      	mov	r8, sp
	if (!err) {
    c4ea:	b9cc      	cbnz	r4, c520 <security_changed+0x50>
		LOG_INF("Security changed: %s level %u", addr, level);
    c4ec:	b08a      	sub	sp, #40	; 0x28
    c4ee:	466a      	mov	r2, sp
    c4f0:	4b14      	ldr	r3, [pc, #80]	; (c544 <security_changed+0x74>)
    c4f2:	61d5      	str	r5, [r2, #28]
    c4f4:	e9c2 3705 	strd	r3, r7, [r2, #20]
    c4f8:	f44f 7300 	mov.w	r3, #512	; 0x200
    c4fc:	8413      	strh	r3, [r2, #32]
    c4fe:	4b12      	ldr	r3, [pc, #72]	; (c548 <security_changed+0x78>)
    c500:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    c504:	f842 3f10 	str.w	r3, [r2, #16]!
    c508:	4623      	mov	r3, r4
		LOG_WRN("Security failed: %s level %u err %d", addr,
    c50a:	4810      	ldr	r0, [pc, #64]	; (c54c <security_changed+0x7c>)
    c50c:	f022 fc26 	bl	2ed5c <z_log_msg_static_create>
	gatt_discover(conn);
    c510:	4630      	mov	r0, r6
    c512:	46c5      	mov	sp, r8
    c514:	f7ff fe68 	bl	c1e8 <gatt_discover>
}
    c518:	3720      	adds	r7, #32
    c51a:	46bd      	mov	sp, r7
    c51c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_WRN("Security failed: %s level %u err %d", addr,
    c520:	b08a      	sub	sp, #40	; 0x28
    c522:	466a      	mov	r2, sp
    c524:	4b0a      	ldr	r3, [pc, #40]	; (c550 <security_changed+0x80>)
    c526:	e9c2 5407 	strd	r5, r4, [r2, #28]
    c52a:	e9c2 3705 	strd	r3, r7, [r2, #20]
    c52e:	f44f 7300 	mov.w	r3, #512	; 0x200
    c532:	8493      	strh	r3, [r2, #36]	; 0x24
    c534:	4b07      	ldr	r3, [pc, #28]	; (c554 <security_changed+0x84>)
    c536:	f44f 5132 	mov.w	r1, #11392	; 0x2c80
    c53a:	f842 3f10 	str.w	r3, [r2, #16]!
    c53e:	2300      	movs	r3, #0
    c540:	e7e3      	b.n	c50a <security_changed+0x3a>
    c542:	bf00      	nop
    c544:	00039405 	.word	0x00039405
    c548:	01000004 	.word	0x01000004
    c54c:	00037988 	.word	0x00037988
    c550:	00039423 	.word	0x00039423
    c554:	01000005 	.word	0x01000005

0000c558 <disconnected>:
static void disconnected(struct bt_conn *conn, uint8_t reason) {
    c558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c55c:	b08e      	sub	sp, #56	; 0x38
    c55e:	af00      	add	r7, sp, #0
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    c560:	f107 0818 	add.w	r8, r7, #24
static void disconnected(struct bt_conn *conn, uint8_t reason) {
    c564:	460e      	mov	r6, r1
    c566:	4605      	mov	r5, r0
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    c568:	f024 ffae 	bl	314c8 <bt_conn_get_dst>
    c56c:	4641      	mov	r1, r8
    c56e:	f7ff fee7 	bl	c340 <bt_addr_le_to_str.constprop.0.isra.0>
    LOG_INF("Disconnected: %s, Reason: %u", addr, reason);
    c572:	466c      	mov	r4, sp
    c574:	b08a      	sub	sp, #40	; 0x28
    c576:	466a      	mov	r2, sp
    c578:	4b1e      	ldr	r3, [pc, #120]	; (c5f4 <disconnected+0x9c>)
    c57a:	61d6      	str	r6, [r2, #28]
    c57c:	e9c2 3805 	strd	r3, r8, [r2, #20]
    c580:	f44f 7300 	mov.w	r3, #512	; 0x200
    c584:	8413      	strh	r3, [r2, #32]
    c586:	4b1c      	ldr	r3, [pc, #112]	; (c5f8 <disconnected+0xa0>)
    if (default_conn != conn) {
    c588:	4e1c      	ldr	r6, [pc, #112]	; (c5fc <disconnected+0xa4>)
    LOG_INF("Disconnected: %s, Reason: %u", addr, reason);
    c58a:	f842 3f10 	str.w	r3, [r2, #16]!
    c58e:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    c592:	2300      	movs	r3, #0
    c594:	481a      	ldr	r0, [pc, #104]	; (c600 <disconnected+0xa8>)
    c596:	f022 fbe1 	bl	2ed5c <z_log_msg_static_create>
    if (default_conn != conn) {
    c59a:	6833      	ldr	r3, [r6, #0]
    c59c:	46a5      	mov	sp, r4
    c59e:	429d      	cmp	r5, r3
    c5a0:	d123      	bne.n	c5ea <disconnected+0x92>
    bt_conn_unref(default_conn);
    c5a2:	4628      	mov	r0, r5
    default_conn = NULL;
    c5a4:	2500      	movs	r5, #0
    bt_conn_unref(default_conn);
    c5a6:	f00a fb6d 	bl	16c84 <bt_conn_unref>
    err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
    c5aa:	2001      	movs	r0, #1
    default_conn = NULL;
    c5ac:	6035      	str	r5, [r6, #0]
    err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
    c5ae:	f005 fc7b 	bl	11ea8 <bt_scan_start>
    if (err) {
    c5b2:	b170      	cbz	r0, c5d2 <disconnected+0x7a>
        LOG_ERR("Scanning failed to start (err %d)", err);
    c5b4:	b088      	sub	sp, #32
    c5b6:	466a      	mov	r2, sp
    c5b8:	4b12      	ldr	r3, [pc, #72]	; (c604 <disconnected+0xac>)
    c5ba:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c5be:	e9c2 3005 	strd	r3, r0, [r2, #20]
    c5c2:	2303      	movs	r3, #3
    c5c4:	480e      	ldr	r0, [pc, #56]	; (c600 <disconnected+0xa8>)
    c5c6:	f842 3f10 	str.w	r3, [r2, #16]!
    c5ca:	462b      	mov	r3, r5
    c5cc:	f022 fbc6 	bl	2ed5c <z_log_msg_static_create>
    c5d0:	46a5      	mov	sp, r4
    LOG_INF("Scan started again due to disconnect.");
    c5d2:	4b0d      	ldr	r3, [pc, #52]	; (c608 <disconnected+0xb0>)
    c5d4:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    c5d8:	617b      	str	r3, [r7, #20]
    c5da:	2302      	movs	r3, #2
    c5dc:	4808      	ldr	r0, [pc, #32]	; (c600 <disconnected+0xa8>)
    c5de:	613b      	str	r3, [r7, #16]
    c5e0:	f107 0210 	add.w	r2, r7, #16
    c5e4:	2300      	movs	r3, #0
    c5e6:	f022 fbb9 	bl	2ed5c <z_log_msg_static_create>
}
    c5ea:	3738      	adds	r7, #56	; 0x38
    c5ec:	46bd      	mov	sp, r7
    c5ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c5f2:	bf00      	nop
    c5f4:	00039447 	.word	0x00039447
    c5f8:	01000004 	.word	0x01000004
    c5fc:	2000e288 	.word	0x2000e288
    c600:	00037988 	.word	0x00037988
    c604:	00039464 	.word	0x00039464
    c608:	00039486 	.word	0x00039486

0000c60c <connected>:
static void connected(struct bt_conn *conn, uint8_t conn_err) {
    c60c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c610:	460c      	mov	r4, r1
    c612:	b08f      	sub	sp, #60	; 0x3c
    c614:	af00      	add	r7, sp, #0
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    c616:	f107 0618 	add.w	r6, r7, #24
static void connected(struct bt_conn *conn, uint8_t conn_err) {
    c61a:	4680      	mov	r8, r0
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    c61c:	f024 ff54 	bl	314c8 <bt_conn_get_dst>
    c620:	4631      	mov	r1, r6
    c622:	f7ff fe8d 	bl	c340 <bt_addr_le_to_str.constprop.0.isra.0>
    if (conn_err) {
    c626:	2c00      	cmp	r4, #0
    c628:	d04a      	beq.n	c6c0 <connected+0xb4>
        LOG_ERR("Failed to connect to %s (%d)", addr, conn_err);
    c62a:	466d      	mov	r5, sp
    c62c:	b08a      	sub	sp, #40	; 0x28
    c62e:	466a      	mov	r2, sp
    c630:	4b91      	ldr	r3, [pc, #580]	; (c878 <connected+0x26c>)
        if (default_conn == conn) {
    c632:	f8df 9248 	ldr.w	r9, [pc, #584]	; c87c <connected+0x270>
        LOG_ERR("Failed to connect to %s (%d)", addr, conn_err);
    c636:	e9c2 3605 	strd	r3, r6, [r2, #20]
    c63a:	f44f 7300 	mov.w	r3, #512	; 0x200
    c63e:	8413      	strh	r3, [r2, #32]
    c640:	4b8f      	ldr	r3, [pc, #572]	; (c880 <connected+0x274>)
    c642:	4890      	ldr	r0, [pc, #576]	; (c884 <connected+0x278>)
    c644:	61d4      	str	r4, [r2, #28]
    c646:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    c64a:	f842 3f10 	str.w	r3, [r2, #16]!
    c64e:	2300      	movs	r3, #0
    c650:	f022 fb84 	bl	2ed5c <z_log_msg_static_create>
        if (default_conn == conn) {
    c654:	f8d9 0000 	ldr.w	r0, [r9]
    c658:	46ad      	mov	sp, r5
    c65a:	4540      	cmp	r0, r8
    c65c:	d118      	bne.n	c690 <connected+0x84>
            default_conn = NULL;
    c65e:	f04f 0800 	mov.w	r8, #0
            bt_conn_unref(default_conn);
    c662:	f00a fb0f 	bl	16c84 <bt_conn_unref>
            err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
    c666:	2001      	movs	r0, #1
            default_conn = NULL;
    c668:	f8c9 8000 	str.w	r8, [r9]
            err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
    c66c:	f005 fc1c 	bl	11ea8 <bt_scan_start>
            if (err) {
    c670:	b170      	cbz	r0, c690 <connected+0x84>
                LOG_ERR("Scanning failed to start (err %d)", err);
    c672:	b088      	sub	sp, #32
    c674:	466a      	mov	r2, sp
    c676:	4b84      	ldr	r3, [pc, #528]	; (c888 <connected+0x27c>)
    c678:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c67c:	e9c2 3005 	strd	r3, r0, [r2, #20]
    c680:	2303      	movs	r3, #3
    c682:	4880      	ldr	r0, [pc, #512]	; (c884 <connected+0x278>)
    c684:	f842 3f10 	str.w	r3, [r2, #16]!
    c688:	4643      	mov	r3, r8
    c68a:	f022 fb67 	bl	2ed5c <z_log_msg_static_create>
    c68e:	46ad      	mov	sp, r5
        LOG_ERR("Failed to connect to %s (%u)", addr, conn_err);
    c690:	466d      	mov	r5, sp
    c692:	b08a      	sub	sp, #40	; 0x28
    c694:	466a      	mov	r2, sp
    c696:	4b7d      	ldr	r3, [pc, #500]	; (c88c <connected+0x280>)
    c698:	61d4      	str	r4, [r2, #28]
    c69a:	e9c2 3605 	strd	r3, r6, [r2, #20]
    c69e:	f44f 7300 	mov.w	r3, #512	; 0x200
    c6a2:	8413      	strh	r3, [r2, #32]
    c6a4:	4b76      	ldr	r3, [pc, #472]	; (c880 <connected+0x274>)
    c6a6:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    c6aa:	f842 3f10 	str.w	r3, [r2, #16]!
    c6ae:	4875      	ldr	r0, [pc, #468]	; (c884 <connected+0x278>)
    c6b0:	2300      	movs	r3, #0
    c6b2:	f022 fb53 	bl	2ed5c <z_log_msg_static_create>
    c6b6:	46ad      	mov	sp, r5
}
    c6b8:	373c      	adds	r7, #60	; 0x3c
    c6ba:	46bd      	mov	sp, r7
    c6bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LOG_INF("Connected: %s", addr);
    c6c0:	46e9      	mov	r9, sp
    c6c2:	b088      	sub	sp, #32
    c6c4:	466d      	mov	r5, sp
    c6c6:	4b72      	ldr	r3, [pc, #456]	; (c890 <connected+0x284>)
    c6c8:	46aa      	mov	sl, r5
    c6ca:	e9c5 3605 	strd	r3, r6, [r5, #20]
    c6ce:	f44f 7300 	mov.w	r3, #512	; 0x200
    c6d2:	83ab      	strh	r3, [r5, #28]
    c6d4:	4b6f      	ldr	r3, [pc, #444]	; (c894 <connected+0x288>)
    c6d6:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
    c6da:	f84a 3f10 	str.w	r3, [sl, #16]!
    c6de:	4652      	mov	r2, sl
    c6e0:	4623      	mov	r3, r4
    c6e2:	4868      	ldr	r0, [pc, #416]	; (c884 <connected+0x278>)
    c6e4:	f022 fb3a 	bl	2ed5c <z_log_msg_static_create>
    c6e8:	46cd      	mov	sp, r9
    LOG_INF("Called MTU exchange function");
    c6ea:	2602      	movs	r6, #2
    c6ec:	4b6a      	ldr	r3, [pc, #424]	; (c898 <connected+0x28c>)
    c6ee:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    c6f2:	617b      	str	r3, [r7, #20]
    c6f4:	4863      	ldr	r0, [pc, #396]	; (c884 <connected+0x278>)
    c6f6:	4623      	mov	r3, r4
    c6f8:	613e      	str	r6, [r7, #16]
    c6fa:	f107 0210 	add.w	r2, r7, #16
    c6fe:	f022 fb2d 	bl	2ed5c <z_log_msg_static_create>
    exchange_params.func = exchange_func;
    c702:	f8df b198 	ldr.w	fp, [pc, #408]	; c89c <connected+0x290>
    c706:	4b66      	ldr	r3, [pc, #408]	; (c8a0 <connected+0x294>)
    c708:	f8cb 3000 	str.w	r3, [fp]
    LOG_INF("Called bt_gatt_exchange_mtu");
    c70c:	4b65      	ldr	r3, [pc, #404]	; (c8a4 <connected+0x298>)
    c70e:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    c712:	e9c7 6304 	strd	r6, r3, [r7, #16]
    c716:	485b      	ldr	r0, [pc, #364]	; (c884 <connected+0x278>)
    c718:	4623      	mov	r3, r4
    c71a:	f107 0210 	add.w	r2, r7, #16
    c71e:	f022 fb1d 	bl	2ed5c <z_log_msg_static_create>
    LOG_INF("exchange_params.func address: 0x%08x", (uint32_t) exchange_params.func);
    c722:	46ad      	mov	sp, r5
    c724:	f8db 3000 	ldr.w	r3, [fp]
    c728:	2603      	movs	r6, #3
    c72a:	4a5f      	ldr	r2, [pc, #380]	; (c8a8 <connected+0x29c>)
    c72c:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    c730:	e9c5 2305 	strd	r2, r3, [r5, #20]
    c734:	4853      	ldr	r0, [pc, #332]	; (c884 <connected+0x278>)
    c736:	4623      	mov	r3, r4
    c738:	4652      	mov	r2, sl
    c73a:	612e      	str	r6, [r5, #16]
    c73c:	f022 fb0e 	bl	2ed5c <z_log_msg_static_create>
    c740:	46cd      	mov	sp, r9
    LOG_INF("Connection pointer: 0x%08x", (uint32_t) conn);
    c742:	46ad      	mov	sp, r5
    c744:	4b59      	ldr	r3, [pc, #356]	; (c8ac <connected+0x2a0>)
    c746:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    c74a:	e9c5 3805 	strd	r3, r8, [r5, #20]
    c74e:	484d      	ldr	r0, [pc, #308]	; (c884 <connected+0x278>)
    c750:	4623      	mov	r3, r4
    c752:	4652      	mov	r2, sl
    c754:	612e      	str	r6, [r5, #16]
    c756:	f022 fb01 	bl	2ed5c <z_log_msg_static_create>
    err = bt_gatt_exchange_mtu(conn, &exchange_params);
    c75a:	4659      	mov	r1, fp
    c75c:	46cd      	mov	sp, r9
    c75e:	4640      	mov	r0, r8
    c760:	f00e f978 	bl	1aa54 <bt_gatt_exchange_mtu>
    if (err) {
    c764:	b168      	cbz	r0, c782 <connected+0x176>
        LOG_WRN("MTU exchange failed (err %d)", err);
    c766:	46ad      	mov	sp, r5
    c768:	466a      	mov	r2, sp
    c76a:	4b51      	ldr	r3, [pc, #324]	; (c8b0 <connected+0x2a4>)
    c76c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    c770:	e9c2 3005 	strd	r3, r0, [r2, #20]
    c774:	4623      	mov	r3, r4
    c776:	4843      	ldr	r0, [pc, #268]	; (c884 <connected+0x278>)
    c778:	f842 6f10 	str.w	r6, [r2, #16]!
    c77c:	f022 faee 	bl	2ed5c <z_log_msg_static_create>
    c780:	46cd      	mov	sp, r9
    LOG_INF("Called Security function");
    c782:	466c      	mov	r4, sp
    c784:	4b4b      	ldr	r3, [pc, #300]	; (c8b4 <connected+0x2a8>)
    c786:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    c78a:	617b      	str	r3, [r7, #20]
    c78c:	2302      	movs	r3, #2
    c78e:	483d      	ldr	r0, [pc, #244]	; (c884 <connected+0x278>)
    c790:	613b      	str	r3, [r7, #16]
    c792:	f107 0210 	add.w	r2, r7, #16
    c796:	2300      	movs	r3, #0
    c798:	f022 fae0 	bl	2ed5c <z_log_msg_static_create>
    err = bt_conn_set_security(conn, BT_SECURITY_L1);
    c79c:	2101      	movs	r1, #1
    c79e:	4640      	mov	r0, r8
    c7a0:	f024 fe1b 	bl	313da <bt_conn_set_security>
    if (err) {
    c7a4:	b188      	cbz	r0, c7ca <connected+0x1be>
        LOG_WRN("Failed to set security: %d", err);
    c7a6:	b088      	sub	sp, #32
    c7a8:	466a      	mov	r2, sp
    c7aa:	4b43      	ldr	r3, [pc, #268]	; (c8b8 <connected+0x2ac>)
    c7ac:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    c7b0:	e9c2 3005 	strd	r3, r0, [r2, #20]
    c7b4:	2303      	movs	r3, #3
    c7b6:	4833      	ldr	r0, [pc, #204]	; (c884 <connected+0x278>)
    c7b8:	f842 3f10 	str.w	r3, [r2, #16]!
    c7bc:	2300      	movs	r3, #0
    c7be:	f022 facd 	bl	2ed5c <z_log_msg_static_create>
        gatt_discover(conn);
    c7c2:	4640      	mov	r0, r8
    c7c4:	46a5      	mov	sp, r4
    c7c6:	f7ff fd0f 	bl	c1e8 <gatt_discover>
    LOG_INF("Security Set. Starting Discovery...");
    c7ca:	2402      	movs	r4, #2
    c7cc:	4b3b      	ldr	r3, [pc, #236]	; (c8bc <connected+0x2b0>)
    c7ce:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    c7d2:	617b      	str	r3, [r7, #20]
    c7d4:	482b      	ldr	r0, [pc, #172]	; (c884 <connected+0x278>)
    c7d6:	2300      	movs	r3, #0
    c7d8:	613c      	str	r4, [r7, #16]
    c7da:	f107 0210 	add.w	r2, r7, #16
    c7de:	f022 fabd 	bl	2ed5c <z_log_msg_static_create>
    LOG_INF("Calling bt_gatt_dm_start");
    c7e2:	4b37      	ldr	r3, [pc, #220]	; (c8c0 <connected+0x2b4>)
    c7e4:	f107 0210 	add.w	r2, r7, #16
    c7e8:	e9c7 4304 	strd	r4, r3, [r7, #16]
    c7ec:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    c7f0:	2300      	movs	r3, #0
    c7f2:	4824      	ldr	r0, [pc, #144]	; (c884 <connected+0x278>)
    c7f4:	f022 fab2 	bl	2ed5c <z_log_msg_static_create>
    err = bt_gatt_dm_start(conn, BT_UUID_NUS_SERVICE, &discovery_cb, &default_nus_client);
    c7f8:	463a      	mov	r2, r7
    c7fa:	4b32      	ldr	r3, [pc, #200]	; (c8c4 <connected+0x2b8>)
    c7fc:	f103 0510 	add.w	r5, r3, #16
    c800:	4614      	mov	r4, r2
    c802:	6818      	ldr	r0, [r3, #0]
    c804:	6859      	ldr	r1, [r3, #4]
    c806:	3308      	adds	r3, #8
    c808:	c403      	stmia	r4!, {r0, r1}
    c80a:	42ab      	cmp	r3, r5
    c80c:	4622      	mov	r2, r4
    c80e:	d1f7      	bne.n	c800 <connected+0x1f4>
    c810:	781b      	ldrb	r3, [r3, #0]
    c812:	4639      	mov	r1, r7
    c814:	7023      	strb	r3, [r4, #0]
    c816:	4640      	mov	r0, r8
    c818:	4b2b      	ldr	r3, [pc, #172]	; (c8c8 <connected+0x2bc>)
    c81a:	4a2c      	ldr	r2, [pc, #176]	; (c8cc <connected+0x2c0>)
    c81c:	f005 f8d6 	bl	119cc <bt_gatt_dm_start>
    if (err) {
    c820:	b328      	cbz	r0, c86e <connected+0x262>
        LOG_ERR("Could not start service discovery, err %d", err);
    c822:	466c      	mov	r4, sp
    c824:	b088      	sub	sp, #32
    c826:	466a      	mov	r2, sp
    c828:	4b29      	ldr	r3, [pc, #164]	; (c8d0 <connected+0x2c4>)
    c82a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c82e:	e9c2 3005 	strd	r3, r0, [r2, #20]
    c832:	2303      	movs	r3, #3
    c834:	4813      	ldr	r0, [pc, #76]	; (c884 <connected+0x278>)
    c836:	f842 3f10 	str.w	r3, [r2, #16]!
    c83a:	2300      	movs	r3, #0
    c83c:	f022 fa8e 	bl	2ed5c <z_log_msg_static_create>
    c840:	46a5      	mov	sp, r4
    err = bt_scan_stop();
    c842:	f023 fd6b 	bl	3031c <bt_scan_stop>
    if ((!err) && (err != -EALREADY)) {
    c846:	4603      	mov	r3, r0
    c848:	2800      	cmp	r0, #0
    c84a:	f47f af35 	bne.w	c6b8 <connected+0xac>
        LOG_ERR("Stop LE scan failed (err %d)", err);
    c84e:	466c      	mov	r4, sp
    c850:	b088      	sub	sp, #32
    c852:	466a      	mov	r2, sp
    c854:	491f      	ldr	r1, [pc, #124]	; (c8d4 <connected+0x2c8>)
    c856:	e9c2 1005 	strd	r1, r0, [r2, #20]
    c85a:	2103      	movs	r1, #3
    c85c:	4809      	ldr	r0, [pc, #36]	; (c884 <connected+0x278>)
    c85e:	f842 1f10 	str.w	r1, [r2, #16]!
    c862:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c866:	f022 fa79 	bl	2ed5c <z_log_msg_static_create>
    c86a:	46a5      	mov	sp, r4
    c86c:	e724      	b.n	c6b8 <connected+0xac>
        gatt_discover(conn);
    c86e:	4640      	mov	r0, r8
    c870:	f7ff fcba 	bl	c1e8 <gatt_discover>
    c874:	e7e5      	b.n	c842 <connected+0x236>
    c876:	bf00      	nop
    c878:	000394ac 	.word	0x000394ac
    c87c:	2000e288 	.word	0x2000e288
    c880:	01000004 	.word	0x01000004
    c884:	00037988 	.word	0x00037988
    c888:	00039464 	.word	0x00039464
    c88c:	000394c9 	.word	0x000394c9
    c890:	000394e6 	.word	0x000394e6
    c894:	01000003 	.word	0x01000003
    c898:	000394f4 	.word	0x000394f4
    c89c:	2000e23c 	.word	0x2000e23c
    c8a0:	0000c145 	.word	0x0000c145
    c8a4:	00039511 	.word	0x00039511
    c8a8:	0003952d 	.word	0x0003952d
    c8ac:	00039552 	.word	0x00039552
    c8b0:	0003956d 	.word	0x0003956d
    c8b4:	0003958a 	.word	0x0003958a
    c8b8:	000395a3 	.word	0x000395a3
    c8bc:	000395be 	.word	0x000395be
    c8c0:	000395e2 	.word	0x000395e2
    c8c4:	00037bbc 	.word	0x00037bbc
    c8c8:	2000e240 	.word	0x2000e240
    c8cc:	2000c7e8 	.word	0x2000c7e8
    c8d0:	000395fb 	.word	0x000395fb
    c8d4:	00039625 	.word	0x00039625

0000c8d8 <get_conn_from_destination>:
}
    c8d8:	4b01      	ldr	r3, [pc, #4]	; (c8e0 <get_conn_from_destination+0x8>)
    c8da:	6818      	ldr	r0, [r3, #0]
    c8dc:	4770      	bx	lr
    c8de:	bf00      	nop
    c8e0:	2000e288 	.word	0x2000e288

0000c8e4 <ble_transmit>:
int ble_transmit(struct bt_conn *conn, uint8_t *data, size_t length) {
    c8e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c8e8:	b087      	sub	sp, #28
    c8ea:	4680      	mov	r8, r0
    c8ec:	af00      	add	r7, sp, #0
    c8ee:	460c      	mov	r4, r1
    c8f0:	4615      	mov	r5, r2
    LOG_INF("Transmit called...");
    c8f2:	466e      	mov	r6, sp
    c8f4:	f04f 0902 	mov.w	r9, #2
    c8f8:	4b1c      	ldr	r3, [pc, #112]	; (c96c <ble_transmit+0x88>)
    c8fa:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    c8fe:	617b      	str	r3, [r7, #20]
    c900:	481b      	ldr	r0, [pc, #108]	; (c970 <ble_transmit+0x8c>)
    c902:	2300      	movs	r3, #0
    c904:	f8c7 9010 	str.w	r9, [r7, #16]
    c908:	f107 0210 	add.w	r2, r7, #16
    c90c:	f022 fa26 	bl	2ed5c <z_log_msg_static_create>
    if (!data || !length) {
    c910:	b174      	cbz	r4, c930 <ble_transmit+0x4c>
    c912:	b16d      	cbz	r5, c930 <ble_transmit+0x4c>
    if (!conn) {
    c914:	f1b8 0f00 	cmp.w	r8, #0
    c918:	d10d      	bne.n	c936 <ble_transmit+0x52>
        LOG_INF("No connection found for destination");
    c91a:	4b16      	ldr	r3, [pc, #88]	; (c974 <ble_transmit+0x90>)
    c91c:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    c920:	e9c7 9304 	strd	r9, r3, [r7, #16]
    c924:	4812      	ldr	r0, [pc, #72]	; (c970 <ble_transmit+0x8c>)
    c926:	4643      	mov	r3, r8
    c928:	f107 0210 	add.w	r2, r7, #16
    c92c:	f022 fa16 	bl	2ed5c <z_log_msg_static_create>
        return -EINVAL;
    c930:	f06f 0415 	mvn.w	r4, #21
    c934:	e015      	b.n	c962 <ble_transmit+0x7e>
    int err = bt_nus_client_send(&default_nus_client, data, length);
    c936:	4621      	mov	r1, r4
    c938:	480f      	ldr	r0, [pc, #60]	; (c978 <ble_transmit+0x94>)
    c93a:	b2aa      	uxth	r2, r5
    c93c:	f005 fac4 	bl	11ec8 <bt_nus_client_send>
    if (err) {
    c940:	4604      	mov	r4, r0
    c942:	b170      	cbz	r0, c962 <ble_transmit+0x7e>
        LOG_ERR("Failed to send data over BLE using NUS: %d", err);
    c944:	b088      	sub	sp, #32
    c946:	466a      	mov	r2, sp
    c948:	4b0c      	ldr	r3, [pc, #48]	; (c97c <ble_transmit+0x98>)
    c94a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c94e:	e9c2 3005 	strd	r3, r0, [r2, #20]
    c952:	2303      	movs	r3, #3
    c954:	4806      	ldr	r0, [pc, #24]	; (c970 <ble_transmit+0x8c>)
    c956:	f842 3f10 	str.w	r3, [r2, #16]!
    c95a:	2300      	movs	r3, #0
    c95c:	f022 f9fe 	bl	2ed5c <z_log_msg_static_create>
    c960:	46b5      	mov	sp, r6
}
    c962:	4620      	mov	r0, r4
    c964:	371c      	adds	r7, #28
    c966:	46bd      	mov	sp, r7
    c968:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    c96c:	00039642 	.word	0x00039642
    c970:	00037988 	.word	0x00037988
    c974:	00039655 	.word	0x00039655
    c978:	2000e240 	.word	0x2000e240
    c97c:	00039679 	.word	0x00039679

0000c980 <ble_init>:
}



int ble_init(void)
{
    c980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c984:	b096      	sub	sp, #88	; 0x58
	int err;

	LOG_INF("Initializing Bluetooth..");
    c986:	466e      	mov	r6, sp
{
    c988:	af00      	add	r7, sp, #0
	LOG_INF("Initializing Bluetooth..");
    c98a:	2502      	movs	r5, #2
    c98c:	4b84      	ldr	r3, [pc, #528]	; (cba0 <ble_init+0x220>)
    c98e:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    c992:	4884      	ldr	r0, [pc, #528]	; (cba4 <ble_init+0x224>)
    c994:	657b      	str	r3, [r7, #84]	; 0x54
    c996:	f107 0250 	add.w	r2, r7, #80	; 0x50
    c99a:	2300      	movs	r3, #0
    c99c:	653d      	str	r5, [r7, #80]	; 0x50
    c99e:	f022 f9dd 	bl	2ed5c <z_log_msg_static_create>

	err = bt_conn_auth_cb_register(&conn_auth_callbacks);
    c9a2:	4881      	ldr	r0, [pc, #516]	; (cba8 <ble_init+0x228>)
    c9a4:	f00a ff1c 	bl	177e0 <bt_conn_auth_cb_register>
	if (err) {
    c9a8:	4604      	mov	r4, r0
    c9aa:	b158      	cbz	r0, c9c4 <ble_init+0x44>
		LOG_ERR("Failed to register authorization callbacks.");
    c9ac:	4b7f      	ldr	r3, [pc, #508]	; (cbac <ble_init+0x22c>)
    c9ae:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    c9b2:	e9c7 5314 	strd	r5, r3, [r7, #80]	; 0x50
    c9b6:	2300      	movs	r3, #0
    c9b8:	f107 0250 	add.w	r2, r7, #80	; 0x50
    if (err) {
        LOG_ERR("Scanning failed to start, err %d", err);
        return err;
    }

    LOG_INF("Scanning...");
    c9bc:	4879      	ldr	r0, [pc, #484]	; (cba4 <ble_init+0x224>)
    c9be:	f022 f9cd 	bl	2ed5c <z_log_msg_static_create>
	
    return err;
    c9c2:	e007      	b.n	c9d4 <ble_init+0x54>
	err = bt_conn_auth_info_cb_register(&conn_auth_info_callbacks);
    c9c4:	487a      	ldr	r0, [pc, #488]	; (cbb0 <ble_init+0x230>)
    c9c6:	f00a ff25 	bl	17814 <bt_conn_auth_info_cb_register>
	if (err) {
    c9ca:	4604      	mov	r4, r0
    c9cc:	b138      	cbz	r0, c9de <ble_init+0x5e>
		printk("Failed to register authorization info callbacks.\n");
    c9ce:	4879      	ldr	r0, [pc, #484]	; (cbb4 <ble_init+0x234>)
    c9d0:	f022 fb1b 	bl	2f00a <printk>
}
    c9d4:	4620      	mov	r0, r4
    c9d6:	3758      	adds	r7, #88	; 0x58
    c9d8:	46bd      	mov	sp, r7
    c9da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	err = bt_enable(NULL);
    c9de:	f008 fd2f 	bl	15440 <bt_enable>
	if (err) {
    c9e2:	4604      	mov	r4, r0
    c9e4:	b178      	cbz	r0, ca06 <ble_init+0x86>
		LOG_ERR("Bluetooth init failed (err %d)", err);
    c9e6:	b088      	sub	sp, #32
    c9e8:	466a      	mov	r2, sp
    c9ea:	4b73      	ldr	r3, [pc, #460]	; (cbb8 <ble_init+0x238>)
    c9ec:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c9f0:	e9c2 3005 	strd	r3, r0, [r2, #20]
    c9f4:	2303      	movs	r3, #3
    c9f6:	486b      	ldr	r0, [pc, #428]	; (cba4 <ble_init+0x224>)
    c9f8:	f842 3f10 	str.w	r3, [r2, #16]!
    c9fc:	2300      	movs	r3, #0
    c9fe:	f022 f9ad 	bl	2ed5c <z_log_msg_static_create>
    ca02:	46b5      	mov	sp, r6
		return err;
    ca04:	e7e6      	b.n	c9d4 <ble_init+0x54>
	LOG_INF("Bluetooth initialized");
    ca06:	4b6d      	ldr	r3, [pc, #436]	; (cbbc <ble_init+0x23c>)
    ca08:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    ca0c:	e9c7 5314 	strd	r5, r3, [r7, #80]	; 0x50
    ca10:	f107 0250 	add.w	r2, r7, #80	; 0x50
    ca14:	4603      	mov	r3, r0
    ca16:	4863      	ldr	r0, [pc, #396]	; (cba4 <ble_init+0x224>)
    ca18:	f022 f9a0 	bl	2ed5c <z_log_msg_static_create>
    struct bt_le_scan_param scan_param = {
    ca1c:	f107 052c 	add.w	r5, r7, #44	; 0x2c
		settings_load();
    ca20:	f023 fa4d 	bl	2febe <settings_load>
    struct bt_le_scan_param scan_param = {
    ca24:	4621      	mov	r1, r4
    ca26:	2214      	movs	r2, #20
    ca28:	4628      	mov	r0, r5
    ca2a:	f029 fd9d 	bl	36568 <memset>
    ca2e:	2301      	movs	r3, #1
    ca30:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    ca34:	633b      	str	r3, [r7, #48]	; 0x30
    struct bt_scan_init_param scan_init = {
    ca36:	743b      	strb	r3, [r7, #16]
        .conn_param = BT_LE_CONN_PARAM_DEFAULT,
    ca38:	f04f 73c8 	mov.w	r3, #26214400	; 0x1900000
    struct bt_le_scan_param scan_param = {
    ca3c:	4a60      	ldr	r2, [pc, #384]	; (cbc0 <ble_init+0x240>)
    bt_scan_init(&scan_init);
    ca3e:	f107 000c 	add.w	r0, r7, #12
    struct bt_le_scan_param scan_param = {
    ca42:	637a      	str	r2, [r7, #52]	; 0x34
        .conn_param = BT_LE_CONN_PARAM_DEFAULT,
    ca44:	4a5f      	ldr	r2, [pc, #380]	; (cbc4 <ble_init+0x244>)
    struct bt_scan_init_param scan_init = {
    ca46:	60fd      	str	r5, [r7, #12]
        .conn_param = BT_LE_CONN_PARAM_DEFAULT,
    ca48:	e9c7 2301 	strd	r2, r3, [r7, #4]
    struct bt_scan_init_param scan_init = {
    ca4c:	1d3b      	adds	r3, r7, #4
    ca4e:	617b      	str	r3, [r7, #20]
    bt_scan_init(&scan_init);
    ca50:	f005 f9f8 	bl	11e44 <bt_scan_init>
    bt_scan_cb_register(&scan_cb);
    ca54:	485c      	ldr	r0, [pc, #368]	; (cbc8 <ble_init+0x248>)
    ca56:	f005 f8b9 	bl	11bcc <bt_scan_cb_register>
    err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_NUS_SERVICE);
    ca5a:	f107 0218 	add.w	r2, r7, #24
    ca5e:	4616      	mov	r6, r2
    ca60:	4b5a      	ldr	r3, [pc, #360]	; (cbcc <ble_init+0x24c>)
    ca62:	f103 0c10 	add.w	ip, r3, #16
    ca66:	4614      	mov	r4, r2
    ca68:	6818      	ldr	r0, [r3, #0]
    ca6a:	6859      	ldr	r1, [r3, #4]
    ca6c:	3308      	adds	r3, #8
    ca6e:	c403      	stmia	r4!, {r0, r1}
    ca70:	4563      	cmp	r3, ip
    ca72:	4622      	mov	r2, r4
    ca74:	d1f7      	bne.n	ca66 <ble_init+0xe6>
    ca76:	781b      	ldrb	r3, [r3, #0]
    ca78:	4631      	mov	r1, r6
    ca7a:	7023      	strb	r3, [r4, #0]
    ca7c:	2003      	movs	r0, #3
    ca7e:	f005 f8b5 	bl	11bec <bt_scan_filter_add>
    if (err) {
    ca82:	4604      	mov	r4, r0
    ca84:	b1e0      	cbz	r0, cac0 <ble_init+0x140>
        LOG_ERR("Scanning filters for ESP32 service cannot be set");
    ca86:	4b52      	ldr	r3, [pc, #328]	; (cbd0 <ble_init+0x250>)
    ca88:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ca8c:	657b      	str	r3, [r7, #84]	; 0x54
    ca8e:	2302      	movs	r3, #2
    ca90:	4844      	ldr	r0, [pc, #272]	; (cba4 <ble_init+0x224>)
    ca92:	653b      	str	r3, [r7, #80]	; 0x50
    ca94:	f107 0250 	add.w	r2, r7, #80	; 0x50
    ca98:	2300      	movs	r3, #0
    ca9a:	f022 f95f 	bl	2ed5c <z_log_msg_static_create>
		LOG_ERR("scan_init failed (err %d)", err);
    ca9e:	466d      	mov	r5, sp
    caa0:	b088      	sub	sp, #32
    caa2:	466a      	mov	r2, sp
    caa4:	4b4b      	ldr	r3, [pc, #300]	; (cbd4 <ble_init+0x254>)
    caa6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    caaa:	e9c2 3405 	strd	r3, r4, [r2, #20]
    caae:	2303      	movs	r3, #3
    cab0:	483c      	ldr	r0, [pc, #240]	; (cba4 <ble_init+0x224>)
    cab2:	f842 3f10 	str.w	r3, [r2, #16]!
    cab6:	2300      	movs	r3, #0
    cab8:	f022 f950 	bl	2ed5c <z_log_msg_static_create>
    cabc:	46ad      	mov	sp, r5
		return err;
    cabe:	e789      	b.n	c9d4 <ble_init+0x54>
    err = bt_scan_filter_enable(BT_SCAN_UUID_FILTER, false);
    cac0:	4601      	mov	r1, r0
    cac2:	2004      	movs	r0, #4
    cac4:	f005 f8f4 	bl	11cb0 <bt_scan_filter_enable>
    if (err) {
    cac8:	4604      	mov	r4, r0
    caca:	b180      	cbz	r0, caee <ble_init+0x16e>
        LOG_ERR("Filters cannot be turned on (err %d)", err);
    cacc:	466d      	mov	r5, sp
    cace:	b088      	sub	sp, #32
    cad0:	466a      	mov	r2, sp
    cad2:	4b41      	ldr	r3, [pc, #260]	; (cbd8 <ble_init+0x258>)
    cad4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    cad8:	e9c2 3005 	strd	r3, r0, [r2, #20]
    cadc:	2303      	movs	r3, #3
    cade:	4831      	ldr	r0, [pc, #196]	; (cba4 <ble_init+0x224>)
    cae0:	f842 3f10 	str.w	r3, [r2, #16]!
    cae4:	2300      	movs	r3, #0
    cae6:	f022 f939 	bl	2ed5c <z_log_msg_static_create>
    caea:	46ad      	mov	sp, r5
	if (err != 0) {
    caec:	e7d7      	b.n	ca9e <ble_init+0x11e>
	struct bt_nus_client_init_param init = {
    caee:	4b3b      	ldr	r3, [pc, #236]	; (cbdc <ble_init+0x25c>)
    caf0:	6378      	str	r0, [r7, #52]	; 0x34
    caf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    caf4:	4b3a      	ldr	r3, [pc, #232]	; (cbe0 <ble_init+0x260>)
    caf6:	4606      	mov	r6, r0
	err = bt_nus_client_init(&default_nus_client, &init);
    caf8:	4629      	mov	r1, r5
    cafa:	483a      	ldr	r0, [pc, #232]	; (cbe4 <ble_init+0x264>)
	struct bt_nus_client_init_param init = {
    cafc:	633b      	str	r3, [r7, #48]	; 0x30
	err = bt_nus_client_init(&default_nus_client, &init);
    cafe:	f023 fc43 	bl	30388 <bt_nus_client_init>
	if (err) {
    cb02:	4604      	mov	r4, r0
    cb04:	b308      	cbz	r0, cb4a <ble_init+0x1ca>
		LOG_ERR("NUS Client initialization failed (err %d)", err);
    cb06:	46e9      	mov	r9, sp
    cb08:	b088      	sub	sp, #32
    cb0a:	466d      	mov	r5, sp
    cb0c:	f04f 0a03 	mov.w	sl, #3
    cb10:	46a8      	mov	r8, r5
    cb12:	4b35      	ldr	r3, [pc, #212]	; (cbe8 <ble_init+0x268>)
    cb14:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    cb18:	e9c5 3005 	strd	r3, r0, [r5, #20]
    cb1c:	f848 af10 	str.w	sl, [r8, #16]!
    cb20:	4633      	mov	r3, r6
    cb22:	4642      	mov	r2, r8
    cb24:	481f      	ldr	r0, [pc, #124]	; (cba4 <ble_init+0x224>)
    cb26:	f022 f919 	bl	2ed5c <z_log_msg_static_create>
    cb2a:	46cd      	mov	sp, r9
		LOG_ERR("Failed to initialize default NUS client (err %d)", err);
    cb2c:	46ad      	mov	sp, r5
    cb2e:	4b2f      	ldr	r3, [pc, #188]	; (cbec <ble_init+0x26c>)
    cb30:	4642      	mov	r2, r8
    cb32:	e9c5 3405 	strd	r3, r4, [r5, #20]
    cb36:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    cb3a:	4633      	mov	r3, r6
    cb3c:	4819      	ldr	r0, [pc, #100]	; (cba4 <ble_init+0x224>)
    cb3e:	f8c5 a010 	str.w	sl, [r5, #16]
    cb42:	f022 f90b 	bl	2ed5c <z_log_msg_static_create>
    cb46:	46cd      	mov	sp, r9
		return err;
    cb48:	e744      	b.n	c9d4 <ble_init+0x54>
	LOG_INF("Default NUS Client module initialized");
    cb4a:	46e8      	mov	r8, sp
    cb4c:	2502      	movs	r5, #2
    cb4e:	4b28      	ldr	r3, [pc, #160]	; (cbf0 <ble_init+0x270>)
    cb50:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    cb54:	657b      	str	r3, [r7, #84]	; 0x54
    cb56:	f107 0250 	add.w	r2, r7, #80	; 0x50
    cb5a:	4603      	mov	r3, r0
    cb5c:	653d      	str	r5, [r7, #80]	; 0x50
    cb5e:	4811      	ldr	r0, [pc, #68]	; (cba4 <ble_init+0x224>)
    cb60:	f022 f8fc 	bl	2ed5c <z_log_msg_static_create>
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
    cb64:	2001      	movs	r0, #1
    cb66:	f005 f99f 	bl	11ea8 <bt_scan_start>
    if (err) {
    cb6a:	4604      	mov	r4, r0
    cb6c:	b178      	cbz	r0, cb8e <ble_init+0x20e>
        LOG_ERR("Scanning failed to start, err %d", err);
    cb6e:	b088      	sub	sp, #32
    cb70:	466a      	mov	r2, sp
    cb72:	4b20      	ldr	r3, [pc, #128]	; (cbf4 <ble_init+0x274>)
    cb74:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    cb78:	e9c2 3005 	strd	r3, r0, [r2, #20]
    cb7c:	2303      	movs	r3, #3
    cb7e:	4809      	ldr	r0, [pc, #36]	; (cba4 <ble_init+0x224>)
    cb80:	f842 3f10 	str.w	r3, [r2, #16]!
    cb84:	4633      	mov	r3, r6
    cb86:	f022 f8e9 	bl	2ed5c <z_log_msg_static_create>
    cb8a:	46c5      	mov	sp, r8
        return err;
    cb8c:	e722      	b.n	c9d4 <ble_init+0x54>
    LOG_INF("Scanning...");
    cb8e:	4b1a      	ldr	r3, [pc, #104]	; (cbf8 <ble_init+0x278>)
    cb90:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    cb94:	e9c7 5314 	strd	r5, r3, [r7, #80]	; 0x50
    cb98:	f107 0250 	add.w	r2, r7, #80	; 0x50
    cb9c:	4603      	mov	r3, r0
    cb9e:	e70d      	b.n	c9bc <ble_init+0x3c>
    cba0:	000396a4 	.word	0x000396a4
    cba4:	00037988 	.word	0x00037988
    cba8:	2000c7c8 	.word	0x2000c7c8
    cbac:	000396bd 	.word	0x000396bd
    cbb0:	2000c7b8 	.word	0x2000c7b8
    cbb4:	000396e9 	.word	0x000396e9
    cbb8:	0003971b 	.word	0x0003971b
    cbbc:	0003973a 	.word	0x0003973a
    cbc0:	00500100 	.word	0x00500100
    cbc4:	00280018 	.word	0x00280018
    cbc8:	2000c7e0 	.word	0x2000c7e0
    cbcc:	00037bbc 	.word	0x00037bbc
    cbd0:	00039750 	.word	0x00039750
    cbd4:	000397a6 	.word	0x000397a6
    cbd8:	00039781 	.word	0x00039781
    cbdc:	0000c1fd 	.word	0x0000c1fd
    cbe0:	0000c2e1 	.word	0x0000c2e1
    cbe4:	2000e240 	.word	0x2000e240
    cbe8:	000397c0 	.word	0x000397c0
    cbec:	000397ea 	.word	0x000397ea
    cbf0:	0003981b 	.word	0x0003981b
    cbf4:	00039841 	.word	0x00039841
    cbf8:	00039862 	.word	0x00039862

0000cbfc <serialize_downlink_data_packet.part.0>:
    k_work_reschedule(dwork, K_MSEC(100));  // Corrected this line
}



size_t serialize_downlink_data_packet(const struct downlink_data_packet *packet, uint8_t *buffer, size_t buffer_size)
    cbfc:	4603      	mov	r3, r0
    cbfe:	4608      	mov	r0, r1
    cc00:	4611      	mov	r1, r2
        return 0;
    }

    size_t serialized_length = 0;

    switch (packet->type) {
    cc02:	785a      	ldrb	r2, [r3, #1]
    cc04:	b11a      	cbz	r2, cc0e <serialize_downlink_data_packet.part.0+0x12>
    cc06:	2a01      	cmp	r2, #1
    cc08:	d005      	beq.n	cc16 <serialize_downlink_data_packet.part.0+0x1a>
            // Unknown type
            return 0;
    }

    return serialized_length;
}
    cc0a:	2000      	movs	r0, #0
    cc0c:	4770      	bx	lr
            serialized_length = snprintf((char *)buffer, buffer_size, "TYPE:TEXT,DATA:%s", packet->data);
    cc0e:	4a03      	ldr	r2, [pc, #12]	; (cc1c <serialize_downlink_data_packet.part.0+0x20>)
    cc10:	3303      	adds	r3, #3
            serialized_length = snprintf((char *)buffer, buffer_size, "TYPE:FIRMWARE,DATA:%s", packet->data);
    cc12:	f020 b8ab 	b.w	2cd6c <sniprintf>
    cc16:	4a02      	ldr	r2, [pc, #8]	; (cc20 <serialize_downlink_data_packet.part.0+0x24>)
    cc18:	3303      	adds	r3, #3
    cc1a:	e7fa      	b.n	cc12 <serialize_downlink_data_packet.part.0+0x16>
    cc1c:	0003986e 	.word	0x0003986e
    cc20:	00039880 	.word	0x00039880

0000cc24 <serialize_uplink_data_packet>:
{
    cc24:	4603      	mov	r3, r0
    cc26:	4608      	mov	r0, r1
    cc28:	4611      	mov	r1, r2
    if (!packet || !buffer) {
    cc2a:	b123      	cbz	r3, cc36 <serialize_uplink_data_packet+0x12>
    cc2c:	b118      	cbz	r0, cc36 <serialize_uplink_data_packet+0x12>
    switch (packet->type) {
    cc2e:	785a      	ldrb	r2, [r3, #1]
    cc30:	b11a      	cbz	r2, cc3a <serialize_uplink_data_packet+0x16>
    cc32:	2a01      	cmp	r2, #1
    cc34:	d005      	beq.n	cc42 <serialize_uplink_data_packet+0x1e>
}
    cc36:	2000      	movs	r0, #0
    cc38:	4770      	bx	lr
            serialized_length = snprintf((char *)buffer, buffer_size, "TYPE:TEXT,DATA:%s", packet->data);
    cc3a:	4a03      	ldr	r2, [pc, #12]	; (cc48 <serialize_uplink_data_packet+0x24>)
    cc3c:	3303      	adds	r3, #3
            serialized_length = snprintf((char *)buffer, buffer_size, "TYPE:IMAGE,DATA:%s", "IMAGE_DATA_PLACEHOLDER");
    cc3e:	f020 b895 	b.w	2cd6c <sniprintf>
    cc42:	4b02      	ldr	r3, [pc, #8]	; (cc4c <serialize_uplink_data_packet+0x28>)
    cc44:	4a02      	ldr	r2, [pc, #8]	; (cc50 <serialize_uplink_data_packet+0x2c>)
    cc46:	e7fa      	b.n	cc3e <serialize_uplink_data_packet+0x1a>
    cc48:	0003986e 	.word	0x0003986e
    cc4c:	00039896 	.word	0x00039896
    cc50:	000398ad 	.word	0x000398ad

0000cc54 <publish_aggregated_data>:
{
    cc54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cc58:	4605      	mov	r5, r0
        if (data_publish(&client, MQTT_QOS_1_AT_LEAST_ONCE, serialized_data, serialized_length) != 0) {
    cc5a:	4f19      	ldr	r7, [pc, #100]	; (ccc0 <publish_aggregated_data+0x6c>)
            LOG_ERR("Failed to publish data");
    cc5c:	f8df 8064 	ldr.w	r8, [pc, #100]	; ccc4 <publish_aggregated_data+0x70>
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
    cc60:	4e19      	ldr	r6, [pc, #100]	; (ccc8 <publish_aggregated_data+0x74>)
{
    cc62:	b0ec      	sub	sp, #432	; 0x1b0
    while (uplink_aggregator_get(&data_packet) == 0) {
    cc64:	a807      	add	r0, sp, #28
    cc66:	f000 f8d5 	bl	ce14 <uplink_aggregator_get>
    cc6a:	4604      	mov	r4, r0
    cc6c:	b140      	cbz	r0, cc80 <publish_aggregated_data+0x2c>
    k_work_reschedule(dwork, K_MSEC(100));  // Corrected this line
    cc6e:	f640 42cd 	movw	r2, #3277	; 0xccd
    cc72:	2300      	movs	r3, #0
    cc74:	4628      	mov	r0, r5
    cc76:	f01d fa29 	bl	2a0cc <k_work_reschedule>
}
    cc7a:	b06c      	add	sp, #432	; 0x1b0
    cc7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        serialized_length = serialize_uplink_data_packet(&data_packet, serialized_data, sizeof(serialized_data));
    cc80:	f44f 7296 	mov.w	r2, #300	; 0x12c
    cc84:	a921      	add	r1, sp, #132	; 0x84
    cc86:	a807      	add	r0, sp, #28
    cc88:	f7ff ffcc 	bl	cc24 <serialize_uplink_data_packet>
        if (serialized_length == 0) {
    cc8c:	4603      	mov	r3, r0
    cc8e:	b950      	cbnz	r0, cca6 <publish_aggregated_data+0x52>
            LOG_ERR("Failed to serialize data packet");
    cc90:	4a0e      	ldr	r2, [pc, #56]	; (cccc <publish_aggregated_data+0x78>)
    cc92:	9205      	str	r2, [sp, #20]
    cc94:	2202      	movs	r2, #2
    cc96:	9204      	str	r2, [sp, #16]
    cc98:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    cc9c:	4630      	mov	r0, r6
    cc9e:	aa04      	add	r2, sp, #16
    cca0:	f003 fac8 	bl	10234 <z_impl_z_log_msg_static_create>
            LOG_ERR("Failed to publish data");
    cca4:	e7de      	b.n	cc64 <publish_aggregated_data+0x10>
        if (data_publish(&client, MQTT_QOS_1_AT_LEAST_ONCE, serialized_data, serialized_length) != 0) {
    cca6:	2101      	movs	r1, #1
    cca8:	4638      	mov	r0, r7
    ccaa:	aa21      	add	r2, sp, #132	; 0x84
    ccac:	f7fe fe78 	bl	b9a0 <data_publish>
    ccb0:	2800      	cmp	r0, #0
    ccb2:	d0d7      	beq.n	cc64 <publish_aggregated_data+0x10>
            LOG_ERR("Failed to publish data");
    ccb4:	2302      	movs	r3, #2
    ccb6:	f8cd 8014 	str.w	r8, [sp, #20]
    ccba:	9304      	str	r3, [sp, #16]
    ccbc:	4623      	mov	r3, r4
    ccbe:	e7eb      	b.n	cc98 <publish_aggregated_data+0x44>
    ccc0:	2000e1d8 	.word	0x2000e1d8
    ccc4:	000398e0 	.word	0x000398e0
    ccc8:	00037988 	.word	0x00037988
    cccc:	000398c0 	.word	0x000398c0

0000ccd0 <transmit_aggregated_data>:

void transmit_aggregated_data(struct k_work *work) {
    ccd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ccd4:	4605      	mov	r5, r0
    ccd6:	b0ec      	sub	sp, #432	; 0x1b0
    while (downlink_aggregator_get(&packet) == 0) {
       // LOG_INF("Preparing to tranmit downlink data packet");
        // Serialize the data packet (if necessary)
        serialized_length = serialize_downlink_data_packet(&packet, serialized_data, sizeof(serialized_data));
        if (serialized_length == 0) {
            LOG_ERR("Failed to serialize downlink data packet");
    ccd8:	4e22      	ldr	r6, [pc, #136]	; (cd64 <transmit_aggregated_data+0x94>)
    ccda:	f8df 808c 	ldr.w	r8, [pc, #140]	; cd68 <transmit_aggregated_data+0x98>
void transmit_aggregated_data(struct k_work *work) {
    ccde:	af00      	add	r7, sp, #0
    while (downlink_aggregator_get(&packet) == 0) {
    cce0:	f107 001c 	add.w	r0, r7, #28
    cce4:	f000 f8c4 	bl	ce70 <downlink_aggregator_get>
    cce8:	b150      	cbz	r0, cd00 <transmit_aggregated_data+0x30>

        // Transmit the serialized data over BLE
        ble_transmit(target_conn, serialized_data, serialized_length);
    }

    k_work_reschedule(dwork, K_MSEC(100));  // Updated this line
    ccea:	f640 42cd 	movw	r2, #3277	; 0xccd
    ccee:	2300      	movs	r3, #0
    ccf0:	4628      	mov	r0, r5
    ccf2:	f01d f9eb 	bl	2a0cc <k_work_reschedule>
}
    ccf6:	f507 77d8 	add.w	r7, r7, #432	; 0x1b0
    ccfa:	46bd      	mov	sp, r7
    ccfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!packet || !buffer) {
    cd00:	f44f 7296 	mov.w	r2, #300	; 0x12c
    cd04:	f107 0184 	add.w	r1, r7, #132	; 0x84
    cd08:	f107 001c 	add.w	r0, r7, #28
    cd0c:	f7ff ff76 	bl	cbfc <serialize_downlink_data_packet.part.0>
        if (serialized_length == 0) {
    cd10:	4604      	mov	r4, r0
    cd12:	b958      	cbnz	r0, cd2c <transmit_aggregated_data+0x5c>
            LOG_ERR("Failed to serialize downlink data packet");
    cd14:	2302      	movs	r3, #2
    cd16:	617e      	str	r6, [r7, #20]
    cd18:	613b      	str	r3, [r7, #16]
    cd1a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    cd1e:	4603      	mov	r3, r0
    cd20:	f107 0210 	add.w	r2, r7, #16
    cd24:	4640      	mov	r0, r8
    cd26:	f003 fa85 	bl	10234 <z_impl_z_log_msg_static_create>
            continue;
    cd2a:	e7d9      	b.n	cce0 <transmit_aggregated_data+0x10>
        struct bt_conn *target_conn = get_conn_from_destination(packet.destination);
    cd2c:	7fb8      	ldrb	r0, [r7, #30]
    cd2e:	f7ff fdd3 	bl	c8d8 <get_conn_from_destination>
    cd32:	4603      	mov	r3, r0
        if (!target_conn) {
    cd34:	b980      	cbnz	r0, cd58 <transmit_aggregated_data+0x88>
            LOG_ERR("No connection found for destination %d", packet.destination);
    cd36:	466c      	mov	r4, sp
    cd38:	b088      	sub	sp, #32
    cd3a:	466a      	mov	r2, sp
    cd3c:	7fb9      	ldrb	r1, [r7, #30]
    cd3e:	480b      	ldr	r0, [pc, #44]	; (cd6c <transmit_aggregated_data+0x9c>)
    cd40:	e9c2 0105 	strd	r0, r1, [r2, #20]
    cd44:	2103      	movs	r1, #3
    cd46:	f842 1f10 	str.w	r1, [r2, #16]!
    cd4a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    cd4e:	4806      	ldr	r0, [pc, #24]	; (cd68 <transmit_aggregated_data+0x98>)
    cd50:	f003 fa70 	bl	10234 <z_impl_z_log_msg_static_create>
    cd54:	46a5      	mov	sp, r4
            continue;
    cd56:	e7c3      	b.n	cce0 <transmit_aggregated_data+0x10>
        ble_transmit(target_conn, serialized_data, serialized_length);
    cd58:	4622      	mov	r2, r4
    cd5a:	f107 0184 	add.w	r1, r7, #132	; 0x84
    cd5e:	f7ff fdc1 	bl	c8e4 <ble_transmit>
    cd62:	e7bd      	b.n	cce0 <transmit_aggregated_data+0x10>
    cd64:	000398f7 	.word	0x000398f7
    cd68:	00037988 	.word	0x00037988
    cd6c:	00039920 	.word	0x00039920

0000cd70 <uplink_aggregator_put>:
	void *fifo_reserved;
	uint8_t data[sizeof(struct downlink_data_packet)];
};

int uplink_aggregator_put(struct uplink_data_packet in_data)
{
    cd70:	b084      	sub	sp, #16
    cd72:	b570      	push	{r4, r5, r6, lr}
    cd74:	ac04      	add	r4, sp, #16
    cd76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    cd7a:	f04f 0320 	mov.w	r3, #32
    cd7e:	f3ef 8611 	mrs	r6, BASEPRI
    cd82:	f383 8812 	msr	BASEPRI_MAX, r3
    cd86:	f3bf 8f6f 	isb	sy
	struct uplink_fifo_entry *fifo_data = NULL;
	uint32_t  lock = irq_lock();
	int    err  = 0;

	if (uplink_entry_count == FIFO_MAX_ELEMENT_COUNT) {
    cd8a:	4d1c      	ldr	r5, [pc, #112]	; (cdfc <uplink_aggregator_put+0x8c>)
    cd8c:	682b      	ldr	r3, [r5, #0]
    cd8e:	2b0c      	cmp	r3, #12
    cd90:	d007      	beq.n	cda2 <uplink_aggregator_put+0x32>

		uplink_entry_count--;
	}

	if (fifo_data == NULL) {
		fifo_data = k_malloc(sizeof(struct uplink_fifo_entry));
    cd92:	206c      	movs	r0, #108	; 0x6c
    cd94:	f029 fb95 	bl	364c2 <k_malloc>
	}

	if (fifo_data == NULL) {
    cd98:	4604      	mov	r4, r0
    cd9a:	b9c8      	cbnz	r0, cdd0 <uplink_aggregator_put+0x60>
		err = -ENOMEM;
    cd9c:	f06f 000b 	mvn.w	r0, #11
    cda0:	e023      	b.n	cdea <uplink_aggregator_put+0x7a>
	return z_impl_k_queue_get(queue, timeout);
    cda2:	2200      	movs	r2, #0
    cda4:	2300      	movs	r3, #0
    cda6:	4816      	ldr	r0, [pc, #88]	; (ce00 <uplink_aggregator_put+0x90>)
    cda8:	f01c fc14 	bl	295d4 <z_impl_k_queue_get>
		__ASSERT(fifo_data != NULL, "fifo_data should not be NULL");
    cdac:	4604      	mov	r4, r0
    cdae:	b960      	cbnz	r0, cdca <uplink_aggregator_put+0x5a>
    cdb0:	4914      	ldr	r1, [pc, #80]	; (ce04 <uplink_aggregator_put+0x94>)
    cdb2:	232e      	movs	r3, #46	; 0x2e
    cdb4:	4a14      	ldr	r2, [pc, #80]	; (ce08 <uplink_aggregator_put+0x98>)
    cdb6:	4815      	ldr	r0, [pc, #84]	; (ce0c <uplink_aggregator_put+0x9c>)
    cdb8:	f022 fb04 	bl	2f3c4 <assert_print>
    cdbc:	4814      	ldr	r0, [pc, #80]	; (ce10 <uplink_aggregator_put+0xa0>)
    cdbe:	f022 fb01 	bl	2f3c4 <assert_print>
    cdc2:	212e      	movs	r1, #46	; 0x2e
    cdc4:	4810      	ldr	r0, [pc, #64]	; (ce08 <uplink_aggregator_put+0x98>)
    cdc6:	f022 faf6 	bl	2f3b6 <assert_post_action>
		uplink_entry_count--;
    cdca:	682b      	ldr	r3, [r5, #0]
    cdcc:	3b01      	subs	r3, #1
    cdce:	602b      	str	r3, [r5, #0]
    cdd0:	2267      	movs	r2, #103	; 0x67
    cdd2:	a904      	add	r1, sp, #16
    cdd4:	1d20      	adds	r0, r4, #4
    cdd6:	f029 fba7 	bl	36528 <memcpy>
		goto exit;
	}

	memcpy(fifo_data->data, &in_data, sizeof(in_data));

	k_fifo_put(&uplink_aggregator_fifo, fifo_data);
    cdda:	4809      	ldr	r0, [pc, #36]	; (ce00 <uplink_aggregator_put+0x90>)
    cddc:	4621      	mov	r1, r4
    cdde:	f029 f9ae 	bl	3613e <k_queue_append>
	int    err  = 0;
    cde2:	2000      	movs	r0, #0
	uplink_entry_count++;
    cde4:	682b      	ldr	r3, [r5, #0]
    cde6:	3301      	adds	r3, #1
    cde8:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    cdea:	f386 8811 	msr	BASEPRI, r6
    cdee:	f3bf 8f6f 	isb	sy

exit:
	irq_unlock(lock);
	return err;
}
    cdf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cdf6:	b004      	add	sp, #16
    cdf8:	4770      	bx	lr
    cdfa:	bf00      	nop
    cdfc:	2000e290 	.word	0x2000e290
    ce00:	2000cff8 	.word	0x2000cff8
    ce04:	0003997c 	.word	0x0003997c
    ce08:	00039947 	.word	0x00039947
    ce0c:	00039995 	.word	0x00039995
    ce10:	000399b2 	.word	0x000399b2

0000ce14 <uplink_aggregator_get>:

int uplink_aggregator_get(struct uplink_data_packet *out_data)
{
    ce14:	b570      	push	{r4, r5, r6, lr}
	void  *fifo_data;
	int   err = 0;

	if (out_data == NULL) {
    ce16:	4605      	mov	r5, r0
    ce18:	b318      	cbz	r0, ce62 <uplink_aggregator_get+0x4e>
	__asm__ volatile(
    ce1a:	f04f 0320 	mov.w	r3, #32
    ce1e:	f3ef 8611 	mrs	r6, BASEPRI
    ce22:	f383 8812 	msr	BASEPRI_MAX, r3
    ce26:	f3bf 8f6f 	isb	sy
    ce2a:	2200      	movs	r2, #0
    ce2c:	2300      	movs	r3, #0
    ce2e:	480e      	ldr	r0, [pc, #56]	; (ce68 <uplink_aggregator_get+0x54>)
    ce30:	f01c fbd0 	bl	295d4 <z_impl_k_queue_get>

	uint32_t lock = 0;
	lock = irq_lock();

	fifo_data = k_fifo_get(&uplink_aggregator_fifo, K_NO_WAIT);
	if (fifo_data == NULL) {
    ce34:	4604      	mov	r4, r0
    ce36:	b188      	cbz	r0, ce5c <uplink_aggregator_get+0x48>
    ce38:	2267      	movs	r2, #103	; 0x67
    ce3a:	1d01      	adds	r1, r0, #4
    ce3c:	4628      	mov	r0, r5
    ce3e:	f029 fb73 	bl	36528 <memcpy>
	}

	memcpy(out_data, ((struct uplink_fifo_entry *)fifo_data)->data,
	       sizeof(struct uplink_data_packet));

	k_free(fifo_data);
    ce42:	4620      	mov	r0, r4
    ce44:	f029 fb36 	bl	364b4 <k_free>
	int   err = 0;
    ce48:	2000      	movs	r0, #0
	uplink_entry_count--;
    ce4a:	4a08      	ldr	r2, [pc, #32]	; (ce6c <uplink_aggregator_get+0x58>)
    ce4c:	6813      	ldr	r3, [r2, #0]
    ce4e:	3b01      	subs	r3, #1
    ce50:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    ce52:	f386 8811 	msr	BASEPRI, r6
    ce56:	f3bf 8f6f 	isb	sy

exit:
	irq_unlock(lock);
	return err;
}
    ce5a:	bd70      	pop	{r4, r5, r6, pc}
		err = -ENODATA;
    ce5c:	f06f 003c 	mvn.w	r0, #60	; 0x3c
    ce60:	e7f7      	b.n	ce52 <uplink_aggregator_get+0x3e>
		return -EINVAL;
    ce62:	f06f 0015 	mvn.w	r0, #21
    ce66:	e7f8      	b.n	ce5a <uplink_aggregator_get+0x46>
    ce68:	2000cff8 	.word	0x2000cff8
    ce6c:	2000e290 	.word	0x2000e290

0000ce70 <downlink_aggregator_get>:




int downlink_aggregator_get(struct downlink_data_packet *out_data)
{
    ce70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	//LOG_INF ("downlink_aggregator_get called"); //Super spammy.
	void  *fifo_data;
	int   err = 0;
	
	if (out_data == NULL) {
    ce74:	4604      	mov	r4, r0
{
    ce76:	af00      	add	r7, sp, #0
	if (out_data == NULL) {
    ce78:	2800      	cmp	r0, #0
    ce7a:	d039      	beq.n	cef0 <downlink_aggregator_get+0x80>
    ce7c:	2200      	movs	r2, #0
    ce7e:	2300      	movs	r3, #0
    ce80:	481d      	ldr	r0, [pc, #116]	; (cef8 <downlink_aggregator_get+0x88>)
    ce82:	f01c fba7 	bl	295d4 <z_impl_k_queue_get>
		return -EINVAL;
	}


	fifo_data = k_fifo_get(&downlink_aggregator_fifo, K_NO_WAIT);
	if (fifo_data == NULL) {
    ce86:	4605      	mov	r5, r0
    ce88:	b378      	cbz	r0, ceea <downlink_aggregator_get+0x7a>
	__asm__ volatile(
    ce8a:	f04f 0320 	mov.w	r3, #32
    ce8e:	f3ef 8611 	mrs	r6, BASEPRI
    ce92:	f383 8812 	msr	BASEPRI_MAX, r3
    ce96:	f3bf 8f6f 	isb	sy
    ce9a:	2267      	movs	r2, #103	; 0x67
    ce9c:	1d01      	adds	r1, r0, #4
    ce9e:	4620      	mov	r0, r4
    cea0:	f029 fb42 	bl	36528 <memcpy>
	uint32_t lock = irq_lock();


	memcpy(out_data, ((struct downlink_fifo_entry *)fifo_data)->data,
	       sizeof(struct downlink_data_packet));
	LOG_INF ("downlink_aggregator_get: %s", out_data->data);
    cea4:	46e8      	mov	r8, sp
    cea6:	b088      	sub	sp, #32
    cea8:	466a      	mov	r2, sp
    ceaa:	4b14      	ldr	r3, [pc, #80]	; (cefc <downlink_aggregator_get+0x8c>)
    ceac:	3403      	adds	r4, #3
    ceae:	6153      	str	r3, [r2, #20]
    ceb0:	f44f 7300 	mov.w	r3, #512	; 0x200
    ceb4:	8393      	strh	r3, [r2, #28]
    ceb6:	4b12      	ldr	r3, [pc, #72]	; (cf00 <downlink_aggregator_get+0x90>)
    ceb8:	6194      	str	r4, [r2, #24]
    ceba:	f842 3f10 	str.w	r3, [r2, #16]!
    cebe:	2300      	movs	r3, #0
    cec0:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
    cec4:	480f      	ldr	r0, [pc, #60]	; (cf04 <downlink_aggregator_get+0x94>)
    cec6:	f003 f9b5 	bl	10234 <z_impl_z_log_msg_static_create>
	k_free(fifo_data);
    ceca:	4628      	mov	r0, r5
    cecc:	46c5      	mov	sp, r8
    cece:	f029 faf1 	bl	364b4 <k_free>
	int   err = 0;
    ced2:	2000      	movs	r0, #0
	downlink_entry_count--;
    ced4:	4a0c      	ldr	r2, [pc, #48]	; (cf08 <downlink_aggregator_get+0x98>)
    ced6:	6813      	ldr	r3, [r2, #0]
    ced8:	3b01      	subs	r3, #1
    ceda:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    cedc:	f386 8811 	msr	BASEPRI, r6
    cee0:	f3bf 8f6f 	isb	sy

exit:
	irq_unlock(lock);
	return err;
}
    cee4:	46bd      	mov	sp, r7
    cee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = -ENODATA;
    ceea:	f06f 003c 	mvn.w	r0, #60	; 0x3c
    ceee:	e7f5      	b.n	cedc <downlink_aggregator_get+0x6c>
		return -EINVAL;
    cef0:	f06f 0015 	mvn.w	r0, #21
    cef4:	e7f6      	b.n	cee4 <downlink_aggregator_get+0x74>
    cef6:	bf00      	nop
    cef8:	2000cfa4 	.word	0x2000cfa4
    cefc:	000399d1 	.word	0x000399d1
    cf00:	01000003 	.word	0x01000003
    cf04:	00037988 	.word	0x00037988
    cf08:	2000e28c 	.word	0x2000e28c

0000cf0c <downlink_aggregator_put>:

int downlink_aggregator_put(struct downlink_data_packet in_data)
{
    cf0c:	b084      	sub	sp, #16
    cf0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cf12:	b086      	sub	sp, #24
    cf14:	af00      	add	r7, sp, #0
    cf16:	f107 0430 	add.w	r4, r7, #48	; 0x30
    cf1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	__asm__ volatile(
    cf1e:	f04f 0320 	mov.w	r3, #32
    cf22:	f3ef 8611 	mrs	r6, BASEPRI
    cf26:	f383 8812 	msr	BASEPRI_MAX, r3
    cf2a:	f3bf 8f6f 	isb	sy
	struct downlink_fifo_entry *fifo_data = NULL;
	uint32_t  lock = irq_lock();
	int	err  = 0;
	LOG_INF ("downlink_aggregator_put called");
    cf2e:	4b2e      	ldr	r3, [pc, #184]	; (cfe8 <downlink_aggregator_put+0xdc>)
    cf30:	617b      	str	r3, [r7, #20]
    cf32:	2302      	movs	r3, #2
    cf34:	613b      	str	r3, [r7, #16]
	if (downlink_entry_count == FIFO_MAX_ELEMENT_COUNT) {
    cf36:	4d2d      	ldr	r5, [pc, #180]	; (cfec <downlink_aggregator_put+0xe0>)
    cf38:	2300      	movs	r3, #0
    cf3a:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    cf3e:	482c      	ldr	r0, [pc, #176]	; (cff0 <downlink_aggregator_put+0xe4>)
    cf40:	f107 0210 	add.w	r2, r7, #16
    cf44:	f003 f976 	bl	10234 <z_impl_z_log_msg_static_create>
    cf48:	682b      	ldr	r3, [r5, #0]
    cf4a:	2b0c      	cmp	r3, #12
    cf4c:	d007      	beq.n	cf5e <downlink_aggregator_put+0x52>

		downlink_entry_count--;
	}

	if (fifo_data == NULL) {
		fifo_data = k_malloc(sizeof(struct downlink_fifo_entry));
    cf4e:	206c      	movs	r0, #108	; 0x6c
    cf50:	f029 fab7 	bl	364c2 <k_malloc>
	}

	if (fifo_data == NULL) {
    cf54:	4604      	mov	r4, r0
    cf56:	b9c8      	cbnz	r0, cf8c <downlink_aggregator_put+0x80>
		err = -ENOMEM;
    cf58:	f06f 000b 	mvn.w	r0, #11
    cf5c:	e039      	b.n	cfd2 <downlink_aggregator_put+0xc6>
    cf5e:	2200      	movs	r2, #0
    cf60:	2300      	movs	r3, #0
    cf62:	4824      	ldr	r0, [pc, #144]	; (cff4 <downlink_aggregator_put+0xe8>)
    cf64:	f01c fb36 	bl	295d4 <z_impl_k_queue_get>
		__ASSERT(fifo_data != NULL, "fifo_data should not be NULL");
    cf68:	4604      	mov	r4, r0
    cf6a:	b960      	cbnz	r0, cf86 <downlink_aggregator_put+0x7a>
    cf6c:	4922      	ldr	r1, [pc, #136]	; (cff8 <downlink_aggregator_put+0xec>)
    cf6e:	2391      	movs	r3, #145	; 0x91
    cf70:	4a22      	ldr	r2, [pc, #136]	; (cffc <downlink_aggregator_put+0xf0>)
    cf72:	4823      	ldr	r0, [pc, #140]	; (d000 <downlink_aggregator_put+0xf4>)
    cf74:	f022 fa26 	bl	2f3c4 <assert_print>
    cf78:	4822      	ldr	r0, [pc, #136]	; (d004 <downlink_aggregator_put+0xf8>)
    cf7a:	f022 fa23 	bl	2f3c4 <assert_print>
    cf7e:	2191      	movs	r1, #145	; 0x91
    cf80:	481e      	ldr	r0, [pc, #120]	; (cffc <downlink_aggregator_put+0xf0>)
    cf82:	f022 fa18 	bl	2f3b6 <assert_post_action>
		downlink_entry_count--;
    cf86:	682b      	ldr	r3, [r5, #0]
    cf88:	3b01      	subs	r3, #1
    cf8a:	602b      	str	r3, [r5, #0]
    cf8c:	2267      	movs	r2, #103	; 0x67
    cf8e:	f107 0130 	add.w	r1, r7, #48	; 0x30
    cf92:	1d20      	adds	r0, r4, #4
    cf94:	f029 fac8 	bl	36528 <memcpy>
		goto exit;
	}
	
	memcpy(fifo_data->data, &in_data, sizeof(struct downlink_data_packet));
	LOG_INF("downlink_aggregator_put: %s", in_data.data);
    cf98:	46e8      	mov	r8, sp
    cf9a:	b088      	sub	sp, #32
    cf9c:	466a      	mov	r2, sp
    cf9e:	4b1a      	ldr	r3, [pc, #104]	; (d008 <downlink_aggregator_put+0xfc>)
    cfa0:	6153      	str	r3, [r2, #20]
    cfa2:	f107 0333 	add.w	r3, r7, #51	; 0x33
    cfa6:	6193      	str	r3, [r2, #24]
    cfa8:	f44f 7300 	mov.w	r3, #512	; 0x200
    cfac:	8393      	strh	r3, [r2, #28]
    cfae:	4b17      	ldr	r3, [pc, #92]	; (d00c <downlink_aggregator_put+0x100>)
    cfb0:	f842 3f10 	str.w	r3, [r2, #16]!
    cfb4:	2300      	movs	r3, #0
    cfb6:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
    cfba:	480d      	ldr	r0, [pc, #52]	; (cff0 <downlink_aggregator_put+0xe4>)
    cfbc:	f003 f93a 	bl	10234 <z_impl_z_log_msg_static_create>
	k_fifo_put(&downlink_aggregator_fifo, fifo_data);
    cfc0:	480c      	ldr	r0, [pc, #48]	; (cff4 <downlink_aggregator_put+0xe8>)
    cfc2:	46c5      	mov	sp, r8
    cfc4:	4621      	mov	r1, r4
    cfc6:	f029 f8ba 	bl	3613e <k_queue_append>
	int	err  = 0;
    cfca:	2000      	movs	r0, #0
	downlink_entry_count++;
    cfcc:	682b      	ldr	r3, [r5, #0]
    cfce:	3301      	adds	r3, #1
    cfd0:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    cfd2:	f386 8811 	msr	BASEPRI, r6
    cfd6:	f3bf 8f6f 	isb	sy

exit:
	irq_unlock(lock);
	return err;
}
    cfda:	3718      	adds	r7, #24
    cfdc:	46bd      	mov	sp, r7
    cfde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    cfe2:	b004      	add	sp, #16
    cfe4:	4770      	bx	lr
    cfe6:	bf00      	nop
    cfe8:	000399ed 	.word	0x000399ed
    cfec:	2000e28c 	.word	0x2000e28c
    cff0:	00037988 	.word	0x00037988
    cff4:	2000cfa4 	.word	0x2000cfa4
    cff8:	0003997c 	.word	0x0003997c
    cffc:	00039947 	.word	0x00039947
    d000:	00039995 	.word	0x00039995
    d004:	000399b2 	.word	0x000399b2
    d008:	00039a0c 	.word	0x00039a0c
    d00c:	01000003 	.word	0x01000003

0000d010 <parse_string>:
{
    d010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
    d014:	680a      	ldr	r2, [r1, #0]
    d016:	688b      	ldr	r3, [r1, #8]
{
    d018:	4606      	mov	r6, r0
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
    d01a:	1c5c      	adds	r4, r3, #1
    if (buffer_at_offset(input_buffer)[0] != '\"')
    d01c:	18d0      	adds	r0, r2, r3
    d01e:	5cd3      	ldrb	r3, [r2, r3]
{
    d020:	460f      	mov	r7, r1
    if (buffer_at_offset(input_buffer)[0] != '\"')
    d022:	2b22      	cmp	r3, #34	; 0x22
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
    d024:	4414      	add	r4, r2
    if (buffer_at_offset(input_buffer)[0] != '\"')
    d026:	f040 80e1 	bne.w	d1ec <parse_string+0x1dc>
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
    d02a:	4625      	mov	r5, r4
        size_t skipped_bytes = 0;
    d02c:	2300      	movs	r3, #0
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
    d02e:	f8d1 c004 	ldr.w	ip, [r1, #4]
    d032:	1aa9      	subs	r1, r5, r2
    d034:	4561      	cmp	r1, ip
    d036:	f080 80d9 	bcs.w	d1ec <parse_string+0x1dc>
    d03a:	7829      	ldrb	r1, [r5, #0]
    d03c:	2922      	cmp	r1, #34	; 0x22
    d03e:	d119      	bne.n	d074 <parse_string+0x64>
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
    d040:	f1c3 0301 	rsb	r3, r3, #1
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
    d044:	1a28      	subs	r0, r5, r0
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
    d046:	693a      	ldr	r2, [r7, #16]
    d048:	4418      	add	r0, r3
    d04a:	4790      	blx	r2
        if (output == NULL)
    d04c:	4681      	mov	r9, r0
    d04e:	2800      	cmp	r0, #0
    d050:	f000 80cc 	beq.w	d1ec <parse_string+0x1dc>
    d054:	4680      	mov	r8, r0
    while (input_pointer < input_end)
    d056:	42ac      	cmp	r4, r5
    d058:	d316      	bcc.n	d088 <parse_string+0x78>
    *output_pointer = '\0';
    d05a:	2300      	movs	r3, #0
    d05c:	f888 3000 	strb.w	r3, [r8]
    item->type = cJSON_String;
    d060:	2310      	movs	r3, #16
    return true;
    d062:	2001      	movs	r0, #1
    item->valuestring = (char*)output;
    d064:	e9c6 3903 	strd	r3, r9, [r6, #12]
    input_buffer->offset = (size_t) (input_end - input_buffer->content);
    d068:	683b      	ldr	r3, [r7, #0]
    d06a:	1aed      	subs	r5, r5, r3
    input_buffer->offset++;
    d06c:	3501      	adds	r5, #1
    d06e:	60bd      	str	r5, [r7, #8]
}
    d070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if (input_end[0] == '\\')
    d074:	295c      	cmp	r1, #92	; 0x5c
    d076:	d105      	bne.n	d084 <parse_string+0x74>
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
    d078:	3501      	adds	r5, #1
    d07a:	1aa9      	subs	r1, r5, r2
    d07c:	4561      	cmp	r1, ip
    d07e:	f080 80b5 	bcs.w	d1ec <parse_string+0x1dc>
                skipped_bytes++;
    d082:	3301      	adds	r3, #1
            input_end++;
    d084:	3501      	adds	r5, #1
    d086:	e7d4      	b.n	d032 <parse_string+0x22>
        if (*input_pointer != '\\')
    d088:	7823      	ldrb	r3, [r4, #0]
    d08a:	2b5c      	cmp	r3, #92	; 0x5c
    d08c:	d006      	beq.n	d09c <parse_string+0x8c>
            *output_pointer++ = *input_pointer++;
    d08e:	3401      	adds	r4, #1
    d090:	f108 0201 	add.w	r2, r8, #1
    d094:	f888 3000 	strb.w	r3, [r8]
    d098:	4690      	mov	r8, r2
    d09a:	e7dc      	b.n	d056 <parse_string+0x46>
            switch (input_pointer[1])
    d09c:	7863      	ldrb	r3, [r4, #1]
    d09e:	2b75      	cmp	r3, #117	; 0x75
    d0a0:	d80a      	bhi.n	d0b8 <parse_string+0xa8>
    d0a2:	2b6d      	cmp	r3, #109	; 0x6d
    d0a4:	d80f      	bhi.n	d0c6 <parse_string+0xb6>
    d0a6:	2b62      	cmp	r3, #98	; 0x62
    d0a8:	d02a      	beq.n	d100 <parse_string+0xf0>
    d0aa:	d823      	bhi.n	d0f4 <parse_string+0xe4>
    d0ac:	2b2f      	cmp	r3, #47	; 0x2f
    d0ae:	d039      	beq.n	d124 <parse_string+0x114>
    d0b0:	2b5c      	cmp	r3, #92	; 0x5c
    d0b2:	d037      	beq.n	d124 <parse_string+0x114>
    d0b4:	2b22      	cmp	r3, #34	; 0x22
    d0b6:	d035      	beq.n	d124 <parse_string+0x114>
        input_buffer->hooks.deallocate(output);
    d0b8:	4648      	mov	r0, r9
    d0ba:	697b      	ldr	r3, [r7, #20]
    d0bc:	4798      	blx	r3
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
    d0be:	683b      	ldr	r3, [r7, #0]
    d0c0:	1ae4      	subs	r4, r4, r3
    d0c2:	60bc      	str	r4, [r7, #8]
    d0c4:	e095      	b.n	d1f2 <parse_string+0x1e2>
            switch (input_pointer[1])
    d0c6:	3b6e      	subs	r3, #110	; 0x6e
    d0c8:	2b07      	cmp	r3, #7
    d0ca:	d8f5      	bhi.n	d0b8 <parse_string+0xa8>
    d0cc:	a201      	add	r2, pc, #4	; (adr r2, d0d4 <parse_string+0xc4>)
    d0ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d0d2:	bf00      	nop
    d0d4:	0000d10d 	.word	0x0000d10d
    d0d8:	0000d0b9 	.word	0x0000d0b9
    d0dc:	0000d0b9 	.word	0x0000d0b9
    d0e0:	0000d0b9 	.word	0x0000d0b9
    d0e4:	0000d115 	.word	0x0000d115
    d0e8:	0000d0b9 	.word	0x0000d0b9
    d0ec:	0000d11d 	.word	0x0000d11d
    d0f0:	0000d12b 	.word	0x0000d12b
    d0f4:	2b66      	cmp	r3, #102	; 0x66
    d0f6:	d1df      	bne.n	d0b8 <parse_string+0xa8>
                    break;
    d0f8:	230c      	movs	r3, #12
                    *output_pointer++ = '\f';
    d0fa:	f108 0201 	add.w	r2, r8, #1
                    break;
    d0fe:	e002      	b.n	d106 <parse_string+0xf6>
                    break;
    d100:	2308      	movs	r3, #8
                    *output_pointer++ = '\b';
    d102:	f108 0201 	add.w	r2, r8, #1
            unsigned char sequence_length = 2;
    d106:	2102      	movs	r1, #2
            input_pointer += sequence_length;
    d108:	440c      	add	r4, r1
    d10a:	e7c3      	b.n	d094 <parse_string+0x84>
                    break;
    d10c:	230a      	movs	r3, #10
                    *output_pointer++ = '\n';
    d10e:	f108 0201 	add.w	r2, r8, #1
                    break;
    d112:	e7f8      	b.n	d106 <parse_string+0xf6>
                    break;
    d114:	230d      	movs	r3, #13
                    *output_pointer++ = '\r';
    d116:	f108 0201 	add.w	r2, r8, #1
                    break;
    d11a:	e7f4      	b.n	d106 <parse_string+0xf6>
                    break;
    d11c:	2309      	movs	r3, #9
                    *output_pointer++ = '\t';
    d11e:	f108 0201 	add.w	r2, r8, #1
                    break;
    d122:	e7f0      	b.n	d106 <parse_string+0xf6>
                    *output_pointer++ = input_pointer[1];
    d124:	f108 0201 	add.w	r2, r8, #1
                    break;
    d128:	e7ed      	b.n	d106 <parse_string+0xf6>
    if ((input_end - first_sequence) < 6)
    d12a:	1b2b      	subs	r3, r5, r4
    d12c:	2b05      	cmp	r3, #5
    d12e:	ddc3      	ble.n	d0b8 <parse_string+0xa8>
    first_code = parse_hex4(first_sequence + 2);
    d130:	1ca0      	adds	r0, r4, #2
    d132:	f021 fe15 	bl	2ed60 <parse_hex4>
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
    d136:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
    d13a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    first_code = parse_hex4(first_sequence + 2);
    d13e:	4682      	mov	sl, r0
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
    d140:	d3ba      	bcc.n	d0b8 <parse_string+0xa8>
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
    d142:	f5a0 4358 	sub.w	r3, r0, #55296	; 0xd800
    d146:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    d14a:	d22c      	bcs.n	d1a6 <parse_string+0x196>
        const unsigned char *second_sequence = first_sequence + 6;
    d14c:	1da3      	adds	r3, r4, #6
        if ((input_end - second_sequence) < 6)
    d14e:	1aeb      	subs	r3, r5, r3
    d150:	2b05      	cmp	r3, #5
    d152:	ddb1      	ble.n	d0b8 <parse_string+0xa8>
        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
    d154:	79a3      	ldrb	r3, [r4, #6]
    d156:	2b5c      	cmp	r3, #92	; 0x5c
    d158:	d1ae      	bne.n	d0b8 <parse_string+0xa8>
    d15a:	79e3      	ldrb	r3, [r4, #7]
    d15c:	2b75      	cmp	r3, #117	; 0x75
    d15e:	d1ab      	bne.n	d0b8 <parse_string+0xa8>
        second_code = parse_hex4(second_sequence + 2);
    d160:	f104 0008 	add.w	r0, r4, #8
    d164:	f021 fdfc 	bl	2ed60 <parse_hex4>
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
    d168:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
    d16c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    d170:	d2a2      	bcs.n	d0b8 <parse_string+0xa8>
        sequence_length = 12; /* \uXXXX\uXXXX */
    d172:	210c      	movs	r1, #12
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
    d174:	4b20      	ldr	r3, [pc, #128]	; (d1f8 <parse_string+0x1e8>)
    d176:	f3c0 0009 	ubfx	r0, r0, #0, #10
    d17a:	ea03 238a 	and.w	r3, r3, sl, lsl #10
    d17e:	4303      	orrs	r3, r0
    d180:	f503 3a80 	add.w	sl, r3, #65536	; 0x10000
        first_byte_mark = 0xF0; /* 11110000 */
    d184:	20f0      	movs	r0, #240	; 0xf0
        utf8_length = 4;
    d186:	2204      	movs	r2, #4
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
    d188:	f102 3cff 	add.w	ip, r2, #4294967295
    d18c:	fa58 fc8c 	uxtab	ip, r8, ip
    d190:	45e0      	cmp	r8, ip
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
    d192:	fa5f f38a 	uxtb.w	r3, sl
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
    d196:	d120      	bne.n	d1da <parse_string+0x1ca>
    if (utf8_length > 1)
    d198:	2a01      	cmp	r2, #1
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
    d19a:	bf14      	ite	ne
    d19c:	4303      	orrne	r3, r0
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
    d19e:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
    *output_pointer += utf8_length;
    d1a2:	4442      	add	r2, r8
                    if (sequence_length == 0)
    d1a4:	e7b0      	b.n	d108 <parse_string+0xf8>
    if (codepoint < 0x80)
    d1a6:	287f      	cmp	r0, #127	; 0x7f
    d1a8:	d90b      	bls.n	d1c2 <parse_string+0x1b2>
    else if (codepoint < 0x800)
    d1aa:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    d1ae:	d30c      	bcc.n	d1ca <parse_string+0x1ba>
    else if (codepoint < 0x10000)
    d1b0:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    d1b4:	d30d      	bcc.n	d1d2 <parse_string+0x1c2>
    else if (codepoint <= 0x10FFFF)
    d1b6:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
    d1ba:	f4bf af7d 	bcs.w	d0b8 <parse_string+0xa8>
        sequence_length = 6; /* \uXXXX */
    d1be:	2106      	movs	r1, #6
    d1c0:	e7e0      	b.n	d184 <parse_string+0x174>
    d1c2:	2106      	movs	r1, #6
    unsigned char first_byte_mark = 0;
    d1c4:	2000      	movs	r0, #0
        utf8_length = 1;
    d1c6:	2201      	movs	r2, #1
    d1c8:	e7de      	b.n	d188 <parse_string+0x178>
        sequence_length = 6; /* \uXXXX */
    d1ca:	2106      	movs	r1, #6
        first_byte_mark = 0xC0; /* 11000000 */
    d1cc:	20c0      	movs	r0, #192	; 0xc0
        utf8_length = 2;
    d1ce:	2202      	movs	r2, #2
    d1d0:	e7da      	b.n	d188 <parse_string+0x178>
        sequence_length = 6; /* \uXXXX */
    d1d2:	2106      	movs	r1, #6
        first_byte_mark = 0xE0; /* 11100000 */
    d1d4:	20e0      	movs	r0, #224	; 0xe0
        utf8_length = 3;
    d1d6:	2203      	movs	r2, #3
    d1d8:	e7d6      	b.n	d188 <parse_string+0x178>
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
    d1da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    d1de:	f063 037f 	orn	r3, r3, #127	; 0x7f
    d1e2:	f80c 3901 	strb.w	r3, [ip], #-1
        codepoint >>= 6;
    d1e6:	ea4f 1a9a 	mov.w	sl, sl, lsr #6
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
    d1ea:	e7d1      	b.n	d190 <parse_string+0x180>
    if (input_pointer != NULL)
    d1ec:	2c00      	cmp	r4, #0
    d1ee:	f47f af66 	bne.w	d0be <parse_string+0xae>
    return false;
    d1f2:	2000      	movs	r0, #0
    d1f4:	e73c      	b.n	d070 <parse_string+0x60>
    d1f6:	bf00      	nop
    d1f8:	000ffc00 	.word	0x000ffc00

0000d1fc <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
    d1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d1fe:	460d      	mov	r5, r1
    cJSON *current_element = NULL;

    if ((object == NULL) || (name == NULL))
    d200:	4604      	mov	r4, r0
    d202:	2800      	cmp	r0, #0
    d204:	d034      	beq.n	d270 <get_object_item+0x74>
    d206:	2900      	cmp	r1, #0
    d208:	d031      	beq.n	d26e <get_object_item+0x72>
    {
        return NULL;
    }

    current_element = object->child;
    d20a:	6884      	ldr	r4, [r0, #8]
    if (case_sensitive)
    d20c:	b9fa      	cbnz	r2, d24e <get_object_item+0x52>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    d20e:	4e19      	ldr	r6, [pc, #100]	; (d274 <get_object_item+0x78>)
            current_element = current_element->next;
        }
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
    d210:	b374      	cbz	r4, d270 <get_object_item+0x74>
    d212:	6a23      	ldr	r3, [r4, #32]
    if ((string1 == NULL) || (string2 == NULL))
    d214:	b1c3      	cbz	r3, d248 <get_object_item+0x4c>
    if (string1 == string2)
    d216:	42ab      	cmp	r3, r5
    d218:	d021      	beq.n	d25e <get_object_item+0x62>
    d21a:	f105 3cff 	add.w	ip, r5, #4294967295
    d21e:	3b01      	subs	r3, #1
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    d220:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
    d224:	460f      	mov	r7, r1
    d226:	5c72      	ldrb	r2, [r6, r1]
    d228:	f002 0203 	and.w	r2, r2, #3
    d22c:	2a01      	cmp	r2, #1
    d22e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    d232:	bf08      	it	eq
    d234:	f101 0720 	addeq.w	r7, r1, #32
    d238:	5cb0      	ldrb	r0, [r6, r2]
    d23a:	f000 0003 	and.w	r0, r0, #3
    d23e:	2801      	cmp	r0, #1
    d240:	bf08      	it	eq
    d242:	3220      	addeq	r2, #32
    d244:	4297      	cmp	r7, r2
    d246:	d00f      	beq.n	d268 <get_object_item+0x6c>
        {
            current_element = current_element->next;
    d248:	6824      	ldr	r4, [r4, #0]
    d24a:	e7e1      	b.n	d210 <get_object_item+0x14>
            current_element = current_element->next;
    d24c:	6824      	ldr	r4, [r4, #0]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
    d24e:	b17c      	cbz	r4, d270 <get_object_item+0x74>
    d250:	6a21      	ldr	r1, [r4, #32]
    d252:	b121      	cbz	r1, d25e <get_object_item+0x62>
    d254:	4628      	mov	r0, r5
    d256:	f7fb ffda 	bl	920e <strcmp>
    d25a:	2800      	cmp	r0, #0
    d25c:	d1f6      	bne.n	d24c <get_object_item+0x50>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
    d25e:	6a23      	ldr	r3, [r4, #32]
        return NULL;
    d260:	2b00      	cmp	r3, #0
    d262:	bf08      	it	eq
    d264:	2400      	moveq	r4, #0
    d266:	e003      	b.n	d270 <get_object_item+0x74>
        if (*string1 == '\0')
    d268:	2900      	cmp	r1, #0
    d26a:	d1d9      	bne.n	d220 <get_object_item+0x24>
    d26c:	e7f7      	b.n	d25e <get_object_item+0x62>
        return NULL;
    d26e:	460c      	mov	r4, r1
        return NULL;
    }

    return current_element;
}
    d270:	4620      	mov	r0, r4
    d272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d274:	00041f02 	.word	0x00041f02

0000d278 <cJSON_Delete>:
{
    d278:	b570      	push	{r4, r5, r6, lr}
    d27a:	4604      	mov	r4, r0
    d27c:	4d0f      	ldr	r5, [pc, #60]	; (d2bc <cJSON_Delete+0x44>)
    while (item != NULL)
    d27e:	b904      	cbnz	r4, d282 <cJSON_Delete+0xa>
}
    d280:	bd70      	pop	{r4, r5, r6, pc}
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
    d282:	68e3      	ldr	r3, [r4, #12]
        next = item->next;
    d284:	6826      	ldr	r6, [r4, #0]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
    d286:	05d9      	lsls	r1, r3, #23
    d288:	d404      	bmi.n	d294 <cJSON_Delete+0x1c>
    d28a:	68a0      	ldr	r0, [r4, #8]
    d28c:	b970      	cbnz	r0, d2ac <cJSON_Delete+0x34>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
    d28e:	6920      	ldr	r0, [r4, #16]
            global_hooks.deallocate(item->valuestring);
    d290:	686b      	ldr	r3, [r5, #4]
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
    d292:	b988      	cbnz	r0, d2b8 <cJSON_Delete+0x40>
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
    d294:	68e3      	ldr	r3, [r4, #12]
    d296:	059b      	lsls	r3, r3, #22
    d298:	d403      	bmi.n	d2a2 <cJSON_Delete+0x2a>
    d29a:	6a20      	ldr	r0, [r4, #32]
    d29c:	b108      	cbz	r0, d2a2 <cJSON_Delete+0x2a>
            global_hooks.deallocate(item->string);
    d29e:	686b      	ldr	r3, [r5, #4]
    d2a0:	4798      	blx	r3
        global_hooks.deallocate(item);
    d2a2:	4620      	mov	r0, r4
    d2a4:	686b      	ldr	r3, [r5, #4]
    d2a6:	4798      	blx	r3
        item = next;
    d2a8:	4634      	mov	r4, r6
    d2aa:	e7e8      	b.n	d27e <cJSON_Delete+0x6>
            cJSON_Delete(item->child);
    d2ac:	f7ff ffe4 	bl	d278 <cJSON_Delete>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
    d2b0:	68e3      	ldr	r3, [r4, #12]
    d2b2:	05da      	lsls	r2, r3, #23
    d2b4:	d5eb      	bpl.n	d28e <cJSON_Delete+0x16>
    d2b6:	e7ed      	b.n	d294 <cJSON_Delete+0x1c>
            global_hooks.deallocate(item->valuestring);
    d2b8:	4798      	blx	r3
    d2ba:	e7eb      	b.n	d294 <cJSON_Delete+0x1c>
    d2bc:	2000c7f4 	.word	0x2000c7f4

0000d2c0 <cJSON_ParseWithLengthOpts>:
{
    d2c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d2c4:	4605      	mov	r5, r0
    global_error.json = NULL;
    d2c6:	f04f 0900 	mov.w	r9, #0
{
    d2ca:	b089      	sub	sp, #36	; 0x24
    global_error.json = NULL;
    d2cc:	4f2f      	ldr	r7, [pc, #188]	; (d38c <cJSON_ParseWithLengthOpts+0xcc>)
{
    d2ce:	460c      	mov	r4, r1
    d2d0:	4616      	mov	r6, r2
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
    d2d2:	2100      	movs	r1, #0
    d2d4:	221c      	movs	r2, #28
    d2d6:	a801      	add	r0, sp, #4
{
    d2d8:	4698      	mov	r8, r3
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
    d2da:	f029 f945 	bl	36568 <memset>
    global_error.position = 0;
    d2de:	e9c7 9900 	strd	r9, r9, [r7]
    if (value == NULL || 0 == buffer_length)
    d2e2:	b925      	cbnz	r5, d2ee <cJSON_ParseWithLengthOpts+0x2e>
    return NULL;
    d2e4:	2400      	movs	r4, #0
}
    d2e6:	4620      	mov	r0, r4
    d2e8:	b009      	add	sp, #36	; 0x24
    d2ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (value == NULL || 0 == buffer_length)
    d2ee:	2c00      	cmp	r4, #0
    d2f0:	d03d      	beq.n	d36e <cJSON_ParseWithLengthOpts+0xae>
    buffer.hooks = global_hooks;
    d2f2:	4b27      	ldr	r3, [pc, #156]	; (d390 <cJSON_ParseWithLengthOpts+0xd0>)
    buffer.length = buffer_length;
    d2f4:	e9cd 5401 	strd	r5, r4, [sp, #4]
    buffer.hooks = global_hooks;
    d2f8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    d2fc:	ab08      	add	r3, sp, #32
    d2fe:	e903 0007 	stmdb	r3, {r0, r1, r2}
    item = cJSON_New_Item(&global_hooks);
    d302:	f021 fd63 	bl	2edcc <cJSON_New_Item.isra.0>
    if (item == NULL) /* memory fail */
    d306:	4604      	mov	r4, r0
    d308:	2800      	cmp	r0, #0
    d30a:	d030      	beq.n	d36e <cJSON_ParseWithLengthOpts+0xae>
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
    d30c:	9801      	ldr	r0, [sp, #4]
    d30e:	b150      	cbz	r0, d326 <cJSON_ParseWithLengthOpts+0x66>
    d310:	9b03      	ldr	r3, [sp, #12]
    d312:	b9e3      	cbnz	r3, d34e <cJSON_ParseWithLengthOpts+0x8e>
    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
    d314:	9b02      	ldr	r3, [sp, #8]
    d316:	2b04      	cmp	r3, #4
    d318:	d904      	bls.n	d324 <cJSON_ParseWithLengthOpts+0x64>
    d31a:	2203      	movs	r2, #3
    d31c:	491d      	ldr	r1, [pc, #116]	; (d394 <cJSON_ParseWithLengthOpts+0xd4>)
    d31e:	f029 fa97 	bl	36850 <strncmp>
    d322:	b188      	cbz	r0, d348 <cJSON_ParseWithLengthOpts+0x88>
    return buffer;
    d324:	a801      	add	r0, sp, #4
    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
    d326:	f021 fd3a 	bl	2ed9e <buffer_skip_whitespace>
    d32a:	4601      	mov	r1, r0
    d32c:	4620      	mov	r0, r4
    d32e:	f7fb ff83 	bl	9238 <parse_value>
    d332:	b1c8      	cbz	r0, d368 <cJSON_ParseWithLengthOpts+0xa8>
    if (require_null_terminated)
    d334:	f1b8 0f00 	cmp.w	r8, #0
    d338:	d10b      	bne.n	d352 <cJSON_ParseWithLengthOpts+0x92>
    if (return_parse_end)
    d33a:	2e00      	cmp	r6, #0
    d33c:	d0d3      	beq.n	d2e6 <cJSON_ParseWithLengthOpts+0x26>
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
    d33e:	9b01      	ldr	r3, [sp, #4]
    d340:	9a03      	ldr	r2, [sp, #12]
    d342:	4413      	add	r3, r2
    d344:	6033      	str	r3, [r6, #0]
    d346:	e7ce      	b.n	d2e6 <cJSON_ParseWithLengthOpts+0x26>
        buffer->offset += 3;
    d348:	2303      	movs	r3, #3
    d34a:	9303      	str	r3, [sp, #12]
    d34c:	e7ea      	b.n	d324 <cJSON_ParseWithLengthOpts+0x64>
        return NULL;
    d34e:	4648      	mov	r0, r9
    d350:	e7e9      	b.n	d326 <cJSON_ParseWithLengthOpts+0x66>
        buffer_skip_whitespace(&buffer);
    d352:	a801      	add	r0, sp, #4
    d354:	f021 fd23 	bl	2ed9e <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
    d358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    d35c:	4293      	cmp	r3, r2
    d35e:	d203      	bcs.n	d368 <cJSON_ParseWithLengthOpts+0xa8>
    d360:	9a01      	ldr	r2, [sp, #4]
    d362:	5cd3      	ldrb	r3, [r2, r3]
    d364:	2b00      	cmp	r3, #0
    d366:	d0e8      	beq.n	d33a <cJSON_ParseWithLengthOpts+0x7a>
        cJSON_Delete(item);
    d368:	4620      	mov	r0, r4
    d36a:	f7ff ff85 	bl	d278 <cJSON_Delete>
        if (buffer.offset < buffer.length)
    d36e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    d372:	4293      	cmp	r3, r2
    d374:	d301      	bcc.n	d37a <cJSON_ParseWithLengthOpts+0xba>
        else if (buffer.length > 0)
    d376:	b132      	cbz	r2, d386 <cJSON_ParseWithLengthOpts+0xc6>
            local_error.position = buffer.length - 1;
    d378:	1e53      	subs	r3, r2, #1
        if (return_parse_end != NULL)
    d37a:	b10e      	cbz	r6, d380 <cJSON_ParseWithLengthOpts+0xc0>
            *return_parse_end = (const char*)local_error.json + local_error.position;
    d37c:	18ea      	adds	r2, r5, r3
    d37e:	6032      	str	r2, [r6, #0]
        global_error = local_error;
    d380:	e9c7 5300 	strd	r5, r3, [r7]
    d384:	e7ae      	b.n	d2e4 <cJSON_ParseWithLengthOpts+0x24>
        local_error.position = 0;
    d386:	4613      	mov	r3, r2
    d388:	e7f7      	b.n	d37a <cJSON_ParseWithLengthOpts+0xba>
    d38a:	bf00      	nop
    d38c:	2000e294 	.word	0x2000e294
    d390:	2000c7f4 	.word	0x2000c7f4
    d394:	00039a4a 	.word	0x00039a4a

0000d398 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    d398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d39c:	b091      	sub	sp, #68	; 0x44
    d39e:	9300      	str	r3, [sp, #0]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    d3a0:	f002 0304 	and.w	r3, r2, #4
    d3a4:	9301      	str	r3, [sp, #4]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    d3a6:	f3c2 03c2 	ubfx	r3, r2, #3, #3
    d3aa:	3301      	adds	r3, #1
    d3ac:	9304      	str	r3, [sp, #16]
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    d3ae:	0783      	lsls	r3, r0, #30
{
    d3b0:	4605      	mov	r5, r0
    d3b2:	460e      	mov	r6, r1
    d3b4:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
    d3b8:	9202      	str	r2, [sp, #8]
	if ((uintptr_t)packaged % sizeof(void *)) {
    d3ba:	f040 81fe 	bne.w	d7ba <cbvprintf_package+0x422>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
    d3be:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    d3c0:	b130      	cbz	r0, d3d0 <cbvprintf_package+0x38>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    d3c2:	2907      	cmp	r1, #7
    d3c4:	d809      	bhi.n	d3da <cbvprintf_package+0x42>
		return -ENOSPC;
    d3c6:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    d3ca:	b011      	add	sp, #68	; 0x44
    d3cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    d3d0:	f001 0607 	and.w	r6, r1, #7
    d3d4:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    d3d6:	f1c6 0608 	rsb	r6, r6, #8
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    d3da:	f04f 0800 	mov.w	r8, #0
	align = VA_STACK_ALIGN(char *);
    d3de:	f04f 0b04 	mov.w	fp, #4
	s = fmt--;
    d3e2:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
    d3e4:	4647      	mov	r7, r8
	s = fmt--;
    d3e6:	1e59      	subs	r1, r3, #1
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
    d3e8:	f04f 32ff 	mov.w	r2, #4294967295
	bool parsing = false;
    d3ec:	4643      	mov	r3, r8
	size = sizeof(char *);
    d3ee:	46da      	mov	sl, fp
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    d3f0:	f8cd 800c 	str.w	r8, [sp, #12]
			if (buf0 != NULL) {
    d3f4:	b10d      	cbz	r5, d3fa <cbvprintf_package+0x62>
				*(const char **)buf = s;
    d3f6:	9800      	ldr	r0, [sp, #0]
    d3f8:	6020      	str	r0, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    d3fa:	9804      	ldr	r0, [sp, #16]
    d3fc:	2800      	cmp	r0, #0
    d3fe:	f300 80e1 	bgt.w	d5c4 <cbvprintf_package+0x22c>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    d402:	489c      	ldr	r0, [pc, #624]	; (d674 <cbvprintf_package+0x2dc>)
    d404:	f8dd c000 	ldr.w	ip, [sp]
    d408:	4584      	cmp	ip, r0
    d40a:	d303      	bcc.n	d414 <cbvprintf_package+0x7c>
    d40c:	489a      	ldr	r0, [pc, #616]	; (d678 <cbvprintf_package+0x2e0>)
    d40e:	4584      	cmp	ip, r0
    d410:	f0c0 80d8 	bcc.w	d5c4 <cbvprintf_package+0x22c>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    d414:	f8dd c008 	ldr.w	ip, [sp, #8]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    d418:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    d41c:	f01c 0f02 	tst.w	ip, #2
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    d420:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    d424:	f000 80e9 	beq.w	d5fa <cbvprintf_package+0x262>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    d428:	f04f 0c00 	mov.w	ip, #0
    d42c:	e0d3      	b.n	d5d6 <cbvprintf_package+0x23e>
			switch (*fmt) {
    d42e:	287a      	cmp	r0, #122	; 0x7a
    d430:	d864      	bhi.n	d4fc <cbvprintf_package+0x164>
    d432:	284b      	cmp	r0, #75	; 0x4b
    d434:	d80f      	bhi.n	d456 <cbvprintf_package+0xbe>
    d436:	2847      	cmp	r0, #71	; 0x47
    d438:	d860      	bhi.n	d4fc <cbvprintf_package+0x164>
    d43a:	2829      	cmp	r0, #41	; 0x29
    d43c:	d82f      	bhi.n	d49e <cbvprintf_package+0x106>
    d43e:	2825      	cmp	r0, #37	; 0x25
    d440:	d05b      	beq.n	d4fa <cbvprintf_package+0x162>
    d442:	d85b      	bhi.n	d4fc <cbvprintf_package+0x164>
    d444:	2820      	cmp	r0, #32
    d446:	d07f      	beq.n	d548 <cbvprintf_package+0x1b0>
    d448:	f1a0 0923 	sub.w	r9, r0, #35	; 0x23
    d44c:	f1d9 0300 	rsbs	r3, r9, #0
    d450:	eb43 0309 	adc.w	r3, r3, r9
    d454:	e078      	b.n	d548 <cbvprintf_package+0x1b0>
    d456:	f1a0 0e4c 	sub.w	lr, r0, #76	; 0x4c
    d45a:	f1be 0f2e 	cmp.w	lr, #46	; 0x2e
    d45e:	d84d      	bhi.n	d4fc <cbvprintf_package+0x164>
    d460:	e8df f00e 	tbb	[pc, lr]
    d464:	4c4c4c72 	.word	0x4c4c4c72
    d468:	4c4c4c4c 	.word	0x4c4c4c4c
    d46c:	4c4c4c4c 	.word	0x4c4c4c4c
    d470:	4c4c4c4e 	.word	0x4c4c4c4e
    d474:	4c4c4c4c 	.word	0x4c4c4c4c
    d478:	4e4c5c4c 	.word	0x4e4c5c4c
    d47c:	5c5c5c4e 	.word	0x5c5c5c4e
    d480:	4c6f4e72 	.word	0x4c6f4e72
    d484:	4e184c72 	.word	0x4e184c72
    d488:	814c4c18 	.word	0x814c4c18
    d48c:	4c4c4e7e 	.word	0x4c4c4e7e
    d490:	4c4e      	.short	0x4c4e
    d492:	7e          	.byte	0x7e
    d493:	00          	.byte	0x00
    d494:	2000      	movs	r0, #0
    d496:	2300      	movs	r3, #0
				align = VA_STACK_ALIGN(void *);
    d498:	f04f 0b04 	mov.w	fp, #4
    d49c:	e03c      	b.n	d518 <cbvprintf_package+0x180>
			switch (*fmt) {
    d49e:	f1a0 0e2a 	sub.w	lr, r0, #42	; 0x2a
    d4a2:	2001      	movs	r0, #1
    d4a4:	fa5f fe8e 	uxtb.w	lr, lr
    d4a8:	fa00 fe0e 	lsl.w	lr, r0, lr
    d4ac:	f64f 70da 	movw	r0, #65498	; 0xffda
    d4b0:	ea1e 0f00 	tst.w	lr, r0
    d4b4:	d148      	bne.n	d548 <cbvprintf_package+0x1b0>
    d4b6:	f01e 5062 	ands.w	r0, lr, #947912704	; 0x38800000
    d4ba:	d12f      	bne.n	d51c <cbvprintf_package+0x184>
    d4bc:	f01e 0301 	ands.w	r3, lr, #1
    d4c0:	d042      	beq.n	d548 <cbvprintf_package+0x1b0>
		buf = (void *) ROUND_UP(buf, align);
    d4c2:	3c01      	subs	r4, #1
    d4c4:	445c      	add	r4, fp
    d4c6:	f1cb 0e00 	rsb	lr, fp, #0
    d4ca:	ea04 040e 	and.w	r4, r4, lr
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    d4ce:	2d00      	cmp	r5, #0
    d4d0:	d05e      	beq.n	d590 <cbvprintf_package+0x1f8>
    d4d2:	ebaa 0e05 	sub.w	lr, sl, r5
    d4d6:	44a6      	add	lr, r4
    d4d8:	4576      	cmp	r6, lr
    d4da:	f4ff af74 	bcc.w	d3c6 <cbvprintf_package+0x2e>
		if (is_str_arg) {
    d4de:	2800      	cmp	r0, #0
    d4e0:	d168      	bne.n	d5b4 <cbvprintf_package+0x21c>
		} else if (size == sizeof(int)) {
    d4e2:	f1ba 0f04 	cmp.w	sl, #4
    d4e6:	d143      	bne.n	d570 <cbvprintf_package+0x1d8>
			int v = va_arg(ap, int);
    d4e8:	46e1      	mov	r9, ip
    d4ea:	f859 0b04 	ldr.w	r0, [r9], #4
				*(int *)buf = v;
    d4ee:	6020      	str	r0, [r4, #0]
			buf += sizeof(int);
    d4f0:	46cc      	mov	ip, r9
    d4f2:	f04f 0a04 	mov.w	sl, #4
    d4f6:	3404      	adds	r4, #4
    d4f8:	e026      	b.n	d548 <cbvprintf_package+0x1b0>
				arg_idx--;
    d4fa:	3a01      	subs	r2, #1
				parsing = false;
    d4fc:	2300      	movs	r3, #0
				continue;
    d4fe:	e023      	b.n	d548 <cbvprintf_package+0x1b0>
				if (fmt[-1] == 'l') {
    d500:	f811 3c01 	ldrb.w	r3, [r1, #-1]
    d504:	2b6c      	cmp	r3, #108	; 0x6c
    d506:	d130      	bne.n	d56a <cbvprintf_package+0x1d2>
					if (fmt[-2] == 'l') {
    d508:	2000      	movs	r0, #0
    d50a:	f811 3c02 	ldrb.w	r3, [r1, #-2]
    d50e:	2b6c      	cmp	r3, #108	; 0x6c
				parsing = false;
    d510:	4603      	mov	r3, r0
					if (fmt[-2] == 'l') {
    d512:	d1c1      	bne.n	d498 <cbvprintf_package+0x100>
						align = VA_STACK_ALIGN(long long);
    d514:	f04f 0b08 	mov.w	fp, #8
				size = sizeof(void *);
    d518:	46da      	mov	sl, fp
    d51a:	e7d2      	b.n	d4c2 <cbvprintf_package+0x12a>
					v.ld = va_arg(ap, long double);
    d51c:	f10c 0907 	add.w	r9, ip, #7
    d520:	f029 0c07 	bic.w	ip, r9, #7
				buf = (void *) ROUND_UP(buf, align);
    d524:	3407      	adds	r4, #7
    d526:	f024 0407 	bic.w	r4, r4, #7
					v.ld = va_arg(ap, long double);
    d52a:	e8fc ab02 	ldrd	sl, fp, [ip], #8
				if (buf0 != NULL) {
    d52e:	b135      	cbz	r5, d53e <cbvprintf_package+0x1a6>
					if (BUF_OFFSET + size > len) {
    d530:	9805      	ldr	r0, [sp, #20]
    d532:	4420      	add	r0, r4
    d534:	42b0      	cmp	r0, r6
    d536:	f63f af46 	bhi.w	d3c6 <cbvprintf_package+0x2e>
						*(long double *)buf = v.ld;
    d53a:	e9c4 ab00 	strd	sl, fp, [r4]
				parsing = false;
    d53e:	2300      	movs	r3, #0
				buf += size;
    d540:	3408      	adds	r4, #8
			switch (*fmt) {
    d542:	f04f 0b08 	mov.w	fp, #8
    d546:	46da      	mov	sl, fp
			if (*++fmt == '\0') {
    d548:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    d54c:	2800      	cmp	r0, #0
    d54e:	f000 80bc 	beq.w	d6ca <cbvprintf_package+0x332>
			if (!parsing) {
    d552:	2b00      	cmp	r3, #0
    d554:	f47f af6b 	bne.w	d42e <cbvprintf_package+0x96>
				if (*fmt == '%') {
    d558:	2825      	cmp	r0, #37	; 0x25
    d55a:	d1f5      	bne.n	d548 <cbvprintf_package+0x1b0>
					parsing = true;
    d55c:	2301      	movs	r3, #1
					arg_idx++;
    d55e:	3201      	adds	r2, #1
				align = VA_STACK_ALIGN(size_t);
    d560:	f04f 0b04 	mov.w	fp, #4
    d564:	e7ef      	b.n	d546 <cbvprintf_package+0x1ae>
			switch (*fmt) {
    d566:	4618      	mov	r0, r3
    d568:	e795      	b.n	d496 <cbvprintf_package+0xfe>
    d56a:	2000      	movs	r0, #0
				parsing = false;
    d56c:	4603      	mov	r3, r0
    d56e:	e7a8      	b.n	d4c2 <cbvprintf_package+0x12a>
		} else if (size == sizeof(long long)) {
    d570:	f1ba 0f08 	cmp.w	sl, #8
    d574:	f040 809b 	bne.w	d6ae <cbvprintf_package+0x316>
			long long v = va_arg(ap, long long);
    d578:	f10c 0907 	add.w	r9, ip, #7
    d57c:	f029 0c07 	bic.w	ip, r9, #7
    d580:	e8fc 9a02 	ldrd	r9, sl, [ip], #8
					*(long long *)buf = v;
    d584:	e9c4 9a00 	strd	r9, sl, [r4]
			buf += sizeof(long long);
    d588:	f04f 0a08 	mov.w	sl, #8
    d58c:	3408      	adds	r4, #8
    d58e:	e7db      	b.n	d548 <cbvprintf_package+0x1b0>
		if (is_str_arg) {
    d590:	b980      	cbnz	r0, d5b4 <cbvprintf_package+0x21c>
		} else if (size == sizeof(int)) {
    d592:	f1ba 0f04 	cmp.w	sl, #4
    d596:	d102      	bne.n	d59e <cbvprintf_package+0x206>
			int v = va_arg(ap, int);
    d598:	f10c 0904 	add.w	r9, ip, #4
			if (buf0 != NULL) {
    d59c:	e7a8      	b.n	d4f0 <cbvprintf_package+0x158>
		} else if (size == sizeof(long long)) {
    d59e:	f1ba 0f08 	cmp.w	sl, #8
    d5a2:	f040 8084 	bne.w	d6ae <cbvprintf_package+0x316>
			long long v = va_arg(ap, long long);
    d5a6:	f10c 0907 	add.w	r9, ip, #7
    d5aa:	f029 0907 	bic.w	r9, r9, #7
    d5ae:	f109 0c08 	add.w	ip, r9, #8
			if (buf0 != NULL) {
    d5b2:	e7e9      	b.n	d588 <cbvprintf_package+0x1f0>
			s = va_arg(ap, char *);
    d5b4:	46e1      	mov	r9, ip
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    d5b6:	9804      	ldr	r0, [sp, #16]
    d5b8:	3801      	subs	r0, #1
    d5ba:	9004      	str	r0, [sp, #16]
			s = va_arg(ap, char *);
    d5bc:	f859 0b04 	ldr.w	r0, [r9], #4
    d5c0:	9000      	str	r0, [sp, #0]
    d5c2:	e717      	b.n	d3f4 <cbvprintf_package+0x5c>
			if (is_ro && !do_ro) {
    d5c4:	9802      	ldr	r0, [sp, #8]
    d5c6:	0780      	lsls	r0, r0, #30
    d5c8:	d548      	bpl.n	d65c <cbvprintf_package+0x2c4>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    d5ca:	f04f 0c01 	mov.w	ip, #1
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    d5ce:	eba4 0e05 	sub.w	lr, r4, r5
    d5d2:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    d5d6:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    d5da:	d31d      	bcc.n	d618 <cbvprintf_package+0x280>
					__ASSERT(false, "String with too many arguments");
    d5dc:	4927      	ldr	r1, [pc, #156]	; (d67c <cbvprintf_package+0x2e4>)
    d5de:	f240 237b 	movw	r3, #635	; 0x27b
    d5e2:	4a27      	ldr	r2, [pc, #156]	; (d680 <cbvprintf_package+0x2e8>)
    d5e4:	4827      	ldr	r0, [pc, #156]	; (d684 <cbvprintf_package+0x2ec>)
    d5e6:	f021 feed 	bl	2f3c4 <assert_print>
    d5ea:	4827      	ldr	r0, [pc, #156]	; (d688 <cbvprintf_package+0x2f0>)
    d5ec:	f021 feea 	bl	2f3c4 <assert_print>
    d5f0:	f240 217b 	movw	r1, #635	; 0x27b
					__ASSERT(false, "str_ptr_pos[] too small");
    d5f4:	4822      	ldr	r0, [pc, #136]	; (d680 <cbvprintf_package+0x2e8>)
    d5f6:	f021 fede 	bl	2f3b6 <assert_post_action>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    d5fa:	2f0f      	cmp	r7, #15
    d5fc:	d80e      	bhi.n	d61c <cbvprintf_package+0x284>
				if (buf0 != NULL) {
    d5fe:	2d00      	cmp	r5, #0
    d600:	d046      	beq.n	d690 <cbvprintf_package+0x2f8>
					str_ptr_pos[s_idx] = s_ptr_idx;
    d602:	f107 0c40 	add.w	ip, r7, #64	; 0x40
    d606:	44ec      	add	ip, sp
    d608:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    d60c:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
    d610:	9803      	ldr	r0, [sp, #12]
    d612:	3001      	adds	r0, #1
    d614:	9003      	str	r0, [sp, #12]
    d616:	e020      	b.n	d65a <cbvprintf_package+0x2c2>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    d618:	2f0f      	cmp	r7, #15
    d61a:	d90c      	bls.n	d636 <cbvprintf_package+0x29e>
					__ASSERT(false, "str_ptr_pos[] too small");
    d61c:	4917      	ldr	r1, [pc, #92]	; (d67c <cbvprintf_package+0x2e4>)
    d61e:	f44f 7320 	mov.w	r3, #640	; 0x280
    d622:	4a17      	ldr	r2, [pc, #92]	; (d680 <cbvprintf_package+0x2e8>)
    d624:	4817      	ldr	r0, [pc, #92]	; (d684 <cbvprintf_package+0x2ec>)
    d626:	f021 fecd 	bl	2f3c4 <assert_print>
    d62a:	4818      	ldr	r0, [pc, #96]	; (d68c <cbvprintf_package+0x2f4>)
    d62c:	f021 feca 	bl	2f3c4 <assert_print>
    d630:	f44f 7120 	mov.w	r1, #640	; 0x280
    d634:	e7de      	b.n	d5f4 <cbvprintf_package+0x25c>
				if (buf0 != NULL) {
    d636:	b1bd      	cbz	r5, d668 <cbvprintf_package+0x2d0>
					str_ptr_pos[s_idx] = s_ptr_idx;
    d638:	f107 0e40 	add.w	lr, r7, #64	; 0x40
    d63c:	44ee      	add	lr, sp
    d63e:	b2c0      	uxtb	r0, r0
    d640:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    d644:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
    d648:	f1bc 0f00 	cmp.w	ip, #0
    d64c:	d0e0      	beq.n	d610 <cbvprintf_package+0x278>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    d64e:	f060 007f 	orn	r0, r0, #127	; 0x7f
    d652:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
    d656:	f108 0801 	add.w	r8, r8, #1
				s_idx++;
    d65a:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
    d65c:	f1c5 0008 	rsb	r0, r5, #8
    d660:	46cc      	mov	ip, r9
			buf += sizeof(char *);
    d662:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
    d664:	9005      	str	r0, [sp, #20]
    d666:	e76f      	b.n	d548 <cbvprintf_package+0x1b0>
				} else if (is_ro) {
    d668:	f1bc 0f00 	cmp.w	ip, #0
    d66c:	d010      	beq.n	d690 <cbvprintf_package+0x2f8>
					len += 1;
    d66e:	3601      	adds	r6, #1
    d670:	e7f3      	b.n	d65a <cbvprintf_package+0x2c2>
    d672:	bf00      	nop
    d674:	0003743c 	.word	0x0003743c
    d678:	00042250 	.word	0x00042250
    d67c:	0003ea9e 	.word	0x0003ea9e
    d680:	00039a4e 	.word	0x00039a4e
    d684:	00039995 	.word	0x00039995
    d688:	00039a7c 	.word	0x00039a7c
    d68c:	00039a9d 	.word	0x00039a9d
				} else if (rws_pos_en) {
    d690:	9801      	ldr	r0, [sp, #4]
					len += 2;
    d692:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
    d694:	2800      	cmp	r0, #0
    d696:	d1e0      	bne.n	d65a <cbvprintf_package+0x2c2>
					len += strlen(s) + 1 + 1;
    d698:	9800      	ldr	r0, [sp, #0]
    d69a:	e9cd 3106 	strd	r3, r1, [sp, #24]
    d69e:	9205      	str	r2, [sp, #20]
    d6a0:	f7fb fdbf 	bl	9222 <strlen>
    d6a4:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
    d6a8:	9a05      	ldr	r2, [sp, #20]
    d6aa:	4406      	add	r6, r0
    d6ac:	e7d5      	b.n	d65a <cbvprintf_package+0x2c2>
			__ASSERT(false, "unexpected size %u", size);
    d6ae:	f240 23c5 	movw	r3, #709	; 0x2c5
    d6b2:	4a43      	ldr	r2, [pc, #268]	; (d7c0 <cbvprintf_package+0x428>)
    d6b4:	4943      	ldr	r1, [pc, #268]	; (d7c4 <cbvprintf_package+0x42c>)
    d6b6:	4844      	ldr	r0, [pc, #272]	; (d7c8 <cbvprintf_package+0x430>)
    d6b8:	f021 fe84 	bl	2f3c4 <assert_print>
    d6bc:	4651      	mov	r1, sl
    d6be:	4843      	ldr	r0, [pc, #268]	; (d7cc <cbvprintf_package+0x434>)
    d6c0:	f021 fe80 	bl	2f3c4 <assert_print>
    d6c4:	f240 21c5 	movw	r1, #709	; 0x2c5
    d6c8:	e794      	b.n	d5f4 <cbvprintf_package+0x25c>
	if (BUF_OFFSET / sizeof(int) > 255) {
    d6ca:	1b63      	subs	r3, r4, r5
    d6cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    d6d0:	d30c      	bcc.n	d6ec <cbvprintf_package+0x354>
		__ASSERT(false, "too many format args");
    d6d2:	493c      	ldr	r1, [pc, #240]	; (d7c4 <cbvprintf_package+0x42c>)
    d6d4:	f240 23d1 	movw	r3, #721	; 0x2d1
    d6d8:	4a39      	ldr	r2, [pc, #228]	; (d7c0 <cbvprintf_package+0x428>)
    d6da:	483b      	ldr	r0, [pc, #236]	; (d7c8 <cbvprintf_package+0x430>)
    d6dc:	f021 fe72 	bl	2f3c4 <assert_print>
    d6e0:	483b      	ldr	r0, [pc, #236]	; (d7d0 <cbvprintf_package+0x438>)
    d6e2:	f021 fe6f 	bl	2f3c4 <assert_print>
    d6e6:	f240 21d1 	movw	r1, #721	; 0x2d1
    d6ea:	e783      	b.n	d5f4 <cbvprintf_package+0x25c>
	if (buf0 == NULL) {
    d6ec:	b91d      	cbnz	r5, d6f6 <cbvprintf_package+0x35e>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    d6ee:	f1a6 0408 	sub.w	r4, r6, #8
    d6f2:	18e0      	adds	r0, r4, r3
    d6f4:	e669      	b.n	d3ca <cbvprintf_package+0x32>
	if (rws_pos_en) {
    d6f6:	9a01      	ldr	r2, [sp, #4]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
    d6f8:	089b      	lsrs	r3, r3, #2
	*(char **)buf0 = NULL;
    d6fa:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
    d6fc:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    d6fe:	f89d 300c 	ldrb.w	r3, [sp, #12]
	if (rws_pos_en) {
    d702:	b1c2      	cbz	r2, d736 <cbvprintf_package+0x39e>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    d704:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
    d706:	f885 8002 	strb.w	r8, [r5, #2]
	if (s_ro_cnt) {
    d70a:	f1b8 0f00 	cmp.w	r8, #0
    d70e:	d005      	beq.n	d71c <cbvprintf_package+0x384>
		for (i = 0; i < s_idx; i++) {
    d710:	2200      	movs	r2, #0
    d712:	a808      	add	r0, sp, #32
			if (BUF_OFFSET + 1 > len) {
    d714:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
    d718:	4297      	cmp	r7, r2
    d71a:	d10e      	bne.n	d73a <cbvprintf_package+0x3a2>
			*buf++ = str_ptr_arg[i];
    d71c:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
    d720:	f1c5 0301 	rsb	r3, r5, #1
    d724:	f10d 0920 	add.w	r9, sp, #32
    d728:	9302      	str	r3, [sp, #8]
			*buf++ = str_ptr_arg[i];
    d72a:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
    d72e:	4557      	cmp	r7, sl
    d730:	d112      	bne.n	d758 <cbvprintf_package+0x3c0>
	return BUF_OFFSET;
    d732:	1b60      	subs	r0, r4, r5
    d734:	e649      	b.n	d3ca <cbvprintf_package+0x32>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
    d736:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
    d738:	e7e5      	b.n	d706 <cbvprintf_package+0x36e>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    d73a:	f810 3b01 	ldrb.w	r3, [r0], #1
    d73e:	0619      	lsls	r1, r3, #24
    d740:	d508      	bpl.n	d754 <cbvprintf_package+0x3bc>
			if (BUF_OFFSET + 1 > len) {
    d742:	eb04 0e0c 	add.w	lr, r4, ip
    d746:	4576      	cmp	r6, lr
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    d748:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    d74c:	f4ff ae3b 	bcc.w	d3c6 <cbvprintf_package+0x2e>
			*buf++ = pos;
    d750:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
    d754:	3201      	adds	r2, #1
    d756:	e7df      	b.n	d718 <cbvprintf_package+0x380>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    d758:	f1b8 0f00 	cmp.w	r8, #0
    d75c:	d003      	beq.n	d766 <cbvprintf_package+0x3ce>
    d75e:	f999 2000 	ldrsb.w	r2, [r9]
    d762:	2a00      	cmp	r2, #0
    d764:	db17      	blt.n	d796 <cbvprintf_package+0x3fe>
		if (rws_pos_en) {
    d766:	9b01      	ldr	r3, [sp, #4]
    d768:	b1d3      	cbz	r3, d7a0 <cbvprintf_package+0x408>
			*buf++ = str_ptr_arg[i];
    d76a:	f81a 200b 	ldrb.w	r2, [sl, fp]
    d76e:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
    d772:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
    d774:	9b02      	ldr	r3, [sp, #8]
    d776:	1898      	adds	r0, r3, r2
    d778:	4420      	add	r0, r4
    d77a:	4286      	cmp	r6, r0
    d77c:	f4ff ae23 	bcc.w	d3c6 <cbvprintf_package+0x2e>
		*buf++ = str_ptr_pos[i];
    d780:	f899 0000 	ldrb.w	r0, [r9]
    d784:	9900      	ldr	r1, [sp, #0]
    d786:	f804 0b01 	strb.w	r0, [r4], #1
    d78a:	4620      	mov	r0, r4
    d78c:	9203      	str	r2, [sp, #12]
    d78e:	f028 fecb 	bl	36528 <memcpy>
		buf += size;
    d792:	9a03      	ldr	r2, [sp, #12]
    d794:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
    d796:	f10a 0a01 	add.w	sl, sl, #1
    d79a:	f109 0901 	add.w	r9, r9, #1
    d79e:	e7c6      	b.n	d72e <cbvprintf_package+0x396>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    d7a0:	f899 2000 	ldrb.w	r2, [r9]
    d7a4:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
    d7a8:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    d7aa:	9b01      	ldr	r3, [sp, #4]
			size = strlen(s) + 1;
    d7ac:	9800      	ldr	r0, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    d7ae:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
    d7b2:	f7fb fd36 	bl	9222 <strlen>
    d7b6:	1c42      	adds	r2, r0, #1
    d7b8:	e7dc      	b.n	d774 <cbvprintf_package+0x3dc>
		return -EFAULT;
    d7ba:	f06f 000d 	mvn.w	r0, #13
    d7be:	e604      	b.n	d3ca <cbvprintf_package+0x32>
    d7c0:	00039a4e 	.word	0x00039a4e
    d7c4:	0003ea9e 	.word	0x0003ea9e
    d7c8:	00039995 	.word	0x00039995
    d7cc:	00039ab7 	.word	0x00039ab7
    d7d0:	00039acc 	.word	0x00039acc

0000d7d4 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
    d7d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d7d8:	b095      	sub	sp, #84	; 0x54
    d7da:	af00      	add	r7, sp, #0
    d7dc:	468a      	mov	sl, r1
	__ASSERT_NO_MSG(in_packaged != NULL);
    d7de:	4604      	mov	r4, r0
{
    d7e0:	627a      	str	r2, [r7, #36]	; 0x24
    d7e2:	61bb      	str	r3, [r7, #24]
	__ASSERT_NO_MSG(in_packaged != NULL);
    d7e4:	b958      	cbnz	r0, d7fe <cbprintf_package_convert+0x2a>
    d7e6:	49a8      	ldr	r1, [pc, #672]	; (da88 <cbprintf_package_convert+0x2b4>)
    d7e8:	f44f 7365 	mov.w	r3, #916	; 0x394
    d7ec:	4aa7      	ldr	r2, [pc, #668]	; (da8c <cbprintf_package_convert+0x2b8>)
    d7ee:	48a8      	ldr	r0, [pc, #672]	; (da90 <cbprintf_package_convert+0x2bc>)
    d7f0:	f021 fde8 	bl	2f3c4 <assert_print>
    d7f4:	f44f 7165 	mov.w	r1, #916	; 0x394
			continue;
		}

		if (is_ro) {
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
    d7f8:	48a4      	ldr	r0, [pc, #656]	; (da8c <cbprintf_package_convert+0x2b8>)
    d7fa:	f021 fddc 	bl	2f3b6 <assert_post_action>
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
    d7fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
	ros_nbr   = buf[2];
    d800:	f890 b002 	ldrb.w	fp, [r0, #2]
    d804:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    d808:	613b      	str	r3, [r7, #16]
	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
    d80a:	b941      	cbnz	r1, d81e <cbprintf_package_convert+0x4a>
	s_nbr     = buf[1];
    d80c:	7845      	ldrb	r5, [r0, #1]
	buf += ros_nbr;
    d80e:	7800      	ldrb	r0, [r0, #0]
    d810:	eb0b 0080 	add.w	r0, fp, r0, lsl #2
    d814:	4420      	add	r0, r4
	for (unsigned int i = 0; i < s_nbr; i++) {
    d816:	4555      	cmp	r5, sl
    d818:	d817      	bhi.n	d84a <cbprintf_package_convert+0x76>
	return (size_t)(uintptr_t)(buf - start);
    d81a:	eba0 0a04 	sub.w	sl, r0, r4
	rws_nbr = in_desc->rw_str_cnt;
    d81e:	78e3      	ldrb	r3, [r4, #3]
    d820:	617b      	str	r3, [r7, #20]
	ro_cpy = ros_nbr &&
    d822:	f1bb 0f00 	cmp.w	fp, #0
    d826:	d002      	beq.n	d82e <cbprintf_package_convert+0x5a>
    d828:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    d82a:	07d8      	lsls	r0, r3, #31
    d82c:	d416      	bmi.n	d85c <cbprintf_package_convert+0x88>
	rw_cpy = rws_nbr > 0 &&
    d82e:	697b      	ldr	r3, [r7, #20]
    d830:	bb53      	cbnz	r3, d888 <cbprintf_package_convert+0xb4>
		if (cb) {
    d832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d834:	b11b      	cbz	r3, d83e <cbprintf_package_convert+0x6a>
			cb(in_packaged, in_len, ctx);
    d836:	4651      	mov	r1, sl
    d838:	4620      	mov	r0, r4
    d83a:	69ba      	ldr	r2, [r7, #24]
    d83c:	4798      	blx	r3
		return in_len;
    d83e:	4655      	mov	r5, sl

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
    d840:	4628      	mov	r0, r5
    d842:	3754      	adds	r7, #84	; 0x54
    d844:	46bd      	mov	sp, r7
    d846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
    d84a:	1c46      	adds	r6, r0, #1
		buf += strlen((const char *)buf) + 1;
    d84c:	4630      	mov	r0, r6
    d84e:	f7fb fce8 	bl	9222 <strlen>
    d852:	3001      	adds	r0, #1
    d854:	4430      	add	r0, r6
	for (unsigned int i = 0; i < s_nbr; i++) {
    d856:	f10a 0a01 	add.w	sl, sl, #1
    d85a:	e7dc      	b.n	d816 <cbprintf_package_convert+0x42>
	rw_cpy = rws_nbr > 0 &&
    d85c:	7823      	ldrb	r3, [r4, #0]
    d85e:	6862      	ldr	r2, [r4, #4]
	args_size = in_desc->len * sizeof(int);
    d860:	623b      	str	r3, [r7, #32]
    d862:	009b      	lsls	r3, r3, #2
    d864:	60fb      	str	r3, [r7, #12]
	uint8_t *str_pos = &buf[args_size];
    d866:	6a3b      	ldr	r3, [r7, #32]
	const char *fmt = *(const char **)(buf + sizeof(void *));
    d868:	61fa      	str	r2, [r7, #28]
	uint8_t *str_pos = &buf[args_size];
    d86a:	eb04 0983 	add.w	r9, r4, r3, lsl #2
	if (cb == NULL) {
    d86e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d870:	2b00      	cmp	r3, #0
    d872:	f040 8100 	bne.w	da76 <cbprintf_package_convert+0x2a2>
		out_len = (int)in_len;
    d876:	46c8      	mov	r8, r9
	size_t strl_cnt = 0;
    d878:	2600      	movs	r6, #0
		out_len = (int)in_len;
    d87a:	4655      	mov	r5, sl
		if (ro_cpy) {
    d87c:	eb09 0a0b 	add.w	sl, r9, fp
			for (unsigned int i = 0; i < ros_nbr; i++) {
    d880:	45c2      	cmp	sl, r8
    d882:	d151      	bne.n	d928 <cbprintf_package_convert+0x154>
    d884:	44d9      	add	r9, fp
    d886:	e013      	b.n	d8b0 <cbprintf_package_convert+0xdc>
	rw_cpy = rws_nbr > 0 &&
    d888:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    d88a:	0799      	lsls	r1, r3, #30
    d88c:	d5d1      	bpl.n	d832 <cbprintf_package_convert+0x5e>
	args_size = in_desc->len * sizeof(int);
    d88e:	7823      	ldrb	r3, [r4, #0]
    d890:	4699      	mov	r9, r3
    d892:	623b      	str	r3, [r7, #32]
    d894:	009b      	lsls	r3, r3, #2
    d896:	60fb      	str	r3, [r7, #12]
	const char *fmt = *(const char **)(buf + sizeof(void *));
    d898:	6863      	ldr	r3, [r4, #4]
	uint8_t *str_pos = &buf[args_size];
    d89a:	eb04 0989 	add.w	r9, r4, r9, lsl #2
	const char *fmt = *(const char **)(buf + sizeof(void *));
    d89e:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
    d8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d8a2:	2b00      	cmp	r3, #0
    d8a4:	d17a      	bne.n	d99c <cbprintf_package_convert+0x1c8>
		out_len = (int)in_len;
    d8a6:	4655      	mov	r5, sl
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    d8a8:	f1bb 0f00 	cmp.w	fp, #0
    d8ac:	d14f      	bne.n	d94e <cbprintf_package_convert+0x17a>
	size_t strl_cnt = 0;
    d8ae:	465e      	mov	r6, fp
		for (unsigned int i = 0; i < rws_nbr; i++) {
    d8b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    d8b2:	f013 0f05 	tst.w	r3, #5
    d8b6:	bf0c      	ite	eq
    d8b8:	f04f 0b02 	moveq.w	fp, #2
    d8bc:	f04f 0b01 	movne.w	fp, #1
    d8c0:	697b      	ldr	r3, [r7, #20]
    d8c2:	eb09 0a43 	add.w	sl, r9, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    d8c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    d8c8:	f003 0302 	and.w	r3, r3, #2
    d8cc:	627b      	str	r3, [r7, #36]	; 0x24
		for (unsigned int i = 0; i < rws_nbr; i++) {
    d8ce:	45d1      	cmp	r9, sl
    d8d0:	d0b6      	beq.n	d840 <cbprintf_package_convert+0x6c>
			uint8_t arg_idx = *str_pos++;
    d8d2:	f819 1b02 	ldrb.w	r1, [r9], #2
			const char *str = *(const char **)&buf32[arg_pos];
    d8d6:	f819 3c01 	ldrb.w	r3, [r9, #-1]
    d8da:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
    d8de:	4b6d      	ldr	r3, [pc, #436]	; (da94 <cbprintf_package_convert+0x2c0>)
    d8e0:	4598      	cmp	r8, r3
    d8e2:	d302      	bcc.n	d8ea <cbprintf_package_convert+0x116>
    d8e4:	4b6c      	ldr	r3, [pc, #432]	; (da98 <cbprintf_package_convert+0x2c4>)
    d8e6:	4598      	cmp	r8, r3
    d8e8:	d338      	bcc.n	d95c <cbprintf_package_convert+0x188>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    d8ea:	693b      	ldr	r3, [r7, #16]
    d8ec:	2b00      	cmp	r3, #0
    d8ee:	d042      	beq.n	d976 <cbprintf_package_convert+0x1a2>
    d8f0:	69f8      	ldr	r0, [r7, #28]
    d8f2:	f021 fac6 	bl	2ee82 <is_ptr>
    d8f6:	2800      	cmp	r0, #0
    d8f8:	d03d      	beq.n	d976 <cbprintf_package_convert+0x1a2>
				LOG_WRN("(unsigned) char * used for %%p argument. "
    d8fa:	46e8      	mov	r8, sp
    d8fc:	b08a      	sub	sp, #40	; 0x28
    d8fe:	466a      	mov	r2, sp
    d900:	4b66      	ldr	r3, [pc, #408]	; (da9c <cbprintf_package_convert+0x2c8>)
    d902:	6153      	str	r3, [r2, #20]
    d904:	69fb      	ldr	r3, [r7, #28]
    d906:	e9c2 3106 	strd	r3, r1, [r2, #24]
    d90a:	f44f 7300 	mov.w	r3, #512	; 0x200
    d90e:	8413      	strh	r3, [r2, #32]
    d910:	4b63      	ldr	r3, [pc, #396]	; (daa0 <cbprintf_package_convert+0x2cc>)
    d912:	f842 3f10 	str.w	r3, [r2, #16]!
    d916:	2300      	movs	r3, #0
    d918:	f44f 5112 	mov.w	r1, #9344	; 0x2480
    d91c:	4861      	ldr	r0, [pc, #388]	; (daa4 <cbprintf_package_convert+0x2d0>)
    d91e:	f002 fc89 	bl	10234 <z_impl_z_log_msg_static_create>
				out_len -= 2;
    d922:	3d02      	subs	r5, #2
    d924:	46c5      	mov	sp, r8
				continue;
    d926:	e7d2      	b.n	d8ce <cbprintf_package_convert+0xfa>
				const char *str = *(const char **)&buf32[*str_pos];
    d928:	f818 3b01 	ldrb.w	r3, [r8], #1
		return 1 + strlen(str);
    d92c:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
    d930:	f7fb fc77 	bl	9222 <strlen>
				if (strl && strl_cnt < strl_len) {
    d934:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
		return 1 + strlen(str);
    d936:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
    d938:	b13b      	cbz	r3, d94a <cbprintf_package_convert+0x176>
    d93a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    d93e:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
    d940:	bf3e      	ittt	cc
    d942:	6ffb      	ldrcc	r3, [r7, #124]	; 0x7c
    d944:	f823 0016 	strhcc.w	r0, [r3, r6, lsl #1]
    d948:	3601      	addcc	r6, #1
				out_len += len;
    d94a:	4405      	add	r5, r0
			for (unsigned int i = 0; i < ros_nbr; i++) {
    d94c:	e798      	b.n	d880 <cbprintf_package_convert+0xac>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    d94e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    d950:	f013 0604 	ands.w	r6, r3, #4
	size_t strl_cnt = 0;
    d954:	bf1c      	itt	ne
    d956:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
				str_pos += ros_nbr;
    d958:	44d9      	addne	r9, fp
    d95a:	e7a9      	b.n	d8b0 <cbprintf_package_convert+0xdc>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    d95c:	693b      	ldr	r3, [r7, #16]
    d95e:	b123      	cbz	r3, d96a <cbprintf_package_convert+0x196>
    d960:	69f8      	ldr	r0, [r7, #28]
    d962:	f021 fa8e 	bl	2ee82 <is_ptr>
    d966:	2800      	cmp	r0, #0
    d968:	d1c7      	bne.n	d8fa <cbprintf_package_convert+0x126>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    d96a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    d96c:	07da      	lsls	r2, r3, #31
    d96e:	d405      	bmi.n	d97c <cbprintf_package_convert+0x1a8>
					out_len -= drop_ro_str_pos ? 2 : 1;
    d970:	eba5 050b 	sub.w	r5, r5, fp
    d974:	e7ab      	b.n	d8ce <cbprintf_package_convert+0xfa>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    d976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d978:	2b00      	cmp	r3, #0
    d97a:	d0a8      	beq.n	d8ce <cbprintf_package_convert+0xfa>
		return 1 + strlen(str);
    d97c:	4640      	mov	r0, r8
    d97e:	f7fb fc50 	bl	9222 <strlen>
				if (strl && strl_cnt < strl_len) {
    d982:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    d984:	b143      	cbz	r3, d998 <cbprintf_package_convert+0x1c4>
    d986:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    d98a:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
    d98c:	bf3f      	itttt	cc
    d98e:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
    d990:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
    d992:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
    d996:	3601      	addcc	r6, #1
				out_len += (len - 1);
    d998:	4405      	add	r5, r0
		for (unsigned int i = 0; i < rws_nbr; i++) {
    d99a:	e798      	b.n	d8ce <cbprintf_package_convert+0xfa>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    d99c:	f1bb 0f00 	cmp.w	fp, #0
    d9a0:	d06f      	beq.n	da82 <cbprintf_package_convert+0x2ae>
    d9a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    d9a4:	f013 0604 	ands.w	r6, r3, #4
    d9a8:	d07e      	beq.n	daa8 <cbprintf_package_convert+0x2d4>
		keep_cnt = ros_nbr;
    d9aa:	46d8      	mov	r8, fp
		scpy_cnt = 0;
    d9ac:	2600      	movs	r6, #0
		dst = keep_str_pos;
    d9ae:	f107 0040 	add.w	r0, r7, #64	; 0x40
    d9b2:	465a      	mov	r2, fp
    d9b4:	4649      	mov	r1, r9
    d9b6:	f028 fdb7 	bl	36528 <memcpy>
	str_pos += ros_nbr;
    d9ba:	697b      	ldr	r3, [r7, #20]
    d9bc:	44d9      	add	r9, fp
	for (unsigned int i = 0; i < rws_nbr; i++) {
    d9be:	005b      	lsls	r3, r3, #1
    d9c0:	607b      	str	r3, [r7, #4]
    d9c2:	697b      	ldr	r3, [r7, #20]
    d9c4:	eb09 0343 	add.w	r3, r9, r3, lsl #1
    d9c8:	60bb      	str	r3, [r7, #8]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    d9ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    d9cc:	f003 0302 	and.w	r3, r3, #2
    d9d0:	603b      	str	r3, [r7, #0]
	for (unsigned int i = 0; i < rws_nbr; i++) {
    d9d2:	68bb      	ldr	r3, [r7, #8]
    d9d4:	4599      	cmp	r9, r3
    d9d6:	d169      	bne.n	daac <cbprintf_package_convert+0x2d8>
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    d9d8:	6fb9      	ldr	r1, [r7, #120]	; 0x78
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    d9da:	7863      	ldrb	r3, [r4, #1]
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    d9dc:	6fb8      	ldr	r0, [r7, #120]	; 0x78
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    d9de:	0789      	lsls	r1, r1, #30
    d9e0:	bf48      	it	mi
    d9e2:	2100      	movmi	r1, #0
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    d9e4:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    d9e8:	bf58      	it	pl
    d9ea:	ea4f 0158 	movpl.w	r1, r8, lsr #1
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    d9ee:	07c5      	lsls	r5, r0, #31
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    d9f0:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    d9f2:	f100 80df 	bmi.w	dbb4 <cbprintf_package_convert+0x3e0>
    d9f6:	f010 0f04 	tst.w	r0, #4
    d9fa:	bf14      	ite	ne
    d9fc:	4640      	movne	r0, r8
    d9fe:	2000      	moveq	r0, #0
    da00:	61fb      	str	r3, [r7, #28]
	*in_desc = out_desc;
    da02:	7062      	strb	r2, [r4, #1]
    da04:	70a0      	strb	r0, [r4, #2]
    da06:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
    da08:	4620      	mov	r0, r4
    da0a:	69ba      	ldr	r2, [r7, #24]
    da0c:	68f9      	ldr	r1, [r7, #12]
    da0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    da10:	4798      	blx	r3
	if (rv < 0) {
    da12:	1e05      	subs	r5, r0, #0
    da14:	f6ff af14 	blt.w	d840 <cbprintf_package_convert+0x6c>
	*in_desc = in_desc_backup;
    da18:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    da1a:	4641      	mov	r1, r8
	*in_desc = in_desc_backup;
    da1c:	7023      	strb	r3, [r4, #0]
    da1e:	69fb      	ldr	r3, [r7, #28]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    da20:	69ba      	ldr	r2, [r7, #24]
	*in_desc = in_desc_backup;
    da22:	7063      	strb	r3, [r4, #1]
    da24:	697b      	ldr	r3, [r7, #20]
    da26:	f884 b002 	strb.w	fp, [r4, #2]
    da2a:	70e3      	strb	r3, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    da2c:	f107 0040 	add.w	r0, r7, #64	; 0x40
    da30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    da32:	4798      	blx	r3
	if (rv < 0) {
    da34:	f1b0 0800 	subs.w	r8, r0, #0
    da38:	f2c0 80e9 	blt.w	dc0e <cbprintf_package_convert+0x43a>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    da3c:	68fb      	ldr	r3, [r7, #12]
    da3e:	ebaa 010b 	sub.w	r1, sl, fp
    da42:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
    da44:	687b      	ldr	r3, [r7, #4]
    da46:	4648      	mov	r0, r9
    da48:	1ac9      	subs	r1, r1, r3
    da4a:	69ba      	ldr	r2, [r7, #24]
    da4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    da4e:	4798      	blx	r3
	if (rv < 0) {
    da50:	2800      	cmp	r0, #0
    da52:	f2c0 80de 	blt.w	dc12 <cbprintf_package_convert+0x43e>
	for (unsigned int i = 0; i < scpy_cnt; i++) {
    da56:	f04f 0b00 	mov.w	fp, #0
	out_len += rv;
    da5a:	44a8      	add	r8, r5
	out_len += rv;
    da5c:	eb08 0500 	add.w	r5, r8, r0
		uint8_t loc = cpy_str_pos[i];
    da60:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	for (unsigned int i = 0; i < scpy_cnt; i++) {
    da64:	45b3      	cmp	fp, r6
    da66:	f0c0 80a7 	bcc.w	dbb8 <cbprintf_package_convert+0x3e4>
	(void)cb(NULL, 0, ctx);
    da6a:	2100      	movs	r1, #0
    da6c:	69ba      	ldr	r2, [r7, #24]
    da6e:	4608      	mov	r0, r1
    da70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    da72:	4798      	blx	r3
	return out_len;
    da74:	e6e4      	b.n	d840 <cbprintf_package_convert+0x6c>
	if (cb == NULL) {
    da76:	465e      	mov	r6, fp
    da78:	f04f 0800 	mov.w	r8, #0
    da7c:	f107 0030 	add.w	r0, r7, #48	; 0x30
    da80:	e797      	b.n	d9b2 <cbprintf_package_convert+0x1de>
		scpy_cnt = 0;
    da82:	465e      	mov	r6, fp
		keep_cnt = 0;
    da84:	46d8      	mov	r8, fp
    da86:	e798      	b.n	d9ba <cbprintf_package_convert+0x1e6>
    da88:	00039ae3 	.word	0x00039ae3
    da8c:	00039a4e 	.word	0x00039a4e
    da90:	00039995 	.word	0x00039995
    da94:	0003743c 	.word	0x0003743c
    da98:	00042250 	.word	0x00042250
    da9c:	00039afe 	.word	0x00039afe
    daa0:	01000004 	.word	0x01000004
    daa4:	00037938 	.word	0x00037938
    daa8:	46b0      	mov	r8, r6
    daaa:	e786      	b.n	d9ba <cbprintf_package_convert+0x1e6>
		uint8_t arg_idx = *str_pos++;
    daac:	f819 1b02 	ldrb.w	r1, [r9], #2
    dab0:	4b59      	ldr	r3, [pc, #356]	; (dc18 <cbprintf_package_convert+0x444>)
		uint8_t arg_pos = *str_pos++;
    dab2:	f819 5c01 	ldrb.w	r5, [r9, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
    dab6:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
    daba:	4298      	cmp	r0, r3
    dabc:	d302      	bcc.n	dac4 <cbprintf_package_convert+0x2f0>
    dabe:	4b57      	ldr	r3, [pc, #348]	; (dc1c <cbprintf_package_convert+0x448>)
    dac0:	4298      	cmp	r0, r3
    dac2:	d316      	bcc.n	daf2 <cbprintf_package_convert+0x31e>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    dac4:	693b      	ldr	r3, [r7, #16]
    dac6:	b12b      	cbz	r3, dad4 <cbprintf_package_convert+0x300>
    dac8:	69f8      	ldr	r0, [r7, #28]
    daca:	f021 f9da 	bl	2ee82 <is_ptr>
    dace:	2800      	cmp	r0, #0
    dad0:	f47f af7f 	bne.w	d9d2 <cbprintf_package_convert+0x1fe>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    dad4:	683b      	ldr	r3, [r7, #0]
    dad6:	2b00      	cmp	r3, #0
    dad8:	d04a      	beq.n	db70 <cbprintf_package_convert+0x39c>
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
    dada:	2e0f      	cmp	r6, #15
    dadc:	d93e      	bls.n	db5c <cbprintf_package_convert+0x388>
    dade:	4950      	ldr	r1, [pc, #320]	; (dc20 <cbprintf_package_convert+0x44c>)
    dae0:	f44f 6389 	mov.w	r3, #1096	; 0x448
    dae4:	4a4f      	ldr	r2, [pc, #316]	; (dc24 <cbprintf_package_convert+0x450>)
    dae6:	4850      	ldr	r0, [pc, #320]	; (dc28 <cbprintf_package_convert+0x454>)
    dae8:	f021 fc6c 	bl	2f3c4 <assert_print>
    daec:	f44f 6189 	mov.w	r1, #1096	; 0x448
    daf0:	e682      	b.n	d7f8 <cbprintf_package_convert+0x24>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    daf2:	693b      	ldr	r3, [r7, #16]
    daf4:	b12b      	cbz	r3, db02 <cbprintf_package_convert+0x32e>
    daf6:	69f8      	ldr	r0, [r7, #28]
    daf8:	f021 f9c3 	bl	2ee82 <is_ptr>
    dafc:	2800      	cmp	r0, #0
    dafe:	f47f af68 	bne.w	d9d2 <cbprintf_package_convert+0x1fe>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    db02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    db04:	07db      	lsls	r3, r3, #31
    db06:	d50b      	bpl.n	db20 <cbprintf_package_convert+0x34c>
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
    db08:	2e0f      	cmp	r6, #15
    db0a:	d927      	bls.n	db5c <cbprintf_package_convert+0x388>
    db0c:	4944      	ldr	r1, [pc, #272]	; (dc20 <cbprintf_package_convert+0x44c>)
    db0e:	f240 433e 	movw	r3, #1086	; 0x43e
    db12:	4a44      	ldr	r2, [pc, #272]	; (dc24 <cbprintf_package_convert+0x450>)
    db14:	4844      	ldr	r0, [pc, #272]	; (dc28 <cbprintf_package_convert+0x454>)
    db16:	f021 fc55 	bl	2f3c4 <assert_print>
    db1a:	f240 413e 	movw	r1, #1086	; 0x43e
    db1e:	e66b      	b.n	d7f8 <cbprintf_package_convert+0x24>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    db20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    db22:	0758      	lsls	r0, r3, #29
    db24:	f57f af55 	bpl.w	d9d2 <cbprintf_package_convert+0x1fe>
				__ASSERT_NO_MSG(keep_cnt < sizeof(keep_str_pos));
    db28:	f1b8 0f0f 	cmp.w	r8, #15
    db2c:	d909      	bls.n	db42 <cbprintf_package_convert+0x36e>
    db2e:	493f      	ldr	r1, [pc, #252]	; (dc2c <cbprintf_package_convert+0x458>)
    db30:	f240 4341 	movw	r3, #1089	; 0x441
    db34:	4a3b      	ldr	r2, [pc, #236]	; (dc24 <cbprintf_package_convert+0x450>)
    db36:	483c      	ldr	r0, [pc, #240]	; (dc28 <cbprintf_package_convert+0x454>)
    db38:	f021 fc44 	bl	2f3c4 <assert_print>
    db3c:	f240 4141 	movw	r1, #1089	; 0x441
    db40:	e65a      	b.n	d7f8 <cbprintf_package_convert+0x24>
				keep_str_pos[keep_cnt++] = arg_pos;
    db42:	f108 0328 	add.w	r3, r8, #40	; 0x28
    db46:	f107 0228 	add.w	r2, r7, #40	; 0x28
    db4a:	f108 0101 	add.w	r1, r8, #1
    db4e:	eb03 0802 	add.w	r8, r3, r2
    db52:	f808 5c10 	strb.w	r5, [r8, #-16]
    db56:	fa5f f881 	uxtb.w	r8, r1
    db5a:	e73a      	b.n	d9d2 <cbprintf_package_convert+0x1fe>
				cpy_str_pos[scpy_cnt++] = arg_pos;
    db5c:	f106 0328 	add.w	r3, r6, #40	; 0x28
    db60:	f107 0228 	add.w	r2, r7, #40	; 0x28
    db64:	1c71      	adds	r1, r6, #1
    db66:	189e      	adds	r6, r3, r2
    db68:	f806 5c20 	strb.w	r5, [r6, #-32]
    db6c:	b2ce      	uxtb	r6, r1
    db6e:	e730      	b.n	d9d2 <cbprintf_package_convert+0x1fe>
				__ASSERT_NO_MSG(keep_cnt < sizeof(keep_str_pos));
    db70:	f1b8 0f0f 	cmp.w	r8, #15
    db74:	d909      	bls.n	db8a <cbprintf_package_convert+0x3b6>
    db76:	492d      	ldr	r1, [pc, #180]	; (dc2c <cbprintf_package_convert+0x458>)
    db78:	f240 434b 	movw	r3, #1099	; 0x44b
    db7c:	4a29      	ldr	r2, [pc, #164]	; (dc24 <cbprintf_package_convert+0x450>)
    db7e:	482a      	ldr	r0, [pc, #168]	; (dc28 <cbprintf_package_convert+0x454>)
    db80:	f021 fc20 	bl	2f3c4 <assert_print>
    db84:	f240 414b 	movw	r1, #1099	; 0x44b
    db88:	e636      	b.n	d7f8 <cbprintf_package_convert+0x24>
				keep_str_pos[keep_cnt++] = arg_idx;
    db8a:	f108 0328 	add.w	r3, r8, #40	; 0x28
    db8e:	f107 0228 	add.w	r2, r7, #40	; 0x28
    db92:	f108 0001 	add.w	r0, r8, #1
    db96:	eb03 0c02 	add.w	ip, r3, r2
				keep_str_pos[keep_cnt++] = arg_pos;
    db9a:	f107 0350 	add.w	r3, r7, #80	; 0x50
    db9e:	f108 0802 	add.w	r8, r8, #2
    dba2:	fa53 f080 	uxtab	r0, r3, r0
				keep_str_pos[keep_cnt++] = arg_idx;
    dba6:	f80c 1c10 	strb.w	r1, [ip, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
    dbaa:	fa5f f888 	uxtb.w	r8, r8
    dbae:	f800 5c10 	strb.w	r5, [r0, #-16]
	for (unsigned int i = 0; i < rws_nbr; i++) {
    dbb2:	e70e      	b.n	d9d2 <cbprintf_package_convert+0x1fe>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    dbb4:	2000      	movs	r0, #0
    dbb6:	e723      	b.n	da00 <cbprintf_package_convert+0x22c>
		uint8_t loc = cpy_str_pos[i];
    dbb8:	f81b 300a 	ldrb.w	r3, [fp, sl]
		const char *str = *(const char **)&buf32[loc];
    dbbc:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint8_t loc = cpy_str_pos[i];
    dbc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		uint16_t str_len = strl ? strl[i] : 0;
    dbc4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    dbc6:	b1fb      	cbz	r3, dc08 <cbprintf_package_convert+0x434>
    dbc8:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
    dbcc:	2101      	movs	r1, #1
    dbce:	69ba      	ldr	r2, [r7, #24]
    dbd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    dbd2:	f107 002f 	add.w	r0, r7, #47	; 0x2f
    dbd6:	4798      	blx	r3
		if (rv < 0) {
    dbd8:	2800      	cmp	r0, #0
    dbda:	db1a      	blt.n	dc12 <cbprintf_package_convert+0x43e>
		out_len += rv;
    dbdc:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
    dbde:	f1b8 0f00 	cmp.w	r8, #0
    dbe2:	d106      	bne.n	dbf2 <cbprintf_package_convert+0x41e>
    dbe4:	4648      	mov	r0, r9
    dbe6:	f7fb fb1c 	bl	9222 <strlen>
    dbea:	f100 0801 	add.w	r8, r0, #1
    dbee:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
    dbf2:	4641      	mov	r1, r8
    dbf4:	4648      	mov	r0, r9
    dbf6:	69ba      	ldr	r2, [r7, #24]
    dbf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    dbfa:	4798      	blx	r3
		if (rv < 0) {
    dbfc:	2800      	cmp	r0, #0
    dbfe:	db08      	blt.n	dc12 <cbprintf_package_convert+0x43e>
		out_len += rv;
    dc00:	4405      	add	r5, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
    dc02:	f10b 0b01 	add.w	fp, fp, #1
    dc06:	e72d      	b.n	da64 <cbprintf_package_convert+0x290>
		uint16_t str_len = strl ? strl[i] : 0;
    dc08:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
    dc0c:	e7de      	b.n	dbcc <cbprintf_package_convert+0x3f8>
    dc0e:	4645      	mov	r5, r8
    dc10:	e616      	b.n	d840 <cbprintf_package_convert+0x6c>
    dc12:	4605      	mov	r5, r0
    dc14:	e614      	b.n	d840 <cbprintf_package_convert+0x6c>
    dc16:	bf00      	nop
    dc18:	0003743c 	.word	0x0003743c
    dc1c:	00042250 	.word	0x00042250
    dc20:	00039ba1 	.word	0x00039ba1
    dc24:	00039a4e 	.word	0x00039a4e
    dc28:	00039995 	.word	0x00039995
    dc2c:	00039bc0 	.word	0x00039bc0

0000dc30 <_check_fd>:
	return -1;
}

static int _check_fd(int fd)
{
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
    dc30:	2803      	cmp	r0, #3
{
    dc32:	b508      	push	{r3, lr}
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
    dc34:	d906      	bls.n	dc44 <_check_fd+0x14>
	}

	fd = k_array_index_sanitize(fd, ARRAY_SIZE(fdtable));

	if (!atomic_get(&fdtable[fd].refcount)) {
		errno = EBADF;
    dc36:	f023 f879 	bl	30d2c <__errno>
    dc3a:	2309      	movs	r3, #9
    dc3c:	6003      	str	r3, [r0, #0]
		return -1;
    dc3e:	f04f 30ff 	mov.w	r0, #4294967295
		return -1;
	}

	return 0;
}
    dc42:	bd08      	pop	{r3, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    dc44:	4b04      	ldr	r3, [pc, #16]	; (dc58 <_check_fd+0x28>)
    dc46:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    dc4a:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_get(&fdtable[fd].refcount)) {
    dc4e:	2b00      	cmp	r3, #0
    dc50:	d0f1      	beq.n	dc36 <_check_fd+0x6>
	return 0;
    dc52:	2000      	movs	r0, #0
    dc54:	e7f5      	b.n	dc42 <_check_fd+0x12>
    dc56:	bf00      	nop
    dc58:	2000e2a4 	.word	0x2000e2a4

0000dc5c <z_get_fd_obj_and_vtable>:
	return entry->obj;
}

void *z_get_fd_obj_and_vtable(int fd, const struct fd_op_vtable **vtable,
			      struct k_mutex **lock)
{
    dc5c:	b570      	push	{r4, r5, r6, lr}
    dc5e:	4604      	mov	r4, r0
    dc60:	460e      	mov	r6, r1
    dc62:	4615      	mov	r5, r2
	struct fd_entry *entry;

	if (_check_fd(fd) < 0) {
    dc64:	f7ff ffe4 	bl	dc30 <_check_fd>
    dc68:	2800      	cmp	r0, #0
    dc6a:	db0c      	blt.n	dc86 <z_get_fd_obj_and_vtable+0x2a>
		return NULL;
	}

	entry = &fdtable[fd];
	*vtable = entry->vtable;
    dc6c:	4b07      	ldr	r3, [pc, #28]	; (dc8c <z_get_fd_obj_and_vtable+0x30>)
    dc6e:	0161      	lsls	r1, r4, #5
    dc70:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    dc74:	6862      	ldr	r2, [r4, #4]
    dc76:	6032      	str	r2, [r6, #0]

	if (lock) {
    dc78:	b11d      	cbz	r5, dc82 <z_get_fd_obj_and_vtable+0x26>
		*lock = &entry->lock;
    dc7a:	f101 020c 	add.w	r2, r1, #12
    dc7e:	441a      	add	r2, r3
    dc80:	602a      	str	r2, [r5, #0]
	}

	return entry->obj;
    dc82:	5858      	ldr	r0, [r3, r1]
}
    dc84:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
    dc86:	2000      	movs	r0, #0
    dc88:	e7fc      	b.n	dc84 <z_get_fd_obj_and_vtable+0x28>
    dc8a:	bf00      	nop
    dc8c:	2000e29c 	.word	0x2000e29c

0000dc90 <z_reserve_fd>:

int z_reserve_fd(void)
{
    dc90:	b510      	push	{r4, lr}
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
    dc92:	2400      	movs	r4, #0
	return z_impl_k_mutex_lock(mutex, timeout);
    dc94:	f04f 33ff 	mov.w	r3, #4294967295
    dc98:	f04f 32ff 	mov.w	r2, #4294967295
    dc9c:	4814      	ldr	r0, [pc, #80]	; (dcf0 <z_reserve_fd+0x60>)
    dc9e:	f01b faa1 	bl	291e4 <z_impl_k_mutex_lock>
    dca2:	4b14      	ldr	r3, [pc, #80]	; (dcf4 <z_reserve_fd+0x64>)
    dca4:	e8d3 2faf 	lda	r2, [r3]
		if (!atomic_get(&fdtable[fd].refcount)) {
    dca8:	b17a      	cbz	r2, dcca <z_reserve_fd+0x3a>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
    dcaa:	3401      	adds	r4, #1
    dcac:	2c04      	cmp	r4, #4
    dcae:	f103 0320 	add.w	r3, r3, #32
    dcb2:	d1f7      	bne.n	dca4 <z_reserve_fd+0x14>
	errno = ENFILE;
    dcb4:	f023 f83a 	bl	30d2c <__errno>
    dcb8:	2317      	movs	r3, #23
	return -1;
    dcba:	f04f 34ff 	mov.w	r4, #4294967295
	errno = ENFILE;
    dcbe:	6003      	str	r3, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    dcc0:	480b      	ldr	r0, [pc, #44]	; (dcf0 <z_reserve_fd+0x60>)
    dcc2:	f01b fb5f 	bl	29384 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
    dcc6:	4620      	mov	r0, r4
    dcc8:	bd10      	pop	{r4, pc}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    dcca:	e8d3 0fef 	ldaex	r0, [r3]
    dcce:	3001      	adds	r0, #1
    dcd0:	e8c3 0fe1 	stlex	r1, r0, [r3]
    dcd4:	2900      	cmp	r1, #0
    dcd6:	d1f8      	bne.n	dcca <z_reserve_fd+0x3a>
		fdtable[fd].obj = NULL;
    dcd8:	4807      	ldr	r0, [pc, #28]	; (dcf8 <z_reserve_fd+0x68>)
    dcda:	0163      	lsls	r3, r4, #5
    dcdc:	eb00 1144 	add.w	r1, r0, r4, lsl #5
    dce0:	50c2      	str	r2, [r0, r3]
		fdtable[fd].vtable = NULL;
    dce2:	604a      	str	r2, [r1, #4]
		k_mutex_init(&fdtable[fd].lock);
    dce4:	330c      	adds	r3, #12
	return z_impl_k_mutex_init(mutex);
    dce6:	4418      	add	r0, r3
    dce8:	f028 fa09 	bl	360fe <z_impl_k_mutex_init>
    dcec:	e7e8      	b.n	dcc0 <z_reserve_fd+0x30>
    dcee:	bf00      	nop
    dcf0:	2000ce88 	.word	0x2000ce88
    dcf4:	2000e2a4 	.word	0x2000e2a4
    dcf8:	2000e29c 	.word	0x2000e29c

0000dcfc <z_finalize_fd>:

void z_finalize_fd(int fd, void *obj, const struct fd_op_vtable *vtable)
{
    dcfc:	b410      	push	{r4}
    dcfe:	4604      	mov	r4, r0
    dd00:	4610      	mov	r0, r2
	 * This call is a no-op if obj is invalid or points to something
	 * not a kernel object.
	 */
	z_object_recycle(obj);
#endif
	fdtable[fd].obj = obj;
    dd02:	4b09      	ldr	r3, [pc, #36]	; (dd28 <z_finalize_fd+0x2c>)
    dd04:	0162      	lsls	r2, r4, #5
    dd06:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    dd0a:	5099      	str	r1, [r3, r2]
	fdtable[fd].vtable = vtable;
    dd0c:	6060      	str	r0, [r4, #4]

	/* Let the object know about the lock just in case it needs it
	 * for something. For BSD sockets, the lock is used with condition
	 * variables to avoid keeping the lock for a long period of time.
	 */
	if (vtable && vtable->ioctl) {
    dd0e:	b140      	cbz	r0, dd22 <z_finalize_fd+0x26>
    dd10:	68c4      	ldr	r4, [r0, #12]
    dd12:	b134      	cbz	r4, dd22 <z_finalize_fd+0x26>
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
    dd14:	320c      	adds	r2, #12
    dd16:	4413      	add	r3, r2
					   &fdtable[fd].lock);
	}
}
    dd18:	bc10      	pop	{r4}
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
    dd1a:	f240 1205 	movw	r2, #261	; 0x105
    dd1e:	f021 b8fe 	b.w	2ef1e <z_fdtable_call_ioctl.constprop.0>
}
    dd22:	bc10      	pop	{r4}
    dd24:	4770      	bx	lr
    dd26:	bf00      	nop
    dd28:	2000e29c 	.word	0x2000e29c

0000dd2c <z_free_fd>:

void z_free_fd(int fd)
{
    dd2c:	b530      	push	{r4, r5, lr}
		old_rc = atomic_get(&fdtable[fd].refcount);
    dd2e:	490d      	ldr	r1, [pc, #52]	; (dd64 <z_free_fd+0x38>)
    dd30:	0140      	lsls	r0, r0, #5
    dd32:	f100 0308 	add.w	r3, r0, #8
    dd36:	440b      	add	r3, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    dd38:	e8d3 2faf 	lda	r2, [r3]
		if (!old_rc) {
    dd3c:	b182      	cbz	r2, dd60 <z_free_fd+0x34>
	} while (!atomic_cas(&fdtable[fd].refcount, old_rc, old_rc - 1));
    dd3e:	1e54      	subs	r4, r2, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    dd40:	e8d3 5fef 	ldaex	r5, [r3]
    dd44:	4295      	cmp	r5, r2
    dd46:	d104      	bne.n	dd52 <z_free_fd+0x26>
    dd48:	e8c3 4fec 	stlex	ip, r4, [r3]
    dd4c:	f1bc 0f00 	cmp.w	ip, #0
    dd50:	d1f6      	bne.n	dd40 <z_free_fd+0x14>
    dd52:	d1f1      	bne.n	dd38 <z_free_fd+0xc>
	if (old_rc != 1) {
    dd54:	2a01      	cmp	r2, #1
	fdtable[fd].obj = NULL;
    dd56:	bf01      	itttt	eq
    dd58:	2300      	moveq	r3, #0
    dd5a:	180a      	addeq	r2, r1, r0
    dd5c:	500b      	streq	r3, [r1, r0]
	fdtable[fd].vtable = NULL;
    dd5e:	6053      	streq	r3, [r2, #4]
	/* Assumes fd was already bounds-checked. */
	(void)z_fd_unref(fd);
}
    dd60:	bd30      	pop	{r4, r5, pc}
    dd62:	bf00      	nop
    dd64:	2000e29c 	.word	0x2000e29c

0000dd68 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
    dd68:	4b01      	ldr	r3, [pc, #4]	; (dd70 <__printk_hook_install+0x8>)
    dd6a:	6018      	str	r0, [r3, #0]
}
    dd6c:	4770      	bx	lr
    dd6e:	bf00      	nop
    dd70:	2000c800 	.word	0x2000c800

0000dd74 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    dd74:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    dd76:	2500      	movs	r5, #0
{
    dd78:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
    dd7a:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
    dd7e:	4604      	mov	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    dd80:	9500      	str	r5, [sp, #0]
    dd82:	a903      	add	r1, sp, #12
    dd84:	4805      	ldr	r0, [pc, #20]	; (dd9c <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
    dd86:	9505      	str	r5, [sp, #20]
    dd88:	f000 fd76 	bl	e878 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
    dd8c:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
    dd90:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    dd92:	bfb8      	it	lt
    dd94:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    dd96:	b007      	add	sp, #28
    dd98:	bd30      	pop	{r4, r5, pc}
    dd9a:	bf00      	nop
    dd9c:	0002efe1 	.word	0x0002efe1

0000dda0 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
    dda0:	b570      	push	{r4, r5, r6, lr}
	if (mem == NULL) {
    dda2:	460c      	mov	r4, r1
    dda4:	2900      	cmp	r1, #0
    dda6:	d034      	beq.n	de12 <sys_heap_free+0x72>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
    dda8:	6802      	ldr	r2, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    ddaa:	1f0b      	subs	r3, r1, #4
    ddac:	1a9b      	subs	r3, r3, r2
    ddae:	08d9      	lsrs	r1, r3, #3

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    ddb0:	f023 0307 	bic.w	r3, r3, #7

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
    ddb4:	4413      	add	r3, r2
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    ddb6:	885d      	ldrh	r5, [r3, #2]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
    ddb8:	07e8      	lsls	r0, r5, #31
    ddba:	d40d      	bmi.n	ddd8 <sys_heap_free+0x38>
    ddbc:	23af      	movs	r3, #175	; 0xaf
    ddbe:	4a15      	ldr	r2, [pc, #84]	; (de14 <sys_heap_free+0x74>)
    ddc0:	4915      	ldr	r1, [pc, #84]	; (de18 <sys_heap_free+0x78>)
    ddc2:	4816      	ldr	r0, [pc, #88]	; (de1c <sys_heap_free+0x7c>)
    ddc4:	f021 fafe 	bl	2f3c4 <assert_print>
    ddc8:	4621      	mov	r1, r4
    ddca:	4815      	ldr	r0, [pc, #84]	; (de20 <sys_heap_free+0x80>)
    ddcc:	f021 fafa 	bl	2f3c4 <assert_print>
    ddd0:	21af      	movs	r1, #175	; 0xaf
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
    ddd2:	4810      	ldr	r0, [pc, #64]	; (de14 <sys_heap_free+0x74>)
    ddd4:	f021 faef 	bl	2f3b6 <assert_post_action>
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
    ddd8:	4610      	mov	r0, r2
    ddda:	f021 f93a 	bl	2f052 <chunk_size>
    ddde:	4408      	add	r0, r1
		return ((uint16_t *)cmem)[f];
    dde0:	f832 6030 	ldrh.w	r6, [r2, r0, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    dde4:	1b80      	subs	r0, r0, r6
    dde6:	4281      	cmp	r1, r0
    dde8:	d00b      	beq.n	de02 <sys_heap_free+0x62>
    ddea:	23b7      	movs	r3, #183	; 0xb7
    ddec:	4a09      	ldr	r2, [pc, #36]	; (de14 <sys_heap_free+0x74>)
    ddee:	490d      	ldr	r1, [pc, #52]	; (de24 <sys_heap_free+0x84>)
    ddf0:	480a      	ldr	r0, [pc, #40]	; (de1c <sys_heap_free+0x7c>)
    ddf2:	f021 fae7 	bl	2f3c4 <assert_print>
    ddf6:	4621      	mov	r1, r4
    ddf8:	480b      	ldr	r0, [pc, #44]	; (de28 <sys_heap_free+0x88>)
    ddfa:	f021 fae3 	bl	2f3c4 <assert_print>
    ddfe:	21b7      	movs	r1, #183	; 0xb7
    de00:	e7e7      	b.n	ddd2 <sys_heap_free+0x32>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    de02:	f025 0501 	bic.w	r5, r5, #1
    de06:	805d      	strh	r5, [r3, #2]
#ifdef CONFIG_SYS_HEAP_LISTENER
	heap_listener_notify_free(HEAP_ID_FROM_POINTER(heap), mem,
				  chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	free_chunk(h, c);
    de08:	4610      	mov	r0, r2
}
    de0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_chunk(h, c);
    de0e:	f021 b9dd 	b.w	2f1cc <free_chunk>
}
    de12:	bd70      	pop	{r4, r5, r6, pc}
    de14:	00039bf1 	.word	0x00039bf1
    de18:	00039c12 	.word	0x00039c12
    de1c:	00039995 	.word	0x00039995
    de20:	00039c23 	.word	0x00039c23
    de24:	00039c5b 	.word	0x00039c5b
    de28:	00039c81 	.word	0x00039c81

0000de2c <sys_heap_aligned_alloc>:
	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    de2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    de30:	1e4b      	subs	r3, r1, #1
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
    de32:	400b      	ands	r3, r1
{
    de34:	460f      	mov	r7, r1
    de36:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
    de38:	6806      	ldr	r6, [r0, #0]
	if (align != rew) {
    de3a:	d010      	beq.n	de5e <sys_heap_aligned_alloc+0x32>
	rew = align & -align;
    de3c:	f1c1 0900 	rsb	r9, r1, #0
    de40:	ea09 0901 	and.w	r9, r9, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
    de44:	464a      	mov	r2, r9
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    de46:	1e59      	subs	r1, r3, #1
		gap = MIN(rew, chunk_header_bytes(h));
    de48:	2a04      	cmp	r2, #4
    de4a:	bf28      	it	cs
    de4c:	2204      	movcs	r2, #4
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    de4e:	4219      	tst	r1, r3
    de50:	d10c      	bne.n	de6c <sys_heap_aligned_alloc+0x40>
    de52:	461f      	mov	r7, r3

	if (bytes == 0 || size_too_big(h, bytes)) {
    de54:	b9e4      	cbnz	r4, de90 <sys_heap_aligned_alloc+0x64>
		return NULL;
    de56:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    de58:	4628      	mov	r0, r5
    de5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
    de5e:	2904      	cmp	r1, #4
    de60:	d813      	bhi.n	de8a <sys_heap_aligned_alloc+0x5e>
}
    de62:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
    de66:	4611      	mov	r1, r2
    de68:	f021 b9e1 	b.w	2f22e <sys_heap_alloc>
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    de6c:	492c      	ldr	r1, [pc, #176]	; (df20 <sys_heap_aligned_alloc+0xf4>)
    de6e:	f44f 73a2 	mov.w	r3, #324	; 0x144
    de72:	4a2c      	ldr	r2, [pc, #176]	; (df24 <sys_heap_aligned_alloc+0xf8>)
    de74:	482c      	ldr	r0, [pc, #176]	; (df28 <sys_heap_aligned_alloc+0xfc>)
    de76:	f021 faa5 	bl	2f3c4 <assert_print>
    de7a:	482c      	ldr	r0, [pc, #176]	; (df2c <sys_heap_aligned_alloc+0x100>)
    de7c:	f021 faa2 	bl	2f3c4 <assert_print>
    de80:	f44f 71a2 	mov.w	r1, #324	; 0x144
    de84:	4827      	ldr	r0, [pc, #156]	; (df24 <sys_heap_aligned_alloc+0xf8>)
    de86:	f021 fa96 	bl	2f3b6 <assert_post_action>
		rew = 0;
    de8a:	4699      	mov	r9, r3
		gap = chunk_header_bytes(h);
    de8c:	2204      	movs	r2, #4
    de8e:	e7e1      	b.n	de54 <sys_heap_aligned_alloc+0x28>
	if (bytes == 0 || size_too_big(h, bytes)) {
    de90:	68b3      	ldr	r3, [r6, #8]
    de92:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
    de96:	d9de      	bls.n	de56 <sys_heap_aligned_alloc+0x2a>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    de98:	f104 010b 	add.w	r1, r4, #11
    de9c:	4439      	add	r1, r7
    de9e:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    dea0:	4630      	mov	r0, r6
    dea2:	08c9      	lsrs	r1, r1, #3
    dea4:	f021 f92b 	bl	2f0fe <alloc_chunk>
	if (c0 == 0) {
    dea8:	4680      	mov	r8, r0
    deaa:	2800      	cmp	r0, #0
    deac:	d0d3      	beq.n	de56 <sys_heap_aligned_alloc+0x2a>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    deae:	f109 0504 	add.w	r5, r9, #4
    deb2:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    deb6:	1e7b      	subs	r3, r7, #1
    deb8:	4435      	add	r5, r6
    deba:	441d      	add	r5, r3
    debc:	427f      	negs	r7, r7
    debe:	403d      	ands	r5, r7
    dec0:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    dec4:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    dec6:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    dec8:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    deca:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    decc:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    ded0:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    ded2:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    ded6:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    deda:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    dede:	d208      	bcs.n	def2 <sys_heap_aligned_alloc+0xc6>
		split_chunks(h, c0, c);
    dee0:	4601      	mov	r1, r0
    dee2:	463a      	mov	r2, r7
    dee4:	4630      	mov	r0, r6
    dee6:	f021 f957 	bl	2f198 <split_chunks>
		free_list_add(h, c0);
    deea:	4641      	mov	r1, r8
    deec:	4630      	mov	r0, r6
    deee:	f021 f8b5 	bl	2f05c <free_list_add>
	return c + chunk_size(h, c);
    def2:	4639      	mov	r1, r7
    def4:	4630      	mov	r0, r6
    def6:	f021 f8ac 	bl	2f052 <chunk_size>
    defa:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    defc:	4284      	cmp	r4, r0
    defe:	d207      	bcs.n	df10 <sys_heap_aligned_alloc+0xe4>
		split_chunks(h, c, c_end);
    df00:	4630      	mov	r0, r6
    df02:	4622      	mov	r2, r4
    df04:	f021 f948 	bl	2f198 <split_chunks>
		free_list_add(h, c_end);
    df08:	4621      	mov	r1, r4
    df0a:	4630      	mov	r0, r6
    df0c:	f021 f8a6 	bl	2f05c <free_list_add>
	void *cmem = &buf[c];
    df10:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    df14:	8873      	ldrh	r3, [r6, #2]
    df16:	f043 0301 	orr.w	r3, r3, #1
    df1a:	8073      	strh	r3, [r6, #2]
    df1c:	e79c      	b.n	de58 <sys_heap_aligned_alloc+0x2c>
    df1e:	bf00      	nop
    df20:	00039cbd 	.word	0x00039cbd
    df24:	00039bf1 	.word	0x00039bf1
    df28:	00039995 	.word	0x00039995
    df2c:	00039cd8 	.word	0x00039cd8

0000df30 <sys_heap_init>:
{
	IF_ENABLED(CONFIG_MSAN, (__sanitizer_dtor_callback(mem, bytes)));

	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    df30:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
    df34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    df38:	d30e      	bcc.n	df58 <sys_heap_init+0x28>
    df3a:	493c      	ldr	r1, [pc, #240]	; (e02c <sys_heap_init+0xfc>)
    df3c:	f240 13eb 	movw	r3, #491	; 0x1eb
    df40:	4a3b      	ldr	r2, [pc, #236]	; (e030 <sys_heap_init+0x100>)
    df42:	483c      	ldr	r0, [pc, #240]	; (e034 <sys_heap_init+0x104>)
    df44:	f021 fa3e 	bl	2f3c4 <assert_print>
    df48:	483b      	ldr	r0, [pc, #236]	; (e038 <sys_heap_init+0x108>)
    df4a:	f021 fa3b 	bl	2f3c4 <assert_print>
    df4e:	f240 11eb 	movw	r1, #491	; 0x1eb
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    df52:	4837      	ldr	r0, [pc, #220]	; (e030 <sys_heap_init+0x100>)
    df54:	f021 fa2f 	bl	2f3b6 <assert_post_action>
    df58:	2a04      	cmp	r2, #4
    df5a:	d80c      	bhi.n	df76 <sys_heap_init+0x46>
    df5c:	4937      	ldr	r1, [pc, #220]	; (e03c <sys_heap_init+0x10c>)
    df5e:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
    df62:	4a33      	ldr	r2, [pc, #204]	; (e030 <sys_heap_init+0x100>)
    df64:	4833      	ldr	r0, [pc, #204]	; (e034 <sys_heap_init+0x104>)
    df66:	f021 fa2d 	bl	2f3c4 <assert_print>
    df6a:	4835      	ldr	r0, [pc, #212]	; (e040 <sys_heap_init+0x110>)
    df6c:	f021 fa2a 	bl	2f3c4 <assert_print>
    df70:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
    df74:	e7ed      	b.n	df52 <sys_heap_init+0x22>
	bytes -= heap_footer_bytes(bytes);
    df76:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    df78:	1dcd      	adds	r5, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    df7a:	188e      	adds	r6, r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    df7c:	f025 0507 	bic.w	r5, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    df80:	f026 0607 	bic.w	r6, r6, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    df84:	1b76      	subs	r6, r6, r5

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    df86:	2e17      	cmp	r6, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    df88:	ea4f 07d6 	mov.w	r7, r6, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    df8c:	d80c      	bhi.n	dfa8 <sys_heap_init+0x78>
    df8e:	492d      	ldr	r1, [pc, #180]	; (e044 <sys_heap_init+0x114>)
    df90:	f240 13fb 	movw	r3, #507	; 0x1fb
    df94:	4a26      	ldr	r2, [pc, #152]	; (e030 <sys_heap_init+0x100>)
    df96:	4827      	ldr	r0, [pc, #156]	; (e034 <sys_heap_init+0x104>)
    df98:	f021 fa14 	bl	2f3c4 <assert_print>
    df9c:	4828      	ldr	r0, [pc, #160]	; (e040 <sys_heap_init+0x110>)
    df9e:	f021 fa11 	bl	2f3c4 <assert_print>
    dfa2:	f240 11fb 	movw	r1, #507	; 0x1fb
    dfa6:	e7d4      	b.n	df52 <sys_heap_init+0x22>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    dfa8:	fab7 f487 	clz	r4, r7

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
    dfac:	f04f 0800 	mov.w	r8, #0
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    dfb0:	f1c4 0220 	rsb	r2, r4, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    dfb4:	f1c4 0424 	rsb	r4, r4, #36	; 0x24
    dfb8:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    dfba:	3407      	adds	r4, #7
    dfbc:	08e4      	lsrs	r4, r4, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    dfbe:	1c63      	adds	r3, r4, #1
    dfc0:	42bb      	cmp	r3, r7
	heap->heap = h;
    dfc2:	6005      	str	r5, [r0, #0]
	h->end_chunk = heap_sz;
    dfc4:	60af      	str	r7, [r5, #8]
	h->avail_buckets = 0;
    dfc6:	f8c5 800c 	str.w	r8, [r5, #12]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    dfca:	d90c      	bls.n	dfe6 <sys_heap_init+0xb6>
    dfcc:	491e      	ldr	r1, [pc, #120]	; (e048 <sys_heap_init+0x118>)
    dfce:	f44f 7303 	mov.w	r3, #524	; 0x20c
    dfd2:	4a17      	ldr	r2, [pc, #92]	; (e030 <sys_heap_init+0x100>)
    dfd4:	4817      	ldr	r0, [pc, #92]	; (e034 <sys_heap_init+0x104>)
    dfd6:	f021 f9f5 	bl	2f3c4 <assert_print>
    dfda:	4819      	ldr	r0, [pc, #100]	; (e040 <sys_heap_init+0x110>)
    dfdc:	f021 f9f2 	bl	2f3c4 <assert_print>
    dfe0:	f44f 7103 	mov.w	r1, #524	; 0x20c
    dfe4:	e7b5      	b.n	df52 <sys_heap_init+0x22>

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    dfe6:	4641      	mov	r1, r8
    dfe8:	0092      	lsls	r2, r2, #2
    dfea:	f105 0010 	add.w	r0, r5, #16
    dfee:	f028 fabb 	bl	36568 <memset>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    dff2:	0063      	lsls	r3, r4, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    dff4:	f043 0301 	orr.w	r3, r3, #1
    dff8:	806b      	strh	r3, [r5, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    dffa:	1b3b      	subs	r3, r7, r4
		((uint16_t *)cmem)[f] = val;
    dffc:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    e000:	0059      	lsls	r1, r3, #1
		((uint16_t *)cmem)[f] = val;
    e002:	f8a5 8000 	strh.w	r8, [r5]
    e006:	8051      	strh	r1, [r2, #2]
    e008:	19aa      	adds	r2, r5, r6
    e00a:	f825 4034 	strh.w	r4, [r5, r4, lsl #3]
    e00e:	f8a2 8002 	strh.w	r8, [r2, #2]
    e012:	53ab      	strh	r3, [r5, r6]
	void *cmem = &buf[c];
    e014:	eb05 03c7 	add.w	r3, r5, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    e018:	885a      	ldrh	r2, [r3, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
    e01a:	4621      	mov	r1, r4
    e01c:	f042 0201 	orr.w	r2, r2, #1
    e020:	805a      	strh	r2, [r3, #2]
    e022:	4628      	mov	r0, r5
}
    e024:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	free_list_add(h, chunk0_size);
    e028:	f021 b818 	b.w	2f05c <free_list_add>
    e02c:	00039cf5 	.word	0x00039cf5
    e030:	00039bf1 	.word	0x00039bf1
    e034:	00039995 	.word	0x00039995
    e038:	00039d0b 	.word	0x00039d0b
    e03c:	00039d22 	.word	0x00039d22
    e040:	00039d43 	.word	0x00039d43
    e044:	00039d5c 	.word	0x00039d5c
    e048:	00039d85 	.word	0x00039d85

0000e04c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    e04c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e050:	4604      	mov	r4, r0
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    e052:	8ba3      	ldrh	r3, [r4, #28]
{
    e054:	4608      	mov	r0, r1
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    e056:	0719      	lsls	r1, r3, #28
{
    e058:	4615      	mov	r5, r2
	if (processing) {
    e05a:	d412      	bmi.n	e082 <process_event+0x36>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    e05c:	2802      	cmp	r0, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    e05e:	f003 0107 	and.w	r1, r3, #7
		if (evt == EVT_RECHECK) {
    e062:	d164      	bne.n	e12e <process_event+0xe2>
			evt = process_recheck(mgr);
    e064:	4620      	mov	r0, r4
    e066:	f021 f926 	bl	2f2b6 <process_recheck>
		}

		if (evt == EVT_NOP) {
    e06a:	b188      	cbz	r0, e090 <process_event+0x44>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    e06c:	3801      	subs	r0, #1
    e06e:	2804      	cmp	r0, #4
    e070:	f200 8134 	bhi.w	e2dc <process_event+0x290>
    e074:	e8df f010 	tbh	[pc, r0, lsl #1]
    e078:	0132005b 	.word	0x0132005b
    e07c:	00d10081 	.word	0x00d10081
    e080:	0101      	.short	0x0101
		if (evt == EVT_COMPLETE) {
    e082:	2801      	cmp	r0, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    e084:	bf0c      	ite	eq
    e086:	f043 0110 	orreq.w	r1, r3, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    e08a:	f043 0120 	orrne.w	r1, r3, #32
    e08e:	83a1      	strh	r1, [r4, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    e090:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e092:	4620      	mov	r0, r4
    e094:	f01b f85e 	bl	29154 <z_spin_unlock_valid>
    e098:	2800      	cmp	r0, #0
    e09a:	f040 819b 	bne.w	e3d4 <process_event+0x388>
    e09e:	4998      	ldr	r1, [pc, #608]	; (e300 <process_event+0x2b4>)
    e0a0:	23c2      	movs	r3, #194	; 0xc2
    e0a2:	4a98      	ldr	r2, [pc, #608]	; (e304 <process_event+0x2b8>)
    e0a4:	4898      	ldr	r0, [pc, #608]	; (e308 <process_event+0x2bc>)
    e0a6:	f021 f98d 	bl	2f3c4 <assert_print>
    e0aa:	4621      	mov	r1, r4
    e0ac:	e0b0      	b.n	e210 <process_event+0x1c4>
    e0ae:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    e0b2:	1f50      	subs	r0, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    e0b4:	2801      	cmp	r0, #1
    e0b6:	d81e      	bhi.n	e0f6 <process_event+0xaa>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    e0b8:	2000      	movs	r0, #0
		if (state == ONOFF_STATE_TO_ON) {
    e0ba:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    e0bc:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    e0be:	e9c4 0000 	strd	r0, r0, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    e0c2:	d114      	bne.n	e0ee <process_event+0xa2>
		*clients = mgr->clients;
    e0c4:	463a      	mov	r2, r7
    e0c6:	e003      	b.n	e0d0 <process_event+0x84>
				mgr->refs += 1U;
    e0c8:	8be0      	ldrh	r0, [r4, #30]
    e0ca:	3001      	adds	r0, #1
    e0cc:	83e0      	strh	r0, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    e0ce:	6812      	ldr	r2, [r2, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    e0d0:	2a00      	cmp	r2, #0
    e0d2:	d1f9      	bne.n	e0c8 <process_event+0x7c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e0d4:	f023 0307 	bic.w	r3, r3, #7
    e0d8:	f043 0202 	orr.w	r2, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
    e0dc:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    e0de:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    e0e0:	f021 f8e9 	bl	2f2b6 <process_recheck>
    e0e4:	b390      	cbz	r0, e14c <process_event+0x100>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    e0e6:	f042 0220 	orr.w	r2, r2, #32
    e0ea:	83a2      	strh	r2, [r4, #28]
    e0ec:	e02e      	b.n	e14c <process_event+0x100>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e0ee:	f023 0307 	bic.w	r3, r3, #7
    e0f2:	b29a      	uxth	r2, r3
}
    e0f4:	e7f2      	b.n	e0dc <process_event+0x90>
	} else if (state == ONOFF_STATE_TO_OFF) {
    e0f6:	2a04      	cmp	r2, #4
    e0f8:	d133      	bne.n	e162 <process_event+0x116>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e0fa:	f023 0307 	bic.w	r3, r3, #7
    e0fe:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
    e100:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    e102:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    e104:	f021 f8d7 	bl	2f2b6 <process_recheck>
    e108:	b110      	cbz	r0, e110 <process_event+0xc4>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    e10a:	f042 0220 	orr.w	r2, r2, #32
    e10e:	83a2      	strh	r2, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    e110:	8ba3      	ldrh	r3, [r4, #28]
    e112:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    e116:	4589      	cmp	r9, r1
    e118:	f040 80ea 	bne.w	e2f0 <process_event+0x2a4>
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    e11c:	8ba1      	ldrh	r1, [r4, #28]
    e11e:	06ca      	lsls	r2, r1, #27
    e120:	f140 814f 	bpl.w	e3c2 <process_event+0x376>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    e124:	f021 0310 	bic.w	r3, r1, #16
    e128:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    e12a:	f001 0107 	and.w	r1, r1, #7
			res = mgr->last_res;
    e12e:	f8d4 8018 	ldr.w	r8, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    e132:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    e134:	f1b8 0f00 	cmp.w	r8, #0
    e138:	dab9      	bge.n	e0ae <process_event+0x62>
	list->head = NULL;
    e13a:	2200      	movs	r2, #0
		*clients = mgr->clients;
    e13c:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e13e:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    e142:	e9c4 2200 	strd	r2, r2, [r4]
    e146:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    e14a:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    e14c:	8ba3      	ldrh	r3, [r4, #28]
    e14e:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    e152:	4589      	cmp	r9, r1
    e154:	f040 80cd 	bne.w	e2f2 <process_event+0x2a6>
		    || !sys_slist_is_empty(&clients)
    e158:	2f00      	cmp	r7, #0
    e15a:	d0df      	beq.n	e11c <process_event+0xd0>
    e15c:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    e15e:	46b2      	mov	sl, r6
    e160:	e044      	b.n	e1ec <process_event+0x1a0>
		__ASSERT_NO_MSG(false);
    e162:	496a      	ldr	r1, [pc, #424]	; (e30c <process_event+0x2c0>)
    e164:	f240 131b 	movw	r3, #283	; 0x11b
    e168:	4a69      	ldr	r2, [pc, #420]	; (e310 <process_event+0x2c4>)
    e16a:	4867      	ldr	r0, [pc, #412]	; (e308 <process_event+0x2bc>)
    e16c:	f021 f92a 	bl	2f3c4 <assert_print>
    e170:	f240 111b 	movw	r1, #283	; 0x11b
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    e174:	4866      	ldr	r0, [pc, #408]	; (e310 <process_event+0x2c4>)
    e176:	f021 f91e 	bl	2f3b6 <assert_post_action>
    e17a:	b149      	cbz	r1, e190 <process_event+0x144>
    e17c:	4965      	ldr	r1, [pc, #404]	; (e314 <process_event+0x2c8>)
    e17e:	f44f 73ab 	mov.w	r3, #342	; 0x156
    e182:	4a63      	ldr	r2, [pc, #396]	; (e310 <process_event+0x2c4>)
    e184:	4860      	ldr	r0, [pc, #384]	; (e308 <process_event+0x2bc>)
    e186:	f021 f91d 	bl	2f3c4 <assert_print>
    e18a:	f44f 71ab 	mov.w	r1, #342	; 0x156
    e18e:	e7f1      	b.n	e174 <process_event+0x128>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    e190:	6823      	ldr	r3, [r4, #0]
    e192:	b94b      	cbnz	r3, e1a8 <process_event+0x15c>
    e194:	4960      	ldr	r1, [pc, #384]	; (e318 <process_event+0x2cc>)
    e196:	f240 1357 	movw	r3, #343	; 0x157
    e19a:	4a5d      	ldr	r2, [pc, #372]	; (e310 <process_event+0x2c4>)
    e19c:	485a      	ldr	r0, [pc, #360]	; (e308 <process_event+0x2bc>)
    e19e:	f021 f911 	bl	2f3c4 <assert_print>
    e1a2:	f240 1157 	movw	r1, #343	; 0x157
    e1a6:	e7e5      	b.n	e174 <process_event+0x128>
			transit = mgr->transitions->start;
    e1a8:	6923      	ldr	r3, [r4, #16]
    e1aa:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    e1ac:	b94e      	cbnz	r6, e1c2 <process_event+0x176>
    e1ae:	495b      	ldr	r1, [pc, #364]	; (e31c <process_event+0x2d0>)
    e1b0:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    e1b4:	4a56      	ldr	r2, [pc, #344]	; (e310 <process_event+0x2c4>)
    e1b6:	4854      	ldr	r0, [pc, #336]	; (e308 <process_event+0x2bc>)
    e1b8:	f021 f904 	bl	2f3c4 <assert_print>
    e1bc:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    e1c0:	e7d8      	b.n	e174 <process_event+0x128>
	mgr->flags = (state & ONOFF_STATE_MASK)
    e1c2:	460f      	mov	r7, r1
		res = 0;
    e1c4:	4688      	mov	r8, r1
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    e1c6:	f04f 0906 	mov.w	r9, #6
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e1ca:	8ba3      	ldrh	r3, [r4, #28]
    e1cc:	f023 0307 	bic.w	r3, r3, #7
    e1d0:	f043 0306 	orr.w	r3, r3, #6
    e1d4:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    e1d6:	83a3      	strh	r3, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
    e1d8:	68a2      	ldr	r2, [r4, #8]
    e1da:	2a00      	cmp	r2, #0
    e1dc:	f040 808b 	bne.w	e2f6 <process_event+0x2aa>
		    || !sys_slist_is_empty(&clients)
    e1e0:	2f00      	cmp	r7, #0
    e1e2:	f040 808b 	bne.w	e2fc <process_event+0x2b0>
		    || (transit != NULL)) {
    e1e6:	2e00      	cmp	r6, #0
    e1e8:	d098      	beq.n	e11c <process_event+0xd0>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    e1ea:	46ba      	mov	sl, r7
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    e1ec:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
    e1f0:	f104 0b14 	add.w	fp, r4, #20
    e1f4:	4658      	mov	r0, fp
			mgr->flags = flags;
    e1f6:	83a3      	strh	r3, [r4, #28]
    e1f8:	f01a ffac 	bl	29154 <z_spin_unlock_valid>
    e1fc:	2800      	cmp	r0, #0
    e1fe:	f040 8097 	bne.w	e330 <process_event+0x2e4>
    e202:	493f      	ldr	r1, [pc, #252]	; (e300 <process_event+0x2b4>)
    e204:	23c2      	movs	r3, #194	; 0xc2
    e206:	4a3f      	ldr	r2, [pc, #252]	; (e304 <process_event+0x2b8>)
    e208:	483f      	ldr	r0, [pc, #252]	; (e308 <process_event+0x2bc>)
    e20a:	f021 f8db 	bl	2f3c4 <assert_print>
    e20e:	4659      	mov	r1, fp
    e210:	4843      	ldr	r0, [pc, #268]	; (e320 <process_event+0x2d4>)
    e212:	f021 f8d7 	bl	2f3c4 <assert_print>
    e216:	21c2      	movs	r1, #194	; 0xc2
    e218:	e0ae      	b.n	e378 <process_event+0x32c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    e21a:	2902      	cmp	r1, #2
    e21c:	d009      	beq.n	e232 <process_event+0x1e6>
    e21e:	4941      	ldr	r1, [pc, #260]	; (e324 <process_event+0x2d8>)
    e220:	f240 135d 	movw	r3, #349	; 0x15d
    e224:	4a3a      	ldr	r2, [pc, #232]	; (e310 <process_event+0x2c4>)
    e226:	4838      	ldr	r0, [pc, #224]	; (e308 <process_event+0x2bc>)
    e228:	f021 f8cc 	bl	2f3c4 <assert_print>
    e22c:	f240 115d 	movw	r1, #349	; 0x15d
    e230:	e7a0      	b.n	e174 <process_event+0x128>
			__ASSERT_NO_MSG(mgr->refs == 0);
    e232:	8be7      	ldrh	r7, [r4, #30]
    e234:	b14f      	cbz	r7, e24a <process_event+0x1fe>
    e236:	493c      	ldr	r1, [pc, #240]	; (e328 <process_event+0x2dc>)
    e238:	f44f 73af 	mov.w	r3, #350	; 0x15e
    e23c:	4a34      	ldr	r2, [pc, #208]	; (e310 <process_event+0x2c4>)
    e23e:	4832      	ldr	r0, [pc, #200]	; (e308 <process_event+0x2bc>)
    e240:	f021 f8c0 	bl	2f3c4 <assert_print>
    e244:	f44f 71af 	mov.w	r1, #350	; 0x15e
    e248:	e794      	b.n	e174 <process_event+0x128>
			transit = mgr->transitions->stop;
    e24a:	6923      	ldr	r3, [r4, #16]
    e24c:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    e24e:	b94e      	cbnz	r6, e264 <process_event+0x218>
    e250:	4932      	ldr	r1, [pc, #200]	; (e31c <process_event+0x2d0>)
    e252:	f240 1361 	movw	r3, #353	; 0x161
    e256:	4a2e      	ldr	r2, [pc, #184]	; (e310 <process_event+0x2c4>)
    e258:	482b      	ldr	r0, [pc, #172]	; (e308 <process_event+0x2bc>)
    e25a:	f021 f8b3 	bl	2f3c4 <assert_print>
    e25e:	f240 1161 	movw	r1, #353	; 0x161
    e262:	e787      	b.n	e174 <process_event+0x128>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e264:	8ba3      	ldrh	r3, [r4, #28]
		res = 0;
    e266:	46b8      	mov	r8, r7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e268:	f023 0307 	bic.w	r3, r3, #7
    e26c:	f043 0304 	orr.w	r3, r3, #4
    e270:	b29b      	uxth	r3, r3
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    e272:	f04f 0904 	mov.w	r9, #4
	mgr->flags = (state & ONOFF_STATE_MASK)
    e276:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    e278:	e7ae      	b.n	e1d8 <process_event+0x18c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    e27a:	2901      	cmp	r1, #1
    e27c:	d009      	beq.n	e292 <process_event+0x246>
    e27e:	492b      	ldr	r1, [pc, #172]	; (e32c <process_event+0x2e0>)
    e280:	f44f 73b2 	mov.w	r3, #356	; 0x164
    e284:	4a22      	ldr	r2, [pc, #136]	; (e310 <process_event+0x2c4>)
    e286:	4820      	ldr	r0, [pc, #128]	; (e308 <process_event+0x2bc>)
    e288:	f021 f89c 	bl	2f3c4 <assert_print>
    e28c:	f44f 71b2 	mov.w	r1, #356	; 0x164
    e290:	e770      	b.n	e174 <process_event+0x128>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    e292:	6823      	ldr	r3, [r4, #0]
    e294:	b94b      	cbnz	r3, e2aa <process_event+0x25e>
    e296:	4920      	ldr	r1, [pc, #128]	; (e318 <process_event+0x2cc>)
    e298:	f240 1365 	movw	r3, #357	; 0x165
    e29c:	4a1c      	ldr	r2, [pc, #112]	; (e310 <process_event+0x2c4>)
    e29e:	481a      	ldr	r0, [pc, #104]	; (e308 <process_event+0x2bc>)
    e2a0:	f021 f890 	bl	2f3c4 <assert_print>
    e2a4:	f240 1165 	movw	r1, #357	; 0x165
    e2a8:	e764      	b.n	e174 <process_event+0x128>
			transit = mgr->transitions->reset;
    e2aa:	6923      	ldr	r3, [r4, #16]
    e2ac:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    e2ae:	b94e      	cbnz	r6, e2c4 <process_event+0x278>
    e2b0:	491a      	ldr	r1, [pc, #104]	; (e31c <process_event+0x2d0>)
    e2b2:	f44f 73b4 	mov.w	r3, #360	; 0x168
    e2b6:	4a16      	ldr	r2, [pc, #88]	; (e310 <process_event+0x2c4>)
    e2b8:	4813      	ldr	r0, [pc, #76]	; (e308 <process_event+0x2bc>)
    e2ba:	f021 f883 	bl	2f3c4 <assert_print>
    e2be:	f44f 71b4 	mov.w	r1, #360	; 0x168
    e2c2:	e757      	b.n	e174 <process_event+0x128>
	mgr->flags = (state & ONOFF_STATE_MASK)
    e2c4:	2700      	movs	r7, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e2c6:	8ba3      	ldrh	r3, [r4, #28]
		res = 0;
    e2c8:	46b8      	mov	r8, r7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e2ca:	f023 0307 	bic.w	r3, r3, #7
    e2ce:	f043 0305 	orr.w	r3, r3, #5
    e2d2:	b29b      	uxth	r3, r3
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    e2d4:	f04f 0905 	mov.w	r9, #5
	mgr->flags = (state & ONOFF_STATE_MASK)
    e2d8:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    e2da:	e77d      	b.n	e1d8 <process_event+0x18c>
			__ASSERT_NO_MSG(false);
    e2dc:	490b      	ldr	r1, [pc, #44]	; (e30c <process_event+0x2c0>)
    e2de:	f240 136b 	movw	r3, #363	; 0x16b
    e2e2:	4a0b      	ldr	r2, [pc, #44]	; (e310 <process_event+0x2c4>)
    e2e4:	4808      	ldr	r0, [pc, #32]	; (e308 <process_event+0x2bc>)
    e2e6:	f021 f86d 	bl	2f3c4 <assert_print>
    e2ea:	f240 116b 	movw	r1, #363	; 0x16b
    e2ee:	e741      	b.n	e174 <process_event+0x128>
				   && !sys_slist_is_empty(&mgr->monitors);
    e2f0:	2700      	movs	r7, #0
    e2f2:	2600      	movs	r6, #0
    e2f4:	e770      	b.n	e1d8 <process_event+0x18c>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    e2f6:	f04f 0a01 	mov.w	sl, #1
    e2fa:	e777      	b.n	e1ec <process_event+0x1a0>
    e2fc:	4692      	mov	sl, r2
    e2fe:	e775      	b.n	e1ec <process_event+0x1a0>
    e300:	00039e80 	.word	0x00039e80
    e304:	00039e53 	.word	0x00039e53
    e308:	00039995 	.word	0x00039995
    e30c:	0003ea9e 	.word	0x0003ea9e
    e310:	00039db0 	.word	0x00039db0
    e314:	00039dd2 	.word	0x00039dd2
    e318:	00039dde 	.word	0x00039dde
    e31c:	00039e01 	.word	0x00039e01
    e320:	00039e97 	.word	0x00039e97
    e324:	00039e18 	.word	0x00039e18
    e328:	00039e2e 	.word	0x00039e2e
    e32c:	00039e3d 	.word	0x00039e3d
    e330:	f385 8811 	msr	BASEPRI, r5
    e334:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    e338:	f1ba 0f00 	cmp.w	sl, #0
    e33c:	d11e      	bne.n	e37c <process_event+0x330>
	while (!sys_slist_is_empty(list)) {
    e33e:	2f00      	cmp	r7, #0
    e340:	d12f      	bne.n	e3a2 <process_event+0x356>
			if (transit != NULL) {
    e342:	b116      	cbz	r6, e34a <process_event+0x2fe>
				transit(mgr, transition_complete);
    e344:	4620      	mov	r0, r4
    e346:	4926      	ldr	r1, [pc, #152]	; (e3e0 <process_event+0x394>)
    e348:	47b0      	blx	r6
	__asm__ volatile(
    e34a:	f04f 0320 	mov.w	r3, #32
    e34e:	f3ef 8511 	mrs	r5, BASEPRI
    e352:	f383 8812 	msr	BASEPRI_MAX, r3
    e356:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e35a:	4658      	mov	r0, fp
    e35c:	f01a feec 	bl	29138 <z_spin_lock_valid>
    e360:	bb38      	cbnz	r0, e3b2 <process_event+0x366>
    e362:	2394      	movs	r3, #148	; 0x94
    e364:	4a1f      	ldr	r2, [pc, #124]	; (e3e4 <process_event+0x398>)
    e366:	4920      	ldr	r1, [pc, #128]	; (e3e8 <process_event+0x39c>)
    e368:	4820      	ldr	r0, [pc, #128]	; (e3ec <process_event+0x3a0>)
    e36a:	f021 f82b 	bl	2f3c4 <assert_print>
    e36e:	4659      	mov	r1, fp
    e370:	481f      	ldr	r0, [pc, #124]	; (e3f0 <process_event+0x3a4>)
    e372:	f021 f827 	bl	2f3c4 <assert_print>
    e376:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e378:	481a      	ldr	r0, [pc, #104]	; (e3e4 <process_event+0x398>)
    e37a:	e6fc      	b.n	e176 <process_event+0x12a>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    e37c:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    e37e:	2900      	cmp	r1, #0
    e380:	d0dd      	beq.n	e33e <process_event+0x2f2>
	return node->next;
    e382:	680d      	ldr	r5, [r1, #0]
    e384:	2900      	cmp	r1, #0
    e386:	d0da      	beq.n	e33e <process_event+0x2f2>
		mon->callback(mgr, mon, state, res);
    e388:	4643      	mov	r3, r8
    e38a:	464a      	mov	r2, r9
    e38c:	4620      	mov	r0, r4
    e38e:	f8d1 a004 	ldr.w	sl, [r1, #4]
    e392:	47d0      	blx	sl
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    e394:	b11d      	cbz	r5, e39e <process_event+0x352>
    e396:	682b      	ldr	r3, [r5, #0]
    e398:	4629      	mov	r1, r5
    e39a:	461d      	mov	r5, r3
    e39c:	e7f2      	b.n	e384 <process_event+0x338>
    e39e:	462b      	mov	r3, r5
    e3a0:	e7fa      	b.n	e398 <process_event+0x34c>
    e3a2:	4639      	mov	r1, r7
		notify_one(mgr, cli, state, res);
    e3a4:	4643      	mov	r3, r8
    e3a6:	464a      	mov	r2, r9
    e3a8:	4620      	mov	r0, r4
    e3aa:	683f      	ldr	r7, [r7, #0]
    e3ac:	f020 ffaf 	bl	2f30e <notify_one>
    e3b0:	e7c5      	b.n	e33e <process_event+0x2f2>
	z_spin_lock_set_owner(l);
    e3b2:	4658      	mov	r0, fp
    e3b4:	f01a fedc 	bl	29170 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    e3b8:	8ba3      	ldrh	r3, [r4, #28]
    e3ba:	f023 0308 	bic.w	r3, r3, #8
    e3be:	83a3      	strh	r3, [r4, #28]
    e3c0:	e6ac      	b.n	e11c <process_event+0xd0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    e3c2:	068b      	lsls	r3, r1, #26
    e3c4:	f57f ae64 	bpl.w	e090 <process_event+0x44>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    e3c8:	f021 0320 	bic.w	r3, r1, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    e3cc:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    e3ce:	f001 0107 	and.w	r1, r1, #7
		if (evt == EVT_RECHECK) {
    e3d2:	e647      	b.n	e064 <process_event+0x18>
	__asm__ volatile(
    e3d4:	f385 8811 	msr	BASEPRI, r5
    e3d8:	f3bf 8f6f 	isb	sy
}
    e3dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e3e0:	0000e3f5 	.word	0x0000e3f5
    e3e4:	00039e53 	.word	0x00039e53
    e3e8:	00039eac 	.word	0x00039eac
    e3ec:	00039995 	.word	0x00039995
    e3f0:	00039ec1 	.word	0x00039ec1

0000e3f4 <transition_complete>:
{
    e3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e3f6:	4604      	mov	r4, r0
    e3f8:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    e3fa:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
    e3fe:	f04f 0320 	mov.w	r3, #32
    e402:	f3ef 8711 	mrs	r7, BASEPRI
    e406:	f383 8812 	msr	BASEPRI_MAX, r3
    e40a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e40e:	4630      	mov	r0, r6
    e410:	f01a fe92 	bl	29138 <z_spin_lock_valid>
    e414:	b968      	cbnz	r0, e432 <transition_complete+0x3e>
    e416:	2394      	movs	r3, #148	; 0x94
    e418:	4a0b      	ldr	r2, [pc, #44]	; (e448 <transition_complete+0x54>)
    e41a:	490c      	ldr	r1, [pc, #48]	; (e44c <transition_complete+0x58>)
    e41c:	480c      	ldr	r0, [pc, #48]	; (e450 <transition_complete+0x5c>)
    e41e:	f020 ffd1 	bl	2f3c4 <assert_print>
    e422:	4631      	mov	r1, r6
    e424:	480b      	ldr	r0, [pc, #44]	; (e454 <transition_complete+0x60>)
    e426:	f020 ffcd 	bl	2f3c4 <assert_print>
    e42a:	2194      	movs	r1, #148	; 0x94
    e42c:	4806      	ldr	r0, [pc, #24]	; (e448 <transition_complete+0x54>)
    e42e:	f020 ffc2 	bl	2f3b6 <assert_post_action>
	z_spin_lock_set_owner(l);
    e432:	4630      	mov	r0, r6
    e434:	f01a fe9c 	bl	29170 <z_spin_lock_set_owner>
	mgr->last_res = res;
    e438:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    e43a:	463a      	mov	r2, r7
    e43c:	4620      	mov	r0, r4
}
    e43e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    e442:	2101      	movs	r1, #1
    e444:	f7ff be02 	b.w	e04c <process_event>
    e448:	00039e53 	.word	0x00039e53
    e44c:	00039eac 	.word	0x00039eac
    e450:	00039995 	.word	0x00039995
    e454:	00039ec1 	.word	0x00039ec1

0000e458 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    e458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e45c:	4604      	mov	r4, r0
    e45e:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    e460:	f020 ff45 	bl	2f2ee <validate_args>

	if (rv < 0) {
    e464:	1e05      	subs	r5, r0, #0
    e466:	db67      	blt.n	e538 <onoff_request+0xe0>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    e468:	f104 0914 	add.w	r9, r4, #20
    e46c:	f04f 0320 	mov.w	r3, #32
    e470:	f3ef 8a11 	mrs	sl, BASEPRI
    e474:	f383 8812 	msr	BASEPRI_MAX, r3
    e478:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e47c:	4648      	mov	r0, r9
    e47e:	f01a fe5b 	bl	29138 <z_spin_lock_valid>
    e482:	4680      	mov	r8, r0
    e484:	b960      	cbnz	r0, e4a0 <onoff_request+0x48>
    e486:	2394      	movs	r3, #148	; 0x94
    e488:	4a37      	ldr	r2, [pc, #220]	; (e568 <onoff_request+0x110>)
    e48a:	4938      	ldr	r1, [pc, #224]	; (e56c <onoff_request+0x114>)
    e48c:	4838      	ldr	r0, [pc, #224]	; (e570 <onoff_request+0x118>)
    e48e:	f020 ff99 	bl	2f3c4 <assert_print>
    e492:	4649      	mov	r1, r9
    e494:	4837      	ldr	r0, [pc, #220]	; (e574 <onoff_request+0x11c>)
    e496:	f020 ff95 	bl	2f3c4 <assert_print>
    e49a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e49c:	4832      	ldr	r0, [pc, #200]	; (e568 <onoff_request+0x110>)
    e49e:	e040      	b.n	e522 <onoff_request+0xca>
	z_spin_lock_set_owner(l);
    e4a0:	4648      	mov	r0, r9
    e4a2:	f01a fe65 	bl	29170 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    e4a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e4aa:	8be3      	ldrh	r3, [r4, #30]
    e4ac:	8ba6      	ldrh	r6, [r4, #28]
    e4ae:	4293      	cmp	r3, r2
    e4b0:	f006 0607 	and.w	r6, r6, #7
    e4b4:	d043      	beq.n	e53e <onoff_request+0xe6>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    e4b6:	2e02      	cmp	r6, #2
    e4b8:	d113      	bne.n	e4e2 <onoff_request+0x8a>
	rv = state;
    e4ba:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    e4bc:	3301      	adds	r3, #1
    e4be:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e4c0:	4648      	mov	r0, r9
    e4c2:	f01a fe47 	bl	29154 <z_spin_unlock_valid>
    e4c6:	2800      	cmp	r0, #0
    e4c8:	d13f      	bne.n	e54a <onoff_request+0xf2>
    e4ca:	23c2      	movs	r3, #194	; 0xc2
    e4cc:	4a26      	ldr	r2, [pc, #152]	; (e568 <onoff_request+0x110>)
    e4ce:	492a      	ldr	r1, [pc, #168]	; (e578 <onoff_request+0x120>)
    e4d0:	4827      	ldr	r0, [pc, #156]	; (e570 <onoff_request+0x118>)
    e4d2:	f020 ff77 	bl	2f3c4 <assert_print>
    e4d6:	4649      	mov	r1, r9
    e4d8:	4828      	ldr	r0, [pc, #160]	; (e57c <onoff_request+0x124>)
    e4da:	f020 ff73 	bl	2f3c4 <assert_print>
    e4de:	21c2      	movs	r1, #194	; 0xc2
    e4e0:	e7dc      	b.n	e49c <onoff_request+0x44>
	} else if ((state == ONOFF_STATE_OFF)
    e4e2:	2e06      	cmp	r6, #6
    e4e4:	d813      	bhi.n	e50e <onoff_request+0xb6>
    e4e6:	e8df f006 	tbb	[pc, r6]
    e4ea:	2d09      	.short	0x2d09
    e4ec:	04091212 	.word	0x04091212
    e4f0:	09          	.byte	0x09
    e4f1:	00          	.byte	0x00
	if (state == ONOFF_STATE_ON) {
    e4f2:	f06f 0585 	mvn.w	r5, #133	; 0x85
    e4f6:	f04f 0800 	mov.w	r8, #0
    e4fa:	e7e1      	b.n	e4c0 <onoff_request+0x68>
	parent->next = child;
    e4fc:	2300      	movs	r3, #0
    e4fe:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    e500:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    e502:	b983      	cbnz	r3, e526 <onoff_request+0xce>
	list->head = node;
    e504:	e9c4 7700 	strd	r7, r7, [r4]
out:
	if (add_client) {
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    e508:	b186      	cbz	r6, e52c <onoff_request+0xd4>
	rv = state;
    e50a:	4635      	mov	r5, r6
    e50c:	e7f3      	b.n	e4f6 <onoff_request+0x9e>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    e50e:	491c      	ldr	r1, [pc, #112]	; (e580 <onoff_request+0x128>)
    e510:	4817      	ldr	r0, [pc, #92]	; (e570 <onoff_request+0x118>)
    e512:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
    e516:	4a1b      	ldr	r2, [pc, #108]	; (e584 <onoff_request+0x12c>)
    e518:	f020 ff54 	bl	2f3c4 <assert_print>
    e51c:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    e520:	4818      	ldr	r0, [pc, #96]	; (e584 <onoff_request+0x12c>)
    e522:	f020 ff48 	bl	2f3b6 <assert_post_action>
	parent->next = child;
    e526:	601f      	str	r7, [r3, #0]
	list->tail = node;
    e528:	6067      	str	r7, [r4, #4]
}
    e52a:	e7ed      	b.n	e508 <onoff_request+0xb0>
		process_event(mgr, EVT_RECHECK, key);
    e52c:	4652      	mov	r2, sl
    e52e:	2102      	movs	r1, #2
    e530:	4620      	mov	r0, r4
    e532:	f7ff fd8b 	bl	e04c <process_event>
    e536:	4635      	mov	r5, r6
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    e538:	4628      	mov	r0, r5
    e53a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rv = -EAGAIN;
    e53e:	f06f 050a 	mvn.w	r5, #10
    e542:	e7d8      	b.n	e4f6 <onoff_request+0x9e>
	if (state == ONOFF_STATE_ON) {
    e544:	f06f 0504 	mvn.w	r5, #4
    e548:	e7d5      	b.n	e4f6 <onoff_request+0x9e>
	__asm__ volatile(
    e54a:	f38a 8811 	msr	BASEPRI, sl
    e54e:	f3bf 8f6f 	isb	sy
		if (notify) {
    e552:	f1b8 0f00 	cmp.w	r8, #0
    e556:	d0ef      	beq.n	e538 <onoff_request+0xe0>
			notify_one(mgr, cli, state, 0);
    e558:	2300      	movs	r3, #0
    e55a:	4632      	mov	r2, r6
    e55c:	4639      	mov	r1, r7
    e55e:	4620      	mov	r0, r4
    e560:	f020 fed5 	bl	2f30e <notify_one>
    e564:	e7e8      	b.n	e538 <onoff_request+0xe0>
    e566:	bf00      	nop
    e568:	00039e53 	.word	0x00039e53
    e56c:	00039eac 	.word	0x00039eac
    e570:	00039995 	.word	0x00039995
    e574:	00039ec1 	.word	0x00039ec1
    e578:	00039e80 	.word	0x00039e80
    e57c:	00039e97 	.word	0x00039e97
    e580:	00039e3d 	.word	0x00039e3d
    e584:	00039db0 	.word	0x00039db0

0000e588 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    e588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e58a:	4605      	mov	r5, r0
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    e58c:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
    e590:	f04f 0320 	mov.w	r3, #32
    e594:	f3ef 8711 	mrs	r7, BASEPRI
    e598:	f383 8812 	msr	BASEPRI_MAX, r3
    e59c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e5a0:	4630      	mov	r0, r6
    e5a2:	f01a fdc9 	bl	29138 <z_spin_lock_valid>
    e5a6:	b960      	cbnz	r0, e5c2 <onoff_release+0x3a>
    e5a8:	2394      	movs	r3, #148	; 0x94
    e5aa:	4a24      	ldr	r2, [pc, #144]	; (e63c <onoff_release+0xb4>)
    e5ac:	4924      	ldr	r1, [pc, #144]	; (e640 <onoff_release+0xb8>)
    e5ae:	4825      	ldr	r0, [pc, #148]	; (e644 <onoff_release+0xbc>)
    e5b0:	f020 ff08 	bl	2f3c4 <assert_print>
    e5b4:	4631      	mov	r1, r6
    e5b6:	4824      	ldr	r0, [pc, #144]	; (e648 <onoff_release+0xc0>)
    e5b8:	f020 ff04 	bl	2f3c4 <assert_print>
    e5bc:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e5be:	481f      	ldr	r0, [pc, #124]	; (e63c <onoff_release+0xb4>)
    e5c0:	e029      	b.n	e616 <onoff_release+0x8e>
	z_spin_lock_set_owner(l);
    e5c2:	4630      	mov	r0, r6
    e5c4:	f01a fdd4 	bl	29170 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    e5c8:	8bac      	ldrh	r4, [r5, #28]
    e5ca:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    e5ce:	2c02      	cmp	r4, #2
    e5d0:	d015      	beq.n	e5fe <onoff_release+0x76>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    e5d2:	2c01      	cmp	r4, #1
    e5d4:	bf0c      	ite	eq
    e5d6:	f06f 0404 	mvneq.w	r4, #4
    e5da:	f06f 0485 	mvnne.w	r4, #133	; 0x85
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e5de:	4630      	mov	r0, r6
    e5e0:	f01a fdb8 	bl	29154 <z_spin_unlock_valid>
    e5e4:	bb28      	cbnz	r0, e632 <onoff_release+0xaa>
    e5e6:	23c2      	movs	r3, #194	; 0xc2
    e5e8:	4a14      	ldr	r2, [pc, #80]	; (e63c <onoff_release+0xb4>)
    e5ea:	4918      	ldr	r1, [pc, #96]	; (e64c <onoff_release+0xc4>)
    e5ec:	4815      	ldr	r0, [pc, #84]	; (e644 <onoff_release+0xbc>)
    e5ee:	f020 fee9 	bl	2f3c4 <assert_print>
    e5f2:	4631      	mov	r1, r6
    e5f4:	4816      	ldr	r0, [pc, #88]	; (e650 <onoff_release+0xc8>)
    e5f6:	f020 fee5 	bl	2f3c4 <assert_print>
    e5fa:	21c2      	movs	r1, #194	; 0xc2
    e5fc:	e7df      	b.n	e5be <onoff_release+0x36>
		}
		goto out;
	}

	__ASSERT_NO_MSG(mgr->refs > 0);
    e5fe:	8beb      	ldrh	r3, [r5, #30]
    e600:	b95b      	cbnz	r3, e61a <onoff_release+0x92>
    e602:	4914      	ldr	r1, [pc, #80]	; (e654 <onoff_release+0xcc>)
    e604:	480f      	ldr	r0, [pc, #60]	; (e644 <onoff_release+0xbc>)
    e606:	f240 13ef 	movw	r3, #495	; 0x1ef
    e60a:	4a13      	ldr	r2, [pc, #76]	; (e658 <onoff_release+0xd0>)
    e60c:	f020 feda 	bl	2f3c4 <assert_print>
    e610:	f240 11ef 	movw	r1, #495	; 0x1ef
    e614:	4810      	ldr	r0, [pc, #64]	; (e658 <onoff_release+0xd0>)
    e616:	f020 fece 	bl	2f3b6 <assert_post_action>
	mgr->refs -= 1U;
    e61a:	3b01      	subs	r3, #1
    e61c:	b29b      	uxth	r3, r3
    e61e:	83eb      	strh	r3, [r5, #30]
	stop = (mgr->refs == 0);

out:
	if (stop) {
    e620:	2b00      	cmp	r3, #0
    e622:	d1dc      	bne.n	e5de <onoff_release+0x56>
		process_event(mgr, EVT_RECHECK, key);
    e624:	463a      	mov	r2, r7
    e626:	4621      	mov	r1, r4
    e628:	4628      	mov	r0, r5
    e62a:	f7ff fd0f 	bl	e04c <process_event>
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
}
    e62e:	4620      	mov	r0, r4
    e630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm__ volatile(
    e632:	f387 8811 	msr	BASEPRI, r7
    e636:	f3bf 8f6f 	isb	sy
	return rv;
    e63a:	e7f8      	b.n	e62e <onoff_release+0xa6>
    e63c:	00039e53 	.word	0x00039e53
    e640:	00039eac 	.word	0x00039eac
    e644:	00039995 	.word	0x00039995
    e648:	00039ec1 	.word	0x00039ec1
    e64c:	00039e80 	.word	0x00039e80
    e650:	00039e97 	.word	0x00039e97
    e654:	00039ed9 	.word	0x00039ed9
    e658:	00039db0 	.word	0x00039db0

0000e65c <onoff_cancel>:
	return rv;
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
    e65c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e660:	460f      	mov	r7, r1
	if ((mgr == NULL) || (cli == NULL)) {
    e662:	4605      	mov	r5, r0
    e664:	2800      	cmp	r0, #0
    e666:	d04f      	beq.n	e708 <onoff_cancel+0xac>
    e668:	2900      	cmp	r1, #0
    e66a:	d04d      	beq.n	e708 <onoff_cancel+0xac>
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    e66c:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
    e670:	f04f 0320 	mov.w	r3, #32
    e674:	f3ef 8811 	mrs	r8, BASEPRI
    e678:	f383 8812 	msr	BASEPRI_MAX, r3
    e67c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e680:	4630      	mov	r0, r6
    e682:	f01a fd59 	bl	29138 <z_spin_lock_valid>
    e686:	b960      	cbnz	r0, e6a2 <onoff_cancel+0x46>
    e688:	2394      	movs	r3, #148	; 0x94
    e68a:	4a21      	ldr	r2, [pc, #132]	; (e710 <onoff_cancel+0xb4>)
    e68c:	4921      	ldr	r1, [pc, #132]	; (e714 <onoff_cancel+0xb8>)
    e68e:	4822      	ldr	r0, [pc, #136]	; (e718 <onoff_cancel+0xbc>)
    e690:	f020 fe98 	bl	2f3c4 <assert_print>
    e694:	4631      	mov	r1, r6
    e696:	4821      	ldr	r0, [pc, #132]	; (e71c <onoff_cancel+0xc0>)
    e698:	f020 fe94 	bl	2f3c4 <assert_print>
    e69c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e69e:	481c      	ldr	r0, [pc, #112]	; (e710 <onoff_cancel+0xb4>)
    e6a0:	e017      	b.n	e6d2 <onoff_cancel+0x76>
	z_spin_lock_set_owner(l);
    e6a2:	4630      	mov	r0, r6
    e6a4:	f01a fd64 	bl	29170 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
    e6a8:	4639      	mov	r1, r7
    e6aa:	4628      	mov	r0, r5
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    e6ac:	8bac      	ldrh	r4, [r5, #28]
	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
    e6ae:	f020 fde7 	bl	2f280 <sys_slist_find_and_remove>
    e6b2:	b180      	cbz	r0, e6d6 <onoff_cancel+0x7a>
    e6b4:	f004 0407 	and.w	r4, r4, #7
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
    e6b8:	1f23      	subs	r3, r4, #4
    e6ba:	2b02      	cmp	r3, #2
    e6bc:	d90d      	bls.n	e6da <onoff_cancel+0x7e>
    e6be:	4918      	ldr	r1, [pc, #96]	; (e720 <onoff_cancel+0xc4>)
    e6c0:	4815      	ldr	r0, [pc, #84]	; (e718 <onoff_cancel+0xbc>)
    e6c2:	f240 232d 	movw	r3, #557	; 0x22d
    e6c6:	4a17      	ldr	r2, [pc, #92]	; (e724 <onoff_cancel+0xc8>)
    e6c8:	f020 fe7c 	bl	2f3c4 <assert_print>
    e6cc:	f240 212d 	movw	r1, #557	; 0x22d
    e6d0:	4814      	ldr	r0, [pc, #80]	; (e724 <onoff_cancel+0xc8>)
    e6d2:	f020 fe70 	bl	2f3b6 <assert_post_action>
	int rv = -EALREADY;
    e6d6:	f06f 0477 	mvn.w	r4, #119	; 0x77
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e6da:	4630      	mov	r0, r6
    e6dc:	f01a fd3a 	bl	29154 <z_spin_unlock_valid>
    e6e0:	b958      	cbnz	r0, e6fa <onoff_cancel+0x9e>
    e6e2:	23c2      	movs	r3, #194	; 0xc2
    e6e4:	4a0a      	ldr	r2, [pc, #40]	; (e710 <onoff_cancel+0xb4>)
    e6e6:	4910      	ldr	r1, [pc, #64]	; (e728 <onoff_cancel+0xcc>)
    e6e8:	480b      	ldr	r0, [pc, #44]	; (e718 <onoff_cancel+0xbc>)
    e6ea:	f020 fe6b 	bl	2f3c4 <assert_print>
    e6ee:	4631      	mov	r1, r6
    e6f0:	480e      	ldr	r0, [pc, #56]	; (e72c <onoff_cancel+0xd0>)
    e6f2:	f020 fe67 	bl	2f3c4 <assert_print>
    e6f6:	21c2      	movs	r1, #194	; 0xc2
    e6f8:	e7d1      	b.n	e69e <onoff_cancel+0x42>
	__asm__ volatile(
    e6fa:	f388 8811 	msr	BASEPRI, r8
    e6fe:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
    e702:	4620      	mov	r0, r4
    e704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
    e708:	f06f 0415 	mvn.w	r4, #21
    e70c:	e7f9      	b.n	e702 <onoff_cancel+0xa6>
    e70e:	bf00      	nop
    e710:	00039e53 	.word	0x00039e53
    e714:	00039eac 	.word	0x00039eac
    e718:	00039995 	.word	0x00039995
    e71c:	00039ec1 	.word	0x00039ec1
    e720:	00039ee7 	.word	0x00039ee7
    e724:	00039db0 	.word	0x00039db0
    e728:	00039e80 	.word	0x00039e80
    e72c:	00039e97 	.word	0x00039e97

0000e730 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    e730:	b508      	push	{r3, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    e732:	6842      	ldr	r2, [r0, #4]
    e734:	4603      	mov	r3, r0

	return method & SYS_NOTIFY_METHOD_MASK;
    e736:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    e73a:	2a02      	cmp	r2, #2
	notify->result = res;
    e73c:	6081      	str	r1, [r0, #8]
	switch (method) {
    e73e:	d00a      	beq.n	e756 <sys_notify_finalize+0x26>
    e740:	2a03      	cmp	r2, #3
    e742:	f04f 0100 	mov.w	r1, #0
    e746:	d003      	beq.n	e750 <sys_notify_finalize+0x20>
    e748:	2a01      	cmp	r2, #1
    e74a:	d10a      	bne.n	e762 <sys_notify_finalize+0x32>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    e74c:	6059      	str	r1, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    e74e:	e006      	b.n	e75e <sys_notify_finalize+0x2e>
		rv = notify->method.callback;
    e750:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    e752:	6059      	str	r1, [r3, #4]
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    e754:	bd08      	pop	{r3, pc}
		sig = notify->method.signal;
    e756:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    e758:	2200      	movs	r2, #0
    e75a:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    e75c:	b958      	cbnz	r0, e776 <sys_notify_finalize+0x46>
	sys_notify_generic_callback rv = NULL;
    e75e:	2000      	movs	r0, #0
    e760:	e7f8      	b.n	e754 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
    e762:	4906      	ldr	r1, [pc, #24]	; (e77c <sys_notify_finalize+0x4c>)
    e764:	4806      	ldr	r0, [pc, #24]	; (e780 <sys_notify_finalize+0x50>)
    e766:	2345      	movs	r3, #69	; 0x45
    e768:	4a06      	ldr	r2, [pc, #24]	; (e784 <sys_notify_finalize+0x54>)
    e76a:	f020 fe2b 	bl	2f3c4 <assert_print>
    e76e:	2145      	movs	r1, #69	; 0x45
    e770:	4804      	ldr	r0, [pc, #16]	; (e784 <sys_notify_finalize+0x54>)
    e772:	f020 fe20 	bl	2f3b6 <assert_post_action>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    e776:	f01d fde1 	bl	2c33c <z_impl_k_poll_signal_raise>
    e77a:	e7f0      	b.n	e75e <sys_notify_finalize+0x2e>
    e77c:	0003ea9e 	.word	0x0003ea9e
    e780:	00039995 	.word	0x00039995
    e784:	00039f5e 	.word	0x00039f5e

0000e788 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
    e788:	b510      	push	{r4, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    e78a:	4c09      	ldr	r4, [pc, #36]	; (e7b0 <crc8_ccitt+0x28>)
    e78c:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
    e78e:	4291      	cmp	r1, r2
    e790:	d100      	bne.n	e794 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
    e792:	bd10      	pop	{r4, pc}
		val ^= p[i];
    e794:	f811 3b01 	ldrb.w	r3, [r1], #1
    e798:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    e79a:	0903      	lsrs	r3, r0, #4
    e79c:	5ce3      	ldrb	r3, [r4, r3]
    e79e:	0100      	lsls	r0, r0, #4
    e7a0:	b2c0      	uxtb	r0, r0
    e7a2:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    e7a4:	0918      	lsrs	r0, r3, #4
    e7a6:	5c20      	ldrb	r0, [r4, r0]
    e7a8:	011b      	lsls	r3, r3, #4
    e7aa:	b2db      	uxtb	r3, r3
    e7ac:	4058      	eors	r0, r3
	for (i = 0; i < cnt; i++) {
    e7ae:	e7ee      	b.n	e78e <crc8_ccitt+0x6>
    e7b0:	00039f81 	.word	0x00039f81

0000e7b4 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    e7b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    e7b6:	4602      	mov	r2, r0
    e7b8:	6801      	ldr	r1, [r0, #0]
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp) != 0) {
		val = 10U * val + *sp++ - '0';
    e7ba:	270a      	movs	r7, #10
	size_t val = 0;
    e7bc:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp) != 0) {
    e7be:	4e07      	ldr	r6, [pc, #28]	; (e7dc <extract_decimal+0x28>)
    e7c0:	460b      	mov	r3, r1
    e7c2:	781c      	ldrb	r4, [r3, #0]
    e7c4:	3101      	adds	r1, #1
    e7c6:	5d35      	ldrb	r5, [r6, r4]
    e7c8:	076d      	lsls	r5, r5, #29
    e7ca:	d401      	bmi.n	e7d0 <extract_decimal+0x1c>
	}
	*str = sp;
    e7cc:	6013      	str	r3, [r2, #0]
	return val;
}
    e7ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    e7d0:	fb07 4300 	mla	r3, r7, r0, r4
    e7d4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    e7d8:	e7f2      	b.n	e7c0 <extract_decimal+0xc>
    e7da:	bf00      	nop
    e7dc:	00041f02 	.word	0x00041f02

0000e7e0 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    e7e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e7e4:	4615      	mov	r5, r2
    e7e6:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
    e7e8:	78d3      	ldrb	r3, [r2, #3]
    e7ea:	4a22      	ldr	r2, [pc, #136]	; (e874 <encode_uint+0x94>)
	switch (specifier) {
    e7ec:	2b6f      	cmp	r3, #111	; 0x6f
    e7ee:	f812 b003 	ldrb.w	fp, [r2, r3]
{
    e7f2:	4680      	mov	r8, r0
    e7f4:	460f      	mov	r7, r1
    e7f6:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    e7fa:	d029      	beq.n	e850 <encode_uint+0x70>
    e7fc:	d824      	bhi.n	e848 <encode_uint+0x68>
		return 10;
    e7fe:	2b58      	cmp	r3, #88	; 0x58
    e800:	bf0c      	ite	eq
    e802:	2610      	moveq	r6, #16
    e804:	260a      	movne	r6, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    e806:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    e80a:	4632      	mov	r2, r6
    e80c:	2300      	movs	r3, #0
    e80e:	4640      	mov	r0, r8
    e810:	4639      	mov	r1, r7
    e812:	f7fa fb3f 	bl	8e94 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
    e816:	2a09      	cmp	r2, #9
    e818:	b2d4      	uxtb	r4, r2
    e81a:	d81e      	bhi.n	e85a <encode_uint+0x7a>
    e81c:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
    e81e:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    e820:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    e822:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    e826:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    e82a:	d301      	bcc.n	e830 <encode_uint+0x50>
    e82c:	45d1      	cmp	r9, sl
    e82e:	d811      	bhi.n	e854 <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    e830:	782b      	ldrb	r3, [r5, #0]
    e832:	069b      	lsls	r3, r3, #26
    e834:	d505      	bpl.n	e842 <encode_uint+0x62>
		if (radix == 8) {
    e836:	2e08      	cmp	r6, #8
    e838:	d115      	bne.n	e866 <encode_uint+0x86>
			conv->altform_0 = true;
    e83a:	78ab      	ldrb	r3, [r5, #2]
    e83c:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
    e840:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
    e842:	4648      	mov	r0, r9
    e844:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    e848:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    e84c:	2b70      	cmp	r3, #112	; 0x70
    e84e:	e7d7      	b.n	e800 <encode_uint+0x20>
	switch (specifier) {
    e850:	2608      	movs	r6, #8
    e852:	e7d8      	b.n	e806 <encode_uint+0x26>
		value /= radix;
    e854:	4680      	mov	r8, r0
    e856:	460f      	mov	r7, r1
    e858:	e7d7      	b.n	e80a <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    e85a:	f1bb 0f01 	cmp.w	fp, #1
    e85e:	bf0c      	ite	eq
    e860:	3437      	addeq	r4, #55	; 0x37
    e862:	3457      	addne	r4, #87	; 0x57
    e864:	e7db      	b.n	e81e <encode_uint+0x3e>
		} else if (radix == 16) {
    e866:	2e10      	cmp	r6, #16
    e868:	d1eb      	bne.n	e842 <encode_uint+0x62>
			conv->altform_0c = true;
    e86a:	78ab      	ldrb	r3, [r5, #2]
    e86c:	f043 0310 	orr.w	r3, r3, #16
    e870:	e7e6      	b.n	e840 <encode_uint+0x60>
    e872:	bf00      	nop
    e874:	00041f02 	.word	0x00041f02

0000e878 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    e878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e87c:	468a      	mov	sl, r1
    e87e:	4616      	mov	r6, r2
    e880:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    e882:	2500      	movs	r5, #0
{
    e884:	b097      	sub	sp, #92	; 0x5c
    e886:	9003      	str	r0, [sp, #12]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    e888:	7830      	ldrb	r0, [r6, #0]
    e88a:	b908      	cbnz	r0, e890 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    e88c:	4628      	mov	r0, r5
    e88e:	e34a      	b.n	ef26 <z_cbvprintf_impl+0x6ae>
			OUTC(*fp++);
    e890:	1c73      	adds	r3, r6, #1
		if (*fp != '%') {
    e892:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    e894:	9304      	str	r3, [sp, #16]
		if (*fp != '%') {
    e896:	d007      	beq.n	e8a8 <z_cbvprintf_impl+0x30>
			OUTC('%');
    e898:	4651      	mov	r1, sl
    e89a:	9b03      	ldr	r3, [sp, #12]
    e89c:	4798      	blx	r3
    e89e:	2800      	cmp	r0, #0
    e8a0:	f2c0 8341 	blt.w	ef26 <z_cbvprintf_impl+0x6ae>
    e8a4:	3501      	adds	r5, #1
		if (bps == NULL) {
    e8a6:	e1f0      	b.n	ec8a <z_cbvprintf_impl+0x412>
		} state = {
    e8a8:	2218      	movs	r2, #24
    e8aa:	2100      	movs	r1, #0
    e8ac:	a810      	add	r0, sp, #64	; 0x40
    e8ae:	f027 fe5b 	bl	36568 <memset>
	if (*sp == '%') {
    e8b2:	7873      	ldrb	r3, [r6, #1]
    e8b4:	2b25      	cmp	r3, #37	; 0x25
    e8b6:	f000 80a3 	beq.w	ea00 <z_cbvprintf_impl+0x188>
    e8ba:	2300      	movs	r3, #0
    e8bc:	4698      	mov	r8, r3
    e8be:	469e      	mov	lr, r3
    e8c0:	469c      	mov	ip, r3
    e8c2:	4618      	mov	r0, r3
    e8c4:	1c71      	adds	r1, r6, #1
    e8c6:	460f      	mov	r7, r1
		switch (*sp) {
    e8c8:	f811 2b01 	ldrb.w	r2, [r1], #1
    e8cc:	2a2b      	cmp	r2, #43	; 0x2b
    e8ce:	f000 80c6 	beq.w	ea5e <z_cbvprintf_impl+0x1e6>
    e8d2:	f200 80bd 	bhi.w	ea50 <z_cbvprintf_impl+0x1d8>
    e8d6:	2a20      	cmp	r2, #32
    e8d8:	f000 80c4 	beq.w	ea64 <z_cbvprintf_impl+0x1ec>
    e8dc:	2a23      	cmp	r2, #35	; 0x23
    e8de:	f000 80c4 	beq.w	ea6a <z_cbvprintf_impl+0x1f2>
    e8e2:	b12b      	cbz	r3, e8f0 <z_cbvprintf_impl+0x78>
    e8e4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    e8e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e8ec:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    e8f0:	f1b8 0f00 	cmp.w	r8, #0
    e8f4:	d005      	beq.n	e902 <z_cbvprintf_impl+0x8a>
    e8f6:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    e8fa:	f043 0320 	orr.w	r3, r3, #32
    e8fe:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    e902:	f1be 0f00 	cmp.w	lr, #0
    e906:	d005      	beq.n	e914 <z_cbvprintf_impl+0x9c>
    e908:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    e90c:	f043 0310 	orr.w	r3, r3, #16
    e910:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    e914:	f1bc 0f00 	cmp.w	ip, #0
    e918:	d005      	beq.n	e926 <z_cbvprintf_impl+0xae>
    e91a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    e91e:	f043 0308 	orr.w	r3, r3, #8
    e922:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    e926:	b128      	cbz	r0, e934 <z_cbvprintf_impl+0xbc>
    e928:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    e92c:	f043 0304 	orr.w	r3, r3, #4
    e930:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
    e934:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    e938:	f003 0144 	and.w	r1, r3, #68	; 0x44
    e93c:	2944      	cmp	r1, #68	; 0x44
    e93e:	d103      	bne.n	e948 <z_cbvprintf_impl+0xd0>
		conv->flag_zero = false;
    e940:	f36f 1386 	bfc	r3, #6, #1
    e944:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
    e948:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    e94c:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    e94e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e952:	9709      	str	r7, [sp, #36]	; 0x24
    e954:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    e958:	f040 808c 	bne.w	ea74 <z_cbvprintf_impl+0x1fc>
		conv->width_star = true;
    e95c:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    e960:	f043 0301 	orr.w	r3, r3, #1
    e964:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		return ++sp;
    e968:	1c7b      	adds	r3, r7, #1
	conv->prec_present = (*sp == '.');
    e96a:	781a      	ldrb	r2, [r3, #0]
    e96c:	2a2e      	cmp	r2, #46	; 0x2e
    e96e:	bf0c      	ite	eq
    e970:	2101      	moveq	r1, #1
    e972:	2100      	movne	r1, #0
    e974:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    e978:	f361 0241 	bfi	r2, r1, #1, #1
    e97c:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
    e980:	d10c      	bne.n	e99c <z_cbvprintf_impl+0x124>
	++sp;
    e982:	1c5a      	adds	r2, r3, #1
    e984:	9209      	str	r2, [sp, #36]	; 0x24
	if (*sp == '*') {
    e986:	785a      	ldrb	r2, [r3, #1]
    e988:	2a2a      	cmp	r2, #42	; 0x2a
    e98a:	f040 8083 	bne.w	ea94 <z_cbvprintf_impl+0x21c>
		conv->prec_star = true;
    e98e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
		return ++sp;
    e992:	3302      	adds	r3, #2
		conv->prec_star = true;
    e994:	f042 0204 	orr.w	r2, r2, #4
    e998:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	switch (*sp) {
    e99c:	781a      	ldrb	r2, [r3, #0]
    e99e:	2a6c      	cmp	r2, #108	; 0x6c
    e9a0:	f000 80a4 	beq.w	eaec <z_cbvprintf_impl+0x274>
    e9a4:	f200 8086 	bhi.w	eab4 <z_cbvprintf_impl+0x23c>
    e9a8:	2a68      	cmp	r2, #104	; 0x68
    e9aa:	f000 808c 	beq.w	eac6 <z_cbvprintf_impl+0x24e>
    e9ae:	2a6a      	cmp	r2, #106	; 0x6a
    e9b0:	f000 80a5 	beq.w	eafe <z_cbvprintf_impl+0x286>
    e9b4:	2a4c      	cmp	r2, #76	; 0x4c
    e9b6:	f000 80aa 	beq.w	eb0e <z_cbvprintf_impl+0x296>
	conv->specifier = *sp++;
    e9ba:	461a      	mov	r2, r3
    e9bc:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
    e9c0:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
    e9c2:	9204      	str	r2, [sp, #16]
    e9c4:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->length_mod == LENGTH_UPPER_L) {
    e9c8:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
	switch (conv->specifier) {
    e9cc:	f200 8117 	bhi.w	ebfe <z_cbvprintf_impl+0x386>
    e9d0:	2b6d      	cmp	r3, #109	; 0x6d
    e9d2:	f200 80a9 	bhi.w	eb28 <z_cbvprintf_impl+0x2b0>
    e9d6:	2b69      	cmp	r3, #105	; 0x69
    e9d8:	f200 8111 	bhi.w	ebfe <z_cbvprintf_impl+0x386>
    e9dc:	2b57      	cmp	r3, #87	; 0x57
    e9de:	f200 80be 	bhi.w	eb5e <z_cbvprintf_impl+0x2e6>
    e9e2:	2b41      	cmp	r3, #65	; 0x41
    e9e4:	d003      	beq.n	e9ee <z_cbvprintf_impl+0x176>
    e9e6:	3b45      	subs	r3, #69	; 0x45
    e9e8:	2b02      	cmp	r3, #2
    e9ea:	f200 8108 	bhi.w	ebfe <z_cbvprintf_impl+0x386>
		conv->specifier_cat = SPECIFIER_FP;
    e9ee:	2204      	movs	r2, #4
    e9f0:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    e9f4:	f362 0302 	bfi	r3, r2, #0, #3
    e9f8:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			unsupported = true;
    e9fc:	2301      	movs	r3, #1
			break;
    e9fe:	e0ca      	b.n	eb96 <z_cbvprintf_impl+0x31e>
		conv->specifier = *sp++;
    ea00:	1cb2      	adds	r2, r6, #2
    ea02:	9204      	str	r2, [sp, #16]
    ea04:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
    ea08:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    ea0c:	07d9      	lsls	r1, r3, #31
    ea0e:	f140 80fd 	bpl.w	ec0c <z_cbvprintf_impl+0x394>
			width = va_arg(ap, int);
    ea12:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    ea16:	f1b8 0f00 	cmp.w	r8, #0
    ea1a:	da07      	bge.n	ea2c <z_cbvprintf_impl+0x1b4>
				conv->flag_dash = true;
    ea1c:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				width = -width;
    ea20:	f1c8 0800 	rsb	r8, r8, #0
				conv->flag_dash = true;
    ea24:	f042 0204 	orr.w	r2, r2, #4
    ea28:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
		if (conv->prec_star) {
    ea2c:	075a      	lsls	r2, r3, #29
    ea2e:	f140 80f6 	bpl.w	ec1e <z_cbvprintf_impl+0x3a6>
			int arg = va_arg(ap, int);
    ea32:	f854 bb04 	ldr.w	fp, [r4], #4
			if (arg < 0) {
    ea36:	f1bb 0f00 	cmp.w	fp, #0
    ea3a:	f280 80f5 	bge.w	ec28 <z_cbvprintf_impl+0x3b0>
				conv->prec_present = false;
    ea3e:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    ea42:	f36f 0341 	bfc	r3, #1, #1
    ea46:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
    ea4a:	f04f 3bff 	mov.w	fp, #4294967295
    ea4e:	e0eb      	b.n	ec28 <z_cbvprintf_impl+0x3b0>
		switch (*sp) {
    ea50:	2a2d      	cmp	r2, #45	; 0x2d
    ea52:	d00d      	beq.n	ea70 <z_cbvprintf_impl+0x1f8>
    ea54:	2a30      	cmp	r2, #48	; 0x30
    ea56:	f47f af44 	bne.w	e8e2 <z_cbvprintf_impl+0x6a>
    ea5a:	2301      	movs	r3, #1
	} while (loop);
    ea5c:	e733      	b.n	e8c6 <z_cbvprintf_impl+0x4e>
		switch (*sp) {
    ea5e:	f04f 0c01 	mov.w	ip, #1
    ea62:	e730      	b.n	e8c6 <z_cbvprintf_impl+0x4e>
    ea64:	f04f 0e01 	mov.w	lr, #1
    ea68:	e72d      	b.n	e8c6 <z_cbvprintf_impl+0x4e>
    ea6a:	f04f 0801 	mov.w	r8, #1
    ea6e:	e72a      	b.n	e8c6 <z_cbvprintf_impl+0x4e>
    ea70:	2001      	movs	r0, #1
    ea72:	e728      	b.n	e8c6 <z_cbvprintf_impl+0x4e>
	size_t width = extract_decimal(&sp);
    ea74:	a809      	add	r0, sp, #36	; 0x24
    ea76:	f7ff fe9d 	bl	e7b4 <extract_decimal>
	if (sp != wp) {
    ea7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ea7c:	42bb      	cmp	r3, r7
    ea7e:	f43f af74 	beq.w	e96a <z_cbvprintf_impl+0xf2>
		conv->unsupported |= ((conv->width_value < 0)
    ea82:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
		conv->width_value = width;
    ea86:	9013      	str	r0, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
    ea88:	0fc0      	lsrs	r0, r0, #31
		conv->unsupported |= ((conv->width_value < 0)
    ea8a:	f360 0241 	bfi	r2, r0, #1, #1
    ea8e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
    ea92:	e76a      	b.n	e96a <z_cbvprintf_impl+0xf2>
	size_t prec = extract_decimal(&sp);
    ea94:	a809      	add	r0, sp, #36	; 0x24
    ea96:	f7ff fe8d 	bl	e7b4 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    ea9a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	conv->prec_value = prec;
    ea9e:	9014      	str	r0, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
    eaa0:	f3c3 0240 	ubfx	r2, r3, #1, #1
    eaa4:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
    eaa8:	f362 0341 	bfi	r3, r2, #1, #1
    eaac:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	return sp;
    eab0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    eab2:	e773      	b.n	e99c <z_cbvprintf_impl+0x124>
	switch (*sp) {
    eab4:	2a74      	cmp	r2, #116	; 0x74
    eab6:	d026      	beq.n	eb06 <z_cbvprintf_impl+0x28e>
    eab8:	2a7a      	cmp	r2, #122	; 0x7a
    eaba:	f47f af7e 	bne.w	e9ba <z_cbvprintf_impl+0x142>
		conv->length_mod = LENGTH_Z;
    eabe:	2106      	movs	r1, #6
    eac0:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    eac4:	e00c      	b.n	eae0 <z_cbvprintf_impl+0x268>
		if (*++sp == 'h') {
    eac6:	785a      	ldrb	r2, [r3, #1]
    eac8:	2a68      	cmp	r2, #104	; 0x68
    eaca:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    eace:	d106      	bne.n	eade <z_cbvprintf_impl+0x266>
			conv->length_mod = LENGTH_HH;
    ead0:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    ead2:	f361 02c6 	bfi	r2, r1, #3, #4
    ead6:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
    eada:	3302      	adds	r3, #2
    eadc:	e76d      	b.n	e9ba <z_cbvprintf_impl+0x142>
			conv->length_mod = LENGTH_H;
    eade:	2102      	movs	r1, #2
    eae0:	f361 02c6 	bfi	r2, r1, #3, #4
    eae4:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
    eae8:	3301      	adds	r3, #1
    eaea:	e766      	b.n	e9ba <z_cbvprintf_impl+0x142>
		if (*++sp == 'l') {
    eaec:	785a      	ldrb	r2, [r3, #1]
    eaee:	2a6c      	cmp	r2, #108	; 0x6c
    eaf0:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    eaf4:	d101      	bne.n	eafa <z_cbvprintf_impl+0x282>
			conv->length_mod = LENGTH_LL;
    eaf6:	2104      	movs	r1, #4
    eaf8:	e7eb      	b.n	ead2 <z_cbvprintf_impl+0x25a>
			conv->length_mod = LENGTH_L;
    eafa:	2103      	movs	r1, #3
    eafc:	e7f0      	b.n	eae0 <z_cbvprintf_impl+0x268>
		conv->length_mod = LENGTH_J;
    eafe:	2105      	movs	r1, #5
    eb00:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    eb04:	e7ec      	b.n	eae0 <z_cbvprintf_impl+0x268>
		conv->length_mod = LENGTH_T;
    eb06:	2107      	movs	r1, #7
    eb08:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    eb0c:	e7e8      	b.n	eae0 <z_cbvprintf_impl+0x268>
		conv->unsupported = true;
    eb0e:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
    eb12:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    eb16:	f022 0202 	bic.w	r2, r2, #2
    eb1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    eb1e:	f042 0202 	orr.w	r2, r2, #2
    eb22:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
    eb26:	e7df      	b.n	eae8 <z_cbvprintf_impl+0x270>
	switch (conv->specifier) {
    eb28:	3b6e      	subs	r3, #110	; 0x6e
    eb2a:	b2d9      	uxtb	r1, r3
    eb2c:	2301      	movs	r3, #1
    eb2e:	408b      	lsls	r3, r1
    eb30:	f240 4182 	movw	r1, #1154	; 0x482
    eb34:	420b      	tst	r3, r1
    eb36:	d138      	bne.n	ebaa <z_cbvprintf_impl+0x332>
    eb38:	f013 0f24 	tst.w	r3, #36	; 0x24
    eb3c:	d152      	bne.n	ebe4 <z_cbvprintf_impl+0x36c>
    eb3e:	07df      	lsls	r7, r3, #31
    eb40:	d55d      	bpl.n	ebfe <z_cbvprintf_impl+0x386>
		conv->specifier_cat = SPECIFIER_PTR;
    eb42:	2103      	movs	r1, #3
    eb44:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    eb48:	f361 0302 	bfi	r3, r1, #0, #3
    eb4c:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    eb50:	f002 0378 	and.w	r3, r2, #120	; 0x78
    eb54:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
    eb58:	4243      	negs	r3, r0
    eb5a:	4143      	adcs	r3, r0
    eb5c:	e01b      	b.n	eb96 <z_cbvprintf_impl+0x31e>
    eb5e:	2001      	movs	r0, #1
	switch (conv->specifier) {
    eb60:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    eb64:	b2c9      	uxtb	r1, r1
    eb66:	fa00 f101 	lsl.w	r1, r0, r1
    eb6a:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    eb6e:	f47f af3e 	bne.w	e9ee <z_cbvprintf_impl+0x176>
    eb72:	f640 0701 	movw	r7, #2049	; 0x801
    eb76:	4239      	tst	r1, r7
    eb78:	d11d      	bne.n	ebb6 <z_cbvprintf_impl+0x33e>
    eb7a:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    eb7e:	d03e      	beq.n	ebfe <z_cbvprintf_impl+0x386>
		conv->specifier_cat = SPECIFIER_SINT;
    eb80:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    eb84:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    eb88:	f002 0278 	and.w	r2, r2, #120	; 0x78
    eb8c:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    eb8e:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    eb92:	d034      	beq.n	ebfe <z_cbvprintf_impl+0x386>
	bool unsupported = false;
    eb94:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    eb96:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    eb9a:	f3c2 0140 	ubfx	r1, r2, #1, #1
    eb9e:	430b      	orrs	r3, r1
    eba0:	f363 0241 	bfi	r2, r3, #1, #1
    eba4:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
    eba8:	e72e      	b.n	ea08 <z_cbvprintf_impl+0x190>
		conv->specifier_cat = SPECIFIER_UINT;
    ebaa:	2102      	movs	r1, #2
    ebac:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    ebb0:	f361 0302 	bfi	r3, r1, #0, #3
    ebb4:	e7e8      	b.n	eb88 <z_cbvprintf_impl+0x310>
    ebb6:	2002      	movs	r0, #2
    ebb8:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    ebbc:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    ebc0:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    ebc4:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    ebc6:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
    ebca:	bf02      	ittt	eq
    ebcc:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
    ebd0:	f041 0101 	orreq.w	r1, r1, #1
    ebd4:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
    ebd8:	2b63      	cmp	r3, #99	; 0x63
    ebda:	d1db      	bne.n	eb94 <z_cbvprintf_impl+0x31c>
			unsupported = (conv->length_mod != LENGTH_NONE);
    ebdc:	1e13      	subs	r3, r2, #0
    ebde:	bf18      	it	ne
    ebe0:	2301      	movne	r3, #1
    ebe2:	e7d8      	b.n	eb96 <z_cbvprintf_impl+0x31e>
		conv->specifier_cat = SPECIFIER_PTR;
    ebe4:	2103      	movs	r1, #3
    ebe6:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    ebea:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    ebee:	f361 0302 	bfi	r3, r1, #0, #3
    ebf2:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    ebf6:	bf14      	ite	ne
    ebf8:	2301      	movne	r3, #1
    ebfa:	2300      	moveq	r3, #0
    ebfc:	e7cb      	b.n	eb96 <z_cbvprintf_impl+0x31e>
		conv->invalid = true;
    ebfe:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    ec02:	f043 0301 	orr.w	r3, r3, #1
    ec06:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
    ec0a:	e7c3      	b.n	eb94 <z_cbvprintf_impl+0x31c>
		} else if (conv->width_present) {
    ec0c:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
    ec10:	2a00      	cmp	r2, #0
		int width = -1;
    ec12:	bfac      	ite	ge
    ec14:	f04f 38ff 	movge.w	r8, #4294967295
			width = conv->width_value;
    ec18:	f8dd 804c 	ldrlt.w	r8, [sp, #76]	; 0x4c
    ec1c:	e706      	b.n	ea2c <z_cbvprintf_impl+0x1b4>
		} else if (conv->prec_present) {
    ec1e:	079f      	lsls	r7, r3, #30
    ec20:	f57f af13 	bpl.w	ea4a <z_cbvprintf_impl+0x1d2>
			precision = conv->prec_value;
    ec24:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
		conv->pad0_value = 0;
    ec28:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    ec2a:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
			= (enum specifier_cat_enum)conv->specifier_cat;
    ec2e:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			= (enum length_mod_enum)conv->length_mod;
    ec32:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		enum specifier_cat_enum specifier_cat
    ec36:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    ec3a:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    ec3c:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    ec40:	d133      	bne.n	ecaa <z_cbvprintf_impl+0x432>
			switch (length_mod) {
    ec42:	1ecb      	subs	r3, r1, #3
    ec44:	2b04      	cmp	r3, #4
    ec46:	d804      	bhi.n	ec52 <z_cbvprintf_impl+0x3da>
    ec48:	e8df f003 	tbb	[pc, r3]
    ec4c:	21464621 	.word	0x21464621
    ec50:	21          	.byte	0x21
    ec51:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    ec52:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    ec54:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    ec56:	ea4f 72e3 	mov.w	r2, r3, asr #31
    ec5a:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    ec5e:	d11c      	bne.n	ec9a <z_cbvprintf_impl+0x422>
				value->sint = (signed char)value->sint;
    ec60:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
    ec64:	17da      	asrs	r2, r3, #31
    ec66:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
    ec6a:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    ec6c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    ec70:	f013 0703 	ands.w	r7, r3, #3
    ec74:	d050      	beq.n	ed18 <z_cbvprintf_impl+0x4a0>
			OUTS(sp, fp);
    ec76:	4632      	mov	r2, r6
    ec78:	4651      	mov	r1, sl
    ec7a:	9b04      	ldr	r3, [sp, #16]
    ec7c:	9803      	ldr	r0, [sp, #12]
    ec7e:	f020 fb83 	bl	2f388 <outs>
    ec82:	2800      	cmp	r0, #0
    ec84:	f2c0 814f 	blt.w	ef26 <z_cbvprintf_impl+0x6ae>
    ec88:	4405      	add	r5, r0
			continue;
    ec8a:	9e04      	ldr	r6, [sp, #16]
    ec8c:	e5fc      	b.n	e888 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    ec8e:	f854 3b04 	ldr.w	r3, [r4], #4
    ec92:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    ec94:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
    ec98:	e7e8      	b.n	ec6c <z_cbvprintf_impl+0x3f4>
			} else if (length_mod == LENGTH_H) {
    ec9a:	2902      	cmp	r1, #2
    ec9c:	d1e5      	bne.n	ec6a <z_cbvprintf_impl+0x3f2>
				value->sint = (short)value->sint;
    ec9e:	b21a      	sxth	r2, r3
    eca0:	f343 33c0 	sbfx	r3, r3, #15, #1
    eca4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    eca8:	e7df      	b.n	ec6a <z_cbvprintf_impl+0x3f2>
		} else if (specifier_cat == SPECIFIER_UINT) {
    ecaa:	2b02      	cmp	r3, #2
    ecac:	d124      	bne.n	ecf8 <z_cbvprintf_impl+0x480>
			switch (length_mod) {
    ecae:	1ecb      	subs	r3, r1, #3
    ecb0:	2b04      	cmp	r3, #4
    ecb2:	d804      	bhi.n	ecbe <z_cbvprintf_impl+0x446>
    ecb4:	e8df f003 	tbb	[pc, r3]
    ecb8:	18101018 	.word	0x18101018
    ecbc:	18          	.byte	0x18
    ecbd:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    ecbe:	2901      	cmp	r1, #1
    ecc0:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
    ecc4:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    ecc8:	d014      	beq.n	ecf4 <z_cbvprintf_impl+0x47c>
			} else if (length_mod == LENGTH_H) {
    ecca:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    eccc:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
    ecd0:	d1cc      	bne.n	ec6c <z_cbvprintf_impl+0x3f4>
				value->uint = (unsigned short)value->uint;
    ecd2:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    ecd4:	9310      	str	r3, [sp, #64]	; 0x40
    ecd6:	e7c9      	b.n	ec6c <z_cbvprintf_impl+0x3f4>
					(uint_value_type)va_arg(ap,
    ecd8:	3407      	adds	r4, #7
    ecda:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    ecde:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    ece2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    ece6:	e7c1      	b.n	ec6c <z_cbvprintf_impl+0x3f4>
					(uint_value_type)va_arg(ap, size_t);
    ece8:	f854 3b04 	ldr.w	r3, [r4], #4
    ecec:	9310      	str	r3, [sp, #64]	; 0x40
    ecee:	2300      	movs	r3, #0
    ecf0:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
    ecf2:	e7bb      	b.n	ec6c <z_cbvprintf_impl+0x3f4>
				value->uint = (unsigned char)value->uint;
    ecf4:	b2db      	uxtb	r3, r3
    ecf6:	e7cd      	b.n	ec94 <z_cbvprintf_impl+0x41c>
		} else if (specifier_cat == SPECIFIER_FP) {
    ecf8:	2b04      	cmp	r3, #4
    ecfa:	d108      	bne.n	ed0e <z_cbvprintf_impl+0x496>
					(sint_value_type)va_arg(ap, long long);
    ecfc:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    ecfe:	f024 0407 	bic.w	r4, r4, #7
    ed02:	e9d4 2300 	ldrd	r2, r3, [r4]
    ed06:	3408      	adds	r4, #8
    ed08:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    ed0c:	e7ae      	b.n	ec6c <z_cbvprintf_impl+0x3f4>
		} else if (specifier_cat == SPECIFIER_PTR) {
    ed0e:	2b03      	cmp	r3, #3
    ed10:	d1ac      	bne.n	ec6c <z_cbvprintf_impl+0x3f4>
			value->ptr = va_arg(ap, void *);
    ed12:	f854 3b04 	ldr.w	r3, [r4], #4
    ed16:	e7dd      	b.n	ecd4 <z_cbvprintf_impl+0x45c>
		switch (conv->specifier) {
    ed18:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    ed1c:	2878      	cmp	r0, #120	; 0x78
    ed1e:	d8b4      	bhi.n	ec8a <z_cbvprintf_impl+0x412>
    ed20:	2862      	cmp	r0, #98	; 0x62
    ed22:	d81d      	bhi.n	ed60 <z_cbvprintf_impl+0x4e8>
    ed24:	2825      	cmp	r0, #37	; 0x25
    ed26:	f43f adb7 	beq.w	e898 <z_cbvprintf_impl+0x20>
    ed2a:	2858      	cmp	r0, #88	; 0x58
    ed2c:	d1ad      	bne.n	ec8a <z_cbvprintf_impl+0x412>
			bps = encode_uint(value->uint, conv, buf, bpe);
    ed2e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    ed32:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    ed36:	9300      	str	r3, [sp, #0]
    ed38:	aa12      	add	r2, sp, #72	; 0x48
    ed3a:	ab0a      	add	r3, sp, #40	; 0x28
    ed3c:	f7ff fd50 	bl	e7e0 <encode_uint>
			if (precision >= 0) {
    ed40:	f1bb 0f00 	cmp.w	fp, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    ed44:	4681      	mov	r9, r0
			if (precision >= 0) {
    ed46:	f280 8098 	bge.w	ee7a <z_cbvprintf_impl+0x602>
		if (bps == NULL) {
    ed4a:	f1b9 0f00 	cmp.w	r9, #0
    ed4e:	d09c      	beq.n	ec8a <z_cbvprintf_impl+0x412>
		size_t nj_len = (bpe - bps);
    ed50:	f10d 063e 	add.w	r6, sp, #62	; 0x3e
    ed54:	eba6 0309 	sub.w	r3, r6, r9
		if (sign != 0) {
    ed58:	2f00      	cmp	r7, #0
    ed5a:	d050      	beq.n	edfe <z_cbvprintf_impl+0x586>
			nj_len += 1U;
    ed5c:	3301      	adds	r3, #1
    ed5e:	e04e      	b.n	edfe <z_cbvprintf_impl+0x586>
		switch (conv->specifier) {
    ed60:	3863      	subs	r0, #99	; 0x63
    ed62:	2815      	cmp	r0, #21
    ed64:	d891      	bhi.n	ec8a <z_cbvprintf_impl+0x412>
    ed66:	a201      	add	r2, pc, #4	; (adr r2, ed6c <z_cbvprintf_impl+0x4f4>)
    ed68:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    ed6c:	0000eded 	.word	0x0000eded
    ed70:	0000ee51 	.word	0x0000ee51
    ed74:	0000ec8b 	.word	0x0000ec8b
    ed78:	0000ec8b 	.word	0x0000ec8b
    ed7c:	0000ec8b 	.word	0x0000ec8b
    ed80:	0000ec8b 	.word	0x0000ec8b
    ed84:	0000ee51 	.word	0x0000ee51
    ed88:	0000ec8b 	.word	0x0000ec8b
    ed8c:	0000ec8b 	.word	0x0000ec8b
    ed90:	0000ec8b 	.word	0x0000ec8b
    ed94:	0000ec8b 	.word	0x0000ec8b
    ed98:	0000eedb 	.word	0x0000eedb
    ed9c:	0000ee75 	.word	0x0000ee75
    eda0:	0000ee9d 	.word	0x0000ee9d
    eda4:	0000ec8b 	.word	0x0000ec8b
    eda8:	0000ec8b 	.word	0x0000ec8b
    edac:	0000edc5 	.word	0x0000edc5
    edb0:	0000ec8b 	.word	0x0000ec8b
    edb4:	0000ee75 	.word	0x0000ee75
    edb8:	0000ec8b 	.word	0x0000ec8b
    edbc:	0000ec8b 	.word	0x0000ec8b
    edc0:	0000ee75 	.word	0x0000ee75
			if (precision >= 0) {
    edc4:	f1bb 0f00 	cmp.w	fp, #0
			bps = (const char *)value->ptr;
    edc8:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
			if (precision >= 0) {
    edcc:	db0a      	blt.n	ede4 <z_cbvprintf_impl+0x56c>
				len = strnlen(bps, precision);
    edce:	4659      	mov	r1, fp
    edd0:	4648      	mov	r0, r9
    edd2:	f027 fd62 	bl	3689a <strnlen>
		if (bps == NULL) {
    edd6:	f1b9 0f00 	cmp.w	r9, #0
    edda:	f43f af56 	beq.w	ec8a <z_cbvprintf_impl+0x412>
			bpe = bps + len;
    edde:	eb09 0600 	add.w	r6, r9, r0
    ede2:	e076      	b.n	eed2 <z_cbvprintf_impl+0x65a>
				len = strlen(bps);
    ede4:	4648      	mov	r0, r9
    ede6:	f7fa fa1c 	bl	9222 <strlen>
    edea:	e7f8      	b.n	edde <z_cbvprintf_impl+0x566>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    edec:	9b10      	ldr	r3, [sp, #64]	; 0x40
		char sign = 0;
    edee:	2700      	movs	r7, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    edf0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		size_t nj_len = (bpe - bps);
    edf4:	2301      	movs	r3, #1
			bpe = buf + 1;
    edf6:	f10d 0629 	add.w	r6, sp, #41	; 0x29
			bps = buf;
    edfa:	f10d 0928 	add.w	r9, sp, #40	; 0x28
		if (conv->altform_0c) {
    edfe:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
    ee02:	f011 0210 	ands.w	r2, r1, #16
    ee06:	9206      	str	r2, [sp, #24]
    ee08:	f000 8081 	beq.w	ef0e <z_cbvprintf_impl+0x696>
			nj_len += 2U;
    ee0c:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
    ee0e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    ee10:	4413      	add	r3, r2
    ee12:	9205      	str	r2, [sp, #20]
		if (conv->pad_fp) {
    ee14:	064a      	lsls	r2, r1, #25
			nj_len += conv->pad0_pre_exp;
    ee16:	bf44      	itt	mi
    ee18:	9914      	ldrmi	r1, [sp, #80]	; 0x50
    ee1a:	185b      	addmi	r3, r3, r1
		if (width > 0) {
    ee1c:	f1b8 0f00 	cmp.w	r8, #0
    ee20:	f340 808e 	ble.w	ef40 <z_cbvprintf_impl+0x6c8>
			width -= (int)nj_len;
    ee24:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
    ee28:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    ee2c:	0758      	lsls	r0, r3, #29
    ee2e:	f3c3 0b80 	ubfx	fp, r3, #2, #1
    ee32:	f100 8085 	bmi.w	ef40 <z_cbvprintf_impl+0x6c8>
				if (conv->flag_zero) {
    ee36:	0659      	lsls	r1, r3, #25
    ee38:	d578      	bpl.n	ef2c <z_cbvprintf_impl+0x6b4>
					if (sign != 0) {
    ee3a:	b13f      	cbz	r7, ee4c <z_cbvprintf_impl+0x5d4>
						OUTC(sign);
    ee3c:	4651      	mov	r1, sl
    ee3e:	4638      	mov	r0, r7
    ee40:	9b03      	ldr	r3, [sp, #12]
    ee42:	4798      	blx	r3
    ee44:	2800      	cmp	r0, #0
    ee46:	db6e      	blt.n	ef26 <z_cbvprintf_impl+0x6ae>
    ee48:	465f      	mov	r7, fp
    ee4a:	3501      	adds	r5, #1
					pad = '0';
    ee4c:	2330      	movs	r3, #48	; 0x30
    ee4e:	e06e      	b.n	ef2e <z_cbvprintf_impl+0x6b6>
			if (conv->flag_plus) {
    ee50:	071e      	lsls	r6, r3, #28
			} else if (conv->flag_space) {
    ee52:	bf5a      	itte	pl
    ee54:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    ee58:	015f      	lslpl	r7, r3, #5
				sign = '+';
    ee5a:	272b      	movmi	r7, #43	; 0x2b
			sint = value->sint;
    ee5c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			if (sint < 0) {
    ee60:	2b00      	cmp	r3, #0
    ee62:	f6bf af64 	bge.w	ed2e <z_cbvprintf_impl+0x4b6>
				value->uint = (uint_value_type)-sint;
    ee66:	4252      	negs	r2, r2
    ee68:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    ee6c:	272d      	movs	r7, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
    ee6e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    ee72:	e75c      	b.n	ed2e <z_cbvprintf_impl+0x4b6>
		switch (conv->specifier) {
    ee74:	2700      	movs	r7, #0
    ee76:	e75a      	b.n	ed2e <z_cbvprintf_impl+0x4b6>
		char sign = 0;
    ee78:	2700      	movs	r7, #0
				conv->flag_zero = false;
    ee7a:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
				size_t len = bpe - bps;
    ee7e:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    ee82:	eba3 0309 	sub.w	r3, r3, r9
				conv->flag_zero = false;
    ee86:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
    ee8a:	459b      	cmp	fp, r3
				conv->flag_zero = false;
    ee8c:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
    ee90:	f67f af5b 	bls.w	ed4a <z_cbvprintf_impl+0x4d2>
					conv->pad0_value = precision - (int)len;
    ee94:	ebab 0303 	sub.w	r3, fp, r3
    ee98:	9313      	str	r3, [sp, #76]	; 0x4c
    ee9a:	e756      	b.n	ed4a <z_cbvprintf_impl+0x4d2>
			if (value->ptr != NULL) {
    ee9c:	9810      	ldr	r0, [sp, #64]	; 0x40
    ee9e:	b380      	cbz	r0, ef02 <z_cbvprintf_impl+0x68a>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    eea0:	f10d 063e 	add.w	r6, sp, #62	; 0x3e
    eea4:	ab0a      	add	r3, sp, #40	; 0x28
    eea6:	2100      	movs	r1, #0
    eea8:	9600      	str	r6, [sp, #0]
    eeaa:	aa12      	add	r2, sp, #72	; 0x48
    eeac:	f7ff fc98 	bl	e7e0 <encode_uint>
				conv->altform_0c = true;
    eeb0:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    eeb4:	f1bb 0f00 	cmp.w	fp, #0
				conv->altform_0c = true;
    eeb8:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    eebc:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    eec0:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    eec4:	4681      	mov	r9, r0
				conv->altform_0c = true;
    eec6:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    eeca:	dad5      	bge.n	ee78 <z_cbvprintf_impl+0x600>
		if (bps == NULL) {
    eecc:	2800      	cmp	r0, #0
    eece:	f43f aedc 	beq.w	ec8a <z_cbvprintf_impl+0x412>
		char sign = 0;
    eed2:	2700      	movs	r7, #0
		size_t nj_len = (bpe - bps);
    eed4:	eba6 0309 	sub.w	r3, r6, r9
		if (sign != 0) {
    eed8:	e791      	b.n	edfe <z_cbvprintf_impl+0x586>
				store_count(conv, value->ptr, count);
    eeda:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
    eedc:	2907      	cmp	r1, #7
    eede:	f63f aed4 	bhi.w	ec8a <z_cbvprintf_impl+0x412>
    eee2:	e8df f001 	tbb	[pc, r1]
    eee6:	040c      	.short	0x040c
    eee8:	08080c06 	.word	0x08080c06
    eeec:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    eeee:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    eef0:	e6cb      	b.n	ec8a <z_cbvprintf_impl+0x412>
		*(short *)dp = (short)count;
    eef2:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    eef4:	e6c9      	b.n	ec8a <z_cbvprintf_impl+0x412>
		*(intmax_t *)dp = (intmax_t)count;
    eef6:	17ea      	asrs	r2, r5, #31
    eef8:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    eefc:	e6c5      	b.n	ec8a <z_cbvprintf_impl+0x412>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    eefe:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    ef00:	e6c3      	b.n	ec8a <z_cbvprintf_impl+0x412>
			bpe = bps + 5;
    ef02:	4e31      	ldr	r6, [pc, #196]	; (efc8 <z_cbvprintf_impl+0x750>)
		char sign = 0;
    ef04:	4607      	mov	r7, r0
		size_t nj_len = (bpe - bps);
    ef06:	2305      	movs	r3, #5
    ef08:	f1a6 0905 	sub.w	r9, r6, #5
    ef0c:	e777      	b.n	edfe <z_cbvprintf_impl+0x586>
		} else if (conv->altform_0) {
    ef0e:	0708      	lsls	r0, r1, #28
			nj_len += 1U;
    ef10:	bf48      	it	mi
    ef12:	3301      	addmi	r3, #1
    ef14:	e77b      	b.n	ee0e <z_cbvprintf_impl+0x596>
					OUTC(pad);
    ef16:	4618      	mov	r0, r3
    ef18:	9307      	str	r3, [sp, #28]
    ef1a:	4651      	mov	r1, sl
    ef1c:	9b03      	ldr	r3, [sp, #12]
    ef1e:	4798      	blx	r3
    ef20:	2800      	cmp	r0, #0
    ef22:	9b07      	ldr	r3, [sp, #28]
    ef24:	da04      	bge.n	ef30 <z_cbvprintf_impl+0x6b8>
#undef OUTS
#undef OUTC
}
    ef26:	b017      	add	sp, #92	; 0x5c
    ef28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    ef2c:	2320      	movs	r3, #32
					pad = '0';
    ef2e:	46c3      	mov	fp, r8
				while (width-- > 0) {
    ef30:	4659      	mov	r1, fp
    ef32:	2900      	cmp	r1, #0
    ef34:	f10b 3bff 	add.w	fp, fp, #4294967295
    ef38:	dced      	bgt.n	ef16 <z_cbvprintf_impl+0x69e>
    ef3a:	4445      	add	r5, r8
    ef3c:	46d8      	mov	r8, fp
    ef3e:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
    ef40:	b137      	cbz	r7, ef50 <z_cbvprintf_impl+0x6d8>
			OUTC(sign);
    ef42:	4651      	mov	r1, sl
    ef44:	4638      	mov	r0, r7
    ef46:	9b03      	ldr	r3, [sp, #12]
    ef48:	4798      	blx	r3
    ef4a:	2800      	cmp	r0, #0
    ef4c:	dbeb      	blt.n	ef26 <z_cbvprintf_impl+0x6ae>
    ef4e:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    ef50:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    ef54:	06da      	lsls	r2, r3, #27
    ef56:	d401      	bmi.n	ef5c <z_cbvprintf_impl+0x6e4>
    ef58:	071b      	lsls	r3, r3, #28
    ef5a:	d506      	bpl.n	ef6a <z_cbvprintf_impl+0x6f2>
				OUTC('0');
    ef5c:	4651      	mov	r1, sl
    ef5e:	2030      	movs	r0, #48	; 0x30
    ef60:	9b03      	ldr	r3, [sp, #12]
    ef62:	4798      	blx	r3
    ef64:	2800      	cmp	r0, #0
    ef66:	dbde      	blt.n	ef26 <z_cbvprintf_impl+0x6ae>
    ef68:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    ef6a:	9b06      	ldr	r3, [sp, #24]
    ef6c:	b13b      	cbz	r3, ef7e <z_cbvprintf_impl+0x706>
				OUTC(conv->specifier);
    ef6e:	4651      	mov	r1, sl
    ef70:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    ef74:	9b03      	ldr	r3, [sp, #12]
    ef76:	4798      	blx	r3
    ef78:	2800      	cmp	r0, #0
    ef7a:	dbd4      	blt.n	ef26 <z_cbvprintf_impl+0x6ae>
    ef7c:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    ef7e:	9f05      	ldr	r7, [sp, #20]
    ef80:	442f      	add	r7, r5
    ef82:	e006      	b.n	ef92 <z_cbvprintf_impl+0x71a>
				OUTC('0');
    ef84:	4651      	mov	r1, sl
    ef86:	2030      	movs	r0, #48	; 0x30
    ef88:	9b03      	ldr	r3, [sp, #12]
    ef8a:	4798      	blx	r3
    ef8c:	2800      	cmp	r0, #0
    ef8e:	dbca      	blt.n	ef26 <z_cbvprintf_impl+0x6ae>
    ef90:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    ef92:	1b7b      	subs	r3, r7, r5
    ef94:	2b00      	cmp	r3, #0
    ef96:	dcf5      	bgt.n	ef84 <z_cbvprintf_impl+0x70c>
			OUTS(bps, bpe);
    ef98:	4633      	mov	r3, r6
    ef9a:	464a      	mov	r2, r9
    ef9c:	4651      	mov	r1, sl
    ef9e:	9803      	ldr	r0, [sp, #12]
    efa0:	f020 f9f2 	bl	2f388 <outs>
    efa4:	2800      	cmp	r0, #0
    efa6:	dbbe      	blt.n	ef26 <z_cbvprintf_impl+0x6ae>
    efa8:	4405      	add	r5, r0
		while (width > 0) {
    efaa:	44a8      	add	r8, r5
    efac:	eba8 0305 	sub.w	r3, r8, r5
    efb0:	2b00      	cmp	r3, #0
    efb2:	f77f ae6a 	ble.w	ec8a <z_cbvprintf_impl+0x412>
			OUTC(' ');
    efb6:	4651      	mov	r1, sl
    efb8:	2020      	movs	r0, #32
    efba:	9b03      	ldr	r3, [sp, #12]
    efbc:	4798      	blx	r3
    efbe:	2800      	cmp	r0, #0
    efc0:	dbb1      	blt.n	ef26 <z_cbvprintf_impl+0x6ae>
    efc2:	3501      	adds	r5, #1
			--width;
    efc4:	e7f2      	b.n	efac <z_cbvprintf_impl+0x734>
    efc6:	bf00      	nop
    efc8:	00039f96 	.word	0x00039f96

0000efcc <mpsc_pbuf_init>:
	}
}

void mpsc_pbuf_init(struct mpsc_pbuf_buffer *buffer,
		    const struct mpsc_pbuf_buffer_config *cfg)
{
    efcc:	b538      	push	{r3, r4, r5, lr}
    efce:	460d      	mov	r5, r1
    efd0:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
    efd2:	2220      	movs	r2, #32
    efd4:	2100      	movs	r1, #0
    efd6:	f027 fac7 	bl	36568 <memset>
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
	buffer->get_wlen = cfg->get_wlen;
	buffer->notify_drop = cfg->notify_drop;
	buffer->buf = cfg->buf;
	buffer->size = cfg->size;
	buffer->max_usage = 0;
    efda:	2200      	movs	r2, #0
	buffer->get_wlen = cfg->get_wlen;
    efdc:	68eb      	ldr	r3, [r5, #12]
    efde:	61e3      	str	r3, [r4, #28]
	buffer->notify_drop = cfg->notify_drop;
    efe0:	68ab      	ldr	r3, [r5, #8]
    efe2:	61a3      	str	r3, [r4, #24]
	buffer->buf = cfg->buf;
    efe4:	682b      	ldr	r3, [r5, #0]
    efe6:	6223      	str	r3, [r4, #32]
	buffer->size = cfg->size;
    efe8:	686b      	ldr	r3, [r5, #4]
	buffer->max_usage = 0;
    efea:	62a2      	str	r2, [r4, #40]	; 0x28
	buffer->size = cfg->size;
    efec:	6263      	str	r3, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
    efee:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return IS_POWER_OF_TWO(x);
    eff0:	b123      	cbz	r3, effc <mpsc_pbuf_init+0x30>
    eff2:	1e59      	subs	r1, r3, #1
    eff4:	4219      	tst	r1, r3

	if (is_power_of_two(buffer->size)) {
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
    eff6:	bf08      	it	eq
    eff8:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
    effc:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
    effe:	2201      	movs	r2, #1
    f000:	2100      	movs	r1, #0
    f002:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    f006:	f027 f8b3 	bl	36170 <z_impl_k_sem_init>
	}

	err = k_sem_init(&buffer->sem, 0, 1);
	__ASSERT_NO_MSG(err == 0);
    f00a:	b148      	cbz	r0, f020 <mpsc_pbuf_init+0x54>
    f00c:	4905      	ldr	r1, [pc, #20]	; (f024 <mpsc_pbuf_init+0x58>)
    f00e:	4806      	ldr	r0, [pc, #24]	; (f028 <mpsc_pbuf_init+0x5c>)
    f010:	232e      	movs	r3, #46	; 0x2e
    f012:	4a06      	ldr	r2, [pc, #24]	; (f02c <mpsc_pbuf_init+0x60>)
    f014:	f020 f9d6 	bl	2f3c4 <assert_print>
    f018:	212e      	movs	r1, #46	; 0x2e
    f01a:	4804      	ldr	r0, [pc, #16]	; (f02c <mpsc_pbuf_init+0x60>)
    f01c:	f020 f9cb 	bl	2f3b6 <assert_post_action>
	ARG_UNUSED(err);
}
    f020:	bd38      	pop	{r3, r4, r5, pc}
    f022:	bf00      	nop
    f024:	00039fbd 	.word	0x00039fbd
    f028:	00039995 	.word	0x00039995
    f02c:	00039f97 	.word	0x00039f97

0000f030 <mpsc_pbuf_alloc>:
	} while (cont);
}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
    f030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item = NULL;
	union mpsc_pbuf_generic *dropped_item = NULL;
    f034:	2700      	movs	r7, #0
{
    f036:	b089      	sub	sp, #36	; 0x24
    f038:	e9cd 2301 	strd	r2, r3, [sp, #4]
	uint32_t tmp_wr_idx_shift = 0;
	uint32_t tmp_wr_idx_val = 0;

	MPSC_PBUF_DBG(buffer, "alloc %d words", (int)wlen);

	if (wlen > (buffer->size)) {
    f03c:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
    f03e:	4604      	mov	r4, r0
	if (wlen > (buffer->size)) {
    f040:	428b      	cmp	r3, r1
{
    f042:	4688      	mov	r8, r1
		MPSC_PBUF_DBG(buffer, "Failed to alloc");
		return NULL;
    f044:	46ba      	mov	sl, r7
	union mpsc_pbuf_generic *dropped_item = NULL;
    f046:	9705      	str	r7, [sp, #20]
	uint32_t tmp_wr_idx_shift = 0;
    f048:	9707      	str	r7, [sp, #28]
	if (wlen > (buffer->size)) {
    f04a:	d353      	bcc.n	f0f4 <mpsc_pbuf_alloc+0xc4>

	do {
		k_spinlock_key_t key;
		bool wrap;

		key = k_spin_lock(&buffer->lock);
    f04c:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
    f050:	f04f 0320 	mov.w	r3, #32
    f054:	f3ef 8b11 	mrs	fp, BASEPRI
    f058:	f383 8812 	msr	BASEPRI_MAX, r3
    f05c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f060:	4630      	mov	r0, r6
	k.key = arch_irq_lock();
    f062:	46d9      	mov	r9, fp
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f064:	f01a f868 	bl	29138 <z_spin_lock_valid>
    f068:	b958      	cbnz	r0, f082 <mpsc_pbuf_alloc+0x52>
    f06a:	2394      	movs	r3, #148	; 0x94
    f06c:	4a4a      	ldr	r2, [pc, #296]	; (f198 <mpsc_pbuf_alloc+0x168>)
    f06e:	494b      	ldr	r1, [pc, #300]	; (f19c <mpsc_pbuf_alloc+0x16c>)
    f070:	484b      	ldr	r0, [pc, #300]	; (f1a0 <mpsc_pbuf_alloc+0x170>)
    f072:	f020 f9a7 	bl	2f3c4 <assert_print>
    f076:	4631      	mov	r1, r6
    f078:	484a      	ldr	r0, [pc, #296]	; (f1a4 <mpsc_pbuf_alloc+0x174>)
    f07a:	f020 f9a3 	bl	2f3c4 <assert_print>
    f07e:	2194      	movs	r1, #148	; 0x94
    f080:	e05e      	b.n	f140 <mpsc_pbuf_alloc+0x110>
	z_spin_lock_set_owner(l);
    f082:	4630      	mov	r0, r6
    f084:	f01a f874 	bl	29170 <z_spin_lock_set_owner>
		if (tmp_wr_idx_shift) {
    f088:	9a07      	ldr	r2, [sp, #28]
    f08a:	b12a      	cbz	r2, f098 <mpsc_pbuf_alloc+0x68>
			post_drop_action(buffer, tmp_wr_idx_val, tmp_wr_idx_shift);
    f08c:	4639      	mov	r1, r7
    f08e:	4620      	mov	r0, r4
    f090:	f020 fa79 	bl	2f586 <post_drop_action>
			tmp_wr_idx_shift = 0;
    f094:	2300      	movs	r3, #0
    f096:	9307      	str	r3, [sp, #28]
		}

		wrap = free_space(buffer, &free_wlen);
    f098:	a906      	add	r1, sp, #24
    f09a:	4620      	mov	r0, r4
    f09c:	f020 f99f 	bl	2f3de <free_space>

		if (free_wlen >= wlen) {
    f0a0:	9906      	ldr	r1, [sp, #24]
		wrap = free_space(buffer, &free_wlen);
    f0a2:	4605      	mov	r5, r0
		if (free_wlen >= wlen) {
    f0a4:	4541      	cmp	r1, r8
    f0a6:	d32e      	bcc.n	f106 <mpsc_pbuf_alloc+0xd6>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
    f0a8:	6822      	ldr	r2, [r4, #0]
			item =
    f0aa:	6a23      	ldr	r3, [r4, #32]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    f0ac:	4620      	mov	r0, r4
			item->hdr.valid = 0;
    f0ae:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
			item =
    f0b2:	eb03 0a82 	add.w	sl, r3, r2, lsl #2
			item->hdr.valid = 0;
    f0b6:	f021 0103 	bic.w	r1, r1, #3
    f0ba:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    f0be:	6821      	ldr	r1, [r4, #0]
    f0c0:	4642      	mov	r2, r8
    f0c2:	f020 f9b0 	bl	2f426 <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    f0c6:	68e3      	ldr	r3, [r4, #12]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    f0c8:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    f0ca:	4298      	cmp	r0, r3
    f0cc:	d016      	beq.n	f0fc <mpsc_pbuf_alloc+0xcc>
			item->hdr.busy = 0;
			tmp_wr_idx_inc(buffer, wlen);
			cont = false;
    f0ce:	2500      	movs	r5, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f0d0:	4630      	mov	r0, r6
    f0d2:	f01a f83f 	bl	29154 <z_spin_unlock_valid>
    f0d6:	b340      	cbz	r0, f12a <mpsc_pbuf_alloc+0xfa>
	__asm__ volatile(
    f0d8:	f389 8811 	msr	BASEPRI, r9
    f0dc:	f3bf 8f6f 	isb	sy
			cont = drop_item_locked(buffer, free_wlen,
						&dropped_item, &tmp_wr_idx_shift);
		}
		k_spin_unlock(&buffer->lock, key);

		if (dropped_item) {
    f0e0:	9905      	ldr	r1, [sp, #20]
    f0e2:	b129      	cbz	r1, f0f0 <mpsc_pbuf_alloc+0xc0>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
    f0e4:	69a2      	ldr	r2, [r4, #24]
    f0e6:	b10a      	cbz	r2, f0ec <mpsc_pbuf_alloc+0xbc>
				buffer->notify_drop(buffer, dropped_item);
    f0e8:	4620      	mov	r0, r4
    f0ea:	4790      	blx	r2
			}
			dropped_item = NULL;
    f0ec:	2300      	movs	r3, #0
    f0ee:	9305      	str	r3, [sp, #20]
		}
	} while (cont);
    f0f0:	2d00      	cmp	r5, #0
    f0f2:	d1ad      	bne.n	f050 <mpsc_pbuf_alloc+0x20>
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
    f0f4:	4650      	mov	r0, sl
    f0f6:	b009      	add	sp, #36	; 0x24
    f0f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buffer->flags |= MPSC_PBUF_FULL;
    f0fc:	6923      	ldr	r3, [r4, #16]
    f0fe:	f043 0308 	orr.w	r3, r3, #8
    f102:	6123      	str	r3, [r4, #16]
    f104:	e7e3      	b.n	f0ce <mpsc_pbuf_alloc+0x9e>
		} else if (wrap) {
    f106:	b118      	cbz	r0, f110 <mpsc_pbuf_alloc+0xe0>
			add_skip_item(buffer, free_wlen);
    f108:	4620      	mov	r0, r4
    f10a:	f020 f9a6 	bl	2f45a <add_skip_item>
			cont = true;
    f10e:	e7df      	b.n	f0d0 <mpsc_pbuf_alloc+0xa0>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
    f110:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
    f114:	4313      	orrs	r3, r2
    f116:	d036      	beq.n	f186 <mpsc_pbuf_alloc+0x156>
    f118:	9103      	str	r1, [sp, #12]
    f11a:	f026 ffd4 	bl	360c6 <k_is_in_isr>
    f11e:	9903      	ldr	r1, [sp, #12]
    f120:	bb88      	cbnz	r0, f186 <mpsc_pbuf_alloc+0x156>
    f122:	4630      	mov	r0, r6
    f124:	f01a f816 	bl	29154 <z_spin_unlock_valid>
    f128:	b968      	cbnz	r0, f146 <mpsc_pbuf_alloc+0x116>
    f12a:	23c2      	movs	r3, #194	; 0xc2
    f12c:	4a1a      	ldr	r2, [pc, #104]	; (f198 <mpsc_pbuf_alloc+0x168>)
    f12e:	491e      	ldr	r1, [pc, #120]	; (f1a8 <mpsc_pbuf_alloc+0x178>)
    f130:	481b      	ldr	r0, [pc, #108]	; (f1a0 <mpsc_pbuf_alloc+0x170>)
    f132:	f020 f947 	bl	2f3c4 <assert_print>
    f136:	4631      	mov	r1, r6
    f138:	481c      	ldr	r0, [pc, #112]	; (f1ac <mpsc_pbuf_alloc+0x17c>)
    f13a:	f020 f943 	bl	2f3c4 <assert_print>
    f13e:	21c2      	movs	r1, #194	; 0xc2
    f140:	4815      	ldr	r0, [pc, #84]	; (f198 <mpsc_pbuf_alloc+0x168>)
    f142:	f020 f938 	bl	2f3b6 <assert_post_action>
    f146:	f38b 8811 	msr	BASEPRI, fp
    f14a:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
    f14e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    f152:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
    f156:	f01a faeb 	bl	29730 <z_impl_k_sem_take>
    f15a:	4605      	mov	r5, r0
	__asm__ volatile(
    f15c:	f04f 0320 	mov.w	r3, #32
    f160:	f3ef 8911 	mrs	r9, BASEPRI
    f164:	f383 8812 	msr	BASEPRI_MAX, r3
    f168:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f16c:	4630      	mov	r0, r6
    f16e:	f019 ffe3 	bl	29138 <z_spin_lock_valid>
    f172:	2800      	cmp	r0, #0
    f174:	f43f af79 	beq.w	f06a <mpsc_pbuf_alloc+0x3a>
			cont = (err == 0) ? true : false;
    f178:	fab5 f585 	clz	r5, r5
	z_spin_lock_set_owner(l);
    f17c:	4630      	mov	r0, r6
    f17e:	f019 fff7 	bl	29170 <z_spin_lock_set_owner>
    f182:	096d      	lsrs	r5, r5, #5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
    f184:	e7a4      	b.n	f0d0 <mpsc_pbuf_alloc+0xa0>
			cont = drop_item_locked(buffer, free_wlen,
    f186:	4620      	mov	r0, r4
    f188:	ab07      	add	r3, sp, #28
    f18a:	aa05      	add	r2, sp, #20
			tmp_wr_idx_val = buffer->tmp_wr_idx;
    f18c:	6827      	ldr	r7, [r4, #0]
			cont = drop_item_locked(buffer, free_wlen,
    f18e:	f020 f983 	bl	2f498 <drop_item_locked>
    f192:	4605      	mov	r5, r0
    f194:	e79c      	b.n	f0d0 <mpsc_pbuf_alloc+0xa0>
    f196:	bf00      	nop
    f198:	00039e53 	.word	0x00039e53
    f19c:	00039eac 	.word	0x00039eac
    f1a0:	00039995 	.word	0x00039995
    f1a4:	00039ec1 	.word	0x00039ec1
    f1a8:	00039e80 	.word	0x00039e80
    f1ac:	00039e97 	.word	0x00039e97

0000f1b0 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
    f1b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f1b4:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    f1b6:	69c3      	ldr	r3, [r0, #28]
    f1b8:	4608      	mov	r0, r1
{
    f1ba:	460e      	mov	r6, r1
	uint32_t wlen = buffer->get_wlen(item);
    f1bc:	4798      	blx	r3

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
    f1be:	f104 0514 	add.w	r5, r4, #20
	uint32_t wlen = buffer->get_wlen(item);
    f1c2:	4607      	mov	r7, r0
    f1c4:	f04f 0320 	mov.w	r3, #32
    f1c8:	f3ef 8811 	mrs	r8, BASEPRI
    f1cc:	f383 8812 	msr	BASEPRI_MAX, r3
    f1d0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f1d4:	4628      	mov	r0, r5
    f1d6:	f019 ffaf 	bl	29138 <z_spin_lock_valid>
    f1da:	b968      	cbnz	r0, f1f8 <mpsc_pbuf_commit+0x48>
    f1dc:	2394      	movs	r3, #148	; 0x94
    f1de:	4a19      	ldr	r2, [pc, #100]	; (f244 <mpsc_pbuf_commit+0x94>)
    f1e0:	4919      	ldr	r1, [pc, #100]	; (f248 <mpsc_pbuf_commit+0x98>)
    f1e2:	481a      	ldr	r0, [pc, #104]	; (f24c <mpsc_pbuf_commit+0x9c>)
    f1e4:	f020 f8ee 	bl	2f3c4 <assert_print>
    f1e8:	4629      	mov	r1, r5
    f1ea:	4819      	ldr	r0, [pc, #100]	; (f250 <mpsc_pbuf_commit+0xa0>)
    f1ec:	f020 f8ea 	bl	2f3c4 <assert_print>
    f1f0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f1f2:	4814      	ldr	r0, [pc, #80]	; (f244 <mpsc_pbuf_commit+0x94>)
    f1f4:	f020 f8df 	bl	2f3b6 <assert_post_action>
	z_spin_lock_set_owner(l);
    f1f8:	4628      	mov	r0, r5
    f1fa:	f019 ffb9 	bl	29170 <z_spin_lock_set_owner>

	item->hdr.valid = 1;
    f1fe:	7833      	ldrb	r3, [r6, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    f200:	463a      	mov	r2, r7
	item->hdr.valid = 1;
    f202:	f043 0301 	orr.w	r3, r3, #1
    f206:	7033      	strb	r3, [r6, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    f208:	6861      	ldr	r1, [r4, #4]
    f20a:	4620      	mov	r0, r4
    f20c:	f020 f90b 	bl	2f426 <idx_inc>
    f210:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
    f212:	4620      	mov	r0, r4
    f214:	f020 f9d2 	bl	2f5bc <max_utilization_update>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f218:	4628      	mov	r0, r5
    f21a:	f019 ff9b 	bl	29154 <z_spin_unlock_valid>
    f21e:	b958      	cbnz	r0, f238 <mpsc_pbuf_commit+0x88>
    f220:	23c2      	movs	r3, #194	; 0xc2
    f222:	4a08      	ldr	r2, [pc, #32]	; (f244 <mpsc_pbuf_commit+0x94>)
    f224:	490b      	ldr	r1, [pc, #44]	; (f254 <mpsc_pbuf_commit+0xa4>)
    f226:	4809      	ldr	r0, [pc, #36]	; (f24c <mpsc_pbuf_commit+0x9c>)
    f228:	f020 f8cc 	bl	2f3c4 <assert_print>
    f22c:	4629      	mov	r1, r5
    f22e:	480a      	ldr	r0, [pc, #40]	; (f258 <mpsc_pbuf_commit+0xa8>)
    f230:	f020 f8c8 	bl	2f3c4 <assert_print>
    f234:	21c2      	movs	r1, #194	; 0xc2
    f236:	e7dc      	b.n	f1f2 <mpsc_pbuf_commit+0x42>
	__asm__ volatile(
    f238:	f388 8811 	msr	BASEPRI, r8
    f23c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p", item);
}
    f240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f244:	00039e53 	.word	0x00039e53
    f248:	00039eac 	.word	0x00039eac
    f24c:	00039995 	.word	0x00039995
    f250:	00039ec1 	.word	0x00039ec1
    f254:	00039e80 	.word	0x00039e80
    f258:	00039e97 	.word	0x00039e97

0000f25c <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
    f25c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f260:	4604      	mov	r4, r0
	do {
		uint32_t a;
		k_spinlock_key_t key;

		cont = false;
		key = k_spin_lock(&buffer->lock);
    f262:	f100 0714 	add.w	r7, r0, #20
	__asm__ volatile(
    f266:	f04f 0320 	mov.w	r3, #32
    f26a:	f3ef 8811 	mrs	r8, BASEPRI
    f26e:	f383 8812 	msr	BASEPRI_MAX, r3
    f272:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f276:	4638      	mov	r0, r7
    f278:	f019 ff5e 	bl	29138 <z_spin_lock_valid>
    f27c:	4605      	mov	r5, r0
    f27e:	b968      	cbnz	r0, f29c <mpsc_pbuf_claim+0x40>
    f280:	2394      	movs	r3, #148	; 0x94
    f282:	4a34      	ldr	r2, [pc, #208]	; (f354 <mpsc_pbuf_claim+0xf8>)
    f284:	4934      	ldr	r1, [pc, #208]	; (f358 <mpsc_pbuf_claim+0xfc>)
    f286:	4835      	ldr	r0, [pc, #212]	; (f35c <mpsc_pbuf_claim+0x100>)
    f288:	f020 f89c 	bl	2f3c4 <assert_print>
    f28c:	4639      	mov	r1, r7
    f28e:	4834      	ldr	r0, [pc, #208]	; (f360 <mpsc_pbuf_claim+0x104>)
    f290:	f020 f898 	bl	2f3c4 <assert_print>
    f294:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f296:	482f      	ldr	r0, [pc, #188]	; (f354 <mpsc_pbuf_claim+0xf8>)
    f298:	f020 f88d 	bl	2f3b6 <assert_post_action>
	z_spin_lock_set_owner(l);
    f29c:	4638      	mov	r0, r7
    f29e:	f019 ff67 	bl	29170 <z_spin_lock_set_owner>
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
    f2a2:	6923      	ldr	r3, [r4, #16]
    f2a4:	68a2      	ldr	r2, [r4, #8]
    f2a6:	f013 0f08 	tst.w	r3, #8
    f2aa:	d102      	bne.n	f2b2 <mpsc_pbuf_claim+0x56>
    f2ac:	6863      	ldr	r3, [r4, #4]
    f2ae:	429a      	cmp	r2, r3
    f2b0:	d900      	bls.n	f2b4 <mpsc_pbuf_claim+0x58>
		*res = buffer->size - buffer->tmp_rd_idx;
    f2b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
    f2b4:	1a9b      	subs	r3, r3, r2
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];

		if (!a || is_invalid(item)) {
    f2b6:	2b00      	cmp	r3, #0
    f2b8:	d03d      	beq.n	f336 <mpsc_pbuf_claim+0xda>
		item = (union mpsc_pbuf_generic *)
    f2ba:	6a21      	ldr	r1, [r4, #32]
	return !item->hdr.valid && !item->hdr.busy;
    f2bc:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
		item = (union mpsc_pbuf_generic *)
    f2c0:	eb01 0982 	add.w	r9, r1, r2, lsl #2
		if (!a || is_invalid(item)) {
    f2c4:	f013 0003 	ands.w	r0, r3, #3
    f2c8:	d038      	beq.n	f33c <mpsc_pbuf_claim+0xe0>
	if (item->hdr.busy && !item->hdr.valid) {
    f2ca:	2802      	cmp	r0, #2
    f2cc:	d103      	bne.n	f2d6 <mpsc_pbuf_claim+0x7a>
		return item->skip.len;
    f2ce:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
			MPSC_PBUF_DBG(buffer, "invalid claim %d: %p", a, item);
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
    f2d2:	08b6      	lsrs	r6, r6, #2
    f2d4:	d105      	bne.n	f2e2 <mpsc_pbuf_claim+0x86>
    f2d6:	07d8      	lsls	r0, r3, #31
    f2d8:	d41d      	bmi.n	f316 <mpsc_pbuf_claim+0xba>
				uint32_t inc =
					skip ? skip : buffer->get_wlen(item);
    f2da:	4648      	mov	r0, r9
    f2dc:	69e3      	ldr	r3, [r4, #28]
    f2de:	4798      	blx	r3
    f2e0:	4606      	mov	r6, r0

				buffer->tmp_rd_idx =
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
    f2e2:	68a1      	ldr	r1, [r4, #8]
    f2e4:	4632      	mov	r2, r6
    f2e6:	4620      	mov	r0, r4
    f2e8:	f020 f89d 	bl	2f426 <idx_inc>
				rd_idx_inc(buffer, inc);
    f2ec:	4631      	mov	r1, r6
				buffer->tmp_rd_idx =
    f2ee:	60a0      	str	r0, [r4, #8]
				rd_idx_inc(buffer, inc);
    f2f0:	4620      	mov	r0, r4
    f2f2:	f020 f8a6 	bl	2f442 <rd_idx_inc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f2f6:	4638      	mov	r0, r7
    f2f8:	f019 ff2c 	bl	29154 <z_spin_unlock_valid>
    f2fc:	bb00      	cbnz	r0, f340 <mpsc_pbuf_claim+0xe4>
    f2fe:	23c2      	movs	r3, #194	; 0xc2
    f300:	4a14      	ldr	r2, [pc, #80]	; (f354 <mpsc_pbuf_claim+0xf8>)
    f302:	4918      	ldr	r1, [pc, #96]	; (f364 <mpsc_pbuf_claim+0x108>)
    f304:	4815      	ldr	r0, [pc, #84]	; (f35c <mpsc_pbuf_claim+0x100>)
    f306:	f020 f85d 	bl	2f3c4 <assert_print>
    f30a:	4639      	mov	r1, r7
    f30c:	4816      	ldr	r0, [pc, #88]	; (f368 <mpsc_pbuf_claim+0x10c>)
    f30e:	f020 f859 	bl	2f3c4 <assert_print>
    f312:	21c2      	movs	r1, #194	; 0xc2
    f314:	e7bf      	b.n	f296 <mpsc_pbuf_claim+0x3a>
				cont = true;
			} else {
				item->hdr.busy = 1;
    f316:	f043 0302 	orr.w	r3, r3, #2
    f31a:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
						buffer->get_wlen(item));
    f31e:	69e3      	ldr	r3, [r4, #28]
    f320:	4648      	mov	r0, r9
					idx_inc(buffer, buffer->tmp_rd_idx,
    f322:	68a5      	ldr	r5, [r4, #8]
						buffer->get_wlen(item));
    f324:	4798      	blx	r3
					idx_inc(buffer, buffer->tmp_rd_idx,
    f326:	4629      	mov	r1, r5
						buffer->get_wlen(item));
    f328:	4602      	mov	r2, r0
					idx_inc(buffer, buffer->tmp_rd_idx,
    f32a:	4620      	mov	r0, r4
    f32c:	f020 f87b 	bl	2f426 <idx_inc>
		cont = false;
    f330:	2500      	movs	r5, #0
				buffer->tmp_rd_idx =
    f332:	60a0      	str	r0, [r4, #8]
    f334:	e7df      	b.n	f2f6 <mpsc_pbuf_claim+0x9a>
		cont = false;
    f336:	461d      	mov	r5, r3
			item = NULL;
    f338:	46a9      	mov	r9, r5
    f33a:	e7dc      	b.n	f2f6 <mpsc_pbuf_claim+0x9a>
		cont = false;
    f33c:	4605      	mov	r5, r0
    f33e:	e7fb      	b.n	f338 <mpsc_pbuf_claim+0xdc>
	__asm__ volatile(
    f340:	f388 8811 	msr	BASEPRI, r8
    f344:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, ">>claimed %d: %p", a, item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
    f348:	2d00      	cmp	r5, #0
    f34a:	d18c      	bne.n	f266 <mpsc_pbuf_claim+0xa>

	return item;
}
    f34c:	4648      	mov	r0, r9
    f34e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f352:	bf00      	nop
    f354:	00039e53 	.word	0x00039e53
    f358:	00039eac 	.word	0x00039eac
    f35c:	00039995 	.word	0x00039995
    f360:	00039ec1 	.word	0x00039ec1
    f364:	00039e80 	.word	0x00039e80
    f368:	00039e97 	.word	0x00039e97

0000f36c <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
    f36c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f370:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    f372:	69c3      	ldr	r3, [r0, #28]
    f374:	4608      	mov	r0, r1
{
    f376:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    f378:	4798      	blx	r3
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
    f37a:	f104 0614 	add.w	r6, r4, #20
	uint32_t wlen = buffer->get_wlen(item);
    f37e:	4607      	mov	r7, r0
	__asm__ volatile(
    f380:	f04f 0320 	mov.w	r3, #32
    f384:	f3ef 8811 	mrs	r8, BASEPRI
    f388:	f383 8812 	msr	BASEPRI_MAX, r3
    f38c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f390:	4630      	mov	r0, r6
    f392:	f019 fed1 	bl	29138 <z_spin_lock_valid>
    f396:	b968      	cbnz	r0, f3b4 <mpsc_pbuf_free+0x48>
    f398:	2394      	movs	r3, #148	; 0x94
    f39a:	4a26      	ldr	r2, [pc, #152]	; (f434 <mpsc_pbuf_free+0xc8>)
    f39c:	4926      	ldr	r1, [pc, #152]	; (f438 <mpsc_pbuf_free+0xcc>)
    f39e:	4827      	ldr	r0, [pc, #156]	; (f43c <mpsc_pbuf_free+0xd0>)
    f3a0:	f020 f810 	bl	2f3c4 <assert_print>
    f3a4:	4631      	mov	r1, r6
    f3a6:	4826      	ldr	r0, [pc, #152]	; (f440 <mpsc_pbuf_free+0xd4>)
    f3a8:	f020 f80c 	bl	2f3c4 <assert_print>
    f3ac:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f3ae:	4821      	ldr	r0, [pc, #132]	; (f434 <mpsc_pbuf_free+0xc8>)
    f3b0:	f020 f801 	bl	2f3b6 <assert_post_action>
	z_spin_lock_set_owner(l);
    f3b4:	4630      	mov	r0, r6
    f3b6:	f019 fedb 	bl	29170 <z_spin_lock_set_owner>
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
    f3ba:	782b      	ldrb	r3, [r5, #0]
    f3bc:	f36f 0300 	bfc	r3, #0, #1
    f3c0:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    f3c2:	6923      	ldr	r3, [r4, #16]
    f3c4:	079b      	lsls	r3, r3, #30
    f3c6:	d505      	bpl.n	f3d4 <mpsc_pbuf_free+0x68>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
    f3c8:	68e2      	ldr	r2, [r4, #12]
    f3ca:	6a23      	ldr	r3, [r4, #32]
    f3cc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    f3d0:	429d      	cmp	r5, r3
    f3d2:	d120      	bne.n	f416 <mpsc_pbuf_free+0xaa>
		witem->hdr.busy = 0;
    f3d4:	782b      	ldrb	r3, [r5, #0]
    f3d6:	f36f 0341 	bfc	r3, #1, #1
    f3da:	702b      	strb	r3, [r5, #0]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
    f3dc:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
    f3e0:	4299      	cmp	r1, r3
    f3e2:	d104      	bne.n	f3ee <mpsc_pbuf_free+0x82>
			 * at claimed item. In that case tmp_rd_idx points at
			 * the same location. In that case increment also tmp_rd_idx
			 * which will mark freed buffer as the only free space in
			 * the buffer.
			 */
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, wlen);
    f3e4:	463a      	mov	r2, r7
    f3e6:	4620      	mov	r0, r4
    f3e8:	f020 f81d 	bl	2f426 <idx_inc>
    f3ec:	60a0      	str	r0, [r4, #8]
		}
		rd_idx_inc(buffer, wlen);
    f3ee:	4639      	mov	r1, r7
    f3f0:	4620      	mov	r0, r4
    f3f2:	f020 f826 	bl	2f442 <rd_idx_inc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f3f6:	4630      	mov	r0, r6
    f3f8:	f019 feac 	bl	29154 <z_spin_unlock_valid>
    f3fc:	b980      	cbnz	r0, f420 <mpsc_pbuf_free+0xb4>
    f3fe:	23c2      	movs	r3, #194	; 0xc2
    f400:	4a0c      	ldr	r2, [pc, #48]	; (f434 <mpsc_pbuf_free+0xc8>)
    f402:	4910      	ldr	r1, [pc, #64]	; (f444 <mpsc_pbuf_free+0xd8>)
    f404:	480d      	ldr	r0, [pc, #52]	; (f43c <mpsc_pbuf_free+0xd0>)
    f406:	f01f ffdd 	bl	2f3c4 <assert_print>
    f40a:	4631      	mov	r1, r6
    f40c:	480e      	ldr	r0, [pc, #56]	; (f448 <mpsc_pbuf_free+0xdc>)
    f40e:	f01f ffd9 	bl	2f3c4 <assert_print>
    f412:	21c2      	movs	r1, #194	; 0xc2
    f414:	e7cb      	b.n	f3ae <mpsc_pbuf_free+0x42>
	} else {
		MPSC_PBUF_DBG(buffer, "Allocation occurred during claim");
		witem->skip.len = wlen;
    f416:	682b      	ldr	r3, [r5, #0]
    f418:	f367 039f 	bfi	r3, r7, #2, #30
    f41c:	602b      	str	r3, [r5, #0]
    f41e:	e7ea      	b.n	f3f6 <mpsc_pbuf_free+0x8a>
	__asm__ volatile(
    f420:	f388 8811 	msr	BASEPRI, r8
    f424:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    f428:	f104 002c 	add.w	r0, r4, #44	; 0x2c
	}
	MPSC_PBUF_DBG(buffer, "<<freed: %p", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
    f42c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f430:	f01a b93a 	b.w	296a8 <z_impl_k_sem_give>
    f434:	00039e53 	.word	0x00039e53
    f438:	00039eac 	.word	0x00039eac
    f43c:	00039995 	.word	0x00039995
    f440:	00039ec1 	.word	0x00039ec1
    f444:	00039e80 	.word	0x00039e80
    f448:	00039e97 	.word	0x00039e97

0000f44c <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    f44c:	4604      	mov	r4, r0
    f44e:	b508      	push	{r3, lr}
	__asm__ volatile(
    f450:	f04f 0220 	mov.w	r2, #32
    f454:	f3ef 8311 	mrs	r3, BASEPRI
    f458:	f382 8812 	msr	BASEPRI_MAX, r2
    f45c:	f3bf 8f6f 	isb	sy
	sys_cache_instr_disable();
#endif /* CONFIG_ICACHE */
#endif /* CONFIG_ARCH_CACHE */

	if (IS_ENABLED(CONFIG_SYSTEM_TIMER_HAS_DISABLE_SUPPORT)) {
		sys_clock_disable();
    f460:	f011 fffa 	bl	21458 <sys_clock_disable>
	}

	sys_arch_reboot(type);
    f464:	4620      	mov	r0, r4
    f466:	f003 fd4b 	bl	12f00 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    f46a:	4803      	ldr	r0, [pc, #12]	; (f478 <sys_reboot+0x2c>)
    f46c:	f01f fdcd 	bl	2f00a <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    f470:	f002 ffe6 	bl	12440 <arch_cpu_idle>
    f474:	e7fc      	b.n	f470 <sys_reboot+0x24>
    f476:	bf00      	nop
    f478:	00039fc6 	.word	0x00039fc6

0000f47c <nordicsemi_nrf91_init>:
    f47c:	f04f 0220 	mov.w	r2, #32
    f480:	f3ef 8311 	mrs	r3, BASEPRI
    f484:	f382 8812 	msr	BASEPRI_MAX, r2
    f488:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    f48c:	2101      	movs	r1, #1
    f48e:	4a04      	ldr	r2, [pc, #16]	; (f4a0 <nordicsemi_nrf91_init+0x24>)
    f490:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    f494:	f383 8811 	msr	BASEPRI, r3
    f498:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    f49c:	2000      	movs	r0, #0
    f49e:	4770      	bx	lr
    f4a0:	40039000 	.word	0x40039000

0000f4a4 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    f4a4:	b120      	cbz	r0, f4b0 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    f4a6:	4b03      	ldr	r3, [pc, #12]	; (f4b4 <arch_busy_wait+0x10>)
    f4a8:	0180      	lsls	r0, r0, #6
    f4aa:	f043 0301 	orr.w	r3, r3, #1
    f4ae:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    f4b0:	4770      	bx	lr
    f4b2:	bf00      	nop
    f4b4:	00037c40 	.word	0x00037c40

0000f4b8 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    f4b8:	f025 bea1 	b.w	351fe <SystemInit>

0000f4bc <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
    f4bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    f4c0:	460f      	mov	r7, r1
    f4c2:	4606      	mov	r6, r0
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    f4c4:	2108      	movs	r1, #8
    f4c6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    f4c8:	f020 f94f 	bl	2f76a <nvs_al_size.isra.0>
    f4cc:	4680      	mov	r8, r0

	*addr -= ate_size;
    f4ce:	683c      	ldr	r4, [r7, #0]
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
    f4d0:	f8df 9048 	ldr.w	r9, [pc, #72]	; f51c <nvs_recover_last_ate+0x60>
	*addr -= ate_size;
    f4d4:	1a24      	subs	r4, r4, r0
    f4d6:	603c      	str	r4, [r7, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
    f4d8:	ea04 0509 	and.w	r5, r4, r9
	while (ate_end_addr > data_end_addr) {
    f4dc:	42ac      	cmp	r4, r5
    f4de:	d803      	bhi.n	f4e8 <nvs_recover_last_ate+0x2c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
    f4e0:	2000      	movs	r0, #0
}
    f4e2:	b003      	add	sp, #12
    f4e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    f4e8:	2308      	movs	r3, #8
    f4ea:	466a      	mov	r2, sp
    f4ec:	4621      	mov	r1, r4
    f4ee:	4630      	mov	r0, r6
    f4f0:	f020 f8ab 	bl	2f64a <nvs_flash_rd>
		if (rc) {
    f4f4:	2800      	cmp	r0, #0
    f4f6:	d1f4      	bne.n	f4e2 <nvs_recover_last_ate+0x26>
		if (nvs_ate_valid(fs, &end_ate)) {
    f4f8:	4669      	mov	r1, sp
    f4fa:	4630      	mov	r0, r6
    f4fc:	f020 f93f 	bl	2f77e <nvs_ate_valid>
    f500:	b140      	cbz	r0, f514 <nvs_recover_last_ate+0x58>
			data_end_addr += end_ate.offset + end_ate.len;
    f502:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    f506:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			data_end_addr &= ADDR_SECT_MASK;
    f50a:	ea05 0509 	and.w	r5, r5, r9
			data_end_addr += end_ate.offset + end_ate.len;
    f50e:	4413      	add	r3, r2
    f510:	441d      	add	r5, r3
			*addr = ate_end_addr;
    f512:	603c      	str	r4, [r7, #0]
		ate_end_addr -= ate_size;
    f514:	eba4 0408 	sub.w	r4, r4, r8
    f518:	e7e0      	b.n	f4dc <nvs_recover_last_ate+0x20>
    f51a:	bf00      	nop
    f51c:	ffff0000 	.word	0xffff0000

0000f520 <nvs_mount>:

	return 0;
}

int nvs_mount(struct nvs_fs *fs)
{
    f520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f524:	b08f      	sub	sp, #60	; 0x3c
    f526:	4604      	mov	r4, r0
    f528:	af00      	add	r7, sp, #0

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
    f52a:	f100 0814 	add.w	r8, r0, #20
	return z_impl_k_mutex_init(mutex);
    f52e:	4640      	mov	r0, r8
    f530:	f026 fde5 	bl	360fe <z_impl_k_mutex_init>

	fs->flash_parameters = flash_get_parameters(fs->flash_device);
    f534:	6aa0      	ldr	r0, [r4, #40]	; 0x28
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    f536:	6883      	ldr	r3, [r0, #8]
    f538:	68db      	ldr	r3, [r3, #12]
    f53a:	4798      	blx	r3
    f53c:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
    f53e:	b988      	cbnz	r0, f564 <nvs_mount+0x44>
		LOG_ERR("Could not obtain flash parameters");
    f540:	4b8d      	ldr	r3, [pc, #564]	; (f778 <nvs_mount+0x258>)

	write_block_size = flash_get_write_block_size(fs->flash_device);

	/* check that the write block size is supported */
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
		LOG_ERR("Unsupported write block size");
    f542:	637b      	str	r3, [r7, #52]	; 0x34
    f544:	2302      	movs	r3, #2
		return -EINVAL;
    f546:	f06f 0515 	mvn.w	r5, #21
		LOG_ERR("Unsupported write block size");
    f54a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f54e:	488b      	ldr	r0, [pc, #556]	; (f77c <nvs_mount+0x25c>)
    f550:	633b      	str	r3, [r7, #48]	; 0x30
    f552:	f107 0230 	add.w	r2, r7, #48	; 0x30
    f556:	f020 f905 	bl	2f764 <z_log_msg_static_create.constprop.0>
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
    f55a:	4628      	mov	r0, r5
    f55c:	373c      	adds	r7, #60	; 0x3c
    f55e:	46bd      	mov	sp, r7
    f560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	write_block_size = flash_get_write_block_size(fs->flash_device);
    f564:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
    f566:	6883      	ldr	r3, [r0, #8]
    f568:	68db      	ldr	r3, [r3, #12]
    f56a:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
    f56c:	6803      	ldr	r3, [r0, #0]
    f56e:	3b01      	subs	r3, #1
    f570:	2b1f      	cmp	r3, #31
    f572:	d901      	bls.n	f578 <nvs_mount+0x58>
		LOG_ERR("Unsupported write block size");
    f574:	4b82      	ldr	r3, [pc, #520]	; (f780 <nvs_mount+0x260>)
    f576:	e7e4      	b.n	f542 <nvs_mount+0x22>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
    f578:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f57a:	6821      	ldr	r1, [r4, #0]
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
    f57c:	f107 0214 	add.w	r2, r7, #20
    f580:	f024 fcca 	bl	33f18 <z_impl_flash_get_page_info_by_offs>
	if (rc) {
    f584:	b108      	cbz	r0, f58a <nvs_mount+0x6a>
		LOG_ERR("Unable to get page info");
    f586:	4b7f      	ldr	r3, [pc, #508]	; (f784 <nvs_mount+0x264>)
    f588:	e7db      	b.n	f542 <nvs_mount+0x22>
	if (!fs->sector_size || fs->sector_size % info.size) {
    f58a:	89a5      	ldrh	r5, [r4, #12]
    f58c:	b12d      	cbz	r5, f59a <nvs_mount+0x7a>
    f58e:	69bb      	ldr	r3, [r7, #24]
    f590:	fbb5 f2f3 	udiv	r2, r5, r3
    f594:	fb03 5512 	mls	r5, r3, r2, r5
    f598:	b10d      	cbz	r5, f59e <nvs_mount+0x7e>
		LOG_ERR("Invalid sector size");
    f59a:	4b7b      	ldr	r3, [pc, #492]	; (f788 <nvs_mount+0x268>)
    f59c:	e7d1      	b.n	f542 <nvs_mount+0x22>
	if (fs->sector_count < 2) {
    f59e:	89e3      	ldrh	r3, [r4, #14]
    f5a0:	2b01      	cmp	r3, #1
    f5a2:	d801      	bhi.n	f5a8 <nvs_mount+0x88>
		LOG_ERR("Configuration error - sector count");
    f5a4:	4b79      	ldr	r3, [pc, #484]	; (f78c <nvs_mount+0x26c>)
    f5a6:	e7cc      	b.n	f542 <nvs_mount+0x22>
	uint8_t erase_value = fs->flash_parameters->erase_value;
    f5a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
    f5aa:	603d      	str	r5, [r7, #0]
	uint8_t erase_value = fs->flash_parameters->erase_value;
    f5ac:	f893 a004 	ldrb.w	sl, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    f5b0:	f04f 33ff 	mov.w	r3, #4294967295
    f5b4:	f04f 32ff 	mov.w	r2, #4294967295
    f5b8:	4640      	mov	r0, r8
    f5ba:	f019 fe13 	bl	291e4 <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    f5be:	2108      	movs	r1, #8
    f5c0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f5c2:	f020 f8d2 	bl	2f76a <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
    f5c6:	46a9      	mov	r9, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    f5c8:	4606      	mov	r6, r0
	for (i = 0; i < fs->sector_count; i++) {
    f5ca:	89e3      	ldrh	r3, [r4, #14]
    f5cc:	fa1f fb85 	uxth.w	fp, r5
    f5d0:	455b      	cmp	r3, fp
    f5d2:	d808      	bhi.n	f5e6 <nvs_mount+0xc6>
	if (closed_sectors == fs->sector_count) {
    f5d4:	89e3      	ldrh	r3, [r4, #14]
    f5d6:	454b      	cmp	r3, r9
    f5d8:	d123      	bne.n	f622 <nvs_mount+0x102>
	return z_impl_k_mutex_unlock(mutex);
    f5da:	4640      	mov	r0, r8
    f5dc:	f019 fed2 	bl	29384 <z_impl_k_mutex_unlock>
		rc = -EDEADLK;
    f5e0:	f06f 052c 	mvn.w	r5, #44	; 0x2c
    f5e4:	e7b9      	b.n	f55a <nvs_mount+0x3a>
		       (uint16_t)(fs->sector_size - ate_size);
    f5e6:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
    f5e8:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
    f5ea:	1b89      	subs	r1, r1, r6
		addr = (i << ADDR_SECT_SHIFT) +
    f5ec:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    f5f0:	4652      	mov	r2, sl
    f5f2:	2308      	movs	r3, #8
    f5f4:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
    f5f6:	6039      	str	r1, [r7, #0]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    f5f8:	f020 f875 	bl	2f6e6 <nvs_flash_cmp_const>
		if (rc) {
    f5fc:	b178      	cbz	r0, f61e <nvs_mount+0xfe>
			nvs_sector_advance(fs, &addr);
    f5fe:	4639      	mov	r1, r7
    f600:	4620      	mov	r0, r4
    f602:	f020 f830 	bl	2f666 <nvs_sector_advance>
			closed_sectors++;
    f606:	f109 0901 	add.w	r9, r9, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    f60a:	2308      	movs	r3, #8
    f60c:	4652      	mov	r2, sl
    f60e:	4620      	mov	r0, r4
    f610:	6839      	ldr	r1, [r7, #0]
			closed_sectors++;
    f612:	fa1f f989 	uxth.w	r9, r9
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    f616:	f020 f866 	bl	2f6e6 <nvs_flash_cmp_const>
			if (!rc) {
    f61a:	2800      	cmp	r0, #0
    f61c:	d0da      	beq.n	f5d4 <nvs_mount+0xb4>
	for (i = 0; i < fs->sector_count; i++) {
    f61e:	3501      	adds	r5, #1
    f620:	e7d3      	b.n	f5ca <nvs_mount+0xaa>
	if (i == fs->sector_count) {
    f622:	455b      	cmp	r3, fp
    f624:	d10b      	bne.n	f63e <nvs_mount+0x11e>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
    f626:	6839      	ldr	r1, [r7, #0]
    f628:	2308      	movs	r3, #8
    f62a:	4652      	mov	r2, sl
    f62c:	4620      	mov	r0, r4
    f62e:	1b89      	subs	r1, r1, r6
    f630:	f020 f859 	bl	2f6e6 <nvs_flash_cmp_const>
		if (!rc) {
    f634:	b918      	cbnz	r0, f63e <nvs_mount+0x11e>
			nvs_sector_advance(fs, &addr);
    f636:	4639      	mov	r1, r7
    f638:	4620      	mov	r0, r4
    f63a:	f020 f814 	bl	2f666 <nvs_sector_advance>
	rc = nvs_recover_last_ate(fs, &addr);
    f63e:	4639      	mov	r1, r7
    f640:	4620      	mov	r0, r4
    f642:	f7ff ff3b 	bl	f4bc <nvs_recover_last_ate>
	if (rc) {
    f646:	4605      	mov	r5, r0
    f648:	b118      	cbz	r0, f652 <nvs_mount+0x132>
    f64a:	4640      	mov	r0, r8
    f64c:	f019 fe9a 	bl	29384 <z_impl_k_mutex_unlock>
	if (rc) {
    f650:	e783      	b.n	f55a <nvs_mount+0x3a>
	fs->ate_wra = addr;
    f652:	683b      	ldr	r3, [r7, #0]
	fs->data_wra = addr & ADDR_SECT_MASK;
    f654:	ea4f 4913 	mov.w	r9, r3, lsr #16
    f658:	ea4f 4909 	mov.w	r9, r9, lsl #16
	fs->ate_wra = addr;
    f65c:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
    f65e:	f8c4 9008 	str.w	r9, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
    f662:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
    f666:	4299      	cmp	r1, r3
    f668:	d30f      	bcc.n	f68a <nvs_mount+0x16a>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    f66a:	2308      	movs	r3, #8
    f66c:	4620      	mov	r0, r4
    f66e:	1d3a      	adds	r2, r7, #4
    f670:	f01f ffeb 	bl	2f64a <nvs_flash_rd>
		if (rc) {
    f674:	4605      	mov	r5, r0
    f676:	2800      	cmp	r0, #0
    f678:	d1e7      	bne.n	f64a <nvs_mount+0x12a>
    f67a:	1d3b      	adds	r3, r7, #4
		if (data8[i] != value) {
    f67c:	f813 2b01 	ldrb.w	r2, [r3], #1
    f680:	4592      	cmp	sl, r2
    f682:	d144      	bne.n	f70e <nvs_mount+0x1ee>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    f684:	3501      	adds	r5, #1
    f686:	2d08      	cmp	r5, #8
    f688:	d1f8      	bne.n	f67c <nvs_mount+0x15c>
	addr = fs->ate_wra & ADDR_SECT_MASK;
    f68a:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &addr);
    f68c:	4639      	mov	r1, r7
	addr = fs->ate_wra & ADDR_SECT_MASK;
    f68e:	0c1b      	lsrs	r3, r3, #16
    f690:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &addr);
    f692:	4620      	mov	r0, r4
	addr = fs->ate_wra & ADDR_SECT_MASK;
    f694:	603b      	str	r3, [r7, #0]
	nvs_sector_advance(fs, &addr);
    f696:	f01f ffe6 	bl	2f666 <nvs_sector_advance>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
    f69a:	4652      	mov	r2, sl
    f69c:	4620      	mov	r0, r4
    f69e:	89a3      	ldrh	r3, [r4, #12]
    f6a0:	6839      	ldr	r1, [r7, #0]
    f6a2:	f020 f820 	bl	2f6e6 <nvs_flash_cmp_const>
	if (rc < 0) {
    f6a6:	1e05      	subs	r5, r0, #0
    f6a8:	dbcf      	blt.n	f64a <nvs_mount+0x12a>
		addr = fs->ate_wra + ate_size;
    f6aa:	6863      	ldr	r3, [r4, #4]
	if (rc) {
    f6ac:	f000 8082 	beq.w	f7b4 <nvs_mount+0x294>
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
    f6b0:	f64f 7aff 	movw	sl, #65535	; 0xffff
		addr = fs->ate_wra + ate_size;
    f6b4:	eb06 0903 	add.w	r9, r6, r3
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
    f6b8:	89a3      	ldrh	r3, [r4, #12]
    f6ba:	fa1f f289 	uxth.w	r2, r9
    f6be:	1b9b      	subs	r3, r3, r6
    f6c0:	429a      	cmp	r2, r3
		addr = fs->ate_wra + ate_size;
    f6c2:	f8c7 9000 	str.w	r9, [r7]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
    f6c6:	d33c      	bcc.n	f742 <nvs_mount+0x222>
		LOG_INF("No GC Done marker found: restarting gc");
    f6c8:	4b31      	ldr	r3, [pc, #196]	; (f790 <nvs_mount+0x270>)
    f6ca:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    f6ce:	637b      	str	r3, [r7, #52]	; 0x34
    f6d0:	2302      	movs	r3, #2
    f6d2:	482a      	ldr	r0, [pc, #168]	; (f77c <nvs_mount+0x25c>)
    f6d4:	633b      	str	r3, [r7, #48]	; 0x30
    f6d6:	f107 0230 	add.w	r2, r7, #48	; 0x30
    f6da:	f020 f843 	bl	2f764 <z_log_msg_static_create.constprop.0>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    f6de:	4620      	mov	r0, r4
    f6e0:	6861      	ldr	r1, [r4, #4]
    f6e2:	f020 f825 	bl	2f730 <nvs_flash_erase_sector>
		if (rc) {
    f6e6:	4605      	mov	r5, r0
    f6e8:	2800      	cmp	r0, #0
    f6ea:	d1ae      	bne.n	f64a <nvs_mount+0x12a>
		fs->ate_wra &= ADDR_SECT_MASK;
    f6ec:	6863      	ldr	r3, [r4, #4]
    f6ee:	4a29      	ldr	r2, [pc, #164]	; (f794 <nvs_mount+0x274>)
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    f6f0:	89a1      	ldrh	r1, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
    f6f2:	4013      	ands	r3, r2
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    f6f4:	440b      	add	r3, r1
    f6f6:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
    f6fa:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
    f6fc:	4013      	ands	r3, r2
		rc = nvs_gc(fs);
    f6fe:	4620      	mov	r0, r4
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
    f700:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
    f702:	f020 f91e 	bl	2f942 <nvs_gc>
			rc = nvs_flash_erase_sector(fs, addr);
    f706:	4605      	mov	r5, r0
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    f708:	2d00      	cmp	r5, #0
    f70a:	d06f      	beq.n	f7ec <nvs_mount+0x2cc>
    f70c:	e79d      	b.n	f64a <nvs_mount+0x12a>
		if (nvs_ate_valid(fs, &last_ate)) {
    f70e:	4620      	mov	r0, r4
    f710:	1d39      	adds	r1, r7, #4
    f712:	f020 f834 	bl	2f77e <nvs_ate_valid>
    f716:	6862      	ldr	r2, [r4, #4]
    f718:	b910      	cbnz	r0, f720 <nvs_mount+0x200>
		fs->ate_wra -= ate_size;
    f71a:	1b92      	subs	r2, r2, r6
    f71c:	6062      	str	r2, [r4, #4]
    f71e:	e7a0      	b.n	f662 <nvs_mount+0x142>
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    f720:	893d      	ldrh	r5, [r7, #8]
    f722:	88f9      	ldrh	r1, [r7, #6]
    f724:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
			fs->data_wra = addr & ADDR_SECT_MASK;
    f726:	f8c4 9008 	str.w	r9, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    f72a:	4429      	add	r1, r5
    f72c:	f020 f81d 	bl	2f76a <nvs_al_size.isra.0>
    f730:	4448      	add	r0, r9
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    f732:	4290      	cmp	r0, r2
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    f734:	60a0      	str	r0, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    f736:	d1f0      	bne.n	f71a <nvs_mount+0x1fa>
    f738:	2d00      	cmp	r5, #0
    f73a:	d0ee      	beq.n	f71a <nvs_mount+0x1fa>
				rc = -ESPIPE;
    f73c:	f06f 051c 	mvn.w	r5, #28
    f740:	e09c      	b.n	f87c <nvs_mount+0x35c>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    f742:	2308      	movs	r3, #8
    f744:	4649      	mov	r1, r9
    f746:	4620      	mov	r0, r4
    f748:	f107 020c 	add.w	r2, r7, #12
    f74c:	f01f ff7d 	bl	2f64a <nvs_flash_rd>
			if (rc) {
    f750:	4605      	mov	r5, r0
    f752:	2800      	cmp	r0, #0
    f754:	f47f af79 	bne.w	f64a <nvs_mount+0x12a>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
    f758:	4620      	mov	r0, r4
    f75a:	f107 010c 	add.w	r1, r7, #12
    f75e:	f020 f80e 	bl	2f77e <nvs_ate_valid>
    f762:	b130      	cbz	r0, f772 <nvs_mount+0x252>
    f764:	89bb      	ldrh	r3, [r7, #12]
    f766:	4553      	cmp	r3, sl
    f768:	d103      	bne.n	f772 <nvs_mount+0x252>
			    (gc_done_ate.id == 0xffff) &&
    f76a:	8a3b      	ldrh	r3, [r7, #16]
    f76c:	2b00      	cmp	r3, #0
    f76e:	f000 808b 	beq.w	f888 <nvs_mount+0x368>
			addr += ate_size;
    f772:	44b1      	add	r9, r6
    f774:	e7a0      	b.n	f6b8 <nvs_mount+0x198>
    f776:	bf00      	nop
    f778:	0003a007 	.word	0x0003a007
    f77c:	00037960 	.word	0x00037960
    f780:	0003a029 	.word	0x0003a029
    f784:	0003a046 	.word	0x0003a046
    f788:	0003a05e 	.word	0x0003a05e
    f78c:	0003a072 	.word	0x0003a072
    f790:	0003a0cf 	.word	0x0003a0cf
    f794:	ffff0000 	.word	0xffff0000
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
    f798:	4652      	mov	r2, sl
    f79a:	4620      	mov	r0, r4
    f79c:	1a5b      	subs	r3, r3, r1
    f79e:	f01f ffa2 	bl	2f6e6 <nvs_flash_cmp_const>
		if (rc < 0) {
    f7a2:	1e05      	subs	r5, r0, #0
    f7a4:	f6ff af51 	blt.w	f64a <nvs_mount+0x12a>
		if (!rc) {
    f7a8:	d008      	beq.n	f7bc <nvs_mount+0x29c>
		fs->data_wra += fs->flash_parameters->write_block_size;
    f7aa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    f7ac:	68a3      	ldr	r3, [r4, #8]
    f7ae:	6812      	ldr	r2, [r2, #0]
    f7b0:	4413      	add	r3, r2
    f7b2:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
    f7b4:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    f7b8:	428b      	cmp	r3, r1
    f7ba:	d8ed      	bhi.n	f798 <nvs_mount+0x278>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    f7bc:	6861      	ldr	r1, [r4, #4]
    f7be:	89a3      	ldrh	r3, [r4, #12]
    f7c0:	eb01 0246 	add.w	r2, r1, r6, lsl #1
    f7c4:	429a      	cmp	r2, r3
    f7c6:	d19f      	bne.n	f708 <nvs_mount+0x1e8>
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
    f7c8:	f8df 90ec 	ldr.w	r9, [pc, #236]	; f8b8 <nvs_mount+0x398>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    f7cc:	68a3      	ldr	r3, [r4, #8]
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
    f7ce:	ea01 0209 	and.w	r2, r1, r9
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    f7d2:	4293      	cmp	r3, r2
    f7d4:	d098      	beq.n	f708 <nvs_mount+0x1e8>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    f7d6:	4620      	mov	r0, r4
    f7d8:	f01f ffaa 	bl	2f730 <nvs_flash_erase_sector>
		if (rc) {
    f7dc:	4605      	mov	r5, r0
    f7de:	2800      	cmp	r0, #0
    f7e0:	f47f af33 	bne.w	f64a <nvs_mount+0x12a>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    f7e4:	6863      	ldr	r3, [r4, #4]
    f7e6:	ea03 0309 	and.w	r3, r3, r9
    f7ea:	60a3      	str	r3, [r4, #8]
		      (fs->sector_size - 2 * ate_size))) {
    f7ec:	89a3      	ldrh	r3, [r4, #12]
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    f7ee:	88a2      	ldrh	r2, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
    f7f0:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    f7f4:	429a      	cmp	r2, r3
    f7f6:	d03d      	beq.n	f874 <nvs_mount+0x354>
    f7f8:	4640      	mov	r0, r8
    f7fa:	f019 fdc3 	bl	29384 <z_impl_k_mutex_unlock>
	fs->ready = true;
    f7fe:	2301      	movs	r3, #1
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    f800:	46e8      	mov	r8, sp
    f802:	b088      	sub	sp, #32
	fs->ready = true;
    f804:	7423      	strb	r3, [r4, #16]
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    f806:	466d      	mov	r5, sp
    f808:	89e2      	ldrh	r2, [r4, #14]
    f80a:	89a3      	ldrh	r3, [r4, #12]
    f80c:	f04f 0904 	mov.w	r9, #4
    f810:	462e      	mov	r6, r5
    f812:	492a      	ldr	r1, [pc, #168]	; (f8bc <nvs_mount+0x39c>)
    f814:	61eb      	str	r3, [r5, #28]
    f816:	e9c5 1205 	strd	r1, r2, [r5, #20]
    f81a:	f846 9f10 	str.w	r9, [r6, #16]!
    f81e:	4632      	mov	r2, r6
    f820:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    f824:	4826      	ldr	r0, [pc, #152]	; (f8c0 <nvs_mount+0x3a0>)
    f826:	f01f ff9d 	bl	2f764 <z_log_msg_static_create.constprop.0>
    f82a:	46c5      	mov	sp, r8
	LOG_INF("alloc wra: %d, %x",
    f82c:	6863      	ldr	r3, [r4, #4]
    f82e:	46ad      	mov	sp, r5
    f830:	4a24      	ldr	r2, [pc, #144]	; (f8c4 <nvs_mount+0x3a4>)
    f832:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    f836:	616a      	str	r2, [r5, #20]
    f838:	0c1a      	lsrs	r2, r3, #16
    f83a:	b29b      	uxth	r3, r3
    f83c:	61aa      	str	r2, [r5, #24]
    f83e:	61eb      	str	r3, [r5, #28]
    f840:	4632      	mov	r2, r6
    f842:	481f      	ldr	r0, [pc, #124]	; (f8c0 <nvs_mount+0x3a0>)
    f844:	f8c5 9010 	str.w	r9, [r5, #16]
    f848:	f01f ff8c 	bl	2f764 <z_log_msg_static_create.constprop.0>
    f84c:	46c5      	mov	sp, r8
	LOG_INF("data wra: %d, %x",
    f84e:	68a3      	ldr	r3, [r4, #8]
    f850:	46ad      	mov	sp, r5
    f852:	4a1d      	ldr	r2, [pc, #116]	; (f8c8 <nvs_mount+0x3a8>)
    f854:	f8c5 9010 	str.w	r9, [r5, #16]
    f858:	616a      	str	r2, [r5, #20]
    f85a:	0c1a      	lsrs	r2, r3, #16
    f85c:	b29b      	uxth	r3, r3
    f85e:	61aa      	str	r2, [r5, #24]
    f860:	61eb      	str	r3, [r5, #28]
    f862:	4632      	mov	r2, r6
    f864:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    f868:	4815      	ldr	r0, [pc, #84]	; (f8c0 <nvs_mount+0x3a0>)
    f86a:	f01f ff7b 	bl	2f764 <z_log_msg_static_create.constprop.0>
	return 0;
    f86e:	2500      	movs	r5, #0
    f870:	46c5      	mov	sp, r8
    f872:	e672      	b.n	f55a <nvs_mount+0x3a>
		rc = nvs_add_gc_done_ate(fs);
    f874:	4620      	mov	r0, r4
    f876:	f020 f84f 	bl	2f918 <nvs_add_gc_done_ate>
    f87a:	4605      	mov	r5, r0
    f87c:	4640      	mov	r0, r8
    f87e:	f019 fd81 	bl	29384 <z_impl_k_mutex_unlock>
	if (rc) {
    f882:	2d00      	cmp	r5, #0
    f884:	d0bb      	beq.n	f7fe <nvs_mount+0x2de>
    f886:	e668      	b.n	f55a <nvs_mount+0x3a>
			LOG_INF("GC Done marker found");
    f888:	4b10      	ldr	r3, [pc, #64]	; (f8cc <nvs_mount+0x3ac>)
    f88a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    f88e:	637b      	str	r3, [r7, #52]	; 0x34
    f890:	2302      	movs	r3, #2
    f892:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    f896:	633b      	str	r3, [r7, #48]	; 0x30
    f898:	4809      	ldr	r0, [pc, #36]	; (f8c0 <nvs_mount+0x3a0>)
    f89a:	f01f ff63 	bl	2f764 <z_log_msg_static_create.constprop.0>
			addr = fs->ate_wra & ADDR_SECT_MASK;
    f89e:	6863      	ldr	r3, [r4, #4]
			nvs_sector_advance(fs, &addr);
    f8a0:	4639      	mov	r1, r7
			addr = fs->ate_wra & ADDR_SECT_MASK;
    f8a2:	0c1b      	lsrs	r3, r3, #16
			nvs_sector_advance(fs, &addr);
    f8a4:	4620      	mov	r0, r4
			addr = fs->ate_wra & ADDR_SECT_MASK;
    f8a6:	041b      	lsls	r3, r3, #16
    f8a8:	603b      	str	r3, [r7, #0]
			nvs_sector_advance(fs, &addr);
    f8aa:	f01f fedc 	bl	2f666 <nvs_sector_advance>
			rc = nvs_flash_erase_sector(fs, addr);
    f8ae:	4620      	mov	r0, r4
    f8b0:	6839      	ldr	r1, [r7, #0]
    f8b2:	f01f ff3d 	bl	2f730 <nvs_flash_erase_sector>
    f8b6:	e726      	b.n	f706 <nvs_mount+0x1e6>
    f8b8:	ffff0000 	.word	0xffff0000
    f8bc:	0003a095 	.word	0x0003a095
    f8c0:	00037960 	.word	0x00037960
    f8c4:	0003a0ac 	.word	0x0003a0ac
    f8c8:	0003a0be 	.word	0x0003a0be
    f8cc:	0003a0f6 	.word	0x0003a0f6

0000f8d0 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
    f8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f8d4:	461d      	mov	r5, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
    f8d6:	7c03      	ldrb	r3, [r0, #16]
{
    f8d8:	4604      	mov	r4, r0
    f8da:	4689      	mov	r9, r1
    f8dc:	4690      	mov	r8, r2
    f8de:	b08d      	sub	sp, #52	; 0x34
	if (!fs->ready) {
    f8e0:	b97b      	cbnz	r3, f902 <nvs_write+0x32>
		LOG_ERR("NVS not initialized");
    f8e2:	4b66      	ldr	r3, [pc, #408]	; (fa7c <nvs_write+0x1ac>)
		return -EACCES;
    f8e4:	f06f 060c 	mvn.w	r6, #12
		LOG_ERR("NVS not initialized");
    f8e8:	930b      	str	r3, [sp, #44]	; 0x2c
    f8ea:	2302      	movs	r3, #2
    f8ec:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f8f0:	4863      	ldr	r0, [pc, #396]	; (fa80 <nvs_write+0x1b0>)
    f8f2:	aa0a      	add	r2, sp, #40	; 0x28
    f8f4:	930a      	str	r3, [sp, #40]	; 0x28
    f8f6:	f01f ff35 	bl	2f764 <z_log_msg_static_create.constprop.0>
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
    f8fa:	4630      	mov	r0, r6
    f8fc:	b00d      	add	sp, #52	; 0x34
    f8fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    f902:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    f904:	2108      	movs	r1, #8
    f906:	4610      	mov	r0, r2
    f908:	f01f ff2f 	bl	2f76a <nvs_al_size.isra.0>
    f90c:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
    f90e:	4629      	mov	r1, r5
    f910:	4610      	mov	r0, r2
    f912:	f01f ff2a 	bl	2f76a <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 4 * ate_size)) ||
    f916:	89a3      	ldrh	r3, [r4, #12]
	data_size = nvs_al_size(fs, len);
    f918:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 4 * ate_size)) ||
    f91a:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
    f91e:	42ab      	cmp	r3, r5
    f920:	f0c0 80a9 	bcc.w	fa76 <nvs_write+0x1a6>
    f924:	b11d      	cbz	r5, f92e <nvs_write+0x5e>
	    ((len > 0) && (data == NULL))) {
    f926:	f1b8 0f00 	cmp.w	r8, #0
    f92a:	f000 80a4 	beq.w	fa76 <nvs_write+0x1a6>
	wlk_addr = fs->ate_wra;
    f92e:	6863      	ldr	r3, [r4, #4]
    f930:	9303      	str	r3, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    f932:	4620      	mov	r0, r4
    f934:	aa04      	add	r2, sp, #16
    f936:	a903      	add	r1, sp, #12
		rd_addr = wlk_addr;
    f938:	f8dd b00c 	ldr.w	fp, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    f93c:	f01f ff57 	bl	2f7ee <nvs_prev_ate>
		if (rc) {
    f940:	4606      	mov	r6, r0
    f942:	2800      	cmp	r0, #0
    f944:	d1d9      	bne.n	f8fa <nvs_write+0x2a>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
    f946:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    f94a:	454b      	cmp	r3, r9
    f94c:	d005      	beq.n	f95a <nvs_write+0x8a>
		if (wlk_addr == fs->ate_wra) {
    f94e:	6862      	ldr	r2, [r4, #4]
    f950:	9b03      	ldr	r3, [sp, #12]
    f952:	429a      	cmp	r2, r3
    f954:	d1ed      	bne.n	f932 <nvs_write+0x62>
		if (len == 0) {
    f956:	b9e5      	cbnz	r5, f992 <nvs_write+0xc2>
    f958:	e7cf      	b.n	f8fa <nvs_write+0x2a>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
    f95a:	4620      	mov	r0, r4
    f95c:	a904      	add	r1, sp, #16
    f95e:	f01f ff0e 	bl	2f77e <nvs_ate_valid>
    f962:	2800      	cmp	r0, #0
    f964:	d0f3      	beq.n	f94e <nvs_write+0x7e>
		rd_addr += wlk_ate.offset;
    f966:	f8bd 0012 	ldrh.w	r0, [sp, #18]
			if (wlk_ate.len == 0U) {
    f96a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
		if (len == 0) {
    f96e:	b175      	cbz	r5, f98e <nvs_write+0xbe>
		} else if (len == wlk_ate.len) {
    f970:	42ab      	cmp	r3, r5
    f972:	d10e      	bne.n	f992 <nvs_write+0xc2>
		rd_addr &= ADDR_SECT_MASK;
    f974:	ea4f 411b 	mov.w	r1, fp, lsr #16
    f978:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
    f97a:	4401      	add	r1, r0
    f97c:	462b      	mov	r3, r5
    f97e:	4642      	mov	r2, r8
    f980:	4620      	mov	r0, r4
    f982:	f01f fe7d 	bl	2f680 <nvs_flash_block_cmp>
			if (rc <= 0) {
    f986:	2800      	cmp	r0, #0
    f988:	dc03      	bgt.n	f992 <nvs_write+0xc2>
    f98a:	4606      	mov	r6, r0
    f98c:	e7b5      	b.n	f8fa <nvs_write+0x2a>
			if (wlk_ate.len == 0U) {
    f98e:	2b00      	cmp	r3, #0
    f990:	d0b3      	beq.n	f8fa <nvs_write+0x2a>
	if (data_size) {
    f992:	2f00      	cmp	r7, #0
    f994:	d13e      	bne.n	fa14 <nvs_write+0x144>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
    f996:	f104 0314 	add.w	r3, r4, #20
    f99a:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    f99c:	f04f 32ff 	mov.w	r2, #4294967295
    f9a0:	f04f 33ff 	mov.w	r3, #4294967295
    f9a4:	f104 0014 	add.w	r0, r4, #20
    f9a8:	f019 fc1c 	bl	291e4 <z_impl_k_mutex_lock>
	fs->ate_wra &= ADDR_SECT_MASK;
    f9ac:	f8df b0d4 	ldr.w	fp, [pc, #212]	; fa84 <nvs_write+0x1b4>
		if (gc_count == fs->sector_count) {
    f9b0:	89e3      	ldrh	r3, [r4, #14]
    f9b2:	429e      	cmp	r6, r3
    f9b4:	d05c      	beq.n	fa70 <nvs_write+0x1a0>
		if (fs->ate_wra >= (fs->data_wra + required_space)) {
    f9b6:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    f9ba:	18f9      	adds	r1, r7, r3
    f9bc:	428a      	cmp	r2, r1
    f9be:	d32c      	bcc.n	fa1a <nvs_write+0x14a>
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    f9c0:	f8ad 301a 	strh.w	r3, [sp, #26]
	entry.part = 0xff;
    f9c4:	23ff      	movs	r3, #255	; 0xff
	nvs_ate_crc8_update(&entry);
    f9c6:	a806      	add	r0, sp, #24
	entry.part = 0xff;
    f9c8:	f88d 301e 	strb.w	r3, [sp, #30]
	entry.id = id;
    f9cc:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.len = (uint16_t)len;
    f9d0:	f8ad 501c 	strh.w	r5, [sp, #28]
	nvs_ate_crc8_update(&entry);
    f9d4:	f01f fe7e 	bl	2f6d4 <nvs_ate_crc8_update>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
    f9d8:	462b      	mov	r3, r5
    f9da:	4642      	mov	r2, r8
    f9dc:	68a1      	ldr	r1, [r4, #8]
    f9de:	4620      	mov	r0, r4
    f9e0:	f01f ff4f 	bl	2f882 <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
    f9e4:	4629      	mov	r1, r5
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
    f9e6:	4682      	mov	sl, r0
	fs->data_wra += nvs_al_size(fs, len);
    f9e8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f9ea:	f01f febe 	bl	2f76a <nvs_al_size.isra.0>
    f9ee:	68a2      	ldr	r2, [r4, #8]
    f9f0:	4402      	add	r2, r0
    f9f2:	60a2      	str	r2, [r4, #8]
	if (rc) {
    f9f4:	f1ba 0f00 	cmp.w	sl, #0
    f9f8:	d107      	bne.n	fa0a <nvs_write+0x13a>
	rc = nvs_flash_ate_wrt(fs, &entry);
    f9fa:	4620      	mov	r0, r4
    f9fc:	a906      	add	r1, sp, #24
    f9fe:	f01f ff7a 	bl	2f8f6 <nvs_flash_ate_wrt>
	rc = len;
    fa02:	2800      	cmp	r0, #0
    fa04:	bf14      	ite	ne
    fa06:	4682      	movne	sl, r0
    fa08:	46aa      	moveq	sl, r5
	return z_impl_k_mutex_unlock(mutex);
    fa0a:	9801      	ldr	r0, [sp, #4]
    fa0c:	f019 fcba 	bl	29384 <z_impl_k_mutex_unlock>
	return rc;
    fa10:	4656      	mov	r6, sl
    fa12:	e772      	b.n	f8fa <nvs_write+0x2a>
		required_space = data_size + ate_size;
    fa14:	4457      	add	r7, sl
    fa16:	b2bf      	uxth	r7, r7
    fa18:	e7bd      	b.n	f996 <nvs_write+0xc6>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    fa1a:	2108      	movs	r1, #8
    fa1c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    fa1e:	f01f fea4 	bl	2f76a <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
    fa22:	f64f 73ff 	movw	r3, #65535	; 0xffff
    fa26:	f8ad 3018 	strh.w	r3, [sp, #24]
	close_ate.len = 0U;
    fa2a:	2300      	movs	r3, #0
    fa2c:	f8ad 301c 	strh.w	r3, [sp, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
    fa30:	1813      	adds	r3, r2, r0
    fa32:	f8ad 301a 	strh.w	r3, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
    fa36:	89a3      	ldrh	r3, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
    fa38:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
    fa3c:	441a      	add	r2, r3
    fa3e:	1a10      	subs	r0, r2, r0
    fa40:	6060      	str	r0, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
    fa42:	a806      	add	r0, sp, #24
    fa44:	f01f fe46 	bl	2f6d4 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
    fa48:	a906      	add	r1, sp, #24
    fa4a:	4620      	mov	r0, r4
    fa4c:	f01f ff53 	bl	2f8f6 <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
    fa50:	4620      	mov	r0, r4
    fa52:	1d21      	adds	r1, r4, #4
    fa54:	f01f fe07 	bl	2f666 <nvs_sector_advance>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    fa58:	6863      	ldr	r3, [r4, #4]
		rc = nvs_gc(fs);
    fa5a:	4620      	mov	r0, r4
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    fa5c:	ea03 030b 	and.w	r3, r3, fp
    fa60:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
    fa62:	f01f ff6e 	bl	2f942 <nvs_gc>
		if (rc) {
    fa66:	4682      	mov	sl, r0
    fa68:	2800      	cmp	r0, #0
    fa6a:	d1ce      	bne.n	fa0a <nvs_write+0x13a>
		gc_count++;
    fa6c:	3601      	adds	r6, #1
		if (gc_count == fs->sector_count) {
    fa6e:	e79f      	b.n	f9b0 <nvs_write+0xe0>
			rc = -ENOSPC;
    fa70:	f06f 0a1b 	mvn.w	sl, #27
    fa74:	e7c9      	b.n	fa0a <nvs_write+0x13a>
		return -EINVAL;
    fa76:	f06f 0615 	mvn.w	r6, #21
    fa7a:	e73e      	b.n	f8fa <nvs_write+0x2a>
    fa7c:	00039ff3 	.word	0x00039ff3
    fa80:	00037960 	.word	0x00037960
    fa84:	ffff0000 	.word	0xffff0000

0000fa88 <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
    fa88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fa8c:	461e      	mov	r6, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
    fa8e:	7c03      	ldrb	r3, [r0, #16]
{
    fa90:	b088      	sub	sp, #32
    fa92:	4604      	mov	r4, r0
    fa94:	460f      	mov	r7, r1
    fa96:	4690      	mov	r8, r2
    fa98:	f8bd 9040 	ldrh.w	r9, [sp, #64]	; 0x40
	if (!fs->ready) {
    fa9c:	b973      	cbnz	r3, fabc <nvs_read_hist+0x34>
		LOG_ERR("NVS not initialized");
    fa9e:	4b2f      	ldr	r3, [pc, #188]	; (fb5c <nvs_read_hist+0xd4>)
    faa0:	482f      	ldr	r0, [pc, #188]	; (fb60 <nvs_read_hist+0xd8>)
    faa2:	9307      	str	r3, [sp, #28]
    faa4:	2302      	movs	r3, #2
    faa6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    faaa:	aa06      	add	r2, sp, #24
    faac:	9306      	str	r3, [sp, #24]
    faae:	f01f fe59 	bl	2f764 <z_log_msg_static_create.constprop.0>
		return -EACCES;
    fab2:	f06f 000c 	mvn.w	r0, #12

	return wlk_ate.len;

err:
	return rc;
}
    fab6:	b008      	add	sp, #32
    fab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    fabc:	2108      	movs	r1, #8
    fabe:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    fac0:	f01f fe53 	bl	2f76a <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
    fac4:	89a3      	ldrh	r3, [r4, #12]
    fac6:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
    faca:	42b3      	cmp	r3, r6
    facc:	d343      	bcc.n	fb56 <nvs_read_hist+0xce>
	cnt_his = 0U;
    face:	2500      	movs	r5, #0
	wlk_addr = fs->ate_wra;
    fad0:	f8d4 a004 	ldr.w	sl, [r4, #4]
    fad4:	f8cd a004 	str.w	sl, [sp, #4]
	while (cnt_his <= cnt) {
    fad8:	454d      	cmp	r5, r9
    fada:	4651      	mov	r1, sl
		rd_addr = wlk_addr;
    fadc:	f8dd a004 	ldr.w	sl, [sp, #4]
	while (cnt_his <= cnt) {
    fae0:	d909      	bls.n	faf6 <nvs_read_hist+0x6e>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    fae2:	6863      	ldr	r3, [r4, #4]
    fae4:	4553      	cmp	r3, sl
    fae6:	d11e      	bne.n	fb26 <nvs_read_hist+0x9e>
    fae8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    faec:	42bb      	cmp	r3, r7
    faee:	d01a      	beq.n	fb26 <nvs_read_hist+0x9e>
		return -ENOENT;
    faf0:	f06f 0001 	mvn.w	r0, #1
    faf4:	e7df      	b.n	fab6 <nvs_read_hist+0x2e>
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    faf6:	4620      	mov	r0, r4
    faf8:	aa02      	add	r2, sp, #8
    fafa:	a901      	add	r1, sp, #4
    fafc:	f01f fe77 	bl	2f7ee <nvs_prev_ate>
		if (rc) {
    fb00:	2800      	cmp	r0, #0
    fb02:	d1d8      	bne.n	fab6 <nvs_read_hist+0x2e>
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
    fb04:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    fb08:	42bb      	cmp	r3, r7
    fb0a:	d106      	bne.n	fb1a <nvs_read_hist+0x92>
    fb0c:	4620      	mov	r0, r4
    fb0e:	a902      	add	r1, sp, #8
    fb10:	f01f fe35 	bl	2f77e <nvs_ate_valid>
    fb14:	b108      	cbz	r0, fb1a <nvs_read_hist+0x92>
			cnt_his++;
    fb16:	3501      	adds	r5, #1
    fb18:	b2ad      	uxth	r5, r5
		if (wlk_addr == fs->ate_wra) {
    fb1a:	6862      	ldr	r2, [r4, #4]
    fb1c:	9b01      	ldr	r3, [sp, #4]
    fb1e:	429a      	cmp	r2, r3
    fb20:	d1da      	bne.n	fad8 <nvs_read_hist+0x50>
		rd_addr = wlk_addr;
    fb22:	4651      	mov	r1, sl
    fb24:	e7e0      	b.n	fae8 <nvs_read_hist+0x60>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    fb26:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    fb2a:	2b00      	cmp	r3, #0
    fb2c:	d0e0      	beq.n	faf0 <nvs_read_hist+0x68>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    fb2e:	45a9      	cmp	r9, r5
    fb30:	d8de      	bhi.n	faf0 <nvs_read_hist+0x68>
	rd_addr += wlk_ate.offset;
    fb32:	f8bd 000a 	ldrh.w	r0, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
    fb36:	0c09      	lsrs	r1, r1, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    fb38:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
    fb3a:	ea4f 4101 	mov.w	r1, r1, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    fb3e:	bf28      	it	cs
    fb40:	4633      	movcs	r3, r6
    fb42:	4401      	add	r1, r0
    fb44:	4642      	mov	r2, r8
    fb46:	4620      	mov	r0, r4
    fb48:	f01f fd7f 	bl	2f64a <nvs_flash_rd>
	if (rc) {
    fb4c:	2800      	cmp	r0, #0
    fb4e:	d1b2      	bne.n	fab6 <nvs_read_hist+0x2e>
	return wlk_ate.len;
    fb50:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    fb54:	e7af      	b.n	fab6 <nvs_read_hist+0x2e>
		return -EINVAL;
    fb56:	f06f 0015 	mvn.w	r0, #21
    fb5a:	e7ac      	b.n	fab6 <nvs_read_hist+0x2e>
    fb5c:	00039ff3 	.word	0x00039ff3
    fb60:	00037960 	.word	0x00037960

0000fb64 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(void)
{
    fb64:	b530      	push	{r4, r5, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    fb66:	2200      	movs	r2, #0
{
    fb68:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    fb6a:	490f      	ldr	r1, [pc, #60]	; (fba8 <enable_logger+0x44>)
    fb6c:	480f      	ldr	r0, [pc, #60]	; (fbac <enable_logger+0x48>)
    fb6e:	f026 fbd5 	bl	3631c <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    fb72:	2200      	movs	r2, #0
    fb74:	2300      	movs	r3, #0
    fb76:	2400      	movs	r4, #0
    fb78:	e9cd 2306 	strd	r2, r3, [sp, #24]
    fb7c:	230e      	movs	r3, #14
    fb7e:	4d0c      	ldr	r5, [pc, #48]	; (fbb0 <enable_logger+0x4c>)
    fb80:	e9cd 3403 	strd	r3, r4, [sp, #12]
    fb84:	f44f 6200 	mov.w	r2, #2048	; 0x800
    fb88:	4628      	mov	r0, r5
    fb8a:	e9cd 4401 	strd	r4, r4, [sp, #4]
    fb8e:	4b09      	ldr	r3, [pc, #36]	; (fbb4 <enable_logger+0x50>)
    fb90:	4909      	ldr	r1, [pc, #36]	; (fbb8 <enable_logger+0x54>)
    fb92:	9400      	str	r4, [sp, #0]
    fb94:	f019 fa06 	bl	28fa4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    fb98:	4908      	ldr	r1, [pc, #32]	; (fbbc <enable_logger+0x58>)
    fb9a:	4628      	mov	r0, r5
    fb9c:	f026 fa99 	bl	360d2 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
    fba0:	4620      	mov	r0, r4
    fba2:	b009      	add	sp, #36	; 0x24
    fba4:	bd30      	pop	{r4, r5, pc}
    fba6:	bf00      	nop
    fba8:	0000fd05 	.word	0x0000fd05
    fbac:	2000d6d8 	.word	0x2000d6d8
    fbb0:	2000d248 	.word	0x2000d248
    fbb4:	0000ffdd 	.word	0x0000ffdd
    fbb8:	20010788 	.word	0x20010788
    fbbc:	0003a112 	.word	0x0003a112

0000fbc0 <activate_foreach_backend>:
{
    fbc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fbc4:	4604      	mov	r4, r0
	while (mask_cpy) {
    fbc6:	4607      	mov	r7, r0
		mask_cpy &= ~BIT(i);
    fbc8:	f04f 0901 	mov.w	r9, #1
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    fbcc:	f8df 8050 	ldr.w	r8, [pc, #80]	; fc20 <activate_foreach_backend+0x60>
	while (mask_cpy) {
    fbd0:	b914      	cbnz	r4, fbd8 <activate_foreach_backend+0x18>
}
    fbd2:	4638      	mov	r0, r7
    fbd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
    fbd8:	fa94 f5a4 	rbit	r5, r4
    fbdc:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
    fbe0:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    fbe4:	012e      	lsls	r6, r5, #4
    fbe6:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
    fbea:	ea6f 0a03 	mvn.w	sl, r3
    fbee:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    fbf2:	7b2b      	ldrb	r3, [r5, #12]
    fbf4:	2b00      	cmp	r3, #0
    fbf6:	d0eb      	beq.n	fbd0 <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
    fbf8:	f858 3006 	ldr.w	r3, [r8, r6]
    fbfc:	691b      	ldr	r3, [r3, #16]
    fbfe:	b94b      	cbnz	r3, fc14 <activate_foreach_backend+0x54>
					   backend->cb->ctx,
    fc00:	4446      	add	r6, r8
			log_backend_enable(backend,
    fc02:	6873      	ldr	r3, [r6, #4]
    fc04:	2204      	movs	r2, #4
    fc06:	4628      	mov	r0, r5
    fc08:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
    fc0a:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
    fc0e:	f000 faeb 	bl	101e8 <log_backend_enable>
    fc12:	e7dd      	b.n	fbd0 <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
    fc14:	4628      	mov	r0, r5
    fc16:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    fc18:	2800      	cmp	r0, #0
    fc1a:	d1d9      	bne.n	fbd0 <activate_foreach_backend+0x10>
    fc1c:	e7f0      	b.n	fc00 <activate_foreach_backend+0x40>
    fc1e:	bf00      	nop
    fc20:	00037a68 	.word	0x00037a68

0000fc24 <z_log_init>:
{
    fc24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 */
static inline int log_backend_count_get(void)
{
	int cnt;

	STRUCT_SECTION_COUNT(log_backend, &cnt);
    fc28:	f8df 90b8 	ldr.w	r9, [pc, #184]	; fce4 <z_log_init+0xc0>
    fc2c:	4c2e      	ldr	r4, [pc, #184]	; (fce8 <z_log_init+0xc4>)
    fc2e:	4680      	mov	r8, r0
    fc30:	eba9 0304 	sub.w	r3, r9, r4
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    fc34:	2b9f      	cmp	r3, #159	; 0x9f
{
    fc36:	460f      	mov	r7, r1
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    fc38:	d90b      	bls.n	fc52 <z_log_init+0x2e>
    fc3a:	492c      	ldr	r1, [pc, #176]	; (fcec <z_log_init+0xc8>)
    fc3c:	f44f 738c 	mov.w	r3, #280	; 0x118
    fc40:	4a2b      	ldr	r2, [pc, #172]	; (fcf0 <z_log_init+0xcc>)
    fc42:	482c      	ldr	r0, [pc, #176]	; (fcf4 <z_log_init+0xd0>)
    fc44:	f01f fbbe 	bl	2f3c4 <assert_print>
    fc48:	f44f 718c 	mov.w	r1, #280	; 0x118
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    fc4c:	4828      	ldr	r0, [pc, #160]	; (fcf0 <z_log_init+0xcc>)
    fc4e:	f01f fbb2 	bl	2f3b6 <assert_post_action>
	if (atomic_inc(&initialized) != 0) {
    fc52:	4829      	ldr	r0, [pc, #164]	; (fcf8 <z_log_init+0xd4>)
    fc54:	f01f ff61 	bl	2fb1a <atomic_inc>
    fc58:	4606      	mov	r6, r0
    fc5a:	b360      	cbz	r0, fcb6 <z_log_init+0x92>
	uint32_t mask = 0;
    fc5c:	2500      	movs	r5, #0
}
    fc5e:	4628      	mov	r0, r5
    fc60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
    fc64:	7b23      	ldrb	r3, [r4, #12]
    fc66:	b173      	cbz	r3, fc86 <z_log_init+0x62>
	if (backend->api->init) {
    fc68:	6823      	ldr	r3, [r4, #0]
    fc6a:	68db      	ldr	r3, [r3, #12]
    fc6c:	b10b      	cbz	r3, fc72 <z_log_init+0x4e>
		backend->api->init(backend);
    fc6e:	4620      	mov	r0, r4
    fc70:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
    fc72:	6823      	ldr	r3, [r4, #0]
    fc74:	691b      	ldr	r3, [r3, #16]
    fc76:	b9b3      	cbnz	r3, fca6 <z_log_init+0x82>
				log_backend_enable(backend,
    fc78:	6863      	ldr	r3, [r4, #4]
    fc7a:	2204      	movs	r2, #4
    fc7c:	4620      	mov	r0, r4
    fc7e:	6819      	ldr	r1, [r3, #0]
    fc80:	f000 fab2 	bl	101e8 <log_backend_enable>
			i++;
    fc84:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    fc86:	3410      	adds	r4, #16
    fc88:	454c      	cmp	r4, r9
    fc8a:	d918      	bls.n	fcbe <z_log_init+0x9a>
    fc8c:	491b      	ldr	r1, [pc, #108]	; (fcfc <z_log_init+0xd8>)
    fc8e:	f240 1325 	movw	r3, #293	; 0x125
    fc92:	4a17      	ldr	r2, [pc, #92]	; (fcf0 <z_log_init+0xcc>)
    fc94:	4817      	ldr	r0, [pc, #92]	; (fcf4 <z_log_init+0xd0>)
    fc96:	f01f fb95 	bl	2f3c4 <assert_print>
    fc9a:	4819      	ldr	r0, [pc, #100]	; (fd00 <z_log_init+0xdc>)
    fc9c:	f01f fb92 	bl	2f3c4 <assert_print>
    fca0:	f240 1125 	movw	r1, #293	; 0x125
    fca4:	e7d2      	b.n	fc4c <z_log_init+0x28>
		return backend->api->is_ready(backend);
    fca6:	4620      	mov	r0, r4
    fca8:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    fcaa:	2800      	cmp	r0, #0
    fcac:	d0e4      	beq.n	fc78 <z_log_init+0x54>
				mask |= BIT(i);
    fcae:	fa0a f306 	lsl.w	r3, sl, r6
    fcb2:	431d      	orrs	r5, r3
    fcb4:	e7e6      	b.n	fc84 <z_log_init+0x60>
	uint32_t mask = 0;
    fcb6:	4605      	mov	r5, r0
				mask |= BIT(i);
    fcb8:	f04f 0a01 	mov.w	sl, #1
    fcbc:	e7e4      	b.n	fc88 <z_log_init+0x64>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    fcbe:	d3d1      	bcc.n	fc64 <z_log_init+0x40>
	if (blocking) {
    fcc0:	f1b8 0f00 	cmp.w	r8, #0
    fcc4:	d0cb      	beq.n	fc5e <z_log_init+0x3a>
		while (mask) {
    fcc6:	2d00      	cmp	r5, #0
    fcc8:	d0c8      	beq.n	fc5c <z_log_init+0x38>
			mask = activate_foreach_backend(mask);
    fcca:	4628      	mov	r0, r5
    fccc:	f7ff ff78 	bl	fbc0 <activate_foreach_backend>
    fcd0:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    fcd2:	2f00      	cmp	r7, #0
    fcd4:	d0f7      	beq.n	fcc6 <z_log_init+0xa2>
	return z_impl_k_sleep(timeout);
    fcd6:	2100      	movs	r1, #0
    fcd8:	f44f 70a4 	mov.w	r0, #328	; 0x148
    fcdc:	f01b fb36 	bl	2b34c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    fce0:	e7f1      	b.n	fcc6 <z_log_init+0xa2>
    fce2:	bf00      	nop
    fce4:	00037a78 	.word	0x00037a78
    fce8:	00037a68 	.word	0x00037a68
    fcec:	0003a147 	.word	0x0003a147
    fcf0:	0003a11a 	.word	0x0003a11a
    fcf4:	00039995 	.word	0x00039995
    fcf8:	2000e330 	.word	0x2000e330
    fcfc:	0003a16b 	.word	0x0003a16b
    fd00:	0003a18c 	.word	0x0003a18c

0000fd04 <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
    fd04:	4801      	ldr	r0, [pc, #4]	; (fd0c <log_process_thread_timer_expiry_fn+0x8>)
    fd06:	f019 bccf 	b.w	296a8 <z_impl_k_sem_give>
    fd0a:	bf00      	nop
    fd0c:	2000cf28 	.word	0x2000cf28

0000fd10 <log_format_func_t_get>:
}
    fd10:	4b01      	ldr	r3, [pc, #4]	; (fd18 <log_format_func_t_get+0x8>)
    fd12:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    fd16:	4770      	bx	lr
    fd18:	00037d84 	.word	0x00037d84

0000fd1c <log_set_timestamp_func>:
{
    fd1c:	b508      	push	{r3, lr}
    fd1e:	4603      	mov	r3, r0
    fd20:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
    fd22:	b12b      	cbz	r3, fd30 <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
    fd24:	4a04      	ldr	r2, [pc, #16]	; (fd38 <log_set_timestamp_func+0x1c>)
    fd26:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
    fd28:	f000 fd8e 	bl	10848 <log_output_timestamp_freq_set>
	return 0;
    fd2c:	2000      	movs	r0, #0
}
    fd2e:	bd08      	pop	{r3, pc}
		return -EINVAL;
    fd30:	f06f 0015 	mvn.w	r0, #21
    fd34:	e7fb      	b.n	fd2e <log_set_timestamp_func+0x12>
    fd36:	bf00      	nop
    fd38:	2000c804 	.word	0x2000c804

0000fd3c <z_log_notify_backend_enabled>:
{
    fd3c:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    fd3e:	4c04      	ldr	r4, [pc, #16]	; (fd50 <z_log_notify_backend_enabled+0x14>)
    fd40:	7823      	ldrb	r3, [r4, #0]
    fd42:	b913      	cbnz	r3, fd4a <z_log_notify_backend_enabled+0xe>
    fd44:	4803      	ldr	r0, [pc, #12]	; (fd54 <z_log_notify_backend_enabled+0x18>)
    fd46:	f019 fcaf 	bl	296a8 <z_impl_k_sem_give>
	backend_attached = true;
    fd4a:	2301      	movs	r3, #1
    fd4c:	7023      	strb	r3, [r4, #0]
}
    fd4e:	bd10      	pop	{r4, pc}
    fd50:	2000f122 	.word	0x2000f122
    fd54:	2000cf28 	.word	0x2000cf28

0000fd58 <z_log_dropped>:
{
    fd58:	b510      	push	{r4, lr}
    fd5a:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
    fd5c:	4806      	ldr	r0, [pc, #24]	; (fd78 <z_log_dropped+0x20>)
    fd5e:	f01f fedc 	bl	2fb1a <atomic_inc>
	if (buffered) {
    fd62:	b13c      	cbz	r4, fd74 <z_log_dropped+0x1c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    fd64:	4b05      	ldr	r3, [pc, #20]	; (fd7c <z_log_dropped+0x24>)
    fd66:	e8d3 1fef 	ldaex	r1, [r3]
    fd6a:	3901      	subs	r1, #1
    fd6c:	e8c3 1fe2 	stlex	r2, r1, [r3]
    fd70:	2a00      	cmp	r2, #0
    fd72:	d1f8      	bne.n	fd66 <z_log_dropped+0xe>
}
    fd74:	bd10      	pop	{r4, pc}
    fd76:	bf00      	nop
    fd78:	2000e328 	.word	0x2000e328
    fd7c:	2000e32c 	.word	0x2000e32c

0000fd80 <z_log_dropped_read_and_clear>:
}
    fd80:	2000      	movs	r0, #0
    fd82:	4601      	mov	r1, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    fd84:	4b03      	ldr	r3, [pc, #12]	; (fd94 <z_log_dropped_read_and_clear+0x14>)
    fd86:	e8d3 0fef 	ldaex	r0, [r3]
    fd8a:	e8c3 1fe2 	stlex	r2, r1, [r3]
    fd8e:	2a00      	cmp	r2, #0
    fd90:	d1f9      	bne.n	fd86 <z_log_dropped_read_and_clear+0x6>
    fd92:	4770      	bx	lr
    fd94:	2000e328 	.word	0x2000e328

0000fd98 <dropped_notify>:
{
    fd98:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    fd9a:	f7ff fff1 	bl	fd80 <z_log_dropped_read_and_clear>
    fd9e:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    fda0:	4c0f      	ldr	r4, [pc, #60]	; (fde0 <dropped_notify+0x48>)
    fda2:	4e10      	ldr	r6, [pc, #64]	; (fde4 <dropped_notify+0x4c>)
    fda4:	42b4      	cmp	r4, r6
    fda6:	d919      	bls.n	fddc <dropped_notify+0x44>
    fda8:	490f      	ldr	r1, [pc, #60]	; (fde8 <dropped_notify+0x50>)
    fdaa:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
    fdae:	4a0f      	ldr	r2, [pc, #60]	; (fdec <dropped_notify+0x54>)
    fdb0:	480f      	ldr	r0, [pc, #60]	; (fdf0 <dropped_notify+0x58>)
    fdb2:	f01f fb07 	bl	2f3c4 <assert_print>
    fdb6:	480f      	ldr	r0, [pc, #60]	; (fdf4 <dropped_notify+0x5c>)
    fdb8:	f01f fb04 	bl	2f3c4 <assert_print>
    fdbc:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
    fdc0:	480a      	ldr	r0, [pc, #40]	; (fdec <dropped_notify+0x54>)
    fdc2:	f01f faf8 	bl	2f3b6 <assert_post_action>
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    fdc6:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    fdc8:	795b      	ldrb	r3, [r3, #5]
    fdca:	b12b      	cbz	r3, fdd8 <dropped_notify+0x40>
	if (backend->api->dropped != NULL) {
    fdcc:	6823      	ldr	r3, [r4, #0]
    fdce:	685b      	ldr	r3, [r3, #4]
    fdd0:	b113      	cbz	r3, fdd8 <dropped_notify+0x40>
		backend->api->dropped(backend, cnt);
    fdd2:	4629      	mov	r1, r5
    fdd4:	4620      	mov	r0, r4
    fdd6:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    fdd8:	3410      	adds	r4, #16
    fdda:	e7e3      	b.n	fda4 <dropped_notify+0xc>
    fddc:	d3f3      	bcc.n	fdc6 <dropped_notify+0x2e>
}
    fdde:	bd70      	pop	{r4, r5, r6, pc}
    fde0:	00037a68 	.word	0x00037a68
    fde4:	00037a78 	.word	0x00037a78
    fde8:	0003a16b 	.word	0x0003a16b
    fdec:	0003a11a 	.word	0x0003a11a
    fdf0:	00039995 	.word	0x00039995
    fdf4:	0003a18c 	.word	0x0003a18c

0000fdf8 <z_log_msg_init>:
{
    fdf8:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    fdfa:	4c04      	ldr	r4, [pc, #16]	; (fe0c <z_log_msg_init+0x14>)
    fdfc:	4904      	ldr	r1, [pc, #16]	; (fe10 <z_log_msg_init+0x18>)
    fdfe:	4620      	mov	r0, r4
    fe00:	f7ff f8e4 	bl	efcc <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
    fe04:	4b03      	ldr	r3, [pc, #12]	; (fe14 <z_log_msg_init+0x1c>)
    fe06:	601c      	str	r4, [r3, #0]
}
    fe08:	bd10      	pop	{r4, pc}
    fe0a:	bf00      	nop
    fe0c:	2000cd60 	.word	0x2000cd60
    fe10:	00037d70 	.word	0x00037d70
    fe14:	2000e320 	.word	0x2000e320

0000fe18 <log_core_init>:
{
    fe18:	b508      	push	{r3, lr}
	panic_mode = false;
    fe1a:	2300      	movs	r3, #0
    fe1c:	4a07      	ldr	r2, [pc, #28]	; (fe3c <log_core_init+0x24>)
		log_set_timestamp_func(default_get_timestamp,
    fe1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	panic_mode = false;
    fe22:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    fe24:	4a06      	ldr	r2, [pc, #24]	; (fe40 <log_core_init+0x28>)
		log_set_timestamp_func(default_get_timestamp,
    fe26:	4807      	ldr	r0, [pc, #28]	; (fe44 <log_core_init+0x2c>)
	dropped_cnt = 0;
    fe28:	6013      	str	r3, [r2, #0]
	buffered_cnt = 0;
    fe2a:	4a07      	ldr	r2, [pc, #28]	; (fe48 <log_core_init+0x30>)
    fe2c:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    fe2e:	f7ff ff75 	bl	fd1c <log_set_timestamp_func>
}
    fe32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
    fe36:	f7ff bfdf 	b.w	fdf8 <z_log_msg_init>
    fe3a:	bf00      	nop
    fe3c:	2000f123 	.word	0x2000f123
    fe40:	2000e328 	.word	0x2000e328
    fe44:	0002fb17 	.word	0x0002fb17
    fe48:	2000e32c 	.word	0x2000e32c

0000fe4c <z_log_msg_alloc>:
{
    fe4c:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
    fe4e:	2200      	movs	r2, #0
    fe50:	2300      	movs	r3, #0
    fe52:	4801      	ldr	r0, [pc, #4]	; (fe58 <z_log_msg_alloc+0xc>)
    fe54:	f7ff b8ec 	b.w	f030 <mpsc_pbuf_alloc>
    fe58:	2000cd60 	.word	0x2000cd60

0000fe5c <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
    fe5c:	4801      	ldr	r0, [pc, #4]	; (fe64 <z_log_msg_local_claim+0x8>)
    fe5e:	f7ff b9fd 	b.w	f25c <mpsc_pbuf_claim>
    fe62:	bf00      	nop
    fe64:	2000cd60 	.word	0x2000cd60

0000fe68 <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
    fe68:	4b02      	ldr	r3, [pc, #8]	; (fe74 <z_log_msg_free+0xc>)
{
    fe6a:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
    fe6c:	6818      	ldr	r0, [r3, #0]
    fe6e:	f7ff ba7d 	b.w	f36c <mpsc_pbuf_free>
    fe72:	bf00      	nop
    fe74:	2000e320 	.word	0x2000e320

0000fe78 <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
    fe78:	4801      	ldr	r0, [pc, #4]	; (fe80 <z_log_msg_pending+0x8>)
    fe7a:	f01f bbac 	b.w	2f5d6 <mpsc_pbuf_is_pending>
    fe7e:	bf00      	nop
    fe80:	2000cd60 	.word	0x2000cd60

0000fe84 <z_impl_log_process>:
{
    fe84:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
    fe86:	4b2e      	ldr	r3, [pc, #184]	; (ff40 <z_impl_log_process+0xbc>)
    fe88:	7818      	ldrb	r0, [r3, #0]
    fe8a:	2800      	cmp	r0, #0
    fe8c:	d057      	beq.n	ff3e <z_impl_log_process+0xba>
	return z_log_msg_local_claim();
    fe8e:	f7ff ffe5 	bl	fe5c <z_log_msg_local_claim>
	if (msg) {
    fe92:	4605      	mov	r5, r0
    fe94:	b340      	cbz	r0, fee8 <z_impl_log_process+0x64>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    fe96:	4b2b      	ldr	r3, [pc, #172]	; (ff44 <z_impl_log_process+0xc0>)
    fe98:	e8d3 1fef 	ldaex	r1, [r3]
    fe9c:	3901      	subs	r1, #1
    fe9e:	e8c3 1fe2 	stlex	r2, r1, [r3]
    fea2:	2a00      	cmp	r2, #0
    fea4:	d1f8      	bne.n	fe98 <z_impl_log_process+0x14>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    fea6:	4c28      	ldr	r4, [pc, #160]	; (ff48 <z_impl_log_process+0xc4>)
    fea8:	4e28      	ldr	r6, [pc, #160]	; (ff4c <z_impl_log_process+0xc8>)
    feaa:	42b4      	cmp	r4, r6
    feac:	d918      	bls.n	fee0 <z_impl_log_process+0x5c>
    feae:	4928      	ldr	r1, [pc, #160]	; (ff50 <z_impl_log_process+0xcc>)
    feb0:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
    feb4:	4a27      	ldr	r2, [pc, #156]	; (ff54 <z_impl_log_process+0xd0>)
    feb6:	4828      	ldr	r0, [pc, #160]	; (ff58 <z_impl_log_process+0xd4>)
    feb8:	f01f fa84 	bl	2f3c4 <assert_print>
    febc:	4827      	ldr	r0, [pc, #156]	; (ff5c <z_impl_log_process+0xd8>)
    febe:	f01f fa81 	bl	2f3c4 <assert_print>
    fec2:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
    fec6:	4823      	ldr	r0, [pc, #140]	; (ff54 <z_impl_log_process+0xd0>)
    fec8:	f01f fa75 	bl	2f3b6 <assert_post_action>
	return backend->cb->active;
    fecc:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
    fece:	795b      	ldrb	r3, [r3, #5]
    fed0:	b123      	cbz	r3, fedc <z_impl_log_process+0x58>
	backend->api->process(backend, msg);
    fed2:	6823      	ldr	r3, [r4, #0]
    fed4:	4629      	mov	r1, r5
    fed6:	4620      	mov	r0, r4
    fed8:	681b      	ldr	r3, [r3, #0]
    feda:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    fedc:	3410      	adds	r4, #16
    fede:	e7e4      	b.n	feaa <z_impl_log_process+0x26>
    fee0:	d3f4      	bcc.n	fecc <z_impl_log_process+0x48>
		z_log_msg_free(msg);
    fee2:	4628      	mov	r0, r5
    fee4:	f7ff ffc0 	bl	fe68 <z_log_msg_free>
	return dropped_cnt > 0;
    fee8:	4b1d      	ldr	r3, [pc, #116]	; (ff60 <z_impl_log_process+0xdc>)
    feea:	4c1e      	ldr	r4, [pc, #120]	; (ff64 <z_impl_log_process+0xe0>)
		if ((dropped_pend || unordered_pend) &&
    feec:	681b      	ldr	r3, [r3, #0]
    feee:	2b00      	cmp	r3, #0
    fef0:	dd19      	ble.n	ff26 <z_impl_log_process+0xa2>
	return z_impl_k_uptime_ticks();
    fef2:	f026 f9eb 	bl	362cc <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    fef6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    fefa:	fba0 0302 	umull	r0, r3, r0, r2
    fefe:	fb02 3101 	mla	r1, r2, r1, r3
    ff02:	0bc3      	lsrs	r3, r0, #15
    ff04:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    ff08:	e9d4 2000 	ldrd	r2, r0, [r4]
    ff0c:	1a9b      	subs	r3, r3, r2
		if ((dropped_pend || unordered_pend) &&
    ff0e:	f240 32e9 	movw	r2, #1001	; 0x3e9
    ff12:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    ff16:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
    ff1a:	4293      	cmp	r3, r2
    ff1c:	f171 0100 	sbcs.w	r1, r1, #0
    ff20:	d301      	bcc.n	ff26 <z_impl_log_process+0xa2>
				dropped_notify();
    ff22:	f7ff ff39 	bl	fd98 <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
    ff26:	e9d4 3200 	ldrd	r3, r2, [r4]
    ff2a:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
    ff2e:	f142 0200 	adc.w	r2, r2, #0
    ff32:	e9c4 3200 	strd	r3, r2, [r4]
}
    ff36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
    ff3a:	f7ff bf9d 	b.w	fe78 <z_log_msg_pending>
}
    ff3e:	bd70      	pop	{r4, r5, r6, pc}
    ff40:	2000f122 	.word	0x2000f122
    ff44:	2000e32c 	.word	0x2000e32c
    ff48:	00037a68 	.word	0x00037a68
    ff4c:	00037a78 	.word	0x00037a78
    ff50:	0003a16b 	.word	0x0003a16b
    ff54:	0003a11a 	.word	0x0003a11a
    ff58:	00039995 	.word	0x00039995
    ff5c:	0003a18c 	.word	0x0003a18c
    ff60:	2000e328 	.word	0x2000e328
    ff64:	2000d6d0 	.word	0x2000d6d0

0000ff68 <z_impl_log_panic>:
{
    ff68:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
    ff6a:	4d15      	ldr	r5, [pc, #84]	; (ffc0 <z_impl_log_panic+0x58>)
    ff6c:	7829      	ldrb	r1, [r5, #0]
    ff6e:	bb29      	cbnz	r1, ffbc <z_impl_log_panic+0x54>
	(void)z_log_init(true, false);
    ff70:	2001      	movs	r0, #1
    ff72:	f7ff fe57 	bl	fc24 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    ff76:	4c13      	ldr	r4, [pc, #76]	; (ffc4 <z_impl_log_panic+0x5c>)
    ff78:	4e13      	ldr	r6, [pc, #76]	; (ffc8 <z_impl_log_panic+0x60>)
    ff7a:	42b4      	cmp	r4, r6
    ff7c:	d917      	bls.n	ffae <z_impl_log_panic+0x46>
    ff7e:	4913      	ldr	r1, [pc, #76]	; (ffcc <z_impl_log_panic+0x64>)
    ff80:	f240 1387 	movw	r3, #391	; 0x187
    ff84:	4a12      	ldr	r2, [pc, #72]	; (ffd0 <z_impl_log_panic+0x68>)
    ff86:	4813      	ldr	r0, [pc, #76]	; (ffd4 <z_impl_log_panic+0x6c>)
    ff88:	f01f fa1c 	bl	2f3c4 <assert_print>
    ff8c:	4812      	ldr	r0, [pc, #72]	; (ffd8 <z_impl_log_panic+0x70>)
    ff8e:	f01f fa19 	bl	2f3c4 <assert_print>
    ff92:	f240 1187 	movw	r1, #391	; 0x187
    ff96:	480e      	ldr	r0, [pc, #56]	; (ffd0 <z_impl_log_panic+0x68>)
    ff98:	f01f fa0d 	bl	2f3b6 <assert_post_action>
	return backend->cb->active;
    ff9c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    ff9e:	795b      	ldrb	r3, [r3, #5]
    ffa0:	b11b      	cbz	r3, ffaa <z_impl_log_panic+0x42>
	backend->api->panic(backend);
    ffa2:	6823      	ldr	r3, [r4, #0]
    ffa4:	4620      	mov	r0, r4
    ffa6:	689b      	ldr	r3, [r3, #8]
    ffa8:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    ffaa:	3410      	adds	r4, #16
    ffac:	e7e5      	b.n	ff7a <z_impl_log_panic+0x12>
    ffae:	d3f5      	bcc.n	ff9c <z_impl_log_panic+0x34>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
    ffb0:	f7ff ff68 	bl	fe84 <z_impl_log_process>
		while (log_process() == true) {
    ffb4:	2800      	cmp	r0, #0
    ffb6:	d1fb      	bne.n	ffb0 <z_impl_log_panic+0x48>
	panic_mode = true;
    ffb8:	2301      	movs	r3, #1
    ffba:	702b      	strb	r3, [r5, #0]
}
    ffbc:	bd70      	pop	{r4, r5, r6, pc}
    ffbe:	bf00      	nop
    ffc0:	2000f123 	.word	0x2000f123
    ffc4:	00037a68 	.word	0x00037a68
    ffc8:	00037a78 	.word	0x00037a78
    ffcc:	0003a16b 	.word	0x0003a16b
    ffd0:	0003a11a 	.word	0x0003a11a
    ffd4:	00039995 	.word	0x00039995
    ffd8:	0003a18c 	.word	0x0003a18c

0000ffdc <log_process_thread_func>:
{
    ffdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	STRUCT_SECTION_COUNT(log_backend, &cnt);
    ffe0:	4b2f      	ldr	r3, [pc, #188]	; (100a0 <log_process_thread_func+0xc4>)
    ffe2:	4f30      	ldr	r7, [pc, #192]	; (100a4 <log_process_thread_func+0xc8>)
    ffe4:	1afb      	subs	r3, r7, r3
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
    ffe6:	091b      	lsrs	r3, r3, #4
    ffe8:	d10b      	bne.n	10002 <log_process_thread_func+0x26>
    ffea:	492f      	ldr	r1, [pc, #188]	; (100a8 <log_process_thread_func+0xcc>)
    ffec:	f240 335b 	movw	r3, #859	; 0x35b
    fff0:	4a2e      	ldr	r2, [pc, #184]	; (100ac <log_process_thread_func+0xd0>)
    fff2:	482f      	ldr	r0, [pc, #188]	; (100b0 <log_process_thread_func+0xd4>)
    fff4:	f01f f9e6 	bl	2f3c4 <assert_print>
    fff8:	f240 315b 	movw	r1, #859	; 0x35b
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    fffc:	482b      	ldr	r0, [pc, #172]	; (100ac <log_process_thread_func+0xd0>)
    fffe:	f01f f9da 	bl	2f3b6 <assert_post_action>
	uint32_t activate_mask = z_log_init(false, false);
   10002:	2100      	movs	r1, #0
   10004:	4608      	mov	r0, r1
   10006:	f7ff fe0d 	bl	fc24 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   1000a:	4604      	mov	r4, r0
   1000c:	b340      	cbz	r0, 10060 <log_process_thread_func+0x84>
   1000e:	f240 6867 	movw	r8, #1639	; 0x667
   10012:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
   10016:	f01b f9cd 	bl	2b3b4 <z_impl_z_current_get>
	proc_tid = process_tid;
   1001a:	4b26      	ldr	r3, [pc, #152]	; (100b4 <log_process_thread_func+0xd8>)
   1001c:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   1001e:	b130      	cbz	r0, 1002e <log_process_thread_func+0x52>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   10020:	4b25      	ldr	r3, [pc, #148]	; (100b8 <log_process_thread_func+0xdc>)
	    process_tid &&
   10022:	681b      	ldr	r3, [r3, #0]
   10024:	2b09      	cmp	r3, #9
   10026:	dd02      	ble.n	1002e <log_process_thread_func+0x52>
	z_impl_k_sem_give(sem);
   10028:	4824      	ldr	r0, [pc, #144]	; (100bc <log_process_thread_func+0xe0>)
   1002a:	f019 fb3d 	bl	296a8 <z_impl_k_sem_give>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   1002e:	2500      	movs	r5, #0
	return z_impl_k_sem_take(sem, timeout);
   10030:	f8df a088 	ldr.w	sl, [pc, #136]	; 100bc <log_process_thread_func+0xe0>
		if (activate_mask) {
   10034:	b144      	cbz	r4, 10048 <log_process_thread_func+0x6c>
			activate_mask = activate_foreach_backend(activate_mask);
   10036:	4620      	mov	r0, r4
   10038:	f7ff fdc2 	bl	fbc0 <activate_foreach_backend>
			if (!activate_mask) {
   1003c:	4604      	mov	r4, r0
   1003e:	b918      	cbnz	r0, 10048 <log_process_thread_func+0x6c>
				timeout = K_FOREVER;
   10040:	f04f 38ff 	mov.w	r8, #4294967295
   10044:	f04f 39ff 	mov.w	r9, #4294967295
   10048:	f7ff ff1c 	bl	fe84 <z_impl_log_process>
		if (log_process() == false) {
   1004c:	4606      	mov	r6, r0
   1004e:	b928      	cbnz	r0, 1005c <log_process_thread_func+0x80>
			if (processed_any) {
   10050:	b95d      	cbnz	r5, 1006a <log_process_thread_func+0x8e>
   10052:	4642      	mov	r2, r8
   10054:	464b      	mov	r3, r9
   10056:	4650      	mov	r0, sl
   10058:	f019 fb6a 	bl	29730 <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   1005c:	4635      	mov	r5, r6
   1005e:	e7e9      	b.n	10034 <log_process_thread_func+0x58>
   10060:	f04f 38ff 	mov.w	r8, #4294967295
   10064:	f04f 39ff 	mov.w	r9, #4294967295
   10068:	e7d5      	b.n	10016 <log_process_thread_func+0x3a>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1006a:	4d0d      	ldr	r5, [pc, #52]	; (100a0 <log_process_thread_func+0xc4>)
   1006c:	e008      	b.n	10080 <log_process_thread_func+0xa4>
   1006e:	d2f0      	bcs.n	10052 <log_process_thread_func+0x76>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
   10070:	682b      	ldr	r3, [r5, #0]
   10072:	699b      	ldr	r3, [r3, #24]
   10074:	b11b      	cbz	r3, 1007e <log_process_thread_func+0xa2>
		backend->api->notify(backend, event, arg);
   10076:	2200      	movs	r2, #0
   10078:	4628      	mov	r0, r5
   1007a:	4611      	mov	r1, r2
   1007c:	4798      	blx	r3
   1007e:	3510      	adds	r5, #16
   10080:	42bd      	cmp	r5, r7
   10082:	d9f4      	bls.n	1006e <log_process_thread_func+0x92>
   10084:	490e      	ldr	r1, [pc, #56]	; (100c0 <log_process_thread_func+0xe4>)
   10086:	f240 334f 	movw	r3, #847	; 0x34f
   1008a:	4a08      	ldr	r2, [pc, #32]	; (100ac <log_process_thread_func+0xd0>)
   1008c:	4808      	ldr	r0, [pc, #32]	; (100b0 <log_process_thread_func+0xd4>)
   1008e:	f01f f999 	bl	2f3c4 <assert_print>
   10092:	480c      	ldr	r0, [pc, #48]	; (100c4 <log_process_thread_func+0xe8>)
   10094:	f01f f996 	bl	2f3c4 <assert_print>
   10098:	f240 314f 	movw	r1, #847	; 0x34f
   1009c:	e7ae      	b.n	fffc <log_process_thread_func+0x20>
   1009e:	bf00      	nop
   100a0:	00037a68 	.word	0x00037a68
   100a4:	00037a78 	.word	0x00037a78
   100a8:	0003a1ab 	.word	0x0003a1ab
   100ac:	0003a11a 	.word	0x0003a11a
   100b0:	00039995 	.word	0x00039995
   100b4:	2000e324 	.word	0x2000e324
   100b8:	2000e32c 	.word	0x2000e32c
   100bc:	2000cf28 	.word	0x2000cf28
   100c0:	0003a16b 	.word	0x0003a16b
   100c4:	0003a18c 	.word	0x0003a18c

000100c8 <z_log_msg_post_finalize>:
{
   100c8:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
   100ca:	482b      	ldr	r0, [pc, #172]	; (10178 <z_log_msg_post_finalize+0xb0>)
   100cc:	f01f fd25 	bl	2fb1a <atomic_inc>
	if (panic_mode) {
   100d0:	4b2a      	ldr	r3, [pc, #168]	; (1017c <z_log_msg_post_finalize+0xb4>)
   100d2:	781b      	ldrb	r3, [r3, #0]
   100d4:	2b00      	cmp	r3, #0
   100d6:	d034      	beq.n	10142 <z_log_msg_post_finalize+0x7a>
	__asm__ volatile(
   100d8:	f04f 0320 	mov.w	r3, #32
   100dc:	f3ef 8411 	mrs	r4, BASEPRI
   100e0:	f383 8812 	msr	BASEPRI_MAX, r3
   100e4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   100e8:	4825      	ldr	r0, [pc, #148]	; (10180 <z_log_msg_post_finalize+0xb8>)
   100ea:	f019 f825 	bl	29138 <z_spin_lock_valid>
   100ee:	b968      	cbnz	r0, 1010c <z_log_msg_post_finalize+0x44>
   100f0:	2394      	movs	r3, #148	; 0x94
   100f2:	4a24      	ldr	r2, [pc, #144]	; (10184 <z_log_msg_post_finalize+0xbc>)
   100f4:	4924      	ldr	r1, [pc, #144]	; (10188 <z_log_msg_post_finalize+0xc0>)
   100f6:	4825      	ldr	r0, [pc, #148]	; (1018c <z_log_msg_post_finalize+0xc4>)
   100f8:	f01f f964 	bl	2f3c4 <assert_print>
   100fc:	4920      	ldr	r1, [pc, #128]	; (10180 <z_log_msg_post_finalize+0xb8>)
   100fe:	4824      	ldr	r0, [pc, #144]	; (10190 <z_log_msg_post_finalize+0xc8>)
   10100:	f01f f960 	bl	2f3c4 <assert_print>
   10104:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10106:	481f      	ldr	r0, [pc, #124]	; (10184 <z_log_msg_post_finalize+0xbc>)
   10108:	f01f f955 	bl	2f3b6 <assert_post_action>
	z_spin_lock_set_owner(l);
   1010c:	481c      	ldr	r0, [pc, #112]	; (10180 <z_log_msg_post_finalize+0xb8>)
   1010e:	f019 f82f 	bl	29170 <z_spin_lock_set_owner>
   10112:	f7ff feb7 	bl	fe84 <z_impl_log_process>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10116:	481a      	ldr	r0, [pc, #104]	; (10180 <z_log_msg_post_finalize+0xb8>)
   10118:	f019 f81c 	bl	29154 <z_spin_unlock_valid>
   1011c:	b958      	cbnz	r0, 10136 <z_log_msg_post_finalize+0x6e>
   1011e:	23c2      	movs	r3, #194	; 0xc2
   10120:	4a18      	ldr	r2, [pc, #96]	; (10184 <z_log_msg_post_finalize+0xbc>)
   10122:	491c      	ldr	r1, [pc, #112]	; (10194 <z_log_msg_post_finalize+0xcc>)
   10124:	4819      	ldr	r0, [pc, #100]	; (1018c <z_log_msg_post_finalize+0xc4>)
   10126:	f01f f94d 	bl	2f3c4 <assert_print>
   1012a:	4915      	ldr	r1, [pc, #84]	; (10180 <z_log_msg_post_finalize+0xb8>)
   1012c:	481a      	ldr	r0, [pc, #104]	; (10198 <z_log_msg_post_finalize+0xd0>)
   1012e:	f01f f949 	bl	2f3c4 <assert_print>
   10132:	21c2      	movs	r1, #194	; 0xc2
   10134:	e7e7      	b.n	10106 <z_log_msg_post_finalize+0x3e>
	__asm__ volatile(
   10136:	f384 8811 	msr	BASEPRI, r4
   1013a:	f3bf 8f6f 	isb	sy
}
   1013e:	b002      	add	sp, #8
   10140:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
   10142:	4b16      	ldr	r3, [pc, #88]	; (1019c <z_log_msg_post_finalize+0xd4>)
   10144:	681b      	ldr	r3, [r3, #0]
   10146:	2b00      	cmp	r3, #0
   10148:	d0f9      	beq.n	1013e <z_log_msg_post_finalize+0x76>
		if (cnt == 0) {
   1014a:	b950      	cbnz	r0, 10162 <z_log_msg_post_finalize+0x9a>
	z_impl_k_timer_start(timer, duration, period);
   1014c:	2200      	movs	r2, #0
   1014e:	2300      	movs	r3, #0
   10150:	4813      	ldr	r0, [pc, #76]	; (101a0 <z_log_msg_post_finalize+0xd8>)
   10152:	e9cd 2300 	strd	r2, r3, [sp]
   10156:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1015a:	2300      	movs	r3, #0
   1015c:	f01b fdce 	bl	2bcfc <z_impl_k_timer_start>
   10160:	e7ed      	b.n	1013e <z_log_msg_post_finalize+0x76>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   10162:	280a      	cmp	r0, #10
   10164:	d1eb      	bne.n	1013e <z_log_msg_post_finalize+0x76>
	z_impl_k_timer_stop(timer);
   10166:	480e      	ldr	r0, [pc, #56]	; (101a0 <z_log_msg_post_finalize+0xd8>)
   10168:	f026 f8e4 	bl	36334 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   1016c:	480d      	ldr	r0, [pc, #52]	; (101a4 <z_log_msg_post_finalize+0xdc>)
}
   1016e:	b002      	add	sp, #8
   10170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10174:	f019 ba98 	b.w	296a8 <z_impl_k_sem_give>
   10178:	2000e32c 	.word	0x2000e32c
   1017c:	2000f123 	.word	0x2000f123
   10180:	2000e31c 	.word	0x2000e31c
   10184:	00039e53 	.word	0x00039e53
   10188:	00039eac 	.word	0x00039eac
   1018c:	00039995 	.word	0x00039995
   10190:	00039ec1 	.word	0x00039ec1
   10194:	00039e80 	.word	0x00039e80
   10198:	00039e97 	.word	0x00039e97
   1019c:	2000e324 	.word	0x2000e324
   101a0:	2000d6d8 	.word	0x2000d6d8
   101a4:	2000cf28 	.word	0x2000cf28

000101a8 <z_log_msg_commit>:
{
   101a8:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
   101aa:	4b06      	ldr	r3, [pc, #24]	; (101c4 <z_log_msg_commit+0x1c>)
{
   101ac:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   101ae:	681b      	ldr	r3, [r3, #0]
   101b0:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
   101b2:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
   101b4:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
   101b6:	4804      	ldr	r0, [pc, #16]	; (101c8 <z_log_msg_commit+0x20>)
   101b8:	f7fe fffa 	bl	f1b0 <mpsc_pbuf_commit>
}
   101bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
   101c0:	f7ff bf82 	b.w	100c8 <z_log_msg_post_finalize>
   101c4:	2000c804 	.word	0x2000c804
   101c8:	2000cd60 	.word	0x2000cd60

000101cc <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
   101cc:	4a04      	ldr	r2, [pc, #16]	; (101e0 <log_source_name_get+0x14>)
   101ce:	4b05      	ldr	r3, [pc, #20]	; (101e4 <log_source_name_get+0x18>)
   101d0:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
   101d2:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
   101d6:	bf34      	ite	cc
   101d8:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
   101dc:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
   101de:	4770      	bx	lr
   101e0:	00037880 	.word	0x00037880
   101e4:	00037a68 	.word	0x00037a68

000101e8 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   101e8:	4b0e      	ldr	r3, [pc, #56]	; (10224 <log_backend_enable+0x3c>)
{
   101ea:	b510      	push	{r4, lr}
	id += backend - log_backend_get(0);
   101ec:	1ac3      	subs	r3, r0, r3
   101ee:	111b      	asrs	r3, r3, #4
   101f0:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
   101f2:	b2db      	uxtb	r3, r3
	__ASSERT_NO_MSG(backend != NULL);
   101f4:	b948      	cbnz	r0, 1020a <log_backend_enable+0x22>
   101f6:	490c      	ldr	r1, [pc, #48]	; (10228 <log_backend_enable+0x40>)
   101f8:	480c      	ldr	r0, [pc, #48]	; (1022c <log_backend_enable+0x44>)
   101fa:	23de      	movs	r3, #222	; 0xde
   101fc:	4a0c      	ldr	r2, [pc, #48]	; (10230 <log_backend_enable+0x48>)
   101fe:	f01f f8e1 	bl	2f3c4 <assert_print>
   10202:	21de      	movs	r1, #222	; 0xde
   10204:	480a      	ldr	r0, [pc, #40]	; (10230 <log_backend_enable+0x48>)
   10206:	f01f f8d6 	bl	2f3b6 <assert_post_action>
	backend->cb->id = id;
   1020a:	6844      	ldr	r4, [r0, #4]
   1020c:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
   1020e:	6843      	ldr	r3, [r0, #4]
   10210:	719a      	strb	r2, [r3, #6]
	backend->cb->active = true;
   10212:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
   10214:	6843      	ldr	r3, [r0, #4]
   10216:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
   10218:	6843      	ldr	r3, [r0, #4]
   1021a:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
   1021c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_notify_backend_enabled();
   10220:	f7ff bd8c 	b.w	fd3c <z_log_notify_backend_enabled>
   10224:	00037a68 	.word	0x00037a68
   10228:	0003a24b 	.word	0x0003a24b
   1022c:	00039995 	.word	0x00039995
   10230:	0003a213 	.word	0x0003a213

00010234 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
   10234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10238:	b08f      	sub	sp, #60	; 0x3c
   1023a:	f3c1 284a 	ubfx	r8, r1, #9, #11
   1023e:	af04      	add	r7, sp, #16
   10240:	460d      	mov	r5, r1
   10242:	4691      	mov	r9, r2
   10244:	60b8      	str	r0, [r7, #8]
   10246:	607b      	str	r3, [r7, #4]

	if (!BACKENDS_IN_USE()) {
		return;
	}

	struct log_msg_desc out_desc = desc;
   10248:	0d0c      	lsrs	r4, r1, #20
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
   1024a:	f1b8 0f00 	cmp.w	r8, #0
   1024e:	d066      	beq.n	1031e <z_impl_z_log_msg_static_create+0xea>
	struct z_cbprintf_buf_desc buf_desc = {
   10250:	2600      	movs	r6, #0
	return cbprintf_package_convert(in_packaged, in_len,
   10252:	f04f 0b04 	mov.w	fp, #4
   10256:	f04f 0a0a 	mov.w	sl, #10
   1025a:	f107 0314 	add.w	r3, r7, #20
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
   1025e:	f8c7 800c 	str.w	r8, [r7, #12]
	struct z_cbprintf_buf_desc buf_desc = {
   10262:	e9c7 6607 	strd	r6, r6, [r7, #28]
   10266:	627e      	str	r6, [r7, #36]	; 0x24
	return cbprintf_package_convert(in_packaged, in_len,
   10268:	9301      	str	r3, [sp, #4]
   1026a:	f8cd b008 	str.w	fp, [sp, #8]
   1026e:	f8cd a000 	str.w	sl, [sp]
   10272:	f107 031c 	add.w	r3, r7, #28
   10276:	4632      	mov	r2, r6
   10278:	4648      	mov	r0, r9
   1027a:	68f9      	ldr	r1, [r7, #12]
   1027c:	f7fd faaa 	bl	d7d4 <cbprintf_package_convert>
					    NULL, 0, flags,
					    strl, ARRAY_SIZE(strl));

		if (len > Z_LOG_MSG_MAX_PACKAGE) {
   10280:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   10284:	4603      	mov	r3, r0
   10286:	d31c      	bcc.n	102c2 <z_impl_z_log_msg_static_create+0x8e>
			struct cbprintf_package_hdr_ext *pkg =
				(struct cbprintf_package_hdr_ext *)package;

			LOG_WRN("Message (\"%s\") dropped because it exceeds size limitation (%u)",
   10288:	466c      	mov	r4, sp
   1028a:	b08a      	sub	sp, #40	; 0x28
   1028c:	f8d9 1004 	ldr.w	r1, [r9, #4]
   10290:	ab04      	add	r3, sp, #16
   10292:	482b      	ldr	r0, [pc, #172]	; (10340 <z_impl_z_log_msg_static_create+0x10c>)
   10294:	461a      	mov	r2, r3
   10296:	e9c3 0105 	strd	r0, r1, [r3, #20]
   1029a:	f240 71ff 	movw	r1, #2047	; 0x7ff
   1029e:	61d9      	str	r1, [r3, #28]
   102a0:	f44f 7100 	mov.w	r1, #512	; 0x200
   102a4:	8419      	strh	r1, [r3, #32]
   102a6:	4b27      	ldr	r3, [pc, #156]	; (10344 <z_impl_z_log_msg_static_create+0x110>)
   102a8:	f842 3f10 	str.w	r3, [r2, #16]!
   102ac:	f44f 5112 	mov.w	r1, #9344	; 0x2480
   102b0:	4633      	mov	r3, r6
   102b2:	4825      	ldr	r0, [pc, #148]	; (10348 <z_impl_z_log_msg_static_create+0x114>)
   102b4:	f7ff ffbe 	bl	10234 <z_impl_z_log_msg_static_create>
   102b8:	46a5      	mov	sp, r4
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
}
   102ba:	372c      	adds	r7, #44	; 0x2c
   102bc:	46bd      	mov	sp, r7
   102be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		out_desc.package_len = len;
   102c2:	f3c0 080a 	ubfx	r8, r0, #0, #11
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
   102c6:	f104 0017 	add.w	r0, r4, #23
   102ca:	4418      	add	r0, r3
   102cc:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   102d0:	0880      	lsrs	r0, r0, #2
   102d2:	603b      	str	r3, [r7, #0]
   102d4:	f7ff fdba 	bl	fe4c <z_log_msg_alloc>
   102d8:	f368 2553 	bfi	r5, r8, #9, #11
		if (msg) {
   102dc:	4604      	mov	r4, r0
   102de:	b330      	cbz	r0, 1032e <z_impl_z_log_msg_static_create+0xfa>
	struct z_cbprintf_buf_desc buf_desc = {
   102e0:	683b      	ldr	r3, [r7, #0]
						    msg->data, out_desc.package_len,
   102e2:	f100 0110 	add.w	r1, r0, #16
   102e6:	e9c7 3608 	strd	r3, r6, [r7, #32]
	return cbprintf_package_convert(in_packaged, in_len,
   102ea:	f107 0314 	add.w	r3, r7, #20
	struct z_cbprintf_buf_desc buf_desc = {
   102ee:	61f9      	str	r1, [r7, #28]
	return cbprintf_package_convert(in_packaged, in_len,
   102f0:	e9cd a300 	strd	sl, r3, [sp]
   102f4:	f8cd b008 	str.w	fp, [sp, #8]
   102f8:	4648      	mov	r0, r9
   102fa:	4a14      	ldr	r2, [pc, #80]	; (1034c <z_impl_z_log_msg_static_create+0x118>)
   102fc:	68f9      	ldr	r1, [r7, #12]
   102fe:	f107 031c 	add.w	r3, r7, #28
   10302:	f7fd fa67 	bl	d7d4 <cbprintf_package_convert>
			__ASSERT_NO_MSG(len >= 0);
   10306:	2800      	cmp	r0, #0
   10308:	da11      	bge.n	1032e <z_impl_z_log_msg_static_create+0xfa>
   1030a:	4911      	ldr	r1, [pc, #68]	; (10350 <z_impl_z_log_msg_static_create+0x11c>)
   1030c:	4811      	ldr	r0, [pc, #68]	; (10354 <z_impl_z_log_msg_static_create+0x120>)
   1030e:	2356      	movs	r3, #86	; 0x56
   10310:	4a11      	ldr	r2, [pc, #68]	; (10358 <z_impl_z_log_msg_static_create+0x124>)
   10312:	f01f f857 	bl	2f3c4 <assert_print>
   10316:	2156      	movs	r1, #86	; 0x56
   10318:	480f      	ldr	r0, [pc, #60]	; (10358 <z_impl_z_log_msg_static_create+0x124>)
   1031a:	f01f f84c 	bl	2f3b6 <assert_post_action>
   1031e:	f104 0017 	add.w	r0, r4, #23
   10322:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   10326:	0880      	lsrs	r0, r0, #2
   10328:	f7ff fd90 	bl	fe4c <z_log_msg_alloc>
   1032c:	4604      	mov	r4, r0
	z_log_msg_finalize(msg, source, out_desc, data);
   1032e:	f368 2553 	bfi	r5, r8, #9, #11
   10332:	462a      	mov	r2, r5
   10334:	4620      	mov	r0, r4
   10336:	687b      	ldr	r3, [r7, #4]
   10338:	68b9      	ldr	r1, [r7, #8]
   1033a:	f01f fc20 	bl	2fb7e <z_log_msg_finalize>
   1033e:	e7bc      	b.n	102ba <z_impl_z_log_msg_static_create+0x86>
   10340:	0003a26b 	.word	0x0003a26b
   10344:	01000004 	.word	0x01000004
   10348:	00037968 	.word	0x00037968
   1034c:	0002fb53 	.word	0x0002fb53
   10350:	0003a2d7 	.word	0x0003a2d7
   10354:	00039995 	.word	0x00039995
   10358:	0003a2aa 	.word	0x0003a2aa

0001035c <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
   1035c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10360:	b087      	sub	sp, #28
   10362:	4604      	mov	r4, r0
   10364:	e9dd 5a10 	ldrd	r5, sl, [sp, #64]	; 0x40
   10368:	e9dd 6912 	ldrd	r6, r9, [sp, #72]	; 0x48
   1036c:	460f      	mov	r7, r1
   1036e:	4693      	mov	fp, r2
   10370:	4698      	mov	r8, r3
	int plen;

	if (fmt) {
   10372:	b1ae      	cbz	r6, 103a0 <z_impl_z_log_msg_runtime_vcreate+0x44>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
   10374:	2110      	movs	r1, #16
   10376:	4633      	mov	r3, r6
   10378:	4652      	mov	r2, sl
   1037a:	2000      	movs	r0, #0
   1037c:	f8cd 9000 	str.w	r9, [sp]
		va_copy(ap2, ap);
   10380:	f8cd 9014 	str.w	r9, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
   10384:	f7fd f808 	bl	d398 <cbvprintf_package>
					 package_flags, fmt, ap2);
		__ASSERT_NO_MSG(plen >= 0);
   10388:	1e01      	subs	r1, r0, #0
   1038a:	da0a      	bge.n	103a2 <z_impl_z_log_msg_runtime_vcreate+0x46>
   1038c:	491f      	ldr	r1, [pc, #124]	; (1040c <z_impl_z_log_msg_runtime_vcreate+0xb0>)
   1038e:	2375      	movs	r3, #117	; 0x75
   10390:	4a1f      	ldr	r2, [pc, #124]	; (10410 <z_impl_z_log_msg_runtime_vcreate+0xb4>)
   10392:	4820      	ldr	r0, [pc, #128]	; (10414 <z_impl_z_log_msg_runtime_vcreate+0xb8>)
   10394:	f01f f816 	bl	2f3c4 <assert_print>
   10398:	2175      	movs	r1, #117	; 0x75
		pkg = msg->data;
	}

	if (pkg && fmt) {
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
		__ASSERT_NO_MSG(plen >= 0);
   1039a:	481d      	ldr	r0, [pc, #116]	; (10410 <z_impl_z_log_msg_runtime_vcreate+0xb4>)
   1039c:	f01f f80b 	bl	2f3b6 <assert_post_action>
		plen = 0;
   103a0:	4631      	mov	r1, r6
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
   103a2:	f105 0017 	add.w	r0, r5, #23
   103a6:	4408      	add	r0, r1
	struct log_msg_desc desc =
   103a8:	4b1b      	ldr	r3, [pc, #108]	; (10418 <z_impl_z_log_msg_runtime_vcreate+0xbc>)
   103aa:	f004 0407 	and.w	r4, r4, #7
   103ae:	f00b 0b07 	and.w	fp, fp, #7
   103b2:	00e4      	lsls	r4, r4, #3
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
   103b4:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg_desc desc =
   103b8:	ea03 2341 	and.w	r3, r3, r1, lsl #9
   103bc:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
		msg = z_log_msg_alloc(msg_wlen);
   103c0:	0880      	lsrs	r0, r0, #2
	struct log_msg_desc desc =
   103c2:	431c      	orrs	r4, r3
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
   103c4:	9103      	str	r1, [sp, #12]
		msg = z_log_msg_alloc(msg_wlen);
   103c6:	f7ff fd41 	bl	fe4c <z_log_msg_alloc>
	struct log_msg_desc desc =
   103ca:	ea44 5405 	orr.w	r4, r4, r5, lsl #20
			pkg = msg ? msg->data : NULL;
   103ce:	4605      	mov	r5, r0
   103d0:	b190      	cbz	r0, 103f8 <z_impl_z_log_msg_runtime_vcreate+0x9c>
	if (pkg && fmt) {
   103d2:	b18e      	cbz	r6, 103f8 <z_impl_z_log_msg_runtime_vcreate+0x9c>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
   103d4:	4633      	mov	r3, r6
   103d6:	4652      	mov	r2, sl
   103d8:	9903      	ldr	r1, [sp, #12]
   103da:	f8cd 9000 	str.w	r9, [sp]
   103de:	3010      	adds	r0, #16
   103e0:	f7fc ffda 	bl	d398 <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
   103e4:	2800      	cmp	r0, #0
   103e6:	da07      	bge.n	103f8 <z_impl_z_log_msg_runtime_vcreate+0x9c>
   103e8:	4908      	ldr	r1, [pc, #32]	; (1040c <z_impl_z_log_msg_runtime_vcreate+0xb0>)
   103ea:	238f      	movs	r3, #143	; 0x8f
   103ec:	4a08      	ldr	r2, [pc, #32]	; (10410 <z_impl_z_log_msg_runtime_vcreate+0xb4>)
   103ee:	4809      	ldr	r0, [pc, #36]	; (10414 <z_impl_z_log_msg_runtime_vcreate+0xb8>)
   103f0:	f01e ffe8 	bl	2f3c4 <assert_print>
   103f4:	218f      	movs	r1, #143	; 0x8f
   103f6:	e7d0      	b.n	1039a <z_impl_z_log_msg_runtime_vcreate+0x3e>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
   103f8:	4643      	mov	r3, r8
   103fa:	4622      	mov	r2, r4
   103fc:	4639      	mov	r1, r7
   103fe:	4628      	mov	r0, r5
	}
}
   10400:	b007      	add	sp, #28
   10402:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg_finalize(msg, source, desc, data);
   10406:	f01f bbba 	b.w	2fb7e <z_log_msg_finalize>
   1040a:	bf00      	nop
   1040c:	0003a2d6 	.word	0x0003a2d6
   10410:	0003a2aa 	.word	0x0003a2aa
   10414:	00039995 	.word	0x00039995
   10418:	000ffe00 	.word	0x000ffe00

0001041c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   1041c:	b40e      	push	{r1, r2, r3}
   1041e:	b503      	push	{r0, r1, lr}
   10420:	ab03      	add	r3, sp, #12
   10422:	f853 2b04 	ldr.w	r2, [r3], #4
   10426:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
   10428:	4804      	ldr	r0, [pc, #16]	; (1043c <print_formatted+0x20>)
	va_start(args, fmt);
   1042a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   1042c:	f01f fbcd 	bl	2fbca <cbvprintf>
	va_end(args);

	return length;
}
   10430:	b002      	add	sp, #8
   10432:	f85d eb04 	ldr.w	lr, [sp], #4
   10436:	b003      	add	sp, #12
   10438:	4770      	bx	lr
   1043a:	bf00      	nop
   1043c:	0001045d 	.word	0x0001045d

00010440 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   10440:	06ca      	lsls	r2, r1, #27
   10442:	d405      	bmi.n	10450 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   10444:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
   10446:	bf4c      	ite	mi
   10448:	4902      	ldrmi	r1, [pc, #8]	; (10454 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
   1044a:	4903      	ldrpl	r1, [pc, #12]	; (10458 <newline_print+0x18>)
   1044c:	f7ff bfe6 	b.w	1041c <print_formatted>
	}
}
   10450:	4770      	bx	lr
   10452:	bf00      	nop
   10454:	0003a4e9 	.word	0x0003a4e9
   10458:	000403da 	.word	0x000403da

0001045c <out_func>:
{
   1045c:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   1045e:	684b      	ldr	r3, [r1, #4]
{
   10460:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
   10462:	681a      	ldr	r2, [r3, #0]
   10464:	68cb      	ldr	r3, [r1, #12]
{
   10466:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   10468:	429a      	cmp	r2, r3
   1046a:	d102      	bne.n	10472 <out_func+0x16>
		log_output_flush(out_ctx);
   1046c:	4608      	mov	r0, r1
   1046e:	f01f fbb3 	bl	2fbd8 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   10472:	6863      	ldr	r3, [r4, #4]
   10474:	e8d3 2fef 	ldaex	r2, [r3]
   10478:	1c51      	adds	r1, r2, #1
   1047a:	e8c3 1fe0 	stlex	r0, r1, [r3]
   1047e:	2800      	cmp	r0, #0
   10480:	d1f8      	bne.n	10474 <out_func+0x18>
	out_ctx->buf[idx] = (uint8_t)c;
   10482:	68a3      	ldr	r3, [r4, #8]
   10484:	549d      	strb	r5, [r3, r2]
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
   10486:	6863      	ldr	r3, [r4, #4]
   10488:	681a      	ldr	r2, [r3, #0]
   1048a:	68e3      	ldr	r3, [r4, #12]
   1048c:	429a      	cmp	r2, r3
   1048e:	d909      	bls.n	104a4 <out_func+0x48>
   10490:	4905      	ldr	r1, [pc, #20]	; (104a8 <out_func+0x4c>)
   10492:	4806      	ldr	r0, [pc, #24]	; (104ac <out_func+0x50>)
   10494:	237a      	movs	r3, #122	; 0x7a
   10496:	4a06      	ldr	r2, [pc, #24]	; (104b0 <out_func+0x54>)
   10498:	f01e ff94 	bl	2f3c4 <assert_print>
   1049c:	217a      	movs	r1, #122	; 0x7a
   1049e:	4804      	ldr	r0, [pc, #16]	; (104b0 <out_func+0x54>)
   104a0:	f01e ff89 	bl	2f3b6 <assert_post_action>
}
   104a4:	2000      	movs	r0, #0
   104a6:	bd38      	pop	{r3, r4, r5, pc}
   104a8:	0003a30f 	.word	0x0003a30f
   104ac:	00039995 	.word	0x00039995
   104b0:	0003a2e0 	.word	0x0003a2e0

000104b4 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
   104b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   104b8:	b089      	sub	sp, #36	; 0x24
   104ba:	469a      	mov	sl, r3
   104bc:	e9dd 7313 	ldrd	r7, r3, [sp, #76]	; 0x4c
   104c0:	f89d b048 	ldrb.w	fp, [sp, #72]	; 0x48
   104c4:	9305      	str	r3, [sp, #20]
   104c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   104c8:	4604      	mov	r4, r0
   104ca:	460d      	mov	r5, r1
   104cc:	9e16      	ldr	r6, [sp, #88]	; 0x58
   104ce:	9206      	str	r2, [sp, #24]
   104d0:	9304      	str	r3, [sp, #16]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
   104d2:	f1bb 0f00 	cmp.w	fp, #0
   104d6:	f000 8085 	beq.w	105e4 <log_output_process+0x130>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   104da:	f006 0308 	and.w	r3, r6, #8
   104de:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
   104e0:	f01f fb35 	bl	2fb4e <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   104e4:	f006 0902 	and.w	r9, r6, #2
	if (tag) {
   104e8:	4602      	mov	r2, r0
   104ea:	2800      	cmp	r0, #0
   104ec:	d049      	beq.n	10582 <log_output_process+0xce>
		length += print_formatted(output, "%s ", tag);
   104ee:	4620      	mov	r0, r4
   104f0:	498c      	ldr	r1, [pc, #560]	; (10724 <log_output_process+0x270>)
   104f2:	f7ff ff93 	bl	1041c <print_formatted>
   104f6:	4680      	mov	r8, r0
	if (stamp) {
   104f8:	f1b9 0f00 	cmp.w	r9, #0
   104fc:	d008      	beq.n	10510 <log_output_process+0x5c>
	if (!format) {
   104fe:	f016 0f44 	tst.w	r6, #68	; 0x44
   10502:	d140      	bne.n	10586 <log_output_process+0xd2>
		length = print_formatted(output, "[%08lu] ", timestamp);
   10504:	462a      	mov	r2, r5
   10506:	4620      	mov	r0, r4
   10508:	4987      	ldr	r1, [pc, #540]	; (10728 <log_output_process+0x274>)
   1050a:	f7ff ff87 	bl	1041c <print_formatted>
		length += timestamp_print(output, flags, timestamp);
   1050e:	4480      	add	r8, r0
	if (color) {
   10510:	f006 0301 	and.w	r3, r6, #1
   10514:	b153      	cbz	r3, 1052c <log_output_process+0x78>
		const char *log_color = start && (colors[level] != NULL) ?
   10516:	4b85      	ldr	r3, [pc, #532]	; (1072c <log_output_process+0x278>)
		print_formatted(output, "%s", log_color);
   10518:	4620      	mov	r0, r4
		const char *log_color = start && (colors[level] != NULL) ?
   1051a:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
		print_formatted(output, "%s", log_color);
   1051e:	4b84      	ldr	r3, [pc, #528]	; (10730 <log_output_process+0x27c>)
   10520:	4984      	ldr	r1, [pc, #528]	; (10734 <log_output_process+0x280>)
   10522:	2a00      	cmp	r2, #0
   10524:	bf08      	it	eq
   10526:	461a      	moveq	r2, r3
   10528:	f7ff ff78 	bl	1041c <print_formatted>
	if (level_on) {
   1052c:	f006 0308 	and.w	r3, r6, #8
   10530:	2b00      	cmp	r3, #0
   10532:	d054      	beq.n	105de <log_output_process+0x12a>
		total += print_formatted(output, "<%s> ", severity[level]);
   10534:	4b80      	ldr	r3, [pc, #512]	; (10738 <log_output_process+0x284>)
   10536:	4620      	mov	r0, r4
   10538:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
   1053c:	497f      	ldr	r1, [pc, #508]	; (1073c <log_output_process+0x288>)
   1053e:	f7ff ff6d 	bl	1041c <print_formatted>
   10542:	4605      	mov	r5, r0
	if (domain) {
   10544:	9b06      	ldr	r3, [sp, #24]
   10546:	b12b      	cbz	r3, 10554 <log_output_process+0xa0>
		total += print_formatted(output, "%s/", domain);
   10548:	461a      	mov	r2, r3
   1054a:	4620      	mov	r0, r4
   1054c:	497c      	ldr	r1, [pc, #496]	; (10740 <log_output_process+0x28c>)
   1054e:	f7ff ff65 	bl	1041c <print_formatted>
   10552:	4405      	add	r5, r0
	if (source) {
   10554:	f1ba 0f00 	cmp.w	sl, #0
   10558:	d005      	beq.n	10566 <log_output_process+0xb2>
		total += print_formatted(output,
   1055a:	4652      	mov	r2, sl
   1055c:	4620      	mov	r0, r4
   1055e:	4979      	ldr	r1, [pc, #484]	; (10744 <log_output_process+0x290>)
   10560:	f7ff ff5c 	bl	1041c <print_formatted>
   10564:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
   10566:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
   10568:	2f00      	cmp	r7, #0
   1056a:	d149      	bne.n	10600 <log_output_process+0x14c>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
   1056c:	9b04      	ldr	r3, [sp, #16]
   1056e:	2b00      	cmp	r3, #0
   10570:	d160      	bne.n	10634 <log_output_process+0x180>
	if (color) {
   10572:	07f3      	lsls	r3, r6, #31
   10574:	f100 80cf 	bmi.w	10716 <log_output_process+0x262>
	newline_print(output, flags);
   10578:	4631      	mov	r1, r6
   1057a:	4620      	mov	r0, r4
   1057c:	f7ff ff60 	bl	10440 <newline_print>
}
   10580:	e0c3      	b.n	1070a <log_output_process+0x256>
	uint32_t length = 0U;
   10582:	4680      	mov	r8, r0
   10584:	e7b8      	b.n	104f8 <log_output_process+0x44>
	} else if (freq != 0U) {
   10586:	4b70      	ldr	r3, [pc, #448]	; (10748 <log_output_process+0x294>)
   10588:	6818      	ldr	r0, [r3, #0]
   1058a:	2800      	cmp	r0, #0
   1058c:	d0bf      	beq.n	1050e <log_output_process+0x5a>
		timestamp /= timestamp_div;
   1058e:	4b6f      	ldr	r3, [pc, #444]	; (1074c <log_output_process+0x298>)
		ms = (remainder * 1000U) / freq;
   10590:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
		timestamp /= timestamp_div;
   10594:	681b      	ldr	r3, [r3, #0]
   10596:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   1059a:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
   1059e:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
   105a2:	fb00 5513 	mls	r5, r0, r3, r5
		ms = (remainder * 1000U) / freq;
   105a6:	fb09 f505 	mul.w	r5, r9, r5
   105aa:	fbb3 f2f1 	udiv	r2, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   105ae:	fbb5 fef0 	udiv	lr, r5, r0
		mins = seconds / 60U;
   105b2:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
   105b6:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   105ba:	fb00 551e 	mls	r5, r0, lr, r5
		mins = seconds / 60U;
   105be:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   105c2:	fb09 f505 	mul.w	r5, r9, r5
   105c6:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
   105ca:	fb0c 1113 	mls	r1, ip, r3, r1
   105ce:	4620      	mov	r0, r4
   105d0:	9100      	str	r1, [sp, #0]
   105d2:	e9cd e501 	strd	lr, r5, [sp, #4]
   105d6:	495e      	ldr	r1, [pc, #376]	; (10750 <log_output_process+0x29c>)
   105d8:	f7ff ff20 	bl	1041c <print_formatted>
   105dc:	e797      	b.n	1050e <log_output_process+0x5a>
	int total = 0;
   105de:	f006 0508 	and.w	r5, r6, #8
   105e2:	e7af      	b.n	10544 <log_output_process+0x90>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   105e4:	f1ba 0f01 	cmp.w	sl, #1
   105e8:	d106      	bne.n	105f8 <log_output_process+0x144>
	if (package) {
   105ea:	b9ef      	cbnz	r7, 10628 <log_output_process+0x174>
	if (data_len) {
   105ec:	9b04      	ldr	r3, [sp, #16]
   105ee:	2b00      	cmp	r3, #0
   105f0:	f000 808b 	beq.w	1070a <log_output_process+0x256>
		prefix_offset = 0;
   105f4:	2500      	movs	r5, #0
   105f6:	e01d      	b.n	10634 <log_output_process+0x180>
	if (package) {
   105f8:	2f00      	cmp	r7, #0
   105fa:	d0f7      	beq.n	105ec <log_output_process+0x138>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   105fc:	4855      	ldr	r0, [pc, #340]	; (10754 <log_output_process+0x2a0>)
   105fe:	e014      	b.n	1062a <log_output_process+0x176>
		cb = out_func;
   10600:	4855      	ldr	r0, [pc, #340]	; (10758 <log_output_process+0x2a4>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
   10602:	463b      	mov	r3, r7
   10604:	4622      	mov	r2, r4
   10606:	4955      	ldr	r1, [pc, #340]	; (1075c <log_output_process+0x2a8>)
   10608:	f01e fc0a 	bl	2ee20 <cbpprintf_external>
		__ASSERT_NO_MSG(err >= 0);
   1060c:	2800      	cmp	r0, #0
   1060e:	da0e      	bge.n	1062e <log_output_process+0x17a>
   10610:	4953      	ldr	r1, [pc, #332]	; (10760 <log_output_process+0x2ac>)
   10612:	4854      	ldr	r0, [pc, #336]	; (10764 <log_output_process+0x2b0>)
   10614:	f44f 7302 	mov.w	r3, #520	; 0x208
   10618:	4a53      	ldr	r2, [pc, #332]	; (10768 <log_output_process+0x2b4>)
   1061a:	f01e fed3 	bl	2f3c4 <assert_print>
   1061e:	f44f 7102 	mov.w	r1, #520	; 0x208
   10622:	4851      	ldr	r0, [pc, #324]	; (10768 <log_output_process+0x2b4>)
   10624:	f01e fec7 	bl	2f3b6 <assert_post_action>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   10628:	484b      	ldr	r0, [pc, #300]	; (10758 <log_output_process+0x2a4>)
		prefix_offset = 0;
   1062a:	465d      	mov	r5, fp
   1062c:	e7e9      	b.n	10602 <log_output_process+0x14e>
	if (data_len) {
   1062e:	9b04      	ldr	r3, [sp, #16]
   10630:	2b00      	cmp	r3, #0
   10632:	d066      	beq.n	10702 <log_output_process+0x24e>
		print_formatted(output, " ");
   10634:	f8df 8134 	ldr.w	r8, [pc, #308]	; 1076c <log_output_process+0x2b8>
			print_formatted(output, "%02x ", data[i]);
   10638:	f8df 9134 	ldr.w	r9, [pc, #308]	; 10770 <log_output_process+0x2bc>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   1063c:	9f04      	ldr	r7, [sp, #16]
	newline_print(output, flags);
   1063e:	4631      	mov	r1, r6
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   10640:	2f10      	cmp	r7, #16
	newline_print(output, flags);
   10642:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   10644:	bf28      	it	cs
   10646:	2710      	movcs	r7, #16
	for (int i = 0; i < prefix_offset; i++) {
   10648:	f04f 0a00 	mov.w	sl, #0
	newline_print(output, flags);
   1064c:	f7ff fef8 	bl	10440 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
   10650:	4555      	cmp	r5, sl
   10652:	dc43      	bgt.n	106dc <log_output_process+0x228>
			print_formatted(output, "%02x ", data[i]);
   10654:	9b05      	ldr	r3, [sp, #20]
   10656:	4649      	mov	r1, r9
   10658:	4620      	mov	r0, r4
   1065a:	781a      	ldrb	r2, [r3, #0]
   1065c:	f7ff fede 	bl	1041c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   10660:	f04f 0a01 	mov.w	sl, #1
		if (i > 0 && !(i % 8)) {
   10664:	f01a 0f07 	tst.w	sl, #7
   10668:	d103      	bne.n	10672 <log_output_process+0x1be>
			print_formatted(output, " ");
   1066a:	4641      	mov	r1, r8
   1066c:	4620      	mov	r0, r4
   1066e:	f7ff fed5 	bl	1041c <print_formatted>
		if (i < length) {
   10672:	4557      	cmp	r7, sl
   10674:	d939      	bls.n	106ea <log_output_process+0x236>
			print_formatted(output, "%02x ", data[i]);
   10676:	9b05      	ldr	r3, [sp, #20]
   10678:	4649      	mov	r1, r9
   1067a:	4620      	mov	r0, r4
   1067c:	f813 200a 	ldrb.w	r2, [r3, sl]
   10680:	f7ff fecc 	bl	1041c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   10684:	f10a 0a01 	add.w	sl, sl, #1
   10688:	f1ba 0f10 	cmp.w	sl, #16
   1068c:	d1ea      	bne.n	10664 <log_output_process+0x1b0>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1068e:	f04f 0a00 	mov.w	sl, #0
	print_formatted(output, "|");
   10692:	4620      	mov	r0, r4
   10694:	4937      	ldr	r1, [pc, #220]	; (10774 <log_output_process+0x2c0>)
   10696:	f7ff fec1 	bl	1041c <print_formatted>
		if (i < length) {
   1069a:	4652      	mov	r2, sl
			unsigned char c = (unsigned char)data[i];
   1069c:	9b05      	ldr	r3, [sp, #20]
			print_formatted(output, "%c",
   1069e:	4620      	mov	r0, r4
			unsigned char c = (unsigned char)data[i];
   106a0:	5c9a      	ldrb	r2, [r3, r2]
			print_formatted(output, "%c",
   106a2:	4b35      	ldr	r3, [pc, #212]	; (10778 <log_output_process+0x2c4>)
   106a4:	5c99      	ldrb	r1, [r3, r2]
   106a6:	f011 0f97 	tst.w	r1, #151	; 0x97
   106aa:	bf08      	it	eq
   106ac:	222e      	moveq	r2, #46	; 0x2e
   106ae:	4933      	ldr	r1, [pc, #204]	; (1077c <log_output_process+0x2c8>)
   106b0:	f7ff feb4 	bl	1041c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   106b4:	f10a 0a01 	add.w	sl, sl, #1
   106b8:	f1ba 0f10 	cmp.w	sl, #16
   106bc:	d01a      	beq.n	106f4 <log_output_process+0x240>
		if (i > 0 && !(i % 8)) {
   106be:	f01a 0f07 	tst.w	sl, #7
   106c2:	d103      	bne.n	106cc <log_output_process+0x218>
			print_formatted(output, " ");
   106c4:	4641      	mov	r1, r8
   106c6:	4620      	mov	r0, r4
   106c8:	f7ff fea8 	bl	1041c <print_formatted>
		if (i < length) {
   106cc:	4557      	cmp	r7, sl
   106ce:	4652      	mov	r2, sl
   106d0:	d8e4      	bhi.n	1069c <log_output_process+0x1e8>
			print_formatted(output, " ");
   106d2:	4641      	mov	r1, r8
   106d4:	4620      	mov	r0, r4
   106d6:	f7ff fea1 	bl	1041c <print_formatted>
   106da:	e7eb      	b.n	106b4 <log_output_process+0x200>
		print_formatted(output, " ");
   106dc:	4641      	mov	r1, r8
   106de:	4620      	mov	r0, r4
   106e0:	f7ff fe9c 	bl	1041c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   106e4:	f10a 0a01 	add.w	sl, sl, #1
   106e8:	e7b2      	b.n	10650 <log_output_process+0x19c>
			print_formatted(output, "   ");
   106ea:	4620      	mov	r0, r4
   106ec:	4924      	ldr	r1, [pc, #144]	; (10780 <log_output_process+0x2cc>)
   106ee:	f7ff fe95 	bl	1041c <print_formatted>
   106f2:	e7c7      	b.n	10684 <log_output_process+0x1d0>
		data += length;
   106f4:	9b05      	ldr	r3, [sp, #20]
   106f6:	443b      	add	r3, r7
   106f8:	9305      	str	r3, [sp, #20]
	} while (len);
   106fa:	9b04      	ldr	r3, [sp, #16]
   106fc:	1bdb      	subs	r3, r3, r7
   106fe:	9304      	str	r3, [sp, #16]
   10700:	d19c      	bne.n	1063c <log_output_process+0x188>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
   10702:	f1bb 0f00 	cmp.w	fp, #0
   10706:	f47f af34 	bne.w	10572 <log_output_process+0xbe>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
   1070a:	4620      	mov	r0, r4
}
   1070c:	b009      	add	sp, #36	; 0x24
   1070e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
   10712:	f01f ba61 	b.w	2fbd8 <log_output_flush>
		print_formatted(output, "%s", log_color);
   10716:	4620      	mov	r0, r4
   10718:	4a05      	ldr	r2, [pc, #20]	; (10730 <log_output_process+0x27c>)
   1071a:	4906      	ldr	r1, [pc, #24]	; (10734 <log_output_process+0x280>)
   1071c:	f7ff fe7e 	bl	1041c <print_formatted>
}
   10720:	e72a      	b.n	10578 <log_output_process+0xc4>
   10722:	bf00      	nop
   10724:	0003a344 	.word	0x0003a344
   10728:	0003a348 	.word	0x0003a348
   1072c:	00037d94 	.word	0x00037d94
   10730:	0003a33f 	.word	0x0003a33f
   10734:	0003f578 	.word	0x0003f578
   10738:	00037da8 	.word	0x00037da8
   1073c:	0003a36d 	.word	0x0003a36d
   10740:	0003a373 	.word	0x0003a373
   10744:	0003a377 	.word	0x0003a377
   10748:	2000e338 	.word	0x2000e338
   1074c:	2000e334 	.word	0x2000e334
   10750:	0003a351 	.word	0x0003a351
   10754:	0002fbf3 	.word	0x0002fbf3
   10758:	0001045d 	.word	0x0001045d
   1075c:	0002fbcb 	.word	0x0002fbcb
   10760:	0003a37c 	.word	0x0003a37c
   10764:	00039995 	.word	0x00039995
   10768:	0003a2e0 	.word	0x0003a2e0
   1076c:	0003a38d 	.word	0x0003a38d
   10770:	0003a385 	.word	0x0003a385
   10774:	0003a38f 	.word	0x0003a38f
   10778:	00041f02 	.word	0x00041f02
   1077c:	0003f6fa 	.word	0x0003f6fa
   10780:	0003a38b 	.word	0x0003a38b

00010784 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
   10784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
   10788:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
   1078a:	684b      	ldr	r3, [r1, #4]
   1078c:	4605      	mov	r5, r0
   1078e:	460c      	mov	r4, r1
   10790:	4690      	mov	r8, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
   10792:	688e      	ldr	r6, [r1, #8]
   10794:	b086      	sub	sp, #24
	return msg->hdr.desc.level;
   10796:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
   1079a:	b15b      	cbz	r3, 107b4 <log_output_msg_process+0x30>
   1079c:	4a13      	ldr	r2, [pc, #76]	; (107ec <log_output_msg_process+0x68>)
   1079e:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
   107a0:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   107a4:	2900      	cmp	r1, #0
   107a6:	db1f      	blt.n	107e8 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
   107a8:	7820      	ldrb	r0, [r4, #0]
   107aa:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   107ae:	f7ff fd0d 	bl	101cc <log_source_name_get>
   107b2:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
   107b4:	4621      	mov	r1, r4
   107b6:	f851 2b10 	ldr.w	r2, [r1], #16
	*len = msg->hdr.desc.data_len;
   107ba:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
   107bc:	f3c2 224a 	ubfx	r2, r2, #9, #11
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
   107c0:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
   107c2:	eb01 0402 	add.w	r4, r1, r2
   107c6:	bf08      	it	eq
   107c8:	2100      	moveq	r1, #0
	*len = msg->hdr.desc.data_len;
   107ca:	f3c0 100b 	ubfx	r0, r0, #4, #12
   107ce:	e9cd 0803 	strd	r0, r8, [sp, #12]
   107d2:	e9cd 1401 	strd	r1, r4, [sp, #4]
   107d6:	2200      	movs	r2, #0
   107d8:	4631      	mov	r1, r6
   107da:	4628      	mov	r0, r5
   107dc:	9700      	str	r7, [sp, #0]
   107de:	f7ff fe69 	bl	104b4 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
   107e2:	b006      	add	sp, #24
   107e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   107e8:	2300      	movs	r3, #0
   107ea:	e7e3      	b.n	107b4 <log_output_msg_process+0x30>
   107ec:	00037880 	.word	0x00037880

000107f0 <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   107f0:	f242 730f 	movw	r3, #9999	; 0x270f
{
   107f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   107f6:	428b      	cmp	r3, r1
   107f8:	bf28      	it	cs
   107fa:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
   107fc:	6805      	ldr	r5, [r0, #0]
{
   107fe:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   10800:	2105      	movs	r1, #5
   10802:	4668      	mov	r0, sp
   10804:	4a0d      	ldr	r2, [pc, #52]	; (1083c <log_output_dropped_process+0x4c>)
   10806:	f01e fc0d 	bl	2f024 <snprintk>
   1080a:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   1080c:	6863      	ldr	r3, [r4, #4]
   1080e:	4628      	mov	r0, r5
   10810:	220b      	movs	r2, #11
   10812:	685b      	ldr	r3, [r3, #4]
   10814:	490a      	ldr	r1, [pc, #40]	; (10840 <log_output_dropped_process+0x50>)
   10816:	f01f f9cb 	bl	2fbb0 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
   1081a:	6863      	ldr	r3, [r4, #4]
   1081c:	4632      	mov	r2, r6
   1081e:	4669      	mov	r1, sp
   10820:	4628      	mov	r0, r5
   10822:	685b      	ldr	r3, [r3, #4]
   10824:	f01f f9c4 	bl	2fbb0 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   10828:	6863      	ldr	r3, [r4, #4]
   1082a:	221b      	movs	r2, #27
   1082c:	4628      	mov	r0, r5
   1082e:	685b      	ldr	r3, [r3, #4]
   10830:	4904      	ldr	r1, [pc, #16]	; (10844 <log_output_dropped_process+0x54>)
   10832:	f01f f9bd 	bl	2fbb0 <buffer_write>
		     output->control_block->ctx);
}
   10836:	b002      	add	sp, #8
   10838:	bd70      	pop	{r4, r5, r6, pc}
   1083a:	bf00      	nop
   1083c:	00038efe 	.word	0x00038efe
   10840:	0003a3ad 	.word	0x0003a3ad
   10844:	0003a391 	.word	0x0003a391

00010848 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   10848:	2100      	movs	r1, #0
   1084a:	2301      	movs	r3, #1
   1084c:	4a06      	ldr	r2, [pc, #24]	; (10868 <log_output_timestamp_freq_set+0x20>)
   1084e:	4290      	cmp	r0, r2
   10850:	d806      	bhi.n	10860 <log_output_timestamp_freq_set+0x18>
   10852:	4a06      	ldr	r2, [pc, #24]	; (1086c <log_output_timestamp_freq_set+0x24>)
   10854:	b901      	cbnz	r1, 10858 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
   10856:	2301      	movs	r3, #1
   10858:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   1085a:	4b05      	ldr	r3, [pc, #20]	; (10870 <log_output_timestamp_freq_set+0x28>)
   1085c:	6018      	str	r0, [r3, #0]
}
   1085e:	4770      	bx	lr
		timestamp_div *= 2U;
   10860:	2101      	movs	r1, #1
		frequency /= 2U;
   10862:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   10864:	005b      	lsls	r3, r3, #1
   10866:	e7f2      	b.n	1084e <log_output_timestamp_freq_set+0x6>
   10868:	000f4240 	.word	0x000f4240
   1086c:	2000e334 	.word	0x2000e334
   10870:	2000e338 	.word	0x2000e338

00010874 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
   10874:	4b01      	ldr	r3, [pc, #4]	; (1087c <format_set+0x8>)
	return 0;
}
   10876:	2000      	movs	r0, #0
	log_format_current = log_type;
   10878:	6019      	str	r1, [r3, #0]
}
   1087a:	4770      	bx	lr
   1087c:	2000e350 	.word	0x2000e350

00010880 <panic>:
	if ((rc == 0) && (pm_state == PM_DEVICE_STATE_SUSPENDED)) {
		pm_device_action_run(uart_dev, PM_DEVICE_ACTION_RESUME);
	}
#endif /* CONFIG_PM_DEVICE */

	in_panic = true;
   10880:	2201      	movs	r2, #1
   10882:	4b02      	ldr	r3, [pc, #8]	; (1088c <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   10884:	4802      	ldr	r0, [pc, #8]	; (10890 <panic+0x10>)
   10886:	701a      	strb	r2, [r3, #0]
   10888:	f01f b9a6 	b.w	2fbd8 <log_output_flush>
   1088c:	2000f125 	.word	0x2000f125
   10890:	00037dd8 	.word	0x00037dd8

00010894 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   10894:	4801      	ldr	r0, [pc, #4]	; (1089c <dropped+0x8>)
   10896:	f7ff bfab 	b.w	107f0 <log_output_dropped_process>
   1089a:	bf00      	nop
   1089c:	00037dd8 	.word	0x00037dd8

000108a0 <process>:
{
   108a0:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   108a2:	4b06      	ldr	r3, [pc, #24]	; (108bc <process+0x1c>)
{
   108a4:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   108a6:	6818      	ldr	r0, [r3, #0]
   108a8:	f7ff fa32 	bl	fd10 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
   108ac:	4621      	mov	r1, r4
}
   108ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   108b2:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
   108b4:	220f      	movs	r2, #15
   108b6:	4802      	ldr	r0, [pc, #8]	; (108c0 <process+0x20>)
   108b8:	4718      	bx	r3
   108ba:	bf00      	nop
   108bc:	2000e350 	.word	0x2000e350
   108c0:	00037dd8 	.word	0x00037dd8

000108c4 <char_out>:
{
   108c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   108c6:	460d      	mov	r5, r1
   108c8:	4604      	mov	r4, r0
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   108ca:	4f06      	ldr	r7, [pc, #24]	; (108e4 <char_out+0x20>)
   108cc:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
   108ce:	42b4      	cmp	r4, r6
   108d0:	d101      	bne.n	108d6 <char_out+0x12>
}
   108d2:	4628      	mov	r0, r5
   108d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
   108d6:	f814 1b01 	ldrb.w	r1, [r4], #1
   108da:	68bb      	ldr	r3, [r7, #8]
   108dc:	4801      	ldr	r0, [pc, #4]	; (108e4 <char_out+0x20>)
   108de:	69db      	ldr	r3, [r3, #28]
   108e0:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
   108e2:	e7f4      	b.n	108ce <char_out+0xa>
   108e4:	0003757c 	.word	0x0003757c

000108e8 <log_backend_uart_init>:
{
   108e8:	b508      	push	{r3, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   108ea:	4807      	ldr	r0, [pc, #28]	; (10908 <log_backend_uart_init+0x20>)
   108ec:	f025 fbb4 	bl	36058 <z_device_is_ready>
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
   108f0:	b948      	cbnz	r0, 10906 <log_backend_uart_init+0x1e>
   108f2:	4906      	ldr	r1, [pc, #24]	; (1090c <log_backend_uart_init+0x24>)
   108f4:	4806      	ldr	r0, [pc, #24]	; (10910 <log_backend_uart_init+0x28>)
   108f6:	237f      	movs	r3, #127	; 0x7f
   108f8:	4a06      	ldr	r2, [pc, #24]	; (10914 <log_backend_uart_init+0x2c>)
   108fa:	f01e fd63 	bl	2f3c4 <assert_print>
   108fe:	217f      	movs	r1, #127	; 0x7f
   10900:	4804      	ldr	r0, [pc, #16]	; (10914 <log_backend_uart_init+0x2c>)
   10902:	f01e fd58 	bl	2f3b6 <assert_post_action>
}
   10906:	bd08      	pop	{r3, pc}
   10908:	0003757c 	.word	0x0003757c
   1090c:	0003a417 	.word	0x0003a417
   10910:	00039995 	.word	0x00039995
   10914:	0003a3d9 	.word	0x0003a3d9

00010918 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   10918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1091c:	4605      	mov	r5, r0
	__asm__ volatile(
   1091e:	f04f 0320 	mov.w	r3, #32
   10922:	f3ef 8611 	mrs	r6, BASEPRI
   10926:	f383 8812 	msr	BASEPRI_MAX, r3
   1092a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1092e:	4820      	ldr	r0, [pc, #128]	; (109b0 <pm_state_notify+0x98>)
   10930:	f018 fc02 	bl	29138 <z_spin_lock_valid>
   10934:	b968      	cbnz	r0, 10952 <pm_state_notify+0x3a>
   10936:	2394      	movs	r3, #148	; 0x94
   10938:	4a1e      	ldr	r2, [pc, #120]	; (109b4 <pm_state_notify+0x9c>)
   1093a:	491f      	ldr	r1, [pc, #124]	; (109b8 <pm_state_notify+0xa0>)
   1093c:	481f      	ldr	r0, [pc, #124]	; (109bc <pm_state_notify+0xa4>)
   1093e:	f01e fd41 	bl	2f3c4 <assert_print>
   10942:	491b      	ldr	r1, [pc, #108]	; (109b0 <pm_state_notify+0x98>)
   10944:	481e      	ldr	r0, [pc, #120]	; (109c0 <pm_state_notify+0xa8>)
   10946:	f01e fd3d 	bl	2f3c4 <assert_print>
   1094a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1094c:	4819      	ldr	r0, [pc, #100]	; (109b4 <pm_state_notify+0x9c>)
   1094e:	f01e fd32 	bl	2f3b6 <assert_post_action>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   10952:	f04f 090c 	mov.w	r9, #12
	z_spin_lock_set_owner(l);
   10956:	4816      	ldr	r0, [pc, #88]	; (109b0 <pm_state_notify+0x98>)
   10958:	f018 fc0a 	bl	29170 <z_spin_lock_set_owner>
	return list->head;
   1095c:	4b19      	ldr	r3, [pc, #100]	; (109c4 <pm_state_notify+0xac>)
   1095e:	4f1a      	ldr	r7, [pc, #104]	; (109c8 <pm_state_notify+0xb0>)
   10960:	681c      	ldr	r4, [r3, #0]
   10962:	f8df 8068 	ldr.w	r8, [pc, #104]	; 109cc <pm_state_notify+0xb4>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   10966:	b97c      	cbnz	r4, 10988 <pm_state_notify+0x70>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10968:	4811      	ldr	r0, [pc, #68]	; (109b0 <pm_state_notify+0x98>)
   1096a:	f018 fbf3 	bl	29154 <z_spin_unlock_valid>
   1096e:	b9c8      	cbnz	r0, 109a4 <pm_state_notify+0x8c>
   10970:	23c2      	movs	r3, #194	; 0xc2
   10972:	4a10      	ldr	r2, [pc, #64]	; (109b4 <pm_state_notify+0x9c>)
   10974:	4916      	ldr	r1, [pc, #88]	; (109d0 <pm_state_notify+0xb8>)
   10976:	4811      	ldr	r0, [pc, #68]	; (109bc <pm_state_notify+0xa4>)
   10978:	f01e fd24 	bl	2f3c4 <assert_print>
   1097c:	490c      	ldr	r1, [pc, #48]	; (109b0 <pm_state_notify+0x98>)
   1097e:	4815      	ldr	r0, [pc, #84]	; (109d4 <pm_state_notify+0xbc>)
   10980:	f01e fd20 	bl	2f3c4 <assert_print>
   10984:	21c2      	movs	r1, #194	; 0xc2
   10986:	e7e1      	b.n	1094c <pm_state_notify+0x34>
			callback = notifier->state_exit;
   10988:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
   1098c:	2d00      	cmp	r5, #0
   1098e:	bf18      	it	ne
   10990:	4613      	movne	r3, r2
		if (callback) {
   10992:	b12b      	cbz	r3, 109a0 <pm_state_notify+0x88>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   10994:	f898 2010 	ldrb.w	r2, [r8, #16]
   10998:	fb09 f202 	mul.w	r2, r9, r2
   1099c:	5cb8      	ldrb	r0, [r7, r2]
   1099e:	4798      	blx	r3
	return node->next;
   109a0:	6824      	ldr	r4, [r4, #0]
   109a2:	e7e0      	b.n	10966 <pm_state_notify+0x4e>
	__asm__ volatile(
   109a4:	f386 8811 	msr	BASEPRI, r6
   109a8:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   109ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   109b0:	2000e354 	.word	0x2000e354
   109b4:	00039e53 	.word	0x00039e53
   109b8:	00039eac 	.word	0x00039eac
   109bc:	00039995 	.word	0x00039995
   109c0:	00039ec1 	.word	0x00039ec1
   109c4:	2000e374 	.word	0x2000e374
   109c8:	2000e368 	.word	0x2000e368
   109cc:	2000eeec 	.word	0x2000eeec
   109d0:	00039e80 	.word	0x00039e80
   109d4:	00039e97 	.word	0x00039e97

000109d8 <pm_system_resume>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   109d8:	2201      	movs	r2, #1

void pm_system_resume(void)
{
   109da:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   109dc:	4b16      	ldr	r3, [pc, #88]	; (10a38 <pm_system_resume+0x60>)
   109de:	7c1c      	ldrb	r4, [r3, #16]
   109e0:	f004 031f 	and.w	r3, r4, #31
   109e4:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   109e6:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   109e8:	4b14      	ldr	r3, [pc, #80]	; (10a3c <pm_system_resume+0x64>)
   109ea:	0961      	lsrs	r1, r4, #5
   109ec:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   109f0:	e8d3 1fef 	ldaex	r1, [r3]
   109f4:	ea01 0500 	and.w	r5, r1, r0
   109f8:	e8c3 5fe6 	stlex	r6, r5, [r3]
   109fc:	2e00      	cmp	r6, #0
   109fe:	d1f7      	bne.n	109f0 <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   10a00:	420a      	tst	r2, r1
   10a02:	d013      	beq.n	10a2c <pm_system_resume+0x54>
	if (pm_state_exit_post_ops != NULL) {
   10a04:	4b0e      	ldr	r3, [pc, #56]	; (10a40 <pm_system_resume+0x68>)
   10a06:	4d0f      	ldr	r5, [pc, #60]	; (10a44 <pm_system_resume+0x6c>)
   10a08:	b18b      	cbz	r3, 10a2e <pm_system_resume+0x56>
		pm_state_exit_post_ops(info->state, info->substate_id);
   10a0a:	230c      	movs	r3, #12
   10a0c:	4363      	muls	r3, r4
   10a0e:	18ea      	adds	r2, r5, r3
   10a10:	7851      	ldrb	r1, [r2, #1]
   10a12:	5ce8      	ldrb	r0, [r5, r3]
   10a14:	f01e fdf9 	bl	2f60a <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   10a18:	2000      	movs	r0, #0
   10a1a:	f7ff ff7d 	bl	10918 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   10a1e:	230c      	movs	r3, #12
   10a20:	435c      	muls	r4, r3
   10a22:	2300      	movs	r3, #0
   10a24:	192a      	adds	r2, r5, r4
   10a26:	512b      	str	r3, [r5, r4]
   10a28:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   10a2c:	bd70      	pop	{r4, r5, r6, pc}
   10a2e:	f383 8811 	msr	BASEPRI, r3
   10a32:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   10a36:	e7ef      	b.n	10a18 <pm_system_resume+0x40>
   10a38:	2000eeec 	.word	0x2000eeec
   10a3c:	2000e37c 	.word	0x2000e37c
   10a40:	0002f60b 	.word	0x0002f60b
   10a44:	2000e368 	.word	0x2000e368

00010a48 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   10a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
   10a4c:	4b45      	ldr	r3, [pc, #276]	; (10b64 <pm_system_suspend+0x11c>)
{
   10a4e:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
   10a50:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
   10a52:	f04f 0320 	mov.w	r3, #32
   10a56:	f3ef 8811 	mrs	r8, BASEPRI
   10a5a:	f383 8812 	msr	BASEPRI_MAX, r3
   10a5e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10a62:	4841      	ldr	r0, [pc, #260]	; (10b68 <pm_system_suspend+0x120>)
   10a64:	f018 fb68 	bl	29138 <z_spin_lock_valid>
   10a68:	b968      	cbnz	r0, 10a86 <pm_system_suspend+0x3e>
   10a6a:	2394      	movs	r3, #148	; 0x94
   10a6c:	4a3f      	ldr	r2, [pc, #252]	; (10b6c <pm_system_suspend+0x124>)
   10a6e:	4940      	ldr	r1, [pc, #256]	; (10b70 <pm_system_suspend+0x128>)
   10a70:	4840      	ldr	r0, [pc, #256]	; (10b74 <pm_system_suspend+0x12c>)
   10a72:	f01e fca7 	bl	2f3c4 <assert_print>
   10a76:	493c      	ldr	r1, [pc, #240]	; (10b68 <pm_system_suspend+0x120>)
   10a78:	483f      	ldr	r0, [pc, #252]	; (10b78 <pm_system_suspend+0x130>)
   10a7a:	f01e fca3 	bl	2f3c4 <assert_print>
   10a7e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10a80:	483a      	ldr	r0, [pc, #232]	; (10b6c <pm_system_suspend+0x124>)
   10a82:	f01e fc98 	bl	2f3b6 <assert_post_action>
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   10a86:	240c      	movs	r4, #12
   10a88:	436c      	muls	r4, r5
	z_spin_lock_set_owner(l);
   10a8a:	4837      	ldr	r0, [pc, #220]	; (10b68 <pm_system_suspend+0x120>)
   10a8c:	f018 fb70 	bl	29170 <z_spin_lock_set_owner>
   10a90:	4b3a      	ldr	r3, [pc, #232]	; (10b7c <pm_system_suspend+0x134>)
   10a92:	4e3b      	ldr	r6, [pc, #236]	; (10b80 <pm_system_suspend+0x138>)
   10a94:	5d19      	ldrb	r1, [r3, r4]
   10a96:	191a      	adds	r2, r3, r4
   10a98:	b1b9      	cbz	r1, 10aca <pm_system_suspend+0x82>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   10a9a:	ca07      	ldmia	r2, {r0, r1, r2}
   10a9c:	eb06 0c04 	add.w	ip, r6, r4
   10aa0:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   10aa4:	2200      	movs	r2, #0
   10aa6:	551a      	strb	r2, [r3, r4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10aa8:	482f      	ldr	r0, [pc, #188]	; (10b68 <pm_system_suspend+0x120>)
   10aaa:	f018 fb53 	bl	29154 <z_spin_unlock_valid>
   10aae:	4604      	mov	r4, r0
   10ab0:	b9b0      	cbnz	r0, 10ae0 <pm_system_suspend+0x98>
   10ab2:	23c2      	movs	r3, #194	; 0xc2
   10ab4:	4a2d      	ldr	r2, [pc, #180]	; (10b6c <pm_system_suspend+0x124>)
   10ab6:	4933      	ldr	r1, [pc, #204]	; (10b84 <pm_system_suspend+0x13c>)
   10ab8:	482e      	ldr	r0, [pc, #184]	; (10b74 <pm_system_suspend+0x12c>)
   10aba:	f01e fc83 	bl	2f3c4 <assert_print>
   10abe:	492a      	ldr	r1, [pc, #168]	; (10b68 <pm_system_suspend+0x120>)
   10ac0:	4831      	ldr	r0, [pc, #196]	; (10b88 <pm_system_suspend+0x140>)
   10ac2:	f01e fc7f 	bl	2f3c4 <assert_print>
   10ac6:	21c2      	movs	r1, #194	; 0xc2
   10ac8:	e7da      	b.n	10a80 <pm_system_suspend+0x38>
	} else {
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
   10aca:	4639      	mov	r1, r7
   10acc:	4628      	mov	r0, r5
   10ace:	f000 f865 	bl	10b9c <pm_policy_next_state>
		if (info != NULL) {
   10ad2:	2800      	cmp	r0, #0
   10ad4:	d0e8      	beq.n	10aa8 <pm_system_suspend+0x60>
			z_cpus_pm_state[id] = *info;
   10ad6:	c807      	ldmia	r0, {r0, r1, r2}
   10ad8:	4434      	add	r4, r6
   10ada:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   10ade:	e7e3      	b.n	10aa8 <pm_system_suspend+0x60>
	__asm__ volatile(
   10ae0:	f388 8811 	msr	BASEPRI, r8
   10ae4:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   10ae8:	230c      	movs	r3, #12
   10aea:	436b      	muls	r3, r5
   10aec:	18f2      	adds	r2, r6, r3
   10aee:	5cf3      	ldrb	r3, [r6, r3]
   10af0:	b3ab      	cbz	r3, 10b5e <pm_system_suspend+0x116>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   10af2:	1c7b      	adds	r3, r7, #1
   10af4:	d00f      	beq.n	10b16 <pm_system_suspend+0xce>
			return (uint32_t)((t * to_hz + off) / from_hz);
   10af6:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   10afa:	2100      	movs	r1, #0
   10afc:	f8d2 e008 	ldr.w	lr, [r2, #8]
   10b00:	4822      	ldr	r0, [pc, #136]	; (10b8c <pm_system_suspend+0x144>)
   10b02:	2300      	movs	r3, #0
   10b04:	fbee 010c 	umlal	r0, r1, lr, ip
   10b08:	4a21      	ldr	r2, [pc, #132]	; (10b90 <pm_system_suspend+0x148>)
   10b0a:	f7f8 f9c3 	bl	8e94 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
   10b0e:	2101      	movs	r1, #1
   10b10:	1a38      	subs	r0, r7, r0
   10b12:	f010 fc6b 	bl	213ec <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   10b16:	f019 fddf 	bl	2a6d8 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   10b1a:	2001      	movs	r0, #1
   10b1c:	f7ff fefc 	bl	10918 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10b20:	4b1c      	ldr	r3, [pc, #112]	; (10b94 <pm_system_suspend+0x14c>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   10b22:	096a      	lsrs	r2, r5, #5
   10b24:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
   10b28:	2201      	movs	r2, #1
   10b2a:	f005 011f 	and.w	r1, r5, #31
   10b2e:	408a      	lsls	r2, r1
   10b30:	e8d3 0fef 	ldaex	r0, [r3]
   10b34:	4310      	orrs	r0, r2
   10b36:	e8c3 0fe1 	stlex	r1, r0, [r3]
   10b3a:	2900      	cmp	r1, #0
   10b3c:	d1f8      	bne.n	10b30 <pm_system_suspend+0xe8>
	if (pm_state_set != NULL) {
   10b3e:	4b16      	ldr	r3, [pc, #88]	; (10b98 <pm_system_suspend+0x150>)
   10b40:	b133      	cbz	r3, 10b50 <pm_system_suspend+0x108>
		pm_state_set(info->state, info->substate_id);
   10b42:	230c      	movs	r3, #12
   10b44:	436b      	muls	r3, r5
   10b46:	18f2      	adds	r2, r6, r3
   10b48:	7851      	ldrb	r1, [r2, #1]
   10b4a:	5cf0      	ldrb	r0, [r6, r3]
   10b4c:	f01e fd51 	bl	2f5f2 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   10b50:	f7ff ff42 	bl	109d8 <pm_system_resume>
	k_sched_unlock();
   10b54:	f019 fe2c 	bl	2a7b0 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
}
   10b58:	4620      	mov	r0, r4
   10b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   10b5e:	461c      	mov	r4, r3
   10b60:	e7fa      	b.n	10b58 <pm_system_suspend+0x110>
   10b62:	bf00      	nop
   10b64:	2000eeec 	.word	0x2000eeec
   10b68:	2000e358 	.word	0x2000e358
   10b6c:	00039e53 	.word	0x00039e53
   10b70:	00039eac 	.word	0x00039eac
   10b74:	00039995 	.word	0x00039995
   10b78:	00039ec1 	.word	0x00039ec1
   10b7c:	2000e35c 	.word	0x2000e35c
   10b80:	2000e368 	.word	0x2000e368
   10b84:	00039e80 	.word	0x00039e80
   10b88:	00039e97 	.word	0x00039e97
   10b8c:	000f423f 	.word	0x000f423f
   10b90:	000f4240 	.word	0x000f4240
   10b94:	2000e37c 	.word	0x2000e37c
   10b98:	0002f5f3 	.word	0x0002f5f3

00010b9c <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   10b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ba0:	b085      	sub	sp, #20
   10ba2:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   10ba4:	a903      	add	r1, sp, #12
   10ba6:	f000 f843 	bl	10c30 <pm_state_cpu_get_all>
   10baa:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   10bae:	4604      	mov	r4, r0
   10bb0:	f04f 0b00 	mov.w	fp, #0

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   10bb4:	4b1b      	ldr	r3, [pc, #108]	; (10c24 <pm_policy_next_state+0x88>)
   10bb6:	9d03      	ldr	r5, [sp, #12]
   10bb8:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   10bbc:	1e43      	subs	r3, r0, #1
   10bbe:	b21b      	sxth	r3, r3
   10bc0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   10bc4:	f8df 8060 	ldr.w	r8, [pc, #96]	; 10c28 <pm_policy_next_state+0x8c>
   10bc8:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   10bcc:	b924      	cbnz	r4, 10bd8 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   10bce:	46a1      	mov	r9, r4
}
   10bd0:	4648      	mov	r0, r9
   10bd2:	b005      	add	sp, #20
   10bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10bd8:	46c4      	mov	ip, r8
   10bda:	4659      	mov	r1, fp
   10bdc:	6868      	ldr	r0, [r5, #4]
   10bde:	2300      	movs	r3, #0
   10be0:	fbe0 c107 	umlal	ip, r1, r0, r7
   10be4:	4a11      	ldr	r2, [pc, #68]	; (10c2c <pm_policy_next_state+0x90>)
   10be6:	4660      	mov	r0, ip
   10be8:	f7f8 f954 	bl	8e94 <__aeabi_uldivmod>
   10bec:	46c4      	mov	ip, r8
   10bee:	4659      	mov	r1, fp
   10bf0:	9001      	str	r0, [sp, #4]
   10bf2:	68a8      	ldr	r0, [r5, #8]
   10bf4:	2300      	movs	r3, #0
   10bf6:	fbe0 c107 	umlal	ip, r1, r0, r7
   10bfa:	4a0c      	ldr	r2, [pc, #48]	; (10c2c <pm_policy_next_state+0x90>)
   10bfc:	4660      	mov	r0, ip
   10bfe:	f7f8 f949 	bl	8e94 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   10c02:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
   10c06:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   10c08:	d001      	beq.n	10c0e <pm_policy_next_state+0x72>
   10c0a:	4582      	cmp	sl, r0
   10c0c:	d905      	bls.n	10c1a <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
   10c0e:	1c73      	adds	r3, r6, #1
   10c10:	d0de      	beq.n	10bd0 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
   10c12:	9b01      	ldr	r3, [sp, #4]
   10c14:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   10c16:	42b0      	cmp	r0, r6
   10c18:	d9da      	bls.n	10bd0 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   10c1a:	3c01      	subs	r4, #1
   10c1c:	b2a4      	uxth	r4, r4
   10c1e:	3d0c      	subs	r5, #12
   10c20:	e7d4      	b.n	10bcc <pm_policy_next_state+0x30>
   10c22:	bf00      	nop
   10c24:	2000c808 	.word	0x2000c808
   10c28:	000f423f 	.word	0x000f423f
   10c2c:	000f4240 	.word	0x000f4240

00010c30 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   10c30:	b908      	cbnz	r0, 10c36 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   10c32:	4b02      	ldr	r3, [pc, #8]	; (10c3c <pm_state_cpu_get_all+0xc>)
   10c34:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   10c36:	2000      	movs	r0, #0
   10c38:	4770      	bx	lr
   10c3a:	bf00      	nop
   10c3c:	00037de8 	.word	0x00037de8

00010c40 <flash_area_open>:
		user_cb(&flash_map[i], user_data);
	}
}

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
   10c40:	b570      	push	{r4, r5, r6, lr}
	const struct flash_area *area;

	if (flash_map == NULL) {
   10c42:	4b11      	ldr	r3, [pc, #68]	; (10c88 <flash_area_open+0x48>)
{
   10c44:	460d      	mov	r5, r1
	if (flash_map == NULL) {
   10c46:	681c      	ldr	r4, [r3, #0]
   10c48:	b1dc      	cbz	r4, 10c82 <flash_area_open+0x42>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   10c4a:	4b10      	ldr	r3, [pc, #64]	; (10c8c <flash_area_open+0x4c>)
   10c4c:	6819      	ldr	r1, [r3, #0]
   10c4e:	2300      	movs	r3, #0
   10c50:	428b      	cmp	r3, r1
   10c52:	db02      	blt.n	10c5a <flash_area_open+0x1a>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
   10c54:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;

	return 0;
}
   10c58:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
   10c5a:	4622      	mov	r2, r4
   10c5c:	f812 6b10 	ldrb.w	r6, [r2], #16
   10c60:	4286      	cmp	r6, r0
   10c62:	d002      	beq.n	10c6a <flash_area_open+0x2a>
	for (int i = 0; i < flash_map_entries; i++) {
   10c64:	4614      	mov	r4, r2
   10c66:	3301      	adds	r3, #1
   10c68:	e7f2      	b.n	10c50 <flash_area_open+0x10>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
   10c6a:	68e0      	ldr	r0, [r4, #12]
   10c6c:	b910      	cbnz	r0, 10c74 <flash_area_open+0x34>
		return -ENODEV;
   10c6e:	f06f 0012 	mvn.w	r0, #18
   10c72:	e7f1      	b.n	10c58 <flash_area_open+0x18>
   10c74:	f025 f9f0 	bl	36058 <z_device_is_ready>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
   10c78:	2800      	cmp	r0, #0
   10c7a:	d0f8      	beq.n	10c6e <flash_area_open+0x2e>
	return 0;
   10c7c:	2000      	movs	r0, #0
	*fap = area;
   10c7e:	602c      	str	r4, [r5, #0]
	return 0;
   10c80:	e7ea      	b.n	10c58 <flash_area_open+0x18>
		return -EACCES;
   10c82:	f06f 000c 	mvn.w	r0, #12
   10c86:	e7e7      	b.n	10c58 <flash_area_open+0x18>
   10c88:	2000c82c 	.word	0x2000c82c
   10c8c:	00037de8 	.word	0x00037de8

00010c90 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
   10c90:	b570      	push	{r4, r5, r6, lr}
   10c92:	b088      	sub	sp, #32
   10c94:	4605      	mov	r5, r0
   10c96:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
   10c98:	b2c0      	uxtb	r0, r0
   10c9a:	4669      	mov	r1, sp
{
   10c9c:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
   10c9e:	f7ff ffcf 	bl	10c40 <flash_area_open>
	if (rc < 0 || fa == NULL) {
   10ca2:	2800      	cmp	r0, #0
   10ca4:	db1b      	blt.n	10cde <flash_area_get_sectors+0x4e>
   10ca6:	9800      	ldr	r0, [sp, #0]
   10ca8:	b1c8      	cbz	r0, 10cde <flash_area_get_sectors+0x4e>
	cb_data->area_off = fa->fa_off;
   10caa:	6843      	ldr	r3, [r0, #4]
	cb_data->ret_len = *cnt;
   10cac:	6822      	ldr	r2, [r4, #0]
	cb_data->area_off = fa->fa_off;
   10cae:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
   10cb0:	6883      	ldr	r3, [r0, #8]
	cb_data->area_idx = idx;
   10cb2:	9501      	str	r5, [sp, #4]
	cb_data->ret = ret;
   10cb4:	e9cd 3603 	strd	r3, r6, [sp, #12]
	cb_data->ret_idx = 0U;
   10cb8:	2300      	movs	r3, #0
	cb_data->status = 0;
   10cba:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
   10cbe:	9305      	str	r3, [sp, #20]
	flash_dev = fa->fa_dev;
   10cc0:	68c5      	ldr	r5, [r0, #12]
	flash_area_close(fa);
   10cc2:	f01e ffa4 	bl	2fc0e <flash_area_close>
	if (flash_dev == NULL) {
   10cc6:	b16d      	cbz	r5, 10ce4 <flash_area_get_sectors+0x54>
	flash_page_foreach(flash_dev, cb, cb_data);
   10cc8:	4628      	mov	r0, r5
   10cca:	4908      	ldr	r1, [pc, #32]	; (10cec <flash_area_get_sectors+0x5c>)
   10ccc:	aa01      	add	r2, sp, #4
   10cce:	f023 f927 	bl	33f20 <flash_page_foreach>
	if (cb_data->status == 0) {
   10cd2:	9807      	ldr	r0, [sp, #28]
   10cd4:	b908      	cbnz	r0, 10cda <flash_area_get_sectors+0x4a>
		*cnt = cb_data->ret_idx;
   10cd6:	9b05      	ldr	r3, [sp, #20]
   10cd8:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
   10cda:	b008      	add	sp, #32
   10cdc:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   10cde:	f06f 0015 	mvn.w	r0, #21
   10ce2:	e7fa      	b.n	10cda <flash_area_get_sectors+0x4a>
		return -ENODEV;
   10ce4:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
   10ce8:	e7f7      	b.n	10cda <flash_area_get_sectors+0x4a>
   10cea:	bf00      	nop
   10cec:	0002fc11 	.word	0x0002fc11

00010cf0 <z_impl_zsock_socket>:
	return fd;
}
#endif /* CONFIG_NET_NATIVE */

int z_impl_zsock_socket(int family, int type, int proto)
{
   10cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10cf4:	4605      	mov	r5, r0
   10cf6:	460e      	mov	r6, r1
   10cf8:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   10cfa:	4c1d      	ldr	r4, [pc, #116]	; (10d70 <z_impl_zsock_socket+0x80>)
   10cfc:	f8df 8074 	ldr.w	r8, [pc, #116]	; 10d74 <z_impl_zsock_socket+0x84>
   10d00:	4544      	cmp	r4, r8
   10d02:	d92b      	bls.n	10d5c <z_impl_zsock_socket+0x6c>
   10d04:	491c      	ldr	r1, [pc, #112]	; (10d78 <z_impl_zsock_socket+0x88>)
   10d06:	23dd      	movs	r3, #221	; 0xdd
   10d08:	4a1c      	ldr	r2, [pc, #112]	; (10d7c <z_impl_zsock_socket+0x8c>)
   10d0a:	481d      	ldr	r0, [pc, #116]	; (10d80 <z_impl_zsock_socket+0x90>)
   10d0c:	f01e fb5a 	bl	2f3c4 <assert_print>
   10d10:	481c      	ldr	r0, [pc, #112]	; (10d84 <z_impl_zsock_socket+0x94>)
   10d12:	f01e fb57 	bl	2f3c4 <assert_print>
   10d16:	21dd      	movs	r1, #221	; 0xdd
   10d18:	e00f      	b.n	10d3a <z_impl_zsock_socket+0x4a>
		if (sock_family->family != family &&
   10d1a:	6823      	ldr	r3, [r4, #0]
   10d1c:	42ab      	cmp	r3, r5
   10d1e:	d000      	beq.n	10d22 <z_impl_zsock_socket+0x32>
   10d20:	b9d3      	cbnz	r3, 10d58 <z_impl_zsock_socket+0x68>
		    sock_family->family != AF_UNSPEC) {
			continue;
		}

		NET_ASSERT(sock_family->is_supported);
   10d22:	68a3      	ldr	r3, [r4, #8]
   10d24:	b963      	cbnz	r3, 10d40 <z_impl_zsock_socket+0x50>
   10d26:	4918      	ldr	r1, [pc, #96]	; (10d88 <z_impl_zsock_socket+0x98>)
   10d28:	23e3      	movs	r3, #227	; 0xe3
   10d2a:	4a14      	ldr	r2, [pc, #80]	; (10d7c <z_impl_zsock_socket+0x8c>)
   10d2c:	4814      	ldr	r0, [pc, #80]	; (10d80 <z_impl_zsock_socket+0x90>)
   10d2e:	f01e fb49 	bl	2f3c4 <assert_print>
   10d32:	4816      	ldr	r0, [pc, #88]	; (10d8c <z_impl_zsock_socket+0x9c>)
   10d34:	f01e fb46 	bl	2f3c4 <assert_print>
   10d38:	21e3      	movs	r1, #227	; 0xe3
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   10d3a:	4810      	ldr	r0, [pc, #64]	; (10d7c <z_impl_zsock_socket+0x8c>)
   10d3c:	f01e fb3b 	bl	2f3b6 <assert_post_action>

		if (!sock_family->is_supported(family, type, proto)) {
   10d40:	463a      	mov	r2, r7
   10d42:	4631      	mov	r1, r6
   10d44:	4628      	mov	r0, r5
   10d46:	4798      	blx	r3
   10d48:	b130      	cbz	r0, 10d58 <z_impl_zsock_socket+0x68>
			continue;
		}

		return sock_family->handler(family, type, proto);
   10d4a:	463a      	mov	r2, r7
   10d4c:	4631      	mov	r1, r6
   10d4e:	4628      	mov	r0, r5
   10d50:	68e3      	ldr	r3, [r4, #12]
	}

	errno = EAFNOSUPPORT;
	return -1;
}
   10d52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return sock_family->handler(family, type, proto);
   10d56:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   10d58:	3410      	adds	r4, #16
   10d5a:	e7d1      	b.n	10d00 <z_impl_zsock_socket+0x10>
   10d5c:	d3dd      	bcc.n	10d1a <z_impl_zsock_socket+0x2a>
	errno = EAFNOSUPPORT;
   10d5e:	f01f ffe5 	bl	30d2c <__errno>
   10d62:	236a      	movs	r3, #106	; 0x6a
   10d64:	6003      	str	r3, [r0, #0]
}
   10d66:	f04f 30ff 	mov.w	r0, #4294967295
   10d6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10d6e:	bf00      	nop
   10d70:	00037820 	.word	0x00037820
   10d74:	00037830 	.word	0x00037830
   10d78:	0003a539 	.word	0x0003a539
   10d7c:	0003a4eb 	.word	0x0003a4eb
   10d80:	00039995 	.word	0x00039995
   10d84:	0003a18c 	.word	0x0003a18c
   10d88:	0003a51f 	.word	0x0003a51f
   10d8c:	0003a4e8 	.word	0x0003a4e8

00010d90 <zsock_poll_internal>:

	return timeout - elapsed;
}

int zsock_poll_internal(struct zsock_pollfd *fds, int nfds, k_timeout_t timeout)
{
   10d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10d94:	460f      	mov	r7, r1
	const struct fd_op_vtable *vtable;
	struct k_mutex *lock;
	uint64_t end;
	bool offload = false;
	const struct fd_op_vtable *offl_vtable = NULL;
	void *offl_ctx = NULL;
   10d96:	2600      	movs	r6, #0
{
   10d98:	b09b      	sub	sp, #108	; 0x6c
   10d9a:	9003      	str	r0, [sp, #12]

	end = sys_clock_timeout_end_calc(timeout);
   10d9c:	4619      	mov	r1, r3
   10d9e:	4610      	mov	r0, r2
{
   10da0:	e9cd 2306 	strd	r2, r3, [sp, #24]
	end = sys_clock_timeout_end_calc(timeout);
   10da4:	f025 fa98 	bl	362d8 <sys_clock_timeout_end_calc>

	pev = poll_events;
	for (pfd = fds, i = nfds; i--; pfd++) {
   10da8:	46bb      	mov	fp, r7
	bool offload = false;
   10daa:	4634      	mov	r4, r6
	end = sys_clock_timeout_end_calc(timeout);
   10dac:	e9cd 0104 	strd	r0, r1, [sp, #16]
	pev = poll_events;
   10db0:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
	for (pfd = fds, i = nfds; i--; pfd++) {
   10db4:	f8dd 900c 	ldr.w	r9, [sp, #12]
	pev = poll_events;
   10db8:	f8cd 8020 	str.w	r8, [sp, #32]
	const struct fd_op_vtable *offl_vtable = NULL;
   10dbc:	9602      	str	r6, [sp, #8]
	for (pfd = fds, i = nfds; i--; pfd++) {
   10dbe:	f1bb 0f00 	cmp.w	fp, #0
   10dc2:	d121      	bne.n	10e08 <zsock_poll_internal+0x78>
			errno = -result;
			return -1;
		}
	}

	if (offload) {
   10dc4:	2c00      	cmp	r4, #0
   10dc6:	d066      	beq.n	10e96 <zsock_poll_internal+0x106>
		int poll_timeout;

		if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   10dc8:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
   10dcc:	f1b2 3fff 	cmp.w	r2, #4294967295
   10dd0:	bf08      	it	eq
   10dd2:	f1b3 3fff 	cmpeq.w	r3, #4294967295
   10dd6:	bf17      	itett	ne
   10dd8:	f44f 727a 	movne.w	r2, #1000	; 0x3e8
			poll_timeout = SYS_FOREVER_MS;
   10ddc:	f04f 33ff 	moveq.w	r3, #4294967295
   10de0:	fba3 3202 	umullne	r3, r2, r3, r2
   10de4:	0bdb      	lsrne	r3, r3, #15
   10de6:	bf18      	it	ne
   10de8:	ea43 4342 	orrne.w	r3, r3, r2, lsl #17
		} else {
			poll_timeout = k_ticks_to_ms_floor32(timeout.ticks);
		}

		return z_fdtable_call_ioctl(offl_vtable, offl_ctx,
   10dec:	e9cd 7300 	strd	r7, r3, [sp]
   10df0:	f44f 7282 	mov.w	r2, #260	; 0x104
   10df4:	4631      	mov	r1, r6
   10df6:	9b03      	ldr	r3, [sp, #12]
   10df8:	9802      	ldr	r0, [sp, #8]
   10dfa:	f01e ff2f 	bl	2fc5c <z_fdtable_call_ioctl>
   10dfe:	4604      	mov	r4, r0
			}
		}
	} while (retry);

	return ret;
}
   10e00:	4620      	mov	r0, r4
   10e02:	b01b      	add	sp, #108	; 0x6c
   10e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (pfd->fd < 0) {
   10e08:	f8d9 0000 	ldr.w	r0, [r9]
   10e0c:	2800      	cmp	r0, #0
   10e0e:	db22      	blt.n	10e56 <zsock_poll_internal+0xc6>
	ctx = z_get_fd_obj_and_vtable(sock,
   10e10:	aa0a      	add	r2, sp, #40	; 0x28
   10e12:	a909      	add	r1, sp, #36	; 0x24
   10e14:	f7fc ff22 	bl	dc5c <z_get_fd_obj_and_vtable>
		if (ctx == NULL) {
   10e18:	4605      	mov	r5, r0
   10e1a:	b1e0      	cbz	r0, 10e56 <zsock_poll_internal+0xc6>
		(void)k_mutex_lock(lock, K_FOREVER);
   10e1c:	f04f 32ff 	mov.w	r2, #4294967295
   10e20:	f04f 33ff 	mov.w	r3, #4294967295
   10e24:	980a      	ldr	r0, [sp, #40]	; 0x28
   10e26:	f01e ff46 	bl	2fcb6 <k_mutex_lock.constprop.0.isra.0>
		result = z_fdtable_call_ioctl(vtable, ctx,
   10e2a:	ab1a      	add	r3, sp, #104	; 0x68
   10e2c:	9301      	str	r3, [sp, #4]
   10e2e:	ab08      	add	r3, sp, #32
   10e30:	9300      	str	r3, [sp, #0]
   10e32:	f44f 7281 	mov.w	r2, #258	; 0x102
   10e36:	464b      	mov	r3, r9
   10e38:	4629      	mov	r1, r5
   10e3a:	9809      	ldr	r0, [sp, #36]	; 0x24
   10e3c:	f01e ff0e 	bl	2fc5c <z_fdtable_call_ioctl>
		if (result == -EALREADY) {
   10e40:	f110 0f78 	cmn.w	r0, #120	; 0x78
		result = z_fdtable_call_ioctl(vtable, ctx,
   10e44:	4682      	mov	sl, r0
		if (result == -EALREADY) {
   10e46:	d10b      	bne.n	10e60 <zsock_poll_internal+0xd0>
			timeout = K_NO_WAIT;
   10e48:	2200      	movs	r2, #0
   10e4a:	2300      	movs	r3, #0
		k_mutex_unlock(lock);
   10e4c:	980a      	ldr	r0, [sp, #40]	; 0x28
			timeout = K_NO_WAIT;
   10e4e:	e9cd 2306 	strd	r2, r3, [sp, #24]
		k_mutex_unlock(lock);
   10e52:	f01e ff32 	bl	2fcba <k_mutex_unlock.isra.0>
	for (pfd = fds, i = nfds; i--; pfd++) {
   10e56:	f109 0908 	add.w	r9, r9, #8
   10e5a:	f10b 3bff 	add.w	fp, fp, #4294967295
   10e5e:	e7ae      	b.n	10dbe <zsock_poll_internal+0x2e>
		} else if (result == -EXDEV) {
   10e60:	f11a 0f12 	cmn.w	sl, #18
		k_mutex_unlock(lock);
   10e64:	980a      	ldr	r0, [sp, #40]	; 0x28
		} else if (result == -EXDEV) {
   10e66:	d10b      	bne.n	10e80 <zsock_poll_internal+0xf0>
			if (offl_vtable == NULL || net_socket_is_tls(ctx)) {
   10e68:	9b02      	ldr	r3, [sp, #8]
   10e6a:	b11b      	cbz	r3, 10e74 <zsock_poll_internal+0xe4>
		k_mutex_unlock(lock);
   10e6c:	f01e ff25 	bl	2fcba <k_mutex_unlock.isra.0>
			offload = true;
   10e70:	2401      	movs	r4, #1
   10e72:	e7f0      	b.n	10e56 <zsock_poll_internal+0xc6>
				offl_vtable = vtable;
   10e74:	9b09      	ldr	r3, [sp, #36]	; 0x24
		k_mutex_unlock(lock);
   10e76:	462e      	mov	r6, r5
				offl_vtable = vtable;
   10e78:	9302      	str	r3, [sp, #8]
		k_mutex_unlock(lock);
   10e7a:	f01e ff1e 	bl	2fcba <k_mutex_unlock.isra.0>
		if (result < 0) {
   10e7e:	e7f7      	b.n	10e70 <zsock_poll_internal+0xe0>
		k_mutex_unlock(lock);
   10e80:	f01e ff1b 	bl	2fcba <k_mutex_unlock.isra.0>
		if (result < 0) {
   10e84:	f1ba 0f00 	cmp.w	sl, #0
   10e88:	dae5      	bge.n	10e56 <zsock_poll_internal+0xc6>
			errno = -result;
   10e8a:	f01f ff4f 	bl	30d2c <__errno>
   10e8e:	f1ca 0300 	rsb	r3, sl, #0
				errno = -result;
   10e92:	6003      	str	r3, [r0, #0]
				return -1;
   10e94:	e020      	b.n	10ed8 <zsock_poll_internal+0x148>
	timeout_recalc(end, &timeout);
   10e96:	aa06      	add	r2, sp, #24
   10e98:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
		ret = k_poll(poll_events, pev - poll_events, timeout);
   10e9c:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 10f78 <zsock_poll_internal+0x1e8>
	timeout_recalc(end, &timeout);
   10ea0:	f01e feeb 	bl	2fc7a <timeout_recalc>
		retry = false;
   10ea4:	9402      	str	r4, [sp, #8]
		ret = k_poll(poll_events, pev - poll_events, timeout);
   10ea6:	9908      	ldr	r1, [sp, #32]
   10ea8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   10eac:	eba1 0108 	sub.w	r1, r1, r8
   10eb0:	1089      	asrs	r1, r1, #2
   10eb2:	fb0a f101 	mul.w	r1, sl, r1
	return z_impl_k_poll(events, num_events, timeout);
   10eb6:	4640      	mov	r0, r8
   10eb8:	f01b f964 	bl	2c184 <z_impl_k_poll>
		if (ret != 0 && ret != -EAGAIN && ret != -EINTR) {
   10ebc:	f100 030b 	add.w	r3, r0, #11
   10ec0:	2b0b      	cmp	r3, #11
   10ec2:	4605      	mov	r5, r0
   10ec4:	d804      	bhi.n	10ed0 <zsock_poll_internal+0x140>
   10ec6:	4c2d      	ldr	r4, [pc, #180]	; (10f7c <zsock_poll_internal+0x1ec>)
   10ec8:	411c      	asrs	r4, r3
   10eca:	f014 0401 	ands.w	r4, r4, #1
   10ece:	d006      	beq.n	10ede <zsock_poll_internal+0x14e>
			errno = -ret;
   10ed0:	f01f ff2c 	bl	30d2c <__errno>
   10ed4:	426d      	negs	r5, r5
   10ed6:	6005      	str	r5, [r0, #0]
			return -1;
   10ed8:	f04f 34ff 	mov.w	r4, #4294967295
   10edc:	e790      	b.n	10e00 <zsock_poll_internal+0x70>
		for (pfd = fds, i = nfds; i--; pfd++) {
   10ede:	46b9      	mov	r9, r7
		retry = false;
   10ee0:	46a3      	mov	fp, r4
		for (pfd = fds, i = nfds; i--; pfd++) {
   10ee2:	9d03      	ldr	r5, [sp, #12]
		pev = poll_events;
   10ee4:	f8cd 8020 	str.w	r8, [sp, #32]
		for (pfd = fds, i = nfds; i--; pfd++) {
   10ee8:	f1b9 0f00 	cmp.w	r9, #0
   10eec:	d10e      	bne.n	10f0c <zsock_poll_internal+0x17c>
		if (retry) {
   10eee:	f1bb 0f00 	cmp.w	fp, #0
   10ef2:	d085      	beq.n	10e00 <zsock_poll_internal+0x70>
			if (ret > 0) {
   10ef4:	2c00      	cmp	r4, #0
   10ef6:	d183      	bne.n	10e00 <zsock_poll_internal+0x70>
			timeout_recalc(end, &timeout);
   10ef8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   10efc:	aa06      	add	r2, sp, #24
   10efe:	f01e febc 	bl	2fc7a <timeout_recalc>
			if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   10f02:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
   10f06:	4313      	orrs	r3, r2
   10f08:	d1cd      	bne.n	10ea6 <zsock_poll_internal+0x116>
   10f0a:	e779      	b.n	10e00 <zsock_poll_internal+0x70>
			if (pfd->fd < 0) {
   10f0c:	6828      	ldr	r0, [r5, #0]
			pfd->revents = 0;
   10f0e:	9b02      	ldr	r3, [sp, #8]
			if (pfd->fd < 0) {
   10f10:	2800      	cmp	r0, #0
			pfd->revents = 0;
   10f12:	80eb      	strh	r3, [r5, #6]
			if (pfd->fd < 0) {
   10f14:	db29      	blt.n	10f6a <zsock_poll_internal+0x1da>
	ctx = z_get_fd_obj_and_vtable(sock,
   10f16:	aa0a      	add	r2, sp, #40	; 0x28
   10f18:	a909      	add	r1, sp, #36	; 0x24
   10f1a:	f7fc fe9f 	bl	dc5c <z_get_fd_obj_and_vtable>
			if (ctx == NULL) {
   10f1e:	4606      	mov	r6, r0
   10f20:	b918      	cbnz	r0, 10f2a <zsock_poll_internal+0x19a>
				pfd->revents = ZSOCK_POLLNVAL;
   10f22:	2320      	movs	r3, #32
   10f24:	80eb      	strh	r3, [r5, #6]
				ret++;
   10f26:	3401      	adds	r4, #1
   10f28:	e01f      	b.n	10f6a <zsock_poll_internal+0x1da>
			(void)k_mutex_lock(lock, K_FOREVER);
   10f2a:	f04f 32ff 	mov.w	r2, #4294967295
   10f2e:	f04f 33ff 	mov.w	r3, #4294967295
   10f32:	980a      	ldr	r0, [sp, #40]	; 0x28
   10f34:	f01e febf 	bl	2fcb6 <k_mutex_lock.constprop.0.isra.0>
			result = z_fdtable_call_ioctl(vtable, ctx,
   10f38:	ab08      	add	r3, sp, #32
   10f3a:	4631      	mov	r1, r6
   10f3c:	f240 1203 	movw	r2, #259	; 0x103
   10f40:	9300      	str	r3, [sp, #0]
   10f42:	9809      	ldr	r0, [sp, #36]	; 0x24
   10f44:	462b      	mov	r3, r5
   10f46:	f01e fe89 	bl	2fc5c <z_fdtable_call_ioctl>
   10f4a:	4606      	mov	r6, r0
			k_mutex_unlock(lock);
   10f4c:	980a      	ldr	r0, [sp, #40]	; 0x28
   10f4e:	f01e feb4 	bl	2fcba <k_mutex_unlock.isra.0>
			if (result == -EAGAIN) {
   10f52:	f116 0f0b 	cmn.w	r6, #11
   10f56:	d00c      	beq.n	10f72 <zsock_poll_internal+0x1e2>
			} else if (result != 0) {
   10f58:	b11e      	cbz	r6, 10f62 <zsock_poll_internal+0x1d2>
				errno = -result;
   10f5a:	f01f fee7 	bl	30d2c <__errno>
   10f5e:	4273      	negs	r3, r6
   10f60:	e797      	b.n	10e92 <zsock_poll_internal+0x102>
			if (pfd->revents != 0) {
   10f62:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   10f66:	2b00      	cmp	r3, #0
   10f68:	d1dd      	bne.n	10f26 <zsock_poll_internal+0x196>
		for (pfd = fds, i = nfds; i--; pfd++) {
   10f6a:	3508      	adds	r5, #8
   10f6c:	f109 39ff 	add.w	r9, r9, #4294967295
   10f70:	e7ba      	b.n	10ee8 <zsock_poll_internal+0x158>
				retry = true;
   10f72:	f04f 0b01 	mov.w	fp, #1
   10f76:	e7f8      	b.n	10f6a <zsock_poll_internal+0x1da>
   10f78:	cccccccd 	.word	0xcccccccd
   10f7c:	fffff77e 	.word	0xfffff77e

00010f80 <socket_offload_dns_register>:
#include "sockets_internal.h"

const struct socket_dns_offload *dns_offload;

void socket_offload_dns_register(const struct socket_dns_offload *ops)
{
   10f80:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(ops);
   10f82:	b948      	cbnz	r0, 10f98 <socket_offload_dns_register+0x18>
   10f84:	490b      	ldr	r1, [pc, #44]	; (10fb4 <socket_offload_dns_register+0x34>)
   10f86:	2313      	movs	r3, #19
   10f88:	4a0b      	ldr	r2, [pc, #44]	; (10fb8 <socket_offload_dns_register+0x38>)
   10f8a:	480c      	ldr	r0, [pc, #48]	; (10fbc <socket_offload_dns_register+0x3c>)
   10f8c:	f01e fa1a 	bl	2f3c4 <assert_print>
   10f90:	2113      	movs	r1, #19
	__ASSERT_NO_MSG(dns_offload == NULL);
   10f92:	4809      	ldr	r0, [pc, #36]	; (10fb8 <socket_offload_dns_register+0x38>)
   10f94:	f01e fa0f 	bl	2f3b6 <assert_post_action>
   10f98:	4b09      	ldr	r3, [pc, #36]	; (10fc0 <socket_offload_dns_register+0x40>)
   10f9a:	681a      	ldr	r2, [r3, #0]
   10f9c:	b13a      	cbz	r2, 10fae <socket_offload_dns_register+0x2e>
   10f9e:	4909      	ldr	r1, [pc, #36]	; (10fc4 <socket_offload_dns_register+0x44>)
   10fa0:	2314      	movs	r3, #20
   10fa2:	4a05      	ldr	r2, [pc, #20]	; (10fb8 <socket_offload_dns_register+0x38>)
   10fa4:	4805      	ldr	r0, [pc, #20]	; (10fbc <socket_offload_dns_register+0x3c>)
   10fa6:	f01e fa0d 	bl	2f3c4 <assert_print>
   10faa:	2114      	movs	r1, #20
   10fac:	e7f1      	b.n	10f92 <socket_offload_dns_register+0x12>

	dns_offload = ops;
   10fae:	6018      	str	r0, [r3, #0]
}
   10fb0:	bd08      	pop	{r3, pc}
   10fb2:	bf00      	nop
   10fb4:	0004142b 	.word	0x0004142b
   10fb8:	0003a56f 	.word	0x0003a56f
   10fbc:	00039995 	.word	0x00039995
   10fc0:	2000e380 	.word	0x2000e380
   10fc4:	0003a5aa 	.word	0x0003a5aa

00010fc8 <socket_offload_getaddrinfo>:

int socket_offload_getaddrinfo(const char *node, const char *service,
			       const struct zsock_addrinfo *hints,
			       struct zsock_addrinfo **res)
{
   10fc8:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(dns_offload);
   10fca:	4c0d      	ldr	r4, [pc, #52]	; (11000 <socket_offload_getaddrinfo+0x38>)
   10fcc:	6824      	ldr	r4, [r4, #0]
   10fce:	b94c      	cbnz	r4, 10fe4 <socket_offload_getaddrinfo+0x1c>
   10fd0:	490c      	ldr	r1, [pc, #48]	; (11004 <socket_offload_getaddrinfo+0x3c>)
   10fd2:	231d      	movs	r3, #29
   10fd4:	4a0c      	ldr	r2, [pc, #48]	; (11008 <socket_offload_getaddrinfo+0x40>)
   10fd6:	480d      	ldr	r0, [pc, #52]	; (1100c <socket_offload_getaddrinfo+0x44>)
   10fd8:	f01e f9f4 	bl	2f3c4 <assert_print>
   10fdc:	211d      	movs	r1, #29
	__ASSERT_NO_MSG(dns_offload->getaddrinfo);
   10fde:	480a      	ldr	r0, [pc, #40]	; (11008 <socket_offload_getaddrinfo+0x40>)
   10fe0:	f01e f9e9 	bl	2f3b6 <assert_post_action>
   10fe4:	6824      	ldr	r4, [r4, #0]
   10fe6:	b93c      	cbnz	r4, 10ff8 <socket_offload_getaddrinfo+0x30>
   10fe8:	4909      	ldr	r1, [pc, #36]	; (11010 <socket_offload_getaddrinfo+0x48>)
   10fea:	231e      	movs	r3, #30
   10fec:	4a06      	ldr	r2, [pc, #24]	; (11008 <socket_offload_getaddrinfo+0x40>)
   10fee:	4807      	ldr	r0, [pc, #28]	; (1100c <socket_offload_getaddrinfo+0x44>)
   10ff0:	f01e f9e8 	bl	2f3c4 <assert_print>
   10ff4:	211e      	movs	r1, #30
   10ff6:	e7f2      	b.n	10fde <socket_offload_getaddrinfo+0x16>

	return dns_offload->getaddrinfo(node, service, hints, res);
   10ff8:	46a4      	mov	ip, r4
}
   10ffa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return dns_offload->getaddrinfo(node, service, hints, res);
   10ffe:	4760      	bx	ip
   11000:	2000e380 	.word	0x2000e380
   11004:	0003a5c5 	.word	0x0003a5c5
   11008:	0003a56f 	.word	0x0003a56f
   1100c:	00039995 	.word	0x00039995
   11010:	0003a5d1 	.word	0x0003a5d1

00011014 <socket_offload_freeaddrinfo>:

void socket_offload_freeaddrinfo(struct zsock_addrinfo *res)
{
   11014:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(dns_offload);
   11016:	4b0d      	ldr	r3, [pc, #52]	; (1104c <socket_offload_freeaddrinfo+0x38>)
   11018:	681b      	ldr	r3, [r3, #0]
   1101a:	b94b      	cbnz	r3, 11030 <socket_offload_freeaddrinfo+0x1c>
   1101c:	490c      	ldr	r1, [pc, #48]	; (11050 <socket_offload_freeaddrinfo+0x3c>)
   1101e:	2325      	movs	r3, #37	; 0x25
   11020:	4a0c      	ldr	r2, [pc, #48]	; (11054 <socket_offload_freeaddrinfo+0x40>)
   11022:	480d      	ldr	r0, [pc, #52]	; (11058 <socket_offload_freeaddrinfo+0x44>)
   11024:	f01e f9ce 	bl	2f3c4 <assert_print>
   11028:	2125      	movs	r1, #37	; 0x25
	__ASSERT_NO_MSG(dns_offload->freeaddrinfo);
   1102a:	480a      	ldr	r0, [pc, #40]	; (11054 <socket_offload_freeaddrinfo+0x40>)
   1102c:	f01e f9c3 	bl	2f3b6 <assert_post_action>
   11030:	685b      	ldr	r3, [r3, #4]
   11032:	b93b      	cbnz	r3, 11044 <socket_offload_freeaddrinfo+0x30>
   11034:	4909      	ldr	r1, [pc, #36]	; (1105c <socket_offload_freeaddrinfo+0x48>)
   11036:	2326      	movs	r3, #38	; 0x26
   11038:	4a06      	ldr	r2, [pc, #24]	; (11054 <socket_offload_freeaddrinfo+0x40>)
   1103a:	4807      	ldr	r0, [pc, #28]	; (11058 <socket_offload_freeaddrinfo+0x44>)
   1103c:	f01e f9c2 	bl	2f3c4 <assert_print>
   11040:	2126      	movs	r1, #38	; 0x26
   11042:	e7f2      	b.n	1102a <socket_offload_freeaddrinfo+0x16>

	return dns_offload->freeaddrinfo(res);
}
   11044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return dns_offload->freeaddrinfo(res);
   11048:	4718      	bx	r3
   1104a:	bf00      	nop
   1104c:	2000e380 	.word	0x2000e380
   11050:	0003a5c5 	.word	0x0003a5c5
   11054:	0003a56f 	.word	0x0003a56f
   11058:	00039995 	.word	0x00039995
   1105c:	0003a5ea 	.word	0x0003a5ea

00011060 <settings_save_one>:

/*
 * Append a single value to persisted config. Don't store duplicate value.
 */
int settings_save_one(const char *name, const void *value, size_t val_len)
{
   11060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   11064:	4b0f      	ldr	r3, [pc, #60]	; (110a4 <settings_save_one+0x44>)
{
   11066:	4605      	mov	r5, r0
	cs = settings_save_dst;
   11068:	681c      	ldr	r4, [r3, #0]
{
   1106a:	460e      	mov	r6, r1
   1106c:	4617      	mov	r7, r2
	if (!cs) {
   1106e:	b1ac      	cbz	r4, 1109c <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
   11070:	f04f 32ff 	mov.w	r2, #4294967295
   11074:	f04f 33ff 	mov.w	r3, #4294967295
   11078:	480b      	ldr	r0, [pc, #44]	; (110a8 <settings_save_one+0x48>)
   1107a:	f018 f8b3 	bl	291e4 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   1107e:	6863      	ldr	r3, [r4, #4]
   11080:	4632      	mov	r2, r6
   11082:	f8d3 8008 	ldr.w	r8, [r3, #8]
   11086:	4629      	mov	r1, r5
   11088:	463b      	mov	r3, r7
   1108a:	4620      	mov	r0, r4
   1108c:	47c0      	blx	r8
   1108e:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   11090:	4805      	ldr	r0, [pc, #20]	; (110a8 <settings_save_one+0x48>)
   11092:	f018 f977 	bl	29384 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   11096:	4620      	mov	r0, r4
   11098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
   1109c:	f06f 0401 	mvn.w	r4, #1
   110a0:	e7f9      	b.n	11096 <settings_save_one+0x36>
   110a2:	bf00      	nop
   110a4:	2000e384 	.word	0x2000e384
   110a8:	2000cf00 	.word	0x2000cf00

000110ac <settings_src_register>:
	parent->next = child;
   110ac:	2300      	movs	r3, #0
   110ae:	6003      	str	r3, [r0, #0]
	return list->tail;
   110b0:	4b04      	ldr	r3, [pc, #16]	; (110c4 <settings_src_register+0x18>)
   110b2:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   110b4:	b912      	cbnz	r2, 110bc <settings_src_register+0x10>
	list->head = node;
   110b6:	e9c3 0000 	strd	r0, r0, [r3]
}
   110ba:	4770      	bx	lr
	parent->next = child;
   110bc:	6010      	str	r0, [r2, #0]
	list->tail = node;
   110be:	6058      	str	r0, [r3, #4]
}
   110c0:	4770      	bx	lr
   110c2:	bf00      	nop
   110c4:	2000e388 	.word	0x2000e388

000110c8 <settings_dst_register>:
	settings_save_dst = cs;
   110c8:	4b01      	ldr	r3, [pc, #4]	; (110d0 <settings_dst_register+0x8>)
   110ca:	6018      	str	r0, [r3, #0]
}
   110cc:	4770      	bx	lr
   110ce:	bf00      	nop
   110d0:	2000e384 	.word	0x2000e384

000110d4 <settings_load_subtree>:
	const struct settings_load_arg arg = {
   110d4:	2300      	movs	r3, #0
{
   110d6:	b530      	push	{r4, r5, lr}
   110d8:	b085      	sub	sp, #20
   110da:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
   110dc:	e9cd 3302 	strd	r3, r3, [sp, #8]
   110e0:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   110e2:	f04f 33ff 	mov.w	r3, #4294967295
   110e6:	f04f 32ff 	mov.w	r2, #4294967295
   110ea:	480b      	ldr	r0, [pc, #44]	; (11118 <settings_load_subtree+0x44>)
   110ec:	f018 f87a 	bl	291e4 <z_impl_k_mutex_lock>
	return list->head;
   110f0:	4b0a      	ldr	r3, [pc, #40]	; (1111c <settings_load_subtree+0x48>)
   110f2:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   110f4:	b94c      	cbnz	r4, 1110a <settings_load_subtree+0x36>
	rc = settings_commit_subtree(subtree);
   110f6:	4628      	mov	r0, r5
   110f8:	f000 f8f6 	bl	112e8 <settings_commit_subtree>
   110fc:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   110fe:	4806      	ldr	r0, [pc, #24]	; (11118 <settings_load_subtree+0x44>)
   11100:	f018 f940 	bl	29384 <z_impl_k_mutex_unlock>
}
   11104:	4620      	mov	r0, r4
   11106:	b005      	add	sp, #20
   11108:	bd30      	pop	{r4, r5, pc}
		cs->cs_itf->csi_load(cs, &arg);
   1110a:	6863      	ldr	r3, [r4, #4]
   1110c:	4620      	mov	r0, r4
   1110e:	681b      	ldr	r3, [r3, #0]
   11110:	a901      	add	r1, sp, #4
   11112:	4798      	blx	r3
	return node->next;
   11114:	6824      	ldr	r4, [r4, #0]
   11116:	e7ed      	b.n	110f4 <settings_load_subtree+0x20>
   11118:	2000cf00 	.word	0x2000cf00
   1111c:	2000e388 	.word	0x2000e388

00011120 <settings_load_subtree_direct>:
{
   11120:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
   11122:	e9cd 0101 	strd	r0, r1, [sp, #4]
   11126:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
   11128:	f04f 33ff 	mov.w	r3, #4294967295
   1112c:	f04f 32ff 	mov.w	r2, #4294967295
   11130:	4809      	ldr	r0, [pc, #36]	; (11158 <settings_load_subtree_direct+0x38>)
   11132:	f018 f857 	bl	291e4 <z_impl_k_mutex_lock>
	return list->head;
   11136:	4b09      	ldr	r3, [pc, #36]	; (1115c <settings_load_subtree_direct+0x3c>)
   11138:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   1113a:	b92c      	cbnz	r4, 11148 <settings_load_subtree_direct+0x28>
	return z_impl_k_mutex_unlock(mutex);
   1113c:	4806      	ldr	r0, [pc, #24]	; (11158 <settings_load_subtree_direct+0x38>)
   1113e:	f018 f921 	bl	29384 <z_impl_k_mutex_unlock>
}
   11142:	4620      	mov	r0, r4
   11144:	b004      	add	sp, #16
   11146:	bd10      	pop	{r4, pc}
		cs->cs_itf->csi_load(cs, &arg);
   11148:	6863      	ldr	r3, [r4, #4]
   1114a:	4620      	mov	r0, r4
   1114c:	681b      	ldr	r3, [r3, #0]
   1114e:	a901      	add	r1, sp, #4
   11150:	4798      	blx	r3
	return node->next;
   11152:	6824      	ldr	r4, [r4, #0]
   11154:	e7f1      	b.n	1113a <settings_load_subtree_direct+0x1a>
   11156:	bf00      	nop
   11158:	2000cf00 	.word	0x2000cf00
   1115c:	2000e388 	.word	0x2000e388

00011160 <settings_store_init>:
	list->head = NULL;
   11160:	2200      	movs	r2, #0
   11162:	4b02      	ldr	r3, [pc, #8]	; (1116c <settings_store_init+0xc>)
	list->tail = NULL;
   11164:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
   11168:	4770      	bx	lr
   1116a:	bf00      	nop
   1116c:	2000e388 	.word	0x2000e388

00011170 <settings_init>:
	list->head = NULL;
   11170:	2200      	movs	r2, #0
   11172:	4b02      	ldr	r3, [pc, #8]	; (1117c <settings_init+0xc>)
	list->tail = NULL;
   11174:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
   11178:	f7ff bff2 	b.w	11160 <settings_store_init>
   1117c:	2000e390 	.word	0x2000e390

00011180 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
   11180:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   11184:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
   11186:	460c      	mov	r4, r1
   11188:	b109      	cbz	r1, 1118e <settings_parse_and_lookup+0xe>
		*next = NULL;
   1118a:	2300      	movs	r3, #0
   1118c:	600b      	str	r3, [r1, #0]
{
   1118e:	2600      	movs	r6, #0
   11190:	4d25      	ldr	r5, [pc, #148]	; (11228 <settings_parse_and_lookup+0xa8>)
	}

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   11192:	f8df 9098 	ldr.w	r9, [pc, #152]	; 1122c <settings_parse_and_lookup+0xac>
   11196:	454d      	cmp	r5, r9
   11198:	d924      	bls.n	111e4 <settings_parse_and_lookup+0x64>
   1119a:	4925      	ldr	r1, [pc, #148]	; (11230 <settings_parse_and_lookup+0xb0>)
   1119c:	2394      	movs	r3, #148	; 0x94
   1119e:	4a25      	ldr	r2, [pc, #148]	; (11234 <settings_parse_and_lookup+0xb4>)
   111a0:	4825      	ldr	r0, [pc, #148]	; (11238 <settings_parse_and_lookup+0xb8>)
   111a2:	f01e f90f 	bl	2f3c4 <assert_print>
   111a6:	4825      	ldr	r0, [pc, #148]	; (1123c <settings_parse_and_lookup+0xbc>)
   111a8:	f01e f90c 	bl	2f3c4 <assert_print>
   111ac:	2194      	movs	r1, #148	; 0x94
   111ae:	4821      	ldr	r0, [pc, #132]	; (11234 <settings_parse_and_lookup+0xb4>)
   111b0:	f01e f901 	bl	2f3b6 <assert_post_action>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   111b4:	f8d5 8000 	ldr.w	r8, [r5]
   111b8:	4638      	mov	r0, r7
   111ba:	4641      	mov	r1, r8
   111bc:	aa01      	add	r2, sp, #4
   111be:	f01e fe85 	bl	2fecc <settings_name_steq>
   111c2:	b150      	cbz	r0, 111da <settings_parse_and_lookup+0x5a>
			continue;
		}
		if (!bestmatch) {
   111c4:	b916      	cbnz	r6, 111cc <settings_parse_and_lookup+0x4c>
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
			bestmatch = ch;
			if (next) {
   111c6:	b954      	cbnz	r4, 111de <settings_parse_and_lookup+0x5e>
{
   111c8:	462e      	mov	r6, r5
   111ca:	e006      	b.n	111da <settings_parse_and_lookup+0x5a>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   111cc:	2200      	movs	r2, #0
   111ce:	4640      	mov	r0, r8
   111d0:	6831      	ldr	r1, [r6, #0]
   111d2:	f01e fe7b 	bl	2fecc <settings_name_steq>
   111d6:	2800      	cmp	r0, #0
   111d8:	d1f5      	bne.n	111c6 <settings_parse_and_lookup+0x46>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   111da:	3514      	adds	r5, #20
   111dc:	e7db      	b.n	11196 <settings_parse_and_lookup+0x16>
				*next = tmpnext;
   111de:	9b01      	ldr	r3, [sp, #4]
   111e0:	6023      	str	r3, [r4, #0]
   111e2:	e7f1      	b.n	111c8 <settings_parse_and_lookup+0x48>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   111e4:	d3e6      	bcc.n	111b4 <settings_parse_and_lookup+0x34>
	return list->head;
   111e6:	4b16      	ldr	r3, [pc, #88]	; (11240 <settings_parse_and_lookup+0xc0>)
   111e8:	681d      	ldr	r5, [r3, #0]
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   111ea:	b1c5      	cbz	r5, 1121e <settings_parse_and_lookup+0x9e>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   111ec:	f855 8c14 	ldr.w	r8, [r5, #-20]
   111f0:	4638      	mov	r0, r7
   111f2:	4641      	mov	r1, r8
   111f4:	aa01      	add	r2, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   111f6:	3d14      	subs	r5, #20
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   111f8:	f01e fe68 	bl	2fecc <settings_name_steq>
   111fc:	b150      	cbz	r0, 11214 <settings_parse_and_lookup+0x94>
			continue;
		}
		if (!bestmatch) {
   111fe:	b916      	cbnz	r6, 11206 <settings_parse_and_lookup+0x86>
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
			bestmatch = (struct settings_handler_static *)ch;
			if (next) {
   11200:	b954      	cbnz	r4, 11218 <settings_parse_and_lookup+0x98>
{
   11202:	462e      	mov	r6, r5
   11204:	e006      	b.n	11214 <settings_parse_and_lookup+0x94>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   11206:	2200      	movs	r2, #0
   11208:	4640      	mov	r0, r8
   1120a:	6831      	ldr	r1, [r6, #0]
   1120c:	f01e fe5e 	bl	2fecc <settings_name_steq>
   11210:	2800      	cmp	r0, #0
   11212:	d1f5      	bne.n	11200 <settings_parse_and_lookup+0x80>
	return node->next;
   11214:	696d      	ldr	r5, [r5, #20]
   11216:	e7e8      	b.n	111ea <settings_parse_and_lookup+0x6a>
				*next = tmpnext;
   11218:	9b01      	ldr	r3, [sp, #4]
   1121a:	6023      	str	r3, [r4, #0]
   1121c:	e7f1      	b.n	11202 <settings_parse_and_lookup+0x82>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
   1121e:	4630      	mov	r0, r6
   11220:	b003      	add	sp, #12
   11222:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11226:	bf00      	nop
   11228:	00037a78 	.word	0x00037a78
   1122c:	00037af0 	.word	0x00037af0
   11230:	0003a649 	.word	0x0003a649
   11234:	0003a617 	.word	0x0003a617
   11238:	00039995 	.word	0x00039995
   1123c:	0003a18c 	.word	0x0003a18c
   11240:	2000e390 	.word	0x2000e390

00011244 <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
   11244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11248:	b084      	sub	sp, #16
   1124a:	af02      	add	r7, sp, #8
   1124c:	f8d7 9028 	ldr.w	r9, [r7, #40]	; 0x28
   11250:	4604      	mov	r4, r0
   11252:	460d      	mov	r5, r1
   11254:	4616      	mov	r6, r2
   11256:	4698      	mov	r8, r3
	int rc;
	const char *name_key = name;
   11258:	6078      	str	r0, [r7, #4]

	if (load_arg && load_arg->subtree &&
   1125a:	f1b9 0f00 	cmp.w	r9, #0
   1125e:	d007      	beq.n	11270 <settings_call_set_handler+0x2c>
   11260:	f8d9 1000 	ldr.w	r1, [r9]
   11264:	bb31      	cbnz	r1, 112b4 <settings_call_set_handler+0x70>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
		return 0;
	}

	if (load_arg && load_arg->cb) {
   11266:	f8d9 a004 	ldr.w	sl, [r9, #4]
   1126a:	f1ba 0f00 	cmp.w	sl, #0
   1126e:	d128      	bne.n	112c2 <settings_call_set_handler+0x7e>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
				  load_arg->param);
	} else {
		struct settings_handler_static *ch;

		ch = settings_parse_and_lookup(name, &name_key);
   11270:	4620      	mov	r0, r4
   11272:	1d39      	adds	r1, r7, #4
   11274:	f7ff ff84 	bl	11180 <settings_parse_and_lookup>
		if (!ch) {
   11278:	b308      	cbz	r0, 112be <settings_call_set_handler+0x7a>
			return 0;
		}

		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
   1127a:	f8d0 9008 	ldr.w	r9, [r0, #8]
   1127e:	4643      	mov	r3, r8
   11280:	4632      	mov	r2, r6
   11282:	4629      	mov	r1, r5
   11284:	6878      	ldr	r0, [r7, #4]
   11286:	47c8      	blx	r9

		if (rc != 0) {
   11288:	b1c8      	cbz	r0, 112be <settings_call_set_handler+0x7a>
			LOG_ERR("set-value failure. key: %s error(%d)",
   1128a:	466d      	mov	r5, sp
   1128c:	b08a      	sub	sp, #40	; 0x28
   1128e:	aa02      	add	r2, sp, #8
   11290:	4b12      	ldr	r3, [pc, #72]	; (112dc <settings_call_set_handler+0x98>)
   11292:	61d0      	str	r0, [r2, #28]
   11294:	e9c2 3405 	strd	r3, r4, [r2, #20]
   11298:	f44f 7300 	mov.w	r3, #512	; 0x200
   1129c:	8413      	strh	r3, [r2, #32]
   1129e:	4b10      	ldr	r3, [pc, #64]	; (112e0 <settings_call_set_handler+0x9c>)
   112a0:	f842 3f10 	str.w	r3, [r2, #16]!
   112a4:	2300      	movs	r3, #0
   112a6:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   112aa:	480e      	ldr	r0, [pc, #56]	; (112e4 <settings_call_set_handler+0xa0>)
   112ac:	f7fe ffc2 	bl	10234 <z_impl_z_log_msg_static_create>
   112b0:	46ad      	mov	sp, r5
				name, rc);
			/* Ignoring the error */
			rc = 0;
   112b2:	e004      	b.n	112be <settings_call_set_handler+0x7a>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
   112b4:	1d3a      	adds	r2, r7, #4
   112b6:	f01e fe09 	bl	2fecc <settings_name_steq>
	if (load_arg && load_arg->subtree &&
   112ba:	2800      	cmp	r0, #0
   112bc:	d1d3      	bne.n	11266 <settings_call_set_handler+0x22>
		return 0;
   112be:	2000      	movs	r0, #0
   112c0:	e007      	b.n	112d2 <settings_call_set_handler+0x8e>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   112c2:	f8d9 3008 	ldr.w	r3, [r9, #8]
   112c6:	4632      	mov	r2, r6
   112c8:	9300      	str	r3, [sp, #0]
   112ca:	4629      	mov	r1, r5
   112cc:	4643      	mov	r3, r8
   112ce:	6878      	ldr	r0, [r7, #4]
   112d0:	47d0      	blx	sl
			LOG_DBG("set-value OK. key: %s",
				name);
		}
	}
	return rc;
}
   112d2:	3708      	adds	r7, #8
   112d4:	46bd      	mov	sp, r7
   112d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   112da:	bf00      	nop
   112dc:	0003a671 	.word	0x0003a671
   112e0:	01000004 	.word	0x01000004
   112e4:	00037a50 	.word	0x00037a50

000112e8 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   112e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   112ea:	4606      	mov	r6, r0
	int rc;
	int rc2;

	rc = 0;
   112ec:	2500      	movs	r5, #0

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   112ee:	4c1e      	ldr	r4, [pc, #120]	; (11368 <settings_commit_subtree+0x80>)
   112f0:	4f1e      	ldr	r7, [pc, #120]	; (1136c <settings_commit_subtree+0x84>)
   112f2:	42bc      	cmp	r4, r7
   112f4:	d91f      	bls.n	11336 <settings_commit_subtree+0x4e>
   112f6:	491e      	ldr	r1, [pc, #120]	; (11370 <settings_commit_subtree+0x88>)
   112f8:	23f4      	movs	r3, #244	; 0xf4
   112fa:	4a1e      	ldr	r2, [pc, #120]	; (11374 <settings_commit_subtree+0x8c>)
   112fc:	481e      	ldr	r0, [pc, #120]	; (11378 <settings_commit_subtree+0x90>)
   112fe:	f01e f861 	bl	2f3c4 <assert_print>
   11302:	481e      	ldr	r0, [pc, #120]	; (1137c <settings_commit_subtree+0x94>)
   11304:	f01e f85e 	bl	2f3c4 <assert_print>
   11308:	21f4      	movs	r1, #244	; 0xf4
   1130a:	481a      	ldr	r0, [pc, #104]	; (11374 <settings_commit_subtree+0x8c>)
   1130c:	f01e f853 	bl	2f3b6 <assert_post_action>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   11310:	b92e      	cbnz	r6, 1131e <settings_commit_subtree+0x36>
			continue;
		}
		if (ch->h_commit) {
   11312:	68e3      	ldr	r3, [r4, #12]
   11314:	b95b      	cbnz	r3, 1132e <settings_commit_subtree+0x46>
{
   11316:	4628      	mov	r0, r5
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   11318:	4605      	mov	r5, r0
   1131a:	3414      	adds	r4, #20
   1131c:	e7e9      	b.n	112f2 <settings_commit_subtree+0xa>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   1131e:	2200      	movs	r2, #0
   11320:	4631      	mov	r1, r6
   11322:	6820      	ldr	r0, [r4, #0]
   11324:	f01e fdd2 	bl	2fecc <settings_name_steq>
   11328:	2800      	cmp	r0, #0
   1132a:	d1f2      	bne.n	11312 <settings_commit_subtree+0x2a>
   1132c:	e7f3      	b.n	11316 <settings_commit_subtree+0x2e>
			rc2 = ch->h_commit();
   1132e:	4798      	blx	r3
			if (!rc) {
   11330:	2d00      	cmp	r5, #0
   11332:	d1f0      	bne.n	11316 <settings_commit_subtree+0x2e>
   11334:	e7f0      	b.n	11318 <settings_commit_subtree+0x30>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   11336:	d3eb      	bcc.n	11310 <settings_commit_subtree+0x28>
	return list->head;
   11338:	4b11      	ldr	r3, [pc, #68]	; (11380 <settings_commit_subtree+0x98>)
   1133a:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   1133c:	b194      	cbz	r4, 11364 <settings_commit_subtree+0x7c>
   1133e:	3c14      	subs	r4, #20
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   11340:	b91e      	cbnz	r6, 1134a <settings_commit_subtree+0x62>
			continue;
		}
		if (ch->h_commit) {
   11342:	68e3      	ldr	r3, [r4, #12]
   11344:	b94b      	cbnz	r3, 1135a <settings_commit_subtree+0x72>
	return node->next;
   11346:	6964      	ldr	r4, [r4, #20]
   11348:	e7f8      	b.n	1133c <settings_commit_subtree+0x54>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   1134a:	2200      	movs	r2, #0
   1134c:	4631      	mov	r1, r6
   1134e:	6820      	ldr	r0, [r4, #0]
   11350:	f01e fdbc 	bl	2fecc <settings_name_steq>
   11354:	2800      	cmp	r0, #0
   11356:	d1f4      	bne.n	11342 <settings_commit_subtree+0x5a>
   11358:	e7f5      	b.n	11346 <settings_commit_subtree+0x5e>
			rc2 = ch->h_commit();
   1135a:	4798      	blx	r3
			if (!rc) {
				rc = rc2;
   1135c:	2d00      	cmp	r5, #0
   1135e:	bf08      	it	eq
   11360:	4605      	moveq	r5, r0
   11362:	e7f0      	b.n	11346 <settings_commit_subtree+0x5e>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   11364:	4628      	mov	r0, r5
   11366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11368:	00037a78 	.word	0x00037a78
   1136c:	00037af0 	.word	0x00037af0
   11370:	0003a649 	.word	0x0003a649
   11374:	0003a617 	.word	0x0003a617
   11378:	00039995 	.word	0x00039995
   1137c:	0003a18c 	.word	0x0003a18c
   11380:	2000e390 	.word	0x2000e390

00011384 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   11384:	b538      	push	{r3, r4, r5, lr}

	int err = 0;

	k_mutex_lock(&settings_lock, K_FOREVER);

	if (!settings_subsys_initialized) {
   11386:	4d0c      	ldr	r5, [pc, #48]	; (113b8 <settings_subsys_init+0x34>)
	return z_impl_k_mutex_lock(mutex, timeout);
   11388:	f04f 33ff 	mov.w	r3, #4294967295
   1138c:	f04f 32ff 	mov.w	r2, #4294967295
   11390:	480a      	ldr	r0, [pc, #40]	; (113bc <settings_subsys_init+0x38>)
   11392:	f017 ff27 	bl	291e4 <z_impl_k_mutex_lock>
   11396:	782b      	ldrb	r3, [r5, #0]
   11398:	b93b      	cbnz	r3, 113aa <settings_subsys_init+0x26>
		settings_init();
   1139a:	f7ff fee9 	bl	11170 <settings_init>

		err = settings_backend_init();
   1139e:	f000 f86d 	bl	1147c <settings_backend_init>

		if (!err) {
   113a2:	4604      	mov	r4, r0
   113a4:	b910      	cbnz	r0, 113ac <settings_subsys_init+0x28>
			settings_subsys_initialized = true;
   113a6:	2301      	movs	r3, #1
   113a8:	702b      	strb	r3, [r5, #0]
	int err = 0;
   113aa:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
   113ac:	4803      	ldr	r0, [pc, #12]	; (113bc <settings_subsys_init+0x38>)
   113ae:	f017 ffe9 	bl	29384 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&settings_lock);

	return err;
}
   113b2:	4620      	mov	r0, r4
   113b4:	bd38      	pop	{r3, r4, r5, pc}
   113b6:	bf00      	nop
   113b8:	2000f126 	.word	0x2000f126
   113bc:	2000cf00 	.word	0x2000cf00

000113c0 <settings_nvs_load>:
}
#endif /* CONFIG_SETTINGS_NVS_NAME_CACHE */

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
   113c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   113c4:	4680      	mov	r8, r0
   113c6:	4689      	mov	r9, r1
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
   113c8:	8f04      	ldrh	r4, [r0, #56]	; 0x38

#if CONFIG_SETTINGS_NVS_NAME_CACHE
		settings_nvs_cache_add(cf, name, name_id);
#endif

		ret = settings_call_set_handler(
   113ca:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 11478 <settings_nvs_load+0xb8>
	name_id = cf->last_name_id + 1;
   113ce:	3401      	adds	r4, #1
{
   113d0:	b098      	sub	sp, #96	; 0x60
	name_id = cf->last_name_id + 1;
   113d2:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   113d4:	f100 0608 	add.w	r6, r0, #8
		name_id--;
   113d8:	1e65      	subs	r5, r4, #1
   113da:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
   113dc:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   113e0:	d047      	beq.n	11472 <settings_nvs_load+0xb2>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   113e2:	234a      	movs	r3, #74	; 0x4a
   113e4:	4629      	mov	r1, r5
   113e6:	aa05      	add	r2, sp, #20
   113e8:	4630      	mov	r0, r6
   113ea:	f01e fb7b 	bl	2fae4 <nvs_read>
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   113ee:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
   113f2:	343f      	adds	r4, #63	; 0x3f
   113f4:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   113f6:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   113f8:	4621      	mov	r1, r4
   113fa:	2301      	movs	r3, #1
   113fc:	4630      	mov	r0, r6
   113fe:	f10d 020b 	add.w	r2, sp, #11
   11402:	f01e fb6f 	bl	2fae4 <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
   11406:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   11408:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
   1140a:	dc03      	bgt.n	11414 <settings_nvs_load+0x54>
   1140c:	2800      	cmp	r0, #0
   1140e:	dc03      	bgt.n	11418 <settings_nvs_load+0x58>
{
   11410:	462c      	mov	r4, r5
   11412:	e7e1      	b.n	113d8 <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
   11414:	2800      	cmp	r0, #0
   11416:	dc16      	bgt.n	11446 <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
   11418:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
   1141c:	42ab      	cmp	r3, r5
   1141e:	d109      	bne.n	11434 <settings_nvs_load+0x74>
				cf->last_name_id--;
   11420:	4642      	mov	r2, r8
   11422:	1e6b      	subs	r3, r5, #1
   11424:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   11428:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1142c:	2302      	movs	r3, #2
   1142e:	4630      	mov	r0, r6
   11430:	f7fe fa4e 	bl	f8d0 <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
   11434:	4629      	mov	r1, r5
   11436:	4630      	mov	r0, r6
   11438:	f01e fb50 	bl	2fadc <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
   1143c:	4621      	mov	r1, r4
   1143e:	4630      	mov	r0, r6
   11440:	f01e fb4c 	bl	2fadc <nvs_delete>
			continue;
   11444:	e7e4      	b.n	11410 <settings_nvs_load+0x50>
		name[rc1] = '\0';
   11446:	f107 0360 	add.w	r3, r7, #96	; 0x60
   1144a:	eb0d 0703 	add.w	r7, sp, r3
   1144e:	2300      	movs	r3, #0
		ret = settings_call_set_handler(
   11450:	4652      	mov	r2, sl
		name[rc1] = '\0';
   11452:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
   11456:	a805      	add	r0, sp, #20
   11458:	f8cd 9000 	str.w	r9, [sp]
   1145c:	ab03      	add	r3, sp, #12
		read_fn_arg.fs = &cf->cf_nvs;
   1145e:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
   11460:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
   11464:	f7ff feee 	bl	11244 <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
   11468:	2800      	cmp	r0, #0
   1146a:	d0d1      	beq.n	11410 <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
   1146c:	b018      	add	sp, #96	; 0x60
   1146e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11472:	2000      	movs	r0, #0
	return ret;
   11474:	e7fa      	b.n	1146c <settings_nvs_load+0xac>
   11476:	bf00      	nop
   11478:	0002ff3d 	.word	0x0002ff3d

0001147c <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
   1147c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
   1147e:	2301      	movs	r3, #1

	rc = flash_area_open(SETTINGS_PARTITION, &fa);
   11480:	4669      	mov	r1, sp
   11482:	2005      	movs	r0, #5
	uint32_t sector_cnt = 1;
   11484:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(SETTINGS_PARTITION, &fa);
   11486:	f7ff fbdb 	bl	10c40 <flash_area_open>
	if (rc) {
   1148a:	4604      	mov	r4, r0
   1148c:	bb60      	cbnz	r0, 114e8 <settings_backend_init+0x6c>
		return rc;
	}

	rc = flash_area_get_sectors(SETTINGS_PARTITION, &sector_cnt,
   1148e:	2005      	movs	r0, #5
   11490:	aa02      	add	r2, sp, #8
   11492:	a901      	add	r1, sp, #4
   11494:	f7ff fbfc 	bl	10c90 <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc != 0 && rc != -ENOMEM) {
   11498:	4604      	mov	r4, r0
   1149a:	b110      	cbz	r0, 114a2 <settings_backend_init+0x26>
   1149c:	f110 0f0c 	cmn.w	r0, #12
   114a0:	d122      	bne.n	114e8 <settings_backend_init+0x6c>
		return rc;
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
   114a2:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
   114a4:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   114a8:	d223      	bcs.n	114f2 <settings_backend_init+0x76>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
   114aa:	2300      	movs	r3, #0
	size_t nvs_sector_size, nvs_size = 0;
   114ac:	4618      	mov	r0, r3
		if (nvs_size > fa->fa_size) {
   114ae:	9a00      	ldr	r2, [sp, #0]
   114b0:	6894      	ldr	r4, [r2, #8]
		nvs_size += nvs_sector_size;
   114b2:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
   114b4:	4284      	cmp	r4, r0
   114b6:	d31a      	bcc.n	114ee <settings_backend_init+0x72>
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
   114b8:	3301      	adds	r3, #1
   114ba:	2b08      	cmp	r3, #8
   114bc:	d1f9      	bne.n	114b2 <settings_backend_init+0x36>
		}
		cnt++;
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   114be:	4d0e      	ldr	r5, [pc, #56]	; (114f8 <settings_backend_init+0x7c>)
   114c0:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.cf_nvs.sector_count = cnt;
   114c2:	82eb      	strh	r3, [r5, #22]
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
   114c4:	6853      	ldr	r3, [r2, #4]
	default_settings_nvs.flash_dev = fa->fa_dev;

	rc = settings_nvs_backend_init(&default_settings_nvs);
   114c6:	4628      	mov	r0, r5
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
   114c8:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev = fa->fa_dev;
   114ca:	68d3      	ldr	r3, [r2, #12]
   114cc:	63eb      	str	r3, [r5, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
   114ce:	f01e fdcf 	bl	30070 <settings_nvs_backend_init>
	if (rc) {
   114d2:	4604      	mov	r4, r0
   114d4:	b940      	cbnz	r0, 114e8 <settings_backend_init+0x6c>
	cf->cf_store.cs_itf = &settings_nvs_itf;
   114d6:	4e09      	ldr	r6, [pc, #36]	; (114fc <settings_backend_init+0x80>)
	settings_src_register(&cf->cf_store);
   114d8:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
   114da:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
   114dc:	f7ff fde6 	bl	110ac <settings_src_register>
	settings_dst_register(&cf->cf_store);
   114e0:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
   114e2:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
   114e4:	f7ff fdf0 	bl	110c8 <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
   114e8:	4620      	mov	r0, r4
   114ea:	b004      	add	sp, #16
   114ec:	bd70      	pop	{r4, r5, r6, pc}
   114ee:	b29b      	uxth	r3, r3
   114f0:	e7e5      	b.n	114be <settings_backend_init+0x42>
		return -EDOM;
   114f2:	f06f 0420 	mvn.w	r4, #32
   114f6:	e7f7      	b.n	114e8 <settings_backend_init+0x6c>
   114f8:	2000e398 	.word	0x2000e398
   114fc:	2000c80c 	.word	0x2000c80c

00011500 <get_uuid_size.part.0>:

	dm->cur_chunk_len = 0;
}

/* Returns size of UUID structure with padding for memory alignment */
static size_t get_uuid_size(const struct bt_uuid *uuid)
   11500:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	case BT_UUID_TYPE_32:
		return sizeof(struct bt_uuid_32);
	case BT_UUID_TYPE_128:
		return sizeof(struct bt_uuid_128);
	default:
		LOG_ERR("Unsupported UUID type.");
   11502:	4b07      	ldr	r3, [pc, #28]	; (11520 <get_uuid_size.part.0+0x20>)
   11504:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11508:	9305      	str	r3, [sp, #20]
   1150a:	2302      	movs	r3, #2
   1150c:	4805      	ldr	r0, [pc, #20]	; (11524 <get_uuid_size.part.0+0x24>)
   1150e:	aa04      	add	r2, sp, #16
   11510:	9304      	str	r3, [sp, #16]
   11512:	f01e fe0e 	bl	30132 <z_log_msg_static_create.constprop.0>
		return 0;
	}
}
   11516:	2000      	movs	r0, #0
   11518:	b007      	add	sp, #28
   1151a:	f85d fb04 	ldr.w	pc, [sp], #4
   1151e:	bf00      	nop
   11520:	0003a696 	.word	0x0003a696
   11524:	000378e8 	.word	0x000378e8

00011528 <user_data_alloc.constprop.0>:
static void *user_data_alloc(struct bt_gatt_dm *dm,
   11528:	b538      	push	{r3, r4, r5, lr}
	len = ROUND_UP(len, DATA_ALIGN);
   1152a:	1cc5      	adds	r5, r0, #3
   1152c:	f025 0503 	bic.w	r5, r5, #3
	__ASSERT_NO_MSG(len <= CHUNK_DATA_SIZE);
   11530:	2d74      	cmp	r5, #116	; 0x74
   11532:	d909      	bls.n	11548 <user_data_alloc.constprop.0+0x20>
   11534:	4917      	ldr	r1, [pc, #92]	; (11594 <user_data_alloc.constprop.0+0x6c>)
   11536:	4818      	ldr	r0, [pc, #96]	; (11598 <user_data_alloc.constprop.0+0x70>)
   11538:	235b      	movs	r3, #91	; 0x5b
   1153a:	4a18      	ldr	r2, [pc, #96]	; (1159c <user_data_alloc.constprop.0+0x74>)
   1153c:	f01d ff42 	bl	2f3c4 <assert_print>
   11540:	215b      	movs	r1, #91	; 0x5b
   11542:	4816      	ldr	r0, [pc, #88]	; (1159c <user_data_alloc.constprop.0+0x74>)
   11544:	f01d ff37 	bl	2f3b6 <assert_post_action>
	return list->head;
   11548:	4c15      	ldr	r4, [pc, #84]	; (115a0 <user_data_alloc.constprop.0+0x78>)
	if (sys_slist_is_empty(&dm->chunk_list) ||
   1154a:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
   1154e:	b123      	cbz	r3, 1155a <user_data_alloc.constprop.0+0x32>
	    dm->cur_chunk_len + len > CHUNK_DATA_SIZE) {
   11550:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
   11554:	442b      	add	r3, r5
	if (sys_slist_is_empty(&dm->chunk_list) ||
   11556:	2b74      	cmp	r3, #116	; 0x74
   11558:	d919      	bls.n	1158e <user_data_alloc.constprop.0+0x66>
		item = k_calloc(1, sizeof(struct data_chunk_item));
   1155a:	2178      	movs	r1, #120	; 0x78
   1155c:	2001      	movs	r0, #1
   1155e:	f024 ffb4 	bl	364ca <k_calloc>
		if (!item) {
   11562:	b178      	cbz	r0, 11584 <user_data_alloc.constprop.0+0x5c>
	parent->next = child;
   11564:	2300      	movs	r3, #0
   11566:	6003      	str	r3, [r0, #0]
	return list->tail;
   11568:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
Z_GENLIST_APPEND(slist, snode)
   1156c:	b95a      	cbnz	r2, 11586 <user_data_alloc.constprop.0+0x5e>
	list->head = node;
   1156e:	e9c4 0054 	strd	r0, r0, [r4, #336]	; 0x150
		dm->cur_chunk_len = 0;
   11572:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	user_data_loc = &item->data[dm->cur_chunk_len];
   11576:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
   1157a:	1d1a      	adds	r2, r3, #4
	dm->cur_chunk_len += len;
   1157c:	441d      	add	r5, r3
	user_data_loc = &item->data[dm->cur_chunk_len];
   1157e:	4410      	add	r0, r2
	dm->cur_chunk_len += len;
   11580:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
}
   11584:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
   11586:	6010      	str	r0, [r2, #0]
	list->tail = node;
   11588:	f8c4 0154 	str.w	r0, [r4, #340]	; 0x154
}
   1158c:	e7f1      	b.n	11572 <user_data_alloc.constprop.0+0x4a>
	return list->tail;
   1158e:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
   11592:	e7f0      	b.n	11576 <user_data_alloc.constprop.0+0x4e>
   11594:	0003a6d8 	.word	0x0003a6d8
   11598:	00039995 	.word	0x00039995
   1159c:	0003a6ad 	.word	0x0003a6ad
   115a0:	2000e3d8 	.word	0x2000e3d8

000115a4 <discovery_complete.constprop.0>:
   115a4:	4808      	ldr	r0, [pc, #32]	; (115c8 <discovery_complete.constprop.0+0x24>)
   115a6:	e8d0 3fef 	ldaex	r3, [r0]
   115aa:	f043 0302 	orr.w	r3, r3, #2
   115ae:	e8c0 3fe2 	stlex	r2, r3, [r0]
   115b2:	2a00      	cmp	r2, #0
   115b4:	d1f7      	bne.n	115a6 <discovery_complete.constprop.0+0x2>

static void discovery_complete(struct bt_gatt_dm *dm)
{
	LOG_DBG("Discovery complete.");
	atomic_set_bit(dm->state_flags, STATE_ATTRS_RELEASE_PENDING);
	if (dm->callback->completed) {
   115b6:	6a43      	ldr	r3, [r0, #36]	; 0x24
   115b8:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
   115bc:	681b      	ldr	r3, [r3, #0]
   115be:	b10b      	cbz	r3, 115c4 <discovery_complete.constprop.0+0x20>
		dm->callback->completed(dm, dm->context);
   115c0:	6841      	ldr	r1, [r0, #4]
   115c2:	4718      	bx	r3
	}
}
   115c4:	4770      	bx	lr
   115c6:	bf00      	nop
   115c8:	2000e510 	.word	0x2000e510

000115cc <get_uuid_size.isra.0>:
	switch (uuid->type) {
   115cc:	2802      	cmp	r0, #2
   115ce:	d901      	bls.n	115d4 <get_uuid_size.isra.0+0x8>
   115d0:	f7ff bf96 	b.w	11500 <get_uuid_size.part.0>
   115d4:	4b01      	ldr	r3, [pc, #4]	; (115dc <get_uuid_size.isra.0+0x10>)
   115d6:	5c18      	ldrb	r0, [r3, r0]
}
   115d8:	4770      	bx	lr
   115da:	bf00      	nop
   115dc:	0003aa81 	.word	0x0003aa81

000115e0 <attr_store.constprop.0>:
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
   115e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
   115e4:	4c1c      	ldr	r4, [pc, #112]	; (11658 <attr_store.constprop.0+0x78>)
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
   115e6:	4605      	mov	r5, r0
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
   115e8:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
   115ec:	460e      	mov	r6, r1
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
   115ee:	2b22      	cmp	r3, #34	; 0x22
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
   115f0:	b086      	sub	sp, #24
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
   115f2:	d90f      	bls.n	11614 <attr_store.constprop.0+0x34>
		LOG_ERR("No space for new attribute.");
   115f4:	4b19      	ldr	r3, [pc, #100]	; (1165c <attr_store.constprop.0+0x7c>)
		LOG_ERR("No space for attribute data.");
   115f6:	9305      	str	r3, [sp, #20]
		return NULL;
   115f8:	f04f 0800 	mov.w	r8, #0
		LOG_ERR("No space for attribute data.");
   115fc:	2302      	movs	r3, #2
   115fe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11602:	4817      	ldr	r0, [pc, #92]	; (11660 <attr_store.constprop.0+0x80>)
   11604:	aa04      	add	r2, sp, #16
   11606:	9304      	str	r3, [sp, #16]
   11608:	f01e fd93 	bl	30132 <z_log_msg_static_create.constprop.0>
}
   1160c:	4640      	mov	r0, r8
   1160e:	b006      	add	sp, #24
   11610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	size_t uuid_size = get_uuid_size(attr->uuid);
   11614:	6803      	ldr	r3, [r0, #0]
   11616:	7818      	ldrb	r0, [r3, #0]
   11618:	f7ff ffd8 	bl	115cc <get_uuid_size.isra.0>
   1161c:	4607      	mov	r7, r0
	uint8_t *attr_data = user_data_alloc(dm, additional_len + uuid_size);
   1161e:	4430      	add	r0, r6
   11620:	f7ff ff82 	bl	11528 <user_data_alloc.constprop.0>
	if (!attr_data) {
   11624:	b908      	cbnz	r0, 1162a <attr_store.constprop.0+0x4a>
		LOG_ERR("No space for attribute data.");
   11626:	4b0f      	ldr	r3, [pc, #60]	; (11664 <attr_store.constprop.0+0x84>)
   11628:	e7e5      	b.n	115f6 <attr_store.constprop.0+0x16>
	cur_attr = &dm->attrs[(dm->cur_attr_id)++];
   1162a:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
	cur_attr->uuid = (struct bt_uuid *)&attr_data[additional_len];
   1162e:	4430      	add	r0, r6
	cur_attr = &dm->attrs[(dm->cur_attr_id)++];
   11630:	1c5a      	adds	r2, r3, #1
   11632:	3303      	adds	r3, #3
   11634:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
   11638:	00db      	lsls	r3, r3, #3
	cur_attr->handle = attr->handle;
   1163a:	8a2a      	ldrh	r2, [r5, #16]
	cur_attr = &dm->attrs[(dm->cur_attr_id)++];
   1163c:	f103 0804 	add.w	r8, r3, #4
   11640:	44a0      	add	r8, r4
	cur_attr->handle = attr->handle;
   11642:	441c      	add	r4, r3
   11644:	8122      	strh	r2, [r4, #8]
	cur_attr->perm = attr->perm;
   11646:	8a6b      	ldrh	r3, [r5, #18]
	cur_attr->uuid = (struct bt_uuid *)&attr_data[additional_len];
   11648:	6060      	str	r0, [r4, #4]
	cur_attr->perm = attr->perm;
   1164a:	72a3      	strb	r3, [r4, #10]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1164c:	463a      	mov	r2, r7
   1164e:	6829      	ldr	r1, [r5, #0]
   11650:	f024 ff6a 	bl	36528 <memcpy>
   11654:	e7da      	b.n	1160c <attr_store.constprop.0+0x2c>
   11656:	bf00      	nop
   11658:	2000e3d8 	.word	0x2000e3d8
   1165c:	0003a728 	.word	0x0003a728
   11660:	000378e8 	.word	0x000378e8
   11664:	0003a744 	.word	0x0003a744

00011668 <uuid_store.constprop.0>:
static struct bt_uuid *uuid_store(struct bt_gatt_dm *dm,
   11668:	b570      	push	{r4, r5, r6, lr}
	if (!uuid) {
   1166a:	4605      	mov	r5, r0
static struct bt_uuid *uuid_store(struct bt_gatt_dm *dm,
   1166c:	b086      	sub	sp, #24
	if (!uuid) {
   1166e:	b968      	cbnz	r0, 1168c <uuid_store.constprop.0+0x24>
		LOG_ERR("Uninitialized UUID.");
   11670:	4b0e      	ldr	r3, [pc, #56]	; (116ac <uuid_store.constprop.0+0x44>)
		LOG_ERR("No space for a UUID.");
   11672:	9305      	str	r3, [sp, #20]
		return NULL;
   11674:	2400      	movs	r4, #0
		LOG_ERR("No space for a UUID.");
   11676:	2302      	movs	r3, #2
   11678:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1167c:	480c      	ldr	r0, [pc, #48]	; (116b0 <uuid_store.constprop.0+0x48>)
   1167e:	aa04      	add	r2, sp, #16
   11680:	9304      	str	r3, [sp, #16]
   11682:	f01e fd56 	bl	30132 <z_log_msg_static_create.constprop.0>
}
   11686:	4620      	mov	r0, r4
   11688:	b006      	add	sp, #24
   1168a:	bd70      	pop	{r4, r5, r6, pc}
	size_t size = get_uuid_size(uuid);
   1168c:	7800      	ldrb	r0, [r0, #0]
   1168e:	f7ff ff9d 	bl	115cc <get_uuid_size.isra.0>
   11692:	4606      	mov	r6, r0
	void *buffer = user_data_alloc(dm, size);
   11694:	f7ff ff48 	bl	11528 <user_data_alloc.constprop.0>
   11698:	4604      	mov	r4, r0
	if (!buffer) {
   1169a:	b908      	cbnz	r0, 116a0 <uuid_store.constprop.0+0x38>
		LOG_ERR("No space for a UUID.");
   1169c:	4b05      	ldr	r3, [pc, #20]	; (116b4 <uuid_store.constprop.0+0x4c>)
   1169e:	e7e8      	b.n	11672 <uuid_store.constprop.0+0xa>
   116a0:	4632      	mov	r2, r6
   116a2:	4629      	mov	r1, r5
   116a4:	f024 ff40 	bl	36528 <memcpy>
   116a8:	e7ed      	b.n	11686 <uuid_store.constprop.0+0x1e>
   116aa:	bf00      	nop
   116ac:	0003a761 	.word	0x0003a761
   116b0:	000378e8 	.word	0x000378e8
   116b4:	0003a775 	.word	0x0003a775

000116b8 <discovery_callback>:
}

static uint8_t discovery_callback(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr,
			       struct bt_gatt_discover_params *params)
{
   116b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   116bc:	b089      	sub	sp, #36	; 0x24
		LOG_DBG("NULL attribute");
	} else {
		LOG_DBG("Attr: handle %u", attr->handle);
	}

	if (conn != bt_gatt_dm_inst.conn) {
   116be:	4c9e      	ldr	r4, [pc, #632]	; (11938 <discovery_callback+0x280>)
{
   116c0:	460d      	mov	r5, r1
	if (conn != bt_gatt_dm_inst.conn) {
   116c2:	6823      	ldr	r3, [r4, #0]
{
   116c4:	af00      	add	r7, sp, #0
	if (conn != bt_gatt_dm_inst.conn) {
   116c6:	4283      	cmp	r3, r0
   116c8:	d014      	beq.n	116f4 <discovery_callback+0x3c>
		LOG_ERR("Unexpected conn object. Aborting.");
   116ca:	4b9c      	ldr	r3, [pc, #624]	; (1193c <discovery_callback+0x284>)
   116cc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   116d0:	61fb      	str	r3, [r7, #28]
   116d2:	2302      	movs	r3, #2
   116d4:	489a      	ldr	r0, [pc, #616]	; (11940 <discovery_callback+0x288>)
   116d6:	61bb      	str	r3, [r7, #24]
   116d8:	f107 0218 	add.w	r2, r7, #24
   116dc:	f01e fd29 	bl	30132 <z_log_msg_static_create.constprop.0>
		discovery_complete_error(&bt_gatt_dm_inst, -EFAULT);
   116e0:	f06f 010d 	mvn.w	r1, #13
   116e4:	4620      	mov	r0, r4
   116e6:	f01e fd27 	bl	30138 <discovery_complete_error>
		return BT_GATT_ITER_STOP;
   116ea:	2000      	movs	r0, #0

		break;
	}

	return BT_GATT_ITER_STOP;
}
   116ec:	3724      	adds	r7, #36	; 0x24
   116ee:	46bd      	mov	sp, r7
   116f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (params->type) {
   116f4:	7c13      	ldrb	r3, [r2, #16]
   116f6:	2b03      	cmp	r3, #3
   116f8:	f000 80e5 	beq.w	118c6 <discovery_callback+0x20e>
   116fc:	d80e      	bhi.n	1171c <discovery_callback+0x64>
   116fe:	2b02      	cmp	r3, #2
   11700:	d131      	bne.n	11766 <discovery_callback+0xae>
		__ASSERT(false, "Unknown param type.");
   11702:	4990      	ldr	r1, [pc, #576]	; (11944 <discovery_callback+0x28c>)
   11704:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
   11708:	4a8f      	ldr	r2, [pc, #572]	; (11948 <discovery_callback+0x290>)
   1170a:	4890      	ldr	r0, [pc, #576]	; (1194c <discovery_callback+0x294>)
   1170c:	f01d fe5a 	bl	2f3c4 <assert_print>
   11710:	488f      	ldr	r0, [pc, #572]	; (11950 <discovery_callback+0x298>)
   11712:	f01d fe57 	bl	2f3c4 <assert_print>
   11716:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
   1171a:	e050      	b.n	117be <discovery_callback+0x106>
	switch (params->type) {
   1171c:	2b05      	cmp	r3, #5
   1171e:	d1f0      	bne.n	11702 <discovery_callback+0x4a>
	if (!attr) {
   11720:	2900      	cmp	r1, #0
   11722:	f040 80a1 	bne.w	11868 <discovery_callback+0x1b0>
		if (dm->cur_attr_id > 1) {
   11726:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
   1172a:	2b01      	cmp	r3, #1
   1172c:	d97b      	bls.n	11826 <discovery_callback+0x16e>
			dm->discover_params.type =
   1172e:	2603      	movs	r6, #3
				dm->attrs[0].handle + 1;
   11730:	8c23      	ldrh	r3, [r4, #32]
			int err = bt_gatt_discover(dm->conn,
   11732:	f104 0108 	add.w	r1, r4, #8
				dm->attrs[0].handle + 1;
   11736:	3301      	adds	r3, #1
			dm->discover_params.start_handle =
   11738:	8223      	strh	r3, [r4, #16]
			dm->discover_params.type =
   1173a:	7626      	strb	r6, [r4, #24]
			int err = bt_gatt_discover(dm->conn,
   1173c:	f009 f9e2 	bl	1ab04 <bt_gatt_discover>
			if (err) {
   11740:	4605      	mov	r5, r0
   11742:	2800      	cmp	r0, #0
   11744:	d0d1      	beq.n	116ea <discovery_callback+0x32>
				LOG_ERR("Characteristic discover failed,"
   11746:	46e8      	mov	r8, sp
   11748:	b088      	sub	sp, #32
   1174a:	466a      	mov	r2, sp
   1174c:	4b81      	ldr	r3, [pc, #516]	; (11954 <discovery_callback+0x29c>)
   1174e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11752:	e9c2 3005 	strd	r3, r0, [r2, #20]
   11756:	487a      	ldr	r0, [pc, #488]	; (11940 <discovery_callback+0x288>)
   11758:	f842 6f10 	str.w	r6, [r2, #16]!
   1175c:	f01e fce9 	bl	30132 <z_log_msg_static_create.constprop.0>
				discovery_complete_error(dm, err);
   11760:	4629      	mov	r1, r5
   11762:	46c5      	mov	sp, r8
   11764:	e7be      	b.n	116e4 <discovery_callback+0x2c>
	if (!attr) {
   11766:	b919      	cbnz	r1, 11770 <discovery_callback+0xb8>
		discovery_complete_not_found(dm);
   11768:	4620      	mov	r0, r4
   1176a:	f01e fcfb 	bl	30164 <discovery_complete_not_found>
		return BT_GATT_ITER_STOP;
   1176e:	e7bc      	b.n	116ea <discovery_callback+0x32>
	struct bt_gatt_service_val *service_val = attr->user_data;
   11770:	f8d1 800c 	ldr.w	r8, [r1, #12]
		attr_store(dm, attr, sizeof(*service_val));
   11774:	4628      	mov	r0, r5
   11776:	2108      	movs	r1, #8
   11778:	f7ff ff32 	bl	115e0 <attr_store.constprop.0>
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) == 0 ||
   1177c:	f04f 0900 	mov.w	r9, #0
   11780:	f44f 5320 	mov.w	r3, #10240	; 0x2800
		attr_store(dm, attr, sizeof(*service_val));
   11784:	4606      	mov	r6, r0
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) == 0 ||
   11786:	1d39      	adds	r1, r7, #4
   11788:	6828      	ldr	r0, [r5, #0]
   1178a:	f887 9004 	strb.w	r9, [r7, #4]
   1178e:	80fb      	strh	r3, [r7, #6]
   11790:	f01f fb1b 	bl	30dca <bt_uuid_cmp>
   11794:	b1b0      	cbz	r0, 117c4 <discovery_callback+0x10c>
   11796:	f642 0301 	movw	r3, #10241	; 0x2801
   1179a:	6828      	ldr	r0, [r5, #0]
   1179c:	f887 9008 	strb.w	r9, [r7, #8]
   117a0:	817b      	strh	r3, [r7, #10]
   117a2:	f107 0108 	add.w	r1, r7, #8
   117a6:	f01f fb10 	bl	30dca <bt_uuid_cmp>
   117aa:	b158      	cbz	r0, 117c4 <discovery_callback+0x10c>
   117ac:	496a      	ldr	r1, [pc, #424]	; (11958 <discovery_callback+0x2a0>)
   117ae:	f240 1327 	movw	r3, #295	; 0x127
   117b2:	4a65      	ldr	r2, [pc, #404]	; (11948 <discovery_callback+0x290>)
   117b4:	4865      	ldr	r0, [pc, #404]	; (1194c <discovery_callback+0x294>)
   117b6:	f01d fe05 	bl	2f3c4 <assert_print>
   117ba:	f240 1127 	movw	r1, #295	; 0x127
	__ASSERT_NO_MSG(cur_service_val != NULL);
   117be:	4862      	ldr	r0, [pc, #392]	; (11948 <discovery_callback+0x290>)
   117c0:	f01d fdf9 	bl	2f3b6 <assert_post_action>
	if (!cur_attr) {
   117c4:	b976      	cbnz	r6, 117e4 <discovery_callback+0x12c>
		LOG_ERR("Not enough memory for service attribute.");
   117c6:	4b65      	ldr	r3, [pc, #404]	; (1195c <discovery_callback+0x2a4>)
		LOG_ERR("Not enough memory for service attribute data.");
   117c8:	61fb      	str	r3, [r7, #28]
   117ca:	2302      	movs	r3, #2
   117cc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   117d0:	485b      	ldr	r0, [pc, #364]	; (11940 <discovery_callback+0x288>)
   117d2:	61bb      	str	r3, [r7, #24]
   117d4:	f107 0218 	add.w	r2, r7, #24
   117d8:	f01e fcab 	bl	30132 <z_log_msg_static_create.constprop.0>
		discovery_complete_error(dm, -ENOMEM);
   117dc:	f06f 010b 	mvn.w	r1, #11
   117e0:	4855      	ldr	r0, [pc, #340]	; (11938 <discovery_callback+0x280>)
   117e2:	e780      	b.n	116e6 <discovery_callback+0x2e>
		bt_gatt_dm_attr_service_val(cur_attr);
   117e4:	4630      	mov	r0, r6
   117e6:	f01e fcd1 	bl	3018c <bt_gatt_dm_attr_service_val>
	__ASSERT_NO_MSG(cur_service_val != NULL);
   117ea:	4605      	mov	r5, r0
   117ec:	b948      	cbnz	r0, 11802 <discovery_callback+0x14a>
   117ee:	495c      	ldr	r1, [pc, #368]	; (11960 <discovery_callback+0x2a8>)
   117f0:	f240 133b 	movw	r3, #315	; 0x13b
   117f4:	4a54      	ldr	r2, [pc, #336]	; (11948 <discovery_callback+0x290>)
   117f6:	4855      	ldr	r0, [pc, #340]	; (1194c <discovery_callback+0x294>)
   117f8:	f01d fde4 	bl	2f3c4 <assert_print>
   117fc:	f240 113b 	movw	r1, #315	; 0x13b
   11800:	e7dd      	b.n	117be <discovery_callback+0x106>
   11802:	f8d8 3000 	ldr.w	r3, [r8]
   11806:	6003      	str	r3, [r0, #0]
   11808:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1180c:	6043      	str	r3, [r0, #4]
	cur_service_val->uuid = uuid_store(dm, cur_service_val->uuid);
   1180e:	6800      	ldr	r0, [r0, #0]
   11810:	f7ff ff2a 	bl	11668 <uuid_store.constprop.0>
   11814:	6028      	str	r0, [r5, #0]
	if (!cur_service_val->uuid) {
   11816:	b908      	cbnz	r0, 1181c <discovery_callback+0x164>
		LOG_ERR("Not enough memory for service attribute data.");
   11818:	4b52      	ldr	r3, [pc, #328]	; (11964 <discovery_callback+0x2ac>)
   1181a:	e7d5      	b.n	117c8 <discovery_callback+0x110>
	dm->discover_params.end_handle = cur_service_val->end_handle;
   1181c:	88ab      	ldrh	r3, [r5, #4]
   1181e:	82e3      	strh	r3, [r4, #22]
	if (cur_attr->handle == cur_service_val->end_handle) {
   11820:	88b2      	ldrh	r2, [r6, #4]
   11822:	429a      	cmp	r2, r3
   11824:	d102      	bne.n	1182c <discovery_callback+0x174>
		discovery_complete(dm);
   11826:	f7ff febd 	bl	115a4 <discovery_complete.constprop.0>
		return BT_GATT_ITER_STOP;
   1182a:	e75e      	b.n	116ea <discovery_callback+0x32>
	dm->discover_params.uuid         = NULL;
   1182c:	2300      	movs	r3, #0
   1182e:	60a3      	str	r3, [r4, #8]
	dm->discover_params.type         = BT_GATT_DISCOVER_ATTRIBUTE;
   11830:	2305      	movs	r3, #5
   11832:	7623      	strb	r3, [r4, #24]
	dm->discover_params.start_handle = cur_attr->handle + 1;
   11834:	88b3      	ldrh	r3, [r6, #4]
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
   11836:	494c      	ldr	r1, [pc, #304]	; (11968 <discovery_callback+0x2b0>)
	dm->discover_params.start_handle = cur_attr->handle + 1;
   11838:	3301      	adds	r3, #1
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
   1183a:	6820      	ldr	r0, [r4, #0]
	dm->discover_params.start_handle = cur_attr->handle + 1;
   1183c:	8223      	strh	r3, [r4, #16]
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
   1183e:	f009 f961 	bl	1ab04 <bt_gatt_discover>
	if (err) {
   11842:	2800      	cmp	r0, #0
   11844:	f43f af51 	beq.w	116ea <discovery_callback+0x32>
		LOG_ERR("Descriptor discover failed, error: %d.", err);
   11848:	466c      	mov	r4, sp
   1184a:	b088      	sub	sp, #32
   1184c:	466a      	mov	r2, sp
   1184e:	4b47      	ldr	r3, [pc, #284]	; (1196c <discovery_callback+0x2b4>)
   11850:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11854:	e9c2 3005 	strd	r3, r0, [r2, #20]
   11858:	2303      	movs	r3, #3
   1185a:	4839      	ldr	r0, [pc, #228]	; (11940 <discovery_callback+0x288>)
   1185c:	f842 3f10 	str.w	r3, [r2, #16]!
   11860:	f01e fc67 	bl	30132 <z_log_msg_static_create.constprop.0>
   11864:	46a5      	mov	sp, r4
   11866:	e7b9      	b.n	117dc <discovery_callback+0x124>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   11868:	2600      	movs	r6, #0
   1186a:	f642 0303 	movw	r3, #10243	; 0x2803
   1186e:	6828      	ldr	r0, [r5, #0]
   11870:	723e      	strb	r6, [r7, #8]
   11872:	817b      	strh	r3, [r7, #10]
   11874:	f107 0108 	add.w	r1, r7, #8
   11878:	f01f faa7 	bl	30dca <bt_uuid_cmp>
   1187c:	b950      	cbnz	r0, 11894 <discovery_callback+0x1dc>
		cur_attr = attr_store(dm, attr, sizeof(struct bt_gatt_chrc));
   1187e:	2108      	movs	r1, #8
   11880:	4628      	mov	r0, r5
   11882:	f7ff fead 	bl	115e0 <attr_store.constprop.0>
   11886:	4604      	mov	r4, r0
		struct bt_gatt_chrc *cur_gatt_chrc = bt_gatt_dm_attr_chrc_val(cur_attr);
   11888:	f01e fca0 	bl	301cc <bt_gatt_dm_attr_chrc_val>
		cur_gatt_chrc->uuid = cur_attr->uuid;
   1188c:	6823      	ldr	r3, [r4, #0]
   1188e:	6003      	str	r3, [r0, #0]
	return BT_GATT_ITER_CONTINUE;
   11890:	2001      	movs	r0, #1
   11892:	e72b      	b.n	116ec <discovery_callback+0x34>
		cur_attr = attr_store(dm, attr, 0);
   11894:	4631      	mov	r1, r6
   11896:	4628      	mov	r0, r5
   11898:	f7ff fea2 	bl	115e0 <attr_store.constprop.0>
	if (!cur_attr) {
   1189c:	2800      	cmp	r0, #0
   1189e:	d1f7      	bne.n	11890 <discovery_callback+0x1d8>
		LOG_ERR("Not enough memory for next attribute descriptor"
   118a0:	8a2b      	ldrh	r3, [r5, #16]
   118a2:	466d      	mov	r5, sp
   118a4:	b088      	sub	sp, #32
   118a6:	466a      	mov	r2, sp
   118a8:	4931      	ldr	r1, [pc, #196]	; (11970 <discovery_callback+0x2b8>)
   118aa:	4825      	ldr	r0, [pc, #148]	; (11940 <discovery_callback+0x288>)
   118ac:	e9c2 1305 	strd	r1, r3, [r2, #20]
   118b0:	2303      	movs	r3, #3
   118b2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   118b6:	f842 3f10 	str.w	r3, [r2, #16]!
   118ba:	f01e fc3a 	bl	30132 <z_log_msg_static_create.constprop.0>
   118be:	46ad      	mov	sp, r5
		discovery_complete_error(dm, -ENOMEM);
   118c0:	f06f 010b 	mvn.w	r1, #11
   118c4:	e70e      	b.n	116e4 <discovery_callback+0x2c>
	if (!attr) {
   118c6:	2900      	cmp	r1, #0
   118c8:	d0ad      	beq.n	11826 <discovery_callback+0x16e>
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0);
   118ca:	2300      	movs	r3, #0
   118cc:	723b      	strb	r3, [r7, #8]
   118ce:	f642 0303 	movw	r3, #10243	; 0x2803
   118d2:	6828      	ldr	r0, [r5, #0]
   118d4:	817b      	strh	r3, [r7, #10]
   118d6:	f107 0108 	add.w	r1, r7, #8
   118da:	f01f fa76 	bl	30dca <bt_uuid_cmp>
   118de:	b148      	cbz	r0, 118f4 <discovery_callback+0x23c>
   118e0:	4924      	ldr	r1, [pc, #144]	; (11974 <discovery_callback+0x2bc>)
   118e2:	f44f 73ce 	mov.w	r3, #412	; 0x19c
   118e6:	4a18      	ldr	r2, [pc, #96]	; (11948 <discovery_callback+0x290>)
   118e8:	4818      	ldr	r0, [pc, #96]	; (1194c <discovery_callback+0x294>)
   118ea:	f01d fd6b 	bl	2f3c4 <assert_print>
   118ee:	f44f 71ce 	mov.w	r1, #412	; 0x19c
   118f2:	e764      	b.n	117be <discovery_callback+0x106>
	cur_attr = attr_find_by_handle(dm, attr->handle);
   118f4:	4620      	mov	r0, r4
   118f6:	8a29      	ldrh	r1, [r5, #16]
   118f8:	f01e fbdb 	bl	300b2 <attr_find_by_handle>
	if (!cur_attr) {
   118fc:	b910      	cbnz	r0, 11904 <discovery_callback+0x24c>
		discovery_complete_error(dm, -ESRCH);
   118fe:	f06f 0102 	mvn.w	r1, #2
   11902:	e6ef      	b.n	116e4 <discovery_callback+0x2c>
	gatt_chrc = attr->user_data;
   11904:	68ee      	ldr	r6, [r5, #12]
	cur_gatt_chrc = bt_gatt_dm_attr_chrc_val(cur_attr);
   11906:	f01e fc61 	bl	301cc <bt_gatt_dm_attr_chrc_val>
	__ASSERT_NO_MSG(cur_gatt_chrc != NULL);
   1190a:	4605      	mov	r5, r0
   1190c:	b948      	cbnz	r0, 11922 <discovery_callback+0x26a>
   1190e:	491a      	ldr	r1, [pc, #104]	; (11978 <discovery_callback+0x2c0>)
   11910:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
   11914:	4a0c      	ldr	r2, [pc, #48]	; (11948 <discovery_callback+0x290>)
   11916:	480d      	ldr	r0, [pc, #52]	; (1194c <discovery_callback+0x294>)
   11918:	f01d fd54 	bl	2f3c4 <assert_print>
   1191c:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
   11920:	e74d      	b.n	117be <discovery_callback+0x106>
   11922:	6833      	ldr	r3, [r6, #0]
   11924:	6003      	str	r3, [r0, #0]
   11926:	6873      	ldr	r3, [r6, #4]
   11928:	6043      	str	r3, [r0, #4]
	cur_gatt_chrc->uuid = uuid_store(dm, cur_gatt_chrc->uuid);
   1192a:	6800      	ldr	r0, [r0, #0]
   1192c:	f7ff fe9c 	bl	11668 <uuid_store.constprop.0>
   11930:	6028      	str	r0, [r5, #0]
	if (!cur_gatt_chrc->uuid) {
   11932:	2800      	cmp	r0, #0
   11934:	d1ac      	bne.n	11890 <discovery_callback+0x1d8>
   11936:	e7c3      	b.n	118c0 <discovery_callback+0x208>
   11938:	2000e3d8 	.word	0x2000e3d8
   1193c:	0003a78a 	.word	0x0003a78a
   11940:	000378e8 	.word	0x000378e8
   11944:	0003ea9e 	.word	0x0003ea9e
   11948:	0003a6ad 	.word	0x0003a6ad
   1194c:	00039995 	.word	0x00039995
   11950:	0003aa4f 	.word	0x0003aa4f
   11954:	0003a94a 	.word	0x0003a94a
   11958:	0003a7ac 	.word	0x0003a7ac
   1195c:	0003a8ad 	.word	0x0003a8ad
   11960:	0003a8d6 	.word	0x0003a8d6
   11964:	0003a8f5 	.word	0x0003a8f5
   11968:	2000e3e0 	.word	0x2000e3e0
   1196c:	0003a923 	.word	0x0003a923
   11970:	0003a975 	.word	0x0003a975
   11974:	0003a9b3 	.word	0x0003a9b3
   11978:	0003aa32 	.word	0x0003aa32

0001197c <bt_gatt_dm_char_by_uuid>:
}

const struct bt_gatt_dm_attr *bt_gatt_dm_char_by_uuid(
	const struct bt_gatt_dm *dm,
	const struct bt_uuid *uuid)
{
   1197c:	b570      	push	{r4, r5, r6, lr}
   1197e:	4605      	mov	r5, r0
   11980:	460e      	mov	r6, r1
	const struct bt_gatt_dm_attr *curr = NULL;
   11982:	2400      	movs	r4, #0

	while ((curr = bt_gatt_dm_char_next(dm, curr)) != NULL) {
   11984:	4621      	mov	r1, r4
   11986:	4628      	mov	r0, r5
   11988:	f01e fc38 	bl	301fc <bt_gatt_dm_char_next>
   1198c:	4604      	mov	r4, r0
   1198e:	b1a0      	cbz	r0, 119ba <bt_gatt_dm_char_by_uuid+0x3e>
		struct bt_gatt_chrc *chrc = bt_gatt_dm_attr_chrc_val(curr);
   11990:	f01e fc1c 	bl	301cc <bt_gatt_dm_attr_chrc_val>

		__ASSERT_NO_MSG(chrc != NULL);
   11994:	b958      	cbnz	r0, 119ae <bt_gatt_dm_char_by_uuid+0x32>
   11996:	490a      	ldr	r1, [pc, #40]	; (119c0 <bt_gatt_dm_char_by_uuid+0x44>)
   11998:	480a      	ldr	r0, [pc, #40]	; (119c4 <bt_gatt_dm_char_by_uuid+0x48>)
   1199a:	f44f 7307 	mov.w	r3, #540	; 0x21c
   1199e:	4a0a      	ldr	r2, [pc, #40]	; (119c8 <bt_gatt_dm_char_by_uuid+0x4c>)
   119a0:	f01d fd10 	bl	2f3c4 <assert_print>
   119a4:	f44f 7107 	mov.w	r1, #540	; 0x21c
   119a8:	4807      	ldr	r0, [pc, #28]	; (119c8 <bt_gatt_dm_char_by_uuid+0x4c>)
   119aa:	f01d fd04 	bl	2f3b6 <assert_post_action>
		if (!bt_uuid_cmp(uuid, chrc->uuid)) {
   119ae:	6801      	ldr	r1, [r0, #0]
   119b0:	4630      	mov	r0, r6
   119b2:	f01f fa0a 	bl	30dca <bt_uuid_cmp>
   119b6:	2800      	cmp	r0, #0
   119b8:	d1e4      	bne.n	11984 <bt_gatt_dm_char_by_uuid+0x8>
			return curr;
		}
	}

	return NULL;
}
   119ba:	4620      	mov	r0, r4
   119bc:	bd70      	pop	{r4, r5, r6, pc}
   119be:	bf00      	nop
   119c0:	0003aa3b 	.word	0x0003aa3b
   119c4:	00039995 	.word	0x00039995
   119c8:	0003a6ad 	.word	0x0003a6ad

000119cc <bt_gatt_dm_start>:

int bt_gatt_dm_start(struct bt_conn *conn,
		     const struct bt_uuid *svc_uuid,
		     const struct bt_gatt_dm_cb *cb,
		     void *context)
{
   119cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   119ce:	4606      	mov	r6, r0
	int err;
	struct bt_gatt_dm *dm;

	if (svc_uuid &&
   119d0:	460d      	mov	r5, r1
{
   119d2:	af00      	add	r7, sp, #0
	if (svc_uuid &&
   119d4:	b119      	cbz	r1, 119de <bt_gatt_dm_start+0x12>
   119d6:	7809      	ldrb	r1, [r1, #0]
   119d8:	f011 0ffd 	tst.w	r1, #253	; 0xfd
   119dc:	d154      	bne.n	11a88 <bt_gatt_dm_start+0xbc>
	    (svc_uuid->type != BT_UUID_TYPE_16) &&
	    (svc_uuid->type != BT_UUID_TYPE_128)) {
		return -EINVAL;
	}

	if (!cb) {
   119de:	2a00      	cmp	r2, #0
   119e0:	d052      	beq.n	11a88 <bt_gatt_dm_start+0xbc>
   119e2:	4c2c      	ldr	r4, [pc, #176]	; (11a94 <bt_gatt_dm_start+0xc8>)
   119e4:	e8d4 1fef 	ldaex	r1, [r4]
   119e8:	f041 0001 	orr.w	r0, r1, #1
   119ec:	e8c4 0fec 	stlex	ip, r0, [r4]
   119f0:	f1bc 0f00 	cmp.w	ip, #0
   119f4:	d1f6      	bne.n	119e4 <bt_gatt_dm_start+0x18>
		return -EINVAL;
	}

	dm = &bt_gatt_dm_inst;

	if (atomic_test_and_set_bit(dm->state_flags, STATE_ATTRS_LOCKED)) {
   119f6:	f011 0101 	ands.w	r1, r1, #1
   119fa:	d148      	bne.n	11a8e <bt_gatt_dm_start+0xc2>
		return -EALREADY;
	}

	dm->conn = conn;
   119fc:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
	dm->context = context;
	dm->callback = cb;
	dm->cur_attr_id = 0;
	sys_slist_init(&dm->chunk_list);
	dm->cur_chunk_len = 0;
	dm->search_svc_by_uuid = (svc_uuid != NULL);
   11a00:	2d00      	cmp	r5, #0
	dm->context = context;
   11a02:	e9c4 6300 	strd	r6, r3, [r4]
	dm->search_svc_by_uuid = (svc_uuid != NULL);
   11a06:	bf14      	ite	ne
   11a08:	2301      	movne	r3, #1
   11a0a:	2300      	moveq	r3, #0
	list->tail = NULL;
   11a0c:	e9c4 1154 	strd	r1, r1, [r4, #336]	; 0x150
   11a10:	f884 3160 	strb.w	r3, [r4, #352]	; 0x160
	dm->callback = cb;
   11a14:	f8c4 215c 	str.w	r2, [r4, #348]	; 0x15c
	dm->cur_attr_id = 0;
   11a18:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
	dm->cur_chunk_len = 0;
   11a1c:	f8c4 1158 	str.w	r1, [r4, #344]	; 0x158

	if (svc_uuid) {
   11a20:	d00b      	beq.n	11a3a <bt_gatt_dm_start+0x6e>
		size_t uuid_size;

		uuid_size = get_uuid_size(svc_uuid);
   11a22:	7828      	ldrb	r0, [r5, #0]
   11a24:	f7ff fdd2 	bl	115cc <get_uuid_size.isra.0>
		memcpy(&dm->svc_uuid.uuid, svc_uuid, uuid_size);
   11a28:	4629      	mov	r1, r5
		uuid_size = get_uuid_size(svc_uuid);
   11a2a:	4602      	mov	r2, r0
		memcpy(&dm->svc_uuid.uuid, svc_uuid, uuid_size);
   11a2c:	2328      	movs	r3, #40	; 0x28
   11a2e:	f504 709e 	add.w	r0, r4, #316	; 0x13c
   11a32:	f024 fd86 	bl	36542 <__memcpy_chk>
	}

	dm->discover_params.uuid = svc_uuid ? &dm->svc_uuid.uuid : NULL;
   11a36:	f504 759e 	add.w	r5, r4, #316	; 0x13c
	dm->discover_params.func = discovery_callback;
   11a3a:	4b17      	ldr	r3, [pc, #92]	; (11a98 <bt_gatt_dm_start+0xcc>)
	dm->discover_params.start_handle = 0x0001;
	dm->discover_params.end_handle = 0xffff;
	dm->discover_params.type = BT_GATT_DISCOVER_PRIMARY;

	err = bt_gatt_discover(conn, &dm->discover_params);
   11a3c:	4630      	mov	r0, r6
	dm->discover_params.func = discovery_callback;
   11a3e:	60e3      	str	r3, [r4, #12]
	dm->discover_params.start_handle = 0x0001;
   11a40:	2301      	movs	r3, #1
   11a42:	8223      	strh	r3, [r4, #16]
	dm->discover_params.end_handle = 0xffff;
   11a44:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11a48:	82e3      	strh	r3, [r4, #22]
	dm->discover_params.type = BT_GATT_DISCOVER_PRIMARY;
   11a4a:	2300      	movs	r3, #0
	err = bt_gatt_discover(conn, &dm->discover_params);
   11a4c:	4913      	ldr	r1, [pc, #76]	; (11a9c <bt_gatt_dm_start+0xd0>)
	dm->discover_params.uuid = svc_uuid ? &dm->svc_uuid.uuid : NULL;
   11a4e:	60a5      	str	r5, [r4, #8]
	dm->discover_params.type = BT_GATT_DISCOVER_PRIMARY;
   11a50:	7623      	strb	r3, [r4, #24]
	err = bt_gatt_discover(conn, &dm->discover_params);
   11a52:	f009 f857 	bl	1ab04 <bt_gatt_discover>
	if (err) {
   11a56:	4604      	mov	r4, r0
   11a58:	b198      	cbz	r0, 11a82 <bt_gatt_dm_start+0xb6>
		LOG_ERR("Discover failed, error: %d.", err);
   11a5a:	466d      	mov	r5, sp
   11a5c:	b088      	sub	sp, #32
   11a5e:	466a      	mov	r2, sp
   11a60:	4b0f      	ldr	r3, [pc, #60]	; (11aa0 <bt_gatt_dm_start+0xd4>)
   11a62:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11a66:	e9c2 3005 	strd	r3, r0, [r2, #20]
   11a6a:	2303      	movs	r3, #3
   11a6c:	480d      	ldr	r0, [pc, #52]	; (11aa4 <bt_gatt_dm_start+0xd8>)
   11a6e:	f842 3f10 	str.w	r3, [r2, #16]!
   11a72:	f01e fb5e 	bl	30132 <z_log_msg_static_create.constprop.0>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   11a76:	f06f 0101 	mvn.w	r1, #1
   11a7a:	46ad      	mov	sp, r5
   11a7c:	4805      	ldr	r0, [pc, #20]	; (11a94 <bt_gatt_dm_start+0xc8>)
   11a7e:	f01e fb4d 	bl	3011c <atomic_and>
		atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);
	}

	return err;
}
   11a82:	4620      	mov	r0, r4
   11a84:	46bd      	mov	sp, r7
   11a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   11a88:	f06f 0415 	mvn.w	r4, #21
   11a8c:	e7f9      	b.n	11a82 <bt_gatt_dm_start+0xb6>
		return -EALREADY;
   11a8e:	f06f 0477 	mvn.w	r4, #119	; 0x77
   11a92:	e7f6      	b.n	11a82 <bt_gatt_dm_start+0xb6>
   11a94:	2000e510 	.word	0x2000e510
   11a98:	000116b9 	.word	0x000116b9
   11a9c:	2000e3e0 	.word	0x2000e3e0
   11aa0:	0003aa65 	.word	0x0003aa65
   11aa4:	000378e8 	.word	0x000378e8

00011aa8 <scan_default_param_set>:
{
	return (mode & MODE_CHECK) != 0;
}

static void scan_default_param_set(void)
{
   11aa8:	b570      	push	{r4, r5, r6, lr}
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
   11aaa:	4c06      	ldr	r4, [pc, #24]	; (11ac4 <scan_default_param_set+0x1c>)
{
   11aac:	b086      	sub	sp, #24
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
   11aae:	ad01      	add	r5, sp, #4
   11ab0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   11ab2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   11ab4:	6826      	ldr	r6, [r4, #0]

	/* Set the default parameters. */
	bt_scan.scan_param = *scan_param;
   11ab6:	4c04      	ldr	r4, [pc, #16]	; (11ac8 <scan_default_param_set+0x20>)
   11ab8:	ad01      	add	r5, sp, #4
   11aba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   11abc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   11abe:	6026      	str	r6, [r4, #0]
}
   11ac0:	b006      	add	sp, #24
   11ac2:	bd70      	pop	{r4, r5, r6, pc}
   11ac4:	00037afc 	.word	0x00037afc
   11ac8:	2000e574 	.word	0x2000e574

00011acc <scan_default_conn_param_set>:
static void scan_default_conn_param_set(void)
{
	struct bt_le_conn_param *conn_param = BT_LE_CONN_PARAM_DEFAULT;

	/* Set default Connection params. */
	bt_scan.conn_param = *conn_param;
   11acc:	f04f 72c8 	mov.w	r2, #26214400	; 0x1900000
   11ad0:	4b02      	ldr	r3, [pc, #8]	; (11adc <scan_default_conn_param_set+0x10>)
   11ad2:	4903      	ldr	r1, [pc, #12]	; (11ae0 <scan_default_conn_param_set+0x14>)
   11ad4:	e9c3 1211 	strd	r1, r2, [r3, #68]	; 0x44
}
   11ad8:	4770      	bx	lr
   11ada:	bf00      	nop
   11adc:	2000e544 	.word	0x2000e544
   11ae0:	00280018 	.word	0x00280018

00011ae4 <uuid_check>:
{
   11ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return CONFIG_BT_SCAN_UUID_CNT && bt_scan.scan_filters.uuid.enabled;
   11ae8:	4e2b      	ldr	r6, [pc, #172]	; (11b98 <uuid_check+0xb4>)
{
   11aea:	b08b      	sub	sp, #44	; 0x2c
	if (is_uuid_filter_enabled()) {
   11aec:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
{
   11af0:	4604      	mov	r4, r0
   11af2:	4688      	mov	r8, r1
   11af4:	9203      	str	r2, [sp, #12]
	if (is_uuid_filter_enabled()) {
   11af6:	b313      	cbz	r3, 11b3e <uuid_check+0x5a>
	for (size_t i = 0; i < counter; i++) {
   11af8:	2700      	movs	r7, #0
	uint8_t uuid_match_cnt = 0;
   11afa:	463d      	mov	r5, r7
	uint8_t data_len = data->data_len;
   11afc:	784b      	ldrb	r3, [r1, #1]
	const bool all_filters_mode = bt_scan.scan_filters.all_mode;
   11afe:	f896 b028 	ldrb.w	fp, [r6, #40]	; 0x28
	const uint8_t counter = bt_scan.scan_filters.uuid.cnt;
   11b02:	f896 a020 	ldrb.w	sl, [r6, #32]
	uint8_t data_len = data->data_len;
   11b06:	9301      	str	r3, [sp, #4]
	for (size_t i = 0; i < counter; i++) {
   11b08:	4557      	cmp	r7, sl
   11b0a:	d305      	bcc.n	11b18 <uuid_check+0x34>
	control->filter_status.uuid.count = uuid_match_cnt;
   11b0c:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
	if ((all_filters_mode && (uuid_match_cnt == counter)) ||
   11b10:	f1bb 0f00 	cmp.w	fp, #0
   11b14:	d111      	bne.n	11b3a <uuid_check+0x56>
   11b16:	e031      	b.n	11b7c <uuid_check+0x98>
	for (size_t i = 0; i < data_len; i += uuid_len) {
   11b18:	f04f 0900 	mov.w	r9, #0
		if (find_uuid(data->data, data_len, uuid_type,
   11b1c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   11b20:	9a03      	ldr	r2, [sp, #12]
   11b22:	9302      	str	r3, [sp, #8]
	switch (uuid_type) {
   11b24:	4b1d      	ldr	r3, [pc, #116]	; (11b9c <uuid_check+0xb8>)
   11b26:	5c9b      	ldrb	r3, [r3, r2]
   11b28:	9300      	str	r3, [sp, #0]
	for (size_t i = 0; i < data_len; i += uuid_len) {
   11b2a:	9b01      	ldr	r3, [sp, #4]
   11b2c:	4599      	cmp	r9, r3
   11b2e:	d309      	bcc.n	11b44 <uuid_check+0x60>
		} else if (all_filters_mode) {
   11b30:	f1bb 0f00 	cmp.w	fp, #0
   11b34:	d02c      	beq.n	11b90 <uuid_check+0xac>
	control->filter_status.uuid.count = uuid_match_cnt;
   11b36:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
	if ((all_filters_mode && (uuid_match_cnt == counter)) ||
   11b3a:	45aa      	cmp	sl, r5
   11b3c:	d020      	beq.n	11b80 <uuid_check+0x9c>
}
   11b3e:	b00b      	add	sp, #44	; 0x2c
   11b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!bt_uuid_create(&uuid.uuid, &data[i], uuid_len)) {
   11b44:	9b02      	ldr	r3, [sp, #8]
   11b46:	9a00      	ldr	r2, [sp, #0]
   11b48:	eb03 0109 	add.w	r1, r3, r9
   11b4c:	a805      	add	r0, sp, #20
   11b4e:	f01f f96a 	bl	30e26 <bt_uuid_create>
   11b52:	2800      	cmp	r0, #0
   11b54:	d0ec      	beq.n	11b30 <uuid_check+0x4c>
		if (bt_uuid_cmp(&uuid.uuid, target_uuid->uuid) == 0) {
   11b56:	68b1      	ldr	r1, [r6, #8]
   11b58:	a805      	add	r0, sp, #20
   11b5a:	f01f f936 	bl	30dca <bt_uuid_cmp>
   11b5e:	b110      	cbz	r0, 11b66 <uuid_check+0x82>
	for (size_t i = 0; i < data_len; i += uuid_len) {
   11b60:	9b00      	ldr	r3, [sp, #0]
   11b62:	4499      	add	r9, r3
   11b64:	e7e1      	b.n	11b2a <uuid_check+0x46>
				uuid_filter->uuid[i].uuid;
   11b66:	68b1      	ldr	r1, [r6, #8]
			control->filter_status.uuid.uuid[uuid_match_cnt] =
   11b68:	eb04 0285 	add.w	r2, r4, r5, lsl #2
			uuid_match_cnt++;
   11b6c:	3501      	adds	r5, #1
			control->filter_status.uuid.uuid[uuid_match_cnt] =
   11b6e:	6391      	str	r1, [r2, #56]	; 0x38
			uuid_match_cnt++;
   11b70:	b2ed      	uxtb	r5, r5
			if (!all_filters_mode) {
   11b72:	f1bb 0f00 	cmp.w	fp, #0
   11b76:	d10b      	bne.n	11b90 <uuid_check+0xac>
	control->filter_status.uuid.count = uuid_match_cnt;
   11b78:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
	    ((!all_filters_mode) && (uuid_match_cnt > 0))) {
   11b7c:	2d00      	cmp	r5, #0
   11b7e:	d0de      	beq.n	11b3e <uuid_check+0x5a>
			control->filter_match_cnt++;
   11b80:	7863      	ldrb	r3, [r4, #1]
   11b82:	3301      	adds	r3, #1
   11b84:	7063      	strb	r3, [r4, #1]
			control->filter_status.uuid.match = true;
   11b86:	2301      	movs	r3, #1
   11b88:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			control->filter_match = true;
   11b8c:	70a3      	strb	r3, [r4, #2]
}
   11b8e:	e7d6      	b.n	11b3e <uuid_check+0x5a>
	for (size_t i = 0; i < counter; i++) {
   11b90:	3701      	adds	r7, #1
   11b92:	3618      	adds	r6, #24
   11b94:	e7b8      	b.n	11b08 <uuid_check+0x24>
   11b96:	bf00      	nop
   11b98:	2000e544 	.word	0x2000e544
   11b9c:	0003aa8f 	.word	0x0003aa8f

00011ba0 <notify_filter_matched.constprop.0>:
static void notify_filter_matched(struct bt_scan_device_info *device_info,
   11ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11ba2:	4605      	mov	r5, r0
   11ba4:	460e      	mov	r6, r1
   11ba6:	4617      	mov	r7, r2
	return list->head;
   11ba8:	4b07      	ldr	r3, [pc, #28]	; (11bc8 <notify_filter_matched.constprop.0+0x28>)
   11baa:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   11bac:	b154      	cbz	r4, 11bc4 <notify_filter_matched.constprop.0+0x24>
		if (cb->cb_addr->filter_match) {
   11bae:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   11bb2:	3c04      	subs	r4, #4
		if (cb->cb_addr->filter_match) {
   11bb4:	681b      	ldr	r3, [r3, #0]
   11bb6:	b11b      	cbz	r3, 11bc0 <notify_filter_matched.constprop.0+0x20>
			cb->cb_addr->filter_match(device_info, filter_match,
   11bb8:	463a      	mov	r2, r7
   11bba:	4631      	mov	r1, r6
   11bbc:	4628      	mov	r0, r5
   11bbe:	4798      	blx	r3
	return node->next;
   11bc0:	6864      	ldr	r4, [r4, #4]
   11bc2:	e7f3      	b.n	11bac <notify_filter_matched.constprop.0+0xc>
}
   11bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11bc6:	bf00      	nop
   11bc8:	2000e53c 	.word	0x2000e53c

00011bcc <bt_scan_cb_register>:
	if (!cb) {
   11bcc:	b150      	cbz	r0, 11be4 <bt_scan_cb_register+0x18>
	parent->next = child;
   11bce:	2300      	movs	r3, #0
   11bd0:	6043      	str	r3, [r0, #4]
	return list->tail;
   11bd2:	4b05      	ldr	r3, [pc, #20]	; (11be8 <bt_scan_cb_register+0x1c>)
	sys_slist_append(&callback_list, &cb->node);
   11bd4:	1d02      	adds	r2, r0, #4
   11bd6:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   11bd8:	b911      	cbnz	r1, 11be0 <bt_scan_cb_register+0x14>
	list->head = node;
   11bda:	e9c3 2200 	strd	r2, r2, [r3]
}
   11bde:	4770      	bx	lr
	parent->next = child;
   11be0:	600a      	str	r2, [r1, #0]
	list->tail = node;
   11be2:	605a      	str	r2, [r3, #4]
}
   11be4:	4770      	bx	lr
   11be6:	bf00      	nop
   11be8:	2000e53c 	.word	0x2000e53c

00011bec <bt_scan_filter_add>:

int bt_scan_filter_add(enum bt_scan_filter_type type,
		       const void *data)
{
   11bec:	b570      	push	{r4, r5, r6, lr}
   11bee:	4605      	mov	r5, r0
	struct bt_uuid *uuid;
	uint16_t appearance;
	struct bt_scan_manufacturer_data *manufacturer_data;
	int err = 0;

	if (!data) {
   11bf0:	460c      	mov	r4, r1
   11bf2:	2900      	cmp	r1, #0
   11bf4:	d045      	beq.n	11c82 <bt_scan_filter_add+0x96>
	return z_impl_k_mutex_lock(mutex, timeout);
   11bf6:	f04f 32ff 	mov.w	r2, #4294967295
   11bfa:	f04f 33ff 	mov.w	r3, #4294967295
   11bfe:	4822      	ldr	r0, [pc, #136]	; (11c88 <bt_scan_filter_add+0x9c>)
   11c00:	f017 faf0 	bl	291e4 <z_impl_k_mutex_lock>
		return -EINVAL;
	}

	k_mutex_lock(&scan_mutex, K_FOREVER);

	switch (type) {
   11c04:	2d03      	cmp	r5, #3
   11c06:	d00c      	beq.n	11c22 <bt_scan_filter_add+0x36>
   11c08:	d935      	bls.n	11c76 <bt_scan_filter_add+0x8a>
   11c0a:	3d04      	subs	r5, #4
   11c0c:	2d01      	cmp	r5, #1
   11c0e:	bf8c      	ite	hi
   11c10:	f06f 0415 	mvnhi.w	r4, #21
   11c14:	f06f 040b 	mvnls.w	r4, #11
	return z_impl_k_mutex_unlock(mutex);
   11c18:	481b      	ldr	r0, [pc, #108]	; (11c88 <bt_scan_filter_add+0x9c>)
   11c1a:	f017 fbb3 	bl	29384 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&scan_mutex);

	return err;
}
   11c1e:	4620      	mov	r0, r4
   11c20:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t counter = bt_scan.scan_filters.uuid.cnt;
   11c22:	4a1a      	ldr	r2, [pc, #104]	; (11c8c <bt_scan_filter_add+0xa0>)
	if (counter >= CONFIG_BT_SCAN_UUID_CNT) {
   11c24:	f892 3020 	ldrb.w	r3, [r2, #32]
   11c28:	bb2b      	cbnz	r3, 11c76 <bt_scan_filter_add+0x8a>
	switch (uuid->type) {
   11c2a:	7823      	ldrb	r3, [r4, #0]
   11c2c:	2b01      	cmp	r3, #1
   11c2e:	d00b      	beq.n	11c48 <bt_scan_filter_add+0x5c>
   11c30:	2b02      	cmp	r3, #2
   11c32:	d010      	beq.n	11c56 <bt_scan_filter_add+0x6a>
   11c34:	bb13      	cbnz	r3, 11c7c <bt_scan_filter_add+0x90>
		uuid_filter[counter].uuid_data.uuid_16 = *uuid_16;
   11c36:	6820      	ldr	r0, [r4, #0]
   11c38:	60d0      	str	r0, [r2, #12]
		uuid_filter[counter].uuid =
   11c3a:	4b15      	ldr	r3, [pc, #84]	; (11c90 <bt_scan_filter_add+0xa4>)
	return 0;
   11c3c:	2400      	movs	r4, #0
		uuid_filter[counter].uuid =
   11c3e:	6093      	str	r3, [r2, #8]
	bt_scan.scan_filters.uuid.cnt++;
   11c40:	2301      	movs	r3, #1
   11c42:	f882 3020 	strb.w	r3, [r2, #32]
	return 0;
   11c46:	e7e7      	b.n	11c18 <bt_scan_filter_add+0x2c>
		uuid_filter[counter].uuid_data.uuid_32 = *uuid_32;
   11c48:	f102 030c 	add.w	r3, r2, #12
   11c4c:	e894 0003 	ldmia.w	r4, {r0, r1}
   11c50:	e883 0003 	stmia.w	r3, {r0, r1}
		break;
   11c54:	e7f1      	b.n	11c3a <bt_scan_filter_add+0x4e>
		uuid_filter[counter].uuid_data.uuid_128 = *uuid_128;
   11c56:	4623      	mov	r3, r4
   11c58:	f102 040c 	add.w	r4, r2, #12
   11c5c:	f103 0610 	add.w	r6, r3, #16
   11c60:	4625      	mov	r5, r4
   11c62:	6818      	ldr	r0, [r3, #0]
   11c64:	6859      	ldr	r1, [r3, #4]
   11c66:	3308      	adds	r3, #8
   11c68:	c503      	stmia	r5!, {r0, r1}
   11c6a:	42b3      	cmp	r3, r6
   11c6c:	462c      	mov	r4, r5
   11c6e:	d1f7      	bne.n	11c60 <bt_scan_filter_add+0x74>
   11c70:	781b      	ldrb	r3, [r3, #0]
   11c72:	702b      	strb	r3, [r5, #0]
		break;
   11c74:	e7e1      	b.n	11c3a <bt_scan_filter_add+0x4e>
   11c76:	f06f 040b 	mvn.w	r4, #11
   11c7a:	e7cd      	b.n	11c18 <bt_scan_filter_add+0x2c>
	switch (uuid->type) {
   11c7c:	f06f 0415 	mvn.w	r4, #21
   11c80:	e7ca      	b.n	11c18 <bt_scan_filter_add+0x2c>
		return -EINVAL;
   11c82:	f06f 0415 	mvn.w	r4, #21
   11c86:	e7ca      	b.n	11c1e <bt_scan_filter_add+0x32>
   11c88:	2000ced8 	.word	0x2000ced8
   11c8c:	2000e544 	.word	0x2000e544
   11c90:	2000e550 	.word	0x2000e550

00011c94 <bt_scan_filter_disable>:
}

void bt_scan_filter_disable(void)
{
	/* Disable all filters. */
	bt_scan.scan_filters.name.enabled = false;
   11c94:	2200      	movs	r2, #0
   11c96:	4b05      	ldr	r3, [pc, #20]	; (11cac <bt_scan_filter_disable+0x18>)
   11c98:	705a      	strb	r2, [r3, #1]
	bt_scan.scan_filters.short_name.enabled = false;
   11c9a:	70da      	strb	r2, [r3, #3]
	bt_scan.scan_filters.addr.enabled = false;
   11c9c:	715a      	strb	r2, [r3, #5]
	bt_scan.scan_filters.uuid.enabled = false;
   11c9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	bt_scan.scan_filters.appearance.enabled = false;
   11ca2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	bt_scan.scan_filters.manufacturer_data.enabled = false;
   11ca6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
   11caa:	4770      	bx	lr
   11cac:	2000e544 	.word	0x2000e544

00011cb0 <bt_scan_filter_enable>:

int bt_scan_filter_enable(uint8_t mode, bool match_all)
{
   11cb0:	b508      	push	{r3, lr}
	/* Check if the mode is correct. */
	if (!check_filter_mode(mode)) {
   11cb2:	0683      	lsls	r3, r0, #26
   11cb4:	d025      	beq.n	11d02 <bt_scan_filter_enable+0x52>
		return -EINVAL;
	}

	/* Disable filters. */
	bt_scan_filter_disable();
   11cb6:	f7ff ffed 	bl	11c94 <bt_scan_filter_disable>

	struct bt_scan_filters *filters = &bt_scan.scan_filters;

	/* Turn on the filters of your choice. */
	if (mode & BT_SCAN_ADDR_FILTER) {
   11cba:	f010 0f02 	tst.w	r0, #2
		filters->addr.enabled = true;
   11cbe:	bf18      	it	ne
   11cc0:	2201      	movne	r2, #1
   11cc2:	4b11      	ldr	r3, [pc, #68]	; (11d08 <bt_scan_filter_enable+0x58>)
   11cc4:	bf18      	it	ne
   11cc6:	715a      	strbne	r2, [r3, #5]
	}

	if (mode & BT_SCAN_NAME_FILTER) {
   11cc8:	07c2      	lsls	r2, r0, #31
		filters->name.enabled = true;
   11cca:	bf44      	itt	mi
   11ccc:	2201      	movmi	r2, #1
   11cce:	705a      	strbmi	r2, [r3, #1]
	}

	if (mode & BT_SCAN_SHORT_NAME_FILTER) {
   11cd0:	06c2      	lsls	r2, r0, #27
		filters->short_name.enabled = true;
   11cd2:	bf44      	itt	mi
   11cd4:	2201      	movmi	r2, #1
   11cd6:	70da      	strbmi	r2, [r3, #3]
	}

	if (mode & BT_SCAN_UUID_FILTER) {
   11cd8:	0742      	lsls	r2, r0, #29
		filters->uuid.enabled = true;
   11cda:	bf44      	itt	mi
   11cdc:	2201      	movmi	r2, #1
   11cde:	f883 2021 	strbmi.w	r2, [r3, #33]	; 0x21
	}

	if (mode & BT_SCAN_APPEARANCE_FILTER) {
   11ce2:	0702      	lsls	r2, r0, #28
		filters->appearance.enabled = true;
   11ce4:	bf44      	itt	mi
   11ce6:	2201      	movmi	r2, #1
   11ce8:	f883 2025 	strbmi.w	r2, [r3, #37]	; 0x25
	}

	if (mode & BT_SCAN_MANUFACTURER_DATA_FILTER) {
   11cec:	0682      	lsls	r2, r0, #26
		filters->manufacturer_data.enabled = true;
   11cee:	bf48      	it	mi
   11cf0:	2201      	movmi	r2, #1
	}

	/* Select the filter mode. */
	filters->all_mode = match_all;

	return 0;
   11cf2:	f04f 0000 	mov.w	r0, #0
		filters->manufacturer_data.enabled = true;
   11cf6:	bf48      	it	mi
   11cf8:	f883 2027 	strbmi.w	r2, [r3, #39]	; 0x27
	filters->all_mode = match_all;
   11cfc:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
}
   11d00:	bd08      	pop	{r3, pc}
		return -EINVAL;
   11d02:	f06f 0015 	mvn.w	r0, #21
   11d06:	e7fb      	b.n	11d00 <bt_scan_filter_enable+0x50>
   11d08:	2000e544 	.word	0x2000e544

00011d0c <scan_connect_with_target.part.0>:
static void scan_connect_with_target(struct bt_scan_control *control,
   11d0c:	b570      	push	{r4, r5, r6, lr}
   11d0e:	460e      	mov	r6, r1
   11d10:	b086      	sub	sp, #24
   11d12:	4605      	mov	r5, r0
	bt_scan_stop();
   11d14:	f01e fb02 	bl	3031c <bt_scan_stop>
			       BT_CONN_LE_CREATE_CONN,
   11d18:	4b15      	ldr	r3, [pc, #84]	; (11d70 <scan_connect_with_target.part.0+0x64>)
   11d1a:	ac02      	add	r4, sp, #8
   11d1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   11d1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	err = bt_conn_le_create(addr,
   11d22:	ab01      	add	r3, sp, #4
   11d24:	4621      	mov	r1, r4
   11d26:	4630      	mov	r0, r6
   11d28:	4a12      	ldr	r2, [pc, #72]	; (11d74 <scan_connect_with_target.part.0+0x68>)
   11d2a:	f005 fb43 	bl	173b4 <bt_conn_le_create>
		notify_connecting_error(&control->device_info);
   11d2e:	3508      	adds	r5, #8
   11d30:	4b11      	ldr	r3, [pc, #68]	; (11d78 <scan_connect_with_target.part.0+0x6c>)
	if (err) {
   11d32:	b150      	cbz	r0, 11d4a <scan_connect_with_target.part.0+0x3e>
	return list->head;
   11d34:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   11d36:	b1c4      	cbz	r4, 11d6a <scan_connect_with_target.part.0+0x5e>
		if (cb->cb_addr->connecting_error) {
   11d38:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   11d3c:	3c04      	subs	r4, #4
		if (cb->cb_addr->connecting_error) {
   11d3e:	689b      	ldr	r3, [r3, #8]
   11d40:	b10b      	cbz	r3, 11d46 <scan_connect_with_target.part.0+0x3a>
			cb->cb_addr->connecting_error(device_info);
   11d42:	4628      	mov	r0, r5
   11d44:	4798      	blx	r3
	return node->next;
   11d46:	6864      	ldr	r4, [r4, #4]
   11d48:	e7f5      	b.n	11d36 <scan_connect_with_target.part.0+0x2a>
		notify_connecting(&control->device_info, conn);
   11d4a:	9e01      	ldr	r6, [sp, #4]
	return list->head;
   11d4c:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   11d4e:	b14c      	cbz	r4, 11d64 <scan_connect_with_target.part.0+0x58>
		if (cb->cb_addr->connecting) {
   11d50:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   11d54:	3c04      	subs	r4, #4
		if (cb->cb_addr->connecting) {
   11d56:	68db      	ldr	r3, [r3, #12]
   11d58:	b113      	cbz	r3, 11d60 <scan_connect_with_target.part.0+0x54>
			cb->cb_addr->connecting(device_info, conn);
   11d5a:	4631      	mov	r1, r6
   11d5c:	4628      	mov	r0, r5
   11d5e:	4798      	blx	r3
	return node->next;
   11d60:	6864      	ldr	r4, [r4, #4]
   11d62:	e7f4      	b.n	11d4e <scan_connect_with_target.part.0+0x42>
		bt_conn_unref(conn);
   11d64:	9801      	ldr	r0, [sp, #4]
   11d66:	f004 ff8d 	bl	16c84 <bt_conn_unref>
}
   11d6a:	b006      	add	sp, #24
   11d6c:	bd70      	pop	{r4, r5, r6, pc}
   11d6e:	bf00      	nop
   11d70:	00037b10 	.word	0x00037b10
   11d74:	2000e588 	.word	0x2000e588
   11d78:	2000e53c 	.word	0x2000e53c

00011d7c <scan_recv>:
	}
}

static void scan_recv(const struct bt_le_scan_recv_info *info,
		      struct net_buf_simple *ad)
{
   11d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_scan_control scan_control;
	struct net_buf_simple_state state;

	memset(&scan_control, 0, sizeof(scan_control));

	scan_control.all_mode = bt_scan.scan_filters.all_mode;
   11d80:	4f2c      	ldr	r7, [pc, #176]	; (11e34 <scan_recv+0xb8>)
{
   11d82:	b096      	sub	sp, #88	; 0x58
   11d84:	4605      	mov	r5, r0
   11d86:	460c      	mov	r4, r1
	memset(&scan_control, 0, sizeof(scan_control));
   11d88:	2254      	movs	r2, #84	; 0x54
   11d8a:	2100      	movs	r1, #0
   11d8c:	a801      	add	r0, sp, #4
   11d8e:	f024 fbeb 	bl	36568 <memset>
	scan_control.all_mode = bt_scan.scan_filters.all_mode;
   11d92:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   11d96:	f88d 3007 	strb.w	r3, [sp, #7]
	if (is_uuid_filter_enabled()) {
   11d9a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   11d9e:	b113      	cbz	r3, 11da6 <scan_recv+0x2a>
		control->filter_cnt++;
   11da0:	2301      	movs	r3, #1
   11da2:	f88d 3004 	strb.w	r3, [sp, #4]

	check_enabled_filters(&scan_control);

	/* Check id device is connectable. */
	scan_control.connectable =
		(info->adv_props & BT_GAP_ADV_PROP_CONNECTABLE) != 0;
   11da6:	7a2b      	ldrb	r3, [r5, #8]
	state->offset = net_buf_simple_headroom(buf);
   11da8:	4620      	mov	r0, r4
   11daa:	f003 0301 	and.w	r3, r3, #1
   11dae:	f88d 3008 	strb.w	r3, [sp, #8]
   11db2:	f021 f9d3 	bl	3315c <net_buf_simple_headroom>
   11db6:	4606      	mov	r6, r0

	/* Save advertising buffer state to transfer it
	 * data to application if futher processing is needed.
	 */
	net_buf_simple_save(ad, &state);
	bt_data_parse(ad, adv_data_found, (void *)&scan_control);
   11db8:	491f      	ldr	r1, [pc, #124]	; (11e38 <scan_recv+0xbc>)
   11dba:	4620      	mov	r0, r4
   11dbc:	aa01      	add	r2, sp, #4
	state->len = buf->len;
   11dbe:	f8b4 8004 	ldrh.w	r8, [r4, #4]
   11dc2:	f001 ff5f 	bl	13c84 <bt_data_parse>
	buf->data = buf->__buf + state->offset;
   11dc6:	68a3      	ldr	r3, [r4, #8]
	buf->len = state->len;
   11dc8:	f8a4 8004 	strh.w	r8, [r4, #4]
	buf->data = buf->__buf + state->offset;
   11dcc:	fa13 f686 	uxtah	r6, r3, r6
	net_buf_simple_restore(ad, &state);

	scan_control.device_info.recv_info = info;
	scan_control.device_info.conn_param = &bt_scan.conn_param;
   11dd0:	4b1a      	ldr	r3, [pc, #104]	; (11e3c <scan_recv+0xc0>)
   11dd2:	6026      	str	r6, [r4, #0]
	scan_control.device_info.adv_data = ad;
   11dd4:	e9cd 3404 	strd	r3, r4, [sp, #16]
	if (control->all_mode &&
   11dd8:	f89d 3007 	ldrb.w	r3, [sp, #7]

	/* In the multifilter mode, the number of the active filters must equal
	 * the number of the filters matched to generate the notification.
	 * If the event handler is not NULL, notify the main application.
	 */
	filter_state_check(&scan_control, info->addr);
   11ddc:	682c      	ldr	r4, [r5, #0]
	scan_control.device_info.recv_info = info;
   11dde:	9503      	str	r5, [sp, #12]
	if (control->all_mode &&
   11de0:	f89d 5008 	ldrb.w	r5, [sp, #8]
   11de4:	b1a3      	cbz	r3, 11e10 <scan_recv+0x94>
   11de6:	f89d 2005 	ldrb.w	r2, [sp, #5]
   11dea:	f89d 3004 	ldrb.w	r3, [sp, #4]
   11dee:	429a      	cmp	r2, r3
   11df0:	d112      	bne.n	11e18 <scan_recv+0x9c>
		notify_filter_matched(&control->device_info,
   11df2:	462a      	mov	r2, r5
   11df4:	a906      	add	r1, sp, #24
   11df6:	a803      	add	r0, sp, #12
   11df8:	f7ff fed2 	bl	11ba0 <notify_filter_matched.constprop.0>
	if (!bt_scan.connect_if_match) {
   11dfc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   11e00:	b11b      	cbz	r3, 11e0a <scan_recv+0x8e>
   11e02:	4621      	mov	r1, r4
   11e04:	a801      	add	r0, sp, #4
   11e06:	f7ff ff81 	bl	11d0c <scan_connect_with_target.part.0>
}
   11e0a:	b016      	add	sp, #88	; 0x58
   11e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	else if ((!control->all_mode) && control->filter_match) {
   11e10:	f89d 3006 	ldrb.w	r3, [sp, #6]
   11e14:	2b00      	cmp	r3, #0
   11e16:	d1ec      	bne.n	11df2 <scan_recv+0x76>
	return list->head;
   11e18:	4b09      	ldr	r3, [pc, #36]	; (11e40 <scan_recv+0xc4>)
   11e1a:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   11e1c:	2c00      	cmp	r4, #0
   11e1e:	d0f4      	beq.n	11e0a <scan_recv+0x8e>
		if (cb->cb_addr->filter_no_match) {
   11e20:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   11e24:	3c04      	subs	r4, #4
		if (cb->cb_addr->filter_no_match) {
   11e26:	685b      	ldr	r3, [r3, #4]
   11e28:	b113      	cbz	r3, 11e30 <scan_recv+0xb4>
			cb->cb_addr->filter_no_match(device_info, connectable);
   11e2a:	4629      	mov	r1, r5
   11e2c:	a803      	add	r0, sp, #12
   11e2e:	4798      	blx	r3
	return node->next;
   11e30:	6864      	ldr	r4, [r4, #4]
   11e32:	e7f3      	b.n	11e1c <scan_recv+0xa0>
   11e34:	2000e544 	.word	0x2000e544
   11e38:	000302eb 	.word	0x000302eb
   11e3c:	2000e588 	.word	0x2000e588
   11e40:	2000e53c 	.word	0x2000e53c

00011e44 <bt_scan_init>:
{
   11e44:	b570      	push	{r4, r5, r6, lr}
   11e46:	4606      	mov	r6, r0
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
   11e48:	4c14      	ldr	r4, [pc, #80]	; (11e9c <bt_scan_init+0x58>)
	bt_le_scan_cb_register(&scan_cb);
   11e4a:	4815      	ldr	r0, [pc, #84]	; (11ea0 <bt_scan_init+0x5c>)
   11e4c:	f004 f9b0 	bl	161b0 <bt_le_scan_cb_register>
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
   11e50:	222c      	movs	r2, #44	; 0x2c
   11e52:	2100      	movs	r1, #0
   11e54:	4620      	mov	r0, r4
   11e56:	f024 fb87 	bl	36568 <memset>
	if (init) {
   11e5a:	b1be      	cbz	r6, 11e8c <bt_scan_init+0x48>
		bt_scan.connect_if_match = init->connect_if_match;
   11e5c:	7933      	ldrb	r3, [r6, #4]
   11e5e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		if (init->scan_param) {
   11e62:	6835      	ldr	r5, [r6, #0]
   11e64:	b15d      	cbz	r5, 11e7e <bt_scan_init+0x3a>
			bt_scan.scan_param = *init->scan_param;
   11e66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   11e68:	3430      	adds	r4, #48	; 0x30
   11e6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   11e6c:	682b      	ldr	r3, [r5, #0]
   11e6e:	6023      	str	r3, [r4, #0]
		if (init->conn_param) {
   11e70:	68b2      	ldr	r2, [r6, #8]
   11e72:	b13a      	cbz	r2, 11e84 <bt_scan_init+0x40>
			bt_scan.conn_param = *init->conn_param;
   11e74:	4b0b      	ldr	r3, [pc, #44]	; (11ea4 <bt_scan_init+0x60>)
   11e76:	6810      	ldr	r0, [r2, #0]
   11e78:	6851      	ldr	r1, [r2, #4]
   11e7a:	c303      	stmia	r3!, {r0, r1}
}
   11e7c:	bd70      	pop	{r4, r5, r6, pc}
			scan_default_param_set();
   11e7e:	f7ff fe13 	bl	11aa8 <scan_default_param_set>
   11e82:	e7f5      	b.n	11e70 <bt_scan_init+0x2c>
}
   11e84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			scan_default_conn_param_set();
   11e88:	f7ff be20 	b.w	11acc <scan_default_conn_param_set>
		scan_default_param_set();
   11e8c:	f7ff fe0c 	bl	11aa8 <scan_default_param_set>
		scan_default_conn_param_set();
   11e90:	f7ff fe1c 	bl	11acc <scan_default_conn_param_set>
		bt_scan.connect_if_match = false;
   11e94:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
   11e98:	e7f0      	b.n	11e7c <bt_scan_init+0x38>
   11e9a:	bf00      	nop
   11e9c:	2000e544 	.word	0x2000e544
   11ea0:	2000c820 	.word	0x2000c820
   11ea4:	2000e588 	.word	0x2000e588

00011ea8 <bt_scan_start>:
	.recv = scan_recv,
};

int bt_scan_start(enum bt_scan_type scan_type)
{
	switch (scan_type) {
   11ea8:	4603      	mov	r3, r0
   11eaa:	b108      	cbz	r0, 11eb0 <bt_scan_start+0x8>
   11eac:	2801      	cmp	r0, #1
   11eae:	d105      	bne.n	11ebc <bt_scan_start+0x14>
	case BT_SCAN_TYPE_SCAN_ACTIVE:
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_ACTIVE;
   11eb0:	4804      	ldr	r0, [pc, #16]	; (11ec4 <bt_scan_start+0x1c>)
	default:
		return -EINVAL;
	}

	/* Start the scanning. */
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
   11eb2:	2100      	movs	r1, #0
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_ACTIVE;
   11eb4:	f800 3f30 	strb.w	r3, [r0, #48]!
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
   11eb8:	f004 b8f0 	b.w	1609c <bt_le_scan_start>
	if (!err) {
		LOG_DBG("Scanning");
	}

	return err;
}
   11ebc:	f06f 0015 	mvn.w	r0, #21
   11ec0:	4770      	bx	lr
   11ec2:	bf00      	nop
   11ec4:	2000e544 	.word	0x2000e544

00011ec8 <bt_nus_client_send>:
	return 0;
}

int bt_nus_client_send(struct bt_nus_client *nus_c, const uint8_t *data,
		       uint16_t len)
{
   11ec8:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!nus_c->conn) {
   11eca:	6803      	ldr	r3, [r0, #0]
   11ecc:	b30b      	cbz	r3, 11f12 <bt_nus_client_send+0x4a>
		return -ENOTCONN;
	}

	if (atomic_test_and_set_bit(&nus_c->state, NUS_C_RX_WRITE_PENDING)) {
   11ece:	1d05      	adds	r5, r0, #4
   11ed0:	e8d5 3fef 	ldaex	r3, [r5]
   11ed4:	f043 0404 	orr.w	r4, r3, #4
   11ed8:	e8c5 4fe6 	stlex	r6, r4, [r5]
   11edc:	2e00      	cmp	r6, #0
   11ede:	d1f7      	bne.n	11ed0 <bt_nus_client_send+0x8>
   11ee0:	f013 0304 	ands.w	r3, r3, #4
   11ee4:	d118      	bne.n	11f18 <bt_nus_client_send+0x50>
		return -EALREADY;
	}

	nus_c->rx_write_params.func = on_sent;
   11ee6:	4c0e      	ldr	r4, [pc, #56]	; (11f20 <bt_nus_client_send+0x58>)
	nus_c->rx_write_params.handle = nus_c->handles.rx;
	nus_c->rx_write_params.offset = 0;
	nus_c->rx_write_params.data = data;
   11ee8:	6341      	str	r1, [r0, #52]	; 0x34
	nus_c->rx_write_params.func = on_sent;
   11eea:	62c4      	str	r4, [r0, #44]	; 0x2c
	nus_c->rx_write_params.handle = nus_c->handles.rx;
   11eec:	8904      	ldrh	r4, [r0, #8]
	nus_c->rx_write_params.offset = 0;
   11eee:	8643      	strh	r3, [r0, #50]	; 0x32
	nus_c->rx_write_params.handle = nus_c->handles.rx;
   11ef0:	8604      	strh	r4, [r0, #48]	; 0x30
	nus_c->rx_write_params.length = len;
   11ef2:	8702      	strh	r2, [r0, #56]	; 0x38

	err = bt_gatt_write(nus_c->conn, &nus_c->rx_write_params);
   11ef4:	f100 012c 	add.w	r1, r0, #44	; 0x2c
   11ef8:	6800      	ldr	r0, [r0, #0]
   11efa:	f009 fa33 	bl	1b364 <bt_gatt_write>
	if (err) {
   11efe:	b138      	cbz	r0, 11f10 <bt_nus_client_send+0x48>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11f00:	e8d5 3fef 	ldaex	r3, [r5]
   11f04:	f023 0304 	bic.w	r3, r3, #4
   11f08:	e8c5 3fe2 	stlex	r2, r3, [r5]
   11f0c:	2a00      	cmp	r2, #0
   11f0e:	d1f7      	bne.n	11f00 <bt_nus_client_send+0x38>
		atomic_clear_bit(&nus_c->state, NUS_C_RX_WRITE_PENDING);
	}

	return err;
}
   11f10:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTCONN;
   11f12:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   11f16:	e7fb      	b.n	11f10 <bt_nus_client_send+0x48>
		return -EALREADY;
   11f18:	f06f 0077 	mvn.w	r0, #119	; 0x77
   11f1c:	e7f8      	b.n	11f10 <bt_nus_client_send+0x48>
   11f1e:	bf00      	nop
   11f20:	00030321 	.word	0x00030321

00011f24 <bt_nus_handles_assign>:

int bt_nus_handles_assign(struct bt_gatt_dm *dm,
			  struct bt_nus_client *nus_c)
{
   11f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11f28:	b09c      	sub	sp, #112	; 0x70
   11f2a:	460c      	mov	r4, r1
   11f2c:	4605      	mov	r5, r0
	const struct bt_gatt_dm_attr *gatt_service_attr =
			bt_gatt_dm_service_get(dm);
   11f2e:	f01e f963 	bl	301f8 <bt_gatt_dm_service_get>
	const struct bt_gatt_service_val *gatt_service =
			bt_gatt_dm_attr_service_val(gatt_service_attr);
   11f32:	f01e f92b 	bl	3018c <bt_gatt_dm_attr_service_val>
	const struct bt_gatt_dm_attr *gatt_chrc;
	const struct bt_gatt_dm_attr *gatt_desc;

	if (bt_uuid_cmp(gatt_service->uuid, BT_UUID_NUS_SERVICE)) {
   11f36:	aa16      	add	r2, sp, #88	; 0x58
   11f38:	4694      	mov	ip, r2
   11f3a:	4b53      	ldr	r3, [pc, #332]	; (12088 <bt_nus_handles_assign+0x164>)
   11f3c:	6807      	ldr	r7, [r0, #0]
   11f3e:	f103 0e10 	add.w	lr, r3, #16
   11f42:	4616      	mov	r6, r2
   11f44:	6818      	ldr	r0, [r3, #0]
   11f46:	6859      	ldr	r1, [r3, #4]
   11f48:	3308      	adds	r3, #8
   11f4a:	c603      	stmia	r6!, {r0, r1}
   11f4c:	4573      	cmp	r3, lr
   11f4e:	4632      	mov	r2, r6
   11f50:	d1f7      	bne.n	11f42 <bt_nus_handles_assign+0x1e>
   11f52:	781b      	ldrb	r3, [r3, #0]
   11f54:	4661      	mov	r1, ip
   11f56:	7033      	strb	r3, [r6, #0]
   11f58:	4638      	mov	r0, r7
   11f5a:	f01e ff36 	bl	30dca <bt_uuid_cmp>
   11f5e:	4606      	mov	r6, r0
   11f60:	b128      	cbz	r0, 11f6e <bt_nus_handles_assign+0x4a>
		return -ENOTSUP;
   11f62:	f06f 0685 	mvn.w	r6, #133	; 0x85
	nus_c->handles.rx = gatt_desc->handle;

	/* Assign connection instance. */
	nus_c->conn = bt_gatt_dm_conn_get(dm);
	return 0;
}
   11f66:	4630      	mov	r0, r6
   11f68:	b01c      	add	sp, #112	; 0x70
   11f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
__ssp_bos_icheck3(memset, void *, int)
   11f6e:	f04f 33ff 	mov.w	r3, #4294967295
	gatt_chrc = bt_gatt_dm_char_by_uuid(dm, BT_UUID_NUS_TX);
   11f72:	aa02      	add	r2, sp, #8
   11f74:	4694      	mov	ip, r2
   11f76:	60a3      	str	r3, [r4, #8]
   11f78:	81a3      	strh	r3, [r4, #12]
   11f7a:	4b44      	ldr	r3, [pc, #272]	; (1208c <bt_nus_handles_assign+0x168>)
   11f7c:	f103 0810 	add.w	r8, r3, #16
   11f80:	4617      	mov	r7, r2
   11f82:	6818      	ldr	r0, [r3, #0]
   11f84:	6859      	ldr	r1, [r3, #4]
   11f86:	3308      	adds	r3, #8
   11f88:	c703      	stmia	r7!, {r0, r1}
   11f8a:	4543      	cmp	r3, r8
   11f8c:	463a      	mov	r2, r7
   11f8e:	d1f7      	bne.n	11f80 <bt_nus_handles_assign+0x5c>
   11f90:	781b      	ldrb	r3, [r3, #0]
   11f92:	4661      	mov	r1, ip
   11f94:	703b      	strb	r3, [r7, #0]
   11f96:	4628      	mov	r0, r5
   11f98:	f7ff fcf0 	bl	1197c <bt_gatt_dm_char_by_uuid>
	if (!gatt_chrc) {
   11f9c:	4607      	mov	r7, r0
   11f9e:	b968      	cbnz	r0, 11fbc <bt_nus_handles_assign+0x98>
		LOG_ERR("Missing NUS TX characteristic.");
   11fa0:	4b3b      	ldr	r3, [pc, #236]	; (12090 <bt_nus_handles_assign+0x16c>)
   11fa2:	931b      	str	r3, [sp, #108]	; 0x6c
   11fa4:	2302      	movs	r3, #2
   11fa6:	931a      	str	r3, [sp, #104]	; 0x68
   11fa8:	4603      	mov	r3, r0
   11faa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11fae:	4839      	ldr	r0, [pc, #228]	; (12094 <bt_nus_handles_assign+0x170>)
   11fb0:	aa1a      	add	r2, sp, #104	; 0x68
   11fb2:	f7fe f93f 	bl	10234 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   11fb6:	f06f 0615 	mvn.w	r6, #21
   11fba:	e7d4      	b.n	11f66 <bt_nus_handles_assign+0x42>
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc, BT_UUID_NUS_TX);
   11fbc:	f10d 0c1c 	add.w	ip, sp, #28
   11fc0:	4662      	mov	r2, ip
   11fc2:	4b32      	ldr	r3, [pc, #200]	; (1208c <bt_nus_handles_assign+0x168>)
   11fc4:	46e6      	mov	lr, ip
   11fc6:	6818      	ldr	r0, [r3, #0]
   11fc8:	6859      	ldr	r1, [r3, #4]
   11fca:	3308      	adds	r3, #8
   11fcc:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   11fd0:	4543      	cmp	r3, r8
   11fd2:	46f4      	mov	ip, lr
   11fd4:	d1f6      	bne.n	11fc4 <bt_nus_handles_assign+0xa0>
   11fd6:	781b      	ldrb	r3, [r3, #0]
   11fd8:	4639      	mov	r1, r7
   11fda:	f88e 3000 	strb.w	r3, [lr]
   11fde:	4628      	mov	r0, r5
   11fe0:	f01e f959 	bl	30296 <bt_gatt_dm_desc_by_uuid>
	if (!gatt_desc) {
   11fe4:	4603      	mov	r3, r0
   11fe6:	b920      	cbnz	r0, 11ff2 <bt_nus_handles_assign+0xce>
		LOG_ERR("Missing NUS TX value descriptor in characteristic.");
   11fe8:	4a2b      	ldr	r2, [pc, #172]	; (12098 <bt_nus_handles_assign+0x174>)
   11fea:	921b      	str	r2, [sp, #108]	; 0x6c
   11fec:	2202      	movs	r2, #2
   11fee:	921a      	str	r2, [sp, #104]	; 0x68
	compiler_barrier();
   11ff0:	e7db      	b.n	11faa <bt_nus_handles_assign+0x86>
	nus_c->handles.tx = gatt_desc->handle;
   11ff2:	8883      	ldrh	r3, [r0, #4]
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc, BT_UUID_GATT_CCC);
   11ff4:	4639      	mov	r1, r7
	nus_c->handles.tx = gatt_desc->handle;
   11ff6:	8163      	strh	r3, [r4, #10]
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc, BT_UUID_GATT_CCC);
   11ff8:	2300      	movs	r3, #0
   11ffa:	f88d 3004 	strb.w	r3, [sp, #4]
   11ffe:	f642 1302 	movw	r3, #10498	; 0x2902
   12002:	4628      	mov	r0, r5
   12004:	aa01      	add	r2, sp, #4
   12006:	f8ad 3006 	strh.w	r3, [sp, #6]
   1200a:	f01e f944 	bl	30296 <bt_gatt_dm_desc_by_uuid>
	if (!gatt_desc) {
   1200e:	4603      	mov	r3, r0
   12010:	b908      	cbnz	r0, 12016 <bt_nus_handles_assign+0xf2>
		LOG_ERR("Missing NUS TX CCC in characteristic.");
   12012:	4a22      	ldr	r2, [pc, #136]	; (1209c <bt_nus_handles_assign+0x178>)
   12014:	e7e9      	b.n	11fea <bt_nus_handles_assign+0xc6>
	gatt_chrc = bt_gatt_dm_char_by_uuid(dm, BT_UUID_NUS_RX);
   12016:	aa0c      	add	r2, sp, #48	; 0x30
   12018:	4694      	mov	ip, r2
	nus_c->handles.tx_ccc = gatt_desc->handle;
   1201a:	8883      	ldrh	r3, [r0, #4]
   1201c:	81a3      	strh	r3, [r4, #12]
	gatt_chrc = bt_gatt_dm_char_by_uuid(dm, BT_UUID_NUS_RX);
   1201e:	4b20      	ldr	r3, [pc, #128]	; (120a0 <bt_nus_handles_assign+0x17c>)
   12020:	f103 0810 	add.w	r8, r3, #16
   12024:	4617      	mov	r7, r2
   12026:	6818      	ldr	r0, [r3, #0]
   12028:	6859      	ldr	r1, [r3, #4]
   1202a:	3308      	adds	r3, #8
   1202c:	c703      	stmia	r7!, {r0, r1}
   1202e:	4543      	cmp	r3, r8
   12030:	463a      	mov	r2, r7
   12032:	d1f7      	bne.n	12024 <bt_nus_handles_assign+0x100>
   12034:	781b      	ldrb	r3, [r3, #0]
   12036:	4661      	mov	r1, ip
   12038:	703b      	strb	r3, [r7, #0]
   1203a:	4628      	mov	r0, r5
   1203c:	f7ff fc9e 	bl	1197c <bt_gatt_dm_char_by_uuid>
	if (!gatt_chrc) {
   12040:	4603      	mov	r3, r0
   12042:	b908      	cbnz	r0, 12048 <bt_nus_handles_assign+0x124>
		LOG_ERR("Missing NUS RX characteristic.");
   12044:	4a17      	ldr	r2, [pc, #92]	; (120a4 <bt_nus_handles_assign+0x180>)
   12046:	e7d0      	b.n	11fea <bt_nus_handles_assign+0xc6>
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc, BT_UUID_NUS_RX);
   12048:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   1204c:	4662      	mov	r2, ip
   1204e:	4f14      	ldr	r7, [pc, #80]	; (120a0 <bt_nus_handles_assign+0x17c>)
   12050:	46e6      	mov	lr, ip
   12052:	6838      	ldr	r0, [r7, #0]
   12054:	6879      	ldr	r1, [r7, #4]
   12056:	3708      	adds	r7, #8
   12058:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   1205c:	4547      	cmp	r7, r8
   1205e:	46f4      	mov	ip, lr
   12060:	d1f6      	bne.n	12050 <bt_nus_handles_assign+0x12c>
   12062:	7839      	ldrb	r1, [r7, #0]
   12064:	4628      	mov	r0, r5
   12066:	f88e 1000 	strb.w	r1, [lr]
   1206a:	4619      	mov	r1, r3
   1206c:	f01e f913 	bl	30296 <bt_gatt_dm_desc_by_uuid>
	if (!gatt_desc) {
   12070:	4603      	mov	r3, r0
   12072:	b908      	cbnz	r0, 12078 <bt_nus_handles_assign+0x154>
		LOG_ERR("Missing NUS RX value descriptor in characteristic.");
   12074:	4a0c      	ldr	r2, [pc, #48]	; (120a8 <bt_nus_handles_assign+0x184>)
   12076:	e7b8      	b.n	11fea <bt_nus_handles_assign+0xc6>
	nus_c->handles.rx = gatt_desc->handle;
   12078:	8883      	ldrh	r3, [r0, #4]
	nus_c->conn = bt_gatt_dm_conn_get(dm);
   1207a:	4628      	mov	r0, r5
	nus_c->handles.rx = gatt_desc->handle;
   1207c:	8123      	strh	r3, [r4, #8]
	nus_c->conn = bt_gatt_dm_conn_get(dm);
   1207e:	f01e f8b9 	bl	301f4 <bt_gatt_dm_conn_get>
   12082:	6020      	str	r0, [r4, #0]
	return 0;
   12084:	e76f      	b.n	11f66 <bt_nus_handles_assign+0x42>
   12086:	bf00      	nop
   12088:	00037bcd 	.word	0x00037bcd
   1208c:	00037bde 	.word	0x00037bde
   12090:	0003aa9e 	.word	0x0003aa9e
   12094:	00037a38 	.word	0x00037a38
   12098:	0003aabd 	.word	0x0003aabd
   1209c:	0003aaf0 	.word	0x0003aaf0
   120a0:	00037bef 	.word	0x00037bef
   120a4:	0003ab16 	.word	0x0003ab16
   120a8:	0003ab35 	.word	0x0003ab35

000120ac <bt_nus_subscribe_receive>:

int bt_nus_subscribe_receive(struct bt_nus_client *nus_c)
{
   120ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int err;

	if (atomic_test_and_set_bit(&nus_c->state, NUS_C_TX_NOTIF_ENABLED)) {
   120b0:	1d05      	adds	r5, r0, #4
{
   120b2:	af00      	add	r7, sp, #0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   120b4:	e8d5 3fef 	ldaex	r3, [r5]
   120b8:	f043 0202 	orr.w	r2, r3, #2
   120bc:	e8c5 2fe1 	stlex	r1, r2, [r5]
   120c0:	2900      	cmp	r1, #0
   120c2:	d1f7      	bne.n	120b4 <bt_nus_subscribe_receive+0x8>
	if (atomic_test_and_set_bit(&nus_c->state, NUS_C_TX_NOTIF_ENABLED)) {
   120c4:	f013 0602 	ands.w	r6, r3, #2
   120c8:	d134      	bne.n	12134 <bt_nus_subscribe_receive+0x88>
		return -EALREADY;
	}

	nus_c->tx_notif_params.notify = on_received;
   120ca:	4b1c      	ldr	r3, [pc, #112]	; (1213c <bt_nus_subscribe_receive+0x90>)
   120cc:	f100 0224 	add.w	r2, r0, #36	; 0x24
   120d0:	6103      	str	r3, [r0, #16]
	nus_c->tx_notif_params.value = BT_GATT_CCC_NOTIFY;
   120d2:	2301      	movs	r3, #1
   120d4:	8403      	strh	r3, [r0, #32]
	nus_c->tx_notif_params.value_handle = nus_c->handles.tx;
   120d6:	8943      	ldrh	r3, [r0, #10]
   120d8:	8383      	strh	r3, [r0, #28]
	nus_c->tx_notif_params.ccc_handle = nus_c->handles.tx_ccc;
   120da:	8983      	ldrh	r3, [r0, #12]
   120dc:	83c3      	strh	r3, [r0, #30]
   120de:	e8d2 3fef 	ldaex	r3, [r2]
   120e2:	f043 0301 	orr.w	r3, r3, #1
   120e6:	e8c2 3fe1 	stlex	r1, r3, [r2]
   120ea:	2900      	cmp	r1, #0
   120ec:	d1f7      	bne.n	120de <bt_nus_subscribe_receive+0x32>
	atomic_set_bit(nus_c->tx_notif_params.flags,
		       BT_GATT_SUBSCRIBE_FLAG_VOLATILE);

	err = bt_gatt_subscribe(nus_c->conn, &nus_c->tx_notif_params);
   120ee:	f100 0110 	add.w	r1, r0, #16
   120f2:	6800      	ldr	r0, [r0, #0]
   120f4:	f009 fa02 	bl	1b4fc <bt_gatt_subscribe>
	if (err) {
   120f8:	4604      	mov	r4, r0
   120fa:	b1b8      	cbz	r0, 1212c <bt_nus_subscribe_receive+0x80>
		LOG_ERR("Subscribe failed (err %d)", err);
   120fc:	46e8      	mov	r8, sp
   120fe:	b088      	sub	sp, #32
   12100:	466a      	mov	r2, sp
   12102:	4b0f      	ldr	r3, [pc, #60]	; (12140 <bt_nus_subscribe_receive+0x94>)
   12104:	e9c2 3005 	strd	r3, r0, [r2, #20]
   12108:	2303      	movs	r3, #3
   1210a:	f842 3f10 	str.w	r3, [r2, #16]!
	z_impl_z_log_msg_static_create(source, desc, package, data);
   1210e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12112:	4633      	mov	r3, r6
   12114:	480b      	ldr	r0, [pc, #44]	; (12144 <bt_nus_subscribe_receive+0x98>)
   12116:	f7fe f88d 	bl	10234 <z_impl_z_log_msg_static_create>
   1211a:	46c5      	mov	sp, r8
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1211c:	e8d5 3fef 	ldaex	r3, [r5]
   12120:	f023 0302 	bic.w	r3, r3, #2
   12124:	e8c5 3fe2 	stlex	r2, r3, [r5]
   12128:	2a00      	cmp	r2, #0
   1212a:	d1f7      	bne.n	1211c <bt_nus_subscribe_receive+0x70>
	} else {
		LOG_DBG("[SUBSCRIBED]");
	}

	return err;
}
   1212c:	4620      	mov	r0, r4
   1212e:	46bd      	mov	sp, r7
   12130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EALREADY;
   12134:	f06f 0477 	mvn.w	r4, #119	; 0x77
   12138:	e7f8      	b.n	1212c <bt_nus_subscribe_receive+0x80>
   1213a:	bf00      	nop
   1213c:	0003034d 	.word	0x0003034d
   12140:	0003ab68 	.word	0x0003ab68
   12144:	00037a38 	.word	0x00037a38

00012148 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   12148:	4904      	ldr	r1, [pc, #16]	; (1215c <sub_bytes+0x14>)
   1214a:	1e43      	subs	r3, r0, #1
   1214c:	300f      	adds	r0, #15
   1214e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   12152:	5c8a      	ldrb	r2, [r1, r2]
	for (i = 0; i < (Nb * Nk); ++i) {
   12154:	4283      	cmp	r3, r0
		s[i] = sbox[s[i]];
   12156:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   12158:	d1f9      	bne.n	1214e <sub_bytes+0x6>
	}
}
   1215a:	4770      	bx	lr
   1215c:	0003ab88 	.word	0x0003ab88

00012160 <tc_aes128_set_encrypt_key>:
{
   12160:	b5f0      	push	{r4, r5, r6, r7, lr}
   12162:	4607      	mov	r7, r0
	const unsigned int rconst[11] = {
   12164:	4e26      	ldr	r6, [pc, #152]	; (12200 <tc_aes128_set_encrypt_key+0xa0>)
{
   12166:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   12168:	ad01      	add	r5, sp, #4
{
   1216a:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   1216c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1216e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   12170:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   12172:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   12174:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   12178:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   1217c:	4638      	mov	r0, r7
   1217e:	2f00      	cmp	r7, #0
   12180:	d039      	beq.n	121f6 <tc_aes128_set_encrypt_key+0x96>
	} else if (k == (const uint8_t *) 0) {
   12182:	2c00      	cmp	r4, #0
   12184:	d039      	beq.n	121fa <tc_aes128_set_encrypt_key+0x9a>
   12186:	1f38      	subs	r0, r7, #4
   12188:	4602      	mov	r2, r0
   1218a:	4621      	mov	r1, r4
   1218c:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   1218e:	784b      	ldrb	r3, [r1, #1]
   12190:	780d      	ldrb	r5, [r1, #0]
   12192:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   12194:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   12198:	78cd      	ldrb	r5, [r1, #3]
	for (i = 0; i < Nk; ++i) {
   1219a:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   1219c:	432b      	orrs	r3, r5
   1219e:	f811 5c02 	ldrb.w	r5, [r1, #-2]
	for (i = 0; i < Nk; ++i) {
   121a2:	428c      	cmp	r4, r1
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   121a4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   121a8:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   121ac:	d1ef      	bne.n	1218e <tc_aes128_set_encrypt_key+0x2e>
   121ae:	2104      	movs	r1, #4
			t = subword(rotword(t)) ^ rconst[i/Nk];
   121b0:	4c14      	ldr	r4, [pc, #80]	; (12204 <tc_aes128_set_encrypt_key+0xa4>)
		if ((i % Nk) == 0) {
   121b2:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   121b4:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   121b6:	d116      	bne.n	121e6 <tc_aes128_set_encrypt_key+0x86>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   121b8:	f3c3 4207 	ubfx	r2, r3, #16, #8
   121bc:	5ca5      	ldrb	r5, [r4, r2]
   121be:	0e1a      	lsrs	r2, r3, #24
   121c0:	5ca2      	ldrb	r2, [r4, r2]
   121c2:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   121c6:	f3c3 2507 	ubfx	r5, r3, #8, #8
   121ca:	5d65      	ldrb	r5, [r4, r5]
   121cc:	b2db      	uxtb	r3, r3
   121ce:	5ce3      	ldrb	r3, [r4, r3]
   121d0:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   121d4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   121d8:	f021 0303 	bic.w	r3, r1, #3
   121dc:	3330      	adds	r3, #48	; 0x30
   121de:	446b      	add	r3, sp
   121e0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   121e4:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   121e6:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   121ea:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   121ec:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   121ee:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   121f0:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   121f2:	d1de      	bne.n	121b2 <tc_aes128_set_encrypt_key+0x52>
	return TC_CRYPTO_SUCCESS;
   121f4:	2001      	movs	r0, #1
}
   121f6:	b00d      	add	sp, #52	; 0x34
   121f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   121fa:	4620      	mov	r0, r4
   121fc:	e7fb      	b.n	121f6 <tc_aes128_set_encrypt_key+0x96>
   121fe:	bf00      	nop
   12200:	00037b20 	.word	0x00037b20
   12204:	0003ab88 	.word	0x0003ab88

00012208 <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
   12208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   1220c:	2700      	movs	r7, #0
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   1220e:	6803      	ldr	r3, [r0, #0]
{
   12210:	b09d      	sub	sp, #116	; 0x74
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   12212:	9302      	str	r3, [sp, #8]
   12214:	6843      	ldr	r3, [r0, #4]
   12216:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 123d4 <compress+0x1cc>
   1221a:	9303      	str	r3, [sp, #12]
   1221c:	6883      	ldr	r3, [r0, #8]
   1221e:	e9dd 4602 	ldrd	r4, r6, [sp, #8]
   12222:	9304      	str	r3, [sp, #16]
   12224:	68c3      	ldr	r3, [r0, #12]
   12226:	9305      	str	r3, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   12228:	6903      	ldr	r3, [r0, #16]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   1222a:	e9dd be04 	ldrd	fp, lr, [sp, #16]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   1222e:	9306      	str	r3, [sp, #24]
   12230:	6943      	ldr	r3, [r0, #20]
   12232:	9307      	str	r3, [sp, #28]
   12234:	6983      	ldr	r3, [r0, #24]
   12236:	e9dd 2c06 	ldrd	r2, ip, [sp, #24]
   1223a:	9308      	str	r3, [sp, #32]
   1223c:	69c3      	ldr	r3, [r0, #28]
   1223e:	4698      	mov	r8, r3
   12240:	9309      	str	r3, [sp, #36]	; 0x24
   12242:	9b08      	ldr	r3, [sp, #32]
   12244:	9300      	str	r3, [sp, #0]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
   12246:	59cd      	ldr	r5, [r1, r7]
		t1 = work_space[i] = n;
   12248:	ab0c      	add	r3, sp, #48	; 0x30
   1224a:	ba2d      	rev	r5, r5
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   1224c:	f85a 9b04 	ldr.w	r9, [sl], #4
		t1 = work_space[i] = n;
   12250:	51dd      	str	r5, [r3, r7]
	return (((a) >> n) | ((a) << (32 - n)));
   12252:	ea4f 23f2 	mov.w	r3, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   12256:	44a9      	add	r9, r5
   12258:	ea83 13b2 	eor.w	r3, r3, r2, ror #6
   1225c:	9d00      	ldr	r5, [sp, #0]
   1225e:	ea83 6372 	eor.w	r3, r3, r2, ror #25
   12262:	444b      	add	r3, r9
   12264:	ea25 0502 	bic.w	r5, r5, r2
   12268:	ea02 090c 	and.w	r9, r2, ip
   1226c:	ea85 0509 	eor.w	r5, r5, r9
   12270:	442b      	add	r3, r5
   12272:	4443      	add	r3, r8
		t2 = Sigma0(a) + Maj(a, b, c);
   12274:	ea86 050b 	eor.w	r5, r6, fp
	return (((a) >> n) | ((a) << (32 - n)));
   12278:	ea4f 3874 	mov.w	r8, r4, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
   1227c:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
   12280:	4025      	ands	r5, r4
   12282:	ea06 090b 	and.w	r9, r6, fp
   12286:	ea85 0509 	eor.w	r5, r5, r9
   1228a:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
	for (i = 0; i < 16; ++i) {
   1228e:	3704      	adds	r7, #4
		t2 = Sigma0(a) + Maj(a, b, c);
   12290:	44a8      	add	r8, r5
	for (i = 0; i < 16; ++i) {
   12292:	2f40      	cmp	r7, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
   12294:	eb03 050e 	add.w	r5, r3, lr
		d = c; c = b; b = a; a = t1 + t2;
   12298:	4443      	add	r3, r8
	for (i = 0; i < 16; ++i) {
   1229a:	46de      	mov	lr, fp
   1229c:	f8dd 8000 	ldr.w	r8, [sp]
   122a0:	f040 8088 	bne.w	123b4 <compress+0x1ac>
   122a4:	f04f 0a10 	mov.w	sl, #16
   122a8:	494b      	ldr	r1, [pc, #300]	; (123d8 <compress+0x1d0>)
   122aa:	910a      	str	r1, [sp, #40]	; 0x28
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
   122ac:	4651      	mov	r1, sl
   122ae:	f10a 0a01 	add.w	sl, sl, #1
   122b2:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
   122b6:	f00a 070f 	and.w	r7, sl, #15
   122ba:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
   122be:	f857 7c40 	ldr.w	r7, [r7, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   122c2:	f001 090f 	and.w	r9, r1, #15
	return (((a) >> n) | ((a) << (32 - n)));
   122c6:	ea4f 48b7 	mov.w	r8, r7, ror #18
		s0 = work_space[(i+1)&0x0f];
   122ca:	9701      	str	r7, [sp, #4]
		s0 = sigma0(s0);
   122cc:	ea88 18f7 	eor.w	r8, r8, r7, ror #7
		s1 = work_space[(i+14)&0x0f];
   122d0:	f101 070e 	add.w	r7, r1, #14
   122d4:	f007 070f 	and.w	r7, r7, #15
   122d8:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
   122dc:	f857 7c40 	ldr.w	r7, [r7, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   122e0:	3109      	adds	r1, #9
	return (((a) >> n) | ((a) << (32 - n)));
   122e2:	ea4f 4ef7 	mov.w	lr, r7, ror #19
		s1 = sigma1(s1);
   122e6:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
   122ea:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   122ee:	f001 010f 	and.w	r1, r1, #15
   122f2:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
   122f6:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
   122fa:	eb0e 0989 	add.w	r9, lr, r9, lsl #2
   122fe:	f859 ec40 	ldr.w	lr, [r9, #-64]
   12302:	f851 1c40 	ldr.w	r1, [r1, #-64]
	for ( ; i < 64; ++i) {
   12306:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   1230a:	4471      	add	r1, lr
		s0 = sigma0(s0);
   1230c:	f8dd e004 	ldr.w	lr, [sp, #4]
   12310:	ea88 08de 	eor.w	r8, r8, lr, lsr #3
		s1 = sigma1(s1);
   12314:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   12318:	4441      	add	r1, r8
		s1 = sigma1(s1);
   1231a:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   1231e:	4471      	add	r1, lr
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   12320:	ea05 0802 	and.w	r8, r5, r2
	return (((a) >> n) | ((a) << (32 - n)));
   12324:	ea4f 2ef5 	mov.w	lr, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   12328:	ea2c 0705 	bic.w	r7, ip, r5
   1232c:	ea87 0708 	eor.w	r7, r7, r8
   12330:	ea8e 1eb5 	eor.w	lr, lr, r5, ror #6
   12334:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   12338:	ea8e 6e75 	eor.w	lr, lr, r5, ror #25
   1233c:	4477      	add	r7, lr
   1233e:	f858 ef04 	ldr.w	lr, [r8, #4]!
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   12342:	f849 1c40 	str.w	r1, [r9, #-64]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   12346:	4477      	add	r7, lr
   12348:	440f      	add	r7, r1
   1234a:	9900      	ldr	r1, [sp, #0]
	return (((a) >> n) | ((a) << (32 - n)));
   1234c:	ea4f 3e73 	mov.w	lr, r3, ror #13
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   12350:	4439      	add	r1, r7
		t2 = Sigma0(a) + Maj(a, b, c);
   12352:	ea84 0706 	eor.w	r7, r4, r6
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   12356:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
		t2 = Sigma0(a) + Maj(a, b, c);
   1235a:	ea8e 0eb3 	eor.w	lr, lr, r3, ror #2
   1235e:	ea07 0703 	and.w	r7, r7, r3
   12362:	ea04 0806 	and.w	r8, r4, r6
   12366:	ea8e 5eb3 	eor.w	lr, lr, r3, ror #22
   1236a:	ea87 0708 	eor.w	r7, r7, r8
   1236e:	4477      	add	r7, lr
		h = g; g = f; f = e; e = d + t1;
		d = c; c = b; b = a; a = t1 + t2;
   12370:	440f      	add	r7, r1
		h = g; g = f; f = e; e = d + t1;
   12372:	eb01 0e0b 	add.w	lr, r1, fp
	for ( ; i < 64; ++i) {
   12376:	f8cd c000 	str.w	ip, [sp]
   1237a:	46b3      	mov	fp, r6
   1237c:	d122      	bne.n	123c4 <compress+0x1bc>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
   1237e:	9902      	ldr	r1, [sp, #8]
   12380:	4439      	add	r1, r7
   12382:	6001      	str	r1, [r0, #0]
   12384:	9903      	ldr	r1, [sp, #12]
   12386:	4419      	add	r1, r3
   12388:	9b04      	ldr	r3, [sp, #16]
   1238a:	6041      	str	r1, [r0, #4]
   1238c:	4423      	add	r3, r4
   1238e:	6083      	str	r3, [r0, #8]
   12390:	9b05      	ldr	r3, [sp, #20]
   12392:	4433      	add	r3, r6
   12394:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
   12396:	9b06      	ldr	r3, [sp, #24]
   12398:	4473      	add	r3, lr
   1239a:	6103      	str	r3, [r0, #16]
   1239c:	9b07      	ldr	r3, [sp, #28]
   1239e:	442b      	add	r3, r5
   123a0:	6143      	str	r3, [r0, #20]
   123a2:	9b08      	ldr	r3, [sp, #32]
   123a4:	4413      	add	r3, r2
   123a6:	6183      	str	r3, [r0, #24]
   123a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   123aa:	4463      	add	r3, ip
   123ac:	61c3      	str	r3, [r0, #28]
}
   123ae:	b01d      	add	sp, #116	; 0x74
   123b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123b4:	46b3      	mov	fp, r6
   123b6:	f8cd c000 	str.w	ip, [sp]
   123ba:	4626      	mov	r6, r4
   123bc:	4694      	mov	ip, r2
		d = c; c = b; b = a; a = t1 + t2;
   123be:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
   123c0:	462a      	mov	r2, r5
   123c2:	e740      	b.n	12246 <compress+0x3e>
   123c4:	4694      	mov	ip, r2
   123c6:	4626      	mov	r6, r4
   123c8:	462a      	mov	r2, r5
   123ca:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
   123cc:	4675      	mov	r5, lr
		d = c; c = b; b = a; a = t1 + t2;
   123ce:	463b      	mov	r3, r7
   123d0:	e76c      	b.n	122ac <compress+0xa4>
   123d2:	bf00      	nop
   123d4:	00037e5c 	.word	0x00037e5c
   123d8:	00037e98 	.word	0x00037e98

000123dc <tc_sha256_init>:
{
   123dc:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
   123de:	4604      	mov	r4, r0
   123e0:	b1c8      	cbz	r0, 12416 <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
   123e2:	2270      	movs	r2, #112	; 0x70
   123e4:	2100      	movs	r1, #0
   123e6:	f01d fff9 	bl	303dc <_set>
	s->iv[1] = 0xbb67ae85;
   123ea:	4b0b      	ldr	r3, [pc, #44]	; (12418 <tc_sha256_init+0x3c>)
   123ec:	4a0b      	ldr	r2, [pc, #44]	; (1241c <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
   123ee:	490c      	ldr	r1, [pc, #48]	; (12420 <tc_sha256_init+0x44>)
	s->iv[1] = 0xbb67ae85;
   123f0:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
   123f4:	4b0b      	ldr	r3, [pc, #44]	; (12424 <tc_sha256_init+0x48>)
	s->iv[5] = 0x9b05688c;
   123f6:	480c      	ldr	r0, [pc, #48]	; (12428 <tc_sha256_init+0x4c>)
	s->iv[3] = 0xa54ff53a;
   123f8:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
   123fc:	4b0b      	ldr	r3, [pc, #44]	; (1242c <tc_sha256_init+0x50>)
   123fe:	e9c4 0304 	strd	r0, r3, [r4, #16]
	return TC_CRYPTO_SUCCESS;
   12402:	2001      	movs	r0, #1
	s->iv[6] = 0x1f83d9ab;
   12404:	4b0a      	ldr	r3, [pc, #40]	; (12430 <tc_sha256_init+0x54>)
   12406:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
   12408:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
   1240c:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
   12410:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
   12414:	61e3      	str	r3, [r4, #28]
}
   12416:	bd10      	pop	{r4, pc}
   12418:	bb67ae85 	.word	0xbb67ae85
   1241c:	6a09e667 	.word	0x6a09e667
   12420:	3c6ef372 	.word	0x3c6ef372
   12424:	a54ff53a 	.word	0xa54ff53a
   12428:	510e527f 	.word	0x510e527f
   1242c:	9b05688c 	.word	0x9b05688c
   12430:	1f83d9ab 	.word	0x1f83d9ab

00012434 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   12434:	4901      	ldr	r1, [pc, #4]	; (1243c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   12436:	2210      	movs	r2, #16
	str	r2, [r1]
   12438:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   1243a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   1243c:	e000ed10 	.word	0xe000ed10

00012440 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   12440:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   12442:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   12444:	f380 8811 	msr	BASEPRI, r0
	isb
   12448:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
   1244c:	f3bf 8f4f 	dsb	sy
   12450:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   12452:	b662      	cpsie	i
	isb
   12454:	f3bf 8f6f 	isb	sy

	bx	lr
   12458:	4770      	bx	lr
   1245a:	bf00      	nop

0001245c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   1245c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   1245e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   12460:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
   12464:	f3bf 8f4f 	dsb	sy
   12468:	bf20      	wfe

	msr	BASEPRI, r0
   1246a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   1246e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   12470:	4770      	bx	lr
   12472:	bf00      	nop

00012474 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   12474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12478:	4681      	mov	r9, r0

	if (esf != NULL) {
   1247a:	460c      	mov	r4, r1
{
   1247c:	af00      	add	r7, sp, #0
	if (esf != NULL) {
   1247e:	2900      	cmp	r1, #0
   12480:	d04c      	beq.n	1251c <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   12482:	e9d1 1200 	ldrd	r1, r2, [r1]
   12486:	466e      	mov	r6, sp
   12488:	b08a      	sub	sp, #40	; 0x28
   1248a:	68a3      	ldr	r3, [r4, #8]
   1248c:	466d      	mov	r5, sp
   1248e:	f04f 0a05 	mov.w	sl, #5
   12492:	46a8      	mov	r8, r5
   12494:	4825      	ldr	r0, [pc, #148]	; (1252c <z_arm_fatal_error+0xb8>)
   12496:	e9c5 2307 	strd	r2, r3, [r5, #28]
   1249a:	e9c5 0105 	strd	r0, r1, [r5, #20]
   1249e:	f848 af10 	str.w	sl, [r8, #16]!
   124a2:	2300      	movs	r3, #0
   124a4:	4642      	mov	r2, r8
   124a6:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   124aa:	4821      	ldr	r0, [pc, #132]	; (12530 <z_arm_fatal_error+0xbc>)
   124ac:	f7fd fec2 	bl	10234 <z_impl_z_log_msg_static_create>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   124b0:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   124b4:	46b5      	mov	sp, r6
   124b6:	6963      	ldr	r3, [r4, #20]
   124b8:	46ad      	mov	sp, r5
   124ba:	481e      	ldr	r0, [pc, #120]	; (12534 <z_arm_fatal_error+0xc0>)
   124bc:	e9c5 2307 	strd	r2, r3, [r5, #28]
   124c0:	e9c5 0105 	strd	r0, r1, [r5, #20]
   124c4:	f8c5 a010 	str.w	sl, [r5, #16]
   124c8:	2300      	movs	r3, #0
   124ca:	4642      	mov	r2, r8
   124cc:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   124d0:	4817      	ldr	r0, [pc, #92]	; (12530 <z_arm_fatal_error+0xbc>)
   124d2:	f7fd feaf 	bl	10234 <z_impl_z_log_msg_static_create>
   124d6:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   124d8:	b088      	sub	sp, #32
   124da:	69e3      	ldr	r3, [r4, #28]
   124dc:	466d      	mov	r5, sp
   124de:	f04f 0a03 	mov.w	sl, #3
   124e2:	46a8      	mov	r8, r5
   124e4:	4a14      	ldr	r2, [pc, #80]	; (12538 <z_arm_fatal_error+0xc4>)
   124e6:	e9c5 2305 	strd	r2, r3, [r5, #20]
   124ea:	f848 af10 	str.w	sl, [r8, #16]!
   124ee:	2300      	movs	r3, #0
   124f0:	4642      	mov	r2, r8
   124f2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   124f6:	480e      	ldr	r0, [pc, #56]	; (12530 <z_arm_fatal_error+0xbc>)
   124f8:	f7fd fe9c 	bl	10234 <z_impl_z_log_msg_static_create>
   124fc:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   124fe:	69a3      	ldr	r3, [r4, #24]
   12500:	46ad      	mov	sp, r5
   12502:	4a0e      	ldr	r2, [pc, #56]	; (1253c <z_arm_fatal_error+0xc8>)
   12504:	f8c5 a010 	str.w	sl, [r5, #16]
   12508:	e9c5 2305 	strd	r2, r3, [r5, #20]
   1250c:	2300      	movs	r3, #0
   1250e:	4642      	mov	r2, r8
   12510:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12514:	4806      	ldr	r0, [pc, #24]	; (12530 <z_arm_fatal_error+0xbc>)
   12516:	f7fd fe8d 	bl	10234 <z_impl_z_log_msg_static_create>
   1251a:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   1251c:	4621      	mov	r1, r4
   1251e:	4648      	mov	r0, r9
   12520:	f016 f958 	bl	287d4 <z_fatal_error>
}
   12524:	46bd      	mov	sp, r7
   12526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1252a:	bf00      	nop
   1252c:	0003ac88 	.word	0x0003ac88
   12530:	00037a40 	.word	0x00037a40
   12534:	0003acb7 	.word	0x0003acb7
   12538:	0003ace6 	.word	0x0003ace6
   1253c:	0003acf5 	.word	0x0003acf5

00012540 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   12540:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   12542:	2800      	cmp	r0, #0
   12544:	db07      	blt.n	12556 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12546:	2301      	movs	r3, #1
   12548:	0941      	lsrs	r1, r0, #5
   1254a:	4a03      	ldr	r2, [pc, #12]	; (12558 <arch_irq_enable+0x18>)
   1254c:	f000 001f 	and.w	r0, r0, #31
   12550:	4083      	lsls	r3, r0
   12552:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   12556:	4770      	bx	lr
   12558:	e000e100 	.word	0xe000e100

0001255c <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   1255c:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   1255e:	2800      	cmp	r0, #0
   12560:	db0c      	blt.n	1257c <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12562:	2201      	movs	r2, #1
   12564:	4906      	ldr	r1, [pc, #24]	; (12580 <arch_irq_disable+0x24>)
   12566:	0943      	lsrs	r3, r0, #5
   12568:	f000 001f 	and.w	r0, r0, #31
   1256c:	4082      	lsls	r2, r0
   1256e:	3320      	adds	r3, #32
   12570:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   12574:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12578:	f3bf 8f6f 	isb	sy
}
   1257c:	4770      	bx	lr
   1257e:	bf00      	nop
   12580:	e000e100 	.word	0xe000e100

00012584 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   12584:	4b05      	ldr	r3, [pc, #20]	; (1259c <arch_irq_is_enabled+0x18>)
   12586:	0942      	lsrs	r2, r0, #5
   12588:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1258c:	2301      	movs	r3, #1
   1258e:	f000 001f 	and.w	r0, r0, #31
   12592:	fa03 f000 	lsl.w	r0, r3, r0
}
   12596:	4010      	ands	r0, r2
   12598:	4770      	bx	lr
   1259a:	bf00      	nop
   1259c:	e000e100 	.word	0xe000e100

000125a0 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   125a0:	b538      	push	{r3, r4, r5, lr}
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
		} else {
			/* Use caller supplied prio level as-is */
		}
	} else {
		prio += _IRQ_PRIO_OFFSET;
   125a2:	1c4b      	adds	r3, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   125a4:	2b07      	cmp	r3, #7
{
   125a6:	4604      	mov	r4, r0
   125a8:	460d      	mov	r5, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   125aa:	d90f      	bls.n	125cc <z_arm_irq_priority_set+0x2c>
   125ac:	235b      	movs	r3, #91	; 0x5b
   125ae:	4a10      	ldr	r2, [pc, #64]	; (125f0 <z_arm_irq_priority_set+0x50>)
   125b0:	4910      	ldr	r1, [pc, #64]	; (125f4 <z_arm_irq_priority_set+0x54>)
   125b2:	4811      	ldr	r0, [pc, #68]	; (125f8 <z_arm_irq_priority_set+0x58>)
   125b4:	f01c ff06 	bl	2f3c4 <assert_print>
   125b8:	4629      	mov	r1, r5
   125ba:	4810      	ldr	r0, [pc, #64]	; (125fc <z_arm_irq_priority_set+0x5c>)
   125bc:	2307      	movs	r3, #7
   125be:	4622      	mov	r2, r4
   125c0:	f01c ff00 	bl	2f3c4 <assert_print>
   125c4:	215b      	movs	r1, #91	; 0x5b
   125c6:	480a      	ldr	r0, [pc, #40]	; (125f0 <z_arm_irq_priority_set+0x50>)
   125c8:	f01c fef5 	bl	2f3b6 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   125cc:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   125ce:	2800      	cmp	r0, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   125d0:	bfac      	ite	ge
   125d2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   125d6:	4a0a      	ldrlt	r2, [pc, #40]	; (12600 <z_arm_irq_priority_set+0x60>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   125d8:	ea4f 1343 	mov.w	r3, r3, lsl #5
   125dc:	b2db      	uxtb	r3, r3
   125de:	bfab      	itete	ge
   125e0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   125e4:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   125e8:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   125ec:	5413      	strblt	r3, [r2, r0]
}
   125ee:	bd38      	pop	{r3, r4, r5, pc}
   125f0:	0003ad23 	.word	0x0003ad23
   125f4:	0003ad59 	.word	0x0003ad59
   125f8:	00039995 	.word	0x00039995
   125fc:	0003ad74 	.word	0x0003ad74
   12600:	e000ed14 	.word	0xe000ed14

00012604 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   12604:	bf30      	wfi
    b z_SysNmiOnReset
   12606:	f7ff bffd 	b.w	12604 <z_SysNmiOnReset>
   1260a:	bf00      	nop

0001260c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   1260c:	4a0b      	ldr	r2, [pc, #44]	; (1263c <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   1260e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   12610:	4b0b      	ldr	r3, [pc, #44]	; (12640 <z_arm_prep_c+0x34>)
   12612:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   12616:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   12618:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1261c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   12620:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   12624:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   12628:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   1262c:	f016 f9a6 	bl	2897c <z_bss_zero>
	z_data_copy();
   12630:	f018 fffe 	bl	2b630 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   12634:	f000 fc28 	bl	12e88 <z_arm_interrupt_init>
	z_cstart();
   12638:	f016 f9e0 	bl	289fc <z_cstart>
   1263c:	00008000 	.word	0x00008000
   12640:	e000ed00 	.word	0xe000ed00

00012644 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   12644:	4a09      	ldr	r2, [pc, #36]	; (1266c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   12646:	490a      	ldr	r1, [pc, #40]	; (12670 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   12648:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   1264a:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   1264c:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
   1264e:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   12650:	4908      	ldr	r1, [pc, #32]	; (12674 <arch_swap+0x30>)
   12652:	684b      	ldr	r3, [r1, #4]
   12654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   12658:	604b      	str	r3, [r1, #4]
   1265a:	2300      	movs	r3, #0
   1265c:	f383 8811 	msr	BASEPRI, r3
   12660:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   12664:	6893      	ldr	r3, [r2, #8]
}
   12666:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   12668:	4770      	bx	lr
   1266a:	bf00      	nop
   1266c:	2000eeec 	.word	0x2000eeec
   12670:	00038a08 	.word	0x00038a08
   12674:	e000ed00 	.word	0xe000ed00

00012678 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   12678:	4915      	ldr	r1, [pc, #84]	; (126d0 <z_arm_pendsv+0x58>)
    ldr r2, [r1, #_kernel_offset_to_current]
   1267a:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
   1267c:	f882 e081 	strb.w	lr, [r2, #129]	; 0x81
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   12680:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   12684:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   12686:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   1268a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1268e:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   12690:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   12694:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   12698:	4f0e      	ldr	r7, [pc, #56]	; (126d4 <z_arm_pendsv+0x5c>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   1269a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   1269e:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
   126a0:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   126a2:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
   126a4:	f992 e081 	ldrsb.w	lr, [r2, #129]	; 0x81

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   126a8:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   126aa:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   126ac:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   126ae:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   126b2:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   126b6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   126ba:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   126be:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   126c2:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   126c4:	f01e fae0 	bl	30c88 <configure_builtin_stack_guard>
    pop {r2, lr}
   126c8:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   126cc:	4770      	bx	lr
   126ce:	0000      	.short	0x0000
    ldr r1, =_kernel
   126d0:	2000eeec 	.word	0x2000eeec
    ldr v4, =_SCS_ICSR
   126d4:	e000ed04 	.word	0xe000ed04

000126d8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   126d8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   126dc:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   126de:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   126e2:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   126e6:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   126e8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   126ec:	2902      	cmp	r1, #2
    beq _oops
   126ee:	d0ff      	beq.n	126f0 <_oops>

000126f0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   126f0:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   126f2:	f01e faba 	bl	30c6a <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   126f6:	bd01      	pop	{r0, pc}

000126f8 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   126f8:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   126fc:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   126fe:	490d      	ldr	r1, [pc, #52]	; (12734 <arch_new_thread+0x3c>)
	iframe->a2 = (uint32_t)p1;
   12700:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   12704:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   12706:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   1270a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   1270e:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   12710:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   12714:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   12718:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1271c:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   12720:	2300      	movs	r3, #0
   12722:	6783      	str	r3, [r0, #120]	; 0x78

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
   12724:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   12728:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   1272a:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
   1272c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   12730:	4770      	bx	lr
   12732:	bf00      	nop
   12734:	0002f03f 	.word	0x0002f03f

00012738 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   12738:	4b08      	ldr	r3, [pc, #32]	; (1275c <arch_switch_to_main_thread+0x24>)
   1273a:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   1273c:	6e83      	ldr	r3, [r0, #104]	; 0x68
   1273e:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   12742:	4610      	mov	r0, r2
   12744:	f381 8809 	msr	PSP, r1
   12748:	2100      	movs	r1, #0
   1274a:	b663      	cpsie	if
   1274c:	f381 8811 	msr	BASEPRI, r1
   12750:	f3bf 8f6f 	isb	sy
   12754:	2200      	movs	r2, #0
   12756:	2300      	movs	r3, #0
   12758:	f01c fc71 	bl	2f03e <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   1275c:	2000eeec 	.word	0x2000eeec

00012760 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   12760:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   12762:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   12764:	4a0b      	ldr	r2, [pc, #44]	; (12794 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   12766:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
   12768:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   1276a:	bf1e      	ittt	ne
	movne	r1, #0
   1276c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   1276e:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
   12770:	f023 fcb6 	blne	360e0 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   12774:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   12776:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   1277a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   1277e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   12782:	4905      	ldr	r1, [pc, #20]	; (12798 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   12784:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   12786:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   12788:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   1278a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   1278e:	4903      	ldr	r1, [pc, #12]	; (1279c <_isr_wrapper+0x3c>)
	bx r1
   12790:	4708      	bx	r1
   12792:	0000      	.short	0x0000
	ldr r2, =_kernel
   12794:	2000eeec 	.word	0x2000eeec
	ldr r1, =_sw_isr_table
   12798:	000375dc 	.word	0x000375dc
	ldr r1, =z_arm_int_exit
   1279c:	000127a1 	.word	0x000127a1

000127a0 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   127a0:	4b04      	ldr	r3, [pc, #16]	; (127b4 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   127a2:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   127a4:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
   127a6:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   127a8:	d003      	beq.n	127b2 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   127aa:	4903      	ldr	r1, [pc, #12]	; (127b8 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   127ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   127b0:	600a      	str	r2, [r1, #0]

000127b2 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   127b2:	4770      	bx	lr
	ldr r3, =_kernel
   127b4:	2000eeec 	.word	0x2000eeec
	ldr r1, =_SCS_ICSR
   127b8:	e000ed04 	.word	0xe000ed04

000127bc <mem_manage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   127bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   127c0:	b086      	sub	sp, #24
   127c2:	4606      	mov	r6, r0
   127c4:	460d      	mov	r5, r1
   127c6:	af00      	add	r7, sp, #0
			      bool *recoverable)
{
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
   127c8:	2402      	movs	r4, #2
   127ca:	4b4f      	ldr	r3, [pc, #316]	; (12908 <mem_manage_fault.constprop.0+0x14c>)
   127cc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   127d0:	617b      	str	r3, [r7, #20]
   127d2:	484e      	ldr	r0, [pc, #312]	; (1290c <mem_manage_fault.constprop.0+0x150>)
   127d4:	613c      	str	r4, [r7, #16]
   127d6:	f107 0210 	add.w	r2, r7, #16
   127da:	f01e fa59 	bl	30c90 <z_log_msg_static_create.constprop.0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   127de:	4b4c      	ldr	r3, [pc, #304]	; (12910 <mem_manage_fault.constprop.0+0x154>)
   127e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   127e2:	06d9      	lsls	r1, r3, #27
   127e4:	d57b      	bpl.n	128de <mem_manage_fault.constprop.0+0x122>
		reason = K_ERR_ARM_MEM_STACKING;
		PR_FAULT_INFO("  Stacking error (context area might be"
   127e6:	4b4b      	ldr	r3, [pc, #300]	; (12914 <mem_manage_fault.constprop.0+0x158>)
   127e8:	4848      	ldr	r0, [pc, #288]	; (1290c <mem_manage_fault.constprop.0+0x150>)
   127ea:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   127ee:	e9c7 4304 	strd	r4, r3, [r7, #16]
   127f2:	f107 0210 	add.w	r2, r7, #16
   127f6:	f01e fa4b 	bl	30c90 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_MEM_STACKING;
   127fa:	2011      	movs	r0, #17
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   127fc:	4b44      	ldr	r3, [pc, #272]	; (12910 <mem_manage_fault.constprop.0+0x154>)
   127fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12800:	071a      	lsls	r2, r3, #28
   12802:	d50b      	bpl.n	1281c <mem_manage_fault.constprop.0+0x60>
		reason = K_ERR_ARM_MEM_UNSTACKING;
		PR_FAULT_INFO("  Unstacking error");
   12804:	4b44      	ldr	r3, [pc, #272]	; (12918 <mem_manage_fault.constprop.0+0x15c>)
   12806:	4841      	ldr	r0, [pc, #260]	; (1290c <mem_manage_fault.constprop.0+0x150>)
   12808:	617b      	str	r3, [r7, #20]
   1280a:	2302      	movs	r3, #2
   1280c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12810:	613b      	str	r3, [r7, #16]
   12812:	f107 0210 	add.w	r2, r7, #16
   12816:	f01e fa3b 	bl	30c90 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_MEM_UNSTACKING;
   1281a:	2012      	movs	r0, #18
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   1281c:	4c3c      	ldr	r4, [pc, #240]	; (12910 <mem_manage_fault.constprop.0+0x154>)
   1281e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12820:	079b      	lsls	r3, r3, #30
   12822:	d523      	bpl.n	1286c <mem_manage_fault.constprop.0+0xb0>
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
		PR_FAULT_INFO("  Data Access Violation");
   12824:	46e8      	mov	r8, sp
   12826:	4b3d      	ldr	r3, [pc, #244]	; (1291c <mem_manage_fault.constprop.0+0x160>)
   12828:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1282c:	617b      	str	r3, [r7, #20]
   1282e:	2302      	movs	r3, #2
   12830:	f107 0210 	add.w	r2, r7, #16
   12834:	613b      	str	r3, [r7, #16]
   12836:	4835      	ldr	r0, [pc, #212]	; (1290c <mem_manage_fault.constprop.0+0x150>)
   12838:	f01e fa2a 	bl	30c90 <z_log_msg_static_create.constprop.0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   1283c:	6b63      	ldr	r3, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   1283e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   12840:	0611      	lsls	r1, r2, #24
   12842:	d512      	bpl.n	1286a <mem_manage_fault.constprop.0+0xae>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   12844:	b088      	sub	sp, #32
   12846:	466a      	mov	r2, sp
   12848:	4935      	ldr	r1, [pc, #212]	; (12920 <mem_manage_fault.constprop.0+0x164>)
   1284a:	4830      	ldr	r0, [pc, #192]	; (1290c <mem_manage_fault.constprop.0+0x150>)
   1284c:	e9c2 1305 	strd	r1, r3, [r2, #20]
   12850:	2303      	movs	r3, #3
   12852:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12856:	f842 3f10 	str.w	r3, [r2, #16]!
   1285a:	f01e fa19 	bl	30c90 <z_log_msg_static_create.constprop.0>
   1285e:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
   12860:	b11e      	cbz	r6, 1286a <mem_manage_fault.constprop.0+0xae>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   12862:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12864:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   12868:	62a3      	str	r3, [r4, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
   1286a:	2013      	movs	r0, #19
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   1286c:	4b28      	ldr	r3, [pc, #160]	; (12910 <mem_manage_fault.constprop.0+0x154>)
   1286e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12870:	07da      	lsls	r2, r3, #31
   12872:	d50b      	bpl.n	1288c <mem_manage_fault.constprop.0+0xd0>
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
		PR_FAULT_INFO("  Instruction Access Violation");
   12874:	4b2b      	ldr	r3, [pc, #172]	; (12924 <mem_manage_fault.constprop.0+0x168>)
   12876:	4825      	ldr	r0, [pc, #148]	; (1290c <mem_manage_fault.constprop.0+0x150>)
   12878:	617b      	str	r3, [r7, #20]
   1287a:	2302      	movs	r3, #2
   1287c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12880:	613b      	str	r3, [r7, #16]
   12882:	f107 0210 	add.w	r2, r7, #16
   12886:	f01e fa03 	bl	30c90 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
   1288a:	2014      	movs	r0, #20
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   1288c:	4b20      	ldr	r3, [pc, #128]	; (12910 <mem_manage_fault.constprop.0+0x154>)
   1288e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12890:	069b      	lsls	r3, r3, #26
   12892:	d50b      	bpl.n	128ac <mem_manage_fault.constprop.0+0xf0>
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
		PR_FAULT_INFO(
   12894:	4b24      	ldr	r3, [pc, #144]	; (12928 <mem_manage_fault.constprop.0+0x16c>)
   12896:	481d      	ldr	r0, [pc, #116]	; (1290c <mem_manage_fault.constprop.0+0x150>)
   12898:	617b      	str	r3, [r7, #20]
   1289a:	2302      	movs	r3, #2
   1289c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   128a0:	613b      	str	r3, [r7, #16]
   128a2:	f107 0210 	add.w	r2, r7, #16
   128a6:	f01e f9f3 	bl	30c90 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
   128aa:	2015      	movs	r0, #21
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   128ac:	4b18      	ldr	r3, [pc, #96]	; (12910 <mem_manage_fault.constprop.0+0x154>)
   128ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   128b0:	06d6      	lsls	r6, r2, #27
   128b2:	d402      	bmi.n	128ba <mem_manage_fault.constprop.0+0xfe>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   128b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   128b6:	0794      	lsls	r4, r2, #30
   128b8:	d513      	bpl.n	128e2 <mem_manage_fault.constprop.0+0x126>
					"Stacking error not a stack fail\n");
			}
		}
#else
	(void)mmfar;
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   128ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   128bc:	06d9      	lsls	r1, r3, #27
   128be:	d510      	bpl.n	128e2 <mem_manage_fault.constprop.0+0x126>
   128c0:	491a      	ldr	r1, [pc, #104]	; (1292c <mem_manage_fault.constprop.0+0x170>)
   128c2:	f240 1361 	movw	r3, #353	; 0x161
   128c6:	4a1a      	ldr	r2, [pc, #104]	; (12930 <mem_manage_fault.constprop.0+0x174>)
   128c8:	481a      	ldr	r0, [pc, #104]	; (12934 <mem_manage_fault.constprop.0+0x178>)
   128ca:	f01c fd7b 	bl	2f3c4 <assert_print>
   128ce:	481a      	ldr	r0, [pc, #104]	; (12938 <mem_manage_fault.constprop.0+0x17c>)
   128d0:	f01c fd78 	bl	2f3c4 <assert_print>
   128d4:	f240 1161 	movw	r1, #353	; 0x161
   128d8:	4815      	ldr	r0, [pc, #84]	; (12930 <mem_manage_fault.constprop.0+0x174>)
   128da:	f01c fd6c 	bl	2f3b6 <assert_post_action>
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
   128de:	2010      	movs	r0, #16
   128e0:	e78c      	b.n	127fc <mem_manage_fault.constprop.0+0x40>
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   128e2:	4b0b      	ldr	r3, [pc, #44]	; (12910 <mem_manage_fault.constprop.0+0x154>)

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);

	return reason;
}
   128e4:	3718      	adds	r7, #24
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   128e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   128e8:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   128ea:	bf42      	ittt	mi
   128ec:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   128ee:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   128f2:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   128f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   128f6:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   128fa:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   128fc:	2300      	movs	r3, #0
   128fe:	702b      	strb	r3, [r5, #0]
}
   12900:	46bd      	mov	sp, r7
   12902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12906:	bf00      	nop
   12908:	0003adb4 	.word	0x0003adb4
   1290c:	00037a40 	.word	0x00037a40
   12910:	e000ed00 	.word	0xe000ed00
   12914:	0003adca 	.word	0x0003adca
   12918:	0003adfd 	.word	0x0003adfd
   1291c:	0003ae10 	.word	0x0003ae10
   12920:	0003ae28 	.word	0x0003ae28
   12924:	0003ae3e 	.word	0x0003ae3e
   12928:	0003ae5d 	.word	0x0003ae5d
   1292c:	0003aec6 	.word	0x0003aec6
   12930:	0003ae8c 	.word	0x0003ae8c
   12934:	00039995 	.word	0x00039995
   12938:	0003af10 	.word	0x0003af10

0001293c <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   1293c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12940:	b086      	sub	sp, #24
   12942:	4606      	mov	r6, r0
   12944:	460d      	mov	r5, r1
   12946:	af00      	add	r7, sp, #0
{
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;

	PR_FAULT_INFO("***** BUS FAULT *****");
   12948:	2402      	movs	r4, #2
   1294a:	4b47      	ldr	r3, [pc, #284]	; (12a68 <bus_fault.constprop.0+0x12c>)
   1294c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12950:	617b      	str	r3, [r7, #20]
   12952:	4846      	ldr	r0, [pc, #280]	; (12a6c <bus_fault.constprop.0+0x130>)
   12954:	613c      	str	r4, [r7, #16]
   12956:	f107 0210 	add.w	r2, r7, #16
   1295a:	f01e f999 	bl	30c90 <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   1295e:	4b44      	ldr	r3, [pc, #272]	; (12a70 <bus_fault.constprop.0+0x134>)
   12960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12962:	04d9      	lsls	r1, r3, #19
   12964:	d56d      	bpl.n	12a42 <bus_fault.constprop.0+0x106>
		reason = K_ERR_ARM_BUS_STACKING;
		PR_FAULT_INFO("  Stacking error");
   12966:	4b43      	ldr	r3, [pc, #268]	; (12a74 <bus_fault.constprop.0+0x138>)
   12968:	4840      	ldr	r0, [pc, #256]	; (12a6c <bus_fault.constprop.0+0x130>)
   1296a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1296e:	e9c7 4304 	strd	r4, r3, [r7, #16]
   12972:	f107 0210 	add.w	r2, r7, #16
   12976:	f01e f98b 	bl	30c90 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_STACKING;
   1297a:	2017      	movs	r0, #23
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   1297c:	4b3c      	ldr	r3, [pc, #240]	; (12a70 <bus_fault.constprop.0+0x134>)
   1297e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12980:	051a      	lsls	r2, r3, #20
   12982:	d50b      	bpl.n	1299c <bus_fault.constprop.0+0x60>
		reason = K_ERR_ARM_BUS_UNSTACKING;
		PR_FAULT_INFO("  Unstacking error");
   12984:	4b3c      	ldr	r3, [pc, #240]	; (12a78 <bus_fault.constprop.0+0x13c>)
   12986:	4839      	ldr	r0, [pc, #228]	; (12a6c <bus_fault.constprop.0+0x130>)
   12988:	617b      	str	r3, [r7, #20]
   1298a:	2302      	movs	r3, #2
   1298c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12990:	613b      	str	r3, [r7, #16]
   12992:	f107 0210 	add.w	r2, r7, #16
   12996:	f01e f97b 	bl	30c90 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_UNSTACKING;
   1299a:	2018      	movs	r0, #24
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   1299c:	4c34      	ldr	r4, [pc, #208]	; (12a70 <bus_fault.constprop.0+0x134>)
   1299e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   129a0:	059b      	lsls	r3, r3, #22
   129a2:	d523      	bpl.n	129ec <bus_fault.constprop.0+0xb0>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
		PR_FAULT_INFO("  Precise data bus error");
   129a4:	46e8      	mov	r8, sp
   129a6:	4b35      	ldr	r3, [pc, #212]	; (12a7c <bus_fault.constprop.0+0x140>)
   129a8:	4830      	ldr	r0, [pc, #192]	; (12a6c <bus_fault.constprop.0+0x130>)
   129aa:	617b      	str	r3, [r7, #20]
   129ac:	2302      	movs	r3, #2
   129ae:	f107 0210 	add.w	r2, r7, #16
   129b2:	613b      	str	r3, [r7, #16]
   129b4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   129b8:	f01e f96a 	bl	30c90 <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   129bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   129be:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   129c0:	0410      	lsls	r0, r2, #16
   129c2:	d512      	bpl.n	129ea <bus_fault.constprop.0+0xae>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   129c4:	b088      	sub	sp, #32
   129c6:	466a      	mov	r2, sp
   129c8:	492d      	ldr	r1, [pc, #180]	; (12a80 <bus_fault.constprop.0+0x144>)
   129ca:	4828      	ldr	r0, [pc, #160]	; (12a6c <bus_fault.constprop.0+0x130>)
   129cc:	e9c2 1305 	strd	r1, r3, [r2, #20]
   129d0:	2303      	movs	r3, #3
   129d2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   129d6:	f842 3f10 	str.w	r3, [r2, #16]!
   129da:	f01e f959 	bl	30c90 <z_log_msg_static_create.constprop.0>
   129de:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
   129e0:	b11e      	cbz	r6, 129ea <bus_fault.constprop.0+0xae>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   129e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   129e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   129e8:	62a3      	str	r3, [r4, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
   129ea:	2019      	movs	r0, #25
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   129ec:	4b20      	ldr	r3, [pc, #128]	; (12a70 <bus_fault.constprop.0+0x134>)
   129ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   129f0:	0559      	lsls	r1, r3, #21
   129f2:	d50b      	bpl.n	12a0c <bus_fault.constprop.0+0xd0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
		PR_FAULT_INFO("  Imprecise data bus error");
   129f4:	4b23      	ldr	r3, [pc, #140]	; (12a84 <bus_fault.constprop.0+0x148>)
   129f6:	481d      	ldr	r0, [pc, #116]	; (12a6c <bus_fault.constprop.0+0x130>)
   129f8:	617b      	str	r3, [r7, #20]
   129fa:	2302      	movs	r3, #2
   129fc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12a00:	613b      	str	r3, [r7, #16]
   12a02:	f107 0210 	add.w	r2, r7, #16
   12a06:	f01e f943 	bl	30c90 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
   12a0a:	201a      	movs	r0, #26
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   12a0c:	4b18      	ldr	r3, [pc, #96]	; (12a70 <bus_fault.constprop.0+0x134>)
   12a0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12a10:	05d2      	lsls	r2, r2, #23
   12a12:	d518      	bpl.n	12a46 <bus_fault.constprop.0+0x10a>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
		PR_FAULT_INFO("  Instruction bus error");
   12a14:	4b1c      	ldr	r3, [pc, #112]	; (12a88 <bus_fault.constprop.0+0x14c>)
   12a16:	4815      	ldr	r0, [pc, #84]	; (12a6c <bus_fault.constprop.0+0x130>)
   12a18:	617b      	str	r3, [r7, #20]
   12a1a:	2302      	movs	r3, #2
   12a1c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12a20:	613b      	str	r3, [r7, #16]
   12a22:	f107 0210 	add.w	r2, r7, #16
   12a26:	f01e f933 	bl	30c90 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
   12a2a:	201b      	movs	r0, #27
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   12a2c:	4a10      	ldr	r2, [pc, #64]	; (12a70 <bus_fault.constprop.0+0x134>)

	*recoverable = memory_fault_recoverable(esf, true);

	return reason;
}
   12a2e:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   12a30:	6a93      	ldr	r3, [r2, #40]	; 0x28
   12a32:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   12a36:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   12a38:	2300      	movs	r3, #0
   12a3a:	702b      	strb	r3, [r5, #0]
}
   12a3c:	46bd      	mov	sp, r7
   12a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
   12a42:	2016      	movs	r0, #22
   12a44:	e79a      	b.n	1297c <bus_fault.constprop.0+0x40>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   12a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12a48:	049b      	lsls	r3, r3, #18
   12a4a:	d5ef      	bpl.n	12a2c <bus_fault.constprop.0+0xf0>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   12a4c:	4b0f      	ldr	r3, [pc, #60]	; (12a8c <bus_fault.constprop.0+0x150>)
   12a4e:	4807      	ldr	r0, [pc, #28]	; (12a6c <bus_fault.constprop.0+0x130>)
   12a50:	617b      	str	r3, [r7, #20]
   12a52:	2302      	movs	r3, #2
   12a54:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12a58:	613b      	str	r3, [r7, #16]
   12a5a:	f107 0210 	add.w	r2, r7, #16
   12a5e:	f01e f917 	bl	30c90 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
   12a62:	201c      	movs	r0, #28
   12a64:	e7e2      	b.n	12a2c <bus_fault.constprop.0+0xf0>
   12a66:	bf00      	nop
   12a68:	0003af74 	.word	0x0003af74
   12a6c:	00037a40 	.word	0x00037a40
   12a70:	e000ed00 	.word	0xe000ed00
   12a74:	0003af8a 	.word	0x0003af8a
   12a78:	0003adfd 	.word	0x0003adfd
   12a7c:	0003af9b 	.word	0x0003af9b
   12a80:	0003afb4 	.word	0x0003afb4
   12a84:	0003afc9 	.word	0x0003afc9
   12a88:	0003afe4 	.word	0x0003afe4
   12a8c:	0003ae5d 	.word	0x0003ae5d

00012a90 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   12a90:	b510      	push	{r4, lr}
   12a92:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   12a94:	2402      	movs	r4, #2
   12a96:	4b3e      	ldr	r3, [pc, #248]	; (12b90 <usage_fault.constprop.0+0x100>)
   12a98:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12a9c:	483d      	ldr	r0, [pc, #244]	; (12b94 <usage_fault.constprop.0+0x104>)
   12a9e:	aa04      	add	r2, sp, #16
   12aa0:	9305      	str	r3, [sp, #20]
   12aa2:	9404      	str	r4, [sp, #16]
   12aa4:	f01e f8f4 	bl	30c90 <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   12aa8:	4b3b      	ldr	r3, [pc, #236]	; (12b98 <usage_fault.constprop.0+0x108>)
   12aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12aac:	0199      	lsls	r1, r3, #6
   12aae:	d56c      	bpl.n	12b8a <usage_fault.constprop.0+0xfa>
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
   12ab0:	4b3a      	ldr	r3, [pc, #232]	; (12b9c <usage_fault.constprop.0+0x10c>)
   12ab2:	4838      	ldr	r0, [pc, #224]	; (12b94 <usage_fault.constprop.0+0x104>)
   12ab4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12ab8:	aa04      	add	r2, sp, #16
   12aba:	e9cd 4304 	strd	r4, r3, [sp, #16]
   12abe:	f01e f8e7 	bl	30c90 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_DIV_0;
   12ac2:	201e      	movs	r0, #30
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   12ac4:	4b34      	ldr	r3, [pc, #208]	; (12b98 <usage_fault.constprop.0+0x108>)
   12ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12ac8:	01da      	lsls	r2, r3, #7
   12aca:	d50a      	bpl.n	12ae2 <usage_fault.constprop.0+0x52>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
		PR_FAULT_INFO("  Unaligned memory access");
   12acc:	4b34      	ldr	r3, [pc, #208]	; (12ba0 <usage_fault.constprop.0+0x110>)
   12ace:	4831      	ldr	r0, [pc, #196]	; (12b94 <usage_fault.constprop.0+0x104>)
   12ad0:	9305      	str	r3, [sp, #20]
   12ad2:	2302      	movs	r3, #2
   12ad4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12ad8:	aa04      	add	r2, sp, #16
   12ada:	9304      	str	r3, [sp, #16]
   12adc:	f01e f8d8 	bl	30c90 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
   12ae0:	201f      	movs	r0, #31
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   12ae2:	4b2d      	ldr	r3, [pc, #180]	; (12b98 <usage_fault.constprop.0+0x108>)
   12ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12ae6:	02db      	lsls	r3, r3, #11
   12ae8:	d50a      	bpl.n	12b00 <usage_fault.constprop.0+0x70>
		reason = K_ERR_ARM_USAGE_STACK_OVERFLOW;
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   12aea:	2402      	movs	r4, #2
   12aec:	4b2d      	ldr	r3, [pc, #180]	; (12ba4 <usage_fault.constprop.0+0x114>)
   12aee:	4829      	ldr	r0, [pc, #164]	; (12b94 <usage_fault.constprop.0+0x104>)
   12af0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12af4:	aa04      	add	r2, sp, #16
   12af6:	9305      	str	r3, [sp, #20]
   12af8:	9404      	str	r4, [sp, #16]
   12afa:	f01e f8c9 	bl	30c90 <z_log_msg_static_create.constprop.0>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   12afe:	4620      	mov	r0, r4
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   12b00:	4b25      	ldr	r3, [pc, #148]	; (12b98 <usage_fault.constprop.0+0x108>)
   12b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12b04:	031c      	lsls	r4, r3, #12
   12b06:	d50a      	bpl.n	12b1e <usage_fault.constprop.0+0x8e>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
		PR_FAULT_INFO("  No coprocessor instructions");
   12b08:	4b27      	ldr	r3, [pc, #156]	; (12ba8 <usage_fault.constprop.0+0x118>)
   12b0a:	4822      	ldr	r0, [pc, #136]	; (12b94 <usage_fault.constprop.0+0x104>)
   12b0c:	9305      	str	r3, [sp, #20]
   12b0e:	2302      	movs	r3, #2
   12b10:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12b14:	aa04      	add	r2, sp, #16
   12b16:	9304      	str	r3, [sp, #16]
   12b18:	f01e f8ba 	bl	30c90 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
   12b1c:	2021      	movs	r0, #33	; 0x21
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   12b1e:	4b1e      	ldr	r3, [pc, #120]	; (12b98 <usage_fault.constprop.0+0x108>)
   12b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12b22:	0359      	lsls	r1, r3, #13
   12b24:	d50a      	bpl.n	12b3c <usage_fault.constprop.0+0xac>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   12b26:	4b21      	ldr	r3, [pc, #132]	; (12bac <usage_fault.constprop.0+0x11c>)
   12b28:	481a      	ldr	r0, [pc, #104]	; (12b94 <usage_fault.constprop.0+0x104>)
   12b2a:	9305      	str	r3, [sp, #20]
   12b2c:	2302      	movs	r3, #2
   12b2e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12b32:	aa04      	add	r2, sp, #16
   12b34:	9304      	str	r3, [sp, #16]
   12b36:	f01e f8ab 	bl	30c90 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
   12b3a:	2022      	movs	r0, #34	; 0x22
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   12b3c:	4b16      	ldr	r3, [pc, #88]	; (12b98 <usage_fault.constprop.0+0x108>)
   12b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12b40:	039a      	lsls	r2, r3, #14
   12b42:	d50a      	bpl.n	12b5a <usage_fault.constprop.0+0xca>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
		PR_FAULT_INFO("  Illegal use of the EPSR");
   12b44:	4b1a      	ldr	r3, [pc, #104]	; (12bb0 <usage_fault.constprop.0+0x120>)
   12b46:	4813      	ldr	r0, [pc, #76]	; (12b94 <usage_fault.constprop.0+0x104>)
   12b48:	9305      	str	r3, [sp, #20]
   12b4a:	2302      	movs	r3, #2
   12b4c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12b50:	aa04      	add	r2, sp, #16
   12b52:	9304      	str	r3, [sp, #16]
   12b54:	f01e f89c 	bl	30c90 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
   12b58:	2023      	movs	r0, #35	; 0x23
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   12b5a:	4b0f      	ldr	r3, [pc, #60]	; (12b98 <usage_fault.constprop.0+0x108>)
   12b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12b5e:	03db      	lsls	r3, r3, #15
   12b60:	d50a      	bpl.n	12b78 <usage_fault.constprop.0+0xe8>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   12b62:	4b14      	ldr	r3, [pc, #80]	; (12bb4 <usage_fault.constprop.0+0x124>)
   12b64:	480b      	ldr	r0, [pc, #44]	; (12b94 <usage_fault.constprop.0+0x104>)
   12b66:	9305      	str	r3, [sp, #20]
   12b68:	2302      	movs	r3, #2
   12b6a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12b6e:	aa04      	add	r2, sp, #16
   12b70:	9304      	str	r3, [sp, #16]
   12b72:	f01e f88d 	bl	30c90 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
   12b76:	2024      	movs	r0, #36	; 0x24
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   12b78:	4a07      	ldr	r2, [pc, #28]	; (12b98 <usage_fault.constprop.0+0x108>)
   12b7a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   12b7c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   12b80:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   12b84:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   12b86:	b006      	add	sp, #24
   12b88:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
   12b8a:	201d      	movs	r0, #29
   12b8c:	e79a      	b.n	12ac4 <usage_fault.constprop.0+0x34>
   12b8e:	bf00      	nop
   12b90:	0003affc 	.word	0x0003affc
   12b94:	00037a40 	.word	0x00037a40
   12b98:	e000ed00 	.word	0xe000ed00
   12b9c:	0003b014 	.word	0x0003b014
   12ba0:	0003b027 	.word	0x0003b027
   12ba4:	0003b041 	.word	0x0003b041
   12ba8:	0003b06b 	.word	0x0003b06b
   12bac:	0003b089 	.word	0x0003b089
   12bb0:	0003b0ae 	.word	0x0003b0ae
   12bb4:	0003b0c8 	.word	0x0003b0c8

00012bb8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   12bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12bbc:	b08a      	sub	sp, #40	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   12bbe:	4b93      	ldr	r3, [pc, #588]	; (12e0c <z_arm_fault+0x254>)
{
   12bc0:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   12bc2:	f8d3 a004 	ldr.w	sl, [r3, #4]
{
   12bc6:	4688      	mov	r8, r1
   12bc8:	4616      	mov	r6, r2
   12bca:	2300      	movs	r3, #0
   12bcc:	af00      	add	r7, sp, #0
   12bce:	f3ca 0908 	ubfx	r9, sl, #0, #9
   12bd2:	f383 8811 	msr	BASEPRI, r3
   12bd6:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   12bda:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   12bde:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   12be2:	d00e      	beq.n	12c02 <z_arm_fault+0x4a>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   12be4:	498a      	ldr	r1, [pc, #552]	; (12e10 <z_arm_fault+0x258>)
   12be6:	f240 433e 	movw	r3, #1086	; 0x43e
   12bea:	4a8a      	ldr	r2, [pc, #552]	; (12e14 <z_arm_fault+0x25c>)
   12bec:	488a      	ldr	r0, [pc, #552]	; (12e18 <z_arm_fault+0x260>)
   12bee:	f01c fbe9 	bl	2f3c4 <assert_print>
   12bf2:	488a      	ldr	r0, [pc, #552]	; (12e1c <z_arm_fault+0x264>)
   12bf4:	f01c fbe6 	bl	2f3c4 <assert_print>
   12bf8:	f240 413e 	movw	r1, #1086	; 0x43e
			__ASSERT(0,
   12bfc:	4885      	ldr	r0, [pc, #532]	; (12e14 <z_arm_fault+0x25c>)
   12bfe:	f01c fbda 	bl	2f3b6 <assert_post_action>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   12c02:	f012 0401 	ands.w	r4, r2, #1
   12c06:	d1ed      	bne.n	12be4 <z_arm_fault+0x2c>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   12c08:	0653      	lsls	r3, r2, #25
   12c0a:	d404      	bmi.n	12c16 <z_arm_fault+0x5e>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   12c0c:	0710      	lsls	r0, r2, #28
   12c0e:	d40f      	bmi.n	12c30 <z_arm_fault+0x78>
			*nested_exc = true;
   12c10:	f04f 0801 	mov.w	r8, #1
   12c14:	e00f      	b.n	12c36 <z_arm_fault+0x7e>
		PR_FAULT_INFO("Exception occurred in Secure State");
   12c16:	4b82      	ldr	r3, [pc, #520]	; (12e20 <z_arm_fault+0x268>)
   12c18:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12c1c:	61fb      	str	r3, [r7, #28]
   12c1e:	2302      	movs	r3, #2
   12c20:	4880      	ldr	r0, [pc, #512]	; (12e24 <z_arm_fault+0x26c>)
   12c22:	61bb      	str	r3, [r7, #24]
   12c24:	f107 0218 	add.w	r2, r7, #24
   12c28:	f01e f832 	bl	30c90 <z_log_msg_static_create.constprop.0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   12c2c:	0771      	lsls	r1, r6, #29
   12c2e:	d500      	bpl.n	12c32 <z_arm_fault+0x7a>
			ptr_esf = (z_arch_esf_t *)psp;
   12c30:	4645      	mov	r5, r8
	*nested_exc = false;
   12c32:	f04f 0800 	mov.w	r8, #0
	__ASSERT(esf != NULL,
   12c36:	2d00      	cmp	r5, #0
   12c38:	d0d4      	beq.n	12be4 <z_arm_fault+0x2c>
	*recoverable = false;
   12c3a:	2300      	movs	r3, #0
   12c3c:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
   12c3e:	f1a9 0303 	sub.w	r3, r9, #3
   12c42:	2b09      	cmp	r3, #9
   12c44:	f200 80c1 	bhi.w	12dca <z_arm_fault+0x212>
   12c48:	e8df f003 	tbb	[pc, r3]
   12c4c:	97b7b405 	.word	0x97b7b405
   12c50:	bfbfbfbf 	.word	0xbfbfbfbf
   12c54:	babf      	.short	0xbabf
	PR_FAULT_INFO("***** HARD FAULT *****");
   12c56:	46e9      	mov	r9, sp
   12c58:	f04f 0a02 	mov.w	sl, #2
   12c5c:	4b72      	ldr	r3, [pc, #456]	; (12e28 <z_arm_fault+0x270>)
   12c5e:	f107 0218 	add.w	r2, r7, #24
   12c62:	61fb      	str	r3, [r7, #28]
   12c64:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12c68:	486e      	ldr	r0, [pc, #440]	; (12e24 <z_arm_fault+0x26c>)
   12c6a:	f8c7 a018 	str.w	sl, [r7, #24]
   12c6e:	f01e f80f 	bl	30c90 <z_log_msg_static_create.constprop.0>
	*recoverable = false;
   12c72:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   12c74:	4e65      	ldr	r6, [pc, #404]	; (12e0c <z_arm_fault+0x254>)
	*recoverable = false;
   12c76:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   12c78:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   12c7a:	079a      	lsls	r2, r3, #30
   12c7c:	d50a      	bpl.n	12c94 <z_arm_fault+0xdc>
		PR_EXC("  Bus fault on vector table read");
   12c7e:	4b6b      	ldr	r3, [pc, #428]	; (12e2c <z_arm_fault+0x274>)
		PR_EXC("  Debug event");
   12c80:	e9c7 a306 	strd	sl, r3, [r7, #24]
	PR_FAULT_INFO(
   12c84:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12c88:	4866      	ldr	r0, [pc, #408]	; (12e24 <z_arm_fault+0x26c>)
   12c8a:	f107 0218 	add.w	r2, r7, #24
   12c8e:	f01d ffff 	bl	30c90 <z_log_msg_static_create.constprop.0>
}
   12c92:	e042      	b.n	12d1a <z_arm_fault+0x162>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   12c94:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   12c96:	2b00      	cmp	r3, #0
   12c98:	da01      	bge.n	12c9e <z_arm_fault+0xe6>
		PR_EXC("  Debug event");
   12c9a:	4b65      	ldr	r3, [pc, #404]	; (12e30 <z_arm_fault+0x278>)
   12c9c:	e7f0      	b.n	12c80 <z_arm_fault+0xc8>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   12c9e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   12ca0:	005b      	lsls	r3, r3, #1
   12ca2:	d57a      	bpl.n	12d9a <z_arm_fault+0x1e2>
		PR_EXC("  Fault escalation (see below)");
   12ca4:	4b63      	ldr	r3, [pc, #396]	; (12e34 <z_arm_fault+0x27c>)
   12ca6:	f107 0218 	add.w	r2, r7, #24
   12caa:	e9c7 a306 	strd	sl, r3, [r7, #24]
   12cae:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12cb2:	485c      	ldr	r0, [pc, #368]	; (12e24 <z_arm_fault+0x26c>)
   12cb4:	f01d ffec 	bl	30c90 <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   12cb8:	6973      	ldr	r3, [r6, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   12cba:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   12cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   12cc0:	6173      	str	r3, [r6, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   12cc2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12cc6:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   12cca:	6973      	ldr	r3, [r6, #20]
	uint16_t fault_insn = *(ret_addr - 1);
   12ccc:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   12cd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   12cd4:	6173      	str	r3, [r6, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   12cd6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12cda:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   12cde:	f64d 7302 	movw	r3, #57090	; 0xdf02
   12ce2:	429a      	cmp	r2, r3
   12ce4:	d009      	beq.n	12cfa <z_arm_fault+0x142>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   12ce6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   12ce8:	b2db      	uxtb	r3, r3
   12cea:	2b00      	cmp	r3, #0
   12cec:	d038      	beq.n	12d60 <z_arm_fault+0x1a8>
			reason = mem_manage_fault(esf, 1, recoverable);
   12cee:	2001      	movs	r0, #1
   12cf0:	1df9      	adds	r1, r7, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   12cf2:	f7ff fd63 	bl	127bc <mem_manage_fault.constprop.0>
   12cf6:	4604      	mov	r4, r0
		break;
   12cf8:	e00f      	b.n	12d1a <z_arm_fault+0x162>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   12cfa:	b088      	sub	sp, #32
   12cfc:	682b      	ldr	r3, [r5, #0]
   12cfe:	466a      	mov	r2, sp
   12d00:	494d      	ldr	r1, [pc, #308]	; (12e38 <z_arm_fault+0x280>)
   12d02:	4848      	ldr	r0, [pc, #288]	; (12e24 <z_arm_fault+0x26c>)
   12d04:	e9c2 1305 	strd	r1, r3, [r2, #20]
   12d08:	2303      	movs	r3, #3
   12d0a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12d0e:	f842 3f10 	str.w	r3, [r2, #16]!
   12d12:	f01d ffbd 	bl	30c90 <z_log_msg_static_create.constprop.0>
   12d16:	46cd      	mov	sp, r9
			reason = esf->basic.r0;
   12d18:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   12d1a:	79fb      	ldrb	r3, [r7, #7]
   12d1c:	b9e3      	cbnz	r3, 12d58 <z_arm_fault+0x1a0>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   12d1e:	f107 0208 	add.w	r2, r7, #8
   12d22:	f105 0620 	add.w	r6, r5, #32
   12d26:	4613      	mov	r3, r2
   12d28:	6828      	ldr	r0, [r5, #0]
   12d2a:	6869      	ldr	r1, [r5, #4]
   12d2c:	3508      	adds	r5, #8
   12d2e:	c303      	stmia	r3!, {r0, r1}
   12d30:	42b5      	cmp	r5, r6
   12d32:	461a      	mov	r2, r3
   12d34:	d1f7      	bne.n	12d26 <z_arm_fault+0x16e>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   12d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12d38:	f1b8 0f00 	cmp.w	r8, #0
   12d3c:	d061      	beq.n	12e02 <z_arm_fault+0x24a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   12d3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
   12d42:	b922      	cbnz	r2, 12d4e <z_arm_fault+0x196>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   12d44:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   12d48:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   12d4c:	627b      	str	r3, [r7, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
   12d4e:	4620      	mov	r0, r4
   12d50:	f107 0108 	add.w	r1, r7, #8
   12d54:	f7ff fb8e 	bl	12474 <z_arm_fatal_error>
}
   12d58:	3728      	adds	r7, #40	; 0x28
   12d5a:	46bd      	mov	sp, r7
   12d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   12d60:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   12d62:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   12d66:	d004      	beq.n	12d72 <z_arm_fault+0x1ba>
			reason = bus_fault(esf, 1, recoverable);
   12d68:	2001      	movs	r0, #1
   12d6a:	1df9      	adds	r1, r7, #7
		reason = bus_fault(esf, 0, recoverable);
   12d6c:	f7ff fde6 	bl	1293c <bus_fault.constprop.0>
   12d70:	e7c1      	b.n	12cf6 <z_arm_fault+0x13e>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   12d72:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   12d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   12d78:	d302      	bcc.n	12d80 <z_arm_fault+0x1c8>
		reason = usage_fault(esf);
   12d7a:	f7ff fe89 	bl	12a90 <usage_fault.constprop.0>
   12d7e:	e7ba      	b.n	12cf6 <z_arm_fault+0x13e>
			__ASSERT(0,
   12d80:	492e      	ldr	r1, [pc, #184]	; (12e3c <z_arm_fault+0x284>)
   12d82:	f44f 7344 	mov.w	r3, #784	; 0x310
   12d86:	4a23      	ldr	r2, [pc, #140]	; (12e14 <z_arm_fault+0x25c>)
   12d88:	4823      	ldr	r0, [pc, #140]	; (12e18 <z_arm_fault+0x260>)
   12d8a:	f01c fb1b 	bl	2f3c4 <assert_print>
   12d8e:	482c      	ldr	r0, [pc, #176]	; (12e40 <z_arm_fault+0x288>)
   12d90:	f01c fb18 	bl	2f3c4 <assert_print>
   12d94:	f44f 7144 	mov.w	r1, #784	; 0x310
   12d98:	e730      	b.n	12bfc <z_arm_fault+0x44>
		__ASSERT(0,
   12d9a:	4928      	ldr	r1, [pc, #160]	; (12e3c <z_arm_fault+0x284>)
   12d9c:	f44f 7345 	mov.w	r3, #788	; 0x314
   12da0:	4a1c      	ldr	r2, [pc, #112]	; (12e14 <z_arm_fault+0x25c>)
   12da2:	481d      	ldr	r0, [pc, #116]	; (12e18 <z_arm_fault+0x260>)
   12da4:	f01c fb0e 	bl	2f3c4 <assert_print>
   12da8:	4826      	ldr	r0, [pc, #152]	; (12e44 <z_arm_fault+0x28c>)
   12daa:	f01c fb0b 	bl	2f3c4 <assert_print>
   12dae:	f44f 7145 	mov.w	r1, #788	; 0x314
   12db2:	e723      	b.n	12bfc <z_arm_fault+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
   12db4:	2000      	movs	r0, #0
   12db6:	1df9      	adds	r1, r7, #7
   12db8:	e79b      	b.n	12cf2 <z_arm_fault+0x13a>
		reason = bus_fault(esf, 0, recoverable);
   12dba:	2000      	movs	r0, #0
   12dbc:	1df9      	adds	r1, r7, #7
   12dbe:	e7d5      	b.n	12d6c <z_arm_fault+0x1b4>
	PR_FAULT_INFO(
   12dc0:	4b21      	ldr	r3, [pc, #132]	; (12e48 <z_arm_fault+0x290>)
   12dc2:	61fb      	str	r3, [r7, #28]
   12dc4:	2302      	movs	r3, #2
   12dc6:	61bb      	str	r3, [r7, #24]
   12dc8:	e75c      	b.n	12c84 <z_arm_fault+0xcc>
	PR_FAULT_INFO("***** %s %d) *****",
   12dca:	4a20      	ldr	r2, [pc, #128]	; (12e4c <z_arm_fault+0x294>)
   12dcc:	466e      	mov	r6, sp
   12dce:	f41a 7ff8 	tst.w	sl, #496	; 0x1f0
   12dd2:	b08a      	sub	sp, #40	; 0x28
   12dd4:	4b1e      	ldr	r3, [pc, #120]	; (12e50 <z_arm_fault+0x298>)
   12dd6:	bf18      	it	ne
   12dd8:	4613      	movne	r3, r2
   12dda:	466a      	mov	r2, sp
   12ddc:	491d      	ldr	r1, [pc, #116]	; (12e54 <z_arm_fault+0x29c>)
   12dde:	4811      	ldr	r0, [pc, #68]	; (12e24 <z_arm_fault+0x26c>)
   12de0:	e9c2 1305 	strd	r1, r3, [r2, #20]
   12de4:	f1a9 0310 	sub.w	r3, r9, #16
   12de8:	61d3      	str	r3, [r2, #28]
   12dea:	f44f 7300 	mov.w	r3, #512	; 0x200
   12dee:	8413      	strh	r3, [r2, #32]
   12df0:	4b19      	ldr	r3, [pc, #100]	; (12e58 <z_arm_fault+0x2a0>)
   12df2:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   12df6:	f842 3f10 	str.w	r3, [r2, #16]!
   12dfa:	f01d ff49 	bl	30c90 <z_log_msg_static_create.constprop.0>
   12dfe:	46b5      	mov	sp, r6
}
   12e00:	e78b      	b.n	12d1a <z_arm_fault+0x162>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   12e02:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   12e06:	f023 0301 	bic.w	r3, r3, #1
   12e0a:	e79f      	b.n	12d4c <z_arm_fault+0x194>
   12e0c:	e000ed00 	.word	0xe000ed00
   12e10:	0003b121 	.word	0x0003b121
   12e14:	0003ae8c 	.word	0x0003ae8c
   12e18:	00039995 	.word	0x00039995
   12e1c:	0003b134 	.word	0x0003b134
   12e20:	0003b172 	.word	0x0003b172
   12e24:	00037a40 	.word	0x00037a40
   12e28:	0003b195 	.word	0x0003b195
   12e2c:	0003b1ac 	.word	0x0003b1ac
   12e30:	0003b1cd 	.word	0x0003b1cd
   12e34:	0003b1db 	.word	0x0003b1db
   12e38:	0003b1fa 	.word	0x0003b1fa
   12e3c:	0003ea9e 	.word	0x0003ea9e
   12e40:	0003b216 	.word	0x0003b216
   12e44:	0003b23a 	.word	0x0003b23a
   12e48:	0003b26a 	.word	0x0003b26a
   12e4c:	0003b108 	.word	0x0003b108
   12e50:	0003b0f3 	.word	0x0003b0f3
   12e54:	0003b28e 	.word	0x0003b28e
   12e58:	01000004 	.word	0x01000004

00012e5c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   12e5c:	4b04      	ldr	r3, [pc, #16]	; (12e70 <z_arm_fault_init+0x14>)
   12e5e:	695a      	ldr	r2, [r3, #20]
   12e60:	f042 0210 	orr.w	r2, r2, #16
   12e64:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   12e66:	695a      	ldr	r2, [r3, #20]
   12e68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   12e6c:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   12e6e:	4770      	bx	lr
   12e70:	e000ed00 	.word	0xe000ed00

00012e74 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   12e74:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   12e78:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   12e7c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   12e7e:	4672      	mov	r2, lr
	bl z_arm_fault
   12e80:	f7ff fe9a 	bl	12bb8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   12e84:	bd01      	pop	{r0, pc}
   12e86:	bf00      	nop

00012e88 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   12e88:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12e8a:	2120      	movs	r1, #32
   12e8c:	4803      	ldr	r0, [pc, #12]	; (12e9c <z_arm_interrupt_init+0x14>)
   12e8e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   12e90:	3301      	adds	r3, #1
   12e92:	2b41      	cmp	r3, #65	; 0x41
   12e94:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   12e98:	d1f9      	bne.n	12e8e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   12e9a:	4770      	bx	lr
   12e9c:	e000e100 	.word	0xe000e100

00012ea0 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   12ea0:	2000      	movs	r0, #0
    msr CONTROL, r0
   12ea2:	f380 8814 	msr	CONTROL, r0
    isb
   12ea6:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
   12eaa:	2000      	movs	r0, #0
    msr MSPLIM, r0
   12eac:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
   12eb0:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   12eb4:	f7fc fb00 	bl	f4b8 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   12eb8:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   12eba:	490e      	ldr	r1, [pc, #56]	; (12ef4 <__start+0x54>)
    str r0, [r1]
   12ebc:	6008      	str	r0, [r1, #0]
    dsb
   12ebe:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   12ec2:	480d      	ldr	r0, [pc, #52]	; (12ef8 <__start+0x58>)
    msr msp, r0
   12ec4:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   12ec8:	f000 f83e 	bl	12f48 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   12ecc:	2020      	movs	r0, #32
    msr BASEPRI, r0
   12ece:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   12ed2:	480a      	ldr	r0, [pc, #40]	; (12efc <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   12ed4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   12ed8:	1840      	adds	r0, r0, r1
    msr PSP, r0
   12eda:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   12ede:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   12ee2:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   12ee4:	4308      	orrs	r0, r1
    msr CONTROL, r0
   12ee6:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   12eea:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   12eee:	f7ff fb8d 	bl	1260c <z_arm_prep_c>
   12ef2:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
   12ef4:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   12ef8:	20014e08 	.word	0x20014e08
    ldr r0, =z_interrupt_stacks
   12efc:	200124c8 	.word	0x200124c8

00012f00 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   12f00:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   12f04:	4905      	ldr	r1, [pc, #20]	; (12f1c <sys_arch_reboot+0x1c>)
   12f06:	4b06      	ldr	r3, [pc, #24]	; (12f20 <sys_arch_reboot+0x20>)
   12f08:	68ca      	ldr	r2, [r1, #12]
   12f0a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   12f0e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   12f10:	60cb      	str	r3, [r1, #12]
   12f12:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   12f16:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   12f18:	e7fd      	b.n	12f16 <sys_arch_reboot+0x16>
   12f1a:	bf00      	nop
   12f1c:	e000ed00 	.word	0xe000ed00
   12f20:	05fa0004 	.word	0x05fa0004

00012f24 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
   12f24:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
   12f26:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   12f28:	4906      	ldr	r1, [pc, #24]	; (12f44 <z_arm_clear_arm_mpu_config+0x20>)
   12f2a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
   12f2e:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
   12f32:	4293      	cmp	r3, r2
   12f34:	db00      	blt.n	12f38 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   12f36:	4770      	bx	lr
  mpu->RNR = rnr;
   12f38:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
   12f3c:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   12f40:	3301      	adds	r3, #1
   12f42:	e7f6      	b.n	12f32 <z_arm_clear_arm_mpu_config+0xe>
   12f44:	e000ed00 	.word	0xe000ed00

00012f48 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   12f48:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   12f4a:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   12f4c:	2400      	movs	r4, #0
   12f4e:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   12f52:	f7ff ffe7 	bl	12f24 <z_arm_clear_arm_mpu_config>
   12f56:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   12f58:	f04f 30ff 	mov.w	r0, #4294967295
   12f5c:	4a0c      	ldr	r2, [pc, #48]	; (12f90 <z_arm_init_arch_hw_at_boot+0x48>)
   12f5e:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   12f62:	3301      	adds	r3, #1
   12f64:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
   12f66:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   12f6a:	d1f8      	bne.n	12f5e <z_arm_init_arch_hw_at_boot+0x16>
   12f6c:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   12f6e:	f04f 30ff 	mov.w	r0, #4294967295
   12f72:	4a07      	ldr	r2, [pc, #28]	; (12f90 <z_arm_init_arch_hw_at_boot+0x48>)
   12f74:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   12f78:	3301      	adds	r3, #1
   12f7a:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
   12f7c:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   12f80:	d1f8      	bne.n	12f74 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   12f82:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   12f84:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12f88:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   12f8c:	bd10      	pop	{r4, pc}
   12f8e:	bf00      	nop
   12f90:	e000e100 	.word	0xe000e100

00012f94 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   12f94:	4b08      	ldr	r3, [pc, #32]	; (12fb8 <z_impl_k_thread_abort+0x24>)
   12f96:	689b      	ldr	r3, [r3, #8]
   12f98:	4283      	cmp	r3, r0
   12f9a:	d10b      	bne.n	12fb4 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   12f9c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   12fa0:	b143      	cbz	r3, 12fb4 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   12fa2:	4b06      	ldr	r3, [pc, #24]	; (12fbc <z_impl_k_thread_abort+0x28>)
   12fa4:	685a      	ldr	r2, [r3, #4]
   12fa6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   12faa:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   12fac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   12fae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   12fb2:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   12fb4:	f018 ba04 	b.w	2b3c0 <z_thread_abort>
   12fb8:	2000eeec 	.word	0x2000eeec
   12fbc:	e000ed00 	.word	0xe000ed00

00012fc0 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   12fc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   12fc2:	4c09      	ldr	r4, [pc, #36]	; (12fe8 <z_arm_configure_static_mpu_regions+0x28>)
   12fc4:	4a09      	ldr	r2, [pc, #36]	; (12fec <z_arm_configure_static_mpu_regions+0x2c>)
   12fc6:	4623      	mov	r3, r4
   12fc8:	2101      	movs	r1, #1
   12fca:	4809      	ldr	r0, [pc, #36]	; (12ff0 <z_arm_configure_static_mpu_regions+0x30>)
   12fcc:	f000 f92a 	bl	13224 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   12fd0:	2300      	movs	r3, #0
   12fd2:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   12fd4:	4b07      	ldr	r3, [pc, #28]	; (12ff4 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   12fd6:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   12fd8:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   12fda:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   12fdc:	9301      	str	r3, [sp, #4]
   12fde:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   12fe0:	f000 f944 	bl	1326c <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   12fe4:	b004      	add	sp, #16
   12fe6:	bd10      	pop	{r4, pc}
   12fe8:	20040000 	.word	0x20040000
   12fec:	2000c580 	.word	0x2000c580
   12ff0:	00037f5c 	.word	0x00037f5c
   12ff4:	2000d1b8 	.word	0x2000d1b8

00012ff8 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   12ff8:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
   12ffa:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   12ffc:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   12ffe:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
   13002:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
   13006:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   13008:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   1300a:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   1300c:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
   13010:	4905      	ldr	r1, [pc, #20]	; (13028 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   13012:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   13016:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
   1301a:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
   1301e:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
   13022:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   13026:	bd10      	pop	{r4, pc}
   13028:	e000ed00 	.word	0xe000ed00

0001302c <region_allocate_and_init.part.0>:
#include "arm_mpu_v8_internal.h"
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
   1302c:	b580      	push	{r7, lr}
   1302e:	af00      	add	r7, sp, #0
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   13030:	b088      	sub	sp, #32
   13032:	466a      	mov	r2, sp
   13034:	4b07      	ldr	r3, [pc, #28]	; (13054 <region_allocate_and_init.part.0+0x28>)
   13036:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1303a:	2303      	movs	r3, #3
   1303c:	f842 3f10 	str.w	r3, [r2, #16]!
   13040:	2300      	movs	r3, #0
   13042:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13046:	4804      	ldr	r0, [pc, #16]	; (13058 <region_allocate_and_init.part.0+0x2c>)
   13048:	f7fd f8f4 	bl	10234 <z_impl_z_log_msg_static_create>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   1304c:	f06f 0015 	mvn.w	r0, #21
   13050:	46bd      	mov	sp, r7
   13052:	bd80      	pop	{r7, pc}
   13054:	0003b2a5 	.word	0x0003b2a5
   13058:	000379b8 	.word	0x000379b8

0001305c <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   1305c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13060:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   13062:	4606      	mov	r6, r0
   13064:	f04f 0900 	mov.w	r9, #0
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   13068:	b087      	sub	sp, #28
	MPU->RNR = rnr;
   1306a:	4d5f      	ldr	r5, [pc, #380]	; (131e8 <mpu_configure_regions_and_partition.constprop.0+0x18c>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   1306c:	af00      	add	r7, sp, #0
   1306e:	6079      	str	r1, [r7, #4]
	for (i = 0; i < regions_num; i++) {
   13070:	687b      	ldr	r3, [r7, #4]
   13072:	4599      	cmp	r9, r3
   13074:	da35      	bge.n	130e2 <mpu_configure_regions_and_partition.constprop.0+0x86>
		if (regions[i].size == 0U) {
   13076:	f8d6 8004 	ldr.w	r8, [r6, #4]
   1307a:	f1b8 0f00 	cmp.w	r8, #0
   1307e:	d054      	beq.n	1312a <mpu_configure_regions_and_partition.constprop.0+0xce>
		&&
   13080:	f1b8 0f1f 	cmp.w	r8, #31
   13084:	d91b      	bls.n	130be <mpu_configure_regions_and_partition.constprop.0+0x62>
		&&
   13086:	f018 0f1f 	tst.w	r8, #31
   1308a:	d118      	bne.n	130be <mpu_configure_regions_and_partition.constprop.0+0x62>
		((part->start &
   1308c:	f8d6 b000 	ldr.w	fp, [r6]
		&&
   13090:	f01b 0f1f 	tst.w	fp, #31
   13094:	d113      	bne.n	130be <mpu_configure_regions_and_partition.constprop.0+0x62>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   13096:	4658      	mov	r0, fp
   13098:	f01d fdff 	bl	30c9a <arm_cmse_mpu_region_get>
   1309c:	4682      	mov	sl, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   1309e:	eb08 000b 	add.w	r0, r8, fp
   130a2:	3801      	subs	r0, #1
   130a4:	f01d fdf9 	bl	30c9a <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   130a8:	4582      	cmp	sl, r0
   130aa:	d01f      	beq.n	130ec <mpu_configure_regions_and_partition.constprop.0+0x90>

		/* Derive the index of the underlying MPU region,
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);
   130ac:	f06f 0a15 	mvn.w	sl, #21

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   130b0:	466c      	mov	r4, sp
   130b2:	b088      	sub	sp, #32
   130b4:	466a      	mov	r2, sp
   130b6:	494d      	ldr	r1, [pc, #308]	; (131ec <mpu_configure_regions_and_partition.constprop.0+0x190>)
   130b8:	e9c2 1a05 	strd	r1, sl, [r2, #20]
   130bc:	e005      	b.n	130ca <mpu_configure_regions_and_partition.constprop.0+0x6e>
			LOG_ERR("Partition %u: sanity check failed.", i);
   130be:	466c      	mov	r4, sp
   130c0:	b088      	sub	sp, #32
   130c2:	466a      	mov	r2, sp
   130c4:	4b4a      	ldr	r3, [pc, #296]	; (131f0 <mpu_configure_regions_and_partition.constprop.0+0x194>)
   130c6:	e9c2 3905 	strd	r3, r9, [r2, #20]
			LOG_ERR("Invalid underlying region index %u",
   130ca:	2303      	movs	r3, #3
   130cc:	f842 3f10 	str.w	r3, [r2, #16]!
   130d0:	2300      	movs	r3, #0
   130d2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   130d6:	4847      	ldr	r0, [pc, #284]	; (131f4 <mpu_configure_regions_and_partition.constprop.0+0x198>)
   130d8:	f7fd f8ac 	bl	10234 <z_impl_z_log_msg_static_create>
   130dc:	46a5      	mov	sp, r4
			return -EINVAL;
   130de:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   130e2:	4620      	mov	r0, r4
   130e4:	371c      	adds	r7, #28
   130e6:	46bd      	mov	sp, r7
   130e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   130ec:	f11a 0f16 	cmn.w	sl, #22
   130f0:	d0de      	beq.n	130b0 <mpu_configure_regions_and_partition.constprop.0+0x54>
   130f2:	4554      	cmp	r4, sl
   130f4:	dddc      	ble.n	130b0 <mpu_configure_regions_and_partition.constprop.0+0x54>
	MPU->RNR = rnr;
   130f6:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
   130fa:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
   130fe:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RLAR;
   13102:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   13106:	f020 001f 	bic.w	r0, r0, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   1310a:	f042 081f 	orr.w	r8, r2, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   1310e:	e9d6 2100 	ldrd	r2, r1, [r6]
   13112:	4411      	add	r1, r2
		if ((regions[i].start == u_reg_base) &&
   13114:	4290      	cmp	r0, r2
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   13116:	f101 3bff 	add.w	fp, r1, #4294967295
		if ((regions[i].start == u_reg_base) &&
   1311a:	d11e      	bne.n	1315a <mpu_configure_regions_and_partition.constprop.0+0xfe>
   1311c:	45d8      	cmp	r8, fp
   1311e:	d108      	bne.n	13132 <mpu_configure_regions_and_partition.constprop.0+0xd6>
			mpu_configure_region(u_reg_index, &regions[i]);
   13120:	4631      	mov	r1, r6
   13122:	fa5f f08a 	uxtb.w	r0, sl
   13126:	f01d fdc1 	bl	30cac <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   1312a:	f109 0901 	add.w	r9, r9, #1
   1312e:	360c      	adds	r6, #12
   13130:	e79e      	b.n	13070 <mpu_configure_regions_and_partition.constprop.0+0x14>
	MPU->RNR = rnr;
   13132:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
   13136:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
   1313a:	f021 011f 	bic.w	r1, r1, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
   1313e:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
   13142:	430b      	orrs	r3, r1
				mpu_configure_region(reg_index, &regions[i]);
   13144:	4631      	mov	r1, r6
	MPU->RBAR = rbar;
   13146:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
   1314a:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
   1314c:	f01d fdae 	bl	30cac <mpu_configure_region>
			if (reg_index == -EINVAL) {
   13150:	f110 0f16 	cmn.w	r0, #22
   13154:	d0c3      	beq.n	130de <mpu_configure_regions_and_partition.constprop.0+0x82>
			reg_index++;
   13156:	1c44      	adds	r4, r0, #1
   13158:	e7e7      	b.n	1312a <mpu_configure_regions_and_partition.constprop.0+0xce>
				regions[i].start - 1);
   1315a:	3a01      	subs	r2, #1
		} else if (reg_last == u_reg_last) {
   1315c:	45d8      	cmp	r8, fp
				mpu_configure_region(reg_index, &regions[i]);
   1315e:	b2e0      	uxtb	r0, r4
		     | (limit & MPU_RLAR_LIMIT_Msk));
   13160:	f022 021f 	bic.w	r2, r2, #31
	MPU->RNR = rnr;
   13164:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
   13168:	d108      	bne.n	1317c <mpu_configure_regions_and_partition.constprop.0+0x120>
	return MPU->RLAR;
   1316a:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
   1316e:	4631      	mov	r1, r6
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
   13170:	f003 031f 	and.w	r3, r3, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
   13174:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
   13176:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
			reg_index =
   1317a:	e7e7      	b.n	1314c <mpu_configure_regions_and_partition.constprop.0+0xf0>
	return MPU->RLAR;
   1317c:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
   13180:	f001 011f 	and.w	r1, r1, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
   13184:	430a      	orrs	r2, r1
	MPU->RLAR = rlar;
   13186:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
   1318a:	4631      	mov	r1, r6
   1318c:	f01d fd8e 	bl	30cac <mpu_configure_region>
			if (reg_index == -EINVAL) {
   13190:	f110 0f16 	cmn.w	r0, #22
   13194:	d0a3      	beq.n	130de <mpu_configure_regions_and_partition.constprop.0+0x82>
	MPU->RNR = rnr;
   13196:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
   1319a:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
   1319e:	7c3b      	ldrb	r3, [r7, #16]
			REGION_LIMIT_ADDR((regions[i].start +
   131a0:	f108 38ff 	add.w	r8, r8, #4294967295
	attr->rbar = mpu_get_rbar() &
   131a4:	f362 0304 	bfi	r3, r2, #0, #5
   131a8:	743b      	strb	r3, [r7, #16]
	return MPU->RLAR;
   131aa:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   131ae:	7c3a      	ldrb	r2, [r7, #16]
   131b0:	085b      	lsrs	r3, r3, #1
   131b2:	f363 1247 	bfi	r2, r3, #5, #3
   131b6:	743a      	strb	r2, [r7, #16]
			fill_region.base = regions[i].start +
   131b8:	e9d6 3200 	ldrd	r3, r2, [r6]
   131bc:	4413      	add	r3, r2
   131be:	60bb      	str	r3, [r7, #8]
			REGION_LIMIT_ADDR((regions[i].start +
   131c0:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
   131c4:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
   131c6:	4443      	add	r3, r8
   131c8:	eba3 030b 	sub.w	r3, r3, fp
				region_allocate_and_init(reg_index,
   131cc:	b2e0      	uxtb	r0, r4
			REGION_LIMIT_ADDR((regions[i].start +
   131ce:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   131d2:	280f      	cmp	r0, #15
			fill_region.attr.r_limit =
   131d4:	617b      	str	r3, [r7, #20]
   131d6:	d902      	bls.n	131de <mpu_configure_regions_and_partition.constprop.0+0x182>
   131d8:	f7ff ff28 	bl	1302c <region_allocate_and_init.part.0>
			if (reg_index == -EINVAL) {
   131dc:	e7b8      	b.n	13150 <mpu_configure_regions_and_partition.constprop.0+0xf4>
	region_init(index, region_conf);
   131de:	f107 0108 	add.w	r1, r7, #8
   131e2:	f7ff ff09 	bl	12ff8 <region_init>
   131e6:	e7b6      	b.n	13156 <mpu_configure_regions_and_partition.constprop.0+0xfa>
   131e8:	e000ed00 	.word	0xe000ed00
   131ec:	0003b2ee 	.word	0x0003b2ee
   131f0:	0003b2cb 	.word	0x0003b2cb
   131f4:	000379b8 	.word	0x000379b8

000131f8 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   131f8:	2205      	movs	r2, #5
   131fa:	4b04      	ldr	r3, [pc, #16]	; (1320c <arm_core_mpu_enable+0x14>)
   131fc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   13200:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13204:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   13208:	4770      	bx	lr
   1320a:	bf00      	nop
   1320c:	e000ed00 	.word	0xe000ed00

00013210 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   13210:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   13214:	2200      	movs	r2, #0
   13216:	4b02      	ldr	r3, [pc, #8]	; (13220 <arm_core_mpu_disable+0x10>)
   13218:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   1321c:	4770      	bx	lr
   1321e:	bf00      	nop
   13220:	e000ed00 	.word	0xe000ed00

00013224 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   13224:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   13226:	4d0c      	ldr	r5, [pc, #48]	; (13258 <arm_core_mpu_configure_static_mpu_regions+0x34>)
   13228:	460c      	mov	r4, r1
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   1322a:	782a      	ldrb	r2, [r5, #0]
   1322c:	f7ff ff16 	bl	1305c <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   13230:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   13232:	3016      	adds	r0, #22
   13234:	d10f      	bne.n	13256 <arm_core_mpu_configure_static_mpu_regions+0x32>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   13236:	f44f 738d 	mov.w	r3, #282	; 0x11a
   1323a:	4a08      	ldr	r2, [pc, #32]	; (1325c <arm_core_mpu_configure_static_mpu_regions+0x38>)
   1323c:	4908      	ldr	r1, [pc, #32]	; (13260 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   1323e:	4809      	ldr	r0, [pc, #36]	; (13264 <arm_core_mpu_configure_static_mpu_regions+0x40>)
   13240:	f01c f8c0 	bl	2f3c4 <assert_print>
   13244:	4621      	mov	r1, r4
   13246:	4808      	ldr	r0, [pc, #32]	; (13268 <arm_core_mpu_configure_static_mpu_regions+0x44>)
   13248:	f01c f8bc 	bl	2f3c4 <assert_print>
   1324c:	f44f 718d 	mov.w	r1, #282	; 0x11a
   13250:	4802      	ldr	r0, [pc, #8]	; (1325c <arm_core_mpu_configure_static_mpu_regions+0x38>)
   13252:	f01c f8b0 	bl	2f3b6 <assert_post_action>
			regions_num);
	}
}
   13256:	bd38      	pop	{r3, r4, r5, pc}
   13258:	2000f127 	.word	0x2000f127
   1325c:	0003b311 	.word	0x0003b311
   13260:	0003ea9e 	.word	0x0003ea9e
   13264:	00039995 	.word	0x00039995
   13268:	0003b348 	.word	0x0003b348

0001326c <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
   1326c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13270:	4e31      	ldr	r6, [pc, #196]	; (13338 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
   13272:	4689      	mov	r9, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   13274:	4605      	mov	r5, r0
   13276:	f04f 0800 	mov.w	r8, #0
   1327a:	46b3      	mov	fp, r6
	MPU->RNR = rnr;
   1327c:	4f2f      	ldr	r7, [pc, #188]	; (1333c <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1327e:	45c8      	cmp	r8, r9
   13280:	db02      	blt.n	13288 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
   13282:	b003      	add	sp, #12
   13284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
   13288:	f8d5 a004 	ldr.w	sl, [r5, #4]
   1328c:	f1ba 0f00 	cmp.w	sl, #0
   13290:	d04c      	beq.n	1332c <arm_core_mpu_mark_areas_for_dynamic_regions+0xc0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   13292:	6829      	ldr	r1, [r5, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   13294:	4608      	mov	r0, r1
   13296:	9101      	str	r1, [sp, #4]
   13298:	f01d fcff 	bl	30c9a <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   1329c:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1329e:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   132a0:	eb0a 0001 	add.w	r0, sl, r1
   132a4:	3801      	subs	r0, #1
   132a6:	f01d fcf8 	bl	30c9a <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   132aa:	4284      	cmp	r4, r0
   132ac:	f04f 0214 	mov.w	r2, #20
   132b0:	4b23      	ldr	r3, [pc, #140]	; (13340 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
   132b2:	d015      	beq.n	132e0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x74>
		dyn_reg_info[i].index =
   132b4:	fb02 f308 	mul.w	r3, r2, r8
   132b8:	f06f 0215 	mvn.w	r2, #21
   132bc:	f84b 2003 	str.w	r2, [fp, r3]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   132c0:	f44f 7395 	mov.w	r3, #298	; 0x12a
   132c4:	4a1f      	ldr	r2, [pc, #124]	; (13344 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
   132c6:	4920      	ldr	r1, [pc, #128]	; (13348 <arm_core_mpu_mark_areas_for_dynamic_regions+0xdc>)
   132c8:	4820      	ldr	r0, [pc, #128]	; (1334c <arm_core_mpu_mark_areas_for_dynamic_regions+0xe0>)
   132ca:	f01c f87b 	bl	2f3c4 <assert_print>
   132ce:	4649      	mov	r1, r9
   132d0:	481f      	ldr	r0, [pc, #124]	; (13350 <arm_core_mpu_mark_areas_for_dynamic_regions+0xe4>)
   132d2:	f01c f877 	bl	2f3c4 <assert_print>
   132d6:	f44f 7195 	mov.w	r1, #298	; 0x12a
   132da:	481a      	ldr	r0, [pc, #104]	; (13344 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
   132dc:	f01c f86b 	bl	2f3b6 <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   132e0:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   132e4:	6034      	str	r4, [r6, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   132e6:	d0eb      	beq.n	132c0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   132e8:	7819      	ldrb	r1, [r3, #0]
   132ea:	42a1      	cmp	r1, r4
   132ec:	dde8      	ble.n	132c0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = mpu_get_rbar() &
   132ee:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
   132f2:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
   132f6:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
   132fa:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
   132fe:	f100 0108 	add.w	r1, r0, #8
   13302:	7b00      	ldrb	r0, [r0, #12]
   13304:	f364 0004 	bfi	r0, r4, #0, #5
   13308:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
   1330a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   1330e:	790c      	ldrb	r4, [r1, #4]
   13310:	0840      	lsrs	r0, r0, #1
   13312:	f360 1447 	bfi	r4, r0, #5, #3
   13316:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
   13318:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   1331c:	f021 011f 	bic.w	r1, r1, #31
   13320:	6071      	str	r1, [r6, #4]
	return MPU->RLAR;
   13322:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
   13326:	f021 011f 	bic.w	r1, r1, #31
   1332a:	6131      	str	r1, [r6, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1332c:	f108 0801 	add.w	r8, r8, #1
   13330:	3614      	adds	r6, #20
   13332:	350c      	adds	r5, #12
   13334:	e7a3      	b.n	1327e <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   13336:	bf00      	nop
   13338:	2000e590 	.word	0x2000e590
   1333c:	e000ed00 	.word	0xe000ed00
   13340:	2000f127 	.word	0x2000f127
   13344:	0003b311 	.word	0x0003b311
   13348:	0003ea9e 	.word	0x0003ea9e
   1334c:	00039995 	.word	0x00039995
   13350:	0003b374 	.word	0x0003b374

00013354 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   13354:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   13356:	4d1f      	ldr	r5, [pc, #124]	; (133d4 <z_arm_mpu_init+0x80>)
   13358:	682c      	ldr	r4, [r5, #0]
   1335a:	2c10      	cmp	r4, #16
   1335c:	d910      	bls.n	13380 <z_arm_mpu_init+0x2c>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   1335e:	f240 1351 	movw	r3, #337	; 0x151
   13362:	4a1d      	ldr	r2, [pc, #116]	; (133d8 <z_arm_mpu_init+0x84>)
   13364:	491d      	ldr	r1, [pc, #116]	; (133dc <z_arm_mpu_init+0x88>)
   13366:	481e      	ldr	r0, [pc, #120]	; (133e0 <z_arm_mpu_init+0x8c>)
   13368:	f01c f82c 	bl	2f3c4 <assert_print>
   1336c:	4621      	mov	r1, r4
   1336e:	2210      	movs	r2, #16
   13370:	481c      	ldr	r0, [pc, #112]	; (133e4 <z_arm_mpu_init+0x90>)
   13372:	f01c f827 	bl	2f3c4 <assert_print>
   13376:	f240 1151 	movw	r1, #337	; 0x151
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos == 8,
		"Invalid number of MPU regions\n");
#elif defined(NUM_MPU_REGIONS)
	__ASSERT(
   1337a:	4817      	ldr	r0, [pc, #92]	; (133d8 <z_arm_mpu_init+0x84>)
   1337c:	f01c f81b 	bl	2f3b6 <assert_post_action>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   13380:	2000      	movs	r0, #0
	arm_core_mpu_disable();
   13382:	f7ff ff45 	bl	13210 <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
   13386:	4b18      	ldr	r3, [pc, #96]	; (133e8 <z_arm_mpu_init+0x94>)
   13388:	4a18      	ldr	r2, [pc, #96]	; (133ec <z_arm_mpu_init+0x98>)
   1338a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1338e:	4284      	cmp	r4, r0
   13390:	d117      	bne.n	133c2 <z_arm_mpu_init+0x6e>
	static_regions_num = mpu_config.num_regions;
   13392:	4b17      	ldr	r3, [pc, #92]	; (133f0 <z_arm_mpu_init+0x9c>)
   13394:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   13396:	f7ff ff2f 	bl	131f8 <arm_core_mpu_enable>
	__ASSERT(
   1339a:	4b13      	ldr	r3, [pc, #76]	; (133e8 <z_arm_mpu_init+0x94>)
   1339c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   133a0:	f3c3 2307 	ubfx	r3, r3, #8, #8
   133a4:	2b10      	cmp	r3, #16
   133a6:	d013      	beq.n	133d0 <z_arm_mpu_init+0x7c>
   133a8:	4912      	ldr	r1, [pc, #72]	; (133f4 <z_arm_mpu_init+0xa0>)
   133aa:	f240 13bb 	movw	r3, #443	; 0x1bb
   133ae:	4a0a      	ldr	r2, [pc, #40]	; (133d8 <z_arm_mpu_init+0x84>)
   133b0:	480b      	ldr	r0, [pc, #44]	; (133e0 <z_arm_mpu_init+0x8c>)
   133b2:	f01c f807 	bl	2f3c4 <assert_print>
   133b6:	4810      	ldr	r0, [pc, #64]	; (133f8 <z_arm_mpu_init+0xa4>)
   133b8:	f01c f804 	bl	2f3c4 <assert_print>
   133bc:	f240 11bb 	movw	r1, #443	; 0x1bb
   133c0:	e7db      	b.n	1337a <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   133c2:	6869      	ldr	r1, [r5, #4]
   133c4:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   133c8:	f7ff fe16 	bl	12ff8 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   133cc:	3001      	adds	r0, #1
   133ce:	e7de      	b.n	1338e <z_arm_mpu_init+0x3a>
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   133d0:	2000      	movs	r0, #0
   133d2:	bd38      	pop	{r3, r4, r5, pc}
   133d4:	00037f68 	.word	0x00037f68
   133d8:	0003b311 	.word	0x0003b311
   133dc:	0003ea9e 	.word	0x0003ea9e
   133e0:	00039995 	.word	0x00039995
   133e4:	0003b3a3 	.word	0x0003b3a3
   133e8:	e000ed00 	.word	0xe000ed00
   133ec:	0044ffaa 	.word	0x0044ffaa
   133f0:	2000f127 	.word	0x2000f127
   133f4:	0003b3d7 	.word	0x0003b3d7
   133f8:	0003b428 	.word	0x0003b428

000133fc <malloc_prepare>:
					 CONFIG_SRAM_BASE_ADDRESS))
	#endif /* CONFIG_XTENSA */
#endif

static int malloc_prepare(void)
{
   133fc:	b508      	push	{r3, lr}

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
   133fe:	4b0b      	ldr	r3, [pc, #44]	; (1342c <malloc_prepare+0x30>)
   13400:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
   13404:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   13408:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   1340c:	d20c      	bcs.n	13428 <malloc_prepare+0x2c>
   1340e:	4908      	ldr	r1, [pc, #32]	; (13430 <malloc_prepare+0x34>)
   13410:	2380      	movs	r3, #128	; 0x80
   13412:	4a08      	ldr	r2, [pc, #32]	; (13434 <malloc_prepare+0x38>)
   13414:	4808      	ldr	r0, [pc, #32]	; (13438 <malloc_prepare+0x3c>)
   13416:	f01b ffd5 	bl	2f3c4 <assert_print>
   1341a:	4808      	ldr	r0, [pc, #32]	; (1343c <malloc_prepare+0x40>)
   1341c:	f01b ffd2 	bl	2f3c4 <assert_print>
   13420:	2180      	movs	r1, #128	; 0x80
   13422:	4804      	ldr	r0, [pc, #16]	; (13434 <malloc_prepare+0x38>)
   13424:	f01b ffc7 	bl	2f3b6 <assert_post_action>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
   13428:	2000      	movs	r0, #0
   1342a:	bd08      	pop	{r3, pc}
   1342c:	2001ccec 	.word	0x2001ccec
   13430:	0003b479 	.word	0x0003b479
   13434:	0003b449 	.word	0x0003b449
   13438:	00039995 	.word	0x00039995
   1343c:	0003b4c0 	.word	0x0003b4c0

00013440 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   13440:	4b01      	ldr	r3, [pc, #4]	; (13448 <__stdout_hook_install+0x8>)
   13442:	6018      	str	r0, [r3, #0]
}
   13444:	4770      	bx	lr
   13446:	bf00      	nop
   13448:	2000c834 	.word	0x2000c834

0001344c <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   1344c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1344e:	4606      	mov	r6, r0
   13450:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   13452:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
   13454:	4f06      	ldr	r7, [pc, #24]	; (13470 <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
   13456:	42ac      	cmp	r4, r5
   13458:	da08      	bge.n	1346c <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   1345a:	683b      	ldr	r3, [r7, #0]
   1345c:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   1345e:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   13460:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
   13462:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   13466:	d001      	beq.n	1346c <z_impl_zephyr_read_stdin+0x20>
   13468:	280d      	cmp	r0, #13
   1346a:	d1f4      	bne.n	13456 <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   1346c:	4620      	mov	r0, r4
   1346e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13470:	2000c830 	.word	0x2000c830

00013474 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   13474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13476:	460d      	mov	r5, r1
   13478:	4f09      	ldr	r7, [pc, #36]	; (134a0 <z_impl_zephyr_write_stdout+0x2c>)
   1347a:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   1347c:	f1c0 0401 	rsb	r4, r0, #1
   13480:	19a3      	adds	r3, r4, r6
   13482:	429d      	cmp	r5, r3
   13484:	dc01      	bgt.n	1348a <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   13486:	4628      	mov	r0, r5
   13488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   1348a:	7873      	ldrb	r3, [r6, #1]
   1348c:	2b0a      	cmp	r3, #10
   1348e:	d102      	bne.n	13496 <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   13490:	200d      	movs	r0, #13
   13492:	683b      	ldr	r3, [r7, #0]
   13494:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   13496:	683b      	ldr	r3, [r7, #0]
   13498:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   1349c:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   1349e:	e7ef      	b.n	13480 <z_impl_zephyr_write_stdout+0xc>
   134a0:	2000c834 	.word	0x2000c834

000134a4 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
   134a4:	b508      	push	{r3, lr}
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
   134a6:	2105      	movs	r1, #5
   134a8:	4801      	ldr	r0, [pc, #4]	; (134b0 <_exit+0xc>)
   134aa:	f7ff ffe3 	bl	13474 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
   134ae:	e7fe      	b.n	134ae <_exit+0xa>
   134b0:	0003b547 	.word	0x0003b547

000134b4 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
   134b4:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
   134b6:	4c07      	ldr	r4, [pc, #28]	; (134d4 <_sbrk+0x20>)
   134b8:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   134ba:	18c2      	adds	r2, r0, r3
   134bc:	4806      	ldr	r0, [pc, #24]	; (134d8 <_sbrk+0x24>)
   134be:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
   134c2:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
   134c6:	428a      	cmp	r2, r1
		heap_sz += count;
   134c8:	bf36      	itet	cc
   134ca:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
   134cc:	f04f 30ff 	movcs.w	r0, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
   134d0:	18c0      	addcc	r0, r0, r3
	}

	return ret;
}
   134d2:	bd10      	pop	{r4, pc}
   134d4:	2000e5a4 	.word	0x2000e5a4
   134d8:	2001ccec 	.word	0x2001ccec

000134dc <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
   134dc:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   134de:	4604      	mov	r4, r0
   134e0:	b958      	cbnz	r0, 134fa <__retarget_lock_init_recursive+0x1e>
   134e2:	4911      	ldr	r1, [pc, #68]	; (13528 <__retarget_lock_init_recursive+0x4c>)
   134e4:	f240 1379 	movw	r3, #377	; 0x179
   134e8:	4a10      	ldr	r2, [pc, #64]	; (1352c <__retarget_lock_init_recursive+0x50>)
   134ea:	4811      	ldr	r0, [pc, #68]	; (13530 <__retarget_lock_init_recursive+0x54>)
   134ec:	f01b ff6a 	bl	2f3c4 <assert_print>
   134f0:	f240 1179 	movw	r1, #377	; 0x179
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
#else
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
   134f4:	480d      	ldr	r0, [pc, #52]	; (1352c <__retarget_lock_init_recursive+0x50>)
   134f6:	f01b ff5e 	bl	2f3b6 <assert_post_action>
	*lock = malloc(sizeof(struct k_mutex));
   134fa:	2014      	movs	r0, #20
   134fc:	f019 f806 	bl	2c50c <malloc>
   13500:	6020      	str	r0, [r4, #0]
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
   13502:	b960      	cbnz	r0, 1351e <__retarget_lock_init_recursive+0x42>
   13504:	490b      	ldr	r1, [pc, #44]	; (13534 <__retarget_lock_init_recursive+0x58>)
   13506:	f240 1381 	movw	r3, #385	; 0x181
   1350a:	4a08      	ldr	r2, [pc, #32]	; (1352c <__retarget_lock_init_recursive+0x50>)
   1350c:	4808      	ldr	r0, [pc, #32]	; (13530 <__retarget_lock_init_recursive+0x54>)
   1350e:	f01b ff59 	bl	2f3c4 <assert_print>
   13512:	4809      	ldr	r0, [pc, #36]	; (13538 <__retarget_lock_init_recursive+0x5c>)
   13514:	f01b ff56 	bl	2f3c4 <assert_print>
   13518:	f240 1181 	movw	r1, #385	; 0x181
   1351c:	e7ea      	b.n	134f4 <__retarget_lock_init_recursive+0x18>

	k_mutex_init((struct k_mutex *)*lock);
}
   1351e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_init(mutex);
   13522:	f022 bdec 	b.w	360fe <z_impl_k_mutex_init>
   13526:	bf00      	nop
   13528:	0003b54e 	.word	0x0003b54e
   1352c:	0003b449 	.word	0x0003b449
   13530:	00039995 	.word	0x00039995
   13534:	0003b54d 	.word	0x0003b54d
   13538:	0003b589 	.word	0x0003b589

0001353c <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
   1353c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   1353e:	b958      	cbnz	r0, 13558 <__retarget_lock_acquire_recursive+0x1c>
   13540:	4909      	ldr	r1, [pc, #36]	; (13568 <__retarget_lock_acquire_recursive+0x2c>)
   13542:	480a      	ldr	r0, [pc, #40]	; (1356c <__retarget_lock_acquire_recursive+0x30>)
   13544:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
   13548:	4a09      	ldr	r2, [pc, #36]	; (13570 <__retarget_lock_acquire_recursive+0x34>)
   1354a:	f01b ff3b 	bl	2f3c4 <assert_print>
   1354e:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
   13552:	4807      	ldr	r0, [pc, #28]	; (13570 <__retarget_lock_acquire_recursive+0x34>)
   13554:	f01b ff2f 	bl	2f3b6 <assert_post_action>
	return z_impl_k_mutex_lock(mutex, timeout);
   13558:	f04f 32ff 	mov.w	r2, #4294967295
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
   1355c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13560:	f04f 33ff 	mov.w	r3, #4294967295
   13564:	f015 be3e 	b.w	291e4 <z_impl_k_mutex_lock>
   13568:	0003b54e 	.word	0x0003b54e
   1356c:	00039995 	.word	0x00039995
   13570:	0003b449 	.word	0x0003b449

00013574 <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
   13574:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(lock != NULL);
   13576:	b958      	cbnz	r0, 13590 <__retarget_lock_release_recursive+0x1c>
   13578:	4907      	ldr	r1, [pc, #28]	; (13598 <__retarget_lock_release_recursive+0x24>)
   1357a:	4808      	ldr	r0, [pc, #32]	; (1359c <__retarget_lock_release_recursive+0x28>)
   1357c:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
   13580:	4a07      	ldr	r2, [pc, #28]	; (135a0 <__retarget_lock_release_recursive+0x2c>)
   13582:	f01b ff1f 	bl	2f3c4 <assert_print>
   13586:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
   1358a:	4805      	ldr	r0, [pc, #20]	; (135a0 <__retarget_lock_release_recursive+0x2c>)
   1358c:	f01b ff13 	bl	2f3b6 <assert_post_action>
	k_mutex_unlock((struct k_mutex *)lock);
}
   13590:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   13594:	f015 bef6 	b.w	29384 <z_impl_k_mutex_unlock>
   13598:	0003b54e 	.word	0x0003b54e
   1359c:	00039995 	.word	0x00039995
   135a0:	0003b449 	.word	0x0003b449

000135a4 <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   135a4:	b508      	push	{r3, lr}
   135a6:	211d      	movs	r1, #29
   135a8:	4804      	ldr	r0, [pc, #16]	; (135bc <__chk_fail+0x18>)
   135aa:	f7ff ff63 	bl	13474 <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
   135ae:	4040      	eors	r0, r0
   135b0:	f380 8811 	msr	BASEPRI, r0
   135b4:	f04f 0003 	mov.w	r0, #3
   135b8:	df02      	svc	2
	CODE_UNREACHABLE;
   135ba:	bf00      	nop
   135bc:	0003b5ac 	.word	0x0003b5ac

000135c0 <gpio_pin_set.constprop.0>:
 *
 * @retval 0 If successful.
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
   135c0:	b510      	push	{r4, lr}
			       int value)
{
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	const struct gpio_driver_data *const data =
   135c2:	4b13      	ldr	r3, [pc, #76]	; (13610 <gpio_pin_set.constprop.0+0x50>)
			(const struct gpio_driver_data *)port->data;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   135c4:	6859      	ldr	r1, [r3, #4]
	const struct gpio_driver_data *const data =
   135c6:	691a      	ldr	r2, [r3, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   135c8:	6809      	ldr	r1, [r1, #0]
   135ca:	01c9      	lsls	r1, r1, #7
   135cc:	d40e      	bmi.n	135ec <gpio_pin_set.constprop.0+0x2c>
   135ce:	4911      	ldr	r1, [pc, #68]	; (13614 <gpio_pin_set.constprop.0+0x54>)
   135d0:	f240 535c 	movw	r3, #1372	; 0x55c
   135d4:	4a10      	ldr	r2, [pc, #64]	; (13618 <gpio_pin_set.constprop.0+0x58>)
   135d6:	4811      	ldr	r0, [pc, #68]	; (1361c <gpio_pin_set.constprop.0+0x5c>)
   135d8:	f01b fef4 	bl	2f3c4 <assert_print>
   135dc:	4810      	ldr	r0, [pc, #64]	; (13620 <gpio_pin_set.constprop.0+0x60>)
   135de:	f01b fef1 	bl	2f3c4 <assert_print>
   135e2:	f240 515c 	movw	r1, #1372	; 0x55c
   135e6:	480c      	ldr	r0, [pc, #48]	; (13618 <gpio_pin_set.constprop.0+0x58>)
   135e8:	f01b fee5 	bl	2f3b6 <assert_post_action>
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   135ec:	6812      	ldr	r2, [r2, #0]
   135ee:	01d2      	lsls	r2, r2, #7
		value = (value != 0) ? 0 : 1;
   135f0:	bf48      	it	mi
   135f2:	f080 0001 	eormi.w	r0, r0, #1
	if (value != 0)	{
   135f6:	b138      	cbz	r0, 13608 <gpio_pin_set.constprop.0+0x48>
	return api->port_set_bits_raw(port, pins);
   135f8:	689b      	ldr	r3, [r3, #8]
   135fa:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   135fc:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
	}

	return gpio_pin_set_raw(port, pin, value);
}
   13600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return api->port_clear_bits_raw(port, pins);
   13604:	4802      	ldr	r0, [pc, #8]	; (13610 <gpio_pin_set.constprop.0+0x50>)
   13606:	4718      	bx	r3
   13608:	689b      	ldr	r3, [r3, #8]
   1360a:	691b      	ldr	r3, [r3, #16]
   1360c:	e7f6      	b.n	135fc <gpio_pin_set.constprop.0+0x3c>
   1360e:	bf00      	nop
   13610:	0003751c 	.word	0x0003751c
   13614:	0003b60a 	.word	0x0003b60a
   13618:	0003b5d9 	.word	0x0003b5d9
   1361c:	00039995 	.word	0x00039995
   13620:	0003b648 	.word	0x0003b648

00013624 <bt_hci_transport_setup>:
#define RESET_GPIO_CTRL  DT_GPIO_CTLR(RESET_NODE, gpios)
#define RESET_GPIO_PIN   DT_GPIO_PIN(RESET_NODE, gpios)
#define RESET_GPIO_FLAGS DT_GPIO_FLAGS(RESET_NODE, gpios)

int bt_hci_transport_setup(const struct device *h4)
{
   13624:	b537      	push	{r0, r1, r2, r4, r5, lr}
   13626:	4604      	mov	r4, r0
   13628:	4d20      	ldr	r5, [pc, #128]	; (136ac <bt_hci_transport_setup+0x88>)
   1362a:	4628      	mov	r0, r5
   1362c:	f022 fd14 	bl	36058 <z_device_is_ready>
	int err;
	char c;
	const struct device *const port = DEVICE_DT_GET(RESET_GPIO_CTRL);

	if (!device_is_ready(port)) {
   13630:	2800      	cmp	r0, #0
   13632:	d038      	beq.n	136a6 <bt_hci_transport_setup+0x82>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   13634:	686b      	ldr	r3, [r5, #4]
	const struct gpio_driver_api *api =
   13636:	68a9      	ldr	r1, [r5, #8]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   13638:	681b      	ldr	r3, [r3, #0]
	struct gpio_driver_data *data =
   1363a:	692a      	ldr	r2, [r5, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1363c:	01db      	lsls	r3, r3, #7
   1363e:	d40e      	bmi.n	1365e <bt_hci_transport_setup+0x3a>
   13640:	491b      	ldr	r1, [pc, #108]	; (136b0 <bt_hci_transport_setup+0x8c>)
   13642:	f240 23f1 	movw	r3, #753	; 0x2f1
   13646:	4a1b      	ldr	r2, [pc, #108]	; (136b4 <bt_hci_transport_setup+0x90>)
   13648:	481b      	ldr	r0, [pc, #108]	; (136b8 <bt_hci_transport_setup+0x94>)
   1364a:	f01b febb 	bl	2f3c4 <assert_print>
   1364e:	481b      	ldr	r0, [pc, #108]	; (136bc <bt_hci_transport_setup+0x98>)
   13650:	f01b feb8 	bl	2f3c4 <assert_print>
   13654:	f240 21f1 	movw	r1, #753	; 0x2f1
   13658:	4816      	ldr	r0, [pc, #88]	; (136b4 <bt_hci_transport_setup+0x90>)
   1365a:	f01b feac 	bl	2f3b6 <assert_post_action>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1365e:	6813      	ldr	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   13660:	4628      	mov	r0, r5
		data->invert |= (gpio_port_pins_t)BIT(pin);
   13662:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   13666:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   13668:	680b      	ldr	r3, [r1, #0]
   1366a:	4a15      	ldr	r2, [pc, #84]	; (136c0 <bt_hci_transport_setup+0x9c>)
   1366c:	2118      	movs	r1, #24
   1366e:	4798      	blx	r3
	}

	/* Configure pin as output and initialize it to inactive state. */
	err = gpio_pin_configure(port, RESET_GPIO_PIN,
				 RESET_GPIO_FLAGS | GPIO_OUTPUT_INACTIVE);
	if (err) {
   13670:	b9b8      	cbnz	r0, 136a2 <bt_hci_transport_setup+0x7e>

	/* Reset the nRF52840 and let it wait until the pin is inactive again
	 * before running to main to ensure that it won't send any data until
	 * the H4 device is setup and ready to receive.
	 */
	err = gpio_pin_set(port, RESET_GPIO_PIN, 1);
   13672:	2001      	movs	r0, #1
   13674:	f7ff ffa4 	bl	135c0 <gpio_pin_set.constprop.0>
	if (err) {
   13678:	b998      	cbnz	r0, 136a2 <bt_hci_transport_setup+0x7e>
	return z_impl_k_sleep(timeout);
   1367a:	f44f 70a4 	mov.w	r0, #328	; 0x148
   1367e:	2100      	movs	r1, #0
   13680:	f017 fe64 	bl	2b34c <z_impl_k_sleep>
	 * on the lines are received and drained correctly.
	 */
	k_sleep(K_MSEC(10));

	/* Drain bytes */
	while (h4 && uart_fifo_read(h4, &c, 1)) {
   13684:	b154      	cbz	r4, 1369c <bt_hci_transport_setup+0x78>
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->fifo_read == NULL) {
   13686:	68a3      	ldr	r3, [r4, #8]
   13688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1368a:	2b00      	cmp	r3, #0
   1368c:	d0fb      	beq.n	13686 <bt_hci_transport_setup+0x62>
		return -ENOSYS;
	}

	return api->fifo_read(dev, rx_data, size);
   1368e:	2201      	movs	r2, #1
   13690:	4620      	mov	r0, r4
   13692:	f10d 0107 	add.w	r1, sp, #7
   13696:	4798      	blx	r3
   13698:	2800      	cmp	r0, #0
   1369a:	d1f4      	bne.n	13686 <bt_hci_transport_setup+0x62>
		continue;
	}

	/* We are ready, let the nRF52840 run to main */
	err = gpio_pin_set(port, RESET_GPIO_PIN, 0);
   1369c:	2000      	movs	r0, #0
   1369e:	f7ff ff8f 	bl	135c0 <gpio_pin_set.constprop.0>
	if (err) {
		return err;
	}

	return 0;
}
   136a2:	b003      	add	sp, #12
   136a4:	bd30      	pop	{r4, r5, pc}
		return -EIO;
   136a6:	f06f 0004 	mvn.w	r0, #4
   136aa:	e7fa      	b.n	136a2 <bt_hci_transport_setup+0x7e>
   136ac:	0003751c 	.word	0x0003751c
   136b0:	0003b60a 	.word	0x0003b60a
   136b4:	0003b5d9 	.word	0x0003b5d9
   136b8:	00039995 	.word	0x00039995
   136bc:	0003b648 	.word	0x0003b648
   136c0:	000a0001 	.word	0x000a0001

000136c4 <xoshiro128_next>:
		state[3] = k_cycle_get_32() ^ 0xa00ae278;
	}
}

static uint32_t xoshiro128_next(void)
{
   136c4:	b570      	push	{r4, r5, r6, lr}
	const uint32_t result = rotl(state[0] + state[3], 7) + state[0];
   136c6:	4b0c      	ldr	r3, [pc, #48]	; (136f8 <xoshiro128_next+0x34>)
   136c8:	6819      	ldr	r1, [r3, #0]
   136ca:	68d8      	ldr	r0, [r3, #12]

	const uint32_t t = state[1] << 9;

	state[2] ^= state[0];
   136cc:	e9d3 5201 	ldrd	r5, r2, [r3, #4]
   136d0:	404a      	eors	r2, r1
	state[3] ^= state[1];
   136d2:	ea80 0405 	eor.w	r4, r0, r5
	state[1] ^= state[2];
   136d6:	ea85 0602 	eor.w	r6, r5, r2
   136da:	605e      	str	r6, [r3, #4]
	state[0] ^= state[3];

	state[2] ^= t;
   136dc:	ea82 2245 	eor.w	r2, r2, r5, lsl #9
	state[0] ^= state[3];
   136e0:	ea81 0604 	eor.w	r6, r1, r4
	return (x << k) | (x >> (32 - k));
   136e4:	ea4f 5474 	mov.w	r4, r4, ror #21
	const uint32_t result = rotl(state[0] + state[3], 7) + state[0];
   136e8:	4408      	add	r0, r1
	state[0] ^= state[3];
   136ea:	601e      	str	r6, [r3, #0]
	state[2] ^= t;
   136ec:	609a      	str	r2, [r3, #8]

	state[3] = rotl(state[3], 11);
   136ee:	60dc      	str	r4, [r3, #12]

	return result;
}
   136f0:	eb01 6070 	add.w	r0, r1, r0, ror #25
   136f4:	bd70      	pop	{r4, r5, r6, pc}
   136f6:	bf00      	nop
   136f8:	2000e5a8 	.word	0x2000e5a8

000136fc <xoshiro128_init_state>:
{
   136fc:	b510      	push	{r4, lr}

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   136fe:	4816      	ldr	r0, [pc, #88]	; (13758 <xoshiro128_init_state+0x5c>)
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
   13700:	6883      	ldr	r3, [r0, #8]
   13702:	681b      	ldr	r3, [r3, #0]
   13704:	b963      	cbnz	r3, 13720 <xoshiro128_init_state+0x24>
   13706:	4915      	ldr	r1, [pc, #84]	; (1375c <xoshiro128_init_state+0x60>)
   13708:	234d      	movs	r3, #77	; 0x4d
   1370a:	4a15      	ldr	r2, [pc, #84]	; (13760 <xoshiro128_init_state+0x64>)
   1370c:	4815      	ldr	r0, [pc, #84]	; (13764 <xoshiro128_init_state+0x68>)
   1370e:	f01b fe59 	bl	2f3c4 <assert_print>
   13712:	4815      	ldr	r0, [pc, #84]	; (13768 <xoshiro128_init_state+0x6c>)
   13714:	f01b fe56 	bl	2f3c4 <assert_print>
   13718:	214d      	movs	r1, #77	; 0x4d
   1371a:	4811      	ldr	r0, [pc, #68]	; (13760 <xoshiro128_init_state+0x64>)
   1371c:	f01b fe4b 	bl	2f3b6 <assert_post_action>
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   13720:	4c12      	ldr	r4, [pc, #72]	; (1376c <xoshiro128_init_state+0x70>)
   13722:	2210      	movs	r2, #16
   13724:	4621      	mov	r1, r4
   13726:	4798      	blx	r3
	if (rc == 0) {
   13728:	b918      	cbnz	r0, 13732 <xoshiro128_init_state+0x36>
		initialized = true;
   1372a:	2201      	movs	r2, #1
   1372c:	4b10      	ldr	r3, [pc, #64]	; (13770 <xoshiro128_init_state+0x74>)
   1372e:	701a      	strb	r2, [r3, #0]
}
   13730:	bd10      	pop	{r4, pc}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   13732:	f021 f9a4 	bl	34a7e <sys_clock_cycle_get_32>
		state[0] = k_cycle_get_32();
   13736:	6020      	str	r0, [r4, #0]
   13738:	f021 f9a1 	bl	34a7e <sys_clock_cycle_get_32>
		state[1] = k_cycle_get_32() ^ 0x9b64c2b0;
   1373c:	4b0d      	ldr	r3, [pc, #52]	; (13774 <xoshiro128_init_state+0x78>)
   1373e:	4043      	eors	r3, r0
   13740:	6063      	str	r3, [r4, #4]
   13742:	f021 f99c 	bl	34a7e <sys_clock_cycle_get_32>
		state[2] = k_cycle_get_32() ^ 0x86d3d2d4;
   13746:	4b0c      	ldr	r3, [pc, #48]	; (13778 <xoshiro128_init_state+0x7c>)
   13748:	4043      	eors	r3, r0
   1374a:	60a3      	str	r3, [r4, #8]
   1374c:	f021 f997 	bl	34a7e <sys_clock_cycle_get_32>
		state[3] = k_cycle_get_32() ^ 0xa00ae278;
   13750:	4b0a      	ldr	r3, [pc, #40]	; (1377c <xoshiro128_init_state+0x80>)
   13752:	4043      	eors	r3, r0
   13754:	60e3      	str	r3, [r4, #12]
}
   13756:	e7eb      	b.n	13730 <xoshiro128_init_state+0x34>
   13758:	0003754c 	.word	0x0003754c
   1375c:	0003b68e 	.word	0x0003b68e
   13760:	0003b65a 	.word	0x0003b65a
   13764:	00039995 	.word	0x00039995
   13768:	0003b6ae 	.word	0x0003b6ae
   1376c:	2000e5a8 	.word	0x2000e5a8
   13770:	2000f128 	.word	0x2000f128
   13774:	9b64c2b0 	.word	0x9b64c2b0
   13778:	86d3d2d4 	.word	0x86d3d2d4
   1377c:	a00ae278 	.word	0xa00ae278

00013780 <xoshiro128_initialize>:
{
   13780:	b508      	push	{r3, lr}
   13782:	4804      	ldr	r0, [pc, #16]	; (13794 <xoshiro128_initialize+0x14>)
   13784:	f022 fc68 	bl	36058 <z_device_is_ready>
	return 0;
   13788:	2800      	cmp	r0, #0
}
   1378a:	bf0c      	ite	eq
   1378c:	f06f 0012 	mvneq.w	r0, #18
   13790:	2000      	movne	r0, #0
   13792:	bd08      	pop	{r3, pc}
   13794:	0003754c 	.word	0x0003754c

00013798 <z_impl_sys_rand32_get>:

uint32_t z_impl_sys_rand32_get(void)
{
   13798:	b508      	push	{r3, lr}
	if (unlikely(!initialized)) {
   1379a:	4b04      	ldr	r3, [pc, #16]	; (137ac <z_impl_sys_rand32_get+0x14>)
   1379c:	781b      	ldrb	r3, [r3, #0]
   1379e:	b90b      	cbnz	r3, 137a4 <z_impl_sys_rand32_get+0xc>
		xoshiro128_init_state();
   137a0:	f7ff ffac 	bl	136fc <xoshiro128_init_state>
	}

	return xoshiro128_next();
}
   137a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return xoshiro128_next();
   137a8:	f7ff bf8c 	b.w	136c4 <xoshiro128_next>
   137ac:	2000f128 	.word	0x2000f128

000137b0 <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   137b0:	4b0e      	ldr	r3, [pc, #56]	; (137ec <bt_hex+0x3c>)
   137b2:	2940      	cmp	r1, #64	; 0x40
   137b4:	bf28      	it	cs
   137b6:	2140      	movcs	r1, #64	; 0x40
{
   137b8:	b570      	push	{r4, r5, r6, lr}
   137ba:	461d      	mov	r5, r3

	for (i = 0; i < len; i++) {
		str[i * 2] = hex[b[i] >> 4];
   137bc:	4c0c      	ldr	r4, [pc, #48]	; (137f0 <bt_hex+0x40>)
   137be:	1846      	adds	r6, r0, r1
	for (i = 0; i < len; i++) {
   137c0:	42b0      	cmp	r0, r6
   137c2:	f103 0302 	add.w	r3, r3, #2
   137c6:	d104      	bne.n	137d2 <bt_hex+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   137c8:	2300      	movs	r3, #0
   137ca:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   137ce:	4807      	ldr	r0, [pc, #28]	; (137ec <bt_hex+0x3c>)
   137d0:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2] = hex[b[i] >> 4];
   137d2:	7802      	ldrb	r2, [r0, #0]
   137d4:	0912      	lsrs	r2, r2, #4
   137d6:	5ca2      	ldrb	r2, [r4, r2]
   137d8:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   137dc:	f810 2b01 	ldrb.w	r2, [r0], #1
   137e0:	f002 020f 	and.w	r2, r2, #15
   137e4:	5ca2      	ldrb	r2, [r4, r2]
   137e6:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   137ea:	e7e9      	b.n	137c0 <bt_hex+0x10>
   137ec:	2000f147 	.word	0x2000f147
   137f0:	0003b6e7 	.word	0x0003b6e7

000137f4 <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
   137f4:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
   137f6:	7803      	ldrb	r3, [r0, #0]
   137f8:	b08b      	sub	sp, #44	; 0x2c
   137fa:	4604      	mov	r4, r0
   137fc:	ad07      	add	r5, sp, #28
   137fe:	2b03      	cmp	r3, #3
   13800:	d821      	bhi.n	13846 <bt_addr_le_str+0x52>
   13802:	e8df f003 	tbb	[pc, r3]
   13806:	1a02      	.short	0x1a02
   13808:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
   1380a:	4912      	ldr	r1, [pc, #72]	; (13854 <bt_addr_le_str+0x60>)
		strcpy(type, "random");
   1380c:	4628      	mov	r0, r5
   1380e:	f023 f817 	bl	36840 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   13812:	9505      	str	r5, [sp, #20]
   13814:	7863      	ldrb	r3, [r4, #1]
   13816:	211e      	movs	r1, #30
   13818:	9304      	str	r3, [sp, #16]
   1381a:	78a3      	ldrb	r3, [r4, #2]
   1381c:	4a0e      	ldr	r2, [pc, #56]	; (13858 <bt_addr_le_str+0x64>)
   1381e:	9303      	str	r3, [sp, #12]
   13820:	78e3      	ldrb	r3, [r4, #3]
   13822:	480e      	ldr	r0, [pc, #56]	; (1385c <bt_addr_le_str+0x68>)
   13824:	9302      	str	r3, [sp, #8]
   13826:	7923      	ldrb	r3, [r4, #4]
   13828:	9301      	str	r3, [sp, #4]
   1382a:	7963      	ldrb	r3, [r4, #5]
   1382c:	9300      	str	r3, [sp, #0]
   1382e:	79a3      	ldrb	r3, [r4, #6]
   13830:	f01b fbf8 	bl	2f024 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   13834:	4809      	ldr	r0, [pc, #36]	; (1385c <bt_addr_le_str+0x68>)
   13836:	b00b      	add	sp, #44	; 0x2c
   13838:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   1383a:	4909      	ldr	r1, [pc, #36]	; (13860 <bt_addr_le_str+0x6c>)
   1383c:	e7e6      	b.n	1380c <bt_addr_le_str+0x18>
		strcpy(type, "public-id");
   1383e:	4909      	ldr	r1, [pc, #36]	; (13864 <bt_addr_le_str+0x70>)
   13840:	e7e4      	b.n	1380c <bt_addr_le_str+0x18>
		strcpy(type, "random-id");
   13842:	4909      	ldr	r1, [pc, #36]	; (13868 <bt_addr_le_str+0x74>)
   13844:	e7e2      	b.n	1380c <bt_addr_le_str+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   13846:	210a      	movs	r1, #10
   13848:	4628      	mov	r0, r5
   1384a:	4a08      	ldr	r2, [pc, #32]	; (1386c <bt_addr_le_str+0x78>)
   1384c:	f01b fbea 	bl	2f024 <snprintk>
		break;
   13850:	e7df      	b.n	13812 <bt_addr_le_str+0x1e>
   13852:	bf00      	nop
   13854:	00039354 	.word	0x00039354
   13858:	00039376 	.word	0x00039376
   1385c:	2000f129 	.word	0x2000f129
   13860:	0003935b 	.word	0x0003935b
   13864:	00039362 	.word	0x00039362
   13868:	0003936c 	.word	0x0003936c
   1386c:	0003d859 	.word	0x0003d859

00013870 <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
   13870:	b590      	push	{r4, r7, lr}
   13872:	b087      	sub	sp, #28
	int err;
	LOG_INF("Saving ID");
   13874:	466c      	mov	r4, sp
{
   13876:	af00      	add	r7, sp, #0
	LOG_INF("Saving ID");
   13878:	4b12      	ldr	r3, [pc, #72]	; (138c4 <save_id+0x54>)
   1387a:	617b      	str	r3, [r7, #20]
   1387c:	2302      	movs	r3, #2
   1387e:	613b      	str	r3, [r7, #16]
   13880:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   13884:	4810      	ldr	r0, [pc, #64]	; (138c8 <save_id+0x58>)
   13886:	f107 0210 	add.w	r2, r7, #16
   1388a:	2300      	movs	r3, #0
   1388c:	f7fc fcd2 	bl	10234 <z_impl_z_log_msg_static_create>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
   13890:	490e      	ldr	r1, [pc, #56]	; (138cc <save_id+0x5c>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
   13892:	480f      	ldr	r0, [pc, #60]	; (138d0 <save_id+0x60>)
   13894:	79ca      	ldrb	r2, [r1, #7]
   13896:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   1389a:	f7fd fbe1 	bl	11060 <settings_save_one>
	if (err) {
   1389e:	b170      	cbz	r0, 138be <save_id+0x4e>
		LOG_ERR("Failed to save ID (err %d)", err);
   138a0:	b088      	sub	sp, #32
   138a2:	466a      	mov	r2, sp
   138a4:	4b0b      	ldr	r3, [pc, #44]	; (138d4 <save_id+0x64>)
   138a6:	e9c2 3005 	strd	r3, r0, [r2, #20]
   138aa:	2303      	movs	r3, #3
   138ac:	f842 3f10 	str.w	r3, [r2, #16]!
   138b0:	2300      	movs	r3, #0
   138b2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   138b6:	4804      	ldr	r0, [pc, #16]	; (138c8 <save_id+0x58>)
   138b8:	f7fc fcbc 	bl	10234 <z_impl_z_log_msg_static_create>
   138bc:	46a5      	mov	sp, r4
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
	if (err) {
		LOG_ERR("Failed to save IRK (err %d)", err);
	}
#endif
}
   138be:	371c      	adds	r7, #28
   138c0:	46bd      	mov	sp, r7
   138c2:	bd90      	pop	{r4, r7, pc}
   138c4:	0003b6ff 	.word	0x0003b6ff
   138c8:	00037928 	.word	0x00037928
   138cc:	2000c580 	.word	0x2000c580
   138d0:	0003b709 	.word	0x0003b709
   138d4:	0003b70f 	.word	0x0003b70f

000138d8 <set_setting>:
{
   138d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   138dc:	4604      	mov	r4, r0
   138de:	4617      	mov	r7, r2
   138e0:	4698      	mov	r8, r3
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   138e2:	4e29      	ldr	r6, [pc, #164]	; (13988 <set_setting+0xb0>)
   138e4:	b088      	sub	sp, #32
   138e6:	e8d6 3faf 	lda	r3, [r6]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   138ea:	07d9      	lsls	r1, r3, #31
   138ec:	d529      	bpl.n	13942 <set_setting+0x6a>
	if (!name) {
   138ee:	b968      	cbnz	r0, 1390c <set_setting+0x34>
		LOG_ERR("Insufficient number of arguments");
   138f0:	4b26      	ldr	r3, [pc, #152]	; (1398c <set_setting+0xb4>)
   138f2:	9307      	str	r3, [sp, #28]
   138f4:	2302      	movs	r3, #2
   138f6:	9306      	str	r3, [sp, #24]
   138f8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   138fc:	4603      	mov	r3, r0
   138fe:	aa06      	add	r2, sp, #24
   13900:	4823      	ldr	r0, [pc, #140]	; (13990 <set_setting+0xb8>)
   13902:	f7fc fc97 	bl	10234 <z_impl_z_log_msg_static_create>
		return -ENOENT;
   13906:	f06f 0001 	mvn.w	r0, #1
   1390a:	e01b      	b.n	13944 <set_setting+0x6c>
	len = settings_name_next(name, &next);
   1390c:	a901      	add	r1, sp, #4
   1390e:	f01c fb01 	bl	2ff14 <settings_name_next>
	if (!strncmp(name, "id", len)) {
   13912:	4920      	ldr	r1, [pc, #128]	; (13994 <set_setting+0xbc>)
	len = settings_name_next(name, &next);
   13914:	4602      	mov	r2, r0
	if (!strncmp(name, "id", len)) {
   13916:	4620      	mov	r0, r4
   13918:	f022 ff9a 	bl	36850 <strncmp>
   1391c:	4603      	mov	r3, r0
   1391e:	2800      	cmp	r0, #0
   13920:	d1f1      	bne.n	13906 <set_setting+0x2e>
   13922:	e8d6 2faf 	lda	r2, [r6]
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
   13926:	f3c2 05c0 	ubfx	r5, r2, #3, #1
   1392a:	0712      	lsls	r2, r2, #28
   1392c:	d50d      	bpl.n	1394a <set_setting+0x72>
			LOG_WRN("Ignoring identities stored in flash");
   1392e:	4a1a      	ldr	r2, [pc, #104]	; (13998 <set_setting+0xc0>)
   13930:	9207      	str	r2, [sp, #28]
   13932:	2202      	movs	r2, #2
   13934:	9206      	str	r2, [sp, #24]
   13936:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1393a:	4815      	ldr	r0, [pc, #84]	; (13990 <set_setting+0xb8>)
   1393c:	aa06      	add	r2, sp, #24
   1393e:	f7fc fc79 	bl	10234 <z_impl_z_log_msg_static_create>
		return 0;
   13942:	2000      	movs	r0, #0
}
   13944:	b008      	add	sp, #32
   13946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
   1394a:	f1a6 04d4 	sub.w	r4, r6, #212	; 0xd4
   1394e:	2207      	movs	r2, #7
   13950:	4621      	mov	r1, r4
   13952:	4640      	mov	r0, r8
   13954:	47b8      	blx	r7
		if (len < sizeof(bt_dev.id_addr[0])) {
   13956:	2806      	cmp	r0, #6
   13958:	d810      	bhi.n	1397c <set_setting+0xa4>
				LOG_ERR("Invalid length ID address in storage");
   1395a:	4b10      	ldr	r3, [pc, #64]	; (1399c <set_setting+0xc4>)
   1395c:	9307      	str	r3, [sp, #28]
   1395e:	2302      	movs	r3, #2
   13960:	9306      	str	r3, [sp, #24]
   13962:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13966:	462b      	mov	r3, r5
   13968:	4809      	ldr	r0, [pc, #36]	; (13990 <set_setting+0xb8>)
   1396a:	aa06      	add	r2, sp, #24
   1396c:	f7fc fc62 	bl	10234 <z_impl_z_log_msg_static_create>
			(void)memset(bt_dev.id_addr, 0,
   13970:	f846 5cd4 	str.w	r5, [r6, #-212]
			bt_dev.id_count = 0U;
   13974:	71e5      	strb	r5, [r4, #7]
			(void)memset(bt_dev.id_addr, 0,
   13976:	f8c4 5003 	str.w	r5, [r4, #3]
			bt_dev.id_count = 0U;
   1397a:	e7e2      	b.n	13942 <set_setting+0x6a>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
   1397c:	2307      	movs	r3, #7
   1397e:	fbb0 f0f3 	udiv	r0, r0, r3
   13982:	71e0      	strb	r0, [r4, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
   13984:	e7dd      	b.n	13942 <set_setting+0x6a>
   13986:	bf00      	nop
   13988:	2000c654 	.word	0x2000c654
   1398c:	0003b72a 	.word	0x0003b72a
   13990:	00037928 	.word	0x00037928
   13994:	00039369 	.word	0x00039369
   13998:	0003b74b 	.word	0x0003b74b
   1399c:	0003b76f 	.word	0x0003b76f

000139a0 <bt_settings_encode_key>:
{
   139a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   139a4:	b088      	sub	sp, #32
   139a6:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		snprintk(path, path_size,
   139aa:	799c      	ldrb	r4, [r3, #6]
   139ac:	795d      	ldrb	r5, [r3, #5]
   139ae:	791e      	ldrb	r6, [r3, #4]
   139b0:	78df      	ldrb	r7, [r3, #3]
   139b2:	f893 c002 	ldrb.w	ip, [r3, #2]
   139b6:	f893 e001 	ldrb.w	lr, [r3, #1]
   139ba:	781b      	ldrb	r3, [r3, #0]
	if (key) {
   139bc:	f1b8 0f00 	cmp.w	r8, #0
   139c0:	d00e      	beq.n	139e0 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
   139c2:	e9cd 3806 	strd	r3, r8, [sp, #24]
   139c6:	e9cd ce04 	strd	ip, lr, [sp, #16]
   139ca:	4613      	mov	r3, r2
   139cc:	e9cd 6702 	strd	r6, r7, [sp, #8]
   139d0:	e9cd 4500 	strd	r4, r5, [sp]
   139d4:	4a08      	ldr	r2, [pc, #32]	; (139f8 <bt_settings_encode_key+0x58>)
   139d6:	f01b fb25 	bl	2f024 <snprintk>
}
   139da:	b008      	add	sp, #32
   139dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
   139e0:	e9cd e305 	strd	lr, r3, [sp, #20]
   139e4:	e9cd 7c03 	strd	r7, ip, [sp, #12]
   139e8:	4613      	mov	r3, r2
   139ea:	e9cd 5601 	strd	r5, r6, [sp, #4]
   139ee:	4a03      	ldr	r2, [pc, #12]	; (139fc <bt_settings_encode_key+0x5c>)
   139f0:	9400      	str	r4, [sp, #0]
   139f2:	f01b fb17 	bl	2f024 <snprintk>
}
   139f6:	e7f0      	b.n	139da <bt_settings_encode_key+0x3a>
   139f8:	0003b794 	.word	0x0003b794
   139fc:	0003b7b8 	.word	0x0003b7b8

00013a00 <bt_settings_save_id>:

K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
   13a00:	4801      	ldr	r0, [pc, #4]	; (13a08 <bt_settings_save_id+0x8>)
   13a02:	f016 b9bf 	b.w	29d84 <k_work_submit>
   13a06:	bf00      	nop
   13a08:	2000c838 	.word	0x2000c838

00013a0c <commit_settings>:
}

static int commit_settings(void)
{
   13a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13a10:	4d1d      	ldr	r5, [pc, #116]	; (13a88 <commit_settings+0x7c>)
   13a12:	b086      	sub	sp, #24
   13a14:	e8d5 3faf 	lda	r3, [r5]
	int err;

	LOG_DBG("");

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   13a18:	f013 0f01 	tst.w	r3, #1
   13a1c:	462f      	mov	r7, r5
   13a1e:	d031      	beq.n	13a84 <commit_settings+0x78>
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
   13a20:	f815 6ccd 	ldrb.w	r6, [r5, #-205]
   13a24:	f1a5 08d4 	sub.w	r8, r5, #212	; 0xd4
   13a28:	b9d6      	cbnz	r6, 13a60 <commit_settings+0x54>
		err = bt_setup_public_id_addr();
   13a2a:	f002 f8bf 	bl	15bac <bt_setup_public_id_addr>
		if (err) {
   13a2e:	4604      	mov	r4, r0
   13a30:	b170      	cbz	r0, 13a50 <commit_settings+0x44>
	}

	if (!bt_dev.id_count) {
		err = bt_setup_random_id_addr();
		if (err) {
			LOG_ERR("Unable to setup an identity address");
   13a32:	4b16      	ldr	r3, [pc, #88]	; (13a8c <commit_settings+0x80>)
   13a34:	9305      	str	r3, [sp, #20]
   13a36:	2302      	movs	r3, #2
   13a38:	9304      	str	r3, [sp, #16]
   13a3a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13a3e:	4633      	mov	r3, r6
   13a40:	4813      	ldr	r0, [pc, #76]	; (13a90 <commit_settings+0x84>)
   13a42:	aa04      	add	r2, sp, #16
   13a44:	f7fc fbf6 	bl	10234 <z_impl_z_log_msg_static_create>
		LOG_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
   13a48:	4620      	mov	r0, r4
   13a4a:	b006      	add	sp, #24
   13a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!bt_dev.id_count) {
   13a50:	f898 6007 	ldrb.w	r6, [r8, #7]
   13a54:	b926      	cbnz	r6, 13a60 <commit_settings+0x54>
		err = bt_setup_random_id_addr();
   13a56:	f002 f90d 	bl	15c74 <bt_setup_random_id_addr>
		if (err) {
   13a5a:	4604      	mov	r4, r0
   13a5c:	2800      	cmp	r0, #0
   13a5e:	d1e8      	bne.n	13a32 <commit_settings+0x26>
   13a60:	e8d5 3faf 	lda	r3, [r5]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   13a64:	075a      	lsls	r2, r3, #29
   13a66:	d401      	bmi.n	13a6c <commit_settings+0x60>
		bt_finalize_init();
   13a68:	f001 fc20 	bl	152ac <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13a6c:	e8d7 3fef 	ldaex	r3, [r7]
   13a70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
   13a74:	e8c7 2fe1 	stlex	r1, r2, [r7]
   13a78:	2900      	cmp	r1, #0
   13a7a:	d1f7      	bne.n	13a6c <commit_settings+0x60>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
   13a7c:	03db      	lsls	r3, r3, #15
   13a7e:	d501      	bpl.n	13a84 <commit_settings+0x78>
		bt_settings_save_id();
   13a80:	f7ff ffbe 	bl	13a00 <bt_settings_save_id>
		return 0;
   13a84:	2400      	movs	r4, #0
   13a86:	e7df      	b.n	13a48 <commit_settings+0x3c>
   13a88:	2000c654 	.word	0x2000c654
   13a8c:	0003b7d9 	.word	0x0003b7d9
   13a90:	00037928 	.word	0x00037928

00013a94 <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set_setting, commit_settings, NULL);

int bt_settings_init(void)
{
   13a94:	b5b0      	push	{r4, r5, r7, lr}
   13a96:	af00      	add	r7, sp, #0
	int err;

	LOG_DBG("");

	err = settings_subsys_init();
   13a98:	f7fd fc74 	bl	11384 <settings_subsys_init>
	if (err) {
   13a9c:	4604      	mov	r4, r0
   13a9e:	b178      	cbz	r0, 13ac0 <bt_settings_init+0x2c>
		LOG_ERR("settings_subsys_init failed (err %d)", err);
   13aa0:	466d      	mov	r5, sp
   13aa2:	b088      	sub	sp, #32
   13aa4:	466a      	mov	r2, sp
   13aa6:	4b08      	ldr	r3, [pc, #32]	; (13ac8 <bt_settings_init+0x34>)
   13aa8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   13aac:	2303      	movs	r3, #3
   13aae:	f842 3f10 	str.w	r3, [r2, #16]!
   13ab2:	2300      	movs	r3, #0
   13ab4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13ab8:	4804      	ldr	r0, [pc, #16]	; (13acc <bt_settings_init+0x38>)
   13aba:	f7fc fbbb 	bl	10234 <z_impl_z_log_msg_static_create>
   13abe:	46ad      	mov	sp, r5
		return err;
	}

	return 0;
}
   13ac0:	4620      	mov	r0, r4
   13ac2:	46bd      	mov	sp, r7
   13ac4:	bdb0      	pop	{r4, r5, r7, pc}
   13ac6:	bf00      	nop
   13ac8:	0003b7fd 	.word	0x0003b7fd
   13acc:	00037928 	.word	0x00037928

00013ad0 <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(void)
{
   13ad0:	b530      	push	{r4, r5, lr}

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   13ad2:	2400      	movs	r4, #0

	k_work_queue_init(&bt_long_wq);
   13ad4:	4d09      	ldr	r5, [pc, #36]	; (13afc <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   13ad6:	4b0a      	ldr	r3, [pc, #40]	; (13b00 <long_wq_init+0x30>)
{
   13ad8:	b085      	sub	sp, #20
	k_work_queue_init(&bt_long_wq);
   13ada:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   13adc:	9302      	str	r3, [sp, #8]
   13ade:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
   13ae0:	f016 f956 	bl	29d90 <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   13ae4:	ab02      	add	r3, sp, #8
   13ae6:	4628      	mov	r0, r5
   13ae8:	9300      	str	r3, [sp, #0]
   13aea:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   13aee:	230a      	movs	r3, #10
   13af0:	4904      	ldr	r1, [pc, #16]	; (13b04 <long_wq_init+0x34>)
   13af2:	f016 f967 	bl	29dc4 <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   13af6:	4620      	mov	r0, r4
   13af8:	b005      	add	sp, #20
   13afa:	bd30      	pop	{r4, r5, pc}
   13afc:	2000d710 	.word	0x2000d710
   13b00:	0003b831 	.word	0x0003b831
   13b04:	20010f88 	.word	0x20010f88

00013b08 <bt_long_wq_schedule>:
{
   13b08:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   13b0a:	4801      	ldr	r0, [pc, #4]	; (13b10 <bt_long_wq_schedule+0x8>)
   13b0c:	f016 b9ee 	b.w	29eec <k_work_schedule_for_queue>
   13b10:	2000d710 	.word	0x2000d710

00013b14 <uuid_to_uuid128>:
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
	switch (src->type) {
   13b14:	7803      	ldrb	r3, [r0, #0]
{
   13b16:	b530      	push	{r4, r5, lr}
	switch (src->type) {
   13b18:	2b01      	cmp	r3, #1
   13b1a:	d013      	beq.n	13b44 <uuid_to_uuid128+0x30>
   13b1c:	2b02      	cmp	r3, #2
   13b1e:	d027      	beq.n	13b70 <uuid_to_uuid128+0x5c>
   13b20:	b97b      	cbnz	r3, 13b42 <uuid_to_uuid128+0x2e>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   13b22:	460a      	mov	r2, r1
   13b24:	4b18      	ldr	r3, [pc, #96]	; (13b88 <uuid_to_uuid128+0x74>)
   13b26:	f103 0410 	add.w	r4, r3, #16
   13b2a:	f853 5b04 	ldr.w	r5, [r3], #4
   13b2e:	42a3      	cmp	r3, r4
   13b30:	f842 5b04 	str.w	r5, [r2], #4
   13b34:	d1f9      	bne.n	13b2a <uuid_to_uuid128+0x16>
   13b36:	781b      	ldrb	r3, [r3, #0]
   13b38:	7013      	strb	r3, [r2, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   13b3a:	8843      	ldrh	r3, [r0, #2]
	dst[0] = val;
   13b3c:	734b      	strb	r3, [r1, #13]
	dst[1] = val >> 8;
   13b3e:	0a1b      	lsrs	r3, r3, #8
   13b40:	738b      	strb	r3, [r1, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   13b42:	bd30      	pop	{r4, r5, pc}
		*dst = uuid128_base;
   13b44:	460a      	mov	r2, r1
   13b46:	4b10      	ldr	r3, [pc, #64]	; (13b88 <uuid_to_uuid128+0x74>)
   13b48:	f103 0410 	add.w	r4, r3, #16
   13b4c:	f853 5b04 	ldr.w	r5, [r3], #4
   13b50:	42a3      	cmp	r3, r4
   13b52:	f842 5b04 	str.w	r5, [r2], #4
   13b56:	d1f9      	bne.n	13b4c <uuid_to_uuid128+0x38>
   13b58:	781b      	ldrb	r3, [r3, #0]
   13b5a:	7013      	strb	r3, [r2, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   13b5c:	6843      	ldr	r3, [r0, #4]
   13b5e:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   13b62:	734b      	strb	r3, [r1, #13]
	sys_put_le16(val >> 16, &dst[2]);
   13b64:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   13b66:	73cb      	strb	r3, [r1, #15]
	dst[1] = val >> 8;
   13b68:	0a1b      	lsrs	r3, r3, #8
   13b6a:	738a      	strb	r2, [r1, #14]
   13b6c:	740b      	strb	r3, [r1, #16]
}
   13b6e:	e7e8      	b.n	13b42 <uuid_to_uuid128+0x2e>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   13b70:	f100 0310 	add.w	r3, r0, #16
   13b74:	f850 2b04 	ldr.w	r2, [r0], #4
   13b78:	4298      	cmp	r0, r3
   13b7a:	f841 2b04 	str.w	r2, [r1], #4
   13b7e:	d1f9      	bne.n	13b74 <uuid_to_uuid128+0x60>
   13b80:	7803      	ldrb	r3, [r0, #0]
   13b82:	700b      	strb	r3, [r1, #0]
   13b84:	e7dd      	b.n	13b42 <uuid_to_uuid128+0x2e>
   13b86:	bf00      	nop
   13b88:	0003b83a 	.word	0x0003b83a

00013b8c <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   13b8c:	b538      	push	{r3, r4, r5, lr}
   13b8e:	4605      	mov	r5, r0
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   13b90:	2d01      	cmp	r5, #1
{
   13b92:	4610      	mov	r0, r2
   13b94:	4619      	mov	r1, r3
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   13b96:	d010      	beq.n	13bba <bt_buf_get_rx+0x2e>
   13b98:	2d03      	cmp	r5, #3
   13b9a:	d01a      	beq.n	13bd2 <bt_buf_get_rx+0x46>
   13b9c:	2d05      	cmp	r5, #5
   13b9e:	d018      	beq.n	13bd2 <bt_buf_get_rx+0x46>
   13ba0:	490e      	ldr	r1, [pc, #56]	; (13bdc <bt_buf_get_rx+0x50>)
   13ba2:	233d      	movs	r3, #61	; 0x3d
   13ba4:	4a0e      	ldr	r2, [pc, #56]	; (13be0 <bt_buf_get_rx+0x54>)
   13ba6:	480f      	ldr	r0, [pc, #60]	; (13be4 <bt_buf_get_rx+0x58>)
   13ba8:	f01b fc0c 	bl	2f3c4 <assert_print>
   13bac:	480e      	ldr	r0, [pc, #56]	; (13be8 <bt_buf_get_rx+0x5c>)
   13bae:	f01b fc09 	bl	2f3c4 <assert_print>
   13bb2:	213d      	movs	r1, #61	; 0x3d
   13bb4:	480a      	ldr	r0, [pc, #40]	; (13be0 <bt_buf_get_rx+0x54>)
   13bb6:	f01b fbfe 	bl	2f3b6 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   13bba:	480c      	ldr	r0, [pc, #48]	; (13bec <bt_buf_get_rx+0x60>)
   13bbc:	f01f fab1 	bl	33122 <net_buf_alloc_fixed>
   13bc0:	4604      	mov	r4, r0
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   13bc2:	b120      	cbz	r0, 13bce <bt_buf_get_rx+0x42>
	net_buf_simple_reserve(&buf->b, reserve);
   13bc4:	2100      	movs	r1, #0
   13bc6:	300c      	adds	r0, #12
   13bc8:	f00a fbe8 	bl	1e39c <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   13bcc:	7625      	strb	r5, [r4, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   13bce:	4620      	mov	r0, r4
   13bd0:	bd38      	pop	{r3, r4, r5, pc}
	return net_buf_alloc_fixed(pool, timeout);
   13bd2:	4602      	mov	r2, r0
   13bd4:	460b      	mov	r3, r1
   13bd6:	4806      	ldr	r0, [pc, #24]	; (13bf0 <bt_buf_get_rx+0x64>)
   13bd8:	e7f0      	b.n	13bbc <bt_buf_get_rx+0x30>
   13bda:	bf00      	nop
   13bdc:	0003b87a 	.word	0x0003b87a
   13be0:	0003b84b 	.word	0x0003b84b
   13be4:	00039995 	.word	0x00039995
   13be8:	0003b8bf 	.word	0x0003b8bf
   13bec:	2000d0b0 	.word	0x2000d0b0
   13bf0:	2000d014 	.word	0x2000d014

00013bf4 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   13bf4:	460b      	mov	r3, r1
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   13bf6:	2100      	movs	r1, #0
   13bf8:	b570      	push	{r4, r5, r6, lr}
   13bfa:	4602      	mov	r2, r0
   13bfc:	480a      	ldr	r0, [pc, #40]	; (13c28 <bt_buf_get_cmd_complete+0x34>)
   13bfe:	e8d0 4fef 	ldaex	r4, [r0]
   13c02:	e8c0 1fe5 	stlex	r5, r1, [r0]
   13c06:	2d00      	cmp	r5, #0
   13c08:	d1f9      	bne.n	13bfe <bt_buf_get_cmd_complete+0xa>
	struct net_buf *buf;

	buf = (struct net_buf *)atomic_ptr_clear((atomic_ptr_t *)&bt_dev.sent_cmd);
	if (buf) {
   13c0a:	b924      	cbnz	r4, 13c16 <bt_buf_get_cmd_complete+0x22>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   13c0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   13c10:	2001      	movs	r0, #1
   13c12:	f7ff bfbb 	b.w	13b8c <bt_buf_get_rx>
   13c16:	2301      	movs	r3, #1
	net_buf_simple_reserve(&buf->b, reserve);
   13c18:	f104 000c 	add.w	r0, r4, #12
   13c1c:	7623      	strb	r3, [r4, #24]
		buf->len = 0U;
   13c1e:	8221      	strh	r1, [r4, #16]
   13c20:	f00a fbbc 	bl	1e39c <net_buf_simple_reserve>
}
   13c24:	4620      	mov	r0, r4
   13c26:	bd70      	pop	{r4, r5, r6, pc}
   13c28:	2000c6c0 	.word	0x2000c6c0

00013c2c <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   13c2c:	b570      	push	{r4, r5, r6, lr}
   13c2e:	4604      	mov	r4, r0
	switch (evt) {
   13c30:	2c0f      	cmp	r4, #15
{
   13c32:	460d      	mov	r5, r1
   13c34:	4610      	mov	r0, r2
   13c36:	4619      	mov	r1, r3
	switch (evt) {
   13c38:	d805      	bhi.n	13c46 <bt_buf_get_evt+0x1a>
   13c3a:	2c0d      	cmp	r4, #13
   13c3c:	d90d      	bls.n	13c5a <bt_buf_get_evt+0x2e>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   13c3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   13c42:	f7ff bfd7 	b.w	13bf4 <bt_buf_get_cmd_complete>
	switch (evt) {
   13c46:	2c13      	cmp	r4, #19
   13c48:	d107      	bne.n	13c5a <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
   13c4a:	480c      	ldr	r0, [pc, #48]	; (13c7c <bt_buf_get_evt+0x50>)
   13c4c:	f01f fa69 	bl	33122 <net_buf_alloc_fixed>
			if (buf) {
   13c50:	4604      	mov	r4, r0
   13c52:	b938      	cbnz	r0, 13c64 <bt_buf_get_evt+0x38>
{
   13c54:	2400      	movs	r4, #0
}
   13c56:	4620      	mov	r0, r4
   13c58:	bd70      	pop	{r4, r5, r6, pc}
   13c5a:	4602      	mov	r2, r0
   13c5c:	460b      	mov	r3, r1
		if (discardable) {
   13c5e:	b145      	cbz	r5, 13c72 <bt_buf_get_evt+0x46>
   13c60:	4807      	ldr	r0, [pc, #28]	; (13c80 <bt_buf_get_evt+0x54>)
   13c62:	e7f3      	b.n	13c4c <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
   13c64:	2100      	movs	r1, #0
   13c66:	300c      	adds	r0, #12
   13c68:	f00a fb98 	bl	1e39c <net_buf_simple_reserve>
   13c6c:	2301      	movs	r3, #1
   13c6e:	7623      	strb	r3, [r4, #24]
}
   13c70:	e7f1      	b.n	13c56 <bt_buf_get_evt+0x2a>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   13c72:	2001      	movs	r0, #1
}
   13c74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   13c78:	f7ff bf88 	b.w	13b8c <bt_buf_get_rx>
   13c7c:	2000d14c 	.word	0x2000d14c
   13c80:	2000d07c 	.word	0x2000d07c

00013c84 <bt_data_parse>:
LOG_MODULE_REGISTER(bt_data);

void bt_data_parse(struct net_buf_simple *ad,
		   bool (*func)(struct bt_data *data, void *user_data),
		   void *user_data)
{
   13c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13c88:	4605      	mov	r5, r0
   13c8a:	460e      	mov	r6, r1
   13c8c:	4690      	mov	r8, r2
   13c8e:	b082      	sub	sp, #8
   13c90:	af00      	add	r7, sp, #0
	while (ad->len > 1) {
   13c92:	88ab      	ldrh	r3, [r5, #4]
   13c94:	2b01      	cmp	r3, #1
   13c96:	d918      	bls.n	13cca <bt_data_parse+0x46>
		struct bt_data data;
		uint8_t len;

		len = net_buf_simple_pull_u8(ad);
   13c98:	4628      	mov	r0, r5
   13c9a:	f01f fa4f 	bl	3313c <net_buf_simple_pull_u8>
		if (len == 0U) {
   13c9e:	4604      	mov	r4, r0
   13ca0:	b198      	cbz	r0, 13cca <bt_data_parse+0x46>
			/* Early termination */
			return;
		}

		if (len > ad->len) {
   13ca2:	88ab      	ldrh	r3, [r5, #4]
   13ca4:	4298      	cmp	r0, r3
   13ca6:	d914      	bls.n	13cd2 <bt_data_parse+0x4e>
			LOG_WRN("malformed advertising data %u / %u",
   13ca8:	466d      	mov	r5, sp
   13caa:	b088      	sub	sp, #32
   13cac:	466a      	mov	r2, sp
   13cae:	61d3      	str	r3, [r2, #28]
   13cb0:	2304      	movs	r3, #4
   13cb2:	4911      	ldr	r1, [pc, #68]	; (13cf8 <bt_data_parse+0x74>)
   13cb4:	e9c2 1005 	strd	r1, r0, [r2, #20]
   13cb8:	f842 3f10 	str.w	r3, [r2, #16]!
   13cbc:	2300      	movs	r3, #0
   13cbe:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   13cc2:	480e      	ldr	r0, [pc, #56]	; (13cfc <bt_data_parse+0x78>)
   13cc4:	f7fc fab6 	bl	10234 <z_impl_z_log_msg_static_create>
   13cc8:	46ad      	mov	sp, r5
			return;
		}

		net_buf_simple_pull(ad, len - 1);
	}
}
   13cca:	3708      	adds	r7, #8
   13ccc:	46bd      	mov	sp, r7
   13cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data.type = net_buf_simple_pull_u8(ad);
   13cd2:	4628      	mov	r0, r5
   13cd4:	f01f fa32 	bl	3313c <net_buf_simple_pull_u8>
		data.data = ad->data;
   13cd8:	682b      	ldr	r3, [r5, #0]
		data.type = net_buf_simple_pull_u8(ad);
   13cda:	7038      	strb	r0, [r7, #0]
		data.data_len = len - 1;
   13cdc:	3c01      	subs	r4, #1
		if (!func(&data, user_data)) {
   13cde:	4641      	mov	r1, r8
   13ce0:	4638      	mov	r0, r7
		data.data_len = len - 1;
   13ce2:	707c      	strb	r4, [r7, #1]
		data.data = ad->data;
   13ce4:	607b      	str	r3, [r7, #4]
		if (!func(&data, user_data)) {
   13ce6:	47b0      	blx	r6
   13ce8:	2800      	cmp	r0, #0
   13cea:	d0ee      	beq.n	13cca <bt_data_parse+0x46>
		net_buf_simple_pull(ad, len - 1);
   13cec:	4621      	mov	r1, r4
   13cee:	4628      	mov	r0, r5
   13cf0:	f00a fb96 	bl	1e420 <net_buf_simple_pull>
   13cf4:	e7cd      	b.n	13c92 <bt_data_parse+0xe>
   13cf6:	bf00      	nop
   13cf8:	0003b8df 	.word	0x0003b8df
   13cfc:	000378c8 	.word	0x000378c8

00013d00 <ver_str>:
{
   13d00:	b570      	push	{r4, r5, r6, lr}
   13d02:	b08e      	sub	sp, #56	; 0x38
	const char * const str[] = {
   13d04:	466c      	mov	r4, sp
{
   13d06:	4606      	mov	r6, r0
	const char * const str[] = {
   13d08:	4d0a      	ldr	r5, [pc, #40]	; (13d34 <ver_str+0x34>)
	if (ver < ARRAY_SIZE(str)) {
   13d0a:	2e0d      	cmp	r6, #13
	const char * const str[] = {
   13d0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   13d0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   13d10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   13d12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   13d14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   13d16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   13d18:	e895 0003 	ldmia.w	r5, {r0, r1}
   13d1c:	e884 0003 	stmia.w	r4, {r0, r1}
		return str[ver];
   13d20:	bf9d      	ittte	ls
   13d22:	ab0e      	addls	r3, sp, #56	; 0x38
   13d24:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
   13d28:	f856 0c38 	ldrls.w	r0, [r6, #-56]
	return "unknown";
   13d2c:	4802      	ldrhi	r0, [pc, #8]	; (13d38 <ver_str+0x38>)
}
   13d2e:	b00e      	add	sp, #56	; 0x38
   13d30:	bd70      	pop	{r4, r5, r6, pc}
   13d32:	bf00      	nop
   13d34:	00037b4c 	.word	0x00037b4c
   13d38:	0003b90a 	.word	0x0003b90a

00013d3c <hci_disconn_complete_prio>:
{
   13d3c:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   13d3e:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   13d40:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   13d44:	781b      	ldrb	r3, [r3, #0]
   13d46:	b963      	cbnz	r3, 13d62 <hci_disconn_complete_prio+0x26>
	conn = bt_conn_lookup_handle(handle);
   13d48:	4620      	mov	r0, r4
   13d4a:	f002 ffbf 	bl	16ccc <bt_conn_lookup_handle>
	if (!conn) {
   13d4e:	4605      	mov	r5, r0
   13d50:	b940      	cbnz	r0, 13d64 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   13d52:	4b08      	ldr	r3, [pc, #32]	; (13d74 <hci_disconn_complete_prio+0x38>)
   13d54:	881a      	ldrh	r2, [r3, #0]
   13d56:	b922      	cbnz	r2, 13d62 <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   13d58:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   13d5c:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   13d60:	8018      	strh	r0, [r3, #0]
}
   13d62:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   13d64:	2101      	movs	r1, #1
   13d66:	f002 ffb9 	bl	16cdc <bt_conn_set_state>
	bt_conn_unref(conn);
   13d6a:	4628      	mov	r0, r5
}
   13d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   13d70:	f002 bf88 	b.w	16c84 <bt_conn_unref>
   13d74:	2000ef6a 	.word	0x2000ef6a

00013d78 <le_conn_param_neg_reply.part.0>:
static void le_conn_param_neg_reply(uint16_t handle, uint8_t reason)
   13d78:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		LOG_ERR("Unable to allocate buffer");
   13d7a:	4b06      	ldr	r3, [pc, #24]	; (13d94 <le_conn_param_neg_reply.part.0+0x1c>)
   13d7c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13d80:	9305      	str	r3, [sp, #20]
   13d82:	2302      	movs	r3, #2
   13d84:	4804      	ldr	r0, [pc, #16]	; (13d98 <le_conn_param_neg_reply.part.0+0x20>)
   13d86:	aa04      	add	r2, sp, #16
   13d88:	9304      	str	r3, [sp, #16]
   13d8a:	f01d f8cb 	bl	30f24 <z_log_msg_static_create.constprop.0>
}
   13d8e:	b007      	add	sp, #28
   13d90:	f85d fb04 	ldr.w	pc, [sp], #4
   13d94:	0003b912 	.word	0x0003b912
   13d98:	000378f0 	.word	0x000378f0

00013d9c <le_conn_update_complete>:
{
   13d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   13d9e:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   13da0:	68c5      	ldr	r5, [r0, #12]
{
   13da2:	af00      	add	r7, sp, #0
	handle = sys_le16_to_cpu(evt->handle);
   13da4:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   13da8:	4630      	mov	r0, r6
   13daa:	f002 ff8f 	bl	16ccc <bt_conn_lookup_handle>
	if (!conn) {
   13dae:	4604      	mov	r4, r0
   13db0:	b988      	cbnz	r0, 13dd6 <le_conn_update_complete+0x3a>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   13db2:	466c      	mov	r4, sp
   13db4:	b088      	sub	sp, #32
   13db6:	466a      	mov	r2, sp
   13db8:	4b1d      	ldr	r3, [pc, #116]	; (13e30 <le_conn_update_complete+0x94>)
   13dba:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13dbe:	e9c2 3605 	strd	r3, r6, [r2, #20]
   13dc2:	2303      	movs	r3, #3
   13dc4:	481b      	ldr	r0, [pc, #108]	; (13e34 <le_conn_update_complete+0x98>)
   13dc6:	f842 3f10 	str.w	r3, [r2, #16]!
   13dca:	f01d f8ab 	bl	30f24 <z_log_msg_static_create.constprop.0>
   13dce:	46a5      	mov	sp, r4
}
   13dd0:	370c      	adds	r7, #12
   13dd2:	46bd      	mov	sp, r7
   13dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   13dd6:	782b      	ldrb	r3, [r5, #0]
   13dd8:	2b1a      	cmp	r3, #26
   13dda:	d117      	bne.n	13e0c <le_conn_update_complete+0x70>
   13ddc:	78c3      	ldrb	r3, [r0, #3]
   13dde:	2b01      	cmp	r3, #1
   13de0:	d122      	bne.n	13e28 <le_conn_update_complete+0x8c>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   13de2:	f44f 6180 	mov.w	r1, #1024	; 0x400
   13de6:	3004      	adds	r0, #4
   13de8:	f01d f885 	bl	30ef6 <atomic_or>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
   13dec:	0543      	lsls	r3, r0, #21
   13dee:	d40d      	bmi.n	13e0c <le_conn_update_complete+0x70>
		param.interval_min = conn->le.interval_min;
   13df0:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
		bt_l2cap_update_conn_param(conn, &param);
   13df4:	4639      	mov	r1, r7
		param.interval_min = conn->le.interval_min;
   13df6:	603b      	str	r3, [r7, #0]
		param.latency = conn->le.pending_latency;
   13df8:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
		bt_l2cap_update_conn_param(conn, &param);
   13dfc:	4620      	mov	r0, r4
		param.latency = conn->le.pending_latency;
   13dfe:	607b      	str	r3, [r7, #4]
		bt_l2cap_update_conn_param(conn, &param);
   13e00:	f003 fede 	bl	17bc0 <bt_l2cap_update_conn_param>
	bt_conn_unref(conn);
   13e04:	4620      	mov	r0, r4
   13e06:	f002 ff3d 	bl	16c84 <bt_conn_unref>
   13e0a:	e7e1      	b.n	13dd0 <le_conn_update_complete+0x34>
		if (!evt->status) {
   13e0c:	782b      	ldrb	r3, [r5, #0]
   13e0e:	b95b      	cbnz	r3, 13e28 <le_conn_update_complete+0x8c>
			conn->le.interval = sys_le16_to_cpu(evt->interval);
   13e10:	f8b5 3003 	ldrh.w	r3, [r5, #3]
   13e14:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
			conn->le.latency = sys_le16_to_cpu(evt->latency);
   13e18:	f8b5 3005 	ldrh.w	r3, [r5, #5]
   13e1c:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
			conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   13e20:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   13e24:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
		notify_le_param_updated(conn);
   13e28:	4620      	mov	r0, r4
   13e2a:	f003 f8d3 	bl	16fd4 <notify_le_param_updated>
   13e2e:	e7e9      	b.n	13e04 <le_conn_update_complete+0x68>
   13e30:	0003b92c 	.word	0x0003b92c
   13e34:	000378f0 	.word	0x000378f0

00013e38 <handle_event.part.0>:
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
   13e38:	460b      	mov	r3, r1
   13e3a:	b5b0      	push	{r4, r5, r7, lr}
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   13e3c:	8a0d      	ldrh	r5, [r1, #16]
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
   13e3e:	af00      	add	r7, sp, #0
   13e40:	4604      	mov	r4, r0
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   13e42:	4629      	mov	r1, r5
   13e44:	68d8      	ldr	r0, [r3, #12]
   13e46:	f7ff fcb3 	bl	137b0 <bt_hex>
   13e4a:	b08a      	sub	sp, #40	; 0x28
   13e4c:	466a      	mov	r2, sp
   13e4e:	4b09      	ldr	r3, [pc, #36]	; (13e74 <handle_event.part.0+0x3c>)
   13e50:	e9c2 5007 	strd	r5, r0, [r2, #28]
   13e54:	e9c2 3405 	strd	r3, r4, [r2, #20]
   13e58:	f240 4302 	movw	r3, #1026	; 0x402
   13e5c:	8493      	strh	r3, [r2, #36]	; 0x24
   13e5e:	4b06      	ldr	r3, [pc, #24]	; (13e78 <handle_event.part.0+0x40>)
   13e60:	f44f 5132 	mov.w	r1, #11392	; 0x2c80
   13e64:	4805      	ldr	r0, [pc, #20]	; (13e7c <handle_event.part.0+0x44>)
   13e66:	f842 3f10 	str.w	r3, [r2, #16]!
   13e6a:	f01d f85b 	bl	30f24 <z_log_msg_static_create.constprop.0>
}
   13e6e:	46bd      	mov	sp, r7
   13e70:	bdb0      	pop	{r4, r5, r7, pc}
   13e72:	bf00      	nop
   13e74:	0003b950 	.word	0x0003b950
   13e78:	01000005 	.word	0x01000005
   13e7c:	000378f0 	.word	0x000378f0

00013e80 <handle_event>:
{
   13e80:	b5b0      	push	{r4, r5, r7, lr}
   13e82:	4604      	mov	r4, r0
   13e84:	af00      	add	r7, sp, #0
   13e86:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	for (i = 0; i < num_handlers; i++) {
   13e8a:	4293      	cmp	r3, r2
   13e8c:	d103      	bne.n	13e96 <handle_event+0x16>
	if (err == -EOPNOTSUPP) {
   13e8e:	4620      	mov	r0, r4
   13e90:	f7ff ffd2 	bl	13e38 <handle_event.part.0>
}
   13e94:	e018      	b.n	13ec8 <handle_event+0x48>
		if (handler->event != event) {
   13e96:	4610      	mov	r0, r2
   13e98:	f810 5b08 	ldrb.w	r5, [r0], #8
   13e9c:	42a5      	cmp	r5, r4
   13e9e:	d119      	bne.n	13ed4 <handle_event+0x54>
		if (buf->len < handler->min_len) {
   13ea0:	8a0b      	ldrh	r3, [r1, #16]
   13ea2:	7850      	ldrb	r0, [r2, #1]
   13ea4:	4298      	cmp	r0, r3
   13ea6:	d911      	bls.n	13ecc <handle_event+0x4c>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
   13ea8:	466d      	mov	r5, sp
   13eaa:	b088      	sub	sp, #32
   13eac:	466a      	mov	r2, sp
   13eae:	490a      	ldr	r1, [pc, #40]	; (13ed8 <handle_event+0x58>)
   13eb0:	61d4      	str	r4, [r2, #28]
   13eb2:	e9c2 1305 	strd	r1, r3, [r2, #20]
   13eb6:	2304      	movs	r3, #4
   13eb8:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   13ebc:	4807      	ldr	r0, [pc, #28]	; (13edc <handle_event+0x5c>)
   13ebe:	f842 3f10 	str.w	r3, [r2, #16]!
   13ec2:	f01d f82f 	bl	30f24 <z_log_msg_static_create.constprop.0>
   13ec6:	46ad      	mov	sp, r5
}
   13ec8:	46bd      	mov	sp, r7
   13eca:	bdb0      	pop	{r4, r5, r7, pc}
		handler->handler(buf);
   13ecc:	4608      	mov	r0, r1
   13ece:	6853      	ldr	r3, [r2, #4]
   13ed0:	4798      	blx	r3
	if (err == -EOPNOTSUPP) {
   13ed2:	e7f9      	b.n	13ec8 <handle_event+0x48>
   13ed4:	4602      	mov	r2, r0
   13ed6:	e7d8      	b.n	13e8a <handle_event+0xa>
   13ed8:	0003b972 	.word	0x0003b972
   13edc:	000378f0 	.word	0x000378f0

00013ee0 <hci_le_meta_event>:
{
   13ee0:	b510      	push	{r4, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   13ee2:	2101      	movs	r1, #1
   13ee4:	4604      	mov	r4, r0
   13ee6:	300c      	adds	r0, #12
   13ee8:	f00a fab8 	bl	1e45c <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   13eec:	4621      	mov	r1, r4
}
   13eee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   13ef2:	230b      	movs	r3, #11
   13ef4:	4a01      	ldr	r2, [pc, #4]	; (13efc <hci_le_meta_event+0x1c>)
   13ef6:	7800      	ldrb	r0, [r0, #0]
   13ef8:	f7ff bfc2 	b.w	13e80 <handle_event>
   13efc:	00038058 	.word	0x00038058

00013f00 <hci_hardware_error>:
{
   13f00:	b580      	push	{r7, lr}
   13f02:	2101      	movs	r1, #1
   13f04:	af00      	add	r7, sp, #0
   13f06:	300c      	adds	r0, #12
   13f08:	f00a faa8 	bl	1e45c <net_buf_simple_pull_mem>
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   13f0c:	b088      	sub	sp, #32
   13f0e:	466a      	mov	r2, sp
   13f10:	7803      	ldrb	r3, [r0, #0]
   13f12:	4906      	ldr	r1, [pc, #24]	; (13f2c <hci_hardware_error+0x2c>)
   13f14:	4806      	ldr	r0, [pc, #24]	; (13f30 <hci_hardware_error+0x30>)
   13f16:	e9c2 1305 	strd	r1, r3, [r2, #20]
   13f1a:	2303      	movs	r3, #3
   13f1c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13f20:	f842 3f10 	str.w	r3, [r2, #16]!
   13f24:	f01c fffe 	bl	30f24 <z_log_msg_static_create.constprop.0>
}
   13f28:	46bd      	mov	sp, r7
   13f2a:	bd80      	pop	{r7, pc}
   13f2c:	0003b994 	.word	0x0003b994
   13f30:	000378f0 	.word	0x000378f0

00013f34 <le_data_len_change>:
{
   13f34:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   13f36:	68c3      	ldr	r3, [r0, #12]
{
   13f38:	af00      	add	r7, sp, #0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   13f3a:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   13f3c:	4620      	mov	r0, r4
   13f3e:	f002 fec5 	bl	16ccc <bt_conn_lookup_handle>
	if (!conn) {
   13f42:	b980      	cbnz	r0, 13f66 <le_data_len_change+0x32>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   13f44:	466d      	mov	r5, sp
   13f46:	b088      	sub	sp, #32
   13f48:	466a      	mov	r2, sp
   13f4a:	4b08      	ldr	r3, [pc, #32]	; (13f6c <le_data_len_change+0x38>)
   13f4c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13f50:	e9c2 3405 	strd	r3, r4, [r2, #20]
   13f54:	2303      	movs	r3, #3
   13f56:	4806      	ldr	r0, [pc, #24]	; (13f70 <le_data_len_change+0x3c>)
   13f58:	f842 3f10 	str.w	r3, [r2, #16]!
   13f5c:	f01c ffe2 	bl	30f24 <z_log_msg_static_create.constprop.0>
   13f60:	46ad      	mov	sp, r5
}
   13f62:	46bd      	mov	sp, r7
   13f64:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
   13f66:	f002 fe8d 	bl	16c84 <bt_conn_unref>
   13f6a:	e7fa      	b.n	13f62 <le_data_len_change+0x2e>
   13f6c:	0003b92c 	.word	0x0003b92c
   13f70:	000378f0 	.word	0x000378f0

00013f74 <le_phy_update_complete>:
{
   13f74:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   13f76:	68c3      	ldr	r3, [r0, #12]
{
   13f78:	af00      	add	r7, sp, #0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   13f7a:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   13f7e:	4620      	mov	r0, r4
   13f80:	f002 fea4 	bl	16ccc <bt_conn_lookup_handle>
	if (!conn) {
   13f84:	b980      	cbnz	r0, 13fa8 <le_phy_update_complete+0x34>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   13f86:	466d      	mov	r5, sp
   13f88:	b088      	sub	sp, #32
   13f8a:	466a      	mov	r2, sp
   13f8c:	4b08      	ldr	r3, [pc, #32]	; (13fb0 <le_phy_update_complete+0x3c>)
   13f8e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13f92:	e9c2 3405 	strd	r3, r4, [r2, #20]
   13f96:	2303      	movs	r3, #3
   13f98:	4806      	ldr	r0, [pc, #24]	; (13fb4 <le_phy_update_complete+0x40>)
   13f9a:	f842 3f10 	str.w	r3, [r2, #16]!
   13f9e:	f01c ffc1 	bl	30f24 <z_log_msg_static_create.constprop.0>
   13fa2:	46ad      	mov	sp, r5
}
   13fa4:	46bd      	mov	sp, r7
   13fa6:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
   13fa8:	f002 fe6c 	bl	16c84 <bt_conn_unref>
   13fac:	e7fa      	b.n	13fa4 <le_phy_update_complete+0x30>
   13fae:	bf00      	nop
   13fb0:	0003b92c 	.word	0x0003b92c
   13fb4:	000378f0 	.word	0x000378f0

00013fb8 <hci_data_buf_overflow>:
{
   13fb8:	b580      	push	{r7, lr}
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   13fba:	68c3      	ldr	r3, [r0, #12]
{
   13fbc:	af00      	add	r7, sp, #0
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   13fbe:	b088      	sub	sp, #32
   13fc0:	466a      	mov	r2, sp
   13fc2:	781b      	ldrb	r3, [r3, #0]
   13fc4:	4906      	ldr	r1, [pc, #24]	; (13fe0 <hci_data_buf_overflow+0x28>)
   13fc6:	4807      	ldr	r0, [pc, #28]	; (13fe4 <hci_data_buf_overflow+0x2c>)
   13fc8:	e9c2 1305 	strd	r1, r3, [r2, #20]
   13fcc:	2303      	movs	r3, #3
   13fce:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   13fd2:	f842 3f10 	str.w	r3, [r2, #16]!
   13fd6:	f01c ffa5 	bl	30f24 <z_log_msg_static_create.constprop.0>
}
   13fda:	46bd      	mov	sp, r7
   13fdc:	bd80      	pop	{r7, pc}
   13fde:	bf00      	nop
   13fe0:	0003b9b6 	.word	0x0003b9b6
   13fe4:	000378f0 	.word	0x000378f0

00013fe8 <le_remote_feat_complete>:
{
   13fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   13fea:	68c5      	ldr	r5, [r0, #12]
{
   13fec:	af00      	add	r7, sp, #0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   13fee:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   13ff2:	4630      	mov	r0, r6
   13ff4:	f002 fe6a 	bl	16ccc <bt_conn_lookup_handle>
	if (!conn) {
   13ff8:	4604      	mov	r4, r0
   13ffa:	b980      	cbnz	r0, 1401e <le_remote_feat_complete+0x36>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   13ffc:	466c      	mov	r4, sp
   13ffe:	b088      	sub	sp, #32
   14000:	466a      	mov	r2, sp
   14002:	4b10      	ldr	r3, [pc, #64]	; (14044 <le_remote_feat_complete+0x5c>)
   14004:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14008:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1400c:	2303      	movs	r3, #3
   1400e:	480e      	ldr	r0, [pc, #56]	; (14048 <le_remote_feat_complete+0x60>)
   14010:	f842 3f10 	str.w	r3, [r2, #16]!
   14014:	f01c ff86 	bl	30f24 <z_log_msg_static_create.constprop.0>
   14018:	46a5      	mov	sp, r4
}
   1401a:	46bd      	mov	sp, r7
   1401c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!evt->status) {
   1401e:	782b      	ldrb	r3, [r5, #0]
   14020:	b93b      	cbnz	r3, 14032 <le_remote_feat_complete+0x4a>
   14022:	f8d5 3003 	ldr.w	r3, [r5, #3]
   14026:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
   1402a:	f8d5 3007 	ldr.w	r3, [r5, #7]
   1402e:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   14032:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   14036:	1d20      	adds	r0, r4, #4
   14038:	f01c ff5d 	bl	30ef6 <atomic_or>
	bt_conn_unref(conn);
   1403c:	4620      	mov	r0, r4
   1403e:	f002 fe21 	bl	16c84 <bt_conn_unref>
   14042:	e7ea      	b.n	1401a <le_remote_feat_complete+0x32>
   14044:	0003b92c 	.word	0x0003b92c
   14048:	000378f0 	.word	0x000378f0

0001404c <hci_cmd_done>:
{
   1404c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14050:	4606      	mov	r6, r0
   14052:	af00      	add	r7, sp, #0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   14054:	7a90      	ldrb	r0, [r2, #10]
{
   14056:	4688      	mov	r8, r1
   14058:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   1405a:	f009 ff49 	bl	1def0 <net_buf_pool_get>
   1405e:	4d41      	ldr	r5, [pc, #260]	; (14164 <hci_cmd_done+0x118>)
   14060:	4285      	cmp	r5, r0
   14062:	d018      	beq.n	14096 <hci_cmd_done+0x4a>
		LOG_WRN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p", opcode,
   14064:	7aa4      	ldrb	r4, [r4, #10]
   14066:	46e8      	mov	r8, sp
   14068:	4620      	mov	r0, r4
   1406a:	f009 ff41 	bl	1def0 <net_buf_pool_get>
   1406e:	b08a      	sub	sp, #40	; 0x28
   14070:	466a      	mov	r2, sp
   14072:	4b3d      	ldr	r3, [pc, #244]	; (14168 <hci_cmd_done+0x11c>)
   14074:	e9c2 4007 	strd	r4, r0, [r2, #28]
   14078:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1407c:	2306      	movs	r3, #6
   1407e:	6255      	str	r5, [r2, #36]	; 0x24
   14080:	f44f 5142 	mov.w	r1, #12416	; 0x3080
   14084:	4839      	ldr	r0, [pc, #228]	; (1416c <hci_cmd_done+0x120>)
   14086:	f842 3f10 	str.w	r3, [r2, #16]!
   1408a:	f01c ff4b 	bl	30f24 <z_log_msg_static_create.constprop.0>
   1408e:	46c5      	mov	sp, r8
}
   14090:	46bd      	mov	sp, r7
   14092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
   14096:	4620      	mov	r0, r4
   14098:	f009 ff32 	bl	1df00 <net_buf_id>
   1409c:	f04f 090c 	mov.w	r9, #12
   140a0:	4d33      	ldr	r5, [pc, #204]	; (14170 <hci_cmd_done+0x124>)
   140a2:	fb09 5000 	mla	r0, r9, r0, r5
   140a6:	8843      	ldrh	r3, [r0, #2]
   140a8:	42b3      	cmp	r3, r6
   140aa:	d016      	beq.n	140da <hci_cmd_done+0x8e>
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
   140ac:	4620      	mov	r0, r4
   140ae:	f009 ff27 	bl	1df00 <net_buf_id>
   140b2:	fb09 5000 	mla	r0, r9, r0, r5
   140b6:	466c      	mov	r4, sp
   140b8:	b088      	sub	sp, #32
   140ba:	466a      	mov	r2, sp
   140bc:	8843      	ldrh	r3, [r0, #2]
   140be:	61d3      	str	r3, [r2, #28]
   140c0:	2304      	movs	r3, #4
   140c2:	492c      	ldr	r1, [pc, #176]	; (14174 <hci_cmd_done+0x128>)
   140c4:	4829      	ldr	r0, [pc, #164]	; (1416c <hci_cmd_done+0x120>)
   140c6:	e9c2 1605 	strd	r1, r6, [r2, #20]
   140ca:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   140ce:	f842 3f10 	str.w	r3, [r2, #16]!
   140d2:	f01c ff27 	bl	30f24 <z_log_msg_static_create.constprop.0>
   140d6:	46a5      	mov	sp, r4
		return;
   140d8:	e7da      	b.n	14090 <hci_cmd_done+0x44>
	if (bt_dev.sent_cmd) {
   140da:	4e27      	ldr	r6, [pc, #156]	; (14178 <hci_cmd_done+0x12c>)
   140dc:	f8d6 0140 	ldr.w	r0, [r6, #320]	; 0x140
   140e0:	b120      	cbz	r0, 140ec <hci_cmd_done+0xa0>
		net_buf_unref(bt_dev.sent_cmd);
   140e2:	f00a f853 	bl	1e18c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   140e6:	2300      	movs	r3, #0
   140e8:	f8c6 3140 	str.w	r3, [r6, #320]	; 0x140
	if (cmd(buf)->state && !status) {
   140ec:	4620      	mov	r0, r4
   140ee:	f009 ff07 	bl	1df00 <net_buf_id>
   140f2:	260c      	movs	r6, #12
   140f4:	fb06 5000 	mla	r0, r6, r0, r5
   140f8:	6843      	ldr	r3, [r0, #4]
   140fa:	b1ab      	cbz	r3, 14128 <hci_cmd_done+0xdc>
   140fc:	f1b8 0f00 	cmp.w	r8, #0
   14100:	d112      	bne.n	14128 <hci_cmd_done+0xdc>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   14102:	4620      	mov	r0, r4
   14104:	f009 fefc 	bl	1df00 <net_buf_id>
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   14108:	2101      	movs	r1, #1
   1410a:	fb06 5000 	mla	r0, r6, r0, r5
   1410e:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   14110:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
   14114:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   14116:	f003 061f 	and.w	r6, r3, #31
   1411a:	40b1      	lsls	r1, r6
	if (val) {
   1411c:	095b      	lsrs	r3, r3, #5
   1411e:	b1da      	cbz	r2, 14158 <hci_cmd_done+0x10c>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   14120:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   14124:	f01c fee7 	bl	30ef6 <atomic_or>
	if (cmd(buf)->sync) {
   14128:	4620      	mov	r0, r4
   1412a:	f009 fee9 	bl	1df00 <net_buf_id>
   1412e:	260c      	movs	r6, #12
   14130:	fb06 5000 	mla	r0, r6, r0, r5
   14134:	6883      	ldr	r3, [r0, #8]
   14136:	2b00      	cmp	r3, #0
   14138:	d0aa      	beq.n	14090 <hci_cmd_done+0x44>
		cmd(buf)->status = status;
   1413a:	4620      	mov	r0, r4
   1413c:	f009 fee0 	bl	1df00 <net_buf_id>
   14140:	4370      	muls	r0, r6
   14142:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   14146:	4620      	mov	r0, r4
   14148:	f009 feda 	bl	1df00 <net_buf_id>
   1414c:	fb06 5500 	mla	r5, r6, r0, r5
   14150:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
   14152:	f015 faa9 	bl	296a8 <z_impl_k_sem_give>
}
   14156:	e79b      	b.n	14090 <hci_cmd_done+0x44>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14158:	43c9      	mvns	r1, r1
   1415a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1415e:	f01c fee4 	bl	30f2a <atomic_and.isra.0>
   14162:	e7e1      	b.n	14128 <hci_cmd_done+0xdc>
   14164:	2000d118 	.word	0x2000d118
   14168:	0003b9de 	.word	0x0003b9de
   1416c:	000378f0 	.word	0x000378f0
   14170:	2000e5b8 	.word	0x2000e5b8
   14174:	0003ba13 	.word	0x0003ba13
   14178:	2000c580 	.word	0x2000c580

0001417c <hci_cmd_status>:
{
   1417c:	b538      	push	{r3, r4, r5, lr}
   1417e:	2104      	movs	r1, #4
   14180:	4604      	mov	r4, r0
   14182:	300c      	adds	r0, #12
   14184:	f00a f96a 	bl	1e45c <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   14188:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   1418a:	7801      	ldrb	r1, [r0, #0]
   1418c:	4622      	mov	r2, r4
   1418e:	8840      	ldrh	r0, [r0, #2]
   14190:	f7ff ff5c 	bl	1404c <hci_cmd_done>
	if (ncmd) {
   14194:	b125      	cbz	r5, 141a0 <hci_cmd_status+0x24>
}
   14196:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_sem_give(sem);
   1419a:	4802      	ldr	r0, [pc, #8]	; (141a4 <hci_cmd_status+0x28>)
   1419c:	f015 ba84 	b.w	296a8 <z_impl_k_sem_give>
   141a0:	bd38      	pop	{r3, r4, r5, pc}
   141a2:	bf00      	nop
   141a4:	2000c6a8 	.word	0x2000c6a8

000141a8 <hci_cmd_complete>:
{
   141a8:	b538      	push	{r3, r4, r5, lr}
   141aa:	2103      	movs	r1, #3
   141ac:	4604      	mov	r4, r0
   141ae:	300c      	adds	r0, #12
   141b0:	f00a f954 	bl	1e45c <net_buf_simple_pull_mem>
	status = buf->data[0];
   141b4:	68e3      	ldr	r3, [r4, #12]
	ncmd = evt->ncmd;
   141b6:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   141b8:	4622      	mov	r2, r4
   141ba:	7819      	ldrb	r1, [r3, #0]
   141bc:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   141c0:	f7ff ff44 	bl	1404c <hci_cmd_done>
	if (ncmd) {
   141c4:	b125      	cbz	r5, 141d0 <hci_cmd_complete+0x28>
}
   141c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   141ca:	4802      	ldr	r0, [pc, #8]	; (141d4 <hci_cmd_complete+0x2c>)
   141cc:	f015 ba6c 	b.w	296a8 <z_impl_k_sem_give>
   141d0:	bd38      	pop	{r3, r4, r5, pc}
   141d2:	bf00      	nop
   141d4:	2000c6a8 	.word	0x2000c6a8

000141d8 <hci_num_completed_packets>:
{
   141d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141dc:	b087      	sub	sp, #28
	if (sizeof(*evt) + sizeof(evt->h[0]) * evt->num_handles > buf->len) {
   141de:	2301      	movs	r3, #1
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   141e0:	f8d0 800c 	ldr.w	r8, [r0, #12]
	if (sizeof(*evt) + sizeof(evt->h[0]) * evt->num_handles > buf->len) {
   141e4:	8a01      	ldrh	r1, [r0, #16]
   141e6:	f898 4000 	ldrb.w	r4, [r8]
{
   141ea:	af00      	add	r7, sp, #0
	if (sizeof(*evt) + sizeof(evt->h[0]) * evt->num_handles > buf->len) {
   141ec:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   141f0:	428b      	cmp	r3, r1
   141f2:	f240 808c 	bls.w	1430e <hci_num_completed_packets+0x136>
		LOG_ERR("evt num_handles (=%u) too large (%u > %u)",
   141f6:	466d      	mov	r5, sp
   141f8:	b08a      	sub	sp, #40	; 0x28
   141fa:	466a      	mov	r2, sp
   141fc:	e9c2 3107 	strd	r3, r1, [r2, #28]
   14200:	2305      	movs	r3, #5
   14202:	4845      	ldr	r0, [pc, #276]	; (14318 <hci_num_completed_packets+0x140>)
   14204:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   14208:	e9c2 0405 	strd	r0, r4, [r2, #20]
   1420c:	4843      	ldr	r0, [pc, #268]	; (1431c <hci_num_completed_packets+0x144>)
   1420e:	f842 3f10 	str.w	r3, [r2, #16]!
   14212:	f01c fe87 	bl	30f24 <z_log_msg_static_create.constprop.0>
   14216:	46ad      	mov	sp, r5
}
   14218:	371c      	adds	r7, #28
   1421a:	46bd      	mov	sp, r7
   1421c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LOG_ERR("No connection for handle %u", handle);
   14220:	466c      	mov	r4, sp
   14222:	b088      	sub	sp, #32
   14224:	466a      	mov	r2, sp
   14226:	4b3e      	ldr	r3, [pc, #248]	; (14320 <hci_num_completed_packets+0x148>)
   14228:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1422c:	e9c2 3b05 	strd	r3, fp, [r2, #20]
   14230:	2303      	movs	r3, #3
   14232:	483a      	ldr	r0, [pc, #232]	; (1431c <hci_num_completed_packets+0x144>)
   14234:	f842 3f10 	str.w	r3, [r2, #16]!
   14238:	f01c fe74 	bl	30f24 <z_log_msg_static_create.constprop.0>
   1423c:	46a5      	mov	sp, r4
	for (i = 0; i < evt->num_handles; i++) {
   1423e:	3501      	adds	r5, #1
   14240:	f898 3000 	ldrb.w	r3, [r8]
   14244:	429d      	cmp	r5, r3
   14246:	dae7      	bge.n	14218 <hci_num_completed_packets+0x40>
		handle = sys_le16_to_cpu(evt->h[i].handle);
   14248:	eb08 0385 	add.w	r3, r8, r5, lsl #2
   1424c:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   14250:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   14254:	4658      	mov	r0, fp
   14256:	f002 fd39 	bl	16ccc <bt_conn_lookup_handle>
		if (!conn) {
   1425a:	4604      	mov	r4, r0
   1425c:	2800      	cmp	r0, #0
   1425e:	d0df      	beq.n	14220 <hci_num_completed_packets+0x48>
			k_work_submit(&conn->tx_complete_work);
   14260:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
   14264:	b346      	cbz	r6, 142b8 <hci_num_completed_packets+0xe0>
	__asm__ volatile(
   14266:	f04f 0320 	mov.w	r3, #32
   1426a:	f3ef 8211 	mrs	r2, BASEPRI
   1426e:	f383 8812 	msr	BASEPRI_MAX, r3
   14272:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   14276:	69e3      	ldr	r3, [r4, #28]
   14278:	b16b      	cbz	r3, 14296 <hci_num_completed_packets+0xbe>
				conn->pending_no_cb--;
   1427a:	3b01      	subs	r3, #1
   1427c:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   1427e:	f382 8811 	msr	BASEPRI, r2
   14282:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   14286:	4620      	mov	r0, r4
   14288:	f002 fafa 	bl	16880 <bt_conn_get_pkts>
   1428c:	3e01      	subs	r6, #1
   1428e:	f015 fa0b 	bl	296a8 <z_impl_k_sem_give>
   14292:	b2b6      	uxth	r6, r6
   14294:	e7e6      	b.n	14264 <hci_num_completed_packets+0x8c>
	return list->head;
   14296:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   14298:	b993      	cbnz	r3, 142c0 <hci_num_completed_packets+0xe8>
   1429a:	f382 8811 	msr	BASEPRI, r2
   1429e:	f3bf 8f6f 	isb	sy
				LOG_ERR("packets count mismatch");
   142a2:	2302      	movs	r3, #2
   142a4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   142a8:	481c      	ldr	r0, [pc, #112]	; (1431c <hci_num_completed_packets+0x144>)
   142aa:	f107 0210 	add.w	r2, r7, #16
   142ae:	f8c7 a014 	str.w	sl, [r7, #20]
   142b2:	613b      	str	r3, [r7, #16]
   142b4:	f01c fe36 	bl	30f24 <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   142b8:	4620      	mov	r0, r4
   142ba:	f002 fce3 	bl	16c84 <bt_conn_unref>
   142be:	e7be      	b.n	1423e <hci_num_completed_packets+0x66>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   142c0:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   142c2:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   142c4:	428b      	cmp	r3, r1
	list->head = node;
   142c6:	6160      	str	r0, [r4, #20]
	list->tail = node;
   142c8:	bf08      	it	eq
   142ca:	61a0      	streq	r0, [r4, #24]
   142cc:	f382 8811 	msr	BASEPRI, r2
   142d0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   142d4:	f04f 0220 	mov.w	r2, #32
   142d8:	f3ef 8111 	mrs	r1, BASEPRI
   142dc:	f382 8812 	msr	BASEPRI_MAX, r2
   142e0:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   142e4:	68da      	ldr	r2, [r3, #12]
   142e6:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   142e8:	f8c3 900c 	str.w	r9, [r3, #12]
	parent->next = child;
   142ec:	f8c3 9000 	str.w	r9, [r3]
	return list->tail;
   142f0:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
   142f2:	b94a      	cbnz	r2, 14308 <hci_num_completed_packets+0x130>
	list->head = node;
   142f4:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   142f8:	f381 8811 	msr	BASEPRI, r1
   142fc:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   14300:	4658      	mov	r0, fp
   14302:	f015 fd3f 	bl	29d84 <k_work_submit>
   14306:	e7be      	b.n	14286 <hci_num_completed_packets+0xae>
	parent->next = child;
   14308:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1430a:	6263      	str	r3, [r4, #36]	; 0x24
}
   1430c:	e7f4      	b.n	142f8 <hci_num_completed_packets+0x120>
	for (i = 0; i < evt->num_handles; i++) {
   1430e:	2500      	movs	r5, #0
				LOG_ERR("packets count mismatch");
   14310:	f8df a010 	ldr.w	sl, [pc, #16]	; 14324 <hci_num_completed_packets+0x14c>
			tx->pending_no_cb = 0U;
   14314:	46a9      	mov	r9, r5
   14316:	e793      	b.n	14240 <hci_num_completed_packets+0x68>
   14318:	0003ba46 	.word	0x0003ba46
   1431c:	000378f0 	.word	0x000378f0
   14320:	0003ba70 	.word	0x0003ba70
   14324:	0003ba8c 	.word	0x0003ba8c

00014328 <hci_disconn_complete>:
{
   14328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1432c:	68c6      	ldr	r6, [r0, #12]
{
   1432e:	af00      	add	r7, sp, #0
	if (evt->status) {
   14330:	7835      	ldrb	r5, [r6, #0]
   14332:	b9ad      	cbnz	r5, 14360 <hci_disconn_complete+0x38>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   14334:	f8b6 8001 	ldrh.w	r8, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
   14338:	4640      	mov	r0, r8
   1433a:	f002 fcc7 	bl	16ccc <bt_conn_lookup_handle>
	if (!conn) {
   1433e:	4604      	mov	r4, r0
   14340:	b988      	cbnz	r0, 14366 <hci_disconn_complete+0x3e>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   14342:	466c      	mov	r4, sp
   14344:	b088      	sub	sp, #32
   14346:	466a      	mov	r2, sp
   14348:	4b13      	ldr	r3, [pc, #76]	; (14398 <hci_disconn_complete+0x70>)
   1434a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1434e:	e9c2 3805 	strd	r3, r8, [r2, #20]
   14352:	2303      	movs	r3, #3
   14354:	4811      	ldr	r0, [pc, #68]	; (1439c <hci_disconn_complete+0x74>)
   14356:	f842 3f10 	str.w	r3, [r2, #16]!
   1435a:	f01c fde3 	bl	30f24 <z_log_msg_static_create.constprop.0>
   1435e:	46a5      	mov	sp, r4
}
   14360:	46bd      	mov	sp, r7
   14362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->err = evt->reason;
   14366:	78f3      	ldrb	r3, [r6, #3]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   14368:	4629      	mov	r1, r5
	conn->err = evt->reason;
   1436a:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1436c:	f002 fcb6 	bl	16cdc <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
   14370:	78a3      	ldrb	r3, [r4, #2]
   14372:	2b01      	cmp	r3, #1
   14374:	d003      	beq.n	1437e <hci_disconn_complete+0x56>
	bt_conn_unref(conn);
   14376:	4620      	mov	r0, r4
   14378:	f002 fc84 	bl	16c84 <bt_conn_unref>
   1437c:	e7f0      	b.n	14360 <hci_disconn_complete+0x38>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1437e:	1d23      	adds	r3, r4, #4
   14380:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   14384:	07db      	lsls	r3, r3, #31
   14386:	d5f6      	bpl.n	14376 <hci_disconn_complete+0x4e>
		bt_conn_set_state(conn, BT_CONN_CONNECTING_SCAN);
   14388:	4620      	mov	r0, r4
   1438a:	2102      	movs	r1, #2
   1438c:	f002 fca6 	bl	16cdc <bt_conn_set_state>
		bt_le_scan_update(false);
   14390:	4628      	mov	r0, r5
   14392:	f001 fd47 	bl	15e24 <bt_le_scan_update>
   14396:	e7ee      	b.n	14376 <hci_disconn_complete+0x4e>
   14398:	0003baa3 	.word	0x0003baa3
   1439c:	000378f0 	.word	0x000378f0

000143a0 <bt_hci_cmd_state_set_init>:
{
   143a0:	b510      	push	{r4, lr}
	state->bit = bit;
   143a2:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   143a6:	f89d 3008 	ldrb.w	r3, [sp, #8]
{
   143aa:	460c      	mov	r4, r1
	state->val = val;
   143ac:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
   143ae:	f009 fda7 	bl	1df00 <net_buf_id>
   143b2:	220c      	movs	r2, #12
   143b4:	4b02      	ldr	r3, [pc, #8]	; (143c0 <bt_hci_cmd_state_set_init+0x20>)
   143b6:	fb02 3300 	mla	r3, r2, r0, r3
   143ba:	605c      	str	r4, [r3, #4]
}
   143bc:	bd10      	pop	{r4, pc}
   143be:	bf00      	nop
   143c0:	2000e5b8 	.word	0x2000e5b8

000143c4 <bt_hci_cmd_create>:
{
   143c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   143c8:	f04f 32ff 	mov.w	r2, #4294967295
   143cc:	4606      	mov	r6, r0
   143ce:	f04f 33ff 	mov.w	r3, #4294967295
   143d2:	481e      	ldr	r0, [pc, #120]	; (1444c <bt_hci_cmd_create+0x88>)
   143d4:	460f      	mov	r7, r1
   143d6:	f01e fea4 	bl	33122 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
   143da:	4604      	mov	r4, r0
   143dc:	b958      	cbnz	r0, 143f6 <bt_hci_cmd_create+0x32>
   143de:	491c      	ldr	r1, [pc, #112]	; (14450 <bt_hci_cmd_create+0x8c>)
   143e0:	481c      	ldr	r0, [pc, #112]	; (14454 <bt_hci_cmd_create+0x90>)
   143e2:	f44f 7381 	mov.w	r3, #258	; 0x102
   143e6:	4a1c      	ldr	r2, [pc, #112]	; (14458 <bt_hci_cmd_create+0x94>)
   143e8:	f01a ffec 	bl	2f3c4 <assert_print>
   143ec:	f44f 7181 	mov.w	r1, #258	; 0x102
   143f0:	4819      	ldr	r0, [pc, #100]	; (14458 <bt_hci_cmd_create+0x94>)
   143f2:	f01a ffe0 	bl	2f3b6 <assert_post_action>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   143f6:	f04f 0800 	mov.w	r8, #0
	net_buf_simple_reserve(&buf->b, reserve);
   143fa:	f100 0a0c 	add.w	sl, r0, #12
   143fe:	2100      	movs	r1, #0
   14400:	4650      	mov	r0, sl
   14402:	f009 ffcb 	bl	1e39c <net_buf_simple_reserve>
	cmd(buf)->opcode = opcode;
   14406:	4620      	mov	r0, r4
   14408:	f884 8018 	strb.w	r8, [r4, #24]
   1440c:	f009 fd78 	bl	1df00 <net_buf_id>
   14410:	f04f 090c 	mov.w	r9, #12
   14414:	4d11      	ldr	r5, [pc, #68]	; (1445c <bt_hci_cmd_create+0x98>)
   14416:	fb09 5000 	mla	r0, r9, r0, r5
   1441a:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   1441c:	4620      	mov	r0, r4
   1441e:	f009 fd6f 	bl	1df00 <net_buf_id>
   14422:	fb09 5000 	mla	r0, r9, r0, r5
   14426:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   1442a:	4620      	mov	r0, r4
   1442c:	f009 fd68 	bl	1df00 <net_buf_id>
   14430:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   14434:	2103      	movs	r1, #3
   14436:	4650      	mov	r0, sl
   14438:	f8c5 8004 	str.w	r8, [r5, #4]
   1443c:	f00a f82c 	bl	1e498 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   14440:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
   14442:	7087      	strb	r7, [r0, #2]
}
   14444:	4620      	mov	r0, r4
   14446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1444a:	bf00      	nop
   1444c:	2000d118 	.word	0x2000d118
   14450:	0003db82 	.word	0x0003db82
   14454:	00039995 	.word	0x00039995
   14458:	0003bac9 	.word	0x0003bac9
   1445c:	2000e5b8 	.word	0x2000e5b8

00014460 <bt_hci_cmd_send_sync>:
{
   14460:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14464:	b087      	sub	sp, #28
   14466:	4606      	mov	r6, r0
   14468:	4615      	mov	r5, r2
	if (!buf) {
   1446a:	460c      	mov	r4, r1
{
   1446c:	af00      	add	r7, sp, #0
	if (!buf) {
   1446e:	b921      	cbnz	r1, 1447a <bt_hci_cmd_send_sync+0x1a>
		buf = bt_hci_cmd_create(opcode, 0);
   14470:	f7ff ffa8 	bl	143c4 <bt_hci_cmd_create>
		if (!buf) {
   14474:	4604      	mov	r4, r0
   14476:	2800      	cmp	r0, #0
   14478:	d05f      	beq.n	1453a <bt_hci_cmd_send_sync+0xda>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1447a:	2201      	movs	r2, #1
   1447c:	2100      	movs	r1, #0
   1447e:	4638      	mov	r0, r7
   14480:	f021 fe76 	bl	36170 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   14484:	4620      	mov	r0, r4
   14486:	f009 fd3b 	bl	1df00 <net_buf_id>
   1448a:	230c      	movs	r3, #12
   1448c:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 14540 <bt_hci_cmd_send_sync+0xe0>
   14490:	fb03 9000 	mla	r0, r3, r0, r9
   14494:	6087      	str	r7, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   14496:	4620      	mov	r0, r4
   14498:	f009 febc 	bl	1e214 <net_buf_ref>
   1449c:	4601      	mov	r1, r0
   1449e:	4829      	ldr	r0, [pc, #164]	; (14544 <bt_hci_cmd_send_sync+0xe4>)
   144a0:	f009 fe4e 	bl	1e140 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   144a4:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   144a8:	2300      	movs	r3, #0
   144aa:	4638      	mov	r0, r7
   144ac:	f015 f940 	bl	29730 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "command opcode 0x%04x timeout with err %d", opcode, err);
   144b0:	4680      	mov	r8, r0
   144b2:	b188      	cbz	r0, 144d8 <bt_hci_cmd_send_sync+0x78>
   144b4:	f44f 73a5 	mov.w	r3, #330	; 0x14a
   144b8:	4a23      	ldr	r2, [pc, #140]	; (14548 <bt_hci_cmd_send_sync+0xe8>)
   144ba:	4924      	ldr	r1, [pc, #144]	; (1454c <bt_hci_cmd_send_sync+0xec>)
   144bc:	4824      	ldr	r0, [pc, #144]	; (14550 <bt_hci_cmd_send_sync+0xf0>)
   144be:	f01a ff81 	bl	2f3c4 <assert_print>
   144c2:	4642      	mov	r2, r8
   144c4:	4631      	mov	r1, r6
   144c6:	4823      	ldr	r0, [pc, #140]	; (14554 <bt_hci_cmd_send_sync+0xf4>)
   144c8:	f01a ff7c 	bl	2f3c4 <assert_print>
   144cc:	4040      	eors	r0, r0
   144ce:	f380 8811 	msr	BASEPRI, r0
   144d2:	f04f 0003 	mov.w	r0, #3
   144d6:	df02      	svc	2
	status = cmd(buf)->status;
   144d8:	4620      	mov	r0, r4
   144da:	f009 fd11 	bl	1df00 <net_buf_id>
   144de:	230c      	movs	r3, #12
   144e0:	4358      	muls	r0, r3
   144e2:	f819 8000 	ldrb.w	r8, [r9, r0]
	if (status) {
   144e6:	f1b8 0f00 	cmp.w	r8, #0
   144ea:	d01e      	beq.n	1452a <bt_hci_cmd_send_sync+0xca>
		LOG_WRN("opcode 0x%04x status 0x%02x", opcode, status);
   144ec:	466d      	mov	r5, sp
   144ee:	b088      	sub	sp, #32
   144f0:	466a      	mov	r2, sp
   144f2:	4b19      	ldr	r3, [pc, #100]	; (14558 <bt_hci_cmd_send_sync+0xf8>)
   144f4:	f8c2 801c 	str.w	r8, [r2, #28]
   144f8:	e9c2 3605 	strd	r3, r6, [r2, #20]
   144fc:	2304      	movs	r3, #4
   144fe:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   14502:	4816      	ldr	r0, [pc, #88]	; (1455c <bt_hci_cmd_send_sync+0xfc>)
   14504:	f842 3f10 	str.w	r3, [r2, #16]!
   14508:	f01c fd0c 	bl	30f24 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   1450c:	4620      	mov	r0, r4
   1450e:	46ad      	mov	sp, r5
   14510:	f009 fe3c 	bl	1e18c <net_buf_unref>
			return -ECONNREFUSED;
   14514:	f1b8 0f09 	cmp.w	r8, #9
   14518:	bf14      	ite	ne
   1451a:	f06f 0004 	mvnne.w	r0, #4
   1451e:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
   14522:	371c      	adds	r7, #28
   14524:	46bd      	mov	sp, r7
   14526:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (rsp) {
   1452a:	b115      	cbz	r5, 14532 <bt_hci_cmd_send_sync+0xd2>
		*rsp = buf;
   1452c:	602c      	str	r4, [r5, #0]
	return 0;
   1452e:	2000      	movs	r0, #0
   14530:	e7f7      	b.n	14522 <bt_hci_cmd_send_sync+0xc2>
		net_buf_unref(buf);
   14532:	4620      	mov	r0, r4
   14534:	f009 fe2a 	bl	1e18c <net_buf_unref>
   14538:	e7f9      	b.n	1452e <bt_hci_cmd_send_sync+0xce>
			return -ENOBUFS;
   1453a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1453e:	e7f0      	b.n	14522 <bt_hci_cmd_send_sync+0xc2>
   14540:	2000e5b8 	.word	0x2000e5b8
   14544:	2000c6c4 	.word	0x2000c6c4
   14548:	0003bac9 	.word	0x0003bac9
   1454c:	00039fbd 	.word	0x00039fbd
   14550:	00039995 	.word	0x00039995
   14554:	0003bafd 	.word	0x0003bafd
   14558:	0003bb29 	.word	0x0003bb29
   1455c:	000378f0 	.word	0x000378f0

00014560 <hci_le_read_max_data_len>:
{
   14560:	b570      	push	{r4, r5, r6, lr}
   14562:	b088      	sub	sp, #32
   14564:	4606      	mov	r6, r0
   14566:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   14568:	f242 002f 	movw	r0, #8239	; 0x202f
   1456c:	2100      	movs	r1, #0
   1456e:	aa01      	add	r2, sp, #4
   14570:	f7ff ff76 	bl	14460 <bt_hci_cmd_send_sync>
	if (err) {
   14574:	4604      	mov	r4, r0
   14576:	b160      	cbz	r0, 14592 <hci_le_read_max_data_len+0x32>
		LOG_ERR("Failed to read DLE max data len");
   14578:	4b0b      	ldr	r3, [pc, #44]	; (145a8 <hci_le_read_max_data_len+0x48>)
   1457a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1457e:	9307      	str	r3, [sp, #28]
   14580:	2302      	movs	r3, #2
   14582:	480a      	ldr	r0, [pc, #40]	; (145ac <hci_le_read_max_data_len+0x4c>)
   14584:	aa06      	add	r2, sp, #24
   14586:	9306      	str	r3, [sp, #24]
   14588:	f01c fccc 	bl	30f24 <z_log_msg_static_create.constprop.0>
}
   1458c:	4620      	mov	r0, r4
   1458e:	b008      	add	sp, #32
   14590:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   14592:	9801      	ldr	r0, [sp, #4]
   14594:	68c3      	ldr	r3, [r0, #12]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   14596:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   1459a:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   1459c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   145a0:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   145a2:	f009 fdf3 	bl	1e18c <net_buf_unref>
	return 0;
   145a6:	e7f1      	b.n	1458c <hci_le_read_max_data_len+0x2c>
   145a8:	0003bb45 	.word	0x0003bb45
   145ac:	000378f0 	.word	0x000378f0

000145b0 <bt_hci_le_rand>:
{
   145b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   145b2:	4b14      	ldr	r3, [pc, #80]	; (14604 <bt_hci_le_rand+0x54>)
{
   145b4:	4605      	mov	r5, r0
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   145b6:	f993 309b 	ldrsb.w	r3, [r3, #155]	; 0x9b
{
   145ba:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   145bc:	2b00      	cmp	r3, #0
   145be:	da1d      	bge.n	145fc <bt_hci_le_rand+0x4c>
	while (len > 0) {
   145c0:	b914      	cbnz	r4, 145c8 <bt_hci_le_rand+0x18>
	return 0;
   145c2:	4620      	mov	r0, r4
}
   145c4:	b003      	add	sp, #12
   145c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
   145c8:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   145ca:	f04f 0100 	mov.w	r1, #0
   145ce:	f242 0018 	movw	r0, #8216	; 0x2018
   145d2:	aa01      	add	r2, sp, #4
		count = MIN(len, sizeof(rp->rand));
   145d4:	4626      	mov	r6, r4
   145d6:	bf28      	it	cs
   145d8:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   145da:	f7ff ff41 	bl	14460 <bt_hci_cmd_send_sync>
		if (err) {
   145de:	2800      	cmp	r0, #0
   145e0:	d1f0      	bne.n	145c4 <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
   145e2:	9f01      	ldr	r7, [sp, #4]
   145e4:	4632      	mov	r2, r6
   145e6:	68f9      	ldr	r1, [r7, #12]
   145e8:	4628      	mov	r0, r5
   145ea:	3101      	adds	r1, #1
   145ec:	f021 ff9c 	bl	36528 <memcpy>
		net_buf_unref(rsp);
   145f0:	4638      	mov	r0, r7
   145f2:	f009 fdcb 	bl	1e18c <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   145f6:	4435      	add	r5, r6
		len -= count;
   145f8:	1ba4      	subs	r4, r4, r6
   145fa:	e7e1      	b.n	145c0 <bt_hci_le_rand+0x10>
		return -ENOTSUP;
   145fc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   14600:	e7e0      	b.n	145c4 <bt_hci_le_rand+0x14>
   14602:	bf00      	nop
   14604:	2000c580 	.word	0x2000c580

00014608 <bt_le_create_conn>:
{
   14608:	b5f0      	push	{r4, r5, r6, r7, lr}
   1460a:	b087      	sub	sp, #28
   1460c:	4606      	mov	r6, r0
	err = bt_id_set_create_conn_own_addr(use_filter, &own_addr_type);
   1460e:	f10d 010b 	add.w	r1, sp, #11
   14612:	2000      	movs	r0, #0
   14614:	f001 fb5c 	bl	15cd0 <bt_id_set_create_conn_own_addr>
	if (err) {
   14618:	4605      	mov	r5, r0
   1461a:	2800      	cmp	r0, #0
   1461c:	d145      	bne.n	146aa <bt_le_create_conn+0xa2>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
   1461e:	2119      	movs	r1, #25
   14620:	f242 000d 	movw	r0, #8205	; 0x200d
   14624:	f7ff fece 	bl	143c4 <bt_hci_cmd_create>
	if (!buf) {
   14628:	4607      	mov	r7, r0
   1462a:	2800      	cmp	r0, #0
   1462c:	d040      	beq.n	146b0 <bt_le_create_conn+0xa8>
   1462e:	2119      	movs	r1, #25
   14630:	300c      	adds	r0, #12
   14632:	f009 ff31 	bl	1e498 <net_buf_simple_add>
   14636:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
   14638:	4629      	mov	r1, r5
   1463a:	2219      	movs	r2, #25
   1463c:	f021 ff94 	bl	36568 <memset>
	cp->own_addr_type = own_addr_type;
   14640:	f89d 300b 	ldrb.w	r3, [sp, #11]
		if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   14644:	4a1c      	ldr	r2, [pc, #112]	; (146b8 <bt_le_create_conn+0xb0>)
	cp->own_addr_type = own_addr_type;
   14646:	7323      	strb	r3, [r4, #12]
		if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   14648:	f892 1121 	ldrb.w	r1, [r2, #289]	; 0x121
   1464c:	f892 3120 	ldrb.w	r3, [r2, #288]	; 0x120
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
   14650:	1d60      	adds	r0, r4, #5
		if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   14652:	4299      	cmp	r1, r3
		const bt_addr_le_t *peer_addr = &conn->le.dst;
   14654:	bf94      	ite	ls
   14656:	f106 0190 	addls.w	r1, r6, #144	; 0x90
			peer_addr = &conn->le.resp_addr;
   1465a:	f106 019e 	addhi.w	r1, r6, #158	; 0x9e
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
   1465e:	f01c fc55 	bl	30f0c <bt_addr_le_copy>
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
   14662:	8993      	ldrh	r3, [r2, #12]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   14664:	4638      	mov	r0, r7
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
   14666:	8023      	strh	r3, [r4, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
   14668:	89d3      	ldrh	r3, [r2, #14]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   1466a:	4a14      	ldr	r2, [pc, #80]	; (146bc <bt_le_create_conn+0xb4>)
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
   1466c:	8063      	strh	r3, [r4, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
   1466e:	f8b6 30a8 	ldrh.w	r3, [r6, #168]	; 0xa8
   14672:	f8a4 300d 	strh.w	r3, [r4, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
   14676:	f8b6 30aa 	ldrh.w	r3, [r6, #170]	; 0xaa
   1467a:	f8a4 300f 	strh.w	r3, [r4, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
   1467e:	f8b6 30ac 	ldrh.w	r3, [r6, #172]	; 0xac
   14682:	f8a4 3011 	strh.w	r3, [r4, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
   14686:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
   1468a:	f8a4 3013 	strh.w	r3, [r4, #19]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   1468e:	2301      	movs	r3, #1
   14690:	9300      	str	r3, [sp, #0]
   14692:	230c      	movs	r3, #12
   14694:	eb0d 0103 	add.w	r1, sp, r3
   14698:	f7ff fe82 	bl	143a0 <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
   1469c:	2200      	movs	r2, #0
   1469e:	4639      	mov	r1, r7
   146a0:	f242 000d 	movw	r0, #8205	; 0x200d
   146a4:	f7ff fedc 	bl	14460 <bt_hci_cmd_send_sync>
   146a8:	4605      	mov	r5, r0
}
   146aa:	4628      	mov	r0, r5
   146ac:	b007      	add	sp, #28
   146ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
   146b0:	f06f 0568 	mvn.w	r5, #104	; 0x68
   146b4:	e7f9      	b.n	146aa <bt_le_create_conn+0xa2>
   146b6:	bf00      	nop
   146b8:	2000c580 	.word	0x2000c580
   146bc:	2000c654 	.word	0x2000c654

000146c0 <bt_le_create_conn_cancel>:
{
   146c0:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   146c2:	2100      	movs	r1, #0
{
   146c4:	b087      	sub	sp, #28
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   146c6:	f242 000e 	movw	r0, #8206	; 0x200e
   146ca:	f7ff fe7b 	bl	143c4 <bt_hci_cmd_create>
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   146ce:	2500      	movs	r5, #0
   146d0:	230c      	movs	r3, #12
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   146d2:	4604      	mov	r4, r0
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   146d4:	eb0d 0103 	add.w	r1, sp, r3
   146d8:	4a05      	ldr	r2, [pc, #20]	; (146f0 <bt_le_create_conn_cancel+0x30>)
   146da:	9500      	str	r5, [sp, #0]
   146dc:	f7ff fe60 	bl	143a0 <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
   146e0:	462a      	mov	r2, r5
   146e2:	4621      	mov	r1, r4
   146e4:	f242 000e 	movw	r0, #8206	; 0x200e
   146e8:	f7ff feba 	bl	14460 <bt_hci_cmd_send_sync>
}
   146ec:	b007      	add	sp, #28
   146ee:	bd30      	pop	{r4, r5, pc}
   146f0:	2000c654 	.word	0x2000c654

000146f4 <bt_hci_le_enh_conn_complete>:
{
   146f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   146f8:	b08d      	sub	sp, #52	; 0x34
   146fa:	4605      	mov	r5, r0
   146fc:	2600      	movs	r6, #0
		if (disconnected_handles[i] == handle) {
   146fe:	4ba8      	ldr	r3, [pc, #672]	; (149a0 <bt_hci_le_enh_conn_complete+0x2ac>)
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   14700:	f8b0 8001 	ldrh.w	r8, [r0, #1]
		if (disconnected_handles[i] == handle) {
   14704:	8819      	ldrh	r1, [r3, #0]
   14706:	f448 4270 	orr.w	r2, r8, #61440	; 0xf000
   1470a:	4291      	cmp	r1, r2
{
   1470c:	af02      	add	r7, sp, #8
			disconnected_handles[i] = 0;
   1470e:	bf04      	itt	eq
   14710:	801e      	strheq	r6, [r3, #0]
			return true;
   14712:	2601      	moveq	r6, #1
	bt_id_pending_keys_update();
   14714:	f001 f8be 	bl	15894 <bt_id_pending_keys_update>
	if (evt->status) {
   14718:	782c      	ldrb	r4, [r5, #0]
   1471a:	2c00      	cmp	r4, #0
   1471c:	d03a      	beq.n	14794 <bt_hci_le_enh_conn_complete+0xa0>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1471e:	2c02      	cmp	r4, #2
   14720:	d128      	bne.n	14774 <bt_hci_le_enh_conn_complete+0x80>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   14722:	2100      	movs	r1, #0
   14724:	2206      	movs	r2, #6
   14726:	4608      	mov	r0, r1
   14728:	f002 fe22 	bl	17370 <bt_conn_lookup_state_le>
	if (!conn) {
   1472c:	4605      	mov	r5, r0
   1472e:	b980      	cbnz	r0, 14752 <bt_hci_le_enh_conn_complete+0x5e>
		LOG_ERR("No pending central connection");
   14730:	4b9c      	ldr	r3, [pc, #624]	; (149a4 <bt_hci_le_enh_conn_complete+0x2b0>)
   14732:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14736:	e9c7 4308 	strd	r4, r3, [r7, #32]
   1473a:	489b      	ldr	r0, [pc, #620]	; (149a8 <bt_hci_le_enh_conn_complete+0x2b4>)
   1473c:	f107 0220 	add.w	r2, r7, #32
   14740:	f01c fbf0 	bl	30f24 <z_log_msg_static_create.constprop.0>
			bt_le_scan_update(false);
   14744:	2000      	movs	r0, #0
   14746:	f001 fb6d 	bl	15e24 <bt_le_scan_update>
}
   1474a:	372c      	adds	r7, #44	; 0x2c
   1474c:	46bd      	mov	sp, r7
   1474e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   14752:	2100      	movs	r1, #0
	conn->err = err;
   14754:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   14756:	f002 fac1 	bl	16cdc <bt_conn_set_state>
   1475a:	1d2b      	adds	r3, r5, #4
   1475c:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   14760:	07de      	lsls	r6, r3, #31
   14762:	d503      	bpl.n	1476c <bt_hci_le_enh_conn_complete+0x78>
			bt_conn_set_state(conn, BT_CONN_CONNECTING_SCAN);
   14764:	4621      	mov	r1, r4
   14766:	4628      	mov	r0, r5
   14768:	f002 fab8 	bl	16cdc <bt_conn_set_state>
	bt_conn_unref(conn);
   1476c:	4628      	mov	r0, r5
   1476e:	f002 fa89 	bl	16c84 <bt_conn_unref>
   14772:	e7e7      	b.n	14744 <bt_hci_le_enh_conn_complete+0x50>
		LOG_WRN("Unexpected status 0x%02x", evt->status);
   14774:	466d      	mov	r5, sp
   14776:	b088      	sub	sp, #32
   14778:	aa02      	add	r2, sp, #8
   1477a:	4b8c      	ldr	r3, [pc, #560]	; (149ac <bt_hci_le_enh_conn_complete+0x2b8>)
   1477c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   14780:	e9c2 3405 	strd	r3, r4, [r2, #20]
   14784:	2303      	movs	r3, #3
   14786:	4888      	ldr	r0, [pc, #544]	; (149a8 <bt_hci_le_enh_conn_complete+0x2b4>)
   14788:	f842 3f10 	str.w	r3, [r2, #16]!
   1478c:	f01c fbca 	bl	30f24 <z_log_msg_static_create.constprop.0>
   14790:	46ad      	mov	sp, r5
		return;
   14792:	e7da      	b.n	1474a <bt_hci_le_enh_conn_complete+0x56>
	id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id : BT_ID_DEFAULT;
   14794:	78eb      	ldrb	r3, [r5, #3]
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
   14796:	f105 0904 	add.w	r9, r5, #4
	id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id : BT_ID_DEFAULT;
   1479a:	2b01      	cmp	r3, #1
   1479c:	bf08      	it	eq
   1479e:	4b84      	ldreq	r3, [pc, #528]	; (149b0 <bt_hci_le_enh_conn_complete+0x2bc>)
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
   147a0:	4648      	mov	r0, r9
	id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id : BT_ID_DEFAULT;
   147a2:	bf08      	it	eq
   147a4:	f893 406f 	ldrbeq.w	r4, [r3, #111]	; 0x6f
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
   147a8:	f01c fb76 	bl	30e98 <bt_addr_le_is_resolved>
		bt_addr_le_copy_resolved(id_addr, &evt->peer_addr);
   147ac:	4649      	mov	r1, r9
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
   147ae:	b338      	cbz	r0, 14800 <bt_hci_le_enh_conn_complete+0x10c>
		bt_addr_le_copy_resolved(id_addr, &evt->peer_addr);
   147b0:	f107 0010 	add.w	r0, r7, #16
   147b4:	f01c fb65 	bl	30e82 <bt_addr_le_copy_resolved>
		bt_addr_copy(&peer_addr->a, &evt->peer_rpa);
   147b8:	f105 0111 	add.w	r1, r5, #17
   147bc:	f107 0009 	add.w	r0, r7, #9
   147c0:	f01c fbab 	bl	30f1a <bt_addr_copy>
		peer_addr->type = BT_ADDR_LE_RANDOM;
   147c4:	2301      	movs	r3, #1
   147c6:	723b      	strb	r3, [r7, #8]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_CENTRAL) {
   147c8:	78e8      	ldrb	r0, [r5, #3]
   147ca:	b338      	cbz	r0, 1481c <bt_hci_le_enh_conn_complete+0x128>
		LOG_ERR("No pending conn for peer %s", bt_addr_le_str(&evt->peer_addr));
   147cc:	4648      	mov	r0, r9
   147ce:	f7ff f811 	bl	137f4 <bt_addr_le_str>
   147d2:	466c      	mov	r4, sp
   147d4:	b088      	sub	sp, #32
   147d6:	aa02      	add	r2, sp, #8
   147d8:	4b76      	ldr	r3, [pc, #472]	; (149b4 <bt_hci_le_enh_conn_complete+0x2c0>)
   147da:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   147de:	e9c2 3005 	strd	r3, r0, [r2, #20]
   147e2:	f44f 7300 	mov.w	r3, #512	; 0x200
   147e6:	8393      	strh	r3, [r2, #28]
   147e8:	4b73      	ldr	r3, [pc, #460]	; (149b8 <bt_hci_le_enh_conn_complete+0x2c4>)
   147ea:	486f      	ldr	r0, [pc, #444]	; (149a8 <bt_hci_le_enh_conn_complete+0x2b4>)
   147ec:	f842 3f10 	str.w	r3, [r2, #16]!
   147f0:	f01c fb98 	bl	30f24 <z_log_msg_static_create.constprop.0>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   147f4:	211f      	movs	r1, #31
   147f6:	46a5      	mov	sp, r4
   147f8:	4640      	mov	r0, r8
   147fa:	f01c fbae 	bl	30f5a <bt_hci_disconnect>
		return;
   147fe:	e7a4      	b.n	1474a <bt_hci_le_enh_conn_complete+0x56>
		bt_addr_le_copy(id_addr, bt_lookup_id_addr(id, &evt->peer_addr));
   14800:	4620      	mov	r0, r4
   14802:	f01c fcc0 	bl	31186 <bt_lookup_id_addr>
   14806:	4601      	mov	r1, r0
   14808:	f107 0010 	add.w	r0, r7, #16
   1480c:	f01c fb7e 	bl	30f0c <bt_addr_le_copy>
		bt_addr_le_copy(peer_addr, &evt->peer_addr);
   14810:	4649      	mov	r1, r9
   14812:	f107 0008 	add.w	r0, r7, #8
   14816:	f01c fb79 	bl	30f0c <bt_addr_le_copy>
   1481a:	e7d5      	b.n	147c8 <bt_hci_le_enh_conn_complete+0xd4>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   1481c:	2206      	movs	r2, #6
   1481e:	f107 0110 	add.w	r1, r7, #16
   14822:	f002 fda5 	bl	17370 <bt_conn_lookup_state_le>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   14826:	78eb      	ldrb	r3, [r5, #3]
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   14828:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1482a:	b923      	cbnz	r3, 14836 <bt_hci_le_enh_conn_complete+0x142>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1482c:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   14830:	4862      	ldr	r0, [pc, #392]	; (149bc <bt_hci_le_enh_conn_complete+0x2c8>)
   14832:	f01c fb7a 	bl	30f2a <atomic_and.isra.0>
	if (!conn) {
   14836:	2c00      	cmp	r4, #0
   14838:	d0c8      	beq.n	147cc <bt_hci_le_enh_conn_complete+0xd8>
	conn->handle = sys_le16_to_cpu(evt->handle);
   1483a:	4620      	mov	r0, r4
	conn->err = 0U;
   1483c:	2200      	movs	r2, #0
	conn->handle = sys_le16_to_cpu(evt->handle);
   1483e:	f8b5 3001 	ldrh.w	r3, [r5, #1]
	bt_addr_le_copy(&conn->le.dst, id_addr);
   14842:	f107 0110 	add.w	r1, r7, #16
	conn->handle = sys_le16_to_cpu(evt->handle);
   14846:	f820 3b90 	strh.w	r3, [r0], #144
	bt_addr_le_copy(&conn->le.dst, id_addr);
   1484a:	f01c fb5f 	bl	30f0c <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   1484e:	f8b5 3017 	ldrh.w	r3, [r5, #23]
   14852:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   14856:	f8b5 3019 	ldrh.w	r3, [r5, #25]
   1485a:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   1485e:	f8b5 301b 	ldrh.w	r3, [r5, #27]
   14862:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	conn->role = evt->role;
   14866:	78eb      	ldrb	r3, [r5, #3]
	conn->err = 0U;
   14868:	7322      	strb	r2, [r4, #12]
	conn->role = evt->role;
   1486a:	70e3      	strb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1486c:	b973      	cbnz	r3, 1488c <bt_hci_le_enh_conn_complete+0x198>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
   1486e:	f107 0108 	add.w	r1, r7, #8
   14872:	f104 009e 	add.w	r0, r4, #158	; 0x9e
   14876:	f01c fb49 	bl	30f0c <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
   1487a:	7a21      	ldrb	r1, [r4, #8]
			bt_addr_le_copy(&conn->le.init_addr,
   1487c:	4b4c      	ldr	r3, [pc, #304]	; (149b0 <bt_hci_le_enh_conn_complete+0x2bc>)
					&bt_dev.id_addr[conn->id]);
   1487e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.init_addr,
   14882:	4419      	add	r1, r3
   14884:	f104 0097 	add.w	r0, r4, #151	; 0x97
   14888:	f01c fb40 	bl	30f0c <bt_addr_le_copy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   1488c:	2107      	movs	r1, #7
   1488e:	4620      	mov	r0, r4
   14890:	f002 fa24 	bl	16cdc <bt_conn_set_state>
	if (is_disconnected) {
   14894:	b11e      	cbz	r6, 1489e <bt_hci_le_enh_conn_complete+0x1aa>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   14896:	2101      	movs	r1, #1
   14898:	4620      	mov	r0, r4
   1489a:	f002 fa1f 	bl	16cdc <bt_conn_set_state>
	bt_conn_connected(conn);
   1489e:	4620      	mov	r0, r4
   148a0:	f01c fd41 	bl	31326 <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
   148a4:	7b63      	ldrb	r3, [r4, #13]
   148a6:	2b07      	cmp	r3, #7
   148a8:	d16e      	bne.n	14988 <bt_hci_le_enh_conn_complete+0x294>
   148aa:	1d23      	adds	r3, r4, #4
   148ac:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   148b0:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   148b4:	4d3e      	ldr	r5, [pc, #248]	; (149b0 <bt_hci_le_enh_conn_complete+0x2bc>)
   148b6:	d129      	bne.n	1490c <bt_hci_le_enh_conn_complete+0x218>
   148b8:	78e3      	ldrb	r3, [r4, #3]
   148ba:	b11b      	cbz	r3, 148c4 <bt_hci_le_enh_conn_complete+0x1d0>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   148bc:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
   148c0:	0718      	lsls	r0, r3, #28
   148c2:	d523      	bpl.n	1490c <bt_hci_le_enh_conn_complete+0x218>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   148c4:	2102      	movs	r1, #2
   148c6:	f242 0016 	movw	r0, #8214	; 0x2016
   148ca:	f7ff fd7b 	bl	143c4 <bt_hci_cmd_create>
	if (!buf) {
   148ce:	4606      	mov	r6, r0
   148d0:	2800      	cmp	r0, #0
   148d2:	d061      	beq.n	14998 <bt_hci_le_enh_conn_complete+0x2a4>
   148d4:	2102      	movs	r1, #2
   148d6:	300c      	adds	r0, #12
   148d8:	f009 fdde 	bl	1e498 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   148dc:	8823      	ldrh	r3, [r4, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   148de:	2200      	movs	r2, #0
	cp->handle = sys_cpu_to_le16(conn->handle);
   148e0:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   148e2:	4631      	mov	r1, r6
   148e4:	f242 0016 	movw	r0, #8214	; 0x2016
   148e8:	f7ff fdba 	bl	14460 <bt_hci_cmd_send_sync>
		if (err) {
   148ec:	b170      	cbz	r0, 1490c <bt_hci_le_enh_conn_complete+0x218>
			LOG_ERR("Failed read remote features (%d)", err);
   148ee:	466e      	mov	r6, sp
   148f0:	b088      	sub	sp, #32
   148f2:	aa02      	add	r2, sp, #8
   148f4:	4b32      	ldr	r3, [pc, #200]	; (149c0 <bt_hci_le_enh_conn_complete+0x2cc>)
   148f6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   148fa:	e9c2 3005 	strd	r3, r0, [r2, #20]
   148fe:	2303      	movs	r3, #3
   14900:	4829      	ldr	r0, [pc, #164]	; (149a8 <bt_hci_le_enh_conn_complete+0x2b4>)
   14902:	f842 3f10 	str.w	r3, [r2, #16]!
   14906:	f01c fb0d 	bl	30f24 <z_log_msg_static_create.constprop.0>
   1490a:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   1490c:	f895 30d9 	ldrb.w	r3, [r5, #217]	; 0xd9
   14910:	07d9      	lsls	r1, r3, #31
   14912:	d516      	bpl.n	14942 <bt_hci_le_enh_conn_complete+0x24e>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   14914:	2100      	movs	r1, #0
   14916:	2302      	movs	r3, #2
   14918:	4620      	mov	r0, r4
   1491a:	461a      	mov	r2, r3
   1491c:	9100      	str	r1, [sp, #0]
   1491e:	f01c fb55 	bl	30fcc <bt_le_set_phy>
		if (err) {
   14922:	b170      	cbz	r0, 14942 <bt_hci_le_enh_conn_complete+0x24e>
			LOG_ERR("Failed LE Set PHY (%d)", err);
   14924:	466e      	mov	r6, sp
   14926:	b088      	sub	sp, #32
   14928:	aa02      	add	r2, sp, #8
   1492a:	4b26      	ldr	r3, [pc, #152]	; (149c4 <bt_hci_le_enh_conn_complete+0x2d0>)
   1492c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14930:	e9c2 3005 	strd	r3, r0, [r2, #20]
   14934:	2303      	movs	r3, #3
   14936:	481c      	ldr	r0, [pc, #112]	; (149a8 <bt_hci_le_enh_conn_complete+0x2b4>)
   14938:	f842 3f10 	str.w	r3, [r2, #16]!
   1493c:	f01c faf2 	bl	30f24 <z_log_msg_static_create.constprop.0>
   14940:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   14942:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
   14946:	069a      	lsls	r2, r3, #26
   14948:	d51e      	bpl.n	14988 <bt_hci_le_enh_conn_complete+0x294>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   1494a:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
   1494e:	689b      	ldr	r3, [r3, #8]
   14950:	079b      	lsls	r3, r3, #30
   14952:	d519      	bpl.n	14988 <bt_hci_le_enh_conn_complete+0x294>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   14954:	1db9      	adds	r1, r7, #6
   14956:	1d38      	adds	r0, r7, #4
   14958:	f7ff fe02 	bl	14560 <hci_le_read_max_data_len>
			if (!err) {
   1495c:	b9a0      	cbnz	r0, 14988 <bt_hci_le_enh_conn_complete+0x294>
				err = bt_le_set_data_len(conn,
   1495e:	4620      	mov	r0, r4
   14960:	88fa      	ldrh	r2, [r7, #6]
   14962:	88b9      	ldrh	r1, [r7, #4]
   14964:	f01c fb14 	bl	30f90 <bt_le_set_data_len>
				if (err) {
   14968:	b170      	cbz	r0, 14988 <bt_hci_le_enh_conn_complete+0x294>
					LOG_ERR("Failed to set data len (%d)", err);
   1496a:	466d      	mov	r5, sp
   1496c:	b088      	sub	sp, #32
   1496e:	aa02      	add	r2, sp, #8
   14970:	4b15      	ldr	r3, [pc, #84]	; (149c8 <bt_hci_le_enh_conn_complete+0x2d4>)
   14972:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14976:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1497a:	2303      	movs	r3, #3
   1497c:	480a      	ldr	r0, [pc, #40]	; (149a8 <bt_hci_le_enh_conn_complete+0x2b4>)
   1497e:	f842 3f10 	str.w	r3, [r2, #16]!
   14982:	f01c facf 	bl	30f24 <z_log_msg_static_create.constprop.0>
   14986:	46ad      	mov	sp, r5
	bt_conn_unref(conn);
   14988:	4620      	mov	r0, r4
   1498a:	f002 f97b 	bl	16c84 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1498e:	78e3      	ldrb	r3, [r4, #3]
   14990:	2b00      	cmp	r3, #0
   14992:	f47f aeda 	bne.w	1474a <bt_hci_le_enh_conn_complete+0x56>
   14996:	e6d5      	b.n	14744 <bt_hci_le_enh_conn_complete+0x50>
		return -ENOBUFS;
   14998:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1499c:	e7a7      	b.n	148ee <bt_hci_le_enh_conn_complete+0x1fa>
   1499e:	bf00      	nop
   149a0:	2000ef6a 	.word	0x2000ef6a
   149a4:	0003bb65 	.word	0x0003bb65
   149a8:	000378f0 	.word	0x000378f0
   149ac:	0003bb83 	.word	0x0003bb83
   149b0:	2000c580 	.word	0x2000c580
   149b4:	0003bb9c 	.word	0x0003bb9c
   149b8:	01000003 	.word	0x01000003
   149bc:	2000c654 	.word	0x2000c654
   149c0:	0003bbb8 	.word	0x0003bbb8
   149c4:	0003bbd9 	.word	0x0003bbd9
   149c8:	0003bbf0 	.word	0x0003bbf0

000149cc <le_legacy_conn_complete>:
{
   149cc:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   149ce:	68c1      	ldr	r1, [r0, #12]
{
   149d0:	b089      	sub	sp, #36	; 0x24
	enh.status         = evt->status;
   149d2:	780b      	ldrb	r3, [r1, #0]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   149d4:	a801      	add	r0, sp, #4
	enh.status         = evt->status;
   149d6:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   149da:	f8b1 3001 	ldrh.w	r3, [r1, #1]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   149de:	3104      	adds	r1, #4
	enh.handle         = evt->handle;
   149e0:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   149e4:	f811 3c01 	ldrb.w	r3, [r1, #-1]
   149e8:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   149ec:	f8b1 3007 	ldrh.w	r3, [r1, #7]
   149f0:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   149f4:	f8b1 3009 	ldrh.w	r3, [r1, #9]
   149f8:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   149fc:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   14a00:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   14a04:	7b4b      	ldrb	r3, [r1, #13]
   14a06:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   14a0a:	f01c fa7f 	bl	30f0c <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   14a0e:	4907      	ldr	r1, [pc, #28]	; (14a2c <le_legacy_conn_complete+0x60>)
   14a10:	f10d 000b 	add.w	r0, sp, #11
   14a14:	f01c fa81 	bl	30f1a <bt_addr_copy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   14a18:	f10d 0011 	add.w	r0, sp, #17
   14a1c:	f01c fa7d 	bl	30f1a <bt_addr_copy>
	bt_hci_le_enh_conn_complete(evt);
   14a20:	4668      	mov	r0, sp
   14a22:	f7ff fe67 	bl	146f4 <bt_hci_le_enh_conn_complete>
}
   14a26:	b009      	add	sp, #36	; 0x24
   14a28:	f85d fb04 	ldr.w	pc, [sp], #4
   14a2c:	0003b6e1 	.word	0x0003b6e1

00014a30 <bt_security_err_get>:
	switch (hci_err) {
   14a30:	2829      	cmp	r0, #41	; 0x29
   14a32:	bf9a      	itte	ls
   14a34:	4b01      	ldrls	r3, [pc, #4]	; (14a3c <bt_security_err_get+0xc>)
   14a36:	5c18      	ldrbls	r0, [r3, r0]
{
   14a38:	2009      	movhi	r0, #9
}
   14a3a:	4770      	bx	lr
   14a3c:	0003c03d 	.word	0x0003c03d

00014a40 <hci_encrypt_key_refresh_complete>:
{
   14a40:	b5f0      	push	{r4, r5, r6, r7, lr}
   14a42:	b087      	sub	sp, #28
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   14a44:	68c3      	ldr	r3, [r0, #12]
{
   14a46:	af00      	add	r7, sp, #0
	handle = sys_le16_to_cpu(evt->handle);
   14a48:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
   14a4c:	781d      	ldrb	r5, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   14a4e:	4630      	mov	r0, r6
   14a50:	f002 f93c 	bl	16ccc <bt_conn_lookup_handle>
	if (!conn) {
   14a54:	4604      	mov	r4, r0
   14a56:	b988      	cbnz	r0, 14a7c <hci_encrypt_key_refresh_complete+0x3c>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   14a58:	466c      	mov	r4, sp
   14a5a:	b088      	sub	sp, #32
   14a5c:	466a      	mov	r2, sp
   14a5e:	4b1f      	ldr	r3, [pc, #124]	; (14adc <hci_encrypt_key_refresh_complete+0x9c>)
   14a60:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14a64:	e9c2 3605 	strd	r3, r6, [r2, #20]
   14a68:	2303      	movs	r3, #3
   14a6a:	481d      	ldr	r0, [pc, #116]	; (14ae0 <hci_encrypt_key_refresh_complete+0xa0>)
   14a6c:	f842 3f10 	str.w	r3, [r2, #16]!
   14a70:	f01c fa58 	bl	30f24 <z_log_msg_static_create.constprop.0>
   14a74:	46a5      	mov	sp, r4
}
   14a76:	371c      	adds	r7, #28
   14a78:	46bd      	mov	sp, r7
   14a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (status) {
   14a7c:	b15d      	cbz	r5, 14a96 <hci_encrypt_key_refresh_complete+0x56>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   14a7e:	4628      	mov	r0, r5
   14a80:	f7ff ffd6 	bl	14a30 <bt_security_err_get>
   14a84:	4629      	mov	r1, r5
   14a86:	4602      	mov	r2, r0
   14a88:	4620      	mov	r0, r4
   14a8a:	f002 fb95 	bl	171b8 <bt_conn_security_changed>
	bt_conn_unref(conn);
   14a8e:	4620      	mov	r0, r4
   14a90:	f002 f8f8 	bl	16c84 <bt_conn_unref>
   14a94:	e7ef      	b.n	14a76 <hci_encrypt_key_refresh_complete+0x36>
	if (conn->type == BT_CONN_TYPE_LE) {
   14a96:	7883      	ldrb	r3, [r0, #2]
   14a98:	2b01      	cmp	r3, #1
   14a9a:	d1f0      	bne.n	14a7e <hci_encrypt_key_refresh_complete+0x3e>
		bt_smp_update_keys(conn);
   14a9c:	f008 fdee 	bl	1d67c <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   14aa0:	4620      	mov	r0, r4
   14aa2:	f01c fa0f 	bl	30ec4 <update_sec_level>
   14aa6:	2800      	cmp	r0, #0
   14aa8:	d1e9      	bne.n	14a7e <hci_encrypt_key_refresh_complete+0x3e>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   14aaa:	2005      	movs	r0, #5
   14aac:	f7ff ffc0 	bl	14a30 <bt_security_err_get>
   14ab0:	2105      	movs	r1, #5
   14ab2:	4602      	mov	r2, r0
   14ab4:	4620      	mov	r0, r4
   14ab6:	f002 fb7f 	bl	171b8 <bt_conn_security_changed>
		LOG_ERR("Failed to set required security level");
   14aba:	4b0a      	ldr	r3, [pc, #40]	; (14ae4 <hci_encrypt_key_refresh_complete+0xa4>)
   14abc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14ac0:	617b      	str	r3, [r7, #20]
   14ac2:	2302      	movs	r3, #2
   14ac4:	4806      	ldr	r0, [pc, #24]	; (14ae0 <hci_encrypt_key_refresh_complete+0xa0>)
   14ac6:	f107 0210 	add.w	r2, r7, #16
   14aca:	613b      	str	r3, [r7, #16]
   14acc:	f01c fa2a 	bl	30f24 <z_log_msg_static_create.constprop.0>
		bt_conn_disconnect(conn, status);
   14ad0:	2105      	movs	r1, #5
   14ad2:	4620      	mov	r0, r4
   14ad4:	f01c fcfa 	bl	314cc <bt_conn_disconnect>
   14ad8:	e7d9      	b.n	14a8e <hci_encrypt_key_refresh_complete+0x4e>
   14ada:	bf00      	nop
   14adc:	0003baa3 	.word	0x0003baa3
   14ae0:	000378f0 	.word	0x000378f0
   14ae4:	0003bc0c 	.word	0x0003bc0c

00014ae8 <hci_encrypt_change>:
{
   14ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14aec:	b086      	sub	sp, #24
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   14aee:	68c6      	ldr	r6, [r0, #12]
{
   14af0:	af00      	add	r7, sp, #0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   14af2:	f8b6 8001 	ldrh.w	r8, [r6, #1]
	uint8_t status = evt->status;
   14af6:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
   14af8:	4640      	mov	r0, r8
   14afa:	f002 f8e7 	bl	16ccc <bt_conn_lookup_handle>
	if (!conn) {
   14afe:	4604      	mov	r4, r0
   14b00:	b990      	cbnz	r0, 14b28 <hci_encrypt_change+0x40>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   14b02:	466c      	mov	r4, sp
   14b04:	b088      	sub	sp, #32
   14b06:	466a      	mov	r2, sp
   14b08:	4b23      	ldr	r3, [pc, #140]	; (14b98 <hci_encrypt_change+0xb0>)
   14b0a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14b0e:	e9c2 3805 	strd	r3, r8, [r2, #20]
   14b12:	2303      	movs	r3, #3
   14b14:	4821      	ldr	r0, [pc, #132]	; (14b9c <hci_encrypt_change+0xb4>)
   14b16:	f842 3f10 	str.w	r3, [r2, #16]!
   14b1a:	f01c fa03 	bl	30f24 <z_log_msg_static_create.constprop.0>
   14b1e:	46a5      	mov	sp, r4
}
   14b20:	3718      	adds	r7, #24
   14b22:	46bd      	mov	sp, r7
   14b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (status) {
   14b28:	b15d      	cbz	r5, 14b42 <hci_encrypt_change+0x5a>
		bt_conn_security_changed(conn, status,
   14b2a:	4628      	mov	r0, r5
   14b2c:	f7ff ff80 	bl	14a30 <bt_security_err_get>
   14b30:	4629      	mov	r1, r5
   14b32:	4602      	mov	r2, r0
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   14b34:	4620      	mov	r0, r4
   14b36:	f002 fb3f 	bl	171b8 <bt_conn_security_changed>
	bt_conn_unref(conn);
   14b3a:	4620      	mov	r0, r4
   14b3c:	f002 f8a2 	bl	16c84 <bt_conn_unref>
   14b40:	e7ee      	b.n	14b20 <hci_encrypt_change+0x38>
	if (conn->type == BT_CONN_TYPE_LE) {
   14b42:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   14b44:	78f3      	ldrb	r3, [r6, #3]
	if (conn->type == BT_CONN_TYPE_LE) {
   14b46:	2a01      	cmp	r2, #1
	conn->encrypt = evt->encrypt;
   14b48:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   14b4a:	d005      	beq.n	14b58 <hci_encrypt_change+0x70>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   14b4c:	2000      	movs	r0, #0
   14b4e:	f7ff ff6f 	bl	14a30 <bt_security_err_get>
   14b52:	2100      	movs	r1, #0
   14b54:	4602      	mov	r2, r0
   14b56:	e7ed      	b.n	14b34 <hci_encrypt_change+0x4c>
		if (conn->encrypt) {
   14b58:	b10b      	cbz	r3, 14b5e <hci_encrypt_change+0x76>
			bt_smp_update_keys(conn);
   14b5a:	f008 fd8f 	bl	1d67c <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   14b5e:	4620      	mov	r0, r4
   14b60:	f01c f9b0 	bl	30ec4 <update_sec_level>
   14b64:	2800      	cmp	r0, #0
   14b66:	d1f1      	bne.n	14b4c <hci_encrypt_change+0x64>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   14b68:	2005      	movs	r0, #5
   14b6a:	f7ff ff61 	bl	14a30 <bt_security_err_get>
   14b6e:	2105      	movs	r1, #5
   14b70:	4602      	mov	r2, r0
   14b72:	4620      	mov	r0, r4
   14b74:	f002 fb20 	bl	171b8 <bt_conn_security_changed>
		LOG_ERR("Failed to set required security level");
   14b78:	4b09      	ldr	r3, [pc, #36]	; (14ba0 <hci_encrypt_change+0xb8>)
   14b7a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14b7e:	617b      	str	r3, [r7, #20]
   14b80:	2302      	movs	r3, #2
   14b82:	4806      	ldr	r0, [pc, #24]	; (14b9c <hci_encrypt_change+0xb4>)
   14b84:	f107 0210 	add.w	r2, r7, #16
   14b88:	613b      	str	r3, [r7, #16]
   14b8a:	f01c f9cb 	bl	30f24 <z_log_msg_static_create.constprop.0>
		bt_conn_disconnect(conn, status);
   14b8e:	2105      	movs	r1, #5
   14b90:	4620      	mov	r0, r4
   14b92:	f01c fc9b 	bl	314cc <bt_conn_disconnect>
   14b96:	e7d0      	b.n	14b3a <hci_encrypt_change+0x52>
   14b98:	0003baa3 	.word	0x0003baa3
   14b9c:	000378f0 	.word	0x000378f0
   14ba0:	0003bc0c 	.word	0x0003bc0c

00014ba4 <bt_send>:
	return bt_dev.drv->send(buf);
   14ba4:	4b02      	ldr	r3, [pc, #8]	; (14bb0 <bt_send+0xc>)
   14ba6:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
   14baa:	695b      	ldr	r3, [r3, #20]
   14bac:	4718      	bx	r3
   14bae:	bf00      	nop
   14bb0:	2000c580 	.word	0x2000c580

00014bb4 <bt_hci_cmd_send>:
{
   14bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14bb6:	4605      	mov	r5, r0
	if (!buf) {
   14bb8:	460c      	mov	r4, r1
{
   14bba:	af00      	add	r7, sp, #0
	if (!buf) {
   14bbc:	b919      	cbnz	r1, 14bc6 <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
   14bbe:	f7ff fc01 	bl	143c4 <bt_hci_cmd_create>
		if (!buf) {
   14bc2:	4604      	mov	r4, r0
   14bc4:	b318      	cbz	r0, 14c0e <bt_hci_cmd_send+0x5a>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   14bc6:	f640 4335 	movw	r3, #3125	; 0xc35
   14bca:	429d      	cmp	r5, r3
   14bcc:	d119      	bne.n	14c02 <bt_hci_cmd_send+0x4e>
		err = bt_send(buf);
   14bce:	4620      	mov	r0, r4
   14bd0:	f7ff ffe8 	bl	14ba4 <bt_send>
		if (err) {
   14bd4:	4605      	mov	r5, r0
   14bd6:	b188      	cbz	r0, 14bfc <bt_hci_cmd_send+0x48>
			LOG_ERR("Unable to send to driver (err %d)", err);
   14bd8:	466e      	mov	r6, sp
   14bda:	b088      	sub	sp, #32
   14bdc:	466a      	mov	r2, sp
   14bde:	4b0d      	ldr	r3, [pc, #52]	; (14c14 <bt_hci_cmd_send+0x60>)
   14be0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14be4:	e9c2 3005 	strd	r3, r0, [r2, #20]
   14be8:	2303      	movs	r3, #3
   14bea:	480b      	ldr	r0, [pc, #44]	; (14c18 <bt_hci_cmd_send+0x64>)
   14bec:	f842 3f10 	str.w	r3, [r2, #16]!
   14bf0:	f01c f998 	bl	30f24 <z_log_msg_static_create.constprop.0>
			net_buf_unref(buf);
   14bf4:	4620      	mov	r0, r4
   14bf6:	46b5      	mov	sp, r6
   14bf8:	f009 fac8 	bl	1e18c <net_buf_unref>
}
   14bfc:	4628      	mov	r0, r5
   14bfe:	46bd      	mov	sp, r7
   14c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   14c02:	4621      	mov	r1, r4
   14c04:	4805      	ldr	r0, [pc, #20]	; (14c1c <bt_hci_cmd_send+0x68>)
   14c06:	f009 fa9b 	bl	1e140 <net_buf_put>
	return 0;
   14c0a:	2500      	movs	r5, #0
   14c0c:	e7f6      	b.n	14bfc <bt_hci_cmd_send+0x48>
			return -ENOBUFS;
   14c0e:	f06f 0568 	mvn.w	r5, #104	; 0x68
   14c12:	e7f3      	b.n	14bfc <bt_hci_cmd_send+0x48>
   14c14:	0003bc32 	.word	0x0003bc32
   14c18:	000378f0 	.word	0x000378f0
   14c1c:	2000c6c4 	.word	0x2000c6c4

00014c20 <bt_hci_host_num_completed_packets>:
{
   14c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14c24:	b086      	sub	sp, #24
   14c26:	4604      	mov	r4, r0
	uint16_t handle = acl(buf)->handle;
   14c28:	8b45      	ldrh	r5, [r0, #26]
	uint8_t index = acl(buf)->index;
   14c2a:	7e46      	ldrb	r6, [r0, #25]
{
   14c2c:	af00      	add	r7, sp, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   14c2e:	7a80      	ldrb	r0, [r0, #10]
   14c30:	f009 f95e 	bl	1def0 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   14c34:	4621      	mov	r1, r4
   14c36:	f021 fa8d 	bl	36154 <k_queue_prepend>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
   14c3a:	4b2d      	ldr	r3, [pc, #180]	; (14cf0 <bt_hci_host_num_completed_packets+0xd0>)
   14c3c:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
   14c40:	069b      	lsls	r3, r3, #26
   14c42:	d513      	bpl.n	14c6c <bt_hci_host_num_completed_packets+0x4c>
	conn = bt_conn_lookup_index(index);
   14c44:	4630      	mov	r0, r6
   14c46:	f002 fdf9 	bl	1783c <bt_conn_lookup_index>
	if (!conn) {
   14c4a:	4604      	mov	r4, r0
   14c4c:	b990      	cbnz	r0, 14c74 <bt_hci_host_num_completed_packets+0x54>
		LOG_WRN("Unable to look up conn with index 0x%02x", index);
   14c4e:	466c      	mov	r4, sp
   14c50:	b088      	sub	sp, #32
   14c52:	466a      	mov	r2, sp
   14c54:	4b27      	ldr	r3, [pc, #156]	; (14cf4 <bt_hci_host_num_completed_packets+0xd4>)
   14c56:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   14c5a:	e9c2 3605 	strd	r3, r6, [r2, #20]
   14c5e:	2303      	movs	r3, #3
   14c60:	4825      	ldr	r0, [pc, #148]	; (14cf8 <bt_hci_host_num_completed_packets+0xd8>)
   14c62:	f842 3f10 	str.w	r3, [r2, #16]!
   14c66:	f01c f95d 	bl	30f24 <z_log_msg_static_create.constprop.0>
   14c6a:	46a5      	mov	sp, r4
}
   14c6c:	3718      	adds	r7, #24
   14c6e:	46bd      	mov	sp, r7
   14c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (conn->state != BT_CONN_CONNECTED &&
   14c74:	7b43      	ldrb	r3, [r0, #13]
   14c76:	3b07      	subs	r3, #7
   14c78:	2b01      	cmp	r3, #1
   14c7a:	d90e      	bls.n	14c9a <bt_hci_host_num_completed_packets+0x7a>
		LOG_WRN("Not reporting packet for non-connected conn");
   14c7c:	4b1f      	ldr	r3, [pc, #124]	; (14cfc <bt_hci_host_num_completed_packets+0xdc>)
   14c7e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   14c82:	617b      	str	r3, [r7, #20]
   14c84:	2302      	movs	r3, #2
   14c86:	481c      	ldr	r0, [pc, #112]	; (14cf8 <bt_hci_host_num_completed_packets+0xd8>)
   14c88:	613b      	str	r3, [r7, #16]
   14c8a:	f107 0210 	add.w	r2, r7, #16
   14c8e:	f01c f949 	bl	30f24 <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   14c92:	4620      	mov	r0, r4
   14c94:	f001 fff6 	bl	16c84 <bt_conn_unref>
		return;
   14c98:	e7e8      	b.n	14c6c <bt_hci_host_num_completed_packets+0x4c>
	bt_conn_unref(conn);
   14c9a:	f001 fff3 	bl	16c84 <bt_conn_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS,
   14c9e:	2105      	movs	r1, #5
   14ca0:	f640 4035 	movw	r0, #3125	; 0xc35
   14ca4:	f7ff fb8e 	bl	143c4 <bt_hci_cmd_create>
	if (!buf) {
   14ca8:	4604      	mov	r4, r0
   14caa:	b958      	cbnz	r0, 14cc4 <bt_hci_host_num_completed_packets+0xa4>
		LOG_ERR("Unable to allocate new HCI command");
   14cac:	4b14      	ldr	r3, [pc, #80]	; (14d00 <bt_hci_host_num_completed_packets+0xe0>)
   14cae:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14cb2:	617b      	str	r3, [r7, #20]
   14cb4:	2302      	movs	r3, #2
   14cb6:	4810      	ldr	r0, [pc, #64]	; (14cf8 <bt_hci_host_num_completed_packets+0xd8>)
   14cb8:	613b      	str	r3, [r7, #16]
   14cba:	f107 0210 	add.w	r2, r7, #16
   14cbe:	f01c f931 	bl	30f24 <z_log_msg_static_create.constprop.0>
		return;
   14cc2:	e7d3      	b.n	14c6c <bt_hci_host_num_completed_packets+0x4c>
	return net_buf_simple_add(&buf->b, len);
   14cc4:	f100 080c 	add.w	r8, r0, #12
   14cc8:	2101      	movs	r1, #1
   14cca:	4640      	mov	r0, r8
   14ccc:	f009 fbe4 	bl	1e498 <net_buf_simple_add>
	cp->num_handles = sys_cpu_to_le16(1);
   14cd0:	2601      	movs	r6, #1
   14cd2:	2104      	movs	r1, #4
   14cd4:	7006      	strb	r6, [r0, #0]
   14cd6:	4640      	mov	r0, r8
   14cd8:	f009 fbde 	bl	1e498 <net_buf_simple_add>
	hc->count  = sys_cpu_to_le16(1);
   14cdc:	2300      	movs	r3, #0
	hc->handle = sys_cpu_to_le16(handle);
   14cde:	8005      	strh	r5, [r0, #0]
	hc->count  = sys_cpu_to_le16(1);
   14ce0:	7086      	strb	r6, [r0, #2]
   14ce2:	70c3      	strb	r3, [r0, #3]
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
   14ce4:	4621      	mov	r1, r4
   14ce6:	f640 4035 	movw	r0, #3125	; 0xc35
   14cea:	f7ff ff63 	bl	14bb4 <bt_hci_cmd_send>
   14cee:	e7bd      	b.n	14c6c <bt_hci_host_num_completed_packets+0x4c>
   14cf0:	2000c580 	.word	0x2000c580
   14cf4:	0003bc54 	.word	0x0003bc54
   14cf8:	000378f0 	.word	0x000378f0
   14cfc:	0003bc7d 	.word	0x0003bc7d
   14d00:	0003bca9 	.word	0x0003bca9

00014d04 <le_ltk_request>:
{
   14d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14d08:	b08c      	sub	sp, #48	; 0x30
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   14d0a:	68c4      	ldr	r4, [r0, #12]
{
   14d0c:	af02      	add	r7, sp, #8
	handle = sys_le16_to_cpu(evt->handle);
   14d0e:	8826      	ldrh	r6, [r4, #0]
   14d10:	fa1f f886 	uxth.w	r8, r6
	conn = bt_conn_lookup_handle(handle);
   14d14:	4640      	mov	r0, r8
   14d16:	f001 ffd9 	bl	16ccc <bt_conn_lookup_handle>
	if (!conn) {
   14d1a:	4605      	mov	r5, r0
   14d1c:	b990      	cbnz	r0, 14d44 <le_ltk_request+0x40>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   14d1e:	466c      	mov	r4, sp
   14d20:	b088      	sub	sp, #32
   14d22:	aa02      	add	r2, sp, #8
   14d24:	4b2c      	ldr	r3, [pc, #176]	; (14dd8 <le_ltk_request+0xd4>)
   14d26:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14d2a:	e9c2 3805 	strd	r3, r8, [r2, #20]
   14d2e:	2303      	movs	r3, #3
   14d30:	482a      	ldr	r0, [pc, #168]	; (14ddc <le_ltk_request+0xd8>)
   14d32:	f842 3f10 	str.w	r3, [r2, #16]!
   14d36:	f01c f8f5 	bl	30f24 <z_log_msg_static_create.constprop.0>
   14d3a:	46a5      	mov	sp, r4
}
   14d3c:	3728      	adds	r7, #40	; 0x28
   14d3e:	46bd      	mov	sp, r7
   14d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   14d44:	f8d4 2002 	ldr.w	r2, [r4, #2]
   14d48:	f8d4 3006 	ldr.w	r3, [r4, #6]
   14d4c:	9701      	str	r7, [sp, #4]
   14d4e:	8961      	ldrh	r1, [r4, #10]
   14d50:	9100      	str	r1, [sp, #0]
   14d52:	f01d ffc3 	bl	32cdc <bt_smp_request_ltk>
   14d56:	b370      	cbz	r0, 14db6 <le_ltk_request+0xb2>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   14d58:	2112      	movs	r1, #18
   14d5a:	f242 001a 	movw	r0, #8218	; 0x201a
   14d5e:	f7ff fb31 	bl	143c4 <bt_hci_cmd_create>
	if (!buf) {
   14d62:	4604      	mov	r4, r0
   14d64:	b970      	cbnz	r0, 14d84 <le_ltk_request+0x80>
		LOG_ERR("Out of command buffers");
   14d66:	4b1e      	ldr	r3, [pc, #120]	; (14de0 <le_ltk_request+0xdc>)
   14d68:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14d6c:	627b      	str	r3, [r7, #36]	; 0x24
   14d6e:	2302      	movs	r3, #2
   14d70:	481a      	ldr	r0, [pc, #104]	; (14ddc <le_ltk_request+0xd8>)
   14d72:	623b      	str	r3, [r7, #32]
   14d74:	f107 0220 	add.w	r2, r7, #32
   14d78:	f01c f8d4 	bl	30f24 <z_log_msg_static_create.constprop.0>
	bt_conn_unref(conn);
   14d7c:	4628      	mov	r0, r5
   14d7e:	f001 ff81 	bl	16c84 <bt_conn_unref>
   14d82:	e7db      	b.n	14d3c <le_ltk_request+0x38>
   14d84:	2112      	movs	r1, #18
   14d86:	300c      	adds	r0, #12
   14d88:	f009 fb86 	bl	1e498 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   14d8c:	4603      	mov	r3, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   14d8e:	463a      	mov	r2, r7
   14d90:	f823 6b02 	strh.w	r6, [r3], #2
   14d94:	f107 0c10 	add.w	ip, r7, #16
   14d98:	4616      	mov	r6, r2
   14d9a:	ce03      	ldmia	r6!, {r0, r1}
   14d9c:	4566      	cmp	r6, ip
   14d9e:	6018      	str	r0, [r3, #0]
   14da0:	6059      	str	r1, [r3, #4]
   14da2:	4632      	mov	r2, r6
   14da4:	f103 0308 	add.w	r3, r3, #8
   14da8:	d1f6      	bne.n	14d98 <le_ltk_request+0x94>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   14daa:	4621      	mov	r1, r4
   14dac:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   14db0:	f7ff ff00 	bl	14bb4 <bt_hci_cmd_send>
   14db4:	e7e2      	b.n	14d7c <le_ltk_request+0x78>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   14db6:	2102      	movs	r1, #2
   14db8:	f242 001b 	movw	r0, #8219	; 0x201b
   14dbc:	f7ff fb02 	bl	143c4 <bt_hci_cmd_create>
	if (!buf) {
   14dc0:	4604      	mov	r4, r0
   14dc2:	2800      	cmp	r0, #0
   14dc4:	d0cf      	beq.n	14d66 <le_ltk_request+0x62>
   14dc6:	2102      	movs	r1, #2
   14dc8:	300c      	adds	r0, #12
   14dca:	f009 fb65 	bl	1e498 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   14dce:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
   14dd0:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   14dd2:	f242 001b 	movw	r0, #8219	; 0x201b
   14dd6:	e7eb      	b.n	14db0 <le_ltk_request+0xac>
   14dd8:	0003b92c 	.word	0x0003b92c
   14ddc:	000378f0 	.word	0x000378f0
   14de0:	0003bccc 	.word	0x0003bccc

00014de4 <le_conn_param_req>:
{
   14de4:	b5f0      	push	{r4, r5, r6, r7, lr}
   14de6:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   14de8:	68c3      	ldr	r3, [r0, #12]
{
   14dea:	af00      	add	r7, sp, #0
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   14dec:	78d9      	ldrb	r1, [r3, #3]
   14dee:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   14df0:	881e      	ldrh	r6, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   14df2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   14df6:	803a      	strh	r2, [r7, #0]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   14df8:	7959      	ldrb	r1, [r3, #5]
   14dfa:	791a      	ldrb	r2, [r3, #4]
	handle = sys_le16_to_cpu(evt->handle);
   14dfc:	b2b4      	uxth	r4, r6
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   14dfe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   14e02:	807a      	strh	r2, [r7, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   14e04:	799a      	ldrb	r2, [r3, #6]
   14e06:	79d9      	ldrb	r1, [r3, #7]
	conn = bt_conn_lookup_handle(handle);
   14e08:	4620      	mov	r0, r4
	param.latency = sys_le16_to_cpu(evt->latency);
   14e0a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   14e0e:	80ba      	strh	r2, [r7, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   14e10:	7a1a      	ldrb	r2, [r3, #8]
   14e12:	7a5b      	ldrb	r3, [r3, #9]
   14e14:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   14e18:	80fb      	strh	r3, [r7, #6]
	conn = bt_conn_lookup_handle(handle);
   14e1a:	f001 ff57 	bl	16ccc <bt_conn_lookup_handle>
	if (!conn) {
   14e1e:	4605      	mov	r5, r0
   14e20:	b9a8      	cbnz	r0, 14e4e <le_conn_param_req+0x6a>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   14e22:	466d      	mov	r5, sp
   14e24:	b088      	sub	sp, #32
   14e26:	466a      	mov	r2, sp
   14e28:	4b1e      	ldr	r3, [pc, #120]	; (14ea4 <le_conn_param_req+0xc0>)
   14e2a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14e2e:	e9c2 3405 	strd	r3, r4, [r2, #20]
   14e32:	2303      	movs	r3, #3
   14e34:	481c      	ldr	r0, [pc, #112]	; (14ea8 <le_conn_param_req+0xc4>)
   14e36:	f842 3f10 	str.w	r3, [r2, #16]!
   14e3a:	f01c f873 	bl	30f24 <z_log_msg_static_create.constprop.0>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   14e3e:	2102      	movs	r1, #2
   14e40:	46ad      	mov	sp, r5
   14e42:	4620      	mov	r0, r4
   14e44:	f01c f90e 	bl	31064 <le_conn_param_neg_reply>
}
   14e48:	370c      	adds	r7, #12
   14e4a:	46bd      	mov	sp, r7
   14e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   14e4e:	4639      	mov	r1, r7
   14e50:	f002 f91a 	bl	17088 <le_param_req>
   14e54:	b938      	cbnz	r0, 14e66 <le_conn_param_req+0x82>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   14e56:	211e      	movs	r1, #30
   14e58:	4620      	mov	r0, r4
   14e5a:	f01c f903 	bl	31064 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   14e5e:	4628      	mov	r0, r5
   14e60:	f001 ff10 	bl	16c84 <bt_conn_unref>
   14e64:	e7f0      	b.n	14e48 <le_conn_param_req+0x64>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   14e66:	210e      	movs	r1, #14
   14e68:	f242 0020 	movw	r0, #8224	; 0x2020
   14e6c:	f7ff faaa 	bl	143c4 <bt_hci_cmd_create>
	if (!buf) {
   14e70:	4604      	mov	r4, r0
   14e72:	2800      	cmp	r0, #0
   14e74:	d0f3      	beq.n	14e5e <le_conn_param_req+0x7a>
   14e76:	210e      	movs	r1, #14
   14e78:	300c      	adds	r0, #12
   14e7a:	f009 fb0d 	bl	1e498 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   14e7e:	2300      	movs	r3, #0
	cp->handle = sys_cpu_to_le16(handle);
   14e80:	8006      	strh	r6, [r0, #0]
   14e82:	f8c0 300a 	str.w	r3, [r0, #10]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   14e86:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   14e88:	4621      	mov	r1, r4
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   14e8a:	8043      	strh	r3, [r0, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   14e8c:	887b      	ldrh	r3, [r7, #2]
   14e8e:	8083      	strh	r3, [r0, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   14e90:	88bb      	ldrh	r3, [r7, #4]
   14e92:	80c3      	strh	r3, [r0, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   14e94:	88fb      	ldrh	r3, [r7, #6]
   14e96:	8103      	strh	r3, [r0, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   14e98:	f242 0020 	movw	r0, #8224	; 0x2020
   14e9c:	f7ff fe8a 	bl	14bb4 <bt_hci_cmd_send>
   14ea0:	e7dd      	b.n	14e5e <le_conn_param_req+0x7a>
   14ea2:	bf00      	nop
   14ea4:	0003b92c 	.word	0x0003b92c
   14ea8:	000378f0 	.word	0x000378f0

00014eac <hci_tx_thread>:
{
   14eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   14eb0:	f8df 8154 	ldr.w	r8, [pc, #340]	; 15008 <hci_tx_thread+0x15c>
{
   14eb4:	b087      	sub	sp, #28
		BT_ASSERT(err == 0);
   14eb6:	f8df 9154 	ldr.w	r9, [pc, #340]	; 1500c <hci_tx_thread+0x160>
{
   14eba:	af00      	add	r7, sp, #0
		events[0].state = K_POLL_STATE_NOT_READY;
   14ebc:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   14ec0:	4853      	ldr	r0, [pc, #332]	; (15010 <hci_tx_thread+0x164>)
		events[0].state = K_POLL_STATE_NOT_READY;
   14ec2:	f36f 3394 	bfc	r3, #14, #7
   14ec6:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   14eca:	f001 fe69 	bl	16ba0 <bt_conn_prepare_events>
   14ece:	1c45      	adds	r5, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
   14ed0:	f04f 32ff 	mov.w	r2, #4294967295
   14ed4:	f04f 33ff 	mov.w	r3, #4294967295
   14ed8:	4629      	mov	r1, r5
   14eda:	484b      	ldr	r0, [pc, #300]	; (15008 <hci_tx_thread+0x15c>)
   14edc:	f017 f952 	bl	2c184 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   14ee0:	b160      	cbz	r0, 14efc <hci_tx_thread+0x50>
   14ee2:	f640 23c8 	movw	r3, #2760	; 0xac8
   14ee6:	464a      	mov	r2, r9
   14ee8:	494a      	ldr	r1, [pc, #296]	; (15014 <hci_tx_thread+0x168>)
   14eea:	484b      	ldr	r0, [pc, #300]	; (15018 <hci_tx_thread+0x16c>)
   14eec:	f01a fa6a 	bl	2f3c4 <assert_print>
   14ef0:	4040      	eors	r0, r0
   14ef2:	f380 8811 	msr	BASEPRI, r0
   14ef6:	f04f 0003 	mov.w	r0, #3
   14efa:	df02      	svc	2
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   14efc:	f04f 0a03 	mov.w	sl, #3
{
   14f00:	4e41      	ldr	r6, [pc, #260]	; (15008 <hci_tx_thread+0x15c>)
	for (; count; ev++, count--) {
   14f02:	b915      	cbnz	r5, 14f0a <hci_tx_thread+0x5e>
	z_impl_k_yield();
   14f04:	f016 f8e8 	bl	2b0d8 <z_impl_k_yield>
	while (1) {
   14f08:	e7d8      	b.n	14ebc <hci_tx_thread+0x10>
		switch (ev->state) {
   14f0a:	68f3      	ldr	r3, [r6, #12]
   14f0c:	f3c3 3386 	ubfx	r3, r3, #14, #7
   14f10:	2b02      	cmp	r3, #2
   14f12:	d960      	bls.n	14fd6 <hci_tx_thread+0x12a>
   14f14:	2b04      	cmp	r3, #4
   14f16:	d168      	bne.n	14fea <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
   14f18:	7b33      	ldrb	r3, [r6, #12]
   14f1a:	2b00      	cmp	r3, #0
   14f1c:	d15e      	bne.n	14fdc <hci_tx_thread+0x130>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   14f1e:	2200      	movs	r2, #0
   14f20:	2300      	movs	r3, #0
   14f22:	483e      	ldr	r0, [pc, #248]	; (1501c <hci_tx_thread+0x170>)
   14f24:	f01e f902 	bl	3312c <net_buf_get>
	BT_ASSERT(buf);
   14f28:	4604      	mov	r4, r0
   14f2a:	b960      	cbnz	r0, 14f46 <hci_tx_thread+0x9a>
   14f2c:	f640 235a 	movw	r3, #2650	; 0xa5a
   14f30:	464a      	mov	r2, r9
   14f32:	493b      	ldr	r1, [pc, #236]	; (15020 <hci_tx_thread+0x174>)
   14f34:	4838      	ldr	r0, [pc, #224]	; (15018 <hci_tx_thread+0x16c>)
   14f36:	f01a fa45 	bl	2f3c4 <assert_print>
   14f3a:	4040      	eors	r0, r0
   14f3c:	f380 8811 	msr	BASEPRI, r0
   14f40:	f04f 0003 	mov.w	r0, #3
   14f44:	df02      	svc	2
	if (bt_dev.sent_cmd) {
   14f46:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 15024 <hci_tx_thread+0x178>
	return z_impl_k_sem_take(sem, timeout);
   14f4a:	f04f 33ff 	mov.w	r3, #4294967295
   14f4e:	f04f 32ff 	mov.w	r2, #4294967295
   14f52:	4835      	ldr	r0, [pc, #212]	; (15028 <hci_tx_thread+0x17c>)
   14f54:	f014 fbec 	bl	29730 <z_impl_k_sem_take>
   14f58:	f8db 3140 	ldr.w	r3, [fp, #320]	; 0x140
   14f5c:	b18b      	cbz	r3, 14f82 <hci_tx_thread+0xd6>
		LOG_ERR("Uncleared pending sent_cmd");
   14f5e:	4b33      	ldr	r3, [pc, #204]	; (1502c <hci_tx_thread+0x180>)
   14f60:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14f64:	617b      	str	r3, [r7, #20]
   14f66:	2302      	movs	r3, #2
   14f68:	4831      	ldr	r0, [pc, #196]	; (15030 <hci_tx_thread+0x184>)
   14f6a:	f107 0210 	add.w	r2, r7, #16
   14f6e:	613b      	str	r3, [r7, #16]
   14f70:	f01b ffd8 	bl	30f24 <z_log_msg_static_create.constprop.0>
		net_buf_unref(bt_dev.sent_cmd);
   14f74:	f8db 0140 	ldr.w	r0, [fp, #320]	; 0x140
   14f78:	f009 f908 	bl	1e18c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   14f7c:	2300      	movs	r3, #0
   14f7e:	f8cb 3140 	str.w	r3, [fp, #320]	; 0x140
	bt_dev.sent_cmd = net_buf_ref(buf);
   14f82:	4620      	mov	r0, r4
   14f84:	f009 f946 	bl	1e214 <net_buf_ref>
   14f88:	f8cb 0140 	str.w	r0, [fp, #320]	; 0x140
	err = bt_send(buf);
   14f8c:	4620      	mov	r0, r4
   14f8e:	f7ff fe09 	bl	14ba4 <bt_send>
	if (err) {
   14f92:	b300      	cbz	r0, 14fd6 <hci_tx_thread+0x12a>
		LOG_ERR("Unable to send to driver (err %d)", err);
   14f94:	46eb      	mov	fp, sp
   14f96:	b088      	sub	sp, #32
   14f98:	466a      	mov	r2, sp
   14f9a:	4b26      	ldr	r3, [pc, #152]	; (15034 <hci_tx_thread+0x188>)
   14f9c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14fa0:	e9c2 3005 	strd	r3, r0, [r2, #20]
   14fa4:	2303      	movs	r3, #3
   14fa6:	4822      	ldr	r0, [pc, #136]	; (15030 <hci_tx_thread+0x184>)
   14fa8:	f842 3f10 	str.w	r3, [r2, #16]!
   14fac:	f01b ffba 	bl	30f24 <z_log_msg_static_create.constprop.0>
   14fb0:	46dd      	mov	sp, fp
	z_impl_k_sem_give(sem);
   14fb2:	481d      	ldr	r0, [pc, #116]	; (15028 <hci_tx_thread+0x17c>)
   14fb4:	f014 fb78 	bl	296a8 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   14fb8:	4620      	mov	r0, r4
   14fba:	f008 ffa1 	bl	1df00 <net_buf_id>
   14fbe:	220c      	movs	r2, #12
   14fc0:	4b1d      	ldr	r3, [pc, #116]	; (15038 <hci_tx_thread+0x18c>)
   14fc2:	211f      	movs	r1, #31
   14fc4:	fb02 3000 	mla	r0, r2, r0, r3
   14fc8:	4622      	mov	r2, r4
   14fca:	8840      	ldrh	r0, [r0, #2]
   14fcc:	f7ff f83e 	bl	1404c <hci_cmd_done>
		net_buf_unref(buf);
   14fd0:	4620      	mov	r0, r4
   14fd2:	f009 f8db 	bl	1e18c <net_buf_unref>
	for (; count; ev++, count--) {
   14fd6:	3614      	adds	r6, #20
   14fd8:	3d01      	subs	r5, #1
   14fda:	e792      	b.n	14f02 <hci_tx_thread+0x56>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   14fdc:	2b01      	cmp	r3, #1
   14fde:	d1fa      	bne.n	14fd6 <hci_tx_thread+0x12a>
					conn = CONTAINER_OF(ev->fifo,
   14fe0:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   14fe2:	3838      	subs	r0, #56	; 0x38
   14fe4:	f002 fb74 	bl	176d0 <bt_conn_process_tx>
   14fe8:	e7f5      	b.n	14fd6 <hci_tx_thread+0x12a>
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   14fea:	466c      	mov	r4, sp
   14fec:	b088      	sub	sp, #32
   14fee:	466a      	mov	r2, sp
   14ff0:	4912      	ldr	r1, [pc, #72]	; (1503c <hci_tx_thread+0x190>)
   14ff2:	480f      	ldr	r0, [pc, #60]	; (15030 <hci_tx_thread+0x184>)
		switch (ev->state) {
   14ff4:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   14ff8:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   14ffc:	f842 af10 	str.w	sl, [r2, #16]!
   15000:	f01b ff90 	bl	30f24 <z_log_msg_static_create.constprop.0>
   15004:	46a5      	mov	sp, r4
   15006:	e7e6      	b.n	14fd6 <hci_tx_thread+0x12a>
   15008:	2000c848 	.word	0x2000c848
   1500c:	0003bac9 	.word	0x0003bac9
   15010:	2000c85c 	.word	0x2000c85c
   15014:	00039fbd 	.word	0x00039fbd
   15018:	00039995 	.word	0x00039995
   1501c:	2000c6c4 	.word	0x2000c6c4
   15020:	0003db82 	.word	0x0003db82
   15024:	2000c580 	.word	0x2000c580
   15028:	2000c6a8 	.word	0x2000c6a8
   1502c:	0003bce3 	.word	0x0003bce3
   15030:	000378f0 	.word	0x000378f0
   15034:	0003bc32 	.word	0x0003bc32
   15038:	2000e5b8 	.word	0x2000e5b8
   1503c:	0003bcfe 	.word	0x0003bcfe

00015040 <hci_event_prio>:
{
   15040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15044:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   15046:	f100 060c 	add.w	r6, r0, #12
	state->offset = net_buf_simple_headroom(buf);
   1504a:	4630      	mov	r0, r6
   1504c:	f01e f886 	bl	3315c <net_buf_simple_headroom>
	state->len = buf->len;
   15050:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
   15054:	4605      	mov	r5, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   15056:	f1b8 0f01 	cmp.w	r8, #1
   1505a:	d80c      	bhi.n	15076 <hci_event_prio+0x36>
   1505c:	f640 636f 	movw	r3, #3695	; 0xe6f
   15060:	4a1b      	ldr	r2, [pc, #108]	; (150d0 <hci_event_prio+0x90>)
   15062:	491c      	ldr	r1, [pc, #112]	; (150d4 <hci_event_prio+0x94>)
   15064:	481c      	ldr	r0, [pc, #112]	; (150d8 <hci_event_prio+0x98>)
   15066:	f01a f9ad 	bl	2f3c4 <assert_print>
   1506a:	4040      	eors	r0, r0
   1506c:	f380 8811 	msr	BASEPRI, r0
   15070:	f04f 0003 	mov.w	r0, #3
   15074:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   15076:	4630      	mov	r0, r6
   15078:	2102      	movs	r1, #2
   1507a:	f009 f9ef 	bl	1e45c <net_buf_simple_pull_mem>
   1507e:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   15080:	7800      	ldrb	r0, [r0, #0]
   15082:	f01b ff0d 	bl	30ea0 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   15086:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   15088:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   1508a:	d40c      	bmi.n	150a6 <hci_event_prio+0x66>
   1508c:	f640 6373 	movw	r3, #3699	; 0xe73
   15090:	4a0f      	ldr	r2, [pc, #60]	; (150d0 <hci_event_prio+0x90>)
   15092:	4912      	ldr	r1, [pc, #72]	; (150dc <hci_event_prio+0x9c>)
   15094:	4810      	ldr	r0, [pc, #64]	; (150d8 <hci_event_prio+0x98>)
   15096:	f01a f995 	bl	2f3c4 <assert_print>
   1509a:	4040      	eors	r0, r0
   1509c:	f380 8811 	msr	BASEPRI, r0
   150a0:	f04f 0003 	mov.w	r0, #3
   150a4:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   150a6:	2305      	movs	r3, #5
   150a8:	4621      	mov	r1, r4
   150aa:	4a0d      	ldr	r2, [pc, #52]	; (150e0 <hci_event_prio+0xa0>)
   150ac:	7838      	ldrb	r0, [r7, #0]
   150ae:	f7fe fee7 	bl	13e80 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   150b2:	07b3      	lsls	r3, r6, #30
   150b4:	d507      	bpl.n	150c6 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   150b6:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   150b8:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   150bc:	fa13 f585 	uxtah	r5, r3, r5
   150c0:	60e5      	str	r5, [r4, #12]
}
   150c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   150c6:	4620      	mov	r0, r4
}
   150c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   150cc:	f009 b85e 	b.w	1e18c <net_buf_unref>
   150d0:	0003bac9 	.word	0x0003bac9
   150d4:	0003bd1f 	.word	0x0003bd1f
   150d8:	00039995 	.word	0x00039995
   150dc:	0003bd38 	.word	0x0003bd38
   150e0:	00038000 	.word	0x00038000

000150e4 <bt_recv>:
{
   150e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   150e6:	7e03      	ldrb	r3, [r0, #24]
   150e8:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
   150ea:	2b01      	cmp	r3, #1
{
   150ec:	af00      	add	r7, sp, #0
	switch (bt_buf_get_type(buf)) {
   150ee:	d054      	beq.n	1519a <bt_recv+0xb6>
   150f0:	2b03      	cmp	r3, #3
   150f2:	f040 8081 	bne.w	151f8 <bt_recv+0x114>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   150f6:	8a03      	ldrh	r3, [r0, #16]
   150f8:	2b03      	cmp	r3, #3
   150fa:	d80c      	bhi.n	15116 <bt_recv+0x32>
   150fc:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
   15100:	4a48      	ldr	r2, [pc, #288]	; (15224 <bt_recv+0x140>)
   15102:	4949      	ldr	r1, [pc, #292]	; (15228 <bt_recv+0x144>)
   15104:	4849      	ldr	r0, [pc, #292]	; (1522c <bt_recv+0x148>)
   15106:	f01a f95d 	bl	2f3c4 <assert_print>
   1510a:	4040      	eors	r0, r0
   1510c:	f380 8811 	msr	BASEPRI, r0
   15110:	f04f 0003 	mov.w	r0, #3
   15114:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   15116:	2104      	movs	r1, #4
   15118:	f104 000c 	add.w	r0, r4, #12
   1511c:	f009 f99e 	bl	1e45c <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   15120:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   15122:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   15124:	8806      	ldrh	r6, [r0, #0]
	if (buf->len != len) {
   15126:	8a21      	ldrh	r1, [r4, #16]
	acl(buf)->handle = bt_acl_handle(handle);
   15128:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   1512c:	428b      	cmp	r3, r1
	acl(buf)->handle = bt_acl_handle(handle);
   1512e:	8360      	strh	r0, [r4, #26]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   15130:	7662      	strb	r2, [r4, #25]
	if (buf->len != len) {
   15132:	d013      	beq.n	1515c <bt_recv+0x78>
		LOG_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   15134:	466d      	mov	r5, sp
   15136:	b088      	sub	sp, #32
   15138:	466a      	mov	r2, sp
   1513a:	483d      	ldr	r0, [pc, #244]	; (15230 <bt_recv+0x14c>)
   1513c:	61d3      	str	r3, [r2, #28]
   1513e:	2304      	movs	r3, #4
   15140:	e9c2 0105 	strd	r0, r1, [r2, #20]
   15144:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   15148:	f842 3f10 	str.w	r3, [r2, #16]!
		LOG_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   1514c:	4839      	ldr	r0, [pc, #228]	; (15234 <bt_recv+0x150>)
   1514e:	f01b fee9 	bl	30f24 <z_log_msg_static_create.constprop.0>
   15152:	46ad      	mov	sp, r5
	net_buf_unref(buf);
   15154:	4620      	mov	r0, r4
   15156:	f009 f819 	bl	1e18c <net_buf_unref>
}
   1515a:	e01b      	b.n	15194 <bt_recv+0xb0>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   1515c:	f001 fdb6 	bl	16ccc <bt_conn_lookup_handle>
	if (!conn) {
   15160:	4605      	mov	r5, r0
   15162:	b960      	cbnz	r0, 1517e <bt_recv+0x9a>
		LOG_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   15164:	466d      	mov	r5, sp
   15166:	b088      	sub	sp, #32
   15168:	466a      	mov	r2, sp
   1516a:	8b63      	ldrh	r3, [r4, #26]
   1516c:	4932      	ldr	r1, [pc, #200]	; (15238 <bt_recv+0x154>)
   1516e:	e9c2 1305 	strd	r1, r3, [r2, #20]
   15172:	2303      	movs	r3, #3
   15174:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15178:	f842 3f10 	str.w	r3, [r2, #16]!
   1517c:	e7e6      	b.n	1514c <bt_recv+0x68>
	acl(buf)->index = bt_conn_index(conn);
   1517e:	f001 fec5 	bl	16f0c <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   15182:	4621      	mov	r1, r4
	acl(buf)->index = bt_conn_index(conn);
   15184:	7660      	strb	r0, [r4, #25]
	bt_conn_recv(conn, buf, flags);
   15186:	0b32      	lsrs	r2, r6, #12
   15188:	4628      	mov	r0, r5
   1518a:	f001 fbfd 	bl	16988 <bt_conn_recv>
	bt_conn_unref(conn);
   1518e:	4628      	mov	r0, r5
   15190:	f001 fd78 	bl	16c84 <bt_conn_unref>
		return 0;
   15194:	2000      	movs	r0, #0
}
   15196:	46bd      	mov	sp, r7
   15198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   1519a:	8a03      	ldrh	r3, [r0, #16]
   1519c:	2b01      	cmp	r3, #1
   1519e:	d80c      	bhi.n	151ba <bt_recv+0xd6>
   151a0:	f640 2347 	movw	r3, #2631	; 0xa47
   151a4:	4a1f      	ldr	r2, [pc, #124]	; (15224 <bt_recv+0x140>)
   151a6:	4920      	ldr	r1, [pc, #128]	; (15228 <bt_recv+0x144>)
   151a8:	4820      	ldr	r0, [pc, #128]	; (1522c <bt_recv+0x148>)
   151aa:	f01a f90b 	bl	2f3c4 <assert_print>
   151ae:	4040      	eors	r0, r0
   151b0:	f380 8811 	msr	BASEPRI, r0
   151b4:	f04f 0003 	mov.w	r0, #3
   151b8:	df02      	svc	2
   151ba:	2102      	movs	r1, #2
   151bc:	f104 000c 	add.w	r0, r4, #12
   151c0:	f009 f94c 	bl	1e45c <net_buf_simple_pull_mem>
   151c4:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   151c6:	7800      	ldrb	r0, [r0, #0]
   151c8:	f01b fe6a 	bl	30ea0 <bt_hci_evt_get_flags>
   151cc:	0783      	lsls	r3, r0, #30
   151ce:	d40c      	bmi.n	151ea <bt_recv+0x106>
   151d0:	f640 234b 	movw	r3, #2635	; 0xa4b
   151d4:	4a13      	ldr	r2, [pc, #76]	; (15224 <bt_recv+0x140>)
   151d6:	4919      	ldr	r1, [pc, #100]	; (1523c <bt_recv+0x158>)
   151d8:	4814      	ldr	r0, [pc, #80]	; (1522c <bt_recv+0x148>)
   151da:	f01a f8f3 	bl	2f3c4 <assert_print>
   151de:	4040      	eors	r0, r0
   151e0:	f380 8811 	msr	BASEPRI, r0
   151e4:	f04f 0003 	mov.w	r0, #3
   151e8:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   151ea:	2306      	movs	r3, #6
   151ec:	4621      	mov	r1, r4
   151ee:	4a14      	ldr	r2, [pc, #80]	; (15240 <bt_recv+0x15c>)
   151f0:	7828      	ldrb	r0, [r5, #0]
   151f2:	f7fe fe45 	bl	13e80 <handle_event>
   151f6:	e7ad      	b.n	15154 <bt_recv+0x70>
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   151f8:	466d      	mov	r5, sp
   151fa:	b088      	sub	sp, #32
   151fc:	466a      	mov	r2, sp
   151fe:	4911      	ldr	r1, [pc, #68]	; (15244 <bt_recv+0x160>)
   15200:	480c      	ldr	r0, [pc, #48]	; (15234 <bt_recv+0x150>)
	switch (bt_buf_get_type(buf)) {
   15202:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   15206:	2303      	movs	r3, #3
   15208:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1520c:	f842 3f10 	str.w	r3, [r2, #16]!
   15210:	f01b fe88 	bl	30f24 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   15214:	4620      	mov	r0, r4
   15216:	46ad      	mov	sp, r5
   15218:	f008 ffb8 	bl	1e18c <net_buf_unref>
		return -EINVAL;
   1521c:	f06f 0015 	mvn.w	r0, #21
   15220:	e7b9      	b.n	15196 <bt_recv+0xb2>
   15222:	bf00      	nop
   15224:	0003bac9 	.word	0x0003bac9
   15228:	0003bd1f 	.word	0x0003bd1f
   1522c:	00039995 	.word	0x00039995
   15230:	0003bd51 	.word	0x0003bd51
   15234:	000378f0 	.word	0x000378f0
   15238:	0003bd75 	.word	0x0003bd75
   1523c:	0003bd97 	.word	0x0003bd97
   15240:	00038028 	.word	0x00038028
   15244:	0003bdc5 	.word	0x0003bdc5

00015248 <bt_recv_prio>:
{
   15248:	b510      	push	{r4, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
   1524a:	7e03      	ldrb	r3, [r0, #24]
{
   1524c:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
   1524e:	2b01      	cmp	r3, #1
   15250:	d00c      	beq.n	1526c <bt_recv_prio+0x24>
   15252:	f640 63c5 	movw	r3, #3781	; 0xec5
   15256:	4a08      	ldr	r2, [pc, #32]	; (15278 <bt_recv_prio+0x30>)
   15258:	4908      	ldr	r1, [pc, #32]	; (1527c <bt_recv_prio+0x34>)
   1525a:	4809      	ldr	r0, [pc, #36]	; (15280 <bt_recv_prio+0x38>)
   1525c:	f01a f8b2 	bl	2f3c4 <assert_print>
   15260:	4040      	eors	r0, r0
   15262:	f380 8811 	msr	BASEPRI, r0
   15266:	f04f 0003 	mov.w	r0, #3
   1526a:	df02      	svc	2
	hci_event_prio(buf);
   1526c:	4620      	mov	r0, r4
   1526e:	f7ff fee7 	bl	15040 <hci_event_prio>
}
   15272:	2000      	movs	r0, #0
   15274:	bd10      	pop	{r4, pc}
   15276:	bf00      	nop
   15278:	0003bac9 	.word	0x0003bac9
   1527c:	0003bdd9 	.word	0x0003bdd9
   15280:	00039995 	.word	0x00039995

00015284 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   15284:	4a08      	ldr	r2, [pc, #32]	; (152a8 <bt_hci_driver_register+0x24>)
{
   15286:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   15288:	f8d2 0160 	ldr.w	r0, [r2, #352]	; 0x160
   1528c:	b930      	cbnz	r0, 1529c <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   1528e:	68d9      	ldr	r1, [r3, #12]
   15290:	b139      	cbz	r1, 152a2 <bt_hci_driver_register+0x1e>
   15292:	6959      	ldr	r1, [r3, #20]
   15294:	b129      	cbz	r1, 152a2 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   15296:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
	return 0;
   1529a:	4770      	bx	lr
		return -EALREADY;
   1529c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   152a0:	4770      	bx	lr
		return -EINVAL;
   152a2:	f06f 0015 	mvn.w	r0, #21
}
   152a6:	4770      	bx	lr
   152a8:	2000c580 	.word	0x2000c580

000152ac <bt_finalize_init>:
{
   152ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   152b0:	2104      	movs	r1, #4
   152b2:	af00      	add	r7, sp, #0
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   152b4:	4c3e      	ldr	r4, [pc, #248]	; (153b0 <bt_finalize_init+0x104>)
   152b6:	483f      	ldr	r0, [pc, #252]	; (153b4 <bt_finalize_init+0x108>)
   152b8:	f01b fe1d 	bl	30ef6 <atomic_or>
		bt_le_scan_update(false);
   152bc:	2000      	movs	r0, #0
   152be:	f000 fdb1 	bl	15e24 <bt_le_scan_update>
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   152c2:	4d3d      	ldr	r5, [pc, #244]	; (153b8 <bt_finalize_init+0x10c>)
   152c4:	79e2      	ldrb	r2, [r4, #7]
   152c6:	4b3d      	ldr	r3, [pc, #244]	; (153bc <bt_finalize_init+0x110>)
   152c8:	4620      	mov	r0, r4
   152ca:	2a01      	cmp	r2, #1
   152cc:	bf88      	it	hi
   152ce:	461d      	movhi	r5, r3
   152d0:	466e      	mov	r6, sp
   152d2:	f7fe fa8f 	bl	137f4 <bt_addr_le_str>
   152d6:	b08a      	sub	sp, #40	; 0x28
   152d8:	466a      	mov	r2, sp
   152da:	4b39      	ldr	r3, [pc, #228]	; (153c0 <bt_finalize_init+0x114>)
   152dc:	46a3      	mov	fp, r4
   152de:	e9c2 3505 	strd	r3, r5, [r2, #20]
	for (i = 1; i < bt_dev.id_count; i++) {
   152e2:	2501      	movs	r5, #1
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   152e4:	4b37      	ldr	r3, [pc, #220]	; (153c4 <bt_finalize_init+0x118>)
   152e6:	61d0      	str	r0, [r2, #28]
   152e8:	6213      	str	r3, [r2, #32]
   152ea:	4b37      	ldr	r3, [pc, #220]	; (153c8 <bt_finalize_init+0x11c>)
   152ec:	f44f 5123 	mov.w	r1, #10432	; 0x28c0
   152f0:	4836      	ldr	r0, [pc, #216]	; (153cc <bt_finalize_init+0x120>)
   152f2:	f842 3f10 	str.w	r3, [r2, #16]!
   152f6:	f01b fe15 	bl	30f24 <z_log_msg_static_create.constprop.0>
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
   152fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 153d0 <bt_finalize_init+0x124>
   152fe:	46b5      	mov	sp, r6
   15300:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 153cc <bt_finalize_init+0x120>
   15304:	4e33      	ldr	r6, [pc, #204]	; (153d4 <bt_finalize_init+0x128>)
	for (i = 1; i < bt_dev.id_count; i++) {
   15306:	79e3      	ldrb	r3, [r4, #7]
   15308:	f10b 0b07 	add.w	fp, fp, #7
   1530c:	429d      	cmp	r5, r3
   1530e:	db38      	blt.n	15382 <bt_finalize_init+0xd6>
	LOG_INF("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
   15310:	f894 5070 	ldrb.w	r5, [r4, #112]	; 0x70
   15314:	466e      	mov	r6, sp
   15316:	4628      	mov	r0, r5
   15318:	f7fe fcf2 	bl	13d00 <ver_str>
   1531c:	b08c      	sub	sp, #48	; 0x30
   1531e:	466a      	mov	r2, sp
   15320:	f8b4 1072 	ldrh.w	r1, [r4, #114]	; 0x72
   15324:	f8b4 3076 	ldrh.w	r3, [r4, #118]	; 0x76
   15328:	e9c2 5107 	strd	r5, r1, [r2, #28]
   1532c:	f44f 7500 	mov.w	r5, #512	; 0x200
   15330:	6253      	str	r3, [r2, #36]	; 0x24
   15332:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 153d8 <bt_finalize_init+0x12c>
   15336:	4b29      	ldr	r3, [pc, #164]	; (153dc <bt_finalize_init+0x130>)
   15338:	e9c2 c005 	strd	ip, r0, [r2, #20]
   1533c:	8515      	strh	r5, [r2, #40]	; 0x28
   1533e:	f44f 5153 	mov.w	r1, #13504	; 0x34c0
   15342:	f842 3f10 	str.w	r3, [r2, #16]!
   15346:	4821      	ldr	r0, [pc, #132]	; (153cc <bt_finalize_init+0x120>)
   15348:	f01b fdec 	bl	30f24 <z_log_msg_static_create.constprop.0>
   1534c:	46b5      	mov	sp, r6
	LOG_INF("LMP: version %s (0x%02x) subver 0x%04x", ver_str(bt_dev.lmp_version),
   1534e:	f894 6071 	ldrb.w	r6, [r4, #113]	; 0x71
   15352:	4630      	mov	r0, r6
   15354:	f7fe fcd4 	bl	13d00 <ver_str>
   15358:	b08a      	sub	sp, #40	; 0x28
   1535a:	466a      	mov	r2, sp
   1535c:	f8b4 3074 	ldrh.w	r3, [r4, #116]	; 0x74
   15360:	491f      	ldr	r1, [pc, #124]	; (153e0 <bt_finalize_init+0x134>)
   15362:	e9c2 6307 	strd	r6, r3, [r2, #28]
   15366:	4b1f      	ldr	r3, [pc, #124]	; (153e4 <bt_finalize_init+0x138>)
   15368:	e9c2 1005 	strd	r1, r0, [r2, #20]
   1536c:	8495      	strh	r5, [r2, #36]	; 0x24
   1536e:	f44f 5133 	mov.w	r1, #11456	; 0x2cc0
   15372:	4816      	ldr	r0, [pc, #88]	; (153cc <bt_finalize_init+0x120>)
   15374:	f842 3f10 	str.w	r3, [r2, #16]!
   15378:	f01b fdd4 	bl	30f24 <z_log_msg_static_create.constprop.0>
}
   1537c:	46bd      	mov	sp, r7
   1537e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
   15382:	4658      	mov	r0, fp
   15384:	f7fe fa36 	bl	137f4 <bt_addr_le_str>
   15388:	46ea      	mov	sl, sp
   1538a:	b08a      	sub	sp, #40	; 0x28
   1538c:	466a      	mov	r2, sp
   1538e:	f240 3301 	movw	r3, #769	; 0x301
   15392:	e9c2 6505 	strd	r6, r5, [r2, #20]
   15396:	61d0      	str	r0, [r2, #28]
   15398:	8413      	strh	r3, [r2, #32]
   1539a:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
   1539e:	4648      	mov	r0, r9
   153a0:	f842 8f10 	str.w	r8, [r2, #16]!
   153a4:	f01b fdbe 	bl	30f24 <z_log_msg_static_create.constprop.0>
	for (i = 1; i < bt_dev.id_count; i++) {
   153a8:	3501      	adds	r5, #1
   153aa:	46d5      	mov	sp, sl
   153ac:	e7ab      	b.n	15306 <bt_finalize_init+0x5a>
   153ae:	bf00      	nop
   153b0:	2000c580 	.word	0x2000c580
   153b4:	2000c654 	.word	0x2000c654
   153b8:	0003a4ea 	.word	0x0003a4ea
   153bc:	0003bdfc 	.word	0x0003bdfc
   153c0:	0003be00 	.word	0x0003be00
   153c4:	03010200 	.word	0x03010200
   153c8:	02000004 	.word	0x02000004
   153cc:	000378f0 	.word	0x000378f0
   153d0:	01000004 	.word	0x01000004
   153d4:	0003be0f 	.word	0x0003be0f
   153d8:	0003be20 	.word	0x0003be20
   153dc:	01000006 	.word	0x01000006
   153e0:	0003be5e 	.word	0x0003be5e
   153e4:	01000005 	.word	0x01000005

000153e8 <bt_init.part.0>:
static int bt_init(void)
   153e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		if (!bt_dev.id_count) {
   153ea:	480c      	ldr	r0, [pc, #48]	; (1541c <bt_init.part.0+0x34>)
   153ec:	79c3      	ldrb	r3, [r0, #7]
   153ee:	b96b      	cbnz	r3, 1540c <bt_init.part.0+0x24>
			LOG_INF("No ID address. App must call settings_load()");
   153f0:	4b0b      	ldr	r3, [pc, #44]	; (15420 <bt_init.part.0+0x38>)
   153f2:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   153f6:	9305      	str	r3, [sp, #20]
   153f8:	2302      	movs	r3, #2
   153fa:	480a      	ldr	r0, [pc, #40]	; (15424 <bt_init.part.0+0x3c>)
   153fc:	aa04      	add	r2, sp, #16
   153fe:	9304      	str	r3, [sp, #16]
   15400:	f01b fd90 	bl	30f24 <z_log_msg_static_create.constprop.0>
}
   15404:	2000      	movs	r0, #0
   15406:	b007      	add	sp, #28
   15408:	f85d fb04 	ldr.w	pc, [sp], #4
   1540c:	2108      	movs	r1, #8
   1540e:	30d4      	adds	r0, #212	; 0xd4
   15410:	f01b fd71 	bl	30ef6 <atomic_or>
	bt_finalize_init();
   15414:	f7ff ff4a 	bl	152ac <bt_finalize_init>
	return 0;
   15418:	e7f4      	b.n	15404 <bt_init.part.0+0x1c>
   1541a:	bf00      	nop
   1541c:	2000c580 	.word	0x2000c580
   15420:	0003be85 	.word	0x0003be85
   15424:	000378f0 	.word	0x000378f0

00015428 <init_work>:

static void init_work(struct k_work *work)
{
   15428:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
   1542a:	f7f4 f885 	bl	9538 <bt_init>
	if (ready_cb) {
   1542e:	4b03      	ldr	r3, [pc, #12]	; (1543c <init_work+0x14>)
   15430:	681b      	ldr	r3, [r3, #0]
   15432:	b113      	cbz	r3, 1543a <init_work+0x12>
		ready_cb(err);
	}
}
   15434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   15438:	4718      	bx	r3
}
   1543a:	bd10      	pop	{r4, pc}
   1543c:	2000e5d0 	.word	0x2000e5d0

00015440 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   15440:	b5f0      	push	{r4, r5, r6, r7, lr}
   15442:	b08f      	sub	sp, #60	; 0x3c
	int err;

	if (!bt_dev.drv) {
   15444:	4d35      	ldr	r5, [pc, #212]	; (1551c <bt_enable+0xdc>)
{
   15446:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   15448:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
{
   1544c:	af08      	add	r7, sp, #32
	if (!bt_dev.drv) {
   1544e:	b983      	cbnz	r3, 15472 <bt_enable+0x32>
		LOG_ERR("No HCI driver registered");
   15450:	4b33      	ldr	r3, [pc, #204]	; (15520 <bt_enable+0xe0>)
		return -ENODEV;
   15452:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("No HCI driver registered");
   15456:	617b      	str	r3, [r7, #20]
   15458:	2302      	movs	r3, #2
   1545a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1545e:	4831      	ldr	r0, [pc, #196]	; (15524 <bt_enable+0xe4>)
   15460:	f107 0210 	add.w	r2, r7, #16
   15464:	613b      	str	r3, [r7, #16]
   15466:	f01b fd5d 	bl	30f24 <z_log_msg_static_create.constprop.0>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   1546a:	4620      	mov	r0, r4
   1546c:	371c      	adds	r7, #28
   1546e:	46bd      	mov	sp, r7
   15470:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15472:	f06f 0102 	mvn.w	r1, #2
   15476:	f105 00d4 	add.w	r0, r5, #212	; 0xd4
   1547a:	f01b fd56 	bl	30f2a <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1547e:	2101      	movs	r1, #1
   15480:	f01b fd39 	bl	30ef6 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   15484:	07c3      	lsls	r3, r0, #31
   15486:	d446      	bmi.n	15516 <bt_enable+0xd6>
		err = bt_settings_init();
   15488:	f7fe fb04 	bl	13a94 <bt_settings_init>
		if (err) {
   1548c:	4604      	mov	r4, r0
   1548e:	2800      	cmp	r0, #0
   15490:	d1eb      	bne.n	1546a <bt_enable+0x2a>
	ready_cb = cb;
   15492:	4b25      	ldr	r3, [pc, #148]	; (15528 <bt_enable+0xe8>)
   15494:	601e      	str	r6, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   15496:	2201      	movs	r2, #1
   15498:	4601      	mov	r1, r0
   1549a:	f505 7094 	add.w	r0, r5, #296	; 0x128
   1549e:	f020 fe67 	bl	36170 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   154a2:	f505 70a2 	add.w	r0, r5, #324	; 0x144
   154a6:	f020 fe3d 	bl	36124 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   154aa:	2200      	movs	r2, #0
   154ac:	2300      	movs	r3, #0
   154ae:	e9cd 2306 	strd	r2, r3, [sp, #24]
   154b2:	f06f 0308 	mvn.w	r3, #8
   154b6:	f44f 7200 	mov.w	r2, #512	; 0x200
   154ba:	e9cd 4302 	strd	r4, r3, [sp, #8]
   154be:	e9cd 4400 	strd	r4, r4, [sp]
   154c2:	4b1a      	ldr	r3, [pc, #104]	; (1552c <bt_enable+0xec>)
   154c4:	491a      	ldr	r1, [pc, #104]	; (15530 <bt_enable+0xf0>)
   154c6:	9404      	str	r4, [sp, #16]
   154c8:	481a      	ldr	r0, [pc, #104]	; (15534 <bt_enable+0xf4>)
   154ca:	f013 fd6b 	bl	28fa4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   154ce:	491a      	ldr	r1, [pc, #104]	; (15538 <bt_enable+0xf8>)
   154d0:	4818      	ldr	r0, [pc, #96]	; (15534 <bt_enable+0xf4>)
   154d2:	f020 fdfe 	bl	360d2 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   154d6:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
   154da:	68db      	ldr	r3, [r3, #12]
   154dc:	4798      	blx	r3
	if (err) {
   154de:	4604      	mov	r4, r0
   154e0:	b178      	cbz	r0, 15502 <bt_enable+0xc2>
		LOG_ERR("HCI driver open failed (%d)", err);
   154e2:	466d      	mov	r5, sp
   154e4:	b088      	sub	sp, #32
   154e6:	462a      	mov	r2, r5
   154e8:	4b14      	ldr	r3, [pc, #80]	; (1553c <bt_enable+0xfc>)
   154ea:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   154ee:	e9c5 3005 	strd	r3, r0, [r5, #20]
   154f2:	2303      	movs	r3, #3
   154f4:	480b      	ldr	r0, [pc, #44]	; (15524 <bt_enable+0xe4>)
   154f6:	f842 3f10 	str.w	r3, [r2, #16]!
   154fa:	f01b fd13 	bl	30f24 <z_log_msg_static_create.constprop.0>
   154fe:	46ad      	mov	sp, r5
		return err;
   15500:	e7b3      	b.n	1546a <bt_enable+0x2a>
	if (!cb) {
   15502:	b91e      	cbnz	r6, 1550c <bt_enable+0xcc>
		return bt_init();
   15504:	f7f4 f818 	bl	9538 <bt_init>
   15508:	4604      	mov	r4, r0
   1550a:	e7ae      	b.n	1546a <bt_enable+0x2a>
	k_work_submit(&bt_dev.init);
   1550c:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
   15510:	f014 fc38 	bl	29d84 <k_work_submit>
	return 0;
   15514:	e7a9      	b.n	1546a <bt_enable+0x2a>
		return -EALREADY;
   15516:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1551a:	e7a6      	b.n	1546a <bt_enable+0x2a>
   1551c:	2000c580 	.word	0x2000c580
   15520:	0003bffb 	.word	0x0003bffb
   15524:	000378f0 	.word	0x000378f0
   15528:	2000e5d0 	.word	0x2000e5d0
   1552c:	00014ead 	.word	0x00014ead
   15530:	200114a0 	.word	0x200114a0
   15534:	2000d7b8 	.word	0x2000d7b8
   15538:	0003c014 	.word	0x0003c014
   1553c:	0003c01a 	.word	0x0003c01a

00015540 <bt_is_ready>:
   15540:	4b02      	ldr	r3, [pc, #8]	; (1554c <bt_is_ready+0xc>)
   15542:	e8d3 0faf 	lda	r0, [r3]
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   15546:	f3c0 0080 	ubfx	r0, r0, #2, #1
   1554a:	4770      	bx	lr
   1554c:	2000c654 	.word	0x2000c654

00015550 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   15550:	4800      	ldr	r0, [pc, #0]	; (15554 <bt_get_name+0x4>)
   15552:	4770      	bx	lr
   15554:	0003c036 	.word	0x0003c036

00015558 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   15558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1555a:	4606      	mov	r6, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   1555c:	2400      	movs	r4, #0
   1555e:	4d09      	ldr	r5, [pc, #36]	; (15584 <id_find+0x2c>)
   15560:	79ef      	ldrb	r7, [r5, #7]
   15562:	b2e3      	uxtb	r3, r4
   15564:	429f      	cmp	r7, r3
   15566:	d802      	bhi.n	1556e <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   15568:	f06f 0001 	mvn.w	r0, #1
   1556c:	e007      	b.n	1557e <id_find+0x26>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
   1556e:	4629      	mov	r1, r5
   15570:	4630      	mov	r0, r6
   15572:	f01b fd9d 	bl	310b0 <bt_addr_le_eq>
   15576:	3507      	adds	r5, #7
   15578:	1c63      	adds	r3, r4, #1
   1557a:	b108      	cbz	r0, 15580 <id_find+0x28>
   1557c:	4620      	mov	r0, r4
}
   1557e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15580:	461c      	mov	r4, r3
   15582:	e7ee      	b.n	15562 <id_find+0xa>
   15584:	2000c580 	.word	0x2000c580

00015588 <atomic_get.constprop.0>:
   15588:	4b01      	ldr	r3, [pc, #4]	; (15590 <atomic_get.constprop.0+0x8>)
   1558a:	e8d3 0faf 	lda	r0, [r3]
}
   1558e:	4770      	bx	lr
   15590:	2000c654 	.word	0x2000c654

00015594 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   15594:	b537      	push	{r0, r1, r2, r4, r5, lr}
   15596:	4604      	mov	r4, r0
{
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   15598:	460d      	mov	r5, r1
   1559a:	b1a1      	cbz	r1, 155c6 <id_create.constprop.0+0x32>
   1559c:	4628      	mov	r0, r5
   1559e:	4915      	ldr	r1, [pc, #84]	; (155f4 <id_create.constprop.0+0x60>)
   155a0:	f01b fd86 	bl	310b0 <bt_addr_le_eq>
   155a4:	b978      	cbnz	r0, 155c6 <id_create.constprop.0+0x32>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   155a6:	4629      	mov	r1, r5
   155a8:	4813      	ldr	r0, [pc, #76]	; (155f8 <id_create.constprop.0+0x64>)
   155aa:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   155ae:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   155b0:	f01b fd8b 	bl	310ca <bt_addr_le_copy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   155b4:	f7ff ffe8 	bl	15588 <atomic_get.constprop.0>
#endif
	/* Only store if stack was already initialized. Before initialization
	 * we don't know the flash content, so it's potentially harmful to
	 * try to write anything there.
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   155b8:	0743      	lsls	r3, r0, #29
   155ba:	d501      	bpl.n	155c0 <id_create.constprop.0+0x2c>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
   155bc:	f7fe fa20 	bl	13a00 <bt_settings_save_id>
	}

	return 0;
   155c0:	2000      	movs	r0, #0
}
   155c2:	b003      	add	sp, #12
   155c4:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   155c6:	4668      	mov	r0, sp
   155c8:	f01b fc4d 	bl	30e66 <bt_addr_le_create_static>
			if (err) {
   155cc:	2800      	cmp	r0, #0
   155ce:	d1f8      	bne.n	155c2 <id_create.constprop.0+0x2e>
		} while (id_find(&new_addr) >= 0);
   155d0:	4668      	mov	r0, sp
   155d2:	f7ff ffc1 	bl	15558 <id_find>
   155d6:	2800      	cmp	r0, #0
   155d8:	daf5      	bge.n	155c6 <id_create.constprop.0+0x32>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   155da:	4b07      	ldr	r3, [pc, #28]	; (155f8 <id_create.constprop.0+0x64>)
   155dc:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
   155e0:	4669      	mov	r1, sp
   155e2:	4418      	add	r0, r3
   155e4:	f01b fd71 	bl	310ca <bt_addr_le_copy>
		if (addr) {
   155e8:	2d00      	cmp	r5, #0
   155ea:	d0e3      	beq.n	155b4 <id_create.constprop.0+0x20>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   155ec:	4601      	mov	r1, r0
   155ee:	4628      	mov	r0, r5
   155f0:	e7de      	b.n	155b0 <id_create.constprop.0+0x1c>
   155f2:	bf00      	nop
   155f4:	0003b6d4 	.word	0x0003b6d4
   155f8:	2000c580 	.word	0x2000c580

000155fc <set_random_address>:
{
   155fc:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   155fe:	2206      	movs	r2, #6
   15600:	4911      	ldr	r1, [pc, #68]	; (15648 <set_random_address+0x4c>)
   15602:	4605      	mov	r5, r0
   15604:	f020 ff80 	bl	36508 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   15608:	b1c8      	cbz	r0, 1563e <set_random_address+0x42>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   1560a:	2106      	movs	r1, #6
   1560c:	f242 0005 	movw	r0, #8197	; 0x2005
   15610:	f7fe fed8 	bl	143c4 <bt_hci_cmd_create>
	if (!buf) {
   15614:	4604      	mov	r4, r0
   15616:	b1a0      	cbz	r0, 15642 <set_random_address+0x46>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   15618:	2206      	movs	r2, #6
   1561a:	4629      	mov	r1, r5
   1561c:	300c      	adds	r0, #12
   1561e:	f01d fda9 	bl	33174 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   15622:	2200      	movs	r2, #0
   15624:	4621      	mov	r1, r4
   15626:	f242 0005 	movw	r0, #8197	; 0x2005
   1562a:	f7fe ff19 	bl	14460 <bt_hci_cmd_send_sync>
	if (err) {
   1562e:	b938      	cbnz	r0, 15640 <set_random_address+0x44>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
   15630:	4805      	ldr	r0, [pc, #20]	; (15648 <set_random_address+0x4c>)
   15632:	4629      	mov	r1, r5
   15634:	f01b fd44 	bl	310c0 <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   15638:	2301      	movs	r3, #1
   1563a:	f800 3c01 	strb.w	r3, [r0, #-1]
		return 0;
   1563e:	2000      	movs	r0, #0
}
   15640:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   15642:	f06f 0068 	mvn.w	r0, #104	; 0x68
   15646:	e7fb      	b.n	15640 <set_random_address+0x44>
   15648:	2000c5e9 	.word	0x2000c5e9

0001564c <find_rl_conflict>:
{
   1564c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15650:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(conflict != NULL);
   15652:	460e      	mov	r6, r1
{
   15654:	b086      	sub	sp, #24
	__ASSERT_NO_MSG(conflict != NULL);
   15656:	b959      	cbnz	r1, 15670 <find_rl_conflict+0x24>
   15658:	492a      	ldr	r1, [pc, #168]	; (15704 <find_rl_conflict+0xb8>)
   1565a:	f44f 7357 	mov.w	r3, #860	; 0x35c
   1565e:	4a2a      	ldr	r2, [pc, #168]	; (15708 <find_rl_conflict+0xbc>)
   15660:	482a      	ldr	r0, [pc, #168]	; (1570c <find_rl_conflict+0xc0>)
   15662:	f019 feaf 	bl	2f3c4 <assert_print>
   15666:	f44f 7157 	mov.w	r1, #860	; 0x35c
	__ASSERT_NO_MSG(conflict->candidate != NULL);
   1566a:	4827      	ldr	r0, [pc, #156]	; (15708 <find_rl_conflict+0xbc>)
   1566c:	f019 fea3 	bl	2f3b6 <assert_post_action>
   15670:	680d      	ldr	r5, [r1, #0]
   15672:	b94d      	cbnz	r5, 15688 <find_rl_conflict+0x3c>
   15674:	4926      	ldr	r1, [pc, #152]	; (15710 <find_rl_conflict+0xc4>)
   15676:	f240 335d 	movw	r3, #861	; 0x35d
   1567a:	4a23      	ldr	r2, [pc, #140]	; (15708 <find_rl_conflict+0xbc>)
   1567c:	4823      	ldr	r0, [pc, #140]	; (1570c <find_rl_conflict+0xc0>)
   1567e:	f019 fea1 	bl	2f3c4 <assert_print>
   15682:	f240 315d 	movw	r1, #861	; 0x35d
   15686:	e7f0      	b.n	1566a <find_rl_conflict+0x1e>
	__ASSERT_NO_MSG(resident != NULL);
   15688:	b948      	cbnz	r0, 1569e <find_rl_conflict+0x52>
   1568a:	4922      	ldr	r1, [pc, #136]	; (15714 <find_rl_conflict+0xc8>)
   1568c:	f240 335e 	movw	r3, #862	; 0x35e
   15690:	4a1d      	ldr	r2, [pc, #116]	; (15708 <find_rl_conflict+0xbc>)
   15692:	481e      	ldr	r0, [pc, #120]	; (1570c <find_rl_conflict+0xc0>)
   15694:	f019 fe96 	bl	2f3c4 <assert_print>
   15698:	f240 315e 	movw	r1, #862	; 0x35e
   1569c:	e7e5      	b.n	1566a <find_rl_conflict+0x1e>
	__ASSERT_NO_MSG((conflict->candidate->state & BT_KEYS_ID_ADDED) == 0);
   1569e:	7a2b      	ldrb	r3, [r5, #8]
   156a0:	075a      	lsls	r2, r3, #29
   156a2:	d509      	bpl.n	156b8 <find_rl_conflict+0x6c>
   156a4:	491c      	ldr	r1, [pc, #112]	; (15718 <find_rl_conflict+0xcc>)
   156a6:	f44f 7358 	mov.w	r3, #864	; 0x360
   156aa:	4a17      	ldr	r2, [pc, #92]	; (15708 <find_rl_conflict+0xbc>)
   156ac:	4817      	ldr	r0, [pc, #92]	; (1570c <find_rl_conflict+0xc0>)
   156ae:	f019 fe89 	bl	2f3c4 <assert_print>
   156b2:	f44f 7158 	mov.w	r1, #864	; 0x360
   156b6:	e7d8      	b.n	1566a <find_rl_conflict+0x1e>
	if (conflict->found) {
   156b8:	f8d1 8004 	ldr.w	r8, [r1, #4]
   156bc:	f1b8 0f00 	cmp.w	r8, #0
   156c0:	d11c      	bne.n	156fc <find_rl_conflict+0xb0>
	if ((resident->state & BT_KEYS_ID_ADDED) == 0) {
   156c2:	7a03      	ldrb	r3, [r0, #8]
   156c4:	075b      	lsls	r3, r3, #29
   156c6:	d519      	bpl.n	156fc <find_rl_conflict+0xb0>
	addr_conflict = bt_addr_le_eq(&conflict->candidate->addr, &resident->addr);
   156c8:	1c41      	adds	r1, r0, #1
   156ca:	1c68      	adds	r0, r5, #1
   156cc:	f01b fcf0 	bl	310b0 <bt_addr_le_eq>
	bt_addr_t               rpa;
};

static inline bool bt_irk_eq(struct bt_irk const *a, struct bt_irk const *b)
{
	return (memcmp(a->val, b->val, sizeof(a->val)) == 0);
   156d0:	352a      	adds	r5, #42	; 0x2a
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   156d2:	2216      	movs	r2, #22
   156d4:	4641      	mov	r1, r8
	addr_conflict = bt_addr_le_eq(&conflict->candidate->addr, &resident->addr);
   156d6:	4607      	mov	r7, r0
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   156d8:	4668      	mov	r0, sp
   156da:	f020 ff45 	bl	36568 <memset>
   156de:	2210      	movs	r2, #16
   156e0:	4669      	mov	r1, sp
   156e2:	4628      	mov	r0, r5
   156e4:	f020 ff10 	bl	36508 <memcmp>
   156e8:	b130      	cbz	r0, 156f8 <find_rl_conflict+0xac>
   156ea:	2210      	movs	r2, #16
   156ec:	4628      	mov	r0, r5
   156ee:	f104 012a 	add.w	r1, r4, #42	; 0x2a
   156f2:	f020 ff09 	bl	36508 <memcmp>
   156f6:	b100      	cbz	r0, 156fa <find_rl_conflict+0xae>
	if (addr_conflict || irk_conflict) {
   156f8:	b107      	cbz	r7, 156fc <find_rl_conflict+0xb0>
		conflict->found = resident;
   156fa:	6074      	str	r4, [r6, #4]
}
   156fc:	b006      	add	sp, #24
   156fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15702:	bf00      	nop
   15704:	0003c188 	.word	0x0003c188
   15708:	0003c15a 	.word	0x0003c15a
   1570c:	00039995 	.word	0x00039995
   15710:	0003c1a0 	.word	0x0003c1a0
   15714:	0003c1c3 	.word	0x0003c1c3
   15718:	0003c1db 	.word	0x0003c1db

0001571c <bt_id_add.part.0>:
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   1571c:	2100      	movs	r1, #0
void bt_id_add(struct bt_keys *keys)
   1571e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   15722:	2206      	movs	r2, #6
void bt_id_add(struct bt_keys *keys)
   15724:	4604      	mov	r4, r0
   15726:	b086      	sub	sp, #24
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   15728:	4608      	mov	r0, r1
   1572a:	f001 fe21 	bl	17370 <bt_conn_lookup_state_le>
	if (conn) {
   1572e:	4602      	mov	r2, r0
   15730:	b188      	cbz	r0, 15756 <bt_id_add.part.0+0x3a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15732:	4b4f      	ldr	r3, [pc, #316]	; (15870 <bt_id_add.part.0+0x154>)
   15734:	e8d3 1fef 	ldaex	r1, [r3]
   15738:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
   1573c:	e8c3 1fe2 	stlex	r2, r1, [r3]
   15740:	2a00      	cmp	r2, #0
   15742:	d1f7      	bne.n	15734 <bt_id_add.part.0+0x18>
	keys->state |= flag;
   15744:	7a23      	ldrb	r3, [r4, #8]
   15746:	f043 0301 	orr.w	r3, r3, #1
   1574a:	7223      	strb	r3, [r4, #8]
}
   1574c:	b006      	add	sp, #24
   1574e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
   15752:	f001 ba97 	b.w	16c84 <bt_conn_unref>
   15756:	f7ff ff17 	bl	15588 <atomic_get.constprop.0>
	if (scan_enabled) {
   1575a:	0641      	lsls	r1, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1575c:	f3c0 1780 	ubfx	r7, r0, #6, #1
   15760:	d502      	bpl.n	15768 <bt_id_add.part.0+0x4c>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   15762:	4610      	mov	r0, r2
   15764:	f01b fd57 	bl	31216 <bt_le_scan_set_enable>
	if (bt_dev.le.rl_entries) {
   15768:	4d42      	ldr	r5, [pc, #264]	; (15874 <bt_id_add.part.0+0x158>)
   1576a:	f895 3121 	ldrb.w	r3, [r5, #289]	; 0x121
   1576e:	b173      	cbz	r3, 1578e <bt_id_add.part.0+0x72>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   15770:	2000      	movs	r0, #0
   15772:	f01b fcf0 	bl	31156 <addr_res_enable>
		if (err) {
   15776:	b150      	cbz	r0, 1578e <bt_id_add.part.0+0x72>
			LOG_WRN("Failed to disable address resolution");
   15778:	4b3f      	ldr	r3, [pc, #252]	; (15878 <bt_id_add.part.0+0x15c>)
		LOG_WRN("Set privacy mode command is not supported");
   1577a:	9305      	str	r3, [sp, #20]
   1577c:	2302      	movs	r3, #2
   1577e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   15782:	9304      	str	r3, [sp, #16]
   15784:	aa04      	add	r2, sp, #16
		LOG_ERR("Failed to set privacy mode");
   15786:	483d      	ldr	r0, [pc, #244]	; (1587c <bt_id_add.part.0+0x160>)
   15788:	f01b fce2 	bl	31150 <z_log_msg_static_create.constprop.0>
		goto done;
   1578c:	e026      	b.n	157dc <bt_id_add.part.0+0xc0>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   1578e:	f895 2121 	ldrb.w	r2, [r5, #289]	; 0x121
   15792:	f895 3120 	ldrb.w	r3, [r5, #288]	; 0x120
   15796:	429a      	cmp	r2, r3
   15798:	d12b      	bne.n	157f2 <bt_id_add.part.0+0xd6>
		LOG_WRN("Resolving list size exceeded. Switching to host.");
   1579a:	2602      	movs	r6, #2
   1579c:	4b38      	ldr	r3, [pc, #224]	; (15880 <bt_id_add.part.0+0x164>)
   1579e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   157a2:	4836      	ldr	r0, [pc, #216]	; (1587c <bt_id_add.part.0+0x160>)
   157a4:	aa04      	add	r2, sp, #16
   157a6:	9305      	str	r3, [sp, #20]
   157a8:	9604      	str	r6, [sp, #16]
   157aa:	f01b fcd1 	bl	31150 <z_log_msg_static_create.constprop.0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   157ae:	2200      	movs	r2, #0
   157b0:	f242 0029 	movw	r0, #8233	; 0x2029
   157b4:	4611      	mov	r1, r2
   157b6:	f7fe fe53 	bl	14460 <bt_hci_cmd_send_sync>
		if (err) {
   157ba:	b130      	cbz	r0, 157ca <bt_id_add.part.0+0xae>
			LOG_ERR("Failed to clear resolution list");
   157bc:	4b31      	ldr	r3, [pc, #196]	; (15884 <bt_id_add.part.0+0x168>)
   157be:	e9cd 6304 	strd	r6, r3, [sp, #16]
		LOG_ERR("Failed to set privacy mode");
   157c2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   157c6:	aa04      	add	r2, sp, #16
   157c8:	e7dd      	b.n	15786 <bt_id_add.part.0+0x6a>
		bt_dev.le.rl_entries++;
   157ca:	f895 3121 	ldrb.w	r3, [r5, #289]	; 0x121
   157ce:	3301      	adds	r3, #1
   157d0:	f885 3121 	strb.w	r3, [r5, #289]	; 0x121
		keys->state |= BT_KEYS_ID_ADDED;
   157d4:	7a23      	ldrb	r3, [r4, #8]
   157d6:	f043 0304 	orr.w	r3, r3, #4
   157da:	7223      	strb	r3, [r4, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   157dc:	2001      	movs	r0, #1
   157de:	f01b fcba 	bl	31156 <addr_res_enable>
	if (scan_enabled) {
   157e2:	2f00      	cmp	r7, #0
   157e4:	d040      	beq.n	15868 <bt_id_add.part.0+0x14c>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   157e6:	2001      	movs	r0, #1
}
   157e8:	b006      	add	sp, #24
   157ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   157ee:	f01b bd12 	b.w	31216 <bt_le_scan_set_enable>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   157f2:	4622      	mov	r2, r4
   157f4:	f104 0801 	add.w	r8, r4, #1
   157f8:	4641      	mov	r1, r8
   157fa:	f812 0b2a 	ldrb.w	r0, [r2], #42
   157fe:	f01b fc6b 	bl	310d8 <hci_id_add>
	if (err) {
   15802:	4606      	mov	r6, r0
   15804:	b120      	cbz	r0, 15810 <bt_id_add.part.0+0xf4>
		LOG_ERR("Failed to add IRK to controller");
   15806:	4b20      	ldr	r3, [pc, #128]	; (15888 <bt_id_add.part.0+0x16c>)
		LOG_ERR("Failed to set privacy mode");
   15808:	9305      	str	r3, [sp, #20]
   1580a:	2302      	movs	r3, #2
   1580c:	9304      	str	r3, [sp, #16]
   1580e:	e7d8      	b.n	157c2 <bt_id_add.part.0+0xa6>
	bt_dev.le.rl_entries++;
   15810:	f895 3121 	ldrb.w	r3, [r5, #289]	; 0x121
   15814:	3301      	adds	r3, #1
   15816:	f885 3121 	strb.w	r3, [r5, #289]	; 0x121
	keys->state |= BT_KEYS_ID_ADDED;
   1581a:	7a23      	ldrb	r3, [r4, #8]
   1581c:	f043 0304 	orr.w	r3, r3, #4
   15820:	7223      	strb	r3, [r4, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   15822:	f895 30a7 	ldrb.w	r3, [r5, #167]	; 0xa7
   15826:	075b      	lsls	r3, r3, #29
   15828:	d401      	bmi.n	1582e <bt_id_add.part.0+0x112>
		LOG_WRN("Set privacy mode command is not supported");
   1582a:	4b18      	ldr	r3, [pc, #96]	; (1588c <bt_id_add.part.0+0x170>)
   1582c:	e7a5      	b.n	1577a <bt_id_add.part.0+0x5e>
	bt_addr_le_copy(&cp.id_addr, addr);
   1582e:	4641      	mov	r1, r8
   15830:	4668      	mov	r0, sp
   15832:	f01b fc4a 	bl	310ca <bt_addr_le_copy>
	cp.mode = mode;
   15836:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   15838:	2108      	movs	r1, #8
   1583a:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   1583e:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   15842:	f7fe fdbf 	bl	143c4 <bt_hci_cmd_create>
	if (!buf) {
   15846:	4604      	mov	r4, r0
   15848:	b160      	cbz	r0, 15864 <bt_id_add.part.0+0x148>
   1584a:	2208      	movs	r2, #8
   1584c:	4669      	mov	r1, sp
   1584e:	300c      	adds	r0, #12
   15850:	f01d fc90 	bl	33174 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   15854:	4632      	mov	r2, r6
   15856:	4621      	mov	r1, r4
   15858:	f242 004e 	movw	r0, #8270	; 0x204e
   1585c:	f7fe fe00 	bl	14460 <bt_hci_cmd_send_sync>
	if (err) {
   15860:	2800      	cmp	r0, #0
   15862:	d0bb      	beq.n	157dc <bt_id_add.part.0+0xc0>
		LOG_ERR("Failed to set privacy mode");
   15864:	4b0a      	ldr	r3, [pc, #40]	; (15890 <bt_id_add.part.0+0x174>)
   15866:	e7cf      	b.n	15808 <bt_id_add.part.0+0xec>
}
   15868:	b006      	add	sp, #24
   1586a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1586e:	bf00      	nop
   15870:	2000c654 	.word	0x2000c654
   15874:	2000c580 	.word	0x2000c580
   15878:	0003c210 	.word	0x0003c210
   1587c:	00037900 	.word	0x00037900
   15880:	0003c235 	.word	0x0003c235
   15884:	0003c266 	.word	0x0003c266
   15888:	0003c286 	.word	0x0003c286
   1588c:	0003c2a6 	.word	0x0003c2a6
   15890:	0003c2d0 	.word	0x0003c2d0

00015894 <bt_id_pending_keys_update>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15894:	4b08      	ldr	r3, [pc, #32]	; (158b8 <bt_id_pending_keys_update+0x24>)
   15896:	e8d3 2fef 	ldaex	r2, [r3]
   1589a:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   1589e:	e8c3 1fe0 	stlex	r0, r1, [r3]
   158a2:	2800      	cmp	r0, #0
   158a4:	d1f7      	bne.n	15896 <bt_id_pending_keys_update+0x2>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   158a6:	0413      	lsls	r3, r2, #16
   158a8:	d504      	bpl.n	158b4 <bt_id_pending_keys_update+0x20>
			bt_keys_foreach_type(BT_KEYS_IRK, pending_id_update, NULL);
   158aa:	2200      	movs	r2, #0
   158ac:	2002      	movs	r0, #2
   158ae:	4903      	ldr	r1, [pc, #12]	; (158bc <bt_id_pending_keys_update+0x28>)
   158b0:	f007 bff4 	b.w	1d89c <bt_keys_foreach_type>
}
   158b4:	4770      	bx	lr
   158b6:	bf00      	nop
   158b8:	2000c654 	.word	0x2000c654
   158bc:	000311cf 	.word	0x000311cf

000158c0 <bt_id_find_conflict>:
	struct bt_id_conflict conflict = {
   158c0:	2300      	movs	r3, #0
{
   158c2:	b507      	push	{r0, r1, r2, lr}
	bt_keys_foreach_type(BT_KEYS_IRK, find_rl_conflict, &conflict);
   158c4:	4905      	ldr	r1, [pc, #20]	; (158dc <bt_id_find_conflict+0x1c>)
	struct bt_id_conflict conflict = {
   158c6:	e9cd 0300 	strd	r0, r3, [sp]
	bt_keys_foreach_type(BT_KEYS_IRK, find_rl_conflict, &conflict);
   158ca:	466a      	mov	r2, sp
   158cc:	2002      	movs	r0, #2
   158ce:	f007 ffe5 	bl	1d89c <bt_keys_foreach_type>
}
   158d2:	9801      	ldr	r0, [sp, #4]
   158d4:	b003      	add	sp, #12
   158d6:	f85d fb04 	ldr.w	pc, [sp], #4
   158da:	bf00      	nop
   158dc:	0001564d 	.word	0x0001564d

000158e0 <bt_id_add>:
	CHECKIF(keys == NULL) {
   158e0:	4603      	mov	r3, r0
{
   158e2:	b410      	push	{r4}
	CHECKIF(keys == NULL) {
   158e4:	b170      	cbz	r0, 15904 <bt_id_add+0x24>
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   158e6:	490a      	ldr	r1, [pc, #40]	; (15910 <bt_id_add+0x30>)
   158e8:	f891 4120 	ldrb.w	r4, [r1, #288]	; 0x120
   158ec:	f891 2121 	ldrb.w	r2, [r1, #289]	; 0x121
   158f0:	b10c      	cbz	r4, 158f6 <bt_id_add+0x16>
   158f2:	4294      	cmp	r4, r2
   158f4:	d208      	bcs.n	15908 <bt_id_add+0x28>
		bt_dev.le.rl_entries++;
   158f6:	3201      	adds	r2, #1
   158f8:	f881 2121 	strb.w	r2, [r1, #289]	; 0x121
		keys->state |= BT_KEYS_ID_ADDED;
   158fc:	7a1a      	ldrb	r2, [r3, #8]
   158fe:	f042 0204 	orr.w	r2, r2, #4
   15902:	721a      	strb	r2, [r3, #8]
}
   15904:	bc10      	pop	{r4}
   15906:	4770      	bx	lr
   15908:	bc10      	pop	{r4}
   1590a:	f7ff bf07 	b.w	1571c <bt_id_add.part.0>
   1590e:	bf00      	nop
   15910:	2000c580 	.word	0x2000c580

00015914 <bt_id_del>:
{
   15914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15918:	b086      	sub	sp, #24
	CHECKIF(keys == NULL) {
   1591a:	4605      	mov	r5, r0
{
   1591c:	af00      	add	r7, sp, #0
	CHECKIF(keys == NULL) {
   1591e:	b398      	cbz	r0, 15988 <bt_id_del+0x74>
	if (!bt_dev.le.rl_size ||
   15920:	4c51      	ldr	r4, [pc, #324]	; (15a68 <bt_id_del+0x154>)
   15922:	f894 2120 	ldrb.w	r2, [r4, #288]	; 0x120
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   15926:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
	if (!bt_dev.le.rl_size ||
   1592a:	b1ca      	cbz	r2, 15960 <bt_id_del+0x4c>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   1592c:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
   1592e:	4293      	cmp	r3, r2
   15930:	dc23      	bgt.n	1597a <bt_id_del+0x66>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   15932:	2100      	movs	r1, #0
   15934:	2206      	movs	r2, #6
   15936:	4608      	mov	r0, r1
   15938:	f001 fd1a 	bl	17370 <bt_conn_lookup_state_le>
	if (conn) {
   1593c:	4602      	mov	r2, r0
   1593e:	b338      	cbz	r0, 15990 <bt_id_del+0x7c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15940:	34d4      	adds	r4, #212	; 0xd4
   15942:	e8d4 3fef 	ldaex	r3, [r4]
   15946:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   1594a:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1594e:	2a00      	cmp	r2, #0
   15950:	d1f7      	bne.n	15942 <bt_id_del+0x2e>
	keys->state |= flag;
   15952:	7a2b      	ldrb	r3, [r5, #8]
   15954:	f043 0302 	orr.w	r3, r3, #2
   15958:	722b      	strb	r3, [r5, #8]
		bt_conn_unref(conn);
   1595a:	f001 f993 	bl	16c84 <bt_conn_unref>
		return;
   1595e:	e013      	b.n	15988 <bt_id_del+0x74>
		__ASSERT_NO_MSG(bt_dev.le.rl_entries > 0);
   15960:	b95b      	cbnz	r3, 1597a <bt_id_del+0x66>
   15962:	4942      	ldr	r1, [pc, #264]	; (15a6c <bt_id_del+0x158>)
   15964:	4842      	ldr	r0, [pc, #264]	; (15a70 <bt_id_del+0x15c>)
   15966:	f240 4323 	movw	r3, #1059	; 0x423
   1596a:	4a42      	ldr	r2, [pc, #264]	; (15a74 <bt_id_del+0x160>)
   1596c:	f019 fd2a 	bl	2f3c4 <assert_print>
   15970:	f240 4123 	movw	r1, #1059	; 0x423
   15974:	483f      	ldr	r0, [pc, #252]	; (15a74 <bt_id_del+0x160>)
   15976:	f019 fd1e 	bl	2f3b6 <assert_post_action>
			bt_dev.le.rl_entries--;
   1597a:	3b01      	subs	r3, #1
   1597c:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
		keys->state &= ~BT_KEYS_ID_ADDED;
   15980:	7a2b      	ldrb	r3, [r5, #8]
   15982:	f023 0304 	bic.w	r3, r3, #4
   15986:	722b      	strb	r3, [r5, #8]
}
   15988:	3718      	adds	r7, #24
   1598a:	46bd      	mov	sp, r7
   1598c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   15990:	f7ff fdfa 	bl	15588 <atomic_get.constprop.0>
	if (scan_enabled) {
   15994:	0643      	lsls	r3, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   15996:	f3c0 1980 	ubfx	r9, r0, #6, #1
   1599a:	d502      	bpl.n	159a2 <bt_id_del+0x8e>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   1599c:	4610      	mov	r0, r2
   1599e:	f01b fc3a 	bl	31216 <bt_le_scan_set_enable>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   159a2:	2000      	movs	r0, #0
   159a4:	f01b fbd7 	bl	31156 <addr_res_enable>
	if (err) {
   159a8:	4606      	mov	r6, r0
   159aa:	b1e0      	cbz	r0, 159e6 <bt_id_del+0xd2>
		LOG_ERR("Disabling address resolution failed (err %d)", err);
   159ac:	466d      	mov	r5, sp
   159ae:	b088      	sub	sp, #32
   159b0:	466b      	mov	r3, sp
   159b2:	4a31      	ldr	r2, [pc, #196]	; (15a78 <bt_id_del+0x164>)
   159b4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   159b8:	e9c3 2005 	strd	r2, r0, [r3, #20]
   159bc:	461a      	mov	r2, r3
   159be:	2303      	movs	r3, #3
   159c0:	482e      	ldr	r0, [pc, #184]	; (15a7c <bt_id_del+0x168>)
   159c2:	f842 3f10 	str.w	r3, [r2, #16]!
   159c6:	f01b fbc3 	bl	31150 <z_log_msg_static_create.constprop.0>
   159ca:	46ad      	mov	sp, r5
	if (bt_dev.le.rl_entries) {
   159cc:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
   159d0:	b113      	cbz	r3, 159d8 <bt_id_del+0xc4>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   159d2:	2001      	movs	r0, #1
   159d4:	f01b fbbf 	bl	31156 <addr_res_enable>
	if (scan_enabled) {
   159d8:	f1b9 0f00 	cmp.w	r9, #0
   159dc:	d0d4      	beq.n	15988 <bt_id_del+0x74>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   159de:	2001      	movs	r0, #1
   159e0:	f01b fc19 	bl	31216 <bt_le_scan_set_enable>
   159e4:	e7d0      	b.n	15988 <bt_id_del+0x74>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   159e6:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
   159ea:	f894 2120 	ldrb.w	r2, [r4, #288]	; 0x120
   159ee:	429a      	cmp	r2, r3
   159f0:	d20c      	bcs.n	15a0c <bt_id_del+0xf8>
		bt_dev.le.rl_entries--;
   159f2:	3b01      	subs	r3, #1
   159f4:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
		keys->state &= ~BT_KEYS_ID_ADDED;
   159f8:	7a2b      	ldrb	r3, [r5, #8]
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   159fa:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   159fc:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   15a00:	2002      	movs	r0, #2
   15a02:	491f      	ldr	r1, [pc, #124]	; (15a80 <bt_id_del+0x16c>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   15a04:	722b      	strb	r3, [r5, #8]
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   15a06:	f007 ff49 	bl	1d89c <bt_keys_foreach_type>
		goto done;
   15a0a:	e7df      	b.n	159cc <bt_id_del+0xb8>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   15a0c:	2107      	movs	r1, #7
   15a0e:	f242 0028 	movw	r0, #8232	; 0x2028
   15a12:	f7fe fcd7 	bl	143c4 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   15a16:	f105 0a01 	add.w	sl, r5, #1
	if (!buf) {
   15a1a:	4680      	mov	r8, r0
   15a1c:	b958      	cbnz	r0, 15a36 <bt_id_del+0x122>
		LOG_ERR("Failed to remove IRK from controller");
   15a1e:	4b19      	ldr	r3, [pc, #100]	; (15a84 <bt_id_del+0x170>)
   15a20:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15a24:	617b      	str	r3, [r7, #20]
   15a26:	2302      	movs	r3, #2
   15a28:	4814      	ldr	r0, [pc, #80]	; (15a7c <bt_id_del+0x168>)
   15a2a:	f107 0210 	add.w	r2, r7, #16
   15a2e:	613b      	str	r3, [r7, #16]
   15a30:	f01b fb8e 	bl	31150 <z_log_msg_static_create.constprop.0>
		goto done;
   15a34:	e7ca      	b.n	159cc <bt_id_del+0xb8>
	return net_buf_simple_add(&buf->b, len);
   15a36:	2107      	movs	r1, #7
   15a38:	300c      	adds	r0, #12
   15a3a:	f008 fd2d 	bl	1e498 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   15a3e:	4651      	mov	r1, sl
   15a40:	f01b fb43 	bl	310ca <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   15a44:	4632      	mov	r2, r6
   15a46:	4641      	mov	r1, r8
   15a48:	f242 0028 	movw	r0, #8232	; 0x2028
   15a4c:	f7fe fd08 	bl	14460 <bt_hci_cmd_send_sync>
	if (err) {
   15a50:	2800      	cmp	r0, #0
   15a52:	d1e4      	bne.n	15a1e <bt_id_del+0x10a>
	bt_dev.le.rl_entries--;
   15a54:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
   15a58:	3b01      	subs	r3, #1
   15a5a:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
	keys->state &= ~BT_KEYS_ID_ADDED;
   15a5e:	7a2b      	ldrb	r3, [r5, #8]
   15a60:	f023 0304 	bic.w	r3, r3, #4
   15a64:	722b      	strb	r3, [r5, #8]
   15a66:	e7b1      	b.n	159cc <bt_id_del+0xb8>
   15a68:	2000c580 	.word	0x2000c580
   15a6c:	0003c2eb 	.word	0x0003c2eb
   15a70:	00039995 	.word	0x00039995
   15a74:	0003c15a 	.word	0x0003c15a
   15a78:	0003c304 	.word	0x0003c304
   15a7c:	00037900 	.word	0x00037900
   15a80:	0003113b 	.word	0x0003113b
   15a84:	0003c331 	.word	0x0003c331

00015a88 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   15a88:	b570      	push	{r4, r5, r6, lr}
   15a8a:	460d      	mov	r5, r1
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   15a8c:	4604      	mov	r4, r0
{
   15a8e:	b086      	sub	sp, #24
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   15a90:	b1f0      	cbz	r0, 15ad0 <bt_id_create+0x48>
   15a92:	4921      	ldr	r1, [pc, #132]	; (15b18 <bt_id_create+0x90>)
   15a94:	f01b fb0c 	bl	310b0 <bt_addr_le_eq>
   15a98:	b9d0      	cbnz	r0, 15ad0 <bt_id_create+0x48>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   15a9a:	7823      	ldrb	r3, [r4, #0]
   15a9c:	2b01      	cmp	r3, #1
   15a9e:	d104      	bne.n	15aaa <bt_id_create+0x22>
   15aa0:	79a3      	ldrb	r3, [r4, #6]
   15aa2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   15aa6:	2bc0      	cmp	r3, #192	; 0xc0
   15aa8:	d00d      	beq.n	15ac6 <bt_id_create+0x3e>
		    !BT_ADDR_IS_STATIC(&addr->a)) {
			LOG_ERR("Only static random identity address supported");
   15aaa:	4b1c      	ldr	r3, [pc, #112]	; (15b1c <bt_id_create+0x94>)
   15aac:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15ab0:	9305      	str	r3, [sp, #20]
   15ab2:	2302      	movs	r3, #2
   15ab4:	481a      	ldr	r0, [pc, #104]	; (15b20 <bt_id_create+0x98>)
   15ab6:	aa04      	add	r2, sp, #16
   15ab8:	9304      	str	r3, [sp, #16]
   15aba:	f01b fb49 	bl	31150 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   15abe:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
   15ac2:	b006      	add	sp, #24
   15ac4:	bd70      	pop	{r4, r5, r6, pc}
		if (id_find(addr) >= 0) {
   15ac6:	4620      	mov	r0, r4
   15ac8:	f7ff fd46 	bl	15558 <id_find>
   15acc:	2800      	cmp	r0, #0
   15ace:	da1d      	bge.n	15b0c <bt_id_create+0x84>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   15ad0:	2d00      	cmp	r5, #0
   15ad2:	d1f4      	bne.n	15abe <bt_id_create+0x36>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   15ad4:	4d13      	ldr	r5, [pc, #76]	; (15b24 <bt_id_create+0x9c>)
   15ad6:	79eb      	ldrb	r3, [r5, #7]
   15ad8:	2b01      	cmp	r3, #1
   15ada:	d01a      	beq.n	15b12 <bt_id_create+0x8a>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   15adc:	f7ff fd54 	bl	15588 <atomic_get.constprop.0>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   15ae0:	07c3      	lsls	r3, r0, #31
   15ae2:	d407      	bmi.n	15af4 <bt_id_create+0x6c>
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
   15ae4:	2c00      	cmp	r4, #0
   15ae6:	d0ea      	beq.n	15abe <bt_id_create+0x36>
   15ae8:	4620      	mov	r0, r4
   15aea:	490b      	ldr	r1, [pc, #44]	; (15b18 <bt_id_create+0x90>)
   15aec:	f01b fae0 	bl	310b0 <bt_addr_le_eq>
   15af0:	2800      	cmp	r0, #0
   15af2:	d1e4      	bne.n	15abe <bt_id_create+0x36>
	new_id = bt_dev.id_count;
   15af4:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
   15af6:	4621      	mov	r1, r4
   15af8:	4630      	mov	r0, r6
   15afa:	f7ff fd4b 	bl	15594 <id_create.constprop.0>
	if (err) {
   15afe:	2800      	cmp	r0, #0
   15b00:	d1df      	bne.n	15ac2 <bt_id_create+0x3a>
		bt_dev.id_count++;
   15b02:	79eb      	ldrb	r3, [r5, #7]
	new_id = bt_dev.id_count;
   15b04:	4630      	mov	r0, r6
		bt_dev.id_count++;
   15b06:	3301      	adds	r3, #1
   15b08:	71eb      	strb	r3, [r5, #7]
	return new_id;
   15b0a:	e7da      	b.n	15ac2 <bt_id_create+0x3a>
			return -EALREADY;
   15b0c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   15b10:	e7d7      	b.n	15ac2 <bt_id_create+0x3a>
		return -ENOMEM;
   15b12:	f06f 000b 	mvn.w	r0, #11
   15b16:	e7d4      	b.n	15ac2 <bt_id_create+0x3a>
   15b18:	0003b6d4 	.word	0x0003b6d4
   15b1c:	0003c356 	.word	0x0003c356
   15b20:	00037900 	.word	0x00037900
   15b24:	2000c580 	.word	0x2000c580

00015b28 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   15b28:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
   15b2a:	4604      	mov	r4, r0
{
   15b2c:	b089      	sub	sp, #36	; 0x24
	CHECKIF(addr == NULL) {
   15b2e:	b960      	cbnz	r0, 15b4a <bt_id_read_public_addr+0x22>
		LOG_WRN("Invalid input parameters");
   15b30:	4b19      	ldr	r3, [pc, #100]	; (15b98 <bt_id_read_public_addr+0x70>)
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read public address");
   15b32:	9307      	str	r3, [sp, #28]
   15b34:	2302      	movs	r3, #2
   15b36:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   15b3a:	4818      	ldr	r0, [pc, #96]	; (15b9c <bt_id_read_public_addr+0x74>)
   15b3c:	aa06      	add	r2, sp, #24
   15b3e:	9306      	str	r3, [sp, #24]
   15b40:	f01b fb06 	bl	31150 <z_log_msg_static_create.constprop.0>
		return 0U;
   15b44:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   15b46:	b009      	add	sp, #36	; 0x24
   15b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   15b4a:	2100      	movs	r1, #0
   15b4c:	f241 0009 	movw	r0, #4105	; 0x1009
   15b50:	aa01      	add	r2, sp, #4
   15b52:	f7fe fc85 	bl	14460 <bt_hci_cmd_send_sync>
	if (err) {
   15b56:	4606      	mov	r6, r0
   15b58:	b108      	cbz	r0, 15b5e <bt_id_read_public_addr+0x36>
		LOG_WRN("Failed to read public address");
   15b5a:	4b11      	ldr	r3, [pc, #68]	; (15ba0 <bt_id_read_public_addr+0x78>)
   15b5c:	e7e9      	b.n	15b32 <bt_id_read_public_addr+0xa>
	rp = (void *)rsp->data;
   15b5e:	9f01      	ldr	r7, [sp, #4]
   15b60:	2206      	movs	r2, #6
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   15b62:	68fd      	ldr	r5, [r7, #12]
   15b64:	490f      	ldr	r1, [pc, #60]	; (15ba4 <bt_id_read_public_addr+0x7c>)
   15b66:	3501      	adds	r5, #1
   15b68:	4628      	mov	r0, r5
   15b6a:	f020 fccd 	bl	36508 <memcmp>
   15b6e:	b128      	cbz	r0, 15b7c <bt_id_read_public_addr+0x54>
   15b70:	2206      	movs	r2, #6
   15b72:	4628      	mov	r0, r5
   15b74:	490c      	ldr	r1, [pc, #48]	; (15ba8 <bt_id_read_public_addr+0x80>)
   15b76:	f020 fcc7 	bl	36508 <memcmp>
   15b7a:	b918      	cbnz	r0, 15b84 <bt_id_read_public_addr+0x5c>
		net_buf_unref(rsp);
   15b7c:	4638      	mov	r0, r7
   15b7e:	f008 fb05 	bl	1e18c <net_buf_unref>
		return 0U;
   15b82:	e7df      	b.n	15b44 <bt_id_read_public_addr+0x1c>
	bt_addr_copy(&addr->a, &rp->bdaddr);
   15b84:	4629      	mov	r1, r5
   15b86:	1c60      	adds	r0, r4, #1
   15b88:	f01b fa9a 	bl	310c0 <bt_addr_copy>
	net_buf_unref(rsp);
   15b8c:	4638      	mov	r0, r7
	addr->type = BT_ADDR_LE_PUBLIC;
   15b8e:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
   15b90:	f008 fafc 	bl	1e18c <net_buf_unref>
	return 1U;
   15b94:	2001      	movs	r0, #1
   15b96:	e7d6      	b.n	15b46 <bt_id_read_public_addr+0x1e>
   15b98:	0003c384 	.word	0x0003c384
   15b9c:	00037900 	.word	0x00037900
   15ba0:	0003c39d 	.word	0x0003c39d
   15ba4:	0003b6e1 	.word	0x0003b6e1
   15ba8:	0003b6db 	.word	0x0003b6db

00015bac <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   15bac:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   15bae:	4668      	mov	r0, sp
   15bb0:	f7ff ffba 	bl	15b28 <bt_id_read_public_addr>
   15bb4:	4b04      	ldr	r3, [pc, #16]	; (15bc8 <bt_setup_public_id_addr+0x1c>)
   15bb6:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   15bb8:	b118      	cbz	r0, 15bc2 <bt_setup_public_id_addr+0x16>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
   15bba:	4669      	mov	r1, sp
   15bbc:	2000      	movs	r0, #0
   15bbe:	f7ff fce9 	bl	15594 <id_create.constprop.0>
}
   15bc2:	b003      	add	sp, #12
   15bc4:	f85d fb04 	ldr.w	pc, [sp], #4
   15bc8:	2000c580 	.word	0x2000c580

00015bcc <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   15bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   15bce:	4b24      	ldr	r3, [pc, #144]	; (15c60 <bt_read_static_addr+0x94>)
{
   15bd0:	4605      	mov	r5, r0
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   15bd2:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
{
   15bd6:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   15bd8:	07db      	lsls	r3, r3, #31
{
   15bda:	b089      	sub	sp, #36	; 0x24
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   15bdc:	d40d      	bmi.n	15bfa <bt_read_static_addr+0x2e>
		LOG_WRN("Read Static Addresses command not available");
   15bde:	4b21      	ldr	r3, [pc, #132]	; (15c64 <bt_read_static_addr+0x98>)
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read static addresses");
   15be0:	9307      	str	r3, [sp, #28]
		return 0;
   15be2:	2400      	movs	r4, #0
		LOG_WRN("Failed to read static addresses");
   15be4:	2302      	movs	r3, #2
   15be6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   15bea:	481f      	ldr	r0, [pc, #124]	; (15c68 <bt_read_static_addr+0x9c>)
   15bec:	aa06      	add	r2, sp, #24
   15bee:	9306      	str	r3, [sp, #24]
   15bf0:	f01b faae 	bl	31150 <z_log_msg_static_create.constprop.0>
	if (!cnt) {
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
   15bf4:	4620      	mov	r0, r4
   15bf6:	b009      	add	sp, #36	; 0x24
   15bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   15bfa:	2100      	movs	r1, #0
   15bfc:	f64f 4009 	movw	r0, #64521	; 0xfc09
   15c00:	aa01      	add	r2, sp, #4
   15c02:	f7fe fc2d 	bl	14460 <bt_hci_cmd_send_sync>
	if (err) {
   15c06:	4603      	mov	r3, r0
   15c08:	b108      	cbz	r0, 15c0e <bt_read_static_addr+0x42>
		LOG_WRN("Failed to read static addresses");
   15c0a:	4b18      	ldr	r3, [pc, #96]	; (15c6c <bt_read_static_addr+0xa0>)
   15c0c:	e7e8      	b.n	15be0 <bt_read_static_addr+0x14>
	rp = (void *)rsp->data;
   15c0e:	9801      	ldr	r0, [sp, #4]
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   15c10:	2716      	movs	r7, #22
	rp = (void *)rsp->data;
   15c12:	68c2      	ldr	r2, [r0, #12]
	cnt = MIN(rp->num_addrs, size);
   15c14:	7854      	ldrb	r4, [r2, #1]
   15c16:	3202      	adds	r2, #2
   15c18:	42b4      	cmp	r4, r6
   15c1a:	bf28      	it	cs
   15c1c:	4634      	movcs	r4, r6
	for (i = 0; i < cnt; i++) {
   15c1e:	429c      	cmp	r4, r3
   15c20:	dc0e      	bgt.n	15c40 <bt_read_static_addr+0x74>
	net_buf_unref(rsp);
   15c22:	f008 fab3 	bl	1e18c <net_buf_unref>
	if (!cnt) {
   15c26:	2c00      	cmp	r4, #0
   15c28:	d1e4      	bne.n	15bf4 <bt_read_static_addr+0x28>
		LOG_WRN("No static addresses stored in controller");
   15c2a:	4b11      	ldr	r3, [pc, #68]	; (15c70 <bt_read_static_addr+0xa4>)
   15c2c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   15c30:	9307      	str	r3, [sp, #28]
   15c32:	2302      	movs	r3, #2
   15c34:	480c      	ldr	r0, [pc, #48]	; (15c68 <bt_read_static_addr+0x9c>)
   15c36:	aa06      	add	r2, sp, #24
   15c38:	9306      	str	r3, [sp, #24]
   15c3a:	f01b fa89 	bl	31150 <z_log_msg_static_create.constprop.0>
   15c3e:	e7d9      	b.n	15bf4 <bt_read_static_addr+0x28>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   15c40:	4611      	mov	r1, r2
   15c42:	fb07 5603 	mla	r6, r7, r3, r5
   15c46:	f102 0c14 	add.w	ip, r2, #20
   15c4a:	f851 eb04 	ldr.w	lr, [r1], #4
   15c4e:	4561      	cmp	r1, ip
   15c50:	f846 eb04 	str.w	lr, [r6], #4
   15c54:	d1f9      	bne.n	15c4a <bt_read_static_addr+0x7e>
   15c56:	8809      	ldrh	r1, [r1, #0]
	for (i = 0; i < cnt; i++) {
   15c58:	3301      	adds	r3, #1
   15c5a:	8031      	strh	r1, [r6, #0]
   15c5c:	3216      	adds	r2, #22
   15c5e:	e7de      	b.n	15c1e <bt_read_static_addr+0x52>
   15c60:	2000c580 	.word	0x2000c580
   15c64:	0003c3bb 	.word	0x0003c3bb
   15c68:	00037900 	.word	0x00037900
   15c6c:	0003c3e7 	.word	0x0003c3e7
   15c70:	0003c407 	.word	0x0003c407

00015c74 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   15c74:	b570      	push	{r4, r5, r6, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   15c76:	4d15      	ldr	r5, [pc, #84]	; (15ccc <bt_setup_random_id_addr+0x58>)
{
   15c78:	b088      	sub	sp, #32
	if (!bt_dev.id_count) {
   15c7a:	79ec      	ldrb	r4, [r5, #7]
   15c7c:	b92c      	cbnz	r4, 15c8a <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   15c7e:	2101      	movs	r1, #1
   15c80:	a802      	add	r0, sp, #8
   15c82:	f7ff ffa3 	bl	15bcc <bt_read_static_addr>
   15c86:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
   15c88:	b9c0      	cbnz	r0, 15cbc <bt_setup_random_id_addr+0x48>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   15c8a:	2100      	movs	r1, #0
   15c8c:	4608      	mov	r0, r1
}
   15c8e:	b008      	add	sp, #32
   15c90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_id_create(NULL, NULL);
   15c94:	f7ff bef8 	b.w	15a88 <bt_id_create>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   15c98:	ab02      	add	r3, sp, #8
   15c9a:	fb06 3102 	mla	r1, r6, r2, r3
   15c9e:	f10d 0001 	add.w	r0, sp, #1
   15ca2:	f01b fa0d 	bl	310c0 <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
   15ca6:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   15ca8:	4669      	mov	r1, sp
   15caa:	4610      	mov	r0, r2
				addr.type = BT_ADDR_LE_RANDOM;
   15cac:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   15cb0:	f7ff fc70 	bl	15594 <id_create.constprop.0>
				if (err) {
   15cb4:	3401      	adds	r4, #1
   15cb6:	b110      	cbz	r0, 15cbe <bt_setup_random_id_addr+0x4a>
}
   15cb8:	b008      	add	sp, #32
   15cba:	bd70      	pop	{r4, r5, r6, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   15cbc:	2616      	movs	r6, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   15cbe:	79eb      	ldrb	r3, [r5, #7]
   15cc0:	b2e2      	uxtb	r2, r4
   15cc2:	4293      	cmp	r3, r2
   15cc4:	d8e8      	bhi.n	15c98 <bt_setup_random_id_addr+0x24>
			return 0;
   15cc6:	2000      	movs	r0, #0
   15cc8:	e7f6      	b.n	15cb8 <bt_setup_random_id_addr+0x44>
   15cca:	bf00      	nop
   15ccc:	2000c580 	.word	0x2000c580

00015cd0 <bt_id_set_create_conn_own_addr>:
	return true;
#endif
}

int bt_id_set_create_conn_own_addr(bool use_filter, uint8_t *own_addr_type)
{
   15cd0:	b538      	push	{r3, r4, r5, lr}
	int err;

	CHECKIF(own_addr_type == NULL) {
   15cd2:	460c      	mov	r4, r1
   15cd4:	b169      	cbz	r1, 15cf2 <bt_id_set_create_conn_own_addr+0x22>

		/* If Static Random address is used as Identity address we
		 * need to restore it before creating connection. Otherwise
		 * NRPA used for active scan could be used for connection.
		 */
		if (addr->type == BT_ADDR_LE_RANDOM) {
   15cd6:	4d08      	ldr	r5, [pc, #32]	; (15cf8 <bt_id_set_create_conn_own_addr+0x28>)
   15cd8:	782b      	ldrb	r3, [r5, #0]
   15cda:	2b01      	cmp	r3, #1
   15cdc:	d003      	beq.n	15ce6 <bt_id_set_create_conn_own_addr+0x16>
		}

		*own_addr_type = addr->type;
	}

	return 0;
   15cde:	2000      	movs	r0, #0
		*own_addr_type = addr->type;
   15ce0:	782b      	ldrb	r3, [r5, #0]
   15ce2:	7023      	strb	r3, [r4, #0]
}
   15ce4:	bd38      	pop	{r3, r4, r5, pc}
			err = set_random_address(&addr->a);
   15ce6:	1c68      	adds	r0, r5, #1
   15ce8:	f7ff fc88 	bl	155fc <set_random_address>
			if (err) {
   15cec:	2800      	cmp	r0, #0
   15cee:	d0f6      	beq.n	15cde <bt_id_set_create_conn_own_addr+0xe>
   15cf0:	e7f8      	b.n	15ce4 <bt_id_set_create_conn_own_addr+0x14>
		return -EINVAL;
   15cf2:	f06f 0015 	mvn.w	r0, #21
   15cf6:	e7f5      	b.n	15ce4 <bt_id_set_create_conn_own_addr+0x14>
   15cf8:	2000c580 	.word	0x2000c580

00015cfc <bt_id_set_scan_own_addr>:

	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
}

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
   15cfc:	b510      	push	{r4, lr}
	int err;

	CHECKIF(own_addr_type == NULL) {
   15cfe:	460c      	mov	r4, r1
   15d00:	b149      	cbz	r1, 15d16 <bt_id_set_scan_own_addr+0x1a>
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}
	} else {
		*own_addr_type = bt_dev.id_addr[0].type;
   15d02:	4b06      	ldr	r3, [pc, #24]	; (15d1c <bt_id_set_scan_own_addr+0x20>)
		 * (through Kconfig).
		 * Use same RPA as legacy advertiser if advertising.
		 */
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
		    !is_adv_using_rand_addr()) {
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
   15d04:	2000      	movs	r0, #0
		*own_addr_type = bt_dev.id_addr[0].type;
   15d06:	781b      	ldrb	r3, [r3, #0]
   15d08:	700b      	strb	r3, [r1, #0]
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
   15d0a:	f01b fa48 	bl	3119e <bt_id_set_private_addr>
			if (err) {
   15d0e:	b908      	cbnz	r0, 15d14 <bt_id_set_scan_own_addr+0x18>

				LOG_WRN("Ignoring failure to set address for passive scan (%d)",
					err);
			}

			*own_addr_type = BT_ADDR_LE_RANDOM;
   15d10:	2301      	movs	r3, #1
   15d12:	7023      	strb	r3, [r4, #0]
			LOG_DBG("Not changing the address");
		}
	}

	return 0;
}
   15d14:	bd10      	pop	{r4, pc}
		return -EINVAL;
   15d16:	f06f 0015 	mvn.w	r0, #21
   15d1a:	e7fb      	b.n	15d14 <bt_id_set_scan_own_addr+0x18>
   15d1c:	2000c580 	.word	0x2000c580

00015d20 <atomic_get.constprop.0>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15d20:	4b01      	ldr	r3, [pc, #4]	; (15d28 <atomic_get.constprop.0+0x8>)
   15d22:	e8d3 0faf 	lda	r0, [r3]
}
   15d26:	4770      	bx	lr
   15d28:	2000c654 	.word	0x2000c654

00015d2c <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
   15d2c:	b530      	push	{r4, r5, lr}
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   15d2e:	2102      	movs	r1, #2
{
   15d30:	4604      	mov	r4, r0
   15d32:	b087      	sub	sp, #28
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   15d34:	f242 000c 	movw	r0, #8204	; 0x200c
   15d38:	f7fe fb44 	bl	143c4 <bt_hci_cmd_create>
	if (!buf) {
   15d3c:	4605      	mov	r5, r0
   15d3e:	b300      	cbz	r0, 15d82 <bt_le_scan_set_enable_legacy+0x56>
   15d40:	2102      	movs	r1, #2
   15d42:	300c      	adds	r0, #12
   15d44:	f008 fba8 	bl	1e498 <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
   15d48:	2c01      	cmp	r4, #1
   15d4a:	4602      	mov	r2, r0
   15d4c:	d117      	bne.n	15d7e <bt_le_scan_set_enable_legacy+0x52>
   15d4e:	f7ff ffe7 	bl	15d20 <atomic_get.constprop.0>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
   15d52:	f3c0 2040 	ubfx	r0, r0, #9, #1
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
	}

	cp->enable = enable;

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   15d56:	1e63      	subs	r3, r4, #1
	cp->enable = enable;
   15d58:	7014      	strb	r4, [r2, #0]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   15d5a:	425c      	negs	r4, r3
   15d5c:	415c      	adcs	r4, r3
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
   15d5e:	7050      	strb	r0, [r2, #1]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   15d60:	a903      	add	r1, sp, #12
   15d62:	4628      	mov	r0, r5
   15d64:	4a08      	ldr	r2, [pc, #32]	; (15d88 <bt_le_scan_set_enable_legacy+0x5c>)
   15d66:	2306      	movs	r3, #6
   15d68:	9400      	str	r4, [sp, #0]
   15d6a:	f7fe fb19 	bl	143a0 <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
   15d6e:	2200      	movs	r2, #0
   15d70:	4629      	mov	r1, r5
   15d72:	f242 000c 	movw	r0, #8204	; 0x200c
   15d76:	f7fe fb73 	bl	14460 <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
   15d7a:	b007      	add	sp, #28
   15d7c:	bd30      	pop	{r4, r5, pc}
   15d7e:	2000      	movs	r0, #0
   15d80:	e7e9      	b.n	15d56 <bt_le_scan_set_enable_legacy+0x2a>
		return -ENOBUFS;
   15d82:	f06f 0068 	mvn.w	r0, #104	; 0x68
   15d86:	e7f8      	b.n	15d7a <bt_le_scan_set_enable_legacy+0x4e>
   15d88:	2000c654 	.word	0x2000c654

00015d8c <start_le_scan_legacy>:
	struct bt_hci_cp_le_set_scan_param set_param;
	struct net_buf *buf;
	int err;
	bool active_scan;

	(void)memset(&set_param, 0, sizeof(set_param));
   15d8c:	2300      	movs	r3, #0
{
   15d8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	(void)memset(&set_param, 0, sizeof(set_param));
   15d90:	f8ad 3005 	strh.w	r3, [sp, #5]
	} else {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
	}

	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   15d94:	1e43      	subs	r3, r0, #1
	set_param.scan_type = scan_type;
   15d96:	f88d 0000 	strb.w	r0, [sp]
{
   15d9a:	4605      	mov	r5, r0
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   15d9c:	4258      	negs	r0, r3
	set_param.interval = sys_cpu_to_le16(interval);
   15d9e:	f8ad 1001 	strh.w	r1, [sp, #1]
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   15da2:	4158      	adcs	r0, r3
   15da4:	f10d 0105 	add.w	r1, sp, #5
	set_param.window = sys_cpu_to_le16(window);
   15da8:	f8ad 2003 	strh.w	r2, [sp, #3]
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   15dac:	f7ff ffa6 	bl	15cfc <bt_id_set_scan_own_addr>
	if (err) {
   15db0:	4604      	mov	r4, r0
   15db2:	bb18      	cbnz	r0, 15dfc <start_le_scan_legacy+0x70>
		return err;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
   15db4:	2107      	movs	r1, #7
   15db6:	f242 000b 	movw	r0, #8203	; 0x200b
   15dba:	f7fe fb03 	bl	143c4 <bt_hci_cmd_create>
	if (!buf) {
   15dbe:	4606      	mov	r6, r0
   15dc0:	b328      	cbz	r0, 15e0e <start_le_scan_legacy+0x82>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   15dc2:	2207      	movs	r2, #7
   15dc4:	4669      	mov	r1, sp
   15dc6:	300c      	adds	r0, #12
   15dc8:	f01d f9d4 	bl	33174 <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
   15dcc:	4622      	mov	r2, r4
   15dce:	4631      	mov	r1, r6
   15dd0:	f242 000b 	movw	r0, #8203	; 0x200b
   15dd4:	f7fe fb44 	bl	14460 <bt_hci_cmd_send_sync>
	if (err) {
   15dd8:	4604      	mov	r4, r0
   15dda:	b978      	cbnz	r0, 15dfc <start_le_scan_legacy+0x70>
	return bt_le_scan_set_enable_legacy(enable);
   15ddc:	2001      	movs	r0, #1
   15dde:	f7ff ffa5 	bl	15d2c <bt_le_scan_set_enable_legacy>
		return err;
	}

	err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
	if (err) {
   15de2:	4604      	mov	r4, r0
   15de4:	b950      	cbnz	r0, 15dfc <start_le_scan_legacy+0x70>
	if (val) {
   15de6:	2d01      	cmp	r5, #1
   15de8:	d10b      	bne.n	15e02 <start_le_scan_legacy+0x76>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15dea:	4b0a      	ldr	r3, [pc, #40]	; (15e14 <start_le_scan_legacy+0x88>)
   15dec:	e8d3 1fef 	ldaex	r1, [r3]
   15df0:	f441 7180 	orr.w	r1, r1, #256	; 0x100
   15df4:	e8c3 1fe2 	stlex	r2, r1, [r3]
   15df8:	2a00      	cmp	r2, #0
   15dfa:	d1f7      	bne.n	15dec <start_le_scan_legacy+0x60>
	}

	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);

	return 0;
}
   15dfc:	4620      	mov	r0, r4
   15dfe:	b002      	add	sp, #8
   15e00:	bd70      	pop	{r4, r5, r6, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15e02:	f46f 7180 	mvn.w	r1, #256	; 0x100
   15e06:	4803      	ldr	r0, [pc, #12]	; (15e14 <start_le_scan_legacy+0x88>)
   15e08:	f01b f9f3 	bl	311f2 <atomic_and>
   15e0c:	e7f6      	b.n	15dfc <start_le_scan_legacy+0x70>
		return -ENOBUFS;
   15e0e:	f06f 0468 	mvn.w	r4, #104	; 0x68
   15e12:	e7f3      	b.n	15dfc <start_le_scan_legacy+0x70>
   15e14:	2000c654 	.word	0x2000c654

00015e18 <bt_scan_reset>:
	scan_dev_found_cb = NULL;
   15e18:	2200      	movs	r2, #0
   15e1a:	4b01      	ldr	r3, [pc, #4]	; (15e20 <bt_scan_reset+0x8>)
   15e1c:	601a      	str	r2, [r3, #0]
}
   15e1e:	4770      	bx	lr
   15e20:	2000e5dc 	.word	0x2000e5dc

00015e24 <bt_le_scan_update>:

	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
}

int bt_le_scan_update(bool fast_scan)
{
   15e24:	b538      	push	{r3, r4, r5, lr}
   15e26:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   15e28:	f7ff ff7a 	bl	15d20 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   15e2c:	0601      	lsls	r1, r0, #24
   15e2e:	f3c0 12c0 	ubfx	r2, r0, #7, #1
   15e32:	d42e      	bmi.n	15e92 <bt_le_scan_update+0x6e>
   15e34:	f7ff ff74 	bl	15d20 <atomic_get.constprop.0>
		return 0;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   15e38:	0643      	lsls	r3, r0, #25
   15e3a:	d422      	bmi.n	15e82 <bt_le_scan_update+0x5e>

	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		struct bt_conn *conn;

		/* don't restart scan if we have pending connection */
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   15e3c:	2100      	movs	r1, #0
   15e3e:	2206      	movs	r2, #6
   15e40:	4608      	mov	r0, r1
   15e42:	f001 fa95 	bl	17370 <bt_conn_lookup_state_le>
					       BT_CONN_CONNECTING);
		if (conn) {
   15e46:	4604      	mov	r4, r0
   15e48:	bb08      	cbnz	r0, 15e8e <bt_le_scan_update+0x6a>
			bt_conn_unref(conn);
			return 0;
		}

		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   15e4a:	2202      	movs	r2, #2
   15e4c:	4601      	mov	r1, r0
   15e4e:	f001 fa8f 	bl	17370 <bt_conn_lookup_state_le>
					       BT_CONN_CONNECTING_SCAN);
		if (conn) {
   15e52:	b1f0      	cbz	r0, 15e92 <bt_le_scan_update+0x6e>
   15e54:	4b10      	ldr	r3, [pc, #64]	; (15e98 <bt_le_scan_update+0x74>)
   15e56:	e8d3 1fef 	ldaex	r1, [r3]
   15e5a:	f441 7100 	orr.w	r1, r1, #512	; 0x200
   15e5e:	e8c3 1fe2 	stlex	r2, r1, [r3]
   15e62:	2a00      	cmp	r2, #0
   15e64:	d1f7      	bne.n	15e56 <bt_le_scan_update+0x32>
			atomic_set_bit(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP);

			bt_conn_unref(conn);
   15e66:	f000 ff0d 	bl	16c84 <bt_conn_unref>
		window = BT_GAP_SCAN_FAST_WINDOW;
   15e6a:	2d00      	cmp	r5, #0
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   15e6c:	4620      	mov	r0, r4
		return start_passive_scan(fast_scan);
	}
#endif

	return 0;
}
   15e6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   15e72:	bf0b      	itete	eq
   15e74:	2212      	moveq	r2, #18
   15e76:	2230      	movne	r2, #48	; 0x30
   15e78:	f44f 6100 	moveq.w	r1, #2048	; 0x800
   15e7c:	2160      	movne	r1, #96	; 0x60
   15e7e:	f7ff bf85 	b.w	15d8c <start_le_scan_legacy>
	return bt_le_scan_set_enable_legacy(enable);
   15e82:	4610      	mov	r0, r2
   15e84:	f7ff ff52 	bl	15d2c <bt_le_scan_set_enable_legacy>
		if (err) {
   15e88:	2800      	cmp	r0, #0
   15e8a:	d0d7      	beq.n	15e3c <bt_le_scan_update+0x18>
}
   15e8c:	bd38      	pop	{r3, r4, r5, pc}
			bt_conn_unref(conn);
   15e8e:	f000 fef9 	bl	16c84 <bt_conn_unref>
		return 0;
   15e92:	2000      	movs	r0, #0
   15e94:	e7fa      	b.n	15e8c <bt_le_scan_update+0x68>
   15e96:	bf00      	nop
   15e98:	2000c654 	.word	0x2000c654

00015e9c <bt_hci_le_adv_report>:
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */
#endif /* defined(CONFIG_BT_EXT_ADV) */

void bt_hci_le_adv_report(struct net_buf *buf)
{
   15e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
   15ea0:	f100 060c 	add.w	r6, r0, #12
   15ea4:	4604      	mov	r4, r0
   15ea6:	b08d      	sub	sp, #52	; 0x34
   15ea8:	4630      	mov	r0, r6
   15eaa:	f01d f947 	bl	3313c <net_buf_simple_pull_u8>
   15eae:	4680      	mov	r8, r0
	if (scan_dev_found_cb) {
   15eb0:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 16084 <bt_hci_le_adv_report+0x1e8>
	uint8_t num_reports = net_buf_pull_u8(buf);
	struct bt_hci_evt_le_advertising_info *evt;

	LOG_DBG("Adv number of reports %u",  num_reports);

	while (num_reports--) {
   15eb4:	f1b8 0f00 	cmp.w	r8, #0
   15eb8:	d00d      	beq.n	15ed6 <bt_hci_le_adv_report+0x3a>
		struct bt_le_scan_recv_info adv_info;

		if (buf->len < sizeof(*evt)) {
   15eba:	8a23      	ldrh	r3, [r4, #16]
   15ebc:	2b08      	cmp	r3, #8
   15ebe:	d80d      	bhi.n	15edc <bt_hci_le_adv_report+0x40>
		}

		evt = net_buf_pull_mem(buf, sizeof(*evt));

		if (buf->len < evt->length + sizeof(adv_info.rssi)) {
			LOG_ERR("Unexpected end of buffer");
   15ec0:	4b71      	ldr	r3, [pc, #452]	; (16088 <bt_hci_le_adv_report+0x1ec>)
   15ec2:	930b      	str	r3, [sp, #44]	; 0x2c
   15ec4:	2302      	movs	r3, #2
   15ec6:	930a      	str	r3, [sp, #40]	; 0x28
   15ec8:	2300      	movs	r3, #0
   15eca:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15ece:	486f      	ldr	r0, [pc, #444]	; (1608c <bt_hci_le_adv_report+0x1f0>)
   15ed0:	aa0a      	add	r2, sp, #40	; 0x28
   15ed2:	f7fa f9af 	bl	10234 <z_impl_z_log_msg_static_create>

		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);

		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
	}
}
   15ed6:	b00d      	add	sp, #52	; 0x34
   15ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   15edc:	2109      	movs	r1, #9
   15ede:	4630      	mov	r0, r6
   15ee0:	f008 fabc 	bl	1e45c <net_buf_simple_pull_mem>
		if (buf->len < evt->length + sizeof(adv_info.rssi)) {
   15ee4:	7a03      	ldrb	r3, [r0, #8]
   15ee6:	8a22      	ldrh	r2, [r4, #16]
   15ee8:	3301      	adds	r3, #1
   15eea:	429a      	cmp	r2, r3
   15eec:	4605      	mov	r5, r0
   15eee:	d3e7      	bcc.n	15ec0 <bt_hci_le_adv_report+0x24>
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   15ef0:	2301      	movs	r3, #1
   15ef2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
   15ef6:	237f      	movs	r3, #127	; 0x7f
   15ef8:	f88d 301e 	strb.w	r3, [sp, #30]
		adv_info.rssi = evt->data[evt->length];
   15efc:	7a03      	ldrb	r3, [r0, #8]
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
   15efe:	f100 0901 	add.w	r9, r0, #1
		adv_info.rssi = evt->data[evt->length];
   15f02:	4403      	add	r3, r0
   15f04:	7a5b      	ldrb	r3, [r3, #9]
   15f06:	f88d 301d 	strb.w	r3, [sp, #29]
		adv_info.sid = BT_GAP_SID_INVALID;
   15f0a:	23ff      	movs	r3, #255	; 0xff
   15f0c:	f88d 301c 	strb.w	r3, [sp, #28]
		adv_info.interval = 0U;
   15f10:	2300      	movs	r3, #0
   15f12:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		adv_info.adv_type = evt->evt_type;
   15f16:	7802      	ldrb	r2, [r0, #0]
   15f18:	2a04      	cmp	r2, #4
   15f1a:	bf98      	it	ls
   15f1c:	4b5c      	ldrls	r3, [pc, #368]	; (16090 <bt_hci_le_adv_report+0x1f4>)
   15f1e:	f88d 201f 	strb.w	r2, [sp, #31]
	switch (evt_type) {
   15f22:	bf98      	it	ls
   15f24:	5c9b      	ldrbls	r3, [r3, r2]
		adv_info.adv_props = get_adv_props_legacy(evt->evt_type);
   15f26:	f8ad 3020 	strh.w	r3, [sp, #32]
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
   15f2a:	7a03      	ldrb	r3, [r0, #8]
   15f2c:	9301      	str	r3, [sp, #4]
   15f2e:	f7ff fef7 	bl	15d20 <atomic_get.constprop.0>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
   15f32:	0607      	lsls	r7, r0, #24
   15f34:	d50d      	bpl.n	15f52 <bt_hci_le_adv_report+0xb6>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
   15f36:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   15f3a:	0758      	lsls	r0, r3, #29
   15f3c:	d509      	bpl.n	15f52 <bt_hci_le_adv_report+0xb6>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
   15f3e:	7a29      	ldrb	r1, [r5, #8]
	return net_buf_simple_pull(&buf->b, len);
   15f40:	4630      	mov	r0, r6
   15f42:	3101      	adds	r1, #1
   15f44:	f108 38ff 	add.w	r8, r8, #4294967295
   15f48:	f008 fa6a 	bl	1e420 <net_buf_simple_pull>
   15f4c:	fa5f f888 	uxtb.w	r8, r8
   15f50:	e7b0      	b.n	15eb4 <bt_hci_le_adv_report+0x18>
	if (bt_addr_le_is_resolved(addr)) {
   15f52:	4648      	mov	r0, r9
   15f54:	f01a ffa0 	bl	30e98 <bt_addr_le_is_resolved>
   15f58:	2800      	cmp	r0, #0
   15f5a:	d048      	beq.n	15fee <bt_hci_le_adv_report+0x152>
		bt_addr_le_copy_resolved(&id_addr, addr);
   15f5c:	4649      	mov	r1, r9
   15f5e:	a804      	add	r0, sp, #16
   15f60:	f01a ff8f 	bl	30e82 <bt_addr_le_copy_resolved>
	if (scan_dev_found_cb) {
   15f64:	f8da 3000 	ldr.w	r3, [sl]
   15f68:	b1a3      	cbz	r3, 15f94 <bt_hci_le_adv_report+0xf8>
	state->offset = net_buf_simple_headroom(buf);
   15f6a:	4630      	mov	r0, r6
   15f6c:	f01d f8f6 	bl	3315c <net_buf_simple_headroom>
   15f70:	4683      	mov	fp, r0
		buf->len = len;
   15f72:	9b01      	ldr	r3, [sp, #4]
	state->len = buf->len;
   15f74:	8a27      	ldrh	r7, [r4, #16]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
   15f76:	f89d 201f 	ldrb.w	r2, [sp, #31]
		buf->len = len;
   15f7a:	8223      	strh	r3, [r4, #16]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
   15f7c:	f99d 101d 	ldrsb.w	r1, [sp, #29]
   15f80:	4633      	mov	r3, r6
   15f82:	f8da c000 	ldr.w	ip, [sl]
   15f86:	a804      	add	r0, sp, #16
   15f88:	47e0      	blx	ip
	buf->data = buf->__buf + state->offset;
   15f8a:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   15f8c:	8227      	strh	r7, [r4, #16]
	buf->data = buf->__buf + state->offset;
   15f8e:	fa13 f38b 	uxtah	r3, r3, fp
   15f92:	60e3      	str	r3, [r4, #12]
	info->addr = &id_addr;
   15f94:	ab04      	add	r3, sp, #16
   15f96:	9306      	str	r3, [sp, #24]
	return list->head;
   15f98:	4b3e      	ldr	r3, [pc, #248]	; (16094 <bt_hci_le_adv_report+0x1f8>)
   15f9a:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   15f9c:	2b00      	cmp	r3, #0
   15f9e:	d035      	beq.n	1600c <bt_hci_le_adv_report+0x170>
	return node->next;
   15fa0:	681a      	ldr	r2, [r3, #0]
   15fa2:	b102      	cbz	r2, 15fa6 <bt_hci_le_adv_report+0x10a>
   15fa4:	3a08      	subs	r2, #8
		if (listener->recv) {
   15fa6:	f853 1c08 	ldr.w	r1, [r3, #-8]
   15faa:	b1b9      	cbz	r1, 15fdc <bt_hci_le_adv_report+0x140>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   15fac:	4617      	mov	r7, r2
   15fae:	f1a3 0208 	sub.w	r2, r3, #8
	state->offset = net_buf_simple_headroom(buf);
   15fb2:	4630      	mov	r0, r6
   15fb4:	9203      	str	r2, [sp, #12]
   15fb6:	f01d f8d1 	bl	3315c <net_buf_simple_headroom>
   15fba:	4683      	mov	fp, r0
	state->len = buf->len;
   15fbc:	8a23      	ldrh	r3, [r4, #16]
			listener->recv(info, buf);
   15fbe:	9a03      	ldr	r2, [sp, #12]
   15fc0:	9302      	str	r3, [sp, #8]
			buf->len = len;
   15fc2:	9b01      	ldr	r3, [sp, #4]
			listener->recv(info, buf);
   15fc4:	4631      	mov	r1, r6
			buf->len = len;
   15fc6:	8223      	strh	r3, [r4, #16]
			listener->recv(info, buf);
   15fc8:	6812      	ldr	r2, [r2, #0]
   15fca:	a806      	add	r0, sp, #24
   15fcc:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
   15fce:	6962      	ldr	r2, [r4, #20]
	buf->len = state->len;
   15fd0:	9b02      	ldr	r3, [sp, #8]
	buf->data = buf->__buf + state->offset;
   15fd2:	fa12 f28b 	uxtah	r2, r2, fp
   15fd6:	60e2      	str	r2, [r4, #12]
}
   15fd8:	463a      	mov	r2, r7
	buf->len = state->len;
   15fda:	8223      	strh	r3, [r4, #16]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   15fdc:	b1b2      	cbz	r2, 1600c <bt_hci_le_adv_report+0x170>
   15fde:	6897      	ldr	r7, [r2, #8]
   15fe0:	6813      	ldr	r3, [r2, #0]
   15fe2:	b18f      	cbz	r7, 16008 <bt_hci_le_adv_report+0x16c>
   15fe4:	3f08      	subs	r7, #8
		if (listener->recv) {
   15fe6:	2b00      	cmp	r3, #0
   15fe8:	d1e3      	bne.n	15fb2 <bt_hci_le_adv_report+0x116>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   15fea:	463a      	mov	r2, r7
   15fec:	e7f7      	b.n	15fde <bt_hci_le_adv_report+0x142>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
   15fee:	786b      	ldrb	r3, [r5, #1]
   15ff0:	2bff      	cmp	r3, #255	; 0xff
   15ff2:	d104      	bne.n	15ffe <bt_hci_le_adv_report+0x162>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
   15ff4:	4928      	ldr	r1, [pc, #160]	; (16098 <bt_hci_le_adv_report+0x1fc>)
		bt_addr_le_copy(&id_addr,
   15ff6:	a804      	add	r0, sp, #16
   15ff8:	f01b f906 	bl	31208 <bt_addr_le_copy>
   15ffc:	e7b2      	b.n	15f64 <bt_hci_le_adv_report+0xc8>
   15ffe:	4649      	mov	r1, r9
   16000:	f01b f8c1 	bl	31186 <bt_lookup_id_addr>
   16004:	4601      	mov	r1, r0
   16006:	e7f6      	b.n	15ff6 <bt_hci_le_adv_report+0x15a>
		if (listener->recv) {
   16008:	2b00      	cmp	r3, #0
   1600a:	d1d2      	bne.n	15fb2 <bt_hci_le_adv_report+0x116>
	info->addr = NULL;
   1600c:	2300      	movs	r3, #0
	check_pending_conn(&id_addr, addr, info->adv_props);
   1600e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
	info->addr = NULL;
   16012:	9306      	str	r3, [sp, #24]
   16014:	f7ff fe84 	bl	15d20 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   16018:	0601      	lsls	r1, r0, #24
   1601a:	f3c0 1bc0 	ubfx	fp, r0, #7, #1
   1601e:	d48e      	bmi.n	15f3e <bt_hci_le_adv_report+0xa2>
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
   16020:	07d2      	lsls	r2, r2, #31
   16022:	d58c      	bpl.n	15f3e <bt_hci_le_adv_report+0xa2>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
   16024:	2202      	movs	r2, #2
   16026:	4658      	mov	r0, fp
   16028:	a904      	add	r1, sp, #16
   1602a:	f001 f9a1 	bl	17370 <bt_conn_lookup_state_le>
	if (!conn) {
   1602e:	4607      	mov	r7, r0
   16030:	2800      	cmp	r0, #0
   16032:	d084      	beq.n	15f3e <bt_hci_le_adv_report+0xa2>
   16034:	f7ff fe74 	bl	15d20 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   16038:	0643      	lsls	r3, r0, #25
   1603a:	d410      	bmi.n	1605e <bt_hci_le_adv_report+0x1c2>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
   1603c:	f107 009e 	add.w	r0, r7, #158	; 0x9e
   16040:	4649      	mov	r1, r9
   16042:	f01b f8e1 	bl	31208 <bt_addr_le_copy>
	if (bt_le_create_conn(conn)) {
   16046:	4638      	mov	r0, r7
   16048:	f7fe fade 	bl	14608 <bt_le_create_conn>
   1604c:	b960      	cbnz	r0, 16068 <bt_hci_le_adv_report+0x1cc>
	bt_conn_set_state(conn, BT_CONN_CONNECTING);
   1604e:	4638      	mov	r0, r7
   16050:	2106      	movs	r1, #6
   16052:	f000 fe43 	bl	16cdc <bt_conn_set_state>
	bt_conn_unref(conn);
   16056:	4638      	mov	r0, r7
   16058:	f000 fe14 	bl	16c84 <bt_conn_unref>
	return;
   1605c:	e76f      	b.n	15f3e <bt_hci_le_adv_report+0xa2>
	return bt_le_scan_set_enable_legacy(enable);
   1605e:	4658      	mov	r0, fp
   16060:	f7ff fe64 	bl	15d2c <bt_le_scan_set_enable_legacy>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   16064:	2800      	cmp	r0, #0
   16066:	d0e9      	beq.n	1603c <bt_hci_le_adv_report+0x1a0>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
   16068:	231f      	movs	r3, #31
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1606a:	2100      	movs	r1, #0
   1606c:	4638      	mov	r0, r7
	conn->err = BT_HCI_ERR_UNSPECIFIED;
   1606e:	733b      	strb	r3, [r7, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   16070:	f000 fe34 	bl	16cdc <bt_conn_set_state>
	bt_conn_unref(conn);
   16074:	4638      	mov	r0, r7
   16076:	f000 fe05 	bl	16c84 <bt_conn_unref>
	bt_le_scan_update(false);
   1607a:	2000      	movs	r0, #0
   1607c:	f7ff fed2 	bl	15e24 <bt_le_scan_update>
   16080:	e75d      	b.n	15f3e <bt_hci_le_adv_report+0xa2>
   16082:	bf00      	nop
   16084:	2000e5dc 	.word	0x2000e5dc
   16088:	0003c436 	.word	0x0003c436
   1608c:	00037920 	.word	0x00037920
   16090:	0003c44f 	.word	0x0003c44f
   16094:	2000e5d4 	.word	0x2000e5d4
   16098:	0003b6d4 	.word	0x0003b6d4

0001609c <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
   1609c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1609e:	4605      	mov	r5, r0
   160a0:	f7ff fe3e 	bl	15d20 <atomic_get.constprop.0>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   160a4:	0740      	lsls	r0, r0, #29
{
   160a6:	460f      	mov	r7, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   160a8:	d564      	bpl.n	16174 <bt_le_scan_start+0xd8>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
   160aa:	782a      	ldrb	r2, [r5, #0]
   160ac:	2a01      	cmp	r2, #1
   160ae:	d903      	bls.n	160b8 <bt_le_scan_start+0x1c>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
   160b0:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
   160b4:	4620      	mov	r0, r4
   160b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
   160b8:	686b      	ldr	r3, [r5, #4]
   160ba:	2b0f      	cmp	r3, #15
   160bc:	d8f8      	bhi.n	160b0 <bt_le_scan_start+0x14>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
   160be:	f643 74fc 	movw	r4, #16380	; 0x3ffc
   160c2:	8928      	ldrh	r0, [r5, #8]
   160c4:	1f03      	subs	r3, r0, #4
   160c6:	b29b      	uxth	r3, r3
   160c8:	42a3      	cmp	r3, r4
   160ca:	d8f1      	bhi.n	160b0 <bt_le_scan_start+0x14>
	if (param->window < 0x0004 || param->window > 0x4000) {
   160cc:	8969      	ldrh	r1, [r5, #10]
   160ce:	1f0b      	subs	r3, r1, #4
   160d0:	b29b      	uxth	r3, r3
   160d2:	42a3      	cmp	r3, r4
   160d4:	d8ec      	bhi.n	160b0 <bt_le_scan_start+0x14>
	if (param->window > param->interval) {
   160d6:	4288      	cmp	r0, r1
   160d8:	d3ea      	bcc.n	160b0 <bt_le_scan_start+0x14>
	if (param->type && !bt_id_scan_random_addr_check()) {
   160da:	b972      	cbnz	r2, 160fa <bt_le_scan_start+0x5e>
   160dc:	4e27      	ldr	r6, [pc, #156]	; (1617c <bt_le_scan_start+0xe0>)
   160de:	e8d6 0fef 	ldaex	r0, [r6]
   160e2:	f040 0380 	orr.w	r3, r0, #128	; 0x80
   160e6:	e8c6 3fe2 	stlex	r2, r3, [r6]
   160ea:	2a00      	cmp	r2, #0
   160ec:	d1f7      	bne.n	160de <bt_le_scan_start+0x42>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   160ee:	f010 0280 	ands.w	r2, r0, #128	; 0x80
   160f2:	d007      	beq.n	16104 <bt_le_scan_start+0x68>
		return -EALREADY;
   160f4:	f06f 0477 	mvn.w	r4, #119	; 0x77
   160f8:	e7dc      	b.n	160b4 <bt_le_scan_start+0x18>
	if (param->type && !bt_id_scan_random_addr_check()) {
   160fa:	f01b f866 	bl	311ca <bt_id_scan_random_addr_check>
   160fe:	2800      	cmp	r0, #0
   16100:	d1ec      	bne.n	160dc <bt_le_scan_start+0x40>
   16102:	e7d5      	b.n	160b0 <bt_le_scan_start+0x14>
   16104:	f7ff fe0c 	bl	15d20 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   16108:	0641      	lsls	r1, r0, #25
   1610a:	d50a      	bpl.n	16122 <bt_le_scan_start+0x86>
	return bt_le_scan_set_enable_legacy(enable);
   1610c:	4610      	mov	r0, r2
   1610e:	f7ff fe0d 	bl	15d2c <bt_le_scan_set_enable_legacy>
		if (err) {
   16112:	4604      	mov	r4, r0
   16114:	b128      	cbz	r0, 16122 <bt_le_scan_start+0x86>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   16116:	f06f 0180 	mvn.w	r1, #128	; 0x80
   1611a:	4630      	mov	r0, r6
   1611c:	f01b f869 	bl	311f2 <atomic_and>
		return err;
   16120:	e7c8      	b.n	160b4 <bt_le_scan_start+0x18>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
   16122:	686b      	ldr	r3, [r5, #4]
	if (val) {
   16124:	07db      	lsls	r3, r3, #31
   16126:	d511      	bpl.n	1614c <bt_le_scan_start+0xb0>
   16128:	e8d6 3fef 	ldaex	r3, [r6]
   1612c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   16130:	e8c6 3fe2 	stlex	r2, r3, [r6]
   16134:	2a00      	cmp	r2, #0
   16136:	d1f7      	bne.n	16128 <bt_le_scan_start+0x8c>
		if (param->timeout) {
   16138:	89ab      	ldrh	r3, [r5, #12]
   1613a:	b16b      	cbz	r3, 16158 <bt_le_scan_start+0xbc>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1613c:	f06f 0180 	mvn.w	r1, #128	; 0x80
   16140:	480e      	ldr	r0, [pc, #56]	; (1617c <bt_le_scan_start+0xe0>)
   16142:	f01b f856 	bl	311f2 <atomic_and>
			return -ENOTSUP;
   16146:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1614a:	e7b3      	b.n	160b4 <bt_le_scan_start+0x18>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1614c:	f46f 7100 	mvn.w	r1, #512	; 0x200
   16150:	480a      	ldr	r0, [pc, #40]	; (1617c <bt_le_scan_start+0xe0>)
   16152:	f01b f84e 	bl	311f2 <atomic_and>
   16156:	e7ef      	b.n	16138 <bt_le_scan_start+0x9c>
		err = start_le_scan_legacy(param->type, param->interval,
   16158:	896a      	ldrh	r2, [r5, #10]
   1615a:	8929      	ldrh	r1, [r5, #8]
   1615c:	7828      	ldrb	r0, [r5, #0]
   1615e:	f7ff fe15 	bl	15d8c <start_le_scan_legacy>
	if (err) {
   16162:	4604      	mov	r4, r0
   16164:	b118      	cbz	r0, 1616e <bt_le_scan_start+0xd2>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   16166:	f06f 0180 	mvn.w	r1, #128	; 0x80
   1616a:	4804      	ldr	r0, [pc, #16]	; (1617c <bt_le_scan_start+0xe0>)
   1616c:	e7d6      	b.n	1611c <bt_le_scan_start+0x80>
	scan_dev_found_cb = cb;
   1616e:	4b04      	ldr	r3, [pc, #16]	; (16180 <bt_le_scan_start+0xe4>)
   16170:	601f      	str	r7, [r3, #0]
	return 0;
   16172:	e79f      	b.n	160b4 <bt_le_scan_start+0x18>
		return -EAGAIN;
   16174:	f06f 040a 	mvn.w	r4, #10
   16178:	e79c      	b.n	160b4 <bt_le_scan_start+0x18>
   1617a:	bf00      	nop
   1617c:	2000c654 	.word	0x2000c654
   16180:	2000e5dc 	.word	0x2000e5dc

00016184 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
   16184:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   16186:	f06f 0180 	mvn.w	r1, #128	; 0x80
   1618a:	4807      	ldr	r0, [pc, #28]	; (161a8 <bt_le_scan_stop+0x24>)
   1618c:	f01b f831 	bl	311f2 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   16190:	0603      	lsls	r3, r0, #24
   16192:	d506      	bpl.n	161a2 <bt_le_scan_stop+0x1e>
	scan_dev_found_cb = NULL;
   16194:	2000      	movs	r0, #0
   16196:	4b05      	ldr	r3, [pc, #20]	; (161ac <bt_le_scan_stop+0x28>)
   16198:	6018      	str	r0, [r3, #0]
		bt_id_pending_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
   1619a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
   1619e:	f7ff be41 	b.w	15e24 <bt_le_scan_update>
}
   161a2:	f06f 0077 	mvn.w	r0, #119	; 0x77
   161a6:	bd08      	pop	{r3, pc}
   161a8:	2000c654 	.word	0x2000c654
   161ac:	2000e5dc 	.word	0x2000e5dc

000161b0 <bt_le_scan_cb_register>:
	parent->next = child;
   161b0:	2300      	movs	r3, #0
   161b2:	6083      	str	r3, [r0, #8]
	return list->tail;
   161b4:	4b05      	ldr	r3, [pc, #20]	; (161cc <bt_le_scan_cb_register+0x1c>)

void bt_le_scan_cb_register(struct bt_le_scan_cb *cb)
{
	sys_slist_append(&scan_cbs, &cb->node);
   161b6:	f100 0208 	add.w	r2, r0, #8
   161ba:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   161bc:	b911      	cbnz	r1, 161c4 <bt_le_scan_cb_register+0x14>
	list->head = node;
   161be:	e9c3 2200 	strd	r2, r2, [r3]
}
   161c2:	4770      	bx	lr
	parent->next = child;
   161c4:	600a      	str	r2, [r1, #0]
	list->tail = node;
   161c6:	605a      	str	r2, [r3, #4]
}
   161c8:	4770      	bx	lr
   161ca:	bf00      	nop
   161cc:	2000e5d4 	.word	0x2000e5d4

000161d0 <sys_memcpy_swap.constprop.0>:
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
{
	uint8_t *pdst = (uint8_t *)dst;
	const uint8_t *psrc = (const uint8_t *)src;

	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   161d0:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
   161d2:	b508      	push	{r3, lr}
   161d4:	f101 0310 	add.w	r3, r1, #16
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   161d8:	d910      	bls.n	161fc <sys_memcpy_swap.constprop.0+0x2c>
   161da:	4298      	cmp	r0, r3
   161dc:	d213      	bcs.n	16206 <sys_memcpy_swap.constprop.0+0x36>
   161de:	490e      	ldr	r1, [pc, #56]	; (16218 <sys_memcpy_swap.constprop.0+0x48>)
   161e0:	f240 2315 	movw	r3, #533	; 0x215
   161e4:	4a0d      	ldr	r2, [pc, #52]	; (1621c <sys_memcpy_swap.constprop.0+0x4c>)
   161e6:	480e      	ldr	r0, [pc, #56]	; (16220 <sys_memcpy_swap.constprop.0+0x50>)
   161e8:	f019 f8ec 	bl	2f3c4 <assert_print>
   161ec:	480d      	ldr	r0, [pc, #52]	; (16224 <sys_memcpy_swap.constprop.0+0x54>)
   161ee:	f019 f8e9 	bl	2f3c4 <assert_print>
   161f2:	f240 2115 	movw	r1, #533	; 0x215
   161f6:	4809      	ldr	r0, [pc, #36]	; (1621c <sys_memcpy_swap.constprop.0+0x4c>)
   161f8:	f019 f8dd 	bl	2f3b6 <assert_post_action>
   161fc:	d0ef      	beq.n	161de <sys_memcpy_swap.constprop.0+0xe>
   161fe:	f100 0210 	add.w	r2, r0, #16
   16202:	4291      	cmp	r1, r2
   16204:	e7ea      	b.n	161dc <sys_memcpy_swap.constprop.0+0xc>
		  (psrc > pdst && (pdst + length) <= psrc)),
		 "Source and destination buffers must not overlap");

	psrc += length - 1;

	for (; length > 0; length--) {
   16206:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   16208:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
	for (; length > 0; length--) {
   1620c:	428b      	cmp	r3, r1
		*pdst++ = *psrc--;
   1620e:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   16212:	d1f9      	bne.n	16208 <sys_memcpy_swap.constprop.0+0x38>
	}
}
   16214:	bd08      	pop	{r3, pc}
   16216:	bf00      	nop
   16218:	0003c486 	.word	0x0003c486
   1621c:	0003c454 	.word	0x0003c454
   16220:	00039995 	.word	0x00039995
   16224:	0003c4dd 	.word	0x0003c4dd

00016228 <prng_reseed.constprop.0>:
#include <zephyr/logging/log.h>
LOG_MODULE_REGISTER(bt_host_crypto);

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
   16228:	b530      	push	{r4, r5, lr}
   1622a:	b093      	sub	sp, #76	; 0x4c
{
	uint8_t seed[32];
	int64_t extra;
	int ret;

	ret = bt_hci_le_rand(seed, sizeof(seed));
   1622c:	2120      	movs	r1, #32
   1622e:	a80a      	add	r0, sp, #40	; 0x28
   16230:	f7fe f9be 	bl	145b0 <bt_hci_le_rand>
	if (ret) {
   16234:	4604      	mov	r4, r0
   16236:	bb18      	cbnz	r0, 16280 <prng_reseed.constprop.0+0x58>
	return z_impl_k_uptime_ticks();
   16238:	f020 f848 	bl	362cc <z_impl_k_uptime_ticks>
			return ((t * to_hz + off) / from_hz);
   1623c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   16240:	fba0 2305 	umull	r2, r3, r0, r5
   16244:	fb05 3101 	mla	r1, r5, r1, r3
		return ret;
	}

	extra = k_uptime_get();

	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   16248:	2308      	movs	r3, #8
   1624a:	0bd2      	lsrs	r2, r2, #15
   1624c:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
   16250:	0bc9      	lsrs	r1, r1, #15
	extra = k_uptime_get();
   16252:	e9cd 2102 	strd	r2, r1, [sp, #8]
	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   16256:	9300      	str	r3, [sp, #0]
   16258:	2220      	movs	r2, #32
   1625a:	480b      	ldr	r0, [pc, #44]	; (16288 <prng_reseed.constprop.0+0x60>)
   1625c:	446b      	add	r3, sp
   1625e:	a90a      	add	r1, sp, #40	; 0x28
   16260:	f01a fca3 	bl	30baa <tc_hmac_prng_reseed>
				  sizeof(extra));
	if (ret == TC_CRYPTO_FAIL) {
   16264:	b960      	cbnz	r0, 16280 <prng_reseed.constprop.0+0x58>
		LOG_ERR("Failed to re-seed PRNG");
   16266:	4b09      	ldr	r3, [pc, #36]	; (1628c <prng_reseed.constprop.0+0x64>)
   16268:	9309      	str	r3, [sp, #36]	; 0x24
   1626a:	2302      	movs	r3, #2
   1626c:	9308      	str	r3, [sp, #32]
   1626e:	4623      	mov	r3, r4
   16270:	f06f 0404 	mvn.w	r4, #4
   16274:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16278:	4805      	ldr	r0, [pc, #20]	; (16290 <prng_reseed.constprop.0+0x68>)
   1627a:	aa08      	add	r2, sp, #32
   1627c:	f7f9 ffda 	bl	10234 <z_impl_z_log_msg_static_create>
		return -EIO;
	}

	return 0;
}
   16280:	4620      	mov	r0, r4
   16282:	b013      	add	sp, #76	; 0x4c
   16284:	bd30      	pop	{r4, r5, pc}
   16286:	bf00      	nop
   16288:	2000d840 	.word	0x2000d840
   1628c:	0003c50f 	.word	0x0003c50f
   16290:	000378f8 	.word	0x000378f8

00016294 <prng_init>:

int prng_init(void)
{
   16294:	b510      	push	{r4, lr}
   16296:	b088      	sub	sp, #32
	uint8_t perso[8];
	int ret;

	ret = bt_hci_le_rand(perso, sizeof(perso));
   16298:	2108      	movs	r1, #8
   1629a:	4668      	mov	r0, sp
   1629c:	f7fe f988 	bl	145b0 <bt_hci_le_rand>
	if (ret) {
   162a0:	4604      	mov	r4, r0
   162a2:	b990      	cbnz	r0, 162ca <prng_init+0x36>
		return ret;
	}

	ret = tc_hmac_prng_init(&prng, perso, sizeof(perso));
   162a4:	2208      	movs	r2, #8
   162a6:	4669      	mov	r1, sp
   162a8:	480b      	ldr	r0, [pc, #44]	; (162d8 <prng_init+0x44>)
   162aa:	f01a fc5e 	bl	30b6a <tc_hmac_prng_init>
	if (ret == TC_CRYPTO_FAIL) {
   162ae:	b978      	cbnz	r0, 162d0 <prng_init+0x3c>
		LOG_ERR("Failed to initialize PRNG");
   162b0:	4b0a      	ldr	r3, [pc, #40]	; (162dc <prng_init+0x48>)
   162b2:	9307      	str	r3, [sp, #28]
   162b4:	2302      	movs	r3, #2
   162b6:	9306      	str	r3, [sp, #24]
   162b8:	4623      	mov	r3, r4
		return -EIO;
   162ba:	f06f 0404 	mvn.w	r4, #4
   162be:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   162c2:	4807      	ldr	r0, [pc, #28]	; (162e0 <prng_init+0x4c>)
   162c4:	aa06      	add	r2, sp, #24
   162c6:	f7f9 ffb5 	bl	10234 <z_impl_z_log_msg_static_create>
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
}
   162ca:	4620      	mov	r0, r4
   162cc:	b008      	add	sp, #32
   162ce:	bd10      	pop	{r4, pc}
	return prng_reseed(&prng);
   162d0:	f7ff ffaa 	bl	16228 <prng_reseed.constprop.0>
   162d4:	4604      	mov	r4, r0
   162d6:	e7f8      	b.n	162ca <prng_init+0x36>
   162d8:	2000d840 	.word	0x2000d840
   162dc:	0003c526 	.word	0x0003c526
   162e0:	000378f8 	.word	0x000378f8

000162e4 <bt_rand>:

#if defined(CONFIG_BT_HOST_CRYPTO_PRNG)
int bt_rand(void *buf, size_t len)
{
   162e4:	b538      	push	{r3, r4, r5, lr}
   162e6:	460d      	mov	r5, r1
	int ret;

	CHECKIF(buf == NULL || len == 0) {
   162e8:	4604      	mov	r4, r0
   162ea:	b198      	cbz	r0, 16314 <bt_rand+0x30>
   162ec:	b191      	cbz	r1, 16314 <bt_rand+0x30>
		return -EINVAL;
	}

	ret = tc_hmac_prng_generate(buf, len, &prng);
   162ee:	4a0b      	ldr	r2, [pc, #44]	; (1631c <bt_rand+0x38>)
   162f0:	f01a fc74 	bl	30bdc <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
   162f4:	1c43      	adds	r3, r0, #1
   162f6:	d107      	bne.n	16308 <bt_rand+0x24>
		ret = prng_reseed(&prng);
   162f8:	f7ff ff96 	bl	16228 <prng_reseed.constprop.0>
		if (ret) {
   162fc:	b948      	cbnz	r0, 16312 <bt_rand+0x2e>
			return ret;
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
   162fe:	4629      	mov	r1, r5
   16300:	4620      	mov	r0, r4
   16302:	4a06      	ldr	r2, [pc, #24]	; (1631c <bt_rand+0x38>)
   16304:	f01a fc6a 	bl	30bdc <tc_hmac_prng_generate>

	if (ret == TC_CRYPTO_SUCCESS) {
		return 0;
	}

	return -EIO;
   16308:	2801      	cmp	r0, #1
   1630a:	bf0c      	ite	eq
   1630c:	2000      	moveq	r0, #0
   1630e:	f06f 0004 	mvnne.w	r0, #4
}
   16312:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   16314:	f06f 0015 	mvn.w	r0, #21
   16318:	e7fb      	b.n	16312 <bt_rand+0x2e>
   1631a:	bf00      	nop
   1631c:	2000d840 	.word	0x2000d840

00016320 <bt_pub_key_is_debug>:
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   16320:	2240      	movs	r2, #64	; 0x40
{
   16322:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   16324:	4903      	ldr	r1, [pc, #12]	; (16334 <bt_pub_key_is_debug+0x14>)
   16326:	f020 f8ef 	bl	36508 <memcmp>
}
   1632a:	fab0 f080 	clz	r0, r0
   1632e:	0940      	lsrs	r0, r0, #5
   16330:	bd08      	pop	{r3, pc}
   16332:	bf00      	nop
   16334:	0003c5d6 	.word	0x0003c5d6

00016338 <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   16338:	b5f0      	push	{r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   1633a:	4b3d      	ldr	r3, [pc, #244]	; (16430 <bt_pub_key_gen+0xf8>)
{
   1633c:	b087      	sub	sp, #28
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   1633e:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
   16342:	f003 0306 	and.w	r3, r3, #6
   16346:	2b06      	cmp	r3, #6
   16348:	d00f      	beq.n	1636a <bt_pub_key_gen+0x32>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		LOG_WRN("ECC HCI commands not available");
   1634a:	4b3a      	ldr	r3, [pc, #232]	; (16434 <bt_pub_key_gen+0xfc>)
   1634c:	9305      	str	r3, [sp, #20]
   1634e:	2302      	movs	r3, #2
   16350:	9304      	str	r3, [sp, #16]
		return -ENOTSUP;
   16352:	f06f 0585 	mvn.w	r5, #133	; 0x85
   16356:	2300      	movs	r3, #0
   16358:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1635c:	4836      	ldr	r0, [pc, #216]	; (16438 <bt_pub_key_gen+0x100>)
   1635e:	aa04      	add	r2, sp, #16
   16360:	f7f9 ff68 	bl	10234 <z_impl_z_log_msg_static_create>
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   16364:	4628      	mov	r0, r5
   16366:	b007      	add	sp, #28
   16368:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!new_cb) {
   1636a:	2800      	cmp	r0, #0
   1636c:	d05d      	beq.n	1642a <bt_pub_key_gen+0xf2>
	return list->head;
   1636e:	4e33      	ldr	r6, [pc, #204]	; (1643c <bt_pub_key_gen+0x104>)
   16370:	6832      	ldr	r2, [r6, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   16372:	b1a2      	cbz	r2, 1639e <bt_pub_key_gen+0x66>
   16374:	1f13      	subs	r3, r2, #4
		if (cb == new_cb) {
   16376:	4283      	cmp	r3, r0
   16378:	d10d      	bne.n	16396 <bt_pub_key_gen+0x5e>
			LOG_WRN("Callback already registered");
   1637a:	4b31      	ldr	r3, [pc, #196]	; (16440 <bt_pub_key_gen+0x108>)
   1637c:	9305      	str	r3, [sp, #20]
   1637e:	2302      	movs	r3, #2
   16380:	9304      	str	r3, [sp, #16]
   16382:	2300      	movs	r3, #0
   16384:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   16388:	482b      	ldr	r0, [pc, #172]	; (16438 <bt_pub_key_gen+0x100>)
   1638a:	aa04      	add	r2, sp, #16
   1638c:	f7f9 ff52 	bl	10234 <z_impl_z_log_msg_static_create>
			return -EALREADY;
   16390:	f06f 0577 	mvn.w	r5, #119	; 0x77
   16394:	e7e6      	b.n	16364 <bt_pub_key_gen+0x2c>
	return node->next;
   16396:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   16398:	b10b      	cbz	r3, 1639e <bt_pub_key_gen+0x66>
   1639a:	3b04      	subs	r3, #4
   1639c:	e7eb      	b.n	16376 <bt_pub_key_gen+0x3e>
	parent->next = child;
   1639e:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   163a0:	6872      	ldr	r2, [r6, #4]
	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   163a2:	1d03      	adds	r3, r0, #4
	list->head = node;
   163a4:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   163a6:	b902      	cbnz	r2, 163aa <bt_pub_key_gen+0x72>
	list->tail = node;
   163a8:	6073      	str	r3, [r6, #4]
   163aa:	4c26      	ldr	r4, [pc, #152]	; (16444 <bt_pub_key_gen+0x10c>)
   163ac:	e8d4 7fef 	ldaex	r7, [r4]
   163b0:	f047 0320 	orr.w	r3, r7, #32
   163b4:	e8c4 3fe2 	stlex	r2, r3, [r4]
   163b8:	2a00      	cmp	r2, #0
   163ba:	d1f7      	bne.n	163ac <bt_pub_key_gen+0x74>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   163bc:	f017 0720 	ands.w	r7, r7, #32
   163c0:	d001      	beq.n	163c6 <bt_pub_key_gen+0x8e>
	return 0;
   163c2:	2500      	movs	r5, #0
   163c4:	e7ce      	b.n	16364 <bt_pub_key_gen+0x2c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   163c6:	e8d4 3fef 	ldaex	r3, [r4]
   163ca:	f023 0310 	bic.w	r3, r3, #16
   163ce:	e8c4 3fe2 	stlex	r2, r3, [r4]
   163d2:	2a00      	cmp	r2, #0
   163d4:	d1f7      	bne.n	163c6 <bt_pub_key_gen+0x8e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   163d6:	463a      	mov	r2, r7
   163d8:	4639      	mov	r1, r7
   163da:	f242 0025 	movw	r0, #8229	; 0x2025
   163de:	f7fe f83f 	bl	14460 <bt_hci_cmd_send_sync>
	if (err) {
   163e2:	4605      	mov	r5, r0
   163e4:	2800      	cmp	r0, #0
   163e6:	d0ec      	beq.n	163c2 <bt_pub_key_gen+0x8a>
		LOG_ERR("Sending LE P256 Public Key command failed");
   163e8:	4b17      	ldr	r3, [pc, #92]	; (16448 <bt_pub_key_gen+0x110>)
   163ea:	9305      	str	r3, [sp, #20]
   163ec:	2302      	movs	r3, #2
   163ee:	9304      	str	r3, [sp, #16]
   163f0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   163f4:	463b      	mov	r3, r7
   163f6:	4810      	ldr	r0, [pc, #64]	; (16438 <bt_pub_key_gen+0x100>)
   163f8:	aa04      	add	r2, sp, #16
   163fa:	f7f9 ff1b 	bl	10234 <z_impl_z_log_msg_static_create>
   163fe:	e8d4 3fef 	ldaex	r3, [r4]
   16402:	f023 0320 	bic.w	r3, r3, #32
   16406:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1640a:	2a00      	cmp	r2, #0
   1640c:	d1f7      	bne.n	163fe <bt_pub_key_gen+0xc6>
	return list->head;
   1640e:	6834      	ldr	r4, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   16410:	b13c      	cbz	r4, 16422 <bt_pub_key_gen+0xea>
			if (cb->func) {
   16412:	f854 3c04 	ldr.w	r3, [r4, #-4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   16416:	3c04      	subs	r4, #4
			if (cb->func) {
   16418:	b10b      	cbz	r3, 1641e <bt_pub_key_gen+0xe6>
				cb->func(NULL);
   1641a:	2000      	movs	r0, #0
   1641c:	4798      	blx	r3
	return node->next;
   1641e:	6864      	ldr	r4, [r4, #4]
   16420:	e7f6      	b.n	16410 <bt_pub_key_gen+0xd8>
	list->head = NULL;
   16422:	2300      	movs	r3, #0
	list->tail = NULL;
   16424:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
   16428:	e79c      	b.n	16364 <bt_pub_key_gen+0x2c>
		return -EINVAL;
   1642a:	f06f 0515 	mvn.w	r5, #21
   1642e:	e799      	b.n	16364 <bt_pub_key_gen+0x2c>
   16430:	2000c580 	.word	0x2000c580
   16434:	0003c54f 	.word	0x0003c54f
   16438:	000378d8 	.word	0x000378d8
   1643c:	2000e5e4 	.word	0x2000e5e4
   16440:	0003c56e 	.word	0x0003c56e
   16444:	2000c654 	.word	0x2000c654
   16448:	0003c58a 	.word	0x0003c58a

0001644c <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1644c:	4b04      	ldr	r3, [pc, #16]	; (16460 <bt_pub_key_get+0x14>)
   1644e:	e8d3 3faf 	lda	r3, [r3]

	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
   16452:	f013 0f10 	tst.w	r3, #16
}
   16456:	4803      	ldr	r0, [pc, #12]	; (16464 <bt_pub_key_get+0x18>)
   16458:	bf08      	it	eq
   1645a:	2000      	moveq	r0, #0
   1645c:	4770      	bx	lr
   1645e:	bf00      	nop
   16460:	2000c654 	.word	0x2000c654
   16464:	2000f1c8 	.word	0x2000f1c8

00016468 <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   16468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	if (dh_key_cb == cb) {
   1646a:	4e27      	ldr	r6, [pc, #156]	; (16508 <bt_dh_key_gen+0xa0>)
{
   1646c:	4604      	mov	r4, r0
	if (dh_key_cb == cb) {
   1646e:	6833      	ldr	r3, [r6, #0]
{
   16470:	af00      	add	r7, sp, #0
	if (dh_key_cb == cb) {
   16472:	428b      	cmp	r3, r1
   16474:	d041      	beq.n	164fa <bt_dh_key_gen+0x92>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   16476:	b123      	cbz	r3, 16482 <bt_dh_key_gen+0x1a>
		return -EBUSY;
   16478:	f06f 040f 	mvn.w	r4, #15
		LOG_WRN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   1647c:	4620      	mov	r0, r4
   1647e:	46bd      	mov	sp, r7
   16480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16482:	4b22      	ldr	r3, [pc, #136]	; (1650c <bt_dh_key_gen+0xa4>)
   16484:	e8d3 2faf 	lda	r2, [r3]
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   16488:	0692      	lsls	r2, r2, #26
   1648a:	d4f5      	bmi.n	16478 <bt_dh_key_gen+0x10>
   1648c:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   16490:	06db      	lsls	r3, r3, #27
   16492:	d535      	bpl.n	16500 <bt_dh_key_gen+0x98>
	dh_key_cb = cb;
   16494:	6031      	str	r1, [r6, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   16496:	f242 0026 	movw	r0, #8230	; 0x2026
   1649a:	2140      	movs	r1, #64	; 0x40
   1649c:	f7fd ff92 	bl	143c4 <bt_hci_cmd_create>
	if (!buf) {
   164a0:	4605      	mov	r5, r0
   164a2:	b338      	cbz	r0, 164f4 <bt_dh_key_gen+0x8c>
	return net_buf_simple_add(&buf->b, len);
   164a4:	2140      	movs	r1, #64	; 0x40
   164a6:	300c      	adds	r0, #12
   164a8:	f007 fff6 	bl	1e498 <net_buf_simple_add>
   164ac:	4623      	mov	r3, r4
   164ae:	f104 0240 	add.w	r2, r4, #64	; 0x40
   164b2:	f853 1b04 	ldr.w	r1, [r3], #4
   164b6:	4293      	cmp	r3, r2
   164b8:	f840 1b04 	str.w	r1, [r0], #4
   164bc:	d1f9      	bne.n	164b2 <bt_dh_key_gen+0x4a>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   164be:	2200      	movs	r2, #0
   164c0:	4629      	mov	r1, r5
   164c2:	f242 0026 	movw	r0, #8230	; 0x2026
   164c6:	f7fd ffcb 	bl	14460 <bt_hci_cmd_send_sync>
	if (err) {
   164ca:	4604      	mov	r4, r0
   164cc:	2800      	cmp	r0, #0
   164ce:	d0d5      	beq.n	1647c <bt_dh_key_gen+0x14>
		dh_key_cb = NULL;
   164d0:	2300      	movs	r3, #0
		LOG_WRN("Failed to generate DHKey (err %d)", err);
   164d2:	466d      	mov	r5, sp
   164d4:	b088      	sub	sp, #32
   164d6:	466a      	mov	r2, sp
		dh_key_cb = NULL;
   164d8:	6033      	str	r3, [r6, #0]
		LOG_WRN("Failed to generate DHKey (err %d)", err);
   164da:	490d      	ldr	r1, [pc, #52]	; (16510 <bt_dh_key_gen+0xa8>)
   164dc:	e9c2 1405 	strd	r1, r4, [r2, #20]
   164e0:	2103      	movs	r1, #3
   164e2:	f842 1f10 	str.w	r1, [r2, #16]!
   164e6:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   164ea:	480a      	ldr	r0, [pc, #40]	; (16514 <bt_dh_key_gen+0xac>)
   164ec:	f7f9 fea2 	bl	10234 <z_impl_z_log_msg_static_create>
   164f0:	46ad      	mov	sp, r5
		return err;
   164f2:	e7c3      	b.n	1647c <bt_dh_key_gen+0x14>
		return -ENOBUFS;
   164f4:	f06f 0468 	mvn.w	r4, #104	; 0x68
   164f8:	e7ea      	b.n	164d0 <bt_dh_key_gen+0x68>
		return -EALREADY;
   164fa:	f06f 0477 	mvn.w	r4, #119	; 0x77
   164fe:	e7bd      	b.n	1647c <bt_dh_key_gen+0x14>
		return -EADDRNOTAVAIL;
   16500:	f06f 047c 	mvn.w	r4, #124	; 0x7c
   16504:	e7ba      	b.n	1647c <bt_dh_key_gen+0x14>
   16506:	bf00      	nop
   16508:	2000e5e0 	.word	0x2000e5e0
   1650c:	2000c654 	.word	0x2000c654
   16510:	0003c5b4 	.word	0x0003c5b4
   16514:	000378d8 	.word	0x000378d8

00016518 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   16518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1651a:	4b19      	ldr	r3, [pc, #100]	; (16580 <bt_hci_evt_le_pkey_complete+0x68>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   1651c:	68c5      	ldr	r5, [r0, #12]
   1651e:	e8d3 2fef 	ldaex	r2, [r3]
   16522:	f022 0220 	bic.w	r2, r2, #32
   16526:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1652a:	2900      	cmp	r1, #0
   1652c:	d1f7      	bne.n	1651e <bt_hci_evt_le_pkey_complete+0x6>

	LOG_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   1652e:	782a      	ldrb	r2, [r5, #0]
   16530:	b98a      	cbnz	r2, 16556 <bt_hci_evt_le_pkey_complete+0x3e>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   16532:	4914      	ldr	r1, [pc, #80]	; (16584 <bt_hci_evt_le_pkey_complete+0x6c>)
   16534:	1c6a      	adds	r2, r5, #1
   16536:	f105 0041 	add.w	r0, r5, #65	; 0x41
   1653a:	f852 4b04 	ldr.w	r4, [r2], #4
   1653e:	4282      	cmp	r2, r0
   16540:	f841 4b04 	str.w	r4, [r1], #4
   16544:	d1f9      	bne.n	1653a <bt_hci_evt_le_pkey_complete+0x22>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16546:	e8d3 1fef 	ldaex	r1, [r3]
   1654a:	f041 0110 	orr.w	r1, r1, #16
   1654e:	e8c3 1fe2 	stlex	r2, r1, [r3]
   16552:	2a00      	cmp	r2, #0
   16554:	d1f7      	bne.n	16546 <bt_hci_evt_le_pkey_complete+0x2e>
	return list->head;
   16556:	4e0c      	ldr	r6, [pc, #48]	; (16588 <bt_hci_evt_le_pkey_complete+0x70>)
   16558:	6834      	ldr	r4, [r6, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1655a:	b16c      	cbz	r4, 16578 <bt_hci_evt_le_pkey_complete+0x60>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
   1655c:	4f09      	ldr	r7, [pc, #36]	; (16584 <bt_hci_evt_le_pkey_complete+0x6c>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1655e:	3c04      	subs	r4, #4
		if (cb->func) {
   16560:	6823      	ldr	r3, [r4, #0]
   16562:	b12b      	cbz	r3, 16570 <bt_hci_evt_le_pkey_complete+0x58>
			cb->func(evt->status ? NULL : pub_key);
   16564:	782a      	ldrb	r2, [r5, #0]
   16566:	2a00      	cmp	r2, #0
   16568:	bf0c      	ite	eq
   1656a:	4638      	moveq	r0, r7
   1656c:	2000      	movne	r0, #0
   1656e:	4798      	blx	r3
	return node->next;
   16570:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   16572:	b10c      	cbz	r4, 16578 <bt_hci_evt_le_pkey_complete+0x60>
   16574:	3c04      	subs	r4, #4
   16576:	e7f3      	b.n	16560 <bt_hci_evt_le_pkey_complete+0x48>
	list->head = NULL;
   16578:	2300      	movs	r3, #0
	list->tail = NULL;
   1657a:	e9c6 3300 	strd	r3, r3, [r6]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   1657e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16580:	2000c654 	.word	0x2000c654
   16584:	2000f1c8 	.word	0x2000f1c8
   16588:	2000e5e4 	.word	0x2000e5e4

0001658c <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	LOG_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   1658c:	4905      	ldr	r1, [pc, #20]	; (165a4 <bt_hci_evt_le_dhkey_complete+0x18>)
   1658e:	680b      	ldr	r3, [r1, #0]
   16590:	b133      	cbz	r3, 165a0 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   16592:	68c2      	ldr	r2, [r0, #12]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   16594:	2000      	movs	r0, #0
   16596:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   16598:	7811      	ldrb	r1, [r2, #0]
   1659a:	b901      	cbnz	r1, 1659e <bt_hci_evt_le_dhkey_complete+0x12>
   1659c:	1c50      	adds	r0, r2, #1
   1659e:	4718      	bx	r3
	}
}
   165a0:	4770      	bx	lr
   165a2:	bf00      	nop
   165a4:	2000e5e0 	.word	0x2000e5e0

000165a8 <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   165a8:	b570      	push	{r4, r5, r6, lr}
   165aa:	4604      	mov	r4, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   165ac:	4b12      	ldr	r3, [pc, #72]	; (165f8 <notify_connected+0x50>)
   165ae:	681d      	ldr	r5, [r3, #0]
   165b0:	b995      	cbnz	r5, 165d8 <notify_connected+0x30>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   165b2:	4d12      	ldr	r5, [pc, #72]	; (165fc <notify_connected+0x54>)
   165b4:	4e12      	ldr	r6, [pc, #72]	; (16600 <notify_connected+0x58>)
   165b6:	42b5      	cmp	r5, r6
   165b8:	d91c      	bls.n	165f4 <notify_connected+0x4c>
   165ba:	4912      	ldr	r1, [pc, #72]	; (16604 <notify_connected+0x5c>)
   165bc:	f240 53ba 	movw	r3, #1466	; 0x5ba
   165c0:	4a11      	ldr	r2, [pc, #68]	; (16608 <notify_connected+0x60>)
   165c2:	4812      	ldr	r0, [pc, #72]	; (1660c <notify_connected+0x64>)
   165c4:	f018 fefe 	bl	2f3c4 <assert_print>
   165c8:	4811      	ldr	r0, [pc, #68]	; (16610 <notify_connected+0x68>)
   165ca:	f018 fefb 	bl	2f3c4 <assert_print>
   165ce:	f240 51ba 	movw	r1, #1466	; 0x5ba
   165d2:	480d      	ldr	r0, [pc, #52]	; (16608 <notify_connected+0x60>)
   165d4:	f018 feef 	bl	2f3b6 <assert_post_action>
		if (cb->connected) {
   165d8:	682b      	ldr	r3, [r5, #0]
   165da:	b113      	cbz	r3, 165e2 <notify_connected+0x3a>
			cb->connected(conn, conn->err);
   165dc:	4620      	mov	r0, r4
   165de:	7b21      	ldrb	r1, [r4, #12]
   165e0:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   165e2:	69ad      	ldr	r5, [r5, #24]
   165e4:	e7e4      	b.n	165b0 <notify_connected+0x8>
		if (cb->connected) {
   165e6:	682b      	ldr	r3, [r5, #0]
   165e8:	b113      	cbz	r3, 165f0 <notify_connected+0x48>
			cb->connected(conn, conn->err);
   165ea:	4620      	mov	r0, r4
   165ec:	7b21      	ldrb	r1, [r4, #12]
   165ee:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   165f0:	351c      	adds	r5, #28
   165f2:	e7e0      	b.n	165b6 <notify_connected+0xe>
   165f4:	d3f7      	bcc.n	165e6 <notify_connected+0x3e>
		}
	}
}
   165f6:	bd70      	pop	{r4, r5, r6, pc}
   165f8:	2000e64c 	.word	0x2000e64c
   165fc:	00037854 	.word	0x00037854
   16600:	00037870 	.word	0x00037870
   16604:	0003c64d 	.word	0x0003c64d
   16608:	0003c61d 	.word	0x0003c61d
   1660c:	00039995 	.word	0x00039995
   16610:	0003a18c 	.word	0x0003a18c

00016614 <tx_notify>:
{
   16614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16618:	4604      	mov	r4, r0
	tx->cb = NULL;
   1661a:	f04f 0800 	mov.w	r8, #0
	k_fifo_put(&free_tx, tx);
   1661e:	4f14      	ldr	r7, [pc, #80]	; (16670 <tx_notify+0x5c>)
	__asm__ volatile(
   16620:	f04f 0220 	mov.w	r2, #32
   16624:	f3ef 8311 	mrs	r3, BASEPRI
   16628:	f382 8812 	msr	BASEPRI_MAX, r2
   1662c:	f3bf 8f6f 	isb	sy
	return list->head;
   16630:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   16632:	b929      	cbnz	r1, 16640 <tx_notify+0x2c>
	__asm__ volatile(
   16634:	f383 8811 	msr	BASEPRI, r3
   16638:	f3bf 8f6f 	isb	sy
}
   1663c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   16640:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
   16642:	680a      	ldr	r2, [r1, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   16644:	4281      	cmp	r1, r0
	list->tail = node;
   16646:	bf08      	it	eq
   16648:	6262      	streq	r2, [r4, #36]	; 0x24
	list->head = node;
   1664a:	6222      	str	r2, [r4, #32]
   1664c:	f383 8811 	msr	BASEPRI, r3
   16650:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   16654:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	k_fifo_put(&free_tx, tx);
   16658:	4638      	mov	r0, r7
	tx->user_data = NULL;
   1665a:	e9c1 8801 	strd	r8, r8, [r1, #4]
	tx->pending_no_cb = 0U;
   1665e:	f8c1 800c 	str.w	r8, [r1, #12]
	k_fifo_put(&free_tx, tx);
   16662:	f01f fd6c 	bl	3613e <k_queue_append>
		cb(conn, user_data, 0);
   16666:	2200      	movs	r2, #0
   16668:	4631      	mov	r1, r6
   1666a:	4620      	mov	r0, r4
   1666c:	47a8      	blx	r5
	while (1) {
   1666e:	e7d7      	b.n	16620 <tx_notify+0xc>
   16670:	2000cfdc 	.word	0x2000cfdc

00016674 <conn_tx_destroy>:
{
   16674:	b570      	push	{r4, r5, r6, lr}
   16676:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(tx);
   16678:	b949      	cbnz	r1, 1668e <conn_tx_destroy+0x1a>
   1667a:	490d      	ldr	r1, [pc, #52]	; (166b0 <conn_tx_destroy+0x3c>)
   1667c:	480d      	ldr	r0, [pc, #52]	; (166b4 <conn_tx_destroy+0x40>)
   1667e:	2343      	movs	r3, #67	; 0x43
   16680:	4a0d      	ldr	r2, [pc, #52]	; (166b8 <conn_tx_destroy+0x44>)
   16682:	f018 fe9f 	bl	2f3c4 <assert_print>
   16686:	2143      	movs	r1, #67	; 0x43
   16688:	480b      	ldr	r0, [pc, #44]	; (166b8 <conn_tx_destroy+0x44>)
   1668a:	f018 fe94 	bl	2f3b6 <assert_post_action>
	tx->cb = NULL;
   1668e:	2200      	movs	r2, #0
	void *user_data = tx->user_data;
   16690:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
   16694:	60ca      	str	r2, [r1, #12]
	tx->user_data = NULL;
   16696:	e9c1 2201 	strd	r2, r2, [r1, #4]
	k_fifo_put(&free_tx, tx);
   1669a:	4808      	ldr	r0, [pc, #32]	; (166bc <conn_tx_destroy+0x48>)
   1669c:	f01f fd4f 	bl	3613e <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
   166a0:	4631      	mov	r1, r6
   166a2:	4620      	mov	r0, r4
   166a4:	462b      	mov	r3, r5
}
   166a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
   166aa:	f06f 026d 	mvn.w	r2, #109	; 0x6d
   166ae:	4718      	bx	r3
   166b0:	0003c668 	.word	0x0003c668
   166b4:	00039995 	.word	0x00039995
   166b8:	0003c61d 	.word	0x0003c61d
   166bc:	2000cfdc 	.word	0x2000cfdc

000166c0 <send_frag>:
{
   166c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   166c4:	b083      	sub	sp, #12
	if (bt_dev.le.acl_mtu) {
   166c6:	f8df 919c 	ldr.w	r9, [pc, #412]	; 16864 <send_frag+0x1a4>
{
   166ca:	4698      	mov	r8, r3
	if (bt_dev.le.acl_mtu) {
   166cc:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
{
   166d0:	4604      	mov	r4, r0
	return NULL;
   166d2:	2b00      	cmp	r3, #0
{
   166d4:	af00      	add	r7, sp, #0
	return NULL;
   166d6:	f509 7084 	add.w	r0, r9, #264	; 0x108
{
   166da:	460e      	mov	r6, r1
	return NULL;
   166dc:	bf08      	it	eq
   166de:	2000      	moveq	r0, #0
{
   166e0:	4615      	mov	r5, r2
	return z_impl_k_sem_take(sem, timeout);
   166e2:	2200      	movs	r2, #0
   166e4:	2300      	movs	r3, #0
   166e6:	f013 f823 	bl	29730 <z_impl_k_sem_take>
	if (k_sem_take(bt_conn_get_pkts(conn), K_NO_WAIT)) {
   166ea:	2800      	cmp	r0, #0
   166ec:	f040 80b6 	bne.w	1685c <send_frag+0x19c>
	if (frag) {
   166f0:	2d00      	cmp	r5, #0
   166f2:	f000 8085 	beq.w	16800 <send_frag+0x140>
		uint16_t frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   166f6:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   166fa:	f105 0b0c 	add.w	fp, r5, #12
   166fe:	4658      	mov	r0, fp
   16700:	607b      	str	r3, [r7, #4]
   16702:	f01c fd2f 	bl	33164 <net_buf_simple_tailroom>
   16706:	687b      	ldr	r3, [r7, #4]
   16708:	4298      	cmp	r0, r3
   1670a:	d974      	bls.n	167f6 <send_frag+0x136>
	return bt_dev.le.acl_mtu;
   1670c:	f8b9 2104 	ldrh.w	r2, [r9, #260]	; 0x104
	return net_buf_simple_add_mem(&buf->b, mem, len);
   16710:	f856 1f0c 	ldr.w	r1, [r6, #12]!
   16714:	4658      	mov	r0, fp
   16716:	607a      	str	r2, [r7, #4]
   16718:	f01c fd2c 	bl	33174 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   1671c:	687a      	ldr	r2, [r7, #4]
   1671e:	4630      	mov	r0, r6
   16720:	4611      	mov	r1, r2
   16722:	f007 fe7d 	bl	1e420 <net_buf_simple_pull>
	if (conn->state != BT_CONN_CONNECTED) {
   16726:	7b63      	ldrb	r3, [r4, #13]
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   16728:	69ae      	ldr	r6, [r5, #24]
	if (conn->state != BT_CONN_CONNECTED) {
   1672a:	2b07      	cmp	r3, #7
   1672c:	f040 8093 	bne.w	16856 <send_frag+0x196>
	__asm__ volatile(
   16730:	f04f 0320 	mov.w	r3, #32
   16734:	f3ef 8211 	mrs	r2, BASEPRI
   16738:	f383 8812 	msr	BASEPRI_MAX, r3
   1673c:	f3bf 8f6f 	isb	sy
	if (tx) {
   16740:	2e00      	cmp	r6, #0
   16742:	d068      	beq.n	16816 <send_frag+0x156>
	parent->next = child;
   16744:	2300      	movs	r3, #0
   16746:	6033      	str	r3, [r6, #0]
	return list->tail;
   16748:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_APPEND(slist, snode)
   1674a:	2b00      	cmp	r3, #0
   1674c:	d160      	bne.n	16810 <send_frag+0x150>
	list->head = node;
   1674e:	e9c4 6605 	strd	r6, r6, [r4, #20]
	__asm__ volatile(
   16752:	f382 8811 	msr	BASEPRI, r2
   16756:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   1675a:	2104      	movs	r1, #4
   1675c:	f105 000c 	add.w	r0, r5, #12
   16760:	f007 fe3e 	bl	1e3e0 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   16764:	8823      	ldrh	r3, [r4, #0]
   16766:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
   1676a:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
   1676e:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   16772:	8a2b      	ldrh	r3, [r5, #16]
   16774:	3b04      	subs	r3, #4
   16776:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   16778:	2302      	movs	r3, #2
	return bt_send(buf);
   1677a:	4628      	mov	r0, r5
   1677c:	762b      	strb	r3, [r5, #24]
   1677e:	f7fe fa11 	bl	14ba4 <bt_send>
	if (err) {
   16782:	4680      	mov	r8, r0
   16784:	b390      	cbz	r0, 167ec <send_frag+0x12c>
		LOG_ERR("Unable to send to driver (err %d)", err);
   16786:	46eb      	mov	fp, sp
   16788:	b088      	sub	sp, #32
   1678a:	466a      	mov	r2, sp
   1678c:	4b36      	ldr	r3, [pc, #216]	; (16868 <send_frag+0x1a8>)
   1678e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16792:	e9c2 3005 	strd	r3, r0, [r2, #20]
   16796:	2303      	movs	r3, #3
   16798:	4834      	ldr	r0, [pc, #208]	; (1686c <send_frag+0x1ac>)
   1679a:	f842 3f10 	str.w	r3, [r2, #16]!
   1679e:	f01a fd91 	bl	312c4 <z_log_msg_static_create.constprop.0>
   167a2:	46dd      	mov	sp, fp
	__asm__ volatile(
   167a4:	f04f 0320 	mov.w	r3, #32
   167a8:	f3ef 8811 	mrs	r8, BASEPRI
   167ac:	f383 8812 	msr	BASEPRI_MAX, r3
   167b0:	f3bf 8f6f 	isb	sy
		if (tx) {
   167b4:	2e00      	cmp	r6, #0
   167b6:	d03b      	beq.n	16830 <send_frag+0x170>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
   167b8:	4631      	mov	r1, r6
   167ba:	f104 0014 	add.w	r0, r4, #20
   167be:	f01a fd58 	bl	31272 <sys_slist_find_and_remove>
	__asm__ volatile(
   167c2:	f388 8811 	msr	BASEPRI, r8
   167c6:	f3bf 8f6f 	isb	sy
		err = -EIO;
   167ca:	f06f 0804 	mvn.w	r8, #4
	if (bt_dev.le.acl_mtu) {
   167ce:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
	return NULL;
   167d2:	4827      	ldr	r0, [pc, #156]	; (16870 <send_frag+0x1b0>)
   167d4:	2b00      	cmp	r3, #0
   167d6:	bf08      	it	eq
   167d8:	2000      	moveq	r0, #0
	z_impl_k_sem_give(sem);
   167da:	f012 ff65 	bl	296a8 <z_impl_k_sem_give>
	if (tx) {
   167de:	b12e      	cbz	r6, 167ec <send_frag+0x12c>
		tx_data(buf)->tx = NULL;
   167e0:	2300      	movs	r3, #0
		conn_tx_destroy(conn, tx);
   167e2:	4631      	mov	r1, r6
   167e4:	4620      	mov	r0, r4
		tx_data(buf)->tx = NULL;
   167e6:	61ab      	str	r3, [r5, #24]
		conn_tx_destroy(conn, tx);
   167e8:	f7ff ff44 	bl	16674 <conn_tx_destroy>
}
   167ec:	4640      	mov	r0, r8
   167ee:	370c      	adds	r7, #12
   167f0:	46bd      	mov	sp, r7
   167f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_tailroom(&buf->b);
   167f6:	4658      	mov	r0, fp
   167f8:	f01c fcb4 	bl	33164 <net_buf_simple_tailroom>
		uint16_t frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   167fc:	b282      	uxth	r2, r0
   167fe:	e787      	b.n	16710 <send_frag+0x50>
		buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   16800:	2200      	movs	r2, #0
   16802:	2300      	movs	r3, #0
   16804:	f104 0038 	add.w	r0, r4, #56	; 0x38
   16808:	f01c fc90 	bl	3312c <net_buf_get>
   1680c:	4605      	mov	r5, r0
		frag = buf;
   1680e:	e78a      	b.n	16726 <send_frag+0x66>
	parent->next = child;
   16810:	601e      	str	r6, [r3, #0]
	list->tail = node;
   16812:	61a6      	str	r6, [r4, #24]
}
   16814:	e79d      	b.n	16752 <send_frag+0x92>
	return list->tail;
   16816:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   16818:	b133      	cbz	r3, 16828 <send_frag+0x168>
			pending_no_cb = &tail_tx->pending_no_cb;
   1681a:	f103 0a0c 	add.w	sl, r3, #12
   1681e:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   16820:	3301      	adds	r3, #1
   16822:	f8ca 3000 	str.w	r3, [sl]
   16826:	e794      	b.n	16752 <send_frag+0x92>
			pending_no_cb = &conn->pending_no_cb;
   16828:	69e3      	ldr	r3, [r4, #28]
   1682a:	f104 0a1c 	add.w	sl, r4, #28
   1682e:	e7f7      	b.n	16820 <send_frag+0x160>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   16830:	f8da 3000 	ldr.w	r3, [sl]
   16834:	b95b      	cbnz	r3, 1684e <send_frag+0x18e>
   16836:	490f      	ldr	r1, [pc, #60]	; (16874 <send_frag+0x1b4>)
   16838:	480f      	ldr	r0, [pc, #60]	; (16878 <send_frag+0x1b8>)
   1683a:	f240 2351 	movw	r3, #593	; 0x251
   1683e:	4a0f      	ldr	r2, [pc, #60]	; (1687c <send_frag+0x1bc>)
   16840:	f018 fdc0 	bl	2f3c4 <assert_print>
   16844:	f240 2151 	movw	r1, #593	; 0x251
   16848:	480c      	ldr	r0, [pc, #48]	; (1687c <send_frag+0x1bc>)
   1684a:	f018 fdb4 	bl	2f3b6 <assert_post_action>
			(*pending_no_cb)--;
   1684e:	3b01      	subs	r3, #1
   16850:	f8ca 3000 	str.w	r3, [sl]
   16854:	e7b5      	b.n	167c2 <send_frag+0x102>
		err = -ENOTCONN;
   16856:	f06f 087f 	mvn.w	r8, #127	; 0x7f
   1685a:	e7b8      	b.n	167ce <send_frag+0x10e>
		return -ENOBUFS;
   1685c:	f06f 0868 	mvn.w	r8, #104	; 0x68
   16860:	e7c4      	b.n	167ec <send_frag+0x12c>
   16862:	bf00      	nop
   16864:	2000c580 	.word	0x2000c580
   16868:	0003bc32 	.word	0x0003bc32
   1686c:	000378b8 	.word	0x000378b8
   16870:	2000c688 	.word	0x2000c688
   16874:	0003c66b 	.word	0x0003c66b
   16878:	00039995 	.word	0x00039995
   1687c:	0003c61d 	.word	0x0003c61d

00016880 <bt_conn_get_pkts>:
	if (bt_dev.le.acl_mtu) {
   16880:	4804      	ldr	r0, [pc, #16]	; (16894 <bt_conn_get_pkts+0x14>)
   16882:	f8b0 3104 	ldrh.w	r3, [r0, #260]	; 0x104
	return NULL;
   16886:	f500 7084 	add.w	r0, r0, #264	; 0x108
   1688a:	2b00      	cmp	r3, #0
}
   1688c:	bf08      	it	eq
   1688e:	2000      	moveq	r0, #0
   16890:	4770      	bx	lr
   16892:	bf00      	nop
   16894:	2000c580 	.word	0x2000c580

00016898 <bt_conn_new>:
{
   16898:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   1689a:	2200      	movs	r2, #0
   1689c:	4604      	mov	r4, r0
   1689e:	428a      	cmp	r2, r1
   168a0:	d102      	bne.n	168a8 <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   168a2:	2400      	movs	r4, #0
}
   168a4:	4620      	mov	r0, r4
   168a6:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   168a8:	2001      	movs	r0, #1
   168aa:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
   168ae:	e8d3 5fef 	ldaex	r5, [r3]
   168b2:	2d00      	cmp	r5, #0
   168b4:	d104      	bne.n	168c0 <bt_conn_new+0x28>
   168b6:	e8c3 0fec 	stlex	ip, r0, [r3]
   168ba:	f1bc 0f00 	cmp.w	ip, #0
   168be:	d1f6      	bne.n	168ae <bt_conn_new+0x16>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   168c0:	d002      	beq.n	168c8 <bt_conn_new+0x30>
   168c2:	34c8      	adds	r4, #200	; 0xc8
	for (i = 0; i < size; i++) {
   168c4:	4402      	add	r2, r0
   168c6:	e7ea      	b.n	1689e <bt_conn_new+0x6>
	if (!conn) {
   168c8:	2c00      	cmp	r4, #0
   168ca:	d0ea      	beq.n	168a2 <bt_conn_new+0xa>
__ssp_bos_icheck3(memset, void *, int)
   168cc:	22c0      	movs	r2, #192	; 0xc0
   168ce:	2100      	movs	r1, #0
   168d0:	4620      	mov	r0, r4
   168d2:	f01f fe49 	bl	36568 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   168d6:	f104 0060 	add.w	r0, r4, #96	; 0x60
   168da:	4904      	ldr	r1, [pc, #16]	; (168ec <bt_conn_new+0x54>)
   168dc:	f013 fada 	bl	29e94 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   168e0:	4903      	ldr	r1, [pc, #12]	; (168f0 <bt_conn_new+0x58>)
   168e2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   168e6:	f013 f987 	bl	29bf8 <k_work_init>
	return conn;
   168ea:	e7db      	b.n	168a4 <bt_conn_new+0xc>
   168ec:	000175b5 	.word	0x000175b5
   168f0:	000312cb 	.word	0x000312cb

000168f4 <conn_cleanup>:
{
   168f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   168f8:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
   168fa:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   168fc:	f104 0638 	add.w	r6, r4, #56	; 0x38
   16900:	2300      	movs	r3, #0
   16902:	2200      	movs	r2, #0
   16904:	4630      	mov	r0, r6
   16906:	f01c fc11 	bl	3312c <net_buf_get>
   1690a:	4603      	mov	r3, r0
   1690c:	b980      	cbnz	r0, 16930 <conn_cleanup+0x3c>
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   1690e:	6963      	ldr	r3, [r4, #20]
   16910:	b1cb      	cbz	r3, 16946 <conn_cleanup+0x52>
   16912:	4918      	ldr	r1, [pc, #96]	; (16974 <conn_cleanup+0x80>)
   16914:	f44f 733c 	mov.w	r3, #752	; 0x2f0
   16918:	4a17      	ldr	r2, [pc, #92]	; (16978 <conn_cleanup+0x84>)
   1691a:	4818      	ldr	r0, [pc, #96]	; (1697c <conn_cleanup+0x88>)
   1691c:	f018 fd52 	bl	2f3c4 <assert_print>
   16920:	4817      	ldr	r0, [pc, #92]	; (16980 <conn_cleanup+0x8c>)
   16922:	f018 fd4f 	bl	2f3c4 <assert_print>
   16926:	f44f 713c 	mov.w	r1, #752	; 0x2f0
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   1692a:	4813      	ldr	r0, [pc, #76]	; (16978 <conn_cleanup+0x84>)
   1692c:	f018 fd43 	bl	2f3b6 <assert_post_action>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   16930:	699d      	ldr	r5, [r3, #24]
		tx_data(buf)->tx = NULL;
   16932:	619f      	str	r7, [r3, #24]
		net_buf_unref(buf);
   16934:	f007 fc2a 	bl	1e18c <net_buf_unref>
		if (tx) {
   16938:	2d00      	cmp	r5, #0
   1693a:	d0e1      	beq.n	16900 <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
   1693c:	4629      	mov	r1, r5
   1693e:	4620      	mov	r0, r4
   16940:	f7ff fe98 	bl	16674 <conn_tx_destroy>
   16944:	e7da      	b.n	168fc <conn_cleanup+0x8>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   16946:	69e3      	ldr	r3, [r4, #28]
   16948:	b14b      	cbz	r3, 1695e <conn_cleanup+0x6a>
   1694a:	490e      	ldr	r1, [pc, #56]	; (16984 <conn_cleanup+0x90>)
   1694c:	f240 23f1 	movw	r3, #753	; 0x2f1
   16950:	4a09      	ldr	r2, [pc, #36]	; (16978 <conn_cleanup+0x84>)
   16952:	480a      	ldr	r0, [pc, #40]	; (1697c <conn_cleanup+0x88>)
   16954:	f018 fd36 	bl	2f3c4 <assert_print>
   16958:	f240 21f1 	movw	r1, #753	; 0x2f1
   1695c:	e7e5      	b.n	1692a <conn_cleanup+0x36>
	bt_conn_reset_rx_state(conn);
   1695e:	4620      	mov	r0, r4
   16960:	f01a fcb6 	bl	312d0 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   16964:	f104 0060 	add.w	r0, r4, #96	; 0x60
   16968:	2200      	movs	r2, #0
}
   1696a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   1696e:	2300      	movs	r3, #0
   16970:	f013 bbac 	b.w	2a0cc <k_work_reschedule>
   16974:	0003c67e 	.word	0x0003c67e
   16978:	0003c61d 	.word	0x0003c61d
   1697c:	00039995 	.word	0x00039995
   16980:	0003c6a4 	.word	0x0003c6a4
   16984:	0003c6b9 	.word	0x0003c6b9

00016988 <bt_conn_recv>:
{
   16988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1698c:	4616      	mov	r6, r2
   1698e:	b086      	sub	sp, #24
   16990:	af00      	add	r7, sp, #0
   16992:	4604      	mov	r4, r0
   16994:	460d      	mov	r5, r1
	tx_notify(conn);
   16996:	f7ff fe3d 	bl	16614 <tx_notify>
	switch (flags) {
   1699a:	2e01      	cmp	r6, #1
   1699c:	d030      	beq.n	16a00 <bt_conn_recv+0x78>
   1699e:	2e02      	cmp	r6, #2
   169a0:	d16a      	bne.n	16a78 <bt_conn_recv+0xf0>
		if (conn->rx) {
   169a2:	6923      	ldr	r3, [r4, #16]
   169a4:	b163      	cbz	r3, 169c0 <bt_conn_recv+0x38>
			LOG_ERR("Unexpected first L2CAP frame");
   169a6:	4b40      	ldr	r3, [pc, #256]	; (16aa8 <bt_conn_recv+0x120>)
   169a8:	4840      	ldr	r0, [pc, #256]	; (16aac <bt_conn_recv+0x124>)
   169aa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   169ae:	e9c7 6304 	strd	r6, r3, [r7, #16]
   169b2:	f107 0210 	add.w	r2, r7, #16
   169b6:	f01a fc85 	bl	312c4 <z_log_msg_static_create.constprop.0>
			bt_conn_reset_rx_state(conn);
   169ba:	4620      	mov	r0, r4
   169bc:	f01a fc88 	bl	312d0 <bt_conn_reset_rx_state>
		conn->rx = buf;
   169c0:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   169c2:	6921      	ldr	r1, [r4, #16]
   169c4:	8a08      	ldrh	r0, [r1, #16]
   169c6:	2801      	cmp	r0, #1
   169c8:	d930      	bls.n	16a2c <bt_conn_recv+0xa4>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   169ca:	68cb      	ldr	r3, [r1, #12]
   169cc:	881b      	ldrh	r3, [r3, #0]
   169ce:	3304      	adds	r3, #4
   169d0:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   169d2:	4298      	cmp	r0, r3
   169d4:	d32a      	bcc.n	16a2c <bt_conn_recv+0xa4>
	if (conn->rx->len > acl_total_len) {
   169d6:	d95f      	bls.n	16a98 <bt_conn_recv+0x110>
		LOG_ERR("ACL len mismatch (%u > %u)", conn->rx->len, acl_total_len);
   169d8:	466d      	mov	r5, sp
   169da:	b088      	sub	sp, #32
   169dc:	466a      	mov	r2, sp
   169de:	61d3      	str	r3, [r2, #28]
   169e0:	2304      	movs	r3, #4
   169e2:	4933      	ldr	r1, [pc, #204]	; (16ab0 <bt_conn_recv+0x128>)
   169e4:	e9c2 1005 	strd	r1, r0, [r2, #20]
   169e8:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   169ec:	482f      	ldr	r0, [pc, #188]	; (16aac <bt_conn_recv+0x124>)
   169ee:	f842 3f10 	str.w	r3, [r2, #16]!
   169f2:	f01a fc67 	bl	312c4 <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   169f6:	4620      	mov	r0, r4
   169f8:	46ad      	mov	sp, r5
   169fa:	f01a fc69 	bl	312d0 <bt_conn_reset_rx_state>
		return;
   169fe:	e015      	b.n	16a2c <bt_conn_recv+0xa4>
		if (!conn->rx) {
   16a00:	6920      	ldr	r0, [r4, #16]
   16a02:	b970      	cbnz	r0, 16a22 <bt_conn_recv+0x9a>
			LOG_ERR("Unexpected L2CAP continuation");
   16a04:	4b2b      	ldr	r3, [pc, #172]	; (16ab4 <bt_conn_recv+0x12c>)
   16a06:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16a0a:	617b      	str	r3, [r7, #20]
   16a0c:	2302      	movs	r3, #2
   16a0e:	4827      	ldr	r0, [pc, #156]	; (16aac <bt_conn_recv+0x124>)
   16a10:	613b      	str	r3, [r7, #16]
   16a12:	f107 0210 	add.w	r2, r7, #16
   16a16:	f01a fc55 	bl	312c4 <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   16a1a:	4620      	mov	r0, r4
   16a1c:	f01a fc58 	bl	312d0 <bt_conn_reset_rx_state>
   16a20:	e001      	b.n	16a26 <bt_conn_recv+0x9e>
		if (!buf->len) {
   16a22:	8a2e      	ldrh	r6, [r5, #16]
   16a24:	b936      	cbnz	r6, 16a34 <bt_conn_recv+0xac>
		net_buf_unref(buf);
   16a26:	4628      	mov	r0, r5
   16a28:	f007 fbb0 	bl	1e18c <net_buf_unref>
}
   16a2c:	3718      	adds	r7, #24
   16a2e:	46bd      	mov	sp, r7
   16a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16a34:	300c      	adds	r0, #12
   16a36:	f01c fb95 	bl	33164 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   16a3a:	4286      	cmp	r6, r0
   16a3c:	d912      	bls.n	16a64 <bt_conn_recv+0xdc>
			LOG_ERR("Not enough buffer space for L2CAP data");
   16a3e:	4b1e      	ldr	r3, [pc, #120]	; (16ab8 <bt_conn_recv+0x130>)
   16a40:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16a44:	617b      	str	r3, [r7, #20]
   16a46:	2302      	movs	r3, #2
   16a48:	4818      	ldr	r0, [pc, #96]	; (16aac <bt_conn_recv+0x124>)
   16a4a:	613b      	str	r3, [r7, #16]
   16a4c:	f107 0210 	add.w	r2, r7, #16
   16a50:	f01a fc38 	bl	312c4 <z_log_msg_static_create.constprop.0>
			bt_l2cap_recv(conn, conn->rx, false);
   16a54:	2200      	movs	r2, #0
   16a56:	4620      	mov	r0, r4
   16a58:	6921      	ldr	r1, [r4, #16]
   16a5a:	f001 f873 	bl	17b44 <bt_l2cap_recv>
			conn->rx = NULL;
   16a5e:	2300      	movs	r3, #0
   16a60:	6123      	str	r3, [r4, #16]
			net_buf_unref(buf);
   16a62:	e7e0      	b.n	16a26 <bt_conn_recv+0x9e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   16a64:	6920      	ldr	r0, [r4, #16]
   16a66:	8a2a      	ldrh	r2, [r5, #16]
   16a68:	68e9      	ldr	r1, [r5, #12]
   16a6a:	300c      	adds	r0, #12
   16a6c:	f01c fb82 	bl	33174 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   16a70:	4628      	mov	r0, r5
   16a72:	f007 fb8b 	bl	1e18c <net_buf_unref>
		break;
   16a76:	e7a4      	b.n	169c2 <bt_conn_recv+0x3a>
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   16a78:	46e8      	mov	r8, sp
   16a7a:	b088      	sub	sp, #32
   16a7c:	466a      	mov	r2, sp
   16a7e:	4b0f      	ldr	r3, [pc, #60]	; (16abc <bt_conn_recv+0x134>)
   16a80:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
	switch (flags) {
   16a84:	e9c2 3605 	strd	r3, r6, [r2, #20]
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   16a88:	2303      	movs	r3, #3
   16a8a:	4808      	ldr	r0, [pc, #32]	; (16aac <bt_conn_recv+0x124>)
   16a8c:	f842 3f10 	str.w	r3, [r2, #16]!
   16a90:	f01a fc18 	bl	312c4 <z_log_msg_static_create.constprop.0>
   16a94:	46c5      	mov	sp, r8
   16a96:	e7c0      	b.n	16a1a <bt_conn_recv+0x92>
	conn->rx = NULL;
   16a98:	2300      	movs	r3, #0
	bt_l2cap_recv(conn, buf, true);
   16a9a:	2201      	movs	r2, #1
   16a9c:	4620      	mov	r0, r4
	conn->rx = NULL;
   16a9e:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   16aa0:	f001 f850 	bl	17b44 <bt_l2cap_recv>
		__ASSERT(false, "Invalid connection type %u", conn->type);
   16aa4:	e7c2      	b.n	16a2c <bt_conn_recv+0xa4>
   16aa6:	bf00      	nop
   16aa8:	0003c6d2 	.word	0x0003c6d2
   16aac:	000378b8 	.word	0x000378b8
   16ab0:	0003c752 	.word	0x0003c752
   16ab4:	0003c6ef 	.word	0x0003c6ef
   16ab8:	0003c70d 	.word	0x0003c70d
   16abc:	0003c734 	.word	0x0003c734

00016ac0 <bt_conn_send_cb>:
{
   16ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16ac4:	4698      	mov	r8, r3
	if (buf->user_data_size < CONFIG_BT_CONN_TX_USER_DATA_SIZE) {
   16ac6:	7acb      	ldrb	r3, [r1, #11]
{
   16ac8:	4606      	mov	r6, r0
	if (buf->user_data_size < CONFIG_BT_CONN_TX_USER_DATA_SIZE) {
   16aca:	2b07      	cmp	r3, #7
{
   16acc:	460d      	mov	r5, r1
   16ace:	4617      	mov	r7, r2
   16ad0:	b086      	sub	sp, #24
	if (buf->user_data_size < CONFIG_BT_CONN_TX_USER_DATA_SIZE) {
   16ad2:	d80e      	bhi.n	16af2 <bt_conn_send_cb+0x32>
		LOG_ERR("not enough room in user_data");
   16ad4:	4b2c      	ldr	r3, [pc, #176]	; (16b88 <bt_conn_send_cb+0xc8>)
   16ad6:	482d      	ldr	r0, [pc, #180]	; (16b8c <bt_conn_send_cb+0xcc>)
   16ad8:	9305      	str	r3, [sp, #20]
   16ada:	2302      	movs	r3, #2
   16adc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16ae0:	aa04      	add	r2, sp, #16
   16ae2:	9304      	str	r3, [sp, #16]
   16ae4:	f01a fbee 	bl	312c4 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   16ae8:	f06f 0015 	mvn.w	r0, #21
}
   16aec:	b006      	add	sp, #24
   16aee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (conn->state != BT_CONN_CONNECTED) {
   16af2:	7b43      	ldrb	r3, [r0, #13]
   16af4:	2b07      	cmp	r3, #7
   16af6:	d00c      	beq.n	16b12 <bt_conn_send_cb+0x52>
		LOG_ERR("not connected!");
   16af8:	4b25      	ldr	r3, [pc, #148]	; (16b90 <bt_conn_send_cb+0xd0>)
   16afa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16afe:	9305      	str	r3, [sp, #20]
   16b00:	2302      	movs	r3, #2
   16b02:	4822      	ldr	r0, [pc, #136]	; (16b8c <bt_conn_send_cb+0xcc>)
   16b04:	aa04      	add	r2, sp, #16
   16b06:	9304      	str	r3, [sp, #16]
   16b08:	f01a fbdc 	bl	312c4 <z_log_msg_static_create.constprop.0>
		return -ENOTCONN;
   16b0c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   16b10:	e7ec      	b.n	16aec <bt_conn_send_cb+0x2c>
	if (cb) {
   16b12:	2a00      	cmp	r2, #0
   16b14:	d033      	beq.n	16b7e <bt_conn_send_cb+0xbe>
	return z_impl_z_current_get();
   16b16:	f014 fc4d 	bl	2b3b4 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   16b1a:	4b1e      	ldr	r3, [pc, #120]	; (16b94 <bt_conn_send_cb+0xd4>)
   16b1c:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   16b1e:	481e      	ldr	r0, [pc, #120]	; (16b98 <bt_conn_send_cb+0xd8>)
   16b20:	bf07      	ittee	eq
   16b22:	2200      	moveq	r2, #0
   16b24:	2300      	moveq	r3, #0
   16b26:	f04f 32ff 	movne.w	r2, #4294967295
   16b2a:	f04f 33ff 	movne.w	r3, #4294967295
   16b2e:	f012 fd51 	bl	295d4 <z_impl_k_queue_get>
   16b32:	4604      	mov	r4, r0
		if (!tx) {
   16b34:	b328      	cbz	r0, 16b82 <bt_conn_send_cb+0xc2>
		if (conn->state != BT_CONN_CONNECTED) {
   16b36:	7b73      	ldrb	r3, [r6, #13]
   16b38:	2b07      	cmp	r3, #7
   16b3a:	d012      	beq.n	16b62 <bt_conn_send_cb+0xa2>
			LOG_WRN("Disconnected while allocating context");
   16b3c:	4b17      	ldr	r3, [pc, #92]	; (16b9c <bt_conn_send_cb+0xdc>)
   16b3e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   16b42:	9305      	str	r3, [sp, #20]
   16b44:	2302      	movs	r3, #2
   16b46:	4811      	ldr	r0, [pc, #68]	; (16b8c <bt_conn_send_cb+0xcc>)
   16b48:	aa04      	add	r2, sp, #16
   16b4a:	9304      	str	r3, [sp, #16]
   16b4c:	f01a fbba 	bl	312c4 <z_log_msg_static_create.constprop.0>
	tx->cb = NULL;
   16b50:	2300      	movs	r3, #0
	k_fifo_put(&free_tx, tx);
   16b52:	4621      	mov	r1, r4
	tx->user_data = NULL;
   16b54:	e9c4 3301 	strd	r3, r3, [r4, #4]
	k_fifo_put(&free_tx, tx);
   16b58:	480f      	ldr	r0, [pc, #60]	; (16b98 <bt_conn_send_cb+0xd8>)
	tx->pending_no_cb = 0U;
   16b5a:	60e3      	str	r3, [r4, #12]
	k_fifo_put(&free_tx, tx);
   16b5c:	f01f faef 	bl	3613e <k_queue_append>
}
   16b60:	e7d4      	b.n	16b0c <bt_conn_send_cb+0x4c>
		tx->pending_no_cb = 0U;
   16b62:	2300      	movs	r3, #0
		tx->user_data = user_data;
   16b64:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   16b68:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   16b6a:	61ac      	str	r4, [r5, #24]
	tx_data(buf)->is_cont = false;
   16b6c:	2400      	movs	r4, #0
	net_buf_put(&conn->tx_queue, buf);
   16b6e:	f106 0038 	add.w	r0, r6, #56	; 0x38
   16b72:	4629      	mov	r1, r5
	tx_data(buf)->is_cont = false;
   16b74:	772c      	strb	r4, [r5, #28]
	net_buf_put(&conn->tx_queue, buf);
   16b76:	f007 fae3 	bl	1e140 <net_buf_put>
	return 0;
   16b7a:	4620      	mov	r0, r4
   16b7c:	e7b6      	b.n	16aec <bt_conn_send_cb+0x2c>
   16b7e:	4614      	mov	r4, r2
   16b80:	e7f3      	b.n	16b6a <bt_conn_send_cb+0xaa>
			return -ENOBUFS;
   16b82:	f06f 0068 	mvn.w	r0, #104	; 0x68
   16b86:	e7b1      	b.n	16aec <bt_conn_send_cb+0x2c>
   16b88:	0003c76d 	.word	0x0003c76d
   16b8c:	000378b8 	.word	0x000378b8
   16b90:	0003c78a 	.word	0x0003c78a
   16b94:	2000e108 	.word	0x2000e108
   16b98:	2000cfdc 	.word	0x2000cfdc
   16b9c:	0003c799 	.word	0x0003c799

00016ba0 <bt_conn_prepare_events>:
{
   16ba0:	b570      	push	{r4, r5, r6, lr}
   16ba2:	4604      	mov	r4, r0
	z_impl_k_poll_signal_init(sig);
   16ba4:	481d      	ldr	r0, [pc, #116]	; (16c1c <bt_conn_prepare_events+0x7c>)
   16ba6:	f01f fc7b 	bl	364a0 <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   16baa:	4620      	mov	r0, r4
   16bac:	2200      	movs	r2, #0
   16bae:	2101      	movs	r1, #1
   16bb0:	4b1a      	ldr	r3, [pc, #104]	; (16c1c <bt_conn_prepare_events+0x7c>)
   16bb2:	f015 faa5 	bl	2c100 <k_poll_event_init>
	if (!atomic_get(&conn->ref)) {
   16bb6:	481a      	ldr	r0, [pc, #104]	; (16c20 <bt_conn_prepare_events+0x80>)
		if (!conn_prepare_events(conn, &events[ev_count])) {
   16bb8:	f104 0614 	add.w	r6, r4, #20
	if (!atomic_get(&conn->ref)) {
   16bbc:	f01a fb7f 	bl	312be <atomic_get>
   16bc0:	b908      	cbnz	r0, 16bc6 <bt_conn_prepare_events+0x26>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   16bc2:	2001      	movs	r0, #1
}
   16bc4:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   16bc6:	4d17      	ldr	r5, [pc, #92]	; (16c24 <bt_conn_prepare_events+0x84>)
   16bc8:	7b6b      	ldrb	r3, [r5, #13]
   16bca:	b953      	cbnz	r3, 16be2 <bt_conn_prepare_events+0x42>
   16bcc:	f06f 0140 	mvn.w	r1, #64	; 0x40
   16bd0:	1d28      	adds	r0, r5, #4
   16bd2:	f01a fb69 	bl	312a8 <atomic_and>
   16bd6:	0643      	lsls	r3, r0, #25
   16bd8:	d503      	bpl.n	16be2 <bt_conn_prepare_events+0x42>
		conn_cleanup(conn);
   16bda:	4628      	mov	r0, r5
   16bdc:	f7ff fe8a 	bl	168f4 <conn_cleanup>
		return -ENOTCONN;
   16be0:	e7ef      	b.n	16bc2 <bt_conn_prepare_events+0x22>
	if (conn->state != BT_CONN_CONNECTED) {
   16be2:	7b6b      	ldrb	r3, [r5, #13]
   16be4:	2b07      	cmp	r3, #7
   16be6:	d1ec      	bne.n	16bc2 <bt_conn_prepare_events+0x22>
	if (bt_dev.le.acl_mtu) {
   16be8:	4b0f      	ldr	r3, [pc, #60]	; (16c28 <bt_conn_prepare_events+0x88>)
   16bea:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
   16bee:	2a00      	cmp	r2, #0
   16bf0:	d0e7      	beq.n	16bc2 <bt_conn_prepare_events+0x22>
	return sem->count;
   16bf2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (packets_waiting && !buffers_available) {
   16bf6:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   16bf8:	b159      	cbz	r1, 16c12 <bt_conn_prepare_events+0x72>
   16bfa:	b952      	cbnz	r2, 16c12 <bt_conn_prepare_events+0x72>
		k_poll_event_init(&events[0],
   16bfc:	2102      	movs	r1, #2
   16bfe:	f503 7384 	add.w	r3, r3, #264	; 0x108
		k_poll_event_init(&events[0],
   16c02:	4630      	mov	r0, r6
   16c04:	f015 fa7c 	bl	2c100 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   16c08:	2301      	movs	r3, #1
			ev_count++;
   16c0a:	2002      	movs	r0, #2
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   16c0c:	f884 3020 	strb.w	r3, [r4, #32]
	return ev_count;
   16c10:	e7d8      	b.n	16bc4 <bt_conn_prepare_events+0x24>
		k_poll_event_init(&events[0],
   16c12:	2200      	movs	r2, #0
   16c14:	2104      	movs	r1, #4
   16c16:	4b05      	ldr	r3, [pc, #20]	; (16c2c <bt_conn_prepare_events+0x8c>)
   16c18:	e7f3      	b.n	16c02 <bt_conn_prepare_events+0x62>
   16c1a:	bf00      	nop
   16c1c:	2000c884 	.word	0x2000c884
   16c20:	2000da38 	.word	0x2000da38
   16c24:	2000d978 	.word	0x2000d978
   16c28:	2000c580 	.word	0x2000c580
   16c2c:	2000d9b0 	.word	0x2000d9b0

00016c30 <bt_conn_ref>:
	__ASSERT_NO_MSG(conn);
   16c30:	4603      	mov	r3, r0
{
   16c32:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(conn);
   16c34:	b190      	cbz	r0, 16c5c <bt_conn_ref+0x2c>
		old = atomic_get(&conn->ref);
   16c36:	f100 02c0 	add.w	r2, r0, #192	; 0xc0
   16c3a:	4610      	mov	r0, r2
   16c3c:	f01a fb3f 	bl	312be <atomic_get>
		if (!old) {
   16c40:	b1c0      	cbz	r0, 16c74 <bt_conn_ref+0x44>
	} while (!atomic_cas(&conn->ref, old, old + 1));
   16c42:	1c41      	adds	r1, r0, #1
   16c44:	e8d2 4fef 	ldaex	r4, [r2]
   16c48:	4284      	cmp	r4, r0
   16c4a:	d104      	bne.n	16c56 <bt_conn_ref+0x26>
   16c4c:	e8c2 1fec 	stlex	ip, r1, [r2]
   16c50:	f1bc 0f00 	cmp.w	ip, #0
   16c54:	d1f6      	bne.n	16c44 <bt_conn_ref+0x14>
   16c56:	d1f0      	bne.n	16c3a <bt_conn_ref+0xa>
}
   16c58:	4618      	mov	r0, r3
   16c5a:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(conn);
   16c5c:	4906      	ldr	r1, [pc, #24]	; (16c78 <bt_conn_ref+0x48>)
   16c5e:	4807      	ldr	r0, [pc, #28]	; (16c7c <bt_conn_ref+0x4c>)
   16c60:	f240 43db 	movw	r3, #1243	; 0x4db
   16c64:	4a06      	ldr	r2, [pc, #24]	; (16c80 <bt_conn_ref+0x50>)
   16c66:	f018 fbad 	bl	2f3c4 <assert_print>
   16c6a:	f240 41db 	movw	r1, #1243	; 0x4db
   16c6e:	4804      	ldr	r0, [pc, #16]	; (16c80 <bt_conn_ref+0x50>)
   16c70:	f018 fba1 	bl	2f3b6 <assert_post_action>
			return NULL;
   16c74:	4603      	mov	r3, r0
   16c76:	e7ef      	b.n	16c58 <bt_conn_ref+0x28>
   16c78:	0003bca4 	.word	0x0003bca4
   16c7c:	00039995 	.word	0x00039995
   16c80:	0003c61d 	.word	0x0003c61d

00016c84 <bt_conn_unref>:
{
   16c84:	b508      	push	{r3, lr}
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   16c86:	30c0      	adds	r0, #192	; 0xc0
   16c88:	e8d0 3fef 	ldaex	r3, [r0]
   16c8c:	1e5a      	subs	r2, r3, #1
   16c8e:	e8c0 2fe1 	stlex	r1, r2, [r0]
   16c92:	2900      	cmp	r1, #0
   16c94:	d1f8      	bne.n	16c88 <bt_conn_unref+0x4>
	__ASSERT(old > 0, "Conn reference counter is 0");
   16c96:	2b00      	cmp	r3, #0
   16c98:	dc0e      	bgt.n	16cb8 <bt_conn_unref+0x34>
   16c9a:	4908      	ldr	r1, [pc, #32]	; (16cbc <bt_conn_unref+0x38>)
   16c9c:	f240 43f7 	movw	r3, #1271	; 0x4f7
   16ca0:	4a07      	ldr	r2, [pc, #28]	; (16cc0 <bt_conn_unref+0x3c>)
   16ca2:	4808      	ldr	r0, [pc, #32]	; (16cc4 <bt_conn_unref+0x40>)
   16ca4:	f018 fb8e 	bl	2f3c4 <assert_print>
   16ca8:	4807      	ldr	r0, [pc, #28]	; (16cc8 <bt_conn_unref+0x44>)
   16caa:	f018 fb8b 	bl	2f3c4 <assert_print>
   16cae:	f240 41f7 	movw	r1, #1271	; 0x4f7
   16cb2:	4803      	ldr	r0, [pc, #12]	; (16cc0 <bt_conn_unref+0x3c>)
   16cb4:	f018 fb7f 	bl	2f3b6 <assert_post_action>
}
   16cb8:	bd08      	pop	{r3, pc}
   16cba:	bf00      	nop
   16cbc:	0003c7bf 	.word	0x0003c7bf
   16cc0:	0003c61d 	.word	0x0003c61d
   16cc4:	00039995 	.word	0x00039995
   16cc8:	0003c7c7 	.word	0x0003c7c7

00016ccc <bt_conn_lookup_handle>:
{
   16ccc:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   16cce:	2101      	movs	r1, #1
   16cd0:	4801      	ldr	r0, [pc, #4]	; (16cd8 <bt_conn_lookup_handle+0xc>)
   16cd2:	f01a bb06 	b.w	312e2 <conn_lookup_handle>
   16cd6:	bf00      	nop
   16cd8:	2000d978 	.word	0x2000d978

00016cdc <bt_conn_set_state>:
{
   16cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->state == state) {
   16ce0:	7b45      	ldrb	r5, [r0, #13]
{
   16ce2:	4604      	mov	r4, r0
	if (conn->state == state) {
   16ce4:	428d      	cmp	r5, r1
{
   16ce6:	460e      	mov	r6, r1
   16ce8:	af00      	add	r7, sp, #0
	if (conn->state == state) {
   16cea:	d119      	bne.n	16d20 <bt_conn_set_state+0x44>
	switch (state) {
   16cec:	2d08      	cmp	r5, #8
   16cee:	bf98      	it	ls
   16cf0:	4b7d      	ldrls	r3, [pc, #500]	; (16ee8 <bt_conn_set_state+0x20c>)
		LOG_WRN("no transition %s", state2str(state));
   16cf2:	466c      	mov	r4, sp
   16cf4:	b088      	sub	sp, #32
   16cf6:	bf94      	ite	ls
   16cf8:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
	if (conn->state == state) {
   16cfc:	4b7b      	ldrhi	r3, [pc, #492]	; (16eec <bt_conn_set_state+0x210>)
		LOG_WRN("no transition %s", state2str(state));
   16cfe:	466a      	mov	r2, sp
   16d00:	497b      	ldr	r1, [pc, #492]	; (16ef0 <bt_conn_set_state+0x214>)
   16d02:	e9c2 1305 	strd	r1, r3, [r2, #20]
   16d06:	f44f 7300 	mov.w	r3, #512	; 0x200
   16d0a:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
   16d0e:	8393      	strh	r3, [r2, #28]
   16d10:	4b78      	ldr	r3, [pc, #480]	; (16ef4 <bt_conn_set_state+0x218>)
   16d12:	f842 3f10 	str.w	r3, [r2, #16]!
		LOG_WRN("no valid (%u) state was set", state);
   16d16:	4878      	ldr	r0, [pc, #480]	; (16ef8 <bt_conn_set_state+0x21c>)
   16d18:	f01a fad4 	bl	312c4 <z_log_msg_static_create.constprop.0>
   16d1c:	46a5      	mov	sp, r4
   16d1e:	e049      	b.n	16db4 <bt_conn_set_state+0xd8>
	conn->state = state;
   16d20:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   16d22:	b165      	cbz	r5, 16d3e <bt_conn_set_state+0x62>
   16d24:	2d06      	cmp	r5, #6
   16d26:	d010      	beq.n	16d4a <bt_conn_set_state+0x6e>
	switch (conn->state) {
   16d28:	7b63      	ldrb	r3, [r4, #13]
   16d2a:	2b08      	cmp	r3, #8
   16d2c:	f200 80d7 	bhi.w	16ede <bt_conn_set_state+0x202>
   16d30:	e8df f003 	tbb	[pc, r3]
   16d34:	40401243 	.word	0x40401243
   16d38:	32944040 	.word	0x32944040
   16d3c:	40          	.byte	0x40
   16d3d:	00          	.byte	0x00
		if (conn->type != BT_CONN_TYPE_ISO) {
   16d3e:	7883      	ldrb	r3, [r0, #2]
   16d40:	2b08      	cmp	r3, #8
   16d42:	d0f1      	beq.n	16d28 <bt_conn_set_state+0x4c>
			bt_conn_ref(conn);
   16d44:	f7ff ff74 	bl	16c30 <bt_conn_ref>
   16d48:	e7ee      	b.n	16d28 <bt_conn_set_state+0x4c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   16d4a:	7883      	ldrb	r3, [r0, #2]
   16d4c:	2b01      	cmp	r3, #1
   16d4e:	d1eb      	bne.n	16d28 <bt_conn_set_state+0x4c>
			k_work_cancel_delayable(&conn->deferred_work);
   16d50:	3060      	adds	r0, #96	; 0x60
   16d52:	f013 f9c1 	bl	2a0d8 <k_work_cancel_delayable>
   16d56:	e7e7      	b.n	16d28 <bt_conn_set_state+0x4c>
		tx->pending_no_cb = 0U;
   16d58:	f04f 0800 	mov.w	r8, #0
	if (bt_dev.le.acl_mtu) {
   16d5c:	4d67      	ldr	r5, [pc, #412]	; (16efc <bt_conn_set_state+0x220>)
	return NULL;
   16d5e:	f505 7684 	add.w	r6, r5, #264	; 0x108
	__asm__ volatile(
   16d62:	f04f 0220 	mov.w	r2, #32
   16d66:	f3ef 8311 	mrs	r3, BASEPRI
   16d6a:	f382 8812 	msr	BASEPRI_MAX, r2
   16d6e:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   16d72:	69e2      	ldr	r2, [r4, #28]
   16d74:	2a00      	cmp	r2, #0
   16d76:	f000 808d 	beq.w	16e94 <bt_conn_set_state+0x1b8>
			conn->pending_no_cb--;
   16d7a:	3a01      	subs	r2, #1
   16d7c:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   16d7e:	f383 8811 	msr	BASEPRI, r3
   16d82:	f3bf 8f6f 	isb	sy
	if (bt_dev.le.acl_mtu) {
   16d86:	f8b5 3104 	ldrh.w	r3, [r5, #260]	; 0x104
	return NULL;
   16d8a:	2b00      	cmp	r3, #0
   16d8c:	bf14      	ite	ne
   16d8e:	4630      	movne	r0, r6
   16d90:	2000      	moveq	r0, #0
	z_impl_k_sem_give(sem);
   16d92:	f012 fc89 	bl	296a8 <z_impl_k_sem_give>
}
   16d96:	e7e4      	b.n	16d62 <bt_conn_set_state+0x86>
		if (conn->type == BT_CONN_TYPE_SCO) {
   16d98:	78a3      	ldrb	r3, [r4, #2]
   16d9a:	2b04      	cmp	r3, #4
   16d9c:	d00a      	beq.n	16db4 <bt_conn_set_state+0xd8>
	z_impl_k_queue_init(queue);
   16d9e:	f104 0038 	add.w	r0, r4, #56	; 0x38
   16da2:	f01f f9bf 	bl	36124 <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(sig, result);
   16da6:	2100      	movs	r1, #0
   16da8:	4855      	ldr	r0, [pc, #340]	; (16f00 <bt_conn_set_state+0x224>)
   16daa:	f015 fac7 	bl	2c33c <z_impl_k_poll_signal_raise>
	list->head = NULL;
   16dae:	2300      	movs	r3, #0
	list->tail = NULL;
   16db0:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
}
   16db4:	46bd      	mov	sp, r7
   16db6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
   16dba:	78a3      	ldrb	r3, [r4, #2]
   16dbc:	2b04      	cmp	r3, #4
   16dbe:	d103      	bne.n	16dc8 <bt_conn_set_state+0xec>
			bt_conn_unref(conn);
   16dc0:	4620      	mov	r0, r4
   16dc2:	f7ff ff5f 	bl	16c84 <bt_conn_unref>
			break;
   16dc6:	e7f5      	b.n	16db4 <bt_conn_set_state+0xd8>
		switch (old_state) {
   16dc8:	2d08      	cmp	r5, #8
   16dca:	d8f3      	bhi.n	16db4 <bt_conn_set_state+0xd8>
   16dcc:	a301      	add	r3, pc, #4	; (adr r3, 16dd4 <bt_conn_set_state+0xf8>)
   16dce:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   16dd2:	bf00      	nop
   16dd4:	00016e45 	.word	0x00016e45
   16dd8:	00016df9 	.word	0x00016df9
   16ddc:	00016e37 	.word	0x00016e37
   16de0:	00016dc1 	.word	0x00016dc1
   16de4:	00016dc1 	.word	0x00016dc1
   16de8:	00016e37 	.word	0x00016e37
   16dec:	00016e37 	.word	0x00016e37
   16df0:	00016e45 	.word	0x00016e45
   16df4:	00016e45 	.word	0x00016e45
			tx_notify(conn);
   16df8:	4620      	mov	r0, r4
   16dfa:	f7ff fc0b 	bl	16614 <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   16dfe:	78a3      	ldrb	r3, [r4, #2]
   16e00:	2b01      	cmp	r3, #1
   16e02:	d10a      	bne.n	16e1a <bt_conn_set_state+0x13e>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   16e04:	f104 0560 	add.w	r5, r4, #96	; 0x60
   16e08:	4628      	mov	r0, r5
   16e0a:	f01f fa26 	bl	3625a <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   16e0e:	f010 0f0c 	tst.w	r0, #12
   16e12:	d002      	beq.n	16e1a <bt_conn_set_state+0x13e>
				k_work_cancel_delayable(&conn->deferred_work);
   16e14:	4628      	mov	r0, r5
   16e16:	f013 f95f 	bl	2a0d8 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16e1a:	3404      	adds	r4, #4
   16e1c:	e8d4 3fef 	ldaex	r3, [r4]
   16e20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   16e24:	e8c4 3fe2 	stlex	r2, r3, [r4]
   16e28:	2a00      	cmp	r2, #0
   16e2a:	d1f7      	bne.n	16e1c <bt_conn_set_state+0x140>
   16e2c:	2100      	movs	r1, #0
   16e2e:	4834      	ldr	r0, [pc, #208]	; (16f00 <bt_conn_set_state+0x224>)
   16e30:	f015 fa84 	bl	2c33c <z_impl_k_poll_signal_raise>
   16e34:	e7be      	b.n	16db4 <bt_conn_set_state+0xd8>
			if (conn->err) {
   16e36:	7b23      	ldrb	r3, [r4, #12]
   16e38:	2b00      	cmp	r3, #0
   16e3a:	d0c1      	beq.n	16dc0 <bt_conn_set_state+0xe4>
				notify_connected(conn);
   16e3c:	4620      	mov	r0, r4
   16e3e:	f7ff fbb3 	bl	165a8 <notify_connected>
   16e42:	e7bd      	b.n	16dc0 <bt_conn_set_state+0xe4>
			LOG_WRN("Invalid (%u) old state", state);
   16e44:	466c      	mov	r4, sp
   16e46:	b088      	sub	sp, #32
   16e48:	466a      	mov	r2, sp
   16e4a:	4b2e      	ldr	r3, [pc, #184]	; (16f04 <bt_conn_set_state+0x228>)
		LOG_WRN("no valid (%u) state was set", state);
   16e4c:	e9c2 3605 	strd	r3, r6, [r2, #20]
   16e50:	2303      	movs	r3, #3
   16e52:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   16e56:	f842 3f10 	str.w	r3, [r2, #16]!
   16e5a:	e75c      	b.n	16d16 <bt_conn_set_state+0x3a>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   16e5c:	78a3      	ldrb	r3, [r4, #2]
   16e5e:	2b01      	cmp	r3, #1
   16e60:	d1a8      	bne.n	16db4 <bt_conn_set_state+0xd8>
		    bt_dev.create_param.timeout != 0) {
   16e62:	4b26      	ldr	r3, [pc, #152]	; (16efc <bt_conn_set_state+0x220>)
   16e64:	8a9d      	ldrh	r5, [r3, #20]
		    conn->type == BT_CONN_TYPE_LE &&
   16e66:	2d00      	cmp	r5, #0
   16e68:	d0a4      	beq.n	16db4 <bt_conn_set_state+0xd8>
					K_MSEC(10 * bt_dev.create_param.timeout));
   16e6a:	230a      	movs	r3, #10
   16e6c:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   16e70:	f240 30e7 	movw	r0, #999	; 0x3e7
   16e74:	2100      	movs	r1, #0
   16e76:	435d      	muls	r5, r3
   16e78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16e7c:	2300      	movs	r3, #0
   16e7e:	fbc5 0106 	smlal	r0, r1, r5, r6
   16e82:	f7f2 f807 	bl	8e94 <__aeabi_uldivmod>
   16e86:	4602      	mov	r2, r0
   16e88:	460b      	mov	r3, r1
			k_work_schedule(&conn->deferred_work,
   16e8a:	f104 0060 	add.w	r0, r4, #96	; 0x60
   16e8e:	f013 f8a3 	bl	29fd8 <k_work_schedule>
   16e92:	e78f      	b.n	16db4 <bt_conn_set_state+0xd8>
	return list->head;
   16e94:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   16e96:	b921      	cbnz	r1, 16ea2 <bt_conn_set_state+0x1c6>
   16e98:	f383 8811 	msr	BASEPRI, r3
   16e9c:	f3bf 8f6f 	isb	sy
		if (!node) {
   16ea0:	e788      	b.n	16db4 <bt_conn_set_state+0xd8>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   16ea2:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   16ea4:	680a      	ldr	r2, [r1, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   16ea6:	4281      	cmp	r1, r0
	list->tail = node;
   16ea8:	bf08      	it	eq
   16eaa:	61a2      	streq	r2, [r4, #24]
	list->head = node;
   16eac:	6162      	str	r2, [r4, #20]
   16eae:	f383 8811 	msr	BASEPRI, r3
   16eb2:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   16eb6:	f04f 0220 	mov.w	r2, #32
   16eba:	f3ef 8311 	mrs	r3, BASEPRI
   16ebe:	f382 8812 	msr	BASEPRI_MAX, r2
   16ec2:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   16ec6:	68ca      	ldr	r2, [r1, #12]
   16ec8:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   16eca:	f8c1 800c 	str.w	r8, [r1, #12]
	__asm__ volatile(
   16ece:	f383 8811 	msr	BASEPRI, r3
   16ed2:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   16ed6:	4620      	mov	r0, r4
   16ed8:	f7ff fbcc 	bl	16674 <conn_tx_destroy>
   16edc:	e753      	b.n	16d86 <bt_conn_set_state+0xaa>
		LOG_WRN("no valid (%u) state was set", state);
   16ede:	466c      	mov	r4, sp
   16ee0:	b088      	sub	sp, #32
   16ee2:	466a      	mov	r2, sp
   16ee4:	4b08      	ldr	r3, [pc, #32]	; (16f08 <bt_conn_set_state+0x22c>)
   16ee6:	e7b1      	b.n	16e4c <bt_conn_set_state+0x170>
   16ee8:	000380c0 	.word	0x000380c0
   16eec:	0003c7e5 	.word	0x0003c7e5
   16ef0:	0003c7ef 	.word	0x0003c7ef
   16ef4:	01000003 	.word	0x01000003
   16ef8:	000378b8 	.word	0x000378b8
   16efc:	2000c580 	.word	0x2000c580
   16f00:	2000c884 	.word	0x2000c884
   16f04:	0003c800 	.word	0x0003c800
   16f08:	0003c817 	.word	0x0003c817

00016f0c <bt_conn_index>:
		index = conn - acl_conns;
   16f0c:	4a0c      	ldr	r2, [pc, #48]	; (16f40 <bt_conn_index+0x34>)
{
   16f0e:	b508      	push	{r3, lr}
		index = conn - acl_conns;
   16f10:	490c      	ldr	r1, [pc, #48]	; (16f44 <bt_conn_index+0x38>)
   16f12:	1a83      	subs	r3, r0, r2
   16f14:	10db      	asrs	r3, r3, #3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   16f16:	4290      	cmp	r0, r2
		index = conn - acl_conns;
   16f18:	fb01 f303 	mul.w	r3, r1, r3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   16f1c:	d00e      	beq.n	16f3c <bt_conn_index+0x30>
   16f1e:	490a      	ldr	r1, [pc, #40]	; (16f48 <bt_conn_index+0x3c>)
   16f20:	f240 5315 	movw	r3, #1301	; 0x515
   16f24:	4a09      	ldr	r2, [pc, #36]	; (16f4c <bt_conn_index+0x40>)
   16f26:	480a      	ldr	r0, [pc, #40]	; (16f50 <bt_conn_index+0x44>)
   16f28:	f018 fa4c 	bl	2f3c4 <assert_print>
   16f2c:	4809      	ldr	r0, [pc, #36]	; (16f54 <bt_conn_index+0x48>)
   16f2e:	f018 fa49 	bl	2f3c4 <assert_print>
   16f32:	f240 5115 	movw	r1, #1301	; 0x515
   16f36:	4805      	ldr	r0, [pc, #20]	; (16f4c <bt_conn_index+0x40>)
   16f38:	f018 fa3d 	bl	2f3b6 <assert_post_action>
}
   16f3c:	b2d8      	uxtb	r0, r3
   16f3e:	bd08      	pop	{r3, pc}
   16f40:	2000d978 	.word	0x2000d978
   16f44:	c28f5c29 	.word	0xc28f5c29
   16f48:	0003c833 	.word	0x0003c833
   16f4c:	0003c61d 	.word	0x0003c61d
   16f50:	00039995 	.word	0x00039995
   16f54:	0003c8fc 	.word	0x0003c8fc

00016f58 <bt_conn_create_pdu_timeout>:
{
   16f58:	b5f0      	push	{r4, r5, r6, r7, lr}
   16f5a:	b087      	sub	sp, #28
   16f5c:	4604      	mov	r4, r0
   16f5e:	460d      	mov	r5, r1
   16f60:	4617      	mov	r7, r2
   16f62:	461e      	mov	r6, r3
	__ASSERT_NO_MSG(!k_is_in_isr());
   16f64:	f01f f8af 	bl	360c6 <k_is_in_isr>
   16f68:	b158      	cbz	r0, 16f82 <bt_conn_create_pdu_timeout+0x2a>
   16f6a:	4914      	ldr	r1, [pc, #80]	; (16fbc <bt_conn_create_pdu_timeout+0x64>)
   16f6c:	4814      	ldr	r0, [pc, #80]	; (16fc0 <bt_conn_create_pdu_timeout+0x68>)
   16f6e:	f240 5331 	movw	r3, #1329	; 0x531
   16f72:	4a14      	ldr	r2, [pc, #80]	; (16fc4 <bt_conn_create_pdu_timeout+0x6c>)
   16f74:	f018 fa26 	bl	2f3c4 <assert_print>
   16f78:	f240 5131 	movw	r1, #1329	; 0x531
   16f7c:	4811      	ldr	r0, [pc, #68]	; (16fc4 <bt_conn_create_pdu_timeout+0x6c>)
   16f7e:	f018 fa1a 	bl	2f3b6 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   16f82:	4911      	ldr	r1, [pc, #68]	; (16fc8 <bt_conn_create_pdu_timeout+0x70>)
   16f84:	463a      	mov	r2, r7
   16f86:	2c00      	cmp	r4, #0
   16f88:	bf14      	ite	ne
   16f8a:	4620      	movne	r0, r4
   16f8c:	4608      	moveq	r0, r1
   16f8e:	4633      	mov	r3, r6
   16f90:	f01c f8c7 	bl	33122 <net_buf_alloc_fixed>
	if (!buf) {
   16f94:	4604      	mov	r4, r0
   16f96:	b960      	cbnz	r0, 16fb2 <bt_conn_create_pdu_timeout+0x5a>
		LOG_WRN("Unable to allocate buffer within timeout");
   16f98:	4b0c      	ldr	r3, [pc, #48]	; (16fcc <bt_conn_create_pdu_timeout+0x74>)
   16f9a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   16f9e:	9305      	str	r3, [sp, #20]
   16fa0:	2302      	movs	r3, #2
   16fa2:	480b      	ldr	r0, [pc, #44]	; (16fd0 <bt_conn_create_pdu_timeout+0x78>)
   16fa4:	aa04      	add	r2, sp, #16
   16fa6:	9304      	str	r3, [sp, #16]
   16fa8:	f01a f98c 	bl	312c4 <z_log_msg_static_create.constprop.0>
}
   16fac:	4620      	mov	r0, r4
   16fae:	b007      	add	sp, #28
   16fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   16fb2:	1d29      	adds	r1, r5, #4
   16fb4:	300c      	adds	r0, #12
   16fb6:	f007 f9f1 	bl	1e39c <net_buf_simple_reserve>
	return buf;
   16fba:	e7f7      	b.n	16fac <bt_conn_create_pdu_timeout+0x54>
   16fbc:	0003c916 	.word	0x0003c916
   16fc0:	00039995 	.word	0x00039995
   16fc4:	0003c61d 	.word	0x0003c61d
   16fc8:	2000d048 	.word	0x2000d048
   16fcc:	0003c925 	.word	0x0003c925
   16fd0:	000378b8 	.word	0x000378b8

00016fd4 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   16fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   16fd6:	1d03      	adds	r3, r0, #4
{
   16fd8:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   16fda:	4618      	mov	r0, r3
   16fdc:	f01a f96f 	bl	312be <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   16fe0:	0582      	lsls	r2, r0, #22
   16fe2:	d512      	bpl.n	1700a <notify_le_param_updated+0x36>
	    conn->le.interval >= conn->le.interval_min &&
   16fe4:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   16fe8:	f8b4 10a8 	ldrh.w	r1, [r4, #168]	; 0xa8
   16fec:	4291      	cmp	r1, r2
   16fee:	d80c      	bhi.n	1700a <notify_le_param_updated+0x36>
	    conn->le.interval >= conn->le.interval_min &&
   16ff0:	f8b4 10aa 	ldrh.w	r1, [r4, #170]	; 0xaa
   16ff4:	4291      	cmp	r1, r2
   16ff6:	d308      	bcc.n	1700a <notify_le_param_updated+0x36>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   16ff8:	e9d4 122b 	ldrd	r1, r2, [r4, #172]	; 0xac
   16ffc:	4291      	cmp	r1, r2
   16ffe:	d104      	bne.n	1700a <notify_le_param_updated+0x36>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17000:	f46f 7100 	mvn.w	r1, #512	; 0x200
   17004:	4618      	mov	r0, r3
   17006:	f01a f94f 	bl	312a8 <atomic_and>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   1700a:	4b18      	ldr	r3, [pc, #96]	; (1706c <notify_le_param_updated+0x98>)
   1700c:	681d      	ldr	r5, [r3, #0]
   1700e:	b995      	cbnz	r5, 17036 <notify_le_param_updated+0x62>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17010:	4d17      	ldr	r5, [pc, #92]	; (17070 <notify_le_param_updated+0x9c>)
   17012:	4f18      	ldr	r7, [pc, #96]	; (17074 <notify_le_param_updated+0xa0>)
   17014:	42bd      	cmp	r5, r7
   17016:	d926      	bls.n	17066 <notify_le_param_updated+0x92>
   17018:	4917      	ldr	r1, [pc, #92]	; (17078 <notify_le_param_updated+0xa4>)
   1701a:	f240 6304 	movw	r3, #1540	; 0x604
   1701e:	4a17      	ldr	r2, [pc, #92]	; (1707c <notify_le_param_updated+0xa8>)
   17020:	4817      	ldr	r0, [pc, #92]	; (17080 <notify_le_param_updated+0xac>)
   17022:	f018 f9cf 	bl	2f3c4 <assert_print>
   17026:	4817      	ldr	r0, [pc, #92]	; (17084 <notify_le_param_updated+0xb0>)
   17028:	f018 f9cc 	bl	2f3c4 <assert_print>
   1702c:	f240 6104 	movw	r1, #1540	; 0x604
   17030:	4812      	ldr	r0, [pc, #72]	; (1707c <notify_le_param_updated+0xa8>)
   17032:	f018 f9c0 	bl	2f3b6 <assert_post_action>
		if (cb->le_param_updated) {
   17036:	68ee      	ldr	r6, [r5, #12]
   17038:	b13e      	cbz	r6, 1704a <notify_le_param_updated+0x76>
			cb->le_param_updated(conn, conn->le.interval,
   1703a:	4620      	mov	r0, r4
   1703c:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   17040:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   17044:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   17048:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   1704a:	69ad      	ldr	r5, [r5, #24]
   1704c:	e7df      	b.n	1700e <notify_le_param_updated+0x3a>
		if (cb->le_param_updated) {
   1704e:	68ee      	ldr	r6, [r5, #12]
   17050:	b13e      	cbz	r6, 17062 <notify_le_param_updated+0x8e>
			cb->le_param_updated(conn, conn->le.interval,
   17052:	4620      	mov	r0, r4
   17054:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   17058:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   1705c:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   17060:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17062:	351c      	adds	r5, #28
   17064:	e7d6      	b.n	17014 <notify_le_param_updated+0x40>
   17066:	d3f2      	bcc.n	1704e <notify_le_param_updated+0x7a>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   17068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1706a:	bf00      	nop
   1706c:	2000e64c 	.word	0x2000e64c
   17070:	00037854 	.word	0x00037854
   17074:	00037870 	.word	0x00037870
   17078:	0003c64d 	.word	0x0003c64d
   1707c:	0003c61d 	.word	0x0003c61d
   17080:	00039995 	.word	0x00039995
   17084:	0003a18c 	.word	0x0003a18c

00017088 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   17088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1708c:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   1708e:	4608      	mov	r0, r1
{
   17090:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   17092:	f019 ffc6 	bl	31022 <bt_le_conn_params_valid>
   17096:	4605      	mov	r5, r0
   17098:	b918      	cbnz	r0, 170a2 <le_param_req+0x1a>
		return false;
   1709a:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   1709c:	4628      	mov	r0, r5
   1709e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   170a2:	4b1b      	ldr	r3, [pc, #108]	; (17110 <le_param_req+0x88>)
   170a4:	681e      	ldr	r6, [r3, #0]
   170a6:	b99e      	cbnz	r6, 170d0 <le_param_req+0x48>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   170a8:	4e1a      	ldr	r6, [pc, #104]	; (17114 <le_param_req+0x8c>)
   170aa:	f8df 806c 	ldr.w	r8, [pc, #108]	; 17118 <le_param_req+0x90>
   170ae:	4546      	cmp	r6, r8
   170b0:	d927      	bls.n	17102 <le_param_req+0x7a>
   170b2:	491a      	ldr	r1, [pc, #104]	; (1711c <le_param_req+0x94>)
   170b4:	f240 634c 	movw	r3, #1612	; 0x64c
   170b8:	4a19      	ldr	r2, [pc, #100]	; (17120 <le_param_req+0x98>)
   170ba:	481a      	ldr	r0, [pc, #104]	; (17124 <le_param_req+0x9c>)
   170bc:	f018 f982 	bl	2f3c4 <assert_print>
   170c0:	4819      	ldr	r0, [pc, #100]	; (17128 <le_param_req+0xa0>)
   170c2:	f018 f97f 	bl	2f3c4 <assert_print>
   170c6:	f240 614c 	movw	r1, #1612	; 0x64c
   170ca:	4815      	ldr	r0, [pc, #84]	; (17120 <le_param_req+0x98>)
   170cc:	f018 f973 	bl	2f3b6 <assert_post_action>
		if (!cb->le_param_req) {
   170d0:	68b3      	ldr	r3, [r6, #8]
   170d2:	b90b      	cbnz	r3, 170d8 <le_param_req+0x50>
	for (cb = callback_list; cb; cb = cb->_next) {
   170d4:	69b6      	ldr	r6, [r6, #24]
   170d6:	e7e6      	b.n	170a6 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   170d8:	4621      	mov	r1, r4
   170da:	4638      	mov	r0, r7
   170dc:	4798      	blx	r3
   170de:	2800      	cmp	r0, #0
   170e0:	d0db      	beq.n	1709a <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   170e2:	4620      	mov	r0, r4
   170e4:	f019 ff9d 	bl	31022 <bt_le_conn_params_valid>
   170e8:	2800      	cmp	r0, #0
   170ea:	d1f3      	bne.n	170d4 <le_param_req+0x4c>
   170ec:	e7d5      	b.n	1709a <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   170ee:	4621      	mov	r1, r4
   170f0:	4638      	mov	r0, r7
   170f2:	4798      	blx	r3
   170f4:	2800      	cmp	r0, #0
   170f6:	d0d0      	beq.n	1709a <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   170f8:	4620      	mov	r0, r4
   170fa:	f019 ff92 	bl	31022 <bt_le_conn_params_valid>
   170fe:	b920      	cbnz	r0, 1710a <le_param_req+0x82>
   17100:	e7cb      	b.n	1709a <le_param_req+0x12>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17102:	d2cb      	bcs.n	1709c <le_param_req+0x14>
		if (!cb->le_param_req) {
   17104:	68b3      	ldr	r3, [r6, #8]
   17106:	2b00      	cmp	r3, #0
   17108:	d1f1      	bne.n	170ee <le_param_req+0x66>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1710a:	361c      	adds	r6, #28
   1710c:	e7cf      	b.n	170ae <le_param_req+0x26>
   1710e:	bf00      	nop
   17110:	2000e64c 	.word	0x2000e64c
   17114:	00037854 	.word	0x00037854
   17118:	00037870 	.word	0x00037870
   1711c:	0003c64d 	.word	0x0003c64d
   17120:	0003c61d 	.word	0x0003c61d
   17124:	00039995 	.word	0x00039995
   17128:	0003a18c 	.word	0x0003a18c

0001712c <bt_conn_identity_resolved>:

	return false;
}

void bt_conn_identity_resolved(struct bt_conn *conn)
{
   1712c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   17130:	78c3      	ldrb	r3, [r0, #3]
{
   17132:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   17134:	b9db      	cbnz	r3, 1716e <bt_conn_identity_resolved+0x42>
		rpa = &conn->le.resp_addr;
   17136:	f100 069e 	add.w	r6, r0, #158	; 0x9e
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   1713a:	4b18      	ldr	r3, [pc, #96]	; (1719c <bt_conn_identity_resolved+0x70>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   1713c:	f104 0790 	add.w	r7, r4, #144	; 0x90
	for (cb = callback_list; cb; cb = cb->_next) {
   17140:	681d      	ldr	r5, [r3, #0]
   17142:	b9bd      	cbnz	r5, 17174 <bt_conn_identity_resolved+0x48>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17144:	4d16      	ldr	r5, [pc, #88]	; (171a0 <bt_conn_identity_resolved+0x74>)
   17146:	4f17      	ldr	r7, [pc, #92]	; (171a4 <bt_conn_identity_resolved+0x78>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   17148:	f104 0890 	add.w	r8, r4, #144	; 0x90
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1714c:	42bd      	cmp	r5, r7
   1714e:	d921      	bls.n	17194 <bt_conn_identity_resolved+0x68>
   17150:	4915      	ldr	r1, [pc, #84]	; (171a8 <bt_conn_identity_resolved+0x7c>)
   17152:	f640 0333 	movw	r3, #2099	; 0x833
   17156:	4a15      	ldr	r2, [pc, #84]	; (171ac <bt_conn_identity_resolved+0x80>)
   17158:	4815      	ldr	r0, [pc, #84]	; (171b0 <bt_conn_identity_resolved+0x84>)
   1715a:	f018 f933 	bl	2f3c4 <assert_print>
   1715e:	4815      	ldr	r0, [pc, #84]	; (171b4 <bt_conn_identity_resolved+0x88>)
   17160:	f018 f930 	bl	2f3c4 <assert_print>
   17164:	f640 0133 	movw	r1, #2099	; 0x833
   17168:	4810      	ldr	r0, [pc, #64]	; (171ac <bt_conn_identity_resolved+0x80>)
   1716a:	f018 f924 	bl	2f3b6 <assert_post_action>
		rpa = &conn->le.init_addr;
   1716e:	f100 0697 	add.w	r6, r0, #151	; 0x97
   17172:	e7e2      	b.n	1713a <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
   17174:	692b      	ldr	r3, [r5, #16]
   17176:	b11b      	cbz	r3, 17180 <bt_conn_identity_resolved+0x54>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   17178:	463a      	mov	r2, r7
   1717a:	4631      	mov	r1, r6
   1717c:	4620      	mov	r0, r4
   1717e:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   17180:	69ad      	ldr	r5, [r5, #24]
   17182:	e7de      	b.n	17142 <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
   17184:	692b      	ldr	r3, [r5, #16]
   17186:	b11b      	cbz	r3, 17190 <bt_conn_identity_resolved+0x64>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   17188:	4642      	mov	r2, r8
   1718a:	4631      	mov	r1, r6
   1718c:	4620      	mov	r0, r4
   1718e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17190:	351c      	adds	r5, #28
   17192:	e7db      	b.n	1714c <bt_conn_identity_resolved+0x20>
   17194:	d3f6      	bcc.n	17184 <bt_conn_identity_resolved+0x58>
		}
	}
}
   17196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1719a:	bf00      	nop
   1719c:	2000e64c 	.word	0x2000e64c
   171a0:	00037854 	.word	0x00037854
   171a4:	00037870 	.word	0x00037870
   171a8:	0003c64d 	.word	0x0003c64d
   171ac:	0003c61d 	.word	0x0003c61d
   171b0:	00039995 	.word	0x00039995
   171b4:	0003a18c 	.word	0x0003a18c

000171b8 <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
   171b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	conn->required_sec_level = conn->sec_level;
   171ba:	7a43      	ldrb	r3, [r0, #9]
{
   171bc:	4604      	mov	r4, r0
	conn->required_sec_level = conn->sec_level;
   171be:	7283      	strb	r3, [r0, #10]
{
   171c0:	4616      	mov	r6, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
   171c2:	f01a fa2f 	bl	31624 <bt_l2cap_security_changed>
	if (IS_ENABLED(CONFIG_BT_ISO_CENTRAL)) {
		bt_iso_security_changed(conn, hci_err);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   171c6:	4b14      	ldr	r3, [pc, #80]	; (17218 <bt_conn_security_changed+0x60>)
   171c8:	681d      	ldr	r5, [r3, #0]
   171ca:	b995      	cbnz	r5, 171f2 <bt_conn_security_changed+0x3a>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   171cc:	4d13      	ldr	r5, [pc, #76]	; (1721c <bt_conn_security_changed+0x64>)
   171ce:	4f14      	ldr	r7, [pc, #80]	; (17220 <bt_conn_security_changed+0x68>)
   171d0:	42bd      	cmp	r5, r7
   171d2:	d91e      	bls.n	17212 <bt_conn_security_changed+0x5a>
   171d4:	4913      	ldr	r1, [pc, #76]	; (17224 <bt_conn_security_changed+0x6c>)
   171d6:	f640 039f 	movw	r3, #2207	; 0x89f
   171da:	4a13      	ldr	r2, [pc, #76]	; (17228 <bt_conn_security_changed+0x70>)
   171dc:	4813      	ldr	r0, [pc, #76]	; (1722c <bt_conn_security_changed+0x74>)
   171de:	f018 f8f1 	bl	2f3c4 <assert_print>
   171e2:	4813      	ldr	r0, [pc, #76]	; (17230 <bt_conn_security_changed+0x78>)
   171e4:	f018 f8ee 	bl	2f3c4 <assert_print>
   171e8:	f640 019f 	movw	r1, #2207	; 0x89f
   171ec:	480e      	ldr	r0, [pc, #56]	; (17228 <bt_conn_security_changed+0x70>)
   171ee:	f018 f8e2 	bl	2f3b6 <assert_post_action>
		if (cb->security_changed) {
   171f2:	696b      	ldr	r3, [r5, #20]
   171f4:	b11b      	cbz	r3, 171fe <bt_conn_security_changed+0x46>
			cb->security_changed(conn, conn->sec_level, err);
   171f6:	4632      	mov	r2, r6
   171f8:	4620      	mov	r0, r4
   171fa:	7a61      	ldrb	r1, [r4, #9]
   171fc:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   171fe:	69ad      	ldr	r5, [r5, #24]
   17200:	e7e3      	b.n	171ca <bt_conn_security_changed+0x12>
		if (cb->security_changed) {
   17202:	696b      	ldr	r3, [r5, #20]
   17204:	b11b      	cbz	r3, 1720e <bt_conn_security_changed+0x56>
			cb->security_changed(conn, conn->sec_level, err);
   17206:	4632      	mov	r2, r6
   17208:	4620      	mov	r0, r4
   1720a:	7a61      	ldrb	r1, [r4, #9]
   1720c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1720e:	351c      	adds	r5, #28
   17210:	e7de      	b.n	171d0 <bt_conn_security_changed+0x18>
   17212:	d3f6      	bcc.n	17202 <bt_conn_security_changed+0x4a>
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
   17214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17216:	bf00      	nop
   17218:	2000e64c 	.word	0x2000e64c
   1721c:	00037854 	.word	0x00037854
   17220:	00037870 	.word	0x00037870
   17224:	0003c64d 	.word	0x0003c64d
   17228:	0003c61d 	.word	0x0003c61d
   1722c:	00039995 	.word	0x00039995
   17230:	0003a18c 	.word	0x0003a18c

00017234 <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
   17234:	4b02      	ldr	r3, [pc, #8]	; (17240 <bt_conn_cb_register+0xc>)
   17236:	681a      	ldr	r2, [r3, #0]
	callback_list = cb;
   17238:	6018      	str	r0, [r3, #0]
	cb->_next = callback_list;
   1723a:	6182      	str	r2, [r0, #24]
}
   1723c:	4770      	bx	lr
   1723e:	bf00      	nop
   17240:	2000e64c 	.word	0x2000e64c

00017244 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   17244:	b538      	push	{r3, r4, r5, lr}
   17246:	4605      	mov	r5, r0
   17248:	460c      	mov	r4, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   1724a:	480b      	ldr	r0, [pc, #44]	; (17278 <bt_conn_add_le+0x34>)
   1724c:	2101      	movs	r1, #1
   1724e:	f7ff fb23 	bl	16898 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   17252:	b180      	cbz	r0, 17276 <bt_conn_add_le+0x32>
		return NULL;
	}

	conn->id = id;
   17254:	7205      	strb	r5, [r0, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   17256:	6823      	ldr	r3, [r4, #0]
   17258:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
   1725c:	88a3      	ldrh	r3, [r4, #4]
   1725e:	f8a0 3094 	strh.w	r3, [r0, #148]	; 0x94
   17262:	79a3      	ldrb	r3, [r4, #6]
   17264:	f880 3096 	strb.w	r3, [r0, #150]	; 0x96
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   17268:	2301      	movs	r3, #1
   1726a:	7243      	strb	r3, [r0, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   1726c:	7283      	strb	r3, [r0, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   1726e:	7083      	strb	r3, [r0, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   17270:	4b02      	ldr	r3, [pc, #8]	; (1727c <bt_conn_add_le+0x38>)
   17272:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   17276:	bd38      	pop	{r3, r4, r5, pc}
   17278:	2000d978 	.word	0x2000d978
   1727c:	00280018 	.word	0x00280018

00017280 <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   17280:	b570      	push	{r4, r5, r6, lr}
   17282:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   17284:	480a      	ldr	r0, [pc, #40]	; (172b0 <bt_conn_lookup_addr_le+0x30>)
{
   17286:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   17288:	f7ff fcd2 	bl	16c30 <bt_conn_ref>
   1728c:	4604      	mov	r4, r0

		if (!conn) {
   1728e:	b120      	cbz	r0, 1729a <bt_conn_lookup_addr_le+0x1a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   17290:	7883      	ldrb	r3, [r0, #2]
   17292:	2b01      	cmp	r3, #1
   17294:	d004      	beq.n	172a0 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
   17296:	f7ff fcf5 	bl	16c84 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   1729a:	2400      	movs	r4, #0
}
   1729c:	4620      	mov	r0, r4
   1729e:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   172a0:	4632      	mov	r2, r6
   172a2:	4629      	mov	r1, r5
   172a4:	f01a f8f0 	bl	31488 <bt_conn_is_peer_addr_le>
   172a8:	2800      	cmp	r0, #0
   172aa:	d1f7      	bne.n	1729c <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   172ac:	4620      	mov	r0, r4
   172ae:	e7f2      	b.n	17296 <bt_conn_lookup_addr_le+0x16>
   172b0:	2000d978 	.word	0x2000d978

000172b4 <bt_conn_exists_le>:
{
   172b4:	b5b0      	push	{r4, r5, r7, lr}
   172b6:	af00      	add	r7, sp, #0
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   172b8:	f7ff ffe2 	bl	17280 <bt_conn_lookup_addr_le>
	if (conn) {
   172bc:	4604      	mov	r4, r0
   172be:	b1e8      	cbz	r0, 172fc <bt_conn_exists_le+0x48>
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
   172c0:	7b43      	ldrb	r3, [r0, #13]
   172c2:	466d      	mov	r5, sp
   172c4:	2b08      	cmp	r3, #8
   172c6:	bf98      	it	ls
   172c8:	4a0d      	ldrls	r2, [pc, #52]	; (17300 <bt_conn_exists_le+0x4c>)
   172ca:	b088      	sub	sp, #32
   172cc:	bf94      	ite	ls
   172ce:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   172d2:	4b0c      	ldrhi	r3, [pc, #48]	; (17304 <bt_conn_exists_le+0x50>)
   172d4:	466a      	mov	r2, sp
   172d6:	490c      	ldr	r1, [pc, #48]	; (17308 <bt_conn_exists_le+0x54>)
   172d8:	480c      	ldr	r0, [pc, #48]	; (1730c <bt_conn_exists_le+0x58>)
   172da:	e9c2 1305 	strd	r1, r3, [r2, #20]
   172de:	f44f 7300 	mov.w	r3, #512	; 0x200
   172e2:	8393      	strh	r3, [r2, #28]
   172e4:	4b0a      	ldr	r3, [pc, #40]	; (17310 <bt_conn_exists_le+0x5c>)
   172e6:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
   172ea:	f842 3f10 	str.w	r3, [r2, #16]!
   172ee:	f019 ffe9 	bl	312c4 <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   172f2:	4620      	mov	r0, r4
   172f4:	46ad      	mov	sp, r5
   172f6:	f7ff fcc5 	bl	16c84 <bt_conn_unref>
		return true;
   172fa:	2001      	movs	r0, #1
}
   172fc:	46bd      	mov	sp, r7
   172fe:	bdb0      	pop	{r4, r5, r7, pc}
   17300:	000380c0 	.word	0x000380c0
   17304:	0003c7e5 	.word	0x0003c7e5
   17308:	0003c94e 	.word	0x0003c94e
   1730c:	000378b8 	.word	0x000378b8
   17310:	01000003 	.word	0x01000003

00017314 <conn_le_create_common_checks>:
}
#endif /* defined(CONFIG_BT_FILTER_ACCEPT_LIST) */

static int conn_le_create_common_checks(const bt_addr_le_t *peer,
					const struct bt_le_conn_param *conn_param)
{
   17314:	b538      	push	{r3, r4, r5, lr}
   17316:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   17318:	4814      	ldr	r0, [pc, #80]	; (1736c <conn_le_create_common_checks+0x58>)
   1731a:	f019 ffd0 	bl	312be <atomic_get>

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1731e:	0740      	lsls	r0, r0, #29
   17320:	d402      	bmi.n	17328 <conn_le_create_common_checks+0x14>
		return -EAGAIN;
   17322:	f06f 000a 	mvn.w	r0, #10
	if (bt_conn_exists_le(BT_ID_DEFAULT, peer)) {
		return -EINVAL;
	}

	return 0;
}
   17326:	bd38      	pop	{r3, r4, r5, pc}
	if (!bt_le_conn_params_valid(conn_param)) {
   17328:	4608      	mov	r0, r1
   1732a:	f019 fe7a 	bl	31022 <bt_le_conn_params_valid>
   1732e:	b910      	cbnz	r0, 17336 <conn_le_create_common_checks+0x22>
		return -EINVAL;
   17330:	f06f 0015 	mvn.w	r0, #21
   17334:	e7f7      	b.n	17326 <conn_le_create_common_checks+0x12>
   17336:	480d      	ldr	r0, [pc, #52]	; (1736c <conn_le_create_common_checks+0x58>)
   17338:	f019 ffc1 	bl	312be <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   1733c:	0602      	lsls	r2, r0, #24
   1733e:	d4f0      	bmi.n	17322 <conn_le_create_common_checks+0xe>
   17340:	480a      	ldr	r0, [pc, #40]	; (1736c <conn_le_create_common_checks+0x58>)
   17342:	f019 ffbc 	bl	312be <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING)) {
   17346:	04c3      	lsls	r3, r0, #19
   17348:	f3c0 3500 	ubfx	r5, r0, #12, #1
   1734c:	d40a      	bmi.n	17364 <conn_le_create_common_checks+0x50>
	if (!bt_id_scan_random_addr_check()) {
   1734e:	f019 ff3c 	bl	311ca <bt_id_scan_random_addr_check>
   17352:	2800      	cmp	r0, #0
   17354:	d0ec      	beq.n	17330 <conn_le_create_common_checks+0x1c>
	if (bt_conn_exists_le(BT_ID_DEFAULT, peer)) {
   17356:	4621      	mov	r1, r4
   17358:	4628      	mov	r0, r5
   1735a:	f7ff ffab 	bl	172b4 <bt_conn_exists_le>
   1735e:	2800      	cmp	r0, #0
   17360:	d0e1      	beq.n	17326 <conn_le_create_common_checks+0x12>
   17362:	e7e5      	b.n	17330 <conn_le_create_common_checks+0x1c>
		return -EALREADY;
   17364:	f06f 0077 	mvn.w	r0, #119	; 0x77
   17368:	e7dd      	b.n	17326 <conn_le_create_common_checks+0x12>
   1736a:	bf00      	nop
   1736c:	2000c654 	.word	0x2000c654

00017370 <bt_conn_lookup_state_le>:
{
   17370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17372:	4605      	mov	r5, r0
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   17374:	480e      	ldr	r0, [pc, #56]	; (173b0 <bt_conn_lookup_state_le+0x40>)
{
   17376:	460e      	mov	r6, r1
   17378:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1737a:	f7ff fc59 	bl	16c30 <bt_conn_ref>
		if (!conn) {
   1737e:	4604      	mov	r4, r0
   17380:	b120      	cbz	r0, 1738c <bt_conn_lookup_state_le+0x1c>
		if (conn->type != BT_CONN_TYPE_LE) {
   17382:	7883      	ldrb	r3, [r0, #2]
   17384:	2b01      	cmp	r3, #1
   17386:	d003      	beq.n	17390 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
   17388:	f7ff fc7c 	bl	16c84 <bt_conn_unref>
	return NULL;
   1738c:	2400      	movs	r4, #0
   1738e:	e00d      	b.n	173ac <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   17390:	b136      	cbz	r6, 173a0 <bt_conn_lookup_state_le+0x30>
   17392:	4632      	mov	r2, r6
   17394:	4629      	mov	r1, r5
   17396:	f01a f877 	bl	31488 <bt_conn_is_peer_addr_le>
   1739a:	b908      	cbnz	r0, 173a0 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   1739c:	4620      	mov	r0, r4
   1739e:	e7f3      	b.n	17388 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   173a0:	7b63      	ldrb	r3, [r4, #13]
   173a2:	42bb      	cmp	r3, r7
   173a4:	d1fa      	bne.n	1739c <bt_conn_lookup_state_le+0x2c>
   173a6:	7a23      	ldrb	r3, [r4, #8]
   173a8:	42ab      	cmp	r3, r5
   173aa:	d1f7      	bne.n	1739c <bt_conn_lookup_state_le+0x2c>
}
   173ac:	4620      	mov	r0, r4
   173ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   173b0:	2000d978 	.word	0x2000d978

000173b4 <bt_conn_le_create>:
	return conn;
}

int bt_conn_le_create(const bt_addr_le_t *peer, const struct bt_conn_le_create_param *create_param,
		      const struct bt_le_conn_param *conn_param, struct bt_conn **ret_conn)
{
   173b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   173b8:	460f      	mov	r7, r1
	struct bt_conn *conn;
	int err;

	err = conn_le_create_common_checks(peer, conn_param);
   173ba:	4611      	mov	r1, r2
{
   173bc:	4605      	mov	r5, r0
   173be:	4614      	mov	r4, r2
   173c0:	4698      	mov	r8, r3
	err = conn_le_create_common_checks(peer, conn_param);
   173c2:	f7ff ffa7 	bl	17314 <conn_le_create_common_checks>
	if (err) {
   173c6:	4606      	mov	r6, r0
   173c8:	2800      	cmp	r0, #0
   173ca:	d135      	bne.n	17438 <bt_conn_le_create+0x84>

	if (!create_param_validate(create_param)) {
		return -EINVAL;
	}

	conn = conn_le_create_helper(peer, conn_param);
   173cc:	4621      	mov	r1, r4
   173ce:	4628      	mov	r0, r5
   173d0:	f01a f831 	bl	31436 <conn_le_create_helper>
	if (!conn) {
   173d4:	4604      	mov	r4, r0
   173d6:	2800      	cmp	r0, #0
   173d8:	d048      	beq.n	1746c <bt_conn_le_create+0xb8>
	bt_dev.create_param = *param;
   173da:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   173de:	4d25      	ldr	r5, [pc, #148]	; (17474 <bt_conn_le_create+0xc0>)
   173e0:	f105 0c08 	add.w	ip, r5, #8
   173e4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		(bt_dev.create_param.timeout != 0) ?
   173e8:	8aab      	ldrh	r3, [r5, #20]
	bt_dev.create_param.timeout =
   173ea:	2b00      	cmp	r3, #0
   173ec:	bf08      	it	eq
   173ee:	f44f 7396 	moveq.w	r3, #300	; 0x12c
   173f2:	82ab      	strh	r3, [r5, #20]
		(bt_dev.create_param.interval_coded != 0) ?
   173f4:	8a2b      	ldrh	r3, [r5, #16]
	bt_dev.create_param.interval_coded =
   173f6:	b903      	cbnz	r3, 173fa <bt_conn_le_create+0x46>
   173f8:	89ab      	ldrh	r3, [r5, #12]
   173fa:	822b      	strh	r3, [r5, #16]
		(bt_dev.create_param.window_coded != 0) ?
   173fc:	8a6b      	ldrh	r3, [r5, #18]
	bt_dev.create_param.window_coded =
   173fe:	b903      	cbnz	r3, 17402 <bt_conn_le_create+0x4e>
   17400:	89eb      	ldrh	r3, [r5, #14]
	}

	create_param_setup(create_param);

#if defined(CONFIG_BT_SMP)
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   17402:	f895 2121 	ldrb.w	r2, [r5, #289]	; 0x121
	bt_dev.create_param.window_coded =
   17406:	826b      	strh	r3, [r5, #18]
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   17408:	f895 3120 	ldrb.w	r3, [r5, #288]	; 0x120
   1740c:	429a      	cmp	r2, r3
   1740e:	d916      	bls.n	1743e <bt_conn_le_create+0x8a>
		/* Use host-based identity resolving. */
		bt_conn_set_state(conn, BT_CONN_CONNECTING_SCAN);
   17410:	2102      	movs	r1, #2
   17412:	4620      	mov	r0, r4
   17414:	f7ff fc62 	bl	16cdc <bt_conn_set_state>

		err = bt_le_scan_update(true);
   17418:	2001      	movs	r0, #1
   1741a:	f7fe fd03 	bl	15e24 <bt_le_scan_update>
		if (err) {
   1741e:	4605      	mov	r5, r0
   17420:	b140      	cbz	r0, 17434 <bt_conn_le_create+0x80>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   17422:	4620      	mov	r0, r4
   17424:	2100      	movs	r1, #0
   17426:	f7ff fc59 	bl	16cdc <bt_conn_set_state>
			bt_conn_unref(conn);
   1742a:	4620      	mov	r0, r4
   1742c:	f7ff fc2a 	bl	16c84 <bt_conn_unref>
		conn->err = 0;
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
		bt_conn_unref(conn);

		bt_le_scan_update(false);
		return err;
   17430:	462e      	mov	r6, r5
   17432:	e001      	b.n	17438 <bt_conn_le_create+0x84>
		*ret_conn = conn;
   17434:	f8c8 4000 	str.w	r4, [r8]
	}

	*ret_conn = conn;
	return 0;
}
   17438:	4630      	mov	r0, r6
   1743a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_conn_set_state(conn, BT_CONN_CONNECTING);
   1743e:	2106      	movs	r1, #6
   17440:	4620      	mov	r0, r4
   17442:	f7ff fc4b 	bl	16cdc <bt_conn_set_state>
	err = bt_le_create_conn(conn);
   17446:	4620      	mov	r0, r4
   17448:	f7fd f8de 	bl	14608 <bt_le_create_conn>
	if (err) {
   1744c:	4605      	mov	r5, r0
   1744e:	2800      	cmp	r0, #0
   17450:	d0f0      	beq.n	17434 <bt_conn_le_create+0x80>
		conn->err = 0;
   17452:	2600      	movs	r6, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   17454:	4620      	mov	r0, r4
   17456:	4631      	mov	r1, r6
		conn->err = 0;
   17458:	7326      	strb	r6, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1745a:	f7ff fc3f 	bl	16cdc <bt_conn_set_state>
		bt_conn_unref(conn);
   1745e:	4620      	mov	r0, r4
   17460:	f7ff fc10 	bl	16c84 <bt_conn_unref>
		bt_le_scan_update(false);
   17464:	4630      	mov	r0, r6
   17466:	f7fe fcdd 	bl	15e24 <bt_le_scan_update>
   1746a:	e7e1      	b.n	17430 <bt_conn_le_create+0x7c>
		return -ENOMEM;
   1746c:	f06f 060b 	mvn.w	r6, #11
   17470:	e7e2      	b.n	17438 <bt_conn_le_create+0x84>
   17472:	bf00      	nop
   17474:	2000c580 	.word	0x2000c580

00017478 <bt_le_set_auto_conn>:
}

#if !defined(CONFIG_BT_FILTER_ACCEPT_LIST)
int bt_le_set_auto_conn(const bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
   17478:	b570      	push	{r4, r5, r6, lr}
   1747a:	4606      	mov	r6, r0
   1747c:	4832      	ldr	r0, [pc, #200]	; (17548 <bt_le_set_auto_conn+0xd0>)
   1747e:	f019 ff1e 	bl	312be <atomic_get>
	struct bt_conn *conn;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   17482:	0740      	lsls	r0, r0, #29
{
   17484:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   17486:	d558      	bpl.n	1753a <bt_le_set_auto_conn+0xc2>
		return -EAGAIN;
	}

	if (param && !bt_le_conn_params_valid(param)) {
   17488:	b929      	cbnz	r1, 17496 <bt_le_set_auto_conn+0x1e>
		return -EINVAL;
	}

	if (!bt_id_scan_random_addr_check()) {
   1748a:	f019 fe9e 	bl	311ca <bt_id_scan_random_addr_check>
   1748e:	b940      	cbnz	r0, 174a2 <bt_le_set_auto_conn+0x2a>
		return -EINVAL;
   17490:	f06f 0015 	mvn.w	r0, #21
	}

	bt_conn_unref(conn);

	return 0;
}
   17494:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
   17496:	4608      	mov	r0, r1
   17498:	f019 fdc3 	bl	31022 <bt_le_conn_params_valid>
   1749c:	2800      	cmp	r0, #0
   1749e:	d1f4      	bne.n	1748a <bt_le_set_auto_conn+0x12>
   174a0:	e7f6      	b.n	17490 <bt_le_set_auto_conn+0x18>
	conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr);
   174a2:	4631      	mov	r1, r6
   174a4:	2000      	movs	r0, #0
   174a6:	f7ff feeb 	bl	17280 <bt_conn_lookup_addr_le>
	if (!conn) {
   174aa:	4604      	mov	r4, r0
   174ac:	b928      	cbnz	r0, 174ba <bt_le_set_auto_conn+0x42>
		conn = bt_conn_add_le(BT_ID_DEFAULT, addr);
   174ae:	4631      	mov	r1, r6
   174b0:	f7ff fec8 	bl	17244 <bt_conn_add_le>
		if (!conn) {
   174b4:	4604      	mov	r4, r0
   174b6:	2800      	cmp	r0, #0
   174b8:	d042      	beq.n	17540 <bt_le_set_auto_conn+0xc8>
		if (!atomic_test_and_set_bit(conn->flags,
   174ba:	1d20      	adds	r0, r4, #4
	if (param) {
   174bc:	b365      	cbz	r5, 17518 <bt_le_set_auto_conn+0xa0>
	conn->le.interval_min = param->interval_min;
   174be:	882b      	ldrh	r3, [r5, #0]
   174c0:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
	conn->le.interval_max = param->interval_max;
   174c4:	886b      	ldrh	r3, [r5, #2]
   174c6:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
	conn->le.latency = param->latency;
   174ca:	88ab      	ldrh	r3, [r5, #4]
   174cc:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->le.timeout = param->timeout;
   174d0:	88eb      	ldrh	r3, [r5, #6]
   174d2:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
   174d6:	e8d0 3fef 	ldaex	r3, [r0]
   174da:	f043 0201 	orr.w	r2, r3, #1
   174de:	e8c0 2fe1 	stlex	r1, r2, [r0]
   174e2:	2900      	cmp	r1, #0
   174e4:	d1f7      	bne.n	174d6 <bt_le_set_auto_conn+0x5e>
		if (!atomic_test_and_set_bit(conn->flags,
   174e6:	07d9      	lsls	r1, r3, #31
   174e8:	d402      	bmi.n	174f0 <bt_le_set_auto_conn+0x78>
			bt_conn_ref(conn);
   174ea:	4620      	mov	r0, r4
   174ec:	f7ff fba0 	bl	16c30 <bt_conn_ref>
	if (conn->state == BT_CONN_DISCONNECTED &&
   174f0:	7b63      	ldrb	r3, [r4, #13]
   174f2:	b963      	cbnz	r3, 1750e <bt_le_set_auto_conn+0x96>
   174f4:	4814      	ldr	r0, [pc, #80]	; (17548 <bt_le_set_auto_conn+0xd0>)
   174f6:	f019 fee2 	bl	312be <atomic_get>
   174fa:	0743      	lsls	r3, r0, #29
   174fc:	d507      	bpl.n	1750e <bt_le_set_auto_conn+0x96>
		if (param) {
   174fe:	b11d      	cbz	r5, 17508 <bt_le_set_auto_conn+0x90>
			bt_conn_set_state(conn, BT_CONN_CONNECTING_SCAN);
   17500:	2102      	movs	r1, #2
   17502:	4620      	mov	r0, r4
   17504:	f7ff fbea 	bl	16cdc <bt_conn_set_state>
		bt_le_scan_update(false);
   17508:	2000      	movs	r0, #0
   1750a:	f7fe fc8b 	bl	15e24 <bt_le_scan_update>
	bt_conn_unref(conn);
   1750e:	4620      	mov	r0, r4
   17510:	f7ff fbb8 	bl	16c84 <bt_conn_unref>
	return 0;
   17514:	2000      	movs	r0, #0
   17516:	e7bd      	b.n	17494 <bt_le_set_auto_conn+0x1c>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17518:	f06f 0101 	mvn.w	r1, #1
   1751c:	f019 fec4 	bl	312a8 <atomic_and>
		if (atomic_test_and_clear_bit(conn->flags,
   17520:	07c2      	lsls	r2, r0, #31
   17522:	d5e5      	bpl.n	174f0 <bt_le_set_auto_conn+0x78>
			bt_conn_unref(conn);
   17524:	4620      	mov	r0, r4
   17526:	f7ff fbad 	bl	16c84 <bt_conn_unref>
			if (conn->state == BT_CONN_CONNECTING_SCAN) {
   1752a:	7b63      	ldrb	r3, [r4, #13]
   1752c:	2b02      	cmp	r3, #2
   1752e:	d1df      	bne.n	174f0 <bt_le_set_auto_conn+0x78>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   17530:	4629      	mov	r1, r5
   17532:	4620      	mov	r0, r4
   17534:	f7ff fbd2 	bl	16cdc <bt_conn_set_state>
   17538:	e7da      	b.n	174f0 <bt_le_set_auto_conn+0x78>
		return -EAGAIN;
   1753a:	f06f 000a 	mvn.w	r0, #10
   1753e:	e7a9      	b.n	17494 <bt_le_set_auto_conn+0x1c>
			return -ENOMEM;
   17540:	f06f 000b 	mvn.w	r0, #11
   17544:	e7a6      	b.n	17494 <bt_le_set_auto_conn+0x1c>
   17546:	bf00      	nop
   17548:	2000c654 	.word	0x2000c654

0001754c <send_conn_le_param_update>:
{
   1754c:	b538      	push	{r3, r4, r5, lr}
   1754e:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   17550:	4608      	mov	r0, r1
{
   17552:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   17554:	f019 fd65 	bl	31022 <bt_le_conn_params_valid>
   17558:	b338      	cbz	r0, 175aa <send_conn_le_param_update+0x5e>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1755a:	4b15      	ldr	r3, [pc, #84]	; (175b0 <send_conn_le_param_update+0x64>)
   1755c:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
   17560:	0799      	lsls	r1, r3, #30
   17562:	d407      	bmi.n	17574 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   17564:	78e3      	ldrb	r3, [r4, #3]
   17566:	b173      	cbz	r3, 17586 <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   17568:	4629      	mov	r1, r5
   1756a:	4620      	mov	r0, r4
}
   1756c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   17570:	f000 bb26 	b.w	17bc0 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   17574:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
   17578:	079a      	lsls	r2, r3, #30
   1757a:	d5f3      	bpl.n	17564 <send_conn_le_param_update+0x18>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1757c:	1d20      	adds	r0, r4, #4
   1757e:	f019 fe9e 	bl	312be <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   17582:	0543      	lsls	r3, r0, #21
   17584:	d4ee      	bmi.n	17564 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   17586:	4629      	mov	r1, r5
   17588:	4620      	mov	r0, r4
   1758a:	f019 ffd6 	bl	3153a <bt_conn_le_conn_update>
		if (rc == 0) {
   1758e:	b958      	cbnz	r0, 175a8 <send_conn_le_param_update+0x5c>
			conn->le.interval_min = param->interval_min;
   17590:	882b      	ldrh	r3, [r5, #0]
   17592:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.interval_max = param->interval_max;
   17596:	886b      	ldrh	r3, [r5, #2]
   17598:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			conn->le.pending_latency = param->latency;
   1759c:	88ab      	ldrh	r3, [r5, #4]
   1759e:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
			conn->le.pending_timeout = param->timeout;
   175a2:	88eb      	ldrh	r3, [r5, #6]
   175a4:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
}
   175a8:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   175aa:	f06f 0015 	mvn.w	r0, #21
   175ae:	e7fb      	b.n	175a8 <send_conn_le_param_update+0x5c>
   175b0:	2000c580 	.word	0x2000c580

000175b4 <deferred_work>:
{
   175b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   175b8:	b082      	sub	sp, #8
	if (conn->state == BT_CONN_DISCONNECTED) {
   175ba:	f810 3c53 	ldrb.w	r3, [r0, #-83]
{
   175be:	4604      	mov	r4, r0
   175c0:	af00      	add	r7, sp, #0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   175c2:	f1a0 0560 	sub.w	r5, r0, #96	; 0x60
	if (conn->state == BT_CONN_DISCONNECTED) {
   175c6:	bb8b      	cbnz	r3, 1762c <deferred_work+0x78>
		bt_l2cap_disconnected(conn);
   175c8:	4628      	mov	r0, r5
   175ca:	f01a f813 	bl	315f4 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   175ce:	4b34      	ldr	r3, [pc, #208]	; (176a0 <deferred_work+0xec>)
   175d0:	681e      	ldr	r6, [r3, #0]
   175d2:	b99e      	cbnz	r6, 175fc <deferred_work+0x48>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   175d4:	4e33      	ldr	r6, [pc, #204]	; (176a4 <deferred_work+0xf0>)
   175d6:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 176a8 <deferred_work+0xf4>
   175da:	4546      	cmp	r6, r8
   175dc:	d91e      	bls.n	1761c <deferred_work+0x68>
   175de:	4933      	ldr	r1, [pc, #204]	; (176ac <deferred_work+0xf8>)
   175e0:	f240 53cb 	movw	r3, #1483	; 0x5cb
   175e4:	4a32      	ldr	r2, [pc, #200]	; (176b0 <deferred_work+0xfc>)
   175e6:	4833      	ldr	r0, [pc, #204]	; (176b4 <deferred_work+0x100>)
   175e8:	f017 feec 	bl	2f3c4 <assert_print>
   175ec:	4832      	ldr	r0, [pc, #200]	; (176b8 <deferred_work+0x104>)
   175ee:	f017 fee9 	bl	2f3c4 <assert_print>
   175f2:	f240 51cb 	movw	r1, #1483	; 0x5cb
   175f6:	482e      	ldr	r0, [pc, #184]	; (176b0 <deferred_work+0xfc>)
   175f8:	f017 fedd 	bl	2f3b6 <assert_post_action>
		if (cb->disconnected) {
   175fc:	6873      	ldr	r3, [r6, #4]
   175fe:	b11b      	cbz	r3, 17608 <deferred_work+0x54>
			cb->disconnected(conn, conn->err);
   17600:	4628      	mov	r0, r5
   17602:	f814 1c54 	ldrb.w	r1, [r4, #-84]
   17606:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   17608:	69b6      	ldr	r6, [r6, #24]
   1760a:	e7e2      	b.n	175d2 <deferred_work+0x1e>
		if (cb->disconnected) {
   1760c:	6873      	ldr	r3, [r6, #4]
   1760e:	b11b      	cbz	r3, 17618 <deferred_work+0x64>
			cb->disconnected(conn, conn->err);
   17610:	4628      	mov	r0, r5
   17612:	f814 1c54 	ldrb.w	r1, [r4, #-84]
   17616:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17618:	361c      	adds	r6, #28
   1761a:	e7de      	b.n	175da <deferred_work+0x26>
   1761c:	d3f6      	bcc.n	1760c <deferred_work+0x58>
		bt_conn_unref(conn);
   1761e:	4628      	mov	r0, r5
   17620:	f7ff fb30 	bl	16c84 <bt_conn_unref>
}
   17624:	3708      	adds	r7, #8
   17626:	46bd      	mov	sp, r7
   17628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (conn->type != BT_CONN_TYPE_LE) {
   1762c:	f810 3c5e 	ldrb.w	r3, [r0, #-94]
   17630:	2b01      	cmp	r3, #1
   17632:	d1f7      	bne.n	17624 <deferred_work+0x70>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   17634:	f810 3c5d 	ldrb.w	r3, [r0, #-93]
   17638:	b913      	cbnz	r3, 17640 <deferred_work+0x8c>
		bt_le_create_conn_cancel();
   1763a:	f7fd f841 	bl	146c0 <bt_le_create_conn_cancel>
		return;
   1763e:	e7f1      	b.n	17624 <deferred_work+0x70>
	if (atomic_test_and_clear_bit(conn->flags,
   17640:	f1a0 065c 	sub.w	r6, r0, #92	; 0x5c
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17644:	f46f 7100 	mvn.w	r1, #512	; 0x200
   17648:	4630      	mov	r0, r6
   1764a:	f019 fe2d 	bl	312a8 <atomic_and>
   1764e:	0583      	lsls	r3, r0, #22
   17650:	d50d      	bpl.n	1766e <deferred_work+0xba>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   17652:	6ca3      	ldr	r3, [r4, #72]	; 0x48
		err = send_conn_le_param_update(conn, param);
   17654:	4639      	mov	r1, r7
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   17656:	603b      	str	r3, [r7, #0]
   17658:	6d23      	ldr	r3, [r4, #80]	; 0x50
		err = send_conn_le_param_update(conn, param);
   1765a:	4628      	mov	r0, r5
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   1765c:	607b      	str	r3, [r7, #4]
		err = send_conn_le_param_update(conn, param);
   1765e:	f7ff ff75 	bl	1754c <send_conn_le_param_update>
		if (!err) {
   17662:	b968      	cbnz	r0, 17680 <deferred_work+0xcc>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17664:	f46f 7180 	mvn.w	r1, #256	; 0x100
   17668:	4630      	mov	r0, r6
   1766a:	f019 fe1d 	bl	312a8 <atomic_and>
   1766e:	e8d6 3fef 	ldaex	r3, [r6]
   17672:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   17676:	e8c6 3fe2 	stlex	r2, r3, [r6]
   1767a:	2a00      	cmp	r2, #0
   1767c:	d0d2      	beq.n	17624 <deferred_work+0x70>
   1767e:	e7f6      	b.n	1766e <deferred_work+0xba>
			LOG_WRN("Send LE param update failed (err %d)", err);
   17680:	466c      	mov	r4, sp
   17682:	b088      	sub	sp, #32
   17684:	466a      	mov	r2, sp
   17686:	4b0d      	ldr	r3, [pc, #52]	; (176bc <deferred_work+0x108>)
   17688:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1768c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   17690:	2303      	movs	r3, #3
   17692:	480b      	ldr	r0, [pc, #44]	; (176c0 <deferred_work+0x10c>)
   17694:	f842 3f10 	str.w	r3, [r2, #16]!
   17698:	f019 fe14 	bl	312c4 <z_log_msg_static_create.constprop.0>
   1769c:	46a5      	mov	sp, r4
   1769e:	e7e6      	b.n	1766e <deferred_work+0xba>
   176a0:	2000e64c 	.word	0x2000e64c
   176a4:	00037854 	.word	0x00037854
   176a8:	00037870 	.word	0x00037870
   176ac:	0003c64d 	.word	0x0003c64d
   176b0:	0003c61d 	.word	0x0003c61d
   176b4:	00039995 	.word	0x00039995
   176b8:	0003a18c 	.word	0x0003a18c
   176bc:	0003c971 	.word	0x0003c971
   176c0:	000378b8 	.word	0x000378b8

000176c4 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   176c4:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   176c6:	4801      	ldr	r0, [pc, #4]	; (176cc <bt_conn_create_frag_timeout+0x8>)
   176c8:	f7ff bc46 	b.w	16f58 <bt_conn_create_pdu_timeout>
   176cc:	2000d0e4 	.word	0x2000d0e4

000176d0 <bt_conn_process_tx>:
{
   176d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   176d4:	7b43      	ldrb	r3, [r0, #13]
{
   176d6:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   176d8:	b95b      	cbnz	r3, 176f2 <bt_conn_process_tx+0x22>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   176da:	f06f 0140 	mvn.w	r1, #64	; 0x40
   176de:	3004      	adds	r0, #4
   176e0:	f019 fde2 	bl	312a8 <atomic_and>
   176e4:	0643      	lsls	r3, r0, #25
   176e6:	d504      	bpl.n	176f2 <bt_conn_process_tx+0x22>
		conn_cleanup(conn);
   176e8:	4628      	mov	r0, r5
}
   176ea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		conn_cleanup(conn);
   176ee:	f7ff b901 	b.w	168f4 <conn_cleanup>
	return z_impl_k_queue_peek_head(queue);
   176f2:	f105 0038 	add.w	r0, r5, #56	; 0x38
   176f6:	f01e fd37 	bl	36168 <z_impl_k_queue_peek_head>
	BT_ASSERT(buf);
   176fa:	4604      	mov	r4, r0
   176fc:	b960      	cbnz	r0, 17718 <bt_conn_process_tx+0x48>
   176fe:	f44f 735d 	mov.w	r3, #884	; 0x374
   17702:	4a33      	ldr	r2, [pc, #204]	; (177d0 <bt_conn_process_tx+0x100>)
   17704:	4933      	ldr	r1, [pc, #204]	; (177d4 <bt_conn_process_tx+0x104>)
   17706:	4834      	ldr	r0, [pc, #208]	; (177d8 <bt_conn_process_tx+0x108>)
   17708:	f017 fe5c 	bl	2f3c4 <assert_print>
   1770c:	4040      	eors	r0, r0
   1770e:	f380 8811 	msr	BASEPRI, r0
   17712:	f04f 0003 	mov.w	r0, #3
   17716:	df02      	svc	2
	buf = net_buf_ref(buf);
   17718:	4620      	mov	r0, r4
   1771a:	f006 fd7b 	bl	1e214 <net_buf_ref>
	return bt_dev.le.acl_mtu;
   1771e:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 177dc <bt_conn_process_tx+0x10c>
	if (buf->len <= conn_mtu(conn) && !tx_data(buf)->is_cont) {
   17722:	8a02      	ldrh	r2, [r0, #16]
   17724:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
	buf = net_buf_ref(buf);
   17728:	4604      	mov	r4, r0
	if (buf->len <= conn_mtu(conn) && !tx_data(buf)->is_cont) {
   1772a:	429a      	cmp	r2, r3
   1772c:	7f02      	ldrb	r2, [r0, #28]
   1772e:	d807      	bhi.n	17740 <bt_conn_process_tx+0x70>
   17730:	b932      	cbnz	r2, 17740 <bt_conn_process_tx+0x70>
		return send_frag(conn, buf, NULL, FRAG_SINGLE);
   17732:	2302      	movs	r3, #2
	return send_frag(conn, buf, NULL, FRAG_END);
   17734:	4621      	mov	r1, r4
   17736:	4628      	mov	r0, r5
   17738:	f7fe ffc2 	bl	166c0 <send_frag>
   1773c:	4606      	mov	r6, r0
   1773e:	e030      	b.n	177a2 <bt_conn_process_tx+0xd2>
	if (tx_data(buf)->is_cont) {
   17740:	4617      	mov	r7, r2
		frag = bt_conn_create_frag(0);
   17742:	f04f 0a00 	mov.w	sl, #0
	while (buf->len > conn_mtu(conn)) {
   17746:	8a22      	ldrh	r2, [r4, #16]
   17748:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
   1774c:	429a      	cmp	r2, r3
   1774e:	d804      	bhi.n	1775a <bt_conn_process_tx+0x8a>
	tx_data(buf)->is_cont = true;
   17750:	2301      	movs	r3, #1
	return send_frag(conn, buf, NULL, FRAG_END);
   17752:	2200      	movs	r2, #0
	tx_data(buf)->is_cont = true;
   17754:	7723      	strb	r3, [r4, #28]
	return send_frag(conn, buf, NULL, FRAG_END);
   17756:	2303      	movs	r3, #3
   17758:	e7ec      	b.n	17734 <bt_conn_process_tx+0x64>
		frag = bt_conn_create_frag(0);
   1775a:	f04f 33ff 	mov.w	r3, #4294967295
   1775e:	f04f 32ff 	mov.w	r2, #4294967295
   17762:	2000      	movs	r0, #0
   17764:	f7ff ffae 	bl	176c4 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   17768:	7b6b      	ldrb	r3, [r5, #13]
		frag = bt_conn_create_frag(0);
   1776a:	4680      	mov	r8, r0
	if (conn->state != BT_CONN_CONNECTED) {
   1776c:	2b07      	cmp	r3, #7
   1776e:	d006      	beq.n	1777e <bt_conn_process_tx+0xae>
		net_buf_unref(frag);
   17770:	f006 fd0c 	bl	1e18c <net_buf_unref>
	net_buf_unref(buf);
   17774:	4620      	mov	r0, r4
}
   17776:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	net_buf_unref(buf);
   1777a:	f006 bd07 	b.w	1e18c <net_buf_unref>
		err = send_frag(conn, buf, frag, flags);
   1777e:	4602      	mov	r2, r0
	tx_data(frag)->tx = NULL;
   17780:	f8c0 a018 	str.w	sl, [r0, #24]
	tx_data(frag)->is_cont = false;
   17784:	f880 a01c 	strb.w	sl, [r0, #28]
		err = send_frag(conn, buf, frag, flags);
   17788:	463b      	mov	r3, r7
   1778a:	4621      	mov	r1, r4
   1778c:	4628      	mov	r0, r5
   1778e:	f7fe ff97 	bl	166c0 <send_frag>
		if (err) {
   17792:	4606      	mov	r6, r0
   17794:	b1b8      	cbz	r0, 177c6 <bt_conn_process_tx+0xf6>
			tx_data(buf)->is_cont = flags != FRAG_START;
   17796:	f007 0701 	and.w	r7, r7, #1
			net_buf_unref(frag);
   1779a:	4640      	mov	r0, r8
			tx_data(buf)->is_cont = flags != FRAG_START;
   1779c:	7727      	strb	r7, [r4, #28]
			net_buf_unref(frag);
   1779e:	f006 fcf5 	bl	1e18c <net_buf_unref>
	net_buf_unref(buf);
   177a2:	4620      	mov	r0, r4
   177a4:	f006 fcf2 	bl	1e18c <net_buf_unref>
	if (err  == -EIO) {
   177a8:	3605      	adds	r6, #5
   177aa:	d10e      	bne.n	177ca <bt_conn_process_tx+0xfa>
		tx_data(buf)->tx = NULL;
   177ac:	2300      	movs	r3, #0
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   177ae:	69a6      	ldr	r6, [r4, #24]
		net_buf_unref(buf);
   177b0:	4620      	mov	r0, r4
		tx_data(buf)->tx = NULL;
   177b2:	61a3      	str	r3, [r4, #24]
		net_buf_unref(buf);
   177b4:	f006 fcea 	bl	1e18c <net_buf_unref>
		if (tx) {
   177b8:	b13e      	cbz	r6, 177ca <bt_conn_process_tx+0xfa>
			conn_tx_destroy(conn, tx);
   177ba:	4631      	mov	r1, r6
   177bc:	4628      	mov	r0, r5
}
   177be:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			conn_tx_destroy(conn, tx);
   177c2:	f7fe bf57 	b.w	16674 <conn_tx_destroy>
		flags = FRAG_CONT;
   177c6:	2701      	movs	r7, #1
   177c8:	e7bd      	b.n	17746 <bt_conn_process_tx+0x76>
}
   177ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   177ce:	bf00      	nop
   177d0:	0003c61d 	.word	0x0003c61d
   177d4:	0003db82 	.word	0x0003db82
   177d8:	00039995 	.word	0x00039995
   177dc:	2000c580 	.word	0x2000c580

000177e0 <bt_conn_auth_cb_register>:
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
   177e0:	4b0b      	ldr	r3, [pc, #44]	; (17810 <bt_conn_auth_cb_register+0x30>)
   177e2:	b158      	cbz	r0, 177fc <bt_conn_auth_cb_register+0x1c>
		bt_auth = NULL;
		return 0;
	}

	if (bt_auth) {
   177e4:	681a      	ldr	r2, [r3, #0]
   177e6:	b962      	cbnz	r2, 17802 <bt_conn_auth_cb_register+0x22>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
   177e8:	6902      	ldr	r2, [r0, #16]
   177ea:	b93a      	cbnz	r2, 177fc <bt_conn_auth_cb_register+0x1c>
   177ec:	6802      	ldr	r2, [r0, #0]
   177ee:	b95a      	cbnz	r2, 17808 <bt_conn_auth_cb_register+0x28>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   177f0:	6842      	ldr	r2, [r0, #4]
   177f2:	b94a      	cbnz	r2, 17808 <bt_conn_auth_cb_register+0x28>
   177f4:	6882      	ldr	r2, [r0, #8]
   177f6:	b93a      	cbnz	r2, 17808 <bt_conn_auth_cb_register+0x28>
   177f8:	6942      	ldr	r2, [r0, #20]
   177fa:	b92a      	cbnz	r2, 17808 <bt_conn_auth_cb_register+0x28>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
   177fc:	6018      	str	r0, [r3, #0]
		return 0;
   177fe:	2000      	movs	r0, #0
   17800:	4770      	bx	lr
		return -EALREADY;
   17802:	f06f 0077 	mvn.w	r0, #119	; 0x77
   17806:	4770      	bx	lr
		return -EINVAL;
   17808:	f06f 0015 	mvn.w	r0, #21
	return 0;
}
   1780c:	4770      	bx	lr
   1780e:	bf00      	nop
   17810:	2000e658 	.word	0x2000e658

00017814 <bt_conn_auth_info_cb_register>:
}
#endif

int bt_conn_auth_info_cb_register(struct bt_conn_auth_info_cb *cb)
{
	CHECKIF(cb == NULL) {
   17814:	b168      	cbz	r0, 17832 <bt_conn_auth_info_cb_register+0x1e>
	parent->next = child;
   17816:	2300      	movs	r3, #0
   17818:	60c3      	str	r3, [r0, #12]
	return list->tail;
   1781a:	4b07      	ldr	r3, [pc, #28]	; (17838 <bt_conn_auth_info_cb_register+0x24>)
		return -EINVAL;
	}

	sys_slist_append(&bt_auth_info_cbs, &cb->node);
   1781c:	f100 020c 	add.w	r2, r0, #12
   17820:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   17822:	b919      	cbnz	r1, 1782c <bt_conn_auth_info_cb_register+0x18>
	list->head = node;
   17824:	e9c3 2200 	strd	r2, r2, [r3]

	return 0;
   17828:	2000      	movs	r0, #0
   1782a:	4770      	bx	lr
	parent->next = child;
   1782c:	600a      	str	r2, [r1, #0]
	list->tail = node;
   1782e:	605a      	str	r2, [r3, #4]
}
   17830:	e7fa      	b.n	17828 <bt_conn_auth_info_cb_register+0x14>
		return -EINVAL;
   17832:	f06f 0015 	mvn.w	r0, #21
}
   17836:	4770      	bx	lr
   17838:	2000e650 	.word	0x2000e650

0001783c <bt_conn_lookup_index>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

struct bt_conn *bt_conn_lookup_index(uint8_t index)
{
	if (index >= ARRAY_SIZE(acl_conns)) {
   1783c:	b910      	cbnz	r0, 17844 <bt_conn_lookup_index+0x8>
		return NULL;
	}

	return bt_conn_ref(&acl_conns[index]);
   1783e:	4802      	ldr	r0, [pc, #8]	; (17848 <bt_conn_lookup_index+0xc>)
   17840:	f7ff b9f6 	b.w	16c30 <bt_conn_ref>
}
   17844:	2000      	movs	r0, #0
   17846:	4770      	bx	lr
   17848:	2000d978 	.word	0x2000d978

0001784c <bt_conn_init>:

int bt_conn_init(void)
{
   1784c:	b570      	push	{r4, r5, r6, lr}
	z_impl_k_queue_init(queue);
   1784e:	4815      	ldr	r0, [pc, #84]	; (178a4 <bt_conn_init+0x58>)
   17850:	f01e fc68 	bl	36124 <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   17854:	2400      	movs	r4, #0
   17856:	4d14      	ldr	r5, [pc, #80]	; (178a8 <bt_conn_init+0x5c>)
		k_fifo_put(&free_tx, &conn_tx[i]);
   17858:	4e12      	ldr	r6, [pc, #72]	; (178a4 <bt_conn_init+0x58>)
   1785a:	4629      	mov	r1, r5
   1785c:	4630      	mov	r0, r6
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   1785e:	3401      	adds	r4, #1
		k_fifo_put(&free_tx, &conn_tx[i]);
   17860:	f01e fc6d 	bl	3613e <k_queue_append>
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   17864:	2c06      	cmp	r4, #6
   17866:	f105 0510 	add.w	r5, r5, #16
   1786a:	d1f6      	bne.n	1785a <bt_conn_init+0xe>
	}

	bt_att_init();
   1786c:	f001 f990 	bl	18b90 <bt_att_init>

	err = bt_smp_init();
   17870:	f005 ffa2 	bl	1d7b8 <bt_smp_init>
	if (err) {
   17874:	4605      	mov	r5, r0
   17876:	b998      	cbnz	r0, 178a0 <bt_conn_init+0x54>
		return err;
	}

	bt_l2cap_init();
   17878:	f019 ff3d 	bl	316f6 <bt_l2cap_init>

	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1787c:	480b      	ldr	r0, [pc, #44]	; (178ac <bt_conn_init+0x60>)
   1787e:	f7ff f9d7 	bl	16c30 <bt_conn_ref>

			if (!conn) {
   17882:	4604      	mov	r4, r0
   17884:	b160      	cbz	r0, 178a0 <bt_conn_init+0x54>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   17886:	3004      	adds	r0, #4
   17888:	f019 fd19 	bl	312be <atomic_get>
				continue;
			}

#if !defined(CONFIG_BT_FILTER_ACCEPT_LIST)
			if (atomic_test_bit(conn->flags,
   1788c:	07c3      	lsls	r3, r0, #31
   1788e:	d504      	bpl.n	1789a <bt_conn_init+0x4e>
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
				bt_conn_set_state(conn,
   17890:	2102      	movs	r1, #2
   17892:	4620      	mov	r0, r4
				conn->id = BT_ID_DEFAULT;
   17894:	7225      	strb	r5, [r4, #8]
				bt_conn_set_state(conn,
   17896:	f7ff fa21 	bl	16cdc <bt_conn_set_state>
						  BT_CONN_CONNECTING_SCAN);
			}
#endif /* !defined(CONFIG_BT_FILTER_ACCEPT_LIST) */

			bt_conn_unref(conn);
   1789a:	4620      	mov	r0, r4
   1789c:	f7ff f9f2 	bl	16c84 <bt_conn_unref>
		}
	}

	return 0;
}
   178a0:	4628      	mov	r0, r5
   178a2:	bd70      	pop	{r4, r5, r6, pc}
   178a4:	2000cfdc 	.word	0x2000cfdc
   178a8:	2000e5ec 	.word	0x2000e5ec
   178ac:	2000d978 	.word	0x2000d978

000178b0 <l2cap_create_le_sig_pdu.part.0>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
		bt_l2cap_chan_del(chan);
	}
}

static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   178b0:	b580      	push	{r7, lr}
   178b2:	af00      	add	r7, sp, #0
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
	if (!buf) {
		/* If it was not possible to allocate a buffer within the
		 * timeout return NULL.
		 */
		LOG_ERR("Unable to allocate buffer for op 0x%02x", code);
   178b4:	b088      	sub	sp, #32
   178b6:	466a      	mov	r2, sp
   178b8:	4b06      	ldr	r3, [pc, #24]	; (178d4 <l2cap_create_le_sig_pdu.part.0+0x24>)
   178ba:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   178be:	e9c2 3005 	strd	r3, r0, [r2, #20]
   178c2:	2303      	movs	r3, #3
   178c4:	4804      	ldr	r0, [pc, #16]	; (178d8 <l2cap_create_le_sig_pdu.part.0+0x28>)
   178c6:	f842 3f10 	str.w	r3, [r2, #16]!
   178ca:	f019 fe5f 	bl	3158c <z_log_msg_static_create.constprop.0>
	hdr->code = code;
	hdr->ident = ident;
	hdr->len = sys_cpu_to_le16(len);

	return buf;
}
   178ce:	2000      	movs	r0, #0
   178d0:	46bd      	mov	sp, r7
   178d2:	bd80      	pop	{r7, pc}
   178d4:	0003ca0f 	.word	0x0003ca0f
   178d8:	00037910 	.word	0x00037910

000178dc <l2cap_accept.part.0>:
	 */
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   178dc:	b580      	push	{r7, lr}
   178de:	af00      	add	r7, sp, #0
		*chan = &l2cap->chan.chan;

		return 0;
	}

	LOG_ERR("No available L2CAP context for conn %p", conn);
   178e0:	b088      	sub	sp, #32
   178e2:	466a      	mov	r2, sp
   178e4:	4b07      	ldr	r3, [pc, #28]	; (17904 <l2cap_accept.part.0+0x28>)
   178e6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   178ea:	e9c2 3005 	strd	r3, r0, [r2, #20]
   178ee:	2303      	movs	r3, #3
   178f0:	4805      	ldr	r0, [pc, #20]	; (17908 <l2cap_accept.part.0+0x2c>)
   178f2:	f842 3f10 	str.w	r3, [r2, #16]!
   178f6:	f019 fe49 	bl	3158c <z_log_msg_static_create.constprop.0>

	return -ENOMEM;
}
   178fa:	f06f 000b 	mvn.w	r0, #11
   178fe:	46bd      	mov	sp, r7
   17900:	bd80      	pop	{r7, pc}
   17902:	bf00      	nop
   17904:	0003ca37 	.word	0x0003ca37
   17908:	00037910 	.word	0x00037910

0001790c <l2cap_accept>:
		if (l2cap->chan.chan.conn) {
   1790c:	4b04      	ldr	r3, [pc, #16]	; (17920 <l2cap_accept+0x14>)
   1790e:	681a      	ldr	r2, [r3, #0]
   17910:	b10a      	cbz	r2, 17916 <l2cap_accept+0xa>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   17912:	f7ff bfe3 	b.w	178dc <l2cap_accept.part.0>
		l2cap->chan.chan.ops = &ops;
   17916:	4803      	ldr	r0, [pc, #12]	; (17924 <l2cap_accept+0x18>)
   17918:	6058      	str	r0, [r3, #4]
}
   1791a:	4610      	mov	r0, r2
		*chan = &l2cap->chan.chan;
   1791c:	600b      	str	r3, [r1, #0]
}
   1791e:	4770      	bx	lr
   17920:	2000e65c 	.word	0x2000e65c
   17924:	00038104 	.word	0x00038104

00017928 <bt_l2cap_connected>:
{
   17928:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1792a:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1792c:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1792e:	4d27      	ldr	r5, [pc, #156]	; (179cc <bt_l2cap_connected+0xa4>)
   17930:	4f27      	ldr	r7, [pc, #156]	; (179d0 <bt_l2cap_connected+0xa8>)
   17932:	42bd      	cmp	r5, r7
   17934:	d946      	bls.n	179c4 <bt_l2cap_connected+0x9c>
   17936:	4927      	ldr	r1, [pc, #156]	; (179d4 <bt_l2cap_connected+0xac>)
   17938:	f240 1381 	movw	r3, #385	; 0x181
   1793c:	4a26      	ldr	r2, [pc, #152]	; (179d8 <bt_l2cap_connected+0xb0>)
   1793e:	4827      	ldr	r0, [pc, #156]	; (179dc <bt_l2cap_connected+0xb4>)
   17940:	f017 fd40 	bl	2f3c4 <assert_print>
   17944:	4826      	ldr	r0, [pc, #152]	; (179e0 <bt_l2cap_connected+0xb8>)
   17946:	f017 fd3d 	bl	2f3c4 <assert_print>
   1794a:	f240 1181 	movw	r1, #385	; 0x181
   1794e:	4822      	ldr	r0, [pc, #136]	; (179d8 <bt_l2cap_connected+0xb0>)
   17950:	f017 fd31 	bl	2f3b6 <assert_post_action>
		if (fchan->accept(conn, &chan) < 0) {
   17954:	4620      	mov	r0, r4
   17956:	686b      	ldr	r3, [r5, #4]
   17958:	a901      	add	r1, sp, #4
   1795a:	4798      	blx	r3
   1795c:	2800      	cmp	r0, #0
   1795e:	db2c      	blt.n	179ba <bt_l2cap_connected+0x92>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   17960:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   17962:	882a      	ldrh	r2, [r5, #0]
   17964:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   17966:	849a      	strh	r2, [r3, #36]	; 0x24
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   17968:	68a8      	ldr	r0, [r5, #8]
   1796a:	f103 0210 	add.w	r2, r3, #16
   1796e:	e8d2 1fef 	ldaex	r1, [r2]
   17972:	e8c2 6fec 	stlex	ip, r6, [r2]
   17976:	f1bc 0f00 	cmp.w	ip, #0
   1797a:	d1f8      	bne.n	1796e <bt_l2cap_connected+0x46>
	parent->next = child;
   1797c:	609e      	str	r6, [r3, #8]
	return list->tail;
   1797e:	6da1      	ldr	r1, [r4, #88]	; 0x58
	sys_slist_append(&conn->channels, &chan->node);
   17980:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   17984:	b9d9      	cbnz	r1, 179be <bt_l2cap_connected+0x96>
	list->head = node;
   17986:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
	chan->conn = conn;
   1798a:	601c      	str	r4, [r3, #0]
	chan->destroy = destroy;
   1798c:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   1798e:	9801      	ldr	r0, [sp, #4]
   17990:	6843      	ldr	r3, [r0, #4]
   17992:	681b      	ldr	r3, [r3, #0]
   17994:	b103      	cbz	r3, 17998 <bt_l2cap_connected+0x70>
			chan->ops->connected(chan);
   17996:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17998:	9b01      	ldr	r3, [sp, #4]
   1799a:	3310      	adds	r3, #16
   1799c:	e8d3 1fef 	ldaex	r1, [r3]
   179a0:	f041 0101 	orr.w	r1, r1, #1
   179a4:	e8c3 1fe2 	stlex	r2, r1, [r3]
   179a8:	2a00      	cmp	r2, #0
   179aa:	d1f7      	bne.n	1799c <bt_l2cap_connected+0x74>
		if (chan->ops->status) {
   179ac:	9801      	ldr	r0, [sp, #4]
   179ae:	6843      	ldr	r3, [r0, #4]
   179b0:	69db      	ldr	r3, [r3, #28]
   179b2:	b113      	cbz	r3, 179ba <bt_l2cap_connected+0x92>
			chan->ops->status(chan, chan->status);
   179b4:	f100 0110 	add.w	r1, r0, #16
   179b8:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   179ba:	350c      	adds	r5, #12
   179bc:	e7b9      	b.n	17932 <bt_l2cap_connected+0xa>
	parent->next = child;
   179be:	600a      	str	r2, [r1, #0]
	list->tail = node;
   179c0:	65a2      	str	r2, [r4, #88]	; 0x58
}
   179c2:	e7e2      	b.n	1798a <bt_l2cap_connected+0x62>
   179c4:	d3c6      	bcc.n	17954 <bt_l2cap_connected+0x2c>
}
   179c6:	b003      	add	sp, #12
   179c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   179ca:	bf00      	nop
   179cc:	00037830 	.word	0x00037830
   179d0:	00037854 	.word	0x00037854
   179d4:	0003ca8f 	.word	0x0003ca8f
   179d8:	0003ca5e 	.word	0x0003ca5e
   179dc:	00039995 	.word	0x00039995
   179e0:	0003a18c 	.word	0x0003a18c

000179e4 <l2cap_recv>:
{
   179e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   179e8:	b088      	sub	sp, #32
	if (buf->len < sizeof(*hdr)) {
   179ea:	8a0b      	ldrh	r3, [r1, #16]
{
   179ec:	4606      	mov	r6, r0
	if (buf->len < sizeof(*hdr)) {
   179ee:	2b03      	cmp	r3, #3
{
   179f0:	460d      	mov	r5, r1
   179f2:	af02      	add	r7, sp, #8
	if (buf->len < sizeof(*hdr)) {
   179f4:	d80b      	bhi.n	17a0e <l2cap_recv+0x2a>
		LOG_ERR("Too small L2CAP signaling PDU");
   179f6:	4b4b      	ldr	r3, [pc, #300]	; (17b24 <l2cap_recv+0x140>)
		LOG_ERR("Invalid ident value in L2CAP PDU");
   179f8:	617b      	str	r3, [r7, #20]
   179fa:	2302      	movs	r3, #2
   179fc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17a00:	613b      	str	r3, [r7, #16]
   17a02:	f107 0210 	add.w	r2, r7, #16
   17a06:	4848      	ldr	r0, [pc, #288]	; (17b28 <l2cap_recv+0x144>)
   17a08:	f019 fdc0 	bl	3158c <z_log_msg_static_create.constprop.0>
		return 0;
   17a0c:	e019      	b.n	17a42 <l2cap_recv+0x5e>
	return net_buf_simple_pull_mem(&buf->b, len);
   17a0e:	2104      	movs	r1, #4
   17a10:	f105 000c 	add.w	r0, r5, #12
   17a14:	f006 fd22 	bl	1e45c <net_buf_simple_pull_mem>
	len = sys_le16_to_cpu(hdr->len);
   17a18:	8843      	ldrh	r3, [r0, #2]
   17a1a:	4604      	mov	r4, r0
	if (buf->len != len) {
   17a1c:	8a28      	ldrh	r0, [r5, #16]
   17a1e:	4298      	cmp	r0, r3
   17a20:	d014      	beq.n	17a4c <l2cap_recv+0x68>
		LOG_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   17a22:	466c      	mov	r4, sp
   17a24:	b088      	sub	sp, #32
   17a26:	aa02      	add	r2, sp, #8
   17a28:	61d3      	str	r3, [r2, #28]
   17a2a:	2304      	movs	r3, #4
   17a2c:	493f      	ldr	r1, [pc, #252]	; (17b2c <l2cap_recv+0x148>)
   17a2e:	e9c2 1005 	strd	r1, r0, [r2, #20]
   17a32:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   17a36:	483c      	ldr	r0, [pc, #240]	; (17b28 <l2cap_recv+0x144>)
   17a38:	f842 3f10 	str.w	r3, [r2, #16]!
   17a3c:	f019 fda6 	bl	3158c <z_log_msg_static_create.constprop.0>
   17a40:	46a5      	mov	sp, r4
}
   17a42:	2000      	movs	r0, #0
   17a44:	3718      	adds	r7, #24
   17a46:	46bd      	mov	sp, r7
   17a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!hdr->ident) {
   17a4c:	7861      	ldrb	r1, [r4, #1]
   17a4e:	b909      	cbnz	r1, 17a54 <l2cap_recv+0x70>
		LOG_ERR("Invalid ident value in L2CAP PDU");
   17a50:	4b37      	ldr	r3, [pc, #220]	; (17b30 <l2cap_recv+0x14c>)
   17a52:	e7d1      	b.n	179f8 <l2cap_recv+0x14>
	switch (hdr->code) {
   17a54:	7823      	ldrb	r3, [r4, #0]
   17a56:	2b12      	cmp	r3, #18
   17a58:	d019      	beq.n	17a8e <l2cap_recv+0xaa>
   17a5a:	2b13      	cmp	r3, #19
   17a5c:	d013      	beq.n	17a86 <l2cap_recv+0xa2>
   17a5e:	2b01      	cmp	r3, #1
   17a60:	d0ef      	beq.n	17a42 <l2cap_recv+0x5e>
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   17a62:	466d      	mov	r5, sp
   17a64:	b088      	sub	sp, #32
   17a66:	aa02      	add	r2, sp, #8
   17a68:	4932      	ldr	r1, [pc, #200]	; (17b34 <l2cap_recv+0x150>)
   17a6a:	482f      	ldr	r0, [pc, #188]	; (17b28 <l2cap_recv+0x144>)
	switch (hdr->code) {
   17a6c:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   17a70:	2303      	movs	r3, #3
   17a72:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   17a76:	f842 3f10 	str.w	r3, [r2, #16]!
   17a7a:	f019 fd87 	bl	3158c <z_log_msg_static_create.constprop.0>
   17a7e:	46ad      	mov	sp, r5
		l2cap_send_reject(chan->conn, hdr->ident,
   17a80:	7861      	ldrb	r1, [r4, #1]
   17a82:	6830      	ldr	r0, [r6, #0]
   17a84:	e01b      	b.n	17abe <l2cap_recv+0xda>
	if (buf->len < sizeof(*rsp)) {
   17a86:	2801      	cmp	r0, #1
   17a88:	d8db      	bhi.n	17a42 <l2cap_recv+0x5e>
		LOG_ERR("Too small LE conn param rsp");
   17a8a:	4b2b      	ldr	r3, [pc, #172]	; (17b38 <l2cap_recv+0x154>)
   17a8c:	e7b4      	b.n	179f8 <l2cap_recv+0x14>
	if (buf->len < sizeof(*req)) {
   17a8e:	2807      	cmp	r0, #7
   17a90:	6834      	ldr	r4, [r6, #0]
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
   17a92:	68ea      	ldr	r2, [r5, #12]
	if (buf->len < sizeof(*req)) {
   17a94:	d801      	bhi.n	17a9a <l2cap_recv+0xb6>
		LOG_ERR("Too small LE conn update param req");
   17a96:	4b29      	ldr	r3, [pc, #164]	; (17b3c <l2cap_recv+0x158>)
   17a98:	e7ae      	b.n	179f8 <l2cap_recv+0x14>
	if (conn->state != BT_CONN_CONNECTED) {
   17a9a:	7b63      	ldrb	r3, [r4, #13]
   17a9c:	2b07      	cmp	r3, #7
   17a9e:	d008      	beq.n	17ab2 <l2cap_recv+0xce>
		LOG_WRN("Not connected");
   17aa0:	4b27      	ldr	r3, [pc, #156]	; (17b40 <l2cap_recv+0x15c>)
   17aa2:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   17aa6:	617b      	str	r3, [r7, #20]
   17aa8:	2302      	movs	r3, #2
   17aaa:	f107 0210 	add.w	r2, r7, #16
   17aae:	613b      	str	r3, [r7, #16]
   17ab0:	e7a9      	b.n	17a06 <l2cap_recv+0x22>
	if (conn->role != BT_HCI_ROLE_CENTRAL) {
   17ab2:	f894 8003 	ldrb.w	r8, [r4, #3]
   17ab6:	f1b8 0f00 	cmp.w	r8, #0
   17aba:	d003      	beq.n	17ac4 <l2cap_recv+0xe0>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
   17abc:	4620      	mov	r0, r4
		l2cap_send_reject(chan->conn, hdr->ident,
   17abe:	f019 fdea 	bl	31696 <l2cap_send_reject.constprop.0>
		break;
   17ac2:	e7be      	b.n	17a42 <l2cap_recv+0x5e>
	param.interval_min = sys_le16_to_cpu(req->min_interval);
   17ac4:	8813      	ldrh	r3, [r2, #0]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   17ac6:	2013      	movs	r0, #19
	param.interval_min = sys_le16_to_cpu(req->min_interval);
   17ac8:	803b      	strh	r3, [r7, #0]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
   17aca:	8853      	ldrh	r3, [r2, #2]
   17acc:	807b      	strh	r3, [r7, #2]
	param.latency = sys_le16_to_cpu(req->latency);
   17ace:	8893      	ldrh	r3, [r2, #4]
   17ad0:	80bb      	strh	r3, [r7, #4]
	param.timeout = sys_le16_to_cpu(req->timeout);
   17ad2:	88d3      	ldrh	r3, [r2, #6]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   17ad4:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
   17ad6:	80fb      	strh	r3, [r7, #6]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   17ad8:	f019 fd5b 	bl	31592 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   17adc:	4605      	mov	r5, r0
   17ade:	2800      	cmp	r0, #0
   17ae0:	d0af      	beq.n	17a42 <l2cap_recv+0x5e>
	accepted = le_param_req(conn, &param);
   17ae2:	4639      	mov	r1, r7
   17ae4:	4620      	mov	r0, r4
   17ae6:	f7ff facf 	bl	17088 <le_param_req>
   17aea:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   17aec:	2102      	movs	r1, #2
   17aee:	f105 000c 	add.w	r0, r5, #12
   17af2:	f006 fcd1 	bl	1e498 <net_buf_simple_add>
	if (accepted) {
   17af6:	f086 0301 	eor.w	r3, r6, #1
   17afa:	b2db      	uxtb	r3, r3
   17afc:	8003      	strh	r3, [r0, #0]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   17afe:	462a      	mov	r2, r5
   17b00:	4643      	mov	r3, r8
   17b02:	2105      	movs	r1, #5
   17b04:	4620      	mov	r0, r4
   17b06:	f8cd 8000 	str.w	r8, [sp]
   17b0a:	f019 fdab 	bl	31664 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   17b0e:	b110      	cbz	r0, 17b16 <l2cap_recv+0x132>
		net_buf_unref(buf);
   17b10:	4628      	mov	r0, r5
   17b12:	f006 fb3b 	bl	1e18c <net_buf_unref>
	if (accepted) {
   17b16:	2e00      	cmp	r6, #0
   17b18:	d093      	beq.n	17a42 <l2cap_recv+0x5e>
		bt_conn_le_conn_update(conn, &param);
   17b1a:	4639      	mov	r1, r7
   17b1c:	4620      	mov	r0, r4
   17b1e:	f019 fd0c 	bl	3153a <bt_conn_le_conn_update>
   17b22:	e78e      	b.n	17a42 <l2cap_recv+0x5e>
   17b24:	0003cab6 	.word	0x0003cab6
   17b28:	00037910 	.word	0x00037910
   17b2c:	0003cad4 	.word	0x0003cad4
   17b30:	0003caf5 	.word	0x0003caf5
   17b34:	0003cb63 	.word	0x0003cb63
   17b38:	0003cb16 	.word	0x0003cb16
   17b3c:	0003cb32 	.word	0x0003cb32
   17b40:	0003cb55 	.word	0x0003cb55

00017b44 <bt_l2cap_recv>:
{
   17b44:	b5b0      	push	{r4, r5, r7, lr}
   17b46:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   17b48:	8a0b      	ldrh	r3, [r1, #16]
{
   17b4a:	4605      	mov	r5, r0
	if (buf->len < sizeof(*hdr)) {
   17b4c:	2b03      	cmp	r3, #3
{
   17b4e:	460c      	mov	r4, r1
   17b50:	af00      	add	r7, sp, #0
	if (buf->len < sizeof(*hdr)) {
   17b52:	d810      	bhi.n	17b76 <bt_l2cap_recv+0x32>
		LOG_ERR("Too small L2CAP PDU received");
   17b54:	4b17      	ldr	r3, [pc, #92]	; (17bb4 <bt_l2cap_recv+0x70>)
   17b56:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17b5a:	617b      	str	r3, [r7, #20]
   17b5c:	2302      	movs	r3, #2
   17b5e:	4816      	ldr	r0, [pc, #88]	; (17bb8 <bt_l2cap_recv+0x74>)
   17b60:	f107 0210 	add.w	r2, r7, #16
   17b64:	613b      	str	r3, [r7, #16]
   17b66:	f019 fd11 	bl	3158c <z_log_msg_static_create.constprop.0>
	net_buf_unref(buf);
   17b6a:	4620      	mov	r0, r4
   17b6c:	f006 fb0e 	bl	1e18c <net_buf_unref>
}
   17b70:	3718      	adds	r7, #24
   17b72:	46bd      	mov	sp, r7
   17b74:	bdb0      	pop	{r4, r5, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   17b76:	2104      	movs	r1, #4
   17b78:	f104 000c 	add.w	r0, r4, #12
   17b7c:	f006 fc6e 	bl	1e45c <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   17b80:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   17b82:	4628      	mov	r0, r5
   17b84:	f019 fdae 	bl	316e4 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   17b88:	b978      	cbnz	r0, 17baa <bt_l2cap_recv+0x66>
		LOG_WRN("Ignoring data for unknown channel ID 0x%04x", cid);
   17b8a:	466d      	mov	r5, sp
   17b8c:	b088      	sub	sp, #32
   17b8e:	466a      	mov	r2, sp
   17b90:	4b0a      	ldr	r3, [pc, #40]	; (17bbc <bt_l2cap_recv+0x78>)
   17b92:	4809      	ldr	r0, [pc, #36]	; (17bb8 <bt_l2cap_recv+0x74>)
   17b94:	e9c2 3105 	strd	r3, r1, [r2, #20]
   17b98:	2303      	movs	r3, #3
   17b9a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   17b9e:	f842 3f10 	str.w	r3, [r2, #16]!
   17ba2:	f019 fcf3 	bl	3158c <z_log_msg_static_create.constprop.0>
   17ba6:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   17ba8:	e7df      	b.n	17b6a <bt_l2cap_recv+0x26>
	chan->ops->recv(chan, buf);
   17baa:	6843      	ldr	r3, [r0, #4]
   17bac:	4621      	mov	r1, r4
   17bae:	695b      	ldr	r3, [r3, #20]
   17bb0:	4798      	blx	r3
   17bb2:	e7da      	b.n	17b6a <bt_l2cap_recv+0x26>
   17bb4:	0003cb8b 	.word	0x0003cb8b
   17bb8:	00037910 	.word	0x00037910
   17bbc:	0003cba8 	.word	0x0003cba8

00017bc0 <bt_l2cap_update_conn_param>:
{
   17bc0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   17bc2:	4b17      	ldr	r3, [pc, #92]	; (17c20 <bt_l2cap_update_conn_param+0x60>)
{
   17bc4:	460e      	mov	r6, r1
	ident++;
   17bc6:	7819      	ldrb	r1, [r3, #0]
{
   17bc8:	4605      	mov	r5, r0
	ident++;
   17bca:	3101      	adds	r1, #1
   17bcc:	b2c9      	uxtb	r1, r1
   17bce:	2901      	cmp	r1, #1
   17bd0:	bf38      	it	cc
   17bd2:	2101      	movcc	r1, #1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   17bd4:	2208      	movs	r2, #8
   17bd6:	2012      	movs	r0, #18
	ident++;
   17bd8:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   17bda:	f019 fcda 	bl	31592 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   17bde:	4604      	mov	r4, r0
   17be0:	b1d0      	cbz	r0, 17c18 <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
   17be2:	2108      	movs	r1, #8
   17be4:	300c      	adds	r0, #12
   17be6:	f006 fc57 	bl	1e498 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   17bea:	8833      	ldrh	r3, [r6, #0]
   17bec:	4622      	mov	r2, r4
   17bee:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   17bf0:	8873      	ldrh	r3, [r6, #2]
   17bf2:	2105      	movs	r1, #5
   17bf4:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   17bf6:	88b3      	ldrh	r3, [r6, #4]
   17bf8:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   17bfa:	88f3      	ldrh	r3, [r6, #6]
   17bfc:	80c3      	strh	r3, [r0, #6]
   17bfe:	2300      	movs	r3, #0
   17c00:	4628      	mov	r0, r5
   17c02:	9300      	str	r3, [sp, #0]
   17c04:	f019 fd2e 	bl	31664 <bt_l2cap_send_cb>
	if (err) {
   17c08:	4605      	mov	r5, r0
   17c0a:	b110      	cbz	r0, 17c12 <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
   17c0c:	4620      	mov	r0, r4
   17c0e:	f006 fabd 	bl	1e18c <net_buf_unref>
}
   17c12:	4628      	mov	r0, r5
   17c14:	b002      	add	sp, #8
   17c16:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   17c18:	f06f 050b 	mvn.w	r5, #11
   17c1c:	e7f9      	b.n	17c12 <bt_l2cap_update_conn_param+0x52>
   17c1e:	bf00      	nop
   17c20:	2000f208 	.word	0x2000f208

00017c24 <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   17c24:	2823      	cmp	r0, #35	; 0x23
   17c26:	d81f      	bhi.n	17c68 <att_op_get_type+0x44>
   17c28:	281a      	cmp	r0, #26
   17c2a:	d804      	bhi.n	17c36 <att_op_get_type+0x12>
   17c2c:	1e43      	subs	r3, r0, #1
   17c2e:	2b18      	cmp	r3, #24
   17c30:	d90e      	bls.n	17c50 <att_op_get_type+0x2c>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   17c32:	2006      	movs	r0, #6
   17c34:	4770      	bx	lr
	switch (op) {
   17c36:	f1a0 031b 	sub.w	r3, r0, #27
   17c3a:	2b08      	cmp	r3, #8
   17c3c:	d81e      	bhi.n	17c7c <att_op_get_type+0x58>
   17c3e:	e8df f003 	tbb	[pc, r3]
   17c42:	1d05      	.short	0x1d05
   17c44:	191d231b 	.word	0x191d231b
   17c48:	1d25      	.short	0x1d25
   17c4a:	05          	.byte	0x05
   17c4b:	00          	.byte	0x00
		return ATT_NOTIFICATION;
   17c4c:	2003      	movs	r0, #3
   17c4e:	4770      	bx	lr
   17c50:	2301      	movs	r3, #1
	switch (op) {
   17c52:	4a0f      	ldr	r2, [pc, #60]	; (17c90 <att_op_get_type+0x6c>)
   17c54:	4083      	lsls	r3, r0
   17c56:	401a      	ands	r2, r3
   17c58:	b9c2      	cbnz	r2, 17c8c <att_op_get_type+0x68>
   17c5a:	4a0e      	ldr	r2, [pc, #56]	; (17c94 <att_op_get_type+0x70>)
   17c5c:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
   17c5e:	2a00      	cmp	r2, #0
   17c60:	bf14      	ite	ne
   17c62:	2001      	movne	r0, #1
   17c64:	2006      	moveq	r0, #6
   17c66:	4770      	bx	lr
	switch (op) {
   17c68:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   17c6c:	2b52      	cmp	r3, #82	; 0x52
   17c6e:	d105      	bne.n	17c7c <att_op_get_type+0x58>
		return ATT_COMMAND;
   17c70:	2000      	movs	r0, #0
}
   17c72:	4770      	bx	lr
		return ATT_REQUEST;
   17c74:	2001      	movs	r0, #1
   17c76:	4770      	bx	lr
		return ATT_INDICATION;
   17c78:	2005      	movs	r0, #5
   17c7a:	4770      	bx	lr
		return ATT_COMMAND;
   17c7c:	f010 0f40 	tst.w	r0, #64	; 0x40
   17c80:	bf0c      	ite	eq
   17c82:	2006      	moveq	r0, #6
   17c84:	2000      	movne	r0, #0
   17c86:	4770      	bx	lr
	switch (op) {
   17c88:	2004      	movs	r0, #4
   17c8a:	4770      	bx	lr
		return ATT_RESPONSE;
   17c8c:	2002      	movs	r0, #2
   17c8e:	4770      	bx	lr
   17c90:	028aaaaa 	.word	0x028aaaaa
   17c94:	01455554 	.word	0x01455554

00017c98 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   17c98:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   17c9a:	3804      	subs	r0, #4
   17c9c:	9001      	str	r0, [sp, #4]

	LOG_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   17c9e:	a901      	add	r1, sp, #4
   17ca0:	4802      	ldr	r0, [pc, #8]	; (17cac <bt_att_released+0x14>)
   17ca2:	f011 f8c9 	bl	28e38 <k_mem_slab_free>
}
   17ca6:	b003      	add	sp, #12
   17ca8:	f85d fb04 	ldr.w	pc, [sp], #4
   17cac:	2000cdc8 	.word	0x2000cdc8

00017cb0 <tx_meta_data_free>:
{
   17cb0:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(data);
   17cb2:	4604      	mov	r4, r0
   17cb4:	b948      	cbnz	r0, 17cca <tx_meta_data_free+0x1a>
   17cb6:	490a      	ldr	r1, [pc, #40]	; (17ce0 <tx_meta_data_free+0x30>)
   17cb8:	480a      	ldr	r0, [pc, #40]	; (17ce4 <tx_meta_data_free+0x34>)
   17cba:	23ae      	movs	r3, #174	; 0xae
   17cbc:	4a0a      	ldr	r2, [pc, #40]	; (17ce8 <tx_meta_data_free+0x38>)
   17cbe:	f017 fb81 	bl	2f3c4 <assert_print>
   17cc2:	21ae      	movs	r1, #174	; 0xae
   17cc4:	4808      	ldr	r0, [pc, #32]	; (17ce8 <tx_meta_data_free+0x38>)
   17cc6:	f017 fb76 	bl	2f3b6 <assert_post_action>
__ssp_bos_icheck3(memset, void *, int)
   17cca:	2100      	movs	r1, #0
   17ccc:	2214      	movs	r2, #20
   17cce:	f01e fc4b 	bl	36568 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   17cd2:	4621      	mov	r1, r4
}
   17cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
   17cd8:	4804      	ldr	r0, [pc, #16]	; (17cec <tx_meta_data_free+0x3c>)
   17cda:	f01e ba30 	b.w	3613e <k_queue_append>
   17cde:	bf00      	nop
   17ce0:	0003c72f 	.word	0x0003c72f
   17ce4:	00039995 	.word	0x00039995
   17ce8:	0003cbdd 	.word	0x0003cbdd
   17cec:	2000cfc0 	.word	0x2000cfc0

00017cf0 <find_type_cb>:
{
   17cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17cf4:	b093      	sub	sp, #76	; 0x4c
	struct bt_att_chan *chan = data->chan;
   17cf6:	f8d2 a000 	ldr.w	sl, [r2]
{
   17cfa:	af02      	add	r7, sp, #8
	struct bt_conn *conn = chan->chan.chan.conn;
   17cfc:	f8da 3004 	ldr.w	r3, [sl, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   17d00:	2500      	movs	r5, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   17d02:	607b      	str	r3, [r7, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   17d04:	f642 0301 	movw	r3, #10241	; 0x2801
{
   17d08:	4680      	mov	r8, r0
   17d0a:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   17d0c:	6800      	ldr	r0, [r0, #0]
   17d0e:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   17d12:	85fb      	strh	r3, [r7, #46]	; 0x2e
   17d14:	f107 012c 	add.w	r1, r7, #44	; 0x2c
{
   17d18:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   17d1a:	f019 f856 	bl	30dca <bt_uuid_cmp>
   17d1e:	2800      	cmp	r0, #0
   17d20:	d070      	beq.n	17e04 <find_type_cb+0x114>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   17d22:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   17d26:	f8d8 0000 	ldr.w	r0, [r8]
   17d2a:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   17d2e:	85fb      	strh	r3, [r7, #46]	; 0x2e
   17d30:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   17d34:	f019 f849 	bl	30dca <bt_uuid_cmp>
   17d38:	b138      	cbz	r0, 17d4a <find_type_cb+0x5a>
		if (data->group &&
   17d3a:	68a3      	ldr	r3, [r4, #8]
   17d3c:	b11b      	cbz	r3, 17d46 <find_type_cb+0x56>
   17d3e:	885a      	ldrh	r2, [r3, #2]
   17d40:	42b2      	cmp	r2, r6
   17d42:	d200      	bcs.n	17d46 <find_type_cb+0x56>
	data->group->end_handle = sys_cpu_to_le16(handle);
   17d44:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   17d46:	2001      	movs	r0, #1
   17d48:	e009      	b.n	17d5e <find_type_cb+0x6e>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   17d4a:	6861      	ldr	r1, [r4, #4]
   17d4c:	4608      	mov	r0, r1
   17d4e:	f019 fcdd 	bl	3170c <net_buf_frags_len>
   17d52:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   17d56:	1a1b      	subs	r3, r3, r0
   17d58:	2b03      	cmp	r3, #3
   17d5a:	d804      	bhi.n	17d66 <find_type_cb+0x76>
		return BT_GATT_ITER_STOP;
   17d5c:	2000      	movs	r0, #0
}
   17d5e:	3744      	adds	r7, #68	; 0x44
   17d60:	46bd      	mov	sp, r7
   17d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   17d66:	4608      	mov	r0, r1
   17d68:	f006 fa6c 	bl	1e244 <net_buf_frag_last>
   17d6c:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   17d6e:	6860      	ldr	r0, [r4, #4]
   17d70:	f019 fccc 	bl	3170c <net_buf_frags_len>
   17d74:	f8ba b02a 	ldrh.w	fp, [sl, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   17d78:	f105 090c 	add.w	r9, r5, #12
   17d7c:	ebab 0b00 	sub.w	fp, fp, r0
   17d80:	4648      	mov	r0, r9
   17d82:	f01b f9ef 	bl	33164 <net_buf_simple_tailroom>
   17d86:	4558      	cmp	r0, fp
   17d88:	d93f      	bls.n	17e0a <find_type_cb+0x11a>
   17d8a:	6860      	ldr	r0, [r4, #4]
   17d8c:	f019 fcbe 	bl	3170c <net_buf_frags_len>
   17d90:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   17d94:	1a18      	subs	r0, r3, r0
	if (!len) {
   17d96:	b970      	cbnz	r0, 17db6 <find_type_cb+0xc6>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   17d98:	6863      	ldr	r3, [r4, #4]
   17d9a:	7a98      	ldrb	r0, [r3, #10]
   17d9c:	f006 f8a8 	bl	1def0 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   17da0:	2200      	movs	r2, #0
   17da2:	2300      	movs	r3, #0
   17da4:	f01b f9bd 	bl	33122 <net_buf_alloc_fixed>
		if (!frag) {
   17da8:	4605      	mov	r5, r0
   17daa:	2800      	cmp	r0, #0
   17dac:	d0d6      	beq.n	17d5c <find_type_cb+0x6c>
		net_buf_frag_add(data->buf, frag);
   17dae:	4601      	mov	r1, r0
   17db0:	6860      	ldr	r0, [r4, #4]
   17db2:	f006 fa8d 	bl	1e2d0 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   17db6:	2300      	movs	r3, #0
   17db8:	9300      	str	r3, [sp, #0]
   17dba:	4641      	mov	r1, r8
   17dbc:	f8d8 a004 	ldr.w	sl, [r8, #4]
   17dc0:	2310      	movs	r3, #16
   17dc2:	6878      	ldr	r0, [r7, #4]
   17dc4:	f107 0208 	add.w	r2, r7, #8
   17dc8:	47d0      	blx	sl
	if (read < 0) {
   17dca:	f1b0 0800 	subs.w	r8, r0, #0
   17dce:	db19      	blt.n	17e04 <find_type_cb+0x114>
	if (read != data->value_len) {
   17dd0:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   17dd2:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   17dd4:	4542      	cmp	r2, r8
   17dd6:	d03f      	beq.n	17e58 <find_type_cb+0x168>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   17dd8:	4601      	mov	r1, r0
   17dda:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   17dde:	f019 f822 	bl	30e26 <bt_uuid_create>
   17de2:	b9b0      	cbnz	r0, 17e12 <find_type_cb+0x122>
			LOG_WRN("Unable to create UUID: size %u", data->value_len);
   17de4:	466d      	mov	r5, sp
   17de6:	b088      	sub	sp, #32
   17de8:	7c23      	ldrb	r3, [r4, #16]
   17dea:	aa02      	add	r2, sp, #8
   17dec:	491d      	ldr	r1, [pc, #116]	; (17e64 <find_type_cb+0x174>)
   17dee:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_WRN("Unable to create UUID: size %d", read);
   17df2:	2303      	movs	r3, #3
   17df4:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   17df8:	481b      	ldr	r0, [pc, #108]	; (17e68 <find_type_cb+0x178>)
   17dfa:	f842 3f10 	str.w	r3, [r2, #16]!
   17dfe:	f019 fd8d 	bl	3191c <z_log_msg_static_create.constprop.0>
   17e02:	46ad      	mov	sp, r5
	data->group = NULL;
   17e04:	2300      	movs	r3, #0
   17e06:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   17e08:	e79d      	b.n	17d46 <find_type_cb+0x56>
	return net_buf_simple_tailroom(&buf->b);
   17e0a:	4648      	mov	r0, r9
   17e0c:	f01b f9aa 	bl	33164 <net_buf_simple_tailroom>
   17e10:	e7c1      	b.n	17d96 <find_type_cb+0xa6>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   17e12:	fa5f f288 	uxtb.w	r2, r8
   17e16:	f107 0108 	add.w	r1, r7, #8
   17e1a:	f107 0018 	add.w	r0, r7, #24
   17e1e:	f019 f802 	bl	30e26 <bt_uuid_create>
   17e22:	b930      	cbnz	r0, 17e32 <find_type_cb+0x142>
			LOG_WRN("Unable to create UUID: size %d", read);
   17e24:	466d      	mov	r5, sp
   17e26:	b088      	sub	sp, #32
   17e28:	aa02      	add	r2, sp, #8
   17e2a:	4b10      	ldr	r3, [pc, #64]	; (17e6c <find_type_cb+0x17c>)
   17e2c:	e9c2 3805 	strd	r3, r8, [r2, #20]
   17e30:	e7df      	b.n	17df2 <find_type_cb+0x102>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   17e32:	f107 0118 	add.w	r1, r7, #24
   17e36:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   17e3a:	f018 ffc6 	bl	30dca <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   17e3e:	2800      	cmp	r0, #0
   17e40:	d1e0      	bne.n	17e04 <find_type_cb+0x114>
	data->err = 0x00;
   17e42:	2300      	movs	r3, #0
	return net_buf_simple_add(&buf->b, len);
   17e44:	2104      	movs	r1, #4
   17e46:	7463      	strb	r3, [r4, #17]
   17e48:	f105 000c 	add.w	r0, r5, #12
   17e4c:	f006 fb24 	bl	1e498 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   17e50:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   17e52:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   17e54:	68a3      	ldr	r3, [r4, #8]
   17e56:	e775      	b.n	17d44 <find_type_cb+0x54>
	} else if (memcmp(data->value, uuid, read)) {
   17e58:	f107 0108 	add.w	r1, r7, #8
   17e5c:	f01e fb54 	bl	36508 <memcmp>
   17e60:	e7ed      	b.n	17e3e <find_type_cb+0x14e>
   17e62:	bf00      	nop
   17e64:	0003cc0c 	.word	0x0003cc0c
   17e68:	000378b0 	.word	0x000378b0
   17e6c:	0003cc2b 	.word	0x0003cc2b

00017e70 <chan_send>:
{
   17e70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17e74:	4606      	mov	r6, r0
   17e76:	460c      	mov	r4, r1
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   17e78:	f8d1 9018 	ldr.w	r9, [r1, #24]
	hdr = (void *)buf->data;
   17e7c:	68cb      	ldr	r3, [r1, #12]
{
   17e7e:	b089      	sub	sp, #36	; 0x24
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   17e80:	2102      	movs	r1, #2
   17e82:	3034      	adds	r0, #52	; 0x34
   17e84:	f019 fc5c 	bl	31740 <atomic_test_bit>
   17e88:	b970      	cbnz	r0, 17ea8 <chan_send+0x38>
		return -EINVAL;
   17e8a:	f06f 0515 	mvn.w	r5, #21
		LOG_ERR("ATT channel not connected");
   17e8e:	4b35      	ldr	r3, [pc, #212]	; (17f64 <chan_send+0xf4>)
   17e90:	4835      	ldr	r0, [pc, #212]	; (17f68 <chan_send+0xf8>)
   17e92:	e9cd 1306 	strd	r1, r3, [sp, #24]
   17e96:	aa06      	add	r2, sp, #24
   17e98:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17e9c:	f019 fd3e 	bl	3191c <z_log_msg_static_create.constprop.0>
}
   17ea0:	4628      	mov	r0, r5
   17ea2:	b009      	add	sp, #36	; 0x24
   17ea4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   17ea8:	781b      	ldrb	r3, [r3, #0]
   17eaa:	2bd2      	cmp	r3, #210	; 0xd2
   17eac:	d117      	bne.n	17ede <chan_send+0x6e>
		err = bt_smp_sign(chan->att->conn, buf);
   17eae:	6833      	ldr	r3, [r6, #0]
   17eb0:	4621      	mov	r1, r4
   17eb2:	6818      	ldr	r0, [r3, #0]
   17eb4:	f01a ffa5 	bl	32e02 <bt_smp_sign>
		if (err) {
   17eb8:	4605      	mov	r5, r0
   17eba:	b180      	cbz	r0, 17ede <chan_send+0x6e>
			LOG_ERR("Error signing data");
   17ebc:	4b2b      	ldr	r3, [pc, #172]	; (17f6c <chan_send+0xfc>)
   17ebe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17ec2:	9307      	str	r3, [sp, #28]
   17ec4:	2302      	movs	r3, #2
   17ec6:	aa06      	add	r2, sp, #24
   17ec8:	4827      	ldr	r0, [pc, #156]	; (17f68 <chan_send+0xf8>)
   17eca:	9306      	str	r3, [sp, #24]
   17ecc:	f019 fd26 	bl	3191c <z_log_msg_static_create.constprop.0>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   17ed0:	69a0      	ldr	r0, [r4, #24]
   17ed2:	f7ff feed 	bl	17cb0 <tx_meta_data_free>
			net_buf_unref(buf);
   17ed6:	4620      	mov	r0, r4
   17ed8:	f006 f958 	bl	1e18c <net_buf_unref>
			return err;
   17edc:	e7e0      	b.n	17ea0 <chan_send+0x30>
	state->offset = net_buf_simple_headroom(buf);
   17ede:	f104 000c 	add.w	r0, r4, #12
   17ee2:	f01b f93b 	bl	3315c <net_buf_simple_headroom>
	state->len = buf->len;
   17ee6:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	data->att_chan = chan;
   17eea:	f8c9 6000 	str.w	r6, [r9]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   17eee:	6833      	ldr	r3, [r6, #0]
	state->offset = net_buf_simple_headroom(buf);
   17ef0:	4607      	mov	r7, r0
   17ef2:	681e      	ldr	r6, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   17ef4:	68e3      	ldr	r3, [r4, #12]
   17ef6:	7818      	ldrb	r0, [r3, #0]
   17ef8:	f7ff fe94 	bl	17c24 <att_op_get_type>
   17efc:	2805      	cmp	r0, #5
   17efe:	4605      	mov	r5, r0
	switch (op_type) {
   17f00:	d820      	bhi.n	17f44 <chan_send+0xd4>
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   17f02:	4b1b      	ldr	r3, [pc, #108]	; (17f70 <chan_send+0x100>)
   17f04:	4622      	mov	r2, r4
   17f06:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   17f0a:	2104      	movs	r1, #4
   17f0c:	4630      	mov	r0, r6
   17f0e:	f8cd 9000 	str.w	r9, [sp]
   17f12:	f019 fba7 	bl	31664 <bt_l2cap_send_cb>
	if (err) {
   17f16:	4605      	mov	r5, r0
   17f18:	2800      	cmp	r0, #0
   17f1a:	d0c1      	beq.n	17ea0 <chan_send+0x30>
		if (err == -ENOBUFS) {
   17f1c:	f110 0f69 	cmn.w	r0, #105	; 0x69
   17f20:	d109      	bne.n	17f36 <chan_send+0xc6>
			LOG_ERR("Ran out of TX buffers or contexts.");
   17f22:	4b14      	ldr	r3, [pc, #80]	; (17f74 <chan_send+0x104>)
   17f24:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17f28:	9307      	str	r3, [sp, #28]
   17f2a:	2302      	movs	r3, #2
   17f2c:	480e      	ldr	r0, [pc, #56]	; (17f68 <chan_send+0xf8>)
   17f2e:	aa06      	add	r2, sp, #24
   17f30:	9306      	str	r3, [sp, #24]
   17f32:	f019 fcf3 	bl	3191c <z_log_msg_static_create.constprop.0>
	buf->data = buf->__buf + state->offset;
   17f36:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   17f38:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   17f3c:	fa13 f787 	uxtah	r7, r3, r7
   17f40:	60e7      	str	r7, [r4, #12]
}
   17f42:	e7ad      	b.n	17ea0 <chan_send+0x30>
		__ASSERT(false, "Unknown op type 0x%02X", op_type);
   17f44:	f44f 7319 	mov.w	r3, #612	; 0x264
   17f48:	4a0b      	ldr	r2, [pc, #44]	; (17f78 <chan_send+0x108>)
   17f4a:	490c      	ldr	r1, [pc, #48]	; (17f7c <chan_send+0x10c>)
   17f4c:	480c      	ldr	r0, [pc, #48]	; (17f80 <chan_send+0x110>)
   17f4e:	f017 fa39 	bl	2f3c4 <assert_print>
   17f52:	4629      	mov	r1, r5
   17f54:	480b      	ldr	r0, [pc, #44]	; (17f84 <chan_send+0x114>)
   17f56:	f017 fa35 	bl	2f3c4 <assert_print>
   17f5a:	f44f 7119 	mov.w	r1, #612	; 0x264
   17f5e:	4806      	ldr	r0, [pc, #24]	; (17f78 <chan_send+0x108>)
   17f60:	f017 fa29 	bl	2f3b6 <assert_post_action>
   17f64:	0003cc4a 	.word	0x0003cc4a
   17f68:	000378b0 	.word	0x000378b0
   17f6c:	0003cc64 	.word	0x0003cc64
   17f70:	0003812c 	.word	0x0003812c
   17f74:	0003cc90 	.word	0x0003cc90
   17f78:	0003cbdd 	.word	0x0003cbdd
   17f7c:	0003ea9e 	.word	0x0003ea9e
   17f80:	00039995 	.word	0x00039995
   17f84:	0003cc77 	.word	0x0003cc77

00017f88 <bt_att_chan_req_send>:
{
   17f88:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan);
   17f8a:	b958      	cbnz	r0, 17fa4 <bt_att_chan_req_send+0x1c>
   17f8c:	4919      	ldr	r1, [pc, #100]	; (17ff4 <bt_att_chan_req_send+0x6c>)
   17f8e:	f240 3325 	movw	r3, #805	; 0x325
   17f92:	4a19      	ldr	r2, [pc, #100]	; (17ff8 <bt_att_chan_req_send+0x70>)
   17f94:	4819      	ldr	r0, [pc, #100]	; (17ffc <bt_att_chan_req_send+0x74>)
   17f96:	f017 fa15 	bl	2f3c4 <assert_print>
   17f9a:	f240 3125 	movw	r1, #805	; 0x325
	__ASSERT_NO_MSG(req);
   17f9e:	4816      	ldr	r0, [pc, #88]	; (17ff8 <bt_att_chan_req_send+0x70>)
   17fa0:	f017 fa09 	bl	2f3b6 <assert_post_action>
   17fa4:	b949      	cbnz	r1, 17fba <bt_att_chan_req_send+0x32>
   17fa6:	4916      	ldr	r1, [pc, #88]	; (18000 <bt_att_chan_req_send+0x78>)
   17fa8:	f240 3326 	movw	r3, #806	; 0x326
   17fac:	4a12      	ldr	r2, [pc, #72]	; (17ff8 <bt_att_chan_req_send+0x70>)
   17fae:	4813      	ldr	r0, [pc, #76]	; (17ffc <bt_att_chan_req_send+0x74>)
   17fb0:	f017 fa08 	bl	2f3c4 <assert_print>
   17fb4:	f240 3126 	movw	r1, #806	; 0x326
   17fb8:	e7f1      	b.n	17f9e <bt_att_chan_req_send+0x16>
	__ASSERT_NO_MSG(req->func);
   17fba:	684a      	ldr	r2, [r1, #4]
   17fbc:	b94a      	cbnz	r2, 17fd2 <bt_att_chan_req_send+0x4a>
   17fbe:	4911      	ldr	r1, [pc, #68]	; (18004 <bt_att_chan_req_send+0x7c>)
   17fc0:	f240 3327 	movw	r3, #807	; 0x327
   17fc4:	4a0c      	ldr	r2, [pc, #48]	; (17ff8 <bt_att_chan_req_send+0x70>)
   17fc6:	480d      	ldr	r0, [pc, #52]	; (17ffc <bt_att_chan_req_send+0x74>)
   17fc8:	f017 f9fc 	bl	2f3c4 <assert_print>
   17fcc:	f240 3127 	movw	r1, #807	; 0x327
   17fd0:	e7e5      	b.n	17f9e <bt_att_chan_req_send+0x16>
	__ASSERT_NO_MSG(!chan->req);
   17fd2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   17fd4:	b14b      	cbz	r3, 17fea <bt_att_chan_req_send+0x62>
   17fd6:	490c      	ldr	r1, [pc, #48]	; (18008 <bt_att_chan_req_send+0x80>)
   17fd8:	f44f 734a 	mov.w	r3, #808	; 0x328
   17fdc:	4a06      	ldr	r2, [pc, #24]	; (17ff8 <bt_att_chan_req_send+0x70>)
   17fde:	4807      	ldr	r0, [pc, #28]	; (17ffc <bt_att_chan_req_send+0x74>)
   17fe0:	f017 f9f0 	bl	2f3c4 <assert_print>
   17fe4:	f44f 714a 	mov.w	r1, #808	; 0x328
   17fe8:	e7d9      	b.n	17f9e <bt_att_chan_req_send+0x16>
}
   17fea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return chan_req_send(chan, req);
   17fee:	f019 bc98 	b.w	31922 <chan_req_send>
   17ff2:	bf00      	nop
   17ff4:	0003ccb3 	.word	0x0003ccb3
   17ff8:	0003cbdd 	.word	0x0003cbdd
   17ffc:	00039995 	.word	0x00039995
   18000:	0003cb51 	.word	0x0003cb51
   18004:	0003ccb8 	.word	0x0003ccb8
   18008:	0003ccc2 	.word	0x0003ccc2

0001800c <att_get>:
{
   1800c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1800e:	7b43      	ldrb	r3, [r0, #13]
   18010:	2b07      	cmp	r3, #7
   18012:	d00d      	beq.n	18030 <att_get+0x24>
		LOG_WRN("Not connected");
   18014:	4b13      	ldr	r3, [pc, #76]	; (18064 <att_get+0x58>)
   18016:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1801a:	9305      	str	r3, [sp, #20]
   1801c:	2302      	movs	r3, #2
   1801e:	aa04      	add	r2, sp, #16
   18020:	9304      	str	r3, [sp, #16]
		LOG_ERR("Unable to find ATT channel");
   18022:	4811      	ldr	r0, [pc, #68]	; (18068 <att_get+0x5c>)
   18024:	f019 fc7a 	bl	3191c <z_log_msg_static_create.constprop.0>
		return NULL;
   18028:	2000      	movs	r0, #0
}
   1802a:	b007      	add	sp, #28
   1802c:	f85d fb04 	ldr.w	pc, [sp], #4
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   18030:	2104      	movs	r1, #4
   18032:	f019 fb57 	bl	316e4 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   18036:	4603      	mov	r3, r0
   18038:	b938      	cbnz	r0, 1804a <att_get+0x3e>
		LOG_ERR("Unable to find ATT channel");
   1803a:	4b0c      	ldr	r3, [pc, #48]	; (1806c <att_get+0x60>)
   1803c:	9305      	str	r3, [sp, #20]
   1803e:	2302      	movs	r3, #2
   18040:	9304      	str	r3, [sp, #16]
   18042:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18046:	aa04      	add	r2, sp, #16
   18048:	e7eb      	b.n	18022 <att_get+0x16>
	if (!atomic_test_bit(att_chan->flags, ATT_CONNECTED)) {
   1804a:	2102      	movs	r1, #2
   1804c:	3030      	adds	r0, #48	; 0x30
   1804e:	f019 fb77 	bl	31740 <atomic_test_bit>
   18052:	b918      	cbnz	r0, 1805c <att_get+0x50>
		LOG_ERR("ATT channel not connected");
   18054:	4b06      	ldr	r3, [pc, #24]	; (18070 <att_get+0x64>)
   18056:	e9cd 1304 	strd	r1, r3, [sp, #16]
   1805a:	e7f2      	b.n	18042 <att_get+0x36>
	return att_chan->att;
   1805c:	f853 0c04 	ldr.w	r0, [r3, #-4]
   18060:	e7e3      	b.n	1802a <att_get+0x1e>
   18062:	bf00      	nop
   18064:	0003cb55 	.word	0x0003cb55
   18068:	000378b0 	.word	0x000378b0
   1806c:	0003cccd 	.word	0x0003cccd
   18070:	0003cc4a 	.word	0x0003cc4a

00018074 <read_group_cb>:
{
   18074:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   18078:	f04f 0800 	mov.w	r8, #0
   1807c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
{
   18080:	4605      	mov	r5, r0
   18082:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   18084:	6800      	ldr	r0, [r0, #0]
   18086:	a902      	add	r1, sp, #8
{
   18088:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1808a:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1808c:	f88d 8008 	strb.w	r8, [sp, #8]
   18090:	f8ad 300a 	strh.w	r3, [sp, #10]
   18094:	f018 fe99 	bl	30dca <bt_uuid_cmp>
   18098:	b1a0      	cbz	r0, 180c4 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1809a:	f642 0301 	movw	r3, #10241	; 0x2801
   1809e:	6828      	ldr	r0, [r5, #0]
   180a0:	a903      	add	r1, sp, #12
   180a2:	f88d 800c 	strb.w	r8, [sp, #12]
   180a6:	f8ad 300e 	strh.w	r3, [sp, #14]
   180aa:	f018 fe8e 	bl	30dca <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   180ae:	b148      	cbz	r0, 180c4 <read_group_cb+0x50>
		if (data->group &&
   180b0:	6923      	ldr	r3, [r4, #16]
   180b2:	b11b      	cbz	r3, 180bc <read_group_cb+0x48>
   180b4:	885a      	ldrh	r2, [r3, #2]
   180b6:	42b2      	cmp	r2, r6
   180b8:	d200      	bcs.n	180bc <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   180ba:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   180bc:	2001      	movs	r0, #1
}
   180be:	b004      	add	sp, #16
   180c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   180c4:	6861      	ldr	r1, [r4, #4]
   180c6:	6828      	ldr	r0, [r5, #0]
   180c8:	f018 fe7f 	bl	30dca <bt_uuid_cmp>
   180cc:	b110      	cbz	r0, 180d4 <read_group_cb+0x60>
		data->group = NULL;
   180ce:	2300      	movs	r3, #0
   180d0:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   180d2:	e7f3      	b.n	180bc <read_group_cb+0x48>
	if (data->rsp->len &&
   180d4:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   180d6:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   180d8:	781a      	ldrb	r2, [r3, #0]
   180da:	b132      	cbz	r2, 180ea <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   180dc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   180de:	8a01      	ldrh	r1, [r0, #16]
   180e0:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   180e2:	4293      	cmp	r3, r2
   180e4:	da01      	bge.n	180ea <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   180e6:	2000      	movs	r0, #0
   180e8:	e7e9      	b.n	180be <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   180ea:	2104      	movs	r1, #4
   180ec:	300c      	adds	r0, #12
   180ee:	f006 f9d3 	bl	1e498 <net_buf_simple_add>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   180f2:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   180f4:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   180f6:	6923      	ldr	r3, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   180f8:	4629      	mov	r1, r5
	data->group->end_handle = sys_cpu_to_le16(handle);
   180fa:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   180fc:	4b07      	ldr	r3, [pc, #28]	; (1811c <read_group_cb+0xa8>)
   180fe:	9401      	str	r4, [sp, #4]
   18100:	9300      	str	r3, [sp, #0]
   18102:	4638      	mov	r0, r7
   18104:	2300      	movs	r3, #0
   18106:	68a2      	ldr	r2, [r4, #8]
   18108:	f019 fc4a 	bl	319a0 <att_chan_read>
	if (read < 0) {
   1810c:	2800      	cmp	r0, #0
   1810e:	dbea      	blt.n	180e6 <read_group_cb+0x72>
	if (!data->group) {
   18110:	6920      	ldr	r0, [r4, #16]
   18112:	3800      	subs	r0, #0
   18114:	bf18      	it	ne
   18116:	2001      	movne	r0, #1
   18118:	e7d1      	b.n	180be <read_group_cb+0x4a>
   1811a:	bf00      	nop
   1811c:	0003185d 	.word	0x0003185d

00018120 <read_type_cb>:
{
   18120:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   18124:	6817      	ldr	r7, [r2, #0]
{
   18126:	4605      	mov	r5, r0
   18128:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1812a:	6800      	ldr	r0, [r0, #0]
   1812c:	6851      	ldr	r1, [r2, #4]
{
   1812e:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   18130:	687e      	ldr	r6, [r7, #4]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   18132:	f018 fe4a 	bl	30dca <bt_uuid_cmp>
   18136:	4681      	mov	r9, r0
   18138:	2800      	cmp	r0, #0
   1813a:	d13c      	bne.n	181b6 <read_type_cb+0x96>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1813c:	4630      	mov	r0, r6
   1813e:	2295      	movs	r2, #149	; 0x95
   18140:	4629      	mov	r1, r5
   18142:	f01a fad0 	bl	326e6 <bt_gatt_check_perm>
   18146:	4606      	mov	r6, r0
   18148:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1814a:	b140      	cbz	r0, 1815e <read_type_cb+0x3e>
		if (data->rsp->len) {
   1814c:	68e3      	ldr	r3, [r4, #12]
   1814e:	781b      	ldrb	r3, [r3, #0]
   18150:	b10b      	cbz	r3, 18156 <read_type_cb+0x36>
			data->err = 0x00;
   18152:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
   18156:	2000      	movs	r0, #0
}
   18158:	b003      	add	sp, #12
   1815a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1815e:	68a0      	ldr	r0, [r4, #8]
   18160:	f006 f870 	bl	1e244 <net_buf_frag_last>
   18164:	2102      	movs	r1, #2
   18166:	300c      	adds	r0, #12
   18168:	f006 f996 	bl	1e498 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1816c:	4b13      	ldr	r3, [pc, #76]	; (181bc <read_type_cb+0x9c>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1816e:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   18170:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   18174:	9300      	str	r3, [sp, #0]
   18176:	9401      	str	r4, [sp, #4]
   18178:	4633      	mov	r3, r6
   1817a:	4629      	mov	r1, r5
   1817c:	4638      	mov	r0, r7
   1817e:	68a2      	ldr	r2, [r4, #8]
   18180:	f019 fc0e 	bl	319a0 <att_chan_read>
	if (read < 0) {
   18184:	2800      	cmp	r0, #0
   18186:	da07      	bge.n	18198 <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
   18188:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   1818c:	bf32      	itee	cc
   1818e:	200e      	movcc	r0, #14
		return -err;
   18190:	4240      	negcs	r0, r0
   18192:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(read);
   18194:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   18196:	e7de      	b.n	18156 <read_type_cb+0x36>
	if (!data->item) {
   18198:	6923      	ldr	r3, [r4, #16]
   1819a:	2b00      	cmp	r3, #0
   1819c:	d0db      	beq.n	18156 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1819e:	68a0      	ldr	r0, [r4, #8]
   181a0:	f019 fab4 	bl	3170c <net_buf_frags_len>
   181a4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   181a6:	1a18      	subs	r0, r3, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   181a8:	68e3      	ldr	r3, [r4, #12]
   181aa:	781b      	ldrb	r3, [r3, #0]
   181ac:	4298      	cmp	r0, r3
   181ae:	bf94      	ite	ls
   181b0:	2000      	movls	r0, #0
   181b2:	2001      	movhi	r0, #1
   181b4:	e7d0      	b.n	18158 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   181b6:	2001      	movs	r0, #1
   181b8:	e7ce      	b.n	18158 <read_type_cb+0x38>
   181ba:	bf00      	nop
   181bc:	0003171d 	.word	0x0003171d

000181c0 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   181c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   181c4:	b082      	sub	sp, #8
   181c6:	af00      	add	r7, sp, #0
   181c8:	4604      	mov	r4, r0
   181ca:	460e      	mov	r6, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   181cc:	2200      	movs	r2, #0
   181ce:	2300      	movs	r3, #0
   181d0:	4639      	mov	r1, r7
   181d2:	483a      	ldr	r0, [pc, #232]	; (182bc <bt_att_accept+0xfc>)
   181d4:	f010 fdc6 	bl	28d64 <k_mem_slab_alloc>
   181d8:	4605      	mov	r5, r0
   181da:	b1a8      	cbz	r0, 18208 <bt_att_accept+0x48>
		LOG_ERR("No available ATT context for conn %p", conn);
   181dc:	466d      	mov	r5, sp
   181de:	b088      	sub	sp, #32
   181e0:	466a      	mov	r2, sp
   181e2:	4b37      	ldr	r3, [pc, #220]	; (182c0 <bt_att_accept+0x100>)
   181e4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   181e8:	e9c2 3405 	strd	r3, r4, [r2, #20]
   181ec:	2303      	movs	r3, #3
   181ee:	4835      	ldr	r0, [pc, #212]	; (182c4 <bt_att_accept+0x104>)
   181f0:	f842 3f10 	str.w	r3, [r2, #16]!
   181f4:	f019 fb92 	bl	3191c <z_log_msg_static_create.constprop.0>
   181f8:	46ad      	mov	sp, r5
		return -ENOMEM;
   181fa:	f06f 050b 	mvn.w	r5, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   181fe:	4628      	mov	r0, r5
   18200:	3708      	adds	r7, #8
   18202:	46bd      	mov	sp, r7
   18204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_z_current_get();
   18208:	f013 f8d4 	bl	2b3b4 <z_impl_z_current_get>
	att_handle_rsp_thread = k_current_get();
   1820c:	4b2e      	ldr	r3, [pc, #184]	; (182c8 <bt_att_accept+0x108>)
	(void)memset(att, 0, sizeof(*att));
   1820e:	f8d7 8000 	ldr.w	r8, [r7]
   18212:	4629      	mov	r1, r5
	att_handle_rsp_thread = k_current_get();
   18214:	6018      	str	r0, [r3, #0]
   18216:	222c      	movs	r2, #44	; 0x2c
   18218:	f108 0004 	add.w	r0, r8, #4
   1821c:	f01e f9a4 	bl	36568 <memset>
	att->conn = conn;
   18220:	f8c8 4000 	str.w	r4, [r8]
	sys_slist_init(&att->reqs);
   18224:	683c      	ldr	r4, [r7, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   18226:	2200      	movs	r2, #0
	list->tail = NULL;
   18228:	e9c4 5501 	strd	r5, r5, [r4, #4]
   1822c:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   18230:	2300      	movs	r3, #0
   18232:	4826      	ldr	r0, [pc, #152]	; (182cc <bt_att_accept+0x10c>)
   18234:	1d39      	adds	r1, r7, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   18236:	607d      	str	r5, [r7, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   18238:	f010 fd94 	bl	28d64 <k_mem_slab_alloc>
   1823c:	4605      	mov	r5, r0
   1823e:	b180      	cbz	r0, 18262 <bt_att_accept+0xa2>
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   18240:	6823      	ldr	r3, [r4, #0]
   18242:	466c      	mov	r4, sp
   18244:	b088      	sub	sp, #32
   18246:	466a      	mov	r2, sp
   18248:	4921      	ldr	r1, [pc, #132]	; (182d0 <bt_att_accept+0x110>)
   1824a:	481e      	ldr	r0, [pc, #120]	; (182c4 <bt_att_accept+0x104>)
   1824c:	e9c2 1305 	strd	r1, r3, [r2, #20]
   18250:	2303      	movs	r3, #3
   18252:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   18256:	f842 3f10 	str.w	r3, [r2, #16]!
   1825a:	f019 fb5f 	bl	3191c <z_log_msg_static_create.constprop.0>
   1825e:	46a5      	mov	sp, r4
	if (!chan) {
   18260:	e7cb      	b.n	181fa <bt_att_accept+0x3a>
	(void)memset(chan, 0, sizeof(*chan));
   18262:	687b      	ldr	r3, [r7, #4]
   18264:	4601      	mov	r1, r0
   18266:	2290      	movs	r2, #144	; 0x90
   18268:	4618      	mov	r0, r3
   1826a:	f01e f97d 	bl	36568 <memset>
	chan->chan.chan.ops = &ops;
   1826e:	4a19      	ldr	r2, [pc, #100]	; (182d4 <bt_att_accept+0x114>)
   18270:	6082      	str	r2, [r0, #8]
	z_impl_k_queue_init(queue);
   18272:	303c      	adds	r0, #60	; 0x3c
   18274:	f01d ff56 	bl	36124 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   18278:	687b      	ldr	r3, [r7, #4]
   1827a:	3334      	adds	r3, #52	; 0x34
   1827c:	e8d3 2fef 	ldaex	r2, [r3]
   18280:	e8c3 5fe1 	stlex	r1, r5, [r3]
   18284:	2900      	cmp	r1, #0
   18286:	d1f9      	bne.n	1827c <bt_att_accept+0xbc>
	chan->att = att;
   18288:	687b      	ldr	r3, [r7, #4]
   1828a:	601c      	str	r4, [r3, #0]
	if (sys_slist_is_empty(&att->chans)) {
   1828c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	att_chan_attach(att, chan);
   1828e:	f8d7 8004 	ldr.w	r8, [r7, #4]
	if (sys_slist_is_empty(&att->chans)) {
   18292:	b91b      	cbnz	r3, 1829c <bt_att_accept+0xdc>
   18294:	f104 000c 	add.w	r0, r4, #12
   18298:	f01d ff44 	bl	36124 <z_impl_k_queue_init>
	return list->head;
   1829c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   1829e:	f108 0388 	add.w	r3, r8, #136	; 0x88
	parent->next = child;
   182a2:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
Z_GENLIST_PREPEND(slist, snode)
   182a6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	list->head = node;
   182a8:	62a3      	str	r3, [r4, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   182aa:	b902      	cbnz	r2, 182ae <bt_att_accept+0xee>
	list->tail = node;
   182ac:	62e3      	str	r3, [r4, #44]	; 0x2c
	return chan;
   182ae:	687b      	ldr	r3, [r7, #4]
	if (!chan) {
   182b0:	2b00      	cmp	r3, #0
   182b2:	d0a2      	beq.n	181fa <bt_att_accept+0x3a>
	*ch = &chan->chan.chan;
   182b4:	3304      	adds	r3, #4
   182b6:	6033      	str	r3, [r6, #0]
	return 0;
   182b8:	e7a1      	b.n	181fe <bt_att_accept+0x3e>
   182ba:	bf00      	nop
   182bc:	2000cda8 	.word	0x2000cda8
   182c0:	0003cce8 	.word	0x0003cce8
   182c4:	000378b0 	.word	0x000378b0
   182c8:	2000e704 	.word	0x2000e704
   182cc:	2000cdc8 	.word	0x2000cdc8
   182d0:	0003cd0d 	.word	0x0003cd0d
   182d4:	2000c894 	.word	0x2000c894

000182d8 <bt_att_connected>:
{
   182d8:	b510      	push	{r4, lr}
   182da:	4604      	mov	r4, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   182dc:	f100 0330 	add.w	r3, r0, #48	; 0x30
   182e0:	e8d3 1fef 	ldaex	r1, [r3]
   182e4:	f041 0104 	orr.w	r1, r1, #4
   182e8:	e8c3 1fe2 	stlex	r2, r1, [r3]
   182ec:	2a00      	cmp	r2, #0
   182ee:	d1f7      	bne.n	182e0 <bt_att_connected+0x8>
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   182f0:	2317      	movs	r3, #23
	att_chan_mtu_updated(att_chan);
   182f2:	1f20      	subs	r0, r4, #4
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   182f4:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   182f6:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   182f8:	f019 fa41 	bl	3177e <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   182fc:	f104 0054 	add.w	r0, r4, #84	; 0x54
   18300:	4903      	ldr	r1, [pc, #12]	; (18310 <bt_att_connected+0x38>)
   18302:	f011 fdc7 	bl	29e94 <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   18306:	6820      	ldr	r0, [r4, #0]
}
   18308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   1830c:	f003 ba88 	b.w	1b820 <bt_gatt_connected>
   18310:	00018df9 	.word	0x00018df9

00018314 <bt_att_chan_create_pdu>:
{
   18314:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   18318:	b086      	sub	sp, #24
   1831a:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1831c:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   1831e:	1c53      	adds	r3, r2, #1
   18320:	428b      	cmp	r3, r1
{
   18322:	af00      	add	r7, sp, #0
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   18324:	d915      	bls.n	18352 <bt_att_chan_create_pdu+0x3e>
		LOG_WRN("ATT MTU exceeded, max %u, wanted %zu", chan->chan.tx.mtu,
   18326:	466c      	mov	r4, sp
   18328:	b088      	sub	sp, #32
   1832a:	466a      	mov	r2, sp
   1832c:	482d      	ldr	r0, [pc, #180]	; (183e4 <bt_att_chan_create_pdu+0xd0>)
   1832e:	61d3      	str	r3, [r2, #28]
   18330:	2304      	movs	r3, #4
   18332:	e9c2 0105 	strd	r0, r1, [r2, #20]
   18336:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1833a:	f842 3f10 	str.w	r3, [r2, #16]!
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   1833e:	482a      	ldr	r0, [pc, #168]	; (183e8 <bt_att_chan_create_pdu+0xd4>)
   18340:	f019 faec 	bl	3191c <z_log_msg_static_create.constprop.0>
   18344:	46a5      	mov	sp, r4
		return NULL;
   18346:	2400      	movs	r4, #0
}
   18348:	4620      	mov	r0, r4
   1834a:	3718      	adds	r7, #24
   1834c:	46bd      	mov	sp, r7
   1834e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	switch (att_op_get_type(op)) {
   18352:	4628      	mov	r0, r5
   18354:	f7ff fc66 	bl	17c24 <att_op_get_type>
   18358:	2802      	cmp	r0, #2
   1835a:	d019      	beq.n	18390 <bt_att_chan_create_pdu+0x7c>
   1835c:	2804      	cmp	r0, #4
   1835e:	d017      	beq.n	18390 <bt_att_chan_create_pdu+0x7c>
		timeout = K_FOREVER;
   18360:	f04f 38ff 	mov.w	r8, #4294967295
   18364:	f04f 39ff 	mov.w	r9, #4294967295
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   18368:	2100      	movs	r1, #0
   1836a:	4642      	mov	r2, r8
   1836c:	464b      	mov	r3, r9
   1836e:	4608      	mov	r0, r1
   18370:	f019 f975 	bl	3165e <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   18374:	4604      	mov	r4, r0
   18376:	b980      	cbnz	r0, 1839a <bt_att_chan_create_pdu+0x86>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   18378:	466c      	mov	r4, sp
   1837a:	b088      	sub	sp, #32
   1837c:	466a      	mov	r2, sp
   1837e:	4b1b      	ldr	r3, [pc, #108]	; (183ec <bt_att_chan_create_pdu+0xd8>)
   18380:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18384:	e9c2 3505 	strd	r3, r5, [r2, #20]
   18388:	2303      	movs	r3, #3
   1838a:	f842 3f10 	str.w	r3, [r2, #16]!
   1838e:	e7d6      	b.n	1833e <bt_att_chan_create_pdu+0x2a>
	switch (att_op_get_type(op)) {
   18390:	f44f 2870 	mov.w	r8, #983040	; 0xf0000
   18394:	f04f 0900 	mov.w	r9, #0
   18398:	e7e6      	b.n	18368 <bt_att_chan_create_pdu+0x54>
	return z_impl_z_current_get();
   1839a:	f013 f80b 	bl	2b3b4 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   1839e:	4b14      	ldr	r3, [pc, #80]	; (183f0 <bt_att_chan_create_pdu+0xdc>)
   183a0:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   183a2:	4814      	ldr	r0, [pc, #80]	; (183f4 <bt_att_chan_create_pdu+0xe0>)
   183a4:	bf07      	ittee	eq
   183a6:	2200      	moveq	r2, #0
   183a8:	2300      	moveq	r3, #0
   183aa:	4642      	movne	r2, r8
   183ac:	464b      	movne	r3, r9
   183ae:	f011 f911 	bl	295d4 <z_impl_k_queue_get>
	if (!data) {
   183b2:	b970      	cbnz	r0, 183d2 <bt_att_chan_create_pdu+0xbe>
		LOG_WRN("Unable to allocate ATT TX meta");
   183b4:	4b10      	ldr	r3, [pc, #64]	; (183f8 <bt_att_chan_create_pdu+0xe4>)
   183b6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   183ba:	617b      	str	r3, [r7, #20]
   183bc:	2302      	movs	r3, #2
   183be:	480a      	ldr	r0, [pc, #40]	; (183e8 <bt_att_chan_create_pdu+0xd4>)
   183c0:	f107 0210 	add.w	r2, r7, #16
   183c4:	613b      	str	r3, [r7, #16]
   183c6:	f019 faa9 	bl	3191c <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   183ca:	4620      	mov	r0, r4
   183cc:	f005 fede 	bl	1e18c <net_buf_unref>
		return NULL;
   183d0:	e7b9      	b.n	18346 <bt_att_chan_create_pdu+0x32>
	bt_att_tx_meta_data(buf) = data;
   183d2:	61a0      	str	r0, [r4, #24]
   183d4:	2101      	movs	r1, #1
   183d6:	f104 000c 	add.w	r0, r4, #12
   183da:	f006 f85d 	bl	1e498 <net_buf_simple_add>
	hdr->code = op;
   183de:	7005      	strb	r5, [r0, #0]
	return buf;
   183e0:	e7b2      	b.n	18348 <bt_att_chan_create_pdu+0x34>
   183e2:	bf00      	nop
   183e4:	0003cd32 	.word	0x0003cd32
   183e8:	000378b0 	.word	0x000378b0
   183ec:	0003ca0f 	.word	0x0003ca0f
   183f0:	2000e108 	.word	0x2000e108
   183f4:	2000cfc0 	.word	0x2000cfc0
   183f8:	0003cd57 	.word	0x0003cd57

000183fc <bt_att_recv>:
{
   183fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18400:	b087      	sub	sp, #28
	if (buf->len < sizeof(*hdr)) {
   18402:	8a0b      	ldrh	r3, [r1, #16]
{
   18404:	4682      	mov	sl, r0
   18406:	460c      	mov	r4, r1
   18408:	af00      	add	r7, sp, #0
	if (buf->len < sizeof(*hdr)) {
   1840a:	b97b      	cbnz	r3, 1842c <bt_att_recv+0x30>
		LOG_ERR("Too small ATT PDU received");
   1840c:	4b4c      	ldr	r3, [pc, #304]	; (18540 <bt_att_recv+0x144>)
   1840e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18412:	617b      	str	r3, [r7, #20]
   18414:	2302      	movs	r3, #2
   18416:	f107 0210 	add.w	r2, r7, #16
   1841a:	613b      	str	r3, [r7, #16]
			LOG_WRN("Ignoring unexpected request");
   1841c:	4849      	ldr	r0, [pc, #292]	; (18544 <bt_att_recv+0x148>)
   1841e:	f019 fa7d 	bl	3191c <z_log_msg_static_create.constprop.0>
}
   18422:	2000      	movs	r0, #0
   18424:	371c      	adds	r7, #28
   18426:	46bd      	mov	sp, r7
   18428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1842c:	2101      	movs	r1, #1
   1842e:	f104 000c 	add.w	r0, r4, #12
   18432:	f006 f813 	bl	1e45c <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   18436:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   1843a:	4605      	mov	r5, r0
   1843c:	2b00      	cmp	r3, #0
   1843e:	d0f0      	beq.n	18422 <bt_att_recv+0x26>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   18440:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   18442:	7801      	ldrb	r1, [r0, #0]
   18444:	f8df 8100 	ldr.w	r8, [pc, #256]	; 18548 <bt_att_recv+0x14c>
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   18448:	f1aa 0604 	sub.w	r6, sl, #4
		if (hdr->code == handlers[i].op) {
   1844c:	f818 0033 	ldrb.w	r0, [r8, r3, lsl #3]
   18450:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
   18454:	4288      	cmp	r0, r1
   18456:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   1845a:	d114      	bne.n	18486 <bt_att_recv+0x8a>
		if (handler->type == ATT_REQUEST &&
   1845c:	f892 9002 	ldrb.w	r9, [r2, #2]
   18460:	f1b9 0f01 	cmp.w	r9, #1
   18464:	d131      	bne.n	184ca <bt_att_recv+0xce>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   18466:	2100      	movs	r1, #0
   18468:	f10a 0030 	add.w	r0, sl, #48	; 0x30
   1846c:	f019 fc30 	bl	31cd0 <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   18470:	2800      	cmp	r0, #0
   18472:	d035      	beq.n	184e0 <bt_att_recv+0xe4>
			LOG_WRN("Ignoring unexpected request");
   18474:	4b35      	ldr	r3, [pc, #212]	; (1854c <bt_att_recv+0x150>)
   18476:	617b      	str	r3, [r7, #20]
   18478:	2302      	movs	r3, #2
   1847a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1847e:	613b      	str	r3, [r7, #16]
   18480:	f107 0210 	add.w	r2, r7, #16
   18484:	e7ca      	b.n	1841c <bt_att_recv+0x20>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   18486:	3301      	adds	r3, #1
   18488:	2b1e      	cmp	r3, #30
   1848a:	d1df      	bne.n	1844c <bt_att_recv+0x50>
		LOG_WRN("Unhandled ATT code 0x%02x", hdr->code);
   1848c:	466c      	mov	r4, sp
   1848e:	b088      	sub	sp, #32
   18490:	466a      	mov	r2, sp
   18492:	4b2f      	ldr	r3, [pc, #188]	; (18550 <bt_att_recv+0x154>)
   18494:	482b      	ldr	r0, [pc, #172]	; (18544 <bt_att_recv+0x148>)
   18496:	e9c2 3105 	strd	r3, r1, [r2, #20]
   1849a:	2303      	movs	r3, #3
   1849c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   184a0:	f842 3f10 	str.w	r3, [r2, #16]!
   184a4:	f019 fa3a 	bl	3191c <z_log_msg_static_create.constprop.0>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   184a8:	7829      	ldrb	r1, [r5, #0]
   184aa:	46a5      	mov	sp, r4
   184ac:	4608      	mov	r0, r1
   184ae:	f7ff fbb9 	bl	17c24 <att_op_get_type>
   184b2:	2800      	cmp	r0, #0
   184b4:	d0b5      	beq.n	18422 <bt_att_recv+0x26>
   184b6:	2805      	cmp	r0, #5
   184b8:	d0b3      	beq.n	18422 <bt_att_recv+0x26>
	if (!req) {
   184ba:	2900      	cmp	r1, #0
   184bc:	d0b1      	beq.n	18422 <bt_att_recv+0x26>
   184be:	2306      	movs	r3, #6
   184c0:	2200      	movs	r2, #0
   184c2:	4630      	mov	r0, r6
   184c4:	f019 fc87 	bl	31dd6 <send_err_rsp.part.0>
   184c8:	e7ab      	b.n	18422 <bt_att_recv+0x26>
		} else if (handler->type == ATT_INDICATION &&
   184ca:	f1b9 0f05 	cmp.w	r9, #5
   184ce:	d107      	bne.n	184e0 <bt_att_recv+0xe4>
			   atomic_test_and_set_bit(att_chan->flags,
   184d0:	2101      	movs	r1, #1
   184d2:	f10a 0030 	add.w	r0, sl, #48	; 0x30
   184d6:	f019 fbfb 	bl	31cd0 <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   184da:	b108      	cbz	r0, 184e0 <bt_att_recv+0xe4>
			LOG_WRN("Ignoring unexpected indication");
   184dc:	4b1d      	ldr	r3, [pc, #116]	; (18554 <bt_att_recv+0x158>)
   184de:	e7ca      	b.n	18476 <bt_att_recv+0x7a>
	if (buf->len < handler->expect_len) {
   184e0:	44d8      	add	r8, fp
   184e2:	8a23      	ldrh	r3, [r4, #16]
   184e4:	f898 2001 	ldrb.w	r2, [r8, #1]
   184e8:	429a      	cmp	r2, r3
   184ea:	d916      	bls.n	1851a <bt_att_recv+0x11e>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   184ec:	46e9      	mov	r9, sp
   184ee:	b088      	sub	sp, #32
   184f0:	466a      	mov	r2, sp
   184f2:	7829      	ldrb	r1, [r5, #0]
   184f4:	2404      	movs	r4, #4
   184f6:	4818      	ldr	r0, [pc, #96]	; (18558 <bt_att_recv+0x15c>)
   184f8:	61d1      	str	r1, [r2, #28]
   184fa:	e9c2 0305 	strd	r0, r3, [r2, #20]
   184fe:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   18502:	4810      	ldr	r0, [pc, #64]	; (18544 <bt_att_recv+0x148>)
   18504:	f842 4f10 	str.w	r4, [r2, #16]!
   18508:	f019 fa08 	bl	3191c <z_log_msg_static_create.constprop.0>
	if (handler->type == ATT_REQUEST && err) {
   1850c:	f898 3002 	ldrb.w	r3, [r8, #2]
   18510:	46cd      	mov	sp, r9
   18512:	2b01      	cmp	r3, #1
   18514:	d185      	bne.n	18422 <bt_att_recv+0x26>
		err = BT_ATT_ERR_INVALID_PDU;
   18516:	4623      	mov	r3, r4
   18518:	e00c      	b.n	18534 <bt_att_recv+0x138>
		err = handler->func(att_chan, buf);
   1851a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1851e:	4621      	mov	r1, r4
   18520:	4630      	mov	r0, r6
   18522:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   18524:	f1b9 0f01 	cmp.w	r9, #1
		err = handler->func(att_chan, buf);
   18528:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   1852a:	f47f af7a 	bne.w	18422 <bt_att_recv+0x26>
   1852e:	2800      	cmp	r0, #0
   18530:	f43f af77 	beq.w	18422 <bt_att_recv+0x26>
		send_err_rsp(att_chan, hdr->code, 0, err);
   18534:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   18536:	2900      	cmp	r1, #0
   18538:	f43f af73 	beq.w	18422 <bt_att_recv+0x26>
   1853c:	e7c0      	b.n	184c0 <bt_att_recv+0xc4>
   1853e:	bf00      	nop
   18540:	0003cd76 	.word	0x0003cd76
   18544:	000378b0 	.word	0x000378b0
   18548:	00038144 	.word	0x00038144
   1854c:	0003cdab 	.word	0x0003cdab
   18550:	0003cd91 	.word	0x0003cd91
   18554:	0003cdc7 	.word	0x0003cdc7
   18558:	0003cde6 	.word	0x0003cde6

0001855c <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   1855c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1855e:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   18560:	6803      	ldr	r3, [r0, #0]
   18562:	460d      	mov	r5, r1
   18564:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   18566:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   18568:	bf18      	it	ne
   1856a:	2101      	movne	r1, #1
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   1856c:	b087      	sub	sp, #28
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1856e:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   18570:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   18572:	f01a f9bd 	bl	328f0 <bt_gatt_change_aware>
   18576:	b948      	cbnz	r0, 1858c <att_write_rsp.constprop.0+0x30>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   18578:	2105      	movs	r1, #5
   1857a:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1857e:	f019 fba7 	bl	31cd0 <atomic_test_and_set_bit>
   18582:	2800      	cmp	r0, #0
   18584:	d048      	beq.n	18618 <att_write_rsp.constprop.0+0xbc>
			return 0;
   18586:	2000      	movs	r0, #0
}
   18588:	b007      	add	sp, #28
   1858a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!handle) {
   1858c:	2e00      	cmp	r6, #0
   1858e:	d045      	beq.n	1861c <att_write_rsp.constprop.0+0xc0>
	(void)memset(&data, 0, sizeof(data));
   18590:	2218      	movs	r2, #24
   18592:	2100      	movs	r1, #0
   18594:	4668      	mov	r0, sp
   18596:	f01d ffe7 	bl	36568 <memset>
	if (rsp) {
   1859a:	bb67      	cbnz	r7, 185f6 <att_write_rsp.constprop.0+0x9a>
	data.conn = chan->att->conn;
   1859c:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1859e:	4631      	mov	r1, r6
	data.conn = chan->att->conn;
   185a0:	681b      	ldr	r3, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   185a2:	4630      	mov	r0, r6
	data.conn = chan->att->conn;
   185a4:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   185a6:	2300      	movs	r3, #0
   185a8:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   185ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   185ae:	4a1c      	ldr	r2, [pc, #112]	; (18620 <att_write_rsp.constprop.0+0xc4>)
	data.value = value;
   185b0:	9303      	str	r3, [sp, #12]
	data.len = len;
   185b2:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
	data.req = req;
   185b6:	f88d 5008 	strb.w	r5, [sp, #8]
	data.len = len;
   185ba:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   185be:	2301      	movs	r3, #1
   185c0:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   185c4:	466b      	mov	r3, sp
   185c6:	f019 f93e 	bl	31846 <bt_gatt_foreach_attr>
	if (data.err) {
   185ca:	f89d 3014 	ldrb.w	r3, [sp, #20]
   185ce:	b1e3      	cbz	r3, 1860a <att_write_rsp.constprop.0+0xae>
		if (rsp) {
   185d0:	2f00      	cmp	r7, #0
   185d2:	d0d8      	beq.n	18586 <att_write_rsp.constprop.0+0x2a>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   185d4:	9b01      	ldr	r3, [sp, #4]
   185d6:	6998      	ldr	r0, [r3, #24]
   185d8:	f7ff fb6a 	bl	17cb0 <tx_meta_data_free>
			net_buf_unref(data.buf);
   185dc:	9801      	ldr	r0, [sp, #4]
   185de:	f005 fdd5 	bl	1e18c <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   185e2:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
   185e6:	2d00      	cmp	r5, #0
   185e8:	d0cd      	beq.n	18586 <att_write_rsp.constprop.0+0x2a>
   185ea:	4632      	mov	r2, r6
   185ec:	4629      	mov	r1, r5
   185ee:	4620      	mov	r0, r4
   185f0:	f019 fbf1 	bl	31dd6 <send_err_rsp.part.0>
   185f4:	e7c7      	b.n	18586 <att_write_rsp.constprop.0+0x2a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   185f6:	2200      	movs	r2, #0
   185f8:	4639      	mov	r1, r7
   185fa:	4620      	mov	r0, r4
   185fc:	f7ff fe8a 	bl	18314 <bt_att_chan_create_pdu>
   18600:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   18602:	2800      	cmp	r0, #0
   18604:	d1ca      	bne.n	1859c <att_write_rsp.constprop.0+0x40>
			return BT_ATT_ERR_UNLIKELY;
   18606:	200e      	movs	r0, #14
   18608:	e7be      	b.n	18588 <att_write_rsp.constprop.0+0x2c>
	if (data.buf) {
   1860a:	9901      	ldr	r1, [sp, #4]
   1860c:	2900      	cmp	r1, #0
   1860e:	d0ba      	beq.n	18586 <att_write_rsp.constprop.0+0x2a>
		bt_att_chan_send_rsp(chan, data.buf);
   18610:	4620      	mov	r0, r4
   18612:	f019 f9b7 	bl	31984 <bt_att_chan_send_rsp>
   18616:	e7b6      	b.n	18586 <att_write_rsp.constprop.0+0x2a>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   18618:	2012      	movs	r0, #18
   1861a:	e7b5      	b.n	18588 <att_write_rsp.constprop.0+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   1861c:	2001      	movs	r0, #1
   1861e:	e7b3      	b.n	18588 <att_write_rsp.constprop.0+0x2c>
   18620:	000317e5 	.word	0x000317e5

00018624 <bt_att_create_pdu>:
{
   18624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18626:	af00      	add	r7, sp, #0
   18628:	460e      	mov	r6, r1
   1862a:	4615      	mov	r5, r2
	att = att_get(conn);
   1862c:	f7ff fcee 	bl	1800c <att_get>
	if (!att) {
   18630:	b1e0      	cbz	r0, 1866c <bt_att_create_pdu+0x48>
	return list->head;
   18632:	6a83      	ldr	r3, [r0, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18634:	4618      	mov	r0, r3
   18636:	b11b      	cbz	r3, 18640 <bt_att_create_pdu+0x1c>
	return node->next;
   18638:	f850 3988 	ldr.w	r3, [r0], #-136
   1863c:	b103      	cbz	r3, 18640 <bt_att_create_pdu+0x1c>
   1863e:	3b88      	subs	r3, #136	; 0x88
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   18640:	1c6c      	adds	r4, r5, #1
   18642:	4622      	mov	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18644:	b118      	cbz	r0, 1864e <bt_att_create_pdu+0x2a>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   18646:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   18648:	42a1      	cmp	r1, r4
   1864a:	d219      	bcs.n	18680 <bt_att_create_pdu+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1864c:	b983      	cbnz	r3, 18670 <bt_att_create_pdu+0x4c>
	LOG_WRN("No ATT channel for MTU %zu", len + sizeof(op));
   1864e:	466d      	mov	r5, sp
   18650:	b088      	sub	sp, #32
   18652:	466a      	mov	r2, sp
   18654:	4b0e      	ldr	r3, [pc, #56]	; (18690 <bt_att_create_pdu+0x6c>)
   18656:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1865a:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1865e:	2303      	movs	r3, #3
   18660:	480c      	ldr	r0, [pc, #48]	; (18694 <bt_att_create_pdu+0x70>)
   18662:	f842 3f10 	str.w	r3, [r2, #16]!
   18666:	f019 f959 	bl	3191c <z_log_msg_static_create.constprop.0>
   1866a:	46ad      	mov	sp, r5
		return NULL;
   1866c:	2000      	movs	r0, #0
   1866e:	e00b      	b.n	18688 <bt_att_create_pdu+0x64>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18670:	4618      	mov	r0, r3
   18672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   18676:	b14b      	cbz	r3, 1868c <bt_att_create_pdu+0x68>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   18678:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1867a:	3b88      	subs	r3, #136	; 0x88
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1867c:	428a      	cmp	r2, r1
   1867e:	d8f7      	bhi.n	18670 <bt_att_create_pdu+0x4c>
		return bt_att_chan_create_pdu(chan, op, len);
   18680:	462a      	mov	r2, r5
   18682:	4631      	mov	r1, r6
   18684:	f7ff fe46 	bl	18314 <bt_att_chan_create_pdu>
}
   18688:	46bd      	mov	sp, r7
   1868a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1868c:	4614      	mov	r4, r2
   1868e:	e7da      	b.n	18646 <bt_att_create_pdu+0x22>
   18690:	0003ce05 	.word	0x0003ce05
   18694:	000378b0 	.word	0x000378b0

00018698 <att_read_group_req>:
{
   18698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   1869c:	8a0e      	ldrh	r6, [r1, #16]
{
   1869e:	4604      	mov	r4, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   186a0:	3e04      	subs	r6, #4
   186a2:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
   186a4:	2e02      	cmp	r6, #2
{
   186a6:	4608      	mov	r0, r1
   186a8:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   186aa:	d001      	beq.n	186b0 <att_read_group_req+0x18>
   186ac:	2e10      	cmp	r6, #16
   186ae:	d16a      	bne.n	18786 <att_read_group_req+0xee>
   186b0:	2104      	movs	r1, #4
   186b2:	300c      	adds	r0, #12
   186b4:	f005 fed2 	bl	1e45c <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   186b8:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   186bc:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   186be:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   186c0:	1d01      	adds	r1, r0, #4
   186c2:	4632      	mov	r2, r6
   186c4:	4640      	mov	r0, r8
   186c6:	f018 fbae 	bl	30e26 <bt_uuid_create>
   186ca:	2800      	cmp	r0, #0
   186cc:	d05d      	beq.n	1878a <att_read_group_req+0xf2>
	if (!start || !end) {
   186ce:	2d00      	cmp	r5, #0
   186d0:	d03a      	beq.n	18748 <att_read_group_req+0xb0>
   186d2:	2600      	movs	r6, #0
   186d4:	2f00      	cmp	r7, #0
   186d6:	d036      	beq.n	18746 <att_read_group_req+0xae>
	if (start > end) {
   186d8:	42bd      	cmp	r5, r7
   186da:	d835      	bhi.n	18748 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   186dc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   186e0:	4640      	mov	r0, r8
   186e2:	a901      	add	r1, sp, #4
   186e4:	f88d 6004 	strb.w	r6, [sp, #4]
   186e8:	f8ad 3006 	strh.w	r3, [sp, #6]
   186ec:	f018 fb6d 	bl	30dca <bt_uuid_cmp>
   186f0:	bb70      	cbnz	r0, 18750 <att_read_group_req+0xb8>
	struct bt_conn *conn = chan->chan.chan.conn;
   186f2:	6866      	ldr	r6, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   186f4:	2214      	movs	r2, #20
   186f6:	2100      	movs	r1, #0
   186f8:	a807      	add	r0, sp, #28
   186fa:	f01d ff35 	bl	36568 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   186fe:	2201      	movs	r2, #1
   18700:	2111      	movs	r1, #17
   18702:	4630      	mov	r0, r6
   18704:	f7ff ff8e 	bl	18624 <bt_att_create_pdu>
   18708:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   1870a:	2800      	cmp	r0, #0
   1870c:	d03d      	beq.n	1878a <att_read_group_req+0xf2>
	return net_buf_simple_add(&buf->b, len);
   1870e:	2101      	movs	r1, #1
   18710:	300c      	adds	r0, #12
	data.uuid = uuid;
   18712:	e9cd 4807 	strd	r4, r8, [sp, #28]
   18716:	f005 febf 	bl	1e498 <net_buf_simple_add>
	data.rsp->len = 0U;
   1871a:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1871c:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1871e:	4639      	mov	r1, r7
	data.rsp->len = 0U;
   18720:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   18722:	4a1b      	ldr	r2, [pc, #108]	; (18790 <att_read_group_req+0xf8>)
	data.group = NULL;
   18724:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   18726:	4628      	mov	r0, r5
   18728:	ab07      	add	r3, sp, #28
   1872a:	f019 f88c 	bl	31846 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   1872e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18730:	781b      	ldrb	r3, [r3, #0]
   18732:	bb1b      	cbnz	r3, 1877c <att_read_group_req+0xe4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   18734:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18736:	6998      	ldr	r0, [r3, #24]
   18738:	f7ff faba 	bl	17cb0 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1873c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1873e:	f005 fd25 	bl	1e18c <net_buf_unref>
	if (!req) {
   18742:	230a      	movs	r3, #10
   18744:	e001      	b.n	1874a <att_read_group_req+0xb2>
			*err = 0U;
   18746:	463d      	mov	r5, r7
	if (!req) {
   18748:	2301      	movs	r3, #1
   1874a:	462a      	mov	r2, r5
   1874c:	2110      	movs	r1, #16
   1874e:	e00e      	b.n	1876e <att_read_group_req+0xd6>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   18750:	f642 0301 	movw	r3, #10241	; 0x2801
   18754:	4640      	mov	r0, r8
   18756:	a907      	add	r1, sp, #28
   18758:	f88d 601c 	strb.w	r6, [sp, #28]
   1875c:	f8ad 301e 	strh.w	r3, [sp, #30]
   18760:	f018 fb33 	bl	30dca <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   18764:	2800      	cmp	r0, #0
   18766:	d0c4      	beq.n	186f2 <att_read_group_req+0x5a>
	if (!req) {
   18768:	2310      	movs	r3, #16
   1876a:	462a      	mov	r2, r5
   1876c:	4619      	mov	r1, r3
   1876e:	4620      	mov	r0, r4
   18770:	f019 fb31 	bl	31dd6 <send_err_rsp.part.0>
		return 0;
   18774:	2000      	movs	r0, #0
}
   18776:	b00c      	add	sp, #48	; 0x30
   18778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf);
   1877c:	4620      	mov	r0, r4
   1877e:	9909      	ldr	r1, [sp, #36]	; 0x24
   18780:	f019 f900 	bl	31984 <bt_att_chan_send_rsp>
	return 0;
   18784:	e7f6      	b.n	18774 <att_read_group_req+0xdc>
		return BT_ATT_ERR_INVALID_PDU;
   18786:	2004      	movs	r0, #4
   18788:	e7f5      	b.n	18776 <att_read_group_req+0xde>
		return BT_ATT_ERR_UNLIKELY;
   1878a:	200e      	movs	r0, #14
   1878c:	e7f3      	b.n	18776 <att_read_group_req+0xde>
   1878e:	bf00      	nop
   18790:	00018075 	.word	0x00018075

00018794 <att_read_mult_vl_req>:
{
   18794:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   18798:	6846      	ldr	r6, [r0, #4]
{
   1879a:	4604      	mov	r4, r0
   1879c:	460d      	mov	r5, r1
   1879e:	b085      	sub	sp, #20
	if (!bt_gatt_change_aware(conn, true)) {
   187a0:	2101      	movs	r1, #1
   187a2:	4630      	mov	r0, r6
   187a4:	f01a f8a4 	bl	328f0 <bt_gatt_change_aware>
   187a8:	b950      	cbnz	r0, 187c0 <att_read_mult_vl_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   187aa:	2105      	movs	r1, #5
   187ac:	f104 0034 	add.w	r0, r4, #52	; 0x34
   187b0:	f019 fa8e 	bl	31cd0 <atomic_test_and_set_bit>
   187b4:	2800      	cmp	r0, #0
   187b6:	d13b      	bne.n	18830 <att_read_mult_vl_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   187b8:	2012      	movs	r0, #18
}
   187ba:	b005      	add	sp, #20
   187bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   187c0:	2210      	movs	r2, #16
   187c2:	2100      	movs	r1, #0
   187c4:	4668      	mov	r0, sp
   187c6:	f01d fecf 	bl	36568 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   187ca:	2200      	movs	r2, #0
   187cc:	2121      	movs	r1, #33	; 0x21
   187ce:	4630      	mov	r0, r6
   187d0:	f7ff ff28 	bl	18624 <bt_att_create_pdu>
   187d4:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   187d6:	b368      	cbz	r0, 18834 <att_read_mult_vl_req+0xa0>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   187d8:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   187dc:	f8df 9058 	ldr.w	r9, [pc, #88]	; 18838 <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   187e0:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   187e2:	f105 070c 	add.w	r7, r5, #12
	while (buf->len >= sizeof(uint16_t)) {
   187e6:	8a2b      	ldrh	r3, [r5, #16]
   187e8:	2b01      	cmp	r3, #1
   187ea:	d804      	bhi.n	187f6 <att_read_mult_vl_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   187ec:	4620      	mov	r0, r4
   187ee:	9902      	ldr	r1, [sp, #8]
   187f0:	f019 f8c8 	bl	31984 <bt_att_chan_send_rsp>
	return 0;
   187f4:	e01c      	b.n	18830 <att_read_mult_vl_req+0x9c>
   187f6:	4638      	mov	r0, r7
   187f8:	f01a fca8 	bl	3314c <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   187fc:	466b      	mov	r3, sp
   187fe:	464a      	mov	r2, r9
   18800:	4601      	mov	r1, r0
   18802:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   18804:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   18808:	f019 f81d 	bl	31846 <bt_gatt_foreach_attr>
		if (data.err) {
   1880c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   18810:	2b00      	cmp	r3, #0
   18812:	d0e8      	beq.n	187e6 <att_read_mult_vl_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   18814:	9b02      	ldr	r3, [sp, #8]
   18816:	6998      	ldr	r0, [r3, #24]
   18818:	f7ff fa4a 	bl	17cb0 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1881c:	9802      	ldr	r0, [sp, #8]
   1881e:	f005 fcb5 	bl	1e18c <net_buf_unref>
	if (!req) {
   18822:	4632      	mov	r2, r6
   18824:	2120      	movs	r1, #32
   18826:	4620      	mov	r0, r4
   18828:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1882c:	f019 fad3 	bl	31dd6 <send_err_rsp.part.0>
			return 0;
   18830:	2000      	movs	r0, #0
   18832:	e7c2      	b.n	187ba <att_read_mult_vl_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   18834:	200e      	movs	r0, #14
   18836:	e7c0      	b.n	187ba <att_read_mult_vl_req+0x26>
   18838:	00031b49 	.word	0x00031b49

0001883c <att_read_mult_req>:
{
   1883c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   18840:	6846      	ldr	r6, [r0, #4]
{
   18842:	4604      	mov	r4, r0
   18844:	460d      	mov	r5, r1
   18846:	b085      	sub	sp, #20
	if (!bt_gatt_change_aware(conn, true)) {
   18848:	2101      	movs	r1, #1
   1884a:	4630      	mov	r0, r6
   1884c:	f01a f850 	bl	328f0 <bt_gatt_change_aware>
   18850:	b950      	cbnz	r0, 18868 <att_read_mult_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   18852:	2105      	movs	r1, #5
   18854:	f104 0034 	add.w	r0, r4, #52	; 0x34
   18858:	f019 fa3a 	bl	31cd0 <atomic_test_and_set_bit>
   1885c:	2800      	cmp	r0, #0
   1885e:	d13b      	bne.n	188d8 <att_read_mult_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   18860:	2012      	movs	r0, #18
}
   18862:	b005      	add	sp, #20
   18864:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   18868:	2210      	movs	r2, #16
   1886a:	2100      	movs	r1, #0
   1886c:	4668      	mov	r0, sp
   1886e:	f01d fe7b 	bl	36568 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   18872:	2200      	movs	r2, #0
   18874:	210f      	movs	r1, #15
   18876:	4630      	mov	r0, r6
   18878:	f7ff fed4 	bl	18624 <bt_att_create_pdu>
   1887c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1887e:	b368      	cbz	r0, 188dc <att_read_mult_req+0xa0>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   18880:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   18884:	f8df 9058 	ldr.w	r9, [pc, #88]	; 188e0 <att_read_mult_req+0xa4>
	data.chan = chan;
   18888:	9400      	str	r4, [sp, #0]
   1888a:	f105 070c 	add.w	r7, r5, #12
	while (buf->len >= sizeof(uint16_t)) {
   1888e:	8a2b      	ldrh	r3, [r5, #16]
   18890:	2b01      	cmp	r3, #1
   18892:	d804      	bhi.n	1889e <att_read_mult_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   18894:	4620      	mov	r0, r4
   18896:	9902      	ldr	r1, [sp, #8]
   18898:	f019 f874 	bl	31984 <bt_att_chan_send_rsp>
	return 0;
   1889c:	e01c      	b.n	188d8 <att_read_mult_req+0x9c>
   1889e:	4638      	mov	r0, r7
   188a0:	f01a fc54 	bl	3314c <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   188a4:	466b      	mov	r3, sp
   188a6:	464a      	mov	r2, r9
   188a8:	4601      	mov	r1, r0
   188aa:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   188ac:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   188b0:	f018 ffc9 	bl	31846 <bt_gatt_foreach_attr>
		if (data.err) {
   188b4:	f89d 300c 	ldrb.w	r3, [sp, #12]
   188b8:	2b00      	cmp	r3, #0
   188ba:	d0e8      	beq.n	1888e <att_read_mult_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   188bc:	9b02      	ldr	r3, [sp, #8]
   188be:	6998      	ldr	r0, [r3, #24]
   188c0:	f7ff f9f6 	bl	17cb0 <tx_meta_data_free>
			net_buf_unref(data.buf);
   188c4:	9802      	ldr	r0, [sp, #8]
   188c6:	f005 fc61 	bl	1e18c <net_buf_unref>
	if (!req) {
   188ca:	4632      	mov	r2, r6
   188cc:	210e      	movs	r1, #14
   188ce:	4620      	mov	r0, r4
   188d0:	f89d 300c 	ldrb.w	r3, [sp, #12]
   188d4:	f019 fa7f 	bl	31dd6 <send_err_rsp.part.0>
			return 0;
   188d8:	2000      	movs	r0, #0
   188da:	e7c2      	b.n	18862 <att_read_mult_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   188dc:	200e      	movs	r0, #14
   188de:	e7c0      	b.n	18862 <att_read_mult_req+0x26>
   188e0:	00031b03 	.word	0x00031b03

000188e4 <att_read_rsp>:
{
   188e4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   188e8:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   188ec:	4604      	mov	r4, r0
   188ee:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
   188f0:	4640      	mov	r0, r8
   188f2:	2101      	movs	r1, #1
{
   188f4:	4617      	mov	r7, r2
   188f6:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
   188f8:	f019 fffa 	bl	328f0 <bt_gatt_change_aware>
   188fc:	b948      	cbnz	r0, 18912 <att_read_rsp+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   188fe:	2105      	movs	r1, #5
   18900:	f104 0034 	add.w	r0, r4, #52	; 0x34
   18904:	f019 f9e4 	bl	31cd0 <atomic_test_and_set_bit>
   18908:	bb78      	cbnz	r0, 1896a <att_read_rsp+0x86>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1890a:	2012      	movs	r0, #18
}
   1890c:	b004      	add	sp, #16
   1890e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   18912:	b38d      	cbz	r5, 18978 <att_read_rsp+0x94>
	(void)memset(&data, 0, sizeof(data));
   18914:	2210      	movs	r2, #16
   18916:	2100      	movs	r1, #0
   18918:	4668      	mov	r0, sp
   1891a:	f01d fe25 	bl	36568 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   1891e:	2200      	movs	r2, #0
   18920:	4639      	mov	r1, r7
   18922:	4640      	mov	r0, r8
   18924:	f7ff fe7e 	bl	18624 <bt_att_create_pdu>
   18928:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1892a:	b338      	cbz	r0, 1897c <att_read_rsp+0x98>
	data.offset = offset;
   1892c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   18930:	4629      	mov	r1, r5
	data.offset = offset;
   18932:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   18936:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   18938:	4628      	mov	r0, r5
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1893a:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1893e:	4a10      	ldr	r2, [pc, #64]	; (18980 <att_read_rsp+0x9c>)
   18940:	466b      	mov	r3, sp
	data.chan = chan;
   18942:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   18944:	f018 ff7f 	bl	31846 <bt_gatt_foreach_attr>
	if (data.err) {
   18948:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1894c:	b17b      	cbz	r3, 1896e <att_read_rsp+0x8a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1894e:	9b02      	ldr	r3, [sp, #8]
   18950:	6998      	ldr	r0, [r3, #24]
   18952:	f7ff f9ad 	bl	17cb0 <tx_meta_data_free>
		net_buf_unref(data.buf);
   18956:	9802      	ldr	r0, [sp, #8]
   18958:	f005 fc18 	bl	1e18c <net_buf_unref>
	if (!req) {
   1895c:	462a      	mov	r2, r5
   1895e:	4631      	mov	r1, r6
   18960:	4620      	mov	r0, r4
   18962:	f89d 300c 	ldrb.w	r3, [sp, #12]
   18966:	f019 fa36 	bl	31dd6 <send_err_rsp.part.0>
			return 0;
   1896a:	2000      	movs	r0, #0
   1896c:	e7ce      	b.n	1890c <att_read_rsp+0x28>
	bt_att_chan_send_rsp(chan, data.buf);
   1896e:	4620      	mov	r0, r4
   18970:	9902      	ldr	r1, [sp, #8]
   18972:	f019 f807 	bl	31984 <bt_att_chan_send_rsp>
	return 0;
   18976:	e7f8      	b.n	1896a <att_read_rsp+0x86>
		return BT_ATT_ERR_INVALID_HANDLE;
   18978:	2001      	movs	r0, #1
   1897a:	e7c7      	b.n	1890c <att_read_rsp+0x28>
		return BT_ATT_ERR_UNLIKELY;
   1897c:	200e      	movs	r0, #14
   1897e:	e7c5      	b.n	1890c <att_read_rsp+0x28>
   18980:	00031b03 	.word	0x00031b03

00018984 <att_read_type_req>:
{
   18984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   18988:	8a0d      	ldrh	r5, [r1, #16]
{
   1898a:	4604      	mov	r4, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   1898c:	3d04      	subs	r5, #4
   1898e:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
   18990:	2d02      	cmp	r5, #2
{
   18992:	4608      	mov	r0, r1
   18994:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   18996:	d001      	beq.n	1899c <att_read_type_req+0x18>
   18998:	2d10      	cmp	r5, #16
   1899a:	d150      	bne.n	18a3e <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   1899c:	2104      	movs	r1, #4
   1899e:	300c      	adds	r0, #12
   189a0:	f005 fd5c 	bl	1e45c <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   189a4:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   189a8:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   189aa:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   189ac:	1d01      	adds	r1, r0, #4
   189ae:	462a      	mov	r2, r5
   189b0:	4640      	mov	r0, r8
   189b2:	f018 fa38 	bl	30e26 <bt_uuid_create>
   189b6:	b188      	cbz	r0, 189dc <att_read_type_req+0x58>
	if (!start || !end) {
   189b8:	b19e      	cbz	r6, 189e2 <att_read_type_req+0x5e>
   189ba:	b18f      	cbz	r7, 189e0 <att_read_type_req+0x5c>
	if (start > end) {
   189bc:	42b7      	cmp	r7, r6
   189be:	d310      	bcc.n	189e2 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   189c0:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   189c2:	6865      	ldr	r5, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   189c4:	2100      	movs	r1, #0
   189c6:	eb0d 0002 	add.w	r0, sp, r2
   189ca:	f01d fdcd 	bl	36568 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   189ce:	2201      	movs	r2, #1
   189d0:	2109      	movs	r1, #9
   189d2:	4628      	mov	r0, r5
   189d4:	f7ff fe26 	bl	18624 <bt_att_create_pdu>
   189d8:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   189da:	b960      	cbnz	r0, 189f6 <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
   189dc:	200e      	movs	r0, #14
   189de:	e007      	b.n	189f0 <att_read_type_req+0x6c>
			*err = 0U;
   189e0:	463e      	mov	r6, r7
	if (!req) {
   189e2:	2301      	movs	r3, #1
   189e4:	4632      	mov	r2, r6
   189e6:	2108      	movs	r1, #8
   189e8:	4620      	mov	r0, r4
   189ea:	f019 f9f4 	bl	31dd6 <send_err_rsp.part.0>
		return 0;
   189ee:	2000      	movs	r0, #0
}
   189f0:	b00c      	add	sp, #48	; 0x30
   189f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   189f6:	2101      	movs	r1, #1
   189f8:	300c      	adds	r0, #12
	data.uuid = uuid;
   189fa:	e9cd 4806 	strd	r4, r8, [sp, #24]
   189fe:	f005 fd4b 	bl	1e498 <net_buf_simple_add>
	data.rsp->len = 0U;
   18a02:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   18a04:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
   18a06:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   18a08:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   18a0a:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   18a0c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   18a10:	4630      	mov	r0, r6
   18a12:	ab06      	add	r3, sp, #24
   18a14:	4a0b      	ldr	r2, [pc, #44]	; (18a44 <att_read_type_req+0xc0>)
   18a16:	f018 ff16 	bl	31846 <bt_gatt_foreach_attr>
	if (data.err) {
   18a1a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   18a1e:	b14b      	cbz	r3, 18a34 <att_read_type_req+0xb0>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   18a20:	9b08      	ldr	r3, [sp, #32]
   18a22:	6998      	ldr	r0, [r3, #24]
   18a24:	f7ff f944 	bl	17cb0 <tx_meta_data_free>
		net_buf_unref(data.buf);
   18a28:	9808      	ldr	r0, [sp, #32]
   18a2a:	f005 fbaf 	bl	1e18c <net_buf_unref>
	if (!req) {
   18a2e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   18a32:	e7d7      	b.n	189e4 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   18a34:	4620      	mov	r0, r4
   18a36:	9908      	ldr	r1, [sp, #32]
   18a38:	f018 ffa4 	bl	31984 <bt_att_chan_send_rsp>
	return 0;
   18a3c:	e7d7      	b.n	189ee <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
   18a3e:	2004      	movs	r0, #4
   18a40:	e7d6      	b.n	189f0 <att_read_type_req+0x6c>
   18a42:	bf00      	nop
   18a44:	00018121 	.word	0x00018121

00018a48 <att_find_type_req>:
{
   18a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18a4c:	460f      	mov	r7, r1
   18a4e:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   18a50:	2106      	movs	r1, #6
   18a52:	b086      	sub	sp, #24
   18a54:	f107 000c 	add.w	r0, r7, #12
   18a58:	f005 fd00 	bl	1e45c <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   18a5c:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   18a5e:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   18a62:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
   18a64:	f8d7 900c 	ldr.w	r9, [r7, #12]
	if (!start || !end) {
   18a68:	b1c5      	cbz	r5, 18a9c <att_find_type_req+0x54>
   18a6a:	2300      	movs	r3, #0
   18a6c:	f1b8 0f00 	cmp.w	r8, #0
   18a70:	d013      	beq.n	18a9a <att_find_type_req+0x52>
	if (start > end) {
   18a72:	4545      	cmp	r5, r8
   18a74:	d812      	bhi.n	18a9c <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   18a76:	f88d 3000 	strb.w	r3, [sp]
   18a7a:	f88d 3004 	strb.w	r3, [sp, #4]
   18a7e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   18a82:	4668      	mov	r0, sp
   18a84:	a901      	add	r1, sp, #4
   18a86:	f8ad 2002 	strh.w	r2, [sp, #2]
   18a8a:	f8ad 3006 	strh.w	r3, [sp, #6]
   18a8e:	f018 f99c 	bl	30dca <bt_uuid_cmp>
   18a92:	4606      	mov	r6, r0
   18a94:	b160      	cbz	r0, 18ab0 <att_find_type_req+0x68>
	if (!req) {
   18a96:	230a      	movs	r3, #10
   18a98:	e001      	b.n	18a9e <att_find_type_req+0x56>
			*err = 0U;
   18a9a:	4645      	mov	r5, r8
	if (!req) {
   18a9c:	2301      	movs	r3, #1
   18a9e:	462a      	mov	r2, r5
   18aa0:	2106      	movs	r1, #6
   18aa2:	4620      	mov	r0, r4
   18aa4:	f019 f997 	bl	31dd6 <send_err_rsp.part.0>
		return 0;
   18aa8:	2000      	movs	r0, #0
}
   18aaa:	b006      	add	sp, #24
   18aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
   18ab0:	f8d4 a004 	ldr.w	sl, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   18ab4:	4601      	mov	r1, r0
   18ab6:	2214      	movs	r2, #20
   18ab8:	a801      	add	r0, sp, #4
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   18aba:	7c3f      	ldrb	r7, [r7, #16]
	(void)memset(&data, 0, sizeof(data));
   18abc:	f01d fd54 	bl	36568 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   18ac0:	4632      	mov	r2, r6
   18ac2:	2107      	movs	r1, #7
   18ac4:	4650      	mov	r0, sl
   18ac6:	f7ff fdad 	bl	18624 <bt_att_create_pdu>
   18aca:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   18acc:	b1f8      	cbz	r0, 18b0e <att_find_type_req+0xc6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   18ace:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   18ad0:	4641      	mov	r1, r8
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   18ad2:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   18ad6:	4628      	mov	r0, r5
   18ad8:	ab01      	add	r3, sp, #4
   18ada:	4a0e      	ldr	r2, [pc, #56]	; (18b14 <att_find_type_req+0xcc>)
	data.value = value;
   18adc:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.chan = chan;
   18ae0:	9401      	str	r4, [sp, #4]
	data.value_len = value_len;
   18ae2:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   18ae6:	f018 feae 	bl	31846 <bt_gatt_foreach_attr>
	if (data.err) {
   18aea:	f89d 3015 	ldrb.w	r3, [sp, #21]
   18aee:	b14b      	cbz	r3, 18b04 <att_find_type_req+0xbc>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   18af0:	9b02      	ldr	r3, [sp, #8]
   18af2:	6998      	ldr	r0, [r3, #24]
   18af4:	f7ff f8dc 	bl	17cb0 <tx_meta_data_free>
		net_buf_unref(data.buf);
   18af8:	9802      	ldr	r0, [sp, #8]
   18afa:	f005 fb47 	bl	1e18c <net_buf_unref>
	if (!req) {
   18afe:	f89d 3015 	ldrb.w	r3, [sp, #21]
   18b02:	e7cc      	b.n	18a9e <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf);
   18b04:	4620      	mov	r0, r4
   18b06:	9902      	ldr	r1, [sp, #8]
   18b08:	f018 ff3c 	bl	31984 <bt_att_chan_send_rsp>
	return 0;
   18b0c:	e7cc      	b.n	18aa8 <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   18b0e:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   18b10:	e7cb      	b.n	18aaa <att_find_type_req+0x62>
   18b12:	bf00      	nop
   18b14:	00017cf1 	.word	0x00017cf1

00018b18 <att_find_info_req>:
{
   18b18:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   18b1a:	68cb      	ldr	r3, [r1, #12]
{
   18b1c:	4604      	mov	r4, r0
	start_handle = sys_le16_to_cpu(req->start_handle);
   18b1e:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   18b20:	885e      	ldrh	r6, [r3, #2]
{
   18b22:	b085      	sub	sp, #20
	if (!start || !end) {
   18b24:	b195      	cbz	r5, 18b4c <att_find_info_req+0x34>
   18b26:	b186      	cbz	r6, 18b4a <att_find_info_req+0x32>
	if (start > end) {
   18b28:	42b5      	cmp	r5, r6
   18b2a:	d80f      	bhi.n	18b4c <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   18b2c:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   18b2e:	2210      	movs	r2, #16
   18b30:	2100      	movs	r1, #0
   18b32:	4668      	mov	r0, sp
   18b34:	f01d fd18 	bl	36568 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   18b38:	2200      	movs	r2, #0
   18b3a:	2105      	movs	r1, #5
   18b3c:	4638      	mov	r0, r7
   18b3e:	f7ff fd71 	bl	18624 <bt_att_create_pdu>
   18b42:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   18b44:	b958      	cbnz	r0, 18b5e <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   18b46:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   18b48:	e007      	b.n	18b5a <att_find_info_req+0x42>
			*err = 0U;
   18b4a:	4635      	mov	r5, r6
	if (!req) {
   18b4c:	2301      	movs	r3, #1
   18b4e:	462a      	mov	r2, r5
   18b50:	2104      	movs	r1, #4
   18b52:	4620      	mov	r0, r4
   18b54:	f019 f93f 	bl	31dd6 <send_err_rsp.part.0>
		return 0;
   18b58:	2000      	movs	r0, #0
}
   18b5a:	b005      	add	sp, #20
   18b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   18b5e:	466b      	mov	r3, sp
   18b60:	4631      	mov	r1, r6
   18b62:	4628      	mov	r0, r5
   18b64:	4a09      	ldr	r2, [pc, #36]	; (18b8c <att_find_info_req+0x74>)
	data.chan = chan;
   18b66:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   18b68:	f018 fe6d 	bl	31846 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   18b6c:	9b02      	ldr	r3, [sp, #8]
   18b6e:	b943      	cbnz	r3, 18b82 <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   18b70:	9b01      	ldr	r3, [sp, #4]
   18b72:	6998      	ldr	r0, [r3, #24]
   18b74:	f7ff f89c 	bl	17cb0 <tx_meta_data_free>
		net_buf_unref(data.buf);
   18b78:	9801      	ldr	r0, [sp, #4]
   18b7a:	f005 fb07 	bl	1e18c <net_buf_unref>
	if (!req) {
   18b7e:	230a      	movs	r3, #10
   18b80:	e7e5      	b.n	18b4e <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   18b82:	4620      	mov	r0, r4
   18b84:	9901      	ldr	r1, [sp, #4]
   18b86:	f018 fefd 	bl	31984 <bt_att_chan_send_rsp>
	return 0;
   18b8a:	e7e5      	b.n	18b58 <att_find_info_req+0x40>
   18b8c:	0003187d 	.word	0x0003187d

00018b90 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   18b90:	b570      	push	{r4, r5, r6, lr}
	z_impl_k_queue_init(queue);
   18b92:	4809      	ldr	r0, [pc, #36]	; (18bb8 <bt_att_init+0x28>)
   18b94:	f01d fac6 	bl	36124 <z_impl_k_queue_init>
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
   18b98:	2400      	movs	r4, #0
   18b9a:	4d08      	ldr	r5, [pc, #32]	; (18bbc <bt_att_init+0x2c>)
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   18b9c:	4e06      	ldr	r6, [pc, #24]	; (18bb8 <bt_att_init+0x28>)
   18b9e:	4629      	mov	r1, r5
   18ba0:	4630      	mov	r0, r6
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
   18ba2:	3401      	adds	r4, #1
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   18ba4:	f01d facb 	bl	3613e <k_queue_append>
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
   18ba8:	2c06      	cmp	r4, #6
   18baa:	f105 0514 	add.w	r5, r5, #20
   18bae:	d1f6      	bne.n	18b9e <bt_att_init+0xe>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   18bb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_gatt_init();
   18bb4:	f001 b8ec 	b.w	19d90 <bt_gatt_init>
   18bb8:	2000cfc0 	.word	0x2000cfc0
   18bbc:	2000e68c 	.word	0x2000e68c

00018bc0 <bt_att_req_alloc>:
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
	struct bt_att_req *req = NULL;
   18bc0:	2300      	movs	r3, #0
{
   18bc2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   18bc4:	4605      	mov	r5, r0
   18bc6:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   18bc8:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   18bca:	f012 fbf3 	bl	2b3b4 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   18bce:	4b0c      	ldr	r3, [pc, #48]	; (18c00 <bt_att_req_alloc+0x40>)
		 */
		timeout = K_NO_WAIT;
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   18bd0:	a901      	add	r1, sp, #4
	if (k_current_get() == att_handle_rsp_thread) {
   18bd2:	681b      	ldr	r3, [r3, #0]
   18bd4:	4283      	cmp	r3, r0
		timeout = K_NO_WAIT;
   18bd6:	bf04      	itt	eq
   18bd8:	2500      	moveq	r5, #0
   18bda:	462c      	moveq	r4, r5
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   18bdc:	462a      	mov	r2, r5
   18bde:	4623      	mov	r3, r4
   18be0:	4808      	ldr	r0, [pc, #32]	; (18c04 <bt_att_req_alloc+0x44>)
   18be2:	f010 f8bf 	bl	28d64 <k_mem_slab_alloc>
   18be6:	4601      	mov	r1, r0
   18be8:	b940      	cbnz	r0, 18bfc <bt_att_req_alloc+0x3c>
		return NULL;
	}

	LOG_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   18bea:	9b01      	ldr	r3, [sp, #4]
   18bec:	221c      	movs	r2, #28
   18bee:	4618      	mov	r0, r3
   18bf0:	f01d fcba 	bl	36568 <memset>
   18bf4:	4603      	mov	r3, r0

	return req;
}
   18bf6:	4618      	mov	r0, r3
   18bf8:	b003      	add	sp, #12
   18bfa:	bd30      	pop	{r4, r5, pc}
		return NULL;
   18bfc:	2300      	movs	r3, #0
   18bfe:	e7fa      	b.n	18bf6 <bt_att_req_alloc+0x36>
   18c00:	2000e704 	.word	0x2000e704
   18c04:	2000cde8 	.word	0x2000cde8

00018c08 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   18c08:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("req %p", req);

	if (req->buf) {
   18c0a:	6883      	ldr	r3, [r0, #8]
{
   18c0c:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   18c0e:	b14b      	cbz	r3, 18c24 <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   18c10:	6998      	ldr	r0, [r3, #24]
   18c12:	f7ff f84d 	bl	17cb0 <tx_meta_data_free>
		net_buf_unref(req->buf);
   18c16:	9b01      	ldr	r3, [sp, #4]
   18c18:	6898      	ldr	r0, [r3, #8]
   18c1a:	f005 fab7 	bl	1e18c <net_buf_unref>
		req->buf = NULL;
   18c1e:	2200      	movs	r2, #0
   18c20:	9b01      	ldr	r3, [sp, #4]
   18c22:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   18c24:	4803      	ldr	r0, [pc, #12]	; (18c34 <bt_att_req_free+0x2c>)
   18c26:	a901      	add	r1, sp, #4
   18c28:	f010 f906 	bl	28e38 <k_mem_slab_free>
}
   18c2c:	b003      	add	sp, #12
   18c2e:	f85d fb04 	ldr.w	pc, [sp], #4
   18c32:	bf00      	nop
   18c34:	2000cde8 	.word	0x2000cde8

00018c38 <att_handle_rsp>:
{
   18c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18c3c:	4604      	mov	r4, r0
   18c3e:	b088      	sub	sp, #32
	k_work_cancel_delayable(&chan->timeout_work);
   18c40:	3058      	adds	r0, #88	; 0x58
{
   18c42:	460e      	mov	r6, r1
   18c44:	4617      	mov	r7, r2
   18c46:	461d      	mov	r5, r3
	k_work_cancel_delayable(&chan->timeout_work);
   18c48:	f011 fa46 	bl	2a0d8 <k_work_cancel_delayable>
	if (!chan->req) {
   18c4c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   18c4e:	b980      	cbnz	r0, 18c72 <att_handle_rsp+0x3a>
		LOG_WRN("No pending ATT request");
   18c50:	4b19      	ldr	r3, [pc, #100]	; (18cb8 <att_handle_rsp+0x80>)
   18c52:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   18c56:	9307      	str	r3, [sp, #28]
   18c58:	2302      	movs	r3, #2
   18c5a:	4818      	ldr	r0, [pc, #96]	; (18cbc <att_handle_rsp+0x84>)
   18c5c:	aa06      	add	r2, sp, #24
   18c5e:	9306      	str	r3, [sp, #24]
   18c60:	f018 fe5c 	bl	3191c <z_log_msg_static_create.constprop.0>
	att_req_send_process(chan->att);
   18c64:	6820      	ldr	r0, [r4, #0]
   18c66:	f018 ffd0 	bl	31c0a <att_req_send_process>
}
   18c6a:	2000      	movs	r0, #0
   18c6c:	b008      	add	sp, #32
   18c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   18c72:	4b13      	ldr	r3, [pc, #76]	; (18cc0 <att_handle_rsp+0x88>)
   18c74:	f04f 0800 	mov.w	r8, #0
   18c78:	4298      	cmp	r0, r3
   18c7a:	d102      	bne.n	18c82 <att_handle_rsp+0x4a>
		chan->req = NULL;
   18c7c:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
   18c80:	e7f0      	b.n	18c64 <att_handle_rsp+0x2c>
	func = chan->req->func;
   18c82:	f8d0 9004 	ldr.w	r9, [r0, #4]
	chan->req->func = NULL;
   18c86:	f8c0 8004 	str.w	r8, [r0, #4]
	params = chan->req->user_data;
   18c8a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   18c8c:	f8d0 a018 	ldr.w	sl, [r0, #24]
	bt_att_req_free(chan->req);
   18c90:	f7ff ffba 	bl	18c08 <bt_att_req_free>
	att_req_send_process(chan->att);
   18c94:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
   18c96:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
	att_req_send_process(chan->att);
   18c9a:	f018 ffb6 	bl	31c0a <att_req_send_process>
	if (func) {
   18c9e:	f1b9 0f00 	cmp.w	r9, #0
   18ca2:	d0e2      	beq.n	18c6a <att_handle_rsp+0x32>
		func(chan->att->conn, err, pdu, len, params);
   18ca4:	6820      	ldr	r0, [r4, #0]
   18ca6:	f8cd a000 	str.w	sl, [sp]
   18caa:	463b      	mov	r3, r7
   18cac:	4632      	mov	r2, r6
   18cae:	4629      	mov	r1, r5
   18cb0:	6800      	ldr	r0, [r0, #0]
   18cb2:	47c8      	blx	r9
   18cb4:	e7d9      	b.n	18c6a <att_handle_rsp+0x32>
   18cb6:	bf00      	nop
   18cb8:	0003ce20 	.word	0x0003ce20
   18cbc:	000378b0 	.word	0x000378b0
   18cc0:	2000e708 	.word	0x2000e708

00018cc4 <att_error_rsp>:
{
   18cc4:	b570      	push	{r4, r5, r6, lr}
	if (!chan->req || chan->req == &cancel || !rsp->error) {
   18cc6:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
   18cc8:	4605      	mov	r5, r0
	rsp = (void *)buf->data;
   18cca:	68ca      	ldr	r2, [r1, #12]
	if (!chan->req || chan->req == &cancel || !rsp->error) {
   18ccc:	b30b      	cbz	r3, 18d12 <att_error_rsp+0x4e>
   18cce:	4915      	ldr	r1, [pc, #84]	; (18d24 <att_error_rsp+0x60>)
   18cd0:	428b      	cmp	r3, r1
   18cd2:	d01e      	beq.n	18d12 <att_error_rsp+0x4e>
   18cd4:	78d4      	ldrb	r4, [r2, #3]
   18cd6:	b1e4      	cbz	r4, 18d12 <att_error_rsp+0x4e>
	switch (err) {
   18cd8:	2c05      	cmp	r4, #5
	if (!att_change_security(chan->chan.chan.conn, err)) {
   18cda:	6840      	ldr	r0, [r0, #4]
	switch (err) {
   18cdc:	d006      	beq.n	18cec <att_error_rsp+0x28>
   18cde:	2c0f      	cmp	r4, #15
   18ce0:	d118      	bne.n	18d14 <att_error_rsp+0x50>
		if (conn->sec_level >= BT_SECURITY_L2)
   18ce2:	7a43      	ldrb	r3, [r0, #9]
   18ce4:	2b01      	cmp	r3, #1
   18ce6:	d815      	bhi.n	18d14 <att_error_rsp+0x50>
		sec = BT_SECURITY_L2;
   18ce8:	2102      	movs	r1, #2
   18cea:	e007      	b.n	18cfc <att_error_rsp+0x38>
		if (conn->sec_level < BT_SECURITY_L2) {
   18cec:	7a43      	ldrb	r3, [r0, #9]
   18cee:	2b01      	cmp	r3, #1
   18cf0:	d9fa      	bls.n	18ce8 <att_error_rsp+0x24>
		} else if (conn->sec_level < BT_SECURITY_L3) {
   18cf2:	2b02      	cmp	r3, #2
   18cf4:	d00b      	beq.n	18d0e <att_error_rsp+0x4a>
		} else if (conn->sec_level < BT_SECURITY_L4) {
   18cf6:	2b03      	cmp	r3, #3
   18cf8:	d10c      	bne.n	18d14 <att_error_rsp+0x50>
			sec = BT_SECURITY_L4;
   18cfa:	2104      	movs	r1, #4
	return bt_conn_set_security(conn, sec);
   18cfc:	f018 fb6d 	bl	313da <bt_conn_set_security>
	if (!att_change_security(chan->chan.chan.conn, err)) {
   18d00:	b940      	cbnz	r0, 18d14 <att_error_rsp+0x50>
		chan->req->retrying = true;
   18d02:	6baa      	ldr	r2, [r5, #56]	; 0x38
   18d04:	7c13      	ldrb	r3, [r2, #16]
   18d06:	f043 0301 	orr.w	r3, r3, #1
   18d0a:	7413      	strb	r3, [r2, #16]
}
   18d0c:	bd70      	pop	{r4, r5, r6, pc}
			sec = BT_SECURITY_L3;
   18d0e:	2103      	movs	r1, #3
   18d10:	e7f4      	b.n	18cfc <att_error_rsp+0x38>
		err = BT_ATT_ERR_UNLIKELY;
   18d12:	240e      	movs	r4, #14
	return att_handle_rsp(chan, NULL, 0, err);
   18d14:	2200      	movs	r2, #0
   18d16:	4623      	mov	r3, r4
   18d18:	4628      	mov	r0, r5
}
   18d1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(chan, NULL, 0, err);
   18d1e:	4611      	mov	r1, r2
   18d20:	f7ff bf8a 	b.w	18c38 <att_handle_rsp>
   18d24:	2000e708 	.word	0x2000e708

00018d28 <bt_att_disconnected>:
{
   18d28:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   18d2c:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   18d30:	4604      	mov	r4, r0
	if (!att_chan->att) {
   18d32:	2e00      	cmp	r6, #0
   18d34:	d05a      	beq.n	18dec <bt_att_disconnected+0xc4>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   18d36:	f100 0184 	add.w	r1, r0, #132	; 0x84
   18d3a:	f106 0028 	add.w	r0, r6, #40	; 0x28
   18d3e:	f018 feba 	bl	31ab6 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   18d42:	1f27      	subs	r7, r4, #4
   18d44:	f104 0838 	add.w	r8, r4, #56	; 0x38
   18d48:	2200      	movs	r2, #0
   18d4a:	2300      	movs	r3, #0
   18d4c:	4640      	mov	r0, r8
   18d4e:	f01a f9ed 	bl	3312c <net_buf_get>
   18d52:	4605      	mov	r5, r0
   18d54:	bb48      	cbnz	r0, 18daa <bt_att_disconnected+0x82>
	if (chan->req) {
   18d56:	6b63      	ldr	r3, [r4, #52]	; 0x34
   18d58:	b12b      	cbz	r3, 18d66 <bt_att_disconnected+0x3e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   18d5a:	4602      	mov	r2, r0
   18d5c:	4601      	mov	r1, r0
   18d5e:	230e      	movs	r3, #14
   18d60:	4638      	mov	r0, r7
   18d62:	f7ff ff69 	bl	18c38 <att_handle_rsp>
	chan->att = NULL;
   18d66:	2300      	movs	r3, #0
	atomic_clear_bit(chan->flags, ATT_CONNECTED);
   18d68:	2102      	movs	r1, #2
	chan->att = NULL;
   18d6a:	f844 3c04 	str.w	r3, [r4, #-4]
	atomic_clear_bit(chan->flags, ATT_CONNECTED);
   18d6e:	f104 0030 	add.w	r0, r4, #48	; 0x30
   18d72:	f018 feb9 	bl	31ae8 <atomic_clear_bit>
	if (!sys_slist_is_empty(&att->chans)) {
   18d76:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   18d78:	2b00      	cmp	r3, #0
   18d7a:	d137      	bne.n	18dec <bt_att_disconnected+0xc4>
	att_reset(att);
   18d7c:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   18d7e:	9803      	ldr	r0, [sp, #12]
   18d80:	2200      	movs	r2, #0
   18d82:	2300      	movs	r3, #0
   18d84:	300c      	adds	r0, #12
   18d86:	f01a f9d1 	bl	3312c <net_buf_get>
   18d8a:	4605      	mov	r5, r0
   18d8c:	b9a0      	cbnz	r0, 18db8 <bt_att_disconnected+0x90>
	while (!sys_slist_is_empty(&att->reqs)) {
   18d8e:	9803      	ldr	r0, [sp, #12]
	return list->head;
   18d90:	6845      	ldr	r5, [r0, #4]
   18d92:	b9c5      	cbnz	r5, 18dc6 <bt_att_disconnected+0x9e>
	att->conn = NULL;
   18d94:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   18d96:	a903      	add	r1, sp, #12
   18d98:	4816      	ldr	r0, [pc, #88]	; (18df4 <bt_att_disconnected+0xcc>)
   18d9a:	f010 f84d 	bl	28e38 <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   18d9e:	6820      	ldr	r0, [r4, #0]
}
   18da0:	b004      	add	sp, #16
   18da2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   18da6:	f002 be57 	b.w	1ba58 <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   18daa:	69a8      	ldr	r0, [r5, #24]
   18dac:	f7fe ff80 	bl	17cb0 <tx_meta_data_free>
		net_buf_unref(buf);
   18db0:	4628      	mov	r0, r5
   18db2:	f005 f9eb 	bl	1e18c <net_buf_unref>
   18db6:	e7c7      	b.n	18d48 <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   18db8:	69a8      	ldr	r0, [r5, #24]
   18dba:	f7fe ff79 	bl	17cb0 <tx_meta_data_free>
		net_buf_unref(buf);
   18dbe:	4628      	mov	r0, r5
   18dc0:	f005 f9e4 	bl	1e18c <net_buf_unref>
   18dc4:	e7db      	b.n	18d7e <bt_att_disconnected+0x56>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18dc6:	6882      	ldr	r2, [r0, #8]
	return node->next;
   18dc8:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18dca:	4295      	cmp	r5, r2
	list->head = node;
   18dcc:	6043      	str	r3, [r0, #4]
	list->tail = node;
   18dce:	bf08      	it	eq
   18dd0:	6083      	streq	r3, [r0, #8]
		if (req->func) {
   18dd2:	686e      	ldr	r6, [r5, #4]
   18dd4:	b136      	cbz	r6, 18de4 <bt_att_disconnected+0xbc>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   18dd6:	69ab      	ldr	r3, [r5, #24]
   18dd8:	210e      	movs	r1, #14
   18dda:	9300      	str	r3, [sp, #0]
   18ddc:	2300      	movs	r3, #0
   18dde:	6800      	ldr	r0, [r0, #0]
   18de0:	461a      	mov	r2, r3
   18de2:	47b0      	blx	r6
		bt_att_req_free(req);
   18de4:	4628      	mov	r0, r5
   18de6:	f7ff ff0f 	bl	18c08 <bt_att_req_free>
   18dea:	e7d0      	b.n	18d8e <bt_att_disconnected+0x66>
}
   18dec:	b004      	add	sp, #16
   18dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18df2:	bf00      	nop
   18df4:	2000cda8 	.word	0x2000cda8

00018df8 <att_timeout>:
{
   18df8:	b510      	push	{r4, lr}
   18dfa:	4604      	mov	r4, r0
   18dfc:	b086      	sub	sp, #24
	LOG_ERR("ATT Timeout");
   18dfe:	4b08      	ldr	r3, [pc, #32]	; (18e20 <att_timeout+0x28>)
   18e00:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18e04:	9305      	str	r3, [sp, #20]
   18e06:	2302      	movs	r3, #2
   18e08:	4806      	ldr	r0, [pc, #24]	; (18e24 <att_timeout+0x2c>)
   18e0a:	aa04      	add	r2, sp, #16
   18e0c:	9304      	str	r3, [sp, #16]
   18e0e:	f018 fd85 	bl	3191c <z_log_msg_static_create.constprop.0>
	bt_att_disconnected(&chan->chan.chan);
   18e12:	f1a4 0054 	sub.w	r0, r4, #84	; 0x54
}
   18e16:	b006      	add	sp, #24
   18e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   18e1c:	f7ff bf84 	b.w	18d28 <bt_att_disconnected>
   18e20:	0003ce37 	.word	0x0003ce37
   18e24:	000378b0 	.word	0x000378b0

00018e28 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   18e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18e2a:	460c      	mov	r4, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   18e2c:	b958      	cbnz	r0, 18e46 <bt_att_send+0x1e>
   18e2e:	4929      	ldr	r1, [pc, #164]	; (18ed4 <bt_att_send+0xac>)
   18e30:	f640 63ba 	movw	r3, #3770	; 0xeba
   18e34:	4a28      	ldr	r2, [pc, #160]	; (18ed8 <bt_att_send+0xb0>)
   18e36:	4829      	ldr	r0, [pc, #164]	; (18edc <bt_att_send+0xb4>)
   18e38:	f016 fac4 	bl	2f3c4 <assert_print>
   18e3c:	f640 61ba 	movw	r1, #3770	; 0xeba
	__ASSERT_NO_MSG(buf);
   18e40:	4825      	ldr	r0, [pc, #148]	; (18ed8 <bt_att_send+0xb0>)
   18e42:	f016 fab8 	bl	2f3b6 <assert_post_action>
   18e46:	b949      	cbnz	r1, 18e5c <bt_att_send+0x34>
   18e48:	4925      	ldr	r1, [pc, #148]	; (18ee0 <bt_att_send+0xb8>)
   18e4a:	f640 63bb 	movw	r3, #3771	; 0xebb
   18e4e:	4a22      	ldr	r2, [pc, #136]	; (18ed8 <bt_att_send+0xb0>)
   18e50:	4822      	ldr	r0, [pc, #136]	; (18edc <bt_att_send+0xb4>)
   18e52:	f016 fab7 	bl	2f3c4 <assert_print>
   18e56:	f640 61bb 	movw	r1, #3771	; 0xebb
   18e5a:	e7f1      	b.n	18e40 <bt_att_send+0x18>

	att = att_get(conn);
   18e5c:	f7ff f8d6 	bl	1800c <att_get>
	if (!att) {
   18e60:	4605      	mov	r5, r0
   18e62:	b940      	cbnz	r0, 18e76 <bt_att_send+0x4e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   18e64:	69a0      	ldr	r0, [r4, #24]
   18e66:	f7fe ff23 	bl	17cb0 <tx_meta_data_free>
		net_buf_unref(buf);
   18e6a:	4620      	mov	r0, r4
   18e6c:	f005 f98e 	bl	1e18c <net_buf_unref>
		return -ENOTCONN;
   18e70:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   18e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   18e76:	f100 060c 	add.w	r6, r0, #12
   18e7a:	4621      	mov	r1, r4
   18e7c:	4630      	mov	r0, r6
   18e7e:	f005 f95f 	bl	1e140 <net_buf_put>
	return list->head;
   18e82:	6aad      	ldr	r5, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18e84:	b14d      	cbz	r5, 18e9a <bt_att_send+0x72>
	return node->next;
   18e86:	f855 4988 	ldr.w	r4, [r5], #-136
   18e8a:	b104      	cbz	r4, 18e8e <bt_att_send+0x66>
   18e8c:	3c88      	subs	r4, #136	; 0x88
		err = process_queue(chan, &att->tx_queue);
   18e8e:	4631      	mov	r1, r6
   18e90:	4628      	mov	r0, r5
   18e92:	f018 fd5e 	bl	31952 <process_queue>
		if (!err) {
   18e96:	4603      	mov	r3, r0
   18e98:	b980      	cbnz	r0, 18ebc <bt_att_send+0x94>
	return 0;
   18e9a:	2000      	movs	r0, #0
   18e9c:	e7ea      	b.n	18e74 <bt_att_send+0x4c>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   18e9e:	2103      	movs	r1, #3
   18ea0:	f104 0034 	add.w	r0, r4, #52	; 0x34
   18ea4:	f018 fc4c 	bl	31740 <atomic_test_bit>
   18ea8:	4607      	mov	r7, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   18eaa:	f105 0034 	add.w	r0, r5, #52	; 0x34
   18eae:	f018 fc47 	bl	31740 <atomic_test_bit>
		if (err == -ENOENT && prev &&
   18eb2:	4287      	cmp	r7, r0
   18eb4:	f06f 0301 	mvn.w	r3, #1
   18eb8:	d107      	bne.n	18eca <bt_att_send+0xa2>
   18eba:	4614      	mov	r4, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18ebc:	2c00      	cmp	r4, #0
   18ebe:	d0ec      	beq.n	18e9a <bt_att_send+0x72>
   18ec0:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
   18ec4:	b922      	cbnz	r2, 18ed0 <bt_att_send+0xa8>
		if (err == -ENOENT && prev &&
   18ec6:	3302      	adds	r3, #2
   18ec8:	d0e9      	beq.n	18e9e <bt_att_send+0x76>
{
   18eca:	4625      	mov	r5, r4
   18ecc:	4614      	mov	r4, r2
   18ece:	e7de      	b.n	18e8e <bt_att_send+0x66>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18ed0:	3a88      	subs	r2, #136	; 0x88
   18ed2:	e7f8      	b.n	18ec6 <bt_att_send+0x9e>
   18ed4:	0003bca4 	.word	0x0003bca4
   18ed8:	0003cbdd 	.word	0x0003cbdd
   18edc:	00039995 	.word	0x00039995
   18ee0:	0003db82 	.word	0x0003db82

00018ee4 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   18ee4:	b510      	push	{r4, lr}
   18ee6:	460c      	mov	r4, r1
	struct bt_att *att;

	LOG_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   18ee8:	b958      	cbnz	r0, 18f02 <bt_att_req_send+0x1e>
   18eea:	4915      	ldr	r1, [pc, #84]	; (18f40 <bt_att_req_send+0x5c>)
   18eec:	f44f 636d 	mov.w	r3, #3792	; 0xed0
   18ef0:	4a14      	ldr	r2, [pc, #80]	; (18f44 <bt_att_req_send+0x60>)
   18ef2:	4815      	ldr	r0, [pc, #84]	; (18f48 <bt_att_req_send+0x64>)
   18ef4:	f016 fa66 	bl	2f3c4 <assert_print>
   18ef8:	f44f 616d 	mov.w	r1, #3792	; 0xed0
	__ASSERT_NO_MSG(req);
   18efc:	4811      	ldr	r0, [pc, #68]	; (18f44 <bt_att_req_send+0x60>)
   18efe:	f016 fa5a 	bl	2f3b6 <assert_post_action>
   18f02:	b949      	cbnz	r1, 18f18 <bt_att_req_send+0x34>
   18f04:	4911      	ldr	r1, [pc, #68]	; (18f4c <bt_att_req_send+0x68>)
   18f06:	f640 63d1 	movw	r3, #3793	; 0xed1
   18f0a:	4a0e      	ldr	r2, [pc, #56]	; (18f44 <bt_att_req_send+0x60>)
   18f0c:	480e      	ldr	r0, [pc, #56]	; (18f48 <bt_att_req_send+0x64>)
   18f0e:	f016 fa59 	bl	2f3c4 <assert_print>
   18f12:	f640 61d1 	movw	r1, #3793	; 0xed1
   18f16:	e7f1      	b.n	18efc <bt_att_req_send+0x18>

	att = att_get(conn);
   18f18:	f7ff f878 	bl	1800c <att_get>
	if (!att) {
   18f1c:	b160      	cbz	r0, 18f38 <bt_att_req_send+0x54>
	parent->next = child;
   18f1e:	2300      	movs	r3, #0
   18f20:	6023      	str	r3, [r4, #0]
	return list->tail;
   18f22:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   18f24:	b92b      	cbnz	r3, 18f32 <bt_att_req_send+0x4e>
	list->head = node;
   18f26:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   18f2a:	f018 fe6e 	bl	31c0a <att_req_send_process>

	return 0;
   18f2e:	2000      	movs	r0, #0
}
   18f30:	bd10      	pop	{r4, pc}
	parent->next = child;
   18f32:	601c      	str	r4, [r3, #0]
	list->tail = node;
   18f34:	6084      	str	r4, [r0, #8]
}
   18f36:	e7f8      	b.n	18f2a <bt_att_req_send+0x46>
		return -ENOTCONN;
   18f38:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   18f3c:	e7f8      	b.n	18f30 <bt_att_req_send+0x4c>
   18f3e:	bf00      	nop
   18f40:	0003bca4 	.word	0x0003bca4
   18f44:	0003cbdd 	.word	0x0003cbdd
   18f48:	00039995 	.word	0x00039995
   18f4c:	0003cb51 	.word	0x0003cb51

00018f50 <bt_att_req_cancel>:

	return true;
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
   18f50:	b510      	push	{r4, lr}
   18f52:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	LOG_DBG("req %p", req);

	if (!conn || !req) {
   18f54:	b318      	cbz	r0, 18f9e <bt_att_req_cancel+0x4e>
   18f56:	b311      	cbz	r1, 18f9e <bt_att_req_cancel+0x4e>
		return;
	}

	att = att_get(conn);
   18f58:	f7ff f858 	bl	1800c <att_get>
	if (!att) {
   18f5c:	b1f8      	cbz	r0, 18f9e <bt_att_req_cancel+0x4e>
	return list->head;
   18f5e:	6a83      	ldr	r3, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18f60:	b1bb      	cbz	r3, 18f92 <bt_att_req_cancel+0x42>
	return node->next;
   18f62:	f853 2988 	ldr.w	r2, [r3], #-136
   18f66:	b102      	cbz	r2, 18f6a <bt_att_req_cancel+0x1a>
   18f68:	3a88      	subs	r2, #136	; 0x88
	if (chan->req != req) {
   18f6a:	6b99      	ldr	r1, [r3, #56]	; 0x38
   18f6c:	428c      	cmp	r4, r1
   18f6e:	d009      	beq.n	18f84 <bt_att_req_cancel+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18f70:	b17a      	cbz	r2, 18f92 <bt_att_req_cancel+0x42>
   18f72:	4613      	mov	r3, r2
   18f74:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
   18f78:	2a00      	cmp	r2, #0
   18f7a:	d0f6      	beq.n	18f6a <bt_att_req_cancel+0x1a>
	if (chan->req != req) {
   18f7c:	6b99      	ldr	r1, [r3, #56]	; 0x38
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18f7e:	3a88      	subs	r2, #136	; 0x88
	if (chan->req != req) {
   18f80:	428c      	cmp	r4, r1
   18f82:	d1f6      	bne.n	18f72 <bt_att_req_cancel+0x22>
	bt_att_req_free(req);
   18f84:	4620      	mov	r0, r4
	chan->req = &cancel;
   18f86:	4a06      	ldr	r2, [pc, #24]	; (18fa0 <bt_att_req_cancel+0x50>)
   18f88:	639a      	str	r2, [r3, #56]	; 0x38

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);

	bt_att_req_free(req);
}
   18f8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   18f8e:	f7ff be3b 	b.w	18c08 <bt_att_req_free>
	sys_slist_find_and_remove(&att->reqs, &req->node);
   18f92:	3004      	adds	r0, #4
   18f94:	4621      	mov	r1, r4
   18f96:	f018 fd8e 	bl	31ab6 <sys_slist_find_and_remove.isra.0>
	bt_att_req_free(req);
   18f9a:	4620      	mov	r0, r4
   18f9c:	e7f5      	b.n	18f8a <bt_att_req_cancel+0x3a>
}
   18f9e:	bd10      	pop	{r4, pc}
   18fa0:	2000e708 	.word	0x2000e708

00018fa4 <find_cf_cfg_by_addr>:
#endif
}

static struct gatt_cf_cfg *find_cf_cfg_by_addr(uint8_t id,
					       const bt_addr_le_t *addr)
{
   18fa4:	b570      	push	{r4, r5, r6, lr}
	if (IS_ENABLED(CONFIG_BT_GATT_CACHING)) {
		int i;

		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
			if (id == cf_cfg[i].id &&
   18fa6:	4c0d      	ldr	r4, [pc, #52]	; (18fdc <find_cf_cfg_by_addr+0x38>)
{
   18fa8:	4606      	mov	r6, r0
			if (id == cf_cfg[i].id &&
   18faa:	7823      	ldrb	r3, [r4, #0]
{
   18fac:	460d      	mov	r5, r1
			if (id == cf_cfg[i].id &&
   18fae:	4283      	cmp	r3, r0
   18fb0:	d104      	bne.n	18fbc <find_cf_cfg_by_addr+0x18>
			    bt_addr_le_eq(addr, &cf_cfg[i].peer)) {
   18fb2:	4628      	mov	r0, r5
   18fb4:	1c61      	adds	r1, r4, #1
   18fb6:	f019 f8ef 	bl	32198 <bt_addr_le_eq>
			if (id == cf_cfg[i].id &&
   18fba:	b958      	cbnz	r0, 18fd4 <find_cf_cfg_by_addr+0x30>
   18fbc:	7c23      	ldrb	r3, [r4, #16]
   18fbe:	42b3      	cmp	r3, r6
   18fc0:	d10a      	bne.n	18fd8 <find_cf_cfg_by_addr+0x34>
			    bt_addr_le_eq(addr, &cf_cfg[i].peer)) {
   18fc2:	4628      	mov	r0, r5
   18fc4:	4906      	ldr	r1, [pc, #24]	; (18fe0 <find_cf_cfg_by_addr+0x3c>)
   18fc6:	f019 f8e7 	bl	32198 <bt_addr_le_eq>
			if (id == cf_cfg[i].id &&
   18fca:	b110      	cbz	r0, 18fd2 <find_cf_cfg_by_addr+0x2e>
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   18fcc:	2001      	movs	r0, #1
				return &cf_cfg[i];
   18fce:	eb04 1000 	add.w	r0, r4, r0, lsl #4
			}
		}
	}

	return NULL;
}
   18fd2:	bd70      	pop	{r4, r5, r6, pc}
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   18fd4:	2000      	movs	r0, #0
   18fd6:	e7fa      	b.n	18fce <find_cf_cfg_by_addr+0x2a>
	return NULL;
   18fd8:	2000      	movs	r0, #0
   18fda:	e7fa      	b.n	18fd2 <find_cf_cfg_by_addr+0x2e>
   18fdc:	2000e73c 	.word	0x2000e73c
   18fe0:	2000e74d 	.word	0x2000e74d

00018fe4 <gatt_delayed_store_find>:
{
   18fe4:	b570      	push	{r4, r5, r6, lr}
		if (el->id == id &&
   18fe6:	4c0d      	ldr	r4, [pc, #52]	; (1901c <gatt_delayed_store_find+0x38>)
{
   18fe8:	4606      	mov	r6, r0
		if (el->id == id &&
   18fea:	7823      	ldrb	r3, [r4, #0]
{
   18fec:	460d      	mov	r5, r1
		if (el->id == id &&
   18fee:	4283      	cmp	r3, r0
   18ff0:	d104      	bne.n	18ffc <gatt_delayed_store_find+0x18>
		    bt_addr_le_eq(peer_addr, &el->peer)) {
   18ff2:	4628      	mov	r0, r5
   18ff4:	1c61      	adds	r1, r4, #1
   18ff6:	f019 f8cf 	bl	32198 <bt_addr_le_eq>
		if (el->id == id &&
   18ffa:	b958      	cbnz	r0, 19014 <gatt_delayed_store_find+0x30>
   18ffc:	7b23      	ldrb	r3, [r4, #12]
   18ffe:	42b3      	cmp	r3, r6
   19000:	d10a      	bne.n	19018 <gatt_delayed_store_find+0x34>
		    bt_addr_le_eq(peer_addr, &el->peer)) {
   19002:	4628      	mov	r0, r5
   19004:	4906      	ldr	r1, [pc, #24]	; (19020 <gatt_delayed_store_find+0x3c>)
   19006:	f019 f8c7 	bl	32198 <bt_addr_le_eq>
		el = &gatt_delayed_store.peer_list[i];
   1900a:	2800      	cmp	r0, #0
   1900c:	4805      	ldr	r0, [pc, #20]	; (19024 <gatt_delayed_store_find+0x40>)
   1900e:	bf08      	it	eq
   19010:	2000      	moveq	r0, #0
}
   19012:	bd70      	pop	{r4, r5, r6, pc}
		el = &gatt_delayed_store.peer_list[i];
   19014:	4620      	mov	r0, r4
   19016:	e7fc      	b.n	19012 <gatt_delayed_store_find+0x2e>
	return NULL;
   19018:	2000      	movs	r0, #0
   1901a:	e7fa      	b.n	19012 <gatt_delayed_store_find+0x2e>
   1901c:	2000da40 	.word	0x2000da40
   19020:	2000da4d 	.word	0x2000da4d
   19024:	2000da4c 	.word	0x2000da4c

00019028 <find_sc_cfg>:
{
   19028:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
   1902a:	4c0d      	ldr	r4, [pc, #52]	; (19060 <find_sc_cfg+0x38>)
{
   1902c:	4605      	mov	r5, r0
		if (id == sc_cfg[i].id &&
   1902e:	7823      	ldrb	r3, [r4, #0]
{
   19030:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   19032:	4283      	cmp	r3, r0
   19034:	d103      	bne.n	1903e <find_sc_cfg+0x16>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   19036:	1c60      	adds	r0, r4, #1
   19038:	f019 f8ae 	bl	32198 <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   1903c:	b960      	cbnz	r0, 19058 <find_sc_cfg+0x30>
   1903e:	7b23      	ldrb	r3, [r4, #12]
   19040:	42ab      	cmp	r3, r5
   19042:	d10b      	bne.n	1905c <find_sc_cfg+0x34>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   19044:	4631      	mov	r1, r6
   19046:	4807      	ldr	r0, [pc, #28]	; (19064 <find_sc_cfg+0x3c>)
   19048:	f019 f8a6 	bl	32198 <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   1904c:	b118      	cbz	r0, 19056 <find_sc_cfg+0x2e>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1904e:	2001      	movs	r0, #1
			return &sc_cfg[i];
   19050:	230c      	movs	r3, #12
   19052:	fb03 4000 	mla	r0, r3, r0, r4
}
   19056:	bd70      	pop	{r4, r5, r6, pc}
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   19058:	2000      	movs	r0, #0
   1905a:	e7f9      	b.n	19050 <find_sc_cfg+0x28>
	return NULL;
   1905c:	2000      	movs	r0, #0
   1905e:	e7fa      	b.n	19056 <find_sc_cfg+0x2e>
   19060:	2000ef6c 	.word	0x2000ef6c
   19064:	2000ef79 	.word	0x2000ef79

00019068 <find_cf_cfg>:
{
   19068:	b570      	push	{r4, r5, r6, lr}
		if (!conn) {
   1906a:	4606      	mov	r6, r0
   1906c:	4d13      	ldr	r5, [pc, #76]	; (190bc <find_cf_cfg+0x54>)
   1906e:	b140      	cbz	r0, 19082 <find_cf_cfg+0x1a>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   19070:	462a      	mov	r2, r5
   19072:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   19076:	1e6c      	subs	r4, r5, #1
   19078:	f018 fa06 	bl	31488 <bt_conn_is_peer_addr_le>
   1907c:	b198      	cbz	r0, 190a6 <find_cf_cfg+0x3e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1907e:	4620      	mov	r0, r4
   19080:	e00c      	b.n	1909c <find_cf_cfg+0x34>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   19082:	4628      	mov	r0, r5
   19084:	490e      	ldr	r1, [pc, #56]	; (190c0 <find_cf_cfg+0x58>)
   19086:	f019 f887 	bl	32198 <bt_addr_le_eq>
   1908a:	b940      	cbnz	r0, 1909e <find_cf_cfg+0x36>
   1908c:	490c      	ldr	r1, [pc, #48]	; (190c0 <find_cf_cfg+0x58>)
   1908e:	f105 0010 	add.w	r0, r5, #16
   19092:	f019 f881 	bl	32198 <bt_addr_le_eq>
   19096:	b120      	cbz	r0, 190a2 <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   19098:	f105 000f 	add.w	r0, r5, #15
}
   1909c:	bd70      	pop	{r4, r5, r6, pc}
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1909e:	1e68      	subs	r0, r5, #1
   190a0:	e7fc      	b.n	1909c <find_cf_cfg+0x34>
	return NULL;
   190a2:	2000      	movs	r0, #0
   190a4:	e7fa      	b.n	1909c <find_cf_cfg+0x34>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   190a6:	4630      	mov	r0, r6
   190a8:	7c21      	ldrb	r1, [r4, #16]
   190aa:	f104 0211 	add.w	r2, r4, #17
   190ae:	f018 f9eb 	bl	31488 <bt_conn_is_peer_addr_le>
   190b2:	2800      	cmp	r0, #0
   190b4:	d0f5      	beq.n	190a2 <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   190b6:	f104 0010 	add.w	r0, r4, #16
   190ba:	e7ef      	b.n	1909c <find_cf_cfg+0x34>
   190bc:	2000e73d 	.word	0x2000e73d
   190c0:	0003b6d4 	.word	0x0003b6d4

000190c4 <find_ccc_cfg>:
{
   190c4:	b510      	push	{r4, lr}
						    &cfg->peer)) {
   190c6:	1c4a      	adds	r2, r1, #1
{
   190c8:	460c      	mov	r4, r1
		if (conn) {
   190ca:	b138      	cbz	r0, 190dc <find_ccc_cfg+0x18>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   190cc:	7809      	ldrb	r1, [r1, #0]
   190ce:	f018 f9db 	bl	31488 <bt_conn_is_peer_addr_le>
   190d2:	b108      	cbz	r0, 190d8 <find_ccc_cfg+0x14>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   190d4:	4620      	mov	r0, r4
}
   190d6:	bd10      	pop	{r4, pc}
	return NULL;
   190d8:	2000      	movs	r0, #0
   190da:	e7fc      	b.n	190d6 <find_ccc_cfg+0x12>
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   190dc:	4610      	mov	r0, r2
   190de:	4902      	ldr	r1, [pc, #8]	; (190e8 <find_ccc_cfg+0x24>)
   190e0:	f019 f85a 	bl	32198 <bt_addr_le_eq>
   190e4:	e7f5      	b.n	190d2 <find_ccc_cfg+0xe>
   190e6:	bf00      	nop
   190e8:	0003b6d4 	.word	0x0003b6d4

000190ec <gatt_sub_find>:
{
   190ec:	b570      	push	{r4, r5, r6, lr}
		if (!conn) {
   190ee:	4606      	mov	r6, r0
   190f0:	4d13      	ldr	r5, [pc, #76]	; (19140 <gatt_sub_find+0x54>)
   190f2:	b140      	cbz	r0, 19106 <gatt_sub_find+0x1a>
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
   190f4:	462a      	mov	r2, r5
   190f6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   190fa:	1e6c      	subs	r4, r5, #1
   190fc:	f018 f9c4 	bl	31488 <bt_conn_is_peer_addr_le>
   19100:	b198      	cbz	r0, 1912a <gatt_sub_find+0x3e>
		struct gatt_sub *sub = &subscriptions[i];
   19102:	4620      	mov	r0, r4
   19104:	e00c      	b.n	19120 <gatt_sub_find+0x34>
			if (bt_addr_le_eq(&sub->peer, BT_ADDR_LE_ANY)) {
   19106:	4628      	mov	r0, r5
   19108:	490e      	ldr	r1, [pc, #56]	; (19144 <gatt_sub_find+0x58>)
   1910a:	f019 f845 	bl	32198 <bt_addr_le_eq>
   1910e:	b940      	cbnz	r0, 19122 <gatt_sub_find+0x36>
   19110:	490c      	ldr	r1, [pc, #48]	; (19144 <gatt_sub_find+0x58>)
   19112:	f105 0010 	add.w	r0, r5, #16
   19116:	f019 f83f 	bl	32198 <bt_addr_le_eq>
   1911a:	b120      	cbz	r0, 19126 <gatt_sub_find+0x3a>
		struct gatt_sub *sub = &subscriptions[i];
   1911c:	f105 000f 	add.w	r0, r5, #15
}
   19120:	bd70      	pop	{r4, r5, r6, pc}
		struct gatt_sub *sub = &subscriptions[i];
   19122:	1e68      	subs	r0, r5, #1
   19124:	e7fc      	b.n	19120 <gatt_sub_find+0x34>
	return NULL;
   19126:	2000      	movs	r0, #0
   19128:	e7fa      	b.n	19120 <gatt_sub_find+0x34>
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
   1912a:	4630      	mov	r0, r6
   1912c:	7c21      	ldrb	r1, [r4, #16]
   1912e:	f104 0211 	add.w	r2, r4, #17
   19132:	f018 f9a9 	bl	31488 <bt_conn_is_peer_addr_le>
   19136:	2800      	cmp	r0, #0
   19138:	d0f5      	beq.n	19126 <gatt_sub_find+0x3a>
		struct gatt_sub *sub = &subscriptions[i];
   1913a:	f104 0010 	add.w	r0, r4, #16
   1913e:	e7ef      	b.n	19120 <gatt_sub_find+0x34>
   19140:	2000e769 	.word	0x2000e769
   19144:	0003b6d4 	.word	0x0003b6d4

00019148 <gatt_delayed_store_enqueue>:
{
   19148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1914c:	4606      	mov	r6, r0
   1914e:	460f      	mov	r7, r1
   19150:	4690      	mov	r8, r2
	bool bonded = bt_addr_le_is_bonded(id, peer_addr);
   19152:	f017 ffa4 	bl	3109e <bt_addr_le_is_bonded>
	struct ds_peer *el = gatt_delayed_store_find(id, peer_addr);
   19156:	4639      	mov	r1, r7
	bool bonded = bt_addr_le_is_bonded(id, peer_addr);
   19158:	4604      	mov	r4, r0
	struct ds_peer *el = gatt_delayed_store_find(id, peer_addr);
   1915a:	4630      	mov	r0, r6
   1915c:	f7ff ff42 	bl	18fe4 <gatt_delayed_store_find>
   19160:	4605      	mov	r5, r0
	if (bonded) {
   19162:	b3b4      	cbz	r4, 191d2 <gatt_delayed_store_enqueue+0x8a>
		if (el == NULL) {
   19164:	b9a8      	cbnz	r0, 19192 <gatt_delayed_store_enqueue+0x4a>
		if (atomic_get(el->flags) == 0) {
   19166:	481c      	ldr	r0, [pc, #112]	; (191d8 <gatt_delayed_store_enqueue+0x90>)
   19168:	f019 f843 	bl	321f2 <atomic_get>
   1916c:	4a1b      	ldr	r2, [pc, #108]	; (191dc <gatt_delayed_store_enqueue+0x94>)
   1916e:	4604      	mov	r4, r0
   19170:	b1f0      	cbz	r0, 191b0 <gatt_delayed_store_enqueue+0x68>
   19172:	f102 0014 	add.w	r0, r2, #20
   19176:	f019 f83c 	bl	321f2 <atomic_get>
   1917a:	b9d8      	cbnz	r0, 191b4 <gatt_delayed_store_enqueue+0x6c>
	for (size_t i = 0; i < ARRAY_SIZE(gatt_delayed_store.peer_list); i++) {
   1917c:	2401      	movs	r4, #1
		el = &gatt_delayed_store.peer_list[i];
   1917e:	f102 050c 	add.w	r5, r2, #12
			bt_addr_le_copy(&el->peer, peer_addr);
   19182:	230c      	movs	r3, #12
   19184:	435c      	muls	r4, r3
   19186:	1c60      	adds	r0, r4, #1
   19188:	4639      	mov	r1, r7
   1918a:	4410      	add	r0, r2
   1918c:	f019 f8db 	bl	32346 <bt_addr_le_copy>
			el->id = id;
   19190:	5516      	strb	r6, [r2, r4]
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   19192:	2101      	movs	r1, #1
   19194:	f105 0008 	add.w	r0, r5, #8
   19198:	fa01 f108 	lsl.w	r1, r1, r8
   1919c:	f019 f813 	bl	321c6 <atomic_or>
}
   191a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_reschedule(&gatt_delayed_store.work,
   191a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   191a8:	2300      	movs	r3, #0
   191aa:	480d      	ldr	r0, [pc, #52]	; (191e0 <gatt_delayed_store_enqueue+0x98>)
   191ac:	f010 bf8e 	b.w	2a0cc <k_work_reschedule>
		el = &gatt_delayed_store.peer_list[i];
   191b0:	4615      	mov	r5, r2
   191b2:	e7e6      	b.n	19182 <gatt_delayed_store_enqueue+0x3a>
			__ASSERT(el != NULL, "Can't save CF / CCC to flash");
   191b4:	490b      	ldr	r1, [pc, #44]	; (191e4 <gatt_delayed_store_enqueue+0x9c>)
   191b6:	f240 5396 	movw	r3, #1430	; 0x596
   191ba:	4a0b      	ldr	r2, [pc, #44]	; (191e8 <gatt_delayed_store_enqueue+0xa0>)
   191bc:	480b      	ldr	r0, [pc, #44]	; (191ec <gatt_delayed_store_enqueue+0xa4>)
   191be:	f016 f901 	bl	2f3c4 <assert_print>
   191c2:	480b      	ldr	r0, [pc, #44]	; (191f0 <gatt_delayed_store_enqueue+0xa8>)
   191c4:	f016 f8fe 	bl	2f3c4 <assert_print>
   191c8:	f240 5196 	movw	r1, #1430	; 0x596
   191cc:	4806      	ldr	r0, [pc, #24]	; (191e8 <gatt_delayed_store_enqueue+0xa0>)
   191ce:	f016 f8f2 	bl	2f3b6 <assert_post_action>
}
   191d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   191d6:	bf00      	nop
   191d8:	2000da48 	.word	0x2000da48
   191dc:	2000da40 	.word	0x2000da40
   191e0:	2000da58 	.word	0x2000da58
   191e4:	0003ce7a 	.word	0x0003ce7a
   191e8:	0003ce4a 	.word	0x0003ce4a
   191ec:	00039995 	.word	0x00039995
   191f0:	0003ce8c 	.word	0x0003ce8c

000191f4 <ccc_load>:
{
   191f4:	b570      	push	{r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   191f6:	4b20      	ldr	r3, [pc, #128]	; (19278 <ccc_load+0x84>)
{
   191f8:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   191fa:	6882      	ldr	r2, [r0, #8]
   191fc:	429a      	cmp	r2, r3
   191fe:	d10f      	bne.n	19220 <ccc_load+0x2c>
	if (!load->entry) {
   19200:	68a5      	ldr	r5, [r4, #8]
	ccc = attr->user_data;
   19202:	68c6      	ldr	r6, [r0, #12]
	if (!load->entry) {
   19204:	b975      	cbnz	r5, 19224 <ccc_load+0x30>
	cfg = ccc_find_cfg(ccc, addr, id);
   19206:	7922      	ldrb	r2, [r4, #4]
   19208:	4630      	mov	r0, r6
   1920a:	6821      	ldr	r1, [r4, #0]
   1920c:	f018 ffcc 	bl	321a8 <ccc_find_cfg>
	if (!cfg) {
   19210:	4602      	mov	r2, r0
   19212:	b128      	cbz	r0, 19220 <ccc_load+0x2c>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   19214:	4919      	ldr	r1, [pc, #100]	; (1927c <ccc_load+0x88>)
   19216:	3001      	adds	r0, #1
   19218:	f019 f895 	bl	32346 <bt_addr_le_copy>
	cfg->id = 0U;
   1921c:	7015      	strb	r5, [r2, #0]
	cfg->value = 0U;
   1921e:	8115      	strh	r5, [r2, #8]
		return BT_GATT_ITER_CONTINUE;
   19220:	2001      	movs	r0, #1
}
   19222:	bd70      	pop	{r4, r5, r6, pc}
	} else if (!load->count) {
   19224:	68e0      	ldr	r0, [r4, #12]
   19226:	2800      	cmp	r0, #0
   19228:	d0fb      	beq.n	19222 <ccc_load+0x2e>
	if (load->entry->handle != handle) {
   1922a:	882b      	ldrh	r3, [r5, #0]
   1922c:	428b      	cmp	r3, r1
   1922e:	d00a      	beq.n	19246 <ccc_load+0x52>
		if (load->entry->handle < handle) {
   19230:	d2f6      	bcs.n	19220 <ccc_load+0x2c>
	load->count--;
   19232:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
   19234:	68a3      	ldr	r3, [r4, #8]
	load->count--;
   19236:	3801      	subs	r0, #1
	load->entry++;
   19238:	3304      	adds	r3, #4
	load->count--;
   1923a:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1923c:	3800      	subs	r0, #0
   1923e:	bf18      	it	ne
   19240:	2001      	movne	r0, #1
	load->entry++;
   19242:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   19244:	e7ed      	b.n	19222 <ccc_load+0x2e>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   19246:	6825      	ldr	r5, [r4, #0]
   19248:	7922      	ldrb	r2, [r4, #4]
   1924a:	4629      	mov	r1, r5
   1924c:	4630      	mov	r0, r6
   1924e:	f018 ffab 	bl	321a8 <ccc_find_cfg>
	if (!cfg) {
   19252:	4602      	mov	r2, r0
   19254:	b960      	cbnz	r0, 19270 <ccc_load+0x7c>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   19256:	4630      	mov	r0, r6
   19258:	4908      	ldr	r1, [pc, #32]	; (1927c <ccc_load+0x88>)
   1925a:	f018 ffa5 	bl	321a8 <ccc_find_cfg>
		if (!cfg) {
   1925e:	4602      	mov	r2, r0
   19260:	2800      	cmp	r0, #0
   19262:	d0e6      	beq.n	19232 <ccc_load+0x3e>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   19264:	4629      	mov	r1, r5
   19266:	3001      	adds	r0, #1
   19268:	f019 f86d 	bl	32346 <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
   1926c:	7923      	ldrb	r3, [r4, #4]
   1926e:	7013      	strb	r3, [r2, #0]
	cfg->value = load->entry->value;
   19270:	68a3      	ldr	r3, [r4, #8]
   19272:	885b      	ldrh	r3, [r3, #2]
   19274:	8113      	strh	r3, [r2, #8]
   19276:	e7dc      	b.n	19232 <ccc_load+0x3e>
   19278:	00019899 	.word	0x00019899
   1927c:	0003b6d4 	.word	0x0003b6d4

00019280 <gatt_sub_free>:
{
   19280:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(gatt_sub_is_empty(sub));
   19282:	6883      	ldr	r3, [r0, #8]
   19284:	b15b      	cbz	r3, 1929e <gatt_sub_free+0x1e>
   19286:	4909      	ldr	r1, [pc, #36]	; (192ac <gatt_sub_free+0x2c>)
   19288:	4809      	ldr	r0, [pc, #36]	; (192b0 <gatt_sub_free+0x30>)
   1928a:	f640 5371 	movw	r3, #3441	; 0xd71
   1928e:	4a09      	ldr	r2, [pc, #36]	; (192b4 <gatt_sub_free+0x34>)
   19290:	f016 f898 	bl	2f3c4 <assert_print>
   19294:	f640 5171 	movw	r1, #3441	; 0xd71
   19298:	4806      	ldr	r0, [pc, #24]	; (192b4 <gatt_sub_free+0x34>)
   1929a:	f016 f88c 	bl	2f3b6 <assert_post_action>
	bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   1929e:	4906      	ldr	r1, [pc, #24]	; (192b8 <gatt_sub_free+0x38>)
   192a0:	3001      	adds	r0, #1
}
   192a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   192a6:	f019 b84e 	b.w	32346 <bt_addr_le_copy>
   192aa:	bf00      	nop
   192ac:	0003ceab 	.word	0x0003ceab
   192b0:	00039995 	.word	0x00039995
   192b4:	0003ce4a 	.word	0x0003ce4a
   192b8:	0003b6d4 	.word	0x0003b6d4

000192bc <ccc_set_direct.part.0>:
static int ccc_set_direct(const char *key, size_t len, settings_read_cb read_cb,
   192bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
			LOG_ERR("Invalid key");
   192be:	4b07      	ldr	r3, [pc, #28]	; (192dc <ccc_set_direct.part.0+0x20>)
   192c0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   192c4:	9305      	str	r3, [sp, #20]
   192c6:	2302      	movs	r3, #2
   192c8:	4805      	ldr	r0, [pc, #20]	; (192e0 <ccc_set_direct.part.0+0x24>)
   192ca:	aa04      	add	r2, sp, #16
   192cc:	9304      	str	r3, [sp, #16]
   192ce:	f019 f8ee 	bl	324ae <z_log_msg_static_create.constprop.0>
}
   192d2:	f06f 0015 	mvn.w	r0, #21
   192d6:	b007      	add	sp, #28
   192d8:	f85d fb04 	ldr.w	pc, [sp], #4
   192dc:	0003cec2 	.word	0x0003cec2
   192e0:	000378e0 	.word	0x000378e0

000192e4 <sc_set>:
}

#if defined(CONFIG_BT_GATT_SERVICE_CHANGED)
static int sc_set(const char *name, size_t len_rd, settings_read_cb read_cb,
		  void *cb_arg)
{
   192e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   192e8:	b08b      	sub	sp, #44	; 0x2c
   192ea:	460e      	mov	r6, r1
   192ec:	4690      	mov	r8, r2
   192ee:	4699      	mov	r9, r3
	bt_addr_le_t addr;
	ssize_t len;
	int err;
	const char *next;

	if (!name) {
   192f0:	4604      	mov	r4, r0
{
   192f2:	af00      	add	r7, sp, #0
	if (!name) {
   192f4:	b988      	cbnz	r0, 1931a <sc_set+0x36>
		LOG_ERR("Insufficient number of arguments");
   192f6:	4b43      	ldr	r3, [pc, #268]	; (19404 <sc_set+0x120>)
   192f8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   192fc:	627b      	str	r3, [r7, #36]	; 0x24
   192fe:	2302      	movs	r3, #2
   19300:	4841      	ldr	r0, [pc, #260]	; (19408 <sc_set+0x124>)
   19302:	623b      	str	r3, [r7, #32]
   19304:	f107 0220 	add.w	r2, r7, #32
   19308:	f019 f8d1 	bl	324ae <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   1930c:	f06f 0515 	mvn.w	r5, #21

		LOG_DBG("Removed SC for %s", bt_addr_le_str(&addr));
	}

	return 0;
}
   19310:	4628      	mov	r0, r5
   19312:	372c      	adds	r7, #44	; 0x2c
   19314:	46bd      	mov	sp, r7
   19316:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   1931a:	f107 0108 	add.w	r1, r7, #8
   1931e:	f017 fd30 	bl	30d82 <bt_settings_decode_key>
	if (err) {
   19322:	4605      	mov	r5, r0
   19324:	b190      	cbz	r0, 1934c <sc_set+0x68>
		LOG_ERR("Unable to decode address %s", name);
   19326:	466d      	mov	r5, sp
   19328:	b088      	sub	sp, #32
   1932a:	466a      	mov	r2, sp
   1932c:	4b37      	ldr	r3, [pc, #220]	; (1940c <sc_set+0x128>)
   1932e:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   19332:	e9c2 3405 	strd	r3, r4, [r2, #20]
   19336:	f44f 7300 	mov.w	r3, #512	; 0x200
   1933a:	8393      	strh	r3, [r2, #28]
   1933c:	4b34      	ldr	r3, [pc, #208]	; (19410 <sc_set+0x12c>)
   1933e:	4832      	ldr	r0, [pc, #200]	; (19408 <sc_set+0x124>)
   19340:	f842 3f10 	str.w	r3, [r2, #16]!
   19344:	f019 f8b3 	bl	324ae <z_log_msg_static_create.constprop.0>
   19348:	46ad      	mov	sp, r5
		return -EINVAL;
   1934a:	e7df      	b.n	1930c <sc_set+0x28>
	settings_name_next(name, &next);
   1934c:	4620      	mov	r0, r4
   1934e:	1d39      	adds	r1, r7, #4
   19350:	f016 fde0 	bl	2ff14 <settings_name_next>
	if (!next) {
   19354:	6878      	ldr	r0, [r7, #4]
   19356:	b1a0      	cbz	r0, 19382 <sc_set+0x9e>
		unsigned long next_id = strtoul(next, NULL, 10);
   19358:	220a      	movs	r2, #10
   1935a:	4629      	mov	r1, r5
   1935c:	f013 fede 	bl	2d11c <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   19360:	b178      	cbz	r0, 19382 <sc_set+0x9e>
			LOG_ERR("Invalid local identity %lu", next_id);
   19362:	466c      	mov	r4, sp
   19364:	b088      	sub	sp, #32
   19366:	466a      	mov	r2, sp
   19368:	4b2a      	ldr	r3, [pc, #168]	; (19414 <sc_set+0x130>)
   1936a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1936e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   19372:	2303      	movs	r3, #3
   19374:	4824      	ldr	r0, [pc, #144]	; (19408 <sc_set+0x124>)
   19376:	f842 3f10 	str.w	r3, [r2, #16]!
   1937a:	f019 f898 	bl	324ae <z_log_msg_static_create.constprop.0>
   1937e:	46a5      	mov	sp, r4
			return -EINVAL;
   19380:	e7c4      	b.n	1930c <sc_set+0x28>
	cfg = find_sc_cfg(id, &addr);
   19382:	2000      	movs	r0, #0
   19384:	f107 0108 	add.w	r1, r7, #8
   19388:	f7ff fe4e 	bl	19028 <find_sc_cfg>
	if (!cfg && len_rd) {
   1938c:	4604      	mov	r4, r0
   1938e:	bb98      	cbnz	r0, 193f8 <sc_set+0x114>
   19390:	2e00      	cmp	r6, #0
   19392:	d0bd      	beq.n	19310 <sc_set+0x2c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   19394:	4920      	ldr	r1, [pc, #128]	; (19418 <sc_set+0x134>)
   19396:	f7ff fe47 	bl	19028 <find_sc_cfg>
		if (!cfg) {
   1939a:	4604      	mov	r4, r0
   1939c:	b968      	cbnz	r0, 193ba <sc_set+0xd6>
			LOG_ERR("Unable to restore SC: no cfg left");
   1939e:	4b1f      	ldr	r3, [pc, #124]	; (1941c <sc_set+0x138>)
   193a0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   193a4:	627b      	str	r3, [r7, #36]	; 0x24
   193a6:	2302      	movs	r3, #2
   193a8:	4817      	ldr	r0, [pc, #92]	; (19408 <sc_set+0x124>)
   193aa:	623b      	str	r3, [r7, #32]
   193ac:	f107 0220 	add.w	r2, r7, #32
   193b0:	f019 f87d 	bl	324ae <z_log_msg_static_create.constprop.0>
			return -ENOMEM;
   193b4:	f06f 050b 	mvn.w	r5, #11
   193b8:	e7aa      	b.n	19310 <sc_set+0x2c>
		cfg->id = id;
   193ba:	2300      	movs	r3, #0
		bt_addr_le_copy(&cfg->peer, &addr);
   193bc:	f107 0108 	add.w	r1, r7, #8
		cfg->id = id;
   193c0:	f800 3b01 	strb.w	r3, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   193c4:	f018 ffbf 	bl	32346 <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   193c8:	f104 0108 	add.w	r1, r4, #8
   193cc:	2204      	movs	r2, #4
   193ce:	4648      	mov	r0, r9
   193d0:	47c0      	blx	r8
		if (len < 0) {
   193d2:	1e04      	subs	r4, r0, #0
   193d4:	da9c      	bge.n	19310 <sc_set+0x2c>
			LOG_ERR("Failed to decode value (err %zd)", len);
   193d6:	466d      	mov	r5, sp
   193d8:	b088      	sub	sp, #32
   193da:	466a      	mov	r2, sp
   193dc:	4b10      	ldr	r3, [pc, #64]	; (19420 <sc_set+0x13c>)
   193de:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   193e2:	e9c2 3405 	strd	r3, r4, [r2, #20]
   193e6:	2303      	movs	r3, #3
   193e8:	4807      	ldr	r0, [pc, #28]	; (19408 <sc_set+0x124>)
   193ea:	f842 3f10 	str.w	r3, [r2, #16]!
   193ee:	f019 f85e 	bl	324ae <z_log_msg_static_create.constprop.0>
   193f2:	46ad      	mov	sp, r5
			return len;
   193f4:	4625      	mov	r5, r4
   193f6:	e78b      	b.n	19310 <sc_set+0x2c>
	if (len_rd) {
   193f8:	2e00      	cmp	r6, #0
   193fa:	d1e5      	bne.n	193c8 <sc_set+0xe4>
   193fc:	6006      	str	r6, [r0, #0]
   193fe:	6046      	str	r6, [r0, #4]
   19400:	6086      	str	r6, [r0, #8]
   19402:	e785      	b.n	19310 <sc_set+0x2c>
   19404:	0003b72a 	.word	0x0003b72a
   19408:	000378e0 	.word	0x000378e0
   1940c:	0003cece 	.word	0x0003cece
   19410:	01000003 	.word	0x01000003
   19414:	0003ceea 	.word	0x0003ceea
   19418:	0003b6d4 	.word	0x0003b6d4
   1941c:	0003cf05 	.word	0x0003cf05
   19420:	0003cf27 	.word	0x0003cf27

00019424 <bt_gatt_clear_sc>:
{
   19424:	b5b0      	push	{r4, r5, r7, lr}
   19426:	b08c      	sub	sp, #48	; 0x30
   19428:	af02      	add	r7, sp, #8
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   1942a:	f7ff fdfd 	bl	19028 <find_sc_cfg>
	if (!cfg) {
   1942e:	4604      	mov	r4, r0
   19430:	b320      	cbz	r0, 1947c <bt_gatt_clear_sc+0x58>
		if (cfg->id) {
   19432:	4605      	mov	r5, r0
   19434:	f815 2b01 	ldrb.w	r2, [r5], #1
   19438:	b322      	cbz	r2, 19484 <bt_gatt_clear_sc+0x60>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   1943a:	2104      	movs	r1, #4
   1943c:	4638      	mov	r0, r7
   1943e:	f015 fd45 	bl	2eecc <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   19442:	9700      	str	r7, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
   19444:	1d38      	adds	r0, r7, #4
   19446:	462b      	mov	r3, r5
   19448:	2124      	movs	r1, #36	; 0x24
   1944a:	4a0f      	ldr	r2, [pc, #60]	; (19488 <bt_gatt_clear_sc+0x64>)
   1944c:	f7fa faa8 	bl	139a0 <bt_settings_encode_key>
		err = settings_delete(key);
   19450:	1d38      	adds	r0, r7, #4
   19452:	f016 fd37 	bl	2fec4 <settings_delete>
		if (err) {
   19456:	b170      	cbz	r0, 19476 <bt_gatt_clear_sc+0x52>
			LOG_ERR("failed to delete SC (err %d)", err);
   19458:	466d      	mov	r5, sp
   1945a:	b088      	sub	sp, #32
   1945c:	aa02      	add	r2, sp, #8
   1945e:	4b0b      	ldr	r3, [pc, #44]	; (1948c <bt_gatt_clear_sc+0x68>)
   19460:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19464:	e9c2 3005 	strd	r3, r0, [r2, #20]
   19468:	2303      	movs	r3, #3
   1946a:	4809      	ldr	r0, [pc, #36]	; (19490 <bt_gatt_clear_sc+0x6c>)
   1946c:	f842 3f10 	str.w	r3, [r2, #16]!
   19470:	f019 f81d 	bl	324ae <z_log_msg_static_create.constprop.0>
   19474:	46ad      	mov	sp, r5
	clear_sc_cfg(cfg);
   19476:	4620      	mov	r0, r4
   19478:	f018 ff8c 	bl	32394 <clear_sc_cfg>
}
   1947c:	2000      	movs	r0, #0
   1947e:	3728      	adds	r7, #40	; 0x28
   19480:	46bd      	mov	sp, r7
   19482:	bdb0      	pop	{r4, r5, r7, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   19484:	9200      	str	r2, [sp, #0]
   19486:	e7dd      	b.n	19444 <bt_gatt_clear_sc+0x20>
   19488:	0003d52d 	.word	0x0003d52d
   1948c:	0003cf48 	.word	0x0003cf48
   19490:	000378e0 	.word	0x000378e0

00019494 <sc_clear>:
{
   19494:	b5b0      	push	{r4, r5, r7, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   19496:	f100 0590 	add.w	r5, r0, #144	; 0x90
{
   1949a:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1949c:	4629      	mov	r1, r5
   1949e:	7a00      	ldrb	r0, [r0, #8]
{
   194a0:	af00      	add	r7, sp, #0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   194a2:	f017 fdfc 	bl	3109e <bt_addr_le_is_bonded>
   194a6:	4603      	mov	r3, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   194a8:	4629      	mov	r1, r5
   194aa:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   194ac:	b19b      	cbz	r3, 194d6 <sc_clear+0x42>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   194ae:	f7ff ffb9 	bl	19424 <bt_gatt_clear_sc>
		if (err) {
   194b2:	b170      	cbz	r0, 194d2 <sc_clear+0x3e>
			LOG_ERR("Failed to clear SC %d", err);
   194b4:	466c      	mov	r4, sp
   194b6:	b088      	sub	sp, #32
   194b8:	466a      	mov	r2, sp
   194ba:	4b0a      	ldr	r3, [pc, #40]	; (194e4 <sc_clear+0x50>)
   194bc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   194c0:	e9c2 3005 	strd	r3, r0, [r2, #20]
   194c4:	2303      	movs	r3, #3
   194c6:	4808      	ldr	r0, [pc, #32]	; (194e8 <sc_clear+0x54>)
   194c8:	f842 3f10 	str.w	r3, [r2, #16]!
   194cc:	f018 ffef 	bl	324ae <z_log_msg_static_create.constprop.0>
   194d0:	46a5      	mov	sp, r4
}
   194d2:	46bd      	mov	sp, r7
   194d4:	bdb0      	pop	{r4, r5, r7, pc}
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   194d6:	f7ff fda7 	bl	19028 <find_sc_cfg>
		if (cfg) {
   194da:	2800      	cmp	r0, #0
   194dc:	d0f9      	beq.n	194d2 <sc_clear+0x3e>
			clear_sc_cfg(cfg);
   194de:	f018 ff59 	bl	32394 <clear_sc_cfg>
}
   194e2:	e7f6      	b.n	194d2 <sc_clear+0x3e>
   194e4:	0003cf65 	.word	0x0003cf65
   194e8:	000378e0 	.word	0x000378e0

000194ec <gatt_write_ccc_rsp>:
{
   194ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   194ee:	460e      	mov	r6, r1
   194f0:	b087      	sub	sp, #28
   194f2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   194f4:	4605      	mov	r5, r0
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   194f6:	f06f 0104 	mvn.w	r1, #4
   194fa:	f104 0014 	add.w	r0, r4, #20
   194fe:	f018 fe6d 	bl	321dc <atomic_and>
	if (err) {
   19502:	b316      	cbz	r6, 1954a <gatt_write_ccc_rsp+0x5e>
		sub = gatt_sub_find(conn);
   19504:	4628      	mov	r0, r5
   19506:	f7ff fdf1 	bl	190ec <gatt_sub_find>
		if (!sub) {
   1950a:	4601      	mov	r1, r0
   1950c:	2800      	cmp	r0, #0
   1950e:	d037      	beq.n	19580 <gatt_write_ccc_rsp+0x94>
	return list->head;
   19510:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   19512:	b14b      	cbz	r3, 19528 <gatt_write_ccc_rsp+0x3c>
	return node->next;
   19514:	681a      	ldr	r2, [r3, #0]
			if (node == &params->node) {
   19516:	f104 0718 	add.w	r7, r4, #24
		SYS_SLIST_FOR_EACH_NODE_SAFE(&sub->list, node, tmp) {
   1951a:	b12b      	cbz	r3, 19528 <gatt_write_ccc_rsp+0x3c>
			if (node == &params->node) {
   1951c:	42bb      	cmp	r3, r7
   1951e:	d10d      	bne.n	1953c <gatt_write_ccc_rsp+0x50>
				gatt_sub_remove(conn, sub, tmp, params);
   19520:	4623      	mov	r3, r4
   19522:	4628      	mov	r0, r5
   19524:	f018 ff16 	bl	32354 <gatt_sub_remove>
	if (params->subscribe) {
   19528:	6867      	ldr	r7, [r4, #4]
   1952a:	b1c7      	cbz	r7, 1955e <gatt_write_ccc_rsp+0x72>
		params->subscribe(conn, err, params);
   1952c:	4622      	mov	r2, r4
   1952e:	4631      	mov	r1, r6
   19530:	4628      	mov	r0, r5
   19532:	463b      	mov	r3, r7
}
   19534:	b007      	add	sp, #28
   19536:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		params->write(conn, err, NULL);
   1953a:	4718      	bx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   1953c:	b11a      	cbz	r2, 19546 <gatt_write_ccc_rsp+0x5a>
	return node->next;
   1953e:	6810      	ldr	r0, [r2, #0]
Z_GENLIST_PEEK_NEXT(slist, snode)
   19540:	4613      	mov	r3, r2
   19542:	4602      	mov	r2, r0
   19544:	e7e9      	b.n	1951a <gatt_write_ccc_rsp+0x2e>
   19546:	4610      	mov	r0, r2
   19548:	e7fa      	b.n	19540 <gatt_write_ccc_rsp+0x54>
	} else if (!params->value) {
   1954a:	8a23      	ldrh	r3, [r4, #16]
   1954c:	2b00      	cmp	r3, #0
   1954e:	d1eb      	bne.n	19528 <gatt_write_ccc_rsp+0x3c>
		params->notify(conn, params, NULL, 0);
   19550:	4633      	mov	r3, r6
   19552:	4632      	mov	r2, r6
   19554:	4621      	mov	r1, r4
   19556:	4628      	mov	r0, r5
   19558:	6827      	ldr	r7, [r4, #0]
   1955a:	47b8      	blx	r7
   1955c:	e7e4      	b.n	19528 <gatt_write_ccc_rsp+0x3c>
	} else if (params->write) {
   1955e:	68a3      	ldr	r3, [r4, #8]
   19560:	b173      	cbz	r3, 19580 <gatt_write_ccc_rsp+0x94>
		LOG_WRN("write callback is deprecated, use subscribe cb instead");
   19562:	4b08      	ldr	r3, [pc, #32]	; (19584 <gatt_write_ccc_rsp+0x98>)
   19564:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   19568:	9305      	str	r3, [sp, #20]
   1956a:	2302      	movs	r3, #2
   1956c:	4806      	ldr	r0, [pc, #24]	; (19588 <gatt_write_ccc_rsp+0x9c>)
   1956e:	aa04      	add	r2, sp, #16
   19570:	9304      	str	r3, [sp, #16]
   19572:	f018 ff9c 	bl	324ae <z_log_msg_static_create.constprop.0>
		params->write(conn, err, NULL);
   19576:	463a      	mov	r2, r7
   19578:	4631      	mov	r1, r6
   1957a:	4628      	mov	r0, r5
   1957c:	68a3      	ldr	r3, [r4, #8]
   1957e:	e7d9      	b.n	19534 <gatt_write_ccc_rsp+0x48>
}
   19580:	b007      	add	sp, #28
   19582:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19584:	0003cf7b 	.word	0x0003cf7b
   19588:	000378e0 	.word	0x000378e0

0001958c <sc_store>:
{
   1958c:	b5b0      	push	{r4, r5, r7, lr}
   1958e:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
   19590:	4605      	mov	r5, r0
   19592:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   19596:	4604      	mov	r4, r0
   19598:	af02      	add	r7, sp, #8
	if (cfg->id) {
   1959a:	b31a      	cbz	r2, 195e4 <sc_store+0x58>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   1959c:	2104      	movs	r1, #4
   1959e:	4638      	mov	r0, r7
   195a0:	f015 fc94 	bl	2eecc <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   195a4:	9700      	str	r7, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
   195a6:	2124      	movs	r1, #36	; 0x24
   195a8:	4a0f      	ldr	r2, [pc, #60]	; (195e8 <sc_store+0x5c>)
   195aa:	1d38      	adds	r0, r7, #4
   195ac:	462b      	mov	r3, r5
   195ae:	f7fa f9f7 	bl	139a0 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   195b2:	2204      	movs	r2, #4
   195b4:	f104 0108 	add.w	r1, r4, #8
   195b8:	18b8      	adds	r0, r7, r2
   195ba:	f7f7 fd51 	bl	11060 <settings_save_one>
	if (err) {
   195be:	b170      	cbz	r0, 195de <sc_store+0x52>
		LOG_ERR("failed to store SC (err %d)", err);
   195c0:	466c      	mov	r4, sp
   195c2:	b088      	sub	sp, #32
   195c4:	aa02      	add	r2, sp, #8
   195c6:	4b09      	ldr	r3, [pc, #36]	; (195ec <sc_store+0x60>)
   195c8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   195cc:	e9c2 3005 	strd	r3, r0, [r2, #20]
   195d0:	2303      	movs	r3, #3
   195d2:	4807      	ldr	r0, [pc, #28]	; (195f0 <sc_store+0x64>)
   195d4:	f842 3f10 	str.w	r3, [r2, #16]!
   195d8:	f018 ff69 	bl	324ae <z_log_msg_static_create.constprop.0>
   195dc:	46a5      	mov	sp, r4
}
   195de:	3728      	adds	r7, #40	; 0x28
   195e0:	46bd      	mov	sp, r7
   195e2:	bdb0      	pop	{r4, r5, r7, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   195e4:	9200      	str	r2, [sp, #0]
   195e6:	e7de      	b.n	195a6 <sc_store+0x1a>
   195e8:	0003d52d 	.word	0x0003d52d
   195ec:	0003cfb2 	.word	0x0003cfb2
   195f0:	000378e0 	.word	0x000378e0

000195f4 <sc_save>:
{
   195f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   195f8:	b086      	sub	sp, #24
   195fa:	4680      	mov	r8, r0
   195fc:	460f      	mov	r7, r1
   195fe:	4616      	mov	r6, r2
   19600:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   19602:	f7ff fd11 	bl	19028 <find_sc_cfg>
	if (!cfg) {
   19606:	4604      	mov	r4, r0
   19608:	b9b0      	cbnz	r0, 19638 <sc_save+0x44>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1960a:	4919      	ldr	r1, [pc, #100]	; (19670 <sc_save+0x7c>)
   1960c:	f7ff fd0c 	bl	19028 <find_sc_cfg>
		if (!cfg) {
   19610:	4604      	mov	r4, r0
   19612:	b960      	cbnz	r0, 1962e <sc_save+0x3a>
			LOG_ERR("unable to save SC: no cfg left");
   19614:	4b17      	ldr	r3, [pc, #92]	; (19674 <sc_save+0x80>)
   19616:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1961a:	9305      	str	r3, [sp, #20]
   1961c:	2302      	movs	r3, #2
   1961e:	4816      	ldr	r0, [pc, #88]	; (19678 <sc_save+0x84>)
   19620:	aa04      	add	r2, sp, #16
   19622:	9304      	str	r3, [sp, #16]
   19624:	f018 ff43 	bl	324ae <z_log_msg_static_create.constprop.0>
}
   19628:	b006      	add	sp, #24
   1962a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_addr_le_copy(&cfg->peer, peer);
   1962e:	4639      	mov	r1, r7
		cfg->id = id;
   19630:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   19634:	f018 fe87 	bl	32346 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   19638:	8922      	ldrh	r2, [r4, #8]
   1963a:	8963      	ldrh	r3, [r4, #10]
   1963c:	b97a      	cbnz	r2, 1965e <sc_save+0x6a>
   1963e:	b983      	cbnz	r3, 19662 <sc_save+0x6e>
		cfg->data.start = start;
   19640:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   19642:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   19644:	4621      	mov	r1, r4
   19646:	f811 0b01 	ldrb.w	r0, [r1], #1
   1964a:	f017 fd28 	bl	3109e <bt_addr_le_is_bonded>
   1964e:	2800      	cmp	r0, #0
   19650:	d0ea      	beq.n	19628 <sc_save+0x34>
		sc_store(cfg);
   19652:	4620      	mov	r0, r4
}
   19654:	b006      	add	sp, #24
   19656:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		sc_store(cfg);
   1965a:	f7ff bf97 	b.w	1958c <sc_store>
	if (new_start >= *start && new_end <= *end) {
   1965e:	4296      	cmp	r6, r2
   19660:	d302      	bcc.n	19668 <sc_save+0x74>
   19662:	429d      	cmp	r5, r3
   19664:	d8ed      	bhi.n	19642 <sc_save+0x4e>
   19666:	e7df      	b.n	19628 <sc_save+0x34>
	if (*end < new_end) {
   19668:	429d      	cmp	r5, r3
		*start = new_start;
   1966a:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   1966c:	d9ea      	bls.n	19644 <sc_save+0x50>
   1966e:	e7e8      	b.n	19642 <sc_save+0x4e>
   19670:	0003b6d4 	.word	0x0003b6d4
   19674:	0003cfce 	.word	0x0003cfce
   19678:	000378e0 	.word	0x000378e0

0001967c <db_hash_store>:
{
   1967c:	b598      	push	{r3, r4, r7, lr}
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   1967e:	2210      	movs	r2, #16
{
   19680:	af00      	add	r7, sp, #0
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   19682:	490b      	ldr	r1, [pc, #44]	; (196b0 <db_hash_store+0x34>)
   19684:	480b      	ldr	r0, [pc, #44]	; (196b4 <db_hash_store+0x38>)
   19686:	f7f7 fceb 	bl	11060 <settings_save_one>
	if (err) {
   1968a:	b170      	cbz	r0, 196aa <db_hash_store+0x2e>
		LOG_ERR("Failed to save Database Hash (err %d)", err);
   1968c:	466c      	mov	r4, sp
   1968e:	b088      	sub	sp, #32
   19690:	466a      	mov	r2, sp
   19692:	4b09      	ldr	r3, [pc, #36]	; (196b8 <db_hash_store+0x3c>)
   19694:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19698:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1969c:	2303      	movs	r3, #3
   1969e:	4807      	ldr	r0, [pc, #28]	; (196bc <db_hash_store+0x40>)
   196a0:	f842 3f10 	str.w	r3, [r2, #16]!
   196a4:	f018 ff03 	bl	324ae <z_log_msg_static_create.constprop.0>
   196a8:	46a5      	mov	sp, r4
}
   196aa:	46bd      	mov	sp, r7
   196ac:	bd98      	pop	{r3, r4, r7, pc}
   196ae:	bf00      	nop
   196b0:	2000da88 	.word	0x2000da88
   196b4:	0003cfed 	.word	0x0003cfed
   196b8:	0003cff5 	.word	0x0003cff5
   196bc:	000378e0 	.word	0x000378e0

000196c0 <db_hash_set>:

SETTINGS_STATIC_HANDLER_DEFINE(bt_cf, "bt/cf", NULL, cf_set, NULL, NULL);

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
   196c0:	b5b0      	push	{r4, r5, r7, lr}
	ssize_t len;

	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   196c2:	4618      	mov	r0, r3
{
   196c4:	4614      	mov	r4, r2
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   196c6:	490d      	ldr	r1, [pc, #52]	; (196fc <db_hash_set+0x3c>)
   196c8:	2210      	movs	r2, #16
{
   196ca:	af00      	add	r7, sp, #0
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   196cc:	47a0      	blx	r4
	if (len < 0) {
   196ce:	1e04      	subs	r4, r0, #0
   196d0:	da11      	bge.n	196f6 <db_hash_set+0x36>
		LOG_ERR("Failed to decode value (err %zd)", len);
   196d2:	466d      	mov	r5, sp
   196d4:	b088      	sub	sp, #32
   196d6:	466a      	mov	r2, sp
   196d8:	4b09      	ldr	r3, [pc, #36]	; (19700 <db_hash_set+0x40>)
   196da:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   196de:	e9c2 3405 	strd	r3, r4, [r2, #20]
   196e2:	2303      	movs	r3, #3
   196e4:	4807      	ldr	r0, [pc, #28]	; (19704 <db_hash_set+0x44>)
   196e6:	f842 3f10 	str.w	r3, [r2, #16]!
   196ea:	f018 fee0 	bl	324ae <z_log_msg_static_create.constprop.0>
   196ee:	46ad      	mov	sp, r5
	}

	LOG_HEXDUMP_DBG(db_hash.stored_hash, sizeof(db_hash.stored_hash), "Stored Hash: ");

	return 0;
}
   196f0:	4620      	mov	r0, r4
   196f2:	46bd      	mov	sp, r7
   196f4:	bdb0      	pop	{r4, r5, r7, pc}
	return 0;
   196f6:	2400      	movs	r4, #0
   196f8:	e7fa      	b.n	196f0 <db_hash_set+0x30>
   196fa:	bf00      	nop
   196fc:	2000da98 	.word	0x2000da98
   19700:	0003cf27 	.word	0x0003cf27
   19704:	000378e0 	.word	0x000378e0

00019708 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   19708:	b508      	push	{r3, lr}
   1970a:	4613      	mov	r3, r2
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   1970c:	6881      	ldr	r1, [r0, #8]
   1970e:	4a07      	ldr	r2, [pc, #28]	; (1972c <remove_peer_from_attr+0x24>)
   19710:	4291      	cmp	r1, r2
   19712:	d109      	bne.n	19728 <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   19714:	791a      	ldrb	r2, [r3, #4]
   19716:	6819      	ldr	r1, [r3, #0]
   19718:	68c0      	ldr	r0, [r0, #12]
   1971a:	f018 fd45 	bl	321a8 <ccc_find_cfg>
	if (cfg) {
   1971e:	b118      	cbz	r0, 19728 <remove_peer_from_attr+0x20>
   19720:	2300      	movs	r3, #0
   19722:	6003      	str	r3, [r0, #0]
   19724:	6043      	str	r3, [r0, #4]
   19726:	8103      	strh	r3, [r0, #8]
		memset(cfg, 0, sizeof(*cfg));
	}

	return BT_GATT_ITER_CONTINUE;
}
   19728:	2001      	movs	r0, #1
   1972a:	bd08      	pop	{r3, pc}
   1972c:	00019899 	.word	0x00019899

00019730 <convert_to_id_on_match>:
{
   19730:	b538      	push	{r3, r4, r5, lr}
   19732:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   19734:	4b08      	ldr	r3, [pc, #32]	; (19758 <convert_to_id_on_match+0x28>)
   19736:	6882      	ldr	r2, [r0, #8]
   19738:	429a      	cmp	r2, r3
   1973a:	d10a      	bne.n	19752 <convert_to_id_on_match+0x22>
		if (bt_addr_le_eq(&ccc->cfg[i].peer, match->private_addr)) {
   1973c:	68c4      	ldr	r4, [r0, #12]
   1973e:	6829      	ldr	r1, [r5, #0]
   19740:	3401      	adds	r4, #1
   19742:	4620      	mov	r0, r4
   19744:	f018 fd28 	bl	32198 <bt_addr_le_eq>
   19748:	b118      	cbz	r0, 19752 <convert_to_id_on_match+0x22>
			bt_addr_le_copy(&ccc->cfg[i].peer, match->id_addr);
   1974a:	4620      	mov	r0, r4
   1974c:	6869      	ldr	r1, [r5, #4]
   1974e:	f018 fdfa 	bl	32346 <bt_addr_le_copy>
}
   19752:	2001      	movs	r0, #1
   19754:	bd38      	pop	{r3, r4, r5, pc}
   19756:	bf00      	nop
   19758:	00019899 	.word	0x00019899

0001975c <ccc_save>:
{
   1975c:	b538      	push	{r3, r4, r5, lr}
   1975e:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   19760:	4b0b      	ldr	r3, [pc, #44]	; (19790 <ccc_save+0x34>)
   19762:	6882      	ldr	r2, [r0, #8]
{
   19764:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
   19766:	429a      	cmp	r2, r3
   19768:	d10f      	bne.n	1978a <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   1976a:	7922      	ldrb	r2, [r4, #4]
   1976c:	6821      	ldr	r1, [r4, #0]
   1976e:	68c0      	ldr	r0, [r0, #12]
   19770:	f018 fd1a 	bl	321a8 <ccc_find_cfg>
	if (!cfg) {
   19774:	b148      	cbz	r0, 1978a <ccc_save+0x2e>
	save->store[save->count].handle = handle;
   19776:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
   1977a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
   1977e:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
   19780:	8901      	ldrh	r1, [r0, #8]
	save->count++;
   19782:	3301      	adds	r3, #1
	save->store[save->count].value = cfg->value;
   19784:	8151      	strh	r1, [r2, #10]
	save->count++;
   19786:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
   1978a:	2001      	movs	r0, #1
   1978c:	bd38      	pop	{r3, r4, r5, pc}
   1978e:	bf00      	nop
   19790:	00019899 	.word	0x00019899

00019794 <sc_commit.part.0>:
	k_work_reschedule(&gatt_sc.work, timeout);
   19794:	f44f 72a4 	mov.w	r2, #328	; 0x148
   19798:	2300      	movs	r3, #0
   1979a:	4801      	ldr	r0, [pc, #4]	; (197a0 <sc_commit.part.0+0xc>)
   1979c:	f010 bc96 	b.w	2a0cc <k_work_reschedule>
   197a0:	2000db20 	.word	0x2000db20

000197a4 <sc_commit>:
{
   197a4:	b508      	push	{r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   197a6:	2104      	movs	r1, #4
   197a8:	4808      	ldr	r0, [pc, #32]	; (197cc <sc_commit+0x28>)
   197aa:	f018 fd0c 	bl	321c6 <atomic_or>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   197ae:	f06f 0102 	mvn.w	r1, #2
   197b2:	4806      	ldr	r0, [pc, #24]	; (197cc <sc_commit+0x28>)
   197b4:	f018 fd12 	bl	321dc <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   197b8:	4804      	ldr	r0, [pc, #16]	; (197cc <sc_commit+0x28>)
   197ba:	f018 fd1a 	bl	321f2 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   197be:	07c3      	lsls	r3, r0, #31
   197c0:	d501      	bpl.n	197c6 <sc_commit+0x22>
   197c2:	f7ff ffe7 	bl	19794 <sc_commit.part.0>
}
   197c6:	2000      	movs	r0, #0
   197c8:	bd08      	pop	{r3, pc}
   197ca:	bf00      	nop
   197cc:	2000db50 	.word	0x2000db50

000197d0 <clear_cf_cfg>:
{
   197d0:	4602      	mov	r2, r0
   197d2:	b508      	push	{r3, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   197d4:	4907      	ldr	r1, [pc, #28]	; (197f4 <clear_cf_cfg+0x24>)
   197d6:	3001      	adds	r0, #1
   197d8:	f018 fdb5 	bl	32346 <bt_addr_le_copy>
   197dc:	2300      	movs	r3, #0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   197de:	320c      	adds	r2, #12
   197e0:	f802 3c04 	strb.w	r3, [r2, #-4]
   197e4:	e8d2 1fef 	ldaex	r1, [r2]
   197e8:	e8c2 3fe0 	stlex	r0, r3, [r2]
   197ec:	2800      	cmp	r0, #0
   197ee:	d1f9      	bne.n	197e4 <clear_cf_cfg+0x14>
}
   197f0:	bd08      	pop	{r3, pc}
   197f2:	bf00      	nop
   197f4:	0003b6d4 	.word	0x0003b6d4

000197f8 <disconnected_cb>:
{
   197f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   197fc:	4b23      	ldr	r3, [pc, #140]	; (1988c <disconnected_cb+0x94>)
{
   197fe:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   19800:	6882      	ldr	r2, [r0, #8]
{
   19802:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   19804:	429a      	cmp	r2, r3
   19806:	d102      	bne.n	1980e <disconnected_cb+0x16>
	ccc = attr->user_data;
   19808:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
   1980a:	8963      	ldrh	r3, [r4, #10]
   1980c:	bb33      	cbnz	r3, 1985c <disconnected_cb+0x64>
}
   1980e:	2001      	movs	r0, #1
   19810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				bt_conn_unref(tmp);
   19814:	f7fd fa36 	bl	16c84 <bt_conn_unref>
		ccc->value = 0U;
   19818:	2100      	movs	r1, #0
		if (ccc->cfg_changed) {
   1981a:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   1981c:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   1981e:	2b00      	cmp	r3, #0
   19820:	d0f5      	beq.n	1980e <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   19822:	4638      	mov	r0, r7
   19824:	4798      	blx	r3
   19826:	e7f2      	b.n	1980e <disconnected_cb+0x16>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   19828:	f105 0890 	add.w	r8, r5, #144	; 0x90
   1982c:	4641      	mov	r1, r8
   1982e:	7a28      	ldrb	r0, [r5, #8]
   19830:	f017 fc35 	bl	3109e <bt_addr_le_is_bonded>
   19834:	b968      	cbnz	r0, 19852 <disconnected_cb+0x5a>
				if (ccc == &sc_ccc) {
   19836:	4b16      	ldr	r3, [pc, #88]	; (19890 <disconnected_cb+0x98>)
   19838:	429c      	cmp	r4, r3
   1983a:	d102      	bne.n	19842 <disconnected_cb+0x4a>
					sc_clear(conn);
   1983c:	4628      	mov	r0, r5
   1983e:	f7ff fe29 	bl	19494 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   19842:	4630      	mov	r0, r6
   19844:	4913      	ldr	r1, [pc, #76]	; (19894 <disconnected_cb+0x9c>)
   19846:	f018 fd7e 	bl	32346 <bt_addr_le_copy>
	cfg->id = 0U;
   1984a:	2300      	movs	r3, #0
   1984c:	7023      	strb	r3, [r4, #0]
	cfg->value = 0U;
   1984e:	8123      	strh	r3, [r4, #8]
}
   19850:	e7e2      	b.n	19818 <disconnected_cb+0x20>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   19852:	4641      	mov	r1, r8
   19854:	4630      	mov	r0, r6
   19856:	f018 fd76 	bl	32346 <bt_addr_le_copy>
   1985a:	e7dd      	b.n	19818 <disconnected_cb+0x20>
		if (!cfg->value) {
   1985c:	8923      	ldrh	r3, [r4, #8]
   1985e:	2b00      	cmp	r3, #0
   19860:	d0da      	beq.n	19818 <disconnected_cb+0x20>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   19862:	4626      	mov	r6, r4
   19864:	f816 1b01 	ldrb.w	r1, [r6], #1
   19868:	4628      	mov	r0, r5
   1986a:	4632      	mov	r2, r6
   1986c:	f017 fe0c 	bl	31488 <bt_conn_is_peer_addr_le>
   19870:	2800      	cmp	r0, #0
   19872:	d1d9      	bne.n	19828 <disconnected_cb+0x30>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   19874:	4631      	mov	r1, r6
   19876:	7820      	ldrb	r0, [r4, #0]
   19878:	f7fd fd02 	bl	17280 <bt_conn_lookup_addr_le>
			if (tmp) {
   1987c:	2800      	cmp	r0, #0
   1987e:	d0cb      	beq.n	19818 <disconnected_cb+0x20>
				if (tmp->state == BT_CONN_CONNECTED) {
   19880:	7b43      	ldrb	r3, [r0, #13]
   19882:	2b07      	cmp	r3, #7
   19884:	d1c6      	bne.n	19814 <disconnected_cb+0x1c>
				bt_conn_unref(tmp);
   19886:	f7fd f9fd 	bl	16c84 <bt_conn_unref>
	if (!value_used) {
   1988a:	e7c0      	b.n	1980e <disconnected_cb+0x16>
   1988c:	00019899 	.word	0x00019899
   19890:	2000c900 	.word	0x2000c900
   19894:	0003b6d4 	.word	0x0003b6d4

00019898 <bt_gatt_attr_write_ccc>:
{
   19898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1989c:	b086      	sub	sp, #24
   1989e:	461f      	mov	r7, r3
   198a0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   198a4:	4606      	mov	r6, r0
   198a6:	4688      	mov	r8, r1
	struct _bt_gatt_ccc *ccc = attr->user_data;
   198a8:	f8d1 900c 	ldr.w	r9, [r1, #12]
	if (offset) {
   198ac:	2b00      	cmp	r3, #0
   198ae:	d154      	bne.n	1995a <bt_gatt_attr_write_ccc+0xc2>
	if (!len || len > sizeof(uint16_t)) {
   198b0:	1e7b      	subs	r3, r7, #1
   198b2:	2b01      	cmp	r3, #1
   198b4:	d854      	bhi.n	19960 <bt_gatt_attr_write_ccc+0xc8>
	if (len < sizeof(uint16_t)) {
   198b6:	2f01      	cmp	r7, #1
	cfg = find_ccc_cfg(conn, ccc);
   198b8:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
   198ba:	7815      	ldrb	r5, [r2, #0]
   198bc:	bf18      	it	ne
   198be:	8815      	ldrhne	r5, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
   198c0:	f7ff fc00 	bl	190c4 <find_ccc_cfg>
	if (!cfg) {
   198c4:	4604      	mov	r4, r0
   198c6:	b9e8      	cbnz	r0, 19904 <bt_gatt_attr_write_ccc+0x6c>
		if (!value) {
   198c8:	b91d      	cbnz	r5, 198d2 <bt_gatt_attr_write_ccc+0x3a>
			return len;
   198ca:	4638      	mov	r0, r7
}
   198cc:	b006      	add	sp, #24
   198ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   198d2:	4649      	mov	r1, r9
   198d4:	f7ff fbf6 	bl	190c4 <find_ccc_cfg>
		if (!cfg) {
   198d8:	4604      	mov	r4, r0
   198da:	b960      	cbnz	r0, 198f6 <bt_gatt_attr_write_ccc+0x5e>
			LOG_WRN("No space to store CCC cfg");
   198dc:	4b22      	ldr	r3, [pc, #136]	; (19968 <bt_gatt_attr_write_ccc+0xd0>)
   198de:	4823      	ldr	r0, [pc, #140]	; (1996c <bt_gatt_attr_write_ccc+0xd4>)
   198e0:	9305      	str	r3, [sp, #20]
   198e2:	2302      	movs	r3, #2
   198e4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   198e8:	aa04      	add	r2, sp, #16
   198ea:	9304      	str	r3, [sp, #16]
   198ec:	f018 fddf 	bl	324ae <z_log_msg_static_create.constprop.0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   198f0:	f06f 0010 	mvn.w	r0, #16
   198f4:	e7ea      	b.n	198cc <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   198f6:	f106 0190 	add.w	r1, r6, #144	; 0x90
   198fa:	3001      	adds	r0, #1
   198fc:	f018 fd23 	bl	32346 <bt_addr_le_copy>
		cfg->id = conn->id;
   19900:	7a33      	ldrb	r3, [r6, #8]
   19902:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   19904:	f8d9 3010 	ldr.w	r3, [r9, #16]
   19908:	b9db      	cbnz	r3, 19942 <bt_gatt_attr_write_ccc+0xaa>
	value_changed = cfg->value != value;
   1990a:	f8b4 a008 	ldrh.w	sl, [r4, #8]
	cfg->value = value;
   1990e:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   19910:	f8b9 300a 	ldrh.w	r3, [r9, #10]
   19914:	42ab      	cmp	r3, r5
   19916:	d003      	beq.n	19920 <bt_gatt_attr_write_ccc+0x88>
		gatt_ccc_changed(attr, ccc);
   19918:	4649      	mov	r1, r9
   1991a:	4640      	mov	r0, r8
   1991c:	f018 fbc0 	bl	320a0 <gatt_ccc_changed>
	if (value_changed) {
   19920:	45aa      	cmp	sl, r5
   19922:	d005      	beq.n	19930 <bt_gatt_attr_write_ccc+0x98>
		gatt_delayed_store_enqueue(conn->id, &conn->le.dst, DELAYED_STORE_CCC);
   19924:	2200      	movs	r2, #0
   19926:	7a30      	ldrb	r0, [r6, #8]
   19928:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1992c:	f7ff fc0c 	bl	19148 <gatt_delayed_store_enqueue>
	if (!value) {
   19930:	2d00      	cmp	r5, #0
   19932:	d1ca      	bne.n	198ca <bt_gatt_attr_write_ccc+0x32>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   19934:	490e      	ldr	r1, [pc, #56]	; (19970 <bt_gatt_attr_write_ccc+0xd8>)
   19936:	1c60      	adds	r0, r4, #1
   19938:	f018 fd05 	bl	32346 <bt_addr_le_copy>
	cfg->id = 0U;
   1993c:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1993e:	8125      	strh	r5, [r4, #8]
}
   19940:	e7c3      	b.n	198ca <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   19942:	462a      	mov	r2, r5
   19944:	4641      	mov	r1, r8
   19946:	4630      	mov	r0, r6
   19948:	4798      	blx	r3
		if (write < 0) {
   1994a:	2800      	cmp	r0, #0
   1994c:	dbbe      	blt.n	198cc <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   1994e:	3801      	subs	r0, #1
   19950:	2801      	cmp	r0, #1
   19952:	d9da      	bls.n	1990a <bt_gatt_attr_write_ccc+0x72>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   19954:	f06f 000d 	mvn.w	r0, #13
   19958:	e7b8      	b.n	198cc <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1995a:	f06f 0006 	mvn.w	r0, #6
   1995e:	e7b5      	b.n	198cc <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   19960:	f06f 000c 	mvn.w	r0, #12
   19964:	e7b2      	b.n	198cc <bt_gatt_attr_write_ccc+0x34>
   19966:	bf00      	nop
   19968:	0003d01b 	.word	0x0003d01b
   1996c:	000378e0 	.word	0x000378e0
   19970:	0003b6d4 	.word	0x0003b6d4

00019974 <gatt_write_ccc>:
{
   19974:	b537      	push	{r0, r1, r2, r4, r5, lr}
   19976:	460c      	mov	r4, r1
   19978:	4605      	mov	r5, r0
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1997a:	2108      	movs	r1, #8
   1997c:	f104 0014 	add.w	r0, r4, #20
   19980:	f018 fc21 	bl	321c6 <atomic_or>
	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
   19984:	2312      	movs	r3, #18
   19986:	2204      	movs	r2, #4
   19988:	4628      	mov	r0, r5
   1998a:	e9cd 3200 	strd	r3, r2, [sp]
   1998e:	4903      	ldr	r1, [pc, #12]	; (1999c <gatt_write_ccc+0x28>)
   19990:	4622      	mov	r2, r4
   19992:	4b03      	ldr	r3, [pc, #12]	; (199a0 <gatt_write_ccc+0x2c>)
   19994:	f018 fdc3 	bl	3251e <gatt_req_send.constprop.0>
}
   19998:	b003      	add	sp, #12
   1999a:	bd30      	pop	{r4, r5, pc}
   1999c:	000194ed 	.word	0x000194ed
   199a0:	0003259f 	.word	0x0003259f

000199a4 <sc_indicate.constprop.0>:
static void sc_indicate(uint16_t start, uint16_t end)
   199a4:	b508      	push	{r3, lr}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   199a6:	2101      	movs	r1, #1
   199a8:	4811      	ldr	r0, [pc, #68]	; (199f0 <sc_indicate.constprop.0+0x4c>)
   199aa:	f018 fc0c 	bl	321c6 <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   199ae:	f010 0f01 	tst.w	r0, #1
   199b2:	4b10      	ldr	r3, [pc, #64]	; (199f4 <sc_indicate.constprop.0+0x50>)
   199b4:	d10a      	bne.n	199cc <sc_indicate.constprop.0+0x28>
		gatt_sc.start = start;
   199b6:	4a10      	ldr	r2, [pc, #64]	; (199f8 <sc_indicate.constprop.0+0x54>)
   199b8:	619a      	str	r2, [r3, #24]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   199ba:	480d      	ldr	r0, [pc, #52]	; (199f0 <sc_indicate.constprop.0+0x4c>)
   199bc:	f018 fc19 	bl	321f2 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   199c0:	0783      	lsls	r3, r0, #30
   199c2:	d413      	bmi.n	199ec <sc_indicate.constprop.0+0x48>
}
   199c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   199c8:	f7ff bee4 	b.w	19794 <sc_commit.part.0>
	if (new_start >= *start && new_end <= *end) {
   199cc:	8b1a      	ldrh	r2, [r3, #24]
   199ce:	8b58      	ldrh	r0, [r3, #26]
   199d0:	2a01      	cmp	r2, #1
   199d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   199d6:	d805      	bhi.n	199e4 <sc_indicate.constprop.0+0x40>
   199d8:	4290      	cmp	r0, r2
   199da:	d007      	beq.n	199ec <sc_indicate.constprop.0+0x48>
		*end = new_end;
   199dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   199e0:	835a      	strh	r2, [r3, #26]
   199e2:	e7ea      	b.n	199ba <sc_indicate.constprop.0+0x16>
	if (*end < new_end) {
   199e4:	4290      	cmp	r0, r2
		*start = new_start;
   199e6:	8319      	strh	r1, [r3, #24]
	if (*end < new_end) {
   199e8:	d0e7      	beq.n	199ba <sc_indicate.constprop.0+0x16>
   199ea:	e7f7      	b.n	199dc <sc_indicate.constprop.0+0x38>
}
   199ec:	bd08      	pop	{r3, pc}
   199ee:	bf00      	nop
   199f0:	2000db50 	.word	0x2000db50
   199f4:	2000db00 	.word	0x2000db00
   199f8:	ffff0001 	.word	0xffff0001

000199fc <cf_write>:
{
   199fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19a00:	b086      	sub	sp, #24
   19a02:	461f      	mov	r7, r3
   19a04:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   19a08:	4606      	mov	r6, r0
	if (offset > sizeof(cfg->data)) {
   19a0a:	2b01      	cmp	r3, #1
{
   19a0c:	4690      	mov	r8, r2
	if (offset > sizeof(cfg->data)) {
   19a0e:	d83b      	bhi.n	19a88 <cf_write+0x8c>
	if (offset + len > sizeof(cfg->data)) {
   19a10:	443b      	add	r3, r7
   19a12:	2b01      	cmp	r3, #1
   19a14:	463d      	mov	r5, r7
   19a16:	dc3a      	bgt.n	19a8e <cf_write+0x92>
	cfg = find_cf_cfg(conn);
   19a18:	f7ff fb26 	bl	19068 <find_cf_cfg>
	if (!cfg) {
   19a1c:	4604      	mov	r4, r0
   19a1e:	b998      	cbnz	r0, 19a48 <cf_write+0x4c>
		cfg = find_cf_cfg(NULL);
   19a20:	f7ff fb22 	bl	19068 <find_cf_cfg>
	if (!cfg) {
   19a24:	4604      	mov	r4, r0
   19a26:	b978      	cbnz	r0, 19a48 <cf_write+0x4c>
		LOG_WRN("No space to store Client Supported Features");
   19a28:	4b1c      	ldr	r3, [pc, #112]	; (19a9c <cf_write+0xa0>)
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   19a2a:	f06f 0510 	mvn.w	r5, #16
		LOG_WRN("No space to store Client Supported Features");
   19a2e:	9305      	str	r3, [sp, #20]
   19a30:	2302      	movs	r3, #2
   19a32:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   19a36:	481a      	ldr	r0, [pc, #104]	; (19aa0 <cf_write+0xa4>)
   19a38:	aa04      	add	r2, sp, #16
   19a3a:	9304      	str	r3, [sp, #16]
   19a3c:	f018 fd37 	bl	324ae <z_log_msg_static_create.constprop.0>
}
   19a40:	4628      	mov	r0, r5
   19a42:	b006      	add	sp, #24
   19a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   19a48:	b197      	cbz	r7, 19a70 <cf_write+0x74>
		    !(value[i / 8] & BIT(i % 8))) {
   19a4a:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   19a4c:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
   19a4e:	f898 2000 	ldrb.w	r2, [r8]
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   19a52:	fa21 f003 	lsr.w	r0, r1, r3
   19a56:	07c7      	lsls	r7, r0, #31
   19a58:	d503      	bpl.n	19a62 <cf_write+0x66>
		    !(value[i / 8] & BIT(i % 8))) {
   19a5a:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   19a5e:	07c0      	lsls	r0, r0, #31
   19a60:	d518      	bpl.n	19a94 <cf_write+0x98>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   19a62:	3301      	adds	r3, #1
   19a64:	2b03      	cmp	r3, #3
   19a66:	d1f4      	bne.n	19a52 <cf_write+0x56>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   19a68:	f002 0207 	and.w	r2, r2, #7
   19a6c:	4311      	orrs	r1, r2
   19a6e:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   19a70:	f106 0190 	add.w	r1, r6, #144	; 0x90
   19a74:	1c60      	adds	r0, r4, #1
   19a76:	f018 fc66 	bl	32346 <bt_addr_le_copy>
	cfg->id = conn->id;
   19a7a:	7a33      	ldrb	r3, [r6, #8]
	set_change_aware(cfg, true);
   19a7c:	2101      	movs	r1, #1
   19a7e:	4620      	mov	r0, r4
	cfg->id = conn->id;
   19a80:	7023      	strb	r3, [r4, #0]
	set_change_aware(cfg, true);
   19a82:	f018 fdb1 	bl	325e8 <set_change_aware>
	return len;
   19a86:	e7db      	b.n	19a40 <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   19a88:	f06f 0506 	mvn.w	r5, #6
   19a8c:	e7d8      	b.n	19a40 <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   19a8e:	f06f 050c 	mvn.w	r5, #12
   19a92:	e7d5      	b.n	19a40 <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   19a94:	f06f 0512 	mvn.w	r5, #18
   19a98:	e7d2      	b.n	19a40 <cf_write+0x44>
   19a9a:	bf00      	nop
   19a9c:	0003d035 	.word	0x0003d035
   19aa0:	000378e0 	.word	0x000378e0

00019aa4 <sc_indicate_rsp>:
{
   19aa4:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19aa6:	f06f 0102 	mvn.w	r1, #2
   19aaa:	4604      	mov	r4, r0
   19aac:	480e      	ldr	r0, [pc, #56]	; (19ae8 <sc_indicate_rsp+0x44>)
   19aae:	f018 fb95 	bl	321dc <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   19ab2:	480d      	ldr	r0, [pc, #52]	; (19ae8 <sc_indicate_rsp+0x44>)
   19ab4:	f018 fb9d 	bl	321f2 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   19ab8:	07c2      	lsls	r2, r0, #31
   19aba:	d504      	bpl.n	19ac6 <sc_indicate_rsp+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   19abc:	2200      	movs	r2, #0
   19abe:	2300      	movs	r3, #0
   19ac0:	480a      	ldr	r0, [pc, #40]	; (19aec <sc_indicate_rsp+0x48>)
   19ac2:	f010 fb03 	bl	2a0cc <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   19ac6:	4620      	mov	r0, r4
   19ac8:	f018 fac2 	bl	32050 <bt_att_fixed_chan_only>
   19acc:	b158      	cbz	r0, 19ae6 <sc_indicate_rsp+0x42>
		cfg = find_cf_cfg(conn);
   19ace:	4620      	mov	r0, r4
   19ad0:	f7ff faca 	bl	19068 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   19ad4:	b138      	cbz	r0, 19ae6 <sc_indicate_rsp+0x42>
   19ad6:	7a03      	ldrb	r3, [r0, #8]
   19ad8:	07db      	lsls	r3, r3, #31
   19ada:	d504      	bpl.n	19ae6 <sc_indicate_rsp+0x42>
}
   19adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			set_change_aware(cfg, true);
   19ae0:	2101      	movs	r1, #1
   19ae2:	f018 bd81 	b.w	325e8 <set_change_aware>
}
   19ae6:	bd10      	pop	{r4, pc}
   19ae8:	2000db50 	.word	0x2000db50
   19aec:	2000db20 	.word	0x2000db20

00019af0 <cf_set>:
{
   19af0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19af4:	b08b      	sub	sp, #44	; 0x2c
   19af6:	4689      	mov	r9, r1
   19af8:	4616      	mov	r6, r2
   19afa:	4698      	mov	r8, r3
	if (!name) {
   19afc:	4604      	mov	r4, r0
{
   19afe:	af00      	add	r7, sp, #0
	if (!name) {
   19b00:	b988      	cbnz	r0, 19b26 <cf_set+0x36>
		LOG_ERR("Insufficient number of arguments");
   19b02:	4b58      	ldr	r3, [pc, #352]	; (19c64 <cf_set+0x174>)
   19b04:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19b08:	627b      	str	r3, [r7, #36]	; 0x24
   19b0a:	2302      	movs	r3, #2
   19b0c:	4856      	ldr	r0, [pc, #344]	; (19c68 <cf_set+0x178>)
   19b0e:	623b      	str	r3, [r7, #32]
   19b10:	f107 0220 	add.w	r2, r7, #32
   19b14:	f018 fccb 	bl	324ae <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   19b18:	f06f 0515 	mvn.w	r5, #21
}
   19b1c:	4628      	mov	r0, r5
   19b1e:	372c      	adds	r7, #44	; 0x2c
   19b20:	46bd      	mov	sp, r7
   19b22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   19b26:	f107 0108 	add.w	r1, r7, #8
   19b2a:	f017 f92a 	bl	30d82 <bt_settings_decode_key>
	if (err) {
   19b2e:	4605      	mov	r5, r0
   19b30:	b190      	cbz	r0, 19b58 <cf_set+0x68>
		LOG_ERR("Unable to decode address %s", name);
   19b32:	466d      	mov	r5, sp
   19b34:	b088      	sub	sp, #32
   19b36:	466a      	mov	r2, sp
   19b38:	4b4c      	ldr	r3, [pc, #304]	; (19c6c <cf_set+0x17c>)
   19b3a:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   19b3e:	e9c2 3405 	strd	r3, r4, [r2, #20]
   19b42:	f44f 7300 	mov.w	r3, #512	; 0x200
   19b46:	8393      	strh	r3, [r2, #28]
   19b48:	4b49      	ldr	r3, [pc, #292]	; (19c70 <cf_set+0x180>)
   19b4a:	4847      	ldr	r0, [pc, #284]	; (19c68 <cf_set+0x178>)
   19b4c:	f842 3f10 	str.w	r3, [r2, #16]!
   19b50:	f018 fcad 	bl	324ae <z_log_msg_static_create.constprop.0>
   19b54:	46ad      	mov	sp, r5
		return -EINVAL;
   19b56:	e7df      	b.n	19b18 <cf_set+0x28>
	settings_name_next(name, &next);
   19b58:	4620      	mov	r0, r4
   19b5a:	1d39      	adds	r1, r7, #4
   19b5c:	f016 f9da 	bl	2ff14 <settings_name_next>
	if (!next) {
   19b60:	6878      	ldr	r0, [r7, #4]
   19b62:	b1a0      	cbz	r0, 19b8e <cf_set+0x9e>
		unsigned long next_id = strtoul(next, NULL, 10);
   19b64:	220a      	movs	r2, #10
   19b66:	4629      	mov	r1, r5
   19b68:	f013 fad8 	bl	2d11c <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   19b6c:	b178      	cbz	r0, 19b8e <cf_set+0x9e>
			LOG_ERR("Invalid local identity %lu", next_id);
   19b6e:	466c      	mov	r4, sp
   19b70:	b088      	sub	sp, #32
   19b72:	466a      	mov	r2, sp
   19b74:	4b3f      	ldr	r3, [pc, #252]	; (19c74 <cf_set+0x184>)
   19b76:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19b7a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   19b7e:	2303      	movs	r3, #3
   19b80:	4839      	ldr	r0, [pc, #228]	; (19c68 <cf_set+0x178>)
   19b82:	f842 3f10 	str.w	r3, [r2, #16]!
   19b86:	f018 fc92 	bl	324ae <z_log_msg_static_create.constprop.0>
   19b8a:	46a5      	mov	sp, r4
			return -EINVAL;
   19b8c:	e7c4      	b.n	19b18 <cf_set+0x28>
	cfg = find_cf_cfg_by_addr(id, &addr);
   19b8e:	2000      	movs	r0, #0
   19b90:	f107 0108 	add.w	r1, r7, #8
   19b94:	f7ff fa06 	bl	18fa4 <find_cf_cfg_by_addr>
	if (!cfg) {
   19b98:	4604      	mov	r4, r0
   19b9a:	b9c0      	cbnz	r0, 19bce <cf_set+0xde>
		cfg = find_cf_cfg(NULL);
   19b9c:	f7ff fa64 	bl	19068 <find_cf_cfg>
		if (!cfg) {
   19ba0:	4604      	mov	r4, r0
   19ba2:	b968      	cbnz	r0, 19bc0 <cf_set+0xd0>
			LOG_ERR("Unable to restore CF: no cfg left");
   19ba4:	4b34      	ldr	r3, [pc, #208]	; (19c78 <cf_set+0x188>)
   19ba6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19baa:	627b      	str	r3, [r7, #36]	; 0x24
   19bac:	2302      	movs	r3, #2
   19bae:	482e      	ldr	r0, [pc, #184]	; (19c68 <cf_set+0x178>)
   19bb0:	623b      	str	r3, [r7, #32]
   19bb2:	f107 0220 	add.w	r2, r7, #32
   19bb6:	f018 fc7a 	bl	324ae <z_log_msg_static_create.constprop.0>
			return -ENOMEM;
   19bba:	f06f 050b 	mvn.w	r5, #11
   19bbe:	e7ad      	b.n	19b1c <cf_set+0x2c>
		cfg->id = id;
   19bc0:	2300      	movs	r3, #0
		bt_addr_le_copy(&cfg->peer, &addr);
   19bc2:	f107 0108 	add.w	r1, r7, #8
		cfg->id = id;
   19bc6:	f800 3b01 	strb.w	r3, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   19bca:	f018 fbbc 	bl	32346 <bt_addr_le_copy>
	if (len_rd) {
   19bce:	f1b9 0f00 	cmp.w	r9, #0
   19bd2:	d043      	beq.n	19c5c <cf_set+0x16c>
		len = read_cb(cb_arg, dst, sizeof(dst));
   19bd4:	2202      	movs	r2, #2
   19bd6:	4639      	mov	r1, r7
   19bd8:	4640      	mov	r0, r8
   19bda:	47b0      	blx	r6
		if (len < 0) {
   19bdc:	1e06      	subs	r6, r0, #0
   19bde:	da10      	bge.n	19c02 <cf_set+0x112>
			LOG_ERR("Failed to decode value (err %zd)", len);
   19be0:	466c      	mov	r4, sp
   19be2:	b088      	sub	sp, #32
   19be4:	466a      	mov	r2, sp
   19be6:	4b25      	ldr	r3, [pc, #148]	; (19c7c <cf_set+0x18c>)
   19be8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19bec:	e9c2 3605 	strd	r3, r6, [r2, #20]
   19bf0:	2303      	movs	r3, #3
   19bf2:	481d      	ldr	r0, [pc, #116]	; (19c68 <cf_set+0x178>)
   19bf4:	f842 3f10 	str.w	r3, [r2, #16]!
   19bf8:	f018 fc59 	bl	324ae <z_log_msg_static_create.constprop.0>
			return len;
   19bfc:	4635      	mov	r5, r6
   19bfe:	46a5      	mov	sp, r4
   19c00:	e78c      	b.n	19b1c <cf_set+0x2c>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   19c02:	783b      	ldrb	r3, [r7, #0]
		if (len != sizeof(dst)) {
   19c04:	2e02      	cmp	r6, #2
   19c06:	7223      	strb	r3, [r4, #8]
   19c08:	d00f      	beq.n	19c2a <cf_set+0x13a>
			LOG_WRN("Change-aware status not found in settings, "
   19c0a:	4b1d      	ldr	r3, [pc, #116]	; (19c80 <cf_set+0x190>)
   19c0c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   19c10:	627b      	str	r3, [r7, #36]	; 0x24
   19c12:	2302      	movs	r3, #2
   19c14:	4814      	ldr	r0, [pc, #80]	; (19c68 <cf_set+0x178>)
   19c16:	623b      	str	r3, [r7, #32]
   19c18:	f107 0220 	add.w	r2, r7, #32
   19c1c:	f018 fc47 	bl	324ae <z_log_msg_static_create.constprop.0>
				set_change_aware(cfg, false);
   19c20:	2100      	movs	r1, #0
   19c22:	4620      	mov	r0, r4
   19c24:	f018 fce0 	bl	325e8 <set_change_aware>
   19c28:	e778      	b.n	19b1c <cf_set+0x2c>
			uint8_t change_aware = dst[sizeof(cfg->data)];
   19c2a:	7879      	ldrb	r1, [r7, #1]
			if (change_aware & ~BIT(CF_CHANGE_AWARE)) {
   19c2c:	2901      	cmp	r1, #1
   19c2e:	d90f      	bls.n	19c50 <cf_set+0x160>
				LOG_WRN("Read back bad change-aware value: 0x%x, "
   19c30:	466e      	mov	r6, sp
   19c32:	b088      	sub	sp, #32
   19c34:	466a      	mov	r2, sp
   19c36:	4b13      	ldr	r3, [pc, #76]	; (19c84 <cf_set+0x194>)
   19c38:	480b      	ldr	r0, [pc, #44]	; (19c68 <cf_set+0x178>)
   19c3a:	e9c2 3105 	strd	r3, r1, [r2, #20]
   19c3e:	2303      	movs	r3, #3
   19c40:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   19c44:	f842 3f10 	str.w	r3, [r2, #16]!
   19c48:	f018 fc31 	bl	324ae <z_log_msg_static_create.constprop.0>
   19c4c:	46b5      	mov	sp, r6
   19c4e:	e7e7      	b.n	19c20 <cf_set+0x130>
				set_change_aware_no_store(cfg, change_aware);
   19c50:	4620      	mov	r0, r4
   19c52:	f001 0101 	and.w	r1, r1, #1
   19c56:	f018 fcb7 	bl	325c8 <set_change_aware_no_store>
   19c5a:	e75f      	b.n	19b1c <cf_set+0x2c>
		clear_cf_cfg(cfg);
   19c5c:	4620      	mov	r0, r4
   19c5e:	f7ff fdb7 	bl	197d0 <clear_cf_cfg>
   19c62:	e75b      	b.n	19b1c <cf_set+0x2c>
   19c64:	0003b72a 	.word	0x0003b72a
   19c68:	000378e0 	.word	0x000378e0
   19c6c:	0003cece 	.word	0x0003cece
   19c70:	01000003 	.word	0x01000003
   19c74:	0003ceea 	.word	0x0003ceea
   19c78:	0003d061 	.word	0x0003d061
   19c7c:	0003cf27 	.word	0x0003cf27
   19c80:	0003d083 	.word	0x0003d083
   19c84:	0003d0d7 	.word	0x0003d0d7

00019c88 <bt_gatt_store_cf.isra.0>:
static int bt_gatt_store_cf(uint8_t id, const bt_addr_le_t *peer)
   19c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19c8c:	b08c      	sub	sp, #48	; 0x30
   19c8e:	af02      	add	r7, sp, #8
   19c90:	4606      	mov	r6, r0
   19c92:	460d      	mov	r5, r1
	cfg = find_cf_cfg_by_addr(id, peer);
   19c94:	f7ff f986 	bl	18fa4 <find_cf_cfg_by_addr>
	if (!cfg) {
   19c98:	4604      	mov	r4, r0
   19c9a:	2800      	cmp	r0, #0
   19c9c:	d044      	beq.n	19d28 <bt_gatt_store_cf.isra.0+0xa0>
		bool is_change_aware = atomic_test_bit(cfg->flags, CF_CHANGE_AWARE);
   19c9e:	f100 080c 	add.w	r8, r0, #12
		if (id) {
   19ca2:	b996      	cbnz	r6, 19cca <bt_gatt_store_cf.isra.0+0x42>
		memcpy(dst, str, len);
   19ca4:	7a03      	ldrb	r3, [r0, #8]
   19ca6:	4640      	mov	r0, r8
   19ca8:	703b      	strb	r3, [r7, #0]
   19caa:	f018 faa2 	bl	321f2 <atomic_get>
		len += CF_FLAGS_STORE_LEN;
   19cae:	2602      	movs	r6, #2
		str = dst;
   19cb0:	463c      	mov	r4, r7
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   19cb2:	f000 0001 	and.w	r0, r0, #1
   19cb6:	7078      	strb	r0, [r7, #1]
		bt_settings_encode_key(key, sizeof(key), "cf",
   19cb8:	2300      	movs	r3, #0
   19cba:	2124      	movs	r1, #36	; 0x24
   19cbc:	9300      	str	r3, [sp, #0]
   19cbe:	4a1b      	ldr	r2, [pc, #108]	; (19d2c <bt_gatt_store_cf.isra.0+0xa4>)
   19cc0:	462b      	mov	r3, r5
   19cc2:	1d38      	adds	r0, r7, #4
   19cc4:	f7f9 fe6c 	bl	139a0 <bt_settings_encode_key>
   19cc8:	e015      	b.n	19cf6 <bt_gatt_store_cf.isra.0+0x6e>
			u8_to_dec(id_str, sizeof(id_str), id);
   19cca:	4632      	mov	r2, r6
   19ccc:	2104      	movs	r1, #4
   19cce:	4638      	mov	r0, r7
   19cd0:	f015 f8fc 	bl	2eecc <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   19cd4:	462b      	mov	r3, r5
   19cd6:	1d38      	adds	r0, r7, #4
   19cd8:	2124      	movs	r1, #36	; 0x24
   19cda:	4a14      	ldr	r2, [pc, #80]	; (19d2c <bt_gatt_store_cf.isra.0+0xa4>)
   19cdc:	9700      	str	r7, [sp, #0]
   19cde:	f7f9 fe5f 	bl	139a0 <bt_settings_encode_key>
		memcpy(dst, str, len);
   19ce2:	7a23      	ldrb	r3, [r4, #8]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   19ce4:	4640      	mov	r0, r8
   19ce6:	703b      	strb	r3, [r7, #0]
   19ce8:	f018 fa83 	bl	321f2 <atomic_get>
		len += CF_FLAGS_STORE_LEN;
   19cec:	2602      	movs	r6, #2
		str = dst;
   19cee:	463c      	mov	r4, r7
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   19cf0:	f000 0001 	and.w	r0, r0, #1
   19cf4:	7078      	strb	r0, [r7, #1]
	err = settings_save_one(key, str, len);
   19cf6:	4632      	mov	r2, r6
   19cf8:	4621      	mov	r1, r4
   19cfa:	1d38      	adds	r0, r7, #4
   19cfc:	f7f7 f9b0 	bl	11060 <settings_save_one>
	if (err) {
   19d00:	b170      	cbz	r0, 19d20 <bt_gatt_store_cf.isra.0+0x98>
		LOG_ERR("Failed to store Client Features (err %d)", err);
   19d02:	466c      	mov	r4, sp
   19d04:	b088      	sub	sp, #32
   19d06:	aa02      	add	r2, sp, #8
   19d08:	4b09      	ldr	r3, [pc, #36]	; (19d30 <bt_gatt_store_cf.isra.0+0xa8>)
   19d0a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19d0e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   19d12:	2303      	movs	r3, #3
   19d14:	4807      	ldr	r0, [pc, #28]	; (19d34 <bt_gatt_store_cf.isra.0+0xac>)
   19d16:	f842 3f10 	str.w	r3, [r2, #16]!
   19d1a:	f018 fbc8 	bl	324ae <z_log_msg_static_create.constprop.0>
   19d1e:	46a5      	mov	sp, r4
}
   19d20:	3728      	adds	r7, #40	; 0x28
   19d22:	46bd      	mov	sp, r7
   19d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = 0;
   19d28:	4606      	mov	r6, r0
   19d2a:	e7c5      	b.n	19cb8 <bt_gatt_store_cf.isra.0+0x30>
   19d2c:	0003d527 	.word	0x0003d527
   19d30:	0003d128 	.word	0x0003d128
   19d34:	000378e0 	.word	0x000378e0

00019d38 <set_all_change_unaware>:
{
   19d38:	b510      	push	{r4, lr}
		if (!bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   19d3a:	4c10      	ldr	r4, [pc, #64]	; (19d7c <set_all_change_unaware+0x44>)
   19d3c:	4910      	ldr	r1, [pc, #64]	; (19d80 <set_all_change_unaware+0x48>)
   19d3e:	4620      	mov	r0, r4
   19d40:	f018 fa2a 	bl	32198 <bt_addr_le_eq>
   19d44:	4601      	mov	r1, r0
   19d46:	b938      	cbnz	r0, 19d58 <set_all_change_unaware+0x20>
			set_change_aware_no_store(cfg, false);
   19d48:	1e60      	subs	r0, r4, #1
   19d4a:	f018 fc3d 	bl	325c8 <set_change_aware_no_store>
			bt_gatt_store_cf(cfg->id, &cfg->peer);
   19d4e:	4621      	mov	r1, r4
   19d50:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   19d54:	f7ff ff98 	bl	19c88 <bt_gatt_store_cf.isra.0>
		if (!bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   19d58:	4909      	ldr	r1, [pc, #36]	; (19d80 <set_all_change_unaware+0x48>)
   19d5a:	480a      	ldr	r0, [pc, #40]	; (19d84 <set_all_change_unaware+0x4c>)
   19d5c:	f018 fa1c 	bl	32198 <bt_addr_le_eq>
   19d60:	4601      	mov	r1, r0
   19d62:	b950      	cbnz	r0, 19d7a <set_all_change_unaware+0x42>
			set_change_aware_no_store(cfg, false);
   19d64:	4808      	ldr	r0, [pc, #32]	; (19d88 <set_all_change_unaware+0x50>)
   19d66:	f018 fc2f 	bl	325c8 <set_change_aware_no_store>
}
   19d6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			bt_gatt_store_cf(cfg->id, &cfg->peer);
   19d6e:	4b07      	ldr	r3, [pc, #28]	; (19d8c <set_all_change_unaware+0x54>)
   19d70:	7c18      	ldrb	r0, [r3, #16]
   19d72:	f103 0111 	add.w	r1, r3, #17
   19d76:	f7ff bf87 	b.w	19c88 <bt_gatt_store_cf.isra.0>
}
   19d7a:	bd10      	pop	{r4, pc}
   19d7c:	2000e73d 	.word	0x2000e73d
   19d80:	0003b6d4 	.word	0x0003b6d4
   19d84:	2000e74d 	.word	0x2000e74d
   19d88:	2000e74c 	.word	0x2000e74c
   19d8c:	2000e73c 	.word	0x2000e73c

00019d90 <bt_gatt_init>:
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   19d90:	2101      	movs	r1, #1
{
   19d92:	b510      	push	{r4, lr}
   19d94:	4826      	ldr	r0, [pc, #152]	; (19e30 <bt_gatt_init+0xa0>)
   19d96:	f018 fa16 	bl	321c6 <atomic_or>
	if (atomic_test_and_set_bit(gatt_flags, GATT_INITIALIZED)) {
   19d9a:	07c3      	lsls	r3, r0, #31
   19d9c:	d447      	bmi.n	19e2e <bt_gatt_init+0x9e>
   19d9e:	2102      	movs	r1, #2
   19da0:	4823      	ldr	r0, [pc, #140]	; (19e30 <bt_gatt_init+0xa0>)
   19da2:	f018 fa10 	bl	321c6 <atomic_or>
	if (atomic_test_and_set_bit(gatt_flags, GATT_SERVICE_INITIALIZED)) {
   19da6:	4008      	ands	r0, r1
   19da8:	d11f      	bne.n	19dea <bt_gatt_init+0x5a>
   19daa:	4922      	ldr	r1, [pc, #136]	; (19e34 <bt_gatt_init+0xa4>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   19dac:	4a22      	ldr	r2, [pc, #136]	; (19e38 <bt_gatt_init+0xa8>)
   19dae:	880b      	ldrh	r3, [r1, #0]
   19db0:	4c22      	ldr	r4, [pc, #136]	; (19e3c <bt_gatt_init+0xac>)
   19db2:	42a2      	cmp	r2, r4
   19db4:	d916      	bls.n	19de4 <bt_gatt_init+0x54>
   19db6:	b100      	cbz	r0, 19dba <bt_gatt_init+0x2a>
   19db8:	800b      	strh	r3, [r1, #0]
   19dba:	4921      	ldr	r1, [pc, #132]	; (19e40 <bt_gatt_init+0xb0>)
   19dbc:	f240 53c3 	movw	r3, #1475	; 0x5c3
   19dc0:	4a20      	ldr	r2, [pc, #128]	; (19e44 <bt_gatt_init+0xb4>)
   19dc2:	4821      	ldr	r0, [pc, #132]	; (19e48 <bt_gatt_init+0xb8>)
   19dc4:	f015 fafe 	bl	2f3c4 <assert_print>
   19dc8:	4820      	ldr	r0, [pc, #128]	; (19e4c <bt_gatt_init+0xbc>)
   19dca:	f015 fafb 	bl	2f3c4 <assert_print>
   19dce:	f240 51c3 	movw	r1, #1475	; 0x5c3
   19dd2:	481c      	ldr	r0, [pc, #112]	; (19e44 <bt_gatt_init+0xb4>)
   19dd4:	f015 faef 	bl	2f3b6 <assert_post_action>
		last_static_handle += svc->attr_count;
   19dd8:	6850      	ldr	r0, [r2, #4]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   19dda:	3208      	adds	r2, #8
		last_static_handle += svc->attr_count;
   19ddc:	4403      	add	r3, r0
   19dde:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   19de0:	2001      	movs	r0, #1
   19de2:	e7e6      	b.n	19db2 <bt_gatt_init+0x22>
   19de4:	d3f8      	bcc.n	19dd8 <bt_gatt_init+0x48>
   19de6:	b100      	cbz	r0, 19dea <bt_gatt_init+0x5a>
   19de8:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   19dea:	2200      	movs	r2, #0
   19dec:	4b18      	ldr	r3, [pc, #96]	; (19e50 <bt_gatt_init+0xc0>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   19dee:	4919      	ldr	r1, [pc, #100]	; (19e54 <bt_gatt_init+0xc4>)
   19df0:	4819      	ldr	r0, [pc, #100]	; (19e58 <bt_gatt_init+0xc8>)
	list->tail = NULL;
   19df2:	e9c3 2200 	strd	r2, r2, [r3]
   19df6:	f010 f84d 	bl	29e94 <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   19dfa:	f44f 72a4 	mov.w	r2, #328	; 0x148
   19dfe:	2300      	movs	r3, #0
   19e00:	4815      	ldr	r0, [pc, #84]	; (19e58 <bt_gatt_init+0xc8>)
   19e02:	f7f9 fe81 	bl	13b08 <bt_long_wq_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   19e06:	4915      	ldr	r1, [pc, #84]	; (19e5c <bt_gatt_init+0xcc>)
   19e08:	4815      	ldr	r0, [pc, #84]	; (19e60 <bt_gatt_init+0xd0>)
   19e0a:	f010 f843 	bl	29e94 <k_work_init_delayable>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   19e0e:	2102      	movs	r1, #2
   19e10:	4814      	ldr	r0, [pc, #80]	; (19e64 <bt_gatt_init+0xd4>)
   19e12:	f018 f9d8 	bl	321c6 <atomic_or>
	k_work_init_delayable(&gatt_delayed_store.work, delayed_store);
   19e16:	4914      	ldr	r1, [pc, #80]	; (19e68 <bt_gatt_init+0xd8>)
   19e18:	4814      	ldr	r0, [pc, #80]	; (19e6c <bt_gatt_init+0xdc>)
   19e1a:	f010 f83b 	bl	29e94 <k_work_init_delayable>
	bt_conn_auth_info_cb_register(&gatt_conn_auth_info_cb);
   19e1e:	4814      	ldr	r0, [pc, #80]	; (19e70 <bt_gatt_init+0xe0>)
   19e20:	f7fd fcf8 	bl	17814 <bt_conn_auth_info_cb_register>
}
   19e24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_cb_register(&gatt_conn_cb);
   19e28:	4812      	ldr	r0, [pc, #72]	; (19e74 <bt_gatt_init+0xe4>)
   19e2a:	f7fd ba03 	b.w	17234 <bt_conn_cb_register>
}
   19e2e:	bd10      	pop	{r4, pc}
   19e30:	2000e75c 	.word	0x2000e75c
   19e34:	2000ef84 	.word	0x2000ef84
   19e38:	00037870 	.word	0x00037870
   19e3c:	00037880 	.word	0x00037880
   19e40:	0003d158 	.word	0x0003d158
   19e44:	0003ce4a 	.word	0x0003ce4a
   19e48:	00039995 	.word	0x00039995
   19e4c:	0003a18c 	.word	0x0003a18c
   19e50:	2000e760 	.word	0x2000e760
   19e54:	000326e3 	.word	0x000326e3
   19e58:	2000daa8 	.word	0x2000daa8
   19e5c:	0001a6a5 	.word	0x0001a6a5
   19e60:	2000db20 	.word	0x2000db20
   19e64:	2000db50 	.word	0x2000db50
   19e68:	00032963 	.word	0x00032963
   19e6c:	2000da58 	.word	0x2000da58
   19e70:	2000c8d8 	.word	0x2000c8d8
   19e74:	2000c8bc 	.word	0x2000c8bc

00019e78 <bt_gatt_attr_get_handle>:
	if (!attr) {
   19e78:	4603      	mov	r3, r0
{
   19e7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   19e7e:	b398      	cbz	r0, 19ee8 <bt_gatt_attr_get_handle+0x70>
	if (attr->handle) {
   19e80:	8a00      	ldrh	r0, [r0, #16]
   19e82:	bb88      	cbnz	r0, 19ee8 <bt_gatt_attr_get_handle+0x70>
	uint16_t handle = 1;
   19e84:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   19e86:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   19e8a:	4919      	ldr	r1, [pc, #100]	; (19ef0 <bt_gatt_attr_get_handle+0x78>)
   19e8c:	f8df e064 	ldr.w	lr, [pc, #100]	; 19ef4 <bt_gatt_attr_get_handle+0x7c>
   19e90:	4571      	cmp	r1, lr
   19e92:	d928      	bls.n	19ee6 <bt_gatt_attr_get_handle+0x6e>
   19e94:	4918      	ldr	r1, [pc, #96]	; (19ef8 <bt_gatt_attr_get_handle+0x80>)
   19e96:	f240 7329 	movw	r3, #1833	; 0x729
   19e9a:	4a18      	ldr	r2, [pc, #96]	; (19efc <bt_gatt_attr_get_handle+0x84>)
   19e9c:	4818      	ldr	r0, [pc, #96]	; (19f00 <bt_gatt_attr_get_handle+0x88>)
   19e9e:	f015 fa91 	bl	2f3c4 <assert_print>
   19ea2:	4818      	ldr	r0, [pc, #96]	; (19f04 <bt_gatt_attr_get_handle+0x8c>)
   19ea4:	f015 fa8e 	bl	2f3c4 <assert_print>
   19ea8:	f240 7129 	movw	r1, #1833	; 0x729
   19eac:	4813      	ldr	r0, [pc, #76]	; (19efc <bt_gatt_attr_get_handle+0x84>)
   19eae:	f015 fa82 	bl	2f3b6 <assert_post_action>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   19eb2:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   19eb6:	42bb      	cmp	r3, r7
   19eb8:	d304      	bcc.n	19ec4 <bt_gatt_attr_get_handle+0x4c>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   19eba:	fb0c 7206 	mla	r2, ip, r6, r7
   19ebe:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   19ec0:	4293      	cmp	r3, r2
   19ec2:	d90e      	bls.n	19ee2 <bt_gatt_attr_get_handle+0x6a>
			handle += static_svc->attr_count;
   19ec4:	4434      	add	r4, r6
   19ec6:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   19ec8:	4614      	mov	r4, r2
   19eca:	3108      	adds	r1, #8
   19ecc:	e7e0      	b.n	19e90 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   19ece:	fb0c 7805 	mla	r8, ip, r5, r7
   19ed2:	4543      	cmp	r3, r8
   19ed4:	d00a      	beq.n	19eec <bt_gatt_attr_get_handle+0x74>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   19ed6:	3501      	adds	r5, #1
   19ed8:	1962      	adds	r2, r4, r5
   19eda:	42b5      	cmp	r5, r6
   19edc:	b292      	uxth	r2, r2
   19ede:	d1f6      	bne.n	19ece <bt_gatt_attr_get_handle+0x56>
   19ee0:	e7f2      	b.n	19ec8 <bt_gatt_attr_get_handle+0x50>
   19ee2:	2500      	movs	r5, #0
   19ee4:	e7f8      	b.n	19ed8 <bt_gatt_attr_get_handle+0x60>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   19ee6:	d3e4      	bcc.n	19eb2 <bt_gatt_attr_get_handle+0x3a>
}
   19ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19eec:	4610      	mov	r0, r2
   19eee:	e7fb      	b.n	19ee8 <bt_gatt_attr_get_handle+0x70>
   19ef0:	00037870 	.word	0x00037870
   19ef4:	00037880 	.word	0x00037880
   19ef8:	0003d151 	.word	0x0003d151
   19efc:	0003ce4a 	.word	0x0003ce4a
   19f00:	00039995 	.word	0x00039995
   19f04:	0003a18c 	.word	0x0003a18c

00019f08 <bt_gatt_foreach_attr_type>:
{
   19f08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19f0c:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   19f0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
   19f12:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   19f16:	4607      	mov	r7, r0
		num_matches = UINT16_MAX;
   19f18:	2d00      	cmp	r5, #0
   19f1a:	bf08      	it	eq
   19f1c:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   19f1e:	4b2b      	ldr	r3, [pc, #172]	; (19fcc <bt_gatt_foreach_attr_type+0xc4>)
{
   19f20:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   19f22:	881b      	ldrh	r3, [r3, #0]
{
   19f24:	9100      	str	r1, [sp, #0]
	if (start_handle <= last_static_handle) {
   19f26:	4283      	cmp	r3, r0
   19f28:	d232      	bcs.n	19f90 <bt_gatt_foreach_attr_type+0x88>
}
   19f2a:	b003      	add	sp, #12
   19f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   19f30:	4640      	mov	r0, r8
   19f32:	5889      	ldr	r1, [r1, r2]
   19f34:	9301      	str	r3, [sp, #4]
   19f36:	f016 ff48 	bl	30dca <bt_uuid_cmp>
   19f3a:	9b01      	ldr	r3, [sp, #4]
   19f3c:	b190      	cbz	r0, 19f64 <bt_gatt_foreach_attr_type+0x5c>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   19f3e:	3401      	adds	r4, #1
   19f40:	f10a 0a01 	add.w	sl, sl, #1
   19f44:	b2a4      	uxth	r4, r4
   19f46:	6873      	ldr	r3, [r6, #4]
   19f48:	4553      	cmp	r3, sl
   19f4a:	d92c      	bls.n	19fa6 <bt_gatt_foreach_attr_type+0x9e>
	if (handle > end_handle) {
   19f4c:	9b00      	ldr	r3, [sp, #0]
				if (gatt_foreach_iter(&static_svc->attrs[i],
   19f4e:	6831      	ldr	r1, [r6, #0]
	if (handle > end_handle) {
   19f50:	429c      	cmp	r4, r3
   19f52:	d8ea      	bhi.n	19f2a <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   19f54:	42bc      	cmp	r4, r7
   19f56:	d3f2      	bcc.n	19f3e <bt_gatt_foreach_attr_type+0x36>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   19f58:	fb0b f20a 	mul.w	r2, fp, sl
   19f5c:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   19f5e:	f1b8 0f00 	cmp.w	r8, #0
   19f62:	d1e5      	bne.n	19f30 <bt_gatt_foreach_attr_type+0x28>
	if (attr_data && attr_data != attr->user_data) {
   19f64:	f1b9 0f00 	cmp.w	r9, #0
   19f68:	d10b      	bne.n	19f82 <bt_gatt_foreach_attr_type+0x7a>
	*num_matches -= 1;
   19f6a:	3d01      	subs	r5, #1
	result = func(attr, handle, user_data);
   19f6c:	4618      	mov	r0, r3
	*num_matches -= 1;
   19f6e:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   19f70:	4621      	mov	r1, r4
   19f72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   19f74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   19f76:	4798      	blx	r3
	if (!*num_matches) {
   19f78:	2d00      	cmp	r5, #0
   19f7a:	d0d6      	beq.n	19f2a <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   19f7c:	2800      	cmp	r0, #0
   19f7e:	d1de      	bne.n	19f3e <bt_gatt_foreach_attr_type+0x36>
   19f80:	e7d3      	b.n	19f2a <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   19f82:	68da      	ldr	r2, [r3, #12]
   19f84:	4591      	cmp	r9, r2
   19f86:	d1da      	bne.n	19f3e <bt_gatt_foreach_attr_type+0x36>
   19f88:	e7ef      	b.n	19f6a <bt_gatt_foreach_attr_type+0x62>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   19f8a:	f04f 0a00 	mov.w	sl, #0
   19f8e:	e7da      	b.n	19f46 <bt_gatt_foreach_attr_type+0x3e>
		uint16_t handle = 1;
   19f90:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   19f92:	f04f 0b14 	mov.w	fp, #20
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   19f96:	4e0e      	ldr	r6, [pc, #56]	; (19fd0 <bt_gatt_foreach_attr_type+0xc8>)
   19f98:	e006      	b.n	19fa8 <bt_gatt_foreach_attr_type+0xa0>
   19f9a:	d2c6      	bcs.n	19f2a <bt_gatt_foreach_attr_type+0x22>
			if (handle + static_svc->attr_count < start_handle) {
   19f9c:	6873      	ldr	r3, [r6, #4]
   19f9e:	4423      	add	r3, r4
   19fa0:	42bb      	cmp	r3, r7
   19fa2:	d2f2      	bcs.n	19f8a <bt_gatt_foreach_attr_type+0x82>
				handle += static_svc->attr_count;
   19fa4:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   19fa6:	3608      	adds	r6, #8
   19fa8:	4b0a      	ldr	r3, [pc, #40]	; (19fd4 <bt_gatt_foreach_attr_type+0xcc>)
   19faa:	429e      	cmp	r6, r3
   19fac:	d9f5      	bls.n	19f9a <bt_gatt_foreach_attr_type+0x92>
   19fae:	490a      	ldr	r1, [pc, #40]	; (19fd8 <bt_gatt_foreach_attr_type+0xd0>)
   19fb0:	f240 73ed 	movw	r3, #2029	; 0x7ed
   19fb4:	4a09      	ldr	r2, [pc, #36]	; (19fdc <bt_gatt_foreach_attr_type+0xd4>)
   19fb6:	480a      	ldr	r0, [pc, #40]	; (19fe0 <bt_gatt_foreach_attr_type+0xd8>)
   19fb8:	f015 fa04 	bl	2f3c4 <assert_print>
   19fbc:	4809      	ldr	r0, [pc, #36]	; (19fe4 <bt_gatt_foreach_attr_type+0xdc>)
   19fbe:	f015 fa01 	bl	2f3c4 <assert_print>
   19fc2:	f240 71ed 	movw	r1, #2029	; 0x7ed
   19fc6:	4805      	ldr	r0, [pc, #20]	; (19fdc <bt_gatt_foreach_attr_type+0xd4>)
   19fc8:	f015 f9f5 	bl	2f3b6 <assert_post_action>
   19fcc:	2000ef84 	.word	0x2000ef84
   19fd0:	00037870 	.word	0x00037870
   19fd4:	00037880 	.word	0x00037880
   19fd8:	0003d151 	.word	0x0003d151
   19fdc:	0003ce4a 	.word	0x0003ce4a
   19fe0:	00039995 	.word	0x00039995
   19fe4:	0003a18c 	.word	0x0003a18c

00019fe8 <db_hash_gen>:
{
   19fe8:	b510      	push	{r4, lr}
	uint8_t key[16] = {};
   19fea:	2400      	movs	r4, #0
{
   19fec:	b0ce      	sub	sp, #312	; 0x138
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   19fee:	4669      	mov	r1, sp
   19ff0:	aa22      	add	r2, sp, #136	; 0x88
   19ff2:	a80a      	add	r0, sp, #40	; 0x28
	uint8_t key[16] = {};
   19ff4:	e9cd 4400 	strd	r4, r4, [sp]
   19ff8:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   19ffc:	f016 fb41 	bl	30682 <tc_cmac_setup>
   1a000:	b958      	cbnz	r0, 1a01a <db_hash_gen+0x32>
		LOG_ERR("Unable to setup AES CMAC");
   1a002:	4b15      	ldr	r3, [pc, #84]	; (1a058 <db_hash_gen+0x70>)
		LOG_ERR("Unable to calculate hash");
   1a004:	9309      	str	r3, [sp, #36]	; 0x24
   1a006:	2302      	movs	r3, #2
   1a008:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a00c:	4813      	ldr	r0, [pc, #76]	; (1a05c <db_hash_gen+0x74>)
   1a00e:	aa08      	add	r2, sp, #32
   1a010:	9308      	str	r3, [sp, #32]
   1a012:	f018 fa4c 	bl	324ae <z_log_msg_static_create.constprop.0>
}
   1a016:	b04e      	add	sp, #312	; 0x138
   1a018:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   1a01a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1a01e:	2001      	movs	r0, #1
   1a020:	4a0f      	ldr	r2, [pc, #60]	; (1a060 <db_hash_gen+0x78>)
   1a022:	ab0a      	add	r3, sp, #40	; 0x28
   1a024:	f018 fb52 	bl	326cc <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1a028:	480e      	ldr	r0, [pc, #56]	; (1a064 <db_hash_gen+0x7c>)
   1a02a:	a90a      	add	r1, sp, #40	; 0x28
   1a02c:	f016 fbbe 	bl	307ac <tc_cmac_final>
   1a030:	b908      	cbnz	r0, 1a036 <db_hash_gen+0x4e>
		LOG_ERR("Unable to calculate hash");
   1a032:	4b0d      	ldr	r3, [pc, #52]	; (1a068 <db_hash_gen+0x80>)
   1a034:	e7e6      	b.n	1a004 <db_hash_gen+0x1c>
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
   1a036:	4621      	mov	r1, r4
   1a038:	4b0a      	ldr	r3, [pc, #40]	; (1a064 <db_hash_gen+0x7c>)
   1a03a:	f103 0210 	add.w	r2, r3, #16
		uint8_t tmp = ((uint8_t *)buf)[i];
   1a03e:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1a040:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   1a044:	3101      	adds	r1, #1
   1a046:	2908      	cmp	r1, #8
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1a048:	f803 4b01 	strb.w	r4, [r3], #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1a04c:	7010      	strb	r0, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   1a04e:	d1f6      	bne.n	1a03e <db_hash_gen+0x56>
   1a050:	4806      	ldr	r0, [pc, #24]	; (1a06c <db_hash_gen+0x84>)
   1a052:	f018 f8b8 	bl	321c6 <atomic_or>
   1a056:	e7de      	b.n	1a016 <db_hash_gen+0x2e>
   1a058:	0003d180 	.word	0x0003d180
   1a05c:	000378e0 	.word	0x000378e0
   1a060:	000320f3 	.word	0x000320f3
   1a064:	2000da88 	.word	0x2000da88
   1a068:	0003d199 	.word	0x0003d199
   1a06c:	2000db50 	.word	0x2000db50

0001a070 <db_hash_read>:
{
   1a070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1a074:	4918      	ldr	r1, [pc, #96]	; (1a0d8 <db_hash_read+0x68>)
{
   1a076:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1a078:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   1a07c:	4615      	mov	r5, r2
   1a07e:	461e      	mov	r6, r3
   1a080:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1a084:	f010 f882 	bl	2a18c <k_work_cancel_delayable_sync>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1a088:	4814      	ldr	r0, [pc, #80]	; (1a0dc <db_hash_read+0x6c>)
   1a08a:	f018 f8b2 	bl	321f2 <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1a08e:	0701      	lsls	r1, r0, #28
   1a090:	d405      	bmi.n	1a09e <db_hash_read+0x2e>
		db_hash_gen();
   1a092:	f7ff ffa9 	bl	19fe8 <db_hash_gen>
			set_all_change_unaware();
   1a096:	f7ff fe4f 	bl	19d38 <set_all_change_unaware>
			db_hash_store();
   1a09a:	f7ff faef 	bl	1967c <db_hash_store>
	cfg = find_cf_cfg(conn);
   1a09e:	4620      	mov	r0, r4
   1a0a0:	f7fe ffe2 	bl	19068 <find_cf_cfg>
	if (cfg &&
   1a0a4:	b168      	cbz	r0, 1a0c2 <db_hash_read+0x52>
   1a0a6:	7a03      	ldrb	r3, [r0, #8]
   1a0a8:	07da      	lsls	r2, r3, #31
   1a0aa:	d50a      	bpl.n	1a0c2 <db_hash_read+0x52>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1a0ac:	f100 040c 	add.w	r4, r0, #12
   1a0b0:	4620      	mov	r0, r4
   1a0b2:	f018 f89e 	bl	321f2 <atomic_get>
	    CF_ROBUST_CACHING(cfg) &&
   1a0b6:	07c3      	lsls	r3, r0, #31
   1a0b8:	d403      	bmi.n	1a0c2 <db_hash_read+0x52>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1a0ba:	2102      	movs	r1, #2
   1a0bc:	4620      	mov	r0, r4
   1a0be:	f018 f882 	bl	321c6 <atomic_or>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1a0c2:	2310      	movs	r3, #16
   1a0c4:	463a      	mov	r2, r7
   1a0c6:	9306      	str	r3, [sp, #24]
   1a0c8:	4631      	mov	r1, r6
   1a0ca:	4628      	mov	r0, r5
}
   1a0cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1a0d0:	4b03      	ldr	r3, [pc, #12]	; (1a0e0 <db_hash_read+0x70>)
   1a0d2:	f018 b964 	b.w	3239e <bt_gatt_attr_read.constprop.0>
   1a0d6:	bf00      	nop
   1a0d8:	2000dad8 	.word	0x2000dad8
   1a0dc:	2000db50 	.word	0x2000db50
   1a0e0:	2000da88 	.word	0x2000da88

0001a0e4 <do_db_hash>:
{
   1a0e4:	b510      	push	{r4, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1a0e6:	481a      	ldr	r0, [pc, #104]	; (1a150 <do_db_hash+0x6c>)
   1a0e8:	f018 f883 	bl	321f2 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1a0ec:	f3c0 00c0 	ubfx	r0, r0, #3, #1
	if (new_hash) {
   1a0f0:	f080 0401 	eor.w	r4, r0, #1
   1a0f4:	b908      	cbnz	r0, 1a0fa <do_db_hash+0x16>
		db_hash_gen();
   1a0f6:	f7ff ff77 	bl	19fe8 <db_hash_gen>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1a0fa:	4815      	ldr	r0, [pc, #84]	; (1a150 <do_db_hash+0x6c>)
   1a0fc:	f018 f879 	bl	321f2 <atomic_get>
   1a100:	4603      	mov	r3, r0
   1a102:	4813      	ldr	r0, [pc, #76]	; (1a150 <do_db_hash+0x6c>)
   1a104:	f018 f875 	bl	321f2 <atomic_get>
	if (!hash_loaded_from_settings) {
   1a108:	06da      	lsls	r2, r3, #27
   1a10a:	d51f      	bpl.n	1a14c <do_db_hash+0x68>
	if (already_processed) {
   1a10c:	0683      	lsls	r3, r0, #26
   1a10e:	d506      	bpl.n	1a11e <do_db_hash+0x3a>
		if (new_hash) {
   1a110:	b1e4      	cbz	r4, 1a14c <do_db_hash+0x68>
		set_all_change_unaware();
   1a112:	f7ff fe11 	bl	19d38 <set_all_change_unaware>
}
   1a116:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		db_hash_store();
   1a11a:	f7ff baaf 	b.w	1967c <db_hash_store>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1a11e:	2120      	movs	r1, #32
   1a120:	480b      	ldr	r0, [pc, #44]	; (1a150 <do_db_hash+0x6c>)
   1a122:	f018 f850 	bl	321c6 <atomic_or>
		if (!memcmp(db_hash.stored_hash, db_hash.hash,
   1a126:	2210      	movs	r2, #16
   1a128:	490a      	ldr	r1, [pc, #40]	; (1a154 <do_db_hash+0x70>)
   1a12a:	1888      	adds	r0, r1, r2
   1a12c:	f01c f9ec 	bl	36508 <memcmp>
   1a130:	b948      	cbnz	r0, 1a146 <do_db_hash+0x62>
			k_work_cancel_delayable(&gatt_sc.work);
   1a132:	4809      	ldr	r0, [pc, #36]	; (1a158 <do_db_hash+0x74>)
   1a134:	f00f ffd0 	bl	2a0d8 <k_work_cancel_delayable>
}
   1a138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a13c:	f06f 0101 	mvn.w	r1, #1
   1a140:	4803      	ldr	r0, [pc, #12]	; (1a150 <do_db_hash+0x6c>)
   1a142:	f018 b84b 	b.w	321dc <atomic_and>
		sc_indicate(0x0001, 0xffff);
   1a146:	f7ff fc2d 	bl	199a4 <sc_indicate.constprop.0>
   1a14a:	e7e2      	b.n	1a112 <do_db_hash+0x2e>
}
   1a14c:	bd10      	pop	{r4, pc}
   1a14e:	bf00      	nop
   1a150:	2000db50 	.word	0x2000db50
   1a154:	2000da88 	.word	0x2000da88
   1a158:	2000db20 	.word	0x2000db20

0001a15c <db_hash_commit>:
{
   1a15c:	b508      	push	{r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1a15e:	2110      	movs	r1, #16
   1a160:	4803      	ldr	r0, [pc, #12]	; (1a170 <db_hash_commit+0x14>)
   1a162:	f018 f830 	bl	321c6 <atomic_or>
	do_db_hash();
   1a166:	f7ff ffbd 	bl	1a0e4 <do_db_hash>
}
   1a16a:	2000      	movs	r0, #0
   1a16c:	bd08      	pop	{r3, pc}
   1a16e:	bf00      	nop
   1a170:	2000db50 	.word	0x2000db50

0001a174 <ccc_set_direct>:
{
   1a174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a178:	b0b8      	sub	sp, #224	; 0xe0
   1a17a:	af00      	add	r7, sp, #0
   1a17c:	460c      	mov	r4, r1
   1a17e:	4690      	mov	r8, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   1a180:	493f      	ldr	r1, [pc, #252]	; (1a280 <ccc_set_direct+0x10c>)
   1a182:	463a      	mov	r2, r7
   1a184:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
{
   1a188:	4699      	mov	r9, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   1a18a:	f015 fe9f 	bl	2fecc <settings_name_steq>
   1a18e:	b938      	cbnz	r0, 1a1a0 <ccc_set_direct+0x2c>
   1a190:	f7ff f894 	bl	192bc <ccc_set_direct.part.0>
   1a194:	4605      	mov	r5, r0
}
   1a196:	4628      	mov	r0, r5
   1a198:	37e0      	adds	r7, #224	; 0xe0
   1a19a:	46bd      	mov	sp, r7
   1a19c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return ccc_set(name, len, read_cb, cb_arg);
   1a1a0:	683e      	ldr	r6, [r7, #0]
		settings_name_next(name, &next);
   1a1a2:	1d39      	adds	r1, r7, #4
   1a1a4:	4630      	mov	r0, r6
   1a1a6:	f015 feb5 	bl	2ff14 <settings_name_next>
		if (!name) {
   1a1aa:	b96e      	cbnz	r6, 1a1c8 <ccc_set_direct+0x54>
			LOG_ERR("Insufficient number of arguments");
   1a1ac:	4b35      	ldr	r3, [pc, #212]	; (1a284 <ccc_set_direct+0x110>)
   1a1ae:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a1b2:	637b      	str	r3, [r7, #52]	; 0x34
   1a1b4:	2302      	movs	r3, #2
   1a1b6:	4834      	ldr	r0, [pc, #208]	; (1a288 <ccc_set_direct+0x114>)
   1a1b8:	633b      	str	r3, [r7, #48]	; 0x30
   1a1ba:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1a1be:	f018 f976 	bl	324ae <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   1a1c2:	f06f 0415 	mvn.w	r4, #21
   1a1c6:	e049      	b.n	1a25c <ccc_set_direct+0xe8>
		} else if (!next) {
   1a1c8:	6878      	ldr	r0, [r7, #4]
   1a1ca:	b9c0      	cbnz	r0, 1a1fe <ccc_set_direct+0x8a>
			load.addr_with_id.id = BT_ID_DEFAULT;
   1a1cc:	2300      	movs	r3, #0
		err = bt_settings_decode_key(name, &addr);
   1a1ce:	f107 0a08 	add.w	sl, r7, #8
   1a1d2:	4651      	mov	r1, sl
   1a1d4:	4630      	mov	r0, r6
			load.addr_with_id.id = BT_ID_DEFAULT;
   1a1d6:	753b      	strb	r3, [r7, #20]
		err = bt_settings_decode_key(name, &addr);
   1a1d8:	f016 fdd3 	bl	30d82 <bt_settings_decode_key>
		if (err) {
   1a1dc:	4605      	mov	r5, r0
   1a1de:	b320      	cbz	r0, 1a22a <ccc_set_direct+0xb6>
			LOG_ERR("Unable to decode address %s", name);
   1a1e0:	466c      	mov	r4, sp
   1a1e2:	b088      	sub	sp, #32
   1a1e4:	466a      	mov	r2, sp
   1a1e6:	4b29      	ldr	r3, [pc, #164]	; (1a28c <ccc_set_direct+0x118>)
   1a1e8:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1a1ec:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1a1f0:	f44f 7300 	mov.w	r3, #512	; 0x200
   1a1f4:	8393      	strh	r3, [r2, #28]
   1a1f6:	4b26      	ldr	r3, [pc, #152]	; (1a290 <ccc_set_direct+0x11c>)
   1a1f8:	f842 3f10 	str.w	r3, [r2, #16]!
   1a1fc:	e010      	b.n	1a220 <ccc_set_direct+0xac>
			unsigned long next_id = strtoul(next, NULL, 10);
   1a1fe:	220a      	movs	r2, #10
   1a200:	2100      	movs	r1, #0
   1a202:	f012 ff8b 	bl	2d11c <strtoul>
			if (next_id >= CONFIG_BT_ID_MAX) {
   1a206:	2800      	cmp	r0, #0
   1a208:	d0e0      	beq.n	1a1cc <ccc_set_direct+0x58>
				LOG_ERR("Invalid local identity %lu", next_id);
   1a20a:	466c      	mov	r4, sp
   1a20c:	b088      	sub	sp, #32
   1a20e:	466a      	mov	r2, sp
   1a210:	4b20      	ldr	r3, [pc, #128]	; (1a294 <ccc_set_direct+0x120>)
   1a212:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a216:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1a21a:	2303      	movs	r3, #3
   1a21c:	f842 3f10 	str.w	r3, [r2, #16]!
			LOG_ERR("Unable to decode address %s", name);
   1a220:	4819      	ldr	r0, [pc, #100]	; (1a288 <ccc_set_direct+0x114>)
   1a222:	f018 f944 	bl	324ae <z_log_msg_static_create.constprop.0>
   1a226:	46a5      	mov	sp, r4
			return -EINVAL;
   1a228:	e7cb      	b.n	1a1c2 <ccc_set_direct+0x4e>
		load.addr_with_id.addr = &addr;
   1a22a:	f8c7 a010 	str.w	sl, [r7, #16]
		if (len_rd) {
   1a22e:	b32c      	cbz	r4, 1a27c <ccc_set_direct+0x108>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   1a230:	22c0      	movs	r2, #192	; 0xc0
   1a232:	4648      	mov	r0, r9
   1a234:	f107 0120 	add.w	r1, r7, #32
   1a238:	47c0      	blx	r8
			if (len < 0) {
   1a23a:	1e04      	subs	r4, r0, #0
   1a23c:	da10      	bge.n	1a260 <ccc_set_direct+0xec>
				LOG_ERR("Failed to decode value (err %zd)", len);
   1a23e:	466d      	mov	r5, sp
   1a240:	b088      	sub	sp, #32
   1a242:	466a      	mov	r2, sp
   1a244:	4b14      	ldr	r3, [pc, #80]	; (1a298 <ccc_set_direct+0x124>)
   1a246:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a24a:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1a24e:	2303      	movs	r3, #3
   1a250:	480d      	ldr	r0, [pc, #52]	; (1a288 <ccc_set_direct+0x114>)
   1a252:	f842 3f10 	str.w	r3, [r2, #16]!
   1a256:	f018 f92a 	bl	324ae <z_log_msg_static_create.constprop.0>
   1a25a:	46ad      	mov	sp, r5
			return -EINVAL;
   1a25c:	4625      	mov	r5, r4
   1a25e:	e79a      	b.n	1a196 <ccc_set_direct+0x22>
			load.count = len / sizeof(*ccc_store);
   1a260:	08a4      	lsrs	r4, r4, #2
			for (size_t i = 0; i < load.count; i++) {
   1a262:	f107 0320 	add.w	r3, r7, #32
			load.count = len / sizeof(*ccc_store);
   1a266:	e9c7 3406 	strd	r3, r4, [r7, #24]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
   1a26a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1a26e:	2001      	movs	r0, #1
   1a270:	4a0a      	ldr	r2, [pc, #40]	; (1a29c <ccc_set_direct+0x128>)
   1a272:	f107 0310 	add.w	r3, r7, #16
   1a276:	f018 fa29 	bl	326cc <bt_gatt_foreach_attr>
	return 0;
   1a27a:	e78c      	b.n	1a196 <ccc_set_direct+0x22>
   1a27c:	4623      	mov	r3, r4
   1a27e:	e7f2      	b.n	1a266 <ccc_set_direct+0xf2>
   1a280:	0003d1b2 	.word	0x0003d1b2
   1a284:	0003b72a 	.word	0x0003b72a
   1a288:	000378e0 	.word	0x000378e0
   1a28c:	0003cece 	.word	0x0003cece
   1a290:	01000003 	.word	0x01000003
   1a294:	0003ceea 	.word	0x0003ceea
   1a298:	0003cf27 	.word	0x0003cf27
   1a29c:	000191f5 	.word	0x000191f5

0001a2a0 <bt_gatt_attr_next>:
	struct bt_gatt_attr *next = NULL;
   1a2a0:	2300      	movs	r3, #0
{
   1a2a2:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   1a2a4:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   1a2a6:	f7ff fde7 	bl	19e78 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   1a2aa:	1c41      	adds	r1, r0, #1
   1a2ac:	b289      	uxth	r1, r1
   1a2ae:	4608      	mov	r0, r1
   1a2b0:	4a03      	ldr	r2, [pc, #12]	; (1a2c0 <bt_gatt_attr_next+0x20>)
   1a2b2:	ab01      	add	r3, sp, #4
   1a2b4:	f018 fa0a 	bl	326cc <bt_gatt_foreach_attr>
}
   1a2b8:	9801      	ldr	r0, [sp, #4]
   1a2ba:	b003      	add	sp, #12
   1a2bc:	f85d fb04 	ldr.w	pc, [sp], #4
   1a2c0:	0003209b 	.word	0x0003209b

0001a2c4 <bt_gatt_is_subscribed>:
{
   1a2c4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1a2c8:	460c      	mov	r4, r1
   1a2ca:	4617      	mov	r7, r2
	__ASSERT(conn, "invalid parameter\n");
   1a2cc:	4605      	mov	r5, r0
   1a2ce:	b970      	cbnz	r0, 1a2ee <bt_gatt_is_subscribed+0x2a>
   1a2d0:	495b      	ldr	r1, [pc, #364]	; (1a440 <bt_gatt_is_subscribed+0x17c>)
   1a2d2:	f640 532e 	movw	r3, #3374	; 0xd2e
   1a2d6:	4a5b      	ldr	r2, [pc, #364]	; (1a444 <bt_gatt_is_subscribed+0x180>)
   1a2d8:	485b      	ldr	r0, [pc, #364]	; (1a448 <bt_gatt_is_subscribed+0x184>)
   1a2da:	f015 f873 	bl	2f3c4 <assert_print>
   1a2de:	485b      	ldr	r0, [pc, #364]	; (1a44c <bt_gatt_is_subscribed+0x188>)
   1a2e0:	f015 f870 	bl	2f3c4 <assert_print>
   1a2e4:	f640 512e 	movw	r1, #3374	; 0xd2e
	__ASSERT(attr, "invalid parameter\n");
   1a2e8:	4856      	ldr	r0, [pc, #344]	; (1a444 <bt_gatt_is_subscribed+0x180>)
   1a2ea:	f015 f864 	bl	2f3b6 <assert_post_action>
   1a2ee:	b961      	cbnz	r1, 1a30a <bt_gatt_is_subscribed+0x46>
   1a2f0:	4957      	ldr	r1, [pc, #348]	; (1a450 <bt_gatt_is_subscribed+0x18c>)
   1a2f2:	f640 532f 	movw	r3, #3375	; 0xd2f
   1a2f6:	4a53      	ldr	r2, [pc, #332]	; (1a444 <bt_gatt_is_subscribed+0x180>)
   1a2f8:	4853      	ldr	r0, [pc, #332]	; (1a448 <bt_gatt_is_subscribed+0x184>)
   1a2fa:	f015 f863 	bl	2f3c4 <assert_print>
   1a2fe:	4853      	ldr	r0, [pc, #332]	; (1a44c <bt_gatt_is_subscribed+0x188>)
   1a300:	f015 f860 	bl	2f3c4 <assert_print>
   1a304:	f640 512f 	movw	r1, #3375	; 0xd2f
   1a308:	e7ee      	b.n	1a2e8 <bt_gatt_is_subscribed+0x24>
	if (conn->state != BT_CONN_CONNECTED) {
   1a30a:	7b43      	ldrb	r3, [r0, #13]
   1a30c:	2b07      	cmp	r3, #7
   1a30e:	d110      	bne.n	1a332 <bt_gatt_is_subscribed+0x6e>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   1a310:	2300      	movs	r3, #0
   1a312:	f88d 300c 	strb.w	r3, [sp, #12]
   1a316:	f642 0303 	movw	r3, #10243	; 0x2803
   1a31a:	6820      	ldr	r0, [r4, #0]
   1a31c:	a903      	add	r1, sp, #12
   1a31e:	f8ad 300e 	strh.w	r3, [sp, #14]
   1a322:	f016 fd52 	bl	30dca <bt_uuid_cmp>
   1a326:	b9d0      	cbnz	r0, 1a35e <bt_gatt_is_subscribed+0x9a>
		if (!(chrc->properties &
   1a328:	68e3      	ldr	r3, [r4, #12]
   1a32a:	799b      	ldrb	r3, [r3, #6]
   1a32c:	f013 0f30 	tst.w	r3, #48	; 0x30
   1a330:	d103      	bne.n	1a33a <bt_gatt_is_subscribed+0x76>
		return false;
   1a332:	2000      	movs	r0, #0
}
   1a334:	b004      	add	sp, #16
   1a336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr = bt_gatt_attr_next(attr);
   1a33a:	4620      	mov	r0, r4
   1a33c:	f7ff ffb0 	bl	1a2a0 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   1a340:	4604      	mov	r4, r0
   1a342:	b960      	cbnz	r0, 1a35e <bt_gatt_is_subscribed+0x9a>
   1a344:	4942      	ldr	r1, [pc, #264]	; (1a450 <bt_gatt_is_subscribed+0x18c>)
   1a346:	f44f 6354 	mov.w	r3, #3392	; 0xd40
   1a34a:	4a3e      	ldr	r2, [pc, #248]	; (1a444 <bt_gatt_is_subscribed+0x180>)
   1a34c:	483e      	ldr	r0, [pc, #248]	; (1a448 <bt_gatt_is_subscribed+0x184>)
   1a34e:	f015 f839 	bl	2f3c4 <assert_print>
   1a352:	4840      	ldr	r0, [pc, #256]	; (1a454 <bt_gatt_is_subscribed+0x190>)
   1a354:	f015 f836 	bl	2f3c4 <assert_print>
   1a358:	f44f 6154 	mov.w	r1, #3392	; 0xd40
   1a35c:	e7c4      	b.n	1a2e8 <bt_gatt_is_subscribed+0x24>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   1a35e:	2300      	movs	r3, #0
   1a360:	6820      	ldr	r0, [r4, #0]
   1a362:	f88d 300c 	strb.w	r3, [sp, #12]
   1a366:	f642 1302 	movw	r3, #10498	; 0x2902
   1a36a:	a903      	add	r1, sp, #12
   1a36c:	f8ad 300e 	strh.w	r3, [sp, #14]
   1a370:	f016 fd2b 	bl	30dca <bt_uuid_cmp>
   1a374:	b188      	cbz	r0, 1a39a <bt_gatt_is_subscribed+0xd6>
		attr = bt_gatt_attr_next(attr);
   1a376:	4620      	mov	r0, r4
   1a378:	f7ff ff92 	bl	1a2a0 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   1a37c:	4604      	mov	r4, r0
   1a37e:	b960      	cbnz	r0, 1a39a <bt_gatt_is_subscribed+0xd6>
   1a380:	4933      	ldr	r1, [pc, #204]	; (1a450 <bt_gatt_is_subscribed+0x18c>)
   1a382:	f640 5346 	movw	r3, #3398	; 0xd46
   1a386:	4a2f      	ldr	r2, [pc, #188]	; (1a444 <bt_gatt_is_subscribed+0x180>)
   1a388:	482f      	ldr	r0, [pc, #188]	; (1a448 <bt_gatt_is_subscribed+0x184>)
   1a38a:	f015 f81b 	bl	2f3c4 <assert_print>
   1a38e:	4831      	ldr	r0, [pc, #196]	; (1a454 <bt_gatt_is_subscribed+0x190>)
   1a390:	f015 f818 	bl	2f3c4 <assert_print>
   1a394:	f640 5146 	movw	r1, #3398	; 0xd46
   1a398:	e7a6      	b.n	1a2e8 <bt_gatt_is_subscribed+0x24>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   1a39a:	2600      	movs	r6, #0
   1a39c:	f642 1802 	movw	r8, #10498	; 0x2902
   1a3a0:	6820      	ldr	r0, [r4, #0]
   1a3a2:	4669      	mov	r1, sp
   1a3a4:	f88d 6000 	strb.w	r6, [sp]
   1a3a8:	f8ad 8002 	strh.w	r8, [sp, #2]
   1a3ac:	f016 fd0d 	bl	30dca <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1a3b0:	b9d8      	cbnz	r0, 1a3ea <bt_gatt_is_subscribed+0x126>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   1a3b2:	2300      	movs	r3, #0
   1a3b4:	6820      	ldr	r0, [r4, #0]
   1a3b6:	f88d 300c 	strb.w	r3, [sp, #12]
   1a3ba:	f642 1302 	movw	r3, #10498	; 0x2902
   1a3be:	a903      	add	r1, sp, #12
   1a3c0:	f8ad 300e 	strh.w	r3, [sp, #14]
   1a3c4:	f016 fd01 	bl	30dca <bt_uuid_cmp>
   1a3c8:	2800      	cmp	r0, #0
   1a3ca:	d1b2      	bne.n	1a332 <bt_gatt_is_subscribed+0x6e>
	ccc = attr->user_data;
   1a3cc:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   1a3ce:	4628      	mov	r0, r5
   1a3d0:	4622      	mov	r2, r4
   1a3d2:	f812 1b01 	ldrb.w	r1, [r2], #1
   1a3d6:	f017 f857 	bl	31488 <bt_conn_is_peer_addr_le>
   1a3da:	2800      	cmp	r0, #0
   1a3dc:	d0a9      	beq.n	1a332 <bt_gatt_is_subscribed+0x6e>
   1a3de:	8923      	ldrh	r3, [r4, #8]
   1a3e0:	421f      	tst	r7, r3
   1a3e2:	bf14      	ite	ne
   1a3e4:	2001      	movne	r0, #1
   1a3e6:	2000      	moveq	r0, #0
   1a3e8:	e7a4      	b.n	1a334 <bt_gatt_is_subscribed+0x70>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   1a3ea:	f642 0303 	movw	r3, #10243	; 0x2803
   1a3ee:	6820      	ldr	r0, [r4, #0]
   1a3f0:	a901      	add	r1, sp, #4
   1a3f2:	f88d 6004 	strb.w	r6, [sp, #4]
   1a3f6:	f8ad 3006 	strh.w	r3, [sp, #6]
   1a3fa:	f016 fce6 	bl	30dca <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   1a3fe:	2800      	cmp	r0, #0
   1a400:	d0d7      	beq.n	1a3b2 <bt_gatt_is_subscribed+0xee>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1a402:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1a406:	6820      	ldr	r0, [r4, #0]
   1a408:	a902      	add	r1, sp, #8
   1a40a:	f88d 6008 	strb.w	r6, [sp, #8]
   1a40e:	f8ad 300a 	strh.w	r3, [sp, #10]
   1a412:	f016 fcda 	bl	30dca <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   1a416:	2800      	cmp	r0, #0
   1a418:	d0cb      	beq.n	1a3b2 <bt_gatt_is_subscribed+0xee>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1a41a:	f642 0301 	movw	r3, #10241	; 0x2801
   1a41e:	6820      	ldr	r0, [r4, #0]
   1a420:	a903      	add	r1, sp, #12
   1a422:	f88d 600c 	strb.w	r6, [sp, #12]
   1a426:	f8ad 300e 	strh.w	r3, [sp, #14]
   1a42a:	f016 fcce 	bl	30dca <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1a42e:	2800      	cmp	r0, #0
   1a430:	d0bf      	beq.n	1a3b2 <bt_gatt_is_subscribed+0xee>
		attr = bt_gatt_attr_next(attr);
   1a432:	4620      	mov	r0, r4
   1a434:	f7ff ff34 	bl	1a2a0 <bt_gatt_attr_next>
		if (!attr) {
   1a438:	4604      	mov	r4, r0
   1a43a:	2800      	cmp	r0, #0
   1a43c:	d1b0      	bne.n	1a3a0 <bt_gatt_is_subscribed+0xdc>
   1a43e:	e778      	b.n	1a332 <bt_gatt_is_subscribed+0x6e>
   1a440:	0003bca4 	.word	0x0003bca4
   1a444:	0003ce4a 	.word	0x0003ce4a
   1a448:	00039995 	.word	0x00039995
   1a44c:	0003d1b9 	.word	0x0003d1b9
   1a450:	0003d1ce 	.word	0x0003d1ce
   1a454:	0003d1d3 	.word	0x0003d1d3

0001a458 <gatt_indicate>:
{
   1a458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a45c:	4615      	mov	r5, r2
   1a45e:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1a460:	2294      	movs	r2, #148	; 0x94
   1a462:	6869      	ldr	r1, [r5, #4]
{
   1a464:	b086      	sub	sp, #24
   1a466:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1a468:	f018 f93d 	bl	326e6 <bt_gatt_check_perm>
   1a46c:	4680      	mov	r8, r0
   1a46e:	b178      	cbz	r0, 1a490 <gatt_indicate+0x38>
		LOG_WRN("Link is not encrypted");
   1a470:	4b36      	ldr	r3, [pc, #216]	; (1a54c <gatt_indicate+0xf4>)
		return -EPERM;
   1a472:	f04f 35ff 	mov.w	r5, #4294967295
		LOG_WRN("Link is not encrypted");
   1a476:	9305      	str	r3, [sp, #20]
   1a478:	2302      	movs	r3, #2
   1a47a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1a47e:	4834      	ldr	r0, [pc, #208]	; (1a550 <gatt_indicate+0xf8>)
   1a480:	aa04      	add	r2, sp, #16
   1a482:	9304      	str	r3, [sp, #16]
   1a484:	f018 f813 	bl	324ae <z_log_msg_static_create.constprop.0>
}
   1a488:	4628      	mov	r0, r5
   1a48a:	b006      	add	sp, #24
   1a48c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   1a490:	2202      	movs	r2, #2
   1a492:	4630      	mov	r0, r6
   1a494:	6869      	ldr	r1, [r5, #4]
   1a496:	f7ff ff15 	bl	1a2c4 <bt_gatt_is_subscribed>
   1a49a:	b960      	cbnz	r0, 1a4b6 <gatt_indicate+0x5e>
			LOG_WRN("Device is not subscribed to characteristic");
   1a49c:	4b2d      	ldr	r3, [pc, #180]	; (1a554 <gatt_indicate+0xfc>)
   1a49e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1a4a2:	9305      	str	r3, [sp, #20]
   1a4a4:	2302      	movs	r3, #2
   1a4a6:	482a      	ldr	r0, [pc, #168]	; (1a550 <gatt_indicate+0xf8>)
   1a4a8:	aa04      	add	r2, sp, #16
   1a4aa:	9304      	str	r3, [sp, #16]
			return -EINVAL;
   1a4ac:	f06f 0515 	mvn.w	r5, #21
			LOG_WRN("Device is not subscribed to characteristic");
   1a4b0:	f017 fffd 	bl	324ae <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   1a4b4:	e7e8      	b.n	1a488 <gatt_indicate+0x30>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1a4b6:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   1a4ba:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   1a4bc:	8aaf      	ldrh	r7, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1a4be:	f7fe fb7f 	bl	18bc0 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   1a4c2:	3702      	adds	r7, #2
	if (!req) {
   1a4c4:	4604      	mov	r4, r0
   1a4c6:	b1d0      	cbz	r0, 1a4fe <gatt_indicate+0xa6>
	req->att_op = op;
   1a4c8:	211d      	movs	r1, #29
	req->func = func;
   1a4ca:	4b23      	ldr	r3, [pc, #140]	; (1a558 <gatt_indicate+0x100>)
	req->len = len;
   1a4cc:	6147      	str	r7, [r0, #20]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1a4ce:	463a      	mov	r2, r7
	req->att_op = op;
   1a4d0:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   1a4d2:	f8c0 800c 	str.w	r8, [r0, #12]
	req->func = func;
   1a4d6:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   1a4d8:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1a4da:	4630      	mov	r0, r6
   1a4dc:	f7fe f8a2 	bl	18624 <bt_att_create_pdu>
	if (!buf) {
   1a4e0:	4607      	mov	r7, r0
   1a4e2:	b978      	cbnz	r0, 1a504 <gatt_indicate+0xac>
		LOG_WRN("No buffer available to send indication");
   1a4e4:	4b1d      	ldr	r3, [pc, #116]	; (1a55c <gatt_indicate+0x104>)
   1a4e6:	481a      	ldr	r0, [pc, #104]	; (1a550 <gatt_indicate+0xf8>)
   1a4e8:	9305      	str	r3, [sp, #20]
   1a4ea:	2302      	movs	r3, #2
   1a4ec:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1a4f0:	aa04      	add	r2, sp, #16
   1a4f2:	9304      	str	r3, [sp, #16]
   1a4f4:	f017 ffdb 	bl	324ae <z_log_msg_static_create.constprop.0>
		bt_att_req_free(req);
   1a4f8:	4620      	mov	r0, r4
   1a4fa:	f7fe fb85 	bl	18c08 <bt_att_req_free>
		return -ENOMEM;
   1a4fe:	f06f 050b 	mvn.w	r5, #11
   1a502:	e7c1      	b.n	1a488 <gatt_indicate+0x30>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   1a504:	2301      	movs	r3, #1
   1a506:	4642      	mov	r2, r8
   1a508:	4641      	mov	r1, r8
	return net_buf_simple_add(&buf->b, len);
   1a50a:	f107 0a0c 	add.w	sl, r7, #12
   1a50e:	f017 fdbd 	bl	3208c <bt_att_set_tx_meta_data>
   1a512:	2102      	movs	r1, #2
   1a514:	4650      	mov	r0, sl
   1a516:	f003 ffbf 	bl	1e498 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   1a51a:	4680      	mov	r8, r0
   1a51c:	f828 9b02 	strh.w	r9, [r8], #2
   1a520:	8aa9      	ldrh	r1, [r5, #20]
   1a522:	4650      	mov	r0, sl
   1a524:	f003 ffb8 	bl	1e498 <net_buf_simple_add>
   1a528:	8aaa      	ldrh	r2, [r5, #20]
   1a52a:	6929      	ldr	r1, [r5, #16]
   1a52c:	4640      	mov	r0, r8
   1a52e:	f01b fffb 	bl	36528 <memcpy>
	err = bt_att_req_send(conn, req);
   1a532:	4621      	mov	r1, r4
   1a534:	4630      	mov	r0, r6
	req->buf = buf;
   1a536:	60a7      	str	r7, [r4, #8]
	err = bt_att_req_send(conn, req);
   1a538:	f7fe fcd4 	bl	18ee4 <bt_att_req_send>
	if (err) {
   1a53c:	4605      	mov	r5, r0
   1a53e:	2800      	cmp	r0, #0
   1a540:	d0a2      	beq.n	1a488 <gatt_indicate+0x30>
		bt_att_req_free(req);
   1a542:	4620      	mov	r0, r4
   1a544:	f7fe fb60 	bl	18c08 <bt_att_req_free>
   1a548:	e79e      	b.n	1a488 <gatt_indicate+0x30>
   1a54a:	bf00      	nop
   1a54c:	0003d1e9 	.word	0x0003d1e9
   1a550:	000378e0 	.word	0x000378e0
   1a554:	0003d1ff 	.word	0x0003d1ff
   1a558:	000320b5 	.word	0x000320b5
   1a55c:	0003d22a 	.word	0x0003d22a

0001a560 <bt_gatt_indicate>:
{
   1a560:	b530      	push	{r4, r5, lr}
   1a562:	4605      	mov	r5, r0
	__ASSERT(params, "invalid parameters\n");
   1a564:	460c      	mov	r4, r1
{
   1a566:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   1a568:	b971      	cbnz	r1, 1a588 <bt_gatt_indicate+0x28>
   1a56a:	4946      	ldr	r1, [pc, #280]	; (1a684 <bt_gatt_indicate+0x124>)
   1a56c:	f640 33da 	movw	r3, #3034	; 0xbda
   1a570:	4a45      	ldr	r2, [pc, #276]	; (1a688 <bt_gatt_indicate+0x128>)
   1a572:	4846      	ldr	r0, [pc, #280]	; (1a68c <bt_gatt_indicate+0x12c>)
   1a574:	f014 ff26 	bl	2f3c4 <assert_print>
   1a578:	4845      	ldr	r0, [pc, #276]	; (1a690 <bt_gatt_indicate+0x130>)
   1a57a:	f014 ff23 	bl	2f3c4 <assert_print>
   1a57e:	f640 31da 	movw	r1, #3034	; 0xbda
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   1a582:	4841      	ldr	r0, [pc, #260]	; (1a688 <bt_gatt_indicate+0x128>)
   1a584:	f014 ff17 	bl	2f3b6 <assert_post_action>
   1a588:	684b      	ldr	r3, [r1, #4]
   1a58a:	b973      	cbnz	r3, 1a5aa <bt_gatt_indicate+0x4a>
   1a58c:	680b      	ldr	r3, [r1, #0]
   1a58e:	b963      	cbnz	r3, 1a5aa <bt_gatt_indicate+0x4a>
   1a590:	4940      	ldr	r1, [pc, #256]	; (1a694 <bt_gatt_indicate+0x134>)
   1a592:	f640 33db 	movw	r3, #3035	; 0xbdb
   1a596:	4a3c      	ldr	r2, [pc, #240]	; (1a688 <bt_gatt_indicate+0x128>)
   1a598:	483c      	ldr	r0, [pc, #240]	; (1a68c <bt_gatt_indicate+0x12c>)
   1a59a:	f014 ff13 	bl	2f3c4 <assert_print>
   1a59e:	483c      	ldr	r0, [pc, #240]	; (1a690 <bt_gatt_indicate+0x130>)
   1a5a0:	f014 ff10 	bl	2f3c4 <assert_print>
   1a5a4:	f640 31db 	movw	r1, #3035	; 0xbdb
   1a5a8:	e7eb      	b.n	1a582 <bt_gatt_indicate+0x22>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1a5aa:	483b      	ldr	r0, [pc, #236]	; (1a698 <bt_gatt_indicate+0x138>)
   1a5ac:	f017 fe21 	bl	321f2 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1a5b0:	0742      	lsls	r2, r0, #29
   1a5b2:	d561      	bpl.n	1a678 <bt_gatt_indicate+0x118>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1a5b4:	b115      	cbz	r5, 1a5bc <bt_gatt_indicate+0x5c>
   1a5b6:	7b6b      	ldrb	r3, [r5, #13]
   1a5b8:	2b07      	cmp	r3, #7
   1a5ba:	d160      	bne.n	1a67e <bt_gatt_indicate+0x11e>
	data.attr = params->attr;
   1a5bc:	6860      	ldr	r0, [r4, #4]
   1a5be:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1a5c0:	f7ff fc5a 	bl	19e78 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   1a5c4:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1a5c6:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1a5ca:	b33a      	cbz	r2, 1a61c <bt_gatt_indicate+0xbc>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1a5cc:	a905      	add	r1, sp, #20
   1a5ce:	9102      	str	r1, [sp, #8]
   1a5d0:	4932      	ldr	r1, [pc, #200]	; (1a69c <bt_gatt_indicate+0x13c>)
	found->attr = NULL;
   1a5d2:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1a5d4:	9101      	str	r1, [sp, #4]
   1a5d6:	2101      	movs	r1, #1
   1a5d8:	9100      	str	r1, [sp, #0]
   1a5da:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1a5de:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1a5e0:	f7ff fc92 	bl	19f08 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1a5e4:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1a5e6:	b91b      	cbnz	r3, 1a5f0 <bt_gatt_indicate+0x90>
			return -ENOENT;
   1a5e8:	f06f 0001 	mvn.w	r0, #1
}
   1a5ec:	b00b      	add	sp, #44	; 0x2c
   1a5ee:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   1a5f0:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1a5f2:	9b05      	ldr	r3, [sp, #20]
   1a5f4:	a904      	add	r1, sp, #16
   1a5f6:	6818      	ldr	r0, [r3, #0]
   1a5f8:	2300      	movs	r3, #0
   1a5fa:	f88d 3010 	strb.w	r3, [sp, #16]
   1a5fe:	f642 0303 	movw	r3, #10243	; 0x2803
   1a602:	f8ad 3012 	strh.w	r3, [sp, #18]
   1a606:	f016 fbe0 	bl	30dca <bt_uuid_cmp>
   1a60a:	b970      	cbnz	r0, 1a62a <bt_gatt_indicate+0xca>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1a60c:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   1a60e:	68c3      	ldr	r3, [r0, #12]
   1a610:	799b      	ldrb	r3, [r3, #6]
   1a612:	069b      	lsls	r3, r3, #26
   1a614:	d405      	bmi.n	1a622 <bt_gatt_indicate+0xc2>
			return -EINVAL;
   1a616:	f06f 0015 	mvn.w	r0, #21
   1a61a:	e7e7      	b.n	1a5ec <bt_gatt_indicate+0x8c>
		if (!data.handle) {
   1a61c:	2800      	cmp	r0, #0
   1a61e:	d1e8      	bne.n	1a5f2 <bt_gatt_indicate+0x92>
   1a620:	e7e2      	b.n	1a5e8 <bt_gatt_indicate+0x88>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1a622:	f018 f80c 	bl	3263e <bt_gatt_attr_value_handle>
   1a626:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   1a62a:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   1a62e:	b13d      	cbz	r5, 1a640 <bt_gatt_indicate+0xe0>
		params->_ref = 1;
   1a630:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   1a632:	4601      	mov	r1, r0
   1a634:	4622      	mov	r2, r4
   1a636:	4628      	mov	r0, r5
		params->_ref = 1;
   1a638:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   1a63a:	f7ff ff0d 	bl	1a458 <gatt_indicate>
   1a63e:	e7d5      	b.n	1a5ec <bt_gatt_indicate+0x8c>
	data.err = -ENOTCONN;
   1a640:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1a644:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1a646:	2302      	movs	r3, #2
   1a648:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1a64c:	f642 1302 	movw	r3, #10498	; 0x2902
   1a650:	f8ad 3012 	strh.w	r3, [sp, #18]
   1a654:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   1a656:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1a658:	9302      	str	r3, [sp, #8]
   1a65a:	4b11      	ldr	r3, [pc, #68]	; (1a6a0 <bt_gatt_indicate+0x140>)
   1a65c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1a660:	9301      	str	r3, [sp, #4]
   1a662:	2301      	movs	r3, #1
   1a664:	aa04      	add	r2, sp, #16
   1a666:	9300      	str	r3, [sp, #0]
   1a668:	462b      	mov	r3, r5
	data.ind_params = params;
   1a66a:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1a66c:	f88d 5010 	strb.w	r5, [sp, #16]
   1a670:	f7ff fc4a 	bl	19f08 <bt_gatt_foreach_attr_type>
	return data.err;
   1a674:	9807      	ldr	r0, [sp, #28]
   1a676:	e7b9      	b.n	1a5ec <bt_gatt_indicate+0x8c>
		return -EAGAIN;
   1a678:	f06f 000a 	mvn.w	r0, #10
   1a67c:	e7b6      	b.n	1a5ec <bt_gatt_indicate+0x8c>
		return -ENOTCONN;
   1a67e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1a682:	e7b3      	b.n	1a5ec <bt_gatt_indicate+0x8c>
   1a684:	0004069d 	.word	0x0004069d
   1a688:	0003ce4a 	.word	0x0003ce4a
   1a68c:	00039995 	.word	0x00039995
   1a690:	0003d251 	.word	0x0003d251
   1a694:	0003d267 	.word	0x0003d267
   1a698:	2000c654 	.word	0x2000c654
   1a69c:	000320db 	.word	0x000320db
   1a6a0:	0001a929 	.word	0x0001a929

0001a6a4 <sc_process>:
{
   1a6a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   1a6a6:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   1a6aa:	4604      	mov	r4, r0
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   1a6ac:	f1a0 0720 	sub.w	r7, r0, #32
   1a6b0:	4628      	mov	r0, r5
   1a6b2:	f017 fd9e 	bl	321f2 <atomic_get>
   1a6b6:	0783      	lsls	r3, r0, #30
   1a6b8:	f3c0 0640 	ubfx	r6, r0, #1, #1
   1a6bc:	d50e      	bpl.n	1a6dc <sc_process+0x38>
   1a6be:	4919      	ldr	r1, [pc, #100]	; (1a724 <sc_process+0x80>)
   1a6c0:	f240 532c 	movw	r3, #1324	; 0x52c
   1a6c4:	4a18      	ldr	r2, [pc, #96]	; (1a728 <sc_process+0x84>)
   1a6c6:	4819      	ldr	r0, [pc, #100]	; (1a72c <sc_process+0x88>)
   1a6c8:	f014 fe7c 	bl	2f3c4 <assert_print>
   1a6cc:	4818      	ldr	r0, [pc, #96]	; (1a730 <sc_process+0x8c>)
   1a6ce:	f014 fe79 	bl	2f3c4 <assert_print>
   1a6d2:	f240 512c 	movw	r1, #1324	; 0x52c
   1a6d6:	4814      	ldr	r0, [pc, #80]	; (1a728 <sc_process+0x84>)
   1a6d8:	f014 fe6d 	bl	2f3b6 <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   1a6dc:	f854 3c08 	ldr.w	r3, [r4, #-8]
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a6e0:	f06f 0101 	mvn.w	r1, #1
   1a6e4:	4628      	mov	r0, r5
   1a6e6:	9301      	str	r3, [sp, #4]
   1a6e8:	f017 fd78 	bl	321dc <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1a6ec:	4b11      	ldr	r3, [pc, #68]	; (1a734 <sc_process+0x90>)
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1a6ee:	4639      	mov	r1, r7
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1a6f0:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   1a6f4:	4b10      	ldr	r3, [pc, #64]	; (1a738 <sc_process+0x94>)
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1a6f6:	4630      	mov	r0, r6
	sc->params.func = sc_indicate_rsp;
   1a6f8:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   1a6fc:	ab01      	add	r3, sp, #4
   1a6fe:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   1a702:	2304      	movs	r3, #4
	sc->start = 0U;
   1a704:	f824 6c08 	strh.w	r6, [r4, #-8]
	sc->end = 0U;
   1a708:	f824 6c06 	strh.w	r6, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   1a70c:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1a710:	f7ff ff26 	bl	1a560 <bt_gatt_indicate>
   1a714:	b918      	cbnz	r0, 1a71e <sc_process+0x7a>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1a716:	2102      	movs	r1, #2
   1a718:	4628      	mov	r0, r5
   1a71a:	f017 fd54 	bl	321c6 <atomic_or>
}
   1a71e:	b003      	add	sp, #12
   1a720:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a722:	bf00      	nop
   1a724:	0003d284 	.word	0x0003d284
   1a728:	0003ce4a 	.word	0x0003ce4a
   1a72c:	00039995 	.word	0x00039995
   1a730:	0003d2b5 	.word	0x0003d2b5
   1a734:	0003825c 	.word	0x0003825c
   1a738:	00019aa5 	.word	0x00019aa5

0001a73c <update_ccc>:
{
   1a73c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a740:	b089      	sub	sp, #36	; 0x24
   1a742:	4690      	mov	r8, r2
	struct bt_conn *conn = data->conn;
   1a744:	6814      	ldr	r4, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a746:	4b3b      	ldr	r3, [pc, #236]	; (1a834 <update_ccc+0xf8>)
   1a748:	6882      	ldr	r2, [r0, #8]
{
   1a74a:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a74c:	429a      	cmp	r2, r3
{
   1a74e:	af00      	add	r7, sp, #0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a750:	d11f      	bne.n	1a792 <update_ccc+0x56>
	ccc = attr->user_data;
   1a752:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
   1a754:	8933      	ldrh	r3, [r6, #8]
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1a756:	1c72      	adds	r2, r6, #1
		if (!cfg->value ||
   1a758:	b1db      	cbz	r3, 1a792 <update_ccc+0x56>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1a75a:	4620      	mov	r0, r4
   1a75c:	7831      	ldrb	r1, [r6, #0]
   1a75e:	f016 fe93 	bl	31488 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   1a762:	b1b0      	cbz	r0, 1a792 <update_ccc+0x56>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   1a764:	f44f 7295 	mov.w	r2, #298	; 0x12a
   1a768:	4629      	mov	r1, r5
   1a76a:	4620      	mov	r0, r4
   1a76c:	f017 ffbb 	bl	326e6 <bt_gatt_check_perm>
		if (err) {
   1a770:	b330      	cbz	r0, 1a7c0 <update_ccc+0x84>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1a772:	2803      	cmp	r0, #3
   1a774:	d112      	bne.n	1a79c <update_ccc+0x60>
				LOG_WRN("CCC %p not writable", attr);
   1a776:	466c      	mov	r4, sp
   1a778:	b088      	sub	sp, #32
   1a77a:	466a      	mov	r2, sp
   1a77c:	4b2e      	ldr	r3, [pc, #184]	; (1a838 <update_ccc+0xfc>)
   1a77e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1a782:	e9c2 3505 	strd	r3, r5, [r2, #20]
   1a786:	f842 0f10 	str.w	r0, [r2, #16]!
   1a78a:	482c      	ldr	r0, [pc, #176]	; (1a83c <update_ccc+0x100>)
   1a78c:	f017 fe8f 	bl	324ae <z_log_msg_static_create.constprop.0>
   1a790:	46a5      	mov	sp, r4
}
   1a792:	2001      	movs	r0, #1
   1a794:	3724      	adds	r7, #36	; 0x24
   1a796:	46bd      	mov	sp, r7
   1a798:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			sec = BT_SECURITY_L2;
   1a79c:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   1a79e:	4620      	mov	r0, r4
			sec = BT_SECURITY_L2;
   1a7a0:	bf0c      	ite	eq
   1a7a2:	f04f 0903 	moveq.w	r9, #3
   1a7a6:	f04f 0902 	movne.w	r9, #2
			    bt_conn_get_security(conn) < sec) {
   1a7aa:	f016 fe42 	bl	31432 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   1a7ae:	4581      	cmp	r9, r0
   1a7b0:	d906      	bls.n	1a7c0 <update_ccc+0x84>
				if (data->sec < sec) {
   1a7b2:	f898 3004 	ldrb.w	r3, [r8, #4]
   1a7b6:	454b      	cmp	r3, r9
   1a7b8:	d2eb      	bcs.n	1a792 <update_ccc+0x56>
					data->sec = sec;
   1a7ba:	f888 9004 	strb.w	r9, [r8, #4]
   1a7be:	e7e8      	b.n	1a792 <update_ccc+0x56>
		gatt_ccc_changed(attr, ccc);
   1a7c0:	4631      	mov	r1, r6
   1a7c2:	4628      	mov	r0, r5
   1a7c4:	f017 fc6c 	bl	320a0 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   1a7c8:	4b1d      	ldr	r3, [pc, #116]	; (1a840 <update_ccc+0x104>)
   1a7ca:	429e      	cmp	r6, r3
   1a7cc:	d1e1      	bne.n	1a792 <update_ccc+0x56>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1a7ce:	7a20      	ldrb	r0, [r4, #8]
   1a7d0:	f104 0190 	add.w	r1, r4, #144	; 0x90
   1a7d4:	f7fe fc28 	bl	19028 <find_sc_cfg>
	if (!cfg) {
   1a7d8:	2800      	cmp	r0, #0
   1a7da:	d0da      	beq.n	1a792 <update_ccc+0x56>
	if (!(cfg->data.start || cfg->data.end)) {
   1a7dc:	8902      	ldrh	r2, [r0, #8]
   1a7de:	8943      	ldrh	r3, [r0, #10]
   1a7e0:	ea52 0103 	orrs.w	r1, r2, r3
   1a7e4:	d0d5      	beq.n	1a792 <update_ccc+0x56>
	index = bt_conn_index(conn);
   1a7e6:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   1a7e8:	80ba      	strh	r2, [r7, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   1a7ea:	80fb      	strh	r3, [r7, #6]
	index = bt_conn_index(conn);
   1a7ec:	f7fc fb8e 	bl	16f0c <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1a7f0:	2318      	movs	r3, #24
   1a7f2:	4914      	ldr	r1, [pc, #80]	; (1a844 <update_ccc+0x108>)
   1a7f4:	4a14      	ldr	r2, [pc, #80]	; (1a848 <update_ccc+0x10c>)
   1a7f6:	fb03 1300 	mla	r3, r3, r0, r1
   1a7fa:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1a7fc:	4a13      	ldr	r2, [pc, #76]	; (1a84c <update_ccc+0x110>)
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1a7fe:	b200      	sxth	r0, r0
	sc_restore_params[index].func = sc_restore_rsp;
   1a800:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   1a802:	1d3a      	adds	r2, r7, #4
   1a804:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   1a806:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1a808:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1a80c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   1a810:	4620      	mov	r0, r4
	sc_restore_params[index].len = sizeof(sc_range);
   1a812:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1a814:	f7ff fea4 	bl	1a560 <bt_gatt_indicate>
   1a818:	2800      	cmp	r0, #0
   1a81a:	d0ba      	beq.n	1a792 <update_ccc+0x56>
		LOG_ERR("SC restore indication failed");
   1a81c:	4b0c      	ldr	r3, [pc, #48]	; (1a850 <update_ccc+0x114>)
   1a81e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a822:	61fb      	str	r3, [r7, #28]
   1a824:	2302      	movs	r3, #2
   1a826:	4805      	ldr	r0, [pc, #20]	; (1a83c <update_ccc+0x100>)
   1a828:	f107 0218 	add.w	r2, r7, #24
   1a82c:	61bb      	str	r3, [r7, #24]
   1a82e:	f017 fe3e 	bl	324ae <z_log_msg_static_create.constprop.0>
   1a832:	e7ae      	b.n	1a792 <update_ccc+0x56>
   1a834:	00019899 	.word	0x00019899
   1a838:	0003d2d0 	.word	0x0003d2d0
   1a83c:	000378e0 	.word	0x000378e0
   1a840:	2000c900 	.word	0x2000c900
   1a844:	2000e724 	.word	0x2000e724
   1a848:	0003825c 	.word	0x0003825c
   1a84c:	00032605 	.word	0x00032605
   1a850:	0003d2e4 	.word	0x0003d2e4

0001a854 <gatt_notify>:
{
   1a854:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a858:	4614      	mov	r4, r2
   1a85a:	4688      	mov	r8, r1
   1a85c:	b087      	sub	sp, #28
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1a85e:	2294      	movs	r2, #148	; 0x94
   1a860:	6861      	ldr	r1, [r4, #4]
{
   1a862:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1a864:	f017 ff3f 	bl	326e6 <bt_gatt_check_perm>
   1a868:	b170      	cbz	r0, 1a888 <gatt_notify+0x34>
		LOG_WRN("Link is not encrypted");
   1a86a:	4b2b      	ldr	r3, [pc, #172]	; (1a918 <gatt_notify+0xc4>)
   1a86c:	482b      	ldr	r0, [pc, #172]	; (1a91c <gatt_notify+0xc8>)
   1a86e:	9305      	str	r3, [sp, #20]
   1a870:	2302      	movs	r3, #2
   1a872:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1a876:	aa04      	add	r2, sp, #16
   1a878:	9304      	str	r3, [sp, #16]
   1a87a:	f017 fe18 	bl	324ae <z_log_msg_static_create.constprop.0>
		return -EPERM;
   1a87e:	f04f 30ff 	mov.w	r0, #4294967295
}
   1a882:	b007      	add	sp, #28
   1a884:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   1a888:	2201      	movs	r2, #1
   1a88a:	4630      	mov	r0, r6
   1a88c:	6861      	ldr	r1, [r4, #4]
   1a88e:	f7ff fd19 	bl	1a2c4 <bt_gatt_is_subscribed>
   1a892:	b960      	cbnz	r0, 1a8ae <gatt_notify+0x5a>
			LOG_WRN("Device is not subscribed to characteristic");
   1a894:	4b22      	ldr	r3, [pc, #136]	; (1a920 <gatt_notify+0xcc>)
   1a896:	4821      	ldr	r0, [pc, #132]	; (1a91c <gatt_notify+0xc8>)
   1a898:	9305      	str	r3, [sp, #20]
   1a89a:	2302      	movs	r3, #2
   1a89c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1a8a0:	aa04      	add	r2, sp, #16
   1a8a2:	9304      	str	r3, [sp, #16]
   1a8a4:	f017 fe03 	bl	324ae <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   1a8a8:	f06f 0015 	mvn.w	r0, #21
   1a8ac:	e7e9      	b.n	1a882 <gatt_notify+0x2e>
				sizeof(*nfy) + params->len);
   1a8ae:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1a8b0:	211b      	movs	r1, #27
   1a8b2:	4630      	mov	r0, r6
   1a8b4:	3202      	adds	r2, #2
   1a8b6:	f7fd feb5 	bl	18624 <bt_att_create_pdu>
	if (!buf) {
   1a8ba:	4605      	mov	r5, r0
   1a8bc:	b960      	cbnz	r0, 1a8d8 <gatt_notify+0x84>
		LOG_WRN("No buffer available to send notification");
   1a8be:	4b19      	ldr	r3, [pc, #100]	; (1a924 <gatt_notify+0xd0>)
   1a8c0:	4816      	ldr	r0, [pc, #88]	; (1a91c <gatt_notify+0xc8>)
   1a8c2:	9305      	str	r3, [sp, #20]
   1a8c4:	2302      	movs	r3, #2
   1a8c6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1a8ca:	aa04      	add	r2, sp, #16
   1a8cc:	9304      	str	r3, [sp, #16]
   1a8ce:	f017 fdee 	bl	324ae <z_log_msg_static_create.constprop.0>
		return -ENOMEM;
   1a8d2:	f06f 000b 	mvn.w	r0, #11
   1a8d6:	e7d4      	b.n	1a882 <gatt_notify+0x2e>
   1a8d8:	f100 090c 	add.w	r9, r0, #12
   1a8dc:	2102      	movs	r1, #2
   1a8de:	4648      	mov	r0, r9
   1a8e0:	f003 fdda 	bl	1e498 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1a8e4:	4607      	mov	r7, r0
   1a8e6:	f827 8b02 	strh.w	r8, [r7], #2
   1a8ea:	89a1      	ldrh	r1, [r4, #12]
   1a8ec:	4648      	mov	r0, r9
   1a8ee:	f003 fdd3 	bl	1e498 <net_buf_simple_add>
   1a8f2:	89a2      	ldrh	r2, [r4, #12]
   1a8f4:	68a1      	ldr	r1, [r4, #8]
   1a8f6:	4638      	mov	r0, r7
   1a8f8:	f01b fe16 	bl	36528 <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   1a8fc:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   1a900:	4628      	mov	r0, r5
   1a902:	2301      	movs	r3, #1
   1a904:	f017 fbc2 	bl	3208c <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   1a908:	4629      	mov	r1, r5
   1a90a:	4630      	mov	r0, r6
}
   1a90c:	b007      	add	sp, #28
   1a90e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   1a912:	f7fe ba89 	b.w	18e28 <bt_att_send>
   1a916:	bf00      	nop
   1a918:	0003d1e9 	.word	0x0003d1e9
   1a91c:	000378e0 	.word	0x000378e0
   1a920:	0003d1ff 	.word	0x0003d1ff
   1a924:	0003d301 	.word	0x0003d301

0001a928 <notify_cb>:
{
   1a928:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a92c:	4b43      	ldr	r3, [pc, #268]	; (1aa3c <notify_cb+0x114>)
{
   1a92e:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a930:	6882      	ldr	r2, [r0, #8]
{
   1a932:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a934:	429a      	cmp	r2, r3
{
   1a936:	b087      	sub	sp, #28
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a938:	d004      	beq.n	1a944 <notify_cb+0x1c>
		return BT_GATT_ITER_CONTINUE;
   1a93a:	2701      	movs	r7, #1
}
   1a93c:	4638      	mov	r0, r7
   1a93e:	b007      	add	sp, #28
   1a940:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ccc = attr->user_data;
   1a944:	68c6      	ldr	r6, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1a946:	4b3e      	ldr	r3, [pc, #248]	; (1aa40 <notify_cb+0x118>)
   1a948:	429e      	cmp	r6, r3
   1a94a:	d010      	beq.n	1a96e <notify_cb+0x46>
		if (cfg->value != data->type) {
   1a94c:	8932      	ldrh	r2, [r6, #8]
   1a94e:	89ab      	ldrh	r3, [r5, #12]
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1a950:	1c71      	adds	r1, r6, #1
		if (cfg->value != data->type) {
   1a952:	429a      	cmp	r2, r3
   1a954:	d1f1      	bne.n	1a93a <notify_cb+0x12>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1a956:	7830      	ldrb	r0, [r6, #0]
   1a958:	f7fc fc92 	bl	17280 <bt_conn_lookup_addr_le>
		if (!conn) {
   1a95c:	4604      	mov	r4, r0
   1a95e:	2800      	cmp	r0, #0
   1a960:	d0eb      	beq.n	1a93a <notify_cb+0x12>
		if (conn->state != BT_CONN_CONNECTED) {
   1a962:	7b43      	ldrb	r3, [r0, #13]
   1a964:	2b07      	cmp	r3, #7
   1a966:	d026      	beq.n	1a9b6 <notify_cb+0x8e>
			bt_conn_unref(conn);
   1a968:	f7fc f98c 	bl	16c84 <bt_conn_unref>
			continue;
   1a96c:	e7e5      	b.n	1a93a <notify_cb+0x12>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1a96e:	f04f 0800 	mov.w	r8, #0
   1a972:	4c34      	ldr	r4, [pc, #208]	; (1aa44 <notify_cb+0x11c>)
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1a974:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 1aa48 <notify_cb+0x120>
   1a978:	4649      	mov	r1, r9
   1a97a:	4620      	mov	r0, r4
   1a97c:	f017 fc0c 	bl	32198 <bt_addr_le_eq>
   1a980:	b978      	cbnz	r0, 1a9a2 <notify_cb+0x7a>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   1a982:	2207      	movs	r2, #7
   1a984:	4621      	mov	r1, r4
   1a986:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1a98a:	f7fc fcf1 	bl	17370 <bt_conn_lookup_state_le>
			if (!conn) {
   1a98e:	b978      	cbnz	r0, 1a9b0 <notify_cb+0x88>
				sc = (struct sc_data *)data->ind_params->data;
   1a990:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
   1a992:	4621      	mov	r1, r4
				sc = (struct sc_data *)data->ind_params->data;
   1a994:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   1a996:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1a99a:	8853      	ldrh	r3, [r2, #2]
   1a99c:	8812      	ldrh	r2, [r2, #0]
   1a99e:	f7fe fe29 	bl	195f4 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1a9a2:	340c      	adds	r4, #12
   1a9a4:	f1b8 0f00 	cmp.w	r8, #0
   1a9a8:	d1d0      	bne.n	1a94c <notify_cb+0x24>
   1a9aa:	f04f 0801 	mov.w	r8, #1
   1a9ae:	e7e3      	b.n	1a978 <notify_cb+0x50>
			bt_conn_unref(conn);
   1a9b0:	f7fc f968 	bl	16c84 <bt_conn_unref>
   1a9b4:	e7f5      	b.n	1a9a2 <notify_cb+0x7a>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   1a9b6:	6973      	ldr	r3, [r6, #20]
   1a9b8:	b123      	cbz	r3, 1a9c4 <notify_cb+0x9c>
   1a9ba:	4639      	mov	r1, r7
   1a9bc:	4798      	blx	r3
   1a9be:	b908      	cbnz	r0, 1a9c4 <notify_cb+0x9c>
			bt_conn_unref(conn);
   1a9c0:	4620      	mov	r0, r4
   1a9c2:	e7d1      	b.n	1a968 <notify_cb+0x40>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1a9c4:	4639      	mov	r1, r7
   1a9c6:	2294      	movs	r2, #148	; 0x94
   1a9c8:	4620      	mov	r0, r4
   1a9ca:	f017 fe8c 	bl	326e6 <bt_gatt_check_perm>
   1a9ce:	4607      	mov	r7, r0
   1a9d0:	b150      	cbz	r0, 1a9e8 <notify_cb+0xc0>
			LOG_WRN("Link is not encrypted");
   1a9d2:	4b1e      	ldr	r3, [pc, #120]	; (1aa4c <notify_cb+0x124>)
   1a9d4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1a9d8:	9305      	str	r3, [sp, #20]
   1a9da:	2302      	movs	r3, #2
   1a9dc:	481c      	ldr	r0, [pc, #112]	; (1aa50 <notify_cb+0x128>)
   1a9de:	aa04      	add	r2, sp, #16
   1a9e0:	9304      	str	r3, [sp, #16]
   1a9e2:	f017 fd64 	bl	324ae <z_log_msg_static_create.constprop.0>
   1a9e6:	e7eb      	b.n	1a9c0 <notify_cb+0x98>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   1a9e8:	89ab      	ldrh	r3, [r5, #12]
   1a9ea:	2b02      	cmp	r3, #2
   1a9ec:	d114      	bne.n	1aa18 <notify_cb+0xf0>
   1a9ee:	8933      	ldrh	r3, [r6, #8]
   1a9f0:	079a      	lsls	r2, r3, #30
   1a9f2:	d405      	bmi.n	1aa00 <notify_cb+0xd8>
		bt_conn_unref(conn);
   1a9f4:	4620      	mov	r0, r4
   1a9f6:	f7fc f945 	bl	16c84 <bt_conn_unref>
		data->err = 0;
   1a9fa:	2300      	movs	r3, #0
   1a9fc:	60ab      	str	r3, [r5, #8]
   1a9fe:	e79c      	b.n	1a93a <notify_cb+0x12>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   1aa00:	4620      	mov	r0, r4
   1aa02:	692a      	ldr	r2, [r5, #16]
   1aa04:	88a9      	ldrh	r1, [r5, #4]
   1aa06:	f7ff fd27 	bl	1a458 <gatt_indicate>
			if (err == 0) {
   1aa0a:	4606      	mov	r6, r0
   1aa0c:	b978      	cbnz	r0, 1aa2e <notify_cb+0x106>
				data->ind_params->_ref++;
   1aa0e:	692a      	ldr	r2, [r5, #16]
   1aa10:	7d93      	ldrb	r3, [r2, #22]
   1aa12:	3301      	adds	r3, #1
   1aa14:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   1aa16:	e7ed      	b.n	1a9f4 <notify_cb+0xcc>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   1aa18:	2b01      	cmp	r3, #1
   1aa1a:	d1eb      	bne.n	1a9f4 <notify_cb+0xcc>
   1aa1c:	8933      	ldrh	r3, [r6, #8]
   1aa1e:	07db      	lsls	r3, r3, #31
   1aa20:	d5e8      	bpl.n	1a9f4 <notify_cb+0xcc>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1aa22:	4620      	mov	r0, r4
   1aa24:	692a      	ldr	r2, [r5, #16]
   1aa26:	88a9      	ldrh	r1, [r5, #4]
   1aa28:	f7ff ff14 	bl	1a854 <gatt_notify>
   1aa2c:	4606      	mov	r6, r0
		bt_conn_unref(conn);
   1aa2e:	4620      	mov	r0, r4
   1aa30:	f7fc f928 	bl	16c84 <bt_conn_unref>
		if (err < 0) {
   1aa34:	2e00      	cmp	r6, #0
   1aa36:	db81      	blt.n	1a93c <notify_cb+0x14>
   1aa38:	e7df      	b.n	1a9fa <notify_cb+0xd2>
   1aa3a:	bf00      	nop
   1aa3c:	00019899 	.word	0x00019899
   1aa40:	2000c900 	.word	0x2000c900
   1aa44:	2000ef6d 	.word	0x2000ef6d
   1aa48:	0003b6d4 	.word	0x0003b6d4
   1aa4c:	0003d1e9 	.word	0x0003d1e9
   1aa50:	000378e0 	.word	0x000378e0

0001aa54 <bt_gatt_exchange_mtu>:
{
   1aa54:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1aa56:	460d      	mov	r5, r1
	__ASSERT(conn, "invalid parameter\n");
   1aa58:	4604      	mov	r4, r0
   1aa5a:	b970      	cbnz	r0, 1aa7a <bt_gatt_exchange_mtu+0x26>
   1aa5c:	4921      	ldr	r1, [pc, #132]	; (1aae4 <bt_gatt_exchange_mtu+0x90>)
   1aa5e:	f44f 6366 	mov.w	r3, #3680	; 0xe60
   1aa62:	4a21      	ldr	r2, [pc, #132]	; (1aae8 <bt_gatt_exchange_mtu+0x94>)
   1aa64:	4821      	ldr	r0, [pc, #132]	; (1aaec <bt_gatt_exchange_mtu+0x98>)
   1aa66:	f014 fcad 	bl	2f3c4 <assert_print>
   1aa6a:	4821      	ldr	r0, [pc, #132]	; (1aaf0 <bt_gatt_exchange_mtu+0x9c>)
   1aa6c:	f014 fcaa 	bl	2f3c4 <assert_print>
   1aa70:	f44f 6166 	mov.w	r1, #3680	; 0xe60
	__ASSERT(params && params->func, "invalid parameters\n");
   1aa74:	481c      	ldr	r0, [pc, #112]	; (1aae8 <bt_gatt_exchange_mtu+0x94>)
   1aa76:	f014 fc9e 	bl	2f3b6 <assert_post_action>
   1aa7a:	b109      	cbz	r1, 1aa80 <bt_gatt_exchange_mtu+0x2c>
   1aa7c:	680b      	ldr	r3, [r1, #0]
   1aa7e:	b963      	cbnz	r3, 1aa9a <bt_gatt_exchange_mtu+0x46>
   1aa80:	491c      	ldr	r1, [pc, #112]	; (1aaf4 <bt_gatt_exchange_mtu+0xa0>)
   1aa82:	f640 6361 	movw	r3, #3681	; 0xe61
   1aa86:	4a18      	ldr	r2, [pc, #96]	; (1aae8 <bt_gatt_exchange_mtu+0x94>)
   1aa88:	4818      	ldr	r0, [pc, #96]	; (1aaec <bt_gatt_exchange_mtu+0x98>)
   1aa8a:	f014 fc9b 	bl	2f3c4 <assert_print>
   1aa8e:	481a      	ldr	r0, [pc, #104]	; (1aaf8 <bt_gatt_exchange_mtu+0xa4>)
   1aa90:	f014 fc98 	bl	2f3c4 <assert_print>
   1aa94:	f640 6161 	movw	r1, #3681	; 0xe61
   1aa98:	e7ec      	b.n	1aa74 <bt_gatt_exchange_mtu+0x20>
	if (conn->state != BT_CONN_CONNECTED) {
   1aa9a:	7b43      	ldrb	r3, [r0, #13]
   1aa9c:	2b07      	cmp	r3, #7
   1aa9e:	d11a      	bne.n	1aad6 <bt_gatt_exchange_mtu+0x82>
	if (atomic_test_and_set_bit(conn->flags, BT_CONN_ATT_MTU_EXCHANGED)) {
   1aaa0:	1d06      	adds	r6, r0, #4
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1aaa2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   1aaa6:	4630      	mov	r0, r6
   1aaa8:	f017 fb8d 	bl	321c6 <atomic_or>
   1aaac:	04c3      	lsls	r3, r0, #19
   1aaae:	d415      	bmi.n	1aadc <bt_gatt_exchange_mtu+0x88>
	err = gatt_req_send(conn, gatt_mtu_rsp, params,
   1aab0:	2302      	movs	r3, #2
   1aab2:	4620      	mov	r0, r4
   1aab4:	e9cd 3300 	strd	r3, r3, [sp]
   1aab8:	462a      	mov	r2, r5
   1aaba:	4b10      	ldr	r3, [pc, #64]	; (1aafc <bt_gatt_exchange_mtu+0xa8>)
   1aabc:	4910      	ldr	r1, [pc, #64]	; (1ab00 <bt_gatt_exchange_mtu+0xac>)
   1aabe:	f017 fd2e 	bl	3251e <gatt_req_send.constprop.0>
	if (err) {
   1aac2:	4604      	mov	r4, r0
   1aac4:	b120      	cbz	r0, 1aad0 <bt_gatt_exchange_mtu+0x7c>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1aac6:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   1aaca:	4630      	mov	r0, r6
   1aacc:	f017 fb86 	bl	321dc <atomic_and>
}
   1aad0:	4620      	mov	r0, r4
   1aad2:	b002      	add	sp, #8
   1aad4:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTCONN;
   1aad6:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   1aada:	e7f9      	b.n	1aad0 <bt_gatt_exchange_mtu+0x7c>
		return -EALREADY;
   1aadc:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1aae0:	e7f6      	b.n	1aad0 <bt_gatt_exchange_mtu+0x7c>
   1aae2:	bf00      	nop
   1aae4:	0003bca4 	.word	0x0003bca4
   1aae8:	0003ce4a 	.word	0x0003ce4a
   1aaec:	00039995 	.word	0x00039995
   1aaf0:	0003d1b9 	.word	0x0003d1b9
   1aaf4:	0003d32a 	.word	0x0003d32a
   1aaf8:	0003d251 	.word	0x0003d251
   1aafc:	000321f9 	.word	0x000321f9
   1ab00:	000320e3 	.word	0x000320e3

0001ab04 <bt_gatt_discover>:
{
   1ab04:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ab06:	b087      	sub	sp, #28
   1ab08:	460c      	mov	r4, r1
	__ASSERT(conn, "invalid parameters\n");
   1ab0a:	4605      	mov	r5, r0
{
   1ab0c:	af02      	add	r7, sp, #8
	__ASSERT(conn, "invalid parameters\n");
   1ab0e:	b970      	cbnz	r0, 1ab2e <bt_gatt_discover+0x2a>
   1ab10:	4974      	ldr	r1, [pc, #464]	; (1ace4 <bt_gatt_discover+0x1e0>)
   1ab12:	f241 13a4 	movw	r3, #4516	; 0x11a4
   1ab16:	4a74      	ldr	r2, [pc, #464]	; (1ace8 <bt_gatt_discover+0x1e4>)
   1ab18:	4874      	ldr	r0, [pc, #464]	; (1acec <bt_gatt_discover+0x1e8>)
   1ab1a:	f014 fc53 	bl	2f3c4 <assert_print>
   1ab1e:	4874      	ldr	r0, [pc, #464]	; (1acf0 <bt_gatt_discover+0x1ec>)
   1ab20:	f014 fc50 	bl	2f3c4 <assert_print>
   1ab24:	f241 11a4 	movw	r1, #4516	; 0x11a4
	__ASSERT(params && params->func, "invalid parameters\n");
   1ab28:	486f      	ldr	r0, [pc, #444]	; (1ace8 <bt_gatt_discover+0x1e4>)
   1ab2a:	f014 fc44 	bl	2f3b6 <assert_post_action>
   1ab2e:	b109      	cbz	r1, 1ab34 <bt_gatt_discover+0x30>
   1ab30:	684b      	ldr	r3, [r1, #4]
   1ab32:	b963      	cbnz	r3, 1ab4e <bt_gatt_discover+0x4a>
   1ab34:	496f      	ldr	r1, [pc, #444]	; (1acf4 <bt_gatt_discover+0x1f0>)
   1ab36:	f241 13a5 	movw	r3, #4517	; 0x11a5
   1ab3a:	4a6b      	ldr	r2, [pc, #428]	; (1ace8 <bt_gatt_discover+0x1e4>)
   1ab3c:	486b      	ldr	r0, [pc, #428]	; (1acec <bt_gatt_discover+0x1e8>)
   1ab3e:	f014 fc41 	bl	2f3c4 <assert_print>
   1ab42:	486b      	ldr	r0, [pc, #428]	; (1acf0 <bt_gatt_discover+0x1ec>)
   1ab44:	f014 fc3e 	bl	2f3c4 <assert_print>
   1ab48:	f241 11a5 	movw	r1, #4517	; 0x11a5
   1ab4c:	e7ec      	b.n	1ab28 <bt_gatt_discover+0x24>
	__ASSERT((params->start_handle && params->end_handle),
   1ab4e:	890a      	ldrh	r2, [r1, #8]
   1ab50:	b10a      	cbz	r2, 1ab56 <bt_gatt_discover+0x52>
   1ab52:	89cb      	ldrh	r3, [r1, #14]
   1ab54:	b963      	cbnz	r3, 1ab70 <bt_gatt_discover+0x6c>
   1ab56:	4968      	ldr	r1, [pc, #416]	; (1acf8 <bt_gatt_discover+0x1f4>)
   1ab58:	f241 13a6 	movw	r3, #4518	; 0x11a6
   1ab5c:	4a62      	ldr	r2, [pc, #392]	; (1ace8 <bt_gatt_discover+0x1e4>)
   1ab5e:	4863      	ldr	r0, [pc, #396]	; (1acec <bt_gatt_discover+0x1e8>)
   1ab60:	f014 fc30 	bl	2f3c4 <assert_print>
   1ab64:	4862      	ldr	r0, [pc, #392]	; (1acf0 <bt_gatt_discover+0x1ec>)
   1ab66:	f014 fc2d 	bl	2f3c4 <assert_print>
   1ab6a:	f241 11a6 	movw	r1, #4518	; 0x11a6
   1ab6e:	e7db      	b.n	1ab28 <bt_gatt_discover+0x24>
	__ASSERT((params->start_handle <= params->end_handle),
   1ab70:	429a      	cmp	r2, r3
   1ab72:	d90c      	bls.n	1ab8e <bt_gatt_discover+0x8a>
   1ab74:	4961      	ldr	r1, [pc, #388]	; (1acfc <bt_gatt_discover+0x1f8>)
   1ab76:	f241 13a8 	movw	r3, #4520	; 0x11a8
   1ab7a:	4a5b      	ldr	r2, [pc, #364]	; (1ace8 <bt_gatt_discover+0x1e4>)
   1ab7c:	485b      	ldr	r0, [pc, #364]	; (1acec <bt_gatt_discover+0x1e8>)
   1ab7e:	f014 fc21 	bl	2f3c4 <assert_print>
   1ab82:	485b      	ldr	r0, [pc, #364]	; (1acf0 <bt_gatt_discover+0x1ec>)
   1ab84:	f014 fc1e 	bl	2f3c4 <assert_print>
   1ab88:	f241 11a8 	movw	r1, #4520	; 0x11a8
   1ab8c:	e7cc      	b.n	1ab28 <bt_gatt_discover+0x24>
	if (conn->state != BT_CONN_CONNECTED) {
   1ab8e:	7b43      	ldrb	r3, [r0, #13]
   1ab90:	2b07      	cmp	r3, #7
   1ab92:	f040 80a4 	bne.w	1acde <bt_gatt_discover+0x1da>
	switch (params->type) {
   1ab96:	7c0b      	ldrb	r3, [r1, #16]
   1ab98:	2b06      	cmp	r3, #6
   1ab9a:	f200 809b 	bhi.w	1acd4 <bt_gatt_discover+0x1d0>
   1ab9e:	e8df f003 	tbb	[pc, r3]
   1aba2:	0404      	.short	0x0404
   1aba4:	92645c5c 	.word	0x92645c5c
   1aba8:	31          	.byte	0x31
   1aba9:	00          	.byte	0x00
		if (params->uuid) {
   1abaa:	680b      	ldr	r3, [r1, #0]
   1abac:	b313      	cbz	r3, 1abf4 <bt_gatt_discover+0xf0>
	switch (params->uuid->type) {
   1abae:	781b      	ldrb	r3, [r3, #0]
   1abb0:	b18b      	cbz	r3, 1abd6 <bt_gatt_discover+0xd2>
   1abb2:	2b02      	cmp	r3, #2
   1abb4:	d01c      	beq.n	1abf0 <bt_gatt_discover+0xec>
		LOG_ERR("Unknown UUID type %u", params->uuid->type);
   1abb6:	466c      	mov	r4, sp
   1abb8:	b088      	sub	sp, #32
   1abba:	aa02      	add	r2, sp, #8
   1abbc:	4950      	ldr	r1, [pc, #320]	; (1ad00 <bt_gatt_discover+0x1fc>)
	switch (params->type) {
   1abbe:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Invalid discovery type: %u", params->type);
   1abc2:	2303      	movs	r3, #3
   1abc4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1abc8:	484e      	ldr	r0, [pc, #312]	; (1ad04 <bt_gatt_discover+0x200>)
   1abca:	f842 3f10 	str.w	r3, [r2, #16]!
   1abce:	f017 fc6e 	bl	324ae <z_log_msg_static_create.constprop.0>
   1abd2:	46a5      	mov	sp, r4
	return -EINVAL;
   1abd4:	e054      	b.n	1ac80 <bt_gatt_discover+0x17c>
		len += BT_UUID_SIZE_16;
   1abd6:	2308      	movs	r3, #8
	return gatt_req_send(conn, gatt_find_type_rsp, params,
   1abd8:	9301      	str	r3, [sp, #4]
   1abda:	2306      	movs	r3, #6
   1abdc:	4622      	mov	r2, r4
   1abde:	9300      	str	r3, [sp, #0]
   1abe0:	4949      	ldr	r1, [pc, #292]	; (1ad08 <bt_gatt_discover+0x204>)
   1abe2:	4b4a      	ldr	r3, [pc, #296]	; (1ad0c <bt_gatt_discover+0x208>)
	return gatt_req_send(conn, gatt_read_group_rsp, params,
   1abe4:	4628      	mov	r0, r5
   1abe6:	f017 fc9a 	bl	3251e <gatt_req_send.constprop.0>
}
   1abea:	3714      	adds	r7, #20
   1abec:	46bd      	mov	sp, r7
   1abee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (params->uuid->type) {
   1abf0:	2316      	movs	r3, #22
   1abf2:	e7f1      	b.n	1abd8 <bt_gatt_discover+0xd4>
	return gatt_req_send(conn, gatt_read_group_rsp, params,
   1abf4:	2310      	movs	r3, #16
   1abf6:	2104      	movs	r1, #4
   1abf8:	4622      	mov	r2, r4
   1abfa:	e9cd 3100 	strd	r3, r1, [sp]
   1abfe:	4b44      	ldr	r3, [pc, #272]	; (1ad10 <bt_gatt_discover+0x20c>)
   1ac00:	4944      	ldr	r1, [pc, #272]	; (1ad14 <bt_gatt_discover+0x210>)
   1ac02:	e7ef      	b.n	1abe4 <bt_gatt_discover+0xe0>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
   1ac04:	6808      	ldr	r0, [r1, #0]
   1ac06:	2800      	cmp	r0, #0
   1ac08:	d03a      	beq.n	1ac80 <bt_gatt_discover+0x17c>
   1ac0a:	7806      	ldrb	r6, [r0, #0]
   1ac0c:	2e00      	cmp	r6, #0
   1ac0e:	d137      	bne.n	1ac80 <bt_gatt_discover+0x17c>
		      (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_CEP) ||
   1ac10:	f44f 5324 	mov.w	r3, #10496	; 0x2900
   1ac14:	4639      	mov	r1, r7
   1ac16:	703e      	strb	r6, [r7, #0]
   1ac18:	807b      	strh	r3, [r7, #2]
   1ac1a:	f016 f8d6 	bl	30dca <bt_uuid_cmp>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
   1ac1e:	b1e0      	cbz	r0, 1ac5a <bt_gatt_discover+0x156>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CCC) ||
   1ac20:	f642 1302 	movw	r3, #10498	; 0x2902
   1ac24:	6820      	ldr	r0, [r4, #0]
   1ac26:	713e      	strb	r6, [r7, #4]
   1ac28:	80fb      	strh	r3, [r7, #6]
   1ac2a:	1d39      	adds	r1, r7, #4
   1ac2c:	f016 f8cd 	bl	30dca <bt_uuid_cmp>
		      (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_CEP) ||
   1ac30:	b198      	cbz	r0, 1ac5a <bt_gatt_discover+0x156>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SCC) ||
   1ac32:	f642 1303 	movw	r3, #10499	; 0x2903
   1ac36:	6820      	ldr	r0, [r4, #0]
   1ac38:	723e      	strb	r6, [r7, #8]
   1ac3a:	817b      	strh	r3, [r7, #10]
   1ac3c:	f107 0108 	add.w	r1, r7, #8
   1ac40:	f016 f8c3 	bl	30dca <bt_uuid_cmp>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CCC) ||
   1ac44:	b148      	cbz	r0, 1ac5a <bt_gatt_discover+0x156>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CPF)))) {
   1ac46:	f642 1304 	movw	r3, #10500	; 0x2904
   1ac4a:	6820      	ldr	r0, [r4, #0]
   1ac4c:	733e      	strb	r6, [r7, #12]
   1ac4e:	81fb      	strh	r3, [r7, #14]
   1ac50:	f107 010c 	add.w	r1, r7, #12
   1ac54:	f016 f8b9 	bl	30dca <bt_uuid_cmp>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SCC) ||
   1ac58:	b990      	cbnz	r0, 1ac80 <bt_gatt_discover+0x17c>
	return gatt_req_send(conn, gatt_read_type_rsp, params,
   1ac5a:	2308      	movs	r3, #8
   1ac5c:	2204      	movs	r2, #4
   1ac5e:	492e      	ldr	r1, [pc, #184]	; (1ad18 <bt_gatt_discover+0x214>)
   1ac60:	e9cd 3200 	strd	r3, r2, [sp]
   1ac64:	4622      	mov	r2, r4
   1ac66:	4b2d      	ldr	r3, [pc, #180]	; (1ad1c <bt_gatt_discover+0x218>)
   1ac68:	e7bc      	b.n	1abe4 <bt_gatt_discover+0xe0>
		if (params->uuid &&
   1ac6a:	6808      	ldr	r0, [r1, #0]
   1ac6c:	b358      	cbz	r0, 1acc6 <bt_gatt_discover+0x1c2>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   1ac6e:	2600      	movs	r6, #0
   1ac70:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1ac74:	4639      	mov	r1, r7
   1ac76:	703e      	strb	r6, [r7, #0]
   1ac78:	807b      	strh	r3, [r7, #2]
   1ac7a:	f016 f8a6 	bl	30dca <bt_uuid_cmp>
		if (params->uuid &&
   1ac7e:	b910      	cbnz	r0, 1ac86 <bt_gatt_discover+0x182>
			return -EINVAL;
   1ac80:	f06f 0015 	mvn.w	r0, #21
   1ac84:	e7b1      	b.n	1abea <bt_gatt_discover+0xe6>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   1ac86:	f642 0301 	movw	r3, #10241	; 0x2801
   1ac8a:	6820      	ldr	r0, [r4, #0]
   1ac8c:	713e      	strb	r6, [r7, #4]
   1ac8e:	80fb      	strh	r3, [r7, #6]
   1ac90:	1d39      	adds	r1, r7, #4
   1ac92:	f016 f89a 	bl	30dca <bt_uuid_cmp>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   1ac96:	2800      	cmp	r0, #0
   1ac98:	d0f2      	beq.n	1ac80 <bt_gatt_discover+0x17c>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   1ac9a:	f642 0302 	movw	r3, #10242	; 0x2802
   1ac9e:	6820      	ldr	r0, [r4, #0]
   1aca0:	723e      	strb	r6, [r7, #8]
   1aca2:	817b      	strh	r3, [r7, #10]
   1aca4:	f107 0108 	add.w	r1, r7, #8
   1aca8:	f016 f88f 	bl	30dca <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   1acac:	2800      	cmp	r0, #0
   1acae:	d0e7      	beq.n	1ac80 <bt_gatt_discover+0x17c>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CHRC))) {
   1acb0:	f642 0303 	movw	r3, #10243	; 0x2803
   1acb4:	6820      	ldr	r0, [r4, #0]
   1acb6:	733e      	strb	r6, [r7, #12]
   1acb8:	81fb      	strh	r3, [r7, #14]
   1acba:	f107 010c 	add.w	r1, r7, #12
   1acbe:	f016 f884 	bl	30dca <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   1acc2:	2800      	cmp	r0, #0
   1acc4:	d0dc      	beq.n	1ac80 <bt_gatt_discover+0x17c>
	return gatt_req_send(conn, gatt_find_info_rsp, params,
   1acc6:	2304      	movs	r3, #4
   1acc8:	4622      	mov	r2, r4
   1acca:	e9cd 3300 	strd	r3, r3, [sp]
   1acce:	4914      	ldr	r1, [pc, #80]	; (1ad20 <bt_gatt_discover+0x21c>)
   1acd0:	4b14      	ldr	r3, [pc, #80]	; (1ad24 <bt_gatt_discover+0x220>)
   1acd2:	e787      	b.n	1abe4 <bt_gatt_discover+0xe0>
		LOG_ERR("Invalid discovery type: %u", params->type);
   1acd4:	466c      	mov	r4, sp
   1acd6:	b088      	sub	sp, #32
   1acd8:	aa02      	add	r2, sp, #8
   1acda:	4913      	ldr	r1, [pc, #76]	; (1ad28 <bt_gatt_discover+0x224>)
   1acdc:	e76f      	b.n	1abbe <bt_gatt_discover+0xba>
		return -ENOTCONN;
   1acde:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1ace2:	e782      	b.n	1abea <bt_gatt_discover+0xe6>
   1ace4:	0003bca4 	.word	0x0003bca4
   1ace8:	0003ce4a 	.word	0x0003ce4a
   1acec:	00039995 	.word	0x00039995
   1acf0:	0003d251 	.word	0x0003d251
   1acf4:	0003d32a 	.word	0x0003d32a
   1acf8:	0003d341 	.word	0x0003d341
   1acfc:	0003d36e 	.word	0x0003d36e
   1ad00:	0003d39b 	.word	0x0003d39b
   1ad04:	000378e0 	.word	0x000378e0
   1ad08:	00032797 	.word	0x00032797
   1ad0c:	000324d3 	.word	0x000324d3
   1ad10:	0003225f 	.word	0x0003225f
   1ad14:	0001ad2d 	.word	0x0001ad2d
   1ad18:	0001ae51 	.word	0x0001ae51
   1ad1c:	0003228f 	.word	0x0003228f
   1ad20:	0001b1f5 	.word	0x0001b1f5
   1ad24:	00032223 	.word	0x00032223
   1ad28:	0003d3b0 	.word	0x0003d3b0

0001ad2c <gatt_read_group_rsp>:
{
   1ad2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ad30:	b08f      	sub	sp, #60	; 0x3c
   1ad32:	af00      	add	r7, sp, #0
   1ad34:	4606      	mov	r6, r0
   1ad36:	4691      	mov	r9, r2
   1ad38:	f8d7 8060 	ldr.w	r8, [r7, #96]	; 0x60
	if (err) {
   1ad3c:	b141      	cbz	r1, 1ad50 <gatt_read_group_rsp+0x24>
		params->func(conn, NULL, params);
   1ad3e:	4642      	mov	r2, r8
   1ad40:	2100      	movs	r1, #0
   1ad42:	f8d8 3004 	ldr.w	r3, [r8, #4]
	params->func(conn, NULL, params);
   1ad46:	4798      	blx	r3
}
   1ad48:	373c      	adds	r7, #60	; 0x3c
   1ad4a:	46bd      	mov	sp, r7
   1ad4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (rsp->len) {
   1ad50:	7810      	ldrb	r0, [r2, #0]
   1ad52:	2806      	cmp	r0, #6
   1ad54:	d017      	beq.n	1ad86 <gatt_read_group_rsp+0x5a>
   1ad56:	2814      	cmp	r0, #20
   1ad58:	d014      	beq.n	1ad84 <gatt_read_group_rsp+0x58>
		LOG_ERR("Invalid data len %u", rsp->len);
   1ad5a:	466c      	mov	r4, sp
   1ad5c:	b088      	sub	sp, #32
   1ad5e:	466a      	mov	r2, sp
   1ad60:	4b39      	ldr	r3, [pc, #228]	; (1ae48 <gatt_read_group_rsp+0x11c>)
   1ad62:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
	switch (rsp->len) {
   1ad66:	e9c2 3005 	strd	r3, r0, [r2, #20]
		LOG_ERR("Invalid data len %u", rsp->len);
   1ad6a:	2303      	movs	r3, #3
   1ad6c:	4837      	ldr	r0, [pc, #220]	; (1ae4c <gatt_read_group_rsp+0x120>)
   1ad6e:	f842 3f10 	str.w	r3, [r2, #16]!
   1ad72:	f017 fb9c 	bl	324ae <z_log_msg_static_create.constprop.0>
   1ad76:	46a5      	mov	sp, r4
	params->func(conn, NULL, params);
   1ad78:	4642      	mov	r2, r8
   1ad7a:	2100      	movs	r1, #0
   1ad7c:	4630      	mov	r0, r6
   1ad7e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1ad82:	e7e0      	b.n	1ad46 <gatt_read_group_rsp+0x1a>
	switch (rsp->len) {
   1ad84:	2102      	movs	r1, #2
	uint16_t start_handle, end_handle = 0U;
   1ad86:	2500      	movs	r5, #0
		struct bt_gatt_attr attr = {};
   1ad88:	46aa      	mov	sl, r5
	for (length--, pdu = rsp->data; length >= rsp->len;
   1ad8a:	3b01      	subs	r3, #1
		u.uuid.type = BT_UUID_TYPE_16;
   1ad8c:	7439      	strb	r1, [r7, #16]
	for (length--, pdu = rsp->data; length >= rsp->len;
   1ad8e:	b29c      	uxth	r4, r3
   1ad90:	f109 0b01 	add.w	fp, r9, #1
   1ad94:	f899 3000 	ldrb.w	r3, [r9]
   1ad98:	42a3      	cmp	r3, r4
   1ad9a:	d909      	bls.n	1adb0 <gatt_read_group_rsp+0x84>
	if (length == 0U && end_handle) {
   1ad9c:	2c00      	cmp	r4, #0
   1ad9e:	d1eb      	bne.n	1ad78 <gatt_read_group_rsp+0x4c>
   1ada0:	2d00      	cmp	r5, #0
   1ada2:	d0e9      	beq.n	1ad78 <gatt_read_group_rsp+0x4c>
	gatt_discover_next(conn, handle, params);
   1ada4:	4642      	mov	r2, r8
   1ada6:	4629      	mov	r1, r5
   1ada8:	4630      	mov	r0, r6
   1adaa:	f017 fcd6 	bl	3275a <gatt_discover_next>
   1adae:	e7cb      	b.n	1ad48 <gatt_read_group_rsp+0x1c>
		struct bt_gatt_attr attr = {};
   1adb0:	2214      	movs	r2, #20
   1adb2:	2100      	movs	r1, #0
   1adb4:	f107 0024 	add.w	r0, r7, #36	; 0x24
   1adb8:	f01b fbd6 	bl	36568 <memset>
		start_handle = sys_le16_to_cpu(data->start_handle);
   1adbc:	f8bb 2000 	ldrh.w	r2, [fp]
   1adc0:	b293      	uxth	r3, r2
		if (!start_handle) {
   1adc2:	2b00      	cmp	r3, #0
   1adc4:	d0d8      	beq.n	1ad78 <gatt_read_group_rsp+0x4c>
		end_handle = sys_le16_to_cpu(data->end_handle);
   1adc6:	f8bb 1002 	ldrh.w	r1, [fp, #2]
   1adca:	b28d      	uxth	r5, r1
		if (!end_handle || end_handle < start_handle) {
   1adcc:	2d00      	cmp	r5, #0
   1adce:	d0d3      	beq.n	1ad78 <gatt_read_group_rsp+0x4c>
   1add0:	42ab      	cmp	r3, r5
   1add2:	d8d1      	bhi.n	1ad78 <gatt_read_group_rsp+0x4c>
		switch (u.uuid.type) {
   1add4:	7c3b      	ldrb	r3, [r7, #16]
   1add6:	b32b      	cbz	r3, 1ae24 <gatt_read_group_rsp+0xf8>
   1add8:	2b02      	cmp	r3, #2
   1adda:	d027      	beq.n	1ae2c <gatt_read_group_rsp+0x100>
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   1addc:	f898 3010 	ldrb.w	r3, [r8, #16]
		value.end_handle = end_handle;
   1ade0:	81b9      	strh	r1, [r7, #12]
			uuid_svc.val = BT_UUID_GATT_PRIMARY_VAL;
   1ade2:	2b00      	cmp	r3, #0
   1ade4:	f642 0301 	movw	r3, #10241	; 0x2801
   1ade8:	bf08      	it	eq
   1adea:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
   1adee:	80fb      	strh	r3, [r7, #6]
		value.uuid = &u.uuid;
   1adf0:	f107 0310 	add.w	r3, r7, #16
   1adf4:	60bb      	str	r3, [r7, #8]
		attr.uuid = &uuid_svc.uuid;
   1adf6:	1d3b      	adds	r3, r7, #4
   1adf8:	627b      	str	r3, [r7, #36]	; 0x24
		attr.user_data = &value;
   1adfa:	f107 0308 	add.w	r3, r7, #8
		attr.handle = start_handle;
   1adfe:	86ba      	strh	r2, [r7, #52]	; 0x34
		attr.user_data = &value;
   1ae00:	633b      	str	r3, [r7, #48]	; 0x30
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1ae02:	4642      	mov	r2, r8
   1ae04:	4630      	mov	r0, r6
   1ae06:	f8d8 3004 	ldr.w	r3, [r8, #4]
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   1ae0a:	f887 a004 	strb.w	sl, [r7, #4]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1ae0e:	f107 0124 	add.w	r1, r7, #36	; 0x24
   1ae12:	4798      	blx	r3
   1ae14:	2800      	cmp	r0, #0
   1ae16:	d097      	beq.n	1ad48 <gatt_read_group_rsp+0x1c>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   1ae18:	f899 3000 	ldrb.w	r3, [r9]
   1ae1c:	1ae4      	subs	r4, r4, r3
   1ae1e:	b2a4      	uxth	r4, r4
   1ae20:	449b      	add	fp, r3
   1ae22:	e7b7      	b.n	1ad94 <gatt_read_group_rsp+0x68>
			memcpy(&u.u16.val, data->value, sizeof(u.u16.val));
   1ae24:	f8bb 3004 	ldrh.w	r3, [fp, #4]
   1ae28:	827b      	strh	r3, [r7, #18]
			break;
   1ae2a:	e7d7      	b.n	1addc <gatt_read_group_rsp+0xb0>
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   1ae2c:	f10b 0304 	add.w	r3, fp, #4
   1ae30:	f107 0011 	add.w	r0, r7, #17
   1ae34:	f10b 0c14 	add.w	ip, fp, #20
   1ae38:	f853 eb04 	ldr.w	lr, [r3], #4
   1ae3c:	4563      	cmp	r3, ip
   1ae3e:	f840 eb04 	str.w	lr, [r0], #4
   1ae42:	d1f9      	bne.n	1ae38 <gatt_read_group_rsp+0x10c>
   1ae44:	e7ca      	b.n	1addc <gatt_read_group_rsp+0xb0>
   1ae46:	bf00      	nop
   1ae48:	0003d3cb 	.word	0x0003d3cb
   1ae4c:	000378e0 	.word	0x000378e0

0001ae50 <gatt_read_type_rsp>:
{
   1ae50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ae54:	b093      	sub	sp, #76	; 0x4c
   1ae56:	af02      	add	r7, sp, #8
   1ae58:	4680      	mov	r8, r0
   1ae5a:	4616      	mov	r6, r2
   1ae5c:	6ebd      	ldr	r5, [r7, #104]	; 0x68
	if (err) {
   1ae5e:	b121      	cbz	r1, 1ae6a <gatt_read_type_rsp+0x1a>
		params->func(conn, NULL, params);
   1ae60:	462a      	mov	r2, r5
   1ae62:	2100      	movs	r1, #0
   1ae64:	686b      	ldr	r3, [r5, #4]
	params->func(conn, NULL, params);
   1ae66:	4798      	blx	r3
	if (!handle) {
   1ae68:	e06c      	b.n	1af44 <gatt_read_type_rsp+0xf4>
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
   1ae6a:	7c28      	ldrb	r0, [r5, #16]
   1ae6c:	2802      	cmp	r0, #2
   1ae6e:	f040 808a 	bne.w	1af86 <gatt_read_type_rsp+0x136>
	switch (rsp->len) {
   1ae72:	7814      	ldrb	r4, [r2, #0]
   1ae74:	2c06      	cmp	r4, #6
   1ae76:	d015      	beq.n	1aea4 <gatt_read_type_rsp+0x54>
   1ae78:	2c08      	cmp	r4, #8
   1ae7a:	d014      	beq.n	1aea6 <gatt_read_type_rsp+0x56>
		LOG_ERR("Invalid data len %u", rsp->len);
   1ae7c:	466e      	mov	r6, sp
   1ae7e:	b088      	sub	sp, #32
   1ae80:	aa02      	add	r2, sp, #8
   1ae82:	4baa      	ldr	r3, [pc, #680]	; (1b12c <gatt_read_type_rsp+0x2dc>)
	switch (rsp->len) {
   1ae84:	e9c2 3405 	strd	r3, r4, [r2, #20]
		LOG_ERR("Invalid data len %u", rsp->len);
   1ae88:	2303      	movs	r3, #3
   1ae8a:	f842 3f10 	str.w	r3, [r2, #16]!
		LOG_ERR("Invalid data len %u", rsp->len);
   1ae8e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ae92:	48a7      	ldr	r0, [pc, #668]	; (1b130 <gatt_read_type_rsp+0x2e0>)
   1ae94:	f017 fb0b 	bl	324ae <z_log_msg_static_create.constprop.0>
   1ae98:	46b5      	mov	sp, r6
	params->func(conn, NULL, params);
   1ae9a:	462a      	mov	r2, r5
   1ae9c:	2100      	movs	r1, #0
   1ae9e:	4640      	mov	r0, r8
   1aea0:	686b      	ldr	r3, [r5, #4]
   1aea2:	e7e0      	b.n	1ae66 <gatt_read_type_rsp+0x16>
	switch (rsp->len) {
   1aea4:	4601      	mov	r1, r0
	uint16_t handle = 0U;
   1aea6:	f04f 0900 	mov.w	r9, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   1aeaa:	1e5c      	subs	r4, r3, #1
		u.uuid.type = BT_UUID_TYPE_16;
   1aeac:	7639      	strb	r1, [r7, #24]
	for (length--, pdu = rsp->data; length >= rsp->len;
   1aeae:	b2a4      	uxth	r4, r4
   1aeb0:	f106 0b01 	add.w	fp, r6, #1
   1aeb4:	7833      	ldrb	r3, [r6, #0]
   1aeb6:	42a3      	cmp	r3, r4
   1aeb8:	d90a      	bls.n	1aed0 <gatt_read_type_rsp+0x80>
	if (length == 0U && handle) {
   1aeba:	2c00      	cmp	r4, #0
   1aebc:	d1ed      	bne.n	1ae9a <gatt_read_type_rsp+0x4a>
   1aebe:	f1b9 0f00 	cmp.w	r9, #0
   1aec2:	d0ea      	beq.n	1ae9a <gatt_read_type_rsp+0x4a>
	gatt_discover_next(conn, handle, params);
   1aec4:	462a      	mov	r2, r5
   1aec6:	4649      	mov	r1, r9
   1aec8:	4640      	mov	r0, r8
   1aeca:	f017 fc46 	bl	3275a <gatt_discover_next>
   1aece:	e039      	b.n	1af44 <gatt_read_type_rsp+0xf4>
		handle = sys_le16_to_cpu(data->handle);
   1aed0:	f8bb a000 	ldrh.w	sl, [fp]
   1aed4:	fa1f f98a 	uxth.w	r9, sl
		if (!handle) {
   1aed8:	f1b9 0f00 	cmp.w	r9, #0
   1aedc:	d0dd      	beq.n	1ae9a <gatt_read_type_rsp+0x4a>
		value.start_handle = sys_le16_to_cpu(incl->start_handle);
   1aede:	f8bb 0002 	ldrh.w	r0, [fp, #2]
		switch (u.uuid.type) {
   1aee2:	7e3a      	ldrb	r2, [r7, #24]
		value.start_handle = sys_le16_to_cpu(incl->start_handle);
   1aee4:	82b8      	strh	r0, [r7, #20]
		value.end_handle = sys_le16_to_cpu(incl->end_handle);
   1aee6:	f8bb 1004 	ldrh.w	r1, [fp, #4]
   1aeea:	82f9      	strh	r1, [r7, #22]
		switch (u.uuid.type) {
   1aeec:	b16a      	cbz	r2, 1af0a <gatt_read_type_rsp+0xba>
   1aeee:	2a02      	cmp	r2, #2
   1aef0:	d016      	beq.n	1af20 <gatt_read_type_rsp+0xd0>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   1aef2:	6829      	ldr	r1, [r5, #0]
   1aef4:	b351      	cbz	r1, 1af4c <gatt_read_type_rsp+0xfc>
   1aef6:	f107 0018 	add.w	r0, r7, #24
   1aefa:	f015 ff66 	bl	30dca <bt_uuid_cmp>
   1aefe:	b328      	cbz	r0, 1af4c <gatt_read_type_rsp+0xfc>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   1af00:	7833      	ldrb	r3, [r6, #0]
   1af02:	1ae4      	subs	r4, r4, r3
   1af04:	b2a4      	uxth	r4, r4
   1af06:	449b      	add	fp, r3
   1af08:	e7d4      	b.n	1aeb4 <gatt_read_type_rsp+0x64>
			value.uuid = &u.uuid;
   1af0a:	f107 0218 	add.w	r2, r7, #24
   1af0e:	613a      	str	r2, [r7, #16]
			u.u16.val = sys_le16_to_cpu(incl->uuid16);
   1af10:	f89b 2006 	ldrb.w	r2, [fp, #6]
   1af14:	f89b 1007 	ldrb.w	r1, [fp, #7]
   1af18:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1af1c:	837a      	strh	r2, [r7, #26]
			break;
   1af1e:	e7e8      	b.n	1aef2 <gatt_read_type_rsp+0xa2>
	return gatt_req_send(conn, read_included_uuid_cb, params,
   1af20:	230a      	movs	r3, #10
			params->_included.start_handle = value.start_handle;
   1af22:	8168      	strh	r0, [r5, #10]
			params->_included.end_handle = value.end_handle;
   1af24:	81a9      	strh	r1, [r5, #12]
			params->_included.attr_handle = handle;
   1af26:	f8a5 a008 	strh.w	sl, [r5, #8]
	return gatt_req_send(conn, read_included_uuid_cb, params,
   1af2a:	4640      	mov	r0, r8
   1af2c:	9201      	str	r2, [sp, #4]
   1af2e:	9300      	str	r3, [sp, #0]
   1af30:	462a      	mov	r2, r5
   1af32:	4b80      	ldr	r3, [pc, #512]	; (1b134 <gatt_read_type_rsp+0x2e4>)
   1af34:	4980      	ldr	r1, [pc, #512]	; (1b138 <gatt_read_type_rsp+0x2e8>)
   1af36:	f017 faf2 	bl	3251e <gatt_req_send.constprop.0>
			return read_included_uuid(conn, params);
   1af3a:	fa1f f980 	uxth.w	r9, r0
	if (!handle) {
   1af3e:	f1b9 0f00 	cmp.w	r9, #0
   1af42:	d1bf      	bne.n	1aec4 <gatt_read_type_rsp+0x74>
}
   1af44:	3744      	adds	r7, #68	; 0x44
   1af46:	46bd      	mov	sp, r7
   1af48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			.uuid = BT_UUID_GATT_INCLUDE,
   1af4c:	f04f 0300 	mov.w	r3, #0
   1af50:	733b      	strb	r3, [r7, #12]
   1af52:	f642 0302 	movw	r3, #10242	; 0x2802
		attr = (struct bt_gatt_attr) {
   1af56:	2210      	movs	r2, #16
   1af58:	2100      	movs	r1, #0
			.uuid = BT_UUID_GATT_INCLUDE,
   1af5a:	81fb      	strh	r3, [r7, #14]
		attr = (struct bt_gatt_attr) {
   1af5c:	f107 0030 	add.w	r0, r7, #48	; 0x30
   1af60:	f01b fb02 	bl	36568 <memset>
   1af64:	f107 020c 	add.w	r2, r7, #12
   1af68:	62fa      	str	r2, [r7, #44]	; 0x2c
   1af6a:	f107 0210 	add.w	r2, r7, #16
   1af6e:	63ba      	str	r2, [r7, #56]	; 0x38
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1af70:	4640      	mov	r0, r8
   1af72:	462a      	mov	r2, r5
   1af74:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr) {
   1af76:	f8a7 a03c 	strh.w	sl, [r7, #60]	; 0x3c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1af7a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   1af7e:	4798      	blx	r3
   1af80:	2800      	cmp	r0, #0
   1af82:	d1bd      	bne.n	1af00 <gatt_read_type_rsp+0xb0>
   1af84:	e7de      	b.n	1af44 <gatt_read_type_rsp+0xf4>
	} else if (params->type == BT_GATT_DISCOVER_CHARACTERISTIC) {
   1af86:	2803      	cmp	r0, #3
   1af88:	d16c      	bne.n	1b064 <gatt_read_type_rsp+0x214>
	switch (rsp->len) {
   1af8a:	7814      	ldrb	r4, [r2, #0]
   1af8c:	2c07      	cmp	r4, #7
   1af8e:	d00b      	beq.n	1afa8 <gatt_read_type_rsp+0x158>
   1af90:	2c15      	cmp	r4, #21
   1af92:	d008      	beq.n	1afa6 <gatt_read_type_rsp+0x156>
		LOG_ERR("Invalid data len %u", rsp->len);
   1af94:	466e      	mov	r6, sp
   1af96:	b088      	sub	sp, #32
   1af98:	aa02      	add	r2, sp, #8
   1af9a:	4b64      	ldr	r3, [pc, #400]	; (1b12c <gatt_read_type_rsp+0x2dc>)
	switch (rsp->len) {
   1af9c:	e9c2 3405 	strd	r3, r4, [r2, #20]
		LOG_ERR("Invalid data len %u", rsp->len);
   1afa0:	f842 0f10 	str.w	r0, [r2, #16]!
   1afa4:	e773      	b.n	1ae8e <gatt_read_type_rsp+0x3e>
	switch (rsp->len) {
   1afa6:	2102      	movs	r1, #2
	uint16_t handle = 0U;
   1afa8:	f04f 0900 	mov.w	r9, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   1afac:	1e5c      	subs	r4, r3, #1
		u.uuid.type = BT_UUID_TYPE_16;
   1afae:	7639      	strb	r1, [r7, #24]
	for (length--, pdu = rsp->data; length >= rsp->len;
   1afb0:	b2a4      	uxth	r4, r4
   1afb2:	f106 0a01 	add.w	sl, r6, #1
   1afb6:	7833      	ldrb	r3, [r6, #0]
   1afb8:	42a3      	cmp	r3, r4
   1afba:	f63f af7e 	bhi.w	1aeba <gatt_read_type_rsp+0x6a>
		handle = sys_le16_to_cpu(data->handle);
   1afbe:	f8ba b000 	ldrh.w	fp, [sl]
   1afc2:	fa1f f98b 	uxth.w	r9, fp
		if (!handle) {
   1afc6:	f1b9 0f00 	cmp.w	r9, #0
   1afca:	f43f af66 	beq.w	1ae9a <gatt_read_type_rsp+0x4a>
		switch (u.uuid.type) {
   1afce:	7e3b      	ldrb	r3, [r7, #24]
   1afd0:	b16b      	cbz	r3, 1afee <gatt_read_type_rsp+0x19e>
   1afd2:	2b02      	cmp	r3, #2
   1afd4:	d013      	beq.n	1affe <gatt_read_type_rsp+0x1ae>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   1afd6:	6829      	ldr	r1, [r5, #0]
   1afd8:	b1f1      	cbz	r1, 1b018 <gatt_read_type_rsp+0x1c8>
   1afda:	f107 0018 	add.w	r0, r7, #24
   1afde:	f015 fef4 	bl	30dca <bt_uuid_cmp>
   1afe2:	b1c8      	cbz	r0, 1b018 <gatt_read_type_rsp+0x1c8>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   1afe4:	7833      	ldrb	r3, [r6, #0]
   1afe6:	1ae4      	subs	r4, r4, r3
   1afe8:	b2a4      	uxth	r4, r4
   1afea:	449a      	add	sl, r3
   1afec:	e7e3      	b.n	1afb6 <gatt_read_type_rsp+0x166>
			u.u16.val = sys_le16_to_cpu(chrc->uuid16);
   1afee:	f89a 3005 	ldrb.w	r3, [sl, #5]
   1aff2:	f89a 2006 	ldrb.w	r2, [sl, #6]
   1aff6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1affa:	837b      	strh	r3, [r7, #26]
			break;
   1affc:	e7eb      	b.n	1afd6 <gatt_read_type_rsp+0x186>
			memcpy(u.u128.val, chrc->uuid, sizeof(chrc->uuid));
   1affe:	f10a 0305 	add.w	r3, sl, #5
   1b002:	f107 0219 	add.w	r2, r7, #25
   1b006:	f10a 0115 	add.w	r1, sl, #21
   1b00a:	f853 0b04 	ldr.w	r0, [r3], #4
   1b00e:	428b      	cmp	r3, r1
   1b010:	f842 0b04 	str.w	r0, [r2], #4
   1b014:	d1f9      	bne.n	1b00a <gatt_read_type_rsp+0x1ba>
   1b016:	e7de      	b.n	1afd6 <gatt_read_type_rsp+0x186>
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   1b018:	f89a 3002 	ldrb.w	r3, [sl, #2]
   1b01c:	f8ba 2003 	ldrh.w	r2, [sl, #3]
   1b020:	75bb      	strb	r3, [r7, #22]
			.uuid = BT_UUID_GATT_CHRC,
   1b022:	f04f 0300 	mov.w	r3, #0
   1b026:	733b      	strb	r3, [r7, #12]
   1b028:	f642 0303 	movw	r3, #10243	; 0x2803
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   1b02c:	f107 0118 	add.w	r1, r7, #24
   1b030:	6139      	str	r1, [r7, #16]
   1b032:	82ba      	strh	r2, [r7, #20]
		attr = (struct bt_gatt_attr) {
   1b034:	2100      	movs	r1, #0
   1b036:	2210      	movs	r2, #16
			.uuid = BT_UUID_GATT_CHRC,
   1b038:	81fb      	strh	r3, [r7, #14]
		attr = (struct bt_gatt_attr) {
   1b03a:	f107 0030 	add.w	r0, r7, #48	; 0x30
   1b03e:	f01b fa93 	bl	36568 <memset>
   1b042:	f107 030c 	add.w	r3, r7, #12
   1b046:	62fb      	str	r3, [r7, #44]	; 0x2c
   1b048:	f107 0310 	add.w	r3, r7, #16
   1b04c:	63bb      	str	r3, [r7, #56]	; 0x38
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1b04e:	462a      	mov	r2, r5
   1b050:	4640      	mov	r0, r8
   1b052:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr) {
   1b054:	f8a7 b03c 	strh.w	fp, [r7, #60]	; 0x3c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1b058:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   1b05c:	4798      	blx	r3
   1b05e:	2800      	cmp	r0, #0
   1b060:	d1c0      	bne.n	1afe4 <gatt_read_type_rsp+0x194>
   1b062:	e76f      	b.n	1af44 <gatt_read_type_rsp+0xf4>
	if (params->uuid->type != BT_UUID_TYPE_16) {
   1b064:	6829      	ldr	r1, [r5, #0]
   1b066:	780a      	ldrb	r2, [r1, #0]
   1b068:	2a00      	cmp	r2, #0
   1b06a:	f47f af16 	bne.w	1ae9a <gatt_read_type_rsp+0x4a>
	uint16_t handle = 0U;
   1b06e:	4691      	mov	r9, r2
	uuid_val = BT_UUID_16(params->uuid)->val;
   1b070:	8849      	ldrh	r1, [r1, #2]
	for (length--, pdu = rsp->data; length >= rsp->len;
   1b072:	1e5c      	subs	r4, r3, #1
		switch (uuid_val) {
   1b074:	f5a1 5324 	sub.w	r3, r1, #10496	; 0x2900
	for (length--, pdu = rsp->data; length >= rsp->len;
   1b078:	b2a4      	uxth	r4, r4
   1b07a:	f106 0a01 	add.w	sl, r6, #1
		switch (uuid_val) {
   1b07e:	607b      	str	r3, [r7, #4]
	for (length--, pdu = rsp->data; length >= rsp->len;
   1b080:	7833      	ldrb	r3, [r6, #0]
   1b082:	42a3      	cmp	r3, r4
   1b084:	f63f af19 	bhi.w	1aeba <gatt_read_type_rsp+0x6a>
		handle = sys_le16_to_cpu(data->handle);
   1b088:	f8ba b000 	ldrh.w	fp, [sl]
   1b08c:	fa1f f98b 	uxth.w	r9, fp
		if (!handle) {
   1b090:	f1b9 0f00 	cmp.w	r9, #0
   1b094:	f43f af01 	beq.w	1ae9a <gatt_read_type_rsp+0x4a>
		switch (uuid_val) {
   1b098:	687a      	ldr	r2, [r7, #4]
   1b09a:	2a04      	cmp	r2, #4
   1b09c:	f63f aefd 	bhi.w	1ae9a <gatt_read_type_rsp+0x4a>
   1b0a0:	a301      	add	r3, pc, #4	; (adr r3, 1b0a8 <gatt_read_type_rsp+0x258>)
   1b0a2:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   1b0a6:	bf00      	nop
   1b0a8:	0001b0bd 	.word	0x0001b0bd
   1b0ac:	0001ae9b 	.word	0x0001ae9b
   1b0b0:	0001b0bd 	.word	0x0001b0bd
   1b0b4:	0001b0bd 	.word	0x0001b0bd
   1b0b8:	0001b0fd 	.word	0x0001b0fd
			value.scc.flags = sys_get_le16(data->value);
   1b0bc:	f8ba 3002 	ldrh.w	r3, [sl, #2]
   1b0c0:	833b      	strh	r3, [r7, #24]
			.uuid = params->uuid,
   1b0c2:	682b      	ldr	r3, [r5, #0]
		attr = (struct bt_gatt_attr) {
   1b0c4:	2210      	movs	r2, #16
   1b0c6:	2100      	movs	r1, #0
   1b0c8:	f107 0030 	add.w	r0, r7, #48	; 0x30
			.uuid = params->uuid,
   1b0cc:	603b      	str	r3, [r7, #0]
		attr = (struct bt_gatt_attr) {
   1b0ce:	f01b fa4b 	bl	36568 <memset>
   1b0d2:	683b      	ldr	r3, [r7, #0]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1b0d4:	462a      	mov	r2, r5
		attr = (struct bt_gatt_attr) {
   1b0d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   1b0d8:	f107 0318 	add.w	r3, r7, #24
   1b0dc:	63bb      	str	r3, [r7, #56]	; 0x38
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1b0de:	4640      	mov	r0, r8
   1b0e0:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr) {
   1b0e2:	f8a7 b03c 	strh.w	fp, [r7, #60]	; 0x3c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1b0e6:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   1b0ea:	4798      	blx	r3
   1b0ec:	2800      	cmp	r0, #0
   1b0ee:	f43f af29 	beq.w	1af44 <gatt_read_type_rsp+0xf4>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   1b0f2:	7833      	ldrb	r3, [r6, #0]
   1b0f4:	1ae4      	subs	r4, r4, r3
   1b0f6:	b2a4      	uxth	r4, r4
   1b0f8:	449a      	add	sl, r3
   1b0fa:	e7c1      	b.n	1b080 <gatt_read_type_rsp+0x230>
			value.cpf.format = cpf->format;
   1b0fc:	f89a 3002 	ldrb.w	r3, [sl, #2]
   1b100:	763b      	strb	r3, [r7, #24]
			value.cpf.exponent = cpf->exponent;
   1b102:	f89a 3003 	ldrb.w	r3, [sl, #3]
   1b106:	767b      	strb	r3, [r7, #25]
			value.cpf.unit = sys_le16_to_cpu(cpf->unit);
   1b108:	f89a 2005 	ldrb.w	r2, [sl, #5]
   1b10c:	f89a 3004 	ldrb.w	r3, [sl, #4]
   1b110:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1b114:	837b      	strh	r3, [r7, #26]
			value.cpf.name_space = cpf->name_space;
   1b116:	f89a 3006 	ldrb.w	r3, [sl, #6]
   1b11a:	773b      	strb	r3, [r7, #28]
			value.cpf.description = sys_le16_to_cpu(cpf->description);
   1b11c:	f89a 3007 	ldrb.w	r3, [sl, #7]
   1b120:	f89a 2008 	ldrb.w	r2, [sl, #8]
   1b124:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1b128:	83fb      	strh	r3, [r7, #30]
			break;
   1b12a:	e7ca      	b.n	1b0c2 <gatt_read_type_rsp+0x272>
   1b12c:	0003d3cb 	.word	0x0003d3cb
   1b130:	000378e0 	.word	0x000378e0
   1b134:	0003220f 	.word	0x0003220f
   1b138:	0001b13d 	.word	0x0001b13d

0001b13c <read_included_uuid_cb>:
{
   1b13c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b13e:	b08f      	sub	sp, #60	; 0x3c
	if (length != 16U) {
   1b140:	2b10      	cmp	r3, #16
{
   1b142:	af00      	add	r7, sp, #0
   1b144:	4605      	mov	r5, r0
   1b146:	6d3c      	ldr	r4, [r7, #80]	; 0x50
	if (length != 16U) {
   1b148:	d016      	beq.n	1b178 <read_included_uuid_cb+0x3c>
		LOG_ERR("Invalid data len %u", length);
   1b14a:	466e      	mov	r6, sp
   1b14c:	b088      	sub	sp, #32
   1b14e:	466a      	mov	r2, sp
   1b150:	4926      	ldr	r1, [pc, #152]	; (1b1ec <read_included_uuid_cb+0xb0>)
   1b152:	4827      	ldr	r0, [pc, #156]	; (1b1f0 <read_included_uuid_cb+0xb4>)
   1b154:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1b158:	2303      	movs	r3, #3
   1b15a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b15e:	f842 3f10 	str.w	r3, [r2, #16]!
   1b162:	f017 f9a4 	bl	324ae <z_log_msg_static_create.constprop.0>
		params->func(conn, NULL, params);
   1b166:	4622      	mov	r2, r4
   1b168:	46b5      	mov	sp, r6
   1b16a:	2100      	movs	r1, #0
   1b16c:	4628      	mov	r0, r5
   1b16e:	6863      	ldr	r3, [r4, #4]
   1b170:	4798      	blx	r3
}
   1b172:	373c      	adds	r7, #60	; 0x3c
   1b174:	46bd      	mov	sp, r7
   1b176:	bdf0      	pop	{r4, r5, r6, r7, pc}
	value.start_handle = params->_included.start_handle;
   1b178:	8963      	ldrh	r3, [r4, #10]
	value.uuid = &u.uuid;
   1b17a:	f107 0010 	add.w	r0, r7, #16
	value.start_handle = params->_included.start_handle;
   1b17e:	81bb      	strh	r3, [r7, #12]
	value.end_handle = params->_included.end_handle;
   1b180:	89a3      	ldrh	r3, [r4, #12]
	handle = params->_included.attr_handle;
   1b182:	8926      	ldrh	r6, [r4, #8]
	value.end_handle = params->_included.end_handle;
   1b184:	81fb      	strh	r3, [r7, #14]
	u.uuid.type = BT_UUID_TYPE_128;
   1b186:	2302      	movs	r3, #2
	value.uuid = &u.uuid;
   1b188:	60b8      	str	r0, [r7, #8]
	u.uuid.type = BT_UUID_TYPE_128;
   1b18a:	743b      	strb	r3, [r7, #16]
	memcpy(u.u128.val, pdu, length);
   1b18c:	f102 0110 	add.w	r1, r2, #16
   1b190:	f107 0311 	add.w	r3, r7, #17
   1b194:	f852 cb04 	ldr.w	ip, [r2], #4
   1b198:	428a      	cmp	r2, r1
   1b19a:	f843 cb04 	str.w	ip, [r3], #4
   1b19e:	d1f9      	bne.n	1b194 <read_included_uuid_cb+0x58>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   1b1a0:	6821      	ldr	r1, [r4, #0]
   1b1a2:	b9e9      	cbnz	r1, 1b1e0 <read_included_uuid_cb+0xa4>
		.uuid = BT_UUID_GATT_INCLUDE,
   1b1a4:	2100      	movs	r1, #0
   1b1a6:	f642 0302 	movw	r3, #10242	; 0x2802
	attr = (struct bt_gatt_attr) {
   1b1aa:	2210      	movs	r2, #16
   1b1ac:	f107 0028 	add.w	r0, r7, #40	; 0x28
		.uuid = BT_UUID_GATT_INCLUDE,
   1b1b0:	7139      	strb	r1, [r7, #4]
   1b1b2:	80fb      	strh	r3, [r7, #6]
	attr = (struct bt_gatt_attr) {
   1b1b4:	f01b f9d8 	bl	36568 <memset>
   1b1b8:	1d3b      	adds	r3, r7, #4
   1b1ba:	627b      	str	r3, [r7, #36]	; 0x24
   1b1bc:	f107 0308 	add.w	r3, r7, #8
   1b1c0:	633b      	str	r3, [r7, #48]	; 0x30
	if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1b1c2:	4622      	mov	r2, r4
   1b1c4:	4628      	mov	r0, r5
   1b1c6:	6863      	ldr	r3, [r4, #4]
	attr = (struct bt_gatt_attr) {
   1b1c8:	86be      	strh	r6, [r7, #52]	; 0x34
	if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1b1ca:	f107 0124 	add.w	r1, r7, #36	; 0x24
   1b1ce:	4798      	blx	r3
   1b1d0:	2800      	cmp	r0, #0
   1b1d2:	d0ce      	beq.n	1b172 <read_included_uuid_cb+0x36>
	gatt_discover_next(conn, params->start_handle, params);
   1b1d4:	4622      	mov	r2, r4
   1b1d6:	4628      	mov	r0, r5
   1b1d8:	8921      	ldrh	r1, [r4, #8]
   1b1da:	f017 fabe 	bl	3275a <gatt_discover_next>
	return;
   1b1de:	e7c8      	b.n	1b172 <read_included_uuid_cb+0x36>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   1b1e0:	f015 fdf3 	bl	30dca <bt_uuid_cmp>
   1b1e4:	2800      	cmp	r0, #0
   1b1e6:	d0dd      	beq.n	1b1a4 <read_included_uuid_cb+0x68>
   1b1e8:	e7f4      	b.n	1b1d4 <read_included_uuid_cb+0x98>
   1b1ea:	bf00      	nop
   1b1ec:	0003d3cb 	.word	0x0003d3cb
   1b1f0:	000378e0 	.word	0x000378e0

0001b1f4 <gatt_find_info_rsp>:
{
   1b1f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b1f8:	b091      	sub	sp, #68	; 0x44
   1b1fa:	af00      	add	r7, sp, #0
   1b1fc:	6ebd      	ldr	r5, [r7, #104]	; 0x68
   1b1fe:	60f8      	str	r0, [r7, #12]
	if (err) {
   1b200:	b999      	cbnz	r1, 1b22a <gatt_find_info_rsp+0x36>
	switch (rsp->format) {
   1b202:	7810      	ldrb	r0, [r2, #0]
   1b204:	2801      	cmp	r0, #1
   1b206:	d016      	beq.n	1b236 <gatt_find_info_rsp+0x42>
   1b208:	2802      	cmp	r0, #2
   1b20a:	d02e      	beq.n	1b26a <gatt_find_info_rsp+0x76>
		LOG_ERR("Invalid format %u", rsp->format);
   1b20c:	466c      	mov	r4, sp
   1b20e:	b088      	sub	sp, #32
   1b210:	466a      	mov	r2, sp
   1b212:	4b52      	ldr	r3, [pc, #328]	; (1b35c <gatt_find_info_rsp+0x168>)
   1b214:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
	switch (rsp->format) {
   1b218:	e9c2 3005 	strd	r3, r0, [r2, #20]
		LOG_ERR("Invalid format %u", rsp->format);
   1b21c:	2303      	movs	r3, #3
   1b21e:	4850      	ldr	r0, [pc, #320]	; (1b360 <gatt_find_info_rsp+0x16c>)
   1b220:	f842 3f10 	str.w	r3, [r2, #16]!
   1b224:	f017 f943 	bl	324ae <z_log_msg_static_create.constprop.0>
   1b228:	46a5      	mov	sp, r4
	params->func(conn, NULL, params);
   1b22a:	462a      	mov	r2, r5
   1b22c:	2100      	movs	r1, #0
   1b22e:	686b      	ldr	r3, [r5, #4]
   1b230:	68f8      	ldr	r0, [r7, #12]
   1b232:	4798      	blx	r3
   1b234:	e08d      	b.n	1b352 <gatt_find_info_rsp+0x15e>
	switch (rsp->format) {
   1b236:	f04f 0904 	mov.w	r9, #4
	length--;
   1b23a:	3b01      	subs	r3, #1
   1b23c:	b29b      	uxth	r3, r3
	if (length < len) {
   1b23e:	454b      	cmp	r3, r9
		u.uuid.type = BT_UUID_TYPE_16;
   1b240:	7639      	strb	r1, [r7, #24]
	if (length < len) {
   1b242:	d3f2      	bcc.n	1b22a <gatt_find_info_rsp+0x36>
	bool skip = false;
   1b244:	f04f 0800 	mov.w	r8, #0
	for (i = length / len, pdu = rsp->info; i != 0;
   1b248:	fbb3 fbf9 	udiv	fp, r3, r9
			skip = false;
   1b24c:	46c2      	mov	sl, r8
	for (i = length / len, pdu = rsp->info; i != 0;
   1b24e:	1c54      	adds	r4, r2, #1
	uint16_t handle = 0U;
   1b250:	f8c7 8008 	str.w	r8, [r7, #8]
   1b254:	f107 0618 	add.w	r6, r7, #24
	for (i = length / len, pdu = rsp->info; i != 0;
   1b258:	f1bb 0f00 	cmp.w	fp, #0
   1b25c:	d109      	bne.n	1b272 <gatt_find_info_rsp+0x7e>
	gatt_discover_next(conn, handle, params);
   1b25e:	462a      	mov	r2, r5
   1b260:	e9d7 1002 	ldrd	r1, r0, [r7, #8]
   1b264:	f017 fa79 	bl	3275a <gatt_discover_next>
	return;
   1b268:	e073      	b.n	1b352 <gatt_find_info_rsp+0x15e>
	switch (rsp->format) {
   1b26a:	4601      	mov	r1, r0
		len = sizeof(*info.i128);
   1b26c:	f04f 0912 	mov.w	r9, #18
   1b270:	e7e3      	b.n	1b23a <gatt_find_info_rsp+0x46>
		handle = sys_le16_to_cpu(info.i16->handle);
   1b272:	8823      	ldrh	r3, [r4, #0]
   1b274:	607b      	str	r3, [r7, #4]
   1b276:	88bb      	ldrh	r3, [r7, #4]
   1b278:	60bb      	str	r3, [r7, #8]
		if (skip) {
   1b27a:	f1b8 0f00 	cmp.w	r8, #0
   1b27e:	d151      	bne.n	1b324 <gatt_find_info_rsp+0x130>
		switch (u.uuid.type) {
   1b280:	7e3b      	ldrb	r3, [r7, #24]
   1b282:	2b00      	cmp	r3, #0
   1b284:	d037      	beq.n	1b2f6 <gatt_find_info_rsp+0x102>
   1b286:	2b02      	cmp	r3, #2
   1b288:	d03b      	beq.n	1b302 <gatt_find_info_rsp+0x10e>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   1b28a:	6829      	ldr	r1, [r5, #0]
   1b28c:	2900      	cmp	r1, #0
   1b28e:	d144      	bne.n	1b31a <gatt_find_info_rsp+0x126>
		if (params->type == BT_GATT_DISCOVER_DESCRIPTOR) {
   1b290:	7c2b      	ldrb	r3, [r5, #16]
   1b292:	2b04      	cmp	r3, #4
   1b294:	d14c      	bne.n	1b330 <gatt_find_info_rsp+0x13c>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   1b296:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1b29a:	4630      	mov	r0, r6
   1b29c:	f107 0110 	add.w	r1, r7, #16
   1b2a0:	f887 a010 	strb.w	sl, [r7, #16]
   1b2a4:	827b      	strh	r3, [r7, #18]
   1b2a6:	f015 fd90 	bl	30dca <bt_uuid_cmp>
   1b2aa:	2800      	cmp	r0, #0
   1b2ac:	d03a      	beq.n	1b324 <gatt_find_info_rsp+0x130>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   1b2ae:	f642 0301 	movw	r3, #10241	; 0x2801
   1b2b2:	4630      	mov	r0, r6
   1b2b4:	f107 0114 	add.w	r1, r7, #20
   1b2b8:	f887 a014 	strb.w	sl, [r7, #20]
   1b2bc:	82fb      	strh	r3, [r7, #22]
   1b2be:	f015 fd84 	bl	30dca <bt_uuid_cmp>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   1b2c2:	b378      	cbz	r0, 1b324 <gatt_find_info_rsp+0x130>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_INCLUDE)) {
   1b2c4:	f642 0302 	movw	r3, #10242	; 0x2802
   1b2c8:	4630      	mov	r0, r6
   1b2ca:	f887 a02c 	strb.w	sl, [r7, #44]	; 0x2c
   1b2ce:	85fb      	strh	r3, [r7, #46]	; 0x2e
   1b2d0:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   1b2d4:	f015 fd79 	bl	30dca <bt_uuid_cmp>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   1b2d8:	b320      	cbz	r0, 1b324 <gatt_find_info_rsp+0x130>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_CHRC)) {
   1b2da:	f642 0303 	movw	r3, #10243	; 0x2803
   1b2de:	4630      	mov	r0, r6
   1b2e0:	f887 a02c 	strb.w	sl, [r7, #44]	; 0x2c
   1b2e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
   1b2e6:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   1b2ea:	f015 fd6e 	bl	30dca <bt_uuid_cmp>
   1b2ee:	b9f8      	cbnz	r0, 1b330 <gatt_find_info_rsp+0x13c>
				skip = true;
   1b2f0:	f04f 0801 	mov.w	r8, #1
   1b2f4:	e018      	b.n	1b328 <gatt_find_info_rsp+0x134>
			u.u16.val = sys_le16_to_cpu(info.i16->uuid);
   1b2f6:	78a3      	ldrb	r3, [r4, #2]
   1b2f8:	78e2      	ldrb	r2, [r4, #3]
   1b2fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1b2fe:	837b      	strh	r3, [r7, #26]
			break;
   1b300:	e7c3      	b.n	1b28a <gatt_find_info_rsp+0x96>
			memcpy(u.u128.val, info.i128->uuid, 16);
   1b302:	1ca3      	adds	r3, r4, #2
   1b304:	f107 0219 	add.w	r2, r7, #25
   1b308:	f104 0112 	add.w	r1, r4, #18
   1b30c:	f853 0b04 	ldr.w	r0, [r3], #4
   1b310:	428b      	cmp	r3, r1
   1b312:	f842 0b04 	str.w	r0, [r2], #4
   1b316:	d1f9      	bne.n	1b30c <gatt_find_info_rsp+0x118>
   1b318:	e7b7      	b.n	1b28a <gatt_find_info_rsp+0x96>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   1b31a:	4630      	mov	r0, r6
   1b31c:	f015 fd55 	bl	30dca <bt_uuid_cmp>
   1b320:	2800      	cmp	r0, #0
   1b322:	d0b5      	beq.n	1b290 <gatt_find_info_rsp+0x9c>
			skip = false;
   1b324:	f04f 0800 	mov.w	r8, #0
	     i--, pdu = (const uint8_t *)pdu + len) {
   1b328:	f10b 3bff 	add.w	fp, fp, #4294967295
   1b32c:	444c      	add	r4, r9
   1b32e:	e793      	b.n	1b258 <gatt_find_info_rsp+0x64>
		attr = (struct bt_gatt_attr) {
   1b330:	2210      	movs	r2, #16
   1b332:	2100      	movs	r1, #0
   1b334:	f107 0030 	add.w	r0, r7, #48	; 0x30
   1b338:	f01b f916 	bl	36568 <memset>
   1b33c:	88bb      	ldrh	r3, [r7, #4]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1b33e:	462a      	mov	r2, r5
		attr = (struct bt_gatt_attr) {
   1b340:	87bb      	strh	r3, [r7, #60]	; 0x3c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1b342:	68f8      	ldr	r0, [r7, #12]
   1b344:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr) {
   1b346:	62fe      	str	r6, [r7, #44]	; 0x2c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1b348:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   1b34c:	4798      	blx	r3
   1b34e:	2800      	cmp	r0, #0
   1b350:	d1ea      	bne.n	1b328 <gatt_find_info_rsp+0x134>
}
   1b352:	3744      	adds	r7, #68	; 0x44
   1b354:	46bd      	mov	sp, r7
   1b356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b35a:	bf00      	nop
   1b35c:	0003d3df 	.word	0x0003d3df
   1b360:	000378e0 	.word	0x000378e0

0001b364 <bt_gatt_write>:
{
   1b364:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1b366:	460c      	mov	r4, r1
	__ASSERT(conn, "invalid parameters\n");
   1b368:	4605      	mov	r5, r0
   1b36a:	b970      	cbnz	r0, 1b38a <bt_gatt_write+0x26>
   1b36c:	492c      	ldr	r1, [pc, #176]	; (1b420 <bt_gatt_write+0xbc>)
   1b36e:	f241 33f3 	movw	r3, #5107	; 0x13f3
   1b372:	4a2c      	ldr	r2, [pc, #176]	; (1b424 <bt_gatt_write+0xc0>)
   1b374:	482c      	ldr	r0, [pc, #176]	; (1b428 <bt_gatt_write+0xc4>)
   1b376:	f014 f825 	bl	2f3c4 <assert_print>
   1b37a:	482c      	ldr	r0, [pc, #176]	; (1b42c <bt_gatt_write+0xc8>)
   1b37c:	f014 f822 	bl	2f3c4 <assert_print>
   1b380:	f241 31f3 	movw	r1, #5107	; 0x13f3
	__ASSERT(params && params->func, "invalid parameters\n");
   1b384:	4827      	ldr	r0, [pc, #156]	; (1b424 <bt_gatt_write+0xc0>)
   1b386:	f014 f816 	bl	2f3b6 <assert_post_action>
   1b38a:	b109      	cbz	r1, 1b390 <bt_gatt_write+0x2c>
   1b38c:	680b      	ldr	r3, [r1, #0]
   1b38e:	b963      	cbnz	r3, 1b3aa <bt_gatt_write+0x46>
   1b390:	4927      	ldr	r1, [pc, #156]	; (1b430 <bt_gatt_write+0xcc>)
   1b392:	f241 33f4 	movw	r3, #5108	; 0x13f4
   1b396:	4a23      	ldr	r2, [pc, #140]	; (1b424 <bt_gatt_write+0xc0>)
   1b398:	4823      	ldr	r0, [pc, #140]	; (1b428 <bt_gatt_write+0xc4>)
   1b39a:	f014 f813 	bl	2f3c4 <assert_print>
   1b39e:	4823      	ldr	r0, [pc, #140]	; (1b42c <bt_gatt_write+0xc8>)
   1b3a0:	f014 f810 	bl	2f3c4 <assert_print>
   1b3a4:	f241 31f4 	movw	r1, #5108	; 0x13f4
   1b3a8:	e7ec      	b.n	1b384 <bt_gatt_write+0x20>
	__ASSERT(params->handle, "invalid parameters\n");
   1b3aa:	888b      	ldrh	r3, [r1, #4]
   1b3ac:	b963      	cbnz	r3, 1b3c8 <bt_gatt_write+0x64>
   1b3ae:	4921      	ldr	r1, [pc, #132]	; (1b434 <bt_gatt_write+0xd0>)
   1b3b0:	f241 33f5 	movw	r3, #5109	; 0x13f5
   1b3b4:	4a1b      	ldr	r2, [pc, #108]	; (1b424 <bt_gatt_write+0xc0>)
   1b3b6:	481c      	ldr	r0, [pc, #112]	; (1b428 <bt_gatt_write+0xc4>)
   1b3b8:	f014 f804 	bl	2f3c4 <assert_print>
   1b3bc:	481b      	ldr	r0, [pc, #108]	; (1b42c <bt_gatt_write+0xc8>)
   1b3be:	f014 f801 	bl	2f3c4 <assert_print>
   1b3c2:	f241 31f5 	movw	r1, #5109	; 0x13f5
   1b3c6:	e7dd      	b.n	1b384 <bt_gatt_write+0x20>
	if (conn->state != BT_CONN_CONNECTED) {
   1b3c8:	7b43      	ldrb	r3, [r0, #13]
   1b3ca:	2b07      	cmp	r3, #7
   1b3cc:	d125      	bne.n	1b41a <bt_gatt_write+0xb6>
	if (params->offset || len > (bt_att_get_mtu(conn) - 1)) {
   1b3ce:	88cb      	ldrh	r3, [r1, #6]
	len = sizeof(struct bt_att_write_req) + params->length;
   1b3d0:	898e      	ldrh	r6, [r1, #12]
	if (params->offset || len > (bt_att_get_mtu(conn) - 1)) {
   1b3d2:	b1ab      	cbz	r3, 1b400 <bt_gatt_write+0x9c>
	len = bt_att_get_mtu(conn) - req_len - 1;
   1b3d4:	4628      	mov	r0, r5
   1b3d6:	f016 fd94 	bl	31f02 <bt_att_get_mtu>
	len = MIN(params->length, len);
   1b3da:	89a3      	ldrh	r3, [r4, #12]
	len = bt_att_get_mtu(conn) - req_len - 1;
   1b3dc:	3805      	subs	r0, #5
   1b3de:	b280      	uxth	r0, r0
	len = MIN(params->length, len);
   1b3e0:	4283      	cmp	r3, r0
   1b3e2:	bf28      	it	cs
   1b3e4:	4603      	movcs	r3, r0
	len += req_len;
   1b3e6:	3304      	adds	r3, #4
	return gatt_req_send(conn, gatt_prepare_write_rsp, params,
   1b3e8:	b29b      	uxth	r3, r3
   1b3ea:	9301      	str	r3, [sp, #4]
   1b3ec:	2316      	movs	r3, #22
   1b3ee:	4622      	mov	r2, r4
   1b3f0:	9300      	str	r3, [sp, #0]
   1b3f2:	4911      	ldr	r1, [pc, #68]	; (1b438 <bt_gatt_write+0xd4>)
   1b3f4:	4b11      	ldr	r3, [pc, #68]	; (1b43c <bt_gatt_write+0xd8>)
	return gatt_req_send(conn, gatt_write_rsp, params, gatt_write_encode,
   1b3f6:	4628      	mov	r0, r5
   1b3f8:	f017 f891 	bl	3251e <gatt_req_send.constprop.0>
}
   1b3fc:	b002      	add	sp, #8
   1b3fe:	bd70      	pop	{r4, r5, r6, pc}
	if (params->offset || len > (bt_att_get_mtu(conn) - 1)) {
   1b400:	f016 fd7f 	bl	31f02 <bt_att_get_mtu>
	len = sizeof(struct bt_att_write_req) + params->length;
   1b404:	3602      	adds	r6, #2
	if (params->offset || len > (bt_att_get_mtu(conn) - 1)) {
   1b406:	3801      	subs	r0, #1
   1b408:	42b0      	cmp	r0, r6
   1b40a:	d3e3      	bcc.n	1b3d4 <bt_gatt_write+0x70>
	return gatt_req_send(conn, gatt_write_rsp, params, gatt_write_encode,
   1b40c:	2312      	movs	r3, #18
   1b40e:	4622      	mov	r2, r4
   1b410:	9300      	str	r3, [sp, #0]
   1b412:	490b      	ldr	r1, [pc, #44]	; (1b440 <bt_gatt_write+0xdc>)
   1b414:	4b0b      	ldr	r3, [pc, #44]	; (1b444 <bt_gatt_write+0xe0>)
   1b416:	9601      	str	r6, [sp, #4]
   1b418:	e7ed      	b.n	1b3f6 <bt_gatt_write+0x92>
		return -ENOTCONN;
   1b41a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1b41e:	e7ed      	b.n	1b3fc <bt_gatt_write+0x98>
   1b420:	0003bca4 	.word	0x0003bca4
   1b424:	0003ce4a 	.word	0x0003ce4a
   1b428:	00039995 	.word	0x00039995
   1b42c:	0003d251 	.word	0x0003d251
   1b430:	0003d32a 	.word	0x0003d32a
   1b434:	0003d3f1 	.word	0x0003d3f1
   1b438:	00032831 	.word	0x00032831
   1b43c:	00032307 	.word	0x00032307
   1b440:	000320e9 	.word	0x000320e9
   1b444:	000322cb 	.word	0x000322cb

0001b448 <gatt_prepare_write_rsp.part.0>:
static void gatt_prepare_write_rsp(struct bt_conn *conn, uint8_t err,
   1b448:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (len > params->length) {
   1b44c:	899e      	ldrh	r6, [r3, #12]
	len = length - sizeof(*rsp);
   1b44e:	1f17      	subs	r7, r2, #4
	if (len > params->length) {
   1b450:	42b7      	cmp	r7, r6
static void gatt_prepare_write_rsp(struct bt_conn *conn, uint8_t err,
   1b452:	4605      	mov	r5, r0
   1b454:	4689      	mov	r9, r1
   1b456:	461c      	mov	r4, r3
   1b458:	b089      	sub	sp, #36	; 0x24
	if (len > params->length) {
   1b45a:	d91c      	bls.n	1b496 <gatt_prepare_write_rsp.part.0+0x4e>
		LOG_ERR("Incorrect length, canceling write");
   1b45c:	4b21      	ldr	r3, [pc, #132]	; (1b4e4 <gatt_prepare_write_rsp.part.0+0x9c>)
   1b45e:	9307      	str	r3, [sp, #28]
   1b460:	2302      	movs	r3, #2
   1b462:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b466:	4820      	ldr	r0, [pc, #128]	; (1b4e8 <gatt_prepare_write_rsp.part.0+0xa0>)
   1b468:	aa06      	add	r2, sp, #24
   1b46a:	9306      	str	r3, [sp, #24]
   1b46c:	f017 f81f 	bl	324ae <z_log_msg_static_create.constprop.0>
	return gatt_req_send(conn, gatt_write_rsp, params, gatt_cancel_encode,
   1b470:	2318      	movs	r3, #24
   1b472:	2101      	movs	r1, #1
   1b474:	e9cd 3100 	strd	r3, r1, [sp]
   1b478:	4b1c      	ldr	r3, [pc, #112]	; (1b4ec <gatt_prepare_write_rsp.part.0+0xa4>)
   1b47a:	4622      	mov	r2, r4
   1b47c:	4628      	mov	r0, r5
   1b47e:	491c      	ldr	r1, [pc, #112]	; (1b4f0 <gatt_prepare_write_rsp.part.0+0xa8>)
   1b480:	f017 f84d 	bl	3251e <gatt_req_send.constprop.0>
		if (gatt_cancel_all_writes(conn, params)) {
   1b484:	b358      	cbz	r0, 1b4de <gatt_prepare_write_rsp.part.0+0x96>
	params->func(conn, BT_ATT_ERR_UNLIKELY, params);
   1b486:	4622      	mov	r2, r4
   1b488:	210e      	movs	r1, #14
   1b48a:	4628      	mov	r0, r5
   1b48c:	6823      	ldr	r3, [r4, #0]
}
   1b48e:	b009      	add	sp, #36	; 0x24
   1b490:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	params->func(conn, BT_ATT_ERR_UNLIKELY, params);
   1b494:	4718      	bx	r3
	data_valid = memcmp(params->data, rsp->value, len) == 0;
   1b496:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1b49a:	463a      	mov	r2, r7
   1b49c:	4640      	mov	r0, r8
   1b49e:	3104      	adds	r1, #4
   1b4a0:	f01b f832 	bl	36508 <memcmp>
	if (params->offset != rsp->offset || !data_valid) {
   1b4a4:	88e2      	ldrh	r2, [r4, #6]
   1b4a6:	f8b9 3002 	ldrh.w	r3, [r9, #2]
   1b4aa:	4293      	cmp	r3, r2
   1b4ac:	d100      	bne.n	1b4b0 <gatt_prepare_write_rsp.part.0+0x68>
   1b4ae:	b108      	cbz	r0, 1b4b4 <gatt_prepare_write_rsp.part.0+0x6c>
		LOG_ERR("Incorrect offset or data in response, canceling write");
   1b4b0:	4b10      	ldr	r3, [pc, #64]	; (1b4f4 <gatt_prepare_write_rsp.part.0+0xac>)
   1b4b2:	e7d4      	b.n	1b45e <gatt_prepare_write_rsp.part.0+0x16>
	params->offset += len;
   1b4b4:	fa13 f387 	uxtah	r3, r3, r7
	params->length -= len;
   1b4b8:	1bf6      	subs	r6, r6, r7
	params->offset += len;
   1b4ba:	80e3      	strh	r3, [r4, #6]
	params->length -= len;
   1b4bc:	b2b6      	uxth	r6, r6
	params->data = (const uint8_t *)params->data + len;
   1b4be:	eb08 0307 	add.w	r3, r8, r7
   1b4c2:	60a3      	str	r3, [r4, #8]
	params->length -= len;
   1b4c4:	81a6      	strh	r6, [r4, #12]
	if (!params->length) {
   1b4c6:	b92e      	cbnz	r6, 1b4d4 <gatt_prepare_write_rsp.part.0+0x8c>
	return gatt_req_send(conn, gatt_write_rsp, params, gatt_exec_encode,
   1b4c8:	2318      	movs	r3, #24
   1b4ca:	2201      	movs	r2, #1
   1b4cc:	e9cd 3200 	strd	r3, r2, [sp]
   1b4d0:	4b09      	ldr	r3, [pc, #36]	; (1b4f8 <gatt_prepare_write_rsp.part.0+0xb0>)
   1b4d2:	e7d2      	b.n	1b47a <gatt_prepare_write_rsp.part.0+0x32>
	if (!bt_gatt_write(conn, params)) {
   1b4d4:	4621      	mov	r1, r4
   1b4d6:	4628      	mov	r0, r5
   1b4d8:	f7ff ff44 	bl	1b364 <bt_gatt_write>
   1b4dc:	e7d2      	b.n	1b484 <gatt_prepare_write_rsp.part.0+0x3c>
}
   1b4de:	b009      	add	sp, #36	; 0x24
   1b4e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1b4e4:	0003d400 	.word	0x0003d400
   1b4e8:	000378e0 	.word	0x000378e0
   1b4ec:	0003223b 	.word	0x0003223b
   1b4f0:	000320e9 	.word	0x000320e9
   1b4f4:	0003d422 	.word	0x0003d422
   1b4f8:	0003224d 	.word	0x0003224d

0001b4fc <bt_gatt_subscribe>:
{
   1b4fc:	b570      	push	{r4, r5, r6, lr}
   1b4fe:	460d      	mov	r5, r1
	__ASSERT(conn, "invalid parameters\n");
   1b500:	4606      	mov	r6, r0
   1b502:	b970      	cbnz	r0, 1b522 <bt_gatt_subscribe+0x26>
   1b504:	4941      	ldr	r1, [pc, #260]	; (1b60c <bt_gatt_subscribe+0x110>)
   1b506:	f241 4392 	movw	r3, #5266	; 0x1492
   1b50a:	4a41      	ldr	r2, [pc, #260]	; (1b610 <bt_gatt_subscribe+0x114>)
   1b50c:	4841      	ldr	r0, [pc, #260]	; (1b614 <bt_gatt_subscribe+0x118>)
   1b50e:	f013 ff59 	bl	2f3c4 <assert_print>
   1b512:	4841      	ldr	r0, [pc, #260]	; (1b618 <bt_gatt_subscribe+0x11c>)
   1b514:	f013 ff56 	bl	2f3c4 <assert_print>
   1b518:	f241 4192 	movw	r1, #5266	; 0x1492
	__ASSERT(params && params->notify,  "invalid parameters\n");
   1b51c:	483c      	ldr	r0, [pc, #240]	; (1b610 <bt_gatt_subscribe+0x114>)
   1b51e:	f013 ff4a 	bl	2f3b6 <assert_post_action>
   1b522:	b109      	cbz	r1, 1b528 <bt_gatt_subscribe+0x2c>
   1b524:	680b      	ldr	r3, [r1, #0]
   1b526:	b963      	cbnz	r3, 1b542 <bt_gatt_subscribe+0x46>
   1b528:	493c      	ldr	r1, [pc, #240]	; (1b61c <bt_gatt_subscribe+0x120>)
   1b52a:	f241 4393 	movw	r3, #5267	; 0x1493
   1b52e:	4a38      	ldr	r2, [pc, #224]	; (1b610 <bt_gatt_subscribe+0x114>)
   1b530:	4838      	ldr	r0, [pc, #224]	; (1b614 <bt_gatt_subscribe+0x118>)
   1b532:	f013 ff47 	bl	2f3c4 <assert_print>
   1b536:	4838      	ldr	r0, [pc, #224]	; (1b618 <bt_gatt_subscribe+0x11c>)
   1b538:	f013 ff44 	bl	2f3c4 <assert_print>
   1b53c:	f241 4193 	movw	r1, #5267	; 0x1493
   1b540:	e7ec      	b.n	1b51c <bt_gatt_subscribe+0x20>
	__ASSERT(params->value, "invalid parameters\n");
   1b542:	8a0b      	ldrh	r3, [r1, #16]
   1b544:	b963      	cbnz	r3, 1b560 <bt_gatt_subscribe+0x64>
   1b546:	4936      	ldr	r1, [pc, #216]	; (1b620 <bt_gatt_subscribe+0x124>)
   1b548:	f241 4394 	movw	r3, #5268	; 0x1494
   1b54c:	4a30      	ldr	r2, [pc, #192]	; (1b610 <bt_gatt_subscribe+0x114>)
   1b54e:	4831      	ldr	r0, [pc, #196]	; (1b614 <bt_gatt_subscribe+0x118>)
   1b550:	f013 ff38 	bl	2f3c4 <assert_print>
   1b554:	4830      	ldr	r0, [pc, #192]	; (1b618 <bt_gatt_subscribe+0x11c>)
   1b556:	f013 ff35 	bl	2f3c4 <assert_print>
   1b55a:	f241 4194 	movw	r1, #5268	; 0x1494
   1b55e:	e7dd      	b.n	1b51c <bt_gatt_subscribe+0x20>
	__ASSERT(params->ccc_handle, "invalid parameters\n");
   1b560:	89cb      	ldrh	r3, [r1, #14]
   1b562:	b963      	cbnz	r3, 1b57e <bt_gatt_subscribe+0x82>
   1b564:	492f      	ldr	r1, [pc, #188]	; (1b624 <bt_gatt_subscribe+0x128>)
   1b566:	f241 439a 	movw	r3, #5274	; 0x149a
   1b56a:	4a29      	ldr	r2, [pc, #164]	; (1b610 <bt_gatt_subscribe+0x114>)
   1b56c:	4829      	ldr	r0, [pc, #164]	; (1b614 <bt_gatt_subscribe+0x118>)
   1b56e:	f013 ff29 	bl	2f3c4 <assert_print>
   1b572:	4829      	ldr	r0, [pc, #164]	; (1b618 <bt_gatt_subscribe+0x11c>)
   1b574:	f013 ff26 	bl	2f3c4 <assert_print>
   1b578:	f241 419a 	movw	r1, #5274	; 0x149a
   1b57c:	e7ce      	b.n	1b51c <bt_gatt_subscribe+0x20>
	if (conn->state != BT_CONN_CONNECTED) {
   1b57e:	7b43      	ldrb	r3, [r0, #13]
   1b580:	2b07      	cmp	r3, #7
   1b582:	d13a      	bne.n	1b5fa <bt_gatt_subscribe+0xfe>
	sub = gatt_sub_find(conn);
   1b584:	f7fd fdb2 	bl	190ec <gatt_sub_find>
	if (!sub) {
   1b588:	4604      	mov	r4, r0
   1b58a:	b958      	cbnz	r0, 1b5a4 <bt_gatt_subscribe+0xa8>
		sub = gatt_sub_find(NULL);
   1b58c:	f7fd fdae 	bl	190ec <gatt_sub_find>
		if (sub) {
   1b590:	4604      	mov	r4, r0
   1b592:	2800      	cmp	r0, #0
   1b594:	d034      	beq.n	1b600 <bt_gatt_subscribe+0x104>
			bt_addr_le_copy(&sub->peer, &conn->le.dst);
   1b596:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1b59a:	3001      	adds	r0, #1
   1b59c:	f016 fed3 	bl	32346 <bt_addr_le_copy>
			sub->id = conn->id;
   1b5a0:	7a33      	ldrb	r3, [r6, #8]
   1b5a2:	7023      	strb	r3, [r4, #0]
	return list->head;
   1b5a4:	68a3      	ldr	r3, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   1b5a6:	b17b      	cbz	r3, 1b5c8 <bt_gatt_subscribe+0xcc>
   1b5a8:	2200      	movs	r2, #0
   1b5aa:	3b18      	subs	r3, #24
		if (tmp == params) {
   1b5ac:	429d      	cmp	r5, r3
   1b5ae:	d02a      	beq.n	1b606 <bt_gatt_subscribe+0x10a>
		if (tmp->value_handle == params->value_handle &&
   1b5b0:	8998      	ldrh	r0, [r3, #12]
   1b5b2:	89a9      	ldrh	r1, [r5, #12]
   1b5b4:	4288      	cmp	r0, r1
   1b5b6:	d104      	bne.n	1b5c2 <bt_gatt_subscribe+0xc6>
   1b5b8:	8a18      	ldrh	r0, [r3, #16]
   1b5ba:	8a29      	ldrh	r1, [r5, #16]
			has_subscription = true;
   1b5bc:	4288      	cmp	r0, r1
   1b5be:	bf28      	it	cs
   1b5c0:	2201      	movcs	r2, #1
	return node->next;
   1b5c2:	699b      	ldr	r3, [r3, #24]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   1b5c4:	b96b      	cbnz	r3, 1b5e2 <bt_gatt_subscribe+0xe6>
	if (!has_subscription) {
   1b5c6:	b972      	cbnz	r2, 1b5e6 <bt_gatt_subscribe+0xea>
		err = gatt_write_ccc(conn, params);
   1b5c8:	4630      	mov	r0, r6
   1b5ca:	4629      	mov	r1, r5
   1b5cc:	f7fe f9d2 	bl	19974 <gatt_write_ccc>
		if (err) {
   1b5d0:	4606      	mov	r6, r0
   1b5d2:	b140      	cbz	r0, 1b5e6 <bt_gatt_subscribe+0xea>
	if (gatt_sub_is_empty(sub)) {
   1b5d4:	68a3      	ldr	r3, [r4, #8]
   1b5d6:	b913      	cbnz	r3, 1b5de <bt_gatt_subscribe+0xe2>
		gatt_sub_free(sub);
   1b5d8:	4620      	mov	r0, r4
   1b5da:	f7fd fe51 	bl	19280 <gatt_sub_free>
}
   1b5de:	4630      	mov	r0, r6
   1b5e0:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   1b5e2:	3b18      	subs	r3, #24
   1b5e4:	e7e2      	b.n	1b5ac <bt_gatt_subscribe+0xb0>
	return list->head;
   1b5e6:	68a2      	ldr	r2, [r4, #8]
	sys_slist_prepend(&sub->list, &params->node);
   1b5e8:	f105 0318 	add.w	r3, r5, #24
	parent->next = child;
   1b5ec:	61aa      	str	r2, [r5, #24]
Z_GENLIST_PREPEND(slist, snode)
   1b5ee:	68e2      	ldr	r2, [r4, #12]
	list->head = node;
   1b5f0:	60a3      	str	r3, [r4, #8]
Z_GENLIST_PREPEND(slist, snode)
   1b5f2:	b902      	cbnz	r2, 1b5f6 <bt_gatt_subscribe+0xfa>
	list->tail = node;
   1b5f4:	60e3      	str	r3, [r4, #12]
	return 0;
   1b5f6:	2600      	movs	r6, #0
   1b5f8:	e7f1      	b.n	1b5de <bt_gatt_subscribe+0xe2>
		return -ENOTCONN;
   1b5fa:	f06f 067f 	mvn.w	r6, #127	; 0x7f
   1b5fe:	e7ee      	b.n	1b5de <bt_gatt_subscribe+0xe2>
		return -ENOMEM;
   1b600:	f06f 060b 	mvn.w	r6, #11
   1b604:	e7eb      	b.n	1b5de <bt_gatt_subscribe+0xe2>
			return -EALREADY;
   1b606:	f06f 0677 	mvn.w	r6, #119	; 0x77
   1b60a:	e7e8      	b.n	1b5de <bt_gatt_subscribe+0xe2>
   1b60c:	0003bca4 	.word	0x0003bca4
   1b610:	0003ce4a 	.word	0x0003ce4a
   1b614:	00039995 	.word	0x00039995
   1b618:	0003d251 	.word	0x0003d251
   1b61c:	0003d458 	.word	0x0003d458
   1b620:	0003d471 	.word	0x0003d471
   1b624:	0003d47f 	.word	0x0003d47f

0001b628 <bt_gatt_unsubscribe>:
{
   1b628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b62c:	460c      	mov	r4, r1
	__ASSERT(conn, "invalid parameters\n");
   1b62e:	4607      	mov	r7, r0
   1b630:	b970      	cbnz	r0, 1b650 <bt_gatt_unsubscribe+0x28>
   1b632:	4940      	ldr	r1, [pc, #256]	; (1b734 <bt_gatt_unsubscribe+0x10c>)
   1b634:	f241 43f1 	movw	r3, #5361	; 0x14f1
   1b638:	4a3f      	ldr	r2, [pc, #252]	; (1b738 <bt_gatt_unsubscribe+0x110>)
   1b63a:	4840      	ldr	r0, [pc, #256]	; (1b73c <bt_gatt_unsubscribe+0x114>)
   1b63c:	f013 fec2 	bl	2f3c4 <assert_print>
   1b640:	483f      	ldr	r0, [pc, #252]	; (1b740 <bt_gatt_unsubscribe+0x118>)
   1b642:	f013 febf 	bl	2f3c4 <assert_print>
   1b646:	f241 41f1 	movw	r1, #5361	; 0x14f1
	__ASSERT(params, "invalid parameters\n");
   1b64a:	483b      	ldr	r0, [pc, #236]	; (1b738 <bt_gatt_unsubscribe+0x110>)
   1b64c:	f013 feb3 	bl	2f3b6 <assert_post_action>
   1b650:	b961      	cbnz	r1, 1b66c <bt_gatt_unsubscribe+0x44>
   1b652:	493c      	ldr	r1, [pc, #240]	; (1b744 <bt_gatt_unsubscribe+0x11c>)
   1b654:	f241 43f2 	movw	r3, #5362	; 0x14f2
   1b658:	4a37      	ldr	r2, [pc, #220]	; (1b738 <bt_gatt_unsubscribe+0x110>)
   1b65a:	4838      	ldr	r0, [pc, #224]	; (1b73c <bt_gatt_unsubscribe+0x114>)
   1b65c:	f013 feb2 	bl	2f3c4 <assert_print>
   1b660:	4837      	ldr	r0, [pc, #220]	; (1b740 <bt_gatt_unsubscribe+0x118>)
   1b662:	f013 feaf 	bl	2f3c4 <assert_print>
   1b666:	f241 41f2 	movw	r1, #5362	; 0x14f2
   1b66a:	e7ee      	b.n	1b64a <bt_gatt_unsubscribe+0x22>
	if (conn->state != BT_CONN_CONNECTED) {
   1b66c:	7b43      	ldrb	r3, [r0, #13]
   1b66e:	2b07      	cmp	r3, #7
   1b670:	d15a      	bne.n	1b728 <bt_gatt_unsubscribe+0x100>
	sub = gatt_sub_find(conn);
   1b672:	f7fd fd3b 	bl	190ec <gatt_sub_find>
	if (!sub) {
   1b676:	4606      	mov	r6, r0
   1b678:	2800      	cmp	r0, #0
   1b67a:	d058      	beq.n	1b72e <bt_gatt_unsubscribe+0x106>
	return list->head;
   1b67c:	6885      	ldr	r5, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   1b67e:	2d00      	cmp	r5, #0
   1b680:	d055      	beq.n	1b72e <bt_gatt_unsubscribe+0x106>
   1b682:	2300      	movs	r3, #0
   1b684:	4698      	mov	r8, r3
   1b686:	3d18      	subs	r5, #24
		if (params == tmp) {
   1b688:	42ac      	cmp	r4, r5
   1b68a:	d009      	beq.n	1b6a0 <bt_gatt_unsubscribe+0x78>
		if (tmp->value_handle == params->value_handle) {
   1b68c:	89a9      	ldrh	r1, [r5, #12]
   1b68e:	89a2      	ldrh	r2, [r4, #12]
			has_subscription = true;
   1b690:	4291      	cmp	r1, r2
   1b692:	bf08      	it	eq
   1b694:	f04f 0801 	moveq.w	r8, #1
	return node->next;
   1b698:	69ad      	ldr	r5, [r5, #24]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   1b69a:	b11d      	cbz	r5, 1b6a4 <bt_gatt_unsubscribe+0x7c>
   1b69c:	3d18      	subs	r5, #24
   1b69e:	e7f3      	b.n	1b688 <bt_gatt_unsubscribe+0x60>
			found = true;
   1b6a0:	2301      	movs	r3, #1
   1b6a2:	e7f9      	b.n	1b698 <bt_gatt_unsubscribe+0x70>
	if (!found) {
   1b6a4:	2b00      	cmp	r3, #0
   1b6a6:	d042      	beq.n	1b72e <bt_gatt_unsubscribe+0x106>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1b6a8:	f104 0014 	add.w	r0, r4, #20
   1b6ac:	f016 fda1 	bl	321f2 <atomic_get>
	if (atomic_test_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING)) {
   1b6b0:	0743      	lsls	r3, r0, #29
   1b6b2:	d503      	bpl.n	1b6bc <bt_gatt_unsubscribe+0x94>
		bt_gatt_cancel(conn, params);
   1b6b4:	4621      	mov	r1, r4
   1b6b6:	4638      	mov	r0, r7
   1b6b8:	f017 f8c8 	bl	3284c <bt_gatt_cancel>
	if (!has_subscription) {
   1b6bc:	f1b8 0f00 	cmp.w	r8, #0
   1b6c0:	d018      	beq.n	1b6f4 <bt_gatt_unsubscribe+0xcc>
	return list->head;
   1b6c2:	68b3      	ldr	r3, [r6, #8]
	sys_slist_find_and_remove(&sub->list, &params->node);
   1b6c4:	f104 0218 	add.w	r2, r4, #24
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1b6c8:	b153      	cbz	r3, 1b6e0 <bt_gatt_unsubscribe+0xb8>
   1b6ca:	429a      	cmp	r2, r3
   1b6cc:	d122      	bne.n	1b714 <bt_gatt_unsubscribe+0xec>
	return node->next;
   1b6ce:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_REMOVE(slist, snode)
   1b6d0:	b9d5      	cbnz	r5, 1b708 <bt_gatt_unsubscribe+0xe0>
   1b6d2:	68f1      	ldr	r1, [r6, #12]
	list->head = node;
   1b6d4:	60b3      	str	r3, [r6, #8]
Z_GENLIST_REMOVE(slist, snode)
   1b6d6:	428a      	cmp	r2, r1
   1b6d8:	d100      	bne.n	1b6dc <bt_gatt_unsubscribe+0xb4>
	list->tail = node;
   1b6da:	60f3      	str	r3, [r6, #12]
	parent->next = child;
   1b6dc:	2300      	movs	r3, #0
   1b6de:	61a3      	str	r3, [r4, #24]
	if (gatt_sub_is_empty(sub)) {
   1b6e0:	68b3      	ldr	r3, [r6, #8]
   1b6e2:	b913      	cbnz	r3, 1b6ea <bt_gatt_unsubscribe+0xc2>
		gatt_sub_free(sub);
   1b6e4:	4630      	mov	r0, r6
   1b6e6:	f7fd fdcb 	bl	19280 <gatt_sub_free>
	if (has_subscription) {
   1b6ea:	f1b8 0f00 	cmp.w	r8, #0
   1b6ee:	d114      	bne.n	1b71a <bt_gatt_unsubscribe+0xf2>
	return 0;
   1b6f0:	2000      	movs	r0, #0
   1b6f2:	e007      	b.n	1b704 <bt_gatt_unsubscribe+0xdc>
		err = gatt_write_ccc(conn, params);
   1b6f4:	4621      	mov	r1, r4
   1b6f6:	4638      	mov	r0, r7
		params->value = 0x0000;
   1b6f8:	f8a4 8010 	strh.w	r8, [r4, #16]
		err = gatt_write_ccc(conn, params);
   1b6fc:	f7fe f93a 	bl	19974 <gatt_write_ccc>
		if (err) {
   1b700:	2800      	cmp	r0, #0
   1b702:	d0de      	beq.n	1b6c2 <bt_gatt_unsubscribe+0x9a>
}
   1b704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b708:	602b      	str	r3, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
   1b70a:	68f3      	ldr	r3, [r6, #12]
   1b70c:	429a      	cmp	r2, r3
	list->tail = node;
   1b70e:	bf08      	it	eq
   1b710:	60f5      	streq	r5, [r6, #12]
}
   1b712:	e7e3      	b.n	1b6dc <bt_gatt_unsubscribe+0xb4>
	return node->next;
   1b714:	461d      	mov	r5, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1b716:	681b      	ldr	r3, [r3, #0]
   1b718:	e7d6      	b.n	1b6c8 <bt_gatt_unsubscribe+0xa0>
		params->notify(conn, params, NULL, 0);
   1b71a:	2300      	movs	r3, #0
   1b71c:	4621      	mov	r1, r4
   1b71e:	461a      	mov	r2, r3
   1b720:	4638      	mov	r0, r7
   1b722:	6825      	ldr	r5, [r4, #0]
   1b724:	47a8      	blx	r5
   1b726:	e7e3      	b.n	1b6f0 <bt_gatt_unsubscribe+0xc8>
		return -ENOTCONN;
   1b728:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1b72c:	e7ea      	b.n	1b704 <bt_gatt_unsubscribe+0xdc>
		return -EINVAL;
   1b72e:	f06f 0015 	mvn.w	r0, #21
   1b732:	e7e7      	b.n	1b704 <bt_gatt_unsubscribe+0xdc>
   1b734:	0003bca4 	.word	0x0003bca4
   1b738:	0003ce4a 	.word	0x0003ce4a
   1b73c:	00039995 	.word	0x00039995
   1b740:	0003d251 	.word	0x0003d251
   1b744:	0004069d 	.word	0x0004069d

0001b748 <bt_gatt_mult_notification>:
{
   1b748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b74c:	b087      	sub	sp, #28
   1b74e:	af00      	add	r7, sp, #0
   1b750:	4680      	mov	r8, r0
   1b752:	460c      	mov	r4, r1
   1b754:	607a      	str	r2, [r7, #4]
	sub = gatt_sub_find(conn);
   1b756:	f7fd fcc9 	bl	190ec <gatt_sub_find>
	if (!sub) {
   1b75a:	4681      	mov	r9, r0
   1b75c:	b330      	cbz	r0, 1b7ac <bt_gatt_mult_notification+0x64>
	net_buf_simple_init_with_data(&buf, (void *)data, length);
   1b75e:	4621      	mov	r1, r4
   1b760:	687a      	ldr	r2, [r7, #4]
   1b762:	f107 000c 	add.w	r0, r7, #12
   1b766:	f017 fce3 	bl	33130 <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
   1b76a:	8a3b      	ldrh	r3, [r7, #16]
   1b76c:	2b04      	cmp	r3, #4
   1b76e:	d91d      	bls.n	1b7ac <bt_gatt_mult_notification+0x64>
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   1b770:	2104      	movs	r1, #4
   1b772:	f107 000c 	add.w	r0, r7, #12
   1b776:	f002 fe71 	bl	1e45c <net_buf_simple_pull_mem>
		if (len > buf.len) {
   1b77a:	8a3a      	ldrh	r2, [r7, #16]
		len = sys_cpu_to_le16(nfy->len);
   1b77c:	f8b0 a002 	ldrh.w	sl, [r0, #2]
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   1b780:	4605      	mov	r5, r0
		if (len > buf.len) {
   1b782:	4552      	cmp	r2, sl
		handle = sys_cpu_to_le16(nfy->handle);
   1b784:	f8b0 b000 	ldrh.w	fp, [r0]
		if (len > buf.len) {
   1b788:	d214      	bcs.n	1b7b4 <bt_gatt_mult_notification+0x6c>
			LOG_ERR("Invalid data len %u > %u", len, length);
   1b78a:	466c      	mov	r4, sp
   1b78c:	b088      	sub	sp, #32
   1b78e:	466a      	mov	r2, sp
   1b790:	687b      	ldr	r3, [r7, #4]
   1b792:	4921      	ldr	r1, [pc, #132]	; (1b818 <bt_gatt_mult_notification+0xd0>)
   1b794:	61d3      	str	r3, [r2, #28]
   1b796:	2304      	movs	r3, #4
   1b798:	e9c2 1a05 	strd	r1, sl, [r2, #20]
   1b79c:	481f      	ldr	r0, [pc, #124]	; (1b81c <bt_gatt_mult_notification+0xd4>)
   1b79e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1b7a2:	f842 3f10 	str.w	r3, [r2, #16]!
   1b7a6:	f016 fe82 	bl	324ae <z_log_msg_static_create.constprop.0>
   1b7aa:	46a5      	mov	sp, r4
}
   1b7ac:	371c      	adds	r7, #28
   1b7ae:	46bd      	mov	sp, r7
   1b7b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return list->head;
   1b7b4:	f8d9 6008 	ldr.w	r6, [r9, #8]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   1b7b8:	b326      	cbz	r6, 1b804 <bt_gatt_mult_notification+0xbc>
	return node->next;
   1b7ba:	6834      	ldr	r4, [r6, #0]
   1b7bc:	b104      	cbz	r4, 1b7c0 <bt_gatt_mult_notification+0x78>
   1b7be:	3c18      	subs	r4, #24
			if (handle != params->value_handle) {
   1b7c0:	f836 2c0c 	ldrh.w	r2, [r6, #-12]
   1b7c4:	455a      	cmp	r2, fp
   1b7c6:	d11a      	bne.n	1b7fe <bt_gatt_mult_notification+0xb6>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   1b7c8:	3e18      	subs	r6, #24
   1b7ca:	e007      	b.n	1b7dc <bt_gatt_mult_notification+0x94>
   1b7cc:	4626      	mov	r6, r4
   1b7ce:	69a4      	ldr	r4, [r4, #24]
   1b7d0:	89b2      	ldrh	r2, [r6, #12]
   1b7d2:	b1ec      	cbz	r4, 1b810 <bt_gatt_mult_notification+0xc8>
			if (handle != params->value_handle) {
   1b7d4:	455a      	cmp	r2, fp
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   1b7d6:	f1a4 0418 	sub.w	r4, r4, #24
			if (handle != params->value_handle) {
   1b7da:	d1f7      	bne.n	1b7cc <bt_gatt_mult_notification+0x84>
			if (check_subscribe_security_level(conn, params)) {
   1b7dc:	f898 0009 	ldrb.w	r0, [r8, #9]
   1b7e0:	7cb2      	ldrb	r2, [r6, #18]
   1b7e2:	4290      	cmp	r0, r2
   1b7e4:	d30b      	bcc.n	1b7fe <bt_gatt_mult_notification+0xb6>
				if (params->notify(conn, params, nfy->value, len) ==
   1b7e6:	4653      	mov	r3, sl
   1b7e8:	4631      	mov	r1, r6
   1b7ea:	4640      	mov	r0, r8
   1b7ec:	f8d6 c000 	ldr.w	ip, [r6]
   1b7f0:	1d2a      	adds	r2, r5, #4
   1b7f2:	47e0      	blx	ip
   1b7f4:	b918      	cbnz	r0, 1b7fe <bt_gatt_mult_notification+0xb6>
					bt_gatt_unsubscribe(conn, params);
   1b7f6:	4631      	mov	r1, r6
   1b7f8:	4640      	mov	r0, r8
   1b7fa:	f7ff ff15 	bl	1b628 <bt_gatt_unsubscribe>
   1b7fe:	4626      	mov	r6, r4
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   1b800:	2c00      	cmp	r4, #0
   1b802:	d1e4      	bne.n	1b7ce <bt_gatt_mult_notification+0x86>
		net_buf_simple_pull_mem(&buf, len);
   1b804:	4651      	mov	r1, sl
   1b806:	f107 000c 	add.w	r0, r7, #12
   1b80a:	f002 fe27 	bl	1e45c <net_buf_simple_pull_mem>
   1b80e:	e7ac      	b.n	1b76a <bt_gatt_mult_notification+0x22>
			if (handle != params->value_handle) {
   1b810:	455a      	cmp	r2, fp
   1b812:	d0e3      	beq.n	1b7dc <bt_gatt_mult_notification+0x94>
   1b814:	e7f6      	b.n	1b804 <bt_gatt_mult_notification+0xbc>
   1b816:	bf00      	nop
   1b818:	0003d492 	.word	0x0003d492
   1b81c:	000378e0 	.word	0x000378e0

0001b820 <bt_gatt_connected>:
{
   1b820:	b5b0      	push	{r4, r5, r7, lr}
   1b822:	b08e      	sub	sp, #56	; 0x38
	data.sec = BT_SECURITY_L1;
   1b824:	2301      	movs	r3, #1
{
   1b826:	af02      	add	r7, sp, #8
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1b828:	f100 0590 	add.w	r5, r0, #144	; 0x90
{
   1b82c:	4604      	mov	r4, r0
	data.conn = conn;
   1b82e:	6078      	str	r0, [r7, #4]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1b830:	4629      	mov	r1, r5
   1b832:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   1b834:	723b      	strb	r3, [r7, #8]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1b836:	f015 fc32 	bl	3109e <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   1b83a:	b198      	cbz	r0, 1b864 <bt_gatt_connected+0x44>
		if (conn->id) {
   1b83c:	7a22      	ldrb	r2, [r4, #8]
   1b83e:	b3a2      	cbz	r2, 1b8aa <bt_gatt_connected+0x8a>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   1b840:	2104      	movs	r1, #4
   1b842:	4638      	mov	r0, r7
   1b844:	f013 fb42 	bl	2eecc <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1b848:	9700      	str	r7, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1b84a:	2124      	movs	r1, #36	; 0x24
   1b84c:	4a18      	ldr	r2, [pc, #96]	; (1b8b0 <bt_gatt_connected+0x90>)
   1b84e:	f107 000c 	add.w	r0, r7, #12
   1b852:	462b      	mov	r3, r5
   1b854:	f7f8 f8a4 	bl	139a0 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   1b858:	f107 020c 	add.w	r2, r7, #12
   1b85c:	4610      	mov	r0, r2
   1b85e:	4915      	ldr	r1, [pc, #84]	; (1b8b4 <bt_gatt_connected+0x94>)
   1b860:	f7f5 fc5e 	bl	11120 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1b864:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1b868:	2001      	movs	r0, #1
   1b86a:	4a13      	ldr	r2, [pc, #76]	; (1b8b8 <bt_gatt_connected+0x98>)
   1b86c:	1d3b      	adds	r3, r7, #4
   1b86e:	f016 ff2d 	bl	326cc <bt_gatt_foreach_attr>
	    bt_conn_get_security(conn) < data.sec) {
   1b872:	4620      	mov	r0, r4
   1b874:	f015 fddd 	bl	31432 <bt_conn_get_security>
   1b878:	7a39      	ldrb	r1, [r7, #8]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   1b87a:	4288      	cmp	r0, r1
   1b87c:	d212      	bcs.n	1b8a4 <bt_gatt_connected+0x84>
		int err = bt_conn_set_security(conn, data.sec);
   1b87e:	4620      	mov	r0, r4
   1b880:	f015 fdab 	bl	313da <bt_conn_set_security>
		if (err) {
   1b884:	b170      	cbz	r0, 1b8a4 <bt_gatt_connected+0x84>
			LOG_WRN("Failed to set security for bonded peer (%d)", err);
   1b886:	466c      	mov	r4, sp
   1b888:	b088      	sub	sp, #32
   1b88a:	aa02      	add	r2, sp, #8
   1b88c:	4b0b      	ldr	r3, [pc, #44]	; (1b8bc <bt_gatt_connected+0x9c>)
   1b88e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1b892:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1b896:	2303      	movs	r3, #3
   1b898:	4809      	ldr	r0, [pc, #36]	; (1b8c0 <bt_gatt_connected+0xa0>)
   1b89a:	f842 3f10 	str.w	r3, [r2, #16]!
   1b89e:	f016 fe06 	bl	324ae <z_log_msg_static_create.constprop.0>
   1b8a2:	46a5      	mov	sp, r4
}
   1b8a4:	3730      	adds	r7, #48	; 0x30
   1b8a6:	46bd      	mov	sp, r7
   1b8a8:	bdb0      	pop	{r4, r5, r7, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1b8aa:	9200      	str	r2, [sp, #0]
   1b8ac:	e7cd      	b.n	1b84a <bt_gatt_connected+0x2a>
   1b8ae:	bf00      	nop
   1b8b0:	0003d1b5 	.word	0x0003d1b5
   1b8b4:	0001a175 	.word	0x0001a175
   1b8b8:	0001a73d 	.word	0x0001a73d
   1b8bc:	0003d4ab 	.word	0x0003d4ab
   1b8c0:	000378e0 	.word	0x000378e0

0001b8c4 <bt_gatt_att_max_mtu_changed>:
{
   1b8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b8c6:	4605      	mov	r5, r0
   1b8c8:	460e      	mov	r6, r1
   1b8ca:	4617      	mov	r7, r2
	return list->head;
   1b8cc:	4b06      	ldr	r3, [pc, #24]	; (1b8e8 <bt_gatt_att_max_mtu_changed+0x24>)
   1b8ce:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1b8d0:	b14c      	cbz	r4, 1b8e6 <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   1b8d2:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1b8d6:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   1b8d8:	b11b      	cbz	r3, 1b8e2 <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   1b8da:	463a      	mov	r2, r7
   1b8dc:	4631      	mov	r1, r6
   1b8de:	4628      	mov	r0, r5
   1b8e0:	4798      	blx	r3
	return node->next;
   1b8e2:	6864      	ldr	r4, [r4, #4]
   1b8e4:	e7f4      	b.n	1b8d0 <bt_gatt_att_max_mtu_changed+0xc>
}
   1b8e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b8e8:	2000e760 	.word	0x2000e760

0001b8ec <bt_gatt_encrypt_change>:
	data.sec = BT_SECURITY_L1;
   1b8ec:	2301      	movs	r3, #1
{
   1b8ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1b8f0:	4605      	mov	r5, r0
	data.conn = conn;
   1b8f2:	9000      	str	r0, [sp, #0]
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1b8f4:	f100 0190 	add.w	r1, r0, #144	; 0x90
   1b8f8:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   1b8fa:	f88d 3004 	strb.w	r3, [sp, #4]
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1b8fe:	f015 fbce 	bl	3109e <bt_addr_le_is_bonded>
   1b902:	b978      	cbnz	r0, 1b924 <bt_gatt_encrypt_change+0x38>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1b904:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1b908:	2001      	movs	r0, #1
   1b90a:	466b      	mov	r3, sp
   1b90c:	4a13      	ldr	r2, [pc, #76]	; (1b95c <bt_gatt_encrypt_change+0x70>)
   1b90e:	f016 fedd 	bl	326cc <bt_gatt_foreach_attr>
	if (!bt_gatt_change_aware(conn, false)) {
   1b912:	2100      	movs	r1, #0
   1b914:	4628      	mov	r0, r5
   1b916:	f016 ffeb 	bl	328f0 <bt_gatt_change_aware>
   1b91a:	b908      	cbnz	r0, 1b920 <bt_gatt_encrypt_change+0x34>
		sc_indicate(0x0001, 0xffff);
   1b91c:	f7fe f842 	bl	199a4 <sc_indicate.constprop.0>
}
   1b920:	b003      	add	sp, #12
   1b922:	bd30      	pop	{r4, r5, pc}
	sub = gatt_sub_find(conn);
   1b924:	4628      	mov	r0, r5
   1b926:	f7fd fbe1 	bl	190ec <gatt_sub_find>
	if (!sub) {
   1b92a:	2800      	cmp	r0, #0
   1b92c:	d0ea      	beq.n	1b904 <bt_gatt_encrypt_change+0x18>
	return list->head;
   1b92e:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   1b930:	2c00      	cmp	r4, #0
   1b932:	d0e7      	beq.n	1b904 <bt_gatt_encrypt_change+0x18>
   1b934:	3c18      	subs	r4, #24
		if (!atomic_test_bit(params->flags,
   1b936:	f104 0314 	add.w	r3, r4, #20
   1b93a:	4618      	mov	r0, r3
   1b93c:	f016 fc59 	bl	321f2 <atomic_get>
   1b940:	0702      	lsls	r2, r0, #28
   1b942:	d408      	bmi.n	1b956 <bt_gatt_encrypt_change+0x6a>
   1b944:	4618      	mov	r0, r3
   1b946:	f016 fc54 	bl	321f2 <atomic_get>
				     BT_GATT_SUBSCRIBE_FLAG_SENT) &&
   1b94a:	0783      	lsls	r3, r0, #30
   1b94c:	d403      	bmi.n	1b956 <bt_gatt_encrypt_change+0x6a>
			gatt_write_ccc(conn, params);
   1b94e:	4621      	mov	r1, r4
   1b950:	4628      	mov	r0, r5
   1b952:	f7fe f80f 	bl	19974 <gatt_write_ccc>
	return node->next;
   1b956:	69a4      	ldr	r4, [r4, #24]
   1b958:	e7ea      	b.n	1b930 <bt_gatt_encrypt_change+0x44>
   1b95a:	bf00      	nop
   1b95c:	0001a73d 	.word	0x0001a73d

0001b960 <bt_gatt_store_ccc>:
	save.count = 0;
   1b960:	2300      	movs	r3, #0
{
   1b962:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b964:	4604      	mov	r4, r0
   1b966:	b0c1      	sub	sp, #260	; 0x104
   1b968:	af02      	add	r7, sp, #8
   1b96a:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   1b96c:	62f9      	str	r1, [r7, #44]	; 0x2c
	save.addr_with_id.id = id;
   1b96e:	f887 0030 	strb.w	r0, [r7, #48]	; 0x30
	save.count = 0;
   1b972:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
   1b976:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1b97a:	2001      	movs	r0, #1
   1b97c:	4a1b      	ldr	r2, [pc, #108]	; (1b9ec <bt_gatt_store_ccc+0x8c>)
   1b97e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1b982:	f016 fea3 	bl	326cc <bt_gatt_foreach_attr>
	if (id) {
   1b986:	b364      	cbz	r4, 1b9e2 <bt_gatt_store_ccc+0x82>
		u8_to_dec(id_str, sizeof(id_str), id);
   1b988:	1d3e      	adds	r6, r7, #4
   1b98a:	4622      	mov	r2, r4
   1b98c:	2104      	movs	r1, #4
   1b98e:	4630      	mov	r0, r6
   1b990:	f013 fa9c 	bl	2eecc <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   1b994:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1b996:	4a16      	ldr	r2, [pc, #88]	; (1b9f0 <bt_gatt_store_ccc+0x90>)
   1b998:	462b      	mov	r3, r5
   1b99a:	2124      	movs	r1, #36	; 0x24
   1b99c:	f107 0008 	add.w	r0, r7, #8
   1b9a0:	f7f7 fffe 	bl	139a0 <bt_settings_encode_key>
	if (save.count) {
   1b9a4:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
   1b9a8:	b1ea      	cbz	r2, 1b9e6 <bt_gatt_store_ccc+0x86>
		len = save.count * sizeof(*save.store);
   1b9aa:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
   1b9ac:	f107 0134 	add.w	r1, r7, #52	; 0x34
	err = settings_save_one(key, str, len);
   1b9b0:	f107 0008 	add.w	r0, r7, #8
   1b9b4:	f7f5 fb54 	bl	11060 <settings_save_one>
	if (err) {
   1b9b8:	4604      	mov	r4, r0
   1b9ba:	b170      	cbz	r0, 1b9da <bt_gatt_store_ccc+0x7a>
		LOG_ERR("Failed to store CCCs (err %d)", err);
   1b9bc:	466d      	mov	r5, sp
   1b9be:	b088      	sub	sp, #32
   1b9c0:	aa02      	add	r2, sp, #8
   1b9c2:	4b0c      	ldr	r3, [pc, #48]	; (1b9f4 <bt_gatt_store_ccc+0x94>)
   1b9c4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b9c8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1b9cc:	2303      	movs	r3, #3
   1b9ce:	480a      	ldr	r0, [pc, #40]	; (1b9f8 <bt_gatt_store_ccc+0x98>)
   1b9d0:	f842 3f10 	str.w	r3, [r2, #16]!
   1b9d4:	f016 fd6b 	bl	324ae <z_log_msg_static_create.constprop.0>
   1b9d8:	46ad      	mov	sp, r5
}
   1b9da:	4620      	mov	r0, r4
   1b9dc:	37fc      	adds	r7, #252	; 0xfc
   1b9de:	46bd      	mov	sp, r7
   1b9e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1b9e2:	9400      	str	r4, [sp, #0]
   1b9e4:	e7d7      	b.n	1b996 <bt_gatt_store_ccc+0x36>
		str = NULL;
   1b9e6:	4611      	mov	r1, r2
   1b9e8:	e7e2      	b.n	1b9b0 <bt_gatt_store_ccc+0x50>
   1b9ea:	bf00      	nop
   1b9ec:	0001975d 	.word	0x0001975d
   1b9f0:	0003d1b5 	.word	0x0003d1b5
   1b9f4:	0003d4d7 	.word	0x0003d4d7
   1b9f8:	000378e0 	.word	0x000378e0

0001b9fc <bt_gatt_identity_resolved>:
{
   1b9fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	bool is_bonded = bt_addr_le_is_bonded(conn->id, &conn->le.dst);
   1ba00:	f100 0890 	add.w	r8, r0, #144	; 0x90
	struct addr_match user_data = {
   1ba04:	e9cd 1200 	strd	r1, r2, [sp]
{
   1ba08:	4604      	mov	r4, r0
   1ba0a:	460f      	mov	r7, r1
	bool is_bonded = bt_addr_le_is_bonded(conn->id, &conn->le.dst);
   1ba0c:	7a00      	ldrb	r0, [r0, #8]
   1ba0e:	4641      	mov	r1, r8
{
   1ba10:	4616      	mov	r6, r2
	bool is_bonded = bt_addr_le_is_bonded(conn->id, &conn->le.dst);
   1ba12:	f015 fb44 	bl	3109e <bt_addr_le_is_bonded>
   1ba16:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, convert_to_id_on_match, &user_data);
   1ba18:	466b      	mov	r3, sp
   1ba1a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1ba1e:	2001      	movs	r0, #1
   1ba20:	4a0c      	ldr	r2, [pc, #48]	; (1ba54 <bt_gatt_identity_resolved+0x58>)
   1ba22:	f016 fe53 	bl	326cc <bt_gatt_foreach_attr>
	if (is_bonded) {
   1ba26:	b11d      	cbz	r5, 1ba30 <bt_gatt_identity_resolved+0x34>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   1ba28:	4641      	mov	r1, r8
   1ba2a:	7a20      	ldrb	r0, [r4, #8]
   1ba2c:	f7ff ff98 	bl	1b960 <bt_gatt_store_ccc>
	struct gatt_cf_cfg *cfg = find_cf_cfg_by_addr(conn->id, private_addr);
   1ba30:	4639      	mov	r1, r7
   1ba32:	7a20      	ldrb	r0, [r4, #8]
   1ba34:	f7fd fab6 	bl	18fa4 <find_cf_cfg_by_addr>
	if (cfg) {
   1ba38:	b140      	cbz	r0, 1ba4c <bt_gatt_identity_resolved+0x50>
		bt_addr_le_copy(&cfg->peer, id_addr);
   1ba3a:	4631      	mov	r1, r6
   1ba3c:	3001      	adds	r0, #1
   1ba3e:	f016 fc82 	bl	32346 <bt_addr_le_copy>
		if (is_bonded) {
   1ba42:	b11d      	cbz	r5, 1ba4c <bt_gatt_identity_resolved+0x50>
			bt_gatt_store_cf(conn->id, &conn->le.dst);
   1ba44:	4641      	mov	r1, r8
   1ba46:	7a20      	ldrb	r0, [r4, #8]
   1ba48:	f7fe f91e 	bl	19c88 <bt_gatt_store_cf.isra.0>
}
   1ba4c:	b002      	add	sp, #8
   1ba4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ba52:	bf00      	nop
   1ba54:	00019731 	.word	0x00019731

0001ba58 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1ba58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ba5c:	4604      	mov	r4, r0
   1ba5e:	b085      	sub	sp, #20
	LOG_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1ba60:	4603      	mov	r3, r0
   1ba62:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1ba66:	2001      	movs	r0, #1
{
   1ba68:	af00      	add	r7, sp, #0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1ba6a:	4a46      	ldr	r2, [pc, #280]	; (1bb84 <bt_gatt_disconnected+0x12c>)
	/* Clear pending notifications */
	cleanup_notify(conn);
#endif /* CONFIG_BT_GATT_NOTIFY_MULTIPLE */

#if defined(CONFIG_BT_SETTINGS_DELAYED_STORE)
	if (gatt_delayed_store_find(conn->id, &conn->le.dst)) {
   1ba6c:	f104 0690 	add.w	r6, r4, #144	; 0x90
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1ba70:	f016 fe2c 	bl	326cc <bt_gatt_foreach_attr>
	if (gatt_delayed_store_find(conn->id, &conn->le.dst)) {
   1ba74:	4631      	mov	r1, r6
   1ba76:	7a20      	ldrb	r0, [r4, #8]
   1ba78:	f7fd fab4 	bl	18fe4 <gatt_delayed_store_find>
   1ba7c:	b1a8      	cbz	r0, 1baaa <bt_gatt_disconnected+0x52>
		int err = k_work_reschedule(&gatt_delayed_store.work, K_NO_WAIT);
   1ba7e:	2200      	movs	r2, #0
   1ba80:	2300      	movs	r3, #0
   1ba82:	4841      	ldr	r0, [pc, #260]	; (1bb88 <bt_gatt_disconnected+0x130>)
   1ba84:	f00e fb22 	bl	2a0cc <k_work_reschedule>

		if (err < 0) {
   1ba88:	2800      	cmp	r0, #0
   1ba8a:	da0e      	bge.n	1baaa <bt_gatt_disconnected+0x52>
			LOG_ERR("Unable to reschedule settings storage (err %d)",
   1ba8c:	466d      	mov	r5, sp
   1ba8e:	b088      	sub	sp, #32
   1ba90:	466a      	mov	r2, sp
   1ba92:	4b3e      	ldr	r3, [pc, #248]	; (1bb8c <bt_gatt_disconnected+0x134>)
   1ba94:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ba98:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1ba9c:	2303      	movs	r3, #3
   1ba9e:	483c      	ldr	r0, [pc, #240]	; (1bb90 <bt_gatt_disconnected+0x138>)
   1baa0:	f842 3f10 	str.w	r3, [r2, #16]!
   1baa4:	f016 fd03 	bl	324ae <z_log_msg_static_create.constprop.0>
   1baa8:	46ad      	mov	sp, r5
	}
#endif	/* CONFIG_BT_SETTINGS_DELAYED_STORE */

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1baaa:	4631      	mov	r1, r6
   1baac:	7a20      	ldrb	r0, [r4, #8]
   1baae:	f015 faf6 	bl	3109e <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   1bab2:	b150      	cbz	r0, 1baca <bt_gatt_disconnected+0x72>
		struct addr_with_id addr_with_id = {
   1bab4:	7a23      	ldrb	r3, [r4, #8]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
   1bab6:	f64f 71ff 	movw	r1, #65535	; 0xffff
		struct addr_with_id addr_with_id = {
   1baba:	733b      	strb	r3, [r7, #12]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   1babc:	2001      	movs	r0, #1
   1babe:	4a35      	ldr	r2, [pc, #212]	; (1bb94 <bt_gatt_disconnected+0x13c>)
   1bac0:	f107 0308 	add.w	r3, r7, #8
		struct addr_with_id addr_with_id = {
   1bac4:	60be      	str	r6, [r7, #8]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   1bac6:	f016 fe01 	bl	326cc <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
   1baca:	4620      	mov	r0, r4
   1bacc:	f7fd fb0e 	bl	190ec <gatt_sub_find>
	if (!sub) {
   1bad0:	4680      	mov	r8, r0
   1bad2:	b948      	cbnz	r0, 1bae8 <bt_gatt_disconnected+0x90>
	cfg = find_cf_cfg(conn);
   1bad4:	4620      	mov	r0, r4
   1bad6:	f7fd fac7 	bl	19068 <find_cf_cfg>
	if (!cfg) {
   1bada:	4605      	mov	r5, r0
   1badc:	2800      	cmp	r0, #0
   1bade:	d142      	bne.n	1bb66 <bt_gatt_disconnected+0x10e>
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   1bae0:	3714      	adds	r7, #20
   1bae2:	46bd      	mov	sp, r7
   1bae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return list->head;
   1bae8:	6885      	ldr	r5, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1baea:	2d00      	cmp	r5, #0
   1baec:	d0f2      	beq.n	1bad4 <bt_gatt_disconnected+0x7c>
	return node->next;
   1baee:	f855 9918 	ldr.w	r9, [r5], #-24
   1baf2:	f1b9 0f00 	cmp.w	r9, #0
   1baf6:	d001      	beq.n	1bafc <bt_gatt_disconnected+0xa4>
   1baf8:	f1a9 0918 	sub.w	r9, r9, #24
{
   1bafc:	f04f 0a00 	mov.w	sl, #0
			params->value = 0U;
   1bb00:	46d3      	mov	fp, sl
   1bb02:	e001      	b.n	1bb08 <bt_gatt_disconnected+0xb0>
{
   1bb04:	464d      	mov	r5, r9
   1bb06:	4699      	mov	r9, r3
		atomic_clear_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_SENT);
   1bb08:	f105 0314 	add.w	r3, r5, #20
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1bb0c:	4618      	mov	r0, r3
   1bb0e:	f06f 0108 	mvn.w	r1, #8
   1bb12:	607b      	str	r3, [r7, #4]
   1bb14:	f016 fb62 	bl	321dc <atomic_and>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   1bb18:	4631      	mov	r1, r6
   1bb1a:	7a20      	ldrb	r0, [r4, #8]
   1bb1c:	f015 fabf 	bl	3109e <bt_addr_le_is_bonded>
   1bb20:	687b      	ldr	r3, [r7, #4]
   1bb22:	b980      	cbnz	r0, 1bb46 <bt_gatt_disconnected+0xee>
			gatt_sub_remove(conn, sub, prev, params);
   1bb24:	462b      	mov	r3, r5
   1bb26:	4652      	mov	r2, sl
   1bb28:	4641      	mov	r1, r8
   1bb2a:	4620      	mov	r0, r4
			params->value = 0U;
   1bb2c:	f8a5 b010 	strh.w	fp, [r5, #16]
			gatt_sub_remove(conn, sub, prev, params);
   1bb30:	f016 fc10 	bl	32354 <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1bb34:	f1b9 0f00 	cmp.w	r9, #0
   1bb38:	d0cc      	beq.n	1bad4 <bt_gatt_disconnected+0x7c>
   1bb3a:	f8d9 3018 	ldr.w	r3, [r9, #24]
   1bb3e:	2b00      	cmp	r3, #0
   1bb40:	d0e0      	beq.n	1bb04 <bt_gatt_disconnected+0xac>
   1bb42:	3b18      	subs	r3, #24
   1bb44:	e7de      	b.n	1bb04 <bt_gatt_disconnected+0xac>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1bb46:	4618      	mov	r0, r3
   1bb48:	f016 fb53 	bl	321f2 <atomic_get>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   1bb4c:	07c3      	lsls	r3, r0, #31
   1bb4e:	d4e9      	bmi.n	1bb24 <bt_gatt_disconnected+0xcc>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
   1bb50:	f898 3001 	ldrb.w	r3, [r8, #1]
   1bb54:	b123      	cbz	r3, 1bb60 <bt_gatt_disconnected+0x108>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   1bb56:	4631      	mov	r1, r6
   1bb58:	f108 0001 	add.w	r0, r8, #1
   1bb5c:	f016 fbf3 	bl	32346 <bt_addr_le_copy>
			prev = &params->node;
   1bb60:	f105 0a18 	add.w	sl, r5, #24
   1bb64:	e7e6      	b.n	1bb34 <bt_gatt_disconnected+0xdc>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1bb66:	4631      	mov	r1, r6
   1bb68:	7a20      	ldrb	r0, [r4, #8]
   1bb6a:	f015 fa98 	bl	3109e <bt_addr_le_is_bonded>
   1bb6e:	b918      	cbnz	r0, 1bb78 <bt_gatt_disconnected+0x120>
		clear_cf_cfg(cfg);
   1bb70:	4628      	mov	r0, r5
   1bb72:	f7fd fe2d 	bl	197d0 <clear_cf_cfg>
   1bb76:	e7b3      	b.n	1bae0 <bt_gatt_disconnected+0x88>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1bb78:	4631      	mov	r1, r6
   1bb7a:	1c68      	adds	r0, r5, #1
   1bb7c:	f016 fbe3 	bl	32346 <bt_addr_le_copy>
}
   1bb80:	e7ae      	b.n	1bae0 <bt_gatt_disconnected+0x88>
   1bb82:	bf00      	nop
   1bb84:	000197f9 	.word	0x000197f9
   1bb88:	2000da58 	.word	0x2000da58
   1bb8c:	0003d4f5 	.word	0x0003d4f5
   1bb90:	000378e0 	.word	0x000378e0
   1bb94:	00019709 	.word	0x00019709

0001bb98 <smp_find>:

	return 0;
}

static struct bt_smp *smp_find(int flag)
{
   1bb98:	b508      	push	{r3, lr}
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   1bb9a:	4b05      	ldr	r3, [pc, #20]	; (1bbb0 <smp_find+0x18>)
{
   1bb9c:	4601      	mov	r1, r0
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   1bb9e:	4618      	mov	r0, r3
   1bba0:	f016 ff29 	bl	329f6 <atomic_test_bit>
			return &bt_smp_pool[i];
		}
	}

	return NULL;
   1bba4:	3b04      	subs	r3, #4
   1bba6:	2800      	cmp	r0, #0
}
   1bba8:	bf14      	ite	ne
   1bbaa:	4618      	movne	r0, r3
   1bbac:	2000      	moveq	r0, #0
   1bbae:	bd08      	pop	{r3, pc}
   1bbb0:	2000db5c 	.word	0x2000db5c

0001bbb4 <latch_auth_cb>:
	atomic_ptr_cas(&smp->auth_cb, BT_SMP_AUTH_CB_UNINITIALIZED, (atomic_ptr_val_t)bt_auth);
   1bbb4:	4b08      	ldr	r3, [pc, #32]	; (1bbd8 <latch_auth_cb+0x24>)
   1bbb6:	f500 70a8 	add.w	r0, r0, #336	; 0x150
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1bbba:	681a      	ldr	r2, [r3, #0]
   1bbbc:	4b07      	ldr	r3, [pc, #28]	; (1bbdc <latch_auth_cb+0x28>)
   1bbbe:	e8d0 1fef 	ldaex	r1, [r0]
   1bbc2:	4299      	cmp	r1, r3
   1bbc4:	d104      	bne.n	1bbd0 <latch_auth_cb+0x1c>
   1bbc6:	e8c0 2fec 	stlex	ip, r2, [r0]
   1bbca:	f1bc 0f00 	cmp.w	ip, #0
   1bbce:	d1f6      	bne.n	1bbbe <latch_auth_cb+0xa>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1bbd0:	e8d0 0faf 	lda	r0, [r0]
}
   1bbd4:	4770      	bx	lr
   1bbd6:	bf00      	nop
   1bbd8:	2000e658 	.word	0x2000e658
   1bbdc:	2000db58 	.word	0x2000db58

0001bbe0 <get_io_capa>:
{
   1bbe0:	b508      	push	{r3, lr}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1bbe2:	f7ff ffe7 	bl	1bbb4 <latch_auth_cb>
	if (!smp_auth_cb) {
   1bbe6:	4603      	mov	r3, r0
   1bbe8:	b1c8      	cbz	r0, 1bc1e <get_io_capa+0x3e>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   1bbea:	e9d0 1200 	ldrd	r1, r2, [r0]
   1bbee:	b921      	cbnz	r1, 1bbfa <get_io_capa+0x1a>
			return BT_SMP_IO_KEYBOARD_ONLY;
   1bbf0:	2a00      	cmp	r2, #0
   1bbf2:	bf0c      	ite	eq
   1bbf4:	2003      	moveq	r0, #3
   1bbf6:	2002      	movne	r0, #2
   1bbf8:	e010      	b.n	1bc1c <get_io_capa+0x3c>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   1bbfa:	b132      	cbz	r2, 1bc0a <get_io_capa+0x2a>
   1bbfc:	6883      	ldr	r3, [r0, #8]
   1bbfe:	b913      	cbnz	r3, 1bc06 <get_io_capa+0x26>
	    (smp_auth_cb->passkey_confirm || !sc_supported)) {
   1bc00:	4b09      	ldr	r3, [pc, #36]	; (1bc28 <get_io_capa+0x48>)
   1bc02:	781b      	ldrb	r3, [r3, #0]
   1bc04:	b933      	cbnz	r3, 1bc14 <get_io_capa+0x34>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   1bc06:	2004      	movs	r0, #4
   1bc08:	e008      	b.n	1bc1c <get_io_capa+0x3c>
	if (sc_supported && smp_auth_cb->passkey_display &&
   1bc0a:	4907      	ldr	r1, [pc, #28]	; (1bc28 <get_io_capa+0x48>)
   1bc0c:	7808      	ldrb	r0, [r1, #0]
   1bc0e:	b128      	cbz	r0, 1bc1c <get_io_capa+0x3c>
   1bc10:	689b      	ldr	r3, [r3, #8]
   1bc12:	b933      	cbnz	r3, 1bc22 <get_io_capa+0x42>
	if (smp_auth_cb->passkey_entry) {
   1bc14:	3a00      	subs	r2, #0
   1bc16:	bf18      	it	ne
   1bc18:	2201      	movne	r2, #1
   1bc1a:	0050      	lsls	r0, r2, #1
}
   1bc1c:	bd08      	pop	{r3, pc}
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   1bc1e:	2003      	movs	r0, #3
   1bc20:	e7fc      	b.n	1bc1c <get_io_capa+0x3c>
		return BT_SMP_IO_DISPLAY_YESNO;
   1bc22:	2001      	movs	r0, #1
   1bc24:	e7fa      	b.n	1bc1c <get_io_capa+0x3c>
   1bc26:	bf00      	nop
   1bc28:	2000f209 	.word	0x2000f209

0001bc2c <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   1bc2c:	4613      	mov	r3, r2
	int err = bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
   1bc2e:	2200      	movs	r2, #0
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   1bc30:	b530      	push	{r4, r5, lr}
   1bc32:	b089      	sub	sp, #36	; 0x24
	int err = bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
   1bc34:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   1bc36:	4604      	mov	r4, r0
   1bc38:	460d      	mov	r5, r1
	int err = bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
   1bc3a:	460a      	mov	r2, r1
   1bc3c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   1bc40:	2106      	movs	r1, #6
   1bc42:	f015 fd0f 	bl	31664 <bt_l2cap_send_cb>
	if (err) {
   1bc46:	b188      	cbz	r0, 1bc6c <smp_send.constprop.0+0x40>
		if (err == -ENOBUFS) {
   1bc48:	3069      	adds	r0, #105	; 0x69
   1bc4a:	d109      	bne.n	1bc60 <smp_send.constprop.0+0x34>
			LOG_ERR("Ran out of TX buffers or contexts.");
   1bc4c:	4b0c      	ldr	r3, [pc, #48]	; (1bc80 <smp_send.constprop.0+0x54>)
   1bc4e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1bc52:	9307      	str	r3, [sp, #28]
   1bc54:	2302      	movs	r3, #2
   1bc56:	480b      	ldr	r0, [pc, #44]	; (1bc84 <smp_send.constprop.0+0x58>)
   1bc58:	aa06      	add	r2, sp, #24
   1bc5a:	9306      	str	r3, [sp, #24]
   1bc5c:	f016 ff04 	bl	32a68 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   1bc60:	4628      	mov	r0, r5
}
   1bc62:	b009      	add	sp, #36	; 0x24
   1bc64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   1bc68:	f002 ba90 	b.w	1e18c <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   1bc6c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1bc70:	2300      	movs	r3, #0
   1bc72:	f504 7090 	add.w	r0, r4, #288	; 0x120
}
   1bc76:	b009      	add	sp, #36	; 0x24
   1bc78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   1bc7c:	f00e ba26 	b.w	2a0cc <k_work_reschedule>
   1bc80:	0003cc90 	.word	0x0003cc90
   1bc84:	00037930 	.word	0x00037930

0001bc88 <smp_chan_get.part.0>:
static struct bt_smp *smp_chan_get(struct bt_conn *conn)
   1bc88:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		LOG_ERR("Unable to find SMP channel");
   1bc8a:	4b07      	ldr	r3, [pc, #28]	; (1bca8 <smp_chan_get.part.0+0x20>)
   1bc8c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1bc90:	9305      	str	r3, [sp, #20]
   1bc92:	2302      	movs	r3, #2
   1bc94:	4805      	ldr	r0, [pc, #20]	; (1bcac <smp_chan_get.part.0+0x24>)
   1bc96:	aa04      	add	r2, sp, #16
   1bc98:	9304      	str	r3, [sp, #16]
   1bc9a:	f016 fee5 	bl	32a68 <z_log_msg_static_create.constprop.0>
}
   1bc9e:	2000      	movs	r0, #0
   1bca0:	b007      	add	sp, #28
   1bca2:	f85d fb04 	ldr.w	pc, [sp], #4
   1bca6:	bf00      	nop
   1bca8:	0003d538 	.word	0x0003d538
   1bcac:	00037930 	.word	0x00037930

0001bcb0 <bt_smp_accept.part.0>:
	} else {
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   1bcb0:	b580      	push	{r7, lr}
   1bcb2:	af00      	add	r7, sp, #0
		*chan = &smp->chan.chan;

		return 0;
	}

	LOG_ERR("No available SMP context for conn %p", conn);
   1bcb4:	b088      	sub	sp, #32
   1bcb6:	466a      	mov	r2, sp
   1bcb8:	4b07      	ldr	r3, [pc, #28]	; (1bcd8 <bt_smp_accept.part.0+0x28>)
   1bcba:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1bcbe:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1bcc2:	2303      	movs	r3, #3
   1bcc4:	4805      	ldr	r0, [pc, #20]	; (1bcdc <bt_smp_accept.part.0+0x2c>)
   1bcc6:	f842 3f10 	str.w	r3, [r2, #16]!
   1bcca:	f016 fecd 	bl	32a68 <z_log_msg_static_create.constprop.0>

	return -ENOMEM;
}
   1bcce:	f06f 000b 	mvn.w	r0, #11
   1bcd2:	46bd      	mov	sp, r7
   1bcd4:	bd80      	pop	{r7, pc}
   1bcd6:	bf00      	nop
   1bcd8:	0003d553 	.word	0x0003d553
   1bcdc:	00037930 	.word	0x00037930

0001bce0 <bt_smp_accept>:
		if (smp->chan.chan.conn) {
   1bce0:	4b05      	ldr	r3, [pc, #20]	; (1bcf8 <bt_smp_accept+0x18>)
   1bce2:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
   1bce6:	b10a      	cbz	r2, 1bcec <bt_smp_accept+0xc>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1bce8:	f7ff bfe2 	b.w	1bcb0 <bt_smp_accept.part.0>
		smp->chan.chan.ops = &ops;
   1bcec:	4803      	ldr	r0, [pc, #12]	; (1bcfc <bt_smp_accept+0x1c>)
		*chan = &smp->chan.chan;
   1bcee:	33ec      	adds	r3, #236	; 0xec
		smp->chan.chan.ops = &ops;
   1bcf0:	6058      	str	r0, [r3, #4]
}
   1bcf2:	4610      	mov	r0, r2
		*chan = &smp->chan.chan;
   1bcf4:	600b      	str	r3, [r1, #0]
}
   1bcf6:	4770      	bx	lr
   1bcf8:	2000db58 	.word	0x2000db58
   1bcfc:	00038338 	.word	0x00038338

0001bd00 <smp_dhkey_check>:
{
   1bd00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1bd04:	b097      	sub	sp, #92	; 0x5c
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1bd06:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
{
   1bd0a:	4604      	mov	r4, r0
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1bd0c:	78f5      	ldrb	r5, [r6, #3]
{
   1bd0e:	af04      	add	r7, sp, #16
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1bd10:	2d00      	cmp	r5, #0
   1bd12:	d17e      	bne.n	1be12 <smp_dhkey_check+0x112>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   1bd14:	f8d1 800c 	ldr.w	r8, [r1, #12]
		(void)memset(r, 0, sizeof(r));
   1bd18:	2210      	movs	r2, #16
   1bd1a:	4629      	mov	r1, r5
   1bd1c:	f107 0020 	add.w	r0, r7, #32
   1bd20:	f01a fc22 	bl	36568 <memset>
		switch (smp->method) {
   1bd24:	7a23      	ldrb	r3, [r4, #8]
   1bd26:	2b05      	cmp	r3, #5
   1bd28:	d857      	bhi.n	1bdda <smp_dhkey_check+0xda>
   1bd2a:	e8df f003 	tbb	[pc, r3]
   1bd2e:	0306      	.short	0x0306
   1bd30:	45560603 	.word	0x45560603
			memcpy(r, &smp->passkey, sizeof(smp->passkey));
   1bd34:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   1bd38:	623b      	str	r3, [r7, #32]
				 &smp->chan.chan.conn->le.init_addr, e)) {
   1bd3a:	f106 0397 	add.w	r3, r6, #151	; 0x97
		if (bt_crypto_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
   1bd3e:	f107 0910 	add.w	r9, r7, #16
   1bd42:	9302      	str	r3, [sp, #8]
				 &smp->chan.chan.conn->le.resp_addr,
   1bd44:	369e      	adds	r6, #158	; 0x9e
		if (bt_crypto_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
   1bd46:	f104 0311 	add.w	r3, r4, #17
   1bd4a:	9300      	str	r3, [sp, #0]
   1bd4c:	f8cd 900c 	str.w	r9, [sp, #12]
   1bd50:	9601      	str	r6, [sp, #4]
   1bd52:	f107 0320 	add.w	r3, r7, #32
   1bd56:	f104 0227 	add.w	r2, r4, #39	; 0x27
   1bd5a:	f104 0137 	add.w	r1, r4, #55	; 0x37
   1bd5e:	f104 00c7 	add.w	r0, r4, #199	; 0xc7
   1bd62:	f017 f98d 	bl	33080 <bt_crypto_f6>
   1bd66:	2800      	cmp	r0, #0
   1bd68:	d146      	bne.n	1bdf8 <smp_dhkey_check+0xf8>
		if (memcmp(e, req->e, 16)) {
   1bd6a:	2210      	movs	r2, #16
   1bd6c:	4641      	mov	r1, r8
   1bd6e:	4648      	mov	r0, r9
   1bd70:	f01a fbca 	bl	36508 <memcmp>
   1bd74:	2800      	cmp	r0, #0
   1bd76:	d14a      	bne.n	1be0e <smp_dhkey_check+0x10e>
	return MIN(req->max_key_size, rsp->max_key_size);
   1bd78:	7b62      	ldrb	r2, [r4, #13]
   1bd7a:	7d23      	ldrb	r3, [r4, #20]
		(void)memset(rand, 0, sizeof(rand));
   1bd7c:	e9c7 0002 	strd	r0, r0, [r7, #8]
		(void)memset(ediv, 0, sizeof(ediv));
   1bd80:	80b8      	strh	r0, [r7, #4]
		if (bt_conn_le_start_encryption(smp->chan.chan.conn, rand, ediv,
   1bd82:	429a      	cmp	r2, r3
   1bd84:	bf94      	ite	ls
   1bd86:	9200      	strls	r2, [sp, #0]
   1bd88:	9300      	strhi	r3, [sp, #0]
   1bd8a:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1bd8e:	f104 0347 	add.w	r3, r4, #71	; 0x47
   1bd92:	1d3a      	adds	r2, r7, #4
   1bd94:	f107 0108 	add.w	r1, r7, #8
   1bd98:	f015 fae5 	bl	31366 <bt_conn_le_start_encryption>
   1bd9c:	2800      	cmp	r0, #0
   1bd9e:	da31      	bge.n	1be04 <smp_dhkey_check+0x104>
			LOG_ERR("Failed to start encryption");
   1bda0:	4b1d      	ldr	r3, [pc, #116]	; (1be18 <smp_dhkey_check+0x118>)
   1bda2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1bda6:	647b      	str	r3, [r7, #68]	; 0x44
   1bda8:	2302      	movs	r3, #2
   1bdaa:	481c      	ldr	r0, [pc, #112]	; (1be1c <smp_dhkey_check+0x11c>)
   1bdac:	f107 0240 	add.w	r2, r7, #64	; 0x40
   1bdb0:	643b      	str	r3, [r7, #64]	; 0x40
   1bdb2:	f016 fe59 	bl	32a68 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1bdb6:	e01f      	b.n	1bdf8 <smp_dhkey_check+0xf8>
			if (smp->oobd_local) {
   1bdb8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
   1bdbc:	2b00      	cmp	r3, #0
   1bdbe:	d0bc      	beq.n	1bd3a <smp_dhkey_check+0x3a>
				memcpy(r, smp->oobd_local->r, sizeof(r));
   1bdc0:	f107 0c20 	add.w	ip, r7, #32
   1bdc4:	f103 0e10 	add.w	lr, r3, #16
   1bdc8:	4662      	mov	r2, ip
   1bdca:	6818      	ldr	r0, [r3, #0]
   1bdcc:	6859      	ldr	r1, [r3, #4]
   1bdce:	3308      	adds	r3, #8
   1bdd0:	c203      	stmia	r2!, {r0, r1}
   1bdd2:	4573      	cmp	r3, lr
   1bdd4:	4694      	mov	ip, r2
   1bdd6:	d1f7      	bne.n	1bdc8 <smp_dhkey_check+0xc8>
   1bdd8:	e7af      	b.n	1bd3a <smp_dhkey_check+0x3a>
			LOG_ERR("Unknown pairing method (%u)", smp->method);
   1bdda:	466c      	mov	r4, sp
   1bddc:	b088      	sub	sp, #32
   1bdde:	aa04      	add	r2, sp, #16
   1bde0:	490f      	ldr	r1, [pc, #60]	; (1be20 <smp_dhkey_check+0x120>)
   1bde2:	480e      	ldr	r0, [pc, #56]	; (1be1c <smp_dhkey_check+0x11c>)
		switch (smp->method) {
   1bde4:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_ERR("Unknown pairing method (%u)", smp->method);
   1bde8:	2303      	movs	r3, #3
   1bdea:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1bdee:	f842 3f10 	str.w	r3, [r2, #16]!
   1bdf2:	f016 fe39 	bl	32a68 <z_log_msg_static_create.constprop.0>
   1bdf6:	46a5      	mov	sp, r4
			return BT_SMP_ERR_UNSPECIFIED;
   1bdf8:	2508      	movs	r5, #8
}
   1bdfa:	4628      	mov	r0, r5
   1bdfc:	374c      	adds	r7, #76	; 0x4c
   1bdfe:	46bd      	mov	sp, r7
   1be00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1be04:	2101      	movs	r1, #1
   1be06:	1d20      	adds	r0, r4, #4
   1be08:	f016 fe50 	bl	32aac <atomic_set_bit>
		return 0;
   1be0c:	e7f5      	b.n	1bdfa <smp_dhkey_check+0xfa>
			return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   1be0e:	250b      	movs	r5, #11
   1be10:	e7f3      	b.n	1bdfa <smp_dhkey_check+0xfa>
	return 0;
   1be12:	2500      	movs	r5, #0
   1be14:	e7f1      	b.n	1bdfa <smp_dhkey_check+0xfa>
   1be16:	bf00      	nop
   1be18:	0003d594 	.word	0x0003d594
   1be1c:	00037930 	.word	0x00037930
   1be20:	0003d578 	.word	0x0003d578

0001be24 <smp_dhkey_generate>:
{
   1be24:	b530      	push	{r4, r5, lr}
   1be26:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1be28:	1d05      	adds	r5, r0, #4
   1be2a:	2108      	movs	r1, #8
   1be2c:	4628      	mov	r0, r5
{
   1be2e:	b087      	sub	sp, #28
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1be30:	f016 fe3c 	bl	32aac <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   1be34:	490b      	ldr	r1, [pc, #44]	; (1be64 <smp_dhkey_generate+0x40>)
   1be36:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1be3a:	f7fa fb15 	bl	16468 <bt_dh_key_gen>
	if (err) {
   1be3e:	b170      	cbz	r0, 1be5e <smp_dhkey_generate+0x3a>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1be40:	2108      	movs	r1, #8
   1be42:	4628      	mov	r0, r5
   1be44:	f016 fdfe 	bl	32a44 <atomic_clear_bit>
		LOG_ERR("Failed to generate DHKey");
   1be48:	4b07      	ldr	r3, [pc, #28]	; (1be68 <smp_dhkey_generate+0x44>)
   1be4a:	4808      	ldr	r0, [pc, #32]	; (1be6c <smp_dhkey_generate+0x48>)
   1be4c:	9305      	str	r3, [sp, #20]
   1be4e:	2302      	movs	r3, #2
   1be50:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1be54:	aa04      	add	r2, sp, #16
   1be56:	9304      	str	r3, [sp, #16]
   1be58:	f016 fe06 	bl	32a68 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1be5c:	2008      	movs	r0, #8
}
   1be5e:	b007      	add	sp, #28
   1be60:	bd30      	pop	{r4, r5, pc}
   1be62:	bf00      	nop
   1be64:	00032edf 	.word	0x00032edf
   1be68:	0003d5af 	.word	0x0003d5af
   1be6c:	00037930 	.word	0x00037930

0001be70 <smp_ident_info>:
{
   1be70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1be72:	4605      	mov	r5, r0
   1be74:	460b      	mov	r3, r1
   1be76:	af00      	add	r7, sp, #0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1be78:	210d      	movs	r1, #13
   1be7a:	3004      	adds	r0, #4
   1be7c:	f016 fdbb 	bl	329f6 <atomic_test_bit>
   1be80:	b368      	cbz	r0, 1bede <smp_ident_info+0x6e>
		struct bt_smp_ident_info *req = (void *)buf->data;
   1be82:	68dc      	ldr	r4, [r3, #12]
		struct bt_conn *conn = smp->chan.chan.conn;
   1be84:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1be88:	2002      	movs	r0, #2
   1be8a:	f103 0690 	add.w	r6, r3, #144	; 0x90
   1be8e:	4632      	mov	r2, r6
   1be90:	7a19      	ldrb	r1, [r3, #8]
   1be92:	f001 fde9 	bl	1da68 <bt_keys_get_type>
		if (!keys) {
   1be96:	b9b8      	cbnz	r0, 1bec8 <smp_ident_info+0x58>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1be98:	4630      	mov	r0, r6
   1be9a:	f7f7 fcab 	bl	137f4 <bt_addr_le_str>
   1be9e:	466c      	mov	r4, sp
   1bea0:	b088      	sub	sp, #32
   1bea2:	466a      	mov	r2, sp
   1bea4:	4b11      	ldr	r3, [pc, #68]	; (1beec <smp_ident_info+0x7c>)
   1bea6:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1beaa:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1beae:	f44f 7300 	mov.w	r3, #512	; 0x200
   1beb2:	8393      	strh	r3, [r2, #28]
   1beb4:	4b0e      	ldr	r3, [pc, #56]	; (1bef0 <smp_ident_info+0x80>)
   1beb6:	480f      	ldr	r0, [pc, #60]	; (1bef4 <smp_ident_info+0x84>)
   1beb8:	f842 3f10 	str.w	r3, [r2, #16]!
   1bebc:	f016 fdd4 	bl	32a68 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1bec0:	2008      	movs	r0, #8
   1bec2:	46a5      	mov	sp, r4
}
   1bec4:	46bd      	mov	sp, r7
   1bec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bec8:	4622      	mov	r2, r4
   1beca:	f100 032a 	add.w	r3, r0, #42	; 0x2a
   1bece:	f104 0110 	add.w	r1, r4, #16
   1bed2:	f852 0b04 	ldr.w	r0, [r2], #4
   1bed6:	428a      	cmp	r2, r1
   1bed8:	f843 0b04 	str.w	r0, [r3], #4
   1bedc:	d1f9      	bne.n	1bed2 <smp_ident_info+0x62>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   1bede:	4628      	mov	r0, r5
   1bee0:	2109      	movs	r1, #9
   1bee2:	f016 fde3 	bl	32aac <atomic_set_bit>
	return 0;
   1bee6:	2000      	movs	r0, #0
   1bee8:	e7ec      	b.n	1bec4 <smp_ident_info+0x54>
   1beea:	bf00      	nop
   1beec:	0003d5c8 	.word	0x0003d5c8
   1bef0:	01000003 	.word	0x01000003
   1bef4:	00037930 	.word	0x00037930

0001bef8 <smp_encrypt_info>:
{
   1bef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1befa:	4605      	mov	r5, r0
   1befc:	460b      	mov	r3, r1
   1befe:	af00      	add	r7, sp, #0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1bf00:	210d      	movs	r1, #13
   1bf02:	3004      	adds	r0, #4
   1bf04:	f016 fd77 	bl	329f6 <atomic_test_bit>
   1bf08:	b368      	cbz	r0, 1bf66 <smp_encrypt_info+0x6e>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   1bf0a:	68dc      	ldr	r4, [r3, #12]
		struct bt_conn *conn = smp->chan.chan.conn;
   1bf0c:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1bf10:	2004      	movs	r0, #4
   1bf12:	f103 0690 	add.w	r6, r3, #144	; 0x90
   1bf16:	4632      	mov	r2, r6
   1bf18:	7a19      	ldrb	r1, [r3, #8]
   1bf1a:	f001 fda5 	bl	1da68 <bt_keys_get_type>
		if (!keys) {
   1bf1e:	b9b8      	cbnz	r0, 1bf50 <smp_encrypt_info+0x58>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1bf20:	4630      	mov	r0, r6
   1bf22:	f7f7 fc67 	bl	137f4 <bt_addr_le_str>
   1bf26:	466c      	mov	r4, sp
   1bf28:	b088      	sub	sp, #32
   1bf2a:	466a      	mov	r2, sp
   1bf2c:	4b11      	ldr	r3, [pc, #68]	; (1bf74 <smp_encrypt_info+0x7c>)
   1bf2e:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1bf32:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1bf36:	f44f 7300 	mov.w	r3, #512	; 0x200
   1bf3a:	8393      	strh	r3, [r2, #28]
   1bf3c:	4b0e      	ldr	r3, [pc, #56]	; (1bf78 <smp_encrypt_info+0x80>)
   1bf3e:	480f      	ldr	r0, [pc, #60]	; (1bf7c <smp_encrypt_info+0x84>)
   1bf40:	f842 3f10 	str.w	r3, [r2, #16]!
   1bf44:	f016 fd90 	bl	32a68 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1bf48:	2008      	movs	r0, #8
   1bf4a:	46a5      	mov	sp, r4
}
   1bf4c:	46bd      	mov	sp, r7
   1bf4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bf50:	4622      	mov	r2, r4
   1bf52:	f100 031a 	add.w	r3, r0, #26
   1bf56:	f104 0110 	add.w	r1, r4, #16
   1bf5a:	f852 0b04 	ldr.w	r0, [r2], #4
   1bf5e:	428a      	cmp	r2, r1
   1bf60:	f843 0b04 	str.w	r0, [r3], #4
   1bf64:	d1f9      	bne.n	1bf5a <smp_encrypt_info+0x62>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_CENTRAL_IDENT);
   1bf66:	4628      	mov	r0, r5
   1bf68:	2107      	movs	r1, #7
   1bf6a:	f016 fd9f 	bl	32aac <atomic_set_bit>
	return 0;
   1bf6e:	2000      	movs	r0, #0
   1bf70:	e7ec      	b.n	1bf4c <smp_encrypt_info+0x54>
   1bf72:	bf00      	nop
   1bf74:	0003d5c8 	.word	0x0003d5c8
   1bf78:	01000003 	.word	0x01000003
   1bf7c:	00037930 	.word	0x00037930

0001bf80 <bt_smp_distribute_keys>:
{
   1bf80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bf84:	b08e      	sub	sp, #56	; 0x38
   1bf86:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1bf88:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
{
   1bf8c:	af00      	add	r7, sp, #0
	if (!keys) {
   1bf8e:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   1bf92:	b9cb      	cbnz	r3, 1bfc8 <bt_smp_distribute_keys+0x48>
		LOG_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   1bf94:	3090      	adds	r0, #144	; 0x90
   1bf96:	f7f7 fc2d 	bl	137f4 <bt_addr_le_str>
   1bf9a:	466c      	mov	r4, sp
   1bf9c:	b088      	sub	sp, #32
   1bf9e:	466a      	mov	r2, sp
   1bfa0:	4b49      	ldr	r3, [pc, #292]	; (1c0c8 <bt_smp_distribute_keys+0x148>)
   1bfa2:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1bfa6:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1bfaa:	f44f 7300 	mov.w	r3, #512	; 0x200
   1bfae:	8393      	strh	r3, [r2, #28]
   1bfb0:	4b46      	ldr	r3, [pc, #280]	; (1c0cc <bt_smp_distribute_keys+0x14c>)
   1bfb2:	4847      	ldr	r0, [pc, #284]	; (1c0d0 <bt_smp_distribute_keys+0x150>)
   1bfb4:	f842 3f10 	str.w	r3, [r2, #16]!
   1bfb8:	f016 fd56 	bl	32a68 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1bfbc:	2008      	movs	r0, #8
   1bfbe:	46a5      	mov	sp, r4
}
   1bfc0:	3738      	adds	r7, #56	; 0x38
   1bfc2:	46bd      	mov	sp, r7
   1bfc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1bfc8:	f104 0804 	add.w	r8, r4, #4
   1bfcc:	2105      	movs	r1, #5
   1bfce:	4640      	mov	r0, r8
   1bfd0:	f016 fd11 	bl	329f6 <atomic_test_bit>
   1bfd4:	b108      	cbz	r0, 1bfda <bt_smp_distribute_keys+0x5a>
	return 0;
   1bfd6:	2000      	movs	r0, #0
   1bfd8:	e7f2      	b.n	1bfc0 <bt_smp_distribute_keys+0x40>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   1bfda:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   1bfde:	07db      	lsls	r3, r3, #31
   1bfe0:	d5f9      	bpl.n	1bfd6 <bt_smp_distribute_keys+0x56>
	struct bt_keys *keys = conn->le.keys;
   1bfe2:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1bfe6:	211a      	movs	r1, #26
   1bfe8:	f107 001c 	add.w	r0, r7, #28
	struct bt_keys *keys = conn->le.keys;
   1bfec:	f8d3 50bc 	ldr.w	r5, [r3, #188]	; 0xbc
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1bff0:	f7fa f978 	bl	162e4 <bt_rand>
   1bff4:	4681      	mov	r9, r0
   1bff6:	b158      	cbz	r0, 1c010 <bt_smp_distribute_keys+0x90>
			LOG_ERR("Unable to get random bytes");
   1bff8:	4b36      	ldr	r3, [pc, #216]	; (1c0d4 <bt_smp_distribute_keys+0x154>)
			LOG_ERR("Unable to allocate Central Ident buffer");
   1bffa:	617b      	str	r3, [r7, #20]
   1bffc:	2302      	movs	r3, #2
   1bffe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c002:	4833      	ldr	r0, [pc, #204]	; (1c0d0 <bt_smp_distribute_keys+0x150>)
   1c004:	613b      	str	r3, [r7, #16]
   1c006:	f107 0210 	add.w	r2, r7, #16
   1c00a:	f016 fd2d 	bl	32a68 <z_log_msg_static_create.constprop.0>
			return;
   1c00e:	e7e2      	b.n	1bfd6 <bt_smp_distribute_keys+0x56>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   1c010:	2106      	movs	r1, #6
   1c012:	4620      	mov	r0, r4
   1c014:	f016 fd5a 	bl	32acc <smp_create_pdu.constprop.0>
		if (!buf) {
   1c018:	4606      	mov	r6, r0
   1c01a:	b908      	cbnz	r0, 1c020 <bt_smp_distribute_keys+0xa0>
			LOG_ERR("Unable to allocate Encrypt Info buffer");
   1c01c:	4b2e      	ldr	r3, [pc, #184]	; (1c0d8 <bt_smp_distribute_keys+0x158>)
   1c01e:	e7ec      	b.n	1bffa <bt_smp_distribute_keys+0x7a>
   1c020:	2110      	movs	r1, #16
   1c022:	300c      	adds	r0, #12
   1c024:	f002 fa38 	bl	1e498 <net_buf_simple_add>
   1c028:	7b2a      	ldrb	r2, [r5, #12]
   1c02a:	f107 011c 	add.w	r1, r7, #28
   1c02e:	4682      	mov	sl, r0
   1c030:	f01a fa7a 	bl	36528 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   1c034:	7b28      	ldrb	r0, [r5, #12]
   1c036:	280f      	cmp	r0, #15
   1c038:	d805      	bhi.n	1c046 <bt_smp_distribute_keys+0xc6>
__ssp_bos_icheck3(memset, void *, int)
   1c03a:	f1c0 0210 	rsb	r2, r0, #16
   1c03e:	4649      	mov	r1, r9
   1c040:	4450      	add	r0, sl
   1c042:	f01a fa91 	bl	36568 <memset>
		smp_send(smp, buf, NULL, NULL);
   1c046:	4631      	mov	r1, r6
   1c048:	2200      	movs	r2, #0
   1c04a:	4620      	mov	r0, r4
   1c04c:	f7ff fdee 	bl	1bc2c <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_CENTRAL_IDENT,
   1c050:	2107      	movs	r1, #7
   1c052:	4620      	mov	r0, r4
   1c054:	f016 fd3a 	bl	32acc <smp_create_pdu.constprop.0>
		if (!buf) {
   1c058:	4606      	mov	r6, r0
   1c05a:	b908      	cbnz	r0, 1c060 <bt_smp_distribute_keys+0xe0>
			LOG_ERR("Unable to allocate Central Ident buffer");
   1c05c:	4b1f      	ldr	r3, [pc, #124]	; (1c0dc <bt_smp_distribute_keys+0x15c>)
   1c05e:	e7cc      	b.n	1bffa <bt_smp_distribute_keys+0x7a>
   1c060:	210a      	movs	r1, #10
   1c062:	300c      	adds	r0, #12
   1c064:	f002 fa18 	bl	1e498 <net_buf_simple_add>
   1c068:	4603      	mov	r3, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1c06a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   1c06e:	ca03      	ldmia	r2!, {r0, r1}
   1c070:	f8c3 0002 	str.w	r0, [r3, #2]
   1c074:	f8c3 1006 	str.w	r1, [r3, #6]
   1c078:	8eba      	ldrh	r2, [r7, #52]	; 0x34
		smp_send(smp, buf, smp_ident_sent, NULL);
   1c07a:	4620      	mov	r0, r4
   1c07c:	4631      	mov	r1, r6
   1c07e:	801a      	strh	r2, [r3, #0]
   1c080:	4a17      	ldr	r2, [pc, #92]	; (1c0e0 <bt_smp_distribute_keys+0x160>)
   1c082:	f7ff fdd3 	bl	1bc2c <smp_send.constprop.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1c086:	210d      	movs	r1, #13
   1c088:	4640      	mov	r0, r8
   1c08a:	f016 fcb4 	bl	329f6 <atomic_test_bit>
   1c08e:	f107 042c 	add.w	r4, r7, #44	; 0x2c
   1c092:	2800      	cmp	r0, #0
   1c094:	d09f      	beq.n	1bfd6 <bt_smp_distribute_keys+0x56>
			bt_keys_add_type(keys, BT_KEYS_PERIPH_LTK);
   1c096:	2101      	movs	r1, #1
   1c098:	4628      	mov	r0, r5
   1c09a:	f001 fccd 	bl	1da38 <bt_keys_add_type>
   1c09e:	f105 064a 	add.w	r6, r5, #74	; 0x4a
   1c0a2:	f107 031c 	add.w	r3, r7, #28
   1c0a6:	461a      	mov	r2, r3
   1c0a8:	ca03      	ldmia	r2!, {r0, r1}
   1c0aa:	42a2      	cmp	r2, r4
   1c0ac:	6030      	str	r0, [r6, #0]
   1c0ae:	6071      	str	r1, [r6, #4]
   1c0b0:	4613      	mov	r3, r2
   1c0b2:	f106 0608 	add.w	r6, r6, #8
   1c0b6:	d1f6      	bne.n	1c0a6 <bt_smp_distribute_keys+0x126>
   1c0b8:	4623      	mov	r3, r4
   1c0ba:	cb03      	ldmia	r3!, {r0, r1}
   1c0bc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
   1c0be:	6428      	str	r0, [r5, #64]	; 0x40
   1c0c0:	6469      	str	r1, [r5, #68]	; 0x44
   1c0c2:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
   1c0c6:	e786      	b.n	1bfd6 <bt_smp_distribute_keys+0x56>
   1c0c8:	0003d5e2 	.word	0x0003d5e2
   1c0cc:	01000003 	.word	0x01000003
   1c0d0:	00037930 	.word	0x00037930
   1c0d4:	0003d5f7 	.word	0x0003d5f7
   1c0d8:	0003d612 	.word	0x0003d612
   1c0dc:	0003d639 	.word	0x0003d639
   1c0e0:	0001d61d 	.word	0x0001d61d

0001c0e4 <smp_send_pairing_req>:
{
   1c0e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c0e8:	4605      	mov	r5, r0
	smp = smp_chan_get(conn);
   1c0ea:	f016 fcc0 	bl	32a6e <smp_chan_get>
	if (!smp) {
   1c0ee:	4604      	mov	r4, r0
   1c0f0:	2800      	cmp	r0, #0
   1c0f2:	f000 80c2 	beq.w	1c27a <smp_send_pairing_req+0x196>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1c0f6:	1d07      	adds	r7, r0, #4
   1c0f8:	2104      	movs	r1, #4
   1c0fa:	4638      	mov	r0, r7
   1c0fc:	f016 fc7b 	bl	329f6 <atomic_test_bit>
   1c100:	2800      	cmp	r0, #0
   1c102:	f040 80bd 	bne.w	1c280 <smp_send_pairing_req+0x19c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1c106:	2102      	movs	r1, #2
   1c108:	4638      	mov	r0, r7
   1c10a:	f016 fc74 	bl	329f6 <atomic_test_bit>
   1c10e:	2800      	cmp	r0, #0
   1c110:	f040 80ac 	bne.w	1c26c <smp_send_pairing_req+0x188>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1c114:	2103      	movs	r1, #3
   1c116:	4638      	mov	r0, r7
   1c118:	f016 fc6d 	bl	329f6 <atomic_test_bit>
   1c11c:	b118      	cbz	r0, 1c126 <smp_send_pairing_req+0x42>
		return -EBUSY;
   1c11e:	f06f 000f 	mvn.w	r0, #15
}
   1c122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1c126:	2101      	movs	r1, #1
   1c128:	4638      	mov	r0, r7
   1c12a:	f016 fc64 	bl	329f6 <atomic_test_bit>
   1c12e:	2800      	cmp	r0, #0
   1c130:	d1f5      	bne.n	1c11e <smp_send_pairing_req+0x3a>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1c132:	4620      	mov	r0, r4
   1c134:	f7ff fd3e 	bl	1bbb4 <latch_auth_cb>
	switch (smp->chan.chan.conn->required_sec_level) {
   1c138:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1c13c:	4606      	mov	r6, r0
	switch (smp->chan.chan.conn->required_sec_level) {
   1c13e:	7a9b      	ldrb	r3, [r3, #10]
   1c140:	2b03      	cmp	r3, #3
   1c142:	d015      	beq.n	1c170 <smp_send_pairing_req+0x8c>
   1c144:	d805      	bhi.n	1c152 <smp_send_pairing_req+0x6e>
   1c146:	3b01      	subs	r3, #1
   1c148:	2b01      	cmp	r3, #1
   1c14a:	d91b      	bls.n	1c184 <smp_send_pairing_req+0xa0>
		return -EINVAL;
   1c14c:	f06f 0015 	mvn.w	r0, #21
   1c150:	e7e7      	b.n	1c122 <smp_send_pairing_req+0x3e>
	switch (smp->chan.chan.conn->required_sec_level) {
   1c152:	2b04      	cmp	r3, #4
   1c154:	d1fa      	bne.n	1c14c <smp_send_pairing_req+0x68>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1c156:	4620      	mov	r0, r4
   1c158:	f7ff fd42 	bl	1bbe0 <get_io_capa>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1c15c:	2803      	cmp	r0, #3
   1c15e:	d104      	bne.n	1c16a <smp_send_pairing_req+0x86>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1c160:	2e00      	cmp	r6, #0
   1c162:	d0f3      	beq.n	1c14c <smp_send_pairing_req+0x68>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1c164:	68f3      	ldr	r3, [r6, #12]
   1c166:	2b00      	cmp	r3, #0
   1c168:	d0f0      	beq.n	1c14c <smp_send_pairing_req+0x68>
   1c16a:	4b47      	ldr	r3, [pc, #284]	; (1c288 <smp_send_pairing_req+0x1a4>)
   1c16c:	781b      	ldrb	r3, [r3, #0]
   1c16e:	e007      	b.n	1c180 <smp_send_pairing_req+0x9c>
		return get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1c170:	4620      	mov	r0, r4
   1c172:	f7ff fd35 	bl	1bbe0 <get_io_capa>
   1c176:	2803      	cmp	r0, #3
   1c178:	d104      	bne.n	1c184 <smp_send_pairing_req+0xa0>
   1c17a:	2e00      	cmp	r6, #0
   1c17c:	d0e6      	beq.n	1c14c <smp_send_pairing_req+0x68>
		       (smp_auth_cb && smp_auth_cb->oob_data_request);
   1c17e:	68f3      	ldr	r3, [r6, #12]
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1c180:	2b00      	cmp	r3, #0
   1c182:	d0e3      	beq.n	1c14c <smp_send_pairing_req+0x68>
	if (!conn->le.keys) {
   1c184:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   1c188:	b16b      	cbz	r3, 1c1a6 <smp_send_pairing_req+0xc2>
__ssp_bos_icheck3(memset, void *, int)
   1c18a:	2100      	movs	r1, #0
   1c18c:	22ec      	movs	r2, #236	; 0xec
   1c18e:	4620      	mov	r0, r4
   1c190:	f01a f9ea 	bl	36568 <memset>
	if (bt_rand(smp->prnd, 16)) {
   1c194:	2110      	movs	r1, #16
   1c196:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1c19a:	f7fa f8a3 	bl	162e4 <bt_rand>
   1c19e:	b170      	cbz	r0, 1c1be <smp_send_pairing_req+0xda>
		return -ENOBUFS;
   1c1a0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1c1a4:	e7bd      	b.n	1c122 <smp_send_pairing_req+0x3e>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1c1a6:	7a28      	ldrb	r0, [r5, #8]
   1c1a8:	f105 0190 	add.w	r1, r5, #144	; 0x90
   1c1ac:	f001 fb60 	bl	1d870 <bt_keys_get_addr>
   1c1b0:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
		if (!conn->le.keys) {
   1c1b4:	2800      	cmp	r0, #0
   1c1b6:	d1e8      	bne.n	1c18a <smp_send_pairing_req+0xa6>
			return -ENOMEM;
   1c1b8:	f06f 000b 	mvn.w	r0, #11
   1c1bc:	e7b1      	b.n	1c122 <smp_send_pairing_req+0x3e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   1c1be:	2105      	movs	r1, #5
   1c1c0:	4620      	mov	r0, r4
   1c1c2:	f016 fc73 	bl	32aac <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   1c1c6:	f7fa f941 	bl	1644c <bt_pub_key_get>
   1c1ca:	4b30      	ldr	r3, [pc, #192]	; (1c28c <smp_send_pairing_req+0x1a8>)
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
   1c1cc:	2101      	movs	r1, #1
	sc_public_key = bt_pub_key_get();
   1c1ce:	6018      	str	r0, [r3, #0]
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
   1c1d0:	4620      	mov	r0, r4
   1c1d2:	f016 fc7b 	bl	32acc <smp_create_pdu.constprop.0>
	if (!req_buf) {
   1c1d6:	4680      	mov	r8, r0
   1c1d8:	2800      	cmp	r0, #0
   1c1da:	d0e1      	beq.n	1c1a0 <smp_send_pairing_req+0xbc>
   1c1dc:	2106      	movs	r1, #6
   1c1de:	300c      	adds	r0, #12
   1c1e0:	f002 f95a 	bl	1e498 <net_buf_simple_add>
	if (sc_supported) {
   1c1e4:	4b28      	ldr	r3, [pc, #160]	; (1c288 <smp_send_pairing_req+0x1a4>)
   1c1e6:	4605      	mov	r5, r0
   1c1e8:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1c1ea:	4620      	mov	r0, r4
		auth &= BT_SMP_AUTH_MASK_SC;
   1c1ec:	2b00      	cmp	r3, #0
   1c1ee:	bf14      	ite	ne
   1c1f0:	2609      	movne	r6, #9
   1c1f2:	2601      	moveq	r6, #1
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1c1f4:	f7ff fcf4 	bl	1bbe0 <get_io_capa>
	if (bondable) {
   1c1f8:	4b25      	ldr	r3, [pc, #148]	; (1c290 <smp_send_pairing_req+0x1ac>)
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1c1fa:	2803      	cmp	r0, #3
	if (bondable) {
   1c1fc:	781b      	ldrb	r3, [r3, #0]
		auth |= BT_SMP_AUTH_MITM;
   1c1fe:	bf18      	it	ne
   1c200:	f046 0604 	orrne.w	r6, r6, #4
	if (bondable) {
   1c204:	b3a3      	cbz	r3, 1c270 <smp_send_pairing_req+0x18c>
		auth |= BT_SMP_AUTH_BONDING;
   1c206:	f046 0601 	orr.w	r6, r6, #1
	req->io_capability = get_io_capa(smp);
   1c20a:	4620      	mov	r0, r4
	req->auth_req = get_auth(smp, BT_SMP_AUTH_DEFAULT);
   1c20c:	70ae      	strb	r6, [r5, #2]
	req->io_capability = get_io_capa(smp);
   1c20e:	f7ff fce7 	bl	1bbe0 <get_io_capa>
	req->oob_flag = (legacy_oobd_present || sc_oobd_present) ?
   1c212:	4b20      	ldr	r3, [pc, #128]	; (1c294 <smp_send_pairing_req+0x1b0>)
	req->io_capability = get_io_capa(smp);
   1c214:	7028      	strb	r0, [r5, #0]
				BT_SMP_OOB_PRESENT : BT_SMP_OOB_NOT_PRESENT;
   1c216:	781b      	ldrb	r3, [r3, #0]
   1c218:	bb6b      	cbnz	r3, 1c276 <smp_send_pairing_req+0x192>
	req->oob_flag = (legacy_oobd_present || sc_oobd_present) ?
   1c21a:	4b1f      	ldr	r3, [pc, #124]	; (1c298 <smp_send_pairing_req+0x1b4>)
				BT_SMP_OOB_PRESENT : BT_SMP_OOB_NOT_PRESENT;
   1c21c:	781b      	ldrb	r3, [r3, #0]
	req->oob_flag = (legacy_oobd_present || sc_oobd_present) ?
   1c21e:	706b      	strb	r3, [r5, #1]
	req->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   1c220:	2310      	movs	r3, #16
   1c222:	70eb      	strb	r3, [r5, #3]
	if (req->auth_req & BT_SMP_AUTH_BONDING) {
   1c224:	78ab      	ldrb	r3, [r5, #2]
	smp_send(smp, req_buf, NULL, NULL);
   1c226:	4641      	mov	r1, r8
	if (req->auth_req & BT_SMP_AUTH_BONDING) {
   1c228:	f013 0301 	ands.w	r3, r3, #1
   1c22c:	bf14      	ite	ne
   1c22e:	2203      	movne	r2, #3
   1c230:	2200      	moveq	r2, #0
		req->init_key_dist = SEND_KEYS;
   1c232:	712b      	strb	r3, [r5, #4]
		req->resp_key_dist = RECV_KEYS;
   1c234:	716a      	strb	r2, [r5, #5]
	smp->local_dist = req->init_key_dist;
   1c236:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = req->resp_key_dist;
   1c23a:	796b      	ldrb	r3, [r5, #5]
	smp_send(smp, req_buf, NULL, NULL);
   1c23c:	2200      	movs	r2, #0
	smp->remote_dist = req->resp_key_dist;
   1c23e:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   1c242:	2301      	movs	r3, #1
   1c244:	7263      	strb	r3, [r4, #9]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1c246:	682b      	ldr	r3, [r5, #0]
	smp_send(smp, req_buf, NULL, NULL);
   1c248:	4620      	mov	r0, r4
   1c24a:	f8c4 300a 	str.w	r3, [r4, #10]
   1c24e:	88ab      	ldrh	r3, [r5, #4]
   1c250:	81e3      	strh	r3, [r4, #14]
   1c252:	f7ff fceb 	bl	1bc2c <smp_send.constprop.0>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RSP);
   1c256:	4620      	mov	r0, r4
   1c258:	2102      	movs	r1, #2
   1c25a:	f016 fc27 	bl	32aac <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   1c25e:	210b      	movs	r1, #11
   1c260:	f016 fc24 	bl	32aac <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   1c264:	2103      	movs	r1, #3
   1c266:	4638      	mov	r0, r7
   1c268:	f016 fc20 	bl	32aac <atomic_set_bit>
		return 0;
   1c26c:	2000      	movs	r0, #0
   1c26e:	e758      	b.n	1c122 <smp_send_pairing_req+0x3e>
		auth &= ~BT_SMP_AUTH_BONDING;
   1c270:	f006 060c 	and.w	r6, r6, #12
   1c274:	e7c9      	b.n	1c20a <smp_send_pairing_req+0x126>
				BT_SMP_OOB_PRESENT : BT_SMP_OOB_NOT_PRESENT;
   1c276:	2301      	movs	r3, #1
   1c278:	e7d1      	b.n	1c21e <smp_send_pairing_req+0x13a>
		return -ENOTCONN;
   1c27a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1c27e:	e750      	b.n	1c122 <smp_send_pairing_req+0x3e>
		return -EIO;
   1c280:	f06f 0004 	mvn.w	r0, #4
   1c284:	e74d      	b.n	1c122 <smp_send_pairing_req+0x3e>
   1c286:	bf00      	nop
   1c288:	2000f209 	.word	0x2000f209
   1c28c:	2000e788 	.word	0x2000e788
   1c290:	2000ccbc 	.word	0x2000ccbc
   1c294:	2000f20a 	.word	0x2000f20a
   1c298:	2000f20b 	.word	0x2000f20b

0001c29c <smp_security_request>:
{
   1c29c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c2a0:	b089      	sub	sp, #36	; 0x24
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1c2a2:	1d06      	adds	r6, r0, #4
{
   1c2a4:	4680      	mov	r8, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1c2a6:	f8d0 40ec 	ldr.w	r4, [r0, #236]	; 0xec
	struct bt_smp_security_request *req = (void *)buf->data;
   1c2aa:	68cb      	ldr	r3, [r1, #12]
{
   1c2ac:	af02      	add	r7, sp, #8
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1c2ae:	2102      	movs	r1, #2
   1c2b0:	4630      	mov	r0, r6
   1c2b2:	f016 fba0 	bl	329f6 <atomic_test_bit>
   1c2b6:	2800      	cmp	r0, #0
   1c2b8:	f040 8083 	bne.w	1c3c2 <smp_security_request+0x126>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1c2bc:	2103      	movs	r1, #3
   1c2be:	4630      	mov	r0, r6
   1c2c0:	f016 fb99 	bl	329f6 <atomic_test_bit>
   1c2c4:	2800      	cmp	r0, #0
   1c2c6:	d17c      	bne.n	1c3c2 <smp_security_request+0x126>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1c2c8:	2101      	movs	r1, #1
   1c2ca:	4630      	mov	r0, r6
   1c2cc:	f016 fb93 	bl	329f6 <atomic_test_bit>
   1c2d0:	2800      	cmp	r0, #0
   1c2d2:	d176      	bne.n	1c3c2 <smp_security_request+0x126>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
   1c2d4:	781d      	ldrb	r5, [r3, #0]
	if (sc_supported) {
   1c2d6:	4b3c      	ldr	r3, [pc, #240]	; (1c3c8 <smp_security_request+0x12c>)
   1c2d8:	781b      	ldrb	r3, [r3, #0]
   1c2da:	b17b      	cbz	r3, 1c2fc <smp_security_request+0x60>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
   1c2dc:	f005 050f 	and.w	r5, r5, #15
	if (conn->le.keys) {
   1c2e0:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   1c2e4:	b16b      	cbz	r3, 1c302 <smp_security_request+0x66>
		if (!(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   1c2e6:	89db      	ldrh	r3, [r3, #14]
   1c2e8:	f003 0324 	and.w	r3, r3, #36	; 0x24
   1c2ec:	b9d3      	cbnz	r3, 1c324 <smp_security_request+0x88>
	if (smp_send_pairing_req(conn) < 0) {
   1c2ee:	4620      	mov	r0, r4
   1c2f0:	f7ff fef8 	bl	1c0e4 <smp_send_pairing_req>
   1c2f4:	2800      	cmp	r0, #0
   1c2f6:	db5b      	blt.n	1c3b0 <smp_security_request+0x114>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   1c2f8:	210f      	movs	r1, #15
   1c2fa:	e05f      	b.n	1c3bc <smp_security_request+0x120>
		auth = req->auth_req & BT_SMP_AUTH_MASK;
   1c2fc:	f005 0507 	and.w	r5, r5, #7
   1c300:	e7ee      	b.n	1c2e0 <smp_security_request+0x44>
					     &conn->le.dst);
   1c302:	f104 0990 	add.w	r9, r4, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   1c306:	464a      	mov	r2, r9
   1c308:	2020      	movs	r0, #32
   1c30a:	7a21      	ldrb	r1, [r4, #8]
   1c30c:	f001 faf0 	bl	1d8f0 <bt_keys_find>
   1c310:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
		if (!conn->le.keys) {
   1c314:	b930      	cbnz	r0, 1c324 <smp_security_request+0x88>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK, conn->id,
   1c316:	464a      	mov	r2, r9
   1c318:	2004      	movs	r0, #4
   1c31a:	7a21      	ldrb	r1, [r4, #8]
   1c31c:	f001 fae8 	bl	1d8f0 <bt_keys_find>
   1c320:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	if (!conn->le.keys) {
   1c324:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
   1c328:	2900      	cmp	r1, #0
   1c32a:	d0e0      	beq.n	1c2ee <smp_security_request+0x52>
	if ((auth & BT_SMP_AUTH_MITM) &&
   1c32c:	076b      	lsls	r3, r5, #29
   1c32e:	d521      	bpl.n	1c374 <smp_security_request+0xd8>
   1c330:	7b4b      	ldrb	r3, [r1, #13]
   1c332:	07d8      	lsls	r0, r3, #31
   1c334:	d41e      	bmi.n	1c374 <smp_security_request+0xd8>
		if (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT) {
   1c336:	4640      	mov	r0, r8
   1c338:	f7ff fc52 	bl	1bbe0 <get_io_capa>
   1c33c:	2803      	cmp	r0, #3
			LOG_INF("New auth requirements: 0x%x, repairing", auth);
   1c33e:	46e8      	mov	r8, sp
		if (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT) {
   1c340:	d00a      	beq.n	1c358 <smp_security_request+0xbc>
		LOG_INF("New auth requirements: 0x%x, repairing", auth);
   1c342:	b088      	sub	sp, #32
   1c344:	aa02      	add	r2, sp, #8
   1c346:	4b21      	ldr	r3, [pc, #132]	; (1c3cc <smp_security_request+0x130>)
   1c348:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
   1c34c:	e9c2 3505 	strd	r3, r5, [r2, #20]
   1c350:	2303      	movs	r3, #3
   1c352:	f842 3f10 	str.w	r3, [r2, #16]!
   1c356:	e008      	b.n	1c36a <smp_security_request+0xce>
		LOG_WRN("Unsupported auth requirements: 0x%x, repairing", auth);
   1c358:	b088      	sub	sp, #32
   1c35a:	aa02      	add	r2, sp, #8
   1c35c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1c360:	4b1b      	ldr	r3, [pc, #108]	; (1c3d0 <smp_security_request+0x134>)
   1c362:	e9c2 3505 	strd	r3, r5, [r2, #20]
   1c366:	f842 0f10 	str.w	r0, [r2, #16]!
		LOG_INF("New auth requirements: 0x%x, repairing", auth);
   1c36a:	481a      	ldr	r0, [pc, #104]	; (1c3d4 <smp_security_request+0x138>)
   1c36c:	f016 fb7c 	bl	32a68 <z_log_msg_static_create.constprop.0>
   1c370:	46c5      	mov	sp, r8
		goto pair;
   1c372:	e7bc      	b.n	1c2ee <smp_security_request+0x52>
	if ((auth & BT_SMP_AUTH_SC) &&
   1c374:	072a      	lsls	r2, r5, #28
   1c376:	d504      	bpl.n	1c382 <smp_security_request+0xe6>
   1c378:	89cb      	ldrh	r3, [r1, #14]
   1c37a:	069b      	lsls	r3, r3, #26
   1c37c:	d401      	bmi.n	1c382 <smp_security_request+0xe6>
		LOG_INF("New auth requirements: 0x%x, repairing", auth);
   1c37e:	46e8      	mov	r8, sp
   1c380:	e7df      	b.n	1c342 <smp_security_request+0xa6>
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
   1c382:	7b0b      	ldrb	r3, [r1, #12]
   1c384:	f101 0218 	add.w	r2, r1, #24
   1c388:	9300      	str	r3, [sp, #0]
   1c38a:	4620      	mov	r0, r4
   1c38c:	f101 031a 	add.w	r3, r1, #26
   1c390:	3110      	adds	r1, #16
   1c392:	f014 ffe8 	bl	31366 <bt_conn_le_start_encryption>
   1c396:	2800      	cmp	r0, #0
   1c398:	da0f      	bge.n	1c3ba <smp_security_request+0x11e>
		LOG_ERR("Failed to start encryption");
   1c39a:	4b0f      	ldr	r3, [pc, #60]	; (1c3d8 <smp_security_request+0x13c>)
   1c39c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c3a0:	617b      	str	r3, [r7, #20]
   1c3a2:	2302      	movs	r3, #2
   1c3a4:	480b      	ldr	r0, [pc, #44]	; (1c3d4 <smp_security_request+0x138>)
   1c3a6:	f107 0210 	add.w	r2, r7, #16
   1c3aa:	613b      	str	r3, [r7, #16]
   1c3ac:	f016 fb5c 	bl	32a68 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1c3b0:	2008      	movs	r0, #8
}
   1c3b2:	371c      	adds	r7, #28
   1c3b4:	46bd      	mov	sp, r7
   1c3b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1c3ba:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   1c3bc:	4630      	mov	r0, r6
   1c3be:	f016 fb75 	bl	32aac <atomic_set_bit>
		return 0;
   1c3c2:	2000      	movs	r0, #0
   1c3c4:	e7f5      	b.n	1c3b2 <smp_security_request+0x116>
   1c3c6:	bf00      	nop
   1c3c8:	2000f209 	.word	0x2000f209
   1c3cc:	0003d661 	.word	0x0003d661
   1c3d0:	0003d688 	.word	0x0003d688
   1c3d4:	00037930 	.word	0x00037930
   1c3d8:	0003d594 	.word	0x0003d594

0001c3dc <smp_send_pairing_confirm>:
{
   1c3dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c3de:	b083      	sub	sp, #12
	switch (smp->method) {
   1c3e0:	7a04      	ldrb	r4, [r0, #8]
{
   1c3e2:	4605      	mov	r5, r0
	switch (smp->method) {
   1c3e4:	2c02      	cmp	r4, #2
{
   1c3e6:	af02      	add	r7, sp, #8
	switch (smp->method) {
   1c3e8:	d823      	bhi.n	1c432 <smp_send_pairing_confirm+0x56>
   1c3ea:	b144      	cbz	r4, 1c3fe <smp_send_pairing_confirm+0x22>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1c3ec:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   1c3f0:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   1c3f4:	40dc      	lsrs	r4, r3
   1c3f6:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   1c3fa:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1c3fe:	2103      	movs	r1, #3
   1c400:	4628      	mov	r0, r5
   1c402:	f016 fb63 	bl	32acc <smp_create_pdu.constprop.0>
	if (!buf) {
   1c406:	4606      	mov	r6, r0
   1c408:	b320      	cbz	r0, 1c454 <smp_send_pairing_confirm+0x78>
   1c40a:	2110      	movs	r1, #16
   1c40c:	300c      	adds	r0, #12
   1c40e:	f002 f843 	bl	1e498 <net_buf_simple_add>
	if (bt_crypto_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   1c412:	9000      	str	r0, [sp, #0]
   1c414:	4818      	ldr	r0, [pc, #96]	; (1c478 <smp_send_pairing_confirm+0x9c>)
   1c416:	4623      	mov	r3, r4
   1c418:	6800      	ldr	r0, [r0, #0]
   1c41a:	f105 0227 	add.w	r2, r5, #39	; 0x27
   1c41e:	f105 0157 	add.w	r1, r5, #87	; 0x57
   1c422:	f016 fe08 	bl	33036 <bt_crypto_f4>
   1c426:	4604      	mov	r4, r0
   1c428:	b1d0      	cbz	r0, 1c460 <smp_send_pairing_confirm+0x84>
		net_buf_unref(buf);
   1c42a:	4630      	mov	r0, r6
   1c42c:	f001 feae 	bl	1e18c <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   1c430:	e010      	b.n	1c454 <smp_send_pairing_confirm+0x78>
	switch (smp->method) {
   1c432:	2c03      	cmp	r4, #3
   1c434:	d012      	beq.n	1c45c <smp_send_pairing_confirm+0x80>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1c436:	466d      	mov	r5, sp
   1c438:	b088      	sub	sp, #32
   1c43a:	aa02      	add	r2, sp, #8
   1c43c:	4b0f      	ldr	r3, [pc, #60]	; (1c47c <smp_send_pairing_confirm+0xa0>)
   1c43e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
	switch (smp->method) {
   1c442:	e9c2 3405 	strd	r3, r4, [r2, #20]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1c446:	2303      	movs	r3, #3
   1c448:	480d      	ldr	r0, [pc, #52]	; (1c480 <smp_send_pairing_confirm+0xa4>)
   1c44a:	f842 3f10 	str.w	r3, [r2, #16]!
   1c44e:	f016 fb0b 	bl	32a68 <z_log_msg_static_create.constprop.0>
   1c452:	46ad      	mov	sp, r5
		return BT_SMP_ERR_UNSPECIFIED;
   1c454:	2008      	movs	r0, #8
}
   1c456:	3704      	adds	r7, #4
   1c458:	46bd      	mov	sp, r7
   1c45a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (smp->method) {
   1c45c:	2400      	movs	r4, #0
   1c45e:	e7ce      	b.n	1c3fe <smp_send_pairing_confirm+0x22>
	smp_send(smp, buf, NULL, NULL);
   1c460:	4602      	mov	r2, r0
   1c462:	4631      	mov	r1, r6
   1c464:	4628      	mov	r0, r5
   1c466:	f7ff fbe1 	bl	1bc2c <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1c46a:	1d28      	adds	r0, r5, #4
   1c46c:	4621      	mov	r1, r4
   1c46e:	f016 fae9 	bl	32a44 <atomic_clear_bit>
	return 0;
   1c472:	4620      	mov	r0, r4
   1c474:	e7ef      	b.n	1c456 <smp_send_pairing_confirm+0x7a>
   1c476:	bf00      	nop
   1c478:	2000e788 	.word	0x2000e788
   1c47c:	0003d578 	.word	0x0003d578
   1c480:	00037930 	.word	0x00037930

0001c484 <smp_public_key>:
{
   1c484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c488:	b086      	sub	sp, #24
   1c48a:	4604      	mov	r4, r0
   1c48c:	af00      	add	r7, sp, #0
   1c48e:	460e      	mov	r6, r1
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1c490:	f7ff fb90 	bl	1bbb4 <latch_auth_cb>
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   1c494:	f104 0857 	add.w	r8, r4, #87	; 0x57
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1c498:	4605      	mov	r5, r0
   1c49a:	4642      	mov	r2, r8
   1c49c:	68f3      	ldr	r3, [r6, #12]
   1c49e:	f103 0120 	add.w	r1, r3, #32
   1c4a2:	f853 0b04 	ldr.w	r0, [r3], #4
   1c4a6:	428b      	cmp	r3, r1
   1c4a8:	f842 0b04 	str.w	r0, [r2], #4
   1c4ac:	d1f9      	bne.n	1c4a2 <smp_public_key+0x1e>
   1c4ae:	f104 0277 	add.w	r2, r4, #119	; 0x77
   1c4b2:	f103 0120 	add.w	r1, r3, #32
   1c4b6:	f853 0b04 	ldr.w	r0, [r3], #4
   1c4ba:	428b      	cmp	r3, r1
   1c4bc:	f842 0b04 	str.w	r0, [r2], #4
   1c4c0:	d1f9      	bne.n	1c4b6 <smp_public_key+0x32>
	if (bt_pub_key_is_debug(smp->pkey)) {
   1c4c2:	4640      	mov	r0, r8
   1c4c4:	f7f9 ff2c 	bl	16320 <bt_pub_key_is_debug>
   1c4c8:	bb00      	cbnz	r0, 1c50c <smp_public_key+0x88>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1c4ca:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1c4ce:	78db      	ldrb	r3, [r3, #3]
   1c4d0:	2b00      	cmp	r3, #0
   1c4d2:	d147      	bne.n	1c564 <smp_public_key+0xe0>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1c4d4:	1d26      	adds	r6, r4, #4
   1c4d6:	210e      	movs	r1, #14
   1c4d8:	4630      	mov	r0, r6
   1c4da:	f016 fa8c 	bl	329f6 <atomic_test_bit>
   1c4de:	2800      	cmp	r0, #0
   1c4e0:	d142      	bne.n	1c568 <smp_public_key+0xe4>
		    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   1c4e2:	4b6a      	ldr	r3, [pc, #424]	; (1c68c <smp_public_key+0x208>)
   1c4e4:	2220      	movs	r2, #32
   1c4e6:	4640      	mov	r0, r8
   1c4e8:	6819      	ldr	r1, [r3, #0]
   1c4ea:	f01a f80d 	bl	36508 <memcmp>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1c4ee:	2800      	cmp	r0, #0
   1c4f0:	d13a      	bne.n	1c568 <smp_public_key+0xe4>
			LOG_WRN("Remote public key rejected");
   1c4f2:	4b67      	ldr	r3, [pc, #412]	; (1c690 <smp_public_key+0x20c>)
   1c4f4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1c4f8:	617b      	str	r3, [r7, #20]
   1c4fa:	2302      	movs	r3, #2
   1c4fc:	4865      	ldr	r0, [pc, #404]	; (1c694 <smp_public_key+0x210>)
   1c4fe:	613b      	str	r3, [r7, #16]
   1c500:	f107 0210 	add.w	r2, r7, #16
   1c504:	f016 fab0 	bl	32a68 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1c508:	2008      	movs	r0, #8
   1c50a:	e027      	b.n	1c55c <smp_public_key+0xd8>
		LOG_INF("Remote is using Debug Public key");
   1c50c:	4b62      	ldr	r3, [pc, #392]	; (1c698 <smp_public_key+0x214>)
   1c50e:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   1c512:	617b      	str	r3, [r7, #20]
   1c514:	2302      	movs	r3, #2
   1c516:	485f      	ldr	r0, [pc, #380]	; (1c694 <smp_public_key+0x210>)
   1c518:	613b      	str	r3, [r7, #16]
   1c51a:	f107 0210 	add.w	r2, r7, #16
   1c51e:	f016 faa3 	bl	32a68 <z_log_msg_static_create.constprop.0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   1c522:	210e      	movs	r1, #14
   1c524:	1d20      	adds	r0, r4, #4
   1c526:	f016 fac1 	bl	32aac <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   1c52a:	f8d4 60ec 	ldr.w	r6, [r4, #236]	; 0xec
	if (!conn->le.keys) {
   1c52e:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
   1c532:	b933      	cbnz	r3, 1c542 <smp_public_key+0xbe>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1c534:	7a30      	ldrb	r0, [r6, #8]
   1c536:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1c53a:	f001 f999 	bl	1d870 <bt_keys_get_addr>
   1c53e:	f8c6 00bc 	str.w	r0, [r6, #188]	; 0xbc
	if (!conn->le.keys ||
   1c542:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
   1c546:	2b00      	cmp	r3, #0
   1c548:	d0bf      	beq.n	1c4ca <smp_public_key+0x46>
   1c54a:	89da      	ldrh	r2, [r3, #14]
   1c54c:	f002 0224 	and.w	r2, r2, #36	; 0x24
   1c550:	2a00      	cmp	r2, #0
   1c552:	d0ba      	beq.n	1c4ca <smp_public_key+0x46>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   1c554:	7b5b      	ldrb	r3, [r3, #13]
   1c556:	0799      	lsls	r1, r3, #30
   1c558:	d4b7      	bmi.n	1c4ca <smp_public_key+0x46>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1c55a:	2003      	movs	r0, #3
}
   1c55c:	3718      	adds	r7, #24
   1c55e:	46bd      	mov	sp, r7
   1c560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return 0;
   1c564:	2000      	movs	r0, #0
   1c566:	e7f9      	b.n	1c55c <smp_public_key+0xd8>
		switch (smp->method) {
   1c568:	7a23      	ldrb	r3, [r4, #8]
   1c56a:	2b05      	cmp	r3, #5
   1c56c:	d87c      	bhi.n	1c668 <smp_public_key+0x1e4>
   1c56e:	e8df f003 	tbb	[pc, r3]
   1c572:	4403      	.short	0x4403
   1c574:	4e7b0308 	.word	0x4e7b0308
			atomic_set_bit(smp->allowed_cmds,
   1c578:	2103      	movs	r1, #3
			atomic_set_bit(smp->allowed_cmds,
   1c57a:	4620      	mov	r0, r4
   1c57c:	f016 fa96 	bl	32aac <atomic_set_bit>
			break;
   1c580:	e02e      	b.n	1c5e0 <smp_public_key+0x15c>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1c582:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   1c584:	f8d4 80ec 	ldr.w	r8, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1c588:	f7ff fb14 	bl	1bbb4 <latch_auth_cb>
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   1c58c:	2104      	movs	r1, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1c58e:	4605      	mov	r5, r0
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   1c590:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   1c594:	f7f9 fea6 	bl	162e4 <bt_rand>
   1c598:	2800      	cmp	r0, #0
   1c59a:	d1b5      	bne.n	1c508 <smp_public_key+0x84>
		smp->passkey %= 1000000;
   1c59c:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   1c5a0:	4a3e      	ldr	r2, [pc, #248]	; (1c69c <smp_public_key+0x218>)
	smp->passkey_round = 0U;
   1c5a2:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
		smp->passkey %= 1000000;
   1c5a6:	fbb3 f1f2 	udiv	r1, r3, r2
   1c5aa:	fb02 3311 	mls	r3, r2, r1, r3
   1c5ae:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	if (smp_auth_cb && smp_auth_cb->passkey_display) {
   1c5b2:	b155      	cbz	r5, 1c5ca <smp_public_key+0x146>
   1c5b4:	682b      	ldr	r3, [r5, #0]
   1c5b6:	b143      	cbz	r3, 1c5ca <smp_public_key+0x146>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1c5b8:	210b      	movs	r1, #11
   1c5ba:	4630      	mov	r0, r6
   1c5bc:	f016 fa76 	bl	32aac <atomic_set_bit>
		smp_auth_cb->passkey_display(conn, smp->passkey);
   1c5c0:	4640      	mov	r0, r8
   1c5c2:	682b      	ldr	r3, [r5, #0]
   1c5c4:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   1c5c8:	4798      	blx	r3
			atomic_set_bit(smp->allowed_cmds,
   1c5ca:	2103      	movs	r1, #3
   1c5cc:	4620      	mov	r0, r4
   1c5ce:	f016 fa6d 	bl	32aac <atomic_set_bit>
			atomic_set_bit(smp->allowed_cmds,
   1c5d2:	210e      	movs	r1, #14
   1c5d4:	f016 fa6a 	bl	32aac <atomic_set_bit>
			err = smp_send_pairing_confirm(smp);
   1c5d8:	f7ff ff00 	bl	1c3dc <smp_send_pairing_confirm>
			if (err) {
   1c5dc:	2800      	cmp	r0, #0
   1c5de:	d1bd      	bne.n	1c55c <smp_public_key+0xd8>
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   1c5e0:	4630      	mov	r0, r6
   1c5e2:	2107      	movs	r1, #7
   1c5e4:	f016 fa62 	bl	32aac <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   1c5e8:	2008      	movs	r0, #8
   1c5ea:	f7ff fad5 	bl	1bb98 <smp_find>
   1c5ee:	2800      	cmp	r0, #0
   1c5f0:	d1b8      	bne.n	1c564 <smp_public_key+0xe0>
		return smp_dhkey_generate(smp);
   1c5f2:	4620      	mov	r0, r4
   1c5f4:	f7ff fc16 	bl	1be24 <smp_dhkey_generate>
   1c5f8:	e7b0      	b.n	1c55c <smp_public_key+0xd8>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1c5fa:	210a      	movs	r1, #10
   1c5fc:	4630      	mov	r0, r6
   1c5fe:	f016 fa55 	bl	32aac <atomic_set_bit>
			smp_auth_cb->passkey_entry(smp->chan.chan.conn);
   1c602:	686b      	ldr	r3, [r5, #4]
   1c604:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1c608:	4798      	blx	r3
			atomic_set_bit(smp->allowed_cmds,
   1c60a:	210e      	movs	r1, #14
   1c60c:	e7b5      	b.n	1c57a <smp_public_key+0xf6>
			if (bt_rand(smp->prnd, 16)) {
   1c60e:	2110      	movs	r1, #16
   1c610:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1c614:	f7f9 fe66 	bl	162e4 <bt_rand>
   1c618:	2800      	cmp	r0, #0
   1c61a:	f47f af75 	bne.w	1c508 <smp_public_key+0x84>
			if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   1c61e:	b39d      	cbz	r5, 1c688 <smp_public_key+0x204>
   1c620:	68eb      	ldr	r3, [r5, #12]
   1c622:	b38b      	cbz	r3, 1c688 <smp_public_key+0x204>
				struct bt_conn_oob_info info = {
   1c624:	4b1e      	ldr	r3, [pc, #120]	; (1c6a0 <smp_public_key+0x21c>)
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1c626:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
				struct bt_conn_oob_info info = {
   1c62a:	881b      	ldrh	r3, [r3, #0]
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1c62c:	7ae2      	ldrb	r2, [r4, #11]
				struct bt_conn_oob_info info = {
   1c62e:	803b      	strh	r3, [r7, #0]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1c630:	78c9      	ldrb	r1, [r1, #3]
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1c632:	7ca3      	ldrb	r3, [r4, #18]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1c634:	b9b1      	cbnz	r1, 1c664 <smp_public_key+0x1e0>
		oob_config = req_oob_present ? BT_CONN_OOB_REMOTE_ONLY :
   1c636:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1c638:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_REMOTE_ONLY :
   1c63c:	d410      	bmi.n	1c660 <smp_public_key+0x1dc>
	int oob_config = BT_CONN_OOB_NO_DATA;
   1c63e:	2b00      	cmp	r3, #0
   1c640:	bf08      	it	eq
   1c642:	2003      	moveq	r0, #3
				smp->oobd_local = NULL;
   1c644:	2300      	movs	r3, #0
	info->lesc.oob_config = oob_config;
   1c646:	7078      	strb	r0, [r7, #1]
				smp->oobd_remote = NULL;
   1c648:	e9c4 3338 	strd	r3, r3, [r4, #224]	; 0xe0
				atomic_set_bit(smp->flags,
   1c64c:	4630      	mov	r0, r6
   1c64e:	210c      	movs	r1, #12
   1c650:	f016 fa2c 	bl	32aac <atomic_set_bit>
				smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   1c654:	4639      	mov	r1, r7
   1c656:	68eb      	ldr	r3, [r5, #12]
   1c658:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1c65c:	4798      	blx	r3
			break;
   1c65e:	e7bf      	b.n	1c5e0 <smp_public_key+0x15c>
		if (rsp_oob_present) {
   1c660:	1c58      	adds	r0, r3, #1
   1c662:	e7ef      	b.n	1c644 <smp_public_key+0x1c0>
	int oob_config = BT_CONN_OOB_NO_DATA;
   1c664:	2003      	movs	r0, #3
   1c666:	e7ed      	b.n	1c644 <smp_public_key+0x1c0>
			LOG_ERR("Unknown pairing method (%u)", smp->method);
   1c668:	466c      	mov	r4, sp
   1c66a:	b088      	sub	sp, #32
   1c66c:	466a      	mov	r2, sp
   1c66e:	490d      	ldr	r1, [pc, #52]	; (1c6a4 <smp_public_key+0x220>)
   1c670:	4808      	ldr	r0, [pc, #32]	; (1c694 <smp_public_key+0x210>)
		switch (smp->method) {
   1c672:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_ERR("Unknown pairing method (%u)", smp->method);
   1c676:	2303      	movs	r3, #3
   1c678:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c67c:	f842 3f10 	str.w	r3, [r2, #16]!
   1c680:	f016 f9f2 	bl	32a68 <z_log_msg_static_create.constprop.0>
   1c684:	46a5      	mov	sp, r4
			return BT_SMP_ERR_UNSPECIFIED;
   1c686:	e73f      	b.n	1c508 <smp_public_key+0x84>
				return BT_SMP_ERR_OOB_NOT_AVAIL;
   1c688:	2002      	movs	r0, #2
   1c68a:	e767      	b.n	1c55c <smp_public_key+0xd8>
   1c68c:	2000e788 	.word	0x2000e788
   1c690:	0003d6d8 	.word	0x0003d6d8
   1c694:	00037930 	.word	0x00037930
   1c698:	0003d6b7 	.word	0x0003d6b7
   1c69c:	000f4240 	.word	0x000f4240
   1c6a0:	00037c00 	.word	0x00037c00
   1c6a4:	0003d578 	.word	0x0003d578

0001c6a8 <sc_send_public_key>:
{
   1c6a8:	b570      	push	{r4, r5, r6, lr}
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   1c6aa:	210c      	movs	r1, #12
{
   1c6ac:	4605      	mov	r5, r0
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   1c6ae:	f016 fa0d 	bl	32acc <smp_create_pdu.constprop.0>
	if (!req_buf) {
   1c6b2:	4604      	mov	r4, r0
   1c6b4:	b1f8      	cbz	r0, 1c6f6 <sc_send_public_key+0x4e>
   1c6b6:	2140      	movs	r1, #64	; 0x40
   1c6b8:	300c      	adds	r0, #12
   1c6ba:	f001 feed 	bl	1e498 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   1c6be:	4b0f      	ldr	r3, [pc, #60]	; (1c6fc <sc_send_public_key+0x54>)
   1c6c0:	4602      	mov	r2, r0
   1c6c2:	681b      	ldr	r3, [r3, #0]
   1c6c4:	4601      	mov	r1, r0
   1c6c6:	f103 0020 	add.w	r0, r3, #32
   1c6ca:	f853 6b04 	ldr.w	r6, [r3], #4
   1c6ce:	4283      	cmp	r3, r0
   1c6d0:	f841 6b04 	str.w	r6, [r1], #4
   1c6d4:	d1f9      	bne.n	1c6ca <sc_send_public_key+0x22>
   1c6d6:	3220      	adds	r2, #32
   1c6d8:	f103 0120 	add.w	r1, r3, #32
   1c6dc:	f853 0b04 	ldr.w	r0, [r3], #4
   1c6e0:	428b      	cmp	r3, r1
   1c6e2:	f842 0b04 	str.w	r0, [r2], #4
   1c6e6:	d1f9      	bne.n	1c6dc <sc_send_public_key+0x34>
	smp_send(smp, req_buf, NULL, NULL);
   1c6e8:	4628      	mov	r0, r5
   1c6ea:	2200      	movs	r2, #0
   1c6ec:	4621      	mov	r1, r4
   1c6ee:	f7ff fa9d 	bl	1bc2c <smp_send.constprop.0>
	return 0;
   1c6f2:	2000      	movs	r0, #0
}
   1c6f4:	bd70      	pop	{r4, r5, r6, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1c6f6:	2008      	movs	r0, #8
   1c6f8:	e7fc      	b.n	1c6f4 <sc_send_public_key+0x4c>
   1c6fa:	bf00      	nop
   1c6fc:	2000e788 	.word	0x2000e788

0001c700 <compute_and_send_central_dhcheck>:
{
   1c700:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c704:	4604      	mov	r4, r0
   1c706:	b093      	sub	sp, #76	; 0x4c
   1c708:	af04      	add	r7, sp, #16
	(void)memset(r, 0, sizeof(r));
   1c70a:	f107 0510 	add.w	r5, r7, #16
   1c70e:	2210      	movs	r2, #16
   1c710:	2100      	movs	r1, #0
   1c712:	4628      	mov	r0, r5
   1c714:	f019 ff28 	bl	36568 <memset>
	switch (smp->method) {
   1c718:	7a23      	ldrb	r3, [r4, #8]
   1c71a:	2b05      	cmp	r3, #5
   1c71c:	d83a      	bhi.n	1c794 <compute_and_send_central_dhcheck+0x94>
   1c71e:	e8df f003 	tbb	[pc, r3]
   1c722:	0306      	.short	0x0306
   1c724:	29390603 	.word	0x29390603
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   1c728:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   1c72c:	613b      	str	r3, [r7, #16]
	if (bt_crypto_f5(smp->dhkey, smp->prnd, smp->rrnd, &smp->chan.chan.conn->le.init_addr,
   1c72e:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
			 &smp->chan.chan.conn->le.resp_addr, smp->mackey, smp->tk)) {
   1c732:	f104 0247 	add.w	r2, r4, #71	; 0x47
   1c736:	f104 06c7 	add.w	r6, r4, #199	; 0xc7
	if (bt_crypto_f5(smp->dhkey, smp->prnd, smp->rrnd, &smp->chan.chan.conn->le.init_addr,
   1c73a:	e9cd 6201 	strd	r6, r2, [sp, #4]
   1c73e:	f104 0827 	add.w	r8, r4, #39	; 0x27
			 &smp->chan.chan.conn->le.resp_addr, smp->mackey, smp->tk)) {
   1c742:	f103 029e 	add.w	r2, r3, #158	; 0x9e
	if (bt_crypto_f5(smp->dhkey, smp->prnd, smp->rrnd, &smp->chan.chan.conn->le.init_addr,
   1c746:	f104 0937 	add.w	r9, r4, #55	; 0x37
   1c74a:	9200      	str	r2, [sp, #0]
   1c74c:	4641      	mov	r1, r8
   1c74e:	464a      	mov	r2, r9
   1c750:	3397      	adds	r3, #151	; 0x97
   1c752:	f104 0097 	add.w	r0, r4, #151	; 0x97
   1c756:	f001 fb35 	bl	1ddc4 <bt_crypto_f5>
   1c75a:	b378      	cbz	r0, 1c7bc <compute_and_send_central_dhcheck+0xbc>
		LOG_ERR("Calculate LTK failed");
   1c75c:	4b32      	ldr	r3, [pc, #200]	; (1c828 <compute_and_send_central_dhcheck+0x128>)
   1c75e:	637b      	str	r3, [r7, #52]	; 0x34
   1c760:	2302      	movs	r3, #2
   1c762:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c766:	4831      	ldr	r0, [pc, #196]	; (1c82c <compute_and_send_central_dhcheck+0x12c>)
   1c768:	633b      	str	r3, [r7, #48]	; 0x30
   1c76a:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1c76e:	f016 f97b 	bl	32a68 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1c772:	e01e      	b.n	1c7b2 <compute_and_send_central_dhcheck+0xb2>
		if (smp->oobd_remote) {
   1c774:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
   1c778:	2b00      	cmp	r3, #0
   1c77a:	d0d8      	beq.n	1c72e <compute_and_send_central_dhcheck+0x2e>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1c77c:	462e      	mov	r6, r5
   1c77e:	f103 0c10 	add.w	ip, r3, #16
   1c782:	4632      	mov	r2, r6
   1c784:	6818      	ldr	r0, [r3, #0]
   1c786:	6859      	ldr	r1, [r3, #4]
   1c788:	3308      	adds	r3, #8
   1c78a:	c203      	stmia	r2!, {r0, r1}
   1c78c:	4563      	cmp	r3, ip
   1c78e:	4616      	mov	r6, r2
   1c790:	d1f7      	bne.n	1c782 <compute_and_send_central_dhcheck+0x82>
   1c792:	e7cc      	b.n	1c72e <compute_and_send_central_dhcheck+0x2e>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1c794:	466c      	mov	r4, sp
   1c796:	b088      	sub	sp, #32
   1c798:	aa04      	add	r2, sp, #16
   1c79a:	4925      	ldr	r1, [pc, #148]	; (1c830 <compute_and_send_central_dhcheck+0x130>)
   1c79c:	4823      	ldr	r0, [pc, #140]	; (1c82c <compute_and_send_central_dhcheck+0x12c>)
	switch (smp->method) {
   1c79e:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1c7a2:	2303      	movs	r3, #3
   1c7a4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c7a8:	f842 3f10 	str.w	r3, [r2, #16]!
   1c7ac:	f016 f95c 	bl	32a68 <z_log_msg_static_create.constprop.0>
   1c7b0:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   1c7b2:	2008      	movs	r0, #8
}
   1c7b4:	373c      	adds	r7, #60	; 0x3c
   1c7b6:	46bd      	mov	sp, r7
   1c7b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			 &smp->chan.chan.conn->le.init_addr, &smp->chan.chan.conn->le.resp_addr,
   1c7bc:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (bt_crypto_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
   1c7c0:	4641      	mov	r1, r8
			 &smp->chan.chan.conn->le.init_addr, &smp->chan.chan.conn->le.resp_addr,
   1c7c2:	f103 029e 	add.w	r2, r3, #158	; 0x9e
   1c7c6:	3397      	adds	r3, #151	; 0x97
	if (bt_crypto_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
   1c7c8:	9301      	str	r3, [sp, #4]
   1c7ca:	f104 030a 	add.w	r3, r4, #10
   1c7ce:	9202      	str	r2, [sp, #8]
   1c7d0:	9300      	str	r3, [sp, #0]
   1c7d2:	464a      	mov	r2, r9
   1c7d4:	462b      	mov	r3, r5
   1c7d6:	4630      	mov	r0, r6
   1c7d8:	9703      	str	r7, [sp, #12]
   1c7da:	f016 fc51 	bl	33080 <bt_crypto_f6>
   1c7de:	b108      	cbz	r0, 1c7e4 <compute_and_send_central_dhcheck+0xe4>
		LOG_ERR("Calculate local DHKey check failed");
   1c7e0:	4b14      	ldr	r3, [pc, #80]	; (1c834 <compute_and_send_central_dhcheck+0x134>)
   1c7e2:	e7bc      	b.n	1c75e <compute_and_send_central_dhcheck+0x5e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1c7e4:	210d      	movs	r1, #13
   1c7e6:	4620      	mov	r0, r4
   1c7e8:	f016 f960 	bl	32aac <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   1c7ec:	210d      	movs	r1, #13
   1c7ee:	f016 f96d 	bl	32acc <smp_create_pdu.constprop.0>
	if (!buf) {
   1c7f2:	4606      	mov	r6, r0
   1c7f4:	2800      	cmp	r0, #0
   1c7f6:	d0dc      	beq.n	1c7b2 <compute_and_send_central_dhcheck+0xb2>
   1c7f8:	2110      	movs	r1, #16
   1c7fa:	300c      	adds	r0, #12
   1c7fc:	f001 fe4c 	bl	1e498 <net_buf_simple_add>
   1c800:	463a      	mov	r2, r7
   1c802:	4603      	mov	r3, r0
   1c804:	4694      	mov	ip, r2
   1c806:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
   1c80a:	45ac      	cmp	ip, r5
   1c80c:	6018      	str	r0, [r3, #0]
   1c80e:	6059      	str	r1, [r3, #4]
   1c810:	4662      	mov	r2, ip
   1c812:	f103 0308 	add.w	r3, r3, #8
   1c816:	d1f5      	bne.n	1c804 <compute_and_send_central_dhcheck+0x104>
	smp_send(smp, buf, NULL, NULL);
   1c818:	4620      	mov	r0, r4
   1c81a:	2200      	movs	r2, #0
   1c81c:	4631      	mov	r1, r6
   1c81e:	f7ff fa05 	bl	1bc2c <smp_send.constprop.0>
	return 0;
   1c822:	2000      	movs	r0, #0
   1c824:	e7c6      	b.n	1c7b4 <compute_and_send_central_dhcheck+0xb4>
   1c826:	bf00      	nop
   1c828:	0003d6f3 	.word	0x0003d6f3
   1c82c:	00037930 	.word	0x00037930
   1c830:	0003d578 	.word	0x0003d578
   1c834:	0003d708 	.word	0x0003d708

0001c838 <bt_smp_connected>:
{
   1c838:	b538      	push	{r3, r4, r5, lr}
   1c83a:	4604      	mov	r4, r0
	k_work_init_delayable(&smp->work, smp_timeout);
   1c83c:	4908      	ldr	r1, [pc, #32]	; (1c860 <bt_smp_connected+0x28>)
   1c83e:	f1a0 05ec 	sub.w	r5, r0, #236	; 0xec
   1c842:	3034      	adds	r0, #52	; 0x34
   1c844:	f00d fb26 	bl	29e94 <k_work_init_delayable>
	smp_reset(smp);
   1c848:	4628      	mov	r0, r5
   1c84a:	f016 f99c 	bl	32b86 <smp_reset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1c84e:	4b05      	ldr	r3, [pc, #20]	; (1c864 <bt_smp_connected+0x2c>)
   1c850:	3464      	adds	r4, #100	; 0x64
   1c852:	e8d4 2fef 	ldaex	r2, [r4]
   1c856:	e8c4 3fe1 	stlex	r1, r3, [r4]
   1c85a:	2900      	cmp	r1, #0
   1c85c:	d1f9      	bne.n	1c852 <bt_smp_connected+0x1a>
}
   1c85e:	bd38      	pop	{r3, r4, r5, pc}
   1c860:	0001d5e1 	.word	0x0001d5e1
   1c864:	2000db58 	.word	0x2000db58

0001c868 <smp_pairing_rsp>:
{
   1c868:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c86c:	b087      	sub	sp, #28
   1c86e:	460d      	mov	r5, r1
   1c870:	af00      	add	r7, sp, #0
   1c872:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1c874:	f8d0 80ec 	ldr.w	r8, [r0, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1c878:	f7ff f99c 	bl	1bbb4 <latch_auth_cb>
	struct bt_smp_pairing *rsp = (void *)buf->data;
   1c87c:	f8d5 900c 	ldr.w	r9, [r5, #12]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1c880:	4606      	mov	r6, r0
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1c882:	f899 3003 	ldrb.w	r3, [r9, #3]
   1c886:	3b07      	subs	r3, #7
   1c888:	2b09      	cmp	r3, #9
   1c88a:	d904      	bls.n	1c896 <smp_pairing_rsp+0x2e>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   1c88c:	2006      	movs	r0, #6
}
   1c88e:	371c      	adds	r7, #28
   1c890:	46bd      	mov	sp, r7
   1c892:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp->local_dist &= rsp->init_key_dist;
   1c896:	f899 2004 	ldrb.w	r2, [r9, #4]
   1c89a:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   1c89e:	1d25      	adds	r5, r4, #4
	smp->local_dist &= rsp->init_key_dist;
   1c8a0:	4013      	ands	r3, r2
   1c8a2:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist &= rsp->resp_key_dist;
   1c8a6:	f899 2005 	ldrb.w	r2, [r9, #5]
   1c8aa:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1c8ae:	4013      	ands	r3, r2
   1c8b0:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   1c8b4:	2302      	movs	r3, #2
   1c8b6:	7423      	strb	r3, [r4, #16]
   1c8b8:	f8d9 3000 	ldr.w	r3, [r9]
   1c8bc:	f8c4 3011 	str.w	r3, [r4, #17]
   1c8c0:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   1c8c4:	f8a4 3015 	strh.w	r3, [r4, #21]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   1c8c8:	f899 3002 	ldrb.w	r3, [r9, #2]
   1c8cc:	071b      	lsls	r3, r3, #28
   1c8ce:	d506      	bpl.n	1c8de <smp_pairing_rsp+0x76>
   1c8d0:	7b23      	ldrb	r3, [r4, #12]
   1c8d2:	0718      	lsls	r0, r3, #28
   1c8d4:	d503      	bpl.n	1c8de <smp_pairing_rsp+0x76>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   1c8d6:	2105      	movs	r1, #5
   1c8d8:	4628      	mov	r0, r5
   1c8da:	f016 f8e7 	bl	32aac <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   1c8de:	f899 3002 	ldrb.w	r3, [r9, #2]
   1c8e2:	0699      	lsls	r1, r3, #26
   1c8e4:	d506      	bpl.n	1c8f4 <smp_pairing_rsp+0x8c>
   1c8e6:	7b23      	ldrb	r3, [r4, #12]
   1c8e8:	069a      	lsls	r2, r3, #26
   1c8ea:	d503      	bpl.n	1c8f4 <smp_pairing_rsp+0x8c>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   1c8ec:	2114      	movs	r1, #20
   1c8ee:	4628      	mov	r0, r5
   1c8f0:	f016 f8dc 	bl	32aac <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   1c8f4:	f899 3002 	ldrb.w	r3, [r9, #2]
   1c8f8:	07db      	lsls	r3, r3, #31
   1c8fa:	d536      	bpl.n	1c96a <smp_pairing_rsp+0x102>
   1c8fc:	7b23      	ldrb	r3, [r4, #12]
   1c8fe:	07d8      	lsls	r0, r3, #31
   1c900:	d533      	bpl.n	1c96a <smp_pairing_rsp+0x102>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   1c902:	210d      	movs	r1, #13
   1c904:	4628      	mov	r0, r5
   1c906:	f016 f8d1 	bl	32aac <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1c90a:	2105      	movs	r1, #5
   1c90c:	4628      	mov	r0, r5
	smp->method = get_pair_method(smp, rsp->io_capability);
   1c90e:	f899 9000 	ldrb.w	r9, [r9]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1c912:	f016 f870 	bl	329f6 <atomic_test_bit>
   1c916:	bb60      	cbnz	r0, 1c972 <smp_pairing_rsp+0x10a>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1c918:	f1b9 0f04 	cmp.w	r9, #4
   1c91c:	d849      	bhi.n	1c9b2 <smp_pairing_rsp+0x14a>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1c91e:	7ae3      	ldrb	r3, [r4, #11]
   1c920:	7ca2      	ldrb	r2, [r4, #18]
   1c922:	4013      	ands	r3, r2
   1c924:	07d9      	lsls	r1, r3, #31
   1c926:	d442      	bmi.n	1c9ae <smp_pairing_rsp+0x146>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1c928:	7b21      	ldrb	r1, [r4, #12]
   1c92a:	7ce3      	ldrb	r3, [r4, #19]
   1c92c:	4319      	orrs	r1, r3
   1c92e:	f011 0104 	ands.w	r1, r1, #4
   1c932:	d011      	beq.n	1c958 <smp_pairing_rsp+0xf0>
	method = gen_method_legacy[remote_io][get_io_capa(smp)];
   1c934:	4620      	mov	r0, r4
   1c936:	f7ff f953 	bl	1bbe0 <get_io_capa>
   1c93a:	4b9a      	ldr	r3, [pc, #616]	; (1cba4 <smp_pairing_rsp+0x33c>)
   1c93c:	eb09 0989 	add.w	r9, r9, r9, lsl #2
   1c940:	4499      	add	r9, r3
   1c942:	f819 1000 	ldrb.w	r1, [r9, r0]
	if (method == PASSKEY_ROLE) {
   1c946:	2904      	cmp	r1, #4
   1c948:	d106      	bne.n	1c958 <smp_pairing_rsp+0xf0>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1c94a:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1c94e:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_DISPLAY;
   1c950:	2b00      	cmp	r3, #0
   1c952:	bf14      	ite	ne
   1c954:	2101      	movne	r1, #1
   1c956:	2102      	moveq	r1, #2
	smp->method = get_pair_method(smp, rsp->io_capability);
   1c958:	7221      	strb	r1, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   1c95a:	4620      	mov	r0, r4
   1c95c:	f8d8 10bc 	ldr.w	r1, [r8, #188]	; 0xbc
   1c960:	f016 f84f 	bl	32a02 <update_keys_check>
   1c964:	bb38      	cbnz	r0, 1c9b6 <smp_pairing_rsp+0x14e>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1c966:	2003      	movs	r0, #3
   1c968:	e791      	b.n	1c88e <smp_pairing_rsp+0x26>
		smp->local_dist = 0;
   1c96a:	2300      	movs	r3, #0
   1c96c:	f8a4 30e8 	strh.w	r3, [r4, #232]	; 0xe8
   1c970:	e7cb      	b.n	1c90a <smp_pairing_rsp+0xa2>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   1c972:	7b23      	ldrb	r3, [r4, #12]
   1c974:	7ce0      	ldrb	r0, [r4, #19]
   1c976:	ea03 0200 	and.w	r2, r3, r0
   1c97a:	0712      	lsls	r2, r2, #28
   1c97c:	d506      	bpl.n	1c98c <smp_pairing_rsp+0x124>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1c97e:	7ae2      	ldrb	r2, [r4, #11]
   1c980:	f894 c012 	ldrb.w	ip, [r4, #18]
   1c984:	ea42 020c 	orr.w	r2, r2, ip
   1c988:	07d2      	lsls	r2, r2, #31
   1c98a:	d4e5      	bmi.n	1c958 <smp_pairing_rsp+0xf0>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1c98c:	f1b9 0f04 	cmp.w	r9, #4
   1c990:	d80f      	bhi.n	1c9b2 <smp_pairing_rsp+0x14a>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1c992:	ea43 0100 	orr.w	r1, r3, r0
   1c996:	f011 0104 	ands.w	r1, r1, #4
   1c99a:	d0dd      	beq.n	1c958 <smp_pairing_rsp+0xf0>
	return gen_method_sc[remote_io][get_io_capa(smp)];
   1c99c:	4620      	mov	r0, r4
   1c99e:	f7ff f91f 	bl	1bbe0 <get_io_capa>
   1c9a2:	4b81      	ldr	r3, [pc, #516]	; (1cba8 <smp_pairing_rsp+0x340>)
   1c9a4:	eb09 0989 	add.w	r9, r9, r9, lsl #2
   1c9a8:	444b      	add	r3, r9
   1c9aa:	5c19      	ldrb	r1, [r3, r0]
   1c9ac:	e7d4      	b.n	1c958 <smp_pairing_rsp+0xf0>
		return LEGACY_OOB;
   1c9ae:	2106      	movs	r1, #6
   1c9b0:	e7d2      	b.n	1c958 <smp_pairing_rsp+0xf0>
		return JUST_WORKS;
   1c9b2:	2100      	movs	r1, #0
   1c9b4:	e7d0      	b.n	1c958 <smp_pairing_rsp+0xf0>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   1c9b6:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1c9ba:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   1c9bc:	2b03      	cmp	r3, #3
   1c9be:	d015      	beq.n	1c9ec <smp_pairing_rsp+0x184>
   1c9c0:	d804      	bhi.n	1c9cc <smp_pairing_rsp+0x164>
   1c9c2:	3b01      	subs	r3, #1
   1c9c4:	2b01      	cmp	r3, #1
   1c9c6:	d914      	bls.n	1c9f2 <smp_pairing_rsp+0x18a>
		return BT_SMP_ERR_UNSPECIFIED;
   1c9c8:	2008      	movs	r0, #8
   1c9ca:	e760      	b.n	1c88e <smp_pairing_rsp+0x26>
	switch (sec) {
   1c9cc:	2b04      	cmp	r3, #4
   1c9ce:	d1fb      	bne.n	1c9c8 <smp_pairing_rsp+0x160>
	return MIN(req->max_key_size, rsp->max_key_size);
   1c9d0:	7d23      	ldrb	r3, [r4, #20]
   1c9d2:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   1c9d4:	4293      	cmp	r3, r2
   1c9d6:	bf28      	it	cs
   1c9d8:	4613      	movcs	r3, r2
   1c9da:	2b10      	cmp	r3, #16
   1c9dc:	f47f af56 	bne.w	1c88c <smp_pairing_rsp+0x24>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1c9e0:	2105      	movs	r1, #5
   1c9e2:	4628      	mov	r0, r5
   1c9e4:	f016 f807 	bl	329f6 <atomic_test_bit>
   1c9e8:	2800      	cmp	r0, #0
   1c9ea:	d0bc      	beq.n	1c966 <smp_pairing_rsp+0xfe>
		if (smp->method == JUST_WORKS) {
   1c9ec:	7a23      	ldrb	r3, [r4, #8]
   1c9ee:	2b00      	cmp	r3, #0
   1c9f0:	d0b9      	beq.n	1c966 <smp_pairing_rsp+0xfe>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1c9f2:	2105      	movs	r1, #5
   1c9f4:	4628      	mov	r0, r5
   1c9f6:	f015 fffe 	bl	329f6 <atomic_test_bit>
   1c9fa:	2800      	cmp	r0, #0
   1c9fc:	f040 80a9 	bne.w	1cb52 <smp_pairing_rsp+0x2ea>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ca00:	4620      	mov	r0, r4
   1ca02:	f7ff f8d7 	bl	1bbb4 <latch_auth_cb>
   1ca06:	4680      	mov	r8, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ca08:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   1ca0a:	f8d4 90ec 	ldr.w	r9, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ca0e:	f7ff f8d1 	bl	1bbb4 <latch_auth_cb>
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1ca12:	f109 0190 	add.w	r1, r9, #144	; 0x90
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ca16:	4606      	mov	r6, r0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1ca18:	f899 0008 	ldrb.w	r0, [r9, #8]
   1ca1c:	f000 ffe6 	bl	1d9ec <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   1ca20:	7a23      	ldrb	r3, [r4, #8]
   1ca22:	b178      	cbz	r0, 1ca44 <smp_pairing_rsp+0x1dc>
   1ca24:	7b42      	ldrb	r2, [r0, #13]
   1ca26:	07d2      	lsls	r2, r2, #31
   1ca28:	d50c      	bpl.n	1ca44 <smp_pairing_rsp+0x1dc>
   1ca2a:	b95b      	cbnz	r3, 1ca44 <smp_pairing_rsp+0x1dc>
		LOG_ERR("JustWorks failed, authenticated keys present");
   1ca2c:	4b5f      	ldr	r3, [pc, #380]	; (1cbac <smp_pairing_rsp+0x344>)
   1ca2e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1ca32:	617b      	str	r3, [r7, #20]
   1ca34:	2302      	movs	r3, #2
   1ca36:	485e      	ldr	r0, [pc, #376]	; (1cbb0 <smp_pairing_rsp+0x348>)
   1ca38:	613b      	str	r3, [r7, #16]
   1ca3a:	f107 0210 	add.w	r2, r7, #16
   1ca3e:	f016 f813 	bl	32a68 <z_log_msg_static_create.constprop.0>
	if (ret) {
   1ca42:	e7c1      	b.n	1c9c8 <smp_pairing_rsp+0x160>
	switch (smp->method) {
   1ca44:	2b06      	cmp	r3, #6
   1ca46:	d85e      	bhi.n	1cb06 <smp_pairing_rsp+0x29e>
   1ca48:	e8df f003 	tbb	[pc, r3]
   1ca4c:	5d2f5517 	.word	0x5d2f5517
   1ca50:	5d5d      	.short	0x5d5d
   1ca52:	04          	.byte	0x04
   1ca53:	00          	.byte	0x00
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   1ca54:	2e00      	cmp	r6, #0
   1ca56:	d066      	beq.n	1cb26 <smp_pairing_rsp+0x2be>
   1ca58:	68f3      	ldr	r3, [r6, #12]
   1ca5a:	2b00      	cmp	r3, #0
   1ca5c:	d063      	beq.n	1cb26 <smp_pairing_rsp+0x2be>
			struct bt_conn_oob_info info = {
   1ca5e:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1ca60:	210a      	movs	r1, #10
   1ca62:	4628      	mov	r0, r5
			struct bt_conn_oob_info info = {
   1ca64:	803b      	strh	r3, [r7, #0]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1ca66:	f016 f821 	bl	32aac <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   1ca6a:	4639      	mov	r1, r7
   1ca6c:	68f3      	ldr	r3, [r6, #12]
   1ca6e:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1ca72:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1ca74:	7a23      	ldrb	r3, [r4, #8]
   1ca76:	2b00      	cmp	r3, #0
   1ca78:	d157      	bne.n	1cb2a <smp_pairing_rsp+0x2c2>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1ca7a:	210f      	movs	r1, #15
   1ca7c:	4628      	mov	r0, r5
   1ca7e:	f015 ffba 	bl	329f6 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1ca82:	2800      	cmp	r0, #0
   1ca84:	d051      	beq.n	1cb2a <smp_pairing_rsp+0x2c2>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1ca86:	f1b8 0f00 	cmp.w	r8, #0
   1ca8a:	d04e      	beq.n	1cb2a <smp_pairing_rsp+0x2c2>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   1ca8c:	f8d8 3014 	ldr.w	r3, [r8, #20]
   1ca90:	2b00      	cmp	r3, #0
   1ca92:	d04a      	beq.n	1cb2a <smp_pairing_rsp+0x2c2>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1ca94:	4628      	mov	r0, r5
   1ca96:	210a      	movs	r1, #10
   1ca98:	f016 f808 	bl	32aac <atomic_set_bit>
		smp_auth_cb->pairing_confirm(smp->chan.chan.conn);
   1ca9c:	f8d8 3014 	ldr.w	r3, [r8, #20]
   1caa0:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
		smp_auth_cb->pairing_confirm(conn);
   1caa4:	4798      	blx	r3
		return 0;
   1caa6:	2000      	movs	r0, #0
   1caa8:	e6f1      	b.n	1c88e <smp_pairing_rsp+0x26>
			if (bt_rand(&passkey, sizeof(passkey))) {
   1caaa:	2104      	movs	r1, #4
   1caac:	4638      	mov	r0, r7
   1caae:	f7f9 fc19 	bl	162e4 <bt_rand>
   1cab2:	2800      	cmp	r0, #0
   1cab4:	d188      	bne.n	1c9c8 <smp_pairing_rsp+0x160>
			passkey %= 1000000;
   1cab6:	683b      	ldr	r3, [r7, #0]
   1cab8:	4a3e      	ldr	r2, [pc, #248]	; (1cbb4 <smp_pairing_rsp+0x34c>)
   1caba:	fbb3 f1f2 	udiv	r1, r3, r2
   1cabe:	fb02 3311 	mls	r3, r2, r1, r3
   1cac2:	603b      	str	r3, [r7, #0]
		if (smp_auth_cb && smp_auth_cb->passkey_display) {
   1cac4:	b14e      	cbz	r6, 1cada <smp_pairing_rsp+0x272>
   1cac6:	6833      	ldr	r3, [r6, #0]
   1cac8:	b13b      	cbz	r3, 1cada <smp_pairing_rsp+0x272>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1caca:	210b      	movs	r1, #11
   1cacc:	4628      	mov	r0, r5
   1cace:	f015 ffed 	bl	32aac <atomic_set_bit>
			smp_auth_cb->passkey_display(conn, passkey);
   1cad2:	4648      	mov	r0, r9
   1cad4:	6833      	ldr	r3, [r6, #0]
   1cad6:	6839      	ldr	r1, [r7, #0]
   1cad8:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   1cada:	683b      	ldr	r3, [r7, #0]
	dst[1] = val >> 8;
   1cadc:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   1cae0:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	sys_put_le16(val >> 16, &dst[2]);
   1cae4:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   1cae6:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	dst[1] = val >> 8;
   1caea:	0a1b      	lsrs	r3, r3, #8
   1caec:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
   1caf0:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	if (ret) {
   1caf4:	e7be      	b.n	1ca74 <smp_pairing_rsp+0x20c>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1caf6:	4628      	mov	r0, r5
   1caf8:	210a      	movs	r1, #10
   1cafa:	f015 ffd7 	bl	32aac <atomic_set_bit>
		smp_auth_cb->passkey_entry(conn);
   1cafe:	4648      	mov	r0, r9
   1cb00:	6873      	ldr	r3, [r6, #4]
   1cb02:	4798      	blx	r3
	if (ret) {
   1cb04:	e7b6      	b.n	1ca74 <smp_pairing_rsp+0x20c>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1cb06:	466c      	mov	r4, sp
   1cb08:	b088      	sub	sp, #32
   1cb0a:	466a      	mov	r2, sp
   1cb0c:	492a      	ldr	r1, [pc, #168]	; (1cbb8 <smp_pairing_rsp+0x350>)
   1cb0e:	4828      	ldr	r0, [pc, #160]	; (1cbb0 <smp_pairing_rsp+0x348>)
	switch (smp->method) {
   1cb10:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1cb14:	2303      	movs	r3, #3
   1cb16:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1cb1a:	f842 3f10 	str.w	r3, [r2, #16]!
   1cb1e:	f015 ffa3 	bl	32a68 <z_log_msg_static_create.constprop.0>
   1cb22:	46a5      	mov	sp, r4
	if (ret) {
   1cb24:	e750      	b.n	1c9c8 <smp_pairing_rsp+0x160>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1cb26:	2002      	movs	r0, #2
   1cb28:	e6b1      	b.n	1c88e <smp_pairing_rsp+0x26>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1cb2a:	210a      	movs	r1, #10
   1cb2c:	4628      	mov	r0, r5
   1cb2e:	f015 ff62 	bl	329f6 <atomic_test_bit>
   1cb32:	b948      	cbnz	r0, 1cb48 <smp_pairing_rsp+0x2e0>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1cb34:	4620      	mov	r0, r4
   1cb36:	2103      	movs	r1, #3
   1cb38:	f015 ffb8 	bl	32aac <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1cb3c:	210e      	movs	r1, #14
   1cb3e:	f015 ffb5 	bl	32aac <atomic_set_bit>
		return legacy_send_pairing_confirm(smp);
   1cb42:	f016 f89b 	bl	32c7c <legacy_send_pairing_confirm>
   1cb46:	e6a2      	b.n	1c88e <smp_pairing_rsp+0x26>
	atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1cb48:	2100      	movs	r1, #0
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   1cb4a:	4628      	mov	r0, r5
   1cb4c:	f015 ffae 	bl	32aac <atomic_set_bit>
		return 0;
   1cb50:	e7a9      	b.n	1caa6 <smp_pairing_rsp+0x23e>
	smp->local_dist &= SEND_KEYS_SC;
   1cb52:	2300      	movs	r3, #0
   1cb54:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist &= RECV_KEYS_SC;
   1cb58:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1cb5c:	f003 0302 	and.w	r3, r3, #2
   1cb60:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if (!IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) &&
   1cb64:	7a23      	ldrb	r3, [r4, #8]
   1cb66:	b973      	cbnz	r3, 1cb86 <smp_pairing_rsp+0x31e>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1cb68:	210f      	movs	r1, #15
   1cb6a:	4628      	mov	r0, r5
   1cb6c:	f015 ff43 	bl	329f6 <atomic_test_bit>
	    (DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1cb70:	b148      	cbz	r0, 1cb86 <smp_pairing_rsp+0x31e>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1cb72:	b146      	cbz	r6, 1cb86 <smp_pairing_rsp+0x31e>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   1cb74:	6973      	ldr	r3, [r6, #20]
   1cb76:	b133      	cbz	r3, 1cb86 <smp_pairing_rsp+0x31e>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1cb78:	4628      	mov	r0, r5
   1cb7a:	210a      	movs	r1, #10
   1cb7c:	f015 ff96 	bl	32aac <atomic_set_bit>
		smp_auth_cb->pairing_confirm(conn);
   1cb80:	4640      	mov	r0, r8
   1cb82:	6973      	ldr	r3, [r6, #20]
   1cb84:	e78e      	b.n	1caa4 <smp_pairing_rsp+0x23c>
	if (!sc_public_key) {
   1cb86:	4b0d      	ldr	r3, [pc, #52]	; (1cbbc <smp_pairing_rsp+0x354>)
   1cb88:	681b      	ldr	r3, [r3, #0]
   1cb8a:	b90b      	cbnz	r3, 1cb90 <smp_pairing_rsp+0x328>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   1cb8c:	2106      	movs	r1, #6
   1cb8e:	e7dc      	b.n	1cb4a <smp_pairing_rsp+0x2e2>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1cb90:	4620      	mov	r0, r4
   1cb92:	210c      	movs	r1, #12
   1cb94:	f015 ff8a 	bl	32aac <atomic_set_bit>
	atomic_clear_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   1cb98:	210b      	movs	r1, #11
   1cb9a:	f015 ff53 	bl	32a44 <atomic_clear_bit>
	return sc_send_public_key(smp);
   1cb9e:	f7ff fd83 	bl	1c6a8 <sc_send_public_key>
   1cba2:	e674      	b.n	1c88e <smp_pairing_rsp+0x26>
   1cba4:	0003d9ca 	.word	0x0003d9ca
   1cba8:	0003d9b1 	.word	0x0003d9b1
   1cbac:	0003d72b 	.word	0x0003d72b
   1cbb0:	00037930 	.word	0x00037930
   1cbb4:	000f4240 	.word	0x000f4240
   1cbb8:	0003d578 	.word	0x0003d578
   1cbbc:	2000e788 	.word	0x2000e788

0001cbc0 <smp_pairing_random>:
{
   1cbc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cbc4:	b093      	sub	sp, #76	; 0x4c
   1cbc6:	4604      	mov	r4, r0
   1cbc8:	af04      	add	r7, sp, #16
   1cbca:	460d      	mov	r5, r1
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1cbcc:	f7fe fff2 	bl	1bbb4 <latch_auth_cb>
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1cbd0:	f104 0837 	add.w	r8, r4, #55	; 0x37
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1cbd4:	4681      	mov	r9, r0
   1cbd6:	4642      	mov	r2, r8
   1cbd8:	68eb      	ldr	r3, [r5, #12]
   1cbda:	f103 0110 	add.w	r1, r3, #16
   1cbde:	f853 0b04 	ldr.w	r0, [r3], #4
   1cbe2:	428b      	cmp	r3, r1
   1cbe4:	f842 0b04 	str.w	r0, [r2], #4
   1cbe8:	d1f9      	bne.n	1cbde <smp_pairing_random+0x1e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1cbea:	1d26      	adds	r6, r4, #4
   1cbec:	2105      	movs	r1, #5
   1cbee:	4630      	mov	r0, r6
   1cbf0:	f015 ff01 	bl	329f6 <atomic_test_bit>
   1cbf4:	f8d4 a0ec 	ldr.w	sl, [r4, #236]	; 0xec
   1cbf8:	2800      	cmp	r0, #0
   1cbfa:	d15c      	bne.n	1ccb6 <smp_pairing_random+0xf6>
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1cbfc:	f10a 039e 	add.w	r3, sl, #158	; 0x9e
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1cc00:	f104 0b47 	add.w	fp, r4, #71	; 0x47
   1cc04:	f107 0910 	add.w	r9, r7, #16
   1cc08:	9301      	str	r3, [sp, #4]
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1cc0a:	f10a 0397 	add.w	r3, sl, #151	; 0x97
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1cc0e:	9300      	str	r3, [sp, #0]
   1cc10:	4641      	mov	r1, r8
   1cc12:	4658      	mov	r0, fp
   1cc14:	f8cd 9008 	str.w	r9, [sp, #8]
   1cc18:	f104 0310 	add.w	r3, r4, #16
   1cc1c:	f104 0209 	add.w	r2, r4, #9
   1cc20:	f015 ffd1 	bl	32bc6 <smp_c1>
	if (err) {
   1cc24:	2800      	cmp	r0, #0
   1cc26:	d13b      	bne.n	1cca0 <smp_pairing_random+0xe0>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   1cc28:	2210      	movs	r2, #16
   1cc2a:	4649      	mov	r1, r9
   1cc2c:	f104 0017 	add.w	r0, r4, #23
   1cc30:	f019 fc6a 	bl	36508 <memcmp>
   1cc34:	2800      	cmp	r0, #0
   1cc36:	d16a      	bne.n	1cd0e <smp_pairing_random+0x14e>
	    conn->role == BT_HCI_ROLE_CENTRAL) {
   1cc38:	f89a 5003 	ldrb.w	r5, [sl, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1cc3c:	2d00      	cmp	r5, #0
   1cc3e:	f040 80a1 	bne.w	1cd84 <smp_pairing_random+0x1c4>
	memcpy(out, r2, 8);
   1cc42:	464b      	mov	r3, r9
   1cc44:	f8d4 0027 	ldr.w	r0, [r4, #39]	; 0x27
   1cc48:	f8d4 102b 	ldr.w	r1, [r4, #43]	; 0x2b
	return bt_encrypt_le(k, out, out);
   1cc4c:	464a      	mov	r2, r9
	memcpy(out, r2, 8);
   1cc4e:	c303      	stmia	r3!, {r0, r1}
	memcpy(out + 8, r1, 8);
   1cc50:	f8d4 0037 	ldr.w	r0, [r4, #55]	; 0x37
   1cc54:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1cc58:	f107 0318 	add.w	r3, r7, #24
   1cc5c:	c303      	stmia	r3!, {r0, r1}
	return bt_encrypt_le(k, out, out);
   1cc5e:	4649      	mov	r1, r9
   1cc60:	4658      	mov	r0, fp
   1cc62:	f014 fada 	bl	3121a <bt_encrypt_le>
		if (err) {
   1cc66:	b9d8      	cbnz	r0, 1cca0 <smp_pairing_random+0xe0>
	return MIN(req->max_key_size, rsp->max_key_size);
   1cc68:	7d22      	ldrb	r2, [r4, #20]
   1cc6a:	7b63      	ldrb	r3, [r4, #13]
		(void)memset(rand, 0, sizeof(rand));
   1cc6c:	e9c7 0002 	strd	r0, r0, [r7, #8]
		(void)memset(ediv, 0, sizeof(ediv));
   1cc70:	80b8      	strh	r0, [r7, #4]
		if (bt_conn_le_start_encryption(conn, rand, ediv, tmp,
   1cc72:	f107 0108 	add.w	r1, r7, #8
   1cc76:	429a      	cmp	r2, r3
   1cc78:	bf94      	ite	ls
   1cc7a:	9200      	strls	r2, [sp, #0]
   1cc7c:	9300      	strhi	r3, [sp, #0]
   1cc7e:	4650      	mov	r0, sl
   1cc80:	464b      	mov	r3, r9
   1cc82:	1d3a      	adds	r2, r7, #4
   1cc84:	f014 fb6f 	bl	31366 <bt_conn_le_start_encryption>
   1cc88:	b180      	cbz	r0, 1ccac <smp_pairing_random+0xec>
			LOG_ERR("Failed to start encryption");
   1cc8a:	4b4e      	ldr	r3, [pc, #312]	; (1cdc4 <smp_pairing_random+0x204>)
		LOG_ERR("Calculate confirm failed");
   1cc8c:	637b      	str	r3, [r7, #52]	; 0x34
   1cc8e:	2302      	movs	r3, #2
   1cc90:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1cc94:	484c      	ldr	r0, [pc, #304]	; (1cdc8 <smp_pairing_random+0x208>)
   1cc96:	633b      	str	r3, [r7, #48]	; 0x30
   1cc98:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1cc9c:	f015 fee4 	bl	32a68 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1cca0:	2508      	movs	r5, #8
}
   1cca2:	4628      	mov	r0, r5
   1cca4:	373c      	adds	r7, #60	; 0x3c
   1cca6:	46bd      	mov	sp, r7
   1cca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1ccac:	2101      	movs	r1, #1
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1ccae:	4630      	mov	r0, r6
   1ccb0:	f015 fefc 	bl	32aac <atomic_set_bit>
			return 0;
   1ccb4:	e7f5      	b.n	1cca2 <smp_pairing_random+0xe2>
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1ccb6:	f89a 5003 	ldrb.w	r5, [sl, #3]
   1ccba:	2d00      	cmp	r5, #0
   1ccbc:	d17f      	bne.n	1cdbe <smp_pairing_random+0x1fe>
	switch (smp->method) {
   1ccbe:	7a23      	ldrb	r3, [r4, #8]
   1ccc0:	2b05      	cmp	r3, #5
   1ccc2:	d861      	bhi.n	1cd88 <smp_pairing_random+0x1c8>
   1ccc4:	e8df f003 	tbb	[pc, r3]
   1ccc8:	1a03031a 	.word	0x1a03031a
   1cccc:	2560      	.short	0x2560
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1ccce:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   1ccd2:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   1ccd6:	40d3      	lsrs	r3, r2
   1ccd8:	f003 0301 	and.w	r3, r3, #1
		r |= 0x80;
   1ccdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	if (bt_crypto_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1cce0:	493a      	ldr	r1, [pc, #232]	; (1cdcc <smp_pairing_random+0x20c>)
   1cce2:	f107 0a10 	add.w	sl, r7, #16
   1cce6:	f8cd a000 	str.w	sl, [sp]
   1ccea:	4642      	mov	r2, r8
   1ccec:	6809      	ldr	r1, [r1, #0]
   1ccee:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1ccf2:	f016 f9a0 	bl	33036 <bt_crypto_f4>
   1ccf6:	b118      	cbz	r0, 1cd00 <smp_pairing_random+0x140>
		LOG_ERR("Calculate confirm failed");
   1ccf8:	4b35      	ldr	r3, [pc, #212]	; (1cdd0 <smp_pairing_random+0x210>)
   1ccfa:	e7c7      	b.n	1cc8c <smp_pairing_random+0xcc>
	switch (smp->method) {
   1ccfc:	2300      	movs	r3, #0
   1ccfe:	e7ef      	b.n	1cce0 <smp_pairing_random+0x120>
	if (memcmp(smp->pcnf, cfm, 16)) {
   1cd00:	2210      	movs	r2, #16
   1cd02:	4651      	mov	r1, sl
   1cd04:	f104 0017 	add.w	r0, r4, #23
   1cd08:	f019 fbfe 	bl	36508 <memcmp>
   1cd0c:	b108      	cbz	r0, 1cd12 <smp_pairing_random+0x152>
		return BT_SMP_ERR_CONFIRM_FAILED;
   1cd0e:	2504      	movs	r5, #4
   1cd10:	e7c7      	b.n	1cca2 <smp_pairing_random+0xe2>
		switch (smp->method) {
   1cd12:	7a23      	ldrb	r3, [r4, #8]
   1cd14:	2b05      	cmp	r3, #5
   1cd16:	d837      	bhi.n	1cd88 <smp_pairing_random+0x1c8>
   1cd18:	e8df f003 	tbb	[pc, r3]
   1cd1c:	031f1f46 	.word	0x031f1f46
   1cd20:	4636      	.short	0x4636
			if (bt_crypto_g2(sc_public_key, smp->pkey, smp->prnd, smp->rrnd,
   1cd22:	f107 0320 	add.w	r3, r7, #32
   1cd26:	4829      	ldr	r0, [pc, #164]	; (1cdcc <smp_pairing_random+0x20c>)
   1cd28:	9300      	str	r3, [sp, #0]
   1cd2a:	6800      	ldr	r0, [r0, #0]
   1cd2c:	4643      	mov	r3, r8
   1cd2e:	f104 0227 	add.w	r2, r4, #39	; 0x27
   1cd32:	f104 0157 	add.w	r1, r4, #87	; 0x57
   1cd36:	f001 f8ad 	bl	1de94 <bt_crypto_g2>
   1cd3a:	2800      	cmp	r0, #0
   1cd3c:	d1b0      	bne.n	1cca0 <smp_pairing_random+0xe0>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1cd3e:	4630      	mov	r0, r6
   1cd40:	210a      	movs	r1, #10
   1cd42:	f015 feb3 	bl	32aac <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1cd46:	2109      	movs	r1, #9
   1cd48:	f015 feb0 	bl	32aac <atomic_set_bit>
			smp_auth_cb->passkey_confirm(smp->chan.chan.conn, passkey);
   1cd4c:	f8d9 3008 	ldr.w	r3, [r9, #8]
   1cd50:	6a39      	ldr	r1, [r7, #32]
   1cd52:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1cd56:	4798      	blx	r3
			return 0;
   1cd58:	e7a3      	b.n	1cca2 <smp_pairing_random+0xe2>
			smp->passkey_round++;
   1cd5a:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   1cd5e:	3301      	adds	r3, #1
   1cd60:	b2db      	uxtb	r3, r3
			if (smp->passkey_round == 20U) {
   1cd62:	2b14      	cmp	r3, #20
			smp->passkey_round++;
   1cd64:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
			if (smp->passkey_round == 20U) {
   1cd68:	d01e      	beq.n	1cda8 <smp_pairing_random+0x1e8>
			if (bt_rand(smp->prnd, 16)) {
   1cd6a:	2110      	movs	r1, #16
   1cd6c:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1cd70:	f7f9 fab8 	bl	162e4 <bt_rand>
   1cd74:	2800      	cmp	r0, #0
   1cd76:	d193      	bne.n	1cca0 <smp_pairing_random+0xe0>
			atomic_set_bit(smp->allowed_cmds,
   1cd78:	2103      	movs	r1, #3
   1cd7a:	4620      	mov	r0, r4
   1cd7c:	f015 fe96 	bl	32aac <atomic_set_bit>
			return smp_send_pairing_confirm(smp);
   1cd80:	f7ff fb2c 	bl	1c3dc <smp_send_pairing_confirm>
		return compute_and_send_central_dhcheck(smp);
   1cd84:	4605      	mov	r5, r0
   1cd86:	e78c      	b.n	1cca2 <smp_pairing_random+0xe2>
			LOG_ERR("Unknown pairing method (%u)", smp->method);
   1cd88:	466c      	mov	r4, sp
   1cd8a:	b088      	sub	sp, #32
   1cd8c:	aa04      	add	r2, sp, #16
   1cd8e:	4911      	ldr	r1, [pc, #68]	; (1cdd4 <smp_pairing_random+0x214>)
   1cd90:	480d      	ldr	r0, [pc, #52]	; (1cdc8 <smp_pairing_random+0x208>)
		switch (smp->method) {
   1cd92:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_ERR("Unknown pairing method (%u)", smp->method);
   1cd96:	2303      	movs	r3, #3
   1cd98:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1cd9c:	f842 3f10 	str.w	r3, [r2, #16]!
   1cda0:	f015 fe62 	bl	32a68 <z_log_msg_static_create.constprop.0>
   1cda4:	46a5      	mov	sp, r4
			return BT_SMP_ERR_UNSPECIFIED;
   1cda6:	e77b      	b.n	1cca0 <smp_pairing_random+0xe0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   1cda8:	2107      	movs	r1, #7
   1cdaa:	4630      	mov	r0, r6
   1cdac:	f015 fe23 	bl	329f6 <atomic_test_bit>
   1cdb0:	b108      	cbz	r0, 1cdb6 <smp_pairing_random+0x1f6>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1cdb2:	2109      	movs	r1, #9
   1cdb4:	e77b      	b.n	1ccae <smp_pairing_random+0xee>
		return compute_and_send_central_dhcheck(smp);
   1cdb6:	4620      	mov	r0, r4
   1cdb8:	f7ff fca2 	bl	1c700 <compute_and_send_central_dhcheck>
   1cdbc:	e7e2      	b.n	1cd84 <smp_pairing_random+0x1c4>
	return BT_SMP_ERR_PAIRING_NOTSUPP;
   1cdbe:	460d      	mov	r5, r1
   1cdc0:	e76f      	b.n	1cca2 <smp_pairing_random+0xe2>
   1cdc2:	bf00      	nop
   1cdc4:	0003d594 	.word	0x0003d594
   1cdc8:	00037930 	.word	0x00037930
   1cdcc:	2000e788 	.word	0x2000e788
   1cdd0:	0003d758 	.word	0x0003d758
   1cdd4:	0003d578 	.word	0x0003d578

0001cdd8 <smp_pairing_complete>:
{
   1cdd8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   1cdda:	f8d0 40ec 	ldr.w	r4, [r0, #236]	; 0xec
{
   1cdde:	4606      	mov	r6, r0
	if (conn->state != BT_CONN_CONNECTED) {
   1cde0:	7b63      	ldrb	r3, [r4, #13]
{
   1cde2:	b087      	sub	sp, #28
	if (conn->state != BT_CONN_CONNECTED) {
   1cde4:	2b07      	cmp	r3, #7
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1cde6:	f100 0504 	add.w	r5, r0, #4
	if (conn->state != BT_CONN_CONNECTED) {
   1cdea:	d038      	beq.n	1ce5e <smp_pairing_complete+0x86>
		LOG_WRN("Not connected!");
   1cdec:	4b44      	ldr	r3, [pc, #272]	; (1cf00 <smp_pairing_complete+0x128>)
   1cdee:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1cdf2:	9305      	str	r3, [sp, #20]
   1cdf4:	2302      	movs	r3, #2
   1cdf6:	4843      	ldr	r0, [pc, #268]	; (1cf04 <smp_pairing_complete+0x12c>)
   1cdf8:	aa04      	add	r2, sp, #16
   1cdfa:	9304      	str	r3, [sp, #16]
   1cdfc:	f015 fe34 	bl	32a68 <z_log_msg_static_create.constprop.0>
	switch (smp_err) {
   1ce00:	2107      	movs	r1, #7
   1ce02:	4b41      	ldr	r3, [pc, #260]	; (1cf08 <smp_pairing_complete+0x130>)
   1ce04:	5c5f      	ldrb	r7, [r3, r1]
		if (conn->le.keys &&
   1ce06:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   1ce0a:	b14b      	cbz	r3, 1ce20 <smp_pairing_complete+0x48>
   1ce0c:	7b1b      	ldrb	r3, [r3, #12]
   1ce0e:	2b00      	cmp	r3, #0
   1ce10:	d15d      	bne.n	1cece <smp_pairing_complete+0xf6>
			bt_keys_clear(conn->le.keys);
   1ce12:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1ce16:	f000 fe4b 	bl	1dab0 <bt_keys_clear>
			conn->le.keys = NULL;
   1ce1a:	2300      	movs	r3, #0
   1ce1c:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1ce20:	2102      	movs	r1, #2
   1ce22:	4628      	mov	r0, r5
   1ce24:	f015 fde7 	bl	329f6 <atomic_test_bit>
   1ce28:	b948      	cbnz	r0, 1ce3e <smp_pairing_complete+0x66>
	switch (err) {
   1ce2a:	2f07      	cmp	r7, #7
   1ce2c:	bf94      	ite	ls
   1ce2e:	4b37      	ldrls	r3, [pc, #220]	; (1cf0c <smp_pairing_complete+0x134>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1ce30:	211f      	movhi	r1, #31
			bt_conn_security_changed(conn,
   1ce32:	463a      	mov	r2, r7
   1ce34:	4620      	mov	r0, r4
   1ce36:	bf98      	it	ls
   1ce38:	5dd9      	ldrbls	r1, [r3, r7]
   1ce3a:	f7fa f9bd 	bl	171b8 <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1ce3e:	2103      	movs	r1, #3
   1ce40:	4628      	mov	r0, r5
   1ce42:	f015 fdd8 	bl	329f6 <atomic_test_bit>
   1ce46:	b360      	cbz	r0, 1cea2 <smp_pairing_complete+0xca>
	return list->head;
   1ce48:	4b31      	ldr	r3, [pc, #196]	; (1cf10 <smp_pairing_complete+0x138>)
   1ce4a:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1ce4c:	b34b      	cbz	r3, 1cea2 <smp_pairing_complete+0xca>
	return node->next;
   1ce4e:	681d      	ldr	r5, [r3, #0]
   1ce50:	b105      	cbz	r5, 1ce54 <smp_pairing_complete+0x7c>
   1ce52:	3d0c      	subs	r5, #12
				if (listener->pairing_failed) {
   1ce54:	f853 3c08 	ldr.w	r3, [r3, #-8]
   1ce58:	2b00      	cmp	r3, #0
   1ce5a:	d141      	bne.n	1cee0 <smp_pairing_complete+0x108>
   1ce5c:	e043      	b.n	1cee6 <smp_pairing_complete+0x10e>
	if (!status) {
   1ce5e:	bb81      	cbnz	r1, 1cec2 <smp_pairing_complete+0xea>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1ce60:	210d      	movs	r1, #13
   1ce62:	4628      	mov	r0, r5
   1ce64:	f015 fdc7 	bl	329f6 <atomic_test_bit>
		if (bond_flag) {
   1ce68:	4607      	mov	r7, r0
   1ce6a:	b118      	cbz	r0, 1ce74 <smp_pairing_complete+0x9c>
			bt_keys_store(conn->le.keys);
   1ce6c:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1ce70:	f000 ff32 	bl	1dcd8 <bt_keys_store>
	return list->head;
   1ce74:	4b26      	ldr	r3, [pc, #152]	; (1cf10 <smp_pairing_complete+0x138>)
   1ce76:	681b      	ldr	r3, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   1ce78:	b19b      	cbz	r3, 1cea2 <smp_pairing_complete+0xca>
	return node->next;
   1ce7a:	681d      	ldr	r5, [r3, #0]
   1ce7c:	b105      	cbz	r5, 1ce80 <smp_pairing_complete+0xa8>
   1ce7e:	3d0c      	subs	r5, #12
			if (listener->pairing_complete) {
   1ce80:	f853 3c0c 	ldr.w	r3, [r3, #-12]
   1ce84:	b113      	cbz	r3, 1ce8c <smp_pairing_complete+0xb4>
				listener->pairing_complete(conn, bond_flag);
   1ce86:	4639      	mov	r1, r7
   1ce88:	4620      	mov	r0, r4
   1ce8a:	4798      	blx	r3
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   1ce8c:	b14d      	cbz	r5, 1cea2 <smp_pairing_complete+0xca>
   1ce8e:	462b      	mov	r3, r5
   1ce90:	68ed      	ldr	r5, [r5, #12]
   1ce92:	681b      	ldr	r3, [r3, #0]
   1ce94:	b11d      	cbz	r5, 1ce9e <smp_pairing_complete+0xc6>
   1ce96:	3d0c      	subs	r5, #12
			if (listener->pairing_complete) {
   1ce98:	2b00      	cmp	r3, #0
   1ce9a:	d1f4      	bne.n	1ce86 <smp_pairing_complete+0xae>
   1ce9c:	e7f7      	b.n	1ce8e <smp_pairing_complete+0xb6>
   1ce9e:	2b00      	cmp	r3, #0
   1cea0:	d1f1      	bne.n	1ce86 <smp_pairing_complete+0xae>
	smp_reset(smp);
   1cea2:	4630      	mov	r0, r6
   1cea4:	f015 fe6f 	bl	32b86 <smp_reset>
	if (conn->state == BT_CONN_CONNECTED && conn->sec_level != conn->required_sec_level) {
   1cea8:	7b63      	ldrb	r3, [r4, #13]
   1ceaa:	2b07      	cmp	r3, #7
   1ceac:	d125      	bne.n	1cefa <smp_pairing_complete+0x122>
   1ceae:	7a62      	ldrb	r2, [r4, #9]
   1ceb0:	7aa3      	ldrb	r3, [r4, #10]
   1ceb2:	429a      	cmp	r2, r3
   1ceb4:	d021      	beq.n	1cefa <smp_pairing_complete+0x122>
		bt_smp_start_security(conn);
   1ceb6:	4620      	mov	r0, r4
}
   1ceb8:	b007      	add	sp, #28
   1ceba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_smp_start_security(conn);
   1cebe:	f015 bfa3 	b.w	32e08 <bt_smp_start_security>
	switch (smp_err) {
   1cec2:	3901      	subs	r1, #1
   1cec4:	b2c9      	uxtb	r1, r1
   1cec6:	290e      	cmp	r1, #14
   1cec8:	d99b      	bls.n	1ce02 <smp_pairing_complete+0x2a>
	if (!status) {
   1ceca:	2709      	movs	r7, #9
   1cecc:	e79b      	b.n	1ce06 <smp_pairing_complete+0x2e>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   1cece:	2102      	movs	r1, #2
   1ced0:	4628      	mov	r0, r5
   1ced2:	f015 fd90 	bl	329f6 <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   1ced6:	2800      	cmp	r0, #0
   1ced8:	d19b      	bne.n	1ce12 <smp_pairing_complete+0x3a>
   1ceda:	e7a1      	b.n	1ce20 <smp_pairing_complete+0x48>
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1cedc:	3d0c      	subs	r5, #12
				if (listener->pairing_failed) {
   1cede:	b123      	cbz	r3, 1ceea <smp_pairing_complete+0x112>
					listener->pairing_failed(conn, security_err);
   1cee0:	4639      	mov	r1, r7
   1cee2:	4620      	mov	r0, r4
   1cee4:	4798      	blx	r3
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1cee6:	2d00      	cmp	r5, #0
   1cee8:	d0db      	beq.n	1cea2 <smp_pairing_complete+0xca>
   1ceea:	462b      	mov	r3, r5
   1ceec:	68ed      	ldr	r5, [r5, #12]
   1ceee:	685b      	ldr	r3, [r3, #4]
   1cef0:	2d00      	cmp	r5, #0
   1cef2:	d1f3      	bne.n	1cedc <smp_pairing_complete+0x104>
				if (listener->pairing_failed) {
   1cef4:	2b00      	cmp	r3, #0
   1cef6:	d1f3      	bne.n	1cee0 <smp_pairing_complete+0x108>
   1cef8:	e7d3      	b.n	1cea2 <smp_pairing_complete+0xca>
}
   1cefa:	b007      	add	sp, #28
   1cefc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cefe:	bf00      	nop
   1cf00:	0003d771 	.word	0x0003d771
   1cf04:	00037930 	.word	0x00037930
   1cf08:	0003d9a2 	.word	0x0003d9a2
   1cf0c:	0003d991 	.word	0x0003d991
   1cf10:	2000e650 	.word	0x2000e650

0001cf14 <smp_error>:
{
   1cf14:	b5f0      	push	{r4, r5, r6, r7, lr}
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   1cf16:	1d03      	adds	r3, r0, #4
{
   1cf18:	4606      	mov	r6, r0
   1cf1a:	460f      	mov	r7, r1
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   1cf1c:	4618      	mov	r0, r3
   1cf1e:	2102      	movs	r1, #2
{
   1cf20:	b089      	sub	sp, #36	; 0x24
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   1cf22:	f015 fd68 	bl	329f6 <atomic_test_bit>
				    !smp->local_dist && !smp->remote_dist);
   1cf26:	4604      	mov	r4, r0
   1cf28:	b120      	cbz	r0, 1cf34 <smp_error+0x20>
   1cf2a:	f8b6 40e8 	ldrh.w	r4, [r6, #232]	; 0xe8
   1cf2e:	fab4 f484 	clz	r4, r4
   1cf32:	0964      	lsrs	r4, r4, #5
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1cf34:	2103      	movs	r1, #3
   1cf36:	4618      	mov	r0, r3
   1cf38:	f015 fd5d 	bl	329f6 <atomic_test_bit>
   1cf3c:	b1b0      	cbz	r0, 1cf6c <smp_error+0x58>
		smp_pairing_complete(smp, reason);
   1cf3e:	4639      	mov	r1, r7
   1cf40:	4630      	mov	r0, r6
   1cf42:	f7ff ff49 	bl	1cdd8 <smp_pairing_complete>
	if (remote_already_completed) {
   1cf46:	b1f4      	cbz	r4, 1cf86 <smp_error+0x72>
		LOG_WRN("SMP does not allow a pairing failure at this point. Known issue. "
   1cf48:	4b1d      	ldr	r3, [pc, #116]	; (1cfc0 <smp_error+0xac>)
   1cf4a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1cf4e:	9307      	str	r3, [sp, #28]
   1cf50:	2302      	movs	r3, #2
   1cf52:	481c      	ldr	r0, [pc, #112]	; (1cfc4 <smp_error+0xb0>)
   1cf54:	aa06      	add	r2, sp, #24
   1cf56:	9306      	str	r3, [sp, #24]
   1cf58:	f015 fd86 	bl	32a68 <z_log_msg_static_create.constprop.0>
		bt_conn_disconnect(smp->chan.chan.conn, BT_HCI_ERR_AUTH_FAIL);
   1cf5c:	2105      	movs	r1, #5
   1cf5e:	f8d6 00ec 	ldr.w	r0, [r6, #236]	; 0xec
   1cf62:	f014 fab3 	bl	314cc <bt_conn_disconnect>
		return 0;
   1cf66:	2000      	movs	r0, #0
}
   1cf68:	b009      	add	sp, #36	; 0x24
   1cf6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1cf6c:	2101      	movs	r1, #1
   1cf6e:	4618      	mov	r0, r3
   1cf70:	f015 fd41 	bl	329f6 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1cf74:	2800      	cmp	r0, #0
   1cf76:	d1e2      	bne.n	1cf3e <smp_error+0x2a>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1cf78:	210f      	movs	r1, #15
   1cf7a:	4618      	mov	r0, r3
   1cf7c:	f015 fd3b 	bl	329f6 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1cf80:	2800      	cmp	r0, #0
   1cf82:	d1dc      	bne.n	1cf3e <smp_error+0x2a>
   1cf84:	e7df      	b.n	1cf46 <smp_error+0x32>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   1cf86:	2105      	movs	r1, #5
   1cf88:	4630      	mov	r0, r6
   1cf8a:	f015 fd9f 	bl	32acc <smp_create_pdu.constprop.0>
	if (!buf) {
   1cf8e:	4605      	mov	r5, r0
   1cf90:	b190      	cbz	r0, 1cfb8 <smp_error+0xa4>
   1cf92:	2101      	movs	r1, #1
   1cf94:	300c      	adds	r0, #12
   1cf96:	f001 fa7f 	bl	1e498 <net_buf_simple_add>
	rsp->reason = reason;
   1cf9a:	7007      	strb	r7, [r0, #0]
   1cf9c:	9400      	str	r4, [sp, #0]
   1cf9e:	4623      	mov	r3, r4
   1cfa0:	462a      	mov	r2, r5
   1cfa2:	2106      	movs	r1, #6
   1cfa4:	f8d6 00ec 	ldr.w	r0, [r6, #236]	; 0xec
   1cfa8:	f014 fb5c 	bl	31664 <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   1cfac:	2800      	cmp	r0, #0
   1cfae:	d0da      	beq.n	1cf66 <smp_error+0x52>
		net_buf_unref(buf);
   1cfb0:	4628      	mov	r0, r5
   1cfb2:	f001 f8eb 	bl	1e18c <net_buf_unref>
   1cfb6:	e7d6      	b.n	1cf66 <smp_error+0x52>
		return -ENOBUFS;
   1cfb8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1cfbc:	e7d4      	b.n	1cf68 <smp_error+0x54>
   1cfbe:	bf00      	nop
   1cfc0:	0003d780 	.word	0x0003d780
   1cfc4:	00037930 	.word	0x00037930

0001cfc8 <bt_smp_recv>:
{
   1cfc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1cfcc:	b087      	sub	sp, #28
	if (buf->len < sizeof(*hdr)) {
   1cfce:	8a0b      	ldrh	r3, [r1, #16]
{
   1cfd0:	4604      	mov	r4, r0
   1cfd2:	460e      	mov	r6, r1
   1cfd4:	af00      	add	r7, sp, #0
	if (buf->len < sizeof(*hdr)) {
   1cfd6:	b97b      	cbnz	r3, 1cff8 <bt_smp_recv+0x30>
		LOG_ERR("Too small SMP PDU received");
   1cfd8:	4b47      	ldr	r3, [pc, #284]	; (1d0f8 <bt_smp_recv+0x130>)
   1cfda:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1cfde:	617b      	str	r3, [r7, #20]
   1cfe0:	2302      	movs	r3, #2
   1cfe2:	4846      	ldr	r0, [pc, #280]	; (1d0fc <bt_smp_recv+0x134>)
   1cfe4:	f107 0210 	add.w	r2, r7, #16
   1cfe8:	613b      	str	r3, [r7, #16]
   1cfea:	f015 fd3d 	bl	32a68 <z_log_msg_static_create.constprop.0>
}
   1cfee:	2000      	movs	r0, #0
   1cff0:	371c      	adds	r7, #28
   1cff2:	46bd      	mov	sp, r7
   1cff4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1cff8:	2101      	movs	r1, #1
   1cffa:	f106 000c 	add.w	r0, r6, #12
   1cffe:	f001 fa2d 	bl	1e45c <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1d002:	f1a4 05ec 	sub.w	r5, r4, #236	; 0xec
   1d006:	3ce8      	subs	r4, #232	; 0xe8
   1d008:	4680      	mov	r8, r0
   1d00a:	2104      	movs	r1, #4
   1d00c:	4620      	mov	r0, r4
   1d00e:	f015 fcf2 	bl	329f6 <atomic_test_bit>
   1d012:	f898 1000 	ldrb.w	r1, [r8]
   1d016:	b178      	cbz	r0, 1d038 <bt_smp_recv+0x70>
		LOG_WRN("SMP command (code 0x%02x) received after timeout", hdr->code);
   1d018:	466c      	mov	r4, sp
   1d01a:	b088      	sub	sp, #32
   1d01c:	466a      	mov	r2, sp
   1d01e:	4b38      	ldr	r3, [pc, #224]	; (1d100 <bt_smp_recv+0x138>)
		LOG_WRN("Received reserved SMP code 0x%02x", hdr->code);
   1d020:	e9c2 3105 	strd	r3, r1, [r2, #20]
   1d024:	2303      	movs	r3, #3
   1d026:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1d02a:	4834      	ldr	r0, [pc, #208]	; (1d0fc <bt_smp_recv+0x134>)
   1d02c:	f842 3f10 	str.w	r3, [r2, #16]!
   1d030:	f015 fd1a 	bl	32a68 <z_log_msg_static_create.constprop.0>
   1d034:	46a5      	mov	sp, r4
		return 0;
   1d036:	e7da      	b.n	1cfee <bt_smp_recv+0x26>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   1d038:	290e      	cmp	r1, #14
   1d03a:	d904      	bls.n	1d046 <bt_smp_recv+0x7e>
		LOG_WRN("Received reserved SMP code 0x%02x", hdr->code);
   1d03c:	466c      	mov	r4, sp
   1d03e:	b088      	sub	sp, #32
   1d040:	466a      	mov	r2, sp
   1d042:	4b30      	ldr	r3, [pc, #192]	; (1d104 <bt_smp_recv+0x13c>)
   1d044:	e7ec      	b.n	1d020 <bt_smp_recv+0x58>
	if (!handlers[hdr->code].func) {
   1d046:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 1d108 <bt_smp_recv+0x140>
   1d04a:	f859 3031 	ldr.w	r3, [r9, r1, lsl #3]
   1d04e:	b99b      	cbnz	r3, 1d078 <bt_smp_recv+0xb0>
		LOG_WRN("Unhandled SMP code 0x%02x", hdr->code);
   1d050:	466c      	mov	r4, sp
   1d052:	b088      	sub	sp, #32
   1d054:	466a      	mov	r2, sp
   1d056:	4b2d      	ldr	r3, [pc, #180]	; (1d10c <bt_smp_recv+0x144>)
   1d058:	4828      	ldr	r0, [pc, #160]	; (1d0fc <bt_smp_recv+0x134>)
   1d05a:	e9c2 3105 	strd	r3, r1, [r2, #20]
   1d05e:	2303      	movs	r3, #3
   1d060:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1d064:	f842 3f10 	str.w	r3, [r2, #16]!
   1d068:	f015 fcfe 	bl	32a68 <z_log_msg_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   1d06c:	2107      	movs	r1, #7
   1d06e:	46a5      	mov	sp, r4
		smp_error(smp, err);
   1d070:	4628      	mov	r0, r5
   1d072:	f7ff ff4f 	bl	1cf14 <smp_error>
   1d076:	e7ba      	b.n	1cfee <bt_smp_recv+0x26>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   1d078:	4628      	mov	r0, r5
   1d07a:	f015 fd05 	bl	32a88 <atomic_test_and_clear_bit>
   1d07e:	f898 3000 	ldrb.w	r3, [r8]
   1d082:	b9b0      	cbnz	r0, 1d0b2 <bt_smp_recv+0xea>
		LOG_WRN("Unexpected SMP code 0x%02x", hdr->code);
   1d084:	46e8      	mov	r8, sp
   1d086:	b088      	sub	sp, #32
   1d088:	466a      	mov	r2, sp
   1d08a:	2603      	movs	r6, #3
   1d08c:	4920      	ldr	r1, [pc, #128]	; (1d110 <bt_smp_recv+0x148>)
   1d08e:	481b      	ldr	r0, [pc, #108]	; (1d0fc <bt_smp_recv+0x134>)
   1d090:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1d094:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1d098:	f842 6f10 	str.w	r6, [r2, #16]!
   1d09c:	f015 fce4 	bl	32a68 <z_log_msg_static_create.constprop.0>
	return atomic_test_bit(smp->flags, SMP_FLAG_PAIRING);
   1d0a0:	4631      	mov	r1, r6
   1d0a2:	46c5      	mov	sp, r8
   1d0a4:	4620      	mov	r0, r4
   1d0a6:	f015 fca6 	bl	329f6 <atomic_test_bit>
		if (is_in_pairing_procedure(smp)) {
   1d0aa:	2800      	cmp	r0, #0
   1d0ac:	d09f      	beq.n	1cfee <bt_smp_recv+0x26>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1d0ae:	2108      	movs	r1, #8
   1d0b0:	e7de      	b.n	1d070 <bt_smp_recv+0xa8>
	if (buf->len != handlers[hdr->code].expect_len) {
   1d0b2:	eb09 02c3 	add.w	r2, r9, r3, lsl #3
   1d0b6:	8a31      	ldrh	r1, [r6, #16]
   1d0b8:	7912      	ldrb	r2, [r2, #4]
   1d0ba:	428a      	cmp	r2, r1
   1d0bc:	d011      	beq.n	1d0e2 <bt_smp_recv+0x11a>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1d0be:	466c      	mov	r4, sp
   1d0c0:	b088      	sub	sp, #32
   1d0c2:	466a      	mov	r2, sp
   1d0c4:	61d3      	str	r3, [r2, #28]
   1d0c6:	2304      	movs	r3, #4
   1d0c8:	4812      	ldr	r0, [pc, #72]	; (1d114 <bt_smp_recv+0x14c>)
   1d0ca:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1d0ce:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1d0d2:	480a      	ldr	r0, [pc, #40]	; (1d0fc <bt_smp_recv+0x134>)
   1d0d4:	f842 3f10 	str.w	r3, [r2, #16]!
   1d0d8:	f015 fcc6 	bl	32a68 <z_log_msg_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   1d0dc:	210a      	movs	r1, #10
   1d0de:	46a5      	mov	sp, r4
   1d0e0:	e7c6      	b.n	1d070 <bt_smp_recv+0xa8>
	err = handlers[hdr->code].func(smp, buf);
   1d0e2:	4631      	mov	r1, r6
   1d0e4:	4628      	mov	r0, r5
   1d0e6:	f859 3033 	ldr.w	r3, [r9, r3, lsl #3]
   1d0ea:	4798      	blx	r3
	if (err) {
   1d0ec:	4601      	mov	r1, r0
   1d0ee:	2800      	cmp	r0, #0
   1d0f0:	f43f af7d 	beq.w	1cfee <bt_smp_recv+0x26>
   1d0f4:	e7bc      	b.n	1d070 <bt_smp_recv+0xa8>
   1d0f6:	bf00      	nop
   1d0f8:	0003d7d8 	.word	0x0003d7d8
   1d0fc:	00037930 	.word	0x00037930
   1d100:	0003d7f3 	.word	0x0003d7f3
   1d104:	0003d824 	.word	0x0003d824
   1d108:	00038360 	.word	0x00038360
   1d10c:	0003d846 	.word	0x0003d846
   1d110:	0003d860 	.word	0x0003d860
   1d114:	0003cde6 	.word	0x0003cde6

0001d118 <bt_smp_pkey_ready>:
{
   1d118:	b510      	push	{r4, lr}
	sc_public_key = pkey;
   1d11a:	4b17      	ldr	r3, [pc, #92]	; (1d178 <bt_smp_pkey_ready+0x60>)
{
   1d11c:	b086      	sub	sp, #24
	sc_public_key = pkey;
   1d11e:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   1d120:	b958      	cbnz	r0, 1d13a <bt_smp_pkey_ready+0x22>
		LOG_WRN("Public key not available");
   1d122:	4b16      	ldr	r3, [pc, #88]	; (1d17c <bt_smp_pkey_ready+0x64>)
   1d124:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1d128:	9305      	str	r3, [sp, #20]
   1d12a:	2302      	movs	r3, #2
   1d12c:	4814      	ldr	r0, [pc, #80]	; (1d180 <bt_smp_pkey_ready+0x68>)
   1d12e:	aa04      	add	r2, sp, #16
   1d130:	9304      	str	r3, [sp, #16]
   1d132:	f015 fc99 	bl	32a68 <z_log_msg_static_create.constprop.0>
}
   1d136:	b006      	add	sp, #24
   1d138:	bd10      	pop	{r4, pc}
	z_impl_k_sem_give(sem);
   1d13a:	4812      	ldr	r0, [pc, #72]	; (1d184 <bt_smp_pkey_ready+0x6c>)
   1d13c:	f00c fab4 	bl	296a8 <z_impl_k_sem_give>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d140:	4c11      	ldr	r4, [pc, #68]	; (1d188 <bt_smp_pkey_ready+0x70>)
   1d142:	e8d4 3faf 	lda	r3, [r4]
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   1d146:	065b      	lsls	r3, r3, #25
   1d148:	d5f5      	bpl.n	1d136 <bt_smp_pkey_ready+0x1e>
		    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1d14a:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
   1d14e:	3c04      	subs	r4, #4
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1d150:	78db      	ldrb	r3, [r3, #3]
   1d152:	2b00      	cmp	r3, #0
   1d154:	d1ef      	bne.n	1d136 <bt_smp_pkey_ready+0x1e>
			err = sc_send_public_key(smp);
   1d156:	4620      	mov	r0, r4
   1d158:	f7ff faa6 	bl	1c6a8 <sc_send_public_key>
			if (err) {
   1d15c:	4601      	mov	r1, r0
   1d15e:	b110      	cbz	r0, 1d166 <bt_smp_pkey_ready+0x4e>
				smp_error(smp, err);
   1d160:	4620      	mov	r0, r4
   1d162:	f7ff fed7 	bl	1cf14 <smp_error>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d166:	e8d4 3fef 	ldaex	r3, [r4]
   1d16a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   1d16e:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1d172:	2a00      	cmp	r2, #0
   1d174:	d0df      	beq.n	1d136 <bt_smp_pkey_ready+0x1e>
   1d176:	e7f6      	b.n	1d166 <bt_smp_pkey_ready+0x4e>
   1d178:	2000e788 	.word	0x2000e788
   1d17c:	0003d87b 	.word	0x0003d87b
   1d180:	00037930 	.word	0x00037930
   1d184:	2000cf70 	.word	0x2000cf70
   1d188:	2000db5c 	.word	0x2000db5c

0001d18c <smp_ident_addr_info>:
{
   1d18c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d190:	b086      	sub	sp, #24
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1d192:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   1d196:	f8d1 800c 	ldr.w	r8, [r1, #12]
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1d19a:	f023 0302 	bic.w	r3, r3, #2
   1d19e:	f880 30e9 	strb.w	r3, [r0, #233]	; 0xe9
	struct bt_conn *conn = smp->chan.chan.conn;
   1d1a2:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1d1a6:	f898 3000 	ldrb.w	r3, [r8]
{
   1d1aa:	4604      	mov	r4, r0
   1d1ac:	af00      	add	r7, sp, #0
		LOG_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1d1ae:	f105 0990 	add.w	r9, r5, #144	; 0x90
   1d1b2:	b3ab      	cbz	r3, 1d220 <smp_ident_addr_info+0x94>
	if (!bt_addr_le_is_identity(&req->addr)) {
   1d1b4:	f898 3006 	ldrb.w	r3, [r8, #6]
   1d1b8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1d1bc:	2bc0      	cmp	r3, #192	; 0xc0
   1d1be:	d02f      	beq.n	1d220 <smp_ident_addr_info+0x94>
		LOG_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   1d1c0:	4640      	mov	r0, r8
   1d1c2:	f7f6 fb17 	bl	137f4 <bt_addr_le_str>
   1d1c6:	466e      	mov	r6, sp
   1d1c8:	b088      	sub	sp, #32
   1d1ca:	466c      	mov	r4, sp
   1d1cc:	f44f 7a00 	mov.w	sl, #512	; 0x200
   1d1d0:	4625      	mov	r5, r4
   1d1d2:	4b6b      	ldr	r3, [pc, #428]	; (1d380 <smp_ident_addr_info+0x1f4>)
   1d1d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 1d384 <smp_ident_addr_info+0x1f8>
   1d1d8:	e9c4 3005 	strd	r3, r0, [r4, #20]
   1d1dc:	f8a4 a01c 	strh.w	sl, [r4, #28]
   1d1e0:	f845 8f10 	str.w	r8, [r5, #16]!
   1d1e4:	462a      	mov	r2, r5
   1d1e6:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1d1ea:	4867      	ldr	r0, [pc, #412]	; (1d388 <smp_ident_addr_info+0x1fc>)
   1d1ec:	f015 fc3c 	bl	32a68 <z_log_msg_static_create.constprop.0>
		LOG_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1d1f0:	4648      	mov	r0, r9
   1d1f2:	46b5      	mov	sp, r6
   1d1f4:	f7f6 fafe 	bl	137f4 <bt_addr_le_str>
   1d1f8:	46a5      	mov	sp, r4
   1d1fa:	4b64      	ldr	r3, [pc, #400]	; (1d38c <smp_ident_addr_info+0x200>)
   1d1fc:	462a      	mov	r2, r5
   1d1fe:	e9c4 3005 	strd	r3, r0, [r4, #20]
   1d202:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1d206:	4860      	ldr	r0, [pc, #384]	; (1d388 <smp_ident_addr_info+0x1fc>)
   1d208:	f8a4 a01c 	strh.w	sl, [r4, #28]
   1d20c:	f8c4 8010 	str.w	r8, [r4, #16]
   1d210:	f015 fc2a 	bl	32a68 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_INVALID_PARAMS;
   1d214:	200a      	movs	r0, #10
   1d216:	46b5      	mov	sp, r6
}
   1d218:	3718      	adds	r7, #24
   1d21a:	46bd      	mov	sp, r7
   1d21c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return memcmp(a, b, sizeof(*a));
   1d220:	2207      	movs	r2, #7
   1d222:	4641      	mov	r1, r8
   1d224:	4648      	mov	r0, r9
   1d226:	f019 f96f 	bl	36508 <memcmp>
	if (!bt_addr_le_eq(&conn->le.dst, &req->addr)) {
   1d22a:	b168      	cbz	r0, 1d248 <smp_ident_addr_info+0xbc>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   1d22c:	4641      	mov	r1, r8
   1d22e:	7a28      	ldrb	r0, [r5, #8]
   1d230:	f000 fbdc 	bl	1d9ec <bt_keys_find_addr>
		if (keys) {
   1d234:	4606      	mov	r6, r0
   1d236:	b138      	cbz	r0, 1d248 <smp_ident_addr_info+0xbc>
			if (!update_keys_check(smp, keys)) {
   1d238:	4601      	mov	r1, r0
   1d23a:	4620      	mov	r0, r4
   1d23c:	f015 fbe1 	bl	32a02 <update_keys_check>
   1d240:	b320      	cbz	r0, 1d28c <smp_ident_addr_info+0x100>
			bt_keys_clear(keys);
   1d242:	4630      	mov	r0, r6
   1d244:	f000 fc34 	bl	1dab0 <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1d248:	210d      	movs	r1, #13
   1d24a:	1d20      	adds	r0, r4, #4
   1d24c:	f015 fbd3 	bl	329f6 <atomic_test_bit>
   1d250:	2800      	cmp	r0, #0
   1d252:	d078      	beq.n	1d346 <smp_ident_addr_info+0x1ba>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1d254:	464a      	mov	r2, r9
   1d256:	2002      	movs	r0, #2
   1d258:	7a29      	ldrb	r1, [r5, #8]
   1d25a:	f000 fc05 	bl	1da68 <bt_keys_get_type>
		if (!keys) {
   1d25e:	4606      	mov	r6, r0
   1d260:	b9b0      	cbnz	r0, 1d290 <smp_ident_addr_info+0x104>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1d262:	4648      	mov	r0, r9
   1d264:	f7f6 fac6 	bl	137f4 <bt_addr_le_str>
   1d268:	466c      	mov	r4, sp
   1d26a:	b088      	sub	sp, #32
   1d26c:	466a      	mov	r2, sp
   1d26e:	4b48      	ldr	r3, [pc, #288]	; (1d390 <smp_ident_addr_info+0x204>)
   1d270:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1d274:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1d278:	f44f 7300 	mov.w	r3, #512	; 0x200
   1d27c:	8393      	strh	r3, [r2, #28]
   1d27e:	4b41      	ldr	r3, [pc, #260]	; (1d384 <smp_ident_addr_info+0x1f8>)
   1d280:	4841      	ldr	r0, [pc, #260]	; (1d388 <smp_ident_addr_info+0x1fc>)
   1d282:	f842 3f10 	str.w	r3, [r2, #16]!
   1d286:	f015 fbef 	bl	32a68 <z_log_msg_static_create.constprop.0>
   1d28a:	46a5      	mov	sp, r4
				return BT_SMP_ERR_UNSPECIFIED;
   1d28c:	2008      	movs	r0, #8
   1d28e:	e7c3      	b.n	1d218 <smp_ident_addr_info+0x8c>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1d290:	78eb      	ldrb	r3, [r5, #3]
   1d292:	bb9b      	cbnz	r3, 1d2fc <smp_ident_addr_info+0x170>
			dst = &conn->le.resp_addr;
   1d294:	f105 039e 	add.w	r3, r5, #158	; 0x9e
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1d298:	781a      	ldrb	r2, [r3, #0]
   1d29a:	2a01      	cmp	r2, #1
   1d29c:	d11e      	bne.n	1d2dc <smp_ident_addr_info+0x150>
		if (bt_addr_le_is_rpa(dst)) {
   1d29e:	799a      	ldrb	r2, [r3, #6]
   1d2a0:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   1d2a4:	2a40      	cmp	r2, #64	; 0x40
   1d2a6:	d119      	bne.n	1d2dc <smp_ident_addr_info+0x150>
   1d2a8:	f8d3 2001 	ldr.w	r2, [r3, #1]
   1d2ac:	f8c6 203a 	str.w	r2, [r6, #58]	; 0x3a
   1d2b0:	f8b3 3005 	ldrh.w	r3, [r3, #5]
   1d2b4:	87f3      	strh	r3, [r6, #62]	; 0x3e
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1d2b6:	f895 3090 	ldrb.w	r3, [r5, #144]	; 0x90
   1d2ba:	b17b      	cbz	r3, 1d2dc <smp_ident_addr_info+0x150>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   1d2bc:	f895 3096 	ldrb.w	r3, [r5, #150]	; 0x96
   1d2c0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1d2c4:	2bc0      	cmp	r3, #192	; 0xc0
   1d2c6:	d009      	beq.n	1d2dc <smp_ident_addr_info+0x150>
				bt_addr_le_copy(&keys->addr, &req->addr);
   1d2c8:	4641      	mov	r1, r8
   1d2ca:	1c70      	adds	r0, r6, #1
   1d2cc:	f015 fbc5 	bl	32a5a <bt_addr_le_copy>
				bt_addr_le_copy(&conn->le.dst, &req->addr);
   1d2d0:	4648      	mov	r0, r9
   1d2d2:	f015 fbc2 	bl	32a5a <bt_addr_le_copy>
				bt_conn_identity_resolved(conn);
   1d2d6:	4628      	mov	r0, r5
   1d2d8:	f7f9 ff28 	bl	1712c <bt_conn_identity_resolved>
	__ASSERT_NO_MSG(!(smp->remote_dist & BT_SMP_DIST_ID_KEY));
   1d2dc:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1d2e0:	079a      	lsls	r2, r3, #30
   1d2e2:	d50e      	bpl.n	1d302 <smp_ident_addr_info+0x176>
   1d2e4:	492b      	ldr	r1, [pc, #172]	; (1d394 <smp_ident_addr_info+0x208>)
   1d2e6:	f640 63b8 	movw	r3, #3768	; 0xeb8
   1d2ea:	4a2b      	ldr	r2, [pc, #172]	; (1d398 <smp_ident_addr_info+0x20c>)
   1d2ec:	482b      	ldr	r0, [pc, #172]	; (1d39c <smp_ident_addr_info+0x210>)
   1d2ee:	f012 f869 	bl	2f3c4 <assert_print>
   1d2f2:	f640 61b8 	movw	r1, #3768	; 0xeb8
	__ASSERT_NO_MSG(!bt_id_find_conflict(new_bond));
   1d2f6:	4828      	ldr	r0, [pc, #160]	; (1d398 <smp_ident_addr_info+0x20c>)
   1d2f8:	f012 f85d 	bl	2f3b6 <assert_post_action>
			dst = &conn->le.init_addr;
   1d2fc:	f105 0397 	add.w	r3, r5, #151	; 0x97
   1d300:	e7ca      	b.n	1d298 <smp_ident_addr_info+0x10c>
	conflict = bt_id_find_conflict(new_bond);
   1d302:	4630      	mov	r0, r6
   1d304:	f7f8 fadc 	bl	158c0 <bt_id_find_conflict>
	if (conflict && !IS_ENABLED(CONFIG_BT_ID_UNPAIR_MATCHING_BONDS)) {
   1d308:	b160      	cbz	r0, 1d324 <smp_ident_addr_info+0x198>
		LOG_WRN("Refusing new pairing. The old bond must be unpaired first.");
   1d30a:	4b25      	ldr	r3, [pc, #148]	; (1d3a0 <smp_ident_addr_info+0x214>)
   1d30c:	481e      	ldr	r0, [pc, #120]	; (1d388 <smp_ident_addr_info+0x1fc>)
   1d30e:	617b      	str	r3, [r7, #20]
   1d310:	2302      	movs	r3, #2
   1d312:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1d316:	f107 0210 	add.w	r2, r7, #16
   1d31a:	613b      	str	r3, [r7, #16]
   1d31c:	f015 fba4 	bl	32a68 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1d320:	2003      	movs	r0, #3
   1d322:	e779      	b.n	1d218 <smp_ident_addr_info+0x8c>
	__ASSERT_NO_MSG(!bt_id_find_conflict(new_bond));
   1d324:	4630      	mov	r0, r6
   1d326:	f7f8 facb 	bl	158c0 <bt_id_find_conflict>
   1d32a:	b148      	cbz	r0, 1d340 <smp_ident_addr_info+0x1b4>
   1d32c:	491d      	ldr	r1, [pc, #116]	; (1d3a4 <smp_ident_addr_info+0x218>)
   1d32e:	f640 63d4 	movw	r3, #3796	; 0xed4
   1d332:	4a19      	ldr	r2, [pc, #100]	; (1d398 <smp_ident_addr_info+0x20c>)
   1d334:	4819      	ldr	r0, [pc, #100]	; (1d39c <smp_ident_addr_info+0x210>)
   1d336:	f012 f845 	bl	2f3c4 <assert_print>
   1d33a:	f640 61d4 	movw	r1, #3796	; 0xed4
   1d33e:	e7da      	b.n	1d2f6 <smp_ident_addr_info+0x16a>
	bt_id_add(new_bond);
   1d340:	4630      	mov	r0, r6
   1d342:	f7f8 facd 	bl	158e0 <bt_id_add>
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1d346:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1d34a:	075b      	lsls	r3, r3, #29
   1d34c:	d503      	bpl.n	1d356 <smp_ident_addr_info+0x1ca>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1d34e:	210a      	movs	r1, #10
   1d350:	4620      	mov	r0, r4
   1d352:	f015 fbab 	bl	32aac <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1d356:	78eb      	ldrb	r3, [r5, #3]
   1d358:	b123      	cbz	r3, 1d364 <smp_ident_addr_info+0x1d8>
	if (!smp->local_dist && !smp->remote_dist) {
   1d35a:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   1d35e:	b159      	cbz	r1, 1d378 <smp_ident_addr_info+0x1ec>
	return 0;
   1d360:	2000      	movs	r0, #0
   1d362:	e759      	b.n	1d218 <smp_ident_addr_info+0x8c>
	    conn->role == BT_HCI_ROLE_CENTRAL && !smp->remote_dist) {
   1d364:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1d368:	2b00      	cmp	r3, #0
   1d36a:	d1f6      	bne.n	1d35a <smp_ident_addr_info+0x1ce>
		err = bt_smp_distribute_keys(smp);
   1d36c:	4620      	mov	r0, r4
   1d36e:	f7fe fe07 	bl	1bf80 <bt_smp_distribute_keys>
		if (err) {
   1d372:	2800      	cmp	r0, #0
   1d374:	d0f1      	beq.n	1d35a <smp_ident_addr_info+0x1ce>
   1d376:	e74f      	b.n	1d218 <smp_ident_addr_info+0x8c>
		smp_pairing_complete(smp, 0);
   1d378:	4620      	mov	r0, r4
   1d37a:	f7ff fd2d 	bl	1cdd8 <smp_pairing_complete>
   1d37e:	e7ef      	b.n	1d360 <smp_ident_addr_info+0x1d4>
   1d380:	0003d894 	.word	0x0003d894
   1d384:	01000003 	.word	0x01000003
   1d388:	00037930 	.word	0x00037930
   1d38c:	0003d5ef 	.word	0x0003d5ef
   1d390:	0003d5c8 	.word	0x0003d5c8
   1d394:	0003d8d7 	.word	0x0003d8d7
   1d398:	0003d8a8 	.word	0x0003d8a8
   1d39c:	00039995 	.word	0x00039995
   1d3a0:	0003d8f2 	.word	0x0003d8f2
   1d3a4:	0003d92d 	.word	0x0003d92d

0001d3a8 <smp_central_ident>:
{
   1d3a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d3ac:	460b      	mov	r3, r1
   1d3ae:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1d3b0:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
{
   1d3b4:	af00      	add	r7, sp, #0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1d3b6:	210d      	movs	r1, #13
   1d3b8:	3004      	adds	r0, #4
   1d3ba:	f015 fb1c 	bl	329f6 <atomic_test_bit>
   1d3be:	b350      	cbz	r0, 1d416 <smp_central_ident+0x6e>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1d3c0:	f105 0890 	add.w	r8, r5, #144	; 0x90
   1d3c4:	4642      	mov	r2, r8
   1d3c6:	2004      	movs	r0, #4
   1d3c8:	7a29      	ldrb	r1, [r5, #8]
		struct bt_smp_central_ident *req = (void *)buf->data;
   1d3ca:	68de      	ldr	r6, [r3, #12]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1d3cc:	f000 fb4c 	bl	1da68 <bt_keys_get_type>
		if (!keys) {
   1d3d0:	b9c0      	cbnz	r0, 1d404 <smp_central_ident+0x5c>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1d3d2:	4640      	mov	r0, r8
   1d3d4:	f7f6 fa0e 	bl	137f4 <bt_addr_le_str>
   1d3d8:	466c      	mov	r4, sp
   1d3da:	b088      	sub	sp, #32
   1d3dc:	466a      	mov	r2, sp
   1d3de:	4b20      	ldr	r3, [pc, #128]	; (1d460 <smp_central_ident+0xb8>)
   1d3e0:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1d3e4:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1d3e8:	f44f 7300 	mov.w	r3, #512	; 0x200
   1d3ec:	8393      	strh	r3, [r2, #28]
   1d3ee:	4b1d      	ldr	r3, [pc, #116]	; (1d464 <smp_central_ident+0xbc>)
   1d3f0:	481d      	ldr	r0, [pc, #116]	; (1d468 <smp_central_ident+0xc0>)
   1d3f2:	f842 3f10 	str.w	r3, [r2, #16]!
   1d3f6:	f015 fb37 	bl	32a68 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1d3fa:	2008      	movs	r0, #8
   1d3fc:	46a5      	mov	sp, r4
}
   1d3fe:	46bd      	mov	sp, r7
   1d400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d404:	4632      	mov	r2, r6
   1d406:	f832 3b02 	ldrh.w	r3, [r2], #2
   1d40a:	8303      	strh	r3, [r0, #24]
   1d40c:	f8d6 3002 	ldr.w	r3, [r6, #2]
   1d410:	6103      	str	r3, [r0, #16]
   1d412:	6853      	ldr	r3, [r2, #4]
   1d414:	6143      	str	r3, [r0, #20]
	smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   1d416:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1d41a:	f023 0201 	bic.w	r2, r3, #1
   1d41e:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1d422:	079a      	lsls	r2, r3, #30
   1d424:	d50a      	bpl.n	1d43c <smp_central_ident+0x94>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1d426:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1d428:	4620      	mov	r0, r4
   1d42a:	f015 fb3f 	bl	32aac <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1d42e:	78eb      	ldrb	r3, [r5, #3]
   1d430:	b143      	cbz	r3, 1d444 <smp_central_ident+0x9c>
	if (!smp->local_dist && !smp->remote_dist) {
   1d432:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   1d436:	b179      	cbz	r1, 1d458 <smp_central_ident+0xb0>
	return 0;
   1d438:	2000      	movs	r0, #0
   1d43a:	e7e0      	b.n	1d3fe <smp_central_ident+0x56>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1d43c:	075b      	lsls	r3, r3, #29
   1d43e:	d5f6      	bpl.n	1d42e <smp_central_ident+0x86>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1d440:	210a      	movs	r1, #10
   1d442:	e7f1      	b.n	1d428 <smp_central_ident+0x80>
	    conn->role == BT_HCI_ROLE_CENTRAL && !smp->remote_dist) {
   1d444:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1d448:	2b00      	cmp	r3, #0
   1d44a:	d1f2      	bne.n	1d432 <smp_central_ident+0x8a>
		err = bt_smp_distribute_keys(smp);
   1d44c:	4620      	mov	r0, r4
   1d44e:	f7fe fd97 	bl	1bf80 <bt_smp_distribute_keys>
		if (err) {
   1d452:	2800      	cmp	r0, #0
   1d454:	d0ed      	beq.n	1d432 <smp_central_ident+0x8a>
   1d456:	e7d2      	b.n	1d3fe <smp_central_ident+0x56>
		smp_pairing_complete(smp, 0);
   1d458:	4620      	mov	r0, r4
   1d45a:	f7ff fcbd 	bl	1cdd8 <smp_pairing_complete>
   1d45e:	e7eb      	b.n	1d438 <smp_central_ident+0x90>
   1d460:	0003d5c8 	.word	0x0003d5c8
   1d464:	01000003 	.word	0x01000003
   1d468:	00037930 	.word	0x00037930

0001d46c <smp_pairing_failed>:
{
   1d46c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d470:	460e      	mov	r6, r1
   1d472:	af00      	add	r7, sp, #0
   1d474:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1d476:	f8d0 80ec 	ldr.w	r8, [r0, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d47a:	f7fe fb9b 	bl	1bbb4 <latch_auth_cb>
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   1d47e:	68f6      	ldr	r6, [r6, #12]
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   1d480:	46e9      	mov	r9, sp
   1d482:	b088      	sub	sp, #32
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d484:	4605      	mov	r5, r0
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   1d486:	466a      	mov	r2, sp
   1d488:	7833      	ldrb	r3, [r6, #0]
   1d48a:	4914      	ldr	r1, [pc, #80]	; (1d4dc <smp_pairing_failed+0x70>)
   1d48c:	4814      	ldr	r0, [pc, #80]	; (1d4e0 <smp_pairing_failed+0x74>)
   1d48e:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1d492:	2303      	movs	r3, #3
   1d494:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d498:	f842 3f10 	str.w	r3, [r2, #16]!
   1d49c:	f015 fae4 	bl	32a68 <z_log_msg_static_create.constprop.0>
   1d4a0:	46cd      	mov	sp, r9
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1d4a2:	f104 0904 	add.w	r9, r4, #4
   1d4a6:	210a      	movs	r1, #10
   1d4a8:	4648      	mov	r0, r9
   1d4aa:	f015 faed 	bl	32a88 <atomic_test_and_clear_bit>
   1d4ae:	b140      	cbz	r0, 1d4c2 <smp_pairing_failed+0x56>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   1d4b0:	b975      	cbnz	r5, 1d4d0 <smp_pairing_failed+0x64>
	smp_pairing_complete(smp, req->reason);
   1d4b2:	4620      	mov	r0, r4
   1d4b4:	7831      	ldrb	r1, [r6, #0]
   1d4b6:	f7ff fc8f 	bl	1cdd8 <smp_pairing_complete>
}
   1d4ba:	2000      	movs	r0, #0
   1d4bc:	46bd      	mov	sp, r7
   1d4be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   1d4c2:	210b      	movs	r1, #11
   1d4c4:	4648      	mov	r0, r9
   1d4c6:	f015 fadf 	bl	32a88 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1d4ca:	2800      	cmp	r0, #0
   1d4cc:	d1f0      	bne.n	1d4b0 <smp_pairing_failed+0x44>
   1d4ce:	e7f0      	b.n	1d4b2 <smp_pairing_failed+0x46>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   1d4d0:	692b      	ldr	r3, [r5, #16]
   1d4d2:	2b00      	cmp	r3, #0
   1d4d4:	d0ed      	beq.n	1d4b2 <smp_pairing_failed+0x46>
			smp_auth_cb->cancel(conn);
   1d4d6:	4640      	mov	r0, r8
   1d4d8:	4798      	blx	r3
   1d4da:	e7ea      	b.n	1d4b2 <smp_pairing_failed+0x46>
   1d4dc:	0003d94c 	.word	0x0003d94c
   1d4e0:	00037930 	.word	0x00037930

0001d4e4 <bt_smp_encrypt_change>:
{
   1d4e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->conn;
   1d4e8:	4605      	mov	r5, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1d4ea:	f1a0 06e8 	sub.w	r6, r0, #232	; 0xe8
{
   1d4ee:	4604      	mov	r4, r0
   1d4f0:	460f      	mov	r7, r1
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1d4f2:	4630      	mov	r0, r6
   1d4f4:	2101      	movs	r1, #1
	struct bt_conn *conn = chan->conn;
   1d4f6:	f855 89ec 	ldr.w	r8, [r5], #-236
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1d4fa:	f015 fac5 	bl	32a88 <atomic_test_and_clear_bit>
   1d4fe:	2800      	cmp	r0, #0
   1d500:	d061      	beq.n	1d5c6 <bt_smp_encrypt_change+0xe2>
	if (hci_status) {
   1d502:	b1df      	cbz	r7, 1d53c <bt_smp_encrypt_change+0x58>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1d504:	2103      	movs	r1, #3
   1d506:	4630      	mov	r0, r6
   1d508:	f015 fa75 	bl	329f6 <atomic_test_bit>
   1d50c:	2800      	cmp	r0, #0
   1d50e:	d05a      	beq.n	1d5c6 <bt_smp_encrypt_change+0xe2>
			uint8_t smp_err = smp_err_get(
   1d510:	4638      	mov	r0, r7
   1d512:	f7f7 fa8d 	bl	14a30 <bt_security_err_get>
	switch (auth_err) {
   1d516:	3801      	subs	r0, #1
   1d518:	b2c0      	uxtb	r0, r0
   1d51a:	2808      	cmp	r0, #8
			uint8_t smp_err = smp_err_get(
   1d51c:	bf8c      	ite	hi
   1d51e:	2400      	movhi	r4, #0
   1d520:	4b2e      	ldrls	r3, [pc, #184]	; (1d5dc <bt_smp_encrypt_change+0xf8>)
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1d522:	f04f 0102 	mov.w	r1, #2
   1d526:	bf98      	it	ls
   1d528:	5c1c      	ldrbls	r4, [r3, r0]
   1d52a:	4630      	mov	r0, r6
   1d52c:	f015 fabe 	bl	32aac <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   1d530:	4621      	mov	r1, r4
		smp_pairing_complete(smp, 0);
   1d532:	4628      	mov	r0, r5
}
   1d534:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_pairing_complete(smp, 0);
   1d538:	f7ff bc4e 	b.w	1cdd8 <smp_pairing_complete>
	if (!conn->encrypt) {
   1d53c:	f898 300b 	ldrb.w	r3, [r8, #11]
   1d540:	2b00      	cmp	r3, #0
   1d542:	d040      	beq.n	1d5c6 <bt_smp_encrypt_change+0xe2>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1d544:	2103      	movs	r1, #3
   1d546:	4630      	mov	r0, r6
   1d548:	f015 fa55 	bl	329f6 <atomic_test_bit>
   1d54c:	b920      	cbnz	r0, 1d558 <bt_smp_encrypt_change+0x74>
		smp_reset(smp);
   1d54e:	4628      	mov	r0, r5
}
   1d550:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_reset(smp);
   1d554:	f015 bb17 	b.w	32b86 <smp_reset>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1d558:	2105      	movs	r1, #5
   1d55a:	4630      	mov	r0, r6
   1d55c:	f015 fa4b 	bl	329f6 <atomic_test_bit>
   1d560:	b1b8      	cbz	r0, 1d592 <bt_smp_encrypt_change+0xae>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   1d562:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1d566:	071f      	lsls	r7, r3, #28
   1d568:	d507      	bpl.n	1d57a <bt_smp_encrypt_change+0x96>
   1d56a:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   1d56e:	0718      	lsls	r0, r3, #28
   1d570:	d503      	bpl.n	1d57a <bt_smp_encrypt_change+0x96>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   1d572:	2111      	movs	r1, #17
   1d574:	4630      	mov	r0, r6
   1d576:	f015 fa99 	bl	32aac <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   1d57a:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1d57e:	f023 0308 	bic.w	r3, r3, #8
   1d582:	f804 3c04 	strb.w	r3, [r4, #-4]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   1d586:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   1d58a:	f023 0308 	bic.w	r3, r3, #8
   1d58e:	f804 3c03 	strb.w	r3, [r4, #-3]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   1d592:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   1d596:	07d9      	lsls	r1, r3, #31
   1d598:	d517      	bpl.n	1d5ca <bt_smp_encrypt_change+0xe6>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   1d59a:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1d59c:	4628      	mov	r0, r5
   1d59e:	f015 fa85 	bl	32aac <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1d5a2:	2102      	movs	r1, #2
   1d5a4:	4630      	mov	r0, r6
   1d5a6:	f015 fa81 	bl	32aac <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1d5aa:	f898 3003 	ldrb.w	r3, [r8, #3]
   1d5ae:	b913      	cbnz	r3, 1d5b6 <bt_smp_encrypt_change+0xd2>
	    conn->role == BT_HCI_ROLE_CENTRAL && smp->remote_dist) {
   1d5b0:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   1d5b4:	b93b      	cbnz	r3, 1d5c6 <bt_smp_encrypt_change+0xe2>
	if (bt_smp_distribute_keys(smp)) {
   1d5b6:	4628      	mov	r0, r5
   1d5b8:	f7fe fce2 	bl	1bf80 <bt_smp_distribute_keys>
   1d5bc:	b918      	cbnz	r0, 1d5c6 <bt_smp_encrypt_change+0xe2>
	if (!smp->local_dist && !smp->remote_dist) {
   1d5be:	f834 1c04 	ldrh.w	r1, [r4, #-4]
   1d5c2:	2900      	cmp	r1, #0
   1d5c4:	d0b5      	beq.n	1d532 <bt_smp_encrypt_change+0x4e>
}
   1d5c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1d5ca:	079a      	lsls	r2, r3, #30
   1d5cc:	d501      	bpl.n	1d5d2 <bt_smp_encrypt_change+0xee>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1d5ce:	2108      	movs	r1, #8
   1d5d0:	e7e4      	b.n	1d59c <bt_smp_encrypt_change+0xb8>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1d5d2:	075b      	lsls	r3, r3, #29
   1d5d4:	d5e5      	bpl.n	1d5a2 <bt_smp_encrypt_change+0xbe>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1d5d6:	210a      	movs	r1, #10
   1d5d8:	e7e0      	b.n	1d59c <bt_smp_encrypt_change+0xb8>
   1d5da:	bf00      	nop
   1d5dc:	0003d999 	.word	0x0003d999

0001d5e0 <smp_timeout>:
{
   1d5e0:	b510      	push	{r4, lr}
   1d5e2:	4604      	mov	r4, r0
   1d5e4:	b086      	sub	sp, #24
	LOG_ERR("SMP Timeout");
   1d5e6:	4b0b      	ldr	r3, [pc, #44]	; (1d614 <smp_timeout+0x34>)
   1d5e8:	aa04      	add	r2, sp, #16
   1d5ea:	9305      	str	r3, [sp, #20]
   1d5ec:	2302      	movs	r3, #2
   1d5ee:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d5f2:	4809      	ldr	r0, [pc, #36]	; (1d618 <smp_timeout+0x38>)
   1d5f4:	9304      	str	r3, [sp, #16]
   1d5f6:	f015 fa37 	bl	32a68 <z_log_msg_static_create.constprop.0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   1d5fa:	f5a4 7090 	sub.w	r0, r4, #288	; 0x120
   1d5fe:	2108      	movs	r1, #8
   1d600:	f7ff fbea 	bl	1cdd8 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1d604:	2104      	movs	r1, #4
   1d606:	f5a4 708e 	sub.w	r0, r4, #284	; 0x11c
}
   1d60a:	b006      	add	sp, #24
   1d60c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1d610:	f015 ba4c 	b.w	32aac <atomic_set_bit>
   1d614:	0003d96e 	.word	0x0003d96e
   1d618:	00037930 	.word	0x00037930

0001d61c <smp_ident_sent>:
{
   1d61c:	b508      	push	{r3, lr}
	if (!err) {
   1d61e:	bb1a      	cbnz	r2, 1d668 <smp_ident_sent+0x4c>
	if (conn->type == BT_CONN_TYPE_LE) {
   1d620:	7883      	ldrb	r3, [r0, #2]
   1d622:	2b01      	cmp	r3, #1
   1d624:	d120      	bne.n	1d668 <smp_ident_sent+0x4c>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   1d626:	2106      	movs	r1, #6
   1d628:	f014 f853 	bl	316d2 <bt_l2cap_le_lookup_tx_cid>
		__ASSERT(chan, "No SMP channel found");
   1d62c:	b970      	cbnz	r0, 1d64c <smp_ident_sent+0x30>
   1d62e:	490f      	ldr	r1, [pc, #60]	; (1d66c <smp_ident_sent+0x50>)
   1d630:	f240 2367 	movw	r3, #615	; 0x267
   1d634:	4a0e      	ldr	r2, [pc, #56]	; (1d670 <smp_ident_sent+0x54>)
   1d636:	480f      	ldr	r0, [pc, #60]	; (1d674 <smp_ident_sent+0x58>)
   1d638:	f011 fec4 	bl	2f3c4 <assert_print>
   1d63c:	480e      	ldr	r0, [pc, #56]	; (1d678 <smp_ident_sent+0x5c>)
   1d63e:	f011 fec1 	bl	2f3c4 <assert_print>
   1d642:	f240 2167 	movw	r1, #615	; 0x267
   1d646:	480a      	ldr	r0, [pc, #40]	; (1d670 <smp_ident_sent+0x54>)
   1d648:	f011 feb5 	bl	2f3b6 <assert_post_action>
		smp->local_dist &= ~dist_complete;
   1d64c:	f810 3c04 	ldrb.w	r3, [r0, #-4]
   1d650:	f023 0301 	bic.w	r3, r3, #1
   1d654:	f800 3c04 	strb.w	r3, [r0, #-4]
		if (!smp->local_dist && !smp->remote_dist) {
   1d658:	f830 1c04 	ldrh.w	r1, [r0, #-4]
   1d65c:	b921      	cbnz	r1, 1d668 <smp_ident_sent+0x4c>
}
   1d65e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			smp_pairing_complete(smp, 0);
   1d662:	38ec      	subs	r0, #236	; 0xec
   1d664:	f7ff bbb8 	b.w	1cdd8 <smp_pairing_complete>
}
   1d668:	bd08      	pop	{r3, pc}
   1d66a:	bf00      	nop
   1d66c:	0003ccb3 	.word	0x0003ccb3
   1d670:	0003d8a8 	.word	0x0003d8a8
   1d674:	00039995 	.word	0x00039995
   1d678:	0003d97a 	.word	0x0003d97a

0001d67c <bt_smp_update_keys>:
{
   1d67c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d680:	af00      	add	r7, sp, #0
   1d682:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   1d684:	f015 f9f3 	bl	32a6e <smp_chan_get>
	if (!smp) {
   1d688:	4605      	mov	r5, r0
   1d68a:	b360      	cbz	r0, 1d6e6 <bt_smp_update_keys+0x6a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1d68c:	1d06      	adds	r6, r0, #4
   1d68e:	2103      	movs	r1, #3
   1d690:	4630      	mov	r0, r6
   1d692:	f015 f9b0 	bl	329f6 <atomic_test_bit>
   1d696:	b330      	cbz	r0, 1d6e6 <bt_smp_update_keys+0x6a>
	if (conn->le.keys) {
   1d698:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1d69c:	b108      	cbz	r0, 1d6a2 <bt_smp_update_keys+0x26>
		bt_keys_clear(conn->le.keys);
   1d69e:	f000 fa07 	bl	1dab0 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1d6a2:	f104 0890 	add.w	r8, r4, #144	; 0x90
   1d6a6:	4641      	mov	r1, r8
   1d6a8:	7a20      	ldrb	r0, [r4, #8]
   1d6aa:	f000 f8e1 	bl	1d870 <bt_keys_get_addr>
   1d6ae:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	if (!conn->le.keys) {
   1d6b2:	b9d8      	cbnz	r0, 1d6ec <bt_smp_update_keys+0x70>
		LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1d6b4:	4640      	mov	r0, r8
   1d6b6:	f7f6 f89d 	bl	137f4 <bt_addr_le_str>
   1d6ba:	466c      	mov	r4, sp
   1d6bc:	b088      	sub	sp, #32
   1d6be:	466a      	mov	r2, sp
   1d6c0:	4b3a      	ldr	r3, [pc, #232]	; (1d7ac <bt_smp_update_keys+0x130>)
   1d6c2:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1d6c6:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1d6ca:	f44f 7300 	mov.w	r3, #512	; 0x200
   1d6ce:	8393      	strh	r3, [r2, #28]
   1d6d0:	4b37      	ldr	r3, [pc, #220]	; (1d7b0 <bt_smp_update_keys+0x134>)
   1d6d2:	4838      	ldr	r0, [pc, #224]	; (1d7b4 <bt_smp_update_keys+0x138>)
   1d6d4:	f842 3f10 	str.w	r3, [r2, #16]!
   1d6d8:	f015 f9c6 	bl	32a68 <z_log_msg_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1d6dc:	2108      	movs	r1, #8
   1d6de:	46a5      	mov	sp, r4
   1d6e0:	4628      	mov	r0, r5
   1d6e2:	f7ff fc17 	bl	1cf14 <smp_error>
}
   1d6e6:	46bd      	mov	sp, r7
   1d6e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   1d6ec:	210e      	movs	r1, #14
   1d6ee:	4630      	mov	r0, r6
   1d6f0:	f015 f981 	bl	329f6 <atomic_test_bit>
   1d6f4:	b128      	cbz	r0, 1d702 <bt_smp_update_keys+0x86>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   1d6f6:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
   1d6fa:	7b53      	ldrb	r3, [r2, #13]
   1d6fc:	f043 0302 	orr.w	r3, r3, #2
   1d700:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   1d702:	7a2a      	ldrb	r2, [r5, #8]
		conn->le.keys->flags |= BT_KEYS_OOB;
   1d704:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
	switch (smp->method) {
   1d708:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_OOB;
   1d70a:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   1d70c:	d83a      	bhi.n	1d784 <bt_smp_update_keys+0x108>
   1d70e:	2a00      	cmp	r2, #0
   1d710:	d03f      	beq.n	1d792 <bt_smp_update_keys+0x116>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   1d712:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
   1d716:	7b53      	ldrb	r3, [r2, #13]
   1d718:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1d71c:	7353      	strb	r3, [r2, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   1d71e:	7d2b      	ldrb	r3, [r5, #20]
   1d720:	7b69      	ldrb	r1, [r5, #13]
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   1d722:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
	return MIN(req->max_key_size, rsp->max_key_size);
   1d726:	428b      	cmp	r3, r1
   1d728:	bf28      	it	cs
   1d72a:	460b      	movcs	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1d72c:	4630      	mov	r0, r6
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   1d72e:	7313      	strb	r3, [r2, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1d730:	2105      	movs	r1, #5
   1d732:	f015 f960 	bl	329f6 <atomic_test_bit>
   1d736:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
		conn->le.keys->flags |= BT_KEYS_SC;
   1d73a:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1d73c:	b390      	cbz	r0, 1d7a4 <bt_smp_update_keys+0x128>
		conn->le.keys->flags |= BT_KEYS_SC;
   1d73e:	f042 0210 	orr.w	r2, r2, #16
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1d742:	210d      	movs	r1, #13
   1d744:	4630      	mov	r0, r6
		conn->le.keys->flags |= BT_KEYS_SC;
   1d746:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1d748:	f015 f955 	bl	329f6 <atomic_test_bit>
   1d74c:	2800      	cmp	r0, #0
   1d74e:	d0ca      	beq.n	1d6e6 <bt_smp_update_keys+0x6a>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   1d750:	2120      	movs	r1, #32
   1d752:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1d756:	f000 f96f 	bl	1da38 <bt_keys_add_type>
   1d75a:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   1d75e:	f105 0247 	add.w	r2, r5, #71	; 0x47
   1d762:	331a      	adds	r3, #26
   1d764:	3557      	adds	r5, #87	; 0x57
   1d766:	f852 1b04 	ldr.w	r1, [r2], #4
   1d76a:	42aa      	cmp	r2, r5
   1d76c:	f843 1b04 	str.w	r1, [r3], #4
   1d770:	d1f9      	bne.n	1d766 <bt_smp_update_keys+0xea>
__ssp_bos_icheck3(memset, void *, int)
   1d772:	2300      	movs	r3, #0
   1d774:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
   1d778:	6113      	str	r3, [r2, #16]
   1d77a:	6153      	str	r3, [r2, #20]
   1d77c:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
   1d780:	8313      	strh	r3, [r2, #24]
   1d782:	e7b0      	b.n	1d6e6 <bt_smp_update_keys+0x6a>
	switch (smp->method) {
   1d784:	3a05      	subs	r2, #5
   1d786:	2a01      	cmp	r2, #1
   1d788:	d803      	bhi.n	1d792 <bt_smp_update_keys+0x116>
		conn->le.keys->flags |= BT_KEYS_OOB;
   1d78a:	f043 0320 	orr.w	r3, r3, #32
   1d78e:	734b      	strb	r3, [r1, #13]
   1d790:	e7bf      	b.n	1d712 <bt_smp_update_keys+0x96>
		conn->le.keys->flags &= ~BT_KEYS_OOB;
   1d792:	f023 0320 	bic.w	r3, r3, #32
   1d796:	734b      	strb	r3, [r1, #13]
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1d798:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
   1d79c:	7b53      	ldrb	r3, [r2, #13]
   1d79e:	f023 0301 	bic.w	r3, r3, #1
   1d7a2:	e7bb      	b.n	1d71c <bt_smp_update_keys+0xa0>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   1d7a4:	f022 0210 	bic.w	r2, r2, #16
   1d7a8:	735a      	strb	r2, [r3, #13]
   1d7aa:	e79c      	b.n	1d6e6 <bt_smp_update_keys+0x6a>
   1d7ac:	0003d5c8 	.word	0x0003d5c8
   1d7b0:	01000003 	.word	0x01000003
   1d7b4:	00037930 	.word	0x00037930

0001d7b8 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   1d7b8:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1d7ba:	4b07      	ldr	r3, [pc, #28]	; (1d7d8 <bt_smp_init+0x20>)
	}

	LOG_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   1d7bc:	4807      	ldr	r0, [pc, #28]	; (1d7dc <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1d7be:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
   1d7c2:	f003 0306 	and.w	r3, r3, #6
   1d7c6:	1f9a      	subs	r2, r3, #6
   1d7c8:	4253      	negs	r3, r2
   1d7ca:	4153      	adcs	r3, r2
   1d7cc:	4a04      	ldr	r2, [pc, #16]	; (1d7e0 <bt_smp_init+0x28>)
   1d7ce:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   1d7d0:	f7f8 fdb2 	bl	16338 <bt_pub_key_gen>
	}

	return smp_self_test();
}
   1d7d4:	2000      	movs	r0, #0
   1d7d6:	bd08      	pop	{r3, pc}
   1d7d8:	2000c580 	.word	0x2000c580
   1d7dc:	2000c928 	.word	0x2000c928
   1d7e0:	2000f209 	.word	0x2000f209

0001d7e4 <id_add>:
#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
	return 0;
}

static void id_add(struct bt_keys *keys, void *user_data)
{
   1d7e4:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(keys != NULL);
   1d7e6:	b958      	cbnz	r0, 1d800 <id_add+0x1c>
   1d7e8:	4907      	ldr	r1, [pc, #28]	; (1d808 <id_add+0x24>)
   1d7ea:	4808      	ldr	r0, [pc, #32]	; (1d80c <id_add+0x28>)
   1d7ec:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
   1d7f0:	4a07      	ldr	r2, [pc, #28]	; (1d810 <id_add+0x2c>)
   1d7f2:	f011 fde7 	bl	2f3c4 <assert_print>
   1d7f6:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   1d7fa:	4805      	ldr	r0, [pc, #20]	; (1d810 <id_add+0x2c>)
   1d7fc:	f011 fddb 	bl	2f3b6 <assert_post_action>

	bt_id_add(keys);
}
   1d800:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_id_add(keys);
   1d804:	f7f8 b86c 	b.w	158e0 <bt_id_add>
   1d808:	0003da1a 	.word	0x0003da1a
   1d80c:	00039995 	.word	0x00039995
   1d810:	0003d9ea 	.word	0x0003d9ea

0001d814 <bt_keys_get_addr.part.0>:
struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
   1d814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   1d818:	4f12      	ldr	r7, [pc, #72]	; (1d864 <bt_keys_get_addr.part.0+0x50>)
struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
   1d81a:	4605      	mov	r5, r0
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   1d81c:	463e      	mov	r6, r7
   1d81e:	f816 3b01 	ldrb.w	r3, [r6], #1
struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
   1d822:	460c      	mov	r4, r1
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   1d824:	4283      	cmp	r3, r0
	size_t first_free_slot = ARRAY_SIZE(key_pool);
   1d826:	f04f 0801 	mov.w	r8, #1
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   1d82a:	d104      	bne.n	1d836 <bt_keys_get_addr.part.0+0x22>
	return memcmp(a, b, sizeof(*a));
   1d82c:	2207      	movs	r2, #7
   1d82e:	4630      	mov	r0, r6
   1d830:	f018 fe6a 	bl	36508 <memcmp>
   1d834:	b188      	cbz	r0, 1d85a <bt_keys_get_addr.part.0+0x46>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   1d836:	f1b8 0f00 	cmp.w	r8, #0
   1d83a:	d005      	beq.n	1d848 <bt_keys_get_addr.part.0+0x34>
   1d83c:	2207      	movs	r2, #7
   1d83e:	4630      	mov	r0, r6
   1d840:	4909      	ldr	r1, [pc, #36]	; (1d868 <bt_keys_get_addr.part.0+0x54>)
   1d842:	f018 fe61 	bl	36508 <memcmp>
   1d846:	b958      	cbnz	r0, 1d860 <bt_keys_get_addr.part.0+0x4c>
		keys->id = id;
   1d848:	703d      	strb	r5, [r7, #0]
	memcpy(dst, src, sizeof(*dst));
   1d84a:	6822      	ldr	r2, [r4, #0]
   1d84c:	4b07      	ldr	r3, [pc, #28]	; (1d86c <bt_keys_get_addr.part.0+0x58>)
   1d84e:	f8c7 2001 	str.w	r2, [r7, #1]
   1d852:	88a2      	ldrh	r2, [r4, #4]
   1d854:	809a      	strh	r2, [r3, #4]
   1d856:	79a2      	ldrb	r2, [r4, #6]
   1d858:	719a      	strb	r2, [r3, #6]
		keys = &key_pool[i];
   1d85a:	4802      	ldr	r0, [pc, #8]	; (1d864 <bt_keys_get_addr.part.0+0x50>)
}
   1d85c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   1d860:	2000      	movs	r0, #0
   1d862:	e7fb      	b.n	1d85c <bt_keys_get_addr.part.0+0x48>
   1d864:	2000e78c 	.word	0x2000e78c
   1d868:	0003b6d4 	.word	0x0003b6d4
   1d86c:	2000e78d 	.word	0x2000e78d

0001d870 <bt_keys_get_addr>:
{
   1d870:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(addr != NULL);
   1d872:	b949      	cbnz	r1, 1d888 <bt_keys_get_addr+0x18>
   1d874:	4906      	ldr	r1, [pc, #24]	; (1d890 <bt_keys_get_addr+0x20>)
   1d876:	4807      	ldr	r0, [pc, #28]	; (1d894 <bt_keys_get_addr+0x24>)
   1d878:	2359      	movs	r3, #89	; 0x59
   1d87a:	4a07      	ldr	r2, [pc, #28]	; (1d898 <bt_keys_get_addr+0x28>)
   1d87c:	f011 fda2 	bl	2f3c4 <assert_print>
   1d880:	2159      	movs	r1, #89	; 0x59
   1d882:	4805      	ldr	r0, [pc, #20]	; (1d898 <bt_keys_get_addr+0x28>)
   1d884:	f011 fd97 	bl	2f3b6 <assert_post_action>
}
   1d888:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1d88c:	f7ff bfc2 	b.w	1d814 <bt_keys_get_addr.part.0>
   1d890:	0003dcac 	.word	0x0003dcac
   1d894:	00039995 	.word	0x00039995
   1d898:	0003d9ea 	.word	0x0003d9ea

0001d89c <bt_keys_foreach_type>:
{
   1d89c:	460b      	mov	r3, r1
   1d89e:	b510      	push	{r4, lr}
   1d8a0:	4611      	mov	r1, r2
   1d8a2:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(func != NULL);
   1d8a4:	b963      	cbnz	r3, 1d8c0 <bt_keys_foreach_type+0x24>
   1d8a6:	4909      	ldr	r1, [pc, #36]	; (1d8cc <bt_keys_foreach_type+0x30>)
   1d8a8:	4809      	ldr	r0, [pc, #36]	; (1d8d0 <bt_keys_foreach_type+0x34>)
   1d8aa:	23b3      	movs	r3, #179	; 0xb3
   1d8ac:	4a09      	ldr	r2, [pc, #36]	; (1d8d4 <bt_keys_foreach_type+0x38>)
   1d8ae:	f011 fd89 	bl	2f3c4 <assert_print>
   1d8b2:	21b3      	movs	r1, #179	; 0xb3
   1d8b4:	4807      	ldr	r0, [pc, #28]	; (1d8d4 <bt_keys_foreach_type+0x38>)
   1d8b6:	f011 fd7e 	bl	2f3b6 <assert_post_action>
}
   1d8ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			func(&key_pool[i], data);
   1d8be:	4718      	bx	r3
		if ((key_pool[i].keys & type)) {
   1d8c0:	4805      	ldr	r0, [pc, #20]	; (1d8d8 <bt_keys_foreach_type+0x3c>)
   1d8c2:	89c2      	ldrh	r2, [r0, #14]
   1d8c4:	4222      	tst	r2, r4
   1d8c6:	d1f8      	bne.n	1d8ba <bt_keys_foreach_type+0x1e>
}
   1d8c8:	bd10      	pop	{r4, pc}
   1d8ca:	bf00      	nop
   1d8cc:	0003da2e 	.word	0x0003da2e
   1d8d0:	00039995 	.word	0x00039995
   1d8d4:	0003d9ea 	.word	0x0003d9ea
   1d8d8:	2000e78c 	.word	0x2000e78c

0001d8dc <keys_commit>:

static int keys_commit(void)
{
   1d8dc:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach_type(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach_type(BT_KEYS_IRK, id_add, NULL);
   1d8de:	2200      	movs	r2, #0
   1d8e0:	2002      	movs	r0, #2
   1d8e2:	4902      	ldr	r1, [pc, #8]	; (1d8ec <keys_commit+0x10>)
   1d8e4:	f7ff ffda 	bl	1d89c <bt_keys_foreach_type>
	}

	return 0;
}
   1d8e8:	2000      	movs	r0, #0
   1d8ea:	bd08      	pop	{r3, pc}
   1d8ec:	0001d7e5 	.word	0x0001d7e5

0001d8f0 <bt_keys_find>:
{
   1d8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d8f2:	460e      	mov	r6, r1
   1d8f4:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(addr != NULL);
   1d8f6:	4611      	mov	r1, r2
   1d8f8:	b14a      	cbz	r2, 1d90e <bt_keys_find+0x1e>
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1d8fa:	4c0f      	ldr	r4, [pc, #60]	; (1d938 <bt_keys_find+0x48>)
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1d8fc:	2700      	movs	r7, #0
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1d8fe:	4620      	mov	r0, r4
   1d900:	89e3      	ldrh	r3, [r4, #14]
   1d902:	f810 2b01 	ldrb.w	r2, [r0], #1
   1d906:	402b      	ands	r3, r5
   1d908:	d10b      	bne.n	1d922 <bt_keys_find+0x32>
	return NULL;
   1d90a:	4618      	mov	r0, r3
}
   1d90c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT_NO_MSG(addr != NULL);
   1d90e:	490b      	ldr	r1, [pc, #44]	; (1d93c <bt_keys_find+0x4c>)
   1d910:	480b      	ldr	r0, [pc, #44]	; (1d940 <bt_keys_find+0x50>)
   1d912:	23c0      	movs	r3, #192	; 0xc0
   1d914:	4a0b      	ldr	r2, [pc, #44]	; (1d944 <bt_keys_find+0x54>)
   1d916:	f011 fd55 	bl	2f3c4 <assert_print>
   1d91a:	21c0      	movs	r1, #192	; 0xc0
   1d91c:	4809      	ldr	r0, [pc, #36]	; (1d944 <bt_keys_find+0x54>)
   1d91e:	f011 fd4a 	bl	2f3b6 <assert_post_action>
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1d922:	4296      	cmp	r6, r2
   1d924:	d103      	bne.n	1d92e <bt_keys_find+0x3e>
	return memcmp(a, b, sizeof(*a));
   1d926:	2207      	movs	r2, #7
   1d928:	f018 fdee 	bl	36508 <memcmp>
   1d92c:	b108      	cbz	r0, 1d932 <bt_keys_find+0x42>
	return NULL;
   1d92e:	4638      	mov	r0, r7
   1d930:	e7ec      	b.n	1d90c <bt_keys_find+0x1c>
			return &key_pool[i];
   1d932:	4620      	mov	r0, r4
   1d934:	e7ea      	b.n	1d90c <bt_keys_find+0x1c>
   1d936:	bf00      	nop
   1d938:	2000e78c 	.word	0x2000e78c
   1d93c:	0003dcac 	.word	0x0003dcac
   1d940:	00039995 	.word	0x00039995
   1d944:	0003d9ea 	.word	0x0003d9ea

0001d948 <bt_keys_find_irk>:
{
   1d948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d94a:	4606      	mov	r6, r0
	__ASSERT_NO_MSG(addr != NULL);
   1d94c:	460c      	mov	r4, r1
   1d94e:	b949      	cbnz	r1, 1d964 <bt_keys_find_irk+0x1c>
   1d950:	4920      	ldr	r1, [pc, #128]	; (1d9d4 <bt_keys_find_irk+0x8c>)
   1d952:	4821      	ldr	r0, [pc, #132]	; (1d9d8 <bt_keys_find_irk+0x90>)
   1d954:	23e9      	movs	r3, #233	; 0xe9
   1d956:	4a21      	ldr	r2, [pc, #132]	; (1d9dc <bt_keys_find_irk+0x94>)
   1d958:	f011 fd34 	bl	2f3c4 <assert_print>
   1d95c:	21e9      	movs	r1, #233	; 0xe9
   1d95e:	481f      	ldr	r0, [pc, #124]	; (1d9dc <bt_keys_find_irk+0x94>)
   1d960:	f011 fd29 	bl	2f3b6 <assert_post_action>
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1d964:	780b      	ldrb	r3, [r1, #0]
   1d966:	2b01      	cmp	r3, #1
   1d968:	d001      	beq.n	1d96e <bt_keys_find_irk+0x26>
		return NULL;
   1d96a:	2000      	movs	r0, #0
}
   1d96c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   1d96e:	798b      	ldrb	r3, [r1, #6]
   1d970:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1d974:	2b40      	cmp	r3, #64	; 0x40
   1d976:	d1f8      	bne.n	1d96a <bt_keys_find_irk+0x22>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1d978:	4d19      	ldr	r5, [pc, #100]	; (1d9e0 <bt_keys_find_irk+0x98>)
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1d97a:	2300      	movs	r3, #0
		if (key_pool[i].id == id &&
   1d97c:	4629      	mov	r1, r5
   1d97e:	89ef      	ldrh	r7, [r5, #14]
   1d980:	f811 2b3a 	ldrb.w	r2, [r1], #58
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1d984:	07bf      	lsls	r7, r7, #30
	return memcmp(a, b, sizeof(*a));
   1d986:	f104 0001 	add.w	r0, r4, #1
   1d98a:	d506      	bpl.n	1d99a <bt_keys_find_irk+0x52>
		if (key_pool[i].id == id &&
   1d98c:	42b2      	cmp	r2, r6
   1d98e:	d104      	bne.n	1d99a <bt_keys_find_irk+0x52>
   1d990:	2206      	movs	r2, #6
   1d992:	f018 fdb9 	bl	36508 <memcmp>
   1d996:	b1d0      	cbz	r0, 1d9ce <bt_keys_find_irk+0x86>
   1d998:	2300      	movs	r3, #0
   1d99a:	89ea      	ldrh	r2, [r5, #14]
		if (key_pool[i].id != id) {
   1d99c:	7829      	ldrb	r1, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1d99e:	f002 0202 	and.w	r2, r2, #2
   1d9a2:	2b00      	cmp	r3, #0
   1d9a4:	d1e1      	bne.n	1d96a <bt_keys_find_irk+0x22>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1d9a6:	2a00      	cmp	r2, #0
   1d9a8:	d0df      	beq.n	1d96a <bt_keys_find_irk+0x22>
		if (key_pool[i].id != id) {
   1d9aa:	42b1      	cmp	r1, r6
   1d9ac:	d1dd      	bne.n	1d96a <bt_keys_find_irk+0x22>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   1d9ae:	1c67      	adds	r7, r4, #1
   1d9b0:	4639      	mov	r1, r7
   1d9b2:	480c      	ldr	r0, [pc, #48]	; (1d9e4 <bt_keys_find_irk+0x9c>)
   1d9b4:	f013 f9bc 	bl	30d30 <bt_rpa_irk_matches>
   1d9b8:	2301      	movs	r3, #1
   1d9ba:	2800      	cmp	r0, #0
   1d9bc:	d0ed      	beq.n	1d99a <bt_keys_find_irk+0x52>
	memcpy(dst, src, sizeof(*dst));
   1d9be:	f8d4 3001 	ldr.w	r3, [r4, #1]
   1d9c2:	f8c5 303a 	str.w	r3, [r5, #58]	; 0x3a
   1d9c6:	f8b4 2005 	ldrh.w	r2, [r4, #5]
   1d9ca:	4b07      	ldr	r3, [pc, #28]	; (1d9e8 <bt_keys_find_irk+0xa0>)
   1d9cc:	809a      	strh	r2, [r3, #4]
			return &key_pool[i];
   1d9ce:	4804      	ldr	r0, [pc, #16]	; (1d9e0 <bt_keys_find_irk+0x98>)
   1d9d0:	e7cc      	b.n	1d96c <bt_keys_find_irk+0x24>
   1d9d2:	bf00      	nop
   1d9d4:	0003dcac 	.word	0x0003dcac
   1d9d8:	00039995 	.word	0x00039995
   1d9dc:	0003d9ea 	.word	0x0003d9ea
   1d9e0:	2000e78c 	.word	0x2000e78c
   1d9e4:	2000e7b6 	.word	0x2000e7b6
   1d9e8:	2000e7c6 	.word	0x2000e7c6

0001d9ec <bt_keys_find_addr>:
{
   1d9ec:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(addr != NULL);
   1d9ee:	b129      	cbz	r1, 1d9fc <bt_keys_find_addr+0x10>
		if (key_pool[i].id == id &&
   1d9f0:	4c0d      	ldr	r4, [pc, #52]	; (1da28 <bt_keys_find_addr+0x3c>)
   1d9f2:	7823      	ldrb	r3, [r4, #0]
   1d9f4:	4283      	cmp	r3, r0
   1d9f6:	d00d      	beq.n	1da14 <bt_keys_find_addr+0x28>
	return NULL;
   1d9f8:	2000      	movs	r0, #0
}
   1d9fa:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(addr != NULL);
   1d9fc:	490b      	ldr	r1, [pc, #44]	; (1da2c <bt_keys_find_addr+0x40>)
   1d9fe:	480c      	ldr	r0, [pc, #48]	; (1da30 <bt_keys_find_addr+0x44>)
   1da00:	f44f 738d 	mov.w	r3, #282	; 0x11a
   1da04:	4a0b      	ldr	r2, [pc, #44]	; (1da34 <bt_keys_find_addr+0x48>)
   1da06:	f011 fcdd 	bl	2f3c4 <assert_print>
   1da0a:	f44f 718d 	mov.w	r1, #282	; 0x11a
   1da0e:	4809      	ldr	r0, [pc, #36]	; (1da34 <bt_keys_find_addr+0x48>)
   1da10:	f011 fcd1 	bl	2f3b6 <assert_post_action>
	return memcmp(a, b, sizeof(*a));
   1da14:	2207      	movs	r2, #7
   1da16:	1c60      	adds	r0, r4, #1
   1da18:	f018 fd76 	bl	36508 <memcmp>
			return &key_pool[i];
   1da1c:	2800      	cmp	r0, #0
   1da1e:	bf0c      	ite	eq
   1da20:	4620      	moveq	r0, r4
   1da22:	2000      	movne	r0, #0
   1da24:	e7e9      	b.n	1d9fa <bt_keys_find_addr+0xe>
   1da26:	bf00      	nop
   1da28:	2000e78c 	.word	0x2000e78c
   1da2c:	0003dcac 	.word	0x0003dcac
   1da30:	00039995 	.word	0x00039995
   1da34:	0003d9ea 	.word	0x0003d9ea

0001da38 <bt_keys_add_type>:
{
   1da38:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(keys != NULL);
   1da3a:	b958      	cbnz	r0, 1da54 <bt_keys_add_type+0x1c>
   1da3c:	4907      	ldr	r1, [pc, #28]	; (1da5c <bt_keys_add_type+0x24>)
   1da3e:	4808      	ldr	r0, [pc, #32]	; (1da60 <bt_keys_add_type+0x28>)
   1da40:	f44f 7395 	mov.w	r3, #298	; 0x12a
   1da44:	4a07      	ldr	r2, [pc, #28]	; (1da64 <bt_keys_add_type+0x2c>)
   1da46:	f011 fcbd 	bl	2f3c4 <assert_print>
   1da4a:	f44f 7195 	mov.w	r1, #298	; 0x12a
   1da4e:	4805      	ldr	r0, [pc, #20]	; (1da64 <bt_keys_add_type+0x2c>)
   1da50:	f011 fcb1 	bl	2f3b6 <assert_post_action>
	keys->keys |= type;
   1da54:	89c3      	ldrh	r3, [r0, #14]
   1da56:	4319      	orrs	r1, r3
   1da58:	81c1      	strh	r1, [r0, #14]
}
   1da5a:	bd08      	pop	{r3, pc}
   1da5c:	0003da1a 	.word	0x0003da1a
   1da60:	00039995 	.word	0x00039995
   1da64:	0003d9ea 	.word	0x0003d9ea

0001da68 <bt_keys_get_type>:
{
   1da68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1da6a:	4606      	mov	r6, r0
   1da6c:	460f      	mov	r7, r1
	__ASSERT_NO_MSG(addr != NULL);
   1da6e:	4615      	mov	r5, r2
   1da70:	b94a      	cbnz	r2, 1da86 <bt_keys_get_type+0x1e>
   1da72:	490c      	ldr	r1, [pc, #48]	; (1daa4 <bt_keys_get_type+0x3c>)
   1da74:	480c      	ldr	r0, [pc, #48]	; (1daa8 <bt_keys_get_type+0x40>)
   1da76:	23d2      	movs	r3, #210	; 0xd2
   1da78:	4a0c      	ldr	r2, [pc, #48]	; (1daac <bt_keys_get_type+0x44>)
   1da7a:	f011 fca3 	bl	2f3c4 <assert_print>
   1da7e:	21d2      	movs	r1, #210	; 0xd2
   1da80:	480a      	ldr	r0, [pc, #40]	; (1daac <bt_keys_get_type+0x44>)
   1da82:	f011 fc98 	bl	2f3b6 <assert_post_action>
	keys = bt_keys_find(type, id, addr);
   1da86:	f7ff ff33 	bl	1d8f0 <bt_keys_find>
	if (keys) {
   1da8a:	4604      	mov	r4, r0
   1da8c:	b940      	cbnz	r0, 1daa0 <bt_keys_get_type+0x38>
	keys = bt_keys_get_addr(id, addr);
   1da8e:	4629      	mov	r1, r5
   1da90:	4638      	mov	r0, r7
   1da92:	f7ff feed 	bl	1d870 <bt_keys_get_addr>
	if (!keys) {
   1da96:	4604      	mov	r4, r0
   1da98:	b110      	cbz	r0, 1daa0 <bt_keys_get_type+0x38>
	bt_keys_add_type(keys, type);
   1da9a:	4631      	mov	r1, r6
   1da9c:	f7ff ffcc 	bl	1da38 <bt_keys_add_type>
}
   1daa0:	4620      	mov	r0, r4
   1daa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1daa4:	0003dcac 	.word	0x0003dcac
   1daa8:	00039995 	.word	0x00039995
   1daac:	0003d9ea 	.word	0x0003d9ea

0001dab0 <bt_keys_clear>:
{
   1dab0:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(keys != NULL);
   1dab2:	4604      	mov	r4, r0
{
   1dab4:	b08c      	sub	sp, #48	; 0x30
	__ASSERT_NO_MSG(keys != NULL);
   1dab6:	b958      	cbnz	r0, 1dad0 <bt_keys_clear+0x20>
   1dab8:	4916      	ldr	r1, [pc, #88]	; (1db14 <bt_keys_clear+0x64>)
   1daba:	4817      	ldr	r0, [pc, #92]	; (1db18 <bt_keys_clear+0x68>)
   1dabc:	f240 1331 	movw	r3, #305	; 0x131
   1dac0:	4a16      	ldr	r2, [pc, #88]	; (1db1c <bt_keys_clear+0x6c>)
   1dac2:	f011 fc7f 	bl	2f3c4 <assert_print>
   1dac6:	f240 1131 	movw	r1, #305	; 0x131
   1daca:	4814      	ldr	r0, [pc, #80]	; (1db1c <bt_keys_clear+0x6c>)
   1dacc:	f011 fc73 	bl	2f3b6 <assert_post_action>
	if (keys->state & BT_KEYS_ID_ADDED) {
   1dad0:	7a03      	ldrb	r3, [r0, #8]
   1dad2:	075b      	lsls	r3, r3, #29
   1dad4:	d501      	bpl.n	1dada <bt_keys_clear+0x2a>
		bt_id_del(keys);
   1dad6:	f7f7 ff1d 	bl	15914 <bt_id_del>
		if (keys->id) {
   1dada:	4625      	mov	r5, r4
   1dadc:	f815 2b01 	ldrb.w	r2, [r5], #1
   1dae0:	b1b2      	cbz	r2, 1db10 <bt_keys_clear+0x60>
			u8_to_dec(id, sizeof(id), keys->id);
   1dae2:	ae02      	add	r6, sp, #8
   1dae4:	2104      	movs	r1, #4
   1dae6:	4630      	mov	r0, r6
   1dae8:	f011 f9f0 	bl	2eecc <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1daec:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
   1daee:	462b      	mov	r3, r5
   1daf0:	2124      	movs	r1, #36	; 0x24
   1daf2:	4a0b      	ldr	r2, [pc, #44]	; (1db20 <bt_keys_clear+0x70>)
   1daf4:	a803      	add	r0, sp, #12
   1daf6:	f7f5 ff53 	bl	139a0 <bt_settings_encode_key>
		settings_delete(key);
   1dafa:	a803      	add	r0, sp, #12
   1dafc:	f012 f9e2 	bl	2fec4 <settings_delete>
   1db00:	225c      	movs	r2, #92	; 0x5c
   1db02:	2100      	movs	r1, #0
   1db04:	4620      	mov	r0, r4
}
   1db06:	b00c      	add	sp, #48	; 0x30
   1db08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1db0c:	f018 bd2c 	b.w	36568 <memset>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1db10:	9200      	str	r2, [sp, #0]
   1db12:	e7ec      	b.n	1daee <bt_keys_clear+0x3e>
   1db14:	0003da1a 	.word	0x0003da1a
   1db18:	00039995 	.word	0x00039995
   1db1c:	0003d9ea 	.word	0x0003d9ea
   1db20:	0003dae1 	.word	0x0003dae1

0001db24 <keys_set>:
{
   1db24:	b5f0      	push	{r4, r5, r6, r7, lr}
   1db26:	b099      	sub	sp, #100	; 0x64
   1db28:	4614      	mov	r4, r2
	if (!name) {
   1db2a:	4606      	mov	r6, r0
{
   1db2c:	af00      	add	r7, sp, #0
	if (!name) {
   1db2e:	b988      	cbnz	r0, 1db54 <keys_set+0x30>
		LOG_ERR("Insufficient number of arguments");
   1db30:	4b60      	ldr	r3, [pc, #384]	; (1dcb4 <keys_set+0x190>)
   1db32:	627b      	str	r3, [r7, #36]	; 0x24
   1db34:	2302      	movs	r3, #2
   1db36:	623b      	str	r3, [r7, #32]
   1db38:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1db3c:	4603      	mov	r3, r0
   1db3e:	f107 0220 	add.w	r2, r7, #32
   1db42:	485d      	ldr	r0, [pc, #372]	; (1dcb8 <keys_set+0x194>)
   1db44:	f7f2 fb76 	bl	10234 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   1db48:	f06f 0515 	mvn.w	r5, #21
}
   1db4c:	4628      	mov	r0, r5
   1db4e:	3764      	adds	r7, #100	; 0x64
   1db50:	46bd      	mov	sp, r7
   1db52:	bdf0      	pop	{r4, r5, r6, r7, pc}
	len = read_cb(cb_arg, val, sizeof(val));
   1db54:	2250      	movs	r2, #80	; 0x50
   1db56:	4618      	mov	r0, r3
   1db58:	f107 0110 	add.w	r1, r7, #16
   1db5c:	47a0      	blx	r4
	if (len < 0) {
   1db5e:	1e04      	subs	r4, r0, #0
   1db60:	da10      	bge.n	1db84 <keys_set+0x60>
		LOG_ERR("Failed to read value (err %zd)", len);
   1db62:	466d      	mov	r5, sp
   1db64:	b088      	sub	sp, #32
   1db66:	466a      	mov	r2, sp
   1db68:	4b54      	ldr	r3, [pc, #336]	; (1dcbc <keys_set+0x198>)
   1db6a:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1db6e:	2303      	movs	r3, #3
   1db70:	f842 3f10 	str.w	r3, [r2, #16]!
   1db74:	2300      	movs	r3, #0
   1db76:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1db7a:	484f      	ldr	r0, [pc, #316]	; (1dcb8 <keys_set+0x194>)
   1db7c:	f7f2 fb5a 	bl	10234 <z_impl_z_log_msg_static_create>
   1db80:	46ad      	mov	sp, r5
		return -EINVAL;
   1db82:	e7e1      	b.n	1db48 <keys_set+0x24>
	err = bt_settings_decode_key(name, &addr);
   1db84:	4630      	mov	r0, r6
   1db86:	f107 0108 	add.w	r1, r7, #8
   1db8a:	f013 f8fa 	bl	30d82 <bt_settings_decode_key>
	if (err) {
   1db8e:	4605      	mov	r5, r0
   1db90:	b198      	cbz	r0, 1dbba <keys_set+0x96>
		LOG_ERR("Unable to decode address %s", name);
   1db92:	466c      	mov	r4, sp
   1db94:	b088      	sub	sp, #32
   1db96:	466a      	mov	r2, sp
   1db98:	4b49      	ldr	r3, [pc, #292]	; (1dcc0 <keys_set+0x19c>)
   1db9a:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1db9e:	f44f 7300 	mov.w	r3, #512	; 0x200
   1dba2:	8393      	strh	r3, [r2, #28]
   1dba4:	4b47      	ldr	r3, [pc, #284]	; (1dcc4 <keys_set+0x1a0>)
   1dba6:	f842 3f10 	str.w	r3, [r2, #16]!
   1dbaa:	2300      	movs	r3, #0
   1dbac:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1dbb0:	4841      	ldr	r0, [pc, #260]	; (1dcb8 <keys_set+0x194>)
   1dbb2:	f7f2 fb3f 	bl	10234 <z_impl_z_log_msg_static_create>
   1dbb6:	46a5      	mov	sp, r4
			return -EINVAL;
   1dbb8:	e7c6      	b.n	1db48 <keys_set+0x24>
	settings_name_next(name, &next);
   1dbba:	4630      	mov	r0, r6
   1dbbc:	1d39      	adds	r1, r7, #4
   1dbbe:	f012 f9a9 	bl	2ff14 <settings_name_next>
	if (!next) {
   1dbc2:	6878      	ldr	r0, [r7, #4]
   1dbc4:	b188      	cbz	r0, 1dbea <keys_set+0xc6>
		unsigned long next_id = strtoul(next, NULL, 10);
   1dbc6:	220a      	movs	r2, #10
   1dbc8:	4629      	mov	r1, r5
   1dbca:	f00f faa7 	bl	2d11c <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   1dbce:	b160      	cbz	r0, 1dbea <keys_set+0xc6>
			LOG_ERR("Invalid local identity %lu", next_id);
   1dbd0:	466c      	mov	r4, sp
   1dbd2:	b088      	sub	sp, #32
   1dbd4:	466a      	mov	r2, sp
   1dbd6:	4b3c      	ldr	r3, [pc, #240]	; (1dcc8 <keys_set+0x1a4>)
   1dbd8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1dbdc:	2303      	movs	r3, #3
   1dbde:	f842 3f10 	str.w	r3, [r2, #16]!
   1dbe2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1dbe6:	462b      	mov	r3, r5
   1dbe8:	e7e2      	b.n	1dbb0 <keys_set+0x8c>
	if (!len) {
   1dbea:	bb1c      	cbnz	r4, 1dc34 <keys_set+0x110>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
   1dbec:	4621      	mov	r1, r4
   1dbee:	203f      	movs	r0, #63	; 0x3f
   1dbf0:	f107 0208 	add.w	r2, r7, #8
   1dbf4:	f7ff fe7c 	bl	1d8f0 <bt_keys_find>
		if (keys) {
   1dbf8:	b120      	cbz	r0, 1dc04 <keys_set+0xe0>
   1dbfa:	225c      	movs	r2, #92	; 0x5c
   1dbfc:	4621      	mov	r1, r4
   1dbfe:	f018 fcb3 	bl	36568 <memset>
   1dc02:	e7a3      	b.n	1db4c <keys_set+0x28>
			LOG_WRN("Unable to find deleted keys for %s", bt_addr_le_str(&addr));
   1dc04:	f107 0008 	add.w	r0, r7, #8
   1dc08:	f7f5 fdf4 	bl	137f4 <bt_addr_le_str>
   1dc0c:	466e      	mov	r6, sp
   1dc0e:	b088      	sub	sp, #32
   1dc10:	466a      	mov	r2, sp
   1dc12:	4b2e      	ldr	r3, [pc, #184]	; (1dccc <keys_set+0x1a8>)
   1dc14:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1dc18:	f44f 7300 	mov.w	r3, #512	; 0x200
   1dc1c:	8393      	strh	r3, [r2, #28]
   1dc1e:	4b29      	ldr	r3, [pc, #164]	; (1dcc4 <keys_set+0x1a0>)
   1dc20:	f842 3f10 	str.w	r3, [r2, #16]!
   1dc24:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
   1dc28:	4623      	mov	r3, r4
   1dc2a:	4823      	ldr	r0, [pc, #140]	; (1dcb8 <keys_set+0x194>)
   1dc2c:	f7f2 fb02 	bl	10234 <z_impl_z_log_msg_static_create>
   1dc30:	46b5      	mov	sp, r6
   1dc32:	e78b      	b.n	1db4c <keys_set+0x28>
	__ASSERT_NO_MSG(addr != NULL);
   1dc34:	2000      	movs	r0, #0
   1dc36:	f107 0108 	add.w	r1, r7, #8
   1dc3a:	f7ff fdeb 	bl	1d814 <bt_keys_get_addr.part.0>
	if (!keys) {
   1dc3e:	4606      	mov	r6, r0
   1dc40:	b9c8      	cbnz	r0, 1dc76 <keys_set+0x152>
		LOG_ERR("Failed to allocate keys for %s", bt_addr_le_str(&addr));
   1dc42:	f107 0008 	add.w	r0, r7, #8
   1dc46:	f7f5 fdd5 	bl	137f4 <bt_addr_le_str>
   1dc4a:	466c      	mov	r4, sp
   1dc4c:	b088      	sub	sp, #32
   1dc4e:	466a      	mov	r2, sp
   1dc50:	4b1f      	ldr	r3, [pc, #124]	; (1dcd0 <keys_set+0x1ac>)
   1dc52:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1dc56:	f44f 7300 	mov.w	r3, #512	; 0x200
   1dc5a:	8393      	strh	r3, [r2, #28]
   1dc5c:	4b19      	ldr	r3, [pc, #100]	; (1dcc4 <keys_set+0x1a0>)
   1dc5e:	f842 3f10 	str.w	r3, [r2, #16]!
   1dc62:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1dc66:	4633      	mov	r3, r6
   1dc68:	4813      	ldr	r0, [pc, #76]	; (1dcb8 <keys_set+0x194>)
   1dc6a:	f7f2 fae3 	bl	10234 <z_impl_z_log_msg_static_create>
		return -ENOMEM;
   1dc6e:	f06f 050b 	mvn.w	r5, #11
   1dc72:	46a5      	mov	sp, r4
   1dc74:	e76a      	b.n	1db4c <keys_set+0x28>
	if (len != BT_KEYS_STORAGE_LEN) {
   1dc76:	2c50      	cmp	r4, #80	; 0x50
   1dc78:	d015      	beq.n	1dca6 <keys_set+0x182>
			LOG_ERR("Invalid key length %zd != %zu", len, BT_KEYS_STORAGE_LEN);
   1dc7a:	466d      	mov	r5, sp
   1dc7c:	b088      	sub	sp, #32
   1dc7e:	466a      	mov	r2, sp
   1dc80:	4b14      	ldr	r3, [pc, #80]	; (1dcd4 <keys_set+0x1b0>)
   1dc82:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1dc86:	2350      	movs	r3, #80	; 0x50
   1dc88:	61d3      	str	r3, [r2, #28]
   1dc8a:	2304      	movs	r3, #4
   1dc8c:	f842 3f10 	str.w	r3, [r2, #16]!
   1dc90:	2300      	movs	r3, #0
   1dc92:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1dc96:	4808      	ldr	r0, [pc, #32]	; (1dcb8 <keys_set+0x194>)
   1dc98:	f7f2 facc 	bl	10234 <z_impl_z_log_msg_static_create>
			bt_keys_clear(keys);
   1dc9c:	4630      	mov	r0, r6
   1dc9e:	46ad      	mov	sp, r5
   1dca0:	f7ff ff06 	bl	1dab0 <bt_keys_clear>
			return -EINVAL;
   1dca4:	e750      	b.n	1db48 <keys_set+0x24>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1dca6:	4622      	mov	r2, r4
   1dca8:	f107 0110 	add.w	r1, r7, #16
   1dcac:	300c      	adds	r0, #12
   1dcae:	f018 fc3b 	bl	36528 <memcpy>
   1dcb2:	e74b      	b.n	1db4c <keys_set+0x28>
   1dcb4:	0003b72a 	.word	0x0003b72a
   1dcb8:	00037908 	.word	0x00037908
   1dcbc:	0003da42 	.word	0x0003da42
   1dcc0:	0003cece 	.word	0x0003cece
   1dcc4:	01000003 	.word	0x01000003
   1dcc8:	0003ceea 	.word	0x0003ceea
   1dccc:	0003da61 	.word	0x0003da61
   1dcd0:	0003da84 	.word	0x0003da84
   1dcd4:	0003daa3 	.word	0x0003daa3

0001dcd8 <bt_keys_store>:
{
   1dcd8:	b5b0      	push	{r4, r5, r7, lr}
   1dcda:	b08c      	sub	sp, #48	; 0x30
	__ASSERT_NO_MSG(keys != NULL);
   1dcdc:	4604      	mov	r4, r0
{
   1dcde:	af02      	add	r7, sp, #8
	__ASSERT_NO_MSG(keys != NULL);
   1dce0:	b958      	cbnz	r0, 1dcfa <bt_keys_store+0x22>
   1dce2:	491c      	ldr	r1, [pc, #112]	; (1dd54 <bt_keys_store+0x7c>)
   1dce4:	481c      	ldr	r0, [pc, #112]	; (1dd58 <bt_keys_store+0x80>)
   1dce6:	f240 1355 	movw	r3, #341	; 0x155
   1dcea:	4a1c      	ldr	r2, [pc, #112]	; (1dd5c <bt_keys_store+0x84>)
   1dcec:	f011 fb6a 	bl	2f3c4 <assert_print>
   1dcf0:	f240 1155 	movw	r1, #341	; 0x155
   1dcf4:	4819      	ldr	r0, [pc, #100]	; (1dd5c <bt_keys_store+0x84>)
   1dcf6:	f011 fb5e 	bl	2f3b6 <assert_post_action>
	if (keys->id) {
   1dcfa:	4605      	mov	r5, r0
   1dcfc:	f815 2b01 	ldrb.w	r2, [r5], #1
   1dd00:	b332      	cbz	r2, 1dd50 <bt_keys_store+0x78>
		u8_to_dec(id, sizeof(id), keys->id);
   1dd02:	2104      	movs	r1, #4
   1dd04:	4638      	mov	r0, r7
   1dd06:	f011 f8e1 	bl	2eecc <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1dd0a:	9700      	str	r7, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1dd0c:	462b      	mov	r3, r5
   1dd0e:	2124      	movs	r1, #36	; 0x24
   1dd10:	4a13      	ldr	r2, [pc, #76]	; (1dd60 <bt_keys_store+0x88>)
   1dd12:	1d38      	adds	r0, r7, #4
   1dd14:	f7f5 fe44 	bl	139a0 <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
   1dd18:	f104 010c 	add.w	r1, r4, #12
   1dd1c:	2250      	movs	r2, #80	; 0x50
   1dd1e:	1d38      	adds	r0, r7, #4
   1dd20:	f7f3 f99e 	bl	11060 <settings_save_one>
	if (err) {
   1dd24:	4604      	mov	r4, r0
   1dd26:	b178      	cbz	r0, 1dd48 <bt_keys_store+0x70>
		LOG_ERR("Failed to save keys (err %d)", err);
   1dd28:	466d      	mov	r5, sp
   1dd2a:	b088      	sub	sp, #32
   1dd2c:	aa02      	add	r2, sp, #8
   1dd2e:	4b0d      	ldr	r3, [pc, #52]	; (1dd64 <bt_keys_store+0x8c>)
   1dd30:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1dd34:	2303      	movs	r3, #3
   1dd36:	f842 3f10 	str.w	r3, [r2, #16]!
   1dd3a:	2300      	movs	r3, #0
   1dd3c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1dd40:	4809      	ldr	r0, [pc, #36]	; (1dd68 <bt_keys_store+0x90>)
   1dd42:	f7f2 fa77 	bl	10234 <z_impl_z_log_msg_static_create>
   1dd46:	46ad      	mov	sp, r5
}
   1dd48:	4620      	mov	r0, r4
   1dd4a:	3728      	adds	r7, #40	; 0x28
   1dd4c:	46bd      	mov	sp, r7
   1dd4e:	bdb0      	pop	{r4, r5, r7, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1dd50:	9200      	str	r2, [sp, #0]
   1dd52:	e7db      	b.n	1dd0c <bt_keys_store+0x34>
   1dd54:	0003da1a 	.word	0x0003da1a
   1dd58:	00039995 	.word	0x00039995
   1dd5c:	0003d9ea 	.word	0x0003d9ea
   1dd60:	0003dae1 	.word	0x0003dae1
   1dd64:	0003dac1 	.word	0x0003dac1
   1dd68:	00037908 	.word	0x00037908

0001dd6c <sys_memcpy_swap>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1dd6c:	4288      	cmp	r0, r1
{
   1dd6e:	b510      	push	{r4, lr}
   1dd70:	eb00 0302 	add.w	r3, r0, r2
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1dd74:	d911      	bls.n	1dd9a <sys_memcpy_swap+0x2e>
   1dd76:	188c      	adds	r4, r1, r2
   1dd78:	42a0      	cmp	r0, r4
   1dd7a:	d211      	bcs.n	1dda0 <sys_memcpy_swap+0x34>
   1dd7c:	490d      	ldr	r1, [pc, #52]	; (1ddb4 <sys_memcpy_swap+0x48>)
   1dd7e:	f240 2315 	movw	r3, #533	; 0x215
   1dd82:	4a0d      	ldr	r2, [pc, #52]	; (1ddb8 <sys_memcpy_swap+0x4c>)
   1dd84:	480d      	ldr	r0, [pc, #52]	; (1ddbc <sys_memcpy_swap+0x50>)
   1dd86:	f011 fb1d 	bl	2f3c4 <assert_print>
   1dd8a:	480d      	ldr	r0, [pc, #52]	; (1ddc0 <sys_memcpy_swap+0x54>)
   1dd8c:	f011 fb1a 	bl	2f3c4 <assert_print>
   1dd90:	f240 2115 	movw	r1, #533	; 0x215
   1dd94:	4808      	ldr	r0, [pc, #32]	; (1ddb8 <sys_memcpy_swap+0x4c>)
   1dd96:	f011 fb0e 	bl	2f3b6 <assert_post_action>
   1dd9a:	d0ef      	beq.n	1dd7c <sys_memcpy_swap+0x10>
   1dd9c:	4299      	cmp	r1, r3
   1dd9e:	e7ec      	b.n	1dd7a <sys_memcpy_swap+0xe>
	psrc += length - 1;
   1dda0:	3a01      	subs	r2, #1
   1dda2:	4411      	add	r1, r2
		*pdst++ = *psrc--;
   1dda4:	f811 2901 	ldrb.w	r2, [r1], #-1
   1dda8:	f800 2b01 	strb.w	r2, [r0], #1
	for (; length > 0; length--) {
   1ddac:	4283      	cmp	r3, r0
   1ddae:	d1f9      	bne.n	1dda4 <sys_memcpy_swap+0x38>
}
   1ddb0:	bd10      	pop	{r4, pc}
   1ddb2:	bf00      	nop
   1ddb4:	0003c486 	.word	0x0003c486
   1ddb8:	0003c454 	.word	0x0003c454
   1ddbc:	00039995 	.word	0x00039995
   1ddc0:	0003c4dd 	.word	0x0003c4dd

0001ddc4 <bt_crypto_f5>:
	return err;
}

int bt_crypto_f5(const uint8_t *w, const uint8_t *n1, const uint8_t *n2, const bt_addr_le_t *a1,
		 const bt_addr_le_t *a2, uint8_t *mackey, uint8_t *ltk)
{
   1ddc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ddc8:	b09a      	sub	sp, #104	; 0x68
   1ddca:	4616      	mov	r6, r2
   1ddcc:	e9dd 9723 	ldrd	r9, r7, [sp, #140]	; 0x8c
	static const uint8_t salt[16] = {0x6c, 0x88, 0x83, 0x91, 0xaa, 0xf5, 0xa5, 0x38,
					 0x60, 0x37, 0x0b, 0xdb, 0x5a, 0x60, 0x83, 0xbe};
	uint8_t m[53] = {0x00,						 /* counter */
   1ddd0:	aa0c      	add	r2, sp, #48	; 0x30
{
   1ddd2:	4684      	mov	ip, r0
   1ddd4:	468a      	mov	sl, r1
   1ddd6:	4690      	mov	r8, r2
   1ddd8:	461d      	mov	r5, r3
	uint8_t m[53] = {0x00,						 /* counter */
   1ddda:	4b2c      	ldr	r3, [pc, #176]	; (1de8c <bt_crypto_f5+0xc8>)
   1dddc:	f103 0e30 	add.w	lr, r3, #48	; 0x30
   1dde0:	4614      	mov	r4, r2
   1dde2:	6818      	ldr	r0, [r3, #0]
   1dde4:	6859      	ldr	r1, [r3, #4]
   1dde6:	3308      	adds	r3, #8
   1dde8:	c403      	stmia	r4!, {r0, r1}
   1ddea:	4573      	cmp	r3, lr
   1ddec:	4622      	mov	r2, r4
   1ddee:	d1f7      	bne.n	1dde0 <bt_crypto_f5+0x1c>
   1ddf0:	6818      	ldr	r0, [r3, #0]
   1ddf2:	791b      	ldrb	r3, [r3, #4]

	LOG_DBG("w %s", bt_hex(w, 32));
	LOG_DBG("n1 %s", bt_hex(n1, 16));
	LOG_DBG("n2 %s", bt_hex(n2, 16));

	sys_memcpy_swap(ws, w, 32);
   1ddf4:	4661      	mov	r1, ip
	uint8_t m[53] = {0x00,						 /* counter */
   1ddf6:	6020      	str	r0, [r4, #0]
   1ddf8:	7123      	strb	r3, [r4, #4]
	sys_memcpy_swap(ws, w, 32);
   1ddfa:	2220      	movs	r2, #32
   1ddfc:	a804      	add	r0, sp, #16
   1ddfe:	f7ff ffb5 	bl	1dd6c <sys_memcpy_swap>

	err = bt_crypto_aes_cmac(salt, ws, 32, t);
   1de02:	466b      	mov	r3, sp
   1de04:	2220      	movs	r2, #32
   1de06:	4822      	ldr	r0, [pc, #136]	; (1de90 <bt_crypto_f5+0xcc>)
   1de08:	a904      	add	r1, sp, #16
   1de0a:	f015 f8f6 	bl	32ffa <bt_crypto_aes_cmac>
	if (err) {
   1de0e:	4604      	mov	r4, r0
   1de10:	bbc0      	cbnz	r0, 1de84 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("t %s", bt_hex(t, 16));

	sys_memcpy_swap(m + 5, n1, 16);
   1de12:	2210      	movs	r2, #16
   1de14:	4651      	mov	r1, sl
   1de16:	f10d 0035 	add.w	r0, sp, #53	; 0x35
   1de1a:	f7ff ffa7 	bl	1dd6c <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   1de1e:	2210      	movs	r2, #16
   1de20:	4631      	mov	r1, r6
   1de22:	f10d 0045 	add.w	r0, sp, #69	; 0x45
   1de26:	f7ff ffa1 	bl	1dd6c <sys_memcpy_swap>
	m[37] = a1->type;
   1de2a:	4629      	mov	r1, r5
   1de2c:	f811 3b01 	ldrb.w	r3, [r1], #1
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   1de30:	2206      	movs	r2, #6
   1de32:	f10d 0056 	add.w	r0, sp, #86	; 0x56
	m[37] = a1->type;
   1de36:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   1de3a:	f7ff ff97 	bl	1dd6c <sys_memcpy_swap>
	m[44] = a2->type;
   1de3e:	9922      	ldr	r1, [sp, #136]	; 0x88
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   1de40:	2206      	movs	r2, #6
	m[44] = a2->type;
   1de42:	f811 3b01 	ldrb.w	r3, [r1], #1
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   1de46:	f10d 005d 	add.w	r0, sp, #93	; 0x5d
	m[44] = a2->type;
   1de4a:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   1de4e:	f7ff ff8d 	bl	1dd6c <sys_memcpy_swap>

	err = bt_crypto_aes_cmac(t, m, sizeof(m), mackey);
   1de52:	464b      	mov	r3, r9
   1de54:	2235      	movs	r2, #53	; 0x35
   1de56:	4641      	mov	r1, r8
   1de58:	4668      	mov	r0, sp
   1de5a:	f015 f8ce 	bl	32ffa <bt_crypto_aes_cmac>
	if (err) {
   1de5e:	4604      	mov	r4, r0
   1de60:	b980      	cbnz	r0, 1de84 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("mackey %1s", bt_hex(mackey, 16));

	sys_mem_swap(mackey, 16);
   1de62:	4648      	mov	r0, r9
   1de64:	f015 f8bb 	bl	32fde <sys_mem_swap.constprop.0>

	/* counter for ltk is 1 */
	m[0] = 0x01;
   1de68:	2301      	movs	r3, #1

	err = bt_crypto_aes_cmac(t, m, sizeof(m), ltk);
   1de6a:	2235      	movs	r2, #53	; 0x35
	m[0] = 0x01;
   1de6c:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	err = bt_crypto_aes_cmac(t, m, sizeof(m), ltk);
   1de70:	4641      	mov	r1, r8
   1de72:	463b      	mov	r3, r7
   1de74:	4668      	mov	r0, sp
   1de76:	f015 f8c0 	bl	32ffa <bt_crypto_aes_cmac>
	if (err) {
   1de7a:	4604      	mov	r4, r0
   1de7c:	b910      	cbnz	r0, 1de84 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("ltk %s", bt_hex(ltk, 16));

	sys_mem_swap(ltk, 16);
   1de7e:	4638      	mov	r0, r7
   1de80:	f015 f8ad 	bl	32fde <sys_mem_swap.constprop.0>

	return 0;
}
   1de84:	4620      	mov	r0, r4
   1de86:	b01a      	add	sp, #104	; 0x68
   1de88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1de8c:	00037c02 	.word	0x00037c02
   1de90:	0003daee 	.word	0x0003daee

0001de94 <bt_crypto_g2>:
	return 0;
}

int bt_crypto_g2(const uint8_t u[32], const uint8_t v[32], const uint8_t x[16], const uint8_t y[16],
		 uint32_t *passkey)
{
   1de94:	b570      	push	{r4, r5, r6, lr}
   1de96:	460e      	mov	r6, r1
   1de98:	461d      	mov	r5, r3
   1de9a:	4614      	mov	r4, r2
   1de9c:	b098      	sub	sp, #96	; 0x60
	LOG_DBG("u %s", bt_hex(u, 32));
	LOG_DBG("v %s", bt_hex(v, 32));
	LOG_DBG("x %s", bt_hex(x, 16));
	LOG_DBG("y %s", bt_hex(y, 16));

	sys_memcpy_swap(m, u, 32);
   1de9e:	4601      	mov	r1, r0
   1dea0:	2220      	movs	r2, #32
   1dea2:	a804      	add	r0, sp, #16
   1dea4:	f7ff ff62 	bl	1dd6c <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   1dea8:	2220      	movs	r2, #32
   1deaa:	4631      	mov	r1, r6
   1deac:	a80c      	add	r0, sp, #48	; 0x30
   1deae:	f7ff ff5d 	bl	1dd6c <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   1deb2:	2210      	movs	r2, #16
   1deb4:	4629      	mov	r1, r5
   1deb6:	a814      	add	r0, sp, #80	; 0x50
   1deb8:	f7ff ff58 	bl	1dd6c <sys_memcpy_swap>

	sys_memcpy_swap(xs, x, 16);
   1debc:	2210      	movs	r2, #16
   1debe:	4621      	mov	r1, r4
   1dec0:	4668      	mov	r0, sp
   1dec2:	f7ff ff53 	bl	1dd6c <sys_memcpy_swap>

	/* reuse xs (key) as buffer for result */
	err = bt_crypto_aes_cmac(xs, m, sizeof(m), xs);
   1dec6:	466b      	mov	r3, sp
   1dec8:	2250      	movs	r2, #80	; 0x50
   1deca:	4618      	mov	r0, r3
   1decc:	a904      	add	r1, sp, #16
   1dece:	f015 f894 	bl	32ffa <bt_crypto_aes_cmac>
	if (err) {
   1ded2:	b940      	cbnz	r0, 1dee6 <bt_crypto_g2+0x52>
		return err;
	}
	LOG_DBG("res %s", bt_hex(xs, 16));

	memcpy(passkey, xs + 12, 4);
   1ded4:	9b03      	ldr	r3, [sp, #12]
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1ded6:	4a05      	ldr	r2, [pc, #20]	; (1deec <bt_crypto_g2+0x58>)
   1ded8:	ba1b      	rev	r3, r3
   1deda:	fbb3 f1f2 	udiv	r1, r3, r2
   1dede:	fb02 3311 	mls	r3, r2, r1, r3
   1dee2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   1dee4:	6013      	str	r3, [r2, #0]

	LOG_DBG("passkey %u", *passkey);

	return 0;
}
   1dee6:	b018      	add	sp, #96	; 0x60
   1dee8:	bd70      	pop	{r4, r5, r6, pc}
   1deea:	bf00      	nop
   1deec:	000f4240 	.word	0x000f4240

0001def0 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1def0:	2234      	movs	r2, #52	; 0x34
   1def2:	4b02      	ldr	r3, [pc, #8]	; (1defc <net_buf_pool_get+0xc>)
   1def4:	fb02 3000 	mla	r0, r2, r0, r3
   1def8:	4770      	bx	lr
   1defa:	bf00      	nop
   1defc:	2000d014 	.word	0x2000d014

0001df00 <net_buf_id>:
int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1df00:	2134      	movs	r1, #52	; 0x34
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1df02:	7a82      	ldrb	r2, [r0, #10]
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1df04:	4b06      	ldr	r3, [pc, #24]	; (1df20 <net_buf_id+0x20>)
   1df06:	fb01 3302 	mla	r3, r1, r2, r3
   1df0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1df0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1df10:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1df12:	331b      	adds	r3, #27
   1df14:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   1df18:	fbb0 f0f3 	udiv	r0, r0, r3
   1df1c:	4770      	bx	lr
   1df1e:	bf00      	nop
   1df20:	2000d014 	.word	0x2000d014

0001df24 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1df24:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1df26:	2434      	movs	r4, #52	; 0x34
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1df28:	7a82      	ldrb	r2, [r0, #10]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1df2a:	4b09      	ldr	r3, [pc, #36]	; (1df50 <fixed_data_alloc+0x2c>)
   1df2c:	fb04 3302 	mla	r3, r4, r2, r3
   1df30:	6adb      	ldr	r3, [r3, #44]	; 0x2c

	*size = MIN(fixed->data_size, *size);
   1df32:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1df34:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1df36:	681a      	ldr	r2, [r3, #0]
   1df38:	4294      	cmp	r4, r2
   1df3a:	bf94      	ite	ls
   1df3c:	600c      	strls	r4, [r1, #0]
   1df3e:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1df40:	e9d3 5400 	ldrd	r5, r4, [r3]
   1df44:	f7ff ffdc 	bl	1df00 <net_buf_id>
}
   1df48:	fb05 4000 	mla	r0, r5, r0, r4
   1df4c:	bd38      	pop	{r3, r4, r5, pc}
   1df4e:	bf00      	nop
   1df50:	2000d014 	.word	0x2000d014

0001df54 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1df54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1df58:	b085      	sub	sp, #20
   1df5a:	9103      	str	r1, [sp, #12]
   1df5c:	4605      	mov	r5, r0
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1df5e:	4619      	mov	r1, r3
   1df60:	4610      	mov	r0, r2
{
   1df62:	4692      	mov	sl, r2
   1df64:	4699      	mov	r9, r3
   1df66:	4690      	mov	r8, r2
   1df68:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1df6a:	f018 f9b5 	bl	362d8 <sys_clock_timeout_end_calc>
   1df6e:	e9cd 0101 	strd	r0, r1, [sp, #4]
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(pool);
   1df72:	b945      	cbnz	r5, 1df86 <net_buf_alloc_len+0x32>
   1df74:	4966      	ldr	r1, [pc, #408]	; (1e110 <net_buf_alloc_len+0x1bc>)
   1df76:	23f4      	movs	r3, #244	; 0xf4
   1df78:	4a66      	ldr	r2, [pc, #408]	; (1e114 <net_buf_alloc_len+0x1c0>)
   1df7a:	4867      	ldr	r0, [pc, #412]	; (1e118 <net_buf_alloc_len+0x1c4>)
   1df7c:	f011 fa22 	bl	2f3c4 <assert_print>
   1df80:	21f4      	movs	r1, #244	; 0xf4
			net_buf_destroy(buf);
			return NULL;
		}

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
   1df82:	4864      	ldr	r0, [pc, #400]	; (1e114 <net_buf_alloc_len+0x1c0>)
   1df84:	e019      	b.n	1dfba <net_buf_alloc_len+0x66>
	key = k_spin_lock(&pool->lock);
   1df86:	f105 061c 	add.w	r6, r5, #28
	__asm__ volatile(
   1df8a:	f04f 0320 	mov.w	r3, #32
   1df8e:	f3ef 8b11 	mrs	fp, BASEPRI
   1df92:	f383 8812 	msr	BASEPRI_MAX, r3
   1df96:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1df9a:	4630      	mov	r0, r6
   1df9c:	f00b f8cc 	bl	29138 <z_spin_lock_valid>
   1dfa0:	b968      	cbnz	r0, 1dfbe <net_buf_alloc_len+0x6a>
   1dfa2:	2394      	movs	r3, #148	; 0x94
   1dfa4:	4a5d      	ldr	r2, [pc, #372]	; (1e11c <net_buf_alloc_len+0x1c8>)
   1dfa6:	495e      	ldr	r1, [pc, #376]	; (1e120 <net_buf_alloc_len+0x1cc>)
   1dfa8:	485b      	ldr	r0, [pc, #364]	; (1e118 <net_buf_alloc_len+0x1c4>)
   1dfaa:	f011 fa0b 	bl	2f3c4 <assert_print>
   1dfae:	4631      	mov	r1, r6
   1dfb0:	485c      	ldr	r0, [pc, #368]	; (1e124 <net_buf_alloc_len+0x1d0>)
   1dfb2:	f011 fa07 	bl	2f3c4 <assert_print>
   1dfb6:	2194      	movs	r1, #148	; 0x94
   1dfb8:	4858      	ldr	r0, [pc, #352]	; (1e11c <net_buf_alloc_len+0x1c8>)
   1dfba:	f011 f9fc 	bl	2f3b6 <assert_post_action>
	z_spin_lock_set_owner(l);
   1dfbe:	4630      	mov	r0, r6
   1dfc0:	f00b f8d6 	bl	29170 <z_spin_lock_set_owner>
	if (pool->uninit_count) {
   1dfc4:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   1dfc6:	2b00      	cmp	r3, #0
   1dfc8:	d070      	beq.n	1e0ac <net_buf_alloc_len+0x158>
		if (pool->uninit_count < pool->buf_count) {
   1dfca:	8c2a      	ldrh	r2, [r5, #32]
   1dfcc:	429a      	cmp	r2, r3
   1dfce:	d94d      	bls.n	1e06c <net_buf_alloc_len+0x118>
	return z_impl_k_queue_get(queue, timeout);
   1dfd0:	2200      	movs	r2, #0
   1dfd2:	2300      	movs	r3, #0
   1dfd4:	4628      	mov	r0, r5
   1dfd6:	f00b fafd 	bl	295d4 <z_impl_k_queue_get>
			if (buf) {
   1dfda:	4604      	mov	r4, r0
   1dfdc:	2800      	cmp	r0, #0
   1dfde:	d045      	beq.n	1e06c <net_buf_alloc_len+0x118>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1dfe0:	4630      	mov	r0, r6
   1dfe2:	f00b f8b7 	bl	29154 <z_spin_unlock_valid>
   1dfe6:	b958      	cbnz	r0, 1e000 <net_buf_alloc_len+0xac>
   1dfe8:	23c2      	movs	r3, #194	; 0xc2
   1dfea:	4a4c      	ldr	r2, [pc, #304]	; (1e11c <net_buf_alloc_len+0x1c8>)
   1dfec:	494e      	ldr	r1, [pc, #312]	; (1e128 <net_buf_alloc_len+0x1d4>)
   1dfee:	484a      	ldr	r0, [pc, #296]	; (1e118 <net_buf_alloc_len+0x1c4>)
   1dff0:	f011 f9e8 	bl	2f3c4 <assert_print>
   1dff4:	4631      	mov	r1, r6
   1dff6:	484d      	ldr	r0, [pc, #308]	; (1e12c <net_buf_alloc_len+0x1d8>)
   1dff8:	f011 f9e4 	bl	2f3c4 <assert_print>
   1dffc:	21c2      	movs	r1, #194	; 0xc2
   1dffe:	e7db      	b.n	1dfb8 <net_buf_alloc_len+0x64>
	__asm__ volatile(
   1e000:	f38b 8811 	msr	BASEPRI, fp
   1e004:	f3bf 8f6f 	isb	sy
	if (size) {
   1e008:	9d03      	ldr	r5, [sp, #12]
   1e00a:	2d00      	cmp	r5, #0
   1e00c:	d074      	beq.n	1e0f8 <net_buf_alloc_len+0x1a4>
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1e00e:	ea59 030a 	orrs.w	r3, r9, sl
   1e012:	d012      	beq.n	1e03a <net_buf_alloc_len+0xe6>
   1e014:	f1b9 3fff 	cmp.w	r9, #4294967295
   1e018:	bf08      	it	eq
   1e01a:	f1ba 3fff 	cmpeq.w	sl, #4294967295
   1e01e:	d00c      	beq.n	1e03a <net_buf_alloc_len+0xe6>
			int64_t remaining = end - sys_clock_tick_get();
   1e020:	f00d fd66 	bl	2baf0 <sys_clock_tick_get>
   1e024:	9b01      	ldr	r3, [sp, #4]
   1e026:	ebb3 0800 	subs.w	r8, r3, r0
   1e02a:	9b02      	ldr	r3, [sp, #8]
   1e02c:	eb63 0701 	sbc.w	r7, r3, r1
			if (remaining <= 0) {
   1e030:	2f00      	cmp	r7, #0
   1e032:	bfbc      	itt	lt
   1e034:	f04f 0800 	movlt.w	r8, #0
   1e038:	4647      	movlt	r7, r8
	return pool->alloc->cb->alloc(buf, size, timeout);
   1e03a:	f04f 0934 	mov.w	r9, #52	; 0x34
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1e03e:	7aa3      	ldrb	r3, [r4, #10]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1e040:	4e3b      	ldr	r6, [pc, #236]	; (1e130 <net_buf_alloc_len+0x1dc>)
   1e042:	4642      	mov	r2, r8
   1e044:	fb09 6303 	mla	r3, r9, r3, r6
   1e048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1e04a:	4620      	mov	r0, r4
   1e04c:	681b      	ldr	r3, [r3, #0]
   1e04e:	a903      	add	r1, sp, #12
   1e050:	f8d3 a000 	ldr.w	sl, [r3]
   1e054:	463b      	mov	r3, r7
   1e056:	47d0      	blx	sl
		buf->__buf = data_alloc(buf, &size, timeout);
   1e058:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
   1e05a:	2800      	cmp	r0, #0
   1e05c:	d13c      	bne.n	1e0d8 <net_buf_alloc_len+0x184>
	k_lifo_put(&pool->free, buf);
   1e05e:	7aa0      	ldrb	r0, [r4, #10]
   1e060:	4621      	mov	r1, r4
   1e062:	fb00 6009 	mla	r0, r0, r9, r6
   1e066:	f018 f875 	bl	36154 <k_queue_prepend>
}
   1e06a:	e030      	b.n	1e0ce <net_buf_alloc_len+0x17a>
		uninit_count = pool->uninit_count--;
   1e06c:	8c6c      	ldrh	r4, [r5, #34]	; 0x22
   1e06e:	4630      	mov	r0, r6
   1e070:	1e63      	subs	r3, r4, #1
   1e072:	846b      	strh	r3, [r5, #34]	; 0x22
   1e074:	f00b f86e 	bl	29154 <z_spin_unlock_valid>
   1e078:	2800      	cmp	r0, #0
   1e07a:	d0b5      	beq.n	1dfe8 <net_buf_alloc_len+0x94>
   1e07c:	f38b 8811 	msr	BASEPRI, fp
   1e080:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1e084:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1e088:	8c2a      	ldrh	r2, [r5, #32]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1e08a:	331b      	adds	r3, #27
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1e08c:	1b12      	subs	r2, r2, r4
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1e08e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1e090:	f023 0303 	bic.w	r3, r3, #3
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1e094:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
   1e098:	4b25      	ldr	r3, [pc, #148]	; (1e130 <net_buf_alloc_len+0x1dc>)
   1e09a:	4a26      	ldr	r2, [pc, #152]	; (1e134 <net_buf_alloc_len+0x1e0>)
   1e09c:	1aeb      	subs	r3, r5, r3
   1e09e:	109b      	asrs	r3, r3, #2
   1e0a0:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
   1e0a2:	72a3      	strb	r3, [r4, #10]
	buf->user_data_size = pool->user_data_size;
   1e0a4:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   1e0a8:	72e3      	strb	r3, [r4, #11]
		goto success;
   1e0aa:	e7ad      	b.n	1e008 <net_buf_alloc_len+0xb4>
   1e0ac:	4630      	mov	r0, r6
   1e0ae:	f00b f851 	bl	29154 <z_spin_unlock_valid>
   1e0b2:	2800      	cmp	r0, #0
   1e0b4:	d098      	beq.n	1dfe8 <net_buf_alloc_len+0x94>
   1e0b6:	f38b 8811 	msr	BASEPRI, fp
   1e0ba:	f3bf 8f6f 	isb	sy
   1e0be:	4652      	mov	r2, sl
   1e0c0:	464b      	mov	r3, r9
   1e0c2:	4628      	mov	r0, r5
   1e0c4:	f00b fa86 	bl	295d4 <z_impl_k_queue_get>
	if (!buf) {
   1e0c8:	4604      	mov	r4, r0
   1e0ca:	2800      	cmp	r0, #0
   1e0cc:	d19c      	bne.n	1e008 <net_buf_alloc_len+0xb4>
		return NULL;
   1e0ce:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1e0d0:	4620      	mov	r0, r4
   1e0d2:	b005      	add	sp, #20
   1e0d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_BUF_ASSERT(req_size <= size);
   1e0d8:	9b03      	ldr	r3, [sp, #12]
   1e0da:	429d      	cmp	r5, r3
   1e0dc:	d90d      	bls.n	1e0fa <net_buf_alloc_len+0x1a6>
   1e0de:	4916      	ldr	r1, [pc, #88]	; (1e138 <net_buf_alloc_len+0x1e4>)
   1e0e0:	f240 1355 	movw	r3, #341	; 0x155
   1e0e4:	4a0b      	ldr	r2, [pc, #44]	; (1e114 <net_buf_alloc_len+0x1c0>)
   1e0e6:	480c      	ldr	r0, [pc, #48]	; (1e118 <net_buf_alloc_len+0x1c4>)
   1e0e8:	f011 f96c 	bl	2f3c4 <assert_print>
   1e0ec:	4813      	ldr	r0, [pc, #76]	; (1e13c <net_buf_alloc_len+0x1e8>)
   1e0ee:	f011 f969 	bl	2f3c4 <assert_print>
   1e0f2:	f240 1155 	movw	r1, #341	; 0x155
   1e0f6:	e744      	b.n	1df82 <net_buf_alloc_len+0x2e>
		buf->__buf = NULL;
   1e0f8:	6165      	str	r5, [r4, #20]
	buf->frags = NULL;
   1e0fa:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1e0fc:	2201      	movs	r2, #1
	buf->frags = NULL;
   1e0fe:	6063      	str	r3, [r4, #4]
	buf->ref   = 1U;
   1e100:	8122      	strh	r2, [r4, #8]
	buf->len  = 0U;
   1e102:	8223      	strh	r3, [r4, #16]
	buf->size  = size;
   1e104:	9a03      	ldr	r2, [sp, #12]
	buf->data = buf->__buf;
   1e106:	6963      	ldr	r3, [r4, #20]
   1e108:	8262      	strh	r2, [r4, #18]
   1e10a:	60e3      	str	r3, [r4, #12]
}
   1e10c:	e7e0      	b.n	1e0d0 <net_buf_alloc_len+0x17c>
   1e10e:	bf00      	nop
   1e110:	0003db57 	.word	0x0003db57
   1e114:	0003db08 	.word	0x0003db08
   1e118:	00039995 	.word	0x00039995
   1e11c:	00039e53 	.word	0x00039e53
   1e120:	00039eac 	.word	0x00039eac
   1e124:	00039ec1 	.word	0x00039ec1
   1e128:	00039e80 	.word	0x00039e80
   1e12c:	00039e97 	.word	0x00039e97
   1e130:	2000d014 	.word	0x2000d014
   1e134:	c4ec4ec5 	.word	0xc4ec4ec5
   1e138:	0003db5c 	.word	0x0003db5c
   1e13c:	0003a4e8 	.word	0x0003a4e8

0001e140 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1e140:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(fifo);
   1e142:	b958      	cbnz	r0, 1e15c <net_buf_put+0x1c>
   1e144:	490d      	ldr	r1, [pc, #52]	; (1e17c <net_buf_put+0x3c>)
   1e146:	f240 13cd 	movw	r3, #461	; 0x1cd
   1e14a:	4a0d      	ldr	r2, [pc, #52]	; (1e180 <net_buf_put+0x40>)
   1e14c:	480d      	ldr	r0, [pc, #52]	; (1e184 <net_buf_put+0x44>)
   1e14e:	f011 f939 	bl	2f3c4 <assert_print>
   1e152:	f240 11cd 	movw	r1, #461	; 0x1cd
	__ASSERT_NO_MSG(buf);
   1e156:	480a      	ldr	r0, [pc, #40]	; (1e180 <net_buf_put+0x40>)
   1e158:	f011 f92d 	bl	2f3b6 <assert_post_action>
   1e15c:	b949      	cbnz	r1, 1e172 <net_buf_put+0x32>
   1e15e:	490a      	ldr	r1, [pc, #40]	; (1e188 <net_buf_put+0x48>)
   1e160:	f44f 73e7 	mov.w	r3, #462	; 0x1ce
   1e164:	4a06      	ldr	r2, [pc, #24]	; (1e180 <net_buf_put+0x40>)
   1e166:	4807      	ldr	r0, [pc, #28]	; (1e184 <net_buf_put+0x44>)
   1e168:	f011 f92c 	bl	2f3c4 <assert_print>
   1e16c:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
   1e170:	e7f1      	b.n	1e156 <net_buf_put+0x16>

	k_fifo_put(fifo, buf);
}
   1e172:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_fifo_put(fifo, buf);
   1e176:	f017 bfe2 	b.w	3613e <k_queue_append>
   1e17a:	bf00      	nop
   1e17c:	0003db6d 	.word	0x0003db6d
   1e180:	0003db08 	.word	0x0003db08
   1e184:	00039995 	.word	0x00039995
   1e188:	0003db82 	.word	0x0003db82

0001e18c <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1e18c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   1e190:	4605      	mov	r5, r0
   1e192:	b328      	cbz	r0, 1e1e0 <net_buf_unref+0x54>
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1e194:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   1e196:	f04f 0834 	mov.w	r8, #52	; 0x34
   1e19a:	4e1a      	ldr	r6, [pc, #104]	; (1e204 <net_buf_unref+0x78>)
		struct net_buf *frags = buf->frags;
   1e19c:	462c      	mov	r4, r5
		if (--buf->ref > 0) {
   1e19e:	7a23      	ldrb	r3, [r4, #8]
		struct net_buf *frags = buf->frags;
   1e1a0:	686d      	ldr	r5, [r5, #4]
		if (--buf->ref > 0) {
   1e1a2:	3b01      	subs	r3, #1
   1e1a4:	b2db      	uxtb	r3, r3
   1e1a6:	7223      	strb	r3, [r4, #8]
   1e1a8:	b9c3      	cbnz	r3, 1e1dc <net_buf_unref+0x50>
		if (buf->__buf) {
   1e1aa:	6961      	ldr	r1, [r4, #20]
   1e1ac:	b159      	cbz	r1, 1e1c6 <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1e1ae:	7a63      	ldrb	r3, [r4, #9]
   1e1b0:	07db      	lsls	r3, r3, #31
   1e1b2:	d407      	bmi.n	1e1c4 <net_buf_unref+0x38>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1e1b4:	7aa3      	ldrb	r3, [r4, #10]
	pool->alloc->cb->unref(buf, data);
   1e1b6:	4620      	mov	r0, r4
   1e1b8:	fb08 6303 	mla	r3, r8, r3, r6
   1e1bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1e1be:	681b      	ldr	r3, [r3, #0]
   1e1c0:	689b      	ldr	r3, [r3, #8]
   1e1c2:	4798      	blx	r3
			buf->__buf = NULL;
   1e1c4:	6167      	str	r7, [r4, #20]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   1e1c6:	7aa0      	ldrb	r0, [r4, #10]
		buf->data = NULL;
   1e1c8:	60e7      	str	r7, [r4, #12]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   1e1ca:	fb08 6300 	mla	r3, r8, r0, r6
		buf->frags = NULL;
   1e1ce:	6067      	str	r7, [r4, #4]
		if (pool->destroy) {
   1e1d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1e1d2:	b18b      	cbz	r3, 1e1f8 <net_buf_unref+0x6c>
			pool->destroy(buf);
   1e1d4:	4620      	mov	r0, r4
   1e1d6:	4798      	blx	r3
	while (buf) {
   1e1d8:	2d00      	cmp	r5, #0
   1e1da:	d1df      	bne.n	1e19c <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1e1dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   1e1e0:	4909      	ldr	r1, [pc, #36]	; (1e208 <net_buf_unref+0x7c>)
   1e1e2:	480a      	ldr	r0, [pc, #40]	; (1e20c <net_buf_unref+0x80>)
   1e1e4:	f240 13d9 	movw	r3, #473	; 0x1d9
   1e1e8:	4a09      	ldr	r2, [pc, #36]	; (1e210 <net_buf_unref+0x84>)
   1e1ea:	f011 f8eb 	bl	2f3c4 <assert_print>
   1e1ee:	f240 11d9 	movw	r1, #473	; 0x1d9
   1e1f2:	4807      	ldr	r0, [pc, #28]	; (1e210 <net_buf_unref+0x84>)
   1e1f4:	f011 f8df 	bl	2f3b6 <assert_post_action>
	k_lifo_put(&pool->free, buf);
   1e1f8:	4621      	mov	r1, r4
   1e1fa:	fb00 6008 	mla	r0, r0, r8, r6
   1e1fe:	f017 ffa9 	bl	36154 <k_queue_prepend>
}
   1e202:	e7e9      	b.n	1e1d8 <net_buf_unref+0x4c>
   1e204:	2000d014 	.word	0x2000d014
   1e208:	0003db82 	.word	0x0003db82
   1e20c:	00039995 	.word	0x00039995
   1e210:	0003db08 	.word	0x0003db08

0001e214 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   1e214:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   1e216:	b958      	cbnz	r0, 1e230 <net_buf_ref+0x1c>
   1e218:	4907      	ldr	r1, [pc, #28]	; (1e238 <net_buf_ref+0x24>)
   1e21a:	4808      	ldr	r0, [pc, #32]	; (1e23c <net_buf_ref+0x28>)
   1e21c:	f44f 7302 	mov.w	r3, #520	; 0x208
   1e220:	4a07      	ldr	r2, [pc, #28]	; (1e240 <net_buf_ref+0x2c>)
   1e222:	f011 f8cf 	bl	2f3c4 <assert_print>
   1e226:	f44f 7102 	mov.w	r1, #520	; 0x208
   1e22a:	4805      	ldr	r0, [pc, #20]	; (1e240 <net_buf_ref+0x2c>)
   1e22c:	f011 f8c3 	bl	2f3b6 <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1e230:	7a02      	ldrb	r2, [r0, #8]
   1e232:	3201      	adds	r2, #1
   1e234:	7202      	strb	r2, [r0, #8]
	return buf;
}
   1e236:	bd08      	pop	{r3, pc}
   1e238:	0003db82 	.word	0x0003db82
   1e23c:	00039995 	.word	0x00039995
   1e240:	0003db08 	.word	0x0003db08

0001e244 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1e244:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   1e246:	4603      	mov	r3, r0
   1e248:	b958      	cbnz	r0, 1e262 <net_buf_frag_last+0x1e>
   1e24a:	4908      	ldr	r1, [pc, #32]	; (1e26c <net_buf_frag_last+0x28>)
   1e24c:	4808      	ldr	r0, [pc, #32]	; (1e270 <net_buf_frag_last+0x2c>)
   1e24e:	f240 2345 	movw	r3, #581	; 0x245
   1e252:	4a08      	ldr	r2, [pc, #32]	; (1e274 <net_buf_frag_last+0x30>)
   1e254:	f011 f8b6 	bl	2f3c4 <assert_print>
   1e258:	f240 2145 	movw	r1, #581	; 0x245
   1e25c:	4805      	ldr	r0, [pc, #20]	; (1e274 <net_buf_frag_last+0x30>)
   1e25e:	f011 f8aa 	bl	2f3b6 <assert_post_action>

	while (buf->frags) {
   1e262:	4618      	mov	r0, r3
   1e264:	685b      	ldr	r3, [r3, #4]
   1e266:	2b00      	cmp	r3, #0
   1e268:	d1fb      	bne.n	1e262 <net_buf_frag_last+0x1e>
		buf = buf->frags;
	}

	return buf;
}
   1e26a:	bd08      	pop	{r3, pc}
   1e26c:	0003db82 	.word	0x0003db82
   1e270:	00039995 	.word	0x00039995
   1e274:	0003db08 	.word	0x0003db08

0001e278 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   1e278:	b570      	push	{r4, r5, r6, lr}
   1e27a:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   1e27c:	4604      	mov	r4, r0
   1e27e:	b958      	cbnz	r0, 1e298 <net_buf_frag_insert+0x20>
   1e280:	490f      	ldr	r1, [pc, #60]	; (1e2c0 <net_buf_frag_insert+0x48>)
   1e282:	f44f 7314 	mov.w	r3, #592	; 0x250
   1e286:	4a0f      	ldr	r2, [pc, #60]	; (1e2c4 <net_buf_frag_insert+0x4c>)
   1e288:	480f      	ldr	r0, [pc, #60]	; (1e2c8 <net_buf_frag_insert+0x50>)
   1e28a:	f011 f89b 	bl	2f3c4 <assert_print>
   1e28e:	f44f 7114 	mov.w	r1, #592	; 0x250
	__ASSERT_NO_MSG(frag);
   1e292:	480c      	ldr	r0, [pc, #48]	; (1e2c4 <net_buf_frag_insert+0x4c>)
   1e294:	f011 f88f 	bl	2f3b6 <assert_post_action>
   1e298:	b949      	cbnz	r1, 1e2ae <net_buf_frag_insert+0x36>
   1e29a:	490c      	ldr	r1, [pc, #48]	; (1e2cc <net_buf_frag_insert+0x54>)
   1e29c:	f240 2351 	movw	r3, #593	; 0x251
   1e2a0:	4a08      	ldr	r2, [pc, #32]	; (1e2c4 <net_buf_frag_insert+0x4c>)
   1e2a2:	4809      	ldr	r0, [pc, #36]	; (1e2c8 <net_buf_frag_insert+0x50>)
   1e2a4:	f011 f88e 	bl	2f3c4 <assert_print>
   1e2a8:	f240 2151 	movw	r1, #593	; 0x251
   1e2ac:	e7f1      	b.n	1e292 <net_buf_frag_insert+0x1a>

	if (parent->frags) {
   1e2ae:	6846      	ldr	r6, [r0, #4]
   1e2b0:	b11e      	cbz	r6, 1e2ba <net_buf_frag_insert+0x42>
		net_buf_frag_last(frag)->frags = parent->frags;
   1e2b2:	4608      	mov	r0, r1
   1e2b4:	f7ff ffc6 	bl	1e244 <net_buf_frag_last>
   1e2b8:	6046      	str	r6, [r0, #4]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1e2ba:	6065      	str	r5, [r4, #4]
}
   1e2bc:	bd70      	pop	{r4, r5, r6, pc}
   1e2be:	bf00      	nop
   1e2c0:	0003db72 	.word	0x0003db72
   1e2c4:	0003db08 	.word	0x0003db08
   1e2c8:	00039995 	.word	0x00039995
   1e2cc:	0003db79 	.word	0x0003db79

0001e2d0 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1e2d0:	b538      	push	{r3, r4, r5, lr}
   1e2d2:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(frag);
   1e2d4:	460c      	mov	r4, r1
   1e2d6:	b959      	cbnz	r1, 1e2f0 <net_buf_frag_add+0x20>
   1e2d8:	490c      	ldr	r1, [pc, #48]	; (1e30c <net_buf_frag_add+0x3c>)
   1e2da:	480d      	ldr	r0, [pc, #52]	; (1e310 <net_buf_frag_add+0x40>)
   1e2dc:	f44f 7317 	mov.w	r3, #604	; 0x25c
   1e2e0:	4a0c      	ldr	r2, [pc, #48]	; (1e314 <net_buf_frag_add+0x44>)
   1e2e2:	f011 f86f 	bl	2f3c4 <assert_print>
   1e2e6:	f44f 7117 	mov.w	r1, #604	; 0x25c
   1e2ea:	480a      	ldr	r0, [pc, #40]	; (1e314 <net_buf_frag_add+0x44>)
   1e2ec:	f011 f863 	bl	2f3b6 <assert_post_action>

	if (!head) {
   1e2f0:	b920      	cbnz	r0, 1e2fc <net_buf_frag_add+0x2c>
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1e2f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   1e2f6:	4608      	mov	r0, r1
   1e2f8:	f7ff bf8c 	b.w	1e214 <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1e2fc:	f7ff ffa2 	bl	1e244 <net_buf_frag_last>
   1e300:	4621      	mov	r1, r4
   1e302:	f7ff ffb9 	bl	1e278 <net_buf_frag_insert>
}
   1e306:	4628      	mov	r0, r5
   1e308:	bd38      	pop	{r3, r4, r5, pc}
   1e30a:	bf00      	nop
   1e30c:	0003db79 	.word	0x0003db79
   1e310:	00039995 	.word	0x00039995
   1e314:	0003db08 	.word	0x0003db08

0001e318 <net_buf_append_bytes>:
 * the buffer. It assumes that the buffer has at least one fragment.
 */
size_t net_buf_append_bytes(struct net_buf *buf, size_t len,
			    const void *value, k_timeout_t timeout,
			    net_buf_allocator_cb allocate_cb, void *user_data)
{
   1e318:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e31c:	4607      	mov	r7, r0
   1e31e:	460d      	mov	r5, r1
   1e320:	4616      	mov	r6, r2
	struct net_buf *frag = net_buf_frag_last(buf);
   1e322:	f7ff ff8f 	bl	1e244 <net_buf_frag_last>
	size_t added_len = 0;
   1e326:	f04f 0800 	mov.w	r8, #0
	struct net_buf *frag = net_buf_frag_last(buf);
   1e32a:	4604      	mov	r4, r0
	return &_net_buf_pool_list[id];
   1e32c:	f04f 0a34 	mov.w	sl, #52	; 0x34
   1e330:	f8df b064 	ldr.w	fp, [pc, #100]	; 1e398 <net_buf_append_bytes+0x80>
	return net_buf_simple_tailroom(&buf->b);
   1e334:	340c      	adds	r4, #12
   1e336:	4620      	mov	r0, r4
   1e338:	f014 ff14 	bl	33164 <net_buf_simple_tailroom>
	const uint8_t *value8 = value;

	do {
		uint16_t count = MIN(len, net_buf_tailroom(frag));
   1e33c:	4285      	cmp	r5, r0
   1e33e:	d31b      	bcc.n	1e378 <net_buf_append_bytes+0x60>
   1e340:	4620      	mov	r0, r4
   1e342:	f014 ff0f 	bl	33164 <net_buf_simple_tailroom>
   1e346:	fa1f f980 	uxth.w	r9, r0
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1e34a:	4631      	mov	r1, r6
   1e34c:	464a      	mov	r2, r9
   1e34e:	4620      	mov	r0, r4
   1e350:	f014 ff10 	bl	33174 <net_buf_simple_add_mem>
		net_buf_add_mem(frag, value8, count);
		len -= count;
		added_len += count;
		value8 += count;

		if (len == 0) {
   1e354:	ebb5 0509 	subs.w	r5, r5, r9
		added_len += count;
   1e358:	44c8      	add	r8, r9
		value8 += count;
   1e35a:	444e      	add	r6, r9
		if (len == 0) {
   1e35c:	d018      	beq.n	1e390 <net_buf_append_bytes+0x78>
			return added_len;
		}

		if (allocate_cb) {
   1e35e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1e360:	b16b      	cbz	r3, 1e37e <net_buf_append_bytes+0x66>
			frag = allocate_cb(timeout, user_data);
   1e362:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1e366:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1e368:	4798      	blx	r3

			/* Allocate from the original pool if no callback has
			 * been provided.
			 */
			pool = net_buf_pool_get(buf->pool_id);
			frag = net_buf_alloc_len(pool, len, timeout);
   1e36a:	4604      	mov	r4, r0
		}

		if (!frag) {
   1e36c:	b180      	cbz	r0, 1e390 <net_buf_append_bytes+0x78>
			return added_len;
		}

		net_buf_frag_add(buf, frag);
   1e36e:	4601      	mov	r1, r0
   1e370:	4638      	mov	r0, r7
   1e372:	f7ff ffad 	bl	1e2d0 <net_buf_frag_add>
	do {
   1e376:	e7dd      	b.n	1e334 <net_buf_append_bytes+0x1c>
		uint16_t count = MIN(len, net_buf_tailroom(frag));
   1e378:	fa1f f985 	uxth.w	r9, r5
   1e37c:	e7e5      	b.n	1e34a <net_buf_append_bytes+0x32>
	return &_net_buf_pool_list[id];
   1e37e:	7ab8      	ldrb	r0, [r7, #10]
			frag = net_buf_alloc_len(pool, len, timeout);
   1e380:	4629      	mov	r1, r5
   1e382:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1e386:	fb00 b00a 	mla	r0, r0, sl, fp
   1e38a:	f7ff fde3 	bl	1df54 <net_buf_alloc_len>
   1e38e:	e7ec      	b.n	1e36a <net_buf_append_bytes+0x52>
	} while (1);

	/* Unreachable */
	return 0;
}
   1e390:	4640      	mov	r0, r8
   1e392:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e396:	bf00      	nop
   1e398:	2000d014 	.word	0x2000d014

0001e39c <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   1e39c:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   1e39e:	b948      	cbnz	r0, 1e3b4 <net_buf_simple_reserve+0x18>
   1e3a0:	490b      	ldr	r1, [pc, #44]	; (1e3d0 <net_buf_simple_reserve+0x34>)
   1e3a2:	232b      	movs	r3, #43	; 0x2b
   1e3a4:	4a0b      	ldr	r2, [pc, #44]	; (1e3d4 <net_buf_simple_reserve+0x38>)
   1e3a6:	480c      	ldr	r0, [pc, #48]	; (1e3d8 <net_buf_simple_reserve+0x3c>)
   1e3a8:	f011 f80c 	bl	2f3c4 <assert_print>
   1e3ac:	212b      	movs	r1, #43	; 0x2b
	__ASSERT_NO_MSG(buf->len == 0U);
   1e3ae:	4809      	ldr	r0, [pc, #36]	; (1e3d4 <net_buf_simple_reserve+0x38>)
   1e3b0:	f011 f801 	bl	2f3b6 <assert_post_action>
   1e3b4:	8883      	ldrh	r3, [r0, #4]
   1e3b6:	b13b      	cbz	r3, 1e3c8 <net_buf_simple_reserve+0x2c>
   1e3b8:	4908      	ldr	r1, [pc, #32]	; (1e3dc <net_buf_simple_reserve+0x40>)
   1e3ba:	232c      	movs	r3, #44	; 0x2c
   1e3bc:	4a05      	ldr	r2, [pc, #20]	; (1e3d4 <net_buf_simple_reserve+0x38>)
   1e3be:	4806      	ldr	r0, [pc, #24]	; (1e3d8 <net_buf_simple_reserve+0x3c>)
   1e3c0:	f011 f800 	bl	2f3c4 <assert_print>
   1e3c4:	212c      	movs	r1, #44	; 0x2c
   1e3c6:	e7f2      	b.n	1e3ae <net_buf_simple_reserve+0x12>
	NET_BUF_SIMPLE_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1e3c8:	6883      	ldr	r3, [r0, #8]
   1e3ca:	440b      	add	r3, r1
   1e3cc:	6003      	str	r3, [r0, #0]
}
   1e3ce:	bd08      	pop	{r3, pc}
   1e3d0:	0003db82 	.word	0x0003db82
   1e3d4:	0003db86 	.word	0x0003db86
   1e3d8:	00039995 	.word	0x00039995
   1e3dc:	0003dbb1 	.word	0x0003dbb1

0001e3e0 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1e3e0:	b508      	push	{r3, lr}
   1e3e2:	4603      	mov	r3, r0
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1e3e4:	6800      	ldr	r0, [r0, #0]
   1e3e6:	689a      	ldr	r2, [r3, #8]
   1e3e8:	1a82      	subs	r2, r0, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1e3ea:	4291      	cmp	r1, r2
   1e3ec:	d90b      	bls.n	1e406 <net_buf_simple_push+0x26>
   1e3ee:	4909      	ldr	r1, [pc, #36]	; (1e414 <net_buf_simple_push+0x34>)
   1e3f0:	4809      	ldr	r0, [pc, #36]	; (1e418 <net_buf_simple_push+0x38>)
   1e3f2:	f240 132d 	movw	r3, #301	; 0x12d
   1e3f6:	4a09      	ldr	r2, [pc, #36]	; (1e41c <net_buf_simple_push+0x3c>)
   1e3f8:	f010 ffe4 	bl	2f3c4 <assert_print>
   1e3fc:	f240 112d 	movw	r1, #301	; 0x12d
   1e400:	4806      	ldr	r0, [pc, #24]	; (1e41c <net_buf_simple_push+0x3c>)
   1e402:	f010 ffd8 	bl	2f3b6 <assert_post_action>
	buf->len += len;
   1e406:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   1e408:	1a40      	subs	r0, r0, r1
	buf->len += len;
   1e40a:	4411      	add	r1, r2
	buf->data -= len;
   1e40c:	6018      	str	r0, [r3, #0]
	buf->len += len;
   1e40e:	8099      	strh	r1, [r3, #4]
}
   1e410:	bd08      	pop	{r3, pc}
   1e412:	bf00      	nop
   1e414:	0003dbd0 	.word	0x0003dbd0
   1e418:	00039995 	.word	0x00039995
   1e41c:	0003db86 	.word	0x0003db86

0001e420 <net_buf_simple_pull>:
{
   1e420:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   1e422:	8882      	ldrh	r2, [r0, #4]
{
   1e424:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf->len >= len);
   1e426:	428a      	cmp	r2, r1
   1e428:	d20b      	bcs.n	1e442 <net_buf_simple_pull+0x22>
   1e42a:	4909      	ldr	r1, [pc, #36]	; (1e450 <net_buf_simple_pull+0x30>)
   1e42c:	4809      	ldr	r0, [pc, #36]	; (1e454 <net_buf_simple_pull+0x34>)
   1e42e:	f240 138d 	movw	r3, #397	; 0x18d
   1e432:	4a09      	ldr	r2, [pc, #36]	; (1e458 <net_buf_simple_pull+0x38>)
   1e434:	f010 ffc6 	bl	2f3c4 <assert_print>
   1e438:	f240 118d 	movw	r1, #397	; 0x18d
   1e43c:	4806      	ldr	r0, [pc, #24]	; (1e458 <net_buf_simple_pull+0x38>)
   1e43e:	f010 ffba 	bl	2f3b6 <assert_post_action>
	buf->len -= len;
   1e442:	1a52      	subs	r2, r2, r1
   1e444:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   1e446:	6800      	ldr	r0, [r0, #0]
   1e448:	4408      	add	r0, r1
   1e44a:	6018      	str	r0, [r3, #0]
}
   1e44c:	bd08      	pop	{r3, pc}
   1e44e:	bf00      	nop
   1e450:	0003dbc0 	.word	0x0003dbc0
   1e454:	00039995 	.word	0x00039995
   1e458:	0003db86 	.word	0x0003db86

0001e45c <net_buf_simple_pull_mem>:
{
   1e45c:	b508      	push	{r3, lr}
   1e45e:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf->len >= len);
   1e460:	889a      	ldrh	r2, [r3, #4]
	void *data = buf->data;
   1e462:	6800      	ldr	r0, [r0, #0]
	__ASSERT_NO_MSG(buf->len >= len);
   1e464:	428a      	cmp	r2, r1
   1e466:	d20b      	bcs.n	1e480 <net_buf_simple_pull_mem+0x24>
   1e468:	4908      	ldr	r1, [pc, #32]	; (1e48c <net_buf_simple_pull_mem+0x30>)
   1e46a:	4809      	ldr	r0, [pc, #36]	; (1e490 <net_buf_simple_pull_mem+0x34>)
   1e46c:	f240 1399 	movw	r3, #409	; 0x199
   1e470:	4a08      	ldr	r2, [pc, #32]	; (1e494 <net_buf_simple_pull_mem+0x38>)
   1e472:	f010 ffa7 	bl	2f3c4 <assert_print>
   1e476:	f240 1199 	movw	r1, #409	; 0x199
   1e47a:	4806      	ldr	r0, [pc, #24]	; (1e494 <net_buf_simple_pull_mem+0x38>)
   1e47c:	f010 ff9b 	bl	2f3b6 <assert_post_action>
	buf->len -= len;
   1e480:	1a52      	subs	r2, r2, r1
	buf->data += len;
   1e482:	4401      	add	r1, r0
	buf->len -= len;
   1e484:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   1e486:	6019      	str	r1, [r3, #0]
}
   1e488:	bd08      	pop	{r3, pc}
   1e48a:	bf00      	nop
   1e48c:	0003dbc0 	.word	0x0003dbc0
   1e490:	00039995 	.word	0x00039995
   1e494:	0003db86 	.word	0x0003db86

0001e498 <net_buf_simple_add>:
{
   1e498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return buf->data + buf->len;
   1e49a:	8885      	ldrh	r5, [r0, #4]
   1e49c:	6803      	ldr	r3, [r0, #0]
   1e49e:	460e      	mov	r6, r1
   1e4a0:	4604      	mov	r4, r0
   1e4a2:	195f      	adds	r7, r3, r5
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   1e4a4:	f014 fe5e 	bl	33164 <net_buf_simple_tailroom>
   1e4a8:	42b0      	cmp	r0, r6
   1e4aa:	d209      	bcs.n	1e4c0 <net_buf_simple_add+0x28>
   1e4ac:	4906      	ldr	r1, [pc, #24]	; (1e4c8 <net_buf_simple_add+0x30>)
   1e4ae:	4807      	ldr	r0, [pc, #28]	; (1e4cc <net_buf_simple_add+0x34>)
   1e4b0:	233e      	movs	r3, #62	; 0x3e
   1e4b2:	4a07      	ldr	r2, [pc, #28]	; (1e4d0 <net_buf_simple_add+0x38>)
   1e4b4:	f010 ff86 	bl	2f3c4 <assert_print>
   1e4b8:	213e      	movs	r1, #62	; 0x3e
   1e4ba:	4805      	ldr	r0, [pc, #20]	; (1e4d0 <net_buf_simple_add+0x38>)
   1e4bc:	f010 ff7b 	bl	2f3b6 <assert_post_action>
	buf->len += len;
   1e4c0:	4435      	add	r5, r6
   1e4c2:	80a5      	strh	r5, [r4, #4]
}
   1e4c4:	4638      	mov	r0, r7
   1e4c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e4c8:	0003dbf4 	.word	0x0003dbf4
   1e4cc:	00039995 	.word	0x00039995
   1e4d0:	0003db86 	.word	0x0003db86

0001e4d4 <net_if_flag_set>:
 * @param iface Pointer to network interface
 * @param value Flag value
 */
static inline void net_if_flag_set(struct net_if *iface,
				   enum net_if_flag value)
{
   1e4d4:	b508      	push	{r3, lr}
	NET_ASSERT(iface);
   1e4d6:	b970      	cbnz	r0, 1e4f6 <net_if_flag_set+0x22>
   1e4d8:	490d      	ldr	r1, [pc, #52]	; (1e510 <net_if_flag_set+0x3c>)
   1e4da:	f44f 7307 	mov.w	r3, #540	; 0x21c
   1e4de:	4a0d      	ldr	r2, [pc, #52]	; (1e514 <net_if_flag_set+0x40>)
   1e4e0:	480d      	ldr	r0, [pc, #52]	; (1e518 <net_if_flag_set+0x44>)
   1e4e2:	f010 ff6f 	bl	2f3c4 <assert_print>
   1e4e6:	480d      	ldr	r0, [pc, #52]	; (1e51c <net_if_flag_set+0x48>)
   1e4e8:	f010 ff6c 	bl	2f3c4 <assert_print>
   1e4ec:	f44f 7107 	mov.w	r1, #540	; 0x21c
   1e4f0:	4808      	ldr	r0, [pc, #32]	; (1e514 <net_if_flag_set+0x40>)
   1e4f2:	f010 ff60 	bl	2f3b6 <assert_post_action>
	atomic_val_t mask = ATOMIC_MASK(bit);
   1e4f6:	2201      	movs	r2, #1
   1e4f8:	6803      	ldr	r3, [r0, #0]
   1e4fa:	fa02 f101 	lsl.w	r1, r2, r1
   1e4fe:	330c      	adds	r3, #12
   1e500:	e8d3 0fef 	ldaex	r0, [r3]
   1e504:	4308      	orrs	r0, r1
   1e506:	e8c3 0fe2 	stlex	r2, r0, [r3]
   1e50a:	2a00      	cmp	r2, #0
   1e50c:	d1f8      	bne.n	1e500 <net_if_flag_set+0x2c>

	atomic_set_bit(iface->if_dev->flags, value);
}
   1e50e:	bd08      	pop	{r3, pc}
   1e510:	0003dc5a 	.word	0x0003dc5a
   1e514:	0003dc60 	.word	0x0003dc60
   1e518:	00039995 	.word	0x00039995
   1e51c:	0003a4e8 	.word	0x0003a4e8

0001e520 <net_if_flag_clear>:
 * @param iface Pointer to network interface
 * @param value Flag value
 */
static inline void net_if_flag_clear(struct net_if *iface,
				     enum net_if_flag value)
{
   1e520:	b508      	push	{r3, lr}
	NET_ASSERT(iface);
   1e522:	b970      	cbnz	r0, 1e542 <net_if_flag_clear+0x22>
   1e524:	490e      	ldr	r1, [pc, #56]	; (1e560 <net_if_flag_clear+0x40>)
   1e526:	f240 233a 	movw	r3, #570	; 0x23a
   1e52a:	4a0e      	ldr	r2, [pc, #56]	; (1e564 <net_if_flag_clear+0x44>)
   1e52c:	480e      	ldr	r0, [pc, #56]	; (1e568 <net_if_flag_clear+0x48>)
   1e52e:	f010 ff49 	bl	2f3c4 <assert_print>
   1e532:	480e      	ldr	r0, [pc, #56]	; (1e56c <net_if_flag_clear+0x4c>)
   1e534:	f010 ff46 	bl	2f3c4 <assert_print>
   1e538:	f240 213a 	movw	r1, #570	; 0x23a
   1e53c:	4809      	ldr	r0, [pc, #36]	; (1e564 <net_if_flag_clear+0x44>)
   1e53e:	f010 ff3a 	bl	2f3b6 <assert_post_action>
	atomic_val_t mask = ATOMIC_MASK(bit);
   1e542:	2301      	movs	r3, #1
   1e544:	fa03 f101 	lsl.w	r1, r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1e548:	43c9      	mvns	r1, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e54a:	6802      	ldr	r2, [r0, #0]
   1e54c:	f102 030c 	add.w	r3, r2, #12
   1e550:	e8d3 0fef 	ldaex	r0, [r3]
   1e554:	4008      	ands	r0, r1
   1e556:	e8c3 0fe2 	stlex	r2, r0, [r3]
   1e55a:	2a00      	cmp	r2, #0
   1e55c:	d1f8      	bne.n	1e550 <net_if_flag_clear+0x30>

	atomic_clear_bit(iface->if_dev->flags, value);
}
   1e55e:	bd08      	pop	{r3, pc}
   1e560:	0003dc5a 	.word	0x0003dc5a
   1e564:	0003dc60 	.word	0x0003dc60
   1e568:	00039995 	.word	0x00039995
   1e56c:	0003a4e8 	.word	0x0003a4e8

0001e570 <k_mutex_lock.constprop.0.isra.0>:
static inline int k_mutex_lock(struct k_mutex * mutex, k_timeout_t timeout)
   1e570:	4602      	mov	r2, r0
   1e572:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1e574:	4801      	ldr	r0, [pc, #4]	; (1e57c <k_mutex_lock.constprop.0.isra.0+0xc>)
   1e576:	f00a be35 	b.w	291e4 <z_impl_k_mutex_lock>
   1e57a:	bf00      	nop
   1e57c:	2000cec4 	.word	0x2000cec4

0001e580 <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   1e580:	4801      	ldr	r0, [pc, #4]	; (1e588 <k_mutex_unlock.constprop.0.isra.0+0x8>)
   1e582:	f00a beff 	b.w	29384 <z_impl_k_mutex_unlock>
   1e586:	bf00      	nop
   1e588:	2000cec4 	.word	0x2000cec4

0001e58c <update_operational_state>:
	return "";
#endif /* CONFIG_NET_IF_LOG_LEVEL >= LOG_LEVEL_DBG */
}

static void update_operational_state(struct net_if *iface)
{
   1e58c:	b510      	push	{r4, lr}
	enum net_if_oper_state prev_state = iface->if_dev->oper_state;
   1e58e:	6803      	ldr	r3, [r0, #0]
 */
static inline bool net_if_is_admin_up(struct net_if *iface)
{
	NET_ASSERT(iface);

	return net_if_flag_is_set(iface, NET_IF_UP);
   1e590:	2100      	movs	r1, #0
{
   1e592:	4604      	mov	r4, r0
	enum net_if_oper_state prev_state = iface->if_dev->oper_state;
   1e594:	f893 2020 	ldrb.w	r2, [r3, #32]
   1e598:	f014 fe1d 	bl	331d6 <net_if_flag_is_set>
	enum net_if_oper_state new_state = NET_IF_OPER_UNKNOWN;

	if (!net_if_is_admin_up(iface)) {
   1e59c:	b978      	cbnz	r0, 1e5be <update_operational_state+0x32>
		iface->if_dev->oper_state = oper_state;
   1e59e:	2102      	movs	r1, #2
   1e5a0:	6823      	ldr	r3, [r4, #0]
   1e5a2:	f883 1020 	strb.w	r1, [r3, #32]
	return iface->if_dev->oper_state;
   1e5a6:	6823      	ldr	r3, [r4, #0]
	}

	new_state = NET_IF_OPER_UP;

exit:
	if (net_if_oper_state_set(iface, new_state) != new_state) {
   1e5a8:	f893 3020 	ldrb.w	r3, [r3, #32]
   1e5ac:	428b      	cmp	r3, r1
   1e5ae:	d13e      	bne.n	1e62e <update_operational_state+0xa2>
	if (net_if_oper_state(iface) == NET_IF_OPER_UP) {
		if (prev_state != NET_IF_OPER_UP) {
			notify_iface_up(iface);
		}
	} else {
		if (prev_state == NET_IF_OPER_UP) {
   1e5b0:	2a06      	cmp	r2, #6
   1e5b2:	d13c      	bne.n	1e62e <update_operational_state+0xa2>
	net_if_flag_clear(iface, NET_IF_RUNNING);
   1e5b4:	2108      	movs	r1, #8
   1e5b6:	4620      	mov	r0, r4
   1e5b8:	f7ff ffb2 	bl	1e520 <net_if_flag_clear>
	return (iface->if_dev->socket_offload != NULL);
   1e5bc:	e02f      	b.n	1e61e <update_operational_state+0x92>
 */
static inline bool net_if_is_carrier_ok(struct net_if *iface)
{
	NET_ASSERT(iface);

	return net_if_flag_is_set(iface, NET_IF_LOWER_UP);
   1e5be:	2109      	movs	r1, #9
   1e5c0:	4620      	mov	r0, r4
   1e5c2:	f014 fe08 	bl	331d6 <net_if_flag_is_set>
	if (!net_if_is_carrier_ok(iface)) {
   1e5c6:	2800      	cmp	r0, #0
   1e5c8:	d0e9      	beq.n	1e59e <update_operational_state+0x12>
 */
static inline bool net_if_is_dormant(struct net_if *iface)
{
	NET_ASSERT(iface);

	return net_if_flag_is_set(iface, NET_IF_DORMANT);
   1e5ca:	210a      	movs	r1, #10
   1e5cc:	4620      	mov	r0, r4
   1e5ce:	f014 fe02 	bl	331d6 <net_if_flag_is_set>
		iface->if_dev->oper_state = oper_state;
   1e5d2:	6823      	ldr	r3, [r4, #0]
   1e5d4:	f1c0 0006 	rsb	r0, r0, #6
   1e5d8:	b2c0      	uxtb	r0, r0
   1e5da:	f883 0020 	strb.w	r0, [r3, #32]
	return iface->if_dev->oper_state;
   1e5de:	6823      	ldr	r3, [r4, #0]
	if (net_if_oper_state_set(iface, new_state) != new_state) {
   1e5e0:	f893 1020 	ldrb.w	r1, [r3, #32]
   1e5e4:	4281      	cmp	r1, r0
   1e5e6:	d122      	bne.n	1e62e <update_operational_state+0xa2>
	if (net_if_oper_state(iface) == NET_IF_OPER_UP) {
   1e5e8:	2906      	cmp	r1, #6
   1e5ea:	d1e1      	bne.n	1e5b0 <update_operational_state+0x24>
		if (prev_state != NET_IF_OPER_UP) {
   1e5ec:	2a06      	cmp	r2, #6
   1e5ee:	d01e      	beq.n	1e62e <update_operational_state+0xa2>
		if (!is_iface_offloaded(iface)) {
   1e5f0:	69da      	ldr	r2, [r3, #28]
   1e5f2:	b982      	cbnz	r2, 1e616 <update_operational_state+0x8a>
			NET_ASSERT(net_if_get_link_addr(iface)->addr != NULL);
   1e5f4:	691b      	ldr	r3, [r3, #16]
   1e5f6:	b973      	cbnz	r3, 1e616 <update_operational_state+0x8a>
   1e5f8:	490d      	ldr	r1, [pc, #52]	; (1e630 <update_operational_state+0xa4>)
   1e5fa:	f44f 637e 	mov.w	r3, #4064	; 0xfe0
   1e5fe:	4a0d      	ldr	r2, [pc, #52]	; (1e634 <update_operational_state+0xa8>)
   1e600:	480d      	ldr	r0, [pc, #52]	; (1e638 <update_operational_state+0xac>)
   1e602:	f010 fedf 	bl	2f3c4 <assert_print>
   1e606:	480d      	ldr	r0, [pc, #52]	; (1e63c <update_operational_state+0xb0>)
   1e608:	f010 fedc 	bl	2f3c4 <assert_print>
   1e60c:	f44f 617e 	mov.w	r1, #4064	; 0xfe0
   1e610:	4808      	ldr	r0, [pc, #32]	; (1e634 <update_operational_state+0xa8>)
   1e612:	f010 fed0 	bl	2f3b6 <assert_post_action>
	net_if_flag_set(iface, NET_IF_RUNNING);
   1e616:	2108      	movs	r1, #8
   1e618:	4620      	mov	r0, r4
   1e61a:	f7ff ff5b 	bl	1e4d4 <net_if_flag_set>
	return (iface->if_dev->socket_offload != NULL);
   1e61e:	6823      	ldr	r3, [r4, #0]
	if (!is_iface_offloaded(iface) &&
   1e620:	69db      	ldr	r3, [r3, #28]
   1e622:	b923      	cbnz	r3, 1e62e <update_operational_state+0xa2>
	    !(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   1e624:	4620      	mov	r0, r4
			notify_iface_down(iface);
		}
	}
}
   1e626:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	    !(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   1e62a:	f014 bddd 	b.w	331e8 <l2_flags_get.isra.0>
}
   1e62e:	bd10      	pop	{r4, pc}
   1e630:	0003dc8f 	.word	0x0003dc8f
   1e634:	0003dc30 	.word	0x0003dc30
   1e638:	00039995 	.word	0x00039995
   1e63c:	0003a4e8 	.word	0x0003a4e8

0001e640 <net_if_flag_test_and_set>:
{
   1e640:	b510      	push	{r4, lr}
	NET_ASSERT(iface);
   1e642:	b970      	cbnz	r0, 1e662 <net_if_flag_test_and_set+0x22>
   1e644:	4910      	ldr	r1, [pc, #64]	; (1e688 <net_if_flag_test_and_set+0x48>)
   1e646:	f44f 730b 	mov.w	r3, #556	; 0x22c
   1e64a:	4a10      	ldr	r2, [pc, #64]	; (1e68c <net_if_flag_test_and_set+0x4c>)
   1e64c:	4810      	ldr	r0, [pc, #64]	; (1e690 <net_if_flag_test_and_set+0x50>)
   1e64e:	f010 feb9 	bl	2f3c4 <assert_print>
   1e652:	4810      	ldr	r0, [pc, #64]	; (1e694 <net_if_flag_test_and_set+0x54>)
   1e654:	f010 feb6 	bl	2f3c4 <assert_print>
   1e658:	f44f 710b 	mov.w	r1, #556	; 0x22c
   1e65c:	480b      	ldr	r0, [pc, #44]	; (1e68c <net_if_flag_test_and_set+0x4c>)
   1e65e:	f010 feaa 	bl	2f3b6 <assert_post_action>
	atomic_val_t mask = ATOMIC_MASK(bit);
   1e662:	2301      	movs	r3, #1
   1e664:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e668:	6803      	ldr	r3, [r0, #0]
   1e66a:	330c      	adds	r3, #12
   1e66c:	e8d3 2fef 	ldaex	r2, [r3]
   1e670:	ea42 0001 	orr.w	r0, r2, r1
   1e674:	e8c3 0fe4 	stlex	r4, r0, [r3]
   1e678:	2c00      	cmp	r4, #0
   1e67a:	d1f7      	bne.n	1e66c <net_if_flag_test_and_set+0x2c>
	return (old & mask) != 0;
   1e67c:	4211      	tst	r1, r2
}
   1e67e:	bf14      	ite	ne
   1e680:	2001      	movne	r0, #1
   1e682:	2000      	moveq	r0, #0
   1e684:	bd10      	pop	{r4, pc}
   1e686:	bf00      	nop
   1e688:	0003dc5a 	.word	0x0003dc5a
   1e68c:	0003dc60 	.word	0x0003dc60
   1e690:	00039995 	.word	0x00039995
   1e694:	0003a4e8 	.word	0x0003a4e8

0001e698 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   1e698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int if_count = 0;

	NET_DBG("");

	k_mutex_lock(&lock, K_FOREVER);
   1e69a:	f04f 30ff 	mov.w	r0, #4294967295
   1e69e:	f04f 31ff 	mov.w	r1, #4294967295
   1e6a2:	f7ff ff65 	bl	1e570 <k_mutex_lock.constprop.0.isra.0>

	net_tc_tx_init();

	STRUCT_SECTION_FOREACH(net_if, iface) {
   1e6a6:	4c15      	ldr	r4, [pc, #84]	; (1e6fc <net_if_init+0x64>)
   1e6a8:	4f15      	ldr	r7, [pc, #84]	; (1e700 <net_if_init+0x68>)
   1e6aa:	42bc      	cmp	r4, r7
   1e6ac:	4625      	mov	r5, r4
   1e6ae:	d91f      	bls.n	1e6f0 <net_if_init+0x58>
   1e6b0:	4914      	ldr	r1, [pc, #80]	; (1e704 <net_if_init+0x6c>)
   1e6b2:	f241 13ad 	movw	r3, #4525	; 0x11ad
   1e6b6:	4a14      	ldr	r2, [pc, #80]	; (1e708 <net_if_init+0x70>)
   1e6b8:	4814      	ldr	r0, [pc, #80]	; (1e70c <net_if_init+0x74>)
   1e6ba:	f010 fe83 	bl	2f3c4 <assert_print>
   1e6be:	4814      	ldr	r0, [pc, #80]	; (1e710 <net_if_init+0x78>)
   1e6c0:	f010 fe80 	bl	2f3c4 <assert_print>
   1e6c4:	f241 11ad 	movw	r1, #4525	; 0x11ad
   1e6c8:	480f      	ldr	r0, [pc, #60]	; (1e708 <net_if_init+0x70>)
   1e6ca:	f010 fe74 	bl	2f3b6 <assert_post_action>
	return iface->if_dev->dev;
   1e6ce:	682b      	ldr	r3, [r5, #0]
   1e6d0:	3404      	adds	r4, #4
	const struct net_if_api *api = net_if_get_device(iface)->api;
   1e6d2:	681b      	ldr	r3, [r3, #0]
   1e6d4:	689e      	ldr	r6, [r3, #8]
	if (!api || !api->init) {
   1e6d6:	2e00      	cmp	r6, #0
   1e6d8:	d0e7      	beq.n	1e6aa <net_if_init+0x12>
   1e6da:	6833      	ldr	r3, [r6, #0]
   1e6dc:	2b00      	cmp	r3, #0
   1e6de:	d0e4      	beq.n	1e6aa <net_if_init+0x12>
	net_if_flag_test_and_set(iface, NET_IF_LOWER_UP);
   1e6e0:	2109      	movs	r1, #9
   1e6e2:	4628      	mov	r0, r5
   1e6e4:	f7ff ffac 	bl	1e640 <net_if_flag_test_and_set>
	api->init(iface);
   1e6e8:	4628      	mov	r0, r5
   1e6ea:	6833      	ldr	r3, [r6, #0]
   1e6ec:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(net_if, iface) {
   1e6ee:	e7dc      	b.n	1e6aa <net_if_init+0x12>
   1e6f0:	d3ed      	bcc.n	1e6ce <net_if_init+0x36>
	}
#endif

out:
	k_mutex_unlock(&lock);
}
   1e6f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_mutex_unlock(&lock);
   1e6f6:	f7ff bf43 	b.w	1e580 <k_mutex_unlock.constprop.0.isra.0>
   1e6fa:	bf00      	nop
   1e6fc:	2000d180 	.word	0x2000d180
   1e700:	2000d184 	.word	0x2000d184
   1e704:	0003dcc0 	.word	0x0003dcc0
   1e708:	0003dc30 	.word	0x0003dc30
   1e70c:	00039995 	.word	0x00039995
   1e710:	0003a18c 	.word	0x0003a18c

0001e714 <net_if_post_init>:

void net_if_post_init(void)
{
   1e714:	b538      	push	{r3, r4, r5, lr}
	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	STRUCT_SECTION_FOREACH(net_if, iface) {
   1e716:	4c0f      	ldr	r4, [pc, #60]	; (1e754 <net_if_post_init+0x40>)
   1e718:	4d0f      	ldr	r5, [pc, #60]	; (1e758 <net_if_post_init+0x44>)
   1e71a:	42ac      	cmp	r4, r5
   1e71c:	d918      	bls.n	1e750 <net_if_post_init+0x3c>
   1e71e:	490f      	ldr	r1, [pc, #60]	; (1e75c <net_if_post_init+0x48>)
   1e720:	f241 13df 	movw	r3, #4575	; 0x11df
   1e724:	4a0e      	ldr	r2, [pc, #56]	; (1e760 <net_if_post_init+0x4c>)
   1e726:	480f      	ldr	r0, [pc, #60]	; (1e764 <net_if_post_init+0x50>)
   1e728:	f010 fe4c 	bl	2f3c4 <assert_print>
   1e72c:	480e      	ldr	r0, [pc, #56]	; (1e768 <net_if_post_init+0x54>)
   1e72e:	f010 fe49 	bl	2f3c4 <assert_print>
   1e732:	f241 11df 	movw	r1, #4575	; 0x11df
   1e736:	480a      	ldr	r0, [pc, #40]	; (1e760 <net_if_post_init+0x4c>)
   1e738:	f010 fe3d 	bl	2f3b6 <assert_post_action>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   1e73c:	2103      	movs	r1, #3
   1e73e:	4620      	mov	r0, r4
   1e740:	f014 fd49 	bl	331d6 <net_if_flag_is_set>
   1e744:	b910      	cbnz	r0, 1e74c <net_if_post_init+0x38>
			net_if_up(iface);
   1e746:	4620      	mov	r0, r4
   1e748:	f014 fd5a 	bl	33200 <net_if_up>
	STRUCT_SECTION_FOREACH(net_if, iface) {
   1e74c:	3404      	adds	r4, #4
   1e74e:	e7e4      	b.n	1e71a <net_if_post_init+0x6>
   1e750:	d3f4      	bcc.n	1e73c <net_if_post_init+0x28>
		}
	}
}
   1e752:	bd38      	pop	{r3, r4, r5, pc}
   1e754:	2000d180 	.word	0x2000d180
   1e758:	2000d184 	.word	0x2000d184
   1e75c:	0003dcc0 	.word	0x0003dcc0
   1e760:	0003dc30 	.word	0x0003dc30
   1e764:	00039995 	.word	0x00039995
   1e768:	0003a18c 	.word	0x0003a18c

0001e76c <z_impl_net_addr_ntop>:
	struct in6_addr *addr6;
	uint16_t *w;
	uint8_t i, bl, bh, longest = 1U;
	int8_t pos = -1;
	char delim = ':';
	unsigned char zeros[8] = { 0 };
   1e76c:	2300      	movs	r3, #0
{
   1e76e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char *ptr = dst;
	int len = -1;
	uint16_t value;
	bool needcolon = false;

	if (family == AF_INET6) {
   1e772:	2802      	cmp	r0, #2
{
   1e774:	b089      	sub	sp, #36	; 0x24
   1e776:	4605      	mov	r5, r0
   1e778:	4688      	mov	r8, r1
   1e77a:	4693      	mov	fp, r2
	unsigned char zeros[8] = { 0 };
   1e77c:	e9cd 3306 	strd	r3, r3, [sp, #24]
	if (family == AF_INET6) {
   1e780:	d14d      	bne.n	1e81e <z_impl_net_addr_ntop+0xb2>
		addr6 = (struct in6_addr *)src;
		w = (uint16_t *)addr6->s6_addr16;
   1e782:	a806      	add	r0, sp, #24
   1e784:	9104      	str	r1, [sp, #16]
   1e786:	4601      	mov	r1, r0
{
   1e788:	461a      	mov	r2, r3
   1e78a:	e006      	b.n	1e79a <z_impl_net_addr_ntop+0x2e>
			for (j = i; j < 8; j++) {
				if (UNALIGNED_GET(&w[j]) != 0) {
					break;
				}

				zeros[i]++;
   1e78c:	780c      	ldrb	r4, [r1, #0]
			for (j = i; j < 8; j++) {
   1e78e:	3201      	adds	r2, #1
				zeros[i]++;
   1e790:	3401      	adds	r4, #1
   1e792:	700c      	strb	r4, [r1, #0]
			for (j = i; j < 8; j++) {
   1e794:	b2d4      	uxtb	r4, r2
   1e796:	2c08      	cmp	r4, #8
   1e798:	d003      	beq.n	1e7a2 <z_impl_net_addr_ntop+0x36>
				if (UNALIGNED_GET(&w[j]) != 0) {
   1e79a:	f838 4012 	ldrh.w	r4, [r8, r2, lsl #1]
   1e79e:	2c00      	cmp	r4, #0
   1e7a0:	d0f4      	beq.n	1e78c <z_impl_net_addr_ntop+0x20>
		for (i = 0U; i < 8; i++) {
   1e7a2:	3301      	adds	r3, #1
   1e7a4:	2b08      	cmp	r3, #8
   1e7a6:	f101 0101 	add.w	r1, r1, #1
   1e7aa:	d1ed      	bne.n	1e788 <z_impl_net_addr_ntop+0x1c>
	int8_t pos = -1;
   1e7ac:	f04f 37ff 	mov.w	r7, #4294967295
	uint8_t i, bl, bh, longest = 1U;
   1e7b0:	2601      	movs	r6, #1
			}
		}

		for (i = 0U; i < 8; i++) {
   1e7b2:	2300      	movs	r3, #0
			if (zeros[i] > longest) {
   1e7b4:	f810 2b01 	ldrb.w	r2, [r0], #1
   1e7b8:	42b2      	cmp	r2, r6
				longest = zeros[i];
				pos = i;
   1e7ba:	bf88      	it	hi
   1e7bc:	b25f      	sxtbhi	r7, r3
		for (i = 0U; i < 8; i++) {
   1e7be:	f103 0301 	add.w	r3, r3, #1
   1e7c2:	b2db      	uxtb	r3, r3
				pos = i;
   1e7c4:	bf88      	it	hi
   1e7c6:	4616      	movhi	r6, r2
		for (i = 0U; i < 8; i++) {
   1e7c8:	2b08      	cmp	r3, #8
   1e7ca:	d1f3      	bne.n	1e7b4 <z_impl_net_addr_ntop+0x48>
		len = 8;
   1e7cc:	469a      	mov	sl, r3
   1e7ce:	2e01      	cmp	r6, #1
   1e7d0:	f04f 033a 	mov.w	r3, #58	; 0x3a
   1e7d4:	bf08      	it	eq
   1e7d6:	f04f 37ff 	moveq.w	r7, #4294967295
   1e7da:	9301      	str	r3, [sp, #4]
	bool needcolon = false;
   1e7dc:	2200      	movs	r2, #0
	char delim = ':';
   1e7de:	4658      	mov	r0, fp
		delim = '.';
	} else {
		return NULL;
	}

	for (i = 0U; i < len; i++) {
   1e7e0:	4614      	mov	r4, r2
   1e7e2:	4613      	mov	r3, r2
		/* IPv4 address a.b.c.d */
		if (len == 4) {
   1e7e4:	f1ba 0f04 	cmp.w	sl, #4
   1e7e8:	d158      	bne.n	1e89c <z_impl_net_addr_ntop+0x130>
			uint8_t l;

			value = (uint32_t)addr->s4_addr[i];
   1e7ea:	f818 1003 	ldrb.w	r1, [r8, r3]

			/* net_byte_to_udec() eats 0 */
			if (value == 0U) {
				*ptr++ = '0';
   1e7ee:	4603      	mov	r3, r0
			if (value == 0U) {
   1e7f0:	bb19      	cbnz	r1, 1e83a <z_impl_net_addr_ntop+0xce>
				*ptr++ = '0';
   1e7f2:	2130      	movs	r1, #48	; 0x30
   1e7f4:	f803 1b02 	strb.w	r1, [r3], #2
				*ptr++ = delim;
   1e7f8:	9901      	ldr	r1, [sp, #4]
   1e7fa:	7041      	strb	r1, [r0, #1]
   1e7fc:	4618      	mov	r0, r3
	for (i = 0U; i < len; i++) {
   1e7fe:	3401      	adds	r4, #1
   1e800:	b2e4      	uxtb	r4, r4
   1e802:	4554      	cmp	r4, sl
   1e804:	4623      	mov	r3, r4
   1e806:	dbed      	blt.n	1e7e4 <z_impl_net_addr_ntop+0x78>
		}

		needcolon = true;
	}

	if (!(ptr - dst)) {
   1e808:	4558      	cmp	r0, fp
   1e80a:	d00a      	beq.n	1e822 <z_impl_net_addr_ntop+0xb6>
		return NULL;
	}

	if (family == AF_INET) {
   1e80c:	2d01      	cmp	r5, #1
   1e80e:	f04f 0300 	mov.w	r3, #0
   1e812:	f040 8089 	bne.w	1e928 <z_impl_net_addr_ntop+0x1bc>
		*(ptr - 1) = '\0';
   1e816:	f800 3c01 	strb.w	r3, [r0, #-1]
		return NULL;
   1e81a:	4658      	mov	r0, fp
   1e81c:	e002      	b.n	1e824 <z_impl_net_addr_ntop+0xb8>
	} else if (family == AF_INET) {
   1e81e:	2801      	cmp	r0, #1
   1e820:	d003      	beq.n	1e82a <z_impl_net_addr_ntop+0xbe>
		return NULL;
   1e822:	2000      	movs	r0, #0
	} else {
		*ptr = '\0';
	}

	return dst;
}
   1e824:	b009      	add	sp, #36	; 0x24
   1e826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		delim = '.';
   1e82a:	232e      	movs	r3, #46	; 0x2e
		len = 4;
   1e82c:	f04f 0a04 	mov.w	sl, #4
	int8_t pos = -1;
   1e830:	f04f 37ff 	mov.w	r7, #4294967295
	uint8_t i, bl, bh, longest = 1U;
   1e834:	4606      	mov	r6, r0
		delim = '.';
   1e836:	9301      	str	r3, [sp, #4]
   1e838:	e7d0      	b.n	1e7dc <z_impl_net_addr_ntop+0x70>
			l = net_value_to_udec(ptr, value, 0);
   1e83a:	f04f 0e00 	mov.w	lr, #0
   1e83e:	f04f 0c09 	mov.w	ip, #9
   1e842:	f8cd e008 	str.w	lr, [sp, #8]
   1e846:	f8df e0e4 	ldr.w	lr, [pc, #228]	; 1e92c <z_impl_net_addr_ntop+0x1c0>
		temp = value / divisor;
   1e84a:	fbb1 f9fe 	udiv	r9, r1, lr
   1e84e:	9103      	str	r1, [sp, #12]
   1e850:	f8cd 9014 	str.w	r9, [sp, #20]
		value = value % divisor;
   1e854:	fb0e 1119 	mls	r1, lr, r9, r1
		if ((precision > i) || (temp != 0)) {
   1e858:	f8dd 9008 	ldr.w	r9, [sp, #8]
   1e85c:	45cc      	cmp	ip, r9
   1e85e:	db03      	blt.n	1e868 <z_impl_net_addr_ntop+0xfc>
   1e860:	f8dd 900c 	ldr.w	r9, [sp, #12]
   1e864:	45f1      	cmp	r9, lr
   1e866:	d307      	bcc.n	1e878 <z_impl_net_addr_ntop+0x10c>
			*buf++ = (char) (temp + '0');
   1e868:	f8dd 9014 	ldr.w	r9, [sp, #20]
   1e86c:	f8cd c008 	str.w	ip, [sp, #8]
   1e870:	f109 0930 	add.w	r9, r9, #48	; 0x30
   1e874:	f803 9b01 	strb.w	r9, [r3], #1
	for (i = 9; i >= 0; i--, divisor /= 10U) {
   1e878:	f04f 090a 	mov.w	r9, #10
   1e87c:	f10c 3cff 	add.w	ip, ip, #4294967295
   1e880:	f1bc 3fff 	cmp.w	ip, #4294967295
   1e884:	fbbe fef9 	udiv	lr, lr, r9
   1e888:	d1df      	bne.n	1e84a <z_impl_net_addr_ntop+0xde>
	*buf = 0;
   1e88a:	2100      	movs	r1, #0
   1e88c:	7019      	strb	r1, [r3, #0]
	return buf - start;
   1e88e:	1a1b      	subs	r3, r3, r0
			*ptr++ = delim;
   1e890:	fa50 f083 	uxtab	r0, r0, r3
   1e894:	9b01      	ldr	r3, [sp, #4]
   1e896:	f800 3b01 	strb.w	r3, [r0], #1
			continue;
   1e89a:	e7b0      	b.n	1e7fe <z_impl_net_addr_ntop+0x92>
		if (i == pos) {
   1e89c:	429f      	cmp	r7, r3
   1e89e:	d10d      	bne.n	1e8bc <z_impl_net_addr_ntop+0x150>
			if (needcolon || i == 0U) {
   1e8a0:	b902      	cbnz	r2, 1e8a4 <z_impl_net_addr_ntop+0x138>
   1e8a2:	b914      	cbnz	r4, 1e8aa <z_impl_net_addr_ntop+0x13e>
				*ptr++ = ':';
   1e8a4:	233a      	movs	r3, #58	; 0x3a
   1e8a6:	f800 3b01 	strb.w	r3, [r0], #1
			*ptr++ = ':';
   1e8aa:	f04f 033a 	mov.w	r3, #58	; 0x3a
   1e8ae:	f800 3b01 	strb.w	r3, [r0], #1
			i += longest - 1U;
   1e8b2:	1e73      	subs	r3, r6, #1
   1e8b4:	4423      	add	r3, r4
			needcolon = false;
   1e8b6:	2200      	movs	r2, #0
			i += longest - 1U;
   1e8b8:	b2dc      	uxtb	r4, r3
			continue;
   1e8ba:	e7a0      	b.n	1e7fe <z_impl_net_addr_ntop+0x92>
		if (needcolon) {
   1e8bc:	b11a      	cbz	r2, 1e8c6 <z_impl_net_addr_ntop+0x15a>
			*ptr++ = ':';
   1e8be:	f04f 033a 	mov.w	r3, #58	; 0x3a
   1e8c2:	f800 3b01 	strb.w	r3, [r0], #1
		value = (uint32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   1e8c6:	9b04      	ldr	r3, [sp, #16]
   1e8c8:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
   1e8cc:	ba52      	rev16	r2, r2
		if (bh) {
   1e8ce:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
		bh = value >> 8;
   1e8d2:	f3c2 2307 	ubfx	r3, r2, #8, #8
		bl = value & 0xff;
   1e8d6:	fa5f f982 	uxtb.w	r9, r2
		if (bh) {
   1e8da:	d016      	beq.n	1e90a <z_impl_net_addr_ntop+0x19e>
			if (bh > 0x0f) {
   1e8dc:	2b0f      	cmp	r3, #15
		bh = value >> 8;
   1e8de:	b2d9      	uxtb	r1, r3
			if (bh > 0x0f) {
   1e8e0:	d90a      	bls.n	1e8f8 <z_impl_net_addr_ntop+0x18c>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
   1e8e2:	2300      	movs	r3, #0
   1e8e4:	2261      	movs	r2, #97	; 0x61
   1e8e6:	f014 fcb2 	bl	3324e <net_byte_to_hex>
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
   1e8ea:	2301      	movs	r3, #1
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   1e8ec:	2261      	movs	r2, #97	; 0x61
   1e8ee:	4649      	mov	r1, r9
   1e8f0:	f014 fcad 	bl	3324e <net_byte_to_hex>
		needcolon = true;
   1e8f4:	2201      	movs	r2, #1
   1e8f6:	e782      	b.n	1e7fe <z_impl_net_addr_ntop+0x92>
				if (bh < 10) {
   1e8f8:	2b09      	cmp	r3, #9
   1e8fa:	d804      	bhi.n	1e906 <z_impl_net_addr_ntop+0x19a>
					*ptr++ = (char)(bh + '0');
   1e8fc:	3130      	adds	r1, #48	; 0x30
   1e8fe:	b2c9      	uxtb	r1, r1
   1e900:	f800 1b01 	strb.w	r1, [r0], #1
   1e904:	e7f1      	b.n	1e8ea <z_impl_net_addr_ntop+0x17e>
					*ptr++ = (char) (bh - 10 + 'a');
   1e906:	3157      	adds	r1, #87	; 0x57
   1e908:	e7f9      	b.n	1e8fe <z_impl_net_addr_ntop+0x192>
		} else if (bl > 0x0f) {
   1e90a:	f1b9 0f0f 	cmp.w	r9, #15
   1e90e:	d8ed      	bhi.n	1e8ec <z_impl_net_addr_ntop+0x180>
			if (bl < 10) {
   1e910:	f1b9 0f09 	cmp.w	r9, #9
				*ptr++ = (char)(bl + '0');
   1e914:	bf94      	ite	ls
   1e916:	f109 0930 	addls.w	r9, r9, #48	; 0x30
				*ptr++ = (char) (bl - 10 + 'a');
   1e91a:	f109 0957 	addhi.w	r9, r9, #87	; 0x57
   1e91e:	fa5f f989 	uxtb.w	r9, r9
   1e922:	f800 9b01 	strb.w	r9, [r0], #1
   1e926:	e7e5      	b.n	1e8f4 <z_impl_net_addr_ntop+0x188>
		*ptr = '\0';
   1e928:	7003      	strb	r3, [r0, #0]
   1e92a:	e776      	b.n	1e81a <z_impl_net_addr_ntop+0xae>
   1e92c:	3b9aca00 	.word	0x3b9aca00

0001e930 <connect_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int connect_request_encode(const struct mqtt_client *client,
			   struct buf_ctx *buf)
{
   1e930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	} else {
		mqtt_proto_desc = &mqtt_3_1_0_proto_desc;
	}

	/* Reserve space for fixed header. */
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   1e934:	680f      	ldr	r7, [r1, #0]
	uint8_t connect_flags = client->clean_session << 1;
   1e936:	f890 5060 	ldrb.w	r5, [r0, #96]	; 0x60
	start = buf->cur;

	NET_HEXDUMP_DBG(mqtt_proto_desc->utf8, mqtt_proto_desc->size,
			 "Encoding Protocol Description.");

	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   1e93a:	4b3c      	ldr	r3, [pc, #240]	; (1ea2c <connect_request_encode+0xfc>)
   1e93c:	4a3c      	ldr	r2, [pc, #240]	; (1ea30 <connect_request_encode+0x100>)
{
   1e93e:	4606      	mov	r6, r0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   1e940:	f890 005e 	ldrb.w	r0, [r0, #94]	; 0x5e
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   1e944:	3705      	adds	r7, #5
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   1e946:	2804      	cmp	r0, #4
   1e948:	bf14      	ite	ne
   1e94a:	4610      	movne	r0, r2
   1e94c:	4618      	moveq	r0, r3
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   1e94e:	600f      	str	r7, [r1, #0]
{
   1e950:	460c      	mov	r4, r1
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   1e952:	f014 fd5f 	bl	33414 <pack_utf8_str>
	uint8_t connect_flags = client->clean_session << 1;
   1e956:	f3c5 0540 	ubfx	r5, r5, #1, #1
	if (err_code != 0) {
   1e95a:	4603      	mov	r3, r0
   1e95c:	b938      	cbnz	r0, 1e96e <connect_request_encode+0x3e>
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   1e95e:	e9d4 2000 	ldrd	r2, r0, [r4]
   1e962:	4290      	cmp	r0, r2
		return err_code;
	}

	NET_DBG("Encoding Protocol Version %02x.", client->protocol_version);
	err_code = pack_uint8(client->protocol_version, buf);
   1e964:	f896 105e 	ldrb.w	r1, [r6, #94]	; 0x5e
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   1e968:	d104      	bne.n	1e974 <connect_request_encode+0x44>
		return -ENOMEM;
   1e96a:	f06f 030b 	mvn.w	r3, #11

	/* Write the flags the connect flags. */
	*connect_flags_pos = connect_flags;

	return mqtt_encode_fixed_header(message_type, start, buf);
}
   1e96e:	4618      	mov	r0, r3
   1e970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	*(buf->cur++) = val;
   1e974:	1c50      	adds	r0, r2, #1
   1e976:	6020      	str	r0, [r4, #0]
   1e978:	7011      	strb	r1, [r2, #0]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   1e97a:	e9d4 8200 	ldrd	r8, r2, [r4]
   1e97e:	4590      	cmp	r8, r2
   1e980:	d0f3      	beq.n	1e96a <connect_request_encode+0x3a>
	*(buf->cur++) = val;
   1e982:	f108 0201 	add.w	r2, r8, #1
   1e986:	6022      	str	r2, [r4, #0]
   1e988:	f888 3000 	strb.w	r3, [r8]
	err_code = pack_uint16(client->keepalive, buf);
   1e98c:	4621      	mov	r1, r4
   1e98e:	f8b6 005c 	ldrh.w	r0, [r6, #92]	; 0x5c
   1e992:	f014 fd2d 	bl	333f0 <pack_uint16>
	if (err_code != 0) {
   1e996:	4603      	mov	r3, r0
   1e998:	2800      	cmp	r0, #0
   1e99a:	d1e8      	bne.n	1e96e <connect_request_encode+0x3e>
	err_code = pack_utf8_str(&client->client_id, buf);
   1e99c:	f106 002c 	add.w	r0, r6, #44	; 0x2c
   1e9a0:	f014 fd38 	bl	33414 <pack_utf8_str>
	if (err_code != 0) {
   1e9a4:	4603      	mov	r3, r0
   1e9a6:	2800      	cmp	r0, #0
   1e9a8:	d1e1      	bne.n	1e96e <connect_request_encode+0x3e>
	if (client->will_topic != NULL) {
   1e9aa:	6c30      	ldr	r0, [r6, #64]	; 0x40
	uint8_t connect_flags = client->clean_session << 1;
   1e9ac:	006d      	lsls	r5, r5, #1
	if (client->will_topic != NULL) {
   1e9ae:	b1e8      	cbz	r0, 1e9ec <connect_request_encode+0xbc>
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   1e9b0:	4621      	mov	r1, r4
		connect_flags |= client->will_retain << 5;
   1e9b2:	f896 a060 	ldrb.w	sl, [r6, #96]	; 0x60
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   1e9b6:	f890 9008 	ldrb.w	r9, [r0, #8]
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   1e9ba:	f014 fd2b 	bl	33414 <pack_utf8_str>
		connect_flags |= client->will_retain << 5;
   1e9be:	f00a 0a01 	and.w	sl, sl, #1
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   1e9c2:	4603      	mov	r3, r0
		if (err_code != 0) {
   1e9c4:	2800      	cmp	r0, #0
   1e9c6:	d1d2      	bne.n	1e96e <connect_request_encode+0x3e>
		if (client->will_message != NULL) {
   1e9c8:	6c73      	ldr	r3, [r6, #68]	; 0x44
			err_code = pack_utf8_str(client->will_message, buf);
   1e9ca:	4621      	mov	r1, r4
		if (client->will_message != NULL) {
   1e9cc:	b35b      	cbz	r3, 1ea26 <connect_request_encode+0xf6>
			err_code = pack_utf8_str(client->will_message, buf);
   1e9ce:	4618      	mov	r0, r3
   1e9d0:	f014 fd20 	bl	33414 <pack_utf8_str>
			if (err_code != 0) {
   1e9d4:	4603      	mov	r3, r0
   1e9d6:	2800      	cmp	r0, #0
   1e9d8:	d1c9      	bne.n	1e96e <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_WILL_TOPIC;
   1e9da:	f045 0504 	orr.w	r5, r5, #4
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   1e9de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
		connect_flags |= client->will_retain << 5;
   1e9e2:	ea45 154a 	orr.w	r5, r5, sl, lsl #5
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   1e9e6:	f003 0318 	and.w	r3, r3, #24
		connect_flags |= client->will_retain << 5;
   1e9ea:	431d      	orrs	r5, r3
	if (client->user_name != NULL) {
   1e9ec:	6bb0      	ldr	r0, [r6, #56]	; 0x38
   1e9ee:	b138      	cbz	r0, 1ea00 <connect_request_encode+0xd0>
		err_code = pack_utf8_str(client->user_name, buf);
   1e9f0:	4621      	mov	r1, r4
   1e9f2:	f014 fd0f 	bl	33414 <pack_utf8_str>
		if (err_code != 0) {
   1e9f6:	4603      	mov	r3, r0
   1e9f8:	2800      	cmp	r0, #0
   1e9fa:	d1b8      	bne.n	1e96e <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_USERNAME;
   1e9fc:	f045 0580 	orr.w	r5, r5, #128	; 0x80
	if (client->password != NULL) {
   1ea00:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
   1ea02:	b138      	cbz	r0, 1ea14 <connect_request_encode+0xe4>
		err_code = pack_utf8_str(client->password, buf);
   1ea04:	4621      	mov	r1, r4
   1ea06:	f014 fd05 	bl	33414 <pack_utf8_str>
		if (err_code != 0) {
   1ea0a:	4603      	mov	r3, r0
   1ea0c:	2800      	cmp	r0, #0
   1ea0e:	d1ae      	bne.n	1e96e <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_PASSWORD;
   1ea10:	f045 0540 	orr.w	r5, r5, #64	; 0x40
	*connect_flags_pos = connect_flags;
   1ea14:	f888 5000 	strb.w	r5, [r8]
	return mqtt_encode_fixed_header(message_type, start, buf);
   1ea18:	4622      	mov	r2, r4
   1ea1a:	4639      	mov	r1, r7
}
   1ea1c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   1ea20:	2010      	movs	r0, #16
   1ea22:	f014 bd12 	b.w	3344a <mqtt_encode_fixed_header>
	return pack_uint16(0x0000, buf);
   1ea26:	f014 fce3 	bl	333f0 <pack_uint16>
   1ea2a:	e7d3      	b.n	1e9d4 <connect_request_encode+0xa4>
   1ea2c:	000383e4 	.word	0x000383e4
   1ea30:	000383ec 	.word	0x000383ec

0001ea34 <disconnect_encode>:
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
}

int disconnect_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(disc_packet)) {
   1ea34:	e9d0 2300 	ldrd	r2, r3, [r0]
   1ea38:	1a9b      	subs	r3, r3, r2
   1ea3a:	2b01      	cmp	r3, #1
   1ea3c:	bf81      	itttt	hi
   1ea3e:	4b05      	ldrhi	r3, [pc, #20]	; (1ea54 <disconnect_encode+0x20>)
   1ea40:	881b      	ldrhhi	r3, [r3, #0]
   1ea42:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, disc_packet, sizeof(disc_packet));
	buf->end = buf->cur + sizeof(disc_packet);
   1ea44:	6803      	ldrhi	r3, [r0, #0]
   1ea46:	bf83      	ittte	hi
   1ea48:	3302      	addhi	r3, #2
   1ea4a:	6043      	strhi	r3, [r0, #4]

	return 0;
   1ea4c:	2000      	movhi	r0, #0
		return -ENOMEM;
   1ea4e:	f06f 000b 	mvnls.w	r0, #11
}
   1ea52:	4770      	bx	lr
   1ea54:	0003dd24 	.word	0x0003dd24

0001ea58 <ping_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int ping_request_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(ping_packet)) {
   1ea58:	e9d0 2300 	ldrd	r2, r3, [r0]
   1ea5c:	1a9b      	subs	r3, r3, r2
   1ea5e:	2b01      	cmp	r3, #1
   1ea60:	bf81      	itttt	hi
   1ea62:	4b05      	ldrhi	r3, [pc, #20]	; (1ea78 <ping_request_encode+0x20>)
   1ea64:	881b      	ldrhhi	r3, [r3, #0]
   1ea66:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, ping_packet, sizeof(ping_packet));
	buf->end = buf->cur + sizeof(ping_packet);
   1ea68:	6803      	ldrhi	r3, [r0, #0]
   1ea6a:	bf83      	ittte	hi
   1ea6c:	3302      	addhi	r3, #2
   1ea6e:	6043      	strhi	r3, [r0, #4]

	return 0;
   1ea70:	2000      	movhi	r0, #0
		return -ENOMEM;
   1ea72:	f06f 000b 	mvnls.w	r0, #11
}
   1ea76:	4770      	bx	lr
   1ea78:	0003dd26 	.word	0x0003dd26

0001ea7c <mqtt_transport_connect>:
#endif /* CONFIG_MQTT_LIB_CUSTOM_TRANSPORT */
};

int mqtt_transport_connect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].connect(client);
   1ea7c:	2214      	movs	r2, #20
   1ea7e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   1ea82:	4353      	muls	r3, r2
   1ea84:	4a01      	ldr	r2, [pc, #4]	; (1ea8c <mqtt_transport_connect+0x10>)
   1ea86:	58d3      	ldr	r3, [r2, r3]
   1ea88:	4718      	bx	r3
   1ea8a:	bf00      	nop
   1ea8c:	000383f4 	.word	0x000383f4

0001ea90 <mqtt_transport_write>:
}

int mqtt_transport_write(struct mqtt_client *client, const uint8_t *data,
			 uint32_t datalen)
{
   1ea90:	b430      	push	{r4, r5}
	return transport_fn[client->transport.type].write(client, data,
   1ea92:	2514      	movs	r5, #20
   1ea94:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
   1ea98:	4b02      	ldr	r3, [pc, #8]	; (1eaa4 <mqtt_transport_write+0x14>)
   1ea9a:	fb05 3304 	mla	r3, r5, r4, r3
							  datalen);
}
   1ea9e:	bc30      	pop	{r4, r5}
	return transport_fn[client->transport.type].write(client, data,
   1eaa0:	685b      	ldr	r3, [r3, #4]
   1eaa2:	4718      	bx	r3
   1eaa4:	000383f4 	.word	0x000383f4

0001eaa8 <mqtt_transport_write_msg>:

int mqtt_transport_write_msg(struct mqtt_client *client,
			     const struct msghdr *message)
{
   1eaa8:	b410      	push	{r4}
	return transport_fn[client->transport.type].write_msg(client, message);
   1eaaa:	2414      	movs	r4, #20
   1eaac:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   1eab0:	4b02      	ldr	r3, [pc, #8]	; (1eabc <mqtt_transport_write_msg+0x14>)
   1eab2:	fb04 3302 	mla	r3, r4, r2, r3
}
   1eab6:	bc10      	pop	{r4}
	return transport_fn[client->transport.type].write_msg(client, message);
   1eab8:	689b      	ldr	r3, [r3, #8]
   1eaba:	4718      	bx	r3
   1eabc:	000383f4 	.word	0x000383f4

0001eac0 <mqtt_transport_read>:

int mqtt_transport_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			bool shall_block)
{
   1eac0:	b470      	push	{r4, r5, r6}
	return transport_fn[client->transport.type].read(client, data, buflen,
   1eac2:	2614      	movs	r6, #20
   1eac4:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
   1eac8:	4c03      	ldr	r4, [pc, #12]	; (1ead8 <mqtt_transport_read+0x18>)
   1eaca:	fb06 4405 	mla	r4, r6, r5, r4
   1eace:	68e4      	ldr	r4, [r4, #12]
   1ead0:	46a4      	mov	ip, r4
							 shall_block);
}
   1ead2:	bc70      	pop	{r4, r5, r6}
	return transport_fn[client->transport.type].read(client, data, buflen,
   1ead4:	4760      	bx	ip
   1ead6:	bf00      	nop
   1ead8:	000383f4 	.word	0x000383f4

0001eadc <mqtt_mutex_unlock>:
}

/**@brief Release the lock on the module specific mutex, if any.
 */
static inline void mqtt_mutex_unlock(struct mqtt_client *client)
{
   1eadc:	b510      	push	{r4, lr}
   1eade:	f00a fc51 	bl	29384 <z_impl_k_mutex_unlock>
	int ret = sys_mutex_unlock(&client->internal.mutex);

	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
   1eae2:	4604      	mov	r4, r0
   1eae4:	b168      	cbz	r0, 1eb02 <mqtt_mutex_unlock+0x26>
   1eae6:	233d      	movs	r3, #61	; 0x3d
   1eae8:	4a06      	ldr	r2, [pc, #24]	; (1eb04 <mqtt_mutex_unlock+0x28>)
   1eaea:	4907      	ldr	r1, [pc, #28]	; (1eb08 <mqtt_mutex_unlock+0x2c>)
   1eaec:	4807      	ldr	r0, [pc, #28]	; (1eb0c <mqtt_mutex_unlock+0x30>)
   1eaee:	f010 fc69 	bl	2f3c4 <assert_print>
   1eaf2:	4621      	mov	r1, r4
   1eaf4:	4806      	ldr	r0, [pc, #24]	; (1eb10 <mqtt_mutex_unlock+0x34>)
   1eaf6:	f010 fc65 	bl	2f3c4 <assert_print>
   1eafa:	213d      	movs	r1, #61	; 0x3d
   1eafc:	4801      	ldr	r0, [pc, #4]	; (1eb04 <mqtt_mutex_unlock+0x28>)
   1eafe:	f010 fc5a 	bl	2f3b6 <assert_post_action>
	(void)ret;
}
   1eb02:	bd10      	pop	{r4, pc}
   1eb04:	0003dd5f 	.word	0x0003dd5f
   1eb08:	0003dd90 	.word	0x0003dd90
   1eb0c:	00039995 	.word	0x00039995
   1eb10:	0003dd99 	.word	0x0003dd99

0001eb14 <mqtt_mutex_lock>:
{
   1eb14:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   1eb16:	f04f 32ff 	mov.w	r2, #4294967295
   1eb1a:	f04f 33ff 	mov.w	r3, #4294967295
   1eb1e:	f00a fb61 	bl	291e4 <z_impl_k_mutex_lock>
	__ASSERT(ret == 0, "sys_mutex_lock failed with %d", ret);
   1eb22:	4604      	mov	r4, r0
   1eb24:	b168      	cbz	r0, 1eb42 <mqtt_mutex_lock+0x2e>
   1eb26:	2333      	movs	r3, #51	; 0x33
   1eb28:	4a06      	ldr	r2, [pc, #24]	; (1eb44 <mqtt_mutex_lock+0x30>)
   1eb2a:	4907      	ldr	r1, [pc, #28]	; (1eb48 <mqtt_mutex_lock+0x34>)
   1eb2c:	4807      	ldr	r0, [pc, #28]	; (1eb4c <mqtt_mutex_lock+0x38>)
   1eb2e:	f010 fc49 	bl	2f3c4 <assert_print>
   1eb32:	4621      	mov	r1, r4
   1eb34:	4806      	ldr	r0, [pc, #24]	; (1eb50 <mqtt_mutex_lock+0x3c>)
   1eb36:	f010 fc45 	bl	2f3c4 <assert_print>
   1eb3a:	2133      	movs	r1, #51	; 0x33
   1eb3c:	4801      	ldr	r0, [pc, #4]	; (1eb44 <mqtt_mutex_lock+0x30>)
   1eb3e:	f010 fc3a 	bl	2f3b6 <assert_post_action>
}
   1eb42:	bd10      	pop	{r4, pc}
   1eb44:	0003dd5f 	.word	0x0003dd5f
   1eb48:	0003dd90 	.word	0x0003dd90
   1eb4c:	00039995 	.word	0x00039995
   1eb50:	0003ddbb 	.word	0x0003ddbb

0001eb54 <reset_rx>:
}

static void reset_rx(void)
{
	rx.type = H4_NONE;
	rx.remaining = 0U;
   1eb54:	2200      	movs	r2, #0
   1eb56:	4b02      	ldr	r3, [pc, #8]	; (1eb60 <reset_rx+0xc>)
   1eb58:	841a      	strh	r2, [r3, #32]
	rx.have_hdr = false;
   1eb5a:	625a      	str	r2, [r3, #36]	; 0x24
	rx.hdr_len = 0U;
	rx.discardable = false;
}
   1eb5c:	4770      	bx	lr
   1eb5e:	bf00      	nop
   1eb60:	2000c954 	.word	0x2000c954

0001eb64 <get_rx>:

static struct net_buf *get_rx(k_timeout_t timeout)
{
   1eb64:	4602      	mov	r2, r0
	LOG_DBG("type 0x%02x, evt 0x%02x", rx.type, rx.evt.evt);

	switch (rx.type) {
   1eb66:	4809      	ldr	r0, [pc, #36]	; (1eb8c <get_rx+0x28>)
{
   1eb68:	460b      	mov	r3, r1
	switch (rx.type) {
   1eb6a:	f890 1027 	ldrb.w	r1, [r0, #39]	; 0x27
   1eb6e:	2902      	cmp	r1, #2
   1eb70:	d007      	beq.n	1eb82 <get_rx+0x1e>
   1eb72:	2904      	cmp	r1, #4
   1eb74:	d108      	bne.n	1eb88 <get_rx+0x24>
	case H4_EVT:
		return bt_buf_get_evt(rx.evt.evt, rx.discardable, timeout);
   1eb76:	f890 1025 	ldrb.w	r1, [r0, #37]	; 0x25
   1eb7a:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
   1eb7e:	f7f5 b855 	b.w	13c2c <bt_buf_get_evt>
	case H4_ACL:
		return bt_buf_get_rx(BT_BUF_ACL_IN, timeout);
   1eb82:	2003      	movs	r0, #3
   1eb84:	f7f5 b802 	b.w	13b8c <bt_buf_get_rx>
			return bt_buf_get_rx(BT_BUF_ISO_IN, timeout);
		}
	}

	return NULL;
}
   1eb88:	2000      	movs	r0, #0
   1eb8a:	4770      	bx	lr
   1eb8c:	2000c954 	.word	0x2000c954

0001eb90 <uart_irq_rx_disable.constprop.0>:
__syscall void uart_irq_rx_disable(const struct device *dev);

static inline void z_impl_uart_irq_rx_disable(const struct device *dev)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
   1eb90:	4802      	ldr	r0, [pc, #8]	; (1eb9c <uart_irq_rx_disable.constprop.0+0xc>)
		(const struct uart_driver_api *)dev->api;

	if (api->irq_rx_disable != NULL) {
   1eb92:	6883      	ldr	r3, [r0, #8]
   1eb94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1eb96:	b103      	cbz	r3, 1eb9a <uart_irq_rx_disable.constprop.0+0xa>
		api->irq_rx_disable(dev);
   1eb98:	4718      	bx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_disable(dev);
}
   1eb9a:	4770      	bx	lr
   1eb9c:	000375ac 	.word	0x000375ac

0001eba0 <z_impl_uart_irq_rx_enable.constprop.0>:
	const struct uart_driver_api *api =
   1eba0:	4802      	ldr	r0, [pc, #8]	; (1ebac <z_impl_uart_irq_rx_enable.constprop.0+0xc>)
	if (api->irq_rx_enable != NULL) {
   1eba2:	6883      	ldr	r3, [r0, #8]
   1eba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1eba6:	b103      	cbz	r3, 1ebaa <z_impl_uart_irq_rx_enable.constprop.0+0xa>
		api->irq_rx_enable(dev);
   1eba8:	4718      	bx	r3
}
   1ebaa:	4770      	bx	lr
   1ebac:	000375ac 	.word	0x000375ac

0001ebb0 <uart_irq_tx_disable.constprop.0>:
	const struct uart_driver_api *api =
   1ebb0:	4802      	ldr	r0, [pc, #8]	; (1ebbc <uart_irq_tx_disable.constprop.0+0xc>)
	if (api->irq_tx_disable != NULL) {
   1ebb2:	6883      	ldr	r3, [r0, #8]
   1ebb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1ebb6:	b103      	cbz	r3, 1ebba <uart_irq_tx_disable.constprop.0+0xa>
		api->irq_tx_disable(dev);
   1ebb8:	4718      	bx	r3
}
   1ebba:	4770      	bx	lr
   1ebbc:	000375ac 	.word	0x000375ac

0001ebc0 <h4_send>:
		}
	}
}

static int h4_send(struct net_buf *buf)
{
   1ebc0:	4601      	mov	r1, r0
   1ebc2:	b508      	push	{r3, lr}
	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	net_buf_put(&tx.fifo, buf);
   1ebc4:	4804      	ldr	r0, [pc, #16]	; (1ebd8 <h4_send+0x18>)
   1ebc6:	f7ff fabb 	bl	1e140 <net_buf_put>
	const struct uart_driver_api *api =
   1ebca:	4804      	ldr	r0, [pc, #16]	; (1ebdc <h4_send+0x1c>)
	if (api->irq_tx_enable != NULL) {
   1ebcc:	6883      	ldr	r3, [r0, #8]
   1ebce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1ebd0:	b103      	cbz	r3, 1ebd4 <h4_send+0x14>
		api->irq_tx_enable(dev);
   1ebd2:	4798      	blx	r3
	uart_irq_tx_enable(h4_dev);

	return 0;
}
   1ebd4:	2000      	movs	r0, #0
   1ebd6:	bd08      	pop	{r3, pc}
   1ebd8:	2000c938 	.word	0x2000c938
   1ebdc:	000375ac 	.word	0x000375ac

0001ebe0 <uart_fifo_read.constprop.0>:
static inline int uart_fifo_read(const struct device *dev, uint8_t *rx_data,
   1ebe0:	b410      	push	{r4}
   1ebe2:	4603      	mov	r3, r0
	const struct uart_driver_api *api =
   1ebe4:	4806      	ldr	r0, [pc, #24]	; (1ec00 <uart_fifo_read.constprop.0+0x20>)
static inline int uart_fifo_read(const struct device *dev, uint8_t *rx_data,
   1ebe6:	460a      	mov	r2, r1
	if (api->fifo_read == NULL) {
   1ebe8:	6881      	ldr	r1, [r0, #8]
   1ebea:	6b0c      	ldr	r4, [r1, #48]	; 0x30
   1ebec:	b11c      	cbz	r4, 1ebf6 <uart_fifo_read.constprop.0+0x16>
	return api->fifo_read(dev, rx_data, size);
   1ebee:	4619      	mov	r1, r3
   1ebf0:	4623      	mov	r3, r4
}
   1ebf2:	bc10      	pop	{r4}
	return api->fifo_read(dev, rx_data, size);
   1ebf4:	4718      	bx	r3
}
   1ebf6:	f06f 0057 	mvn.w	r0, #87	; 0x57
   1ebfa:	bc10      	pop	{r4}
   1ebfc:	4770      	bx	lr
   1ebfe:	bf00      	nop
   1ec00:	000375ac 	.word	0x000375ac

0001ec04 <h4_discard.constprop.0>:
static size_t h4_discard(const struct device *uart, size_t len)
   1ec04:	b590      	push	{r4, r7, lr}
   1ec06:	b08b      	sub	sp, #44	; 0x2c
	err = uart_fifo_read(uart, buf, MIN(len, sizeof(buf)));
   1ec08:	2821      	cmp	r0, #33	; 0x21
static size_t h4_discard(const struct device *uart, size_t len)
   1ec0a:	af00      	add	r7, sp, #0
	err = uart_fifo_read(uart, buf, MIN(len, sizeof(buf)));
   1ec0c:	4601      	mov	r1, r0
   1ec0e:	bf28      	it	cs
   1ec10:	2121      	movcs	r1, #33	; 0x21
   1ec12:	1d38      	adds	r0, r7, #4
   1ec14:	f7ff ffe4 	bl	1ebe0 <uart_fifo_read.constprop.0>
	if (unlikely(err < 0)) {
   1ec18:	2800      	cmp	r0, #0
   1ec1a:	da0f      	bge.n	1ec3c <h4_discard.constprop.0+0x38>
		LOG_ERR("Unable to read from UART (err %d)", err);
   1ec1c:	466c      	mov	r4, sp
   1ec1e:	b088      	sub	sp, #32
   1ec20:	466a      	mov	r2, sp
   1ec22:	4b08      	ldr	r3, [pc, #32]	; (1ec44 <h4_discard.constprop.0+0x40>)
   1ec24:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ec28:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1ec2c:	2303      	movs	r3, #3
   1ec2e:	4806      	ldr	r0, [pc, #24]	; (1ec48 <h4_discard.constprop.0+0x44>)
   1ec30:	f842 3f10 	str.w	r3, [r2, #16]!
   1ec34:	f015 f8ac 	bl	33d90 <z_log_msg_static_create.constprop.0>
		return 0;
   1ec38:	2000      	movs	r0, #0
   1ec3a:	46a5      	mov	sp, r4
}
   1ec3c:	372c      	adds	r7, #44	; 0x2c
   1ec3e:	46bd      	mov	sp, r7
   1ec40:	bd90      	pop	{r4, r7, pc}
   1ec42:	bf00      	nop
   1ec44:	0003dde4 	.word	0x0003dde4
   1ec48:	000378d0 	.word	0x000378d0

0001ec4c <h4_read_hdr>:
{
   1ec4c:	b598      	push	{r3, r4, r7, lr}
	int bytes_read = rx.hdr_len - rx.remaining;
   1ec4e:	4c11      	ldr	r4, [pc, #68]	; (1ec94 <h4_read_hdr+0x48>)
{
   1ec50:	af00      	add	r7, sp, #0
	int bytes_read = rx.hdr_len - rx.remaining;
   1ec52:	8c21      	ldrh	r1, [r4, #32]
   1ec54:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
	ret = uart_fifo_read(h4_dev, rx.hdr + bytes_read, rx.remaining);
   1ec58:	f104 0028 	add.w	r0, r4, #40	; 0x28
	int bytes_read = rx.hdr_len - rx.remaining;
   1ec5c:	1a5b      	subs	r3, r3, r1
	ret = uart_fifo_read(h4_dev, rx.hdr + bytes_read, rx.remaining);
   1ec5e:	4418      	add	r0, r3
   1ec60:	f7ff ffbe 	bl	1ebe0 <uart_fifo_read.constprop.0>
	if (unlikely(ret < 0)) {
   1ec64:	2800      	cmp	r0, #0
   1ec66:	da10      	bge.n	1ec8a <h4_read_hdr+0x3e>
		LOG_ERR("Unable to read from UART (ret %d)", ret);
   1ec68:	466c      	mov	r4, sp
   1ec6a:	b088      	sub	sp, #32
   1ec6c:	466a      	mov	r2, sp
   1ec6e:	4b0a      	ldr	r3, [pc, #40]	; (1ec98 <h4_read_hdr+0x4c>)
   1ec70:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ec74:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1ec78:	2303      	movs	r3, #3
   1ec7a:	4808      	ldr	r0, [pc, #32]	; (1ec9c <h4_read_hdr+0x50>)
   1ec7c:	f842 3f10 	str.w	r3, [r2, #16]!
   1ec80:	f015 f886 	bl	33d90 <z_log_msg_static_create.constprop.0>
   1ec84:	46a5      	mov	sp, r4
}
   1ec86:	46bd      	mov	sp, r7
   1ec88:	bd98      	pop	{r3, r4, r7, pc}
		rx.remaining -= ret;
   1ec8a:	8c23      	ldrh	r3, [r4, #32]
   1ec8c:	1a1b      	subs	r3, r3, r0
   1ec8e:	8423      	strh	r3, [r4, #32]
}
   1ec90:	e7f9      	b.n	1ec86 <h4_read_hdr+0x3a>
   1ec92:	bf00      	nop
   1ec94:	2000c954 	.word	0x2000c954
   1ec98:	0003de06 	.word	0x0003de06
   1ec9c:	000378d0 	.word	0x000378d0

0001eca0 <bt_uart_init>:
	.setup		= h4_setup
#endif
};

static int bt_uart_init(void)
{
   1eca0:	b508      	push	{r3, lr}
   1eca2:	4806      	ldr	r0, [pc, #24]	; (1ecbc <bt_uart_init+0x1c>)
   1eca4:	f017 f9d8 	bl	36058 <z_device_is_ready>

	if (!device_is_ready(h4_dev)) {
   1eca8:	b120      	cbz	r0, 1ecb4 <bt_uart_init+0x14>
		return -ENODEV;
	}

	bt_hci_driver_register(&drv);
   1ecaa:	4805      	ldr	r0, [pc, #20]	; (1ecc0 <bt_uart_init+0x20>)
   1ecac:	f7f6 faea 	bl	15284 <bt_hci_driver_register>

	return 0;
   1ecb0:	2000      	movs	r0, #0
}
   1ecb2:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1ecb4:	f06f 0012 	mvn.w	r0, #18
   1ecb8:	e7fb      	b.n	1ecb2 <bt_uart_init+0x12>
   1ecba:	bf00      	nop
   1ecbc:	000375ac 	.word	0x000375ac
   1ecc0:	00038408 	.word	0x00038408

0001ecc4 <copy_hdr>:
	net_buf_add_mem(buf, rx.hdr, rx.hdr_len);
   1ecc4:	4903      	ldr	r1, [pc, #12]	; (1ecd4 <copy_hdr+0x10>)
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1ecc6:	300c      	adds	r0, #12
   1ecc8:	f891 2026 	ldrb.w	r2, [r1, #38]	; 0x26
   1eccc:	3128      	adds	r1, #40	; 0x28
   1ecce:	f014 ba51 	b.w	33174 <net_buf_simple_add_mem>
   1ecd2:	bf00      	nop
   1ecd4:	2000c954 	.word	0x2000c954

0001ecd8 <rx_thread>:
{
   1ecd8:	b570      	push	{r4, r5, r6, lr}
		if (rx.have_hdr && !rx.buf) {
   1ecda:	4c21      	ldr	r4, [pc, #132]	; (1ed60 <rx_thread+0x88>)
{
   1ecdc:	b086      	sub	sp, #24
		buf = net_buf_get(&rx.fifo, K_FOREVER);
   1ecde:	1d26      	adds	r6, r4, #4
		if (rx.have_hdr && !rx.buf) {
   1ece0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   1ece4:	b1e3      	cbz	r3, 1ed20 <rx_thread+0x48>
   1ece6:	6823      	ldr	r3, [r4, #0]
   1ece8:	b9d3      	cbnz	r3, 1ed20 <rx_thread+0x48>
			rx.buf = get_rx(K_FOREVER);
   1ecea:	f04f 31ff 	mov.w	r1, #4294967295
   1ecee:	f04f 30ff 	mov.w	r0, #4294967295
   1ecf2:	f7ff ff37 	bl	1eb64 <get_rx>
   1ecf6:	6020      	str	r0, [r4, #0]
	return net_buf_simple_tailroom(&buf->b);
   1ecf8:	300c      	adds	r0, #12
			if (rx.remaining > net_buf_tailroom(rx.buf)) {
   1ecfa:	8c25      	ldrh	r5, [r4, #32]
   1ecfc:	f014 fa32 	bl	33164 <net_buf_simple_tailroom>
   1ed00:	4285      	cmp	r5, r0
   1ed02:	d929      	bls.n	1ed58 <rx_thread+0x80>
				LOG_ERR("Not enough space in buffer");
   1ed04:	4b17      	ldr	r3, [pc, #92]	; (1ed64 <rx_thread+0x8c>)
   1ed06:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1ed0a:	9305      	str	r3, [sp, #20]
   1ed0c:	2302      	movs	r3, #2
   1ed0e:	4816      	ldr	r0, [pc, #88]	; (1ed68 <rx_thread+0x90>)
   1ed10:	aa04      	add	r2, sp, #16
   1ed12:	9304      	str	r3, [sp, #16]
   1ed14:	f015 f83c 	bl	33d90 <z_log_msg_static_create.constprop.0>
				rx.discard = rx.remaining;
   1ed18:	8c23      	ldrh	r3, [r4, #32]
   1ed1a:	8463      	strh	r3, [r4, #34]	; 0x22
				reset_rx();
   1ed1c:	f7ff ff1a 	bl	1eb54 <reset_rx>
	z_impl_uart_irq_rx_enable(dev);
   1ed20:	f7ff ff3e 	bl	1eba0 <z_impl_uart_irq_rx_enable.constprop.0>
		buf = net_buf_get(&rx.fifo, K_FOREVER);
   1ed24:	f04f 32ff 	mov.w	r2, #4294967295
   1ed28:	f04f 33ff 	mov.w	r3, #4294967295
   1ed2c:	4630      	mov	r0, r6
   1ed2e:	f014 f9fd 	bl	3312c <net_buf_get>
   1ed32:	4605      	mov	r5, r0
   1ed34:	f7ff ff34 	bl	1eba0 <z_impl_uart_irq_rx_enable.constprop.0>
			bt_recv(buf);
   1ed38:	4628      	mov	r0, r5
   1ed3a:	f7f6 f9d3 	bl	150e4 <bt_recv>
	z_impl_k_yield();
   1ed3e:	f00c f9cb 	bl	2b0d8 <z_impl_k_yield>
			uart_irq_rx_disable(h4_dev);
   1ed42:	f7ff ff25 	bl	1eb90 <uart_irq_rx_disable.constprop.0>
			buf = net_buf_get(&rx.fifo, K_NO_WAIT);
   1ed46:	2200      	movs	r2, #0
   1ed48:	2300      	movs	r3, #0
   1ed4a:	4630      	mov	r0, r6
   1ed4c:	f014 f9ee 	bl	3312c <net_buf_get>
		} while (buf);
   1ed50:	4605      	mov	r5, r0
   1ed52:	2800      	cmp	r0, #0
   1ed54:	d1ee      	bne.n	1ed34 <rx_thread+0x5c>
   1ed56:	e7c3      	b.n	1ece0 <rx_thread+0x8>
				copy_hdr(rx.buf);
   1ed58:	6820      	ldr	r0, [r4, #0]
   1ed5a:	f7ff ffb3 	bl	1ecc4 <copy_hdr>
   1ed5e:	e7df      	b.n	1ed20 <rx_thread+0x48>
   1ed60:	2000c954 	.word	0x2000c954
   1ed64:	0003de28 	.word	0x0003de28
   1ed68:	000378d0 	.word	0x000378d0

0001ed6c <bt_uart_isr>:
{
   1ed6c:	e92d 46f0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, lr}
   1ed70:	b089      	sub	sp, #36	; 0x24
__syscall int uart_irq_update(const struct device *dev);

static inline int z_impl_uart_irq_update(const struct device *dev)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
   1ed72:	4ea1      	ldr	r6, [pc, #644]	; (1eff8 <bt_uart_isr+0x28c>)
   1ed74:	af00      	add	r7, sp, #0
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update == NULL) {
   1ed76:	68b3      	ldr	r3, [r6, #8]
	if (!tx.buf) {
   1ed78:	4da0      	ldr	r5, [pc, #640]	; (1effc <bt_uart_isr+0x290>)
   1ed7a:	607b      	str	r3, [r7, #4]
   1ed7c:	687b      	ldr	r3, [r7, #4]
   1ed7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1ed80:	2b00      	cmp	r3, #0
   1ed82:	f040 81db 	bne.w	1f13c <bt_uart_isr+0x3d0>
	const struct uart_driver_api *api =
   1ed86:	68b4      	ldr	r4, [r6, #8]
	if (api->irq_is_pending == NULL) {
   1ed88:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1ed8a:	2b00      	cmp	r3, #0
   1ed8c:	f040 81df 	bne.w	1f14e <bt_uart_isr+0x3e2>
	if (api->irq_tx_ready == NULL) {
   1ed90:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1ed92:	b9b3      	cbnz	r3, 1edc2 <bt_uart_isr+0x56>
   1ed94:	686b      	ldr	r3, [r5, #4]
   1ed96:	bb33      	cbnz	r3, 1ede6 <bt_uart_isr+0x7a>
		tx.buf = net_buf_get(&tx.fifo, K_NO_WAIT);
   1ed98:	2200      	movs	r2, #0
   1ed9a:	2300      	movs	r3, #0
   1ed9c:	4898      	ldr	r0, [pc, #608]	; (1f000 <bt_uart_isr+0x294>)
   1ed9e:	f014 f9c5 	bl	3312c <net_buf_get>
   1eda2:	6068      	str	r0, [r5, #4]
		if (!tx.buf) {
   1eda4:	b9f8      	cbnz	r0, 1ede6 <bt_uart_isr+0x7a>
			LOG_ERR("TX interrupt but no pending buffer!");
   1eda6:	4b97      	ldr	r3, [pc, #604]	; (1f004 <bt_uart_isr+0x298>)
   1eda8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1edac:	61fb      	str	r3, [r7, #28]
   1edae:	2302      	movs	r3, #2
   1edb0:	4895      	ldr	r0, [pc, #596]	; (1f008 <bt_uart_isr+0x29c>)
   1edb2:	61bb      	str	r3, [r7, #24]
   1edb4:	f107 0218 	add.w	r2, r7, #24
   1edb8:	f014 ffea 	bl	33d90 <z_log_msg_static_create.constprop.0>
		uart_irq_tx_disable(h4_dev);
   1edbc:	f7ff fef8 	bl	1ebb0 <uart_irq_tx_disable.constprop.0>
   1edc0:	e003      	b.n	1edca <bt_uart_isr+0x5e>
	return api->irq_tx_ready(dev);
   1edc2:	4630      	mov	r0, r6
   1edc4:	4798      	blx	r3
		if (uart_irq_tx_ready(h4_dev)) {
   1edc6:	2800      	cmp	r0, #0
   1edc8:	d1e4      	bne.n	1ed94 <bt_uart_isr+0x28>
	if (api->irq_rx_ready == NULL) {
   1edca:	68b3      	ldr	r3, [r6, #8]
   1edcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1edce:	2b00      	cmp	r3, #0
   1edd0:	d167      	bne.n	1eea2 <bt_uart_isr+0x136>
	if (rx.discard) {
   1edd2:	4c8e      	ldr	r4, [pc, #568]	; (1f00c <bt_uart_isr+0x2a0>)
   1edd4:	8c60      	ldrh	r0, [r4, #34]	; 0x22
   1edd6:	2800      	cmp	r0, #0
   1edd8:	d069      	beq.n	1eeae <bt_uart_isr+0x142>
		rx.discard -= h4_discard(h4_dev, rx.discard);
   1edda:	f7ff ff13 	bl	1ec04 <h4_discard.constprop.0>
   1edde:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   1ede0:	1a1b      	subs	r3, r3, r0
   1ede2:	8463      	strh	r3, [r4, #34]	; 0x22
		return;
   1ede4:	e7ca      	b.n	1ed7c <bt_uart_isr+0x10>
	if (!tx.type) {
   1ede6:	782a      	ldrb	r2, [r5, #0]
		switch (bt_buf_get_type(tx.buf)) {
   1ede8:	686b      	ldr	r3, [r5, #4]
	if (!tx.type) {
   1edea:	2a00      	cmp	r2, #0
   1edec:	d134      	bne.n	1ee58 <bt_uart_isr+0xec>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1edee:	7e1b      	ldrb	r3, [r3, #24]
		switch (bt_buf_get_type(tx.buf)) {
   1edf0:	b1d3      	cbz	r3, 1ee28 <bt_uart_isr+0xbc>
   1edf2:	2b02      	cmp	r3, #2
   1edf4:	d019      	beq.n	1ee2a <bt_uart_isr+0xbe>
			LOG_ERR("Unknown buffer type");
   1edf6:	4b86      	ldr	r3, [pc, #536]	; (1f010 <bt_uart_isr+0x2a4>)
   1edf8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1edfc:	61fb      	str	r3, [r7, #28]
   1edfe:	2302      	movs	r3, #2
   1ee00:	4881      	ldr	r0, [pc, #516]	; (1f008 <bt_uart_isr+0x29c>)
   1ee02:	61bb      	str	r3, [r7, #24]
   1ee04:	f107 0218 	add.w	r2, r7, #24
   1ee08:	f014 ffc2 	bl	33d90 <z_log_msg_static_create.constprop.0>
	tx.type = H4_NONE;
   1ee0c:	2300      	movs	r3, #0
	net_buf_unref(tx.buf);
   1ee0e:	6868      	ldr	r0, [r5, #4]
	tx.type = H4_NONE;
   1ee10:	702b      	strb	r3, [r5, #0]
	net_buf_unref(tx.buf);
   1ee12:	f7ff f9bb 	bl	1e18c <net_buf_unref>
	tx.buf = net_buf_get(&tx.fifo, K_NO_WAIT);
   1ee16:	2200      	movs	r2, #0
   1ee18:	2300      	movs	r3, #0
   1ee1a:	4879      	ldr	r0, [pc, #484]	; (1f000 <bt_uart_isr+0x294>)
   1ee1c:	f014 f986 	bl	3312c <net_buf_get>
   1ee20:	6068      	str	r0, [r5, #4]
	if (!tx.buf) {
   1ee22:	2800      	cmp	r0, #0
   1ee24:	d1d1      	bne.n	1edca <bt_uart_isr+0x5e>
   1ee26:	e7c9      	b.n	1edbc <bt_uart_isr+0x50>
		switch (bt_buf_get_type(tx.buf)) {
   1ee28:	2301      	movs	r3, #1
			tx.type = H4_ACL;
   1ee2a:	702b      	strb	r3, [r5, #0]
	if (api->fifo_fill == NULL) {
   1ee2c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1ee2e:	b96b      	cbnz	r3, 1ee4c <bt_uart_isr+0xe0>
			LOG_WRN("Unable to send H:4 type");
   1ee30:	4b78      	ldr	r3, [pc, #480]	; (1f014 <bt_uart_isr+0x2a8>)
   1ee32:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1ee36:	61fb      	str	r3, [r7, #28]
   1ee38:	2302      	movs	r3, #2
   1ee3a:	4873      	ldr	r0, [pc, #460]	; (1f008 <bt_uart_isr+0x29c>)
   1ee3c:	61bb      	str	r3, [r7, #24]
   1ee3e:	f107 0218 	add.w	r2, r7, #24
   1ee42:	f014 ffa5 	bl	33d90 <z_log_msg_static_create.constprop.0>
			tx.type = H4_NONE;
   1ee46:	2300      	movs	r3, #0
   1ee48:	702b      	strb	r3, [r5, #0]
			return;
   1ee4a:	e7be      	b.n	1edca <bt_uart_isr+0x5e>
	return api->fifo_fill(dev, tx_data, size);
   1ee4c:	2201      	movs	r2, #1
   1ee4e:	4629      	mov	r1, r5
   1ee50:	4630      	mov	r0, r6
   1ee52:	4798      	blx	r3
		if (bytes != 1) {
   1ee54:	2801      	cmp	r0, #1
   1ee56:	d1eb      	bne.n	1ee30 <bt_uart_isr+0xc4>
	bytes = uart_fifo_fill(h4_dev, tx.buf->data, tx.buf->len);
   1ee58:	686b      	ldr	r3, [r5, #4]
   1ee5a:	68d9      	ldr	r1, [r3, #12]
   1ee5c:	8a1a      	ldrh	r2, [r3, #16]
	if (api->fifo_fill == NULL) {
   1ee5e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1ee60:	b1bb      	cbz	r3, 1ee92 <bt_uart_isr+0x126>
	return api->fifo_fill(dev, tx_data, size);
   1ee62:	4630      	mov	r0, r6
   1ee64:	4798      	blx	r3
	if (unlikely(bytes < 0)) {
   1ee66:	1e01      	subs	r1, r0, #0
   1ee68:	da16      	bge.n	1ee98 <bt_uart_isr+0x12c>
		LOG_ERR("Unable to write to UART (err %d)", bytes);
   1ee6a:	466c      	mov	r4, sp
   1ee6c:	b088      	sub	sp, #32
   1ee6e:	466a      	mov	r2, sp
   1ee70:	4b69      	ldr	r3, [pc, #420]	; (1f018 <bt_uart_isr+0x2ac>)
   1ee72:	4865      	ldr	r0, [pc, #404]	; (1f008 <bt_uart_isr+0x29c>)
   1ee74:	e9c2 3105 	strd	r3, r1, [r2, #20]
   1ee78:	2303      	movs	r3, #3
   1ee7a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ee7e:	f842 3f10 	str.w	r3, [r2, #16]!
   1ee82:	f014 ff85 	bl	33d90 <z_log_msg_static_create.constprop.0>
   1ee86:	46a5      	mov	sp, r4
	if (tx.buf->len) {
   1ee88:	686b      	ldr	r3, [r5, #4]
   1ee8a:	8a1b      	ldrh	r3, [r3, #16]
   1ee8c:	2b00      	cmp	r3, #0
   1ee8e:	d0bd      	beq.n	1ee0c <bt_uart_isr+0xa0>
   1ee90:	e79b      	b.n	1edca <bt_uart_isr+0x5e>
		return -ENOSYS;
   1ee92:	f06f 0157 	mvn.w	r1, #87	; 0x57
   1ee96:	e7e8      	b.n	1ee6a <bt_uart_isr+0xfe>
	return net_buf_simple_pull(&buf->b, len);
   1ee98:	6868      	ldr	r0, [r5, #4]
   1ee9a:	300c      	adds	r0, #12
   1ee9c:	f7ff fac0 	bl	1e420 <net_buf_simple_pull>
   1eea0:	e7f2      	b.n	1ee88 <bt_uart_isr+0x11c>
	return api->irq_rx_ready(dev);
   1eea2:	4630      	mov	r0, r6
   1eea4:	4798      	blx	r3
		if (uart_irq_rx_ready(h4_dev)) {
   1eea6:	2800      	cmp	r0, #0
   1eea8:	f43f af68 	beq.w	1ed7c <bt_uart_isr+0x10>
   1eeac:	e791      	b.n	1edd2 <bt_uart_isr+0x66>
	if (rx.have_hdr) {
   1eeae:	f894 9024 	ldrb.w	r9, [r4, #36]	; 0x24
   1eeb2:	f1b9 0f00 	cmp.w	r9, #0
   1eeb6:	f000 80bb 	beq.w	1f030 <bt_uart_isr+0x2c4>
	if (!rx.buf) {
   1eeba:	6823      	ldr	r3, [r4, #0]
   1eebc:	2b00      	cmp	r3, #0
   1eebe:	d142      	bne.n	1ef46 <bt_uart_isr+0x1da>
		rx.buf = get_rx(K_NO_WAIT);
   1eec0:	2000      	movs	r0, #0
   1eec2:	2100      	movs	r1, #0
   1eec4:	f7ff fe4e 	bl	1eb64 <get_rx>
   1eec8:	6020      	str	r0, [r4, #0]
		if (!rx.buf) {
   1eeca:	bb30      	cbnz	r0, 1ef1a <bt_uart_isr+0x1ae>
			if (rx.discardable) {
   1eecc:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
   1eed0:	b1ab      	cbz	r3, 1eefe <bt_uart_isr+0x192>
				LOG_WRN("Discarding event 0x%02x", rx.evt.evt);
   1eed2:	46e9      	mov	r9, sp
   1eed4:	b088      	sub	sp, #32
   1eed6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1eeda:	466a      	mov	r2, sp
   1eedc:	494f      	ldr	r1, [pc, #316]	; (1f01c <bt_uart_isr+0x2b0>)
   1eede:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1eee2:	2303      	movs	r3, #3
   1eee4:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1eee8:	f842 3f10 	str.w	r3, [r2, #16]!
			LOG_ERR("Not enough space in buffer %u/%zu", rx.remaining, buf_tailroom);
   1eeec:	4846      	ldr	r0, [pc, #280]	; (1f008 <bt_uart_isr+0x29c>)
   1eeee:	f014 ff4f 	bl	33d90 <z_log_msg_static_create.constprop.0>
   1eef2:	46cd      	mov	sp, r9
			rx.discard = rx.remaining;
   1eef4:	8c23      	ldrh	r3, [r4, #32]
   1eef6:	8463      	strh	r3, [r4, #34]	; 0x22
			reset_rx();
   1eef8:	f7ff fe2c 	bl	1eb54 <reset_rx>
   1eefc:	e73e      	b.n	1ed7c <bt_uart_isr+0x10>
			LOG_WRN("Failed to allocate, deferring to rx_thread");
   1eefe:	4b48      	ldr	r3, [pc, #288]	; (1f020 <bt_uart_isr+0x2b4>)
   1ef00:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1ef04:	61fb      	str	r3, [r7, #28]
   1ef06:	2302      	movs	r3, #2
   1ef08:	483f      	ldr	r0, [pc, #252]	; (1f008 <bt_uart_isr+0x29c>)
   1ef0a:	61bb      	str	r3, [r7, #24]
   1ef0c:	f107 0218 	add.w	r2, r7, #24
   1ef10:	f014 ff3e 	bl	33d90 <z_log_msg_static_create.constprop.0>
			uart_irq_rx_disable(h4_dev);
   1ef14:	f7ff fe3c 	bl	1eb90 <uart_irq_rx_disable.constprop.0>
			return;
   1ef18:	e730      	b.n	1ed7c <bt_uart_isr+0x10>
	return net_buf_simple_tailroom(&buf->b);
   1ef1a:	300c      	adds	r0, #12
   1ef1c:	f014 f922 	bl	33164 <net_buf_simple_tailroom>
		if (buf_tailroom < rx.remaining) {
   1ef20:	8c23      	ldrh	r3, [r4, #32]
   1ef22:	4298      	cmp	r0, r3
   1ef24:	d20c      	bcs.n	1ef40 <bt_uart_isr+0x1d4>
			LOG_ERR("Not enough space in buffer %u/%zu", rx.remaining, buf_tailroom);
   1ef26:	46e9      	mov	r9, sp
   1ef28:	b088      	sub	sp, #32
   1ef2a:	466a      	mov	r2, sp
   1ef2c:	493d      	ldr	r1, [pc, #244]	; (1f024 <bt_uart_isr+0x2b8>)
   1ef2e:	61d0      	str	r0, [r2, #28]
   1ef30:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1ef34:	2304      	movs	r3, #4
   1ef36:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1ef3a:	f842 3f10 	str.w	r3, [r2, #16]!
   1ef3e:	e7d5      	b.n	1eeec <bt_uart_isr+0x180>
		copy_hdr(rx.buf);
   1ef40:	6820      	ldr	r0, [r4, #0]
   1ef42:	f7ff febf 	bl	1ecc4 <copy_hdr>
	read = uart_fifo_read(h4_dev, net_buf_tail(rx.buf), rx.remaining);
   1ef46:	6823      	ldr	r3, [r4, #0]
   1ef48:	8c21      	ldrh	r1, [r4, #32]
	return buf->data + buf->len;
   1ef4a:	8a1a      	ldrh	r2, [r3, #16]
   1ef4c:	68d8      	ldr	r0, [r3, #12]
   1ef4e:	4410      	add	r0, r2
   1ef50:	f7ff fe46 	bl	1ebe0 <uart_fifo_read.constprop.0>
	if (unlikely(read < 0)) {
   1ef54:	f1b0 0900 	subs.w	r9, r0, #0
   1ef58:	da0f      	bge.n	1ef7a <bt_uart_isr+0x20e>
		LOG_ERR("Failed to read UART (err %d)", read);
   1ef5a:	466c      	mov	r4, sp
   1ef5c:	b088      	sub	sp, #32
   1ef5e:	466a      	mov	r2, sp
   1ef60:	4b31      	ldr	r3, [pc, #196]	; (1f028 <bt_uart_isr+0x2bc>)
   1ef62:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ef66:	e9c2 3905 	strd	r3, r9, [r2, #20]
   1ef6a:	2303      	movs	r3, #3
   1ef6c:	4826      	ldr	r0, [pc, #152]	; (1f008 <bt_uart_isr+0x29c>)
   1ef6e:	f842 3f10 	str.w	r3, [r2, #16]!
   1ef72:	f014 ff0d 	bl	33d90 <z_log_msg_static_create.constprop.0>
   1ef76:	46a5      	mov	sp, r4
		return;
   1ef78:	e700      	b.n	1ed7c <bt_uart_isr+0x10>
	return net_buf_simple_add(&buf->b, len);
   1ef7a:	6820      	ldr	r0, [r4, #0]
   1ef7c:	4649      	mov	r1, r9
   1ef7e:	300c      	adds	r0, #12
   1ef80:	f7ff fa8a 	bl	1e498 <net_buf_simple_add>
	rx.remaining -= read;
   1ef84:	8c23      	ldrh	r3, [r4, #32]
   1ef86:	eba3 0109 	sub.w	r1, r3, r9
   1ef8a:	b289      	uxth	r1, r1
   1ef8c:	8421      	strh	r1, [r4, #32]
	if (rx.remaining) {
   1ef8e:	2900      	cmp	r1, #0
   1ef90:	f47f aef4 	bne.w	1ed7c <bt_uart_isr+0x10>
	if (rx.type == H4_EVT) {
   1ef94:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	buf = rx.buf;
   1ef98:	f8d4 9000 	ldr.w	r9, [r4]
	if (rx.type == H4_EVT) {
   1ef9c:	2b04      	cmp	r3, #4
	rx.buf = NULL;
   1ef9e:	6021      	str	r1, [r4, #0]
	if (rx.type == H4_EVT) {
   1efa0:	d127      	bne.n	1eff2 <bt_uart_isr+0x286>
		evt_flags = bt_hci_evt_get_flags(rx.evt.evt);
   1efa2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   1efa6:	2b0f      	cmp	r3, #15
   1efa8:	d809      	bhi.n	1efbe <bt_uart_isr+0x252>
   1efaa:	2b0d      	cmp	r3, #13
   1efac:	d80b      	bhi.n	1efc6 <bt_uart_isr+0x25a>
   1efae:	2b05      	cmp	r3, #5
   1efb0:	d012      	beq.n	1efd8 <bt_uart_isr+0x26c>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1efb2:	2301      	movs	r3, #1
   1efb4:	f889 3018 	strb.w	r3, [r9, #24]
	reset_rx();
   1efb8:	f7ff fdcc 	bl	1eb54 <reset_rx>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1efbc:	e014      	b.n	1efe8 <bt_uart_isr+0x27c>
   1efbe:	2b13      	cmp	r3, #19
   1efc0:	d001      	beq.n	1efc6 <bt_uart_isr+0x25a>
   1efc2:	2b1a      	cmp	r3, #26
   1efc4:	d1f5      	bne.n	1efb2 <bt_uart_isr+0x246>
   1efc6:	2301      	movs	r3, #1
		bt_recv_prio(buf);
   1efc8:	4648      	mov	r0, r9
   1efca:	f889 3018 	strb.w	r3, [r9, #24]
	reset_rx();
   1efce:	f7ff fdc1 	bl	1eb54 <reset_rx>
		bt_recv_prio(buf);
   1efd2:	f7f6 f939 	bl	15248 <bt_recv_prio>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1efd6:	e6d1      	b.n	1ed7c <bt_uart_isr+0x10>
   1efd8:	2301      	movs	r3, #1
		bt_recv_prio(buf);
   1efda:	4648      	mov	r0, r9
   1efdc:	f889 3018 	strb.w	r3, [r9, #24]
	reset_rx();
   1efe0:	f7ff fdb8 	bl	1eb54 <reset_rx>
		bt_recv_prio(buf);
   1efe4:	f7f6 f930 	bl	15248 <bt_recv_prio>
		net_buf_put(&rx.fifo, buf);
   1efe8:	4649      	mov	r1, r9
   1efea:	4810      	ldr	r0, [pc, #64]	; (1f02c <bt_uart_isr+0x2c0>)
   1efec:	f7ff f8a8 	bl	1e140 <net_buf_put>
   1eff0:	e6c4      	b.n	1ed7c <bt_uart_isr+0x10>
   1eff2:	2303      	movs	r3, #3
   1eff4:	e7de      	b.n	1efb4 <bt_uart_isr+0x248>
   1eff6:	bf00      	nop
   1eff8:	000375ac 	.word	0x000375ac
   1effc:	2000c930 	.word	0x2000c930
   1f000:	2000c938 	.word	0x2000c938
   1f004:	0003de43 	.word	0x0003de43
   1f008:	000378d0 	.word	0x000378d0
   1f00c:	2000c954 	.word	0x2000c954
   1f010:	0003de67 	.word	0x0003de67
   1f014:	0003de7b 	.word	0x0003de7b
   1f018:	0003de93 	.word	0x0003de93
   1f01c:	0003deb4 	.word	0x0003deb4
   1f020:	0003decc 	.word	0x0003decc
   1f024:	0003def7 	.word	0x0003def7
   1f028:	0003df19 	.word	0x0003df19
   1f02c:	2000c958 	.word	0x2000c958
	switch (rx.type) {
   1f030:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   1f034:	2b02      	cmp	r3, #2
   1f036:	d071      	beq.n	1f11c <bt_uart_isr+0x3b0>
   1f038:	2b04      	cmp	r3, #4
   1f03a:	d031      	beq.n	1f0a0 <bt_uart_isr+0x334>
	if (uart_fifo_read(h4_dev, &rx.type, 1) != 1) {
   1f03c:	2101      	movs	r1, #1
   1f03e:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1f042:	f7ff fdcd 	bl	1ebe0 <uart_fifo_read.constprop.0>
   1f046:	2801      	cmp	r0, #1
   1f048:	d00d      	beq.n	1f066 <bt_uart_isr+0x2fa>
		LOG_WRN("Unable to read H:4 packet type");
   1f04a:	4b44      	ldr	r3, [pc, #272]	; (1f15c <bt_uart_isr+0x3f0>)
   1f04c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1f050:	61fb      	str	r3, [r7, #28]
   1f052:	2302      	movs	r3, #2
   1f054:	4842      	ldr	r0, [pc, #264]	; (1f160 <bt_uart_isr+0x3f4>)
   1f056:	61bb      	str	r3, [r7, #24]
   1f058:	f107 0218 	add.w	r2, r7, #24
   1f05c:	f014 fe98 	bl	33d90 <z_log_msg_static_create.constprop.0>
		rx.type = H4_NONE;
   1f060:	f884 9027 	strb.w	r9, [r4, #39]	; 0x27
   1f064:	e68a      	b.n	1ed7c <bt_uart_isr+0x10>
	switch (rx.type) {
   1f066:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   1f06a:	2b02      	cmp	r3, #2
   1f06c:	d006      	beq.n	1f07c <bt_uart_isr+0x310>
   1f06e:	2b04      	cmp	r3, #4
   1f070:	d106      	bne.n	1f080 <bt_uart_isr+0x314>
		rx.remaining = sizeof(rx.evt);
   1f072:	2302      	movs	r3, #2
		rx.remaining = sizeof(rx.acl);
   1f074:	8423      	strh	r3, [r4, #32]
		rx.hdr_len = rx.remaining;
   1f076:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
		break;
   1f07a:	e67f      	b.n	1ed7c <bt_uart_isr+0x10>
		rx.remaining = sizeof(rx.acl);
   1f07c:	2304      	movs	r3, #4
   1f07e:	e7f9      	b.n	1f074 <bt_uart_isr+0x308>
		LOG_ERR("Unknown H:4 type 0x%02x", rx.type);
   1f080:	46ea      	mov	sl, sp
   1f082:	b088      	sub	sp, #32
   1f084:	466a      	mov	r2, sp
   1f086:	4937      	ldr	r1, [pc, #220]	; (1f164 <bt_uart_isr+0x3f8>)
   1f088:	4835      	ldr	r0, [pc, #212]	; (1f160 <bt_uart_isr+0x3f4>)
	switch (rx.type) {
   1f08a:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown H:4 type 0x%02x", rx.type);
   1f08e:	2303      	movs	r3, #3
   1f090:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f094:	f842 3f10 	str.w	r3, [r2, #16]!
   1f098:	f014 fe7a 	bl	33d90 <z_log_msg_static_create.constprop.0>
   1f09c:	46d5      	mov	sp, sl
   1f09e:	e7df      	b.n	1f060 <bt_uart_isr+0x2f4>
	h4_read_hdr();
   1f0a0:	f7ff fdd4 	bl	1ec4c <h4_read_hdr>
	if (rx.hdr_len == sizeof(*hdr) && rx.remaining < sizeof(*hdr)) {
   1f0a4:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   1f0a8:	2b02      	cmp	r3, #2
   1f0aa:	d10b      	bne.n	1f0c4 <bt_uart_isr+0x358>
   1f0ac:	8c23      	ldrh	r3, [r4, #32]
   1f0ae:	2b01      	cmp	r3, #1
   1f0b0:	d808      	bhi.n	1f0c4 <bt_uart_isr+0x358>
		switch (rx.evt.evt) {
   1f0b2:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
   1f0b6:	2a3e      	cmp	r2, #62	; 0x3e
			rx.remaining++;
   1f0b8:	bf01      	itttt	eq
   1f0ba:	3301      	addeq	r3, #1
   1f0bc:	8423      	strheq	r3, [r4, #32]
			rx.hdr_len++;
   1f0be:	2303      	moveq	r3, #3
   1f0c0:	f884 3026 	strbeq.w	r3, [r4, #38]	; 0x26
	if (!rx.remaining) {
   1f0c4:	8c23      	ldrh	r3, [r4, #32]
   1f0c6:	bb7b      	cbnz	r3, 1f128 <bt_uart_isr+0x3bc>
		if (rx.evt.evt == BT_HCI_EVT_LE_META_EVENT &&
   1f0c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1f0ca:	4a27      	ldr	r2, [pc, #156]	; (1f168 <bt_uart_isr+0x3fc>)
   1f0cc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
   1f0d0:	4293      	cmp	r3, r2
			rx.discardable = true;
   1f0d2:	bf04      	itt	eq
   1f0d4:	2301      	moveq	r3, #1
   1f0d6:	f884 3025 	strbeq.w	r3, [r4, #37]	; 0x25
		rx.remaining = hdr->len - (rx.hdr_len - sizeof(*hdr));
   1f0da:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   1f0de:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   1f0e2:	3302      	adds	r3, #2
   1f0e4:	1a9b      	subs	r3, r3, r2
		rx.remaining = sys_le16_to_cpu(hdr->len);
   1f0e6:	8423      	strh	r3, [r4, #32]
		rx.have_hdr = true;
   1f0e8:	2301      	movs	r3, #1
   1f0ea:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	if (rx.have_hdr && rx.buf) {
   1f0ee:	6820      	ldr	r0, [r4, #0]
   1f0f0:	2800      	cmp	r0, #0
   1f0f2:	f43f ae43 	beq.w	1ed7c <bt_uart_isr+0x10>
	return net_buf_simple_tailroom(&buf->b);
   1f0f6:	300c      	adds	r0, #12
		if (rx.remaining > net_buf_tailroom(rx.buf)) {
   1f0f8:	f8b4 9020 	ldrh.w	r9, [r4, #32]
   1f0fc:	f014 f832 	bl	33164 <net_buf_simple_tailroom>
   1f100:	4581      	cmp	r9, r0
   1f102:	d917      	bls.n	1f134 <bt_uart_isr+0x3c8>
			LOG_ERR("Not enough space in buffer");
   1f104:	4b19      	ldr	r3, [pc, #100]	; (1f16c <bt_uart_isr+0x400>)
   1f106:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1f10a:	61fb      	str	r3, [r7, #28]
   1f10c:	2302      	movs	r3, #2
   1f10e:	4814      	ldr	r0, [pc, #80]	; (1f160 <bt_uart_isr+0x3f4>)
   1f110:	61bb      	str	r3, [r7, #24]
   1f112:	f107 0218 	add.w	r2, r7, #24
   1f116:	f014 fe3b 	bl	33d90 <z_log_msg_static_create.constprop.0>
   1f11a:	e6eb      	b.n	1eef4 <bt_uart_isr+0x188>
	h4_read_hdr();
   1f11c:	f7ff fd96 	bl	1ec4c <h4_read_hdr>
	if (!rx.remaining) {
   1f120:	8c23      	ldrh	r3, [r4, #32]
   1f122:	b90b      	cbnz	r3, 1f128 <bt_uart_isr+0x3bc>
		rx.remaining = sys_le16_to_cpu(hdr->len);
   1f124:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   1f126:	e7de      	b.n	1f0e6 <bt_uart_isr+0x37a>
	if (rx.have_hdr && rx.buf) {
   1f128:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   1f12c:	2b00      	cmp	r3, #0
   1f12e:	f43f ae25 	beq.w	1ed7c <bt_uart_isr+0x10>
   1f132:	e7dc      	b.n	1f0ee <bt_uart_isr+0x382>
			copy_hdr(rx.buf);
   1f134:	6820      	ldr	r0, [r4, #0]
   1f136:	f7ff fdc5 	bl	1ecc4 <copy_hdr>
   1f13a:	e61f      	b.n	1ed7c <bt_uart_isr+0x10>
		return -ENOSYS;
	}
	return api->irq_update(dev);
   1f13c:	4630      	mov	r0, r6
   1f13e:	4798      	blx	r3
	while (uart_irq_update(h4_dev) && uart_irq_is_pending(h4_dev)) {
   1f140:	2800      	cmp	r0, #0
   1f142:	f47f ae20 	bne.w	1ed86 <bt_uart_isr+0x1a>
}
   1f146:	3724      	adds	r7, #36	; 0x24
   1f148:	46bd      	mov	sp, r7
   1f14a:	e8bd 86f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, pc}
	return api->irq_is_pending(dev);
   1f14e:	4630      	mov	r0, r6
   1f150:	4798      	blx	r3
	while (uart_irq_update(h4_dev) && uart_irq_is_pending(h4_dev)) {
   1f152:	2800      	cmp	r0, #0
   1f154:	f47f ae1c 	bne.w	1ed90 <bt_uart_isr+0x24>
   1f158:	e7f5      	b.n	1f146 <bt_uart_isr+0x3da>
   1f15a:	bf00      	nop
   1f15c:	0003df36 	.word	0x0003df36
   1f160:	000378d0 	.word	0x000378d0
   1f164:	0003df55 	.word	0x0003df55
   1f168:	0002003e 	.word	0x0002003e
   1f16c:	0003de28 	.word	0x0003de28

0001f170 <h4_open>:
{
   1f170:	b510      	push	{r4, lr}
	ret = bt_hci_transport_setup(h4_dev);
   1f172:	4c17      	ldr	r4, [pc, #92]	; (1f1d0 <h4_open+0x60>)
{
   1f174:	b088      	sub	sp, #32
	uart_irq_rx_disable(h4_dev);
   1f176:	f7ff fd0b 	bl	1eb90 <uart_irq_rx_disable.constprop.0>
	uart_irq_tx_disable(h4_dev);
   1f17a:	f7ff fd19 	bl	1ebb0 <uart_irq_tx_disable.constprop.0>
	ret = bt_hci_transport_setup(h4_dev);
   1f17e:	4620      	mov	r0, r4
   1f180:	f7f4 fa50 	bl	13624 <bt_hci_transport_setup>
	if (ret < 0) {
   1f184:	2800      	cmp	r0, #0
   1f186:	db20      	blt.n	1f1ca <h4_open+0x5a>
static inline int uart_irq_callback_user_data_set(const struct device *dev,
						  uart_irq_callback_user_data_t cb,
						  void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
   1f188:	68a3      	ldr	r3, [r4, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   1f18a:	b12b      	cbz	r3, 1f198 <h4_open+0x28>
   1f18c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1f18e:	b11b      	cbz	r3, 1f198 <h4_open+0x28>
		api->irq_callback_set(dev, cb, user_data);
   1f190:	2200      	movs	r2, #0
   1f192:	4620      	mov	r0, r4
   1f194:	490f      	ldr	r1, [pc, #60]	; (1f1d4 <h4_open+0x64>)
   1f196:	4798      	blx	r3
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1f198:	2200      	movs	r2, #0
   1f19a:	2300      	movs	r3, #0
   1f19c:	2400      	movs	r4, #0
   1f19e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1f1a2:	f06f 0307 	mvn.w	r3, #7
   1f1a6:	f640 0298 	movw	r2, #2200	; 0x898
   1f1aa:	e9cd 3403 	strd	r3, r4, [sp, #12]
   1f1ae:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1f1b2:	4b09      	ldr	r3, [pc, #36]	; (1f1d8 <h4_open+0x68>)
   1f1b4:	4909      	ldr	r1, [pc, #36]	; (1f1dc <h4_open+0x6c>)
   1f1b6:	9400      	str	r4, [sp, #0]
   1f1b8:	4809      	ldr	r0, [pc, #36]	; (1f1e0 <h4_open+0x70>)
   1f1ba:	f009 fef3 	bl	28fa4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1f1be:	4909      	ldr	r1, [pc, #36]	; (1f1e4 <h4_open+0x74>)
   1f1c0:	f016 ff87 	bl	360d2 <z_impl_k_thread_name_set>
	return 0;
   1f1c4:	4620      	mov	r0, r4
}
   1f1c6:	b008      	add	sp, #32
   1f1c8:	bd10      	pop	{r4, pc}
		return -EIO;
   1f1ca:	f06f 0004 	mvn.w	r0, #4
   1f1ce:	e7fa      	b.n	1f1c6 <h4_open+0x56>
   1f1d0:	000375ac 	.word	0x000375ac
   1f1d4:	0001ed6d 	.word	0x0001ed6d
   1f1d8:	0001ecd9 	.word	0x0001ecd9
   1f1dc:	20011730 	.word	0x20011730
   1f1e0:	2000dcb0 	.word	0x2000dcb0
   1f1e4:	0003df6d 	.word	0x0003df6d

0001f1e8 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1f1e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1f1ea:	2340      	movs	r3, #64	; 0x40
{
   1f1ec:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
   1f1ee:	490a      	ldr	r1, [pc, #40]	; (1f218 <onoff_start+0x30>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1f1f0:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
   1f1f2:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1f1f4:	1149      	asrs	r1, r1, #5
{
   1f1f6:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1f1f8:	4623      	mov	r3, r4
   1f1fa:	4a08      	ldr	r2, [pc, #32]	; (1f21c <onoff_start+0x34>)
   1f1fc:	4808      	ldr	r0, [pc, #32]	; (1f220 <onoff_start+0x38>)
   1f1fe:	f014 fddd 	bl	33dbc <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1f202:	1e01      	subs	r1, r0, #0
   1f204:	da05      	bge.n	1f212 <onoff_start+0x2a>
		notify(mgr, err);
   1f206:	4628      	mov	r0, r5
   1f208:	4623      	mov	r3, r4
	}
}
   1f20a:	b003      	add	sp, #12
   1f20c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
   1f210:	4718      	bx	r3
}
   1f212:	b003      	add	sp, #12
   1f214:	bd30      	pop	{r4, r5, pc}
   1f216:	bf00      	nop
   1f218:	2000e7fc 	.word	0x2000e7fc
   1f21c:	00033e27 	.word	0x00033e27
   1f220:	00037504 	.word	0x00037504

0001f224 <get_status>:
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1f224:	b2c9      	uxtb	r1, r1
   1f226:	2901      	cmp	r1, #1
{
   1f228:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1f22a:	d909      	bls.n	1f240 <get_status+0x1c>
   1f22c:	4908      	ldr	r1, [pc, #32]	; (1f250 <get_status+0x2c>)
   1f22e:	4809      	ldr	r0, [pc, #36]	; (1f254 <get_status+0x30>)
   1f230:	237a      	movs	r3, #122	; 0x7a
   1f232:	4a09      	ldr	r2, [pc, #36]	; (1f258 <get_status+0x34>)
   1f234:	f010 f8c6 	bl	2f3c4 <assert_print>
   1f238:	217a      	movs	r1, #122	; 0x7a
   1f23a:	4807      	ldr	r0, [pc, #28]	; (1f258 <get_status+0x34>)
   1f23c:	f010 f8bb 	bl	2f3b6 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1f240:	220c      	movs	r2, #12
   1f242:	6903      	ldr	r3, [r0, #16]
   1f244:	fb01 3302 	mla	r3, r1, r2, r3
   1f248:	6c98      	ldr	r0, [r3, #72]	; 0x48
}
   1f24a:	f000 0007 	and.w	r0, r0, #7
   1f24e:	bd08      	pop	{r3, pc}
   1f250:	0003dfc5 	.word	0x0003dfc5
   1f254:	00039995 	.word	0x00039995
   1f258:	0003df88 	.word	0x0003df88

0001f25c <stop>:
{
   1f25c:	b570      	push	{r4, r5, r6, lr}
   1f25e:	b2c9      	uxtb	r1, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1f260:	2901      	cmp	r1, #1
	struct nrf_clock_control_data *data = dev->data;
   1f262:	6903      	ldr	r3, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1f264:	d90b      	bls.n	1f27e <stop+0x22>
   1f266:	4919      	ldr	r1, [pc, #100]	; (1f2cc <stop+0x70>)
   1f268:	4819      	ldr	r0, [pc, #100]	; (1f2d0 <stop+0x74>)
   1f26a:	f240 135d 	movw	r3, #349	; 0x15d
   1f26e:	4a19      	ldr	r2, [pc, #100]	; (1f2d4 <stop+0x78>)
   1f270:	f010 f8a8 	bl	2f3c4 <assert_print>
   1f274:	f240 115d 	movw	r1, #349	; 0x15d
   1f278:	4816      	ldr	r0, [pc, #88]	; (1f2d4 <stop+0x78>)
   1f27a:	f010 f89c 	bl	2f3b6 <assert_post_action>
	__asm__ volatile(
   1f27e:	f04f 0420 	mov.w	r4, #32
   1f282:	f3ef 8511 	mrs	r5, BASEPRI
   1f286:	f384 8812 	msr	BASEPRI_MAX, r4
   1f28a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1f28e:	260c      	movs	r6, #12
   1f290:	fb06 3401 	mla	r4, r6, r1, r3
   1f294:	6ca4      	ldr	r4, [r4, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1f296:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   1f29a:	d008      	beq.n	1f2ae <stop+0x52>
   1f29c:	42a2      	cmp	r2, r4
   1f29e:	d006      	beq.n	1f2ae <stop+0x52>
	__asm__ volatile(
   1f2a0:	f385 8811 	msr	BASEPRI, r5
   1f2a4:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   1f2a8:	f04f 30ff 	mov.w	r0, #4294967295
}
   1f2ac:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1f2ae:	2201      	movs	r2, #1
   1f2b0:	4371      	muls	r1, r6
   1f2b2:	440b      	add	r3, r1
   1f2b4:	649a      	str	r2, [r3, #72]	; 0x48
   1f2b6:	f385 8811 	msr	BASEPRI, r5
   1f2ba:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   1f2be:	6843      	ldr	r3, [r0, #4]
   1f2c0:	440b      	add	r3, r1
   1f2c2:	685b      	ldr	r3, [r3, #4]
   1f2c4:	4798      	blx	r3
	return 0;
   1f2c6:	2000      	movs	r0, #0
   1f2c8:	e7f0      	b.n	1f2ac <stop+0x50>
   1f2ca:	bf00      	nop
   1f2cc:	0003dfc5 	.word	0x0003dfc5
   1f2d0:	00039995 	.word	0x00039995
   1f2d4:	0003df88 	.word	0x0003df88

0001f2d8 <onoff_stop>:
{
   1f2d8:	b570      	push	{r4, r5, r6, lr}
   1f2da:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   1f2dc:	4906      	ldr	r1, [pc, #24]	; (1f2f8 <onoff_stop+0x20>)
{
   1f2de:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
   1f2e0:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1f2e2:	1149      	asrs	r1, r1, #5
   1f2e4:	2240      	movs	r2, #64	; 0x40
   1f2e6:	4805      	ldr	r0, [pc, #20]	; (1f2fc <onoff_stop+0x24>)
   1f2e8:	f7ff ffb8 	bl	1f25c <stop>
	notify(mgr, res);
   1f2ec:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1f2ee:	4601      	mov	r1, r0
	notify(mgr, res);
   1f2f0:	4620      	mov	r0, r4
}
   1f2f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1f2f6:	4718      	bx	r3
   1f2f8:	2000e7fc 	.word	0x2000e7fc
   1f2fc:	00037504 	.word	0x00037504

0001f300 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   1f300:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1f302:	2200      	movs	r2, #0
   1f304:	2101      	movs	r1, #1
{
   1f306:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1f308:	2005      	movs	r0, #5
   1f30a:	f7f3 f949 	bl	125a0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1f30e:	480f      	ldr	r0, [pc, #60]	; (1f34c <clk_init+0x4c>)
   1f310:	f006 fba2 	bl	25a58 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1f314:	4b0e      	ldr	r3, [pc, #56]	; (1f350 <clk_init+0x50>)
   1f316:	4298      	cmp	r0, r3
   1f318:	d115      	bne.n	1f346 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1f31a:	f006 fbc1 	bl	25aa0 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   1f31e:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   1f320:	490c      	ldr	r1, [pc, #48]	; (1f354 <clk_init+0x54>)
   1f322:	4630      	mov	r0, r6
   1f324:	f010 f809 	bl	2f33a <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   1f328:	2800      	cmp	r0, #0
   1f32a:	db0b      	blt.n	1f344 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1f32c:	2501      	movs	r5, #1
   1f32e:	64b5      	str	r5, [r6, #72]	; 0x48
	struct nrf_clock_control_data *data = dev->data;
   1f330:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1f332:	4908      	ldr	r1, [pc, #32]	; (1f354 <clk_init+0x54>)
   1f334:	f104 0020 	add.w	r0, r4, #32
   1f338:	f00f ffff 	bl	2f33a <onoff_manager_init>
		if (err < 0) {
   1f33c:	2800      	cmp	r0, #0
   1f33e:	db01      	blt.n	1f344 <clk_init+0x44>
	}

	return 0;
   1f340:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1f342:	6565      	str	r5, [r4, #84]	; 0x54
}
   1f344:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1f346:	f06f 0004 	mvn.w	r0, #4
   1f34a:	e7fb      	b.n	1f344 <clk_init+0x44>
   1f34c:	0001f38d 	.word	0x0001f38d
   1f350:	0bad0000 	.word	0x0bad0000
   1f354:	00038420 	.word	0x00038420

0001f358 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   1f358:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1f35a:	230c      	movs	r3, #12
	sub_data->cb = NULL;
   1f35c:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
   1f35e:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   1f360:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   1f362:	4808      	ldr	r0, [pc, #32]	; (1f384 <clkstarted_handle.constprop.0+0x2c>)
   1f364:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   1f366:	3348      	adds	r3, #72	; 0x48
   1f368:	4418      	add	r0, r3
	void *user_data = sub_data->user_data;
   1f36a:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
   1f36e:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   1f370:	f014 fd11 	bl	33d96 <set_on_state>
	if (callback) {
   1f374:	b12d      	cbz	r5, 1f382 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1f376:	4632      	mov	r2, r6
   1f378:	462b      	mov	r3, r5
}
   1f37a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1f37e:	4802      	ldr	r0, [pc, #8]	; (1f388 <clkstarted_handle.constprop.0+0x30>)
   1f380:	4718      	bx	r3
}
   1f382:	bd70      	pop	{r4, r5, r6, pc}
   1f384:	2000e7fc 	.word	0x2000e7fc
   1f388:	00037504 	.word	0x00037504

0001f38c <clock_event_handler>:
	switch (event) {
   1f38c:	2801      	cmp	r0, #1
{
   1f38e:	b508      	push	{r3, lr}
	switch (event) {
   1f390:	d006      	beq.n	1f3a0 <clock_event_handler+0x14>
   1f392:	2803      	cmp	r0, #3
   1f394:	d008      	beq.n	1f3a8 <clock_event_handler+0x1c>
   1f396:	b998      	cbnz	r0, 1f3c0 <clock_event_handler+0x34>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1f398:	4b0f      	ldr	r3, [pc, #60]	; (1f3d8 <clock_event_handler+0x4c>)
   1f39a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1f39c:	075b      	lsls	r3, r3, #29
   1f39e:	d119      	bne.n	1f3d4 <clock_event_handler+0x48>
}
   1f3a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1f3a4:	f7ff bfd8 	b.w	1f358 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
   1f3a8:	490c      	ldr	r1, [pc, #48]	; (1f3dc <clock_event_handler+0x50>)
   1f3aa:	f240 236e 	movw	r3, #622	; 0x26e
   1f3ae:	4a0c      	ldr	r2, [pc, #48]	; (1f3e0 <clock_event_handler+0x54>)
   1f3b0:	480c      	ldr	r0, [pc, #48]	; (1f3e4 <clock_event_handler+0x58>)
   1f3b2:	f010 f807 	bl	2f3c4 <assert_print>
   1f3b6:	f240 216e 	movw	r1, #622	; 0x26e
		__ASSERT_NO_MSG(0);
   1f3ba:	4809      	ldr	r0, [pc, #36]	; (1f3e0 <clock_event_handler+0x54>)
   1f3bc:	f00f fffb 	bl	2f3b6 <assert_post_action>
   1f3c0:	4906      	ldr	r1, [pc, #24]	; (1f3dc <clock_event_handler+0x50>)
   1f3c2:	f240 2372 	movw	r3, #626	; 0x272
   1f3c6:	4a06      	ldr	r2, [pc, #24]	; (1f3e0 <clock_event_handler+0x54>)
   1f3c8:	4806      	ldr	r0, [pc, #24]	; (1f3e4 <clock_event_handler+0x58>)
   1f3ca:	f00f fffb 	bl	2f3c4 <assert_print>
   1f3ce:	f240 2172 	movw	r1, #626	; 0x272
   1f3d2:	e7f2      	b.n	1f3ba <clock_event_handler+0x2e>
}
   1f3d4:	bd08      	pop	{r3, pc}
   1f3d6:	bf00      	nop
   1f3d8:	2000e7fc 	.word	0x2000e7fc
   1f3dc:	0003ea9e 	.word	0x0003ea9e
   1f3e0:	0003df88 	.word	0x0003df88
   1f3e4:	00039995 	.word	0x00039995

0001f3e8 <generic_hfclk_start>:
{
   1f3e8:	b508      	push	{r3, lr}
	__asm__ volatile(
   1f3ea:	f04f 0320 	mov.w	r3, #32
   1f3ee:	f3ef 8111 	mrs	r1, BASEPRI
   1f3f2:	f383 8812 	msr	BASEPRI_MAX, r3
   1f3f6:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1f3fa:	4a11      	ldr	r2, [pc, #68]	; (1f440 <generic_hfclk_start+0x58>)
   1f3fc:	6813      	ldr	r3, [r2, #0]
   1f3fe:	f043 0002 	orr.w	r0, r3, #2
   1f402:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1f404:	07da      	lsls	r2, r3, #31
   1f406:	d408      	bmi.n	1f41a <generic_hfclk_start+0x32>
	__asm__ volatile(
   1f408:	f381 8811 	msr	BASEPRI, r1
   1f40c:	f3bf 8f6f 	isb	sy
}
   1f410:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1f414:	2001      	movs	r0, #1
   1f416:	f006 bb69 	b.w	25aec <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1f41a:	4b0a      	ldr	r3, [pc, #40]	; (1f444 <generic_hfclk_start+0x5c>)
   1f41c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1f420:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1f424:	07d3      	lsls	r3, r2, #31
   1f426:	d5ef      	bpl.n	1f408 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   1f428:	4807      	ldr	r0, [pc, #28]	; (1f448 <generic_hfclk_start+0x60>)
   1f42a:	f014 fcb4 	bl	33d96 <set_on_state>
   1f42e:	f381 8811 	msr	BASEPRI, r1
   1f432:	f3bf 8f6f 	isb	sy
}
   1f436:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1f43a:	2000      	movs	r0, #0
   1f43c:	f7ff bf8c 	b.w	1f358 <clkstarted_handle.constprop.0>
   1f440:	2000e854 	.word	0x2000e854
   1f444:	40005000 	.word	0x40005000
   1f448:	2000e844 	.word	0x2000e844

0001f44c <api_blocking_start>:
{
   1f44c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1f44e:	2200      	movs	r2, #0
   1f450:	2301      	movs	r3, #1
   1f452:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1f456:	ab04      	add	r3, sp, #16
   1f458:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1f45c:	4a09      	ldr	r2, [pc, #36]	; (1f484 <api_blocking_start+0x38>)
   1f45e:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1f460:	f8cd d000 	str.w	sp, [sp]
   1f464:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1f468:	f014 fcd6 	bl	33e18 <api_start>
	if (err < 0) {
   1f46c:	2800      	cmp	r0, #0
   1f46e:	db05      	blt.n	1f47c <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1f470:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1f474:	2300      	movs	r3, #0
   1f476:	4668      	mov	r0, sp
   1f478:	f00a f95a 	bl	29730 <z_impl_k_sem_take>
}
   1f47c:	b007      	add	sp, #28
   1f47e:	f85d fb04 	ldr.w	pc, [sp], #4
   1f482:	bf00      	nop
   1f484:	00033e3f 	.word	0x00033e3f

0001f488 <generic_hfclk_stop>:
{
   1f488:	b510      	push	{r4, lr}
	__asm__ volatile(
   1f48a:	f04f 0320 	mov.w	r3, #32
   1f48e:	f3ef 8411 	mrs	r4, BASEPRI
   1f492:	f383 8812 	msr	BASEPRI_MAX, r3
   1f496:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   1f49a:	4a07      	ldr	r2, [pc, #28]	; (1f4b8 <generic_hfclk_stop+0x30>)
   1f49c:	6813      	ldr	r3, [r2, #0]
   1f49e:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
   1f4a2:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
   1f4a4:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   1f4a6:	d402      	bmi.n	1f4ae <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1f4a8:	2001      	movs	r0, #1
   1f4aa:	f006 fb81 	bl	25bb0 <nrfx_clock_stop>
	__asm__ volatile(
   1f4ae:	f384 8811 	msr	BASEPRI, r4
   1f4b2:	f3bf 8f6f 	isb	sy
}
   1f4b6:	bd10      	pop	{r4, pc}
   1f4b8:	2000e854 	.word	0x2000e854

0001f4bc <z_nrf_clock_control_get_onoff>:
}
   1f4bc:	4b02      	ldr	r3, [pc, #8]	; (1f4c8 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
   1f4be:	b2c0      	uxtb	r0, r0
}
   1f4c0:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1f4c4:	4770      	bx	lr
   1f4c6:	bf00      	nop
   1f4c8:	2000e7fc 	.word	0x2000e7fc

0001f4cc <z_nrf_clock_control_lf_on>:
{
   1f4cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1f4d0:	2201      	movs	r2, #1
   1f4d2:	4606      	mov	r6, r0
   1f4d4:	4941      	ldr	r1, [pc, #260]	; (1f5dc <z_nrf_clock_control_lf_on+0x110>)
   1f4d6:	e8d1 3fef 	ldaex	r3, [r1]
   1f4da:	e8c1 2fe0 	stlex	r0, r2, [r1]
   1f4de:	2800      	cmp	r0, #0
   1f4e0:	d1f9      	bne.n	1f4d6 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   1f4e2:	b9a3      	cbnz	r3, 1f50e <z_nrf_clock_control_lf_on+0x42>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1f4e4:	493e      	ldr	r1, [pc, #248]	; (1f5e0 <z_nrf_clock_control_lf_on+0x114>)
		err = onoff_request(mgr, &cli);
   1f4e6:	483f      	ldr	r0, [pc, #252]	; (1f5e4 <z_nrf_clock_control_lf_on+0x118>)
   1f4e8:	604b      	str	r3, [r1, #4]
   1f4ea:	60cb      	str	r3, [r1, #12]
   1f4ec:	608a      	str	r2, [r1, #8]
   1f4ee:	f7ee ffb3 	bl	e458 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   1f4f2:	2800      	cmp	r0, #0
   1f4f4:	da0b      	bge.n	1f50e <z_nrf_clock_control_lf_on+0x42>
   1f4f6:	493c      	ldr	r1, [pc, #240]	; (1f5e8 <z_nrf_clock_control_lf_on+0x11c>)
   1f4f8:	f44f 730c 	mov.w	r3, #560	; 0x230
   1f4fc:	4a3b      	ldr	r2, [pc, #236]	; (1f5ec <z_nrf_clock_control_lf_on+0x120>)
   1f4fe:	483c      	ldr	r0, [pc, #240]	; (1f5f0 <z_nrf_clock_control_lf_on+0x124>)
   1f500:	f00f ff60 	bl	2f3c4 <assert_print>
   1f504:	f44f 710c 	mov.w	r1, #560	; 0x230
		__ASSERT_NO_MSG(false);
   1f508:	4838      	ldr	r0, [pc, #224]	; (1f5ec <z_nrf_clock_control_lf_on+0x120>)
   1f50a:	f00f ff54 	bl	2f3b6 <assert_post_action>
	switch (start_mode) {
   1f50e:	b35e      	cbz	r6, 1f568 <z_nrf_clock_control_lf_on+0x9c>
   1f510:	1e73      	subs	r3, r6, #1
   1f512:	2b01      	cmp	r3, #1
   1f514:	d858      	bhi.n	1f5c8 <z_nrf_clock_control_lf_on+0xfc>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1f516:	2e01      	cmp	r6, #1
   1f518:	d106      	bne.n	1f528 <z_nrf_clock_control_lf_on+0x5c>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1f51a:	4b36      	ldr	r3, [pc, #216]	; (1f5f4 <z_nrf_clock_control_lf_on+0x128>)
   1f51c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1f520:	f003 0303 	and.w	r3, r3, #3
   1f524:	2b02      	cmp	r3, #2
   1f526:	d01f      	beq.n	1f568 <z_nrf_clock_control_lf_on+0x9c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1f528:	f016 fdcd 	bl	360c6 <k_is_in_isr>
   1f52c:	4605      	mov	r5, r0
   1f52e:	b9e8      	cbnz	r0, 1f56c <z_nrf_clock_control_lf_on+0xa0>
	return !z_sys_post_kernel;
   1f530:	4b31      	ldr	r3, [pc, #196]	; (1f5f8 <z_nrf_clock_control_lf_on+0x12c>)
   1f532:	781b      	ldrb	r3, [r3, #0]
   1f534:	b1d3      	cbz	r3, 1f56c <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENCLR = mask;
   1f536:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
   1f538:	4607      	mov	r7, r0
   1f53a:	4b2e      	ldr	r3, [pc, #184]	; (1f5f4 <z_nrf_clock_control_lf_on+0x128>)
   1f53c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1f540:	4c2c      	ldr	r4, [pc, #176]	; (1f5f4 <z_nrf_clock_control_lf_on+0x128>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1f542:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 1f5fc <z_nrf_clock_control_lf_on+0x130>
   1f546:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1f54a:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   1f54e:	03d2      	lsls	r2, r2, #15
   1f550:	d516      	bpl.n	1f580 <z_nrf_clock_control_lf_on+0xb4>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1f552:	f003 0303 	and.w	r3, r3, #3
   1f556:	2b02      	cmp	r3, #2
   1f558:	d001      	beq.n	1f55e <z_nrf_clock_control_lf_on+0x92>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1f55a:	2e01      	cmp	r6, #1
   1f55c:	d110      	bne.n	1f580 <z_nrf_clock_control_lf_on+0xb4>
	if (isr_mode) {
   1f55e:	b375      	cbz	r5, 1f5be <z_nrf_clock_control_lf_on+0xf2>
   1f560:	f387 8811 	msr	BASEPRI, r7
   1f564:	f3bf 8f6f 	isb	sy
}
   1f568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1f56c:	f04f 0320 	mov.w	r3, #32
   1f570:	f3ef 8711 	mrs	r7, BASEPRI
   1f574:	f383 8812 	msr	BASEPRI_MAX, r3
   1f578:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1f57c:	2501      	movs	r5, #1
   1f57e:	e7df      	b.n	1f540 <z_nrf_clock_control_lf_on+0x74>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1f580:	b1c5      	cbz	r5, 1f5b4 <z_nrf_clock_control_lf_on+0xe8>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1f582:	4638      	mov	r0, r7
   1f584:	f7f2 ff6a 	bl	1245c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1f588:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1f58c:	b2db      	uxtb	r3, r3
   1f58e:	2b01      	cmp	r3, #1
   1f590:	d1d9      	bne.n	1f546 <z_nrf_clock_control_lf_on+0x7a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1f592:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   1f596:	2a00      	cmp	r2, #0
   1f598:	d0d5      	beq.n	1f546 <z_nrf_clock_control_lf_on+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f59a:	2200      	movs	r2, #0
   1f59c:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1f5a0:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   1f5a4:	2202      	movs	r2, #2
   1f5a6:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
   1f5aa:	2220      	movs	r2, #32
   1f5ac:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f5b0:	60a3      	str	r3, [r4, #8]
}
   1f5b2:	e7c8      	b.n	1f546 <z_nrf_clock_control_lf_on+0x7a>
	return z_impl_k_sleep(timeout);
   1f5b4:	2100      	movs	r1, #0
   1f5b6:	2021      	movs	r0, #33	; 0x21
   1f5b8:	f00b fec8 	bl	2b34c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1f5bc:	e7e4      	b.n	1f588 <z_nrf_clock_control_lf_on+0xbc>
    p_reg->INTENSET = mask;
   1f5be:	2202      	movs	r2, #2
   1f5c0:	4b0c      	ldr	r3, [pc, #48]	; (1f5f4 <z_nrf_clock_control_lf_on+0x128>)
   1f5c2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1f5c6:	e7cf      	b.n	1f568 <z_nrf_clock_control_lf_on+0x9c>
		__ASSERT_NO_MSG(false);
   1f5c8:	490d      	ldr	r1, [pc, #52]	; (1f600 <z_nrf_clock_control_lf_on+0x134>)
   1f5ca:	f240 2342 	movw	r3, #578	; 0x242
   1f5ce:	4a07      	ldr	r2, [pc, #28]	; (1f5ec <z_nrf_clock_control_lf_on+0x120>)
   1f5d0:	4807      	ldr	r0, [pc, #28]	; (1f5f0 <z_nrf_clock_control_lf_on+0x124>)
   1f5d2:	f00f fef7 	bl	2f3c4 <assert_print>
   1f5d6:	f240 2142 	movw	r1, #578	; 0x242
   1f5da:	e795      	b.n	1f508 <z_nrf_clock_control_lf_on+0x3c>
   1f5dc:	2000e7f8 	.word	0x2000e7f8
   1f5e0:	2000e7e8 	.word	0x2000e7e8
   1f5e4:	2000e81c 	.word	0x2000e81c
   1f5e8:	0003a37c 	.word	0x0003a37c
   1f5ec:	0003df88 	.word	0x0003df88
   1f5f0:	00039995 	.word	0x00039995
   1f5f4:	40005000 	.word	0x40005000
   1f5f8:	20010782 	.word	0x20010782
   1f5fc:	e000e100 	.word	0xe000e100
   1f600:	0003ea9e 	.word	0x0003ea9e

0001f604 <uart_poll_out.constprop.0>:
static inline void uart_poll_out(const struct device * dev, unsigned char out_char)
   1f604:	4601      	mov	r1, r0
	api->poll_out(dev, out_char);
   1f606:	4802      	ldr	r0, [pc, #8]	; (1f610 <uart_poll_out.constprop.0+0xc>)
   1f608:	6883      	ldr	r3, [r0, #8]
   1f60a:	69db      	ldr	r3, [r3, #28]
   1f60c:	4718      	bx	r3
   1f60e:	bf00      	nop
   1f610:	0003757c 	.word	0x0003757c

0001f614 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
   1f614:	b538      	push	{r3, r4, r5, lr}
#ifdef CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS

	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
   1f616:	4b09      	ldr	r3, [pc, #36]	; (1f63c <console_out+0x28>)
   1f618:	b2c5      	uxtb	r5, r0
{
   1f61a:	4604      	mov	r4, r0
	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
   1f61c:	681b      	ldr	r3, [r3, #0]
   1f61e:	4628      	mov	r0, r5
   1f620:	4798      	blx	r3

	if (handled_by_debug_server) {
   1f622:	2801      	cmp	r0, #1
   1f624:	d007      	beq.n	1f636 <console_out+0x22>
			 */
			return c;
		}
	}

	if ('\n' == c) {
   1f626:	2c0a      	cmp	r4, #10
   1f628:	d102      	bne.n	1f630 <console_out+0x1c>
		uart_poll_out(uart_console_dev, '\r');
   1f62a:	200d      	movs	r0, #13
   1f62c:	f7ff ffea 	bl	1f604 <uart_poll_out.constprop.0>
	}
	uart_poll_out(uart_console_dev, c);
   1f630:	4628      	mov	r0, r5
   1f632:	f7ff ffe7 	bl	1f604 <uart_poll_out.constprop.0>
		/* As errors cannot be returned, ignore the return value */
		(void)pm_device_runtime_put(uart_console_dev);
	}

	return c;
}
   1f636:	4620      	mov	r0, r4
   1f638:	bd38      	pop	{r3, r4, r5, pc}
   1f63a:	bf00      	nop
   1f63c:	2000c980 	.word	0x2000c980

0001f640 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
   1f640:	b508      	push	{r3, lr}
   1f642:	4807      	ldr	r0, [pc, #28]	; (1f660 <uart_console_init+0x20>)
   1f644:	f016 fd08 	bl	36058 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
   1f648:	b138      	cbz	r0, 1f65a <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   1f64a:	4806      	ldr	r0, [pc, #24]	; (1f664 <uart_console_init+0x24>)
   1f64c:	f7f3 fef8 	bl	13440 <__stdout_hook_install>
	__printk_hook_install(console_out);
   1f650:	4804      	ldr	r0, [pc, #16]	; (1f664 <uart_console_init+0x24>)
   1f652:	f7ee fb89 	bl	dd68 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   1f656:	2000      	movs	r0, #0
}
   1f658:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1f65a:	f06f 0012 	mvn.w	r0, #18
   1f65e:	e7fb      	b.n	1f658 <uart_console_init+0x18>
   1f660:	0003757c 	.word	0x0003757c
   1f664:	0001f615 	.word	0x0001f615

0001f668 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   1f668:	4b02      	ldr	r3, [pc, #8]	; (1f674 <flash_nrf_pages_layout+0xc>)
   1f66a:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1f66c:	2301      	movs	r3, #1
   1f66e:	6013      	str	r3, [r2, #0]
}
   1f670:	4770      	bx	lr
   1f672:	bf00      	nop
   1f674:	2000e858 	.word	0x2000e858

0001f678 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   1f678:	4800      	ldr	r0, [pc, #0]	; (1f67c <flash_nrf_get_parameters+0x4>)
   1f67a:	4770      	bx	lr
   1f67c:	00038484 	.word	0x00038484

0001f680 <flash_nrf_read>:
{
   1f680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f684:	460d      	mov	r5, r1
   1f686:	af00      	add	r7, sp, #0
	if (is_regular_addr_valid(addr, len)) {
   1f688:	4619      	mov	r1, r3
   1f68a:	4628      	mov	r0, r5
{
   1f68c:	461e      	mov	r6, r3
   1f68e:	4614      	mov	r4, r2
	if (is_regular_addr_valid(addr, len)) {
   1f690:	f014 fc00 	bl	33e94 <is_regular_addr_valid>
   1f694:	4603      	mov	r3, r0
   1f696:	b9a8      	cbnz	r0, 1f6c4 <flash_nrf_read+0x44>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1f698:	46e8      	mov	r8, sp
   1f69a:	b088      	sub	sp, #32
   1f69c:	466c      	mov	r4, sp
   1f69e:	4a10      	ldr	r2, [pc, #64]	; (1f6e0 <flash_nrf_read+0x60>)
   1f6a0:	2104      	movs	r1, #4
   1f6a2:	e9c4 2505 	strd	r2, r5, [r4, #20]
   1f6a6:	4622      	mov	r2, r4
   1f6a8:	61e6      	str	r6, [r4, #28]
   1f6aa:	f842 1f10 	str.w	r1, [r2, #16]!
   1f6ae:	480d      	ldr	r0, [pc, #52]	; (1f6e4 <flash_nrf_read+0x64>)
   1f6b0:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1f6b4:	f7f0 fdbe 	bl	10234 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   1f6b8:	f06f 0015 	mvn.w	r0, #21
   1f6bc:	46c5      	mov	sp, r8
}
   1f6be:	46bd      	mov	sp, r7
   1f6c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!len) {
   1f6c4:	b156      	cbz	r6, 1f6dc <flash_nrf_read+0x5c>
	if (addr < PM_APP_ADDRESS) {
   1f6c6:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
		return soc_secure_mem_read(data, (void *)addr, len);
   1f6ca:	4632      	mov	r2, r6
   1f6cc:	4629      	mov	r1, r5
   1f6ce:	4620      	mov	r0, r4
	if (addr < PM_APP_ADDRESS) {
   1f6d0:	da02      	bge.n	1f6d8 <flash_nrf_read+0x58>
		return soc_secure_mem_read(data, (void *)addr, len);
   1f6d2:	f00f ffa0 	bl	2f616 <soc_secure_mem_read>
   1f6d6:	e7f2      	b.n	1f6be <flash_nrf_read+0x3e>
   1f6d8:	f016 ff26 	bl	36528 <memcpy>
		return 0;
   1f6dc:	2000      	movs	r0, #0
   1f6de:	e7ee      	b.n	1f6be <flash_nrf_read+0x3e>
   1f6e0:	0003e025 	.word	0x0003e025
   1f6e4:	00037958 	.word	0x00037958

0001f6e8 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   1f6e8:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1f6ea:	2201      	movs	r2, #1
   1f6ec:	4806      	ldr	r0, [pc, #24]	; (1f708 <nrf_flash_init+0x20>)
   1f6ee:	4611      	mov	r1, r2
   1f6f0:	f016 fd3e 	bl	36170 <z_impl_k_sem_init>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1f6f4:	f015 fe05 	bl	35302 <nrfx_nvmc_flash_page_count_get>
   1f6f8:	4c04      	ldr	r4, [pc, #16]	; (1f70c <nrf_flash_init+0x24>)
   1f6fa:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   1f6fc:	f015 fdfe 	bl	352fc <nrfx_nvmc_flash_page_size_get>
   1f700:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   1f702:	2000      	movs	r0, #0
   1f704:	bd10      	pop	{r4, pc}
   1f706:	bf00      	nop
   1f708:	2000e860 	.word	0x2000e860
   1f70c:	2000e858 	.word	0x2000e858

0001f710 <flash_nrf_erase>:
{
   1f710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f714:	af00      	add	r7, sp, #0
   1f716:	460e      	mov	r6, r1
   1f718:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1f71a:	f015 fdef 	bl	352fc <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   1f71e:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1f720:	4605      	mov	r5, r0
	if (is_regular_addr_valid(addr, size)) {
   1f722:	4630      	mov	r0, r6
   1f724:	f014 fbb6 	bl	33e94 <is_regular_addr_valid>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1f728:	46b0      	mov	r8, r6
	if (is_regular_addr_valid(addr, size)) {
   1f72a:	4603      	mov	r3, r0
   1f72c:	b3b8      	cbz	r0, 1f79e <flash_nrf_erase+0x8e>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1f72e:	fbb6 f3f5 	udiv	r3, r6, r5
   1f732:	fb05 6313 	mls	r3, r5, r3, r6
   1f736:	b923      	cbnz	r3, 1f742 <flash_nrf_erase+0x32>
   1f738:	fbb4 f3f5 	udiv	r3, r4, r5
   1f73c:	fb05 4313 	mls	r3, r5, r3, r4
   1f740:	b19b      	cbz	r3, 1f76a <flash_nrf_erase+0x5a>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   1f742:	466d      	mov	r5, sp
   1f744:	b088      	sub	sp, #32
   1f746:	466a      	mov	r2, sp
   1f748:	4b1a      	ldr	r3, [pc, #104]	; (1f7b4 <flash_nrf_erase+0xa4>)
   1f74a:	61d4      	str	r4, [r2, #28]
   1f74c:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1f750:	2304      	movs	r3, #4
   1f752:	f842 3f10 	str.w	r3, [r2, #16]!
   1f756:	2300      	movs	r3, #0
   1f758:	4817      	ldr	r0, [pc, #92]	; (1f7b8 <flash_nrf_erase+0xa8>)
   1f75a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1f75e:	f7f0 fd69 	bl	10234 <z_impl_z_log_msg_static_create>
			return -EINVAL;
   1f762:	f06f 0015 	mvn.w	r0, #21
   1f766:	46ad      	mov	sp, r5
		return -EINVAL;
   1f768:	e002      	b.n	1f770 <flash_nrf_erase+0x60>
		if (!n_pages) {
   1f76a:	42a5      	cmp	r5, r4
   1f76c:	d903      	bls.n	1f776 <flash_nrf_erase+0x66>
			return 0;
   1f76e:	2000      	movs	r0, #0
}
   1f770:	46bd      	mov	sp, r7
   1f772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_sem_take(sem, timeout);
   1f776:	f04f 32ff 	mov.w	r2, #4294967295
   1f77a:	f04f 33ff 	mov.w	r3, #4294967295
   1f77e:	480f      	ldr	r0, [pc, #60]	; (1f7bc <flash_nrf_erase+0xac>)
   1f780:	f009 ffd6 	bl	29730 <z_impl_k_sem_take>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1f784:	f015 fdba 	bl	352fc <nrfx_nvmc_flash_page_size_get>
   1f788:	4605      	mov	r5, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   1f78a:	4640      	mov	r0, r8
   1f78c:	f006 ff88 	bl	266a0 <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
   1f790:	1b64      	subs	r4, r4, r5
   1f792:	44a8      	add	r8, r5
   1f794:	d1f9      	bne.n	1f78a <flash_nrf_erase+0x7a>
	z_impl_k_sem_give(sem);
   1f796:	4809      	ldr	r0, [pc, #36]	; (1f7bc <flash_nrf_erase+0xac>)
   1f798:	f009 ff86 	bl	296a8 <z_impl_k_sem_give>
}
   1f79c:	e7e7      	b.n	1f76e <flash_nrf_erase+0x5e>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1f79e:	466d      	mov	r5, sp
   1f7a0:	b088      	sub	sp, #32
   1f7a2:	466a      	mov	r2, sp
   1f7a4:	4906      	ldr	r1, [pc, #24]	; (1f7c0 <flash_nrf_erase+0xb0>)
   1f7a6:	61d4      	str	r4, [r2, #28]
   1f7a8:	e9c2 1605 	strd	r1, r6, [r2, #20]
   1f7ac:	2104      	movs	r1, #4
   1f7ae:	f842 1f10 	str.w	r1, [r2, #16]!
	compiler_barrier();
   1f7b2:	e7d1      	b.n	1f758 <flash_nrf_erase+0x48>
   1f7b4:	0003e042 	.word	0x0003e042
   1f7b8:	00037958 	.word	0x00037958
   1f7bc:	2000e860 	.word	0x2000e860
   1f7c0:	0003e025 	.word	0x0003e025

0001f7c4 <flash_nrf_write>:
{
   1f7c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f7c8:	460e      	mov	r6, r1
   1f7ca:	af00      	add	r7, sp, #0
	if (is_regular_addr_valid(addr, len)) {
   1f7cc:	4619      	mov	r1, r3
   1f7ce:	4630      	mov	r0, r6
{
   1f7d0:	461c      	mov	r4, r3
   1f7d2:	4690      	mov	r8, r2
	if (is_regular_addr_valid(addr, len)) {
   1f7d4:	f014 fb5e 	bl	33e94 <is_regular_addr_valid>
   1f7d8:	4603      	mov	r3, r0
   1f7da:	b9a0      	cbnz	r0, 1f806 <flash_nrf_write+0x42>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1f7dc:	466d      	mov	r5, sp
   1f7de:	b088      	sub	sp, #32
   1f7e0:	466a      	mov	r2, sp
   1f7e2:	4920      	ldr	r1, [pc, #128]	; (1f864 <flash_nrf_write+0xa0>)
   1f7e4:	61d4      	str	r4, [r2, #28]
   1f7e6:	e9c2 1605 	strd	r1, r6, [r2, #20]
   1f7ea:	2104      	movs	r1, #4
   1f7ec:	f842 1f10 	str.w	r1, [r2, #16]!
	z_impl_z_log_msg_static_create(source, desc, package, data);
   1f7f0:	481d      	ldr	r0, [pc, #116]	; (1f868 <flash_nrf_write+0xa4>)
   1f7f2:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1f7f6:	f7f0 fd1d 	bl	10234 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   1f7fa:	f06f 0015 	mvn.w	r0, #21
   1f7fe:	46ad      	mov	sp, r5
}
   1f800:	46bd      	mov	sp, r7
   1f802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   1f806:	ea46 0504 	orr.w	r5, r6, r4
   1f80a:	f015 0503 	ands.w	r5, r5, #3
   1f80e:	d00b      	beq.n	1f828 <flash_nrf_write+0x64>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1f810:	466d      	mov	r5, sp
   1f812:	b088      	sub	sp, #32
   1f814:	466a      	mov	r2, sp
   1f816:	4b15      	ldr	r3, [pc, #84]	; (1f86c <flash_nrf_write+0xa8>)
   1f818:	61d4      	str	r4, [r2, #28]
   1f81a:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1f81e:	2304      	movs	r3, #4
   1f820:	f842 3f10 	str.w	r3, [r2, #16]!
   1f824:	2300      	movs	r3, #0
   1f826:	e7e3      	b.n	1f7f0 <flash_nrf_write+0x2c>
	if (!len) {
   1f828:	b1a4      	cbz	r4, 1f854 <flash_nrf_write+0x90>
	return z_impl_k_sem_take(sem, timeout);
   1f82a:	f04f 32ff 	mov.w	r2, #4294967295
   1f82e:	f04f 33ff 	mov.w	r3, #4294967295
   1f832:	480f      	ldr	r0, [pc, #60]	; (1f870 <flash_nrf_write+0xac>)
   1f834:	f009 ff7c 	bl	29730 <z_impl_k_sem_take>
	w_ctx->flash_addr += shift;
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
   1f838:	f024 0403 	bic.w	r4, r4, #3
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
   1f83c:	42a5      	cmp	r5, r4
   1f83e:	eb05 0006 	add.w	r0, r5, r6
   1f842:	d109      	bne.n	1f858 <flash_nrf_write+0x94>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1f844:	4a0b      	ldr	r2, [pc, #44]	; (1f874 <flash_nrf_write+0xb0>)
   1f846:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1f84a:	07db      	lsls	r3, r3, #31
   1f84c:	d5fb      	bpl.n	1f846 <flash_nrf_write+0x82>
	z_impl_k_sem_give(sem);
   1f84e:	4808      	ldr	r0, [pc, #32]	; (1f870 <flash_nrf_write+0xac>)
   1f850:	f009 ff2a 	bl	296a8 <z_impl_k_sem_give>
	return ret;
   1f854:	2000      	movs	r0, #0
   1f856:	e7d3      	b.n	1f800 <flash_nrf_write+0x3c>
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_word_write(w_ctx->flash_addr,
   1f858:	f858 1005 	ldr.w	r1, [r8, r5]
   1f85c:	f006 ff52 	bl	26704 <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
   1f860:	3504      	adds	r5, #4
}
   1f862:	e7eb      	b.n	1f83c <flash_nrf_write+0x78>
   1f864:	0003e025 	.word	0x0003e025
   1f868:	00037958 	.word	0x00037958
   1f86c:	0003e061 	.word	0x0003e061
   1f870:	2000e860 	.word	0x2000e860
   1f874:	40039000 	.word	0x40039000

0001f878 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   1f878:	b510      	push	{r4, lr}
	return port->data;
   1f87a:	6903      	ldr	r3, [r0, #16]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   1f87c:	b961      	cbnz	r1, 1f898 <gpio_nrfx_manage_callback+0x20>
   1f87e:	4920      	ldr	r1, [pc, #128]	; (1f900 <gpio_nrfx_manage_callback+0x88>)
   1f880:	232a      	movs	r3, #42	; 0x2a
   1f882:	4a20      	ldr	r2, [pc, #128]	; (1f904 <gpio_nrfx_manage_callback+0x8c>)
   1f884:	4820      	ldr	r0, [pc, #128]	; (1f908 <gpio_nrfx_manage_callback+0x90>)
   1f886:	f00f fd9d 	bl	2f3c4 <assert_print>
   1f88a:	4820      	ldr	r0, [pc, #128]	; (1f90c <gpio_nrfx_manage_callback+0x94>)
   1f88c:	f00f fd9a 	bl	2f3c4 <assert_print>
   1f890:	212a      	movs	r1, #42	; 0x2a
	__ASSERT(callback->handler, "No callback handler!");
   1f892:	481c      	ldr	r0, [pc, #112]	; (1f904 <gpio_nrfx_manage_callback+0x8c>)
   1f894:	f00f fd8f 	bl	2f3b6 <assert_post_action>
   1f898:	6848      	ldr	r0, [r1, #4]
   1f89a:	b950      	cbnz	r0, 1f8b2 <gpio_nrfx_manage_callback+0x3a>
   1f89c:	491c      	ldr	r1, [pc, #112]	; (1f910 <gpio_nrfx_manage_callback+0x98>)
   1f89e:	232b      	movs	r3, #43	; 0x2b
   1f8a0:	4a18      	ldr	r2, [pc, #96]	; (1f904 <gpio_nrfx_manage_callback+0x8c>)
   1f8a2:	4819      	ldr	r0, [pc, #100]	; (1f908 <gpio_nrfx_manage_callback+0x90>)
   1f8a4:	f00f fd8e 	bl	2f3c4 <assert_print>
   1f8a8:	481a      	ldr	r0, [pc, #104]	; (1f914 <gpio_nrfx_manage_callback+0x9c>)
   1f8aa:	f00f fd8b 	bl	2f3c4 <assert_print>
   1f8ae:	212b      	movs	r1, #43	; 0x2b
   1f8b0:	e7ef      	b.n	1f892 <gpio_nrfx_manage_callback+0x1a>
	return list->head;
   1f8b2:	6858      	ldr	r0, [r3, #4]

	if (!sys_slist_is_empty(callbacks)) {
   1f8b4:	b1f8      	cbz	r0, 1f8f6 <gpio_nrfx_manage_callback+0x7e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f8b6:	4288      	cmp	r0, r1
   1f8b8:	d119      	bne.n	1f8ee <gpio_nrfx_manage_callback+0x76>
Z_GENLIST_REMOVE(slist, snode)
   1f8ba:	689c      	ldr	r4, [r3, #8]
	return node->next;
   1f8bc:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   1f8be:	42a1      	cmp	r1, r4
	list->head = node;
   1f8c0:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1f8c2:	d100      	bne.n	1f8c6 <gpio_nrfx_manage_callback+0x4e>
	list->tail = node;
   1f8c4:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1f8c6:	2000      	movs	r0, #0
   1f8c8:	6008      	str	r0, [r1, #0]
		}
	} else if (!set) {
		return -EINVAL;
	}

	if (set) {
   1f8ca:	b12a      	cbz	r2, 1f8d8 <gpio_nrfx_manage_callback+0x60>
	return list->head;
   1f8cc:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1f8ce:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1f8d0:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1f8d2:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1f8d4:	b902      	cbnz	r2, 1f8d8 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   1f8d6:	6099      	str	r1, [r3, #8]
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1f8d8:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1f8da:	e010      	b.n	1f8fe <gpio_nrfx_manage_callback+0x86>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f8dc:	4281      	cmp	r1, r0
   1f8de:	d106      	bne.n	1f8ee <gpio_nrfx_manage_callback+0x76>
	return node->next;
   1f8e0:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   1f8e2:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1f8e4:	6898      	ldr	r0, [r3, #8]
   1f8e6:	4281      	cmp	r1, r0
   1f8e8:	d1ed      	bne.n	1f8c6 <gpio_nrfx_manage_callback+0x4e>
	list->tail = node;
   1f8ea:	609c      	str	r4, [r3, #8]
}
   1f8ec:	e7eb      	b.n	1f8c6 <gpio_nrfx_manage_callback+0x4e>
	return node->next;
   1f8ee:	4604      	mov	r4, r0
   1f8f0:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f8f2:	2800      	cmp	r0, #0
   1f8f4:	d1f2      	bne.n	1f8dc <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   1f8f6:	2a00      	cmp	r2, #0
   1f8f8:	d1e8      	bne.n	1f8cc <gpio_nrfx_manage_callback+0x54>
				return -EINVAL;
   1f8fa:	f06f 0015 	mvn.w	r0, #21
				     callback, set);
}
   1f8fe:	bd10      	pop	{r4, pc}
   1f900:	0003ee63 	.word	0x0003ee63
   1f904:	0003e0a0 	.word	0x0003e0a0
   1f908:	00039995 	.word	0x00039995
   1f90c:	0003e0dc 	.word	0x0003e0dc
   1f910:	0003e0eb 	.word	0x0003e0eb
   1f914:	0003e0fd 	.word	0x0003e0fd

0001f918 <gpio_nrfx_pin_interrupt_configure>:
{
   1f918:	b530      	push	{r4, r5, lr}
	return port->config;
   1f91a:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1f91c:	f001 041f 	and.w	r4, r1, #31
   1f920:	7b05      	ldrb	r5, [r0, #12]
	if (mode == GPIO_INT_MODE_DISABLED) {
   1f922:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   1f926:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1f928:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   1f92c:	d105      	bne.n	1f93a <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   1f92e:	4620      	mov	r0, r4
   1f930:	f006 fc74 	bl	2621c <nrfx_gpiote_trigger_disable>
		return 0;
   1f934:	2000      	movs	r0, #0
}
   1f936:	b005      	add	sp, #20
   1f938:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   1f93a:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   1f93c:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1f940:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   1f944:	d114      	bne.n	1f970 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1f946:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1f94a:	bf0c      	ite	eq
   1f94c:	2304      	moveq	r3, #4
   1f94e:	2305      	movne	r3, #5
   1f950:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1f954:	2300      	movs	r3, #0
   1f956:	4620      	mov	r0, r4
   1f958:	4619      	mov	r1, r3
   1f95a:	aa02      	add	r2, sp, #8
   1f95c:	f006 fa60 	bl	25e20 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1f960:	4b26      	ldr	r3, [pc, #152]	; (1f9fc <gpio_nrfx_pin_interrupt_configure+0xe4>)
   1f962:	4298      	cmp	r0, r3
   1f964:	d146      	bne.n	1f9f4 <gpio_nrfx_pin_interrupt_configure+0xdc>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1f966:	2101      	movs	r1, #1
   1f968:	4620      	mov	r0, r4
   1f96a:	f006 fbed 	bl	26148 <nrfx_gpiote_trigger_enable>
	return 0;
   1f96e:	e7e1      	b.n	1f934 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1f970:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   1f974:	d022      	beq.n	1f9bc <gpio_nrfx_pin_interrupt_configure+0xa4>
   1f976:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1f97a:	bf14      	ite	ne
   1f97c:	2301      	movne	r3, #1
   1f97e:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   1f980:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1f984:	6883      	ldr	r3, [r0, #8]
   1f986:	40cb      	lsrs	r3, r1
   1f988:	07d9      	lsls	r1, r3, #31
   1f98a:	d4e3      	bmi.n	1f954 <gpio_nrfx_pin_interrupt_configure+0x3c>
   1f98c:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   1f990:	d1e0      	bne.n	1f954 <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   1f992:	0963      	lsrs	r3, r4, #5
   1f994:	d106      	bne.n	1f9a4 <gpio_nrfx_pin_interrupt_configure+0x8c>
#endif
    }

    pin_number &= 0x1F;

    return (mask & (1UL << pin_number)) ? true : false;
   1f996:	f04f 32ff 	mov.w	r2, #4294967295
    pin_number &= 0x1F;
   1f99a:	f004 031f 	and.w	r3, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1f99e:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f9a0:	07d2      	lsls	r2, r2, #31
   1f9a2:	d40d      	bmi.n	1f9c0 <gpio_nrfx_pin_interrupt_configure+0xa8>
   1f9a4:	4916      	ldr	r1, [pc, #88]	; (1fa00 <gpio_nrfx_pin_interrupt_configure+0xe8>)
   1f9a6:	4817      	ldr	r0, [pc, #92]	; (1fa04 <gpio_nrfx_pin_interrupt_configure+0xec>)
   1f9a8:	f240 2347 	movw	r3, #583	; 0x247
   1f9ac:	4a16      	ldr	r2, [pc, #88]	; (1fa08 <gpio_nrfx_pin_interrupt_configure+0xf0>)
   1f9ae:	f00f fd09 	bl	2f3c4 <assert_print>
   1f9b2:	f240 2147 	movw	r1, #583	; 0x247
   1f9b6:	4814      	ldr	r0, [pc, #80]	; (1fa08 <gpio_nrfx_pin_interrupt_configure+0xf0>)
   1f9b8:	f00f fcfd 	bl	2f3b6 <assert_post_action>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1f9bc:	2303      	movs	r3, #3
   1f9be:	e7df      	b.n	1f980 <gpio_nrfx_pin_interrupt_configure+0x68>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1f9c0:	4a12      	ldr	r2, [pc, #72]	; (1fa0c <gpio_nrfx_pin_interrupt_configure+0xf4>)
   1f9c2:	3380      	adds	r3, #128	; 0x80
   1f9c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1f9c8:	07db      	lsls	r3, r3, #31
   1f9ca:	d4c3      	bmi.n	1f954 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1f9cc:	f10d 0507 	add.w	r5, sp, #7
   1f9d0:	4629      	mov	r1, r5
   1f9d2:	4620      	mov	r0, r4
   1f9d4:	f006 fb52 	bl	2607c <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1f9d8:	4b0d      	ldr	r3, [pc, #52]	; (1fa10 <gpio_nrfx_pin_interrupt_configure+0xf8>)
   1f9da:	4298      	cmp	r0, r3
   1f9dc:	d001      	beq.n	1f9e2 <gpio_nrfx_pin_interrupt_configure+0xca>
		trigger_config.p_in_channel = &ch;
   1f9de:	9503      	str	r5, [sp, #12]
   1f9e0:	e7b8      	b.n	1f954 <gpio_nrfx_pin_interrupt_configure+0x3c>
			err = nrfx_gpiote_channel_alloc(&ch);
   1f9e2:	4628      	mov	r0, r5
   1f9e4:	f006 fbaa 	bl	2613c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1f9e8:	4b04      	ldr	r3, [pc, #16]	; (1f9fc <gpio_nrfx_pin_interrupt_configure+0xe4>)
   1f9ea:	4298      	cmp	r0, r3
   1f9ec:	d0f7      	beq.n	1f9de <gpio_nrfx_pin_interrupt_configure+0xc6>
				return -ENOMEM;
   1f9ee:	f06f 000b 	mvn.w	r0, #11
   1f9f2:	e7a0      	b.n	1f936 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   1f9f4:	f06f 0015 	mvn.w	r0, #21
   1f9f8:	e79d      	b.n	1f936 <gpio_nrfx_pin_interrupt_configure+0x1e>
   1f9fa:	bf00      	nop
   1f9fc:	0bad0000 	.word	0x0bad0000
   1fa00:	0003e147 	.word	0x0003e147
   1fa04:	00039995 	.word	0x00039995
   1fa08:	0003e114 	.word	0x0003e114
   1fa0c:	40842500 	.word	0x40842500
   1fa10:	0bad0004 	.word	0x0bad0004

0001fa14 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1fa14:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1fa16:	f006 fb81 	bl	2611c <nrfx_gpiote_is_init>
   1fa1a:	4604      	mov	r4, r0
   1fa1c:	b968      	cbnz	r0, 1fa3a <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   1fa1e:	f006 fb55 	bl	260cc <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1fa22:	4b08      	ldr	r3, [pc, #32]	; (1fa44 <gpio_nrfx_init+0x30>)
   1fa24:	4298      	cmp	r0, r3
   1fa26:	d10a      	bne.n	1fa3e <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1fa28:	4621      	mov	r1, r4
   1fa2a:	4807      	ldr	r0, [pc, #28]	; (1fa48 <gpio_nrfx_init+0x34>)
   1fa2c:	f006 fb20 	bl	26070 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1fa30:	4622      	mov	r2, r4
   1fa32:	2101      	movs	r1, #1
   1fa34:	2031      	movs	r0, #49	; 0x31
   1fa36:	f7f2 fdb3 	bl	125a0 <z_arm_irq_priority_set>
		return 0;
   1fa3a:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1fa3c:	bd10      	pop	{r4, pc}
		return -EIO;
   1fa3e:	f06f 0004 	mvn.w	r0, #4
   1fa42:	e7fb      	b.n	1fa3c <gpio_nrfx_init+0x28>
   1fa44:	0bad0000 	.word	0x0bad0000
   1fa48:	0001fa4d 	.word	0x0001fa4d

0001fa4c <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1fa4c:	0943      	lsrs	r3, r0, #5
{
   1fa4e:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1fa50:	d107      	bne.n	1fa62 <nrfx_gpio_handler+0x16>
	return list->head;
   1fa52:	4b12      	ldr	r3, [pc, #72]	; (1fa9c <nrfx_gpio_handler+0x50>)
   1fa54:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1fa56:	b121      	cbz	r1, 1fa62 <nrfx_gpio_handler+0x16>
	gpio_fire_callbacks(list, port, BIT(pin));
   1fa58:	2501      	movs	r5, #1
	return node->next;
   1fa5a:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1fa5c:	4e10      	ldr	r6, [pc, #64]	; (1faa0 <nrfx_gpio_handler+0x54>)
   1fa5e:	4085      	lsls	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1fa60:	b901      	cbnz	r1, 1fa64 <nrfx_gpio_handler+0x18>
}
   1fa62:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
   1fa64:	688a      	ldr	r2, [r1, #8]
   1fa66:	402a      	ands	r2, r5
   1fa68:	d010      	beq.n	1fa8c <nrfx_gpio_handler+0x40>
			__ASSERT(cb->handler, "No callback handler!");
   1fa6a:	684b      	ldr	r3, [r1, #4]
   1fa6c:	b963      	cbnz	r3, 1fa88 <nrfx_gpio_handler+0x3c>
   1fa6e:	490d      	ldr	r1, [pc, #52]	; (1faa4 <nrfx_gpio_handler+0x58>)
   1fa70:	234d      	movs	r3, #77	; 0x4d
   1fa72:	4a0d      	ldr	r2, [pc, #52]	; (1faa8 <nrfx_gpio_handler+0x5c>)
   1fa74:	480d      	ldr	r0, [pc, #52]	; (1faac <nrfx_gpio_handler+0x60>)
   1fa76:	f00f fca5 	bl	2f3c4 <assert_print>
   1fa7a:	480d      	ldr	r0, [pc, #52]	; (1fab0 <nrfx_gpio_handler+0x64>)
   1fa7c:	f00f fca2 	bl	2f3c4 <assert_print>
   1fa80:	214d      	movs	r1, #77	; 0x4d
   1fa82:	4809      	ldr	r0, [pc, #36]	; (1faa8 <nrfx_gpio_handler+0x5c>)
   1fa84:	f00f fc97 	bl	2f3b6 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   1fa88:	4630      	mov	r0, r6
   1fa8a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1fa8c:	b11c      	cbz	r4, 1fa96 <nrfx_gpio_handler+0x4a>
   1fa8e:	6823      	ldr	r3, [r4, #0]
   1fa90:	4621      	mov	r1, r4
   1fa92:	461c      	mov	r4, r3
   1fa94:	e7e4      	b.n	1fa60 <nrfx_gpio_handler+0x14>
   1fa96:	4623      	mov	r3, r4
   1fa98:	e7fa      	b.n	1fa90 <nrfx_gpio_handler+0x44>
   1fa9a:	bf00      	nop
   1fa9c:	2000e878 	.word	0x2000e878
   1faa0:	0003751c 	.word	0x0003751c
   1faa4:	0003e16a 	.word	0x0003e16a
   1faa8:	0003e0a0 	.word	0x0003e0a0
   1faac:	00039995 	.word	0x00039995
   1fab0:	0003e0fd 	.word	0x0003e0fd

0001fab4 <gpio_nrfx_pin_configure>:
{
   1fab4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   1fab8:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1fabc:	f001 051f 	and.w	r5, r1, #31
   1fac0:	f898 300c 	ldrb.w	r3, [r8, #12]
{
   1fac4:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1fac6:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   1faca:	460f      	mov	r7, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1facc:	4628      	mov	r0, r5
   1face:	f10d 0103 	add.w	r1, sp, #3
   1fad2:	f006 fad3 	bl	2607c <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1fad6:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1fada:	4606      	mov	r6, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1fadc:	d115      	bne.n	1fb0a <gpio_nrfx_pin_configure+0x56>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   1fade:	4628      	mov	r0, r5
   1fae0:	f006 fbc6 	bl	26270 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   1fae4:	4b48      	ldr	r3, [pc, #288]	; (1fc08 <gpio_nrfx_pin_configure+0x154>)
   1fae6:	429e      	cmp	r6, r3
   1fae8:	d170      	bne.n	1fbcc <gpio_nrfx_pin_configure+0x118>
			err = nrfx_gpiote_channel_free(ch);
   1faea:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1faee:	f006 fb1f 	bl	26130 <nrfx_gpiote_channel_free>
			__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1faf2:	42b0      	cmp	r0, r6
   1faf4:	d06a      	beq.n	1fbcc <gpio_nrfx_pin_configure+0x118>
   1faf6:	4945      	ldr	r1, [pc, #276]	; (1fc0c <gpio_nrfx_pin_configure+0x158>)
   1faf8:	236a      	movs	r3, #106	; 0x6a
   1fafa:	4a45      	ldr	r2, [pc, #276]	; (1fc10 <gpio_nrfx_pin_configure+0x15c>)
   1fafc:	4845      	ldr	r0, [pc, #276]	; (1fc14 <gpio_nrfx_pin_configure+0x160>)
   1fafe:	f00f fc61 	bl	2f3c4 <assert_print>
   1fb02:	216a      	movs	r1, #106	; 0x6a
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1fb04:	4842      	ldr	r0, [pc, #264]	; (1fc10 <gpio_nrfx_pin_configure+0x15c>)
   1fb06:	f00f fc56 	bl	2f3b6 <assert_post_action>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1fb0a:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1fb0c:	4628      	mov	r0, r5
   1fb0e:	4619      	mov	r1, r3
   1fb10:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
   1fb12:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1fb16:	f006 f983 	bl	25e20 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1fb1a:	4b3b      	ldr	r3, [pc, #236]	; (1fc08 <gpio_nrfx_pin_configure+0x154>)
   1fb1c:	4298      	cmp	r0, r3
   1fb1e:	d004      	beq.n	1fb2a <gpio_nrfx_pin_configure+0x76>
		return NRF_GPIO_PIN_PULLUP;
   1fb20:	f06f 0015 	mvn.w	r0, #21
}
   1fb24:	b004      	add	sp, #16
   1fb26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   1fb2a:	4286      	cmp	r6, r0
   1fb2c:	d10d      	bne.n	1fb4a <gpio_nrfx_pin_configure+0x96>
		err = nrfx_gpiote_channel_free(ch);
   1fb2e:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1fb32:	f006 fafd 	bl	26130 <nrfx_gpiote_channel_free>
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1fb36:	42b0      	cmp	r0, r6
   1fb38:	d007      	beq.n	1fb4a <gpio_nrfx_pin_configure+0x96>
   1fb3a:	4934      	ldr	r1, [pc, #208]	; (1fc0c <gpio_nrfx_pin_configure+0x158>)
   1fb3c:	237c      	movs	r3, #124	; 0x7c
   1fb3e:	4a34      	ldr	r2, [pc, #208]	; (1fc10 <gpio_nrfx_pin_configure+0x15c>)
   1fb40:	4834      	ldr	r0, [pc, #208]	; (1fc14 <gpio_nrfx_pin_configure+0x160>)
   1fb42:	f00f fc3f 	bl	2f3c4 <assert_print>
   1fb46:	217c      	movs	r1, #124	; 0x7c
   1fb48:	e7dc      	b.n	1fb04 <gpio_nrfx_pin_configure+0x50>
	if (flags & GPIO_OUTPUT) {
   1fb4a:	03a6      	lsls	r6, r4, #14
   1fb4c:	d54c      	bpl.n	1fbe8 <gpio_nrfx_pin_configure+0x134>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1fb4e:	f240 3306 	movw	r3, #774	; 0x306
   1fb52:	4023      	ands	r3, r4
   1fb54:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   1fb58:	d019      	beq.n	1fb8e <gpio_nrfx_pin_configure+0xda>
   1fb5a:	d80c      	bhi.n	1fb76 <gpio_nrfx_pin_configure+0xc2>
   1fb5c:	2b06      	cmp	r3, #6
   1fb5e:	d017      	beq.n	1fb90 <gpio_nrfx_pin_configure+0xdc>
   1fb60:	d804      	bhi.n	1fb6c <gpio_nrfx_pin_configure+0xb8>
   1fb62:	b1ab      	cbz	r3, 1fb90 <gpio_nrfx_pin_configure+0xdc>
   1fb64:	2b02      	cmp	r3, #2
   1fb66:	d1db      	bne.n	1fb20 <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_D0S1;
   1fb68:	2304      	movs	r3, #4
   1fb6a:	e011      	b.n	1fb90 <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1fb6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1fb70:	d1d6      	bne.n	1fb20 <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_H0S1;
   1fb72:	2301      	movs	r3, #1
   1fb74:	e00c      	b.n	1fb90 <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1fb76:	f240 2202 	movw	r2, #514	; 0x202
   1fb7a:	4293      	cmp	r3, r2
   1fb7c:	d028      	beq.n	1fbd0 <gpio_nrfx_pin_configure+0x11c>
   1fb7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   1fb82:	d027      	beq.n	1fbd4 <gpio_nrfx_pin_configure+0x120>
   1fb84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1fb88:	d1ca      	bne.n	1fb20 <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_S0H1;
   1fb8a:	2302      	movs	r3, #2
   1fb8c:	e000      	b.n	1fb90 <gpio_nrfx_pin_configure+0xdc>
		*drive = NRF_GPIO_PIN_H0D1;
   1fb8e:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   1fb90:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1fb94:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   1fb98:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   1fb9c:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   1fb9e:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
   1fba2:	bf4c      	ite	mi
   1fba4:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
   1fba6:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1fbaa:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   1fbac:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1fbb0:	d512      	bpl.n	1fbd8 <gpio_nrfx_pin_configure+0x124>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1fbb2:	2301      	movs	r3, #1
   1fbb4:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1fbb8:	40bb      	lsls	r3, r7
    p_reg->OUTSET = set_mask;
   1fbba:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1fbbc:	2200      	movs	r2, #0
   1fbbe:	4628      	mov	r0, r5
   1fbc0:	a901      	add	r1, sp, #4
   1fbc2:	f006 f9dd 	bl	25f80 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1fbc6:	4b10      	ldr	r3, [pc, #64]	; (1fc08 <gpio_nrfx_pin_configure+0x154>)
   1fbc8:	4298      	cmp	r0, r3
   1fbca:	d1a9      	bne.n	1fb20 <gpio_nrfx_pin_configure+0x6c>
   1fbcc:	2000      	movs	r0, #0
   1fbce:	e7a9      	b.n	1fb24 <gpio_nrfx_pin_configure+0x70>
		*drive = NRF_GPIO_PIN_D0H1;
   1fbd0:	2305      	movs	r3, #5
   1fbd2:	e7dd      	b.n	1fb90 <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1fbd4:	2303      	movs	r3, #3
   1fbd6:	e7db      	b.n	1fb90 <gpio_nrfx_pin_configure+0xdc>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1fbd8:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1fbda:	bf41      	itttt	mi
   1fbdc:	2301      	movmi	r3, #1
   1fbde:	f8d8 2004 	ldrmi.w	r2, [r8, #4]
   1fbe2:	40bb      	lslmi	r3, r7
    p_reg->OUTCLR = clr_mask;
   1fbe4:	60d3      	strmi	r3, [r2, #12]
}
   1fbe6:	e7e9      	b.n	1fbbc <gpio_nrfx_pin_configure+0x108>
	if (flags & GPIO_PULL_UP) {
   1fbe8:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1fbea:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   1fbee:	bf4c      	ite	mi
   1fbf0:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
   1fbf2:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1fbf6:	461a      	mov	r2, r3
   1fbf8:	4628      	mov	r0, r5
   1fbfa:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
   1fbfc:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1fc00:	f006 f90e 	bl	25e20 <nrfx_gpiote_input_configure>
   1fc04:	e7df      	b.n	1fbc6 <gpio_nrfx_pin_configure+0x112>
   1fc06:	bf00      	nop
   1fc08:	0bad0000 	.word	0x0bad0000
   1fc0c:	0003e1a2 	.word	0x0003e1a2
   1fc10:	0003e176 	.word	0x0003e176
   1fc14:	00039995 	.word	0x00039995

0001fc18 <nrf_gpio_pin_port_decode>:
{
   1fc18:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1fc1a:	6802      	ldr	r2, [r0, #0]
    switch (port)
   1fc1c:	0953      	lsrs	r3, r2, #5
   1fc1e:	d104      	bne.n	1fc2a <nrf_gpio_pin_port_decode+0x12>
    return (mask & (1UL << pin_number)) ? true : false;
   1fc20:	f04f 33ff 	mov.w	r3, #4294967295
   1fc24:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1fc26:	07db      	lsls	r3, r3, #31
   1fc28:	d40b      	bmi.n	1fc42 <nrf_gpio_pin_port_decode+0x2a>
   1fc2a:	4907      	ldr	r1, [pc, #28]	; (1fc48 <nrf_gpio_pin_port_decode+0x30>)
   1fc2c:	4807      	ldr	r0, [pc, #28]	; (1fc4c <nrf_gpio_pin_port_decode+0x34>)
   1fc2e:	f240 2347 	movw	r3, #583	; 0x247
   1fc32:	4a07      	ldr	r2, [pc, #28]	; (1fc50 <nrf_gpio_pin_port_decode+0x38>)
   1fc34:	f00f fbc6 	bl	2f3c4 <assert_print>
   1fc38:	f240 2147 	movw	r1, #583	; 0x247
   1fc3c:	4804      	ldr	r0, [pc, #16]	; (1fc50 <nrf_gpio_pin_port_decode+0x38>)
   1fc3e:	f00f fbba 	bl	2f3b6 <assert_post_action>
}
   1fc42:	4804      	ldr	r0, [pc, #16]	; (1fc54 <nrf_gpio_pin_port_decode+0x3c>)
   1fc44:	bd08      	pop	{r3, pc}
   1fc46:	bf00      	nop
   1fc48:	0003e147 	.word	0x0003e147
   1fc4c:	00039995 	.word	0x00039995
   1fc50:	0003e114 	.word	0x0003e114
   1fc54:	40842500 	.word	0x40842500

0001fc58 <uarte_nrfx_rx_enable>:
}

static int uarte_nrfx_rx_enable(const struct device *dev, uint8_t *buf,
				size_t len,
				int32_t timeout)
{
   1fc58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct uarte_nrfx_data *data = dev->data;
	const struct uarte_nrfx_config *cfg = dev->config;
   1fc5c:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
   1fc60:	4617      	mov	r7, r2
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	if (cfg->disable_rx) {
   1fc62:	f89a 2008 	ldrb.w	r2, [sl, #8]
{
   1fc66:	4606      	mov	r6, r0
   1fc68:	4688      	mov	r8, r1
	struct uarte_nrfx_data *data = dev->data;
   1fc6a:	6904      	ldr	r4, [r0, #16]
	return config->uarte_regs;
   1fc6c:	f8da 9000 	ldr.w	r9, [sl]
	if (cfg->disable_rx) {
   1fc70:	b172      	cbz	r2, 1fc90 <uarte_nrfx_rx_enable+0x38>
		__ASSERT(false, "TX only UARTE instance");
   1fc72:	4941      	ldr	r1, [pc, #260]	; (1fd78 <uarte_nrfx_rx_enable+0x120>)
   1fc74:	f240 3341 	movw	r3, #833	; 0x341
   1fc78:	4a40      	ldr	r2, [pc, #256]	; (1fd7c <uarte_nrfx_rx_enable+0x124>)
   1fc7a:	4841      	ldr	r0, [pc, #260]	; (1fd80 <uarte_nrfx_rx_enable+0x128>)
   1fc7c:	f00f fba2 	bl	2f3c4 <assert_print>
   1fc80:	4840      	ldr	r0, [pc, #256]	; (1fd84 <uarte_nrfx_rx_enable+0x12c>)
   1fc82:	f00f fb9f 	bl	2f3c4 <assert_print>
   1fc86:	f240 3141 	movw	r1, #833	; 0x341
   1fc8a:	483c      	ldr	r0, [pc, #240]	; (1fd7c <uarte_nrfx_rx_enable+0x124>)
   1fc8c:	f00f fb93 	bl	2f3b6 <assert_post_action>

	/* Signal error if RX is already enabled or if the driver is waiting
	 * for the RXTO event after a call to uart_rx_disable() to discard
	 * data from the UARTE internal RX FIFO.
	 */
	if (data->async->rx_enabled || data->async->discard_rx_fifo) {
   1fc90:	6922      	ldr	r2, [r4, #16]
   1fc92:	f892 10ca 	ldrb.w	r1, [r2, #202]	; 0xca
   1fc96:	2900      	cmp	r1, #0
   1fc98:	d16a      	bne.n	1fd70 <uarte_nrfx_rx_enable+0x118>
   1fc9a:	f892 10cb 	ldrb.w	r1, [r2, #203]	; 0xcb
   1fc9e:	2900      	cmp	r1, #0
   1fca0:	d166      	bne.n	1fd70 <uarte_nrfx_rx_enable+0x118>
	 * 3 instead of 2 is used. Note that lower value would work in a similar
	 * way but timeouts would always occur later than expected,  most likely
	 * after ~3 ticks.
	 */
	data->async->rx_timeout_slab =
		MAX(timeout / RX_TIMEOUT_DIV,
   1fca2:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
	data->async->rx_timeout = timeout;
   1fca6:	6753      	str	r3, [r2, #116]	; 0x74
		MAX(timeout / RX_TIMEOUT_DIV,
   1fca8:	bfca      	itet	gt
   1fcaa:	2205      	movgt	r2, #5
   1fcac:	235c      	movle	r3, #92	; 0x5c
   1fcae:	fb93 f3f2 	sdivgt	r3, r3, r2
	data->async->rx_timeout_slab =
   1fcb2:	6922      	ldr	r2, [r4, #16]
   1fcb4:	6793      	str	r3, [r2, #120]	; 0x78
		    NRFX_CEIL_DIV(3 * 1000000, CONFIG_SYS_CLOCK_TICKS_PER_SEC));

	data->async->rx_buf = buf;
   1fcb6:	6923      	ldr	r3, [r4, #16]
   1fcb8:	f8c3 8058 	str.w	r8, [r3, #88]	; 0x58
	data->async->rx_buf_len = len;
   1fcbc:	6923      	ldr	r3, [r4, #16]
   1fcbe:	65df      	str	r7, [r3, #92]	; 0x5c
	data->async->rx_offset = 0;
   1fcc0:	2300      	movs	r3, #0
   1fcc2:	6922      	ldr	r2, [r4, #16]
   1fcc4:	6613      	str	r3, [r2, #96]	; 0x60
	data->async->rx_next_buf = NULL;
   1fcc6:	6922      	ldr	r2, [r4, #16]
   1fcc8:	6653      	str	r3, [r2, #100]	; 0x64
	data->async->rx_next_buf_len = 0;
   1fcca:	6922      	ldr	r2, [r4, #16]
   1fccc:	6693      	str	r3, [r2, #104]	; 0x68

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1fcce:	f8da 3004 	ldr.w	r3, [sl, #4]
   1fcd2:	06da      	lsls	r2, r3, #27
   1fcd4:	d523      	bpl.n	1fd1e <uarte_nrfx_rx_enable+0xc6>
		if (data->async->rx_flush_cnt) {
   1fcd6:	6921      	ldr	r1, [r4, #16]
   1fcd8:	f891 50c9 	ldrb.w	r5, [r1, #201]	; 0xc9
   1fcdc:	b1fd      	cbz	r5, 1fd1e <uarte_nrfx_rx_enable+0xc6>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
   1fcde:	42bd      	cmp	r5, r7
   1fce0:	bf28      	it	cs
   1fce2:	463d      	movcs	r5, r7
   1fce4:	4640      	mov	r0, r8
   1fce6:	462a      	mov	r2, r5
   1fce8:	31c4      	adds	r1, #196	; 0xc4
   1fcea:	f016 fc1d 	bl	36528 <memcpy>
			len -= cpy_len;

			/* If flush content filled whole new buffer complete the
			 * request and indicate rx being disabled.
			 */
			if (!len) {
   1fcee:	1b7f      	subs	r7, r7, r5
			buf += cpy_len;
   1fcf0:	44a8      	add	r8, r5
			if (!len) {
   1fcf2:	d114      	bne.n	1fd1e <uarte_nrfx_rx_enable+0xc6>
				data->async->rx_flush_cnt -= cpy_len;
   1fcf4:	6922      	ldr	r2, [r4, #16]
				notify_uart_rx_rdy(dev, cpy_len);
   1fcf6:	4629      	mov	r1, r5
				data->async->rx_flush_cnt -= cpy_len;
   1fcf8:	f892 30c9 	ldrb.w	r3, [r2, #201]	; 0xc9
				notify_uart_rx_rdy(dev, cpy_len);
   1fcfc:	4630      	mov	r0, r6
				data->async->rx_flush_cnt -= cpy_len;
   1fcfe:	1b5b      	subs	r3, r3, r5
   1fd00:	f882 30c9 	strb.w	r3, [r2, #201]	; 0xc9
				notify_uart_rx_rdy(dev, cpy_len);
   1fd04:	f014 fa1a 	bl	3413c <notify_uart_rx_rdy>
				rx_buf_release(dev, &data->async->rx_buf);
   1fd08:	6921      	ldr	r1, [r4, #16]
   1fd0a:	4630      	mov	r0, r6
   1fd0c:	3158      	adds	r1, #88	; 0x58
   1fd0e:	f014 fa2e 	bl	3416e <rx_buf_release>
				notify_rx_disable(dev);
   1fd12:	4630      	mov	r0, r6
   1fd14:	f014 fa43 	bl	3419e <notify_rx_disable>
		irq_unlock(key);
	}

	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);

	return 0;
   1fd18:	2000      	movs	r0, #0
}
   1fd1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg);

#ifndef NRF_DECLARE_ONLY
NRF_STATIC_INLINE void nrf_uarte_event_clear(NRF_UARTE_Type * p_reg, nrf_uarte_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1fd1e:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1fd20:	f8c9 8534 	str.w	r8, [r9, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1fd24:	f8c9 7538 	str.w	r7, [r9, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1fd28:	f8c9 3110 	str.w	r3, [r9, #272]	; 0x110
   1fd2c:	f8d9 2110 	ldr.w	r2, [r9, #272]	; 0x110
	data->async->rx_enabled = true;
   1fd30:	2201      	movs	r2, #1
   1fd32:	f8c9 314c 	str.w	r3, [r9, #332]	; 0x14c
   1fd36:	f8d9 314c 	ldr.w	r3, [r9, #332]	; 0x14c
   1fd3a:	6923      	ldr	r3, [r4, #16]
   1fd3c:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1fd40:	f8da 3004 	ldr.w	r3, [sl, #4]
   1fd44:	06db      	lsls	r3, r3, #27
   1fd46:	d50f      	bpl.n	1fd68 <uarte_nrfx_rx_enable+0x110>
   1fd48:	f04f 0320 	mov.w	r3, #32
   1fd4c:	f3ef 8411 	mrs	r4, BASEPRI
   1fd50:	f383 8812 	msr	BASEPRI_MAX, r3
   1fd54:	f3bf 8f6f 	isb	sy
		uarte_enable(dev, UARTE_LOW_POWER_RX);
   1fd58:	2102      	movs	r1, #2
   1fd5a:	4630      	mov	r0, r6
   1fd5c:	f014 fb0a 	bl	34374 <uarte_enable>
	__asm__ volatile(
   1fd60:	f384 8811 	msr	BASEPRI, r4
   1fd64:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1fd68:	2301      	movs	r3, #1
   1fd6a:	f8c9 3000 	str.w	r3, [r9]
	return 0;
   1fd6e:	e7d3      	b.n	1fd18 <uarte_nrfx_rx_enable+0xc0>
		return -EBUSY;
   1fd70:	f06f 000f 	mvn.w	r0, #15
   1fd74:	e7d1      	b.n	1fd1a <uarte_nrfx_rx_enable+0xc2>
   1fd76:	bf00      	nop
   1fd78:	0003ea9e 	.word	0x0003ea9e
   1fd7c:	0003e1c2 	.word	0x0003e1c2
   1fd80:	00039995 	.word	0x00039995
   1fd84:	0003e1f6 	.word	0x0003e1f6

0001fd88 <uarte_nrfx_tx>:
{
   1fd88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1fd8a:	461d      	mov	r5, r3
	return config->uarte_regs;
   1fd8c:	6843      	ldr	r3, [r0, #4]
{
   1fd8e:	4606      	mov	r6, r0
	struct uarte_nrfx_data *data = dev->data;
   1fd90:	6904      	ldr	r4, [r0, #16]
	return config->uarte_regs;
   1fd92:	f8d3 c000 	ldr.w	ip, [r3]
	__asm__ volatile(
   1fd96:	f04f 0320 	mov.w	r3, #32
   1fd9a:	f3ef 8711 	mrs	r7, BASEPRI
   1fd9e:	f383 8812 	msr	BASEPRI_MAX, r3
   1fda2:	f3bf 8f6f 	isb	sy
	if (data->async->tx_size) {
   1fda6:	6923      	ldr	r3, [r4, #16]
   1fda8:	68d8      	ldr	r0, [r3, #12]
   1fdaa:	b138      	cbz	r0, 1fdbc <uarte_nrfx_tx+0x34>
	__asm__ volatile(
   1fdac:	f387 8811 	msr	BASEPRI, r7
   1fdb0:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   1fdb4:	f06f 000f 	mvn.w	r0, #15
}
   1fdb8:	b003      	add	sp, #12
   1fdba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	data->async->tx_size = len;
   1fdbc:	60da      	str	r2, [r3, #12]
	data->async->tx_buf = buf;
   1fdbe:	6923      	ldr	r3, [r4, #16]
   1fdc0:	6099      	str	r1, [r3, #8]
    p_reg->INTENSET = mask;
   1fdc2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1fdc6:	f8cc 3304 	str.w	r3, [ip, #772]	; 0x304

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1fdca:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
	if (nrfx_is_in_ram(buf)) {
   1fdce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1fdd2:	6923      	ldr	r3, [r4, #16]
   1fdd4:	d111      	bne.n	1fdfa <uarte_nrfx_tx+0x72>
		data->async->xfer_buf = buf;
   1fdd6:	6119      	str	r1, [r3, #16]
		data->async->xfer_len = len;
   1fdd8:	6923      	ldr	r3, [r4, #16]
   1fdda:	615a      	str	r2, [r3, #20]
	start_tx_locked(dev, data);
   1fddc:	4621      	mov	r1, r4
   1fdde:	4630      	mov	r0, r6
   1fde0:	f014 fbc6 	bl	34570 <start_tx_locked>
   1fde4:	f387 8811 	msr	BASEPRI, r7
   1fde8:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
   1fdec:	7ae3      	ldrb	r3, [r4, #11]
   1fdee:	2b01      	cmp	r3, #1
   1fdf0:	d101      	bne.n	1fdf6 <uarte_nrfx_tx+0x6e>
	    && timeout != SYS_FOREVER_US) {
   1fdf2:	1c6b      	adds	r3, r5, #1
   1fdf4:	d106      	bne.n	1fe04 <uarte_nrfx_tx+0x7c>
	return 0;
   1fdf6:	2000      	movs	r0, #0
   1fdf8:	e7de      	b.n	1fdb8 <uarte_nrfx_tx+0x30>
		data->async->tx_cache_offset = 0;
   1fdfa:	61d8      	str	r0, [r3, #28]
		(void)setup_tx_cache(data);
   1fdfc:	4620      	mov	r0, r4
   1fdfe:	f014 fb21 	bl	34444 <setup_tx_cache>
   1fe02:	e7eb      	b.n	1fddc <uarte_nrfx_tx+0x54>
   1fe04:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1fe08:	2100      	movs	r1, #0
   1fe0a:	480a      	ldr	r0, [pc, #40]	; (1fe34 <uarte_nrfx_tx+0xac>)
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
   1fe0c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
   1fe10:	2300      	movs	r3, #0
   1fe12:	fbc5 0106 	smlal	r0, r1, r5, r6
   1fe16:	4a08      	ldr	r2, [pc, #32]	; (1fe38 <uarte_nrfx_tx+0xb0>)
   1fe18:	f7e9 f83c 	bl	8e94 <__aeabi_uldivmod>
   1fe1c:	6924      	ldr	r4, [r4, #16]
   1fe1e:	4602      	mov	r2, r0
   1fe20:	460b      	mov	r3, r1
   1fe22:	3420      	adds	r4, #32
	z_impl_k_timer_start(timer, duration, period);
   1fe24:	2000      	movs	r0, #0
   1fe26:	2100      	movs	r1, #0
   1fe28:	e9cd 0100 	strd	r0, r1, [sp]
   1fe2c:	4620      	mov	r0, r4
   1fe2e:	f00b ff65 	bl	2bcfc <z_impl_k_timer_start>
   1fe32:	e7e0      	b.n	1fdf6 <uarte_nrfx_tx+0x6e>
   1fe34:	000f423f 	.word	0x000f423f
   1fe38:	000f4240 	.word	0x000f4240

0001fe3c <uarte_nrfx_configure>:
{
   1fe3c:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (cfg->stop_bits) {
   1fe3e:	794b      	ldrb	r3, [r1, #5]
   1fe40:	2b01      	cmp	r3, #1
   1fe42:	d026      	beq.n	1fe92 <uarte_nrfx_configure+0x56>
   1fe44:	2b03      	cmp	r3, #3
   1fe46:	d121      	bne.n	1fe8c <uarte_nrfx_configure+0x50>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1fe48:	2510      	movs	r5, #16
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1fe4a:	798b      	ldrb	r3, [r1, #6]
   1fe4c:	2b03      	cmp	r3, #3
   1fe4e:	d11d      	bne.n	1fe8c <uarte_nrfx_configure+0x50>
	switch (cfg->flow_ctrl) {
   1fe50:	79ce      	ldrb	r6, [r1, #7]
   1fe52:	b10e      	cbz	r6, 1fe58 <uarte_nrfx_configure+0x1c>
   1fe54:	2e01      	cmp	r6, #1
   1fe56:	d119      	bne.n	1fe8c <uarte_nrfx_configure+0x50>
	switch (cfg->parity) {
   1fe58:	790a      	ldrb	r2, [r1, #4]
   1fe5a:	b112      	cbz	r2, 1fe62 <uarte_nrfx_configure+0x26>
   1fe5c:	2a02      	cmp	r2, #2
   1fe5e:	d115      	bne.n	1fe8c <uarte_nrfx_configure+0x50>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1fe60:	220e      	movs	r2, #14
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1fe62:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1fe64:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
   1fe66:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1fe6a:	6827      	ldr	r7, [r4, #0]
	switch (baudrate) {
   1fe6c:	d067      	beq.n	1ff3e <uarte_nrfx_configure+0x102>
   1fe6e:	d82d      	bhi.n	1fecc <uarte_nrfx_configure+0x90>
   1fe70:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1fe74:	d066      	beq.n	1ff44 <uarte_nrfx_configure+0x108>
   1fe76:	d816      	bhi.n	1fea6 <uarte_nrfx_configure+0x6a>
   1fe78:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1fe7c:	d064      	beq.n	1ff48 <uarte_nrfx_configure+0x10c>
   1fe7e:	d80a      	bhi.n	1fe96 <uarte_nrfx_configure+0x5a>
   1fe80:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1fe84:	d063      	beq.n	1ff4e <uarte_nrfx_configure+0x112>
   1fe86:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1fe8a:	d063      	beq.n	1ff54 <uarte_nrfx_configure+0x118>
		return -ENOTSUP;
   1fe8c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1fe90:	e054      	b.n	1ff3c <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
   1fe92:	2500      	movs	r5, #0
   1fe94:	e7d9      	b.n	1fe4a <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   1fe96:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1fe9a:	d05e      	beq.n	1ff5a <uarte_nrfx_configure+0x11e>
   1fe9c:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1fea0:	d1f4      	bne.n	1fe8c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1fea2:	4b38      	ldr	r3, [pc, #224]	; (1ff84 <uarte_nrfx_configure+0x148>)
   1fea4:	e03c      	b.n	1ff20 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1fea6:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1feaa:	d059      	beq.n	1ff60 <uarte_nrfx_configure+0x124>
   1feac:	d807      	bhi.n	1febe <uarte_nrfx_configure+0x82>
   1feae:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1feb2:	d057      	beq.n	1ff64 <uarte_nrfx_configure+0x128>
   1feb4:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1feb8:	d1e8      	bne.n	1fe8c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1feba:	4b33      	ldr	r3, [pc, #204]	; (1ff88 <uarte_nrfx_configure+0x14c>)
   1febc:	e030      	b.n	1ff20 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1febe:	f647 2412 	movw	r4, #31250	; 0x7a12
   1fec2:	42a3      	cmp	r3, r4
   1fec4:	d1e2      	bne.n	1fe8c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1fec6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1feca:	e029      	b.n	1ff20 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1fecc:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1fed0:	d04a      	beq.n	1ff68 <uarte_nrfx_configure+0x12c>
   1fed2:	d813      	bhi.n	1fefc <uarte_nrfx_configure+0xc0>
   1fed4:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1fed8:	d049      	beq.n	1ff6e <uarte_nrfx_configure+0x132>
   1feda:	d809      	bhi.n	1fef0 <uarte_nrfx_configure+0xb4>
   1fedc:	f64d 24c0 	movw	r4, #56000	; 0xdac0
   1fee0:	42a3      	cmp	r3, r4
   1fee2:	d046      	beq.n	1ff72 <uarte_nrfx_configure+0x136>
   1fee4:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1fee8:	d1d0      	bne.n	1fe8c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1feea:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1feee:	e017      	b.n	1ff20 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1fef0:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1fef4:	d1ca      	bne.n	1fe8c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1fef6:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1fefa:	e011      	b.n	1ff20 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1fefc:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1ff00:	d03a      	beq.n	1ff78 <uarte_nrfx_configure+0x13c>
   1ff02:	d808      	bhi.n	1ff16 <uarte_nrfx_configure+0xda>
   1ff04:	4c21      	ldr	r4, [pc, #132]	; (1ff8c <uarte_nrfx_configure+0x150>)
   1ff06:	42a3      	cmp	r3, r4
   1ff08:	d039      	beq.n	1ff7e <uarte_nrfx_configure+0x142>
   1ff0a:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1ff0e:	d1bd      	bne.n	1fe8c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1ff10:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1ff14:	e004      	b.n	1ff20 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1ff16:	4c1e      	ldr	r4, [pc, #120]	; (1ff90 <uarte_nrfx_configure+0x154>)
   1ff18:	42a3      	cmp	r3, r4
   1ff1a:	d1b7      	bne.n	1fe8c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1ff1c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   1ff20:	6904      	ldr	r4, [r0, #16]
    p_reg->BAUDRATE = baudrate;
   1ff22:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
	return config->uarte_regs;
   1ff26:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->hwfc;
   1ff28:	4335      	orrs	r5, r6
   1ff2a:	681b      	ldr	r3, [r3, #0]
   1ff2c:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1ff2e:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
	data->uart_config = *cfg;
   1ff32:	1d23      	adds	r3, r4, #4
   1ff34:	c903      	ldmia	r1, {r0, r1}
   1ff36:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
   1ff3a:	2000      	movs	r0, #0
}
   1ff3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1ff3e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1ff42:	e7ed      	b.n	1ff20 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1ff44:	4b13      	ldr	r3, [pc, #76]	; (1ff94 <uarte_nrfx_configure+0x158>)
   1ff46:	e7eb      	b.n	1ff20 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1ff48:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1ff4c:	e7e8      	b.n	1ff20 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
   1ff4e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1ff52:	e7e5      	b.n	1ff20 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1ff54:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1ff58:	e7e2      	b.n	1ff20 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1ff5a:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1ff5e:	e7df      	b.n	1ff20 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1ff60:	4b0d      	ldr	r3, [pc, #52]	; (1ff98 <uarte_nrfx_configure+0x15c>)
   1ff62:	e7dd      	b.n	1ff20 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1ff64:	4b0d      	ldr	r3, [pc, #52]	; (1ff9c <uarte_nrfx_configure+0x160>)
   1ff66:	e7db      	b.n	1ff20 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1ff68:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1ff6c:	e7d8      	b.n	1ff20 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1ff6e:	4b0c      	ldr	r3, [pc, #48]	; (1ffa0 <uarte_nrfx_configure+0x164>)
   1ff70:	e7d6      	b.n	1ff20 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1ff72:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1ff76:	e7d3      	b.n	1ff20 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1ff78:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1ff7c:	e7d0      	b.n	1ff20 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1ff7e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1ff82:	e7cd      	b.n	1ff20 <uarte_nrfx_configure+0xe4>
   1ff84:	0013b000 	.word	0x0013b000
   1ff88:	004ea000 	.word	0x004ea000
   1ff8c:	0003d090 	.word	0x0003d090
   1ff90:	000f4240 	.word	0x000f4240
   1ff94:	00275000 	.word	0x00275000
   1ff98:	0075c000 	.word	0x0075c000
   1ff9c:	003af000 	.word	0x003af000
   1ffa0:	013a9000 	.word	0x013a9000

0001ffa4 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   1ffa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ffa8:	4604      	mov	r4, r0
   1ffaa:	460e      	mov	r6, r1
	struct uarte_nrfx_data *data = dev->data;
   1ffac:	6905      	ldr	r5, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1ffae:	f016 f88a 	bl	360c6 <k_is_in_isr>
   1ffb2:	b9b0      	cbnz	r0, 1ffe2 <uarte_nrfx_poll_out+0x3e>
	return !z_sys_post_kernel;
   1ffb4:	4b2a      	ldr	r3, [pc, #168]	; (20060 <uarte_nrfx_poll_out+0xbc>)
   1ffb6:	781b      	ldrb	r3, [r3, #0]
   1ffb8:	b19b      	cbz	r3, 1ffe2 <uarte_nrfx_poll_out+0x3e>
{
   1ffba:	2764      	movs	r7, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1ffbc:	6860      	ldr	r0, [r4, #4]
   1ffbe:	f014 fac7 	bl	34550 <is_tx_ready.isra.0>
   1ffc2:	2800      	cmp	r0, #0
   1ffc4:	d138      	bne.n	20038 <uarte_nrfx_poll_out+0x94>
   1ffc6:	2001      	movs	r0, #1
   1ffc8:	f015 f91b 	bl	35202 <nrfx_busy_wait>
   1ffcc:	3f01      	subs	r7, #1
   1ffce:	d1f5      	bne.n	1ffbc <uarte_nrfx_poll_out+0x18>
	return z_impl_k_sleep(timeout);
   1ffd0:	2100      	movs	r1, #0
   1ffd2:	2021      	movs	r0, #33	; 0x21
   1ffd4:	f00b f9ba 	bl	2b34c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1ffd8:	e7ef      	b.n	1ffba <uarte_nrfx_poll_out+0x16>
   1ffda:	f381 8811 	msr	BASEPRI, r1
   1ffde:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1ffe2:	f04f 0320 	mov.w	r3, #32
   1ffe6:	f3ef 8111 	mrs	r1, BASEPRI
   1ffea:	f383 8812 	msr	BASEPRI_MAX, r3
   1ffee:	f3bf 8f6f 	isb	sy
   1fff2:	f8d4 8004 	ldr.w	r8, [r4, #4]
   1fff6:	460f      	mov	r7, r1
	unsigned int key;

	if (isr_mode) {
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   1fff8:	4640      	mov	r0, r8
   1fffa:	f014 faa9 	bl	34550 <is_tx_ready.isra.0>
   1fffe:	2800      	cmp	r0, #0
   20000:	d0eb      	beq.n	1ffda <uarte_nrfx_poll_out+0x36>
#if UARTE_ANY_ASYNC
				if (data->async && data->async->tx_size &&
   20002:	692b      	ldr	r3, [r5, #16]
   20004:	b15b      	cbz	r3, 2001e <uarte_nrfx_poll_out+0x7a>
   20006:	68da      	ldr	r2, [r3, #12]
   20008:	b14a      	cbz	r2, 2001e <uarte_nrfx_poll_out+0x7a>
					data->async->tx_amount < 0) {
   2000a:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
				if (data->async && data->async->tx_size &&
   2000e:	2a00      	cmp	r2, #0
   20010:	da05      	bge.n	2001e <uarte_nrfx_poll_out+0x7a>
	return config->uarte_regs;
   20012:	f8d8 2000 	ldr.w	r2, [r8]
    return p_reg->TXD.AMOUNT;
   20016:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
   2001a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		}
	} else {
		key = wait_tx_ready(dev);
	}

	*data->char_out = c;
   2001e:	69ab      	ldr	r3, [r5, #24]
	tx_start(dev, data->char_out, 1);
   20020:	2201      	movs	r2, #1
	*data->char_out = c;
   20022:	701e      	strb	r6, [r3, #0]
	tx_start(dev, data->char_out, 1);
   20024:	4620      	mov	r0, r4
   20026:	69a9      	ldr	r1, [r5, #24]
   20028:	f014 f9ca 	bl	343c0 <tx_start>
	__asm__ volatile(
   2002c:	f387 8811 	msr	BASEPRI, r7
   20030:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   20034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   20038:	f04f 0320 	mov.w	r3, #32
   2003c:	f3ef 8111 	mrs	r1, BASEPRI
   20040:	f383 8812 	msr	BASEPRI_MAX, r3
   20044:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   20048:	6860      	ldr	r0, [r4, #4]
   2004a:	460f      	mov	r7, r1
   2004c:	f014 fa80 	bl	34550 <is_tx_ready.isra.0>
   20050:	2800      	cmp	r0, #0
   20052:	d1e4      	bne.n	2001e <uarte_nrfx_poll_out+0x7a>
	__asm__ volatile(
   20054:	f381 8811 	msr	BASEPRI, r1
   20058:	f3bf 8f6f 	isb	sy
}
   2005c:	e7b8      	b.n	1ffd0 <uarte_nrfx_poll_out+0x2c>
   2005e:	bf00      	nop
   20060:	20010782 	.word	0x20010782

00020064 <uarte_instance_init.constprop.0>:
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   20064:	2100      	movs	r1, #0
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   20066:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct uarte_nrfx_config *config = dev->config;
   2006a:	f8d0 9004 	ldr.w	r9, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
   2006e:	f8d0 8010 	ldr.w	r8, [r0, #16]
	return config->uarte_regs;
   20072:	f8d9 4000 	ldr.w	r4, [r9]
static int uarte_instance_init(const struct device *dev,
   20076:	b089      	sub	sp, #36	; 0x24
   20078:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
   2007c:	f8c8 0000 	str.w	r0, [r8]

	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   20080:	f8d9 600c 	ldr.w	r6, [r9, #12]
static int uarte_instance_init(const struct device *dev,
   20084:	4607      	mov	r7, r0
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   20086:	aa02      	add	r2, sp, #8
   20088:	4630      	mov	r0, r6
   2008a:	f013 ff99 	bl	33fc0 <pinctrl_lookup_state>
	if (ret < 0) {
   2008e:	1e05      	subs	r5, r0, #0
   20090:	db26      	blt.n	200e0 <uarte_instance_init.constprop.0+0x7c>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   20092:	9b02      	ldr	r3, [sp, #8]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   20094:	6832      	ldr	r2, [r6, #0]
   20096:	7919      	ldrb	r1, [r3, #4]
   20098:	6818      	ldr	r0, [r3, #0]
   2009a:	f013 ffa4 	bl	33fe6 <pinctrl_configure_pins>
	if (err < 0) {
   2009e:	1e05      	subs	r5, r0, #0
   200a0:	db1e      	blt.n	200e0 <uarte_instance_init.constprop.0+0x7c>
		return err;
	}

	err = uarte_nrfx_configure(dev, &data->uart_config);
   200a2:	4638      	mov	r0, r7
   200a4:	f108 0104 	add.w	r1, r8, #4
   200a8:	f7ff fec8 	bl	1fe3c <uarte_nrfx_configure>
	if (err) {
   200ac:	4605      	mov	r5, r0
   200ae:	b9b8      	cbnz	r0, 200e0 <uarte_instance_init.constprop.0+0x7c>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   200b0:	f8d9 3004 	ldr.w	r3, [r9, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   200b4:	0798      	lsls	r0, r3, #30
   200b6:	d535      	bpl.n	20124 <uarte_instance_init.constprop.0+0xc0>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   200b8:	f108 0020 	add.w	r0, r8, #32
   200bc:	f005 fdc8 	bl	25c50 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   200c0:	4b7f      	ldr	r3, [pc, #508]	; (202c0 <uarte_instance_init.constprop.0+0x25c>)
   200c2:	4298      	cmp	r0, r3
   200c4:	d010      	beq.n	200e8 <uarte_instance_init.constprop.0+0x84>
		LOG_ERR("Failed to allocate PPI Channel");
   200c6:	4b7f      	ldr	r3, [pc, #508]	; (202c4 <uarte_instance_init.constprop.0+0x260>)
   200c8:	9307      	str	r3, [sp, #28]
   200ca:	2302      	movs	r3, #2
   200cc:	9306      	str	r3, [sp, #24]
   200ce:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   200d2:	462b      	mov	r3, r5
   200d4:	487c      	ldr	r0, [pc, #496]	; (202c8 <uarte_instance_init.constprop.0+0x264>)
   200d6:	aa06      	add	r2, sp, #24
   200d8:	f7f0 f8ac 	bl	10234 <z_impl_z_log_msg_static_create>
		return -EIO;
   200dc:	f06f 0504 	mvn.w	r5, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   200e0:	4628      	mov	r0, r5
   200e2:	b009      	add	sp, #36	; 0x24
   200e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   200e8:	f898 3020 	ldrb.w	r3, [r8, #32]
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
   200ec:	f114 0f0c 	cmn.w	r4, #12
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   200f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   200f4:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
    NRFX_ASSERT(tep);
   200f8:	d10b      	bne.n	20112 <uarte_instance_init.constprop.0+0xae>
   200fa:	4974      	ldr	r1, [pc, #464]	; (202cc <uarte_instance_init.constprop.0+0x268>)
   200fc:	4874      	ldr	r0, [pc, #464]	; (202d0 <uarte_instance_init.constprop.0+0x26c>)
   200fe:	f240 234e 	movw	r3, #590	; 0x24e
   20102:	4a74      	ldr	r2, [pc, #464]	; (202d4 <uarte_instance_init.constprop.0+0x270>)
   20104:	f00f f95e 	bl	2f3c4 <assert_print>
   20108:	f240 214e 	movw	r1, #590	; 0x24e
   2010c:	4871      	ldr	r0, [pc, #452]	; (202d4 <uarte_instance_init.constprop.0+0x270>)
   2010e:	f00f f952 	bl	2f3b6 <assert_post_action>
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   20112:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   20116:	2301      	movs	r3, #1
   20118:	f898 2020 	ldrb.w	r2, [r8, #32]
   2011c:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   2011e:	4a6e      	ldr	r2, [pc, #440]	; (202d8 <uarte_instance_init.constprop.0+0x274>)
   20120:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	if (data->async) {
   20124:	f8d8 3010 	ldr.w	r3, [r8, #16]
   20128:	2b00      	cmp	r3, #0
   2012a:	f000 80b4 	beq.w	20296 <uarte_instance_init.constprop.0+0x232>
	struct uarte_nrfx_data *data = dev->data;
   2012e:	693e      	ldr	r6, [r7, #16]
	const struct uarte_nrfx_config *config = dev->config;
   20130:	f8d7 b004 	ldr.w	fp, [r7, #4]
	if (HW_RX_COUNTING_ENABLED(data)) {
   20134:	6933      	ldr	r3, [r6, #16]
	return config->uarte_regs;
   20136:	f8db 7000 	ldr.w	r7, [fp]
	if (HW_RX_COUNTING_ENABLED(data)) {
   2013a:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
   2013e:	2b00      	cmp	r3, #0
   20140:	f000 80a5 	beq.w	2028e <uarte_instance_init.constprop.0+0x22a>
		nrfx_timer_config_t tmr_config = NRFX_TIMER_DEFAULT_CONFIG;
   20144:	2300      	movs	r3, #0
   20146:	4965      	ldr	r1, [pc, #404]	; (202dc <uarte_instance_init.constprop.0+0x278>)
		ret = nrfx_timer_init(&cfg->timer,
   20148:	f10b 0a10 	add.w	sl, fp, #16
		nrfx_timer_config_t tmr_config = NRFX_TIMER_DEFAULT_CONFIG;
   2014c:	e9cd 1300 	strd	r1, r3, [sp]
		ret = nrfx_timer_init(&cfg->timer,
   20150:	4a63      	ldr	r2, [pc, #396]	; (202e0 <uarte_instance_init.constprop.0+0x27c>)
   20152:	4669      	mov	r1, sp
   20154:	4650      	mov	r0, sl
   20156:	f006 fb05 	bl	26764 <nrfx_timer_init>
		if (ret != NRFX_SUCCESS) {
   2015a:	4a59      	ldr	r2, [pc, #356]	; (202c0 <uarte_instance_init.constprop.0+0x25c>)
   2015c:	4290      	cmp	r0, r2
   2015e:	f000 808f 	beq.w	20280 <uarte_instance_init.constprop.0+0x21c>
			LOG_ERR("Timer already initialized, "
   20162:	4a60      	ldr	r2, [pc, #384]	; (202e4 <uarte_instance_init.constprop.0+0x280>)
   20164:	9207      	str	r2, [sp, #28]
   20166:	2202      	movs	r2, #2
   20168:	9206      	str	r2, [sp, #24]
   2016a:	2300      	movs	r3, #0
   2016c:	aa06      	add	r2, sp, #24
   2016e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   20172:	4855      	ldr	r0, [pc, #340]	; (202c8 <uarte_instance_init.constprop.0+0x264>)
   20174:	f7f0 f85e 	bl	10234 <z_impl_z_log_msg_static_create>
			data->async->hw_rx_counting = false;
   20178:	2300      	movs	r3, #0
   2017a:	6932      	ldr	r2, [r6, #16]
   2017c:	f882 30cc 	strb.w	r3, [r2, #204]	; 0xcc
		ret = gppi_channel_alloc(&data->async->rx_cnt.ppi);
   20180:	6930      	ldr	r0, [r6, #16]
   20182:	30b8      	adds	r0, #184	; 0xb8
   20184:	f005 fd64 	bl	25c50 <nrfx_dppi_channel_alloc>
		if (ret != NRFX_SUCCESS) {
   20188:	4b4d      	ldr	r3, [pc, #308]	; (202c0 <uarte_instance_init.constprop.0+0x25c>)
   2018a:	4298      	cmp	r0, r3
   2018c:	d011      	beq.n	201b2 <uarte_instance_init.constprop.0+0x14e>
			LOG_ERR("Failed to allocate PPI Channel, "
   2018e:	4b56      	ldr	r3, [pc, #344]	; (202e8 <uarte_instance_init.constprop.0+0x284>)
   20190:	9307      	str	r3, [sp, #28]
   20192:	2302      	movs	r3, #2
   20194:	9306      	str	r3, [sp, #24]
   20196:	2300      	movs	r3, #0
   20198:	484b      	ldr	r0, [pc, #300]	; (202c8 <uarte_instance_init.constprop.0+0x264>)
   2019a:	aa06      	add	r2, sp, #24
   2019c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   201a0:	f7f0 f848 	bl	10234 <z_impl_z_log_msg_static_create>
			data->async->hw_rx_counting = false;
   201a4:	2200      	movs	r2, #0
   201a6:	6933      	ldr	r3, [r6, #16]
			nrfx_timer_uninit(&cfg->timer);
   201a8:	4650      	mov	r0, sl
			data->async->hw_rx_counting = false;
   201aa:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
			nrfx_timer_uninit(&cfg->timer);
   201ae:	f006 fba9 	bl	26904 <nrfx_timer_uninit>
		nrf_uarte_publish_set(uarte,
   201b2:	6933      	ldr	r3, [r6, #16]
            ((uint32_t)channel | UARTE_PUBLISH_CTS_EN_Msk);
   201b4:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
   201b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
   201bc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
		nrf_timer_subscribe_set(cfg->timer.p_reg,
   201c0:	6933      	ldr	r3, [r6, #16]
   201c2:	f8db 2010 	ldr.w	r2, [fp, #16]
NRF_STATIC_INLINE void nrf_timer_subscribe_set(NRF_TIMER_Type * p_reg,
                                               nrf_timer_task_t task,
                                               uint8_t          channel)
{
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
            ((uint32_t)channel | TIMER_SUBSCRIBE_START_EN_Msk);
   201c6:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
   201ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
   201ce:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		ret = gppi_channel_enable(data->async->rx_cnt.ppi);
   201d2:	6933      	ldr	r3, [r6, #16]
   201d4:	f893 00b8 	ldrb.w	r0, [r3, #184]	; 0xb8
   201d8:	f005 fd40 	bl	25c5c <nrfx_dppi_channel_enable>
		if (ret != NRFX_SUCCESS) {
   201dc:	4b38      	ldr	r3, [pc, #224]	; (202c0 <uarte_instance_init.constprop.0+0x25c>)
   201de:	4298      	cmp	r0, r3
   201e0:	f47f af7c 	bne.w	200dc <uarte_instance_init.constprop.0+0x78>
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
   201e4:	2301      	movs	r3, #1
   201e6:	6932      	ldr	r2, [r6, #16]
   201e8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
    p_reg->INTENSET = mask;
   201ec:	4a3f      	ldr	r2, [pc, #252]	; (202ec <uarte_instance_init.constprop.0+0x288>)
   201ee:	f8c7 2304 	str.w	r2, [r7, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   201f2:	2208      	movs	r2, #8
   201f4:	f8c7 2500 	str.w	r2, [r7, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   201f8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   201fc:	b1a2      	cbz	r2, 20228 <uarte_instance_init.constprop.0+0x1c4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   201fe:	607b      	str	r3, [r7, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20200:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   20204:	b91b      	cbnz	r3, 2020e <uarte_instance_init.constprop.0+0x1aa>
   20206:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
   2020a:	2b00      	cmp	r3, #0
   2020c:	d0f8      	beq.n	20200 <uarte_instance_init.constprop.0+0x19c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2020e:	2300      	movs	r3, #0
   20210:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
   20214:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
   20218:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   2021c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
   20220:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   20224:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
   20228:	6930      	ldr	r0, [r6, #16]
   2022a:	2200      	movs	r2, #0
   2022c:	4930      	ldr	r1, [pc, #192]	; (202f0 <uarte_instance_init.constprop.0+0x28c>)
   2022e:	3080      	adds	r0, #128	; 0x80
   20230:	f016 f874 	bl	3631c <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
   20234:	6933      	ldr	r3, [r6, #16]
	timer->user_data = user_data;
   20236:	f8c3 60b4 	str.w	r6, [r3, #180]	; 0xb4
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
   2023a:	6930      	ldr	r0, [r6, #16]
   2023c:	2200      	movs	r2, #0
   2023e:	492d      	ldr	r1, [pc, #180]	; (202f4 <uarte_instance_init.constprop.0+0x290>)
   20240:	3020      	adds	r0, #32
   20242:	f016 f86b 	bl	3631c <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
   20246:	6933      	ldr	r3, [r6, #16]
   20248:	655e      	str	r6, [r3, #84]	; 0x54
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   2024a:	f8d9 3004 	ldr.w	r3, [r9, #4]
   2024e:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   20250:	bf5c      	itt	pl
   20252:	f44f 7380 	movpl.w	r3, #256	; 0x100
   20256:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2025a:	f8d9 3004 	ldr.w	r3, [r9, #4]
   2025e:	06db      	lsls	r3, r3, #27
   20260:	bf44      	itt	mi
   20262:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   20266:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2026a:	f8d8 3018 	ldr.w	r3, [r8, #24]
   2026e:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   20272:	2300      	movs	r3, #0
   20274:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20278:	2301      	movs	r3, #1
   2027a:	60a3      	str	r3, [r4, #8]
   2027c:	60e3      	str	r3, [r4, #12]
	return 0;
   2027e:	e72f      	b.n	200e0 <uarte_instance_init.constprop.0+0x7c>
			nrfx_timer_enable(&cfg->timer);
   20280:	4650      	mov	r0, sl
   20282:	f006 faf9 	bl	26878 <nrfx_timer_enable>
			nrfx_timer_clear(&cfg->timer);
   20286:	4650      	mov	r0, sl
   20288:	f006 fb5a 	bl	26940 <nrfx_timer_clear>
   2028c:	e778      	b.n	20180 <uarte_instance_init.constprop.0+0x11c>
    p_reg->INTENSET = mask;
   2028e:	2304      	movs	r3, #4
   20290:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
	if (ret != 0) {
   20294:	e7a6      	b.n	201e4 <uarte_instance_init.constprop.0+0x180>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   20296:	2308      	movs	r3, #8
   20298:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   2029c:	f899 3008 	ldrb.w	r3, [r9, #8]
   202a0:	2b00      	cmp	r3, #0
   202a2:	d1d2      	bne.n	2024a <uarte_instance_init.constprop.0+0x1e6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   202a4:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   202a8:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   202ac:	f8d8 301c 	ldr.w	r3, [r8, #28]
   202b0:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   202b4:	2301      	movs	r3, #1
   202b6:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   202ba:	6023      	str	r3, [r4, #0]
}
   202bc:	e7c5      	b.n	2024a <uarte_instance_init.constprop.0+0x1e6>
   202be:	bf00      	nop
   202c0:	0bad0000 	.word	0x0bad0000
   202c4:	0003e20f 	.word	0x0003e20f
   202c8:	00037a60 	.word	0x00037a60
   202cc:	0003e266 	.word	0x0003e266
   202d0:	00039995 	.word	0x00039995
   202d4:	0003e22e 	.word	0x0003e22e
   202d8:	40017000 	.word	0x40017000
   202dc:	07030100 	.word	0x07030100
   202e0:	0003412d 	.word	0x0003412d
   202e4:	0003e26a 	.word	0x0003e26a
   202e8:	0003e2aa 	.word	0x0003e2aa
   202ec:	000a0210 	.word	0x000a0210
   202f0:	0003471f 	.word	0x0003471f
   202f4:	00034807 	.word	0x00034807

000202f8 <uarte_nrfx_isr_async>:
{
   202f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   202fc:	6843      	ldr	r3, [r0, #4]
{
   202fe:	4604      	mov	r4, r0
	return config->uarte_regs;
   20300:	681d      	ldr	r5, [r3, #0]
	struct uarte_nrfx_data *data = dev->data;
   20302:	6903      	ldr	r3, [r0, #16]
{
   20304:	b088      	sub	sp, #32
	if (!HW_RX_COUNTING_ENABLED(data)
   20306:	691a      	ldr	r2, [r3, #16]
   20308:	f892 20cc 	ldrb.w	r2, [r2, #204]	; 0xcc
   2030c:	b97a      	cbnz	r2, 2032e <uarte_nrfx_isr_async+0x36>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2030e:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
	    && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXDRDY)) {
   20312:	b161      	cbz	r1, 2032e <uarte_nrfx_isr_async+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20314:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
   20318:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
		data->async->rx_cnt.cnt++;
   2031c:	691a      	ldr	r2, [r3, #16]
   2031e:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
   20322:	3301      	adds	r3, #1
   20324:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
}
   20328:	b008      	add	sp, #32
   2032a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2032e:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   20332:	b32b      	cbz	r3, 20380 <uarte_nrfx_isr_async+0x88>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20334:	2100      	movs	r1, #0
   20336:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
   2033a:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	return config->uarte_regs;
   2033e:	6863      	ldr	r3, [r4, #4]
	struct uart_event evt = {
   20340:	2214      	movs	r2, #20
	return config->uarte_regs;
   20342:	681b      	ldr	r3, [r3, #0]
	struct uart_event evt = {
   20344:	a803      	add	r0, sp, #12
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   20346:	f8d3 6480 	ldr.w	r6, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2034a:	f8c3 6480 	str.w	r6, [r3, #1152]	; 0x480
   2034e:	f016 f90b 	bl	36568 <memset>
   20352:	2306      	movs	r3, #6
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   20354:	07f2      	lsls	r2, r6, #31
	struct uart_event evt = {
   20356:	f88d 300c 	strb.w	r3, [sp, #12]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   2035a:	f100 80f7 	bmi.w	2054c <uarte_nrfx_isr_async+0x254>
   2035e:	07b3      	lsls	r3, r6, #30
   20360:	f100 80f6 	bmi.w	20550 <uarte_nrfx_isr_async+0x258>
   20364:	0777      	lsls	r7, r6, #29
   20366:	f100 80f5 	bmi.w	20554 <uarte_nrfx_isr_async+0x25c>
   2036a:	f006 0608 	and.w	r6, r6, #8
	user_callback(dev, &evt);
   2036e:	4620      	mov	r0, r4
   20370:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   20372:	f88d 6010 	strb.w	r6, [sp, #16]
	user_callback(dev, &evt);
   20376:	f013 feda 	bl	3412e <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
   2037a:	4620      	mov	r0, r4
   2037c:	f014 f83d 	bl	343fa <uarte_nrfx_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20380:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
   20384:	2b00      	cmp	r3, #0
   20386:	d033      	beq.n	203f0 <uarte_nrfx_isr_async+0xf8>
    return p_reg->INTENSET & mask;
   20388:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
   2038c:	06d8      	lsls	r0, r3, #27
   2038e:	d52f      	bpl.n	203f0 <uarte_nrfx_isr_async+0xf8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20390:	f04f 0800 	mov.w	r8, #0
	data->async->is_in_irq = true;
   20394:	2201      	movs	r2, #1
   20396:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
	struct uarte_nrfx_data *data = dev->data;
   2039a:	6926      	ldr	r6, [r4, #16]
   2039c:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	return config->uarte_regs;
   203a0:	6863      	ldr	r3, [r4, #4]
   203a2:	681f      	ldr	r7, [r3, #0]
	data->async->is_in_irq = true;
   203a4:	6933      	ldr	r3, [r6, #16]
   203a6:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
	k_timer_stop(&data->async->rx_timeout_timer);
   203aa:	6930      	ldr	r0, [r6, #16]
   203ac:	3080      	adds	r0, #128	; 0x80
	z_impl_k_timer_stop(timer);
   203ae:	f015 ffc1 	bl	36334 <z_impl_k_timer_stop>
				data->async->rx_flush_cnt;
   203b2:	6932      	ldr	r2, [r6, #16]
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
   203b4:	f8d7 153c 	ldr.w	r1, [r7, #1340]	; 0x53c
   203b8:	f892 30c9 	ldrb.w	r3, [r2, #201]	; 0xc9
	data->async->rx_flush_cnt = 0;
   203bc:	f882 80c9 	strb.w	r8, [r2, #201]	; 0xc9
	int rx_len = rx_amount - data->async->rx_offset;
   203c0:	6932      	ldr	r2, [r6, #16]
   203c2:	6e10      	ldr	r0, [r2, #96]	; 0x60
   203c4:	1a1b      	subs	r3, r3, r0
   203c6:	440b      	add	r3, r1
	data->async->rx_total_user_byte_cnt += rx_len;
   203c8:	6f10      	ldr	r0, [r2, #112]	; 0x70
	if (rx_len < 0) {
   203ca:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
	data->async->rx_total_user_byte_cnt += rx_len;
   203ce:	4408      	add	r0, r1
	if (rx_len > 0) {
   203d0:	4543      	cmp	r3, r8
	data->async->rx_total_user_byte_cnt += rx_len;
   203d2:	6710      	str	r0, [r2, #112]	; 0x70
	if (rx_len > 0) {
   203d4:	dd02      	ble.n	203dc <uarte_nrfx_isr_async+0xe4>
		notify_uart_rx_rdy(dev, rx_len);
   203d6:	4620      	mov	r0, r4
   203d8:	f013 feb0 	bl	3413c <notify_uart_rx_rdy>
	if (!data->async->rx_enabled) {
   203dc:	6931      	ldr	r1, [r6, #16]
   203de:	f891 30ca 	ldrb.w	r3, [r1, #202]	; 0xca
   203e2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   203e6:	2b00      	cmp	r3, #0
   203e8:	f040 80b6 	bne.w	20558 <uarte_nrfx_isr_async+0x260>
		data->async->is_in_irq = false;
   203ec:	f881 20ce 	strb.w	r2, [r1, #206]	; 0xce
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   203f0:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
   203f4:	b383      	cbz	r3, 20458 <uarte_nrfx_isr_async+0x160>
   203f6:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
   203fa:	bb6e      	cbnz	r6, 20458 <uarte_nrfx_isr_async+0x160>
	struct uart_event evt = {
   203fc:	2214      	movs	r2, #20
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   203fe:	f8c5 614c 	str.w	r6, [r5, #332]	; 0x14c
   20402:	4631      	mov	r1, r6
   20404:	a803      	add	r0, sp, #12
   20406:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	struct uarte_nrfx_data *data = dev->data;
   2040a:	6927      	ldr	r7, [r4, #16]
	struct uart_event evt = {
   2040c:	f016 f8ac 	bl	36568 <memset>
   20410:	2303      	movs	r3, #3
	user_callback(dev, &evt);
   20412:	a903      	add	r1, sp, #12
   20414:	4620      	mov	r0, r4
	struct uart_event evt = {
   20416:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
   2041a:	f013 fe88 	bl	3412e <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_US) {
   2041e:	693b      	ldr	r3, [r7, #16]
   20420:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   20422:	1c51      	adds	r1, r2, #1
   20424:	d018      	beq.n	20458 <uarte_nrfx_isr_async+0x160>
		data->async->rx_timeout_left = data->async->rx_timeout;
   20426:	67da      	str	r2, [r3, #124]	; 0x7c
		k_timer_start(&data->async->rx_timeout_timer,
   20428:	693f      	ldr	r7, [r7, #16]
   2042a:	4984      	ldr	r1, [pc, #528]	; (2063c <uarte_nrfx_isr_async+0x344>)
			      K_USEC(data->async->rx_timeout_slab),
   2042c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
   2042e:	468e      	mov	lr, r1
   20430:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
   20434:	4631      	mov	r1, r6
   20436:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   2043a:	fbcc e100 	smlal	lr, r1, ip, r0
   2043e:	2300      	movs	r3, #0
   20440:	4670      	mov	r0, lr
   20442:	4a7f      	ldr	r2, [pc, #508]	; (20640 <uarte_nrfx_isr_async+0x348>)
   20444:	f7e8 fd26 	bl	8e94 <__aeabi_uldivmod>
   20448:	4602      	mov	r2, r0
   2044a:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   2044c:	e9cd 0100 	strd	r0, r1, [sp]
   20450:	f107 0080 	add.w	r0, r7, #128	; 0x80
   20454:	f00b fc52 	bl	2bcfc <z_impl_k_timer_start>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20458:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   2045c:	b363      	cbz	r3, 204b8 <uarte_nrfx_isr_async+0x1c0>
   2045e:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
   20462:	bb4e      	cbnz	r6, 204b8 <uarte_nrfx_isr_async+0x1c0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20464:	f8c5 6144 	str.w	r6, [r5, #324]	; 0x144
	struct uarte_nrfx_data *data = dev->data;
   20468:	6927      	ldr	r7, [r4, #16]
	rx_buf_release(dev, &data->async->rx_buf);
   2046a:	4620      	mov	r0, r4
   2046c:	6939      	ldr	r1, [r7, #16]
   2046e:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
   20472:	3158      	adds	r1, #88	; 0x58
	const struct uarte_nrfx_config *config = dev->config;
   20474:	f8d4 8004 	ldr.w	r8, [r4, #4]
	rx_buf_release(dev, &data->async->rx_buf);
   20478:	f013 fe79 	bl	3416e <rx_buf_release>
	rx_buf_release(dev, &data->async->rx_next_buf);
   2047c:	6939      	ldr	r1, [r7, #16]
   2047e:	4620      	mov	r0, r4
   20480:	3164      	adds	r1, #100	; 0x64
   20482:	f013 fe74 	bl	3416e <rx_buf_release>
	data->async->rx_enabled = false;
   20486:	693b      	ldr	r3, [r7, #16]
   20488:	f883 60ca 	strb.w	r6, [r3, #202]	; 0xca
	if (data->async->discard_rx_fifo) {
   2048c:	693b      	ldr	r3, [r7, #16]
   2048e:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
   20492:	b132      	cbz	r2, 204a2 <uarte_nrfx_isr_async+0x1aa>
		data->async->discard_rx_fifo = false;
   20494:	f883 60cb 	strb.w	r6, [r3, #203]	; 0xcb
		(void)rx_flush(dev, NULL, 0);
   20498:	4632      	mov	r2, r6
   2049a:	4631      	mov	r1, r6
   2049c:	6860      	ldr	r0, [r4, #4]
   2049e:	f013 ffe9 	bl	34474 <rx_flush.isra.0>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   204a2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   204a6:	06d8      	lsls	r0, r3, #27
   204a8:	d503      	bpl.n	204b2 <uarte_nrfx_isr_async+0x1ba>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
   204aa:	2102      	movs	r1, #2
   204ac:	4620      	mov	r0, r4
   204ae:	f014 f816 	bl	344de <async_uart_release>
	notify_rx_disable(dev);
   204b2:	4620      	mov	r0, r4
   204b4:	f013 fe73 	bl	3419e <notify_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   204b8:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
   204bc:	b133      	cbz	r3, 204cc <uarte_nrfx_isr_async+0x1d4>
    return p_reg->INTENSET & mask;
   204be:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
   204c2:	05d9      	lsls	r1, r3, #23
   204c4:	d502      	bpl.n	204cc <uarte_nrfx_isr_async+0x1d4>
		endtx_isr(dev);
   204c6:	6860      	ldr	r0, [r4, #4]
   204c8:	f014 f8a5 	bl	34616 <endtx_isr.isra.0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   204cc:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
   204d0:	2b00      	cmp	r3, #0
   204d2:	f43f af29 	beq.w	20328 <uarte_nrfx_isr_async+0x30>
    return p_reg->INTENSET & mask;
   204d6:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
   204da:	025a      	lsls	r2, r3, #9
   204dc:	f57f af24 	bpl.w	20328 <uarte_nrfx_isr_async+0x30>
	const struct uarte_nrfx_config *config = dev->config;
   204e0:	6863      	ldr	r3, [r4, #4]
	struct uarte_nrfx_data *data = dev->data;
   204e2:	6925      	ldr	r5, [r4, #16]
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   204e4:	e9d3 7300 	ldrd	r7, r3, [r3]
   204e8:	06db      	lsls	r3, r3, #27
   204ea:	d466      	bmi.n	205ba <uarte_nrfx_isr_async+0x2c2>
	if (!data->async->tx_buf) {
   204ec:	692b      	ldr	r3, [r5, #16]
   204ee:	689b      	ldr	r3, [r3, #8]
   204f0:	2b00      	cmp	r3, #0
   204f2:	f43f af19 	beq.w	20328 <uarte_nrfx_isr_async+0x30>
	__asm__ volatile(
   204f6:	f04f 0320 	mov.w	r3, #32
   204fa:	f3ef 8211 	mrs	r2, BASEPRI
   204fe:	f383 8812 	msr	BASEPRI_MAX, r3
   20502:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
   20506:	692b      	ldr	r3, [r5, #16]
   20508:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
   2050c:	2900      	cmp	r1, #0
   2050e:	bfac      	ite	ge
   20510:	f8d3 60bc 	ldrge.w	r6, [r3, #188]	; 0xbc
    return p_reg->TXD.AMOUNT;
   20514:	f8d7 654c 	ldrlt.w	r6, [r7, #1356]	; 0x54c
	__asm__ volatile(
   20518:	f382 8811 	msr	BASEPRI, r2
   2051c:	f3bf 8f6f 	isb	sy
	if (data->async->pending_tx) {
   20520:	692b      	ldr	r3, [r5, #16]
   20522:	f893 20cd 	ldrb.w	r2, [r3, #205]	; 0xcd
   20526:	2a00      	cmp	r2, #0
   20528:	d054      	beq.n	205d4 <uarte_nrfx_isr_async+0x2dc>
	__asm__ volatile(
   2052a:	f04f 0320 	mov.w	r3, #32
   2052e:	f3ef 8611 	mrs	r6, BASEPRI
   20532:	f383 8812 	msr	BASEPRI_MAX, r3
   20536:	f3bf 8f6f 	isb	sy
				start_tx_locked(dev, data);
   2053a:	4629      	mov	r1, r5
   2053c:	4620      	mov	r0, r4
   2053e:	f014 f817 	bl	34570 <start_tx_locked>
	__asm__ volatile(
   20542:	f386 8811 	msr	BASEPRI, r6
   20546:	f3bf 8f6f 	isb	sy
				return;
   2054a:	e6ed      	b.n	20328 <uarte_nrfx_isr_async+0x30>
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   2054c:	2601      	movs	r6, #1
   2054e:	e70e      	b.n	2036e <uarte_nrfx_isr_async+0x76>
   20550:	2602      	movs	r6, #2
   20552:	e70c      	b.n	2036e <uarte_nrfx_isr_async+0x76>
   20554:	2604      	movs	r6, #4
   20556:	e70a      	b.n	2036e <uarte_nrfx_isr_async+0x76>
	rx_buf_release(dev, &data->async->rx_buf);
   20558:	4620      	mov	r0, r4
   2055a:	3158      	adds	r1, #88	; 0x58
   2055c:	f013 fe07 	bl	3416e <rx_buf_release>
	__asm__ volatile(
   20560:	f04f 0320 	mov.w	r3, #32
   20564:	f3ef 8111 	mrs	r1, BASEPRI
   20568:	f383 8812 	msr	BASEPRI_MAX, r3
   2056c:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
   20570:	6933      	ldr	r3, [r6, #16]
   20572:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   20574:	b1f2      	cbz	r2, 205b4 <uarte_nrfx_isr_async+0x2bc>
		data->async->rx_buf = data->async->rx_next_buf;
   20576:	659a      	str	r2, [r3, #88]	; 0x58
		data->async->rx_buf_len = data->async->rx_next_buf_len;
   20578:	6933      	ldr	r3, [r6, #16]
   2057a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   2057c:	65da      	str	r2, [r3, #92]	; 0x5c
		data->async->rx_next_buf = NULL;
   2057e:	2300      	movs	r3, #0
   20580:	6932      	ldr	r2, [r6, #16]
   20582:	6653      	str	r3, [r2, #100]	; 0x64
		data->async->rx_next_buf_len = 0;
   20584:	6932      	ldr	r2, [r6, #16]
   20586:	6693      	str	r3, [r2, #104]	; 0x68
		data->async->rx_offset = 0;
   20588:	6932      	ldr	r2, [r6, #16]
   2058a:	6613      	str	r3, [r2, #96]	; 0x60
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2058c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   20590:	b90b      	cbnz	r3, 20596 <uarte_nrfx_isr_async+0x29e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20592:	2301      	movs	r3, #1
   20594:	603b      	str	r3, [r7, #0]
    p_reg->SHORTS &= ~(mask);
   20596:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
   2059a:	f023 0320 	bic.w	r3, r3, #32
   2059e:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
	__asm__ volatile(
   205a2:	f381 8811 	msr	BASEPRI, r1
   205a6:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
   205aa:	2200      	movs	r2, #0
   205ac:	6933      	ldr	r3, [r6, #16]
   205ae:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
   205b2:	e71d      	b.n	203f0 <uarte_nrfx_isr_async+0xf8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   205b4:	2301      	movs	r3, #1
   205b6:	607b      	str	r3, [r7, #4]
}
   205b8:	e7f3      	b.n	205a2 <uarte_nrfx_isr_async+0x2aa>
    p_reg->INTENCLR = mask;
   205ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
		async_uart_release(dev, UARTE_LOW_POWER_TX);
   205be:	2101      	movs	r1, #1
   205c0:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
   205c4:	4620      	mov	r0, r4
   205c6:	f013 ff8a 	bl	344de <async_uart_release>
		if (!data->async->tx_size) {
   205ca:	692b      	ldr	r3, [r5, #16]
   205cc:	68db      	ldr	r3, [r3, #12]
   205ce:	2b00      	cmp	r3, #0
   205d0:	d18c      	bne.n	204ec <uarte_nrfx_isr_async+0x1f4>
   205d2:	e6a9      	b.n	20328 <uarte_nrfx_isr_async+0x30>
	if (data->async->tx_buf != data->async->xfer_buf) {
   205d4:	6899      	ldr	r1, [r3, #8]
   205d6:	691a      	ldr	r2, [r3, #16]
   205d8:	4291      	cmp	r1, r2
   205da:	d00c      	beq.n	205f6 <uarte_nrfx_isr_async+0x2fe>
		if (amount == data->async->xfer_len) {
   205dc:	6959      	ldr	r1, [r3, #20]
			data->async->tx_cache_offset += amount;
   205de:	69da      	ldr	r2, [r3, #28]
		if (amount == data->async->xfer_len) {
   205e0:	42b1      	cmp	r1, r6
			data->async->tx_cache_offset += amount;
   205e2:	4432      	add	r2, r6
		if (amount == data->async->xfer_len) {
   205e4:	d128      	bne.n	20638 <uarte_nrfx_isr_async+0x340>
			if (setup_tx_cache(data)) {
   205e6:	4628      	mov	r0, r5
			data->async->tx_cache_offset += amount;
   205e8:	61da      	str	r2, [r3, #28]
			if (setup_tx_cache(data)) {
   205ea:	f013 ff2b 	bl	34444 <setup_tx_cache>
   205ee:	2800      	cmp	r0, #0
   205f0:	d19b      	bne.n	2052a <uarte_nrfx_isr_async+0x232>
			amount = data->async->tx_cache_offset;
   205f2:	692b      	ldr	r3, [r5, #16]
   205f4:	69de      	ldr	r6, [r3, #28]
	k_timer_stop(&data->async->tx_timeout_timer);
   205f6:	6928      	ldr	r0, [r5, #16]
   205f8:	3020      	adds	r0, #32
	z_impl_k_timer_stop(timer);
   205fa:	f015 fe9b 	bl	36334 <z_impl_k_timer_stop>
	struct uart_event evt = {
   205fe:	2214      	movs	r2, #20
   20600:	2100      	movs	r1, #0
   20602:	a803      	add	r0, sp, #12
   20604:	f015 ffb0 	bl	36568 <memset>
		.data.tx.buf = data->async->tx_buf,
   20608:	692b      	ldr	r3, [r5, #16]
	user_callback(dev, &evt);
   2060a:	4620      	mov	r0, r4
	struct uart_event evt = {
   2060c:	689a      	ldr	r2, [r3, #8]
	user_callback(dev, &evt);
   2060e:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   20610:	e9cd 2604 	strd	r2, r6, [sp, #16]
	if (amount == data->async->tx_size) {
   20614:	68db      	ldr	r3, [r3, #12]
   20616:	429e      	cmp	r6, r3
		evt.type = UART_TX_ABORTED;
   20618:	bf1c      	itt	ne
   2061a:	2301      	movne	r3, #1
   2061c:	f88d 300c 	strbne.w	r3, [sp, #12]
   20620:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   20624:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
	data->async->tx_buf = NULL;
   20628:	2300      	movs	r3, #0
   2062a:	692a      	ldr	r2, [r5, #16]
   2062c:	6093      	str	r3, [r2, #8]
	data->async->tx_size = 0;
   2062e:	692a      	ldr	r2, [r5, #16]
   20630:	60d3      	str	r3, [r2, #12]
	user_callback(dev, &evt);
   20632:	f013 fd7c 	bl	3412e <user_callback>
   20636:	e677      	b.n	20328 <uarte_nrfx_isr_async+0x30>
			amount += data->async->tx_cache_offset;
   20638:	4616      	mov	r6, r2
   2063a:	e7dc      	b.n	205f6 <uarte_nrfx_isr_async+0x2fe>
   2063c:	000f423f 	.word	0x000f423f
   20640:	000f4240 	.word	0x000f4240

00020644 <nrf_gpio_pin_port_decode>:
{
   20644:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   20646:	6802      	ldr	r2, [r0, #0]
    switch (port)
   20648:	0953      	lsrs	r3, r2, #5
   2064a:	d104      	bne.n	20656 <nrf_gpio_pin_port_decode+0x12>
    return (mask & (1UL << pin_number)) ? true : false;
   2064c:	f04f 33ff 	mov.w	r3, #4294967295
   20650:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   20652:	07db      	lsls	r3, r3, #31
   20654:	d40b      	bmi.n	2066e <nrf_gpio_pin_port_decode+0x2a>
   20656:	4907      	ldr	r1, [pc, #28]	; (20674 <nrf_gpio_pin_port_decode+0x30>)
   20658:	4807      	ldr	r0, [pc, #28]	; (20678 <nrf_gpio_pin_port_decode+0x34>)
   2065a:	f240 2347 	movw	r3, #583	; 0x247
   2065e:	4a07      	ldr	r2, [pc, #28]	; (2067c <nrf_gpio_pin_port_decode+0x38>)
   20660:	f00e feb0 	bl	2f3c4 <assert_print>
   20664:	f240 2147 	movw	r1, #583	; 0x247
   20668:	4804      	ldr	r0, [pc, #16]	; (2067c <nrf_gpio_pin_port_decode+0x38>)
   2066a:	f00e fea4 	bl	2f3b6 <assert_post_action>
}
   2066e:	4804      	ldr	r0, [pc, #16]	; (20680 <nrf_gpio_pin_port_decode+0x3c>)
   20670:	bd08      	pop	{r3, pc}
   20672:	bf00      	nop
   20674:	0003e147 	.word	0x0003e147
   20678:	00039995 	.word	0x00039995
   2067c:	0003e114 	.word	0x0003e114
   20680:	40842500 	.word	0x40842500

00020684 <rdy_pin_idle.constprop.0>:

	return 0;
}

/* Pin activated to detect high state (using SENSE). */
static void rdy_pin_idle(struct lpuart_data *data)
   20684:	b537      	push	{r0, r1, r2, r4, r5, lr}
{
	nrfx_err_t err;
	nrfx_gpiote_trigger_config_t trigger_config = {
   20686:	2300      	movs	r3, #0
   20688:	2205      	movs	r2, #5
   2068a:	e9cd 3300 	strd	r3, r3, [sp]
		.trigger = NRFX_GPIOTE_TRIGGER_HIGH
	};

	err = nrfx_gpiote_input_configure(data->rdy_pin, NULL, &trigger_config, NULL);
   2068e:	4619      	mov	r1, r3
	nrfx_gpiote_trigger_config_t trigger_config = {
   20690:	f88d 2000 	strb.w	r2, [sp]
static void rdy_pin_idle(struct lpuart_data *data)
   20694:	4604      	mov	r4, r0
	err = nrfx_gpiote_input_configure(data->rdy_pin, NULL, &trigger_config, NULL);
   20696:	466a      	mov	r2, sp
   20698:	6880      	ldr	r0, [r0, #8]
   2069a:	f005 fbc1 	bl	25e20 <nrfx_gpiote_input_configure>
	__ASSERT(err == NRFX_SUCCESS, "Unexpected err: %08x/%d", err, err);
   2069e:	4b0d      	ldr	r3, [pc, #52]	; (206d4 <rdy_pin_idle.constprop.0+0x50>)
	err = nrfx_gpiote_input_configure(data->rdy_pin, NULL, &trigger_config, NULL);
   206a0:	4605      	mov	r5, r0
	__ASSERT(err == NRFX_SUCCESS, "Unexpected err: %08x/%d", err, err);
   206a2:	4298      	cmp	r0, r3
   206a4:	d010      	beq.n	206c8 <rdy_pin_idle.constprop.0+0x44>
   206a6:	f44f 7381 	mov.w	r3, #258	; 0x102
   206aa:	4a0b      	ldr	r2, [pc, #44]	; (206d8 <rdy_pin_idle.constprop.0+0x54>)
   206ac:	490b      	ldr	r1, [pc, #44]	; (206dc <rdy_pin_idle.constprop.0+0x58>)
   206ae:	480c      	ldr	r0, [pc, #48]	; (206e0 <rdy_pin_idle.constprop.0+0x5c>)
   206b0:	f00e fe88 	bl	2f3c4 <assert_print>
   206b4:	4629      	mov	r1, r5
   206b6:	480b      	ldr	r0, [pc, #44]	; (206e4 <rdy_pin_idle.constprop.0+0x60>)
   206b8:	462a      	mov	r2, r5
   206ba:	f00e fe83 	bl	2f3c4 <assert_print>
   206be:	f44f 7181 	mov.w	r1, #258	; 0x102
   206c2:	4805      	ldr	r0, [pc, #20]	; (206d8 <rdy_pin_idle.constprop.0+0x54>)
   206c4:	f00e fe77 	bl	2f3b6 <assert_post_action>

	nrfx_gpiote_trigger_enable(data->rdy_pin, true);
   206c8:	2101      	movs	r1, #1
   206ca:	68a0      	ldr	r0, [r4, #8]
   206cc:	f005 fd3c 	bl	26148 <nrfx_gpiote_trigger_enable>
}
   206d0:	b003      	add	sp, #12
   206d2:	bd30      	pop	{r4, r5, pc}
   206d4:	0bad0000 	.word	0x0bad0000
   206d8:	0003e313 	.word	0x0003e313
   206dc:	0003e1a2 	.word	0x0003e1a2
   206e0:	00039995 	.word	0x00039995
   206e4:	0003e347 	.word	0x0003e347

000206e8 <api_rx_enable>:
	return err;
}

static int api_rx_enable(const struct device *dev, uint8_t *buf,
			 size_t len, int32_t timeout)
{
   206e8:	b570      	push	{r4, r5, r6, lr}
	return dev->data;
   206ea:	6900      	ldr	r0, [r0, #16]
	struct lpuart_data *data = get_dev_data(dev);

	__ASSERT_NO_MSG(data->rx_state == RX_OFF);
   206ec:	f890 406c 	ldrb.w	r4, [r0, #108]	; 0x6c
   206f0:	b15c      	cbz	r4, 2070a <api_rx_enable+0x22>
   206f2:	4912      	ldr	r1, [pc, #72]	; (2073c <api_rx_enable+0x54>)
   206f4:	4812      	ldr	r0, [pc, #72]	; (20740 <api_rx_enable+0x58>)
   206f6:	f240 23b5 	movw	r3, #693	; 0x2b5
   206fa:	4a12      	ldr	r2, [pc, #72]	; (20744 <api_rx_enable+0x5c>)
   206fc:	f00e fe62 	bl	2f3c4 <assert_print>
   20700:	f240 21b5 	movw	r1, #693	; 0x2b5
   20704:	480f      	ldr	r0, [pc, #60]	; (20744 <api_rx_enable+0x5c>)
   20706:	f00e fe56 	bl	2f3b6 <assert_post_action>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2070a:	f100 0558 	add.w	r5, r0, #88	; 0x58
   2070e:	e8d5 6fef 	ldaex	r6, [r5]
   20712:	2e00      	cmp	r6, #0
   20714:	d104      	bne.n	20720 <api_rx_enable+0x38>
   20716:	e8c5 1fec 	stlex	ip, r1, [r5]
   2071a:	f1bc 0f00 	cmp.w	ip, #0
   2071e:	d1f6      	bne.n	2070e <api_rx_enable+0x26>

	if (!atomic_ptr_cas((atomic_ptr_t *)&data->rx_buf, NULL, buf)) {
   20720:	d108      	bne.n	20734 <api_rx_enable+0x4c>
		return -EBUSY;
	}

	data->rx_len = len;
	data->rx_timeout = timeout;
   20722:	e9c0 2317 	strd	r2, r3, [r0, #92]	; 0x5c
	data->rx_state = RX_IDLE;
   20726:	2301      	movs	r3, #1
   20728:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c

	LOG_DBG("RX: Enabling");
	rdy_pin_idle(data);
   2072c:	f7ff ffaa 	bl	20684 <rdy_pin_idle.constprop.0>

	return 0;
   20730:	4620      	mov	r0, r4
}
   20732:	bd70      	pop	{r4, r5, r6, pc}
		return -EBUSY;
   20734:	f06f 000f 	mvn.w	r0, #15
   20738:	e7fb      	b.n	20732 <api_rx_enable+0x4a>
   2073a:	bf00      	nop
   2073c:	0003e361 	.word	0x0003e361
   20740:	00039995 	.word	0x00039995
   20744:	0003e313 	.word	0x0003e313

00020748 <api_rx_buf_rsp>:

static int api_rx_buf_rsp(const struct device *dev, uint8_t *buf, size_t len)
{
   20748:	b570      	push	{r4, r5, r6, lr}
	return dev->data;
   2074a:	6900      	ldr	r0, [r0, #16]
	struct lpuart_data *data = get_dev_data(dev);

	__ASSERT_NO_MSG((data->rx_state != RX_OFF) &&
   2074c:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
   20750:	b10b      	cbz	r3, 20756 <api_rx_buf_rsp+0xe>
   20752:	2b06      	cmp	r3, #6
   20754:	d10b      	bne.n	2076e <api_rx_buf_rsp+0x26>
   20756:	490f      	ldr	r1, [pc, #60]	; (20794 <api_rx_buf_rsp+0x4c>)
   20758:	480f      	ldr	r0, [pc, #60]	; (20798 <api_rx_buf_rsp+0x50>)
   2075a:	f240 23c9 	movw	r3, #713	; 0x2c9
   2075e:	4a0f      	ldr	r2, [pc, #60]	; (2079c <api_rx_buf_rsp+0x54>)
   20760:	f00e fe30 	bl	2f3c4 <assert_print>
   20764:	f240 21c9 	movw	r1, #713	; 0x2c9
   20768:	480c      	ldr	r0, [pc, #48]	; (2079c <api_rx_buf_rsp+0x54>)
   2076a:	f00e fe24 	bl	2f3b6 <assert_post_action>
		 (data->rx_state != RX_TO_OFF));

	LOG_DBG("buf rsp, state:%d", data->rx_state);
	if (data->rx_state == RX_TO_IDLE || data->rx_state == RX_BLOCKED) {
   2076e:	3b04      	subs	r3, #4
   20770:	2b01      	cmp	r3, #1
   20772:	d905      	bls.n	20780 <api_rx_buf_rsp+0x38>

		return 0;
	}

	return uart_rx_buf_rsp(data->uart, buf, len);
}
   20774:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return uart_rx_buf_rsp(data->uart, buf, len);
   20778:	6800      	ldr	r0, [r0, #0]
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
				(const struct uart_driver_api *)dev->api;

	return api->rx_buf_rsp(dev, buf, len);
   2077a:	6883      	ldr	r3, [r0, #8]
   2077c:	691b      	ldr	r3, [r3, #16]
   2077e:	4718      	bx	r3
		data->rx_state = RX_IDLE;
   20780:	2301      	movs	r3, #1
		data->rx_len = len;
   20782:	e9c0 1216 	strd	r1, r2, [r0, #88]	; 0x58
		data->rx_state = RX_IDLE;
   20786:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
		rdy_pin_idle(data);
   2078a:	f7ff ff7b 	bl	20684 <rdy_pin_idle.constprop.0>
}
   2078e:	2000      	movs	r0, #0
   20790:	bd70      	pop	{r4, r5, r6, pc}
   20792:	bf00      	nop
   20794:	0003e37a 	.word	0x0003e37a
   20798:	00039995 	.word	0x00039995
   2079c:	0003e313 	.word	0x0003e313

000207a0 <int_driven_rx_feed>:
	return data->int_driven.rxlen - data->int_driven.rxrd;
}

static void int_driven_rx_feed(const struct device *dev,
			       struct lpuart_data *data)
{
   207a0:	b508      	push	{r3, lr}
	int err;

	data->int_driven.rxlen = 0;
   207a2:	2300      	movs	r3, #0
	data->int_driven.rxrd = 0;
	err = api_rx_buf_rsp(dev, data->int_driven.rxbuf,
   207a4:	2280      	movs	r2, #128	; 0x80
	data->int_driven.rxrd = 0;
   207a6:	e9c1 3363 	strd	r3, r3, [r1, #396]	; 0x18c
	err = api_rx_buf_rsp(dev, data->int_driven.rxbuf,
   207aa:	f501 7186 	add.w	r1, r1, #268	; 0x10c
   207ae:	f7ff ffcb 	bl	20748 <api_rx_buf_rsp>
			     sizeof(data->int_driven.rxbuf));
	__ASSERT_NO_MSG(err >= 0);
   207b2:	2800      	cmp	r0, #0
   207b4:	da0b      	bge.n	207ce <int_driven_rx_feed+0x2e>
   207b6:	4906      	ldr	r1, [pc, #24]	; (207d0 <int_driven_rx_feed+0x30>)
   207b8:	4806      	ldr	r0, [pc, #24]	; (207d4 <int_driven_rx_feed+0x34>)
   207ba:	f240 3303 	movw	r3, #771	; 0x303
   207be:	4a06      	ldr	r2, [pc, #24]	; (207d8 <int_driven_rx_feed+0x38>)
   207c0:	f00e fe00 	bl	2f3c4 <assert_print>
   207c4:	f240 3103 	movw	r1, #771	; 0x303
   207c8:	4803      	ldr	r0, [pc, #12]	; (207d8 <int_driven_rx_feed+0x38>)
   207ca:	f00e fdf4 	bl	2f3b6 <assert_post_action>
}
   207ce:	bd08      	pop	{r3, pc}
   207d0:	0003a37c 	.word	0x0003a37c
   207d4:	00039995 	.word	0x00039995
   207d8:	0003e313 	.word	0x0003e313

000207dc <int_driven_evt_handler>:

static void int_driven_evt_handler(const struct device *lpuart,
				   struct uart_event *evt,
				   void *user_data)
{
   207dc:	460b      	mov	r3, r1
   207de:	b510      	push	{r4, lr}
	struct lpuart_data *data = get_dev_data(lpuart);
	bool call_handler = false;

	switch (evt->type) {
   207e0:	781a      	ldrb	r2, [r3, #0]
	return dev->data;
   207e2:	6901      	ldr	r1, [r0, #16]
	switch (evt->type) {
   207e4:	2a06      	cmp	r2, #6
   207e6:	d823      	bhi.n	20830 <int_driven_evt_handler+0x54>
   207e8:	e8df f002 	tbb	[pc, r2]
   207ec:	230c2204 	.word	0x230c2204
   207f0:	2e22      	.short	0x2e22
   207f2:	2b          	.byte	0x2b
   207f3:	00          	.byte	0x00
	case UART_TX_DONE:
		data->int_driven.txlen = 0;
   207f4:	2300      	movs	r3, #0
   207f6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
	default:
		break;
	}

	if (call_handler) {
		data->int_driven.callback(lpuart, data->int_driven.user_data);
   207fa:	e9d1 3120 	ldrd	r3, r1, [r1, #128]	; 0x80
	}
}
   207fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		data->int_driven.callback(lpuart, data->int_driven.user_data);
   20802:	4718      	bx	r3
		__ASSERT_NO_MSG(data->int_driven.rxlen == 0);
   20804:	f8d1 218c 	ldr.w	r2, [r1, #396]	; 0x18c
   20808:	b15a      	cbz	r2, 20822 <int_driven_evt_handler+0x46>
   2080a:	491a      	ldr	r1, [pc, #104]	; (20874 <int_driven_evt_handler+0x98>)
   2080c:	f240 3313 	movw	r3, #787	; 0x313
   20810:	4a19      	ldr	r2, [pc, #100]	; (20878 <int_driven_evt_handler+0x9c>)
   20812:	481a      	ldr	r0, [pc, #104]	; (2087c <int_driven_evt_handler+0xa0>)
   20814:	f00e fdd6 	bl	2f3c4 <assert_print>
   20818:	f240 3113 	movw	r1, #787	; 0x313
		__ASSERT_NO_MSG(err >= 0);
   2081c:	4816      	ldr	r0, [pc, #88]	; (20878 <int_driven_evt_handler+0x9c>)
   2081e:	f00e fdca 	bl	2f3b6 <assert_post_action>
		data->int_driven.rxlen = evt->data.rx.len;
   20822:	68db      	ldr	r3, [r3, #12]
   20824:	f8c1 318c 	str.w	r3, [r1, #396]	; 0x18c
		call_handler = data->int_driven.rx_enabled;
   20828:	f891 3195 	ldrb.w	r3, [r1, #405]	; 0x195
	if (call_handler) {
   2082c:	2b00      	cmp	r3, #0
   2082e:	d1e4      	bne.n	207fa <int_driven_evt_handler+0x1e>
}
   20830:	bd10      	pop	{r4, pc}
		if (int_driven_rd_available(data) == 0) {
   20832:	e9d1 2363 	ldrd	r2, r3, [r1, #396]	; 0x18c
   20836:	429a      	cmp	r2, r3
   20838:	d1fa      	bne.n	20830 <int_driven_evt_handler+0x54>
}
   2083a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			int_driven_rx_feed(lpuart, data);
   2083e:	f7ff bfaf 	b.w	207a0 <int_driven_rx_feed>
		call_handler = data->int_driven.err_enabled;
   20842:	f891 3196 	ldrb.w	r3, [r1, #406]	; 0x196
		break;
   20846:	e7f1      	b.n	2082c <int_driven_evt_handler+0x50>
		data->int_driven.rxlen = 0;
   20848:	2300      	movs	r3, #0
		err = api_rx_enable(lpuart, data->int_driven.rxbuf,
   2084a:	2280      	movs	r2, #128	; 0x80
		data->int_driven.rxrd = 0;
   2084c:	e9c1 3363 	strd	r3, r3, [r1, #396]	; 0x18c
		err = api_rx_enable(lpuart, data->int_driven.rxbuf,
   20850:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   20854:	f501 7186 	add.w	r1, r1, #268	; 0x10c
   20858:	f7ff ff46 	bl	206e8 <api_rx_enable>
		__ASSERT_NO_MSG(err >= 0);
   2085c:	2800      	cmp	r0, #0
   2085e:	dae7      	bge.n	20830 <int_driven_evt_handler+0x54>
   20860:	4907      	ldr	r1, [pc, #28]	; (20880 <int_driven_evt_handler+0xa4>)
   20862:	f240 3327 	movw	r3, #807	; 0x327
   20866:	4a04      	ldr	r2, [pc, #16]	; (20878 <int_driven_evt_handler+0x9c>)
   20868:	4804      	ldr	r0, [pc, #16]	; (2087c <int_driven_evt_handler+0xa0>)
   2086a:	f00e fdab 	bl	2f3c4 <assert_print>
   2086e:	f240 3127 	movw	r1, #807	; 0x327
   20872:	e7d3      	b.n	2081c <int_driven_evt_handler+0x40>
   20874:	0003e3b6 	.word	0x0003e3b6
   20878:	0003e313 	.word	0x0003e313
   2087c:	00039995 	.word	0x00039995
   20880:	0003a37c 	.word	0x0003a37c

00020884 <deactivate_rx>:
{
   20884:	b5b0      	push	{r4, r5, r7, lr}
   20886:	b086      	sub	sp, #24
   20888:	4604      	mov	r4, r0
   2088a:	af00      	add	r7, sp, #0
		     z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
   2088c:	2000      	movs	r0, #0
   2088e:	f7fe fe15 	bl	1f4bc <z_nrf_clock_control_get_onoff>
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
   20892:	f104 0170 	add.w	r1, r4, #112	; 0x70
   20896:	4605      	mov	r5, r0
   20898:	f7ed fee0 	bl	e65c <onoff_cancel>

	if (rv == -EALREADY) {
   2089c:	f110 0f78 	cmn.w	r0, #120	; 0x78
   208a0:	d102      	bne.n	208a8 <deactivate_rx+0x24>
		rv = onoff_release(mgr);
   208a2:	4628      	mov	r0, r5
   208a4:	f7ed fe70 	bl	e588 <onoff_release>
		__ASSERT_NO_MSG(err >= 0);
   208a8:	2800      	cmp	r0, #0
   208aa:	da0b      	bge.n	208c4 <deactivate_rx+0x40>
   208ac:	491a      	ldr	r1, [pc, #104]	; (20918 <deactivate_rx+0x94>)
   208ae:	481b      	ldr	r0, [pc, #108]	; (2091c <deactivate_rx+0x98>)
   208b0:	f240 1345 	movw	r3, #325	; 0x145
   208b4:	4a1a      	ldr	r2, [pc, #104]	; (20920 <deactivate_rx+0x9c>)
   208b6:	f00e fd85 	bl	2f3c4 <assert_print>
   208ba:	f240 1145 	movw	r1, #325	; 0x145
   208be:	4818      	ldr	r0, [pc, #96]	; (20920 <deactivate_rx+0x9c>)
   208c0:	f00e fd79 	bl	2f3b6 <assert_post_action>
	data->rx_state = RX_TO_IDLE;
   208c4:	2304      	movs	r3, #4
	err = uart_rx_disable(data->uart);
   208c6:	6820      	ldr	r0, [r4, #0]
	data->rx_state = RX_TO_IDLE;
   208c8:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
			(const struct uart_driver_api *)dev->api;

	return api->rx_disable(dev);
   208cc:	6883      	ldr	r3, [r0, #8]
   208ce:	695b      	ldr	r3, [r3, #20]
   208d0:	4798      	blx	r3
	if (err < 0 && err != -EFAULT) {
   208d2:	2800      	cmp	r0, #0
   208d4:	da11      	bge.n	208fa <deactivate_rx+0x76>
   208d6:	f110 0f0e 	cmn.w	r0, #14
   208da:	d011      	beq.n	20900 <deactivate_rx+0x7c>
		LOG_ERR("RX: Failed to disable (err: %d)", err);
   208dc:	466c      	mov	r4, sp
   208de:	b088      	sub	sp, #32
   208e0:	466a      	mov	r2, sp
   208e2:	4b10      	ldr	r3, [pc, #64]	; (20924 <deactivate_rx+0xa0>)
   208e4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   208e8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   208ec:	2303      	movs	r3, #3
   208ee:	480e      	ldr	r0, [pc, #56]	; (20928 <deactivate_rx+0xa4>)
   208f0:	f842 3f10 	str.w	r3, [r2, #16]!
   208f4:	f014 f83d 	bl	34972 <z_log_msg_static_create.constprop.0>
   208f8:	46a5      	mov	sp, r4
}
   208fa:	3718      	adds	r7, #24
   208fc:	46bd      	mov	sp, r7
   208fe:	bdb0      	pop	{r4, r5, r7, pc}
		LOG_ERR("Rx disable failed.");
   20900:	4b0a      	ldr	r3, [pc, #40]	; (2092c <deactivate_rx+0xa8>)
   20902:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   20906:	617b      	str	r3, [r7, #20]
   20908:	2302      	movs	r3, #2
   2090a:	4807      	ldr	r0, [pc, #28]	; (20928 <deactivate_rx+0xa4>)
   2090c:	f107 0210 	add.w	r2, r7, #16
   20910:	613b      	str	r3, [r7, #16]
   20912:	f014 f82e 	bl	34972 <z_log_msg_static_create.constprop.0>
}
   20916:	e7f0      	b.n	208fa <deactivate_rx+0x76>
   20918:	0003a37c 	.word	0x0003a37c
   2091c:	00039995 	.word	0x00039995
   20920:	0003e313 	.word	0x0003e313
   20924:	0003e3d2 	.word	0x0003e3d2
   20928:	00037980 	.word	0x00037980
   2092c:	0003e3f2 	.word	0x0003e3f2

00020930 <rdy_pin_handler.part.0>:
static void rdy_pin_handler(nrfx_gpiote_pin_t pin,
   20930:	b5b0      	push	{r4, r5, r7, lr}
		if (data->rx_state != RX_ACTIVE) {
   20932:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
static void rdy_pin_handler(nrfx_gpiote_pin_t pin,
   20936:	4604      	mov	r4, r0
		if (data->rx_state != RX_ACTIVE) {
   20938:	2b03      	cmp	r3, #3
static void rdy_pin_handler(nrfx_gpiote_pin_t pin,
   2093a:	af00      	add	r7, sp, #0
		if (data->rx_state != RX_ACTIVE) {
   2093c:	d016      	beq.n	2096c <rdy_pin_handler.part.0+0x3c>
			LOG_WRN("RX: End detected at unexpected state (%d).", data->rx_state);
   2093e:	466d      	mov	r5, sp
   20940:	b088      	sub	sp, #32
   20942:	466a      	mov	r2, sp
   20944:	490b      	ldr	r1, [pc, #44]	; (20974 <rdy_pin_handler.part.0+0x44>)
   20946:	480c      	ldr	r0, [pc, #48]	; (20978 <rdy_pin_handler.part.0+0x48>)
   20948:	e9c2 1305 	strd	r1, r3, [r2, #20]
   2094c:	2303      	movs	r3, #3
   2094e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   20952:	f842 3f10 	str.w	r3, [r2, #16]!
   20956:	f014 f80c 	bl	34972 <z_log_msg_static_create.constprop.0>
			data->rx_state = RX_IDLE;
   2095a:	2301      	movs	r3, #1
   2095c:	46ad      	mov	sp, r5
			rdy_pin_idle(data);
   2095e:	4620      	mov	r0, r4
			data->rx_state = RX_IDLE;
   20960:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
			rdy_pin_idle(data);
   20964:	f7ff fe8e 	bl	20684 <rdy_pin_idle.constprop.0>
}
   20968:	46bd      	mov	sp, r7
   2096a:	bdb0      	pop	{r4, r5, r7, pc}
		deactivate_rx(data);
   2096c:	f7ff ff8a 	bl	20884 <deactivate_rx>
   20970:	e7fa      	b.n	20968 <rdy_pin_handler.part.0+0x38>
   20972:	bf00      	nop
   20974:	0003e405 	.word	0x0003e405
   20978:	00037980 	.word	0x00037980

0002097c <rdy_pin_handler>:
{
   2097c:	b538      	push	{r3, r4, r5, lr}
   2097e:	460d      	mov	r5, r1
	nrfx_gpiote_trigger_disable(data->rdy_pin);
   20980:	6890      	ldr	r0, [r2, #8]
{
   20982:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_disable(data->rdy_pin);
   20984:	f005 fc4a 	bl	2621c <nrfx_gpiote_trigger_disable>
	if (trigger == NRFX_GPIOTE_TRIGGER_HIGH) {
   20988:	2d05      	cmp	r5, #5
   2098a:	d12d      	bne.n	209e8 <rdy_pin_handler+0x6c>
		__ASSERT_NO_MSG(data->rx_state != RX_ACTIVE);
   2098c:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
   20990:	2b03      	cmp	r3, #3
   20992:	d10b      	bne.n	209ac <rdy_pin_handler+0x30>
   20994:	4917      	ldr	r1, [pc, #92]	; (209f4 <rdy_pin_handler+0x78>)
   20996:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
   2099a:	4a17      	ldr	r2, [pc, #92]	; (209f8 <rdy_pin_handler+0x7c>)
   2099c:	4817      	ldr	r0, [pc, #92]	; (209fc <rdy_pin_handler+0x80>)
   2099e:	f00e fd11 	bl	2f3c4 <assert_print>
   209a2:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
	__ASSERT_NO_MSG(err >= 0);
   209a6:	4814      	ldr	r0, [pc, #80]	; (209f8 <rdy_pin_handler+0x7c>)
   209a8:	f00e fd05 	bl	2f3b6 <assert_post_action>
		if (data->rx_state == RX_IDLE) {
   209ac:	2b01      	cmp	r3, #1
   209ae:	d120      	bne.n	209f2 <rdy_pin_handler+0x76>
	data->rx_state = RX_PREPARE;
   209b0:	2302      	movs	r3, #2
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
   209b2:	2000      	movs	r0, #0
	data->rx_state = RX_PREPARE;
   209b4:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
   209b8:	f7fe fd80 	bl	1f4bc <z_nrf_clock_control_get_onoff>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   209bc:	4b10      	ldr	r3, [pc, #64]	; (20a00 <rdy_pin_handler+0x84>)
   209be:	2200      	movs	r2, #0
   209c0:	6763      	str	r3, [r4, #116]	; 0x74
   209c2:	2303      	movs	r3, #3
   209c4:	67e2      	str	r2, [r4, #124]	; 0x7c
   209c6:	67a3      	str	r3, [r4, #120]	; 0x78
	err = onoff_request(mgr, &data->rx_clk_cli);
   209c8:	f104 0170 	add.w	r1, r4, #112	; 0x70
   209cc:	f7ed fd44 	bl	e458 <onoff_request>
	__ASSERT_NO_MSG(err >= 0);
   209d0:	2800      	cmp	r0, #0
   209d2:	da0e      	bge.n	209f2 <rdy_pin_handler+0x76>
   209d4:	490b      	ldr	r1, [pc, #44]	; (20a04 <rdy_pin_handler+0x88>)
   209d6:	f44f 73c1 	mov.w	r3, #386	; 0x182
   209da:	4a07      	ldr	r2, [pc, #28]	; (209f8 <rdy_pin_handler+0x7c>)
   209dc:	4807      	ldr	r0, [pc, #28]	; (209fc <rdy_pin_handler+0x80>)
   209de:	f00e fcf1 	bl	2f3c4 <assert_print>
   209e2:	f44f 71c1 	mov.w	r1, #386	; 0x182
   209e6:	e7de      	b.n	209a6 <rdy_pin_handler+0x2a>
   209e8:	4620      	mov	r0, r4
}
   209ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   209ee:	f7ff bf9f 	b.w	20930 <rdy_pin_handler.part.0>
   209f2:	bd38      	pop	{r3, r4, r5, pc}
   209f4:	0003e430 	.word	0x0003e430
   209f8:	0003e313 	.word	0x0003e313
   209fc:	00039995 	.word	0x00039995
   20a00:	00020d6d 	.word	0x00020d6d
   20a04:	0003a37c 	.word	0x0003a37c

00020a08 <api_tx>:
{
   20a08:	b5f0      	push	{r4, r5, r6, r7, lr}
	return dev->data;
   20a0a:	6905      	ldr	r5, [r0, #16]
{
   20a0c:	b085      	sub	sp, #20
   20a0e:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   20a12:	e8d0 4fef 	ldaex	r4, [r0]
   20a16:	2c00      	cmp	r4, #0
   20a18:	d103      	bne.n	20a22 <api_tx+0x1a>
   20a1a:	e8c0 1fe6 	stlex	r6, r1, [r0]
   20a1e:	2e00      	cmp	r6, #0
   20a20:	d1f7      	bne.n	20a12 <api_tx+0xa>
	if (!atomic_ptr_cas((atomic_ptr_t *)&data->tx_buf, NULL, (void *)buf)) {
   20a22:	d131      	bne.n	20a88 <api_tx+0x80>
	data->tx_len = len;
   20a24:	652a      	str	r2, [r5, #80]	; 0x50
	k_timer_start(&data->tx_timer,
   20a26:	1c5a      	adds	r2, r3, #1
   20a28:	f105 0610 	add.w	r6, r5, #16
   20a2c:	d028      	beq.n	20a80 <api_tx+0x78>
   20a2e:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   20a32:	2100      	movs	r1, #0
   20a34:	4816      	ldr	r0, [pc, #88]	; (20a90 <api_tx+0x88>)
		      timeout == SYS_FOREVER_US ? K_FOREVER : K_USEC(timeout),
   20a36:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
   20a3a:	4a16      	ldr	r2, [pc, #88]	; (20a94 <api_tx+0x8c>)
   20a3c:	2300      	movs	r3, #0
   20a3e:	fbc4 0107 	smlal	r0, r1, r4, r7
   20a42:	f7e8 fa27 	bl	8e94 <__aeabi_uldivmod>
   20a46:	4602      	mov	r2, r0
   20a48:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   20a4a:	2100      	movs	r1, #0
   20a4c:	2000      	movs	r0, #0
   20a4e:	e9cd 0100 	strd	r0, r1, [sp]
   20a52:	4630      	mov	r0, r6
   20a54:	f00b f952 	bl	2bcfc <z_impl_k_timer_start>
	nrf_gpio_reconfigure(data->req_pin, NULL, NULL, &pull, NULL, NULL);
   20a58:	686c      	ldr	r4, [r5, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20a5a:	a803      	add	r0, sp, #12
   20a5c:	9403      	str	r4, [sp, #12]
   20a5e:	f7ff fdf1 	bl	20644 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   20a62:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   20a66:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
	nrfx_gpiote_trigger_enable(data->req_pin, true);
   20a6a:	2101      	movs	r1, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   20a6c:	f043 030c 	orr.w	r3, r3, #12
    reg->PIN_CNF[pin_number] = cnf;
   20a70:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
   20a74:	6868      	ldr	r0, [r5, #4]
   20a76:	f005 fb67 	bl	26148 <nrfx_gpiote_trigger_enable>
	return 0;
   20a7a:	2000      	movs	r0, #0
}
   20a7c:	b005      	add	sp, #20
   20a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	k_timer_start(&data->tx_timer,
   20a80:	f04f 32ff 	mov.w	r2, #4294967295
   20a84:	4613      	mov	r3, r2
   20a86:	e7e0      	b.n	20a4a <api_tx+0x42>
		return -EBUSY;
   20a88:	f06f 000f 	mvn.w	r0, #15
   20a8c:	e7f6      	b.n	20a7c <api_tx+0x74>
   20a8e:	bf00      	nop
   20a90:	000f423f 	.word	0x000f423f
   20a94:	000f4240 	.word	0x000f4240

00020a98 <api_fifo_fill>:
			 int size)
{
	struct lpuart_data *data = get_dev_data(dev);
	int err;

	size = MIN(size, sizeof(data->int_driven.txbuf));
   20a98:	2a80      	cmp	r2, #128	; 0x80
   20a9a:	bf28      	it	cs
   20a9c:	2280      	movcs	r2, #128	; 0x80
{
   20a9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20aa0:	4606      	mov	r6, r0
	size = MIN(size, sizeof(data->int_driven.txbuf));
   20aa2:	4614      	mov	r4, r2
	return dev->data;
   20aa4:	6905      	ldr	r5, [r0, #16]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   20aa6:	f505 7384 	add.w	r3, r5, #264	; 0x108
   20aaa:	e8d3 2fef 	ldaex	r2, [r3]
   20aae:	2a00      	cmp	r2, #0
   20ab0:	d103      	bne.n	20aba <api_fifo_fill+0x22>
   20ab2:	e8c3 4fe0 	stlex	r0, r4, [r3]
   20ab6:	2800      	cmp	r0, #0
   20ab8:	d1f7      	bne.n	20aaa <api_fifo_fill+0x12>
	if (!atomic_cas((atomic_t *)&data->int_driven.txlen, 0, size)) {
   20aba:	d113      	bne.n	20ae4 <api_fifo_fill+0x4c>
		return 0;
	}

	memcpy(data->int_driven.txbuf, tx_data, size);
   20abc:	f105 0788 	add.w	r7, r5, #136	; 0x88
   20ac0:	4622      	mov	r2, r4
   20ac2:	4638      	mov	r0, r7
   20ac4:	f015 fd30 	bl	36528 <memcpy>

	err = api_tx(dev, data->int_driven.txbuf,
   20ac8:	4639      	mov	r1, r7
   20aca:	4630      	mov	r0, r6
   20acc:	4b06      	ldr	r3, [pc, #24]	; (20ae8 <api_fifo_fill+0x50>)
   20ace:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
   20ad2:	f7ff ff99 	bl	20a08 <api_tx>
		     data->int_driven.txlen,
		     CONFIG_NRF_SW_LPUART_DEFAULT_TX_TIMEOUT);
	if (err < 0) {
   20ad6:	2800      	cmp	r0, #0
   20ad8:	db01      	blt.n	20ade <api_fifo_fill+0x46>
	size = MIN(size, sizeof(data->int_driven.txbuf));
   20ada:	4620      	mov	r0, r4

		return 0;
	}

	return size;
}
   20adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven.txlen = 0;
   20ade:	2300      	movs	r3, #0
   20ae0:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
		return 0;
   20ae4:	2000      	movs	r0, #0
   20ae6:	e7f9      	b.n	20adc <api_fifo_fill+0x44>
   20ae8:	000f4240 	.word	0x000f4240

00020aec <api_poll_out>:
	return -ENOTSUP;
#endif
}

static void api_poll_out(const struct device *dev, unsigned char out_char)
{
   20aec:	b570      	push	{r4, r5, r6, lr}
   20aee:	4605      	mov	r5, r0
   20af0:	460e      	mov	r6, r1
	return dev->data;
   20af2:	6904      	ldr	r4, [r0, #16]
	struct lpuart_data *data = get_dev_data(dev);
	bool thread_ctx = !k_is_in_isr() && !k_is_pre_kernel();
   20af4:	f015 fae7 	bl	360c6 <k_is_in_isr>
   20af8:	b910      	cbnz	r0, 20b00 <api_poll_out+0x14>
	return !z_sys_post_kernel;
   20afa:	4b12      	ldr	r3, [pc, #72]	; (20b44 <api_poll_out+0x58>)
   20afc:	781b      	ldrb	r3, [r3, #0]
   20afe:	b98b      	cbnz	r3, 20b24 <api_poll_out+0x38>
	if (thread_ctx) {
		/* in thread context pend until tx is in idle */
		while (data->tx_buf) {
			k_msleep(1);
		}
	} else if (data->tx_buf) {
   20b00:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   20b02:	b953      	cbnz	r3, 20b1a <api_poll_out+0x2e>
		return;
	}

	if (!atomic_cas(&data->txbyte, -1, out_char)) {
   20b04:	f104 0148 	add.w	r1, r4, #72	; 0x48
   20b08:	e8d1 3fef 	ldaex	r3, [r1]
   20b0c:	3301      	adds	r3, #1
   20b0e:	d103      	bne.n	20b18 <api_poll_out+0x2c>
   20b10:	e8c1 6fe2 	stlex	r2, r6, [r1]
   20b14:	2a00      	cmp	r2, #0
   20b16:	d1f7      	bne.n	20b08 <api_poll_out+0x1c>
   20b18:	d008      	beq.n	20b2c <api_poll_out+0x40>
	err = api_tx(dev, (uint8_t *)&data->txbyte, 1,
		     CONFIG_NRF_SW_LPUART_DEFAULT_TX_TIMEOUT);
	if (err < 0) {
		data->txbyte = -1;
	}
}
   20b1a:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_sleep(timeout);
   20b1c:	2021      	movs	r0, #33	; 0x21
   20b1e:	2100      	movs	r1, #0
   20b20:	f00a fc14 	bl	2b34c <z_impl_k_sleep>
		while (data->tx_buf) {
   20b24:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   20b26:	2b00      	cmp	r3, #0
   20b28:	d1f8      	bne.n	20b1c <api_poll_out+0x30>
   20b2a:	e7eb      	b.n	20b04 <api_poll_out+0x18>
	err = api_tx(dev, (uint8_t *)&data->txbyte, 1,
   20b2c:	4b06      	ldr	r3, [pc, #24]	; (20b48 <api_poll_out+0x5c>)
   20b2e:	2201      	movs	r2, #1
   20b30:	4628      	mov	r0, r5
   20b32:	f7ff ff69 	bl	20a08 <api_tx>
	if (err < 0) {
   20b36:	2800      	cmp	r0, #0
		data->txbyte = -1;
   20b38:	bfbc      	itt	lt
   20b3a:	f04f 33ff 	movlt.w	r3, #4294967295
   20b3e:	64a3      	strlt	r3, [r4, #72]	; 0x48
   20b40:	e7eb      	b.n	20b1a <api_poll_out+0x2e>
   20b42:	bf00      	nop
   20b44:	20010782 	.word	0x20010782
   20b48:	000f4240 	.word	0x000f4240

00020b4c <uart_callback>:
{
   20b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (evt->type) {
   20b50:	780b      	ldrb	r3, [r1, #0]
{
   20b52:	460d      	mov	r5, r1
   20b54:	4616      	mov	r6, r2
	return dev->data;
   20b56:	6914      	ldr	r4, [r2, #16]
{
   20b58:	af00      	add	r7, sp, #0
	switch (evt->type) {
   20b5a:	2b06      	cmp	r3, #6
   20b5c:	d811      	bhi.n	20b82 <uart_callback+0x36>
   20b5e:	e8df f003 	tbb	[pc, r3]
   20b62:	1604      	.short	0x1604
   20b64:	351f1b13 	.word	0x351f1b13
   20b68:	16          	.byte	0x16
   20b69:	00          	.byte	0x00
		const uint8_t *txbuf = evt->data.tx.buf;
   20b6a:	f8d1 8004 	ldr.w	r8, [r1, #4]
		tx_complete(data);
   20b6e:	4620      	mov	r0, r4
   20b70:	f013 ff17 	bl	349a2 <tx_complete>
		if (txbuf == (void *)&data->txbyte) {
   20b74:	f104 0348 	add.w	r3, r4, #72	; 0x48
   20b78:	4598      	cmp	r8, r3
   20b7a:	d108      	bne.n	20b8e <uart_callback+0x42>
			data->txbyte = -1;
   20b7c:	f04f 33ff 	mov.w	r3, #4294967295
   20b80:	64a3      	str	r3, [r4, #72]	; 0x48
}
   20b82:	46bd      	mov	sp, r7
   20b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data->rx_got_data = true;
   20b88:	2301      	movs	r3, #1
   20b8a:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
		user_callback(dev, evt);
   20b8e:	4629      	mov	r1, r5
   20b90:	4630      	mov	r0, r6
   20b92:	f013 fe41 	bl	34818 <user_callback>
		break;
   20b96:	e7f4      	b.n	20b82 <uart_callback+0x36>
		if (data->rx_len < CONFIG_NRF_SW_LPUART_MAX_PACKET_SIZE) {
   20b98:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   20b9a:	2b7f      	cmp	r3, #127	; 0x7f
   20b9c:	d8f1      	bhi.n	20b82 <uart_callback+0x36>
   20b9e:	e7f6      	b.n	20b8e <uart_callback+0x42>
		if (!data->rx_got_data) {
   20ba0:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
   20ba4:	2b00      	cmp	r3, #0
   20ba6:	d1f2      	bne.n	20b8e <uart_callback+0x42>
			LOG_ERR("Empty receiver state:%d", data->rx_state);
   20ba8:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
   20bac:	466c      	mov	r4, sp
   20bae:	b088      	sub	sp, #32
   20bb0:	466a      	mov	r2, sp
   20bb2:	491a      	ldr	r1, [pc, #104]	; (20c1c <uart_callback+0xd0>)
   20bb4:	481a      	ldr	r0, [pc, #104]	; (20c20 <uart_callback+0xd4>)
   20bb6:	e9c2 1305 	strd	r1, r3, [r2, #20]
   20bba:	2303      	movs	r3, #3
   20bbc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   20bc0:	f842 3f10 	str.w	r3, [r2, #16]!
   20bc4:	f013 fed5 	bl	34972 <z_log_msg_static_create.constprop.0>
   20bc8:	46a5      	mov	sp, r4
   20bca:	e7e0      	b.n	20b8e <uart_callback+0x42>
		__ASSERT_NO_MSG((data->rx_state != RX_IDLE) &&
   20bcc:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
   20bd0:	2b01      	cmp	r3, #1
   20bd2:	d80b      	bhi.n	20bec <uart_callback+0xa0>
   20bd4:	4913      	ldr	r1, [pc, #76]	; (20c24 <uart_callback+0xd8>)
   20bd6:	4814      	ldr	r0, [pc, #80]	; (20c28 <uart_callback+0xdc>)
   20bd8:	f240 232f 	movw	r3, #559	; 0x22f
   20bdc:	4a13      	ldr	r2, [pc, #76]	; (20c2c <uart_callback+0xe0>)
   20bde:	f00e fbf1 	bl	2f3c4 <assert_print>
   20be2:	f240 212f 	movw	r1, #559	; 0x22f
   20be6:	4811      	ldr	r0, [pc, #68]	; (20c2c <uart_callback+0xe0>)
   20be8:	f00e fbe5 	bl	2f3b6 <assert_post_action>
		if (data->rx_state == RX_TO_IDLE) {
   20bec:	2b04      	cmp	r3, #4
   20bee:	d10f      	bne.n	20c10 <uart_callback+0xc4>
			if (data->rx_got_data) {
   20bf0:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
   20bf4:	b12b      	cbz	r3, 20c02 <uart_callback+0xb6>
				data->rx_state = RX_BLOCKED;
   20bf6:	2305      	movs	r3, #5
   20bf8:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
				evt->type = UART_RX_BUF_REQUEST;
   20bfc:	2303      	movs	r3, #3
   20bfe:	700b      	strb	r3, [r1, #0]
		if (call_cb) {
   20c00:	e7c5      	b.n	20b8e <uart_callback+0x42>
				data->rx_state = RX_IDLE;
   20c02:	2301      	movs	r3, #1
				rdy_pin_idle(data);
   20c04:	4620      	mov	r0, r4
				data->rx_state = RX_IDLE;
   20c06:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
				rdy_pin_idle(data);
   20c0a:	f7ff fd3b 	bl	20684 <rdy_pin_idle.constprop.0>
		if (call_cb) {
   20c0e:	e7b8      	b.n	20b82 <uart_callback+0x36>
			data->rx_buf = NULL;
   20c10:	2300      	movs	r3, #0
   20c12:	65a3      	str	r3, [r4, #88]	; 0x58
			data->rx_state = RX_OFF;
   20c14:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
		if (call_cb) {
   20c18:	e7b9      	b.n	20b8e <uart_callback+0x42>
   20c1a:	bf00      	nop
   20c1c:	0003e44c 	.word	0x0003e44c
   20c20:	00037980 	.word	0x00037980
   20c24:	0003e464 	.word	0x0003e464
   20c28:	00039995 	.word	0x00039995
   20c2c:	0003e313 	.word	0x0003e313

00020c30 <tx_timeout>:
{
   20c30:	b5f0      	push	{r4, r5, r6, r7, lr}
   20c32:	b087      	sub	sp, #28
	return timer->user_data;
   20c34:	6b45      	ldr	r5, [r0, #52]	; 0x34
	return dev->data;
   20c36:	692c      	ldr	r4, [r5, #16]
	const uint8_t *txbuf = data->tx_buf;
   20c38:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
	LOG_WRN("Tx timeout");
   20c3a:	4b20      	ldr	r3, [pc, #128]	; (20cbc <tx_timeout+0x8c>)
   20c3c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   20c40:	9305      	str	r3, [sp, #20]
   20c42:	2302      	movs	r3, #2
   20c44:	481e      	ldr	r0, [pc, #120]	; (20cc0 <tx_timeout+0x90>)
   20c46:	aa04      	add	r2, sp, #16
   20c48:	9304      	str	r3, [sp, #16]
   20c4a:	f013 fe92 	bl	34972 <z_log_msg_static_create.constprop.0>
	if (data->tx_active) {
   20c4e:	f894 7054 	ldrb.w	r7, [r4, #84]	; 0x54
   20c52:	b1cf      	cbz	r7, 20c88 <tx_timeout+0x58>
		err = uart_tx_abort(data->uart);
   20c54:	6820      	ldr	r0, [r4, #0]
	return api->tx_abort(dev);
   20c56:	6883      	ldr	r3, [r0, #8]
   20c58:	689b      	ldr	r3, [r3, #8]
   20c5a:	4798      	blx	r3
		if (err == -EFAULT) {
   20c5c:	f110 0f0e 	cmn.w	r0, #14
   20c60:	4604      	mov	r4, r0
   20c62:	d01b      	beq.n	20c9c <tx_timeout+0x6c>
		} else if (err < 0) {
   20c64:	2800      	cmp	r0, #0
   20c66:	da19      	bge.n	20c9c <tx_timeout+0x6c>
			__ASSERT(0, "Unexpected tx_abort error:%d", err);
   20c68:	f44f 7317 	mov.w	r3, #604	; 0x25c
   20c6c:	4a15      	ldr	r2, [pc, #84]	; (20cc4 <tx_timeout+0x94>)
   20c6e:	4916      	ldr	r1, [pc, #88]	; (20cc8 <tx_timeout+0x98>)
   20c70:	4816      	ldr	r0, [pc, #88]	; (20ccc <tx_timeout+0x9c>)
   20c72:	f00e fba7 	bl	2f3c4 <assert_print>
   20c76:	4621      	mov	r1, r4
   20c78:	4815      	ldr	r0, [pc, #84]	; (20cd0 <tx_timeout+0xa0>)
   20c7a:	f00e fba3 	bl	2f3c4 <assert_print>
   20c7e:	f44f 7117 	mov.w	r1, #604	; 0x25c
   20c82:	4810      	ldr	r0, [pc, #64]	; (20cc4 <tx_timeout+0x94>)
   20c84:	f00e fb97 	bl	2f3b6 <assert_post_action>
	tx_complete(data);
   20c88:	4620      	mov	r0, r4
   20c8a:	f013 fe8a 	bl	349a2 <tx_complete>
	if (txbuf == (void *)&data->txbyte) {
   20c8e:	f104 0348 	add.w	r3, r4, #72	; 0x48
   20c92:	429e      	cmp	r6, r3
   20c94:	d104      	bne.n	20ca0 <tx_timeout+0x70>
		data->txbyte = -1;
   20c96:	f04f 33ff 	mov.w	r3, #4294967295
   20c9a:	64a3      	str	r3, [r4, #72]	; 0x48
}
   20c9c:	b007      	add	sp, #28
   20c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct uart_event evt = {
   20ca0:	4639      	mov	r1, r7
   20ca2:	2214      	movs	r2, #20
   20ca4:	4668      	mov	r0, sp
   20ca6:	f015 fc5f 	bl	36568 <memset>
   20caa:	2301      	movs	r3, #1
		user_callback(dev, &evt);
   20cac:	4669      	mov	r1, sp
   20cae:	4628      	mov	r0, r5
		struct uart_event evt = {
   20cb0:	f88d 3000 	strb.w	r3, [sp]
   20cb4:	9601      	str	r6, [sp, #4]
		user_callback(dev, &evt);
   20cb6:	f013 fdaf 	bl	34818 <user_callback>
   20cba:	e7ef      	b.n	20c9c <tx_timeout+0x6c>
   20cbc:	0003e49e 	.word	0x0003e49e
   20cc0:	00037980 	.word	0x00037980
   20cc4:	0003e313 	.word	0x0003e313
   20cc8:	0003ea9e 	.word	0x0003ea9e
   20ccc:	00039995 	.word	0x00039995
   20cd0:	0003e4a9 	.word	0x0003e4a9

00020cd4 <req_pin_handler>:
{
   20cd4:	b5b0      	push	{r4, r5, r7, lr}
   20cd6:	b086      	sub	sp, #24
	if (data->tx_buf == NULL) {
   20cd8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
{
   20cda:	4614      	mov	r4, r2
   20cdc:	af00      	add	r7, sp, #0
	if (data->tx_buf == NULL) {
   20cde:	b983      	cbnz	r3, 20d02 <req_pin_handler+0x2e>
		LOG_WRN("TX: request confirmed but no data to send");
   20ce0:	4b1f      	ldr	r3, [pc, #124]	; (20d60 <req_pin_handler+0x8c>)
   20ce2:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   20ce6:	617b      	str	r3, [r7, #20]
   20ce8:	2302      	movs	r3, #2
   20cea:	481e      	ldr	r0, [pc, #120]	; (20d64 <req_pin_handler+0x90>)
   20cec:	f107 0210 	add.w	r2, r7, #16
   20cf0:	613b      	str	r3, [r7, #16]
   20cf2:	f013 fe3e 	bl	34972 <z_log_msg_static_create.constprop.0>
		tx_complete(data);
   20cf6:	4620      	mov	r0, r4
   20cf8:	f013 fe53 	bl	349a2 <tx_complete>
}
   20cfc:	3718      	adds	r7, #24
   20cfe:	46bd      	mov	sp, r7
   20d00:	bdb0      	pop	{r4, r5, r7, pc}
	req_pin_set(data);
   20d02:	4610      	mov	r0, r2
   20d04:	f013 fe38 	bl	34978 <req_pin_set>
	z_impl_k_timer_stop(timer);
   20d08:	f104 0010 	add.w	r0, r4, #16
   20d0c:	f015 fb12 	bl	36334 <z_impl_k_timer_stop>
	__asm__ volatile(
   20d10:	f04f 0220 	mov.w	r2, #32
   20d14:	f3ef 8311 	mrs	r3, BASEPRI
   20d18:	f382 8812 	msr	BASEPRI_MAX, r2
   20d1c:	f3bf 8f6f 	isb	sy
	data->tx_active = true;
   20d20:	2201      	movs	r2, #1
   20d22:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
	len = data->tx_len;
   20d26:	e9d4 1213 	ldrd	r1, r2, [r4, #76]	; 0x4c
	__asm__ volatile(
   20d2a:	f383 8811 	msr	BASEPRI, r3
   20d2e:	f3bf 8f6f 	isb	sy
	err = uart_tx(data->uart, buf, len, 0);
   20d32:	6820      	ldr	r0, [r4, #0]
	return api->tx(dev, buf, len, timeout);
   20d34:	6883      	ldr	r3, [r0, #8]
   20d36:	685d      	ldr	r5, [r3, #4]
   20d38:	2300      	movs	r3, #0
   20d3a:	47a8      	blx	r5
	if (err < 0) {
   20d3c:	2800      	cmp	r0, #0
   20d3e:	dadd      	bge.n	20cfc <req_pin_handler+0x28>
		LOG_ERR("TX: Not started (error: %d)", err);
   20d40:	466d      	mov	r5, sp
   20d42:	b088      	sub	sp, #32
   20d44:	466a      	mov	r2, sp
   20d46:	4b08      	ldr	r3, [pc, #32]	; (20d68 <req_pin_handler+0x94>)
   20d48:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   20d4c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   20d50:	2303      	movs	r3, #3
   20d52:	4804      	ldr	r0, [pc, #16]	; (20d64 <req_pin_handler+0x90>)
   20d54:	f842 3f10 	str.w	r3, [r2, #16]!
   20d58:	f013 fe0b 	bl	34972 <z_log_msg_static_create.constprop.0>
   20d5c:	46ad      	mov	sp, r5
   20d5e:	e7ca      	b.n	20cf6 <req_pin_handler+0x22>
   20d60:	0003e4c8 	.word	0x0003e4c8
   20d64:	00037980 	.word	0x00037980
   20d68:	0003e4f2 	.word	0x0003e4f2

00020d6c <rx_hfclk_callback>:
{
   20d6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	__ASSERT_NO_MSG(res >= 0);
   20d70:	2b00      	cmp	r3, #0
{
   20d72:	460c      	mov	r4, r1
   20d74:	b089      	sub	sp, #36	; 0x24
	__ASSERT_NO_MSG(res >= 0);
   20d76:	da0b      	bge.n	20d90 <rx_hfclk_callback+0x24>
   20d78:	4962      	ldr	r1, [pc, #392]	; (20f04 <rx_hfclk_callback+0x198>)
   20d7a:	f240 1375 	movw	r3, #373	; 0x175
   20d7e:	4a62      	ldr	r2, [pc, #392]	; (20f08 <rx_hfclk_callback+0x19c>)
   20d80:	4862      	ldr	r0, [pc, #392]	; (20f0c <rx_hfclk_callback+0x1a0>)
   20d82:	f00e fb1f 	bl	2f3c4 <assert_print>
   20d86:	f240 1175 	movw	r1, #373	; 0x175
	__ASSERT(err == 0, "RX: Enabling failed (err:%d)", err);
   20d8a:	485f      	ldr	r0, [pc, #380]	; (20f08 <rx_hfclk_callback+0x19c>)
   20d8c:	f00e fb13 	bl	2f3b6 <assert_post_action>
	if (data->rx_buf == NULL) {
   20d90:	f851 1c18 	ldr.w	r1, [r1, #-24]
   20d94:	b961      	cbnz	r1, 20db0 <rx_hfclk_callback+0x44>
		LOG_ERR("RX: Request before enabling RX");
   20d96:	4b5e      	ldr	r3, [pc, #376]	; (20f10 <rx_hfclk_callback+0x1a4>)
   20d98:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   20d9c:	9307      	str	r3, [sp, #28]
   20d9e:	2302      	movs	r3, #2
   20da0:	485c      	ldr	r0, [pc, #368]	; (20f14 <rx_hfclk_callback+0x1a8>)
   20da2:	aa06      	add	r2, sp, #24
   20da4:	9306      	str	r3, [sp, #24]
   20da6:	f013 fde4 	bl	34972 <z_log_msg_static_create.constprop.0>
}
   20daa:	b009      	add	sp, #36	; 0x24
   20dac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->rx_got_data = false;
   20db0:	2300      	movs	r3, #0
   20db2:	f804 3c1b 	strb.w	r3, [r4, #-27]
	data->rx_state = RX_ACTIVE;
   20db6:	2303      	movs	r3, #3
	err = uart_rx_enable(data->uart, data->rx_buf,
   20db8:	f854 0c70 	ldr.w	r0, [r4, #-112]
	data->rx_state = RX_ACTIVE;
   20dbc:	f804 3c04 	strb.w	r3, [r4, #-4]
	err = uart_rx_enable(data->uart, data->rx_buf,
   20dc0:	e954 2305 	ldrd	r2, r3, [r4, #-20]
	return api->rx_enable(dev, buf, len, timeout);
   20dc4:	6885      	ldr	r5, [r0, #8]
   20dc6:	68ed      	ldr	r5, [r5, #12]
   20dc8:	47a8      	blx	r5
	__ASSERT(err == 0, "RX: Enabling failed (err:%d)", err);
   20dca:	4605      	mov	r5, r0
   20dcc:	b168      	cbz	r0, 20dea <rx_hfclk_callback+0x7e>
   20dce:	f44f 73b2 	mov.w	r3, #356	; 0x164
   20dd2:	4a4d      	ldr	r2, [pc, #308]	; (20f08 <rx_hfclk_callback+0x19c>)
   20dd4:	4950      	ldr	r1, [pc, #320]	; (20f18 <rx_hfclk_callback+0x1ac>)
   20dd6:	484d      	ldr	r0, [pc, #308]	; (20f0c <rx_hfclk_callback+0x1a0>)
   20dd8:	f00e faf4 	bl	2f3c4 <assert_print>
   20ddc:	4629      	mov	r1, r5
   20dde:	484f      	ldr	r0, [pc, #316]	; (20f1c <rx_hfclk_callback+0x1b0>)
   20de0:	f00e faf0 	bl	2f3c4 <assert_print>
   20de4:	f44f 71b2 	mov.w	r1, #356	; 0x164
   20de8:	e7cf      	b.n	20d8a <rx_hfclk_callback+0x1e>
	nrfx_gpiote_trigger_config_t trigger_config = {
   20dea:	2602      	movs	r6, #2
	nrf_gpio_reconfigure(data->rdy_pin, &dir_out, NULL, NULL, NULL, NULL);
   20dec:	f854 8c68 	ldr.w	r8, [r4, #-104]
		.p_in_channel = &data->rdy_ch
   20df0:	f1a4 0364 	sub.w	r3, r4, #100	; 0x64
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20df4:	a802      	add	r0, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
   20df6:	9301      	str	r3, [sp, #4]
   20df8:	f88d 6000 	strb.w	r6, [sp]
   20dfc:	f8cd 8008 	str.w	r8, [sp, #8]
   20e00:	f7ff fc20 	bl	20644 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   20e04:	eb00 0088 	add.w	r0, r0, r8, lsl #2
   20e08:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
	err = nrfx_gpiote_input_configure(data->rdy_pin, NULL, &trigger_config, NULL);
   20e0c:	4629      	mov	r1, r5
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   20e0e:	f043 0301 	orr.w	r3, r3, #1
    reg->PIN_CNF[pin_number] = cnf;
   20e12:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
   20e16:	466a      	mov	r2, sp
   20e18:	462b      	mov	r3, r5
   20e1a:	f854 0c68 	ldr.w	r0, [r4, #-104]
   20e1e:	f004 ffff 	bl	25e20 <nrfx_gpiote_input_configure>
	__ASSERT(err == NRFX_SUCCESS, "Unexpected err: %08x/%d", err, err);
   20e22:	4b3f      	ldr	r3, [pc, #252]	; (20f20 <rx_hfclk_callback+0x1b4>)
	err = nrfx_gpiote_input_configure(data->rdy_pin, NULL, &trigger_config, NULL);
   20e24:	4605      	mov	r5, r0
	__ASSERT(err == NRFX_SUCCESS, "Unexpected err: %08x/%d", err, err);
   20e26:	4298      	cmp	r0, r3
		.p_in_channel = &data->rdy_ch
   20e28:	f1a4 0770 	sub.w	r7, r4, #112	; 0x70
	__ASSERT(err == NRFX_SUCCESS, "Unexpected err: %08x/%d", err, err);
   20e2c:	d00e      	beq.n	20e4c <rx_hfclk_callback+0xe0>
   20e2e:	f44f 738e 	mov.w	r3, #284	; 0x11c
   20e32:	4a35      	ldr	r2, [pc, #212]	; (20f08 <rx_hfclk_callback+0x19c>)
   20e34:	493b      	ldr	r1, [pc, #236]	; (20f24 <rx_hfclk_callback+0x1b8>)
   20e36:	4835      	ldr	r0, [pc, #212]	; (20f0c <rx_hfclk_callback+0x1a0>)
   20e38:	f00e fac4 	bl	2f3c4 <assert_print>
   20e3c:	4629      	mov	r1, r5
   20e3e:	462a      	mov	r2, r5
   20e40:	4839      	ldr	r0, [pc, #228]	; (20f28 <rx_hfclk_callback+0x1bc>)
   20e42:	f00e fabf 	bl	2f3c4 <assert_print>
   20e46:	f44f 718e 	mov.w	r1, #284	; 0x11c
   20e4a:	e79e      	b.n	20d8a <rx_hfclk_callback+0x1e>
	nrfx_gpiote_trigger_enable(data->rdy_pin, true);
   20e4c:	2101      	movs	r1, #1
   20e4e:	f854 0c68 	ldr.w	r0, [r4, #-104]
   20e52:	f005 f979 	bl	26148 <nrfx_gpiote_trigger_enable>
	__asm__ volatile(
   20e56:	f04f 0320 	mov.w	r3, #32
   20e5a:	f3ef 8811 	mrs	r8, BASEPRI
   20e5e:	f383 8812 	msr	BASEPRI_MAX, r3
   20e62:	f3bf 8f6f 	isb	sy
	nrf_gpiote_event_t event = nrf_gpiote_in_event_get(data->rdy_ch);
   20e66:	f814 5c64 	ldrb.w	r5, [r4, #-100]
}
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
   20e6a:	2d07      	cmp	r5, #7
   20e6c:	d90a      	bls.n	20e84 <rx_hfclk_callback+0x118>
   20e6e:	492f      	ldr	r1, [pc, #188]	; (20f2c <rx_hfclk_callback+0x1c0>)
   20e70:	4826      	ldr	r0, [pc, #152]	; (20f0c <rx_hfclk_callback+0x1a0>)
   20e72:	f44f 7323 	mov.w	r3, #652	; 0x28c
   20e76:	4a2e      	ldr	r2, [pc, #184]	; (20f30 <rx_hfclk_callback+0x1c4>)
   20e78:	f00e faa4 	bl	2f3c4 <assert_print>
   20e7c:	f44f 7123 	mov.w	r1, #652	; 0x28c
   20e80:	482b      	ldr	r0, [pc, #172]	; (20f30 <rx_hfclk_callback+0x1c4>)
   20e82:	e783      	b.n	20d8c <rx_hfclk_callback+0x20>
	nrf_gpio_reconfigure(data->rdy_pin, &dir_in, NULL, NULL, NULL, NULL);
   20e84:	f854 9c68 	ldr.w	r9, [r4, #-104]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20e88:	a802      	add	r0, sp, #8
   20e8a:	f8cd 9008 	str.w	r9, [sp, #8]
   20e8e:	f7ff fbd9 	bl	20644 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   20e92:	eb00 0089 	add.w	r0, r0, r9, lsl #2
   20e96:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    cnf &= ~to_update;
   20e9a:	f023 0301 	bic.w	r3, r3, #1
    reg->PIN_CNF[pin_number] = cnf;
   20e9e:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
	z_impl_k_busy_wait(usec_to_wait);
   20ea2:	2001      	movs	r0, #1
   20ea4:	f015 fa14 	bl	362d0 <z_impl_k_busy_wait>
	if (nrf_gpio_pin_read(data->rdy_pin) == 0 && !nrf_gpiote_event_check(NRF_GPIOTE, event)) {
   20ea8:	f854 9c68 	ldr.w	r9, [r4, #-104]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20eac:	a802      	add	r0, sp, #8
   20eae:	f8cd 9008 	str.w	r9, [sp, #8]
   20eb2:	f7ff fbc7 	bl	20644 <nrf_gpio_pin_port_decode>
    return p_reg->IN;
   20eb6:	6903      	ldr	r3, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   20eb8:	fa23 f309 	lsr.w	r3, r3, r9
   20ebc:	07db      	lsls	r3, r3, #31
   20ebe:	d504      	bpl.n	20eca <rx_hfclk_callback+0x15e>
	__asm__ volatile(
   20ec0:	f388 8811 	msr	BASEPRI, r8
   20ec4:	f3bf 8f6f 	isb	sy
}
   20ec8:	e76f      	b.n	20daa <rx_hfclk_callback+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20eca:	4b1a      	ldr	r3, [pc, #104]	; (20f34 <rx_hfclk_callback+0x1c8>)
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   20ecc:	00ad      	lsls	r5, r5, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20ece:	595b      	ldr	r3, [r3, r5]
	if (nrf_gpio_pin_read(data->rdy_pin) == 0 && !nrf_gpiote_event_check(NRF_GPIOTE, event)) {
   20ed0:	2b00      	cmp	r3, #0
   20ed2:	d1f5      	bne.n	20ec0 <rx_hfclk_callback+0x154>
		LOG_WRN("req pin low when expected high");
   20ed4:	4b18      	ldr	r3, [pc, #96]	; (20f38 <rx_hfclk_callback+0x1cc>)
   20ed6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   20eda:	480e      	ldr	r0, [pc, #56]	; (20f14 <rx_hfclk_callback+0x1a8>)
   20edc:	aa06      	add	r2, sp, #24
   20ede:	e9cd 6306 	strd	r6, r3, [sp, #24]
   20ee2:	f013 fd46 	bl	34972 <z_log_msg_static_create.constprop.0>
   20ee6:	f388 8811 	msr	BASEPRI, r8
   20eea:	f3bf 8f6f 	isb	sy
	nrfx_gpiote_trigger_disable(data->rdy_pin);
   20eee:	f854 0c68 	ldr.w	r0, [r4, #-104]
   20ef2:	f005 f993 	bl	2621c <nrfx_gpiote_trigger_disable>
		deactivate_rx(data);
   20ef6:	4638      	mov	r0, r7
}
   20ef8:	b009      	add	sp, #36	; 0x24
   20efa:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		deactivate_rx(data);
   20efe:	f7ff bcc1 	b.w	20884 <deactivate_rx>
   20f02:	bf00      	nop
   20f04:	0003e50e 	.word	0x0003e50e
   20f08:	0003e313 	.word	0x0003e313
   20f0c:	00039995 	.word	0x00039995
   20f10:	0003e517 	.word	0x0003e517
   20f14:	00037980 	.word	0x00037980
   20f18:	00039fbd 	.word	0x00039fbd
   20f1c:	0003e536 	.word	0x0003e536
   20f20:	0bad0000 	.word	0x0bad0000
   20f24:	0003e1a2 	.word	0x0003e1a2
   20f28:	0003e347 	.word	0x0003e347
   20f2c:	0003e58a 	.word	0x0003e58a
   20f30:	0003e555 	.word	0x0003e555
   20f34:	40031100 	.word	0x40031100
   20f38:	0003e594 	.word	0x0003e594

00020f3c <lpuart_init>:
{
   20f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20f40:	b089      	sub	sp, #36	; 0x24
   20f42:	4605      	mov	r5, r0
	return dev->data;
   20f44:	6904      	ldr	r4, [r0, #16]
	return dev->config;
   20f46:	f8d0 9004 	ldr.w	r9, [r0, #4]
	data->uart = DEVICE_DT_GET(DT_INST_BUS(0));
   20f4a:	4858      	ldr	r0, [pc, #352]	; (210ac <lpuart_init+0x170>)
{
   20f4c:	af00      	add	r7, sp, #0
	data->uart = DEVICE_DT_GET(DT_INST_BUS(0));
   20f4e:	6020      	str	r0, [r4, #0]
   20f50:	f015 f882 	bl	36058 <z_device_is_ready>
	if (!device_is_ready(data->uart)) {
   20f54:	2800      	cmp	r0, #0
   20f56:	f000 80a6 	beq.w	210a6 <lpuart_init+0x16a>
	nrfx_gpiote_trigger_config_t trigger_config = {
   20f5a:	2302      	movs	r3, #2
	nrfx_gpiote_input_config_t input_config = {
   20f5c:	f04f 0801 	mov.w	r8, #1
	err = req_pin_init(data, cfg->req_pin);
   20f60:	f8d9 a000 	ldr.w	sl, [r9]
	nrfx_gpiote_trigger_config_t trigger_config = {
   20f64:	743b      	strb	r3, [r7, #16]
	nrfx_gpiote_handler_config_t handler_config = {
   20f66:	4b52      	ldr	r3, [pc, #328]	; (210b0 <lpuart_init+0x174>)
	nrfx_gpiote_trigger_config_t trigger_config = {
   20f68:	f107 0b0c 	add.w	fp, r7, #12
	nrfx_gpiote_handler_config_t handler_config = {
   20f6c:	e9c7 3406 	strd	r3, r4, [r7, #24]
	err = nrfx_gpiote_channel_alloc(&ch);
   20f70:	4658      	mov	r0, fp
	nrfx_gpiote_trigger_config_t trigger_config = {
   20f72:	f8c7 b014 	str.w	fp, [r7, #20]
	nrfx_gpiote_input_config_t input_config = {
   20f76:	f887 8008 	strb.w	r8, [r7, #8]
	err = nrfx_gpiote_channel_alloc(&ch);
   20f7a:	f005 f8df 	bl	2613c <nrfx_gpiote_channel_alloc>
	if (err != NRFX_SUCCESS) {
   20f7e:	4b4d      	ldr	r3, [pc, #308]	; (210b4 <lpuart_init+0x178>)
	err = nrfx_gpiote_channel_alloc(&ch);
   20f80:	4606      	mov	r6, r0
	if (err != NRFX_SUCCESS) {
   20f82:	4298      	cmp	r0, r3
   20f84:	d122      	bne.n	20fcc <lpuart_init+0x90>
	err = nrfx_gpiote_input_configure(pin, &input_config, &trigger_config, &handler_config);
   20f86:	4650      	mov	r0, sl
   20f88:	f107 0318 	add.w	r3, r7, #24
   20f8c:	f107 0210 	add.w	r2, r7, #16
   20f90:	f107 0108 	add.w	r1, r7, #8
   20f94:	f004 ff44 	bl	25e20 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   20f98:	42b0      	cmp	r0, r6
   20f9a:	6078      	str	r0, [r7, #4]
   20f9c:	d128      	bne.n	20ff0 <lpuart_init+0xb4>
	nrfx_gpiote_input_config_t input_config = {
   20f9e:	2600      	movs	r6, #0
	req_pin_idle(data);
   20fa0:	4620      	mov	r0, r4
	data->req_pin = pin;
   20fa2:	f8c4 a004 	str.w	sl, [r4, #4]
	req_pin_idle(data);
   20fa6:	f013 fc9b 	bl	348e0 <req_pin_idle>
	nrfx_gpiote_handler_config_t handler_config = {
   20faa:	4a43      	ldr	r2, [pc, #268]	; (210b8 <lpuart_init+0x17c>)
	err = rdy_pin_init(data, cfg->rdy_pin);
   20fac:	f8d9 9004 	ldr.w	r9, [r9, #4]
	err = nrfx_gpiote_channel_alloc(&data->rdy_ch);
   20fb0:	f104 000c 	add.w	r0, r4, #12
	nrfx_gpiote_handler_config_t handler_config = {
   20fb4:	e9c7 2406 	strd	r2, r4, [r7, #24]
	nrfx_gpiote_input_config_t input_config = {
   20fb8:	733e      	strb	r6, [r7, #12]
	err = nrfx_gpiote_channel_alloc(&data->rdy_ch);
   20fba:	f005 f8bf 	bl	2613c <nrfx_gpiote_channel_alloc>
	if (err != NRFX_SUCCESS) {
   20fbe:	687b      	ldr	r3, [r7, #4]
	err = nrfx_gpiote_channel_alloc(&data->rdy_ch);
   20fc0:	4682      	mov	sl, r0
	if (err != NRFX_SUCCESS) {
   20fc2:	4298      	cmp	r0, r3
   20fc4:	d017      	beq.n	20ff6 <lpuart_init+0xba>
		return -ENOMEM;
   20fc6:	f06f 050b 	mvn.w	r5, #11
   20fca:	e02e      	b.n	2102a <lpuart_init+0xee>
		return -ENOMEM;
   20fcc:	f06f 050b 	mvn.w	r5, #11
		LOG_ERR("req pin init failed:%d", err);
   20fd0:	466c      	mov	r4, sp
   20fd2:	b088      	sub	sp, #32
   20fd4:	466a      	mov	r2, sp
   20fd6:	4b39      	ldr	r3, [pc, #228]	; (210bc <lpuart_init+0x180>)
		LOG_ERR("rdy pin init failed:%d", err);
   20fd8:	e9c2 3505 	strd	r3, r5, [r2, #20]
   20fdc:	2303      	movs	r3, #3
   20fde:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   20fe2:	4837      	ldr	r0, [pc, #220]	; (210c0 <lpuart_init+0x184>)
   20fe4:	f842 3f10 	str.w	r3, [r2, #16]!
   20fe8:	f013 fcc3 	bl	34972 <z_log_msg_static_create.constprop.0>
   20fec:	46a5      	mov	sp, r4
		return err;
   20fee:	e039      	b.n	21064 <lpuart_init+0x128>
		return -EINVAL;
   20ff0:	f06f 0515 	mvn.w	r5, #21
   20ff4:	e7ec      	b.n	20fd0 <lpuart_init+0x94>
	err = nrfx_gpiote_input_configure(pin, &input_config, NULL, &handler_config);
   20ff6:	4632      	mov	r2, r6
   20ff8:	4659      	mov	r1, fp
   20ffa:	4648      	mov	r0, r9
   20ffc:	f107 0318 	add.w	r3, r7, #24
   21000:	f004 ff0e 	bl	25e20 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   21004:	4550      	cmp	r0, sl
   21006:	d015      	beq.n	21034 <lpuart_init+0xf8>
		LOG_ERR("err:%08x", err);
   21008:	466c      	mov	r4, sp
   2100a:	b088      	sub	sp, #32
   2100c:	466a      	mov	r2, sp
   2100e:	4b2d      	ldr	r3, [pc, #180]	; (210c4 <lpuart_init+0x188>)
   21010:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   21014:	e9c2 3005 	strd	r3, r0, [r2, #20]
   21018:	2303      	movs	r3, #3
   2101a:	4829      	ldr	r0, [pc, #164]	; (210c0 <lpuart_init+0x184>)
   2101c:	f842 3f10 	str.w	r3, [r2, #16]!
   21020:	f013 fca7 	bl	34972 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   21024:	f06f 0515 	mvn.w	r5, #21
   21028:	46a5      	mov	sp, r4
		LOG_ERR("rdy pin init failed:%d", err);
   2102a:	466c      	mov	r4, sp
   2102c:	b088      	sub	sp, #32
   2102e:	466a      	mov	r2, sp
   21030:	4b25      	ldr	r3, [pc, #148]	; (210c8 <lpuart_init+0x18c>)
   21032:	e7d1      	b.n	20fd8 <lpuart_init+0x9c>
	data->rdy_pin = pin;
   21034:	f8c4 9008 	str.w	r9, [r4, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   21038:	f107 0010 	add.w	r0, r7, #16
   2103c:	f8c7 9010 	str.w	r9, [r7, #16]
   21040:	f7ff fb00 	bl	20644 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   21044:	fa08 f309 	lsl.w	r3, r8, r9
    p_reg->OUTCLR = clr_mask;
   21048:	60c3      	str	r3, [r0, #12]
	k_timer_init(&data->tx_timer, tx_timeout, NULL);
   2104a:	4632      	mov	r2, r6
   2104c:	491f      	ldr	r1, [pc, #124]	; (210cc <lpuart_init+0x190>)
   2104e:	f104 0010 	add.w	r0, r4, #16
   21052:	f015 f963 	bl	3631c <k_timer_init>
	err = uart_callback_set(data->uart, uart_callback, (void *)dev);
   21056:	6820      	ldr	r0, [r4, #0]
	timer->user_data = user_data;
   21058:	6465      	str	r5, [r4, #68]	; 0x44
	if (api->callback_set == NULL) {
   2105a:	6883      	ldr	r3, [r0, #8]
   2105c:	681b      	ldr	r3, [r3, #0]
   2105e:	b933      	cbnz	r3, 2106e <lpuart_init+0x132>
		return -EINVAL;
   21060:	f06f 0515 	mvn.w	r5, #21
}
   21064:	4628      	mov	r0, r5
   21066:	3724      	adds	r7, #36	; 0x24
   21068:	46bd      	mov	sp, r7
   2106a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return api->callback_set(dev, callback, user_data);
   2106e:	462a      	mov	r2, r5
   21070:	4917      	ldr	r1, [pc, #92]	; (210d0 <lpuart_init+0x194>)
   21072:	4798      	blx	r3
	if (err < 0) {
   21074:	2800      	cmp	r0, #0
   21076:	dbf3      	blt.n	21060 <lpuart_init+0x124>
	if (api->callback_set == NULL) {
   21078:	68ab      	ldr	r3, [r5, #8]
   2107a:	681b      	ldr	r3, [r3, #0]
   2107c:	2b00      	cmp	r3, #0
   2107e:	d0ef      	beq.n	21060 <lpuart_init+0x124>
	return api->callback_set(dev, callback, user_data);
   21080:	4632      	mov	r2, r6
   21082:	4628      	mov	r0, r5
   21084:	4913      	ldr	r1, [pc, #76]	; (210d4 <lpuart_init+0x198>)
   21086:	4798      	blx	r3
	if (err < 0) {
   21088:	2800      	cmp	r0, #0
   2108a:	dbe9      	blt.n	21060 <lpuart_init+0x124>
	err = api_rx_enable(dev, data->int_driven.rxbuf,
   2108c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   21090:	4628      	mov	r0, r5
   21092:	2280      	movs	r2, #128	; 0x80
   21094:	f504 7186 	add.w	r1, r4, #268	; 0x10c
   21098:	f7ff fb26 	bl	206e8 <api_rx_enable>
	data->txbyte = -1;
   2109c:	f04f 33ff 	mov.w	r3, #4294967295
	err = api_rx_enable(dev, data->int_driven.rxbuf,
   210a0:	4605      	mov	r5, r0
	data->txbyte = -1;
   210a2:	64a3      	str	r3, [r4, #72]	; 0x48
	return err;
   210a4:	e7de      	b.n	21064 <lpuart_init+0x128>
		return -ENODEV;
   210a6:	f06f 0512 	mvn.w	r5, #18
   210aa:	e7db      	b.n	21064 <lpuart_init+0x128>
   210ac:	00037564 	.word	0x00037564
   210b0:	00020cd5 	.word	0x00020cd5
   210b4:	0bad0000 	.word	0x0bad0000
   210b8:	0002097d 	.word	0x0002097d
   210bc:	0003e5b3 	.word	0x0003e5b3
   210c0:	00037980 	.word	0x00037980
   210c4:	0003e5ca 	.word	0x0003e5ca
   210c8:	0003e5d3 	.word	0x0003e5d3
   210cc:	00020c31 	.word	0x00020c31
   210d0:	00020b4d 	.word	0x00020b4d
   210d4:	000207dd 	.word	0x000207dd

000210d8 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   210d8:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   210da:	490e      	ldr	r1, [pc, #56]	; (21114 <sys_clock_timeout_handler+0x3c>)
	return absolute_time & COUNTER_MAX;
   210dc:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   210e0:	e9d1 3400 	ldrd	r3, r4, [r1]
   210e4:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
   210e6:	18c3      	adds	r3, r0, r3
   210e8:	f144 0400 	adc.w	r4, r4, #0
   210ec:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   210f0:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   210f4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   210f8:	d209      	bcs.n	2110e <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   210fa:	4b07      	ldr	r3, [pc, #28]	; (21118 <sys_clock_timeout_handler+0x40>)
   210fc:	681b      	ldr	r3, [r3, #0]
   210fe:	0a1a      	lsrs	r2, r3, #8
   21100:	061b      	lsls	r3, r3, #24
   21102:	199c      	adds	r4, r3, r6
   21104:	4b05      	ldr	r3, [pc, #20]	; (2111c <sys_clock_timeout_handler+0x44>)
   21106:	f142 0500 	adc.w	r5, r2, #0
   2110a:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
   2110e:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
   21110:	f00a bc40 	b.w	2b994 <sys_clock_announce>
   21114:	2000dee0 	.word	0x2000dee0
   21118:	2000e88c 	.word	0x2000e88c
   2111c:	2000dee8 	.word	0x2000dee8

00021120 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   21120:	4b0d      	ldr	r3, [pc, #52]	; (21158 <z_nrf_rtc_timer_read+0x38>)
   21122:	6818      	ldr	r0, [r3, #0]
   21124:	0a01      	lsrs	r1, r0, #8
   21126:	0600      	lsls	r0, r0, #24
   21128:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   2112c:	4b0b      	ldr	r3, [pc, #44]	; (2115c <z_nrf_rtc_timer_read+0x3c>)
   2112e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   21132:	1818      	adds	r0, r3, r0
   21134:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   21138:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   2113c:	d20a      	bcs.n	21154 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   2113e:	4b08      	ldr	r3, [pc, #32]	; (21160 <z_nrf_rtc_timer_read+0x40>)
   21140:	e9d3 2300 	ldrd	r2, r3, [r3]
   21144:	4290      	cmp	r0, r2
   21146:	eb71 0303 	sbcs.w	r3, r1, r3
   2114a:	d203      	bcs.n	21154 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   2114c:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   21150:	f141 0100 	adc.w	r1, r1, #0
}
   21154:	4770      	bx	lr
   21156:	bf00      	nop
   21158:	2000e88c 	.word	0x2000e88c
   2115c:	40015000 	.word	0x40015000
   21160:	2000dee8 	.word	0x2000dee8

00021164 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
   21164:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   21168:	4b2e      	ldr	r3, [pc, #184]	; (21224 <rtc_nrf_isr+0xc0>)
   2116a:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	ARG_UNUSED(arg);

	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   2116e:	0790      	lsls	r0, r2, #30
   21170:	d50b      	bpl.n	2118a <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21172:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   21176:	b142      	cbz	r2, 2118a <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   21178:	2200      	movs	r2, #0
   2117a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	    nrf_rtc_event_check(RTC, NRF_RTC_EVENT_OVERFLOW)) {
		nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_OVERFLOW);
		overflow_cnt++;
   2117e:	4a2a      	ldr	r2, [pc, #168]	; (21228 <rtc_nrf_isr+0xc4>)
   21180:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   21184:	6813      	ldr	r3, [r2, #0]
   21186:	3301      	adds	r3, #1
   21188:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   2118a:	4a26      	ldr	r2, [pc, #152]	; (21224 <rtc_nrf_isr+0xc0>)
   2118c:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   21190:	03d9      	lsls	r1, r3, #15
   21192:	d527      	bpl.n	211e4 <rtc_nrf_isr+0x80>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   21194:	4b25      	ldr	r3, [pc, #148]	; (2122c <rtc_nrf_isr+0xc8>)
   21196:	e8d3 1fef 	ldaex	r1, [r3]
   2119a:	f021 0001 	bic.w	r0, r1, #1
   2119e:	e8c3 0fe4 	stlex	r4, r0, [r3]
   211a2:	2c00      	cmp	r4, #0
   211a4:	d1f7      	bne.n	21196 <rtc_nrf_isr+0x32>
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   211a6:	07cb      	lsls	r3, r1, #31
   211a8:	d402      	bmi.n	211b0 <rtc_nrf_isr+0x4c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   211aa:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
   211ae:	b1cb      	cbz	r3, 211e4 <rtc_nrf_isr+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   211b0:	2500      	movs	r5, #0
   211b2:	4c1c      	ldr	r4, [pc, #112]	; (21224 <rtc_nrf_isr+0xc0>)
   211b4:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   211b8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
   211bc:	f7ff ffb0 	bl	21120 <z_nrf_rtc_timer_read>
	__asm__ volatile(
   211c0:	f04f 0320 	mov.w	r3, #32
   211c4:	f3ef 8211 	mrs	r2, BASEPRI
   211c8:	f383 8812 	msr	BASEPRI_MAX, r3
   211cc:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   211d0:	4b17      	ldr	r3, [pc, #92]	; (21230 <rtc_nrf_isr+0xcc>)
   211d2:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   211d6:	42b0      	cmp	r0, r6
   211d8:	41b9      	sbcs	r1, r7
   211da:	d206      	bcs.n	211ea <rtc_nrf_isr+0x86>
	__asm__ volatile(
   211dc:	f382 8811 	msr	BASEPRI, r2
   211e0:	f3bf 8f6f 	isb	sy
	}

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		process_channel(chan);
	}
}
   211e4:	b003      	add	sp, #12
   211e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   211ea:	f04f 38ff 	mov.w	r8, #4294967295
			user_context = cc_data[chan].user_context;
   211ee:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   211f2:	f04f 39ff 	mov.w	r9, #4294967295
			cc_data[chan].callback = NULL;
   211f6:	601d      	str	r5, [r3, #0]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   211f8:	e9c3 8902 	strd	r8, r9, [r3, #8]
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   211fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   21200:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   21204:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   21208:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   2120c:	f382 8811 	msr	BASEPRI, r2
   21210:	f3bf 8f6f 	isb	sy
		if (handler) {
   21214:	2900      	cmp	r1, #0
   21216:	d0e5      	beq.n	211e4 <rtc_nrf_isr+0x80>
			handler(chan, expire_time, user_context);
   21218:	9000      	str	r0, [sp, #0]
   2121a:	4632      	mov	r2, r6
   2121c:	463b      	mov	r3, r7
   2121e:	4628      	mov	r0, r5
   21220:	4788      	blx	r1
   21222:	e7df      	b.n	211e4 <rtc_nrf_isr+0x80>
   21224:	40015000 	.word	0x40015000
   21228:	2000e88c 	.word	0x2000e88c
   2122c:	2000e884 	.word	0x2000e884
   21230:	2000ded0 	.word	0x2000ded0

00021234 <compare_set.constprop.0.isra.0>:
static int compare_set(int32_t chan, uint64_t target_time,
   21234:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21238:	4604      	mov	r4, r0
   2123a:	460d      	mov	r5, r1
   2123c:	4f43      	ldr	r7, [pc, #268]	; (2134c <compare_set.constprop.0.isra.0+0x118>)
   2123e:	e8d7 8fef 	ldaex	r8, [r7]
   21242:	f028 0301 	bic.w	r3, r8, #1
   21246:	e8c7 3fe2 	stlex	r2, r3, [r7]
   2124a:	2a00      	cmp	r2, #0
   2124c:	d1f7      	bne.n	2123e <compare_set.constprop.0.isra.0+0xa>
    p_reg->INTENCLR = mask;
   2124e:	f44f 3980 	mov.w	r9, #65536	; 0x10000
   21252:	4e3f      	ldr	r6, [pc, #252]	; (21350 <compare_set.constprop.0.isra.0+0x11c>)
   21254:	f8c6 9308 	str.w	r9, [r6, #776]	; 0x308
   21258:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2125c:	f3bf 8f6f 	isb	sy
	uint64_t curr_time = z_nrf_rtc_timer_read();
   21260:	f7ff ff5e 	bl	21120 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   21264:	42a0      	cmp	r0, r4
   21266:	eb71 0305 	sbcs.w	r3, r1, r5
	return prev & BIT(chan);
   2126a:	f008 0801 	and.w	r8, r8, #1
	if (curr_time < target_time) {
   2126e:	d240      	bcs.n	212f2 <compare_set.constprop.0.isra.0+0xbe>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
   21270:	4b38      	ldr	r3, [pc, #224]	; (21354 <compare_set.constprop.0.isra.0+0x120>)
   21272:	1a20      	subs	r0, r4, r0
   21274:	eb65 0101 	sbc.w	r1, r5, r1
   21278:	4298      	cmp	r0, r3
   2127a:	f171 0100 	sbcs.w	r1, r1, #0
   2127e:	d248      	bcs.n	21312 <compare_set.constprop.0.isra.0+0xde>
		if (target_time != cc_data[chan].target_time) {
   21280:	4b35      	ldr	r3, [pc, #212]	; (21358 <compare_set.constprop.0.isra.0+0x124>)
   21282:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   21286:	429d      	cmp	r5, r3
   21288:	bf08      	it	eq
   2128a:	4294      	cmpeq	r4, r2
   2128c:	d03a      	beq.n	21304 <compare_set.constprop.0.isra.0+0xd0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2128e:	f04f 0c00 	mov.w	ip, #0
	return absolute_time & COUNTER_MAX;
   21292:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
	uint32_t cc_val = req_cc;
   21296:	4683      	mov	fp, r0
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
   21298:	2103      	movs	r1, #3
	return (a - b) & COUNTER_MAX;
   2129a:	f06f 0e02 	mvn.w	lr, #2
    p_reg->EVTENCLR = mask;
   2129e:	f8c6 9348 	str.w	r9, [r6, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   212a2:	f8c6 c140 	str.w	ip, [r6, #320]	; 0x140
   212a6:	f8d6 3140 	ldr.w	r3, [r6, #320]	; 0x140
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   212aa:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 2135c <compare_set.constprop.0.isra.0+0x128>
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   212ae:	f02b 437f 	bic.w	r3, fp, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   212b2:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
    p_reg->EVTENSET = mask;
   212b6:	f8c6 9344 	str.w	r9, [r6, #836]	; 0x344
     return p_reg->COUNTER;
   212ba:	f8d6 2504 	ldr.w	r2, [r6, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   212be:	ebae 0302 	sub.w	r3, lr, r2
   212c2:	445b      	add	r3, fp
   212c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   212c8:	4553      	cmp	r3, sl
   212ca:	d91b      	bls.n	21304 <compare_set.constprop.0.isra.0+0xd0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   212cc:	f8d6 3140 	ldr.w	r3, [r6, #320]	; 0x140
			if (event_check(chan)) {
   212d0:	b15b      	cbz	r3, 212ea <compare_set.constprop.0.isra.0+0xb6>
     return p_reg->COUNTER;
   212d2:	f8d6 2504 	ldr.w	r2, [r6, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   212d6:	1a13      	subs	r3, r2, r0
   212d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
   212dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   212e0:	d910      	bls.n	21304 <compare_set.constprop.0.isra.0+0xd0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   212e2:	f8c6 c140 	str.w	ip, [r6, #320]	; 0x140
   212e6:	f8d6 3140 	ldr.w	r3, [r6, #320]	; 0x140
			cc_val = now + cc_inc;
   212ea:	eb01 0b02 	add.w	fp, r1, r2
			cc_inc++;
   212ee:	3101      	adds	r1, #1
	for (;;) {
   212f0:	e7dd      	b.n	212ae <compare_set.constprop.0.isra.0+0x7a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   212f2:	4b1b      	ldr	r3, [pc, #108]	; (21360 <compare_set.constprop.0.isra.0+0x12c>)
   212f4:	e8d3 1fef 	ldaex	r1, [r3]
   212f8:	f041 0101 	orr.w	r1, r1, #1
   212fc:	e8c3 1fe2 	stlex	r2, r1, [r3]
   21300:	2a00      	cmp	r2, #0
   21302:	d1f7      	bne.n	212f4 <compare_set.constprop.0.isra.0+0xc0>
	cc_data[chan].target_time = target_time;
   21304:	4b14      	ldr	r3, [pc, #80]	; (21358 <compare_set.constprop.0.isra.0+0x124>)
	cc_data[chan].callback = handler;
   21306:	4a17      	ldr	r2, [pc, #92]	; (21364 <compare_set.constprop.0.isra.0+0x130>)
	cc_data[chan].target_time = target_time;
   21308:	e9c3 4502 	strd	r4, r5, [r3, #8]
	cc_data[chan].callback = handler;
   2130c:	601a      	str	r2, [r3, #0]
	cc_data[chan].user_context = user_data;
   2130e:	2200      	movs	r2, #0
   21310:	605a      	str	r2, [r3, #4]
	if (key) {
   21312:	f1b8 0f00 	cmp.w	r8, #0
   21316:	d016      	beq.n	21346 <compare_set.constprop.0.isra.0+0x112>
   21318:	e8d7 3fef 	ldaex	r3, [r7]
   2131c:	f043 0301 	orr.w	r3, r3, #1
   21320:	e8c7 3fe2 	stlex	r2, r3, [r7]
   21324:	2a00      	cmp	r2, #0
   21326:	d1f7      	bne.n	21318 <compare_set.constprop.0.isra.0+0xe4>
    p_reg->INTENSET = mask;
   21328:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2132c:	4b08      	ldr	r3, [pc, #32]	; (21350 <compare_set.constprop.0.isra.0+0x11c>)
   2132e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21332:	4b0b      	ldr	r3, [pc, #44]	; (21360 <compare_set.constprop.0.isra.0+0x12c>)
   21334:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   21338:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2133a:	bf42      	ittt	mi
   2133c:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
   21340:	4b09      	ldrmi	r3, [pc, #36]	; (21368 <compare_set.constprop.0.isra.0+0x134>)
   21342:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   21346:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2134a:	bf00      	nop
   2134c:	2000e888 	.word	0x2000e888
   21350:	40015000 	.word	0x40015000
   21354:	00800001 	.word	0x00800001
   21358:	2000ded0 	.word	0x2000ded0
   2135c:	007ffffd 	.word	0x007ffffd
   21360:	2000e884 	.word	0x2000e884
   21364:	000210d9 	.word	0x000210d9
   21368:	e000e100 	.word	0xe000e100

0002136c <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
   2136c:	b570      	push	{r4, r5, r6, lr}
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   2136e:	f04f 30ff 	mov.w	r0, #4294967295
    p_reg->PRESCALER = val;
   21372:	2500      	movs	r5, #0
   21374:	f04f 31ff 	mov.w	r1, #4294967295
    p_reg->INTENCLR = mask;
   21378:	4c16      	ldr	r4, [pc, #88]	; (213d4 <sys_clock_driver_init+0x68>)
   2137a:	4b17      	ldr	r3, [pc, #92]	; (213d8 <sys_clock_driver_init+0x6c>)
    p_reg->INTENSET = mask;
   2137c:	2602      	movs	r6, #2
    p_reg->INTENCLR = mask;
   2137e:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
   21382:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
   21386:	4b15      	ldr	r3, [pc, #84]	; (213dc <sys_clock_driver_init+0x70>)
    p_reg->PRESCALER = val;
   21388:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
   2138c:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   21390:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   21394:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   21398:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   2139c:	4b10      	ldr	r3, [pc, #64]	; (213e0 <sys_clock_driver_init+0x74>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   2139e:	2101      	movs	r1, #1
   213a0:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
   213a4:	2015      	movs	r0, #21
   213a6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   213aa:	462a      	mov	r2, r5
   213ac:	f7f1 f8f8 	bl	125a0 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   213b0:	2015      	movs	r0, #21
   213b2:	f7f1 f8c5 	bl	12540 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   213b6:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   213b8:	4a0a      	ldr	r2, [pc, #40]	; (213e4 <sys_clock_driver_init+0x78>)
   213ba:	60a3      	str	r3, [r4, #8]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   213bc:	2100      	movs	r1, #0
   213be:	6023      	str	r3, [r4, #0]
   213c0:	4809      	ldr	r0, [pc, #36]	; (213e8 <sys_clock_driver_init+0x7c>)
	int_mask = BIT_MASK(CHAN_COUNT);
   213c2:	6013      	str	r3, [r2, #0]
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   213c4:	f7ff ff36 	bl	21234 <compare_set.constprop.0.isra.0>

	z_nrf_clock_control_lf_on(mode);
   213c8:	4630      	mov	r0, r6
   213ca:	f7fe f87f 	bl	1f4cc <z_nrf_clock_control_lf_on>

	return 0;
}
   213ce:	4628      	mov	r0, r5
   213d0:	bd70      	pop	{r4, r5, r6, pc}
   213d2:	bf00      	nop
   213d4:	40015000 	.word	0x40015000
   213d8:	000f0003 	.word	0x000f0003
   213dc:	2000ded0 	.word	0x2000ded0
   213e0:	e000e100 	.word	0xe000e100
   213e4:	2000e888 	.word	0x2000e888
   213e8:	007fffff 	.word	0x007fffff

000213ec <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
   213ec:	1c43      	adds	r3, r0, #1
{
   213ee:	b510      	push	{r4, lr}
	if (ticks == K_TICKS_FOREVER) {
   213f0:	d01d      	beq.n	2142e <sys_clock_set_timeout+0x42>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   213f2:	2801      	cmp	r0, #1
   213f4:	dd1d      	ble.n	21432 <sys_clock_set_timeout+0x46>
   213f6:	4a10      	ldr	r2, [pc, #64]	; (21438 <sys_clock_set_timeout+0x4c>)
   213f8:	4b10      	ldr	r3, [pc, #64]	; (2143c <sys_clock_set_timeout+0x50>)
   213fa:	4290      	cmp	r0, r2
   213fc:	bfd4      	ite	le
   213fe:	4604      	movle	r4, r0
   21400:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   21402:	f7ff fe8d 	bl	21120 <z_nrf_rtc_timer_read>
   21406:	4a0e      	ldr	r2, [pc, #56]	; (21440 <sys_clock_set_timeout+0x54>)
   21408:	e9d2 3100 	ldrd	r3, r1, [r2]
   2140c:	1ac0      	subs	r0, r0, r3
		cyc = 0;
   2140e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   21412:	bf28      	it	cs
   21414:	2400      	movcs	r4, #0
	if (cyc > MAX_CYCLES) {
   21416:	4a09      	ldr	r2, [pc, #36]	; (2143c <sys_clock_set_timeout+0x50>)
	cyc += unannounced;
   21418:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
   2141a:	4294      	cmp	r4, r2
   2141c:	bf28      	it	cs
   2141e:	4614      	movcs	r4, r2
	uint64_t target_time = cyc + last_count;
   21420:	18e0      	adds	r0, r4, r3
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   21422:	f141 0100 	adc.w	r1, r1, #0
}
   21426:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   2142a:	f7ff bf03 	b.w	21234 <compare_set.constprop.0.isra.0>
		cyc = MAX_TICKS * CYC_PER_TICK;
   2142e:	4c03      	ldr	r4, [pc, #12]	; (2143c <sys_clock_set_timeout+0x50>)
   21430:	e7e7      	b.n	21402 <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   21432:	2401      	movs	r4, #1
   21434:	e7e5      	b.n	21402 <sys_clock_set_timeout+0x16>
   21436:	bf00      	nop
   21438:	007ffffe 	.word	0x007ffffe
   2143c:	007fffff 	.word	0x007fffff
   21440:	2000dee0 	.word	0x2000dee0

00021444 <sys_clock_elapsed>:
{
   21444:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   21446:	f7ff fe6b 	bl	21120 <z_nrf_rtc_timer_read>
   2144a:	4b02      	ldr	r3, [pc, #8]	; (21454 <sys_clock_elapsed+0x10>)
   2144c:	681b      	ldr	r3, [r3, #0]
}
   2144e:	1ac0      	subs	r0, r0, r3
   21450:	bd08      	pop	{r3, pc}
   21452:	bf00      	nop
   21454:	2000dee0 	.word	0x2000dee0

00021458 <sys_clock_disable>:
   21458:	2301      	movs	r3, #1
{
   2145a:	b510      	push	{r4, lr}
   2145c:	4c07      	ldr	r4, [pc, #28]	; (2147c <sys_clock_disable+0x24>)
	irq_disable(RTC_IRQn);
   2145e:	2015      	movs	r0, #21
   21460:	6063      	str	r3, [r4, #4]
   21462:	f7f1 f87b 	bl	1255c <arch_irq_disable>
   21466:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->INTENCLR = mask;
   2146a:	4b05      	ldr	r3, [pc, #20]	; (21480 <sys_clock_disable+0x28>)
   2146c:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
   21470:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
   21474:	4b03      	ldr	r3, [pc, #12]	; (21484 <sys_clock_disable+0x2c>)
   21476:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   2147a:	bd10      	pop	{r4, pc}
   2147c:	40015000 	.word	0x40015000
   21480:	000f0003 	.word	0x000f0003
   21484:	e000e100 	.word	0xe000e100

00021488 <nrf_modem_lib_init>:

	return rc;
}

int nrf_modem_lib_init(void)
{
   21488:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(NRF_MODEM_IPC_IRQ, CONFIG_NRF_MODEM_LIB_IPC_IRQ_PRIO,
   2148a:	2200      	movs	r2, #0
   2148c:	2101      	movs	r1, #1
   2148e:	202a      	movs	r0, #42	; 0x2a
   21490:	f7f1 f886 	bl	125a0 <z_arm_irq_priority_set>
	rc = nrf_modem_init(&init_params);
   21494:	480e      	ldr	r0, [pc, #56]	; (214d0 <nrf_modem_lib_init+0x48>)
   21496:	f007 f8b1 	bl	285fc <nrf_modem_init>
   2149a:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(nrf_modem_lib_init_cb, e) {
   2149c:	4c0d      	ldr	r4, [pc, #52]	; (214d4 <nrf_modem_lib_init+0x4c>)
   2149e:	4e0e      	ldr	r6, [pc, #56]	; (214d8 <nrf_modem_lib_init+0x50>)
   214a0:	42b4      	cmp	r4, r6
   214a2:	d912      	bls.n	214ca <nrf_modem_lib_init+0x42>
   214a4:	490d      	ldr	r1, [pc, #52]	; (214dc <nrf_modem_lib_init+0x54>)
   214a6:	2380      	movs	r3, #128	; 0x80
   214a8:	4a0d      	ldr	r2, [pc, #52]	; (214e0 <nrf_modem_lib_init+0x58>)
   214aa:	480e      	ldr	r0, [pc, #56]	; (214e4 <nrf_modem_lib_init+0x5c>)
   214ac:	f00d ff8a 	bl	2f3c4 <assert_print>
   214b0:	480d      	ldr	r0, [pc, #52]	; (214e8 <nrf_modem_lib_init+0x60>)
   214b2:	f00d ff87 	bl	2f3c4 <assert_print>
   214b6:	2180      	movs	r1, #128	; 0x80
   214b8:	4809      	ldr	r0, [pc, #36]	; (214e0 <nrf_modem_lib_init+0x58>)
   214ba:	f00d ff7c 	bl	2f3b6 <assert_post_action>
		e->callback(rc, e->context);
   214be:	e9d4 3100 	ldrd	r3, r1, [r4]
   214c2:	4628      	mov	r0, r5
   214c4:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(nrf_modem_lib_init_cb, e) {
   214c6:	3408      	adds	r4, #8
   214c8:	e7ea      	b.n	214a0 <nrf_modem_lib_init+0x18>
   214ca:	d3f8      	bcc.n	214be <nrf_modem_lib_init+0x36>
	return _nrf_modem_lib_init();
}
   214cc:	4628      	mov	r0, r5
   214ce:	bd70      	pop	{r4, r5, r6, pc}
   214d0:	00038600 	.word	0x00038600
   214d4:	00042238 	.word	0x00042238
   214d8:	00042248 	.word	0x00042248
   214dc:	0003e62a 	.word	0x0003e62a
   214e0:	0003e5f8 	.word	0x0003e5f8
   214e4:	00039995 	.word	0x00039995
   214e8:	0003a18c 	.word	0x0003a18c

000214ec <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which nrf_modem_lib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   214ec:	b5f0      	push	{r4, r5, r6, r7, lr}
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   214ee:	4b0f      	ldr	r3, [pc, #60]	; (2152c <thread_monitor_entry_get+0x40>)
{
   214f0:	4601      	mov	r1, r0
		entry_age = rpc_event_cnt - entry->cnt;
   214f2:	681a      	ldr	r2, [r3, #0]
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   214f4:	4b0e      	ldr	r3, [pc, #56]	; (21530 <thread_monitor_entry_get+0x44>)
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   214f6:	250b      	movs	r5, #11
	int entry_age, oldest_entry_age = 0;
   214f8:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   214fa:	4618      	mov	r0, r3
   214fc:	461f      	mov	r7, r3
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   214fe:	42b8      	cmp	r0, r7
   21500:	d301      	bcc.n	21506 <thread_monitor_entry_get+0x1a>
   21502:	3d01      	subs	r5, #1
   21504:	d104      	bne.n	21510 <thread_monitor_entry_get+0x24>
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;

	return new_entry;
   21506:	4618      	mov	r0, r3
	new_entry->cnt = rpc_event_cnt - 1;
   21508:	3a01      	subs	r2, #1
	new_entry->id = id;
   2150a:	6019      	str	r1, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   2150c:	605a      	str	r2, [r3, #4]
}
   2150e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (entry->id == id) {
   21510:	6804      	ldr	r4, [r0, #0]
   21512:	428c      	cmp	r4, r1
   21514:	d0fb      	beq.n	2150e <thread_monitor_entry_get+0x22>
		} else if (entry->id == 0) {
   21516:	b13c      	cbz	r4, 21528 <thread_monitor_entry_get+0x3c>
		entry_age = rpc_event_cnt - entry->cnt;
   21518:	6844      	ldr	r4, [r0, #4]
   2151a:	1b14      	subs	r4, r2, r4
		if (entry_age > oldest_entry_age) {
   2151c:	42a6      	cmp	r6, r4
   2151e:	bfbc      	itt	lt
   21520:	4603      	movlt	r3, r0
   21522:	4626      	movlt	r6, r4
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   21524:	3008      	adds	r0, #8
   21526:	e7ea      	b.n	214fe <thread_monitor_entry_get+0x12>
   21528:	4603      	mov	r3, r0
   2152a:	e7ec      	b.n	21506 <thread_monitor_entry_get+0x1a>
   2152c:	2000e938 	.word	0x2000e938
   21530:	2000e944 	.word	0x2000e944

00021534 <on_init>:
	list->head = NULL;
   21534:	2000      	movs	r0, #0
   21536:	4b05      	ldr	r3, [pc, #20]	; (2154c <on_init+0x18>)
	list->tail = NULL;
   21538:	e9c3 0000 	strd	r0, r0, [r3]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2153c:	4b04      	ldr	r3, [pc, #16]	; (21550 <on_init+0x1c>)
   2153e:	e8d3 2fef 	ldaex	r2, [r3]
   21542:	e8c3 0fe1 	stlex	r1, r0, [r3]
   21546:	2900      	cmp	r1, #0
   21548:	d1f9      	bne.n	2153e <on_init+0xa>
	 */
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	return 0;
}
   2154a:	4770      	bx	lr
   2154c:	2000e93c 	.word	0x2000e93c
   21550:	2000e938 	.word	0x2000e938

00021554 <nrf_modem_os_timedwait>:
{
   21554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21558:	b088      	sub	sp, #32
   2155a:	4605      	mov	r5, r0
   2155c:	460e      	mov	r6, r1
	if (!nrf_modem_is_initialized()) {
   2155e:	f014 fd78 	bl	36052 <nrf_modem_is_initialized>
   21562:	b920      	cbnz	r0, 2156e <nrf_modem_os_timedwait+0x1a>
		return -NRF_ESHUTDOWN;
   21564:	f06f 006d 	mvn.w	r0, #109	; 0x6d
}
   21568:	b008      	add	sp, #32
   2156a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return z_impl_k_uptime_ticks();
   2156e:	f014 fead 	bl	362cc <z_impl_k_uptime_ticks>
	if (*timeout == 0) {
   21572:	6833      	ldr	r3, [r6, #0]
   21574:	4604      	mov	r4, r0
   21576:	2b00      	cmp	r3, #0
   21578:	460f      	mov	r7, r1
   2157a:	d104      	bne.n	21586 <nrf_modem_os_timedwait+0x32>
	z_impl_k_yield();
   2157c:	f009 fdac 	bl	2b0d8 <z_impl_k_yield>
		return -NRF_EAGAIN;
   21580:	f06f 000a 	mvn.w	r0, #10
   21584:	e7f0      	b.n	21568 <nrf_modem_os_timedwait+0x14>
		*timeout = SYS_FOREVER_MS;
   21586:	bfbc      	itt	lt
   21588:	f04f 33ff 	movlt.w	r3, #4294967295
   2158c:	6033      	strlt	r3, [r6, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   2158e:	2201      	movs	r2, #1
   21590:	2100      	movs	r1, #0
   21592:	a801      	add	r0, sp, #4
   21594:	f014 fdec 	bl	36170 <z_impl_k_sem_init>
   21598:	46e8      	mov	r8, sp
	thread->context = context;
   2159a:	9507      	str	r5, [sp, #28]
	__asm__ volatile(
   2159c:	f04f 0320 	mov.w	r3, #32
   215a0:	f3ef 8a11 	mrs	sl, BASEPRI
   215a4:	f383 8812 	msr	BASEPRI_MAX, r3
   215a8:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   215ac:	f009 ff02 	bl	2b3b4 <z_impl_z_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   215b0:	f7ff ff9c 	bl	214ec <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   215b4:	f8df 9118 	ldr.w	r9, [pc, #280]	; 216d0 <nrf_modem_os_timedwait+0x17c>
   215b8:	6842      	ldr	r2, [r0, #4]
   215ba:	f8d9 3000 	ldr.w	r3, [r9]
   215be:	429a      	cmp	r2, r3
   215c0:	d16d      	bne.n	2169e <nrf_modem_os_timedwait+0x14a>
	parent->next = child;
   215c2:	2300      	movs	r3, #0
	return list->tail;
   215c4:	4d43      	ldr	r5, [pc, #268]	; (216d4 <nrf_modem_os_timedwait+0x180>)
	parent->next = child;
   215c6:	9300      	str	r3, [sp, #0]
	return list->tail;
   215c8:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   215ca:	2b00      	cmp	r3, #0
   215cc:	d16e      	bne.n	216ac <nrf_modem_os_timedwait+0x158>
	list->head = node;
   215ce:	e9c5 8800 	strd	r8, r8, [r5]
	__asm__ volatile(
   215d2:	f38a 8811 	msr	BASEPRI, sl
   215d6:	f3bf 8f6f 	isb	sy
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   215da:	6833      	ldr	r3, [r6, #0]
   215dc:	1c5a      	adds	r2, r3, #1
   215de:	d06a      	beq.n	216b6 <nrf_modem_os_timedwait+0x162>
   215e0:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   215e4:	f240 30e7 	movw	r0, #999	; 0x3e7
   215e8:	2100      	movs	r1, #0
   215ea:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
   215ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   215f2:	2300      	movs	r3, #0
   215f4:	fbcc 010e 	smlal	r0, r1, ip, lr
   215f8:	f7e7 fc4c 	bl	8e94 <__aeabi_uldivmod>
   215fc:	4602      	mov	r2, r0
   215fe:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   21600:	a801      	add	r0, sp, #4
   21602:	f008 f895 	bl	29730 <z_impl_k_sem_take>
	__asm__ volatile(
   21606:	f04f 0320 	mov.w	r3, #32
   2160a:	f3ef 8a11 	mrs	sl, BASEPRI
   2160e:	f383 8812 	msr	BASEPRI_MAX, r3
   21612:	f3bf 8f6f 	isb	sy
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   21616:	2200      	movs	r2, #0
	return list->head;
   21618:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2161a:	b15b      	cbz	r3, 21634 <nrf_modem_os_timedwait+0xe0>
   2161c:	4543      	cmp	r3, r8
   2161e:	d154      	bne.n	216ca <nrf_modem_os_timedwait+0x176>
	return node->next;
   21620:	9900      	ldr	r1, [sp, #0]
Z_GENLIST_REMOVE(slist, snode)
   21622:	2a00      	cmp	r2, #0
   21624:	d14b      	bne.n	216be <nrf_modem_os_timedwait+0x16a>
   21626:	686a      	ldr	r2, [r5, #4]
	list->head = node;
   21628:	6029      	str	r1, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
   2162a:	429a      	cmp	r2, r3
   2162c:	d100      	bne.n	21630 <nrf_modem_os_timedwait+0xdc>
	list->tail = node;
   2162e:	6069      	str	r1, [r5, #4]
	parent->next = child;
   21630:	2300      	movs	r3, #0
   21632:	9300      	str	r3, [sp, #0]
	return z_impl_z_current_get();
   21634:	f009 febe 	bl	2b3b4 <z_impl_z_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   21638:	f7ff ff58 	bl	214ec <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   2163c:	f8d9 3000 	ldr.w	r3, [r9]
   21640:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   21642:	f38a 8811 	msr	BASEPRI, sl
   21646:	f3bf 8f6f 	isb	sy
	if (!nrf_modem_is_initialized()) {
   2164a:	f014 fd02 	bl	36052 <nrf_modem_is_initialized>
   2164e:	2800      	cmp	r0, #0
   21650:	d088      	beq.n	21564 <nrf_modem_os_timedwait+0x10>
	if (*timeout == SYS_FOREVER_MS) {
   21652:	6835      	ldr	r5, [r6, #0]
   21654:	1c6b      	adds	r3, r5, #1
   21656:	d027      	beq.n	216a8 <nrf_modem_os_timedwait+0x154>
	return z_impl_k_uptime_ticks();
   21658:	f014 fe38 	bl	362cc <z_impl_k_uptime_ticks>
   2165c:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
   21660:	fba0 320e 	umull	r3, r2, r0, lr
   21664:	fb0e 2101 	mla	r1, lr, r1, r2
   21668:	fba4 420e 	umull	r4, r2, r4, lr
   2166c:	fb0e 2207 	mla	r2, lr, r7, r2
   21670:	0bdb      	lsrs	r3, r3, #15
   21672:	0be4      	lsrs	r4, r4, #15
   21674:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   21678:	ea44 4442 	orr.w	r4, r4, r2, lsl #17
	delta = uptime - *reftime;
   2167c:	1b1b      	subs	r3, r3, r4
   2167e:	ea4f 31d1 	mov.w	r1, r1, lsr #15
	remaining = *timeout - k_uptime_delta(&start);
   21682:	ea4f 7ce5 	mov.w	ip, r5, asr #31
   21686:	eb61 31d2 	sbc.w	r1, r1, r2, lsr #15
   2168a:	1aed      	subs	r5, r5, r3
   2168c:	eb6c 0c01 	sbc.w	ip, ip, r1
	*timeout = remaining > 0 ? remaining : 0;
   21690:	f1bc 0f00 	cmp.w	ip, #0
   21694:	bfb8      	it	lt
   21696:	2500      	movlt	r5, #0
   21698:	6035      	str	r5, [r6, #0]
	if (*timeout == 0) {
   2169a:	b92d      	cbnz	r5, 216a8 <nrf_modem_os_timedwait+0x154>
   2169c:	e770      	b.n	21580 <nrf_modem_os_timedwait+0x2c>
	entry->cnt = rpc_event_cnt;
   2169e:	6043      	str	r3, [r0, #4]
   216a0:	f38a 8811 	msr	BASEPRI, sl
   216a4:	f3bf 8f6f 	isb	sy
		return 0;
   216a8:	2000      	movs	r0, #0
   216aa:	e75d      	b.n	21568 <nrf_modem_os_timedwait+0x14>
   216ac:	f8c3 8000 	str.w	r8, [r3]
	list->tail = node;
   216b0:	f8c5 8004 	str.w	r8, [r5, #4]
   216b4:	e78d      	b.n	215d2 <nrf_modem_os_timedwait+0x7e>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   216b6:	f04f 32ff 	mov.w	r2, #4294967295
   216ba:	4613      	mov	r3, r2
   216bc:	e7a0      	b.n	21600 <nrf_modem_os_timedwait+0xac>
	parent->next = child;
   216be:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   216c0:	6869      	ldr	r1, [r5, #4]
   216c2:	4299      	cmp	r1, r3
	list->tail = node;
   216c4:	bf08      	it	eq
   216c6:	606a      	streq	r2, [r5, #4]
}
   216c8:	e7b2      	b.n	21630 <nrf_modem_os_timedwait+0xdc>
	return node->next;
   216ca:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   216cc:	681b      	ldr	r3, [r3, #0]
   216ce:	e7a4      	b.n	2161a <nrf_modem_os_timedwait+0xc6>
   216d0:	2000e938 	.word	0x2000e938
   216d4:	2000e93c 	.word	0x2000e93c

000216d8 <nrf_modem_os_errno_set>:
{
   216d8:	b510      	push	{r4, lr}
	__ASSERT(err_code > 0, "Tried to set negative error code, %d", err_code);
   216da:	1e04      	subs	r4, r0, #0
   216dc:	dc0d      	bgt.n	216fa <nrf_modem_os_errno_set+0x22>
   216de:	23df      	movs	r3, #223	; 0xdf
   216e0:	4a08      	ldr	r2, [pc, #32]	; (21704 <nrf_modem_os_errno_set+0x2c>)
   216e2:	4909      	ldr	r1, [pc, #36]	; (21708 <nrf_modem_os_errno_set+0x30>)
   216e4:	4809      	ldr	r0, [pc, #36]	; (2170c <nrf_modem_os_errno_set+0x34>)
   216e6:	f00d fe6d 	bl	2f3c4 <assert_print>
   216ea:	4621      	mov	r1, r4
   216ec:	4808      	ldr	r0, [pc, #32]	; (21710 <nrf_modem_os_errno_set+0x38>)
   216ee:	f00d fe69 	bl	2f3c4 <assert_print>
   216f2:	21df      	movs	r1, #223	; 0xdf
   216f4:	4803      	ldr	r0, [pc, #12]	; (21704 <nrf_modem_os_errno_set+0x2c>)
   216f6:	f00d fe5e 	bl	2f3b6 <assert_post_action>
	errno = err_code;
   216fa:	f00f fb17 	bl	30d2c <__errno>
   216fe:	6004      	str	r4, [r0, #0]
}
   21700:	bd10      	pop	{r4, pc}
   21702:	bf00      	nop
   21704:	0003e64f 	.word	0x0003e64f
   21708:	0003e680 	.word	0x0003e680
   2170c:	00039995 	.word	0x00039995
   21710:	0003e68d 	.word	0x0003e68d

00021714 <nrf_modem_os_sem_init>:
{
   21714:	b570      	push	{r4, r5, r6, lr}
	if (PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)*sem)) {
   21716:	6803      	ldr	r3, [r0, #0]
   21718:	4c12      	ldr	r4, [pc, #72]	; (21764 <nrf_modem_os_sem_init+0x50>)
   2171a:	b12b      	cbz	r3, 21728 <nrf_modem_os_sem_init+0x14>
   2171c:	42a3      	cmp	r3, r4
   2171e:	d303      	bcc.n	21728 <nrf_modem_os_sem_init+0x14>
   21720:	f104 05a8 	add.w	r5, r4, #168	; 0xa8
   21724:	42ab      	cmp	r3, r5
   21726:	d317      	bcc.n	21758 <nrf_modem_os_sem_init+0x44>
	__ASSERT(used < NRF_MODEM_OS_NUM_SEM_REQUIRED,
   21728:	4d0f      	ldr	r5, [pc, #60]	; (21768 <nrf_modem_os_sem_init+0x54>)
   2172a:	782b      	ldrb	r3, [r5, #0]
   2172c:	2b06      	cmp	r3, #6
   2172e:	d90c      	bls.n	2174a <nrf_modem_os_sem_init+0x36>
   21730:	490e      	ldr	r1, [pc, #56]	; (2176c <nrf_modem_os_sem_init+0x58>)
   21732:	23f3      	movs	r3, #243	; 0xf3
   21734:	4a0e      	ldr	r2, [pc, #56]	; (21770 <nrf_modem_os_sem_init+0x5c>)
   21736:	480f      	ldr	r0, [pc, #60]	; (21774 <nrf_modem_os_sem_init+0x60>)
   21738:	f00d fe44 	bl	2f3c4 <assert_print>
   2173c:	480e      	ldr	r0, [pc, #56]	; (21778 <nrf_modem_os_sem_init+0x64>)
   2173e:	f00d fe41 	bl	2f3c4 <assert_print>
   21742:	21f3      	movs	r1, #243	; 0xf3
   21744:	480a      	ldr	r0, [pc, #40]	; (21770 <nrf_modem_os_sem_init+0x5c>)
   21746:	f00d fe36 	bl	2f3b6 <assert_post_action>
	*sem = &nrf_modem_os_sems[used++];
   2174a:	1c5e      	adds	r6, r3, #1
   2174c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   21750:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
   21754:	702e      	strb	r6, [r5, #0]
   21756:	6004      	str	r4, [r0, #0]
	return k_sem_init((struct k_sem *)*sem, initial_count, limit);
   21758:	6800      	ldr	r0, [r0, #0]
}
   2175a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   2175e:	f014 bd07 	b.w	36170 <z_impl_k_sem_init>
   21762:	bf00      	nop
   21764:	2000e890 	.word	0x2000e890
   21768:	2000f238 	.word	0x2000f238
   2176c:	0003e6b4 	.word	0x0003e6b4
   21770:	0003e64f 	.word	0x0003e64f
   21774:	00039995 	.word	0x00039995
   21778:	0003e6bd 	.word	0x0003e6bd

0002177c <nrf_modem_os_sem_give>:
{
   2177c:	b508      	push	{r3, lr}
	__ASSERT(PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)sem),
   2177e:	b128      	cbz	r0, 2178c <nrf_modem_os_sem_give+0x10>
   21780:	4a0b      	ldr	r2, [pc, #44]	; (217b0 <nrf_modem_os_sem_give+0x34>)
   21782:	4290      	cmp	r0, r2
   21784:	d302      	bcc.n	2178c <nrf_modem_os_sem_give+0x10>
   21786:	32a8      	adds	r2, #168	; 0xa8
   21788:	4290      	cmp	r0, r2
   2178a:	d30c      	bcc.n	217a6 <nrf_modem_os_sem_give+0x2a>
   2178c:	4909      	ldr	r1, [pc, #36]	; (217b4 <nrf_modem_os_sem_give+0x38>)
   2178e:	23fe      	movs	r3, #254	; 0xfe
   21790:	4a09      	ldr	r2, [pc, #36]	; (217b8 <nrf_modem_os_sem_give+0x3c>)
   21792:	480a      	ldr	r0, [pc, #40]	; (217bc <nrf_modem_os_sem_give+0x40>)
   21794:	f00d fe16 	bl	2f3c4 <assert_print>
   21798:	4809      	ldr	r0, [pc, #36]	; (217c0 <nrf_modem_os_sem_give+0x44>)
   2179a:	f00d fe13 	bl	2f3c4 <assert_print>
   2179e:	21fe      	movs	r1, #254	; 0xfe
   217a0:	4805      	ldr	r0, [pc, #20]	; (217b8 <nrf_modem_os_sem_give+0x3c>)
   217a2:	f00d fe08 	bl	2f3b6 <assert_post_action>
}
   217a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_impl_k_sem_give(sem);
   217aa:	f007 bf7d 	b.w	296a8 <z_impl_k_sem_give>
   217ae:	bf00      	nop
   217b0:	2000e890 	.word	0x2000e890
   217b4:	0003e6e3 	.word	0x0003e6e3
   217b8:	0003e64f 	.word	0x0003e64f
   217bc:	00039995 	.word	0x00039995
   217c0:	0003e869 	.word	0x0003e869

000217c4 <nrf_modem_os_sem_take>:
{
   217c4:	b570      	push	{r4, r5, r6, lr}
	__ASSERT(PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)sem),
   217c6:	4605      	mov	r5, r0
   217c8:	b128      	cbz	r0, 217d6 <nrf_modem_os_sem_take+0x12>
   217ca:	4b19      	ldr	r3, [pc, #100]	; (21830 <nrf_modem_os_sem_take+0x6c>)
   217cc:	4298      	cmp	r0, r3
   217ce:	d302      	bcc.n	217d6 <nrf_modem_os_sem_take+0x12>
   217d0:	33a8      	adds	r3, #168	; 0xa8
   217d2:	4298      	cmp	r0, r3
   217d4:	d30e      	bcc.n	217f4 <nrf_modem_os_sem_take+0x30>
   217d6:	4917      	ldr	r1, [pc, #92]	; (21834 <nrf_modem_os_sem_take+0x70>)
   217d8:	f44f 7384 	mov.w	r3, #264	; 0x108
   217dc:	4a16      	ldr	r2, [pc, #88]	; (21838 <nrf_modem_os_sem_take+0x74>)
   217de:	4817      	ldr	r0, [pc, #92]	; (2183c <nrf_modem_os_sem_take+0x78>)
   217e0:	f00d fdf0 	bl	2f3c4 <assert_print>
   217e4:	4816      	ldr	r0, [pc, #88]	; (21840 <nrf_modem_os_sem_take+0x7c>)
   217e6:	f00d fded 	bl	2f3c4 <assert_print>
   217ea:	f44f 7184 	mov.w	r1, #264	; 0x108
   217ee:	4812      	ldr	r0, [pc, #72]	; (21838 <nrf_modem_os_sem_take+0x74>)
   217f0:	f00d fde1 	bl	2f3b6 <assert_post_action>
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   217f4:	1c4b      	adds	r3, r1, #1
   217f6:	d017      	beq.n	21828 <nrf_modem_os_sem_take+0x64>
   217f8:	ea21 74e1 	bic.w	r4, r1, r1, asr #31
   217fc:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   21800:	f240 30e7 	movw	r0, #999	; 0x3e7
   21804:	2100      	movs	r1, #0
   21806:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2180a:	2300      	movs	r3, #0
   2180c:	fbc4 0106 	smlal	r0, r1, r4, r6
   21810:	f7e7 fb40 	bl	8e94 <__aeabi_uldivmod>
   21814:	4602      	mov	r2, r0
   21816:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   21818:	4628      	mov	r0, r5
   2181a:	f007 ff89 	bl	29730 <z_impl_k_sem_take>
		return -NRF_EAGAIN;
   2181e:	2800      	cmp	r0, #0
}
   21820:	bf18      	it	ne
   21822:	f06f 000a 	mvnne.w	r0, #10
   21826:	bd70      	pop	{r4, r5, r6, pc}
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   21828:	f04f 32ff 	mov.w	r2, #4294967295
   2182c:	4613      	mov	r3, r2
   2182e:	e7f3      	b.n	21818 <nrf_modem_os_sem_take+0x54>
   21830:	2000e890 	.word	0x2000e890
   21834:	0003e6e3 	.word	0x0003e6e3
   21838:	0003e64f 	.word	0x0003e64f
   2183c:	00039995 	.word	0x00039995
   21840:	0003e869 	.word	0x0003e869

00021844 <nrf_modem_os_event_notify>:
{
   21844:	b538      	push	{r3, r4, r5, lr}
   21846:	4605      	mov	r5, r0
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   21848:	4b0a      	ldr	r3, [pc, #40]	; (21874 <nrf_modem_os_event_notify+0x30>)
   2184a:	e8d3 1fef 	ldaex	r1, [r3]
   2184e:	3101      	adds	r1, #1
   21850:	e8c3 1fe2 	stlex	r2, r1, [r3]
   21854:	2a00      	cmp	r2, #0
   21856:	d1f8      	bne.n	2184a <nrf_modem_os_event_notify+0x6>
	return list->head;
   21858:	4b07      	ldr	r3, [pc, #28]	; (21878 <nrf_modem_os_event_notify+0x34>)
   2185a:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   2185c:	b904      	cbnz	r4, 21860 <nrf_modem_os_event_notify+0x1c>
}
   2185e:	bd38      	pop	{r3, r4, r5, pc}
		if ((thread->context == context) || (context == 0)) {
   21860:	69e3      	ldr	r3, [r4, #28]
   21862:	42ab      	cmp	r3, r5
   21864:	d000      	beq.n	21868 <nrf_modem_os_event_notify+0x24>
   21866:	b915      	cbnz	r5, 2186e <nrf_modem_os_event_notify+0x2a>
	z_impl_k_sem_give(sem);
   21868:	1d20      	adds	r0, r4, #4
   2186a:	f007 ff1d 	bl	296a8 <z_impl_k_sem_give>
	return node->next;
   2186e:	6824      	ldr	r4, [r4, #0]
   21870:	e7f4      	b.n	2185c <nrf_modem_os_event_notify+0x18>
   21872:	bf00      	nop
   21874:	2000e938 	.word	0x2000e938
   21878:	2000e93c 	.word	0x2000e93c

0002187c <nrf_modem_os_alloc>:
{
   2187c:	4601      	mov	r1, r0
	void * const addr = k_heap_alloc(&nrf_modem_lib_heap, bytes, K_NO_WAIT);
   2187e:	2200      	movs	r2, #0
   21880:	2300      	movs	r3, #0
   21882:	4801      	ldr	r0, [pc, #4]	; (21888 <nrf_modem_os_alloc+0xc>)
   21884:	f014 bbff 	b.w	36086 <k_heap_alloc>
   21888:	2000e994 	.word	0x2000e994

0002188c <nrf_modem_os_free>:
{
   2188c:	4601      	mov	r1, r0
	k_heap_free(&nrf_modem_lib_heap, mem);
   2188e:	4801      	ldr	r0, [pc, #4]	; (21894 <nrf_modem_os_free+0x8>)
   21890:	f007 b9ee 	b.w	28c70 <k_heap_free>
   21894:	2000e994 	.word	0x2000e994

00021898 <nrf_modem_os_shm_tx_alloc>:
{
   21898:	4601      	mov	r1, r0
	void * const addr = k_heap_alloc(&nrf_modem_lib_shmem_heap, bytes, K_NO_WAIT);
   2189a:	2200      	movs	r2, #0
   2189c:	2300      	movs	r3, #0
   2189e:	4801      	ldr	r0, [pc, #4]	; (218a4 <nrf_modem_os_shm_tx_alloc+0xc>)
   218a0:	f014 bbf1 	b.w	36086 <k_heap_alloc>
   218a4:	2000e9ac 	.word	0x2000e9ac

000218a8 <nrf_modem_os_shm_tx_free>:
{
   218a8:	4601      	mov	r1, r0
	k_heap_free(&nrf_modem_lib_shmem_heap, mem);
   218aa:	4801      	ldr	r0, [pc, #4]	; (218b0 <nrf_modem_os_shm_tx_free+0x8>)
   218ac:	f007 b9e0 	b.w	28c70 <k_heap_free>
   218b0:	2000e9ac 	.word	0x2000e9ac

000218b4 <nrf_modem_os_init>:

/* On modem initialization.
 * This function is called by nrf_modem_init()
 */
void nrf_modem_os_init(void)
{
   218b4:	b508      	push	{r3, lr}
	/* Initialize heaps */
	k_heap_init(&nrf_modem_lib_heap, library_heap_buf, sizeof(library_heap_buf));
   218b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   218ba:	4906      	ldr	r1, [pc, #24]	; (218d4 <nrf_modem_os_init+0x20>)
   218bc:	4806      	ldr	r0, [pc, #24]	; (218d8 <nrf_modem_os_init+0x24>)
   218be:	f014 fbda 	bl	36076 <k_heap_init>
	k_heap_init(&nrf_modem_lib_shmem_heap, (void *)PM_NRF_MODEM_LIB_TX_ADDRESS,
		    CONFIG_NRF_MODEM_LIB_SHMEM_TX_SIZE);
}
   218c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_heap_init(&nrf_modem_lib_shmem_heap, (void *)PM_NRF_MODEM_LIB_TX_ADDRESS,
   218c6:	f44f 5202 	mov.w	r2, #8320	; 0x2080
   218ca:	4904      	ldr	r1, [pc, #16]	; (218dc <nrf_modem_os_init+0x28>)
   218cc:	4804      	ldr	r0, [pc, #16]	; (218e0 <nrf_modem_os_init+0x2c>)
   218ce:	f014 bbd2 	b.w	36076 <k_heap_init>
   218d2:	bf00      	nop
   218d4:	2000f239 	.word	0x2000f239
   218d8:	2000e994 	.word	0x2000e994
   218dc:	200084e8 	.word	0x200084e8
   218e0:	2000e9ac 	.word	0x2000e9ac

000218e4 <nrf_modem_os_shutdown>:

void nrf_modem_os_shutdown(void)
{
   218e4:	b510      	push	{r4, lr}
	return list->head;
   218e6:	4b04      	ldr	r3, [pc, #16]	; (218f8 <nrf_modem_os_shutdown+0x14>)
   218e8:	681c      	ldr	r4, [r3, #0]
	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   218ea:	b904      	cbnz	r4, 218ee <nrf_modem_os_shutdown+0xa>
		k_sem_give(&thread->sem);
	}
}
   218ec:	bd10      	pop	{r4, pc}
   218ee:	1d20      	adds	r0, r4, #4
   218f0:	f007 feda 	bl	296a8 <z_impl_k_sem_give>
	return node->next;
   218f4:	6824      	ldr	r4, [r4, #0]
   218f6:	e7f8      	b.n	218ea <nrf_modem_os_shutdown+0x6>
   218f8:	2000e93c 	.word	0x2000e93c

000218fc <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   218fc:	2801      	cmp	r0, #1
   218fe:	d01e      	beq.n	2193e <z_to_nrf_optname+0x42>
   21900:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   21904:	d123      	bne.n	2194e <z_to_nrf_optname+0x52>
	case SOL_TLS:
		switch (z_in_optname) {
   21906:	1e4b      	subs	r3, r1, #1
   21908:	2b14      	cmp	r3, #20
   2190a:	d820      	bhi.n	2194e <z_to_nrf_optname+0x52>
   2190c:	e8df f003 	tbb	[pc, r3]
   21910:	0c0c0c0c 	.word	0x0c0c0c0c
   21914:	1f1f0c0c 	.word	0x1f1f0c0c
   21918:	0c1f1f1f 	.word	0x0c1f1f1f
   2191c:	1f1f0c0c 	.word	0x1f1f0c0c
   21920:	13110f0b 	.word	0x13110f0b
   21924:	15          	.byte	0x15
   21925:	00          	.byte	0x00
		case TLS_CIPHERSUITE_USED:
			*nrf_out_optname = NRF_SO_SEC_CIPHERSUITE_USED;
			break;
		case TLS_DTLS_CID:
			*nrf_out_optname = NRF_SO_SEC_DTLS_CID;
			break;
   21926:	210f      	movs	r1, #15
	int retval = 0;
   21928:	2000      	movs	r0, #0
		switch (z_in_optname) {
		case SO_ERROR:
			*nrf_out_optname = NRF_SO_ERROR;
			break;
		case SO_RCVTIMEO:
			*nrf_out_optname = NRF_SO_RCVTIMEO;
   2192a:	6011      	str	r1, [r2, #0]
   2192c:	4770      	bx	lr
			break;
   2192e:	2110      	movs	r1, #16
   21930:	e7fa      	b.n	21928 <z_to_nrf_optname+0x2c>
			break;
   21932:	2111      	movs	r1, #17
   21934:	e7f8      	b.n	21928 <z_to_nrf_optname+0x2c>
			break;
   21936:	2112      	movs	r1, #18
   21938:	e7f6      	b.n	21928 <z_to_nrf_optname+0x2c>
			break;
   2193a:	2113      	movs	r1, #19
   2193c:	e7f4      	b.n	21928 <z_to_nrf_optname+0x2c>
		switch (z_in_optname) {
   2193e:	2937      	cmp	r1, #55	; 0x37
   21940:	dc05      	bgt.n	2194e <z_to_nrf_optname+0x52>
   21942:	2913      	cmp	r1, #19
   21944:	dc06      	bgt.n	21954 <z_to_nrf_optname+0x58>
   21946:	2902      	cmp	r1, #2
   21948:	d0ee      	beq.n	21928 <z_to_nrf_optname+0x2c>
   2194a:	2904      	cmp	r1, #4
   2194c:	d0ec      	beq.n	21928 <z_to_nrf_optname+0x2c>
   2194e:	f04f 30ff 	mov.w	r0, #4294967295
		retval = -1;
		break;
	}

	return retval;
}
   21952:	4770      	bx	lr
   21954:	f1a1 0314 	sub.w	r3, r1, #20
   21958:	2b23      	cmp	r3, #35	; 0x23
   2195a:	d8f8      	bhi.n	2194e <z_to_nrf_optname+0x52>
   2195c:	a001      	add	r0, pc, #4	; (adr r0, 21964 <z_to_nrf_optname+0x68>)
   2195e:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   21962:	bf00      	nop
   21964:	00021929 	.word	0x00021929
   21968:	00021929 	.word	0x00021929
   2196c:	0002194f 	.word	0x0002194f
   21970:	0002194f 	.word	0x0002194f
   21974:	0002194f 	.word	0x0002194f
   21978:	00021929 	.word	0x00021929
   2197c:	0002194f 	.word	0x0002194f
   21980:	0002194f 	.word	0x0002194f
   21984:	0002194f 	.word	0x0002194f
   21988:	0002194f 	.word	0x0002194f
   2198c:	00021929 	.word	0x00021929
   21990:	00021929 	.word	0x00021929
   21994:	00021929 	.word	0x00021929
   21998:	0002194f 	.word	0x0002194f
   2199c:	0002194f 	.word	0x0002194f
   219a0:	0002194f 	.word	0x0002194f
   219a4:	0002194f 	.word	0x0002194f
   219a8:	0002194f 	.word	0x0002194f
   219ac:	0002194f 	.word	0x0002194f
   219b0:	0002194f 	.word	0x0002194f
   219b4:	0002194f 	.word	0x0002194f
   219b8:	0002194f 	.word	0x0002194f
   219bc:	0002194f 	.word	0x0002194f
   219c0:	0002194f 	.word	0x0002194f
   219c4:	0002194f 	.word	0x0002194f
   219c8:	0002194f 	.word	0x0002194f
   219cc:	0002194f 	.word	0x0002194f
   219d0:	0002194f 	.word	0x0002194f
   219d4:	0002194f 	.word	0x0002194f
   219d8:	0002194f 	.word	0x0002194f
   219dc:	00021929 	.word	0x00021929
   219e0:	00021929 	.word	0x00021929
   219e4:	00021929 	.word	0x00021929
   219e8:	00021929 	.word	0x00021929
   219ec:	00021929 	.word	0x00021929
   219f0:	00021929 	.word	0x00021929

000219f4 <nrf91_socket_offload_init>:
static int nrf91_socket_offload_init(const struct device *arg)
{
	ARG_UNUSED(arg);

	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
		offload_ctx[i].nrf_fd = -1;
   219f4:	f04f 32ff 	mov.w	r2, #4294967295
   219f8:	4b06      	ldr	r3, [pc, #24]	; (21a14 <nrf91_socket_offload_init+0x20>)
	}

	return 0;
}
   219fa:	2000      	movs	r0, #0
		offload_ctx[i].nrf_fd = -1;
   219fc:	601a      	str	r2, [r3, #0]
   219fe:	619a      	str	r2, [r3, #24]
   21a00:	631a      	str	r2, [r3, #48]	; 0x30
   21a02:	649a      	str	r2, [r3, #72]	; 0x48
   21a04:	661a      	str	r2, [r3, #96]	; 0x60
   21a06:	679a      	str	r2, [r3, #120]	; 0x78
   21a08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   21a0c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
   21a10:	4770      	bx	lr
   21a12:	bf00      	nop
   21a14:	2000e9c8 	.word	0x2000e9c8

00021a18 <nrf91_socket_is_supported>:
	if (offload_disabled) {
   21a18:	490b      	ldr	r1, [pc, #44]	; (21a48 <nrf91_socket_is_supported+0x30>)
{
   21a1a:	4603      	mov	r3, r0
	if (offload_disabled) {
   21a1c:	7808      	ldrb	r0, [r1, #0]
   21a1e:	b980      	cbnz	r0, 21a42 <nrf91_socket_is_supported+0x2a>
	if (tls_offload_disabled && proto_is_secure(proto)) {
   21a20:	490a      	ldr	r1, [pc, #40]	; (21a4c <nrf91_socket_is_supported+0x34>)
   21a22:	7809      	ldrb	r1, [r1, #0]
   21a24:	b139      	cbz	r1, 21a36 <nrf91_socket_is_supported+0x1e>
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
   21a26:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
   21a2a:	2902      	cmp	r1, #2
   21a2c:	d90a      	bls.n	21a44 <nrf91_socket_is_supported+0x2c>
	       (proto >= IPPROTO_DTLS_1_0 && proto <= IPPROTO_DTLS_1_2);
   21a2e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
   21a32:	2a01      	cmp	r2, #1
   21a34:	d906      	bls.n	21a44 <nrf91_socket_is_supported+0x2c>
	return (family == AF_PACKET) || (family == AF_INET) || (family == AF_INET6);
   21a36:	3b01      	subs	r3, #1
   21a38:	2b02      	cmp	r3, #2
   21a3a:	bf8c      	ite	hi
   21a3c:	2000      	movhi	r0, #0
   21a3e:	2001      	movls	r0, #1
	return af_is_supported(family);
   21a40:	4770      	bx	lr
		return false;
   21a42:	2000      	movs	r0, #0
}
   21a44:	4770      	bx	lr
   21a46:	bf00      	nop
   21a48:	2000f6ba 	.word	0x2000f6ba
   21a4c:	2000f6b9 	.word	0x2000f6b9

00021a50 <pollcb>:
{
   21a50:	b470      	push	{r4, r5, r6}
	for (size_t i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   21a52:	2300      	movs	r3, #0
   21a54:	2518      	movs	r5, #24
	ctx = find_ctx(pollfd->fd);
   21a56:	6801      	ldr	r1, [r0, #0]
		if (offload_ctx[i].nrf_fd == fd) {
   21a58:	4c08      	ldr	r4, [pc, #32]	; (21a7c <pollcb+0x2c>)
   21a5a:	fb05 f203 	mul.w	r2, r5, r3
   21a5e:	58a6      	ldr	r6, [r4, r2]
   21a60:	42b1      	cmp	r1, r6
   21a62:	d106      	bne.n	21a72 <pollcb+0x22>
	k_poll_signal_raise(&ctx->poll, pollfd->revents);
   21a64:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
   21a68:	3208      	adds	r2, #8
	return z_impl_k_poll_signal_raise(sig, result);
   21a6a:	18a0      	adds	r0, r4, r2
}
   21a6c:	bc70      	pop	{r4, r5, r6}
   21a6e:	f00a bc65 	b.w	2c33c <z_impl_k_poll_signal_raise>
	for (size_t i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   21a72:	3301      	adds	r3, #1
   21a74:	2b08      	cmp	r3, #8
   21a76:	d1f0      	bne.n	21a5a <pollcb+0xa>
}
   21a78:	bc70      	pop	{r4, r5, r6}
   21a7a:	4770      	bx	lr
   21a7c:	2000e9c8 	.word	0x2000e9c8

00021a80 <nrf91_socket_offload_getaddrinfo>:
{
   21a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21a84:	4614      	mov	r4, r2
   21a86:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   21a88:	2100      	movs	r1, #0
{
   21a8a:	b08b      	sub	sp, #44	; 0x2c
   21a8c:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   21a8e:	2220      	movs	r2, #32
   21a90:	a802      	add	r0, sp, #8
{
   21a92:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
   21a94:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   21a96:	f014 fd67 	bl	36568 <memset>
	if (hints != NULL) {
   21a9a:	b15c      	cbz	r4, 21ab4 <nrf91_socket_offload_getaddrinfo+0x34>
	nrf_out->ai_flags = z_in->ai_flags;
   21a9c:	6863      	ldr	r3, [r4, #4]
   21a9e:	9302      	str	r3, [sp, #8]
	nrf_out->ai_socktype = z_in->ai_socktype;
   21aa0:	68e3      	ldr	r3, [r4, #12]
   21aa2:	9304      	str	r3, [sp, #16]
	nrf_out->ai_family = z_in->ai_family;
   21aa4:	68a3      	ldr	r3, [r4, #8]
   21aa6:	9303      	str	r3, [sp, #12]
	nrf_out->ai_protocol = z_in->ai_protocol;
   21aa8:	6923      	ldr	r3, [r4, #16]
   21aaa:	9305      	str	r3, [sp, #20]
	if (z_in->ai_canonname != NULL) {
   21aac:	69e3      	ldr	r3, [r4, #28]
   21aae:	b103      	cbz	r3, 21ab2 <nrf91_socket_offload_getaddrinfo+0x32>
		nrf_out->ai_canonname = z_in->ai_canonname;
   21ab0:	9308      	str	r3, [sp, #32]
		nrf_hints_ptr = &nrf_hints;
   21ab2:	ac02      	add	r4, sp, #8
	k_mutex_lock(&getaddrinfo_lock, K_FOREVER);
   21ab4:	f04f 32ff 	mov.w	r2, #4294967295
   21ab8:	f04f 33ff 	mov.w	r3, #4294967295
   21abc:	4834      	ldr	r0, [pc, #208]	; (21b90 <nrf91_socket_offload_getaddrinfo+0x110>)
   21abe:	f013 f93b 	bl	34d38 <k_mutex_lock.constprop.0.isra.0>
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   21ac2:	4631      	mov	r1, r6
   21ac4:	4622      	mov	r2, r4
   21ac6:	4628      	mov	r0, r5
   21ac8:	ab01      	add	r3, sp, #4
   21aca:	f005 fdbf 	bl	2764c <nrf_getaddrinfo>
	if (retval != 0) {
   21ace:	4606      	mov	r6, r0
   21ad0:	b948      	cbnz	r0, 21ae6 <nrf91_socket_offload_getaddrinfo+0x66>
	struct zsock_addrinfo *latest_z_res = NULL;
   21ad2:	4680      	mov	r8, r0
	z_out->ai_next = NULL;
   21ad4:	4681      	mov	r9, r0
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   21ad6:	f04f 0a18 	mov.w	sl, #24
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   21ada:	9d01      	ldr	r5, [sp, #4]
	*res = NULL;
   21adc:	6038      	str	r0, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   21ade:	b94d      	cbnz	r5, 21af4 <nrf91_socket_offload_getaddrinfo+0x74>
	nrf_freeaddrinfo(nrf_res);
   21ae0:	9801      	ldr	r0, [sp, #4]
   21ae2:	f013 fe30 	bl	35746 <nrf_freeaddrinfo>
	k_mutex_unlock(&getaddrinfo_lock);
   21ae6:	482a      	ldr	r0, [pc, #168]	; (21b90 <nrf91_socket_offload_getaddrinfo+0x110>)
   21ae8:	f013 f928 	bl	34d3c <k_mutex_unlock.isra.0>
}
   21aec:	4630      	mov	r0, r6
   21aee:	b00b      	add	sp, #44	; 0x2c
   21af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					k_malloc(sizeof(struct zsock_addrinfo));
   21af4:	2050      	movs	r0, #80	; 0x50
   21af6:	f014 fce4 	bl	364c2 <k_malloc>
		if (next_z_res == NULL) {
   21afa:	4604      	mov	r4, r0
   21afc:	2800      	cmp	r0, #0
   21afe:	d040      	beq.n	21b82 <nrf91_socket_offload_getaddrinfo+0x102>
	z_out->ai_next = NULL;
   21b00:	f8c0 9000 	str.w	r9, [r0]
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   21b04:	f8c0 901c 	str.w	r9, [r0, #28]
	z_out->ai_flags = nrf_in->ai_flags;
   21b08:	682b      	ldr	r3, [r5, #0]
   21b0a:	6043      	str	r3, [r0, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   21b0c:	68ab      	ldr	r3, [r5, #8]
   21b0e:	60c3      	str	r3, [r0, #12]
	z_out->ai_family = nrf_in->ai_family;
   21b10:	686b      	ldr	r3, [r5, #4]
   21b12:	6083      	str	r3, [r0, #8]
	z_out->ai_protocol = nrf_in->ai_protocol;
   21b14:	68eb      	ldr	r3, [r5, #12]
   21b16:	6103      	str	r3, [r0, #16]
	if (nrf_in->ai_family == NRF_AF_INET) {
   21b18:	f8d5 b004 	ldr.w	fp, [r5, #4]
   21b1c:	f1bb 0f01 	cmp.w	fp, #1
   21b20:	d114      	bne.n	21b4c <nrf91_socket_offload_getaddrinfo+0xcc>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   21b22:	2008      	movs	r0, #8
   21b24:	f014 fccd 	bl	364c2 <k_malloc>
   21b28:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   21b2a:	b338      	cbz	r0, 21b7c <nrf91_socket_offload_getaddrinfo+0xfc>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   21b2c:	2308      	movs	r3, #8
   21b2e:	6163      	str	r3, [r4, #20]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   21b30:	696b      	ldr	r3, [r5, #20]
	ptr->sin_port = nrf_in->sin_port;
   21b32:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_family = AF_INET;
   21b34:	f8a0 b000 	strh.w	fp, [r0]
	ptr->sin_port = nrf_in->sin_port;
   21b38:	8042      	strh	r2, [r0, #2]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   21b3a:	68db      	ldr	r3, [r3, #12]
   21b3c:	6043      	str	r3, [r0, #4]
		if (latest_z_res == NULL) {
   21b3e:	f1b8 0f00 	cmp.w	r8, #0
   21b42:	d121      	bne.n	21b88 <nrf91_socket_offload_getaddrinfo+0x108>
			*res = next_z_res;
   21b44:	603c      	str	r4, [r7, #0]
					k_malloc(sizeof(struct zsock_addrinfo));
   21b46:	46a0      	mov	r8, r4
		next_nrf_res = next_nrf_res->ai_next;
   21b48:	69ed      	ldr	r5, [r5, #28]
   21b4a:	e7c8      	b.n	21ade <nrf91_socket_offload_getaddrinfo+0x5e>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   21b4c:	f1bb 0f02 	cmp.w	fp, #2
   21b50:	d009      	beq.n	21b66 <nrf91_socket_offload_getaddrinfo+0xe6>
			k_free(next_z_res);
   21b52:	f014 fcaf 	bl	364b4 <k_free>
			retval = DNS_EAI_FAMILY;
   21b56:	f06f 0605 	mvn.w	r6, #5
		nrf91_socket_offload_freeaddrinfo(*res);
   21b5a:	6838      	ldr	r0, [r7, #0]
   21b5c:	f013 f821 	bl	34ba2 <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   21b60:	2300      	movs	r3, #0
   21b62:	603b      	str	r3, [r7, #0]
   21b64:	e7bc      	b.n	21ae0 <nrf91_socket_offload_getaddrinfo+0x60>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   21b66:	2018      	movs	r0, #24
   21b68:	f014 fcab 	bl	364c2 <k_malloc>
   21b6c:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   21b6e:	b128      	cbz	r0, 21b7c <nrf91_socket_offload_getaddrinfo+0xfc>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   21b70:	f8c4 a014 	str.w	sl, [r4, #20]
		nrf_to_z_ipv6(z_out->ai_addr,
   21b74:	6969      	ldr	r1, [r5, #20]
   21b76:	f013 f821 	bl	34bbc <nrf_to_z_ipv6>
		if (err == -ENOMEM) {
   21b7a:	e7e0      	b.n	21b3e <nrf91_socket_offload_getaddrinfo+0xbe>
			k_free(next_z_res);
   21b7c:	4620      	mov	r0, r4
   21b7e:	f014 fc99 	bl	364b4 <k_free>
					k_malloc(sizeof(struct zsock_addrinfo));
   21b82:	f06f 0609 	mvn.w	r6, #9
   21b86:	e7e8      	b.n	21b5a <nrf91_socket_offload_getaddrinfo+0xda>
			latest_z_res->ai_next = next_z_res;
   21b88:	f8c8 4000 	str.w	r4, [r8]
   21b8c:	e7db      	b.n	21b46 <nrf91_socket_offload_getaddrinfo+0xc6>
   21b8e:	bf00      	nop
   21b90:	2000ce9c 	.word	0x2000ce9c

00021b94 <nrf91_socket_offload_sendmsg>:
{
   21b94:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   21b98:	4607      	mov	r7, r0
   21b9a:	4690      	mov	r8, r2
	if (msg == NULL) {
   21b9c:	460c      	mov	r4, r1
   21b9e:	b379      	cbz	r1, 21c00 <nrf91_socket_offload_sendmsg+0x6c>
	for (i = 0; i < msg->msg_iovlen; i++) {
   21ba0:	2300      	movs	r3, #0
	ssize_t len = 0;
   21ba2:	461a      	mov	r2, r3
   21ba4:	68c8      	ldr	r0, [r1, #12]
	for (i = 0; i < msg->msg_iovlen; i++) {
   21ba6:	4283      	cmp	r3, r0
   21ba8:	d134      	bne.n	21c14 <nrf91_socket_offload_sendmsg+0x80>
	if (len <= sizeof(buf)) {
   21baa:	2a80      	cmp	r2, #128	; 0x80
   21bac:	d871      	bhi.n	21c92 <nrf91_socket_offload_sendmsg+0xfe>
		for (i = 0; i < msg->msg_iovlen; i++) {
   21bae:	2500      	movs	r5, #0
		k_mutex_lock(&sendmsg_lock, K_FOREVER);
   21bb0:	f04f 32ff 	mov.w	r2, #4294967295
   21bb4:	f04f 33ff 	mov.w	r3, #4294967295
   21bb8:	4838      	ldr	r0, [pc, #224]	; (21c9c <nrf91_socket_offload_sendmsg+0x108>)
   21bba:	f013 f8bd 	bl	34d38 <k_mutex_lock.constprop.0.isra.0>
		len = 0;
   21bbe:	46a9      	mov	r9, r5
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   21bc0:	4e37      	ldr	r6, [pc, #220]	; (21ca0 <nrf91_socket_offload_sendmsg+0x10c>)
		for (i = 0; i < msg->msg_iovlen; i++) {
   21bc2:	68e3      	ldr	r3, [r4, #12]
   21bc4:	429d      	cmp	r5, r3
   21bc6:	d32c      	bcc.n	21c22 <nrf91_socket_offload_sendmsg+0x8e>
		offset = 0;
   21bc8:	2600      	movs	r6, #0
		ret = 0;
   21bca:	4635      	mov	r5, r6
			ret = nrf91_socket_offload_sendto(obj,
   21bcc:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 21ca0 <nrf91_socket_offload_sendmsg+0x10c>
		while ((offset < len) && (ret >= 0)) {
   21bd0:	45b1      	cmp	r9, r6
   21bd2:	dd11      	ble.n	21bf8 <nrf91_socket_offload_sendmsg+0x64>
   21bd4:	b985      	cbnz	r5, 21bf8 <nrf91_socket_offload_sendmsg+0x64>
			ret = nrf91_socket_offload_sendto(obj,
   21bd6:	6863      	ldr	r3, [r4, #4]
   21bd8:	4638      	mov	r0, r7
   21bda:	9301      	str	r3, [sp, #4]
   21bdc:	6823      	ldr	r3, [r4, #0]
   21bde:	eba9 0206 	sub.w	r2, r9, r6
   21be2:	9300      	str	r3, [sp, #0]
   21be4:	eb0a 0106 	add.w	r1, sl, r6
   21be8:	4643      	mov	r3, r8
   21bea:	f013 f814 	bl	34c16 <nrf91_socket_offload_sendto>
			if (ret > 0) {
   21bee:	1e05      	subs	r5, r0, #0
   21bf0:	ddee      	ble.n	21bd0 <nrf91_socket_offload_sendmsg+0x3c>
				offset += ret;
   21bf2:	442e      	add	r6, r5
		while ((offset < len) && (ret >= 0)) {
   21bf4:	45b1      	cmp	r9, r6
   21bf6:	dcee      	bgt.n	21bd6 <nrf91_socket_offload_sendmsg+0x42>
		k_mutex_unlock(&sendmsg_lock);
   21bf8:	4828      	ldr	r0, [pc, #160]	; (21c9c <nrf91_socket_offload_sendmsg+0x108>)
   21bfa:	f013 f89f 	bl	34d3c <k_mutex_unlock.isra.0>
		return ret;
   21bfe:	e005      	b.n	21c0c <nrf91_socket_offload_sendmsg+0x78>
		errno = EINVAL;
   21c00:	f00f f894 	bl	30d2c <__errno>
   21c04:	2316      	movs	r3, #22
		return -1;
   21c06:	f04f 35ff 	mov.w	r5, #4294967295
		errno = EINVAL;
   21c0a:	6003      	str	r3, [r0, #0]
}
   21c0c:	4628      	mov	r0, r5
   21c0e:	b002      	add	sp, #8
   21c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		len += msg->msg_iov[i].iov_len;
   21c14:	68a1      	ldr	r1, [r4, #8]
   21c16:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   21c1a:	6849      	ldr	r1, [r1, #4]
	for (i = 0; i < msg->msg_iovlen; i++) {
   21c1c:	3301      	adds	r3, #1
		len += msg->msg_iov[i].iov_len;
   21c1e:	440a      	add	r2, r1
	for (i = 0; i < msg->msg_iovlen; i++) {
   21c20:	e7c1      	b.n	21ba6 <nrf91_socket_offload_sendmsg+0x12>
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   21c22:	68a3      	ldr	r3, [r4, #8]
   21c24:	eb06 0009 	add.w	r0, r6, r9
   21c28:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
   21c2c:	f853 1035 	ldr.w	r1, [r3, r5, lsl #3]
   21c30:	6852      	ldr	r2, [r2, #4]
   21c32:	f014 fc79 	bl	36528 <memcpy>
			len += msg->msg_iov[i].iov_len;
   21c36:	68a3      	ldr	r3, [r4, #8]
   21c38:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
   21c3c:	4453      	add	r3, sl
   21c3e:	685b      	ldr	r3, [r3, #4]
		for (i = 0; i < msg->msg_iovlen; i++) {
   21c40:	3501      	adds	r5, #1
			len += msg->msg_iov[i].iov_len;
   21c42:	4499      	add	r9, r3
		for (i = 0; i < msg->msg_iovlen; i++) {
   21c44:	e7bd      	b.n	21bc2 <nrf91_socket_offload_sendmsg+0x2e>
		if (msg->msg_iov[i].iov_len == 0) {
   21c46:	68a3      	ldr	r3, [r4, #8]
   21c48:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
   21c4c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   21c50:	685b      	ldr	r3, [r3, #4]
   21c52:	b13b      	cbz	r3, 21c64 <nrf91_socket_offload_sendmsg+0xd0>
		offset = 0;
   21c54:	f04f 0900 	mov.w	r9, #0
		while (offset < msg->msg_iov[i].iov_len) {
   21c58:	68a3      	ldr	r3, [r4, #8]
   21c5a:	eb03 020a 	add.w	r2, r3, sl
   21c5e:	6852      	ldr	r2, [r2, #4]
   21c60:	4591      	cmp	r9, r2
   21c62:	d304      	bcc.n	21c6e <nrf91_socket_offload_sendmsg+0xda>
	for (i = 0; i < msg->msg_iovlen; i++) {
   21c64:	3601      	adds	r6, #1
   21c66:	68e3      	ldr	r3, [r4, #12]
   21c68:	429e      	cmp	r6, r3
   21c6a:	d3ec      	bcc.n	21c46 <nrf91_socket_offload_sendmsg+0xb2>
   21c6c:	e7ce      	b.n	21c0c <nrf91_socket_offload_sendmsg+0x78>
			ret = nrf91_socket_offload_sendto(obj,
   21c6e:	f853 100a 	ldr.w	r1, [r3, sl]
   21c72:	6863      	ldr	r3, [r4, #4]
   21c74:	4449      	add	r1, r9
   21c76:	9301      	str	r3, [sp, #4]
   21c78:	6823      	ldr	r3, [r4, #0]
   21c7a:	4638      	mov	r0, r7
   21c7c:	9300      	str	r3, [sp, #0]
   21c7e:	eba2 0209 	sub.w	r2, r2, r9
   21c82:	4643      	mov	r3, r8
   21c84:	f012 ffc7 	bl	34c16 <nrf91_socket_offload_sendto>
			if (ret < 0) {
   21c88:	1e01      	subs	r1, r0, #0
   21c8a:	db05      	blt.n	21c98 <nrf91_socket_offload_sendmsg+0x104>
			offset += ret;
   21c8c:	4489      	add	r9, r1
			len += ret;
   21c8e:	440d      	add	r5, r1
   21c90:	e7e2      	b.n	21c58 <nrf91_socket_offload_sendmsg+0xc4>
	for (i = 0; i < msg->msg_iovlen; i++) {
   21c92:	2600      	movs	r6, #0
	len = 0;
   21c94:	4635      	mov	r5, r6
   21c96:	e7e6      	b.n	21c66 <nrf91_socket_offload_sendmsg+0xd2>
			ret = nrf91_socket_offload_sendto(obj,
   21c98:	460d      	mov	r5, r1
   21c9a:	e7b7      	b.n	21c0c <nrf91_socket_offload_sendmsg+0x78>
   21c9c:	2000ceec 	.word	0x2000ceec
   21ca0:	2000f639 	.word	0x2000f639

00021ca4 <allocate_ctx>:
	k_mutex_lock(&ctx_lock, K_FOREVER);
   21ca4:	f04f 32ff 	mov.w	r2, #4294967295
   21ca8:	f04f 33ff 	mov.w	r3, #4294967295
{
   21cac:	b570      	push	{r4, r5, r6, lr}
   21cae:	4605      	mov	r5, r0
	k_mutex_lock(&ctx_lock, K_FOREVER);
   21cb0:	480b      	ldr	r0, [pc, #44]	; (21ce0 <allocate_ctx+0x3c>)
   21cb2:	f013 f841 	bl	34d38 <k_mutex_lock.constprop.0.isra.0>
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   21cb6:	2300      	movs	r3, #0
   21cb8:	2018      	movs	r0, #24
		if (offload_ctx[i].nrf_fd == -1) {
   21cba:	4a0a      	ldr	r2, [pc, #40]	; (21ce4 <allocate_ctx+0x40>)
   21cbc:	fb00 f103 	mul.w	r1, r0, r3
   21cc0:	5856      	ldr	r6, [r2, r1]
   21cc2:	188c      	adds	r4, r1, r2
   21cc4:	3601      	adds	r6, #1
   21cc6:	d105      	bne.n	21cd4 <allocate_ctx+0x30>
			ctx->nrf_fd = nrf_fd;
   21cc8:	5055      	str	r5, [r2, r1]
	k_mutex_unlock(&ctx_lock);
   21cca:	4805      	ldr	r0, [pc, #20]	; (21ce0 <allocate_ctx+0x3c>)
   21ccc:	f013 f836 	bl	34d3c <k_mutex_unlock.isra.0>
}
   21cd0:	4620      	mov	r0, r4
   21cd2:	bd70      	pop	{r4, r5, r6, pc}
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   21cd4:	3301      	adds	r3, #1
   21cd6:	2b08      	cmp	r3, #8
   21cd8:	d1f0      	bne.n	21cbc <allocate_ctx+0x18>
	struct nrf_sock_ctx *ctx = NULL;
   21cda:	2400      	movs	r4, #0
   21cdc:	e7f5      	b.n	21cca <allocate_ctx+0x26>
   21cde:	bf00      	nop
   21ce0:	2000ce74 	.word	0x2000ce74
   21ce4:	2000e9c8 	.word	0x2000e9c8

00021ce8 <release_ctx>:
{
   21ce8:	b538      	push	{r3, r4, r5, lr}
	k_mutex_lock(&ctx_lock, K_FOREVER);
   21cea:	4d09      	ldr	r5, [pc, #36]	; (21d10 <release_ctx+0x28>)
{
   21cec:	4604      	mov	r4, r0
	k_mutex_lock(&ctx_lock, K_FOREVER);
   21cee:	f04f 32ff 	mov.w	r2, #4294967295
   21cf2:	4628      	mov	r0, r5
   21cf4:	f04f 33ff 	mov.w	r3, #4294967295
   21cf8:	f013 f81e 	bl	34d38 <k_mutex_lock.constprop.0.isra.0>
	ctx->lock = NULL;
   21cfc:	2300      	movs	r3, #0
   21cfe:	f04f 32ff 	mov.w	r2, #4294967295
   21d02:	e9c4 2300 	strd	r2, r3, [r4]
	k_mutex_unlock(&ctx_lock);
   21d06:	4628      	mov	r0, r5
}
   21d08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&ctx_lock);
   21d0c:	f013 b816 	b.w	34d3c <k_mutex_unlock.isra.0>
   21d10:	2000ce74 	.word	0x2000ce74

00021d14 <nrf91_socket_offload_accept>:
{
   21d14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21d18:	b08b      	sub	sp, #44	; 0x2c
   21d1a:	4607      	mov	r7, r0
   21d1c:	460c      	mov	r4, r1
   21d1e:	4615      	mov	r5, r2
	int fd = z_reserve_fd();
   21d20:	f7eb ffb6 	bl	dc90 <z_reserve_fd>
   21d24:	4606      	mov	r6, r0
	if (fd < 0) {
   21d26:	2e00      	cmp	r6, #0
	int sd = OBJ_TO_SD(obj);
   21d28:	6838      	ldr	r0, [r7, #0]
	if (fd < 0) {
   21d2a:	db1e      	blt.n	21d6a <nrf91_socket_offload_accept+0x56>
	if ((addr != NULL) && (addrlen != NULL)) {
   21d2c:	b304      	cbz	r4, 21d70 <nrf91_socket_offload_accept+0x5c>
   21d2e:	b315      	cbz	r5, 21d76 <nrf91_socket_offload_accept+0x62>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   21d30:	682b      	ldr	r3, [r5, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   21d32:	466a      	mov	r2, sp
		if (*addrlen == sizeof(struct sockaddr_in)) {
   21d34:	2b08      	cmp	r3, #8
   21d36:	bf14      	ite	ne
   21d38:	2324      	movne	r3, #36	; 0x24
   21d3a:	2310      	moveq	r3, #16
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   21d3c:	f10d 0904 	add.w	r9, sp, #4
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   21d40:	9300      	str	r3, [sp, #0]
	new_sd = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   21d42:	4649      	mov	r1, r9
   21d44:	f013 fe7f 	bl	35a46 <nrf_accept>
	if (new_sd < 0) {
   21d48:	f1b0 0800 	subs.w	r8, r0, #0
   21d4c:	db0a      	blt.n	21d64 <nrf91_socket_offload_accept+0x50>
	ctx = allocate_ctx(new_sd);
   21d4e:	f7ff ffa9 	bl	21ca4 <allocate_ctx>
	if (ctx == NULL) {
   21d52:	4607      	mov	r7, r0
   21d54:	b990      	cbnz	r0, 21d7c <nrf91_socket_offload_accept+0x68>
		errno = ENOMEM;
   21d56:	f00e ffe9 	bl	30d2c <__errno>
   21d5a:	230c      	movs	r3, #12
   21d5c:	6003      	str	r3, [r0, #0]
		nrf_close(new_sd);
   21d5e:	4640      	mov	r0, r8
   21d60:	f005 ff1c 	bl	27b9c <nrf_close>
	z_free_fd(fd);
   21d64:	4630      	mov	r0, r6
   21d66:	f7eb ffe1 	bl	dd2c <z_free_fd>
		return -1;
   21d6a:	f04f 36ff 	mov.w	r6, #4294967295
   21d6e:	e018      	b.n	21da2 <nrf91_socket_offload_accept+0x8e>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   21d70:	4622      	mov	r2, r4
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   21d72:	46a1      	mov	r9, r4
   21d74:	e7e5      	b.n	21d42 <nrf91_socket_offload_accept+0x2e>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   21d76:	462a      	mov	r2, r5
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   21d78:	46a9      	mov	r9, r5
   21d7a:	e7e2      	b.n	21d42 <nrf91_socket_offload_accept+0x2e>
	if ((addr != NULL) && (addrlen != NULL)) {
   21d7c:	b164      	cbz	r4, 21d98 <nrf91_socket_offload_accept+0x84>
   21d7e:	b15d      	cbz	r5, 21d98 <nrf91_socket_offload_accept+0x84>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   21d80:	f8d9 3004 	ldr.w	r3, [r9, #4]
   21d84:	2b01      	cmp	r3, #1
   21d86:	d110      	bne.n	21daa <nrf91_socket_offload_accept+0x96>
			*addrlen = sizeof(struct sockaddr_in);
   21d88:	2208      	movs	r2, #8
   21d8a:	602a      	str	r2, [r5, #0]
	ptr->sin_port = nrf_in->sin_port;
   21d8c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
	ptr->sin_family = AF_INET;
   21d90:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   21d92:	9b04      	ldr	r3, [sp, #16]
	ptr->sin_port = nrf_in->sin_port;
   21d94:	8062      	strh	r2, [r4, #2]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   21d96:	6063      	str	r3, [r4, #4]
	z_finalize_fd(fd, ctx,
   21d98:	4639      	mov	r1, r7
   21d9a:	4630      	mov	r0, r6
   21d9c:	4a0d      	ldr	r2, [pc, #52]	; (21dd4 <nrf91_socket_offload_accept+0xc0>)
   21d9e:	f7eb ffad 	bl	dcfc <z_finalize_fd>
}
   21da2:	4630      	mov	r0, r6
   21da4:	b00b      	add	sp, #44	; 0x2c
   21da6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   21daa:	2b02      	cmp	r3, #2
   21dac:	d106      	bne.n	21dbc <nrf91_socket_offload_accept+0xa8>
			*addrlen = sizeof(struct sockaddr_in6);
   21dae:	2318      	movs	r3, #24
			nrf_to_z_ipv6(
   21db0:	4620      	mov	r0, r4
			*addrlen = sizeof(struct sockaddr_in6);
   21db2:	602b      	str	r3, [r5, #0]
			nrf_to_z_ipv6(
   21db4:	a901      	add	r1, sp, #4
   21db6:	f012 ff01 	bl	34bbc <nrf_to_z_ipv6>
   21dba:	e7ed      	b.n	21d98 <nrf91_socket_offload_accept+0x84>
			errno = ENOTSUP;
   21dbc:	f00e ffb6 	bl	30d2c <__errno>
   21dc0:	2386      	movs	r3, #134	; 0x86
   21dc2:	6003      	str	r3, [r0, #0]
		nrf_close(new_sd);
   21dc4:	4640      	mov	r0, r8
   21dc6:	f005 fee9 	bl	27b9c <nrf_close>
		release_ctx(ctx);
   21dca:	4638      	mov	r0, r7
   21dcc:	f7ff ff8c 	bl	21ce8 <release_ctx>
   21dd0:	e7c8      	b.n	21d64 <nrf91_socket_offload_accept+0x50>
   21dd2:	bf00      	nop
   21dd4:	00038630 	.word	0x00038630

00021dd8 <nrf91_iface_api_init>:
static struct nrf91_iface_data {
	struct net_if *iface;
} nrf91_iface_data;

static void nrf91_iface_api_init(struct net_if *iface)
{
   21dd8:	b510      	push	{r4, lr}
   21dda:	4604      	mov	r4, r0
	nrf91_iface_data.iface = iface;
   21ddc:	4b09      	ldr	r3, [pc, #36]	; (21e04 <nrf91_iface_api_init+0x2c>)

	iface->if_dev->socket_offload = nrf91_socket_create;
   21dde:	4a0a      	ldr	r2, [pc, #40]	; (21e08 <nrf91_iface_api_init+0x30>)
	nrf91_iface_data.iface = iface;
   21de0:	6018      	str	r0, [r3, #0]
	iface->if_dev->socket_offload = nrf91_socket_create;
   21de2:	6803      	ldr	r3, [r0, #0]

	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   21de4:	4809      	ldr	r0, [pc, #36]	; (21e0c <nrf91_iface_api_init+0x34>)
	iface->if_dev->socket_offload = nrf91_socket_create;
   21de6:	61da      	str	r2, [r3, #28]
	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   21de8:	f7ef f8ca 	bl	10f80 <socket_offload_dns_register>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   21dec:	6823      	ldr	r3, [r4, #0]
   21dee:	330c      	adds	r3, #12
   21df0:	e8d3 1fef 	ldaex	r1, [r3]
   21df4:	f041 0108 	orr.w	r1, r1, #8
   21df8:	e8c3 1fe2 	stlex	r2, r1, [r3]
   21dfc:	2a00      	cmp	r2, #0
   21dfe:	d1f7      	bne.n	21df0 <nrf91_iface_api_init+0x18>

	if (!IS_ENABLED(CONFIG_NRF_MODEM_LIB_NET_IF_AUTO_START)) {
		net_if_flag_set(iface, NET_IF_NO_AUTO_START);
	}
}
   21e00:	bd10      	pop	{r4, pc}
   21e02:	bf00      	nop
   21e04:	2000e9c4 	.word	0x2000e9c4
   21e08:	00021f1d 	.word	0x00021f1d
   21e0c:	00038628 	.word	0x00038628

00021e10 <nrf91_socket_offload_ioctl>:
{
   21e10:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (request) {
   21e12:	f5a1 7381 	sub.w	r3, r1, #258	; 0x102
	int sd = OBJ_TO_SD(obj);
   21e16:	6804      	ldr	r4, [r0, #0]
{
   21e18:	b087      	sub	sp, #28
	switch (request) {
   21e1a:	2b03      	cmp	r3, #3
   21e1c:	d857      	bhi.n	21ece <nrf91_socket_offload_ioctl+0xbe>
   21e1e:	e8df f003 	tbb	[pc, r3]
   21e22:	4002      	.short	0x4002
   21e24:	5377      	.short	0x5377
	struct nrf_modem_pollcb pcb = {
   21e26:	2701      	movs	r7, #1
		pev_end = va_arg(args, struct k_poll_event *);
   21e28:	e9d2 6101 	ldrd	r6, r1, [r2, #4]
		return nrf91_poll_prepare(obj, pfd, pev, pev_end);
   21e2c:	6813      	ldr	r3, [r2, #0]
	struct nrf_modem_pollcb pcb = {
   21e2e:	4a3a      	ldr	r2, [pc, #232]	; (21f18 <nrf91_socket_offload_ioctl+0x108>)
   21e30:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
   21e34:	9204      	str	r2, [sp, #16]
   21e36:	f8ad 3014 	strh.w	r3, [sp, #20]
   21e3a:	f88d 7016 	strb.w	r7, [sp, #22]
	if (*pev == pev_end) {
   21e3e:	6833      	ldr	r3, [r6, #0]
   21e40:	4299      	cmp	r1, r3
   21e42:	d104      	bne.n	21e4e <nrf91_socket_offload_ioctl+0x3e>
		errno = ENOMEM;
   21e44:	f00e ff72 	bl	30d2c <__errno>
   21e48:	230c      	movs	r3, #12
		errno = EINVAL;
   21e4a:	6003      	str	r3, [r0, #0]
   21e4c:	e014      	b.n	21e78 <nrf91_socket_offload_ioctl+0x68>
	k_poll_signal_init(&ctx->poll);
   21e4e:	f100 0508 	add.w	r5, r0, #8
	z_impl_k_poll_signal_init(sig);
   21e52:	4628      	mov	r0, r5
   21e54:	f014 fb24 	bl	364a0 <z_impl_k_poll_signal_init>
	k_poll_event_init(*pev, K_POLL_TYPE_SIGNAL, K_POLL_MODE_NOTIFY_ONLY, &ctx->poll);
   21e58:	462b      	mov	r3, r5
   21e5a:	2200      	movs	r2, #0
   21e5c:	4639      	mov	r1, r7
   21e5e:	6830      	ldr	r0, [r6, #0]
   21e60:	f00a f94e 	bl	2c100 <k_poll_event_init>
	err = nrf_setsockopt(fd, NRF_SOL_SOCKET, NRF_SO_POLLCB, &pcb, sizeof(pcb));
   21e64:	2308      	movs	r3, #8
   21e66:	4620      	mov	r0, r4
   21e68:	9300      	str	r3, [sp, #0]
   21e6a:	223c      	movs	r2, #60	; 0x3c
   21e6c:	4639      	mov	r1, r7
   21e6e:	ab04      	add	r3, sp, #16
   21e70:	f005 ffd4 	bl	27e1c <nrf_setsockopt>
	if (err) {
   21e74:	4604      	mov	r4, r0
   21e76:	b110      	cbz	r0, 21e7e <nrf91_socket_offload_ioctl+0x6e>
		retval = -1;
   21e78:	f04f 34ff 	mov.w	r4, #4294967295
		return nrf91_socket_offload_fcntl(sd, request, args);
   21e7c:	e00e      	b.n	21e9c <nrf91_socket_offload_ioctl+0x8c>
	(*pev)++;
   21e7e:	6833      	ldr	r3, [r6, #0]
   21e80:	3314      	adds	r3, #20
   21e82:	6033      	str	r3, [r6, #0]
	flags = 0;
   21e84:	e9cd 0002 	strd	r0, r0, [sp, #8]
	z_impl_k_poll_signal_check(sig, signaled, result);
   21e88:	4628      	mov	r0, r5
   21e8a:	aa02      	add	r2, sp, #8
   21e8c:	a903      	add	r1, sp, #12
   21e8e:	f014 fb0c 	bl	364aa <z_impl_k_poll_signal_check>
	if (!signaled) {
   21e92:	9b03      	ldr	r3, [sp, #12]
	return -EALREADY;
   21e94:	2b00      	cmp	r3, #0
   21e96:	bf18      	it	ne
   21e98:	f06f 0477 	mvnne.w	r4, #119	; 0x77
}
   21e9c:	4620      	mov	r0, r4
   21e9e:	b007      	add	sp, #28
   21ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pev = va_arg(args, struct k_poll_event **);
   21ea2:	e9d2 4200 	ldrd	r4, r2, [r2]
	(*pev)++;
   21ea6:	6813      	ldr	r3, [r2, #0]
   21ea8:	3314      	adds	r3, #20
   21eaa:	6013      	str	r3, [r2, #0]
	signaled = 0;
   21eac:	2300      	movs	r3, #0
	flags = 0;
   21eae:	e9cd 3303 	strd	r3, r3, [sp, #12]
   21eb2:	aa03      	add	r2, sp, #12
   21eb4:	a904      	add	r1, sp, #16
   21eb6:	3008      	adds	r0, #8
   21eb8:	f014 faf7 	bl	364aa <z_impl_k_poll_signal_check>
	if (!signaled) {
   21ebc:	9b04      	ldr	r3, [sp, #16]
   21ebe:	b10b      	cbz	r3, 21ec4 <nrf91_socket_offload_ioctl+0xb4>
	pfd->revents = flags;
   21ec0:	9b03      	ldr	r3, [sp, #12]
   21ec2:	80e3      	strh	r3, [r4, #6]
		return nrf91_poll_update(obj, pfd, pev);
   21ec4:	2400      	movs	r4, #0
   21ec6:	e7e9      	b.n	21e9c <nrf91_socket_offload_ioctl+0x8c>
		ctx->lock = va_arg(args, struct k_mutex *);
   21ec8:	6813      	ldr	r3, [r2, #0]
   21eca:	6043      	str	r3, [r0, #4]
		return 0;
   21ecc:	e7fa      	b.n	21ec4 <nrf91_socket_offload_ioctl+0xb4>
	switch (cmd) {
   21ece:	2903      	cmp	r1, #3
   21ed0:	d012      	beq.n	21ef8 <nrf91_socket_offload_ioctl+0xe8>
   21ed2:	2904      	cmp	r1, #4
   21ed4:	d118      	bne.n	21f08 <nrf91_socket_offload_ioctl+0xf8>
		flags = va_arg(args, int);
   21ed6:	6815      	ldr	r5, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK) {
   21ed8:	f435 4380 	bics.w	r3, r5, #16384	; 0x4000
   21edc:	d003      	beq.n	21ee6 <nrf91_socket_offload_ioctl+0xd6>
			errno = EINVAL;
   21ede:	f00e ff25 	bl	30d2c <__errno>
   21ee2:	2316      	movs	r3, #22
   21ee4:	6003      	str	r3, [r0, #0]
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   21ee6:	2104      	movs	r1, #4
   21ee8:	4620      	mov	r0, r4
   21eea:	f3c5 3280 	ubfx	r2, r5, #14, #1
}
   21eee:	b007      	add	sp, #28
   21ef0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   21ef4:	f013 bfef 	b.w	35ed6 <nrf_fcntl>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   21ef8:	4620      	mov	r0, r4
   21efa:	2200      	movs	r2, #0
   21efc:	f013 ffeb 	bl	35ed6 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   21f00:	0384      	lsls	r4, r0, #14
   21f02:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
		break;
   21f06:	e7c9      	b.n	21e9c <nrf91_socket_offload_ioctl+0x8c>
		errno = EINVAL;
   21f08:	f00e ff10 	bl	30d2c <__errno>
   21f0c:	2316      	movs	r3, #22
   21f0e:	e79c      	b.n	21e4a <nrf91_socket_offload_ioctl+0x3a>
	switch (request) {
   21f10:	f06f 045e 	mvn.w	r4, #94	; 0x5e
   21f14:	e7c2      	b.n	21e9c <nrf91_socket_offload_ioctl+0x8c>
   21f16:	bf00      	nop
   21f18:	00021a51 	.word	0x00021a51

00021f1c <nrf91_socket_create>:
{
   21f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (type & SOCK_NATIVE) {
   21f20:	1e0d      	subs	r5, r1, #0
{
   21f22:	4607      	mov	r7, r0
   21f24:	4690      	mov	r8, r2
	if (type & SOCK_NATIVE) {
   21f26:	da12      	bge.n	21f4e <nrf91_socket_create+0x32>
	k_sched_lock();
   21f28:	f008 fbd6 	bl	2a6d8 <k_sched_lock>
	*offload_lock = true;
   21f2c:	4e1c      	ldr	r6, [pc, #112]	; (21fa0 <nrf91_socket_create+0x84>)
   21f2e:	2301      	movs	r3, #1
   21f30:	7033      	strb	r3, [r6, #0]
	return z_impl_zsock_socket(family, type, proto);
   21f32:	4642      	mov	r2, r8
   21f34:	4638      	mov	r0, r7
   21f36:	f025 4140 	bic.w	r1, r5, #3221225472	; 0xc0000000
   21f3a:	f7ee fed9 	bl	10cf0 <z_impl_zsock_socket>
	*offload_lock = false;
   21f3e:	2300      	movs	r3, #0
   21f40:	7033      	strb	r3, [r6, #0]
   21f42:	4604      	mov	r4, r0
	k_sched_unlock();
   21f44:	f008 fc34 	bl	2a7b0 <k_sched_unlock>
}
   21f48:	4620      	mov	r0, r4
   21f4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (type & SOCK_NATIVE_TLS) {
   21f4e:	006b      	lsls	r3, r5, #1
   21f50:	d503      	bpl.n	21f5a <nrf91_socket_create+0x3e>
	k_sched_lock();
   21f52:	f008 fbc1 	bl	2a6d8 <k_sched_lock>
	*offload_lock = true;
   21f56:	4e13      	ldr	r6, [pc, #76]	; (21fa4 <nrf91_socket_create+0x88>)
   21f58:	e7e9      	b.n	21f2e <nrf91_socket_create+0x12>
	fd = z_reserve_fd();
   21f5a:	f7eb fe99 	bl	dc90 <z_reserve_fd>
	if (fd < 0) {
   21f5e:	1e04      	subs	r4, r0, #0
   21f60:	db09      	blt.n	21f76 <nrf91_socket_create+0x5a>
	retval = nrf_socket(family, type, proto);
   21f62:	4629      	mov	r1, r5
   21f64:	4642      	mov	r2, r8
   21f66:	4638      	mov	r0, r7
   21f68:	f013 fc00 	bl	3576c <nrf_socket>
	if (sd < 0) {
   21f6c:	1e05      	subs	r5, r0, #0
   21f6e:	da05      	bge.n	21f7c <nrf91_socket_create+0x60>
		z_free_fd(fd);
   21f70:	4620      	mov	r0, r4
   21f72:	f7eb fedb 	bl	dd2c <z_free_fd>
		return -1;
   21f76:	f04f 34ff 	mov.w	r4, #4294967295
   21f7a:	e7e5      	b.n	21f48 <nrf91_socket_create+0x2c>
	ctx = allocate_ctx(sd);
   21f7c:	f7ff fe92 	bl	21ca4 <allocate_ctx>
	if (ctx == NULL) {
   21f80:	4601      	mov	r1, r0
   21f82:	b938      	cbnz	r0, 21f94 <nrf91_socket_create+0x78>
		errno = ENOMEM;
   21f84:	f00e fed2 	bl	30d2c <__errno>
   21f88:	230c      	movs	r3, #12
   21f8a:	6003      	str	r3, [r0, #0]
		nrf_close(sd);
   21f8c:	4628      	mov	r0, r5
   21f8e:	f005 fe05 	bl	27b9c <nrf_close>
		z_free_fd(fd);
   21f92:	e7ed      	b.n	21f70 <nrf91_socket_create+0x54>
	z_finalize_fd(fd, ctx,
   21f94:	4620      	mov	r0, r4
   21f96:	4a04      	ldr	r2, [pc, #16]	; (21fa8 <nrf91_socket_create+0x8c>)
   21f98:	f7eb feb0 	bl	dcfc <z_finalize_fd>
	return fd;
   21f9c:	e7d4      	b.n	21f48 <nrf91_socket_create+0x2c>
   21f9e:	bf00      	nop
   21fa0:	2000f6ba 	.word	0x2000f6ba
   21fa4:	2000f6b9 	.word	0x2000f6b9
   21fa8:	00038630 	.word	0x00038630

00021fac <z_impl_gpio_pin_configure>:
{
   21fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT((flags & GPIO_INT_MASK) == 0,
   21fb0:	f012 6ffc 	tst.w	r2, #132120576	; 0x7e00000
{
   21fb4:	4613      	mov	r3, r2
	__unused const struct gpio_driver_config *const cfg =
   21fb6:	e9d0 4701 	ldrd	r4, r7, [r0, #4]
	struct gpio_driver_data *data =
   21fba:	6906      	ldr	r6, [r0, #16]
	__ASSERT((flags & GPIO_INT_MASK) == 0,
   21fbc:	d00e      	beq.n	21fdc <z_impl_gpio_pin_configure+0x30>
   21fbe:	4942      	ldr	r1, [pc, #264]	; (220c8 <z_impl_gpio_pin_configure+0x11c>)
   21fc0:	f44f 7335 	mov.w	r3, #724	; 0x2d4
   21fc4:	4a41      	ldr	r2, [pc, #260]	; (220cc <z_impl_gpio_pin_configure+0x120>)
   21fc6:	4842      	ldr	r0, [pc, #264]	; (220d0 <z_impl_gpio_pin_configure+0x124>)
   21fc8:	f00d f9fc 	bl	2f3c4 <assert_print>
   21fcc:	4841      	ldr	r0, [pc, #260]	; (220d4 <z_impl_gpio_pin_configure+0x128>)
   21fce:	f00d f9f9 	bl	2f3c4 <assert_print>
   21fd2:	f44f 7135 	mov.w	r1, #724	; 0x2d4
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   21fd6:	483d      	ldr	r0, [pc, #244]	; (220cc <z_impl_gpio_pin_configure+0x120>)
   21fd8:	f00d f9ed 	bl	2f3b6 <assert_post_action>
   21fdc:	f002 0230 	and.w	r2, r2, #48	; 0x30
   21fe0:	2a30      	cmp	r2, #48	; 0x30
   21fe2:	d10c      	bne.n	21ffe <z_impl_gpio_pin_configure+0x52>
   21fe4:	493c      	ldr	r1, [pc, #240]	; (220d8 <z_impl_gpio_pin_configure+0x12c>)
   21fe6:	f240 23d7 	movw	r3, #727	; 0x2d7
   21fea:	4a38      	ldr	r2, [pc, #224]	; (220cc <z_impl_gpio_pin_configure+0x120>)
   21fec:	4838      	ldr	r0, [pc, #224]	; (220d0 <z_impl_gpio_pin_configure+0x124>)
   21fee:	f00d f9e9 	bl	2f3c4 <assert_print>
   21ff2:	483a      	ldr	r0, [pc, #232]	; (220dc <z_impl_gpio_pin_configure+0x130>)
   21ff4:	f00d f9e6 	bl	2f3c4 <assert_print>
   21ff8:	f240 21d7 	movw	r1, #727	; 0x2d7
   21ffc:	e7eb      	b.n	21fd6 <z_impl_gpio_pin_configure+0x2a>
	__ASSERT(!((flags & GPIO_INPUT) && !(flags & GPIO_OUTPUT) && (flags & GPIO_SINGLE_ENDED)),
   21ffe:	4a38      	ldr	r2, [pc, #224]	; (220e0 <z_impl_gpio_pin_configure+0x134>)
   22000:	4d38      	ldr	r5, [pc, #224]	; (220e4 <z_impl_gpio_pin_configure+0x138>)
   22002:	401a      	ands	r2, r3
   22004:	42aa      	cmp	r2, r5
   22006:	d10c      	bne.n	22022 <z_impl_gpio_pin_configure+0x76>
   22008:	4937      	ldr	r1, [pc, #220]	; (220e8 <z_impl_gpio_pin_configure+0x13c>)
   2200a:	f240 23db 	movw	r3, #731	; 0x2db
   2200e:	4a2f      	ldr	r2, [pc, #188]	; (220cc <z_impl_gpio_pin_configure+0x120>)
   22010:	482f      	ldr	r0, [pc, #188]	; (220d0 <z_impl_gpio_pin_configure+0x124>)
   22012:	f00d f9d7 	bl	2f3c4 <assert_print>
   22016:	4835      	ldr	r0, [pc, #212]	; (220ec <z_impl_gpio_pin_configure+0x140>)
   22018:	f00d f9d4 	bl	2f3c4 <assert_print>
   2201c:	f240 21db 	movw	r1, #731	; 0x2db
   22020:	e7d9      	b.n	21fd6 <z_impl_gpio_pin_configure+0x2a>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   22022:	f003 0206 	and.w	r2, r3, #6
   22026:	2a04      	cmp	r2, #4
   22028:	d109      	bne.n	2203e <z_impl_gpio_pin_configure+0x92>
   2202a:	4931      	ldr	r1, [pc, #196]	; (220f0 <z_impl_gpio_pin_configure+0x144>)
   2202c:	f240 23de 	movw	r3, #734	; 0x2de
   22030:	4a26      	ldr	r2, [pc, #152]	; (220cc <z_impl_gpio_pin_configure+0x120>)
   22032:	4827      	ldr	r0, [pc, #156]	; (220d0 <z_impl_gpio_pin_configure+0x124>)
   22034:	f00d f9c6 	bl	2f3c4 <assert_print>
   22038:	f240 21de 	movw	r1, #734	; 0x2de
   2203c:	e7cb      	b.n	21fd6 <z_impl_gpio_pin_configure+0x2a>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
   2203e:	f413 2240 	ands.w	r2, r3, #786432	; 0xc0000
   22042:	d016      	beq.n	22072 <z_impl_gpio_pin_configure+0xc6>
   22044:	039d      	lsls	r5, r3, #14
   22046:	d40c      	bmi.n	22062 <z_impl_gpio_pin_configure+0xb6>
   22048:	492a      	ldr	r1, [pc, #168]	; (220f4 <z_impl_gpio_pin_configure+0x148>)
   2204a:	f240 23e1 	movw	r3, #737	; 0x2e1
   2204e:	4a1f      	ldr	r2, [pc, #124]	; (220cc <z_impl_gpio_pin_configure+0x120>)
   22050:	481f      	ldr	r0, [pc, #124]	; (220d0 <z_impl_gpio_pin_configure+0x124>)
   22052:	f00d f9b7 	bl	2f3c4 <assert_print>
   22056:	4828      	ldr	r0, [pc, #160]	; (220f8 <z_impl_gpio_pin_configure+0x14c>)
   22058:	f00d f9b4 	bl	2f3c4 <assert_print>
   2205c:	f240 21e1 	movw	r1, #737	; 0x2e1
   22060:	e7b9      	b.n	21fd6 <z_impl_gpio_pin_configure+0x2a>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
   22062:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
   22066:	d018      	beq.n	2209a <z_impl_gpio_pin_configure+0xee>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   22068:	4a24      	ldr	r2, [pc, #144]	; (220fc <z_impl_gpio_pin_configure+0x150>)
   2206a:	439a      	bics	r2, r3
   2206c:	d101      	bne.n	22072 <z_impl_gpio_pin_configure+0xc6>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   2206e:	f483 2340 	eor.w	r3, r3, #786432	; 0xc0000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   22072:	2501      	movs	r5, #1
   22074:	6824      	ldr	r4, [r4, #0]
   22076:	408d      	lsls	r5, r1
   22078:	4225      	tst	r5, r4
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   2207a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2207e:	d119      	bne.n	220b4 <z_impl_gpio_pin_configure+0x108>
   22080:	491f      	ldr	r1, [pc, #124]	; (22100 <z_impl_gpio_pin_configure+0x154>)
   22082:	f240 23f1 	movw	r3, #753	; 0x2f1
   22086:	4a11      	ldr	r2, [pc, #68]	; (220cc <z_impl_gpio_pin_configure+0x120>)
   22088:	4811      	ldr	r0, [pc, #68]	; (220d0 <z_impl_gpio_pin_configure+0x124>)
   2208a:	f00d f99b 	bl	2f3c4 <assert_print>
   2208e:	481d      	ldr	r0, [pc, #116]	; (22104 <z_impl_gpio_pin_configure+0x158>)
   22090:	f00d f998 	bl	2f3c4 <assert_print>
   22094:	f240 21f1 	movw	r1, #753	; 0x2f1
   22098:	e79d      	b.n	21fd6 <z_impl_gpio_pin_configure+0x2a>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
   2209a:	491b      	ldr	r1, [pc, #108]	; (22108 <z_impl_gpio_pin_configure+0x15c>)
   2209c:	f240 23e5 	movw	r3, #741	; 0x2e5
   220a0:	4a0a      	ldr	r2, [pc, #40]	; (220cc <z_impl_gpio_pin_configure+0x120>)
   220a2:	480b      	ldr	r0, [pc, #44]	; (220d0 <z_impl_gpio_pin_configure+0x124>)
   220a4:	f00d f98e 	bl	2f3c4 <assert_print>
   220a8:	4818      	ldr	r0, [pc, #96]	; (2210c <z_impl_gpio_pin_configure+0x160>)
   220aa:	f00d f98b 	bl	2f3c4 <assert_print>
   220ae:	f240 21e5 	movw	r1, #741	; 0x2e5
   220b2:	e790      	b.n	21fd6 <z_impl_gpio_pin_configure+0x2a>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   220b4:	6834      	ldr	r4, [r6, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   220b6:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   220b8:	bf4c      	ite	mi
   220ba:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   220bc:	43ac      	bicpl	r4, r5
   220be:	6034      	str	r4, [r6, #0]
	return api->pin_configure(port, pin, flags);
   220c0:	683b      	ldr	r3, [r7, #0]
}
   220c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->pin_configure(port, pin, flags);
   220c6:	4718      	bx	r3
   220c8:	0003e89a 	.word	0x0003e89a
   220cc:	0003b5d9 	.word	0x0003b5d9
   220d0:	00039995 	.word	0x00039995
   220d4:	0003e8f7 	.word	0x0003e8f7
   220d8:	0003e91b 	.word	0x0003e91b
   220dc:	0003e954 	.word	0x0003e954
   220e0:	00030002 	.word	0x00030002
   220e4:	00010002 	.word	0x00010002
   220e8:	0003e991 	.word	0x0003e991
   220ec:	0003e9d8 	.word	0x0003e9d8
   220f0:	0003ea27 	.word	0x0003ea27
   220f4:	0003ea5a 	.word	0x0003ea5a
   220f8:	0003eaa0 	.word	0x0003eaa0
   220fc:	00100001 	.word	0x00100001
   22100:	0003b60a 	.word	0x0003b60a
   22104:	0003b648 	.word	0x0003b648
   22108:	0003eadb 	.word	0x0003eadb
   2210c:	0003eb1c 	.word	0x0003eb1c

00022110 <z_impl_gpio_pin_interrupt_configure>:
{
   22110:	b570      	push	{r4, r5, r6, lr}
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   22112:	f402 03c0 	and.w	r3, r2, #6291456	; 0x600000
   22116:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
	const struct gpio_driver_data *const data =
   2211a:	6905      	ldr	r5, [r0, #16]
	__unused const struct gpio_driver_config *const cfg =
   2211c:	e9d0 6401 	ldrd	r6, r4, [r0, #4]
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   22120:	d10e      	bne.n	22140 <z_impl_gpio_pin_interrupt_configure+0x30>
   22122:	4931      	ldr	r1, [pc, #196]	; (221e8 <z_impl_gpio_pin_interrupt_configure+0xd8>)
   22124:	f240 2377 	movw	r3, #631	; 0x277
   22128:	4a30      	ldr	r2, [pc, #192]	; (221ec <z_impl_gpio_pin_interrupt_configure+0xdc>)
   2212a:	4831      	ldr	r0, [pc, #196]	; (221f0 <z_impl_gpio_pin_interrupt_configure+0xe0>)
   2212c:	f00d f94a 	bl	2f3c4 <assert_print>
   22130:	4830      	ldr	r0, [pc, #192]	; (221f4 <z_impl_gpio_pin_interrupt_configure+0xe4>)
   22132:	f00d f947 	bl	2f3c4 <assert_print>
   22136:	f240 2177 	movw	r1, #631	; 0x277
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   2213a:	482c      	ldr	r0, [pc, #176]	; (221ec <z_impl_gpio_pin_interrupt_configure+0xdc>)
   2213c:	f00d f93b 	bl	2f3b6 <assert_post_action>
   22140:	b963      	cbnz	r3, 2215c <z_impl_gpio_pin_interrupt_configure+0x4c>
   22142:	492d      	ldr	r1, [pc, #180]	; (221f8 <z_impl_gpio_pin_interrupt_configure+0xe8>)
   22144:	f240 237b 	movw	r3, #635	; 0x27b
   22148:	4a28      	ldr	r2, [pc, #160]	; (221ec <z_impl_gpio_pin_interrupt_configure+0xdc>)
   2214a:	4829      	ldr	r0, [pc, #164]	; (221f0 <z_impl_gpio_pin_interrupt_configure+0xe0>)
   2214c:	f00d f93a 	bl	2f3c4 <assert_print>
   22150:	482a      	ldr	r0, [pc, #168]	; (221fc <z_impl_gpio_pin_interrupt_configure+0xec>)
   22152:	f00d f937 	bl	2f3c4 <assert_print>
   22156:	f240 217b 	movw	r1, #635	; 0x27b
   2215a:	e7ee      	b.n	2213a <z_impl_gpio_pin_interrupt_configure+0x2a>
	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   2215c:	f002 63e8 	and.w	r3, r2, #121634816	; 0x7400000
   22160:	f1b3 6fc8 	cmp.w	r3, #104857600	; 0x6400000
   22164:	d10c      	bne.n	22180 <z_impl_gpio_pin_interrupt_configure+0x70>
   22166:	4926      	ldr	r1, [pc, #152]	; (22200 <z_impl_gpio_pin_interrupt_configure+0xf0>)
   22168:	f240 237e 	movw	r3, #638	; 0x27e
   2216c:	4a1f      	ldr	r2, [pc, #124]	; (221ec <z_impl_gpio_pin_interrupt_configure+0xdc>)
   2216e:	4820      	ldr	r0, [pc, #128]	; (221f0 <z_impl_gpio_pin_interrupt_configure+0xe0>)
   22170:	f00d f928 	bl	2f3c4 <assert_print>
   22174:	4823      	ldr	r0, [pc, #140]	; (22204 <z_impl_gpio_pin_interrupt_configure+0xf4>)
   22176:	f00d f925 	bl	2f3c4 <assert_print>
   2217a:	f240 217e 	movw	r1, #638	; 0x27e
   2217e:	e7dc      	b.n	2213a <z_impl_gpio_pin_interrupt_configure+0x2a>
	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   22180:	f002 63c8 	and.w	r3, r2, #104857600	; 0x6400000
   22184:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   22188:	d10c      	bne.n	221a4 <z_impl_gpio_pin_interrupt_configure+0x94>
   2218a:	491f      	ldr	r1, [pc, #124]	; (22208 <z_impl_gpio_pin_interrupt_configure+0xf8>)
   2218c:	f240 2385 	movw	r3, #645	; 0x285
   22190:	4a16      	ldr	r2, [pc, #88]	; (221ec <z_impl_gpio_pin_interrupt_configure+0xdc>)
   22192:	4817      	ldr	r0, [pc, #92]	; (221f0 <z_impl_gpio_pin_interrupt_configure+0xe0>)
   22194:	f00d f916 	bl	2f3c4 <assert_print>
   22198:	481c      	ldr	r0, [pc, #112]	; (2220c <z_impl_gpio_pin_interrupt_configure+0xfc>)
   2219a:	f00d f913 	bl	2f3c4 <assert_print>
   2219e:	f240 2185 	movw	r1, #645	; 0x285
   221a2:	e7ca      	b.n	2213a <z_impl_gpio_pin_interrupt_configure+0x2a>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   221a4:	2301      	movs	r3, #1
   221a6:	6836      	ldr	r6, [r6, #0]
   221a8:	408b      	lsls	r3, r1
   221aa:	4233      	tst	r3, r6
   221ac:	d10c      	bne.n	221c8 <z_impl_gpio_pin_interrupt_configure+0xb8>
   221ae:	4918      	ldr	r1, [pc, #96]	; (22210 <z_impl_gpio_pin_interrupt_configure+0x100>)
   221b0:	f240 238f 	movw	r3, #655	; 0x28f
   221b4:	4a0d      	ldr	r2, [pc, #52]	; (221ec <z_impl_gpio_pin_interrupt_configure+0xdc>)
   221b6:	480e      	ldr	r0, [pc, #56]	; (221f0 <z_impl_gpio_pin_interrupt_configure+0xe0>)
   221b8:	f00d f904 	bl	2f3c4 <assert_print>
   221bc:	4815      	ldr	r0, [pc, #84]	; (22214 <z_impl_gpio_pin_interrupt_configure+0x104>)
   221be:	f00d f901 	bl	2f3c4 <assert_print>
   221c2:	f240 218f 	movw	r1, #655	; 0x28f
   221c6:	e7b8      	b.n	2213a <z_impl_gpio_pin_interrupt_configure+0x2a>
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   221c8:	0216      	lsls	r6, r2, #8
   221ca:	d504      	bpl.n	221d6 <z_impl_gpio_pin_interrupt_configure+0xc6>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   221cc:	682d      	ldr	r5, [r5, #0]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   221ce:	422b      	tst	r3, r5
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   221d0:	bf18      	it	ne
   221d2:	f082 62c0 	eorne.w	r2, r2, #100663296	; 0x6000000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   221d6:	69a4      	ldr	r4, [r4, #24]
   221d8:	f002 63c0 	and.w	r3, r2, #100663296	; 0x6000000
   221dc:	46a4      	mov	ip, r4
}
   221de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   221e2:	f002 72b0 	and.w	r2, r2, #23068672	; 0x1600000
   221e6:	4760      	bx	ip
   221e8:	0003eb48 	.word	0x0003eb48
   221ec:	0003b5d9 	.word	0x0003b5d9
   221f0:	00039995 	.word	0x00039995
   221f4:	0003eb89 	.word	0x0003eb89
   221f8:	0003ebb5 	.word	0x0003ebb5
   221fc:	0003ebdf 	.word	0x0003ebdf
   22200:	0003ec0a 	.word	0x0003ec0a
   22204:	0003ec8b 	.word	0x0003ec8b
   22208:	0003ecdf 	.word	0x0003ecdf
   2220c:	0003ed29 	.word	0x0003ed29
   22210:	0003b60a 	.word	0x0003b60a
   22214:	0003b648 	.word	0x0003b648

00022218 <gpio_pin_set>:
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   22218:	2301      	movs	r3, #1
{
   2221a:	b510      	push	{r4, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2221c:	fa03 f101 	lsl.w	r1, r3, r1
   22220:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_data *const data =
   22222:	6904      	ldr	r4, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   22224:	681b      	ldr	r3, [r3, #0]
   22226:	4219      	tst	r1, r3
   22228:	d10e      	bne.n	22248 <gpio_pin_set+0x30>
   2222a:	490e      	ldr	r1, [pc, #56]	; (22264 <gpio_pin_set+0x4c>)
   2222c:	f240 535c 	movw	r3, #1372	; 0x55c
   22230:	4a0d      	ldr	r2, [pc, #52]	; (22268 <gpio_pin_set+0x50>)
   22232:	480e      	ldr	r0, [pc, #56]	; (2226c <gpio_pin_set+0x54>)
   22234:	f00d f8c6 	bl	2f3c4 <assert_print>
   22238:	480d      	ldr	r0, [pc, #52]	; (22270 <gpio_pin_set+0x58>)
   2223a:	f00d f8c3 	bl	2f3c4 <assert_print>
   2223e:	f240 515c 	movw	r1, #1372	; 0x55c
   22242:	4809      	ldr	r0, [pc, #36]	; (22268 <gpio_pin_set+0x50>)
   22244:	f00d f8b7 	bl	2f3b6 <assert_post_action>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   22248:	6823      	ldr	r3, [r4, #0]
   2224a:	4219      	tst	r1, r3
   2224c:	d003      	beq.n	22256 <gpio_pin_set+0x3e>
	if (value != 0)	{
   2224e:	b122      	cbz	r2, 2225a <gpio_pin_set+0x42>
	return api->port_clear_bits_raw(port, pins);
   22250:	6883      	ldr	r3, [r0, #8]
   22252:	691b      	ldr	r3, [r3, #16]
   22254:	e003      	b.n	2225e <gpio_pin_set+0x46>
	if (value != 0)	{
   22256:	2a00      	cmp	r2, #0
   22258:	d0fa      	beq.n	22250 <gpio_pin_set+0x38>
	return api->port_set_bits_raw(port, pins);
   2225a:	6883      	ldr	r3, [r0, #8]
   2225c:	68db      	ldr	r3, [r3, #12]
}
   2225e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return api->port_clear_bits_raw(port, pins);
   22262:	4718      	bx	r3
   22264:	0003b60a 	.word	0x0003b60a
   22268:	0003b5d9 	.word	0x0003b5d9
   2226c:	00039995 	.word	0x00039995
   22270:	0003b648 	.word	0x0003b648

00022274 <get_buttons.part.0>:
	}

	return err;
}

static uint32_t get_buttons(void)
   22274:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
		int val;

		val = gpio_pin_get_dt(&buttons[i]);
		if (val < 0) {
			LOG_ERR("Cannot read gpio pin");
   22276:	4b07      	ldr	r3, [pc, #28]	; (22294 <get_buttons.part.0+0x20>)
   22278:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2227c:	9305      	str	r3, [sp, #20]
   2227e:	2302      	movs	r3, #2
   22280:	4805      	ldr	r0, [pc, #20]	; (22298 <get_buttons.part.0+0x24>)
   22282:	aa04      	add	r2, sp, #16
   22284:	9304      	str	r3, [sp, #16]
   22286:	f012 fdc5 	bl	34e14 <z_log_msg_static_create.constprop.0>
			ret |= 1U << i;
		}
	}

	return ret;
}
   2228a:	2000      	movs	r0, #0
   2228c:	b007      	add	sp, #28
   2228e:	f85d fb04 	ldr.w	pc, [sp], #4
   22292:	bf00      	nop
   22294:	0003ed6e 	.word	0x0003ed6e
   22298:	00037948 	.word	0x00037948

0002229c <get_buttons>:
{
   2229c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	uint32_t ret = 0;
   222a0:	2400      	movs	r4, #0
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   222a2:	f04f 0801 	mov.w	r8, #1
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   222a6:	4625      	mov	r5, r4
   222a8:	4e1c      	ldr	r6, [pc, #112]	; (2231c <get_buttons+0x80>)
	return gpio_pin_get(spec->port, spec->pin);
   222aa:	6830      	ldr	r0, [r6, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   222ac:	7937      	ldrb	r7, [r6, #4]
   222ae:	6843      	ldr	r3, [r0, #4]
   222b0:	fa08 f707 	lsl.w	r7, r8, r7
   222b4:	681b      	ldr	r3, [r3, #0]
   222b6:	421f      	tst	r7, r3
   222b8:	d10e      	bne.n	222d8 <get_buttons+0x3c>
   222ba:	4919      	ldr	r1, [pc, #100]	; (22320 <get_buttons+0x84>)
   222bc:	f240 5303 	movw	r3, #1283	; 0x503
   222c0:	4a18      	ldr	r2, [pc, #96]	; (22324 <get_buttons+0x88>)
   222c2:	4819      	ldr	r0, [pc, #100]	; (22328 <get_buttons+0x8c>)
   222c4:	f00d f87e 	bl	2f3c4 <assert_print>
   222c8:	4818      	ldr	r0, [pc, #96]	; (2232c <get_buttons+0x90>)
   222ca:	f00d f87b 	bl	2f3c4 <assert_print>
   222ce:	f240 5103 	movw	r1, #1283	; 0x503
   222d2:	4814      	ldr	r0, [pc, #80]	; (22324 <get_buttons+0x88>)
   222d4:	f00d f86f 	bl	2f3b6 <assert_post_action>
	const struct gpio_driver_data *const data =
   222d8:	f8d0 9010 	ldr.w	r9, [r0, #16]
	return api->port_get_raw(port, value);
   222dc:	6883      	ldr	r3, [r0, #8]
   222de:	a901      	add	r1, sp, #4
   222e0:	685b      	ldr	r3, [r3, #4]
   222e2:	4798      	blx	r3
	if (ret == 0) {
   222e4:	2800      	cmp	r0, #0
   222e6:	d00c      	beq.n	22302 <get_buttons+0x66>
		if (val < 0) {
   222e8:	db12      	blt.n	22310 <get_buttons+0x74>
			ret |= 1U << i;
   222ea:	fa08 f305 	lsl.w	r3, r8, r5
   222ee:	431c      	orrs	r4, r3
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   222f0:	3501      	adds	r5, #1
   222f2:	2d04      	cmp	r5, #4
   222f4:	f106 0608 	add.w	r6, r6, #8
   222f8:	d1d7      	bne.n	222aa <get_buttons+0xe>
}
   222fa:	4620      	mov	r0, r4
   222fc:	b003      	add	sp, #12
   222fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*value ^= data->invert;
   22302:	f8d9 2000 	ldr.w	r2, [r9]
   22306:	9b01      	ldr	r3, [sp, #4]
   22308:	4053      	eors	r3, r2
		if (val) {
   2230a:	423b      	tst	r3, r7
   2230c:	d0f0      	beq.n	222f0 <get_buttons+0x54>
   2230e:	e7ec      	b.n	222ea <get_buttons+0x4e>
}
   22310:	b003      	add	sp, #12
   22312:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22316:	f7ff bfad 	b.w	22274 <get_buttons.part.0>
   2231a:	bf00      	nop
   2231c:	00038690 	.word	0x00038690
   22320:	0003b60a 	.word	0x0003b60a
   22324:	0003b5d9 	.word	0x0003b5d9
   22328:	00039995 	.word	0x00039995
   2232c:	0003b648 	.word	0x0003b648

00022330 <dk_set_leds_state.part.0>:
int dk_set_leds(uint32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   22330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22334:	4607      	mov	r7, r0
   22336:	4688      	mov	r8, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   22338:	2500      	movs	r5, #0
   2233a:	4e14      	ldr	r6, [pc, #80]	; (2238c <dk_set_leds_state.part.0+0x5c>)
int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   2233c:	b086      	sub	sp, #24
		int val, err;

		if (BIT(i) & leds_on_mask) {
   2233e:	fa27 f205 	lsr.w	r2, r7, r5
   22342:	f012 0201 	ands.w	r2, r2, #1
   22346:	d117      	bne.n	22378 <dk_set_leds_state.part.0+0x48>
			val = 1;
		} else if (BIT(i) & leds_off_mask) {
   22348:	fa28 f305 	lsr.w	r3, r8, r5
   2234c:	07db      	lsls	r3, r3, #31
   2234e:	d515      	bpl.n	2237c <dk_set_leds_state.part.0+0x4c>
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
   22350:	7931      	ldrb	r1, [r6, #4]
   22352:	6830      	ldr	r0, [r6, #0]
   22354:	f7ff ff60 	bl	22218 <gpio_pin_set>
		} else {
			continue;
		}

		err = gpio_pin_set_dt(&leds[i], val);
		if (err) {
   22358:	4604      	mov	r4, r0
   2235a:	b178      	cbz	r0, 2237c <dk_set_leds_state.part.0+0x4c>
			LOG_ERR("Cannot write LED gpio");
   2235c:	4b0c      	ldr	r3, [pc, #48]	; (22390 <dk_set_leds_state.part.0+0x60>)
   2235e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   22362:	9305      	str	r3, [sp, #20]
   22364:	2302      	movs	r3, #2
   22366:	480b      	ldr	r0, [pc, #44]	; (22394 <dk_set_leds_state.part.0+0x64>)
   22368:	aa04      	add	r2, sp, #16
   2236a:	9304      	str	r3, [sp, #16]
   2236c:	f012 fd52 	bl	34e14 <z_log_msg_static_create.constprop.0>
			return err;
		}
	}

	return 0;
}
   22370:	4620      	mov	r0, r4
   22372:	b006      	add	sp, #24
   22374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			val = 1;
   22378:	2201      	movs	r2, #1
   2237a:	e7e9      	b.n	22350 <dk_set_leds_state.part.0+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   2237c:	3501      	adds	r5, #1
   2237e:	2d04      	cmp	r5, #4
   22380:	f106 0608 	add.w	r6, r6, #8
   22384:	d1db      	bne.n	2233e <dk_set_leds_state.part.0+0xe>
	return 0;
   22386:	2400      	movs	r4, #0
   22388:	e7f2      	b.n	22370 <dk_set_leds_state.part.0+0x40>
   2238a:	bf00      	nop
   2238c:	00038670 	.word	0x00038670
   22390:	0003ed83 	.word	0x0003ed83
   22394:	00037948 	.word	0x00037948

00022398 <callback_ctrl>:
{
   22398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2239c:	4680      	mov	r8, r0
	for (size_t i = 0; (i < ARRAY_SIZE(buttons)) && !err; i++) {
   2239e:	2600      	movs	r6, #0
   223a0:	4d19      	ldr	r5, [pc, #100]	; (22408 <callback_ctrl+0x70>)
					 FLAGS_GPIO_0_1_ACTIVE :
   223a2:	f8df 9068 	ldr.w	r9, [pc, #104]	; 2240c <callback_ctrl+0x74>
{
   223a6:	af00      	add	r7, sp, #0
			flags = ((buttons[i].port == GPIO0_DEV || buttons[i].port == GPIO1_DEV) ?
   223a8:	6828      	ldr	r0, [r5, #0]
		if (enable) {
   223aa:	f1b8 0f00 	cmp.w	r8, #0
   223ae:	d01f      	beq.n	223f0 <callback_ctrl+0x58>
					 FLAGS_GPIO_0_1_ACTIVE :
   223b0:	4548      	cmp	r0, r9
   223b2:	d020      	beq.n	223f6 <callback_ctrl+0x5e>
   223b4:	2800      	cmp	r0, #0
   223b6:	bf14      	ite	ne
   223b8:	f04f 62e8 	movne.w	r2, #121634816	; 0x7400000
   223bc:	f04f 6298 	moveq.w	r2, #79691776	; 0x4c00000
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   223c0:	7929      	ldrb	r1, [r5, #4]
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   223c2:	f7ff fea5 	bl	22110 <z_impl_gpio_pin_interrupt_configure>
		if (err) {
   223c6:	4604      	mov	r4, r0
   223c8:	b1c0      	cbz	r0, 223fc <callback_ctrl+0x64>
			LOG_ERR("GPIO IRQ config failed, err: %d", err);
   223ca:	466d      	mov	r5, sp
   223cc:	b088      	sub	sp, #32
   223ce:	466a      	mov	r2, sp
   223d0:	4b0f      	ldr	r3, [pc, #60]	; (22410 <callback_ctrl+0x78>)
   223d2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   223d6:	e9c2 3005 	strd	r3, r0, [r2, #20]
   223da:	2303      	movs	r3, #3
   223dc:	480d      	ldr	r0, [pc, #52]	; (22414 <callback_ctrl+0x7c>)
   223de:	f842 3f10 	str.w	r3, [r2, #16]!
   223e2:	f012 fd17 	bl	34e14 <z_log_msg_static_create.constprop.0>
   223e6:	46ad      	mov	sp, r5
}
   223e8:	4620      	mov	r0, r4
   223ea:	46bd      	mov	sp, r7
   223ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			flags = GPIO_INT_DISABLE;
   223f0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   223f4:	e7e4      	b.n	223c0 <callback_ctrl+0x28>
					 FLAGS_GPIO_0_1_ACTIVE :
   223f6:	f04f 6298 	mov.w	r2, #79691776	; 0x4c00000
   223fa:	e7e1      	b.n	223c0 <callback_ctrl+0x28>
	for (size_t i = 0; (i < ARRAY_SIZE(buttons)) && !err; i++) {
   223fc:	3601      	adds	r6, #1
   223fe:	2e04      	cmp	r6, #4
   22400:	f105 0508 	add.w	r5, r5, #8
   22404:	d1d0      	bne.n	223a8 <callback_ctrl+0x10>
   22406:	e7ef      	b.n	223e8 <callback_ctrl+0x50>
   22408:	00038690 	.word	0x00038690
   2240c:	0003751c 	.word	0x0003751c
   22410:	0003ed99 	.word	0x0003ed99
   22414:	00037948 	.word	0x00037948

00022418 <button_pressed>:
{
   22418:	b570      	push	{r4, r5, r6, lr}
   2241a:	4604      	mov	r4, r0
   2241c:	b086      	sub	sp, #24
	__asm__ volatile(
   2241e:	f04f 0320 	mov.w	r3, #32
   22422:	f3ef 8611 	mrs	r6, BASEPRI
   22426:	f383 8812 	msr	BASEPRI_MAX, r3
   2242a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2242e:	4825      	ldr	r0, [pc, #148]	; (224c4 <button_pressed+0xac>)
   22430:	f006 fe82 	bl	29138 <z_spin_lock_valid>
   22434:	b968      	cbnz	r0, 22452 <button_pressed+0x3a>
   22436:	2394      	movs	r3, #148	; 0x94
   22438:	4a23      	ldr	r2, [pc, #140]	; (224c8 <button_pressed+0xb0>)
   2243a:	4924      	ldr	r1, [pc, #144]	; (224cc <button_pressed+0xb4>)
   2243c:	4824      	ldr	r0, [pc, #144]	; (224d0 <button_pressed+0xb8>)
   2243e:	f00c ffc1 	bl	2f3c4 <assert_print>
   22442:	4920      	ldr	r1, [pc, #128]	; (224c4 <button_pressed+0xac>)
   22444:	4823      	ldr	r0, [pc, #140]	; (224d4 <button_pressed+0xbc>)
   22446:	f00c ffbd 	bl	2f3c4 <assert_print>
   2244a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2244c:	481e      	ldr	r0, [pc, #120]	; (224c8 <button_pressed+0xb0>)
   2244e:	f00c ffb2 	bl	2f3b6 <assert_post_action>
	switch (state) {
   22452:	4d21      	ldr	r5, [pc, #132]	; (224d8 <button_pressed+0xc0>)
	z_spin_lock_set_owner(l);
   22454:	481b      	ldr	r0, [pc, #108]	; (224c4 <button_pressed+0xac>)
   22456:	f006 fe8b 	bl	29170 <z_spin_lock_set_owner>
   2245a:	782b      	ldrb	r3, [r5, #0]
   2245c:	b9db      	cbnz	r3, 22496 <button_pressed+0x7e>
		if (gpio_dev == GPIO0_DEV || gpio_dev == GPIO1_DEV) {
   2245e:	4b1f      	ldr	r3, [pc, #124]	; (224dc <button_pressed+0xc4>)
   22460:	429c      	cmp	r4, r3
   22462:	d000      	beq.n	22466 <button_pressed+0x4e>
   22464:	b984      	cbnz	r4, 22488 <button_pressed+0x70>
			err = callback_ctrl(false);
   22466:	2000      	movs	r0, #0
   22468:	f7ff ff96 	bl	22398 <callback_ctrl>
			if (err) {
   2246c:	b148      	cbz	r0, 22482 <button_pressed+0x6a>
				LOG_ERR("Failed disabling interrupts");
   2246e:	4b1c      	ldr	r3, [pc, #112]	; (224e0 <button_pressed+0xc8>)
   22470:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   22474:	9305      	str	r3, [sp, #20]
   22476:	2302      	movs	r3, #2
   22478:	481a      	ldr	r0, [pc, #104]	; (224e4 <button_pressed+0xcc>)
   2247a:	aa04      	add	r2, sp, #16
   2247c:	9304      	str	r3, [sp, #16]
   2247e:	f012 fcc9 	bl	34e14 <z_log_msg_static_create.constprop.0>
			irq_enabled = false;
   22482:	2200      	movs	r2, #0
   22484:	4b18      	ldr	r3, [pc, #96]	; (224e8 <button_pressed+0xd0>)
   22486:	701a      	strb	r2, [r3, #0]
		state = STATE_SCANNING;
   22488:	2301      	movs	r3, #1
		k_work_reschedule(&buttons_scan, K_MSEC(1));
   2248a:	2221      	movs	r2, #33	; 0x21
		state = STATE_SCANNING;
   2248c:	702b      	strb	r3, [r5, #0]
		k_work_reschedule(&buttons_scan, K_MSEC(1));
   2248e:	4817      	ldr	r0, [pc, #92]	; (224ec <button_pressed+0xd4>)
   22490:	2300      	movs	r3, #0
   22492:	f007 fe1b 	bl	2a0cc <k_work_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22496:	480b      	ldr	r0, [pc, #44]	; (224c4 <button_pressed+0xac>)
   22498:	f006 fe5c 	bl	29154 <z_spin_unlock_valid>
   2249c:	b958      	cbnz	r0, 224b6 <button_pressed+0x9e>
   2249e:	23c2      	movs	r3, #194	; 0xc2
   224a0:	4a09      	ldr	r2, [pc, #36]	; (224c8 <button_pressed+0xb0>)
   224a2:	4913      	ldr	r1, [pc, #76]	; (224f0 <button_pressed+0xd8>)
   224a4:	480a      	ldr	r0, [pc, #40]	; (224d0 <button_pressed+0xb8>)
   224a6:	f00c ff8d 	bl	2f3c4 <assert_print>
   224aa:	4906      	ldr	r1, [pc, #24]	; (224c4 <button_pressed+0xac>)
   224ac:	4811      	ldr	r0, [pc, #68]	; (224f4 <button_pressed+0xdc>)
   224ae:	f00c ff89 	bl	2f3c4 <assert_print>
   224b2:	21c2      	movs	r1, #194	; 0xc2
   224b4:	e7ca      	b.n	2244c <button_pressed+0x34>
	__asm__ volatile(
   224b6:	f386 8811 	msr	BASEPRI, r6
   224ba:	f3bf 8f6f 	isb	sy
}
   224be:	b006      	add	sp, #24
   224c0:	bd70      	pop	{r4, r5, r6, pc}
   224c2:	bf00      	nop
   224c4:	2000eaac 	.word	0x2000eaac
   224c8:	00039e53 	.word	0x00039e53
   224cc:	00039eac 	.word	0x00039eac
   224d0:	00039995 	.word	0x00039995
   224d4:	00039ec1 	.word	0x00039ec1
   224d8:	2000f6bc 	.word	0x2000f6bc
   224dc:	0003751c 	.word	0x0003751c
   224e0:	0003edb9 	.word	0x0003edb9
   224e4:	00037948 	.word	0x00037948
   224e8:	2000f6bb 	.word	0x2000f6bb
   224ec:	2000def0 	.word	0x2000def0
   224f0:	00039e80 	.word	0x00039e80
   224f4:	00039e97 	.word	0x00039e97

000224f8 <buttons_scan_fn>:
{
   224f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (irq_enabled) {
   224fc:	4f48      	ldr	r7, [pc, #288]	; (22620 <buttons_scan_fn+0x128>)
{
   224fe:	b086      	sub	sp, #24
	if (irq_enabled) {
   22500:	783b      	ldrb	r3, [r7, #0]
   22502:	b18b      	cbz	r3, 22528 <buttons_scan_fn+0x30>
		err = callback_ctrl(false);
   22504:	2000      	movs	r0, #0
   22506:	f7ff ff47 	bl	22398 <callback_ctrl>
		if (err) {
   2250a:	b160      	cbz	r0, 22526 <buttons_scan_fn+0x2e>
			LOG_ERR("Cannot disable callbacks");
   2250c:	4b45      	ldr	r3, [pc, #276]	; (22624 <buttons_scan_fn+0x12c>)
			LOG_ERR("Cannot enable callbacks");
   2250e:	9305      	str	r3, [sp, #20]
   22510:	2302      	movs	r3, #2
   22512:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   22516:	4844      	ldr	r0, [pc, #272]	; (22628 <buttons_scan_fn+0x130>)
   22518:	aa04      	add	r2, sp, #16
   2251a:	9304      	str	r3, [sp, #16]
   2251c:	f012 fc7a 	bl	34e14 <z_log_msg_static_create.constprop.0>
}
   22520:	b006      	add	sp, #24
   22522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		irq_enabled = false;
   22526:	7038      	strb	r0, [r7, #0]
	button_scan = get_buttons();
   22528:	f7ff feb8 	bl	2229c <get_buttons>
   2252c:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2252e:	4b3f      	ldr	r3, [pc, #252]	; (2262c <buttons_scan_fn+0x134>)
   22530:	e8d3 2fef 	ldaex	r2, [r3]
   22534:	e8c3 4fe1 	stlex	r1, r4, [r3]
   22538:	2900      	cmp	r1, #0
   2253a:	d1f9      	bne.n	22530 <buttons_scan_fn+0x38>
	if (!initial_run) {
   2253c:	4b3c      	ldr	r3, [pc, #240]	; (22630 <buttons_scan_fn+0x138>)
   2253e:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 22634 <buttons_scan_fn+0x13c>
   22542:	781a      	ldrb	r2, [r3, #0]
   22544:	bb4a      	cbnz	r2, 2259a <buttons_scan_fn+0xa2>
		if (button_scan != last_button_scan) {
   22546:	f8d8 6000 	ldr.w	r6, [r8]
   2254a:	42a6      	cmp	r6, r4
   2254c:	d019      	beq.n	22582 <buttons_scan_fn+0x8a>
	if (button_handler_cb != NULL) {
   2254e:	4b3a      	ldr	r3, [pc, #232]	; (22638 <buttons_scan_fn+0x140>)
			uint32_t has_changed = (button_scan ^ last_button_scan);
   22550:	4066      	eors	r6, r4
	if (button_handler_cb != NULL) {
   22552:	681b      	ldr	r3, [r3, #0]
   22554:	b10b      	cbz	r3, 2255a <buttons_scan_fn+0x62>
		button_handler_cb(button_state, has_changed);
   22556:	4631      	mov	r1, r6
   22558:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
   2255a:	f04f 33ff 	mov.w	r3, #4294967295
   2255e:	f04f 32ff 	mov.w	r2, #4294967295
   22562:	4836      	ldr	r0, [pc, #216]	; (2263c <buttons_scan_fn+0x144>)
   22564:	f006 fe3e 	bl	291e4 <z_impl_k_mutex_lock>
	return list->head;
   22568:	4b35      	ldr	r3, [pc, #212]	; (22640 <buttons_scan_fn+0x148>)
   2256a:	681d      	ldr	r5, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   2256c:	b135      	cbz	r5, 2257c <buttons_scan_fn+0x84>
   2256e:	3d04      	subs	r5, #4
			handler->cb(button_state, has_changed);
   22570:	682b      	ldr	r3, [r5, #0]
   22572:	4631      	mov	r1, r6
   22574:	4620      	mov	r0, r4
   22576:	4798      	blx	r3
	return node->next;
   22578:	686d      	ldr	r5, [r5, #4]
   2257a:	e7f7      	b.n	2256c <buttons_scan_fn+0x74>
	return z_impl_k_mutex_unlock(mutex);
   2257c:	482f      	ldr	r0, [pc, #188]	; (2263c <buttons_scan_fn+0x144>)
   2257e:	f006 ff01 	bl	29384 <z_impl_k_mutex_unlock>
	last_button_scan = button_scan;
   22582:	f8c8 4000 	str.w	r4, [r8]
	if (button_scan != 0) {
   22586:	b15c      	cbz	r4, 225a0 <buttons_scan_fn+0xa8>
		k_work_reschedule(&buttons_scan,
   22588:	f44f 72a4 	mov.w	r2, #328	; 0x148
   2258c:	2300      	movs	r3, #0
   2258e:	482d      	ldr	r0, [pc, #180]	; (22644 <buttons_scan_fn+0x14c>)
}
   22590:	b006      	add	sp, #24
   22592:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_reschedule(&buttons_scan,
   22596:	f007 bd99 	b.w	2a0cc <k_work_reschedule>
		initial_run = false;
   2259a:	2200      	movs	r2, #0
   2259c:	701a      	strb	r2, [r3, #0]
   2259e:	e7f0      	b.n	22582 <buttons_scan_fn+0x8a>
	__asm__ volatile(
   225a0:	f04f 0320 	mov.w	r3, #32
   225a4:	f3ef 8611 	mrs	r6, BASEPRI
   225a8:	f383 8812 	msr	BASEPRI_MAX, r3
   225ac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   225b0:	4825      	ldr	r0, [pc, #148]	; (22648 <buttons_scan_fn+0x150>)
   225b2:	f006 fdc1 	bl	29138 <z_spin_lock_valid>
   225b6:	b968      	cbnz	r0, 225d4 <buttons_scan_fn+0xdc>
   225b8:	2394      	movs	r3, #148	; 0x94
   225ba:	4a24      	ldr	r2, [pc, #144]	; (2264c <buttons_scan_fn+0x154>)
   225bc:	4924      	ldr	r1, [pc, #144]	; (22650 <buttons_scan_fn+0x158>)
   225be:	4825      	ldr	r0, [pc, #148]	; (22654 <buttons_scan_fn+0x15c>)
   225c0:	f00c ff00 	bl	2f3c4 <assert_print>
   225c4:	4920      	ldr	r1, [pc, #128]	; (22648 <buttons_scan_fn+0x150>)
   225c6:	4824      	ldr	r0, [pc, #144]	; (22658 <buttons_scan_fn+0x160>)
   225c8:	f00c fefc 	bl	2f3c4 <assert_print>
   225cc:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   225ce:	481f      	ldr	r0, [pc, #124]	; (2264c <buttons_scan_fn+0x154>)
   225d0:	f00c fef1 	bl	2f3b6 <assert_post_action>
	z_spin_lock_set_owner(l);
   225d4:	481c      	ldr	r0, [pc, #112]	; (22648 <buttons_scan_fn+0x150>)
   225d6:	f006 fdcb 	bl	29170 <z_spin_lock_set_owner>
		switch (state) {
   225da:	4b20      	ldr	r3, [pc, #128]	; (2265c <buttons_scan_fn+0x164>)
   225dc:	781d      	ldrb	r5, [r3, #0]
   225de:	2d01      	cmp	r5, #1
   225e0:	d105      	bne.n	225ee <buttons_scan_fn+0xf6>
			err = callback_ctrl(true);
   225e2:	4628      	mov	r0, r5
			state = STATE_WAITING;
   225e4:	701c      	strb	r4, [r3, #0]
			err = callback_ctrl(true);
   225e6:	f7ff fed7 	bl	22398 <callback_ctrl>
   225ea:	4604      	mov	r4, r0
			irq_enabled = true;
   225ec:	703d      	strb	r5, [r7, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   225ee:	4816      	ldr	r0, [pc, #88]	; (22648 <buttons_scan_fn+0x150>)
   225f0:	f006 fdb0 	bl	29154 <z_spin_unlock_valid>
   225f4:	b958      	cbnz	r0, 2260e <buttons_scan_fn+0x116>
   225f6:	23c2      	movs	r3, #194	; 0xc2
   225f8:	4a14      	ldr	r2, [pc, #80]	; (2264c <buttons_scan_fn+0x154>)
   225fa:	4919      	ldr	r1, [pc, #100]	; (22660 <buttons_scan_fn+0x168>)
   225fc:	4815      	ldr	r0, [pc, #84]	; (22654 <buttons_scan_fn+0x15c>)
   225fe:	f00c fee1 	bl	2f3c4 <assert_print>
   22602:	4911      	ldr	r1, [pc, #68]	; (22648 <buttons_scan_fn+0x150>)
   22604:	4817      	ldr	r0, [pc, #92]	; (22664 <buttons_scan_fn+0x16c>)
   22606:	f00c fedd 	bl	2f3c4 <assert_print>
   2260a:	21c2      	movs	r1, #194	; 0xc2
   2260c:	e7df      	b.n	225ce <buttons_scan_fn+0xd6>
	__asm__ volatile(
   2260e:	f386 8811 	msr	BASEPRI, r6
   22612:	f3bf 8f6f 	isb	sy
		if (err) {
   22616:	2c00      	cmp	r4, #0
   22618:	d082      	beq.n	22520 <buttons_scan_fn+0x28>
			LOG_ERR("Cannot enable callbacks");
   2261a:	4b13      	ldr	r3, [pc, #76]	; (22668 <buttons_scan_fn+0x170>)
   2261c:	e777      	b.n	2250e <buttons_scan_fn+0x16>
   2261e:	bf00      	nop
   22620:	2000f6bb 	.word	0x2000f6bb
   22624:	0003edd5 	.word	0x0003edd5
   22628:	00037948 	.word	0x00037948
   2262c:	2000eabc 	.word	0x2000eabc
   22630:	2000ccbd 	.word	0x2000ccbd
   22634:	2000ea8c 	.word	0x2000ea8c
   22638:	2000eac0 	.word	0x2000eac0
   2263c:	2000ea90 	.word	0x2000ea90
   22640:	2000eaa4 	.word	0x2000eaa4
   22644:	2000def0 	.word	0x2000def0
   22648:	2000eaac 	.word	0x2000eaac
   2264c:	00039e53 	.word	0x00039e53
   22650:	00039eac 	.word	0x00039eac
   22654:	00039995 	.word	0x00039995
   22658:	00039ec1 	.word	0x00039ec1
   2265c:	2000f6bc 	.word	0x2000f6bc
   22660:	00039e80 	.word	0x00039e80
   22664:	00039e97 	.word	0x00039e97
   22668:	0003edee 	.word	0x0003edee

0002266c <dk_leds_init>:
{
   2266c:	b570      	push	{r4, r5, r6, lr}
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   2266e:	2600      	movs	r6, #0
   22670:	4c11      	ldr	r4, [pc, #68]	; (226b8 <dk_leds_init+0x4c>)
{
   22672:	b086      	sub	sp, #24
				  spec->dt_flags | extra_flags);
   22674:	88e2      	ldrh	r2, [r4, #6]
	return gpio_pin_configure(spec->port,
   22676:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
   22678:	7921      	ldrb	r1, [r4, #4]
	return gpio_pin_configure(spec->port,
   2267a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
   2267e:	f7ff fc95 	bl	21fac <z_impl_gpio_pin_configure>
		if (err) {
   22682:	4605      	mov	r5, r0
   22684:	b950      	cbnz	r0, 2269c <dk_leds_init+0x30>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   22686:	3601      	adds	r6, #1
   22688:	2e04      	cmp	r6, #4
   2268a:	f104 0408 	add.w	r4, r4, #8
   2268e:	d1f1      	bne.n	22674 <dk_leds_init+0x8>
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   22690:	210f      	movs	r1, #15
}
   22692:	b006      	add	sp, #24
   22694:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   22698:	f7ff be4a 	b.w	22330 <dk_set_leds_state.part.0>
			LOG_ERR("Cannot configure LED gpio");
   2269c:	4b07      	ldr	r3, [pc, #28]	; (226bc <dk_leds_init+0x50>)
   2269e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   226a2:	9305      	str	r3, [sp, #20]
   226a4:	2302      	movs	r3, #2
   226a6:	4806      	ldr	r0, [pc, #24]	; (226c0 <dk_leds_init+0x54>)
   226a8:	aa04      	add	r2, sp, #16
   226aa:	9304      	str	r3, [sp, #16]
   226ac:	f012 fbb2 	bl	34e14 <z_log_msg_static_create.constprop.0>
}
   226b0:	4628      	mov	r0, r5
   226b2:	b006      	add	sp, #24
   226b4:	bd70      	pop	{r4, r5, r6, pc}
   226b6:	bf00      	nop
   226b8:	00038670 	.word	0x00038670
   226bc:	0003ee06 	.word	0x0003ee06
   226c0:	00037948 	.word	0x00037948

000226c4 <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   226c4:	4b05      	ldr	r3, [pc, #20]	; (226dc <dk_read_buttons+0x18>)
   226c6:	e8d3 3faf 	lda	r3, [r3]
	if (button_state != NULL) {
   226ca:	b100      	cbz	r0, 226ce <dk_read_buttons+0xa>
		*button_state = current_state;
   226cc:	6003      	str	r3, [r0, #0]
	if (has_changed != NULL) {
   226ce:	4804      	ldr	r0, [pc, #16]	; (226e0 <dk_read_buttons+0x1c>)
   226d0:	b111      	cbz	r1, 226d8 <dk_read_buttons+0x14>
		*has_changed = (current_state ^ last_state);
   226d2:	6802      	ldr	r2, [r0, #0]
   226d4:	405a      	eors	r2, r3
   226d6:	600a      	str	r2, [r1, #0]
	last_state = current_state;
   226d8:	6003      	str	r3, [r0, #0]
}
   226da:	4770      	bx	lr
   226dc:	2000eabc 	.word	0x2000eabc
   226e0:	2000ea88 	.word	0x2000ea88

000226e4 <dk_buttons_init>:
{
   226e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	button_handler_cb = button_handler;
   226e8:	4b3b      	ldr	r3, [pc, #236]	; (227d8 <dk_buttons_init+0xf4>)
{
   226ea:	b087      	sub	sp, #28
	button_handler_cb = button_handler;
   226ec:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
   226ee:	4d3b      	ldr	r5, [pc, #236]	; (227dc <dk_buttons_init+0xf8>)
   226f0:	483b      	ldr	r0, [pc, #236]	; (227e0 <dk_buttons_init+0xfc>)
   226f2:	f013 fd04 	bl	360fe <z_impl_k_mutex_init>
   226f6:	462e      	mov	r6, r5
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   226f8:	f04f 0800 	mov.w	r8, #0
   226fc:	462f      	mov	r7, r5
			buttons[i].dt_flags & GPIO_ACTIVE_LOW ?
   226fe:	88f2      	ldrh	r2, [r6, #6]
   22700:	6830      	ldr	r0, [r6, #0]
			GPIO_PULL_UP : GPIO_PULL_DOWN;
   22702:	f012 0f01 	tst.w	r2, #1
   22706:	bf14      	ite	ne
   22708:	2310      	movne	r3, #16
   2270a:	2320      	moveq	r3, #32
				  spec->pin,
   2270c:	7931      	ldrb	r1, [r6, #4]
	return gpio_pin_configure(spec->port,
   2270e:	431a      	orrs	r2, r3
   22710:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   22714:	f7ff fc4a 	bl	21fac <z_impl_gpio_pin_configure>
		if (err) {
   22718:	4604      	mov	r4, r0
   2271a:	b168      	cbz	r0, 22738 <dk_buttons_init+0x54>
			LOG_ERR("Cannot configure button gpio");
   2271c:	4b31      	ldr	r3, [pc, #196]	; (227e4 <dk_buttons_init+0x100>)
			LOG_ERR("Cannot disable callbacks()");
   2271e:	9305      	str	r3, [sp, #20]
   22720:	2302      	movs	r3, #2
   22722:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   22726:	4830      	ldr	r0, [pc, #192]	; (227e8 <dk_buttons_init+0x104>)
   22728:	aa04      	add	r2, sp, #16
   2272a:	9304      	str	r3, [sp, #16]
   2272c:	f012 fb72 	bl	34e14 <z_log_msg_static_create.constprop.0>
}
   22730:	4620      	mov	r0, r4
   22732:	b007      	add	sp, #28
   22734:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   22738:	f108 0801 	add.w	r8, r8, #1
   2273c:	f1b8 0f04 	cmp.w	r8, #4
   22740:	f106 0608 	add.w	r6, r6, #8
   22744:	d1db      	bne.n	226fe <dk_buttons_init+0x1a>
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   22746:	4606      	mov	r6, r0
	uint32_t pin_mask = 0;
   22748:	4680      	mov	r8, r0
		pin_mask |= BIT(buttons[i].pin);
   2274a:	f04f 0901 	mov.w	r9, #1
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   2274e:	6828      	ldr	r0, [r5, #0]
   22750:	7929      	ldrb	r1, [r5, #4]
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   22752:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   22756:	f7ff fcdb 	bl	22110 <z_impl_gpio_pin_interrupt_configure>
		if (err) {
   2275a:	4604      	mov	r4, r0
   2275c:	b108      	cbz	r0, 22762 <dk_buttons_init+0x7e>
			LOG_ERR("Cannot disable callbacks()");
   2275e:	4b23      	ldr	r3, [pc, #140]	; (227ec <dk_buttons_init+0x108>)
   22760:	e7dd      	b.n	2271e <dk_buttons_init+0x3a>
		pin_mask |= BIT(buttons[i].pin);
   22762:	792b      	ldrb	r3, [r5, #4]
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   22764:	3601      	adds	r6, #1
		pin_mask |= BIT(buttons[i].pin);
   22766:	fa09 f303 	lsl.w	r3, r9, r3
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   2276a:	2e04      	cmp	r6, #4
		pin_mask |= BIT(buttons[i].pin);
   2276c:	ea48 0803 	orr.w	r8, r8, r3
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   22770:	f105 0508 	add.w	r5, r5, #8
   22774:	d1eb      	bne.n	2274e <dk_buttons_init+0x6a>
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   22776:	4605      	mov	r5, r0
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   22778:	4e1d      	ldr	r6, [pc, #116]	; (227f0 <dk_buttons_init+0x10c>)
   2277a:	4b1e      	ldr	r3, [pc, #120]	; (227f4 <dk_buttons_init+0x110>)
	callback->pin_mask = pin_mask;
   2277c:	e9c6 3801 	strd	r3, r8, [r6, #4]
		err = gpio_add_callback(buttons[i].port, &gpio_cb);
   22780:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   22784:	6883      	ldr	r3, [r0, #8]
   22786:	69db      	ldr	r3, [r3, #28]
   22788:	b133      	cbz	r3, 22798 <dk_buttons_init+0xb4>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   2278a:	2201      	movs	r2, #1
   2278c:	4631      	mov	r1, r6
   2278e:	4798      	blx	r3
		if (err) {
   22790:	4604      	mov	r4, r0
   22792:	b120      	cbz	r0, 2279e <dk_buttons_init+0xba>
			LOG_ERR("Cannot add callback");
   22794:	4b18      	ldr	r3, [pc, #96]	; (227f8 <dk_buttons_init+0x114>)
   22796:	e7c2      	b.n	2271e <dk_buttons_init+0x3a>
		return -ENOTSUP;
   22798:	f06f 0485 	mvn.w	r4, #133	; 0x85
   2279c:	e7fa      	b.n	22794 <dk_buttons_init+0xb0>
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   2279e:	3501      	adds	r5, #1
   227a0:	2d04      	cmp	r5, #4
   227a2:	d1ed      	bne.n	22780 <dk_buttons_init+0x9c>
	k_work_init_delayable(&buttons_scan, buttons_scan_fn);
   227a4:	4915      	ldr	r1, [pc, #84]	; (227fc <dk_buttons_init+0x118>)
   227a6:	4816      	ldr	r0, [pc, #88]	; (22800 <dk_buttons_init+0x11c>)
   227a8:	f007 fb74 	bl	29e94 <k_work_init_delayable>
	state = STATE_SCANNING;
   227ac:	2201      	movs	r2, #1
   227ae:	4b15      	ldr	r3, [pc, #84]	; (22804 <dk_buttons_init+0x120>)
	k_work_schedule(&buttons_scan, K_NO_WAIT);
   227b0:	4813      	ldr	r0, [pc, #76]	; (22800 <dk_buttons_init+0x11c>)
	state = STATE_SCANNING;
   227b2:	701a      	strb	r2, [r3, #0]
	k_work_schedule(&buttons_scan, K_NO_WAIT);
   227b4:	2300      	movs	r3, #0
   227b6:	2200      	movs	r2, #0
   227b8:	f007 fc0e 	bl	29fd8 <k_work_schedule>
	dk_read_buttons(NULL, NULL);
   227bc:	4621      	mov	r1, r4
   227be:	4620      	mov	r0, r4
   227c0:	f7ff ff80 	bl	226c4 <dk_read_buttons>
	atomic_set(&my_buttons, (atomic_val_t)get_buttons());
   227c4:	f7ff fd6a 	bl	2229c <get_buttons>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   227c8:	4b0f      	ldr	r3, [pc, #60]	; (22808 <dk_buttons_init+0x124>)
   227ca:	e8d3 2fef 	ldaex	r2, [r3]
   227ce:	e8c3 0fe1 	stlex	r1, r0, [r3]
   227d2:	2900      	cmp	r1, #0
   227d4:	d0ac      	beq.n	22730 <dk_buttons_init+0x4c>
   227d6:	e7f8      	b.n	227ca <dk_buttons_init+0xe6>
   227d8:	2000eac0 	.word	0x2000eac0
   227dc:	00038690 	.word	0x00038690
   227e0:	2000ea90 	.word	0x2000ea90
   227e4:	0003ee20 	.word	0x0003ee20
   227e8:	00037948 	.word	0x00037948
   227ec:	0003ee3d 	.word	0x0003ee3d
   227f0:	2000eab0 	.word	0x2000eab0
   227f4:	00022419 	.word	0x00022419
   227f8:	0003ee58 	.word	0x0003ee58
   227fc:	000224f9 	.word	0x000224f9
   22800:	2000def0 	.word	0x2000def0
   22804:	2000f6bc 	.word	0x2000f6bc
   22808:	2000eabc 	.word	0x2000eabc

0002280c <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
   2280c:	b510      	push	{r4, lr}
	int err;

	if (led_idx >= ARRAY_SIZE(leds)) {
   2280e:	2803      	cmp	r0, #3
{
   22810:	460a      	mov	r2, r1
   22812:	b086      	sub	sp, #24
	if (led_idx >= ARRAY_SIZE(leds)) {
   22814:	d90e      	bls.n	22834 <dk_set_led+0x28>
		LOG_ERR("LED index out of the range");
   22816:	4b12      	ldr	r3, [pc, #72]	; (22860 <dk_set_led+0x54>)
		return -EINVAL;
   22818:	f06f 0415 	mvn.w	r4, #21
		LOG_ERR("LED index out of the range");
   2281c:	9305      	str	r3, [sp, #20]
   2281e:	2302      	movs	r3, #2
   22820:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   22824:	480f      	ldr	r0, [pc, #60]	; (22864 <dk_set_led+0x58>)
   22826:	aa04      	add	r2, sp, #16
   22828:	9304      	str	r3, [sp, #16]
   2282a:	f012 faf3 	bl	34e14 <z_log_msg_static_create.constprop.0>
	err = gpio_pin_set_dt(&leds[led_idx], val);
	if (err) {
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
   2282e:	4620      	mov	r0, r4
   22830:	b006      	add	sp, #24
   22832:	bd10      	pop	{r4, pc}
	return gpio_pin_set(spec->port, spec->pin, value);
   22834:	4b0c      	ldr	r3, [pc, #48]	; (22868 <dk_set_led+0x5c>)
   22836:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
   2283a:	7909      	ldrb	r1, [r1, #4]
   2283c:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
   22840:	f7ff fcea 	bl	22218 <gpio_pin_set>
	if (err) {
   22844:	4604      	mov	r4, r0
   22846:	2800      	cmp	r0, #0
   22848:	d0f1      	beq.n	2282e <dk_set_led+0x22>
		LOG_ERR("Cannot write LED gpio");
   2284a:	4b08      	ldr	r3, [pc, #32]	; (2286c <dk_set_led+0x60>)
   2284c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   22850:	9305      	str	r3, [sp, #20]
   22852:	2302      	movs	r3, #2
   22854:	4803      	ldr	r0, [pc, #12]	; (22864 <dk_set_led+0x58>)
   22856:	aa04      	add	r2, sp, #16
   22858:	9304      	str	r3, [sp, #16]
   2285a:	f012 fadb 	bl	34e14 <z_log_msg_static_create.constprop.0>
   2285e:	e7e6      	b.n	2282e <dk_set_led+0x22>
   22860:	0003ee6c 	.word	0x0003ee6c
   22864:	00037948 	.word	0x00037948
   22868:	00038670 	.word	0x00038670
   2286c:	0003ed83 	.word	0x0003ed83

00022870 <at_monitor_dispatch.part.0>:

/* Dispatch AT notifications immediately, or schedules a workqueue task to do that.
 * Keep this function public so that it can be called by tests.
 * This function is called from an ISR.
 */
void at_monitor_dispatch(const char *notif)
   22870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22874:	4604      	mov	r4, r0
	struct at_notif_fifo *at_notif;
	size_t sz_needed;

	__ASSERT_NO_MSG(notif != NULL);

	monitored = false;
   22876:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   22878:	4d2b      	ldr	r5, [pc, #172]	; (22928 <at_monitor_dispatch.part.0+0xb8>)
   2287a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 2292c <at_monitor_dispatch.part.0+0xbc>
void at_monitor_dispatch(const char *notif)
   2287e:	af00      	add	r7, sp, #0
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   22880:	454d      	cmp	r5, r9
   22882:	d921      	bls.n	228c8 <at_monitor_dispatch.part.0+0x58>
   22884:	492a      	ldr	r1, [pc, #168]	; (22930 <at_monitor_dispatch.part.0+0xc0>)
   22886:	2339      	movs	r3, #57	; 0x39
   22888:	4a2a      	ldr	r2, [pc, #168]	; (22934 <at_monitor_dispatch.part.0+0xc4>)
   2288a:	482b      	ldr	r0, [pc, #172]	; (22938 <at_monitor_dispatch.part.0+0xc8>)
   2288c:	f00c fd9a 	bl	2f3c4 <assert_print>
   22890:	482a      	ldr	r0, [pc, #168]	; (2293c <at_monitor_dispatch.part.0+0xcc>)
   22892:	f00c fd97 	bl	2f3c4 <assert_print>
   22896:	2139      	movs	r1, #57	; 0x39
   22898:	4826      	ldr	r0, [pc, #152]	; (22934 <at_monitor_dispatch.part.0+0xc4>)
   2289a:	f00c fd8c 	bl	2f3b6 <assert_post_action>
	return mon->flags.paused;
   2289e:	f895 8008 	ldrb.w	r8, [r5, #8]
		if (!is_paused(e) && has_match(e, notif)) {
   228a2:	f018 0f01 	tst.w	r8, #1
   228a6:	d10b      	bne.n	228c0 <at_monitor_dispatch.part.0+0x50>
   228a8:	6829      	ldr	r1, [r5, #0]
	return (mon->filter == ANY || strstr(notif, mon->filter));
   228aa:	b119      	cbz	r1, 228b4 <at_monitor_dispatch.part.0+0x44>
   228ac:	4620      	mov	r0, r4
   228ae:	f014 f800 	bl	368b2 <strstr>
   228b2:	b128      	cbz	r0, 228c0 <at_monitor_dispatch.part.0+0x50>
			if (is_direct(e)) {
   228b4:	f018 0f02 	tst.w	r8, #2
   228b8:	d004      	beq.n	228c4 <at_monitor_dispatch.part.0+0x54>
				LOG_DBG("Dispatching to %p (ISR)", e->handler);
				e->handler(notif);
   228ba:	4620      	mov	r0, r4
   228bc:	686b      	ldr	r3, [r5, #4]
   228be:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   228c0:	350c      	adds	r5, #12
   228c2:	e7dd      	b.n	22880 <at_monitor_dispatch.part.0+0x10>
			} else {
				/* Copy and schedule work-queue task */
				monitored = true;
   228c4:	2601      	movs	r6, #1
   228c6:	e7fb      	b.n	228c0 <at_monitor_dispatch.part.0+0x50>
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   228c8:	d3e9      	bcc.n	2289e <at_monitor_dispatch.part.0+0x2e>
			}
		}
	}

	if (!monitored) {
   228ca:	b1ee      	cbz	r6, 22908 <at_monitor_dispatch.part.0+0x98>
		/* Only copy monitored notifications to save heap */
		return;
	}

	sz_needed = sizeof(struct at_notif_fifo) + strlen(notif) + sizeof(char);
   228cc:	4620      	mov	r0, r4
   228ce:	f7e6 fca8 	bl	9222 <strlen>

	at_notif = k_heap_alloc(&at_monitor_heap, sz_needed, K_NO_WAIT);
   228d2:	2200      	movs	r2, #0
   228d4:	1d41      	adds	r1, r0, #5
   228d6:	2300      	movs	r3, #0
   228d8:	4819      	ldr	r0, [pc, #100]	; (22940 <at_monitor_dispatch.part.0+0xd0>)
   228da:	f013 fbd4 	bl	36086 <k_heap_alloc>
	if (!at_notif) {
   228de:	4605      	mov	r5, r0
   228e0:	b9a8      	cbnz	r0, 2290e <at_monitor_dispatch.part.0+0x9e>
		LOG_WRN("No heap space for incoming notification: %s",
   228e2:	466e      	mov	r6, sp
   228e4:	b088      	sub	sp, #32
   228e6:	466a      	mov	r2, sp
   228e8:	4b16      	ldr	r3, [pc, #88]	; (22944 <at_monitor_dispatch.part.0+0xd4>)
   228ea:	e9c2 3405 	strd	r3, r4, [r2, #20]
   228ee:	f44f 7300 	mov.w	r3, #512	; 0x200
   228f2:	8393      	strh	r3, [r2, #28]
   228f4:	4b14      	ldr	r3, [pc, #80]	; (22948 <at_monitor_dispatch.part.0+0xd8>)
   228f6:	f842 3f10 	str.w	r3, [r2, #16]!
   228fa:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
   228fe:	4603      	mov	r3, r0
   22900:	4812      	ldr	r0, [pc, #72]	; (2294c <at_monitor_dispatch.part.0+0xdc>)
   22902:	f7ed fc97 	bl	10234 <z_impl_z_log_msg_static_create>
   22906:	46b5      	mov	sp, r6

	strcpy(at_notif->data, notif);

	k_fifo_put(&at_monitor_fifo, at_notif);
	k_work_submit(&at_monitor_work);
}
   22908:	46bd      	mov	sp, r7
   2290a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   2290e:	4621      	mov	r1, r4
   22910:	3004      	adds	r0, #4
   22912:	f013 ff95 	bl	36840 <strcpy>
	k_fifo_put(&at_monitor_fifo, at_notif);
   22916:	4629      	mov	r1, r5
   22918:	480d      	ldr	r0, [pc, #52]	; (22950 <at_monitor_dispatch.part.0+0xe0>)
   2291a:	f013 fc10 	bl	3613e <k_queue_append>
	k_work_submit(&at_monitor_work);
   2291e:	480d      	ldr	r0, [pc, #52]	; (22954 <at_monitor_dispatch.part.0+0xe4>)
   22920:	f007 fa30 	bl	29d84 <k_work_submit>
   22924:	e7f0      	b.n	22908 <at_monitor_dispatch.part.0+0x98>
   22926:	bf00      	nop
   22928:	2000cce0 	.word	0x2000cce0
   2292c:	2000cd4c 	.word	0x2000cd4c
   22930:	0003eec7 	.word	0x0003eec7
   22934:	0003ee9b 	.word	0x0003ee9b
   22938:	00039995 	.word	0x00039995
   2293c:	0003a18c 	.word	0x0003a18c
   22940:	2000ce20 	.word	0x2000ce20
   22944:	0003eee7 	.word	0x0003eee7
   22948:	01000003 	.word	0x01000003
   2294c:	000378a8 	.word	0x000378a8
   22950:	2000cf88 	.word	0x2000cf88
   22954:	2000c9e8 	.word	0x2000c9e8

00022958 <at_monitor_dispatch>:
{
   22958:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(notif != NULL);
   2295a:	b948      	cbnz	r0, 22970 <at_monitor_dispatch+0x18>
   2295c:	4906      	ldr	r1, [pc, #24]	; (22978 <at_monitor_dispatch+0x20>)
   2295e:	4807      	ldr	r0, [pc, #28]	; (2297c <at_monitor_dispatch+0x24>)
   22960:	2336      	movs	r3, #54	; 0x36
   22962:	4a07      	ldr	r2, [pc, #28]	; (22980 <at_monitor_dispatch+0x28>)
   22964:	f00c fd2e 	bl	2f3c4 <assert_print>
   22968:	2136      	movs	r1, #54	; 0x36
   2296a:	4805      	ldr	r0, [pc, #20]	; (22980 <at_monitor_dispatch+0x28>)
   2296c:	f00c fd23 	bl	2f3b6 <assert_post_action>
}
   22970:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   22974:	f7ff bf7c 	b.w	22870 <at_monitor_dispatch.part.0>
   22978:	0003ef13 	.word	0x0003ef13
   2297c:	00039995 	.word	0x00039995
   22980:	0003ee9b 	.word	0x0003ee9b

00022984 <at_monitor_sys_init>:
		k_heap_free(&at_monitor_heap, at_notif);
	}
}

static int at_monitor_sys_init(void)
{
   22984:	b598      	push	{r3, r4, r7, lr}
	int err;

	err = nrf_modem_at_notif_handler_set(at_monitor_dispatch);
   22986:	480c      	ldr	r0, [pc, #48]	; (229b8 <at_monitor_sys_init+0x34>)
{
   22988:	af00      	add	r7, sp, #0
	err = nrf_modem_at_notif_handler_set(at_monitor_dispatch);
   2298a:	f004 fbf7 	bl	2717c <nrf_modem_at_notif_handler_set>
	if (err) {
   2298e:	b178      	cbz	r0, 229b0 <at_monitor_sys_init+0x2c>
		LOG_ERR("Failed to hook the dispatch function, err %d", err);
   22990:	466c      	mov	r4, sp
   22992:	b088      	sub	sp, #32
   22994:	466a      	mov	r2, sp
   22996:	4b09      	ldr	r3, [pc, #36]	; (229bc <at_monitor_sys_init+0x38>)
   22998:	e9c2 3005 	strd	r3, r0, [r2, #20]
   2299c:	2303      	movs	r3, #3
   2299e:	f842 3f10 	str.w	r3, [r2, #16]!
   229a2:	2300      	movs	r3, #0
   229a4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   229a8:	4805      	ldr	r0, [pc, #20]	; (229c0 <at_monitor_sys_init+0x3c>)
   229aa:	f7ed fc43 	bl	10234 <z_impl_z_log_msg_static_create>
   229ae:	46a5      	mov	sp, r4
	}

	return 0;
}
   229b0:	2000      	movs	r0, #0
   229b2:	46bd      	mov	sp, r7
   229b4:	bd98      	pop	{r3, r4, r7, pc}
   229b6:	bf00      	nop
   229b8:	00022959 	.word	0x00022959
   229bc:	0003ef28 	.word	0x0003ef28
   229c0:	000378a8 	.word	0x000378a8

000229c4 <at_monitor_task>:
{
   229c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_queue_get(queue, timeout);
   229c8:	4e1a      	ldr	r6, [pc, #104]	; (22a34 <at_monitor_task+0x70>)
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   229ca:	4f1b      	ldr	r7, [pc, #108]	; (22a38 <at_monitor_task+0x74>)
		k_heap_free(&at_monitor_heap, at_notif);
   229cc:	f8df 806c 	ldr.w	r8, [pc, #108]	; 22a3c <at_monitor_task+0x78>
   229d0:	2200      	movs	r2, #0
   229d2:	2300      	movs	r3, #0
   229d4:	4630      	mov	r0, r6
   229d6:	f006 fdfd 	bl	295d4 <z_impl_k_queue_get>
	while ((at_notif = k_fifo_get(&at_monitor_fifo, K_NO_WAIT))) {
   229da:	4605      	mov	r5, r0
   229dc:	b9f8      	cbnz	r0, 22a1e <at_monitor_task+0x5a>
}
   229de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return mon->flags.paused;
   229e2:	7a23      	ldrb	r3, [r4, #8]
			if (!is_paused(e) && !is_direct(e) && has_match(e, at_notif->data)) {
   229e4:	07da      	lsls	r2, r3, #31
   229e6:	d40a      	bmi.n	229fe <at_monitor_task+0x3a>
   229e8:	079b      	lsls	r3, r3, #30
   229ea:	d408      	bmi.n	229fe <at_monitor_task+0x3a>
   229ec:	6821      	ldr	r1, [r4, #0]
	return (mon->filter == ANY || strstr(notif, mon->filter));
   229ee:	b119      	cbz	r1, 229f8 <at_monitor_task+0x34>
   229f0:	4648      	mov	r0, r9
   229f2:	f013 ff5e 	bl	368b2 <strstr>
   229f6:	b110      	cbz	r0, 229fe <at_monitor_task+0x3a>
				e->handler(at_notif->data);
   229f8:	4648      	mov	r0, r9
   229fa:	6863      	ldr	r3, [r4, #4]
   229fc:	4798      	blx	r3
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   229fe:	340c      	adds	r4, #12
   22a00:	42bc      	cmp	r4, r7
   22a02:	d910      	bls.n	22a26 <at_monitor_task+0x62>
   22a04:	490e      	ldr	r1, [pc, #56]	; (22a40 <at_monitor_task+0x7c>)
   22a06:	2360      	movs	r3, #96	; 0x60
   22a08:	4a0e      	ldr	r2, [pc, #56]	; (22a44 <at_monitor_task+0x80>)
   22a0a:	480f      	ldr	r0, [pc, #60]	; (22a48 <at_monitor_task+0x84>)
   22a0c:	f00c fcda 	bl	2f3c4 <assert_print>
   22a10:	480e      	ldr	r0, [pc, #56]	; (22a4c <at_monitor_task+0x88>)
   22a12:	f00c fcd7 	bl	2f3c4 <assert_print>
   22a16:	2160      	movs	r1, #96	; 0x60
   22a18:	480a      	ldr	r0, [pc, #40]	; (22a44 <at_monitor_task+0x80>)
   22a1a:	f00c fccc 	bl	2f3b6 <assert_post_action>
   22a1e:	4c0c      	ldr	r4, [pc, #48]	; (22a50 <at_monitor_task+0x8c>)
			if (!is_paused(e) && !is_direct(e) && has_match(e, at_notif->data)) {
   22a20:	f105 0904 	add.w	r9, r5, #4
   22a24:	e7ec      	b.n	22a00 <at_monitor_task+0x3c>
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   22a26:	d3dc      	bcc.n	229e2 <at_monitor_task+0x1e>
		k_heap_free(&at_monitor_heap, at_notif);
   22a28:	4629      	mov	r1, r5
   22a2a:	4640      	mov	r0, r8
   22a2c:	f006 f920 	bl	28c70 <k_heap_free>
   22a30:	e7ce      	b.n	229d0 <at_monitor_task+0xc>
   22a32:	bf00      	nop
   22a34:	2000cf88 	.word	0x2000cf88
   22a38:	2000cd4c 	.word	0x2000cd4c
   22a3c:	2000ce20 	.word	0x2000ce20
   22a40:	0003eec7 	.word	0x0003eec7
   22a44:	0003ee9b 	.word	0x0003ee9b
   22a48:	00039995 	.word	0x00039995
   22a4c:	0003a18c 	.word	0x0003a18c
   22a50:	2000cce0 	.word	0x2000cce0

00022a54 <z_impl_uart_irq_rx_enable.constprop.0>:
	const struct uart_driver_api *api =
   22a54:	4802      	ldr	r0, [pc, #8]	; (22a60 <z_impl_uart_irq_rx_enable.constprop.0+0xc>)
	if (api->irq_rx_enable != NULL) {
   22a56:	6883      	ldr	r3, [r0, #8]
   22a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   22a5a:	b103      	cbz	r3, 22a5e <z_impl_uart_irq_rx_enable.constprop.0+0xa>
		api->irq_rx_enable(dev);
   22a5c:	4718      	bx	r3
}
   22a5e:	4770      	bx	lr
   22a60:	0003757c 	.word	0x0003757c

00022a64 <write_uart_string>:
static char at_buf[AT_BUF_SIZE]; /* AT command and modem response buffer */
static struct k_work_q at_host_work_q;
static struct k_work cmd_send_work;

static inline void write_uart_string(const char *str)
{
   22a64:	b538      	push	{r3, r4, r5, lr}
	api->poll_out(dev, out_char);
   22a66:	4d05      	ldr	r5, [pc, #20]	; (22a7c <write_uart_string+0x18>)
   22a68:	1e44      	subs	r4, r0, #1
	/* Send characters until, but not including, null */
	for (size_t i = 0; str[i]; i++) {
   22a6a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   22a6e:	b901      	cbnz	r1, 22a72 <write_uart_string+0xe>
		uart_poll_out(uart_dev, str[i]);
	}
}
   22a70:	bd38      	pop	{r3, r4, r5, pc}
   22a72:	68ab      	ldr	r3, [r5, #8]
   22a74:	4801      	ldr	r0, [pc, #4]	; (22a7c <write_uart_string+0x18>)
   22a76:	69db      	ldr	r3, [r3, #28]
   22a78:	4798      	blx	r3
	for (size_t i = 0; str[i]; i++) {
   22a7a:	e7f6      	b.n	22a6a <write_uart_string+0x6>
   22a7c:	0003757c 	.word	0x0003757c

00022a80 <cmd_send>:
	/* Forward the data over UART */
	write_uart_string(response);
}

static void cmd_send(struct k_work *work)
{
   22a80:	b598      	push	{r3, r4, r7, lr}
	ARG_UNUSED(work);

    /* Sending through string format rather than raw buffer in case
     * the buffer contains characters that need to be escaped
     */
	err = nrf_modem_at_cmd(at_buf, sizeof(at_buf), "%s", at_buf);
   22a82:	4b12      	ldr	r3, [pc, #72]	; (22acc <cmd_send+0x4c>)
   22a84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   22a88:	4618      	mov	r0, r3
   22a8a:	4a11      	ldr	r2, [pc, #68]	; (22ad0 <cmd_send+0x50>)
{
   22a8c:	af00      	add	r7, sp, #0
	err = nrf_modem_at_cmd(at_buf, sizeof(at_buf), "%s", at_buf);
   22a8e:	f004 fbc7 	bl	27220 <nrf_modem_at_cmd>
	if (err < 0) {
   22a92:	2800      	cmp	r0, #0
   22a94:	da0f      	bge.n	22ab6 <cmd_send+0x36>
		LOG_ERR("Error while processing AT command: %d", err);
   22a96:	466c      	mov	r4, sp
   22a98:	b088      	sub	sp, #32
   22a9a:	466a      	mov	r2, sp
   22a9c:	4b0d      	ldr	r3, [pc, #52]	; (22ad4 <cmd_send+0x54>)
   22a9e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   22aa2:	2303      	movs	r3, #3
   22aa4:	f842 3f10 	str.w	r3, [r2, #16]!
   22aa8:	2300      	movs	r3, #0
   22aaa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   22aae:	480a      	ldr	r0, [pc, #40]	; (22ad8 <cmd_send+0x58>)
   22ab0:	f7ed fbc0 	bl	10234 <z_impl_z_log_msg_static_create>
   22ab4:	46a5      	mov	sp, r4
	}

	write_uart_string(at_buf);
   22ab6:	4805      	ldr	r0, [pc, #20]	; (22acc <cmd_send+0x4c>)
   22ab8:	f7ff ffd4 	bl	22a64 <write_uart_string>

	at_buf_busy = false;
   22abc:	2200      	movs	r2, #0
   22abe:	4b07      	ldr	r3, [pc, #28]	; (22adc <cmd_send+0x5c>)
   22ac0:	701a      	strb	r2, [r3, #0]
	z_impl_uart_irq_rx_enable(dev);
   22ac2:	f7ff ffc7 	bl	22a54 <z_impl_uart_irq_rx_enable.constprop.0>
	uart_irq_rx_enable(uart_dev);
}
   22ac6:	46bd      	mov	sp, r7
   22ac8:	bd98      	pop	{r3, r4, r7, pc}
   22aca:	bf00      	nop
   22acc:	2000f6be 	.word	0x2000f6be
   22ad0:	0003f578 	.word	0x0003f578
   22ad4:	0003ef60 	.word	0x0003ef60
   22ad8:	000378a0 	.word	0x000378a0
   22adc:	200106be 	.word	0x200106be

00022ae0 <isr>:
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
	}
}

static void isr(const struct device *dev, void *user_data)
{
   22ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22ae4:	b088      	sub	sp, #32
   22ae6:	4604      	mov	r4, r0
   22ae8:	af00      	add	r7, sp, #0
	if (api->irq_update == NULL) {
   22aea:	6883      	ldr	r3, [r0, #8]
   22aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   22aee:	b103      	cbz	r3, 22af2 <isr+0x12>
	return api->irq_update(dev);
   22af0:	4798      	blx	r3
	if (api->irq_rx_ready == NULL) {
   22af2:	68a3      	ldr	r3, [r4, #8]
   22af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   22af6:	b9b3      	cbnz	r3, 22b26 <isr+0x46>

	/*
	 * Check that we are not sending data (buffer must be preserved then),
	 * and that a new character is available before handling each character
	 */
	while ((!at_buf_busy) &&
   22af8:	4e5a      	ldr	r6, [pc, #360]	; (22c64 <isr+0x184>)
		if (at_cmd_len > 0) {
   22afa:	4d5b      	ldr	r5, [pc, #364]	; (22c68 <isr+0x188>)
	while ((!at_buf_busy) &&
   22afc:	7833      	ldrb	r3, [r6, #0]
   22afe:	b9b3      	cbnz	r3, 22b2e <isr+0x4e>
	if (api->fifo_read == NULL) {
   22b00:	68a3      	ldr	r3, [r4, #8]
   22b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   22b04:	b123      	cbz	r3, 22b10 <isr+0x30>
	return api->fifo_read(dev, rx_data, size);
   22b06:	2201      	movs	r2, #1
   22b08:	4620      	mov	r0, r4
   22b0a:	1df9      	adds	r1, r7, #7
   22b0c:	4798      	blx	r3
   22b0e:	b170      	cbz	r0, 22b2e <isr+0x4e>
	       (uart_fifo_read(dev, &character, 1))) {
		uart_rx_handler(character);
   22b10:	79fb      	ldrb	r3, [r7, #7]
	switch (character) {
   22b12:	2b08      	cmp	r3, #8
   22b14:	d001      	beq.n	22b1a <isr+0x3a>
   22b16:	2b7f      	cmp	r3, #127	; 0x7f
   22b18:	d10d      	bne.n	22b36 <isr+0x56>
		if (at_cmd_len > 0) {
   22b1a:	682b      	ldr	r3, [r5, #0]
   22b1c:	2b00      	cmp	r3, #0
   22b1e:	d0ed      	beq.n	22afc <isr+0x1c>
			at_cmd_len--;
   22b20:	3b01      	subs	r3, #1
   22b22:	602b      	str	r3, [r5, #0]
   22b24:	e7ea      	b.n	22afc <isr+0x1c>
	return api->irq_rx_ready(dev);
   22b26:	4620      	mov	r0, r4
   22b28:	4798      	blx	r3
	if (!uart_irq_rx_ready(dev)) {
   22b2a:	2800      	cmp	r0, #0
   22b2c:	d1e4      	bne.n	22af8 <isr+0x18>
	}
}
   22b2e:	3720      	adds	r7, #32
   22b30:	46bd      	mov	sp, r7
   22b32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!inside_quotes) {
   22b36:	484d      	ldr	r0, [pc, #308]	; (22c6c <isr+0x18c>)
   22b38:	7802      	ldrb	r2, [r0, #0]
   22b3a:	2a00      	cmp	r2, #0
   22b3c:	d15e      	bne.n	22bfc <isr+0x11c>
		switch (character) {
   22b3e:	2b0a      	cmp	r3, #10
   22b40:	d027      	beq.n	22b92 <isr+0xb2>
   22b42:	2b0d      	cmp	r3, #13
   22b44:	d010      	beq.n	22b68 <isr+0x88>
   22b46:	2b00      	cmp	r3, #0
   22b48:	d158      	bne.n	22bfc <isr+0x11c>
			if (term_mode == MODE_NULL_TERM) {
   22b4a:	4a49      	ldr	r2, [pc, #292]	; (22c70 <isr+0x190>)
   22b4c:	7812      	ldrb	r2, [r2, #0]
   22b4e:	b17a      	cbz	r2, 22b70 <isr+0x90>
			LOG_WRN("Ignored null; would terminate string early.");
   22b50:	4a48      	ldr	r2, [pc, #288]	; (22c74 <isr+0x194>)
   22b52:	61fa      	str	r2, [r7, #28]
   22b54:	2202      	movs	r2, #2
   22b56:	61ba      	str	r2, [r7, #24]
   22b58:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   22b5c:	4846      	ldr	r0, [pc, #280]	; (22c78 <isr+0x198>)
   22b5e:	f107 0218 	add.w	r2, r7, #24
   22b62:	f7ed fb67 	bl	10234 <z_impl_z_log_msg_static_create>
			return;
   22b66:	e7c9      	b.n	22afc <isr+0x1c>
			if (term_mode == MODE_CR) {
   22b68:	4a41      	ldr	r2, [pc, #260]	; (22c70 <isr+0x190>)
   22b6a:	7812      	ldrb	r2, [r2, #0]
   22b6c:	2a01      	cmp	r2, #1
   22b6e:	d139      	bne.n	22be4 <isr+0x104>
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   22b70:	2200      	movs	r2, #0
   22b72:	493d      	ldr	r1, [pc, #244]	; (22c68 <isr+0x188>)
   22b74:	4b41      	ldr	r3, [pc, #260]	; (22c7c <isr+0x19c>)
   22b76:	f8d1 c000 	ldr.w	ip, [r1]
	at_cmd_len = 0;
   22b7a:	600a      	str	r2, [r1, #0]
   22b7c:	4619      	mov	r1, r3
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   22b7e:	f803 200c 	strb.w	r2, [r3, ip]
	inside_quotes = false;
   22b82:	7002      	strb	r2, [r0, #0]
		if (*c > ' ') {
   22b84:	f813 2b01 	ldrb.w	r2, [r3], #1
   22b88:	2a20      	cmp	r2, #32
   22b8a:	d85b      	bhi.n	22c44 <isr+0x164>
		} else if (*c == '\0') {
   22b8c:	2a00      	cmp	r2, #0
   22b8e:	d1f9      	bne.n	22b84 <isr+0xa4>
   22b90:	e7b4      	b.n	22afc <isr+0x1c>
			if (term_mode == MODE_LF) {
   22b92:	4a37      	ldr	r2, [pc, #220]	; (22c70 <isr+0x190>)
   22b94:	f892 c000 	ldrb.w	ip, [r2]
   22b98:	f1bc 0f02 	cmp.w	ip, #2
   22b9c:	d0e8      	beq.n	22b70 <isr+0x90>
		if (at_cmd_len > 0) {
   22b9e:	4932      	ldr	r1, [pc, #200]	; (22c68 <isr+0x188>)
			if (term_mode == MODE_CR_LF &&
   22ba0:	f1bc 0f03 	cmp.w	ip, #3
		if (at_cmd_len > 0) {
   22ba4:	680a      	ldr	r2, [r1, #0]
			if (term_mode == MODE_CR_LF &&
   22ba6:	d116      	bne.n	22bd6 <isr+0xf6>
   22ba8:	f8df c0d0 	ldr.w	ip, [pc, #208]	; 22c7c <isr+0x19c>
   22bac:	b172      	cbz	r2, 22bcc <isr+0xec>
			    at_buf[at_cmd_len - 1] == '\r') {
   22bae:	eb0c 0e02 	add.w	lr, ip, r2
			    at_cmd_len > 0 &&
   22bb2:	f81e ec01 	ldrb.w	lr, [lr, #-1]
   22bb6:	f1be 0f0d 	cmp.w	lr, #13
   22bba:	d0d9      	beq.n	22b70 <isr+0x90>
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
   22bbc:	1c50      	adds	r0, r2, #1
   22bbe:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   22bc2:	d222      	bcs.n	22c0a <isr+0x12a>
	at_buf[at_cmd_len] = character;
   22bc4:	f80c 3002 	strb.w	r3, [ip, r2]
	at_cmd_len++;
   22bc8:	6008      	str	r0, [r1, #0]
	if (character == '"') {
   22bca:	e797      	b.n	22afc <isr+0x1c>
	at_buf[at_cmd_len] = character;
   22bcc:	f88c 3000 	strb.w	r3, [ip]
	at_cmd_len++;
   22bd0:	2301      	movs	r3, #1
   22bd2:	600b      	str	r3, [r1, #0]
	if (character == '"') {
   22bd4:	e792      	b.n	22afc <isr+0x1c>
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
   22bd6:	1c50      	adds	r0, r2, #1
   22bd8:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   22bdc:	d215      	bcs.n	22c0a <isr+0x12a>
	at_buf[at_cmd_len] = character;
   22bde:	f8df c09c 	ldr.w	ip, [pc, #156]	; 22c7c <isr+0x19c>
   22be2:	e7ef      	b.n	22bc4 <isr+0xe4>
		if (at_cmd_len > 0) {
   22be4:	4a20      	ldr	r2, [pc, #128]	; (22c68 <isr+0x188>)
   22be6:	6810      	ldr	r0, [r2, #0]
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
   22be8:	1c41      	adds	r1, r0, #1
   22bea:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
   22bee:	d20c      	bcs.n	22c0a <isr+0x12a>
	at_buf[at_cmd_len] = character;
   22bf0:	f8df c088 	ldr.w	ip, [pc, #136]	; 22c7c <isr+0x19c>
	at_cmd_len++;
   22bf4:	6011      	str	r1, [r2, #0]
	at_buf[at_cmd_len] = character;
   22bf6:	f80c 3000 	strb.w	r3, [ip, r0]
	if (character == '"') {
   22bfa:	e77f      	b.n	22afc <isr+0x1c>
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
   22bfc:	f8d5 c000 	ldr.w	ip, [r5]
   22c00:	f10c 0101 	add.w	r1, ip, #1
   22c04:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
   22c08:	d310      	bcc.n	22c2c <isr+0x14c>
		LOG_ERR("Buffer overflow, dropping '%c'\n", character);
   22c0a:	46e8      	mov	r8, sp
   22c0c:	b088      	sub	sp, #32
   22c0e:	466a      	mov	r2, sp
   22c10:	491b      	ldr	r1, [pc, #108]	; (22c80 <isr+0x1a0>)
	switch (character) {
   22c12:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Buffer overflow, dropping '%c'\n", character);
   22c16:	2303      	movs	r3, #3
   22c18:	f842 3f10 	str.w	r3, [r2, #16]!
   22c1c:	2300      	movs	r3, #0
   22c1e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   22c22:	4815      	ldr	r0, [pc, #84]	; (22c78 <isr+0x198>)
   22c24:	f7ed fb06 	bl	10234 <z_impl_z_log_msg_static_create>
   22c28:	46c5      	mov	sp, r8
		return;
   22c2a:	e767      	b.n	22afc <isr+0x1c>
	at_buf[at_cmd_len] = character;
   22c2c:	f8df e04c 	ldr.w	lr, [pc, #76]	; 22c7c <isr+0x19c>
	if (character == '"') {
   22c30:	2b22      	cmp	r3, #34	; 0x22
	at_buf[at_cmd_len] = character;
   22c32:	f80e 300c 	strb.w	r3, [lr, ip]
	at_cmd_len++;
   22c36:	6029      	str	r1, [r5, #0]
	if (character == '"') {
   22c38:	f47f af60 	bne.w	22afc <isr+0x1c>
	if (!inside_quotes) {
   22c3c:	f082 0201 	eor.w	r2, r2, #1
		inside_quotes = !inside_quotes;
   22c40:	7002      	strb	r2, [r0, #0]
   22c42:	e75b      	b.n	22afc <isr+0x1c>
	if (at_buf[0]) {
   22c44:	780b      	ldrb	r3, [r1, #0]
   22c46:	2b00      	cmp	r3, #0
   22c48:	f43f af58 	beq.w	22afc <isr+0x1c>
	const struct uart_driver_api *api =
   22c4c:	480d      	ldr	r0, [pc, #52]	; (22c84 <isr+0x1a4>)
	if (api->irq_rx_disable != NULL) {
   22c4e:	6883      	ldr	r3, [r0, #8]
   22c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   22c52:	b103      	cbz	r3, 22c56 <isr+0x176>
		api->irq_rx_disable(dev);
   22c54:	4798      	blx	r3
		at_buf_busy = true;
   22c56:	2301      	movs	r3, #1
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
   22c58:	490b      	ldr	r1, [pc, #44]	; (22c88 <isr+0x1a8>)
   22c5a:	480c      	ldr	r0, [pc, #48]	; (22c8c <isr+0x1ac>)
		at_buf_busy = true;
   22c5c:	7033      	strb	r3, [r6, #0]
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
   22c5e:	f013 faeb 	bl	36238 <k_work_submit_to_queue>
   22c62:	e74b      	b.n	22afc <isr+0x1c>
   22c64:	200106be 	.word	0x200106be
   22c68:	2000eac4 	.word	0x2000eac4
   22c6c:	2000f6bd 	.word	0x2000f6bd
   22c70:	200106bf 	.word	0x200106bf
   22c74:	0003ef86 	.word	0x0003ef86
   22c78:	000378a0 	.word	0x000378a0
   22c7c:	2000f6be 	.word	0x2000f6be
   22c80:	0003efb2 	.word	0x0003efb2
   22c84:	0003757c 	.word	0x0003757c
   22c88:	2000eac8 	.word	0x2000eac8
   22c8c:	2000df20 	.word	0x2000df20

00022c90 <at_host_init>:
	enum term_modes mode = CONFIG_AT_HOST_TERMINATION;


	/* Choosing the termination mode */
	if (mode < MODE_COUNT) {
		term_mode = mode;
   22c90:	2201      	movs	r2, #1
{
   22c92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		term_mode = mode;
   22c96:	4b50      	ldr	r3, [pc, #320]	; (22dd8 <at_host_init+0x148>)
{
   22c98:	b088      	sub	sp, #32
   22c9a:	af02      	add	r7, sp, #8
		term_mode = mode;
   22c9c:	701a      	strb	r2, [r3, #0]
   22c9e:	484f      	ldr	r0, [pc, #316]	; (22ddc <at_host_init+0x14c>)
   22ca0:	f013 f9da 	bl	36058 <z_device_is_ready>
	if (!device_is_ready(uart_dev)) {
   22ca4:	4603      	mov	r3, r0
   22ca6:	bb18      	cbnz	r0, 22cf0 <at_host_init+0x60>
		LOG_ERR("UART device not ready");
   22ca8:	4a4d      	ldr	r2, [pc, #308]	; (22de0 <at_host_init+0x150>)
   22caa:	617a      	str	r2, [r7, #20]
   22cac:	2202      	movs	r2, #2
   22cae:	613a      	str	r2, [r7, #16]
   22cb0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   22cb4:	484b      	ldr	r0, [pc, #300]	; (22de4 <at_host_init+0x154>)
   22cb6:	f107 0210 	add.w	r2, r7, #16
   22cba:	f7ed fabb 	bl	10234 <z_impl_z_log_msg_static_create>
		return -ENODEV;
   22cbe:	f06f 0312 	mvn.w	r3, #18
	}

	/* Initialize the UART module */
	err = at_uart_init(uart_dev);
	if (err) {
		LOG_ERR("UART could not be initialized: %d", err);
   22cc2:	466c      	mov	r4, sp
   22cc4:	b088      	sub	sp, #32
   22cc6:	aa02      	add	r2, sp, #8
   22cc8:	4947      	ldr	r1, [pc, #284]	; (22de8 <at_host_init+0x158>)
   22cca:	e9c2 1305 	strd	r1, r3, [r2, #20]
   22cce:	2303      	movs	r3, #3
   22cd0:	f842 3f10 	str.w	r3, [r2, #16]!
   22cd4:	2300      	movs	r3, #0
   22cd6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   22cda:	4842      	ldr	r0, [pc, #264]	; (22de4 <at_host_init+0x154>)
   22cdc:	f7ed faaa 	bl	10234 <z_impl_z_log_msg_static_create>
		return -EFAULT;
   22ce0:	f06f 060d 	mvn.w	r6, #13
   22ce4:	46a5      	mov	sp, r4
			   K_THREAD_STACK_SIZEOF(at_host_stack_area),
			   CONFIG_AT_HOST_THREAD_PRIO, NULL);
	uart_irq_rx_enable(uart_dev);

	return err;
}
   22ce6:	4630      	mov	r0, r6
   22ce8:	3718      	adds	r7, #24
   22cea:	46bd      	mov	sp, r7
   22cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return z_impl_k_uptime_ticks();
   22cf0:	f013 faec 	bl	362cc <z_impl_k_uptime_ticks>
   22cf4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   22cf8:	fba0 0302 	umull	r0, r3, r0, r2
   22cfc:	fb02 3301 	mla	r3, r2, r1, r3
	const struct uart_driver_api *api =
   22d00:	4d36      	ldr	r5, [pc, #216]	; (22ddc <at_host_init+0x14c>)
   22d02:	0bc0      	lsrs	r0, r0, #15
   22d04:	f8d5 8008 	ldr.w	r8, [r5, #8]
			LOG_INF("UART check failed: %d. "
   22d08:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 22dec <at_host_init+0x15c>
   22d0c:	ea40 4443 	orr.w	r4, r0, r3, lsl #17
	if (api->err_check == NULL) {
   22d10:	f8d8 3020 	ldr.w	r3, [r8, #32]
   22d14:	b1bb      	cbz	r3, 22d46 <at_host_init+0xb6>
	return api->err_check(dev);
   22d16:	4628      	mov	r0, r5
   22d18:	4798      	blx	r3
		if (err) {
   22d1a:	4606      	mov	r6, r0
   22d1c:	b9a8      	cbnz	r0, 22d4a <at_host_init+0xba>
	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   22d1e:	f8d8 3060 	ldr.w	r3, [r8, #96]	; 0x60
   22d22:	2b00      	cmp	r3, #0
   22d24:	d152      	bne.n	22dcc <at_host_init+0x13c>
	k_work_init(&cmd_send_work, cmd_send);
   22d26:	4932      	ldr	r1, [pc, #200]	; (22df0 <at_host_init+0x160>)
   22d28:	4832      	ldr	r0, [pc, #200]	; (22df4 <at_host_init+0x164>)
   22d2a:	f006 ff65 	bl	29bf8 <k_work_init>
	k_work_queue_start(&at_host_work_q, at_host_stack_area,
   22d2e:	2300      	movs	r3, #0
   22d30:	f44f 6280 	mov.w	r2, #1024	; 0x400
   22d34:	9300      	str	r3, [sp, #0]
   22d36:	4930      	ldr	r1, [pc, #192]	; (22df8 <at_host_init+0x168>)
   22d38:	230a      	movs	r3, #10
   22d3a:	4830      	ldr	r0, [pc, #192]	; (22dfc <at_host_init+0x16c>)
   22d3c:	f007 f842 	bl	29dc4 <k_work_queue_start>
   22d40:	f7ff fe88 	bl	22a54 <z_impl_uart_irq_rx_enable.constprop.0>
}
   22d44:	e7cf      	b.n	22ce6 <at_host_init+0x56>
		return -ENOSYS;
   22d46:	f06f 0657 	mvn.w	r6, #87	; 0x57
   22d4a:	f013 fabf 	bl	362cc <z_impl_k_uptime_ticks>
   22d4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   22d52:	fba0 0302 	umull	r0, r3, r0, r2
   22d56:	fb02 3101 	mla	r1, r2, r1, r3
   22d5a:	0bc3      	lsrs	r3, r0, #15
   22d5c:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
			if (k_uptime_get_32() - start_time >
   22d60:	1b1b      	subs	r3, r3, r4
   22d62:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   22d66:	d912      	bls.n	22d8e <at_host_init+0xfe>
				LOG_ERR("UART check failed: %d. "
   22d68:	466c      	mov	r4, sp
   22d6a:	b088      	sub	sp, #32
   22d6c:	aa02      	add	r2, sp, #8
   22d6e:	4b24      	ldr	r3, [pc, #144]	; (22e00 <at_host_init+0x170>)
   22d70:	e9c2 3605 	strd	r3, r6, [r2, #20]
   22d74:	2303      	movs	r3, #3
   22d76:	f842 3f10 	str.w	r3, [r2, #16]!
   22d7a:	2300      	movs	r3, #0
   22d7c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   22d80:	4818      	ldr	r0, [pc, #96]	; (22de4 <at_host_init+0x154>)
   22d82:	f7ed fa57 	bl	10234 <z_impl_z_log_msg_static_create>
				return -EIO;
   22d86:	f06f 0304 	mvn.w	r3, #4
   22d8a:	46a5      	mov	sp, r4
	if (err) {
   22d8c:	e799      	b.n	22cc2 <at_host_init+0x32>
			LOG_INF("UART check failed: %d. "
   22d8e:	46ea      	mov	sl, sp
   22d90:	b088      	sub	sp, #32
   22d92:	aa02      	add	r2, sp, #8
   22d94:	2303      	movs	r3, #3
   22d96:	e9c2 9605 	strd	r9, r6, [r2, #20]
   22d9a:	f842 3f10 	str.w	r3, [r2, #16]!
   22d9e:	2300      	movs	r3, #0
   22da0:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
   22da4:	480f      	ldr	r0, [pc, #60]	; (22de4 <at_host_init+0x154>)
   22da6:	f7ed fa45 	bl	10234 <z_impl_z_log_msg_static_create>
   22daa:	46d5      	mov	sp, sl
	if (api->fifo_read == NULL) {
   22dac:	68ae      	ldr	r6, [r5, #8]
   22dae:	6b33      	ldr	r3, [r6, #48]	; 0x30
   22db0:	2b00      	cmp	r3, #0
   22db2:	d0fc      	beq.n	22dae <at_host_init+0x11e>
	return api->fifo_read(dev, rx_data, size);
   22db4:	2201      	movs	r2, #1
   22db6:	4639      	mov	r1, r7
   22db8:	4628      	mov	r0, r5
   22dba:	4798      	blx	r3
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
   22dbc:	2800      	cmp	r0, #0
   22dbe:	d1f6      	bne.n	22dae <at_host_init+0x11e>
	return z_impl_k_sleep(timeout);
   22dc0:	2100      	movs	r1, #0
   22dc2:	f44f 70a4 	mov.w	r0, #328	; 0x148
   22dc6:	f008 fac1 	bl	2b34c <z_impl_k_sleep>
	} while (err);
   22dca:	e7a1      	b.n	22d10 <at_host_init+0x80>
		api->irq_callback_set(dev, cb, user_data);
   22dcc:	4602      	mov	r2, r0
   22dce:	490d      	ldr	r1, [pc, #52]	; (22e04 <at_host_init+0x174>)
   22dd0:	4802      	ldr	r0, [pc, #8]	; (22ddc <at_host_init+0x14c>)
   22dd2:	4798      	blx	r3
	if (err) {
   22dd4:	e7a7      	b.n	22d26 <at_host_init+0x96>
   22dd6:	bf00      	nop
   22dd8:	200106bf 	.word	0x200106bf
   22ddc:	0003757c 	.word	0x0003757c
   22de0:	0003efd2 	.word	0x0003efd2
   22de4:	000378a0 	.word	0x000378a0
   22de8:	0003f053 	.word	0x0003f053
   22dec:	0003f01e 	.word	0x0003f01e
   22df0:	00022a81 	.word	0x00022a81
   22df4:	2000eac8 	.word	0x2000eac8
   22df8:	200120c8 	.word	0x200120c8
   22dfc:	2000df20 	.word	0x2000df20
   22e00:	0003efe8 	.word	0x0003efe8
   22e04:	00022ae1 	.word	0x00022ae1

00022e08 <is_valid_notification_char>:
 * @retval true  If character is valid
 * @retval false If character is not valid
 */
static inline bool is_valid_notification_char(char chr)
{
	chr = toupper((int)chr);
   22e08:	4b09      	ldr	r3, [pc, #36]	; (22e30 <is_valid_notification_char+0x28>)
   22e0a:	5c1b      	ldrb	r3, [r3, r0]
   22e0c:	f003 0303 	and.w	r3, r3, #3
   22e10:	2b02      	cmp	r3, #2
   22e12:	bf08      	it	eq
   22e14:	3820      	subeq	r0, #32
   22e16:	b2c0      	uxtb	r0, r0

	if (((chr >= 'A') && (chr <= 'Z')) || (chr == '_')) {
   22e18:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   22e1c:	2b19      	cmp	r3, #25
   22e1e:	d904      	bls.n	22e2a <is_valid_notification_char+0x22>
   22e20:	f1a0 035f 	sub.w	r3, r0, #95	; 0x5f
   22e24:	4258      	negs	r0, r3
   22e26:	4158      	adcs	r0, r3
   22e28:	4770      	bx	lr
		return true;
   22e2a:	2001      	movs	r0, #1
	}

	return false;
}
   22e2c:	4770      	bx	lr
   22e2e:	bf00      	nop
   22e30:	00041f02 	.word	0x00041f02

00022e34 <is_separator>:
 * @retval true  If character is ':' or ','
 * @retval false In all other cases
 */
static inline bool is_separator(char chr)
{
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   22e34:	f1a0 032c 	sub.w	r3, r0, #44	; 0x2c
   22e38:	b2db      	uxtb	r3, r3
   22e3a:	2b11      	cmp	r3, #17
   22e3c:	bf9d      	ittte	ls
   22e3e:	4803      	ldrls	r0, [pc, #12]	; (22e4c <is_separator+0x18>)
   22e40:	40d8      	lsrls	r0, r3
   22e42:	f000 0001 	andls.w	r0, r0, #1
{
   22e46:	2000      	movhi	r0, #0
	    (chr == AT_CMD_SEPARATOR)) {
		return true;
	}

	return false;
}
   22e48:	4770      	bx	lr
   22e4a:	bf00      	nop
   22e4c:	00024001 	.word	0x00024001

00022e50 <is_result>:

	return retval;
}

static bool is_result(const char *str)
{
   22e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22e52:	4605      	mov	r5, r0
		"ERROR\r\n",
		"+CME ERROR",
		"+CMS ERROR"
	};

	for (size_t i = 0; i < ARRAY_SIZE(toclip); i++) {
   22e54:	2400      	movs	r4, #0
   22e56:	4e09      	ldr	r6, [pc, #36]	; (22e7c <is_result+0x2c>)
		diff = strncmp(str, toclip[i], strlen(toclip[i]));
   22e58:	f856 7b04 	ldr.w	r7, [r6], #4
   22e5c:	4638      	mov	r0, r7
   22e5e:	f7e6 f9e0 	bl	9222 <strlen>
   22e62:	4639      	mov	r1, r7
   22e64:	4602      	mov	r2, r0
   22e66:	4628      	mov	r0, r5
   22e68:	f013 fcf2 	bl	36850 <strncmp>
		if (!diff) {
   22e6c:	b120      	cbz	r0, 22e78 <is_result+0x28>
	for (size_t i = 0; i < ARRAY_SIZE(toclip); i++) {
   22e6e:	3401      	adds	r4, #1
   22e70:	2c04      	cmp	r4, #4
   22e72:	d1f1      	bne.n	22e58 <is_result+0x8>
			return true;
		}
	}

	return false;
   22e74:	2000      	movs	r0, #0
}
   22e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return true;
   22e78:	2001      	movs	r0, #1
   22e7a:	e7fc      	b.n	22e76 <is_result+0x26>
   22e7c:	000386b0 	.word	0x000386b0

00022e80 <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   22e80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   22e84:	6804      	ldr	r4, [r0, #0]
{
   22e86:	b0a3      	sub	sp, #140	; 0x8c
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   22e88:	7823      	ldrb	r3, [r4, #0]
   22e8a:	4680      	mov	r8, r0
   22e8c:	460e      	mov	r6, r1
   22e8e:	4615      	mov	r5, r2
	const char *tmpstr = *str;
   22e90:	9400      	str	r4, [sp, #0]
   22e92:	2b00      	cmp	r3, #0
   22e94:	f000 80cf 	beq.w	23036 <at_parse_process_element+0x1b6>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   22e98:	4b68      	ldr	r3, [pc, #416]	; (2303c <at_parse_process_element+0x1bc>)
   22e9a:	781b      	ldrb	r3, [r3, #0]
   22e9c:	2b06      	cmp	r3, #6
   22e9e:	d113      	bne.n	22ec8 <at_parse_process_element+0x48>
		const char *start_ptr = tmpstr++;

		while (is_valid_notification_char(*tmpstr)) {
   22ea0:	2000      	movs	r0, #0
		const char *start_ptr = tmpstr++;
   22ea2:	1c62      	adds	r2, r4, #1
   22ea4:	9200      	str	r2, [sp, #0]
		while (is_valid_notification_char(*tmpstr)) {
   22ea6:	4611      	mov	r1, r2
   22ea8:	4607      	mov	r7, r0
   22eaa:	f812 0b01 	ldrb.w	r0, [r2], #1
   22eae:	f7ff ffab 	bl	22e08 <is_valid_notification_char>
   22eb2:	2800      	cmp	r0, #0
   22eb4:	d1f7      	bne.n	22ea6 <at_parse_process_element+0x26>
   22eb6:	b107      	cbz	r7, 22eba <at_parse_process_element+0x3a>
   22eb8:	9100      	str	r1, [sp, #0]
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   22eba:	1b0b      	subs	r3, r1, r4

		while (!is_terminated(*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   22ebc:	4622      	mov	r2, r4
   22ebe:	4631      	mov	r1, r6
   22ec0:	4628      	mov	r0, r5
   22ec2:	f012 f82f 	bl	34f24 <at_params_string_put>
   22ec6:	e046      	b.n	22f56 <at_parse_process_element+0xd6>
	} else if (state == COMMAND) {
   22ec8:	3b01      	subs	r3, #1
   22eca:	2b08      	cmp	r3, #8
   22ecc:	d843      	bhi.n	22f56 <at_parse_process_element+0xd6>
   22ece:	e8df f003 	tbb	[pc, r3]
   22ed2:	4964      	.short	0x4964
   22ed4:	420da25a 	.word	0x420da25a
   22ed8:	3f1c      	.short	0x3f1c
   22eda:	05          	.byte	0x05
   22edb:	00          	.byte	0x00
   22edc:	4622      	mov	r2, r4
	if (state == NOTIFICATION) {
   22ede:	2100      	movs	r1, #0
   22ee0:	4613      	mov	r3, r2
   22ee2:	f812 0b01 	ldrb.w	r0, [r2], #1
   22ee6:	b160      	cbz	r0, 22f02 <at_parse_process_element+0x82>
   22ee8:	2101      	movs	r1, #1
   22eea:	e7f9      	b.n	22ee0 <at_parse_process_element+0x60>
   22eec:	4622      	mov	r2, r4
   22eee:	2100      	movs	r1, #0
		while (isxdigit((int)*tmpstr)) {
   22ef0:	4f53      	ldr	r7, [pc, #332]	; (23040 <at_parse_process_element+0x1c0>)
   22ef2:	4613      	mov	r3, r2
   22ef4:	f812 0b01 	ldrb.w	r0, [r2], #1
   22ef8:	5c38      	ldrb	r0, [r7, r0]
   22efa:	f010 0f44 	tst.w	r0, #68	; 0x44
   22efe:	f040 8098 	bne.w	23032 <at_parse_process_element+0x1b2>
   22f02:	b101      	cbz	r1, 22f06 <at_parse_process_element+0x86>
   22f04:	9300      	str	r3, [sp, #0]
		at_params_string_put(list, index, start_ptr,
   22f06:	1b1b      	subs	r3, r3, r4
   22f08:	e7d8      	b.n	22ebc <at_parse_process_element+0x3c>
		skip_command_prefix(&tmpstr);
   22f0a:	4668      	mov	r0, sp
   22f0c:	f011 ffae 	bl	34e6c <skip_command_prefix>
		while (is_valid_command_char(*tmpstr)) {
   22f10:	2200      	movs	r2, #0
   22f12:	9b00      	ldr	r3, [sp, #0]
	if (isalpha((int)chr) || isdigit((int)chr)) {
   22f14:	484a      	ldr	r0, [pc, #296]	; (23040 <at_parse_process_element+0x1c0>)
   22f16:	461f      	mov	r7, r3
   22f18:	f813 1b01 	ldrb.w	r1, [r3], #1
   22f1c:	5c41      	ldrb	r1, [r0, r1]
   22f1e:	0749      	lsls	r1, r1, #29
   22f20:	d110      	bne.n	22f44 <at_parse_process_element+0xc4>
   22f22:	b102      	cbz	r2, 22f26 <at_parse_process_element+0xa6>
   22f24:	9700      	str	r7, [sp, #0]
		at_params_string_put(list, index, start_ptr,
   22f26:	1b3b      	subs	r3, r7, r4
   22f28:	4622      	mov	r2, r4
   22f2a:	4631      	mov	r1, r6
   22f2c:	4628      	mov	r0, r5
   22f2e:	f011 fff9 	bl	34f24 <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   22f32:	783b      	ldrb	r3, [r7, #0]
   22f34:	2b3d      	cmp	r3, #61	; 0x3d
   22f36:	d107      	bne.n	22f48 <at_parse_process_element+0xc8>
   22f38:	787b      	ldrb	r3, [r7, #1]
   22f3a:	2b3f      	cmp	r3, #63	; 0x3f
   22f3c:	d10b      	bne.n	22f56 <at_parse_process_element+0xd6>
			tmpstr += 2;
   22f3e:	3702      	adds	r7, #2
		tmpstr++;
   22f40:	9700      	str	r7, [sp, #0]
   22f42:	e008      	b.n	22f56 <at_parse_process_element+0xd6>
   22f44:	2201      	movs	r2, #1
   22f46:	e7e6      	b.n	22f16 <at_parse_process_element+0x96>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   22f48:	2b3f      	cmp	r3, #63	; 0x3f
   22f4a:	d104      	bne.n	22f56 <at_parse_process_element+0xd6>
			tmpstr++;
   22f4c:	3701      	adds	r7, #1
   22f4e:	e7f7      	b.n	22f40 <at_parse_process_element+0xc0>
		at_params_empty_put(list, index);
   22f50:	4628      	mov	r0, r5
   22f52:	f011 ffbd 	bl	34ed0 <at_params_empty_put>
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   22f56:	2000      	movs	r0, #0
	*str = tmpstr;
   22f58:	9b00      	ldr	r3, [sp, #0]
   22f5a:	f8c8 3000 	str.w	r3, [r8]
}
   22f5e:	b023      	add	sp, #140	; 0x8c
   22f60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (state == NOTIFICATION) {
   22f64:	4627      	mov	r7, r4
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   22f66:	783a      	ldrb	r2, [r7, #0]
   22f68:	4610      	mov	r0, r2
   22f6a:	f011 ff76 	bl	34e5a <is_lfcr>
   22f6e:	463b      	mov	r3, r7
			tmpstr++;
   22f70:	3701      	adds	r7, #1
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   22f72:	b908      	cbnz	r0, 22f78 <at_parse_process_element+0xf8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   22f74:	2a00      	cmp	r2, #0
   22f76:	d1f6      	bne.n	22f66 <at_parse_process_element+0xe6>
		at_params_string_put(list, index, start_ptr,
   22f78:	4622      	mov	r2, r4
   22f7a:	4631      	mov	r1, r6
   22f7c:	4628      	mov	r0, r5
   22f7e:	1b1b      	subs	r3, r3, r4
   22f80:	f011 ffd0 	bl	34f24 <at_params_string_put>
   22f84:	e7dc      	b.n	22f40 <at_parse_process_element+0xc0>
	if (state == NOTIFICATION) {
   22f86:	4627      	mov	r7, r4
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr)) {
   22f88:	783a      	ldrb	r2, [r7, #0]
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   22f8a:	463b      	mov	r3, r7
   22f8c:	2a22      	cmp	r2, #34	; 0x22
			tmpstr++;
   22f8e:	f107 0701 	add.w	r7, r7, #1
   22f92:	d0f1      	beq.n	22f78 <at_parse_process_element+0xf8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   22f94:	2a00      	cmp	r2, #0
   22f96:	d1f7      	bne.n	22f88 <at_parse_process_element+0x108>
   22f98:	e7ee      	b.n	22f78 <at_parse_process_element+0xf8>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   22f9a:	4620      	mov	r0, r4
   22f9c:	220a      	movs	r2, #10
   22f9e:	a901      	add	r1, sp, #4
   22fa0:	f00a f8bc 	bl	2d11c <strtoul>
   22fa4:	2401      	movs	r4, #1
		tmpstr = next;
   22fa6:	9b01      	ldr	r3, [sp, #4]
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   22fa8:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   22faa:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   22fac:	9b00      	ldr	r3, [sp, #0]
   22fae:	7818      	ldrb	r0, [r3, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
   22fb0:	2829      	cmp	r0, #41	; 0x29
   22fb2:	d025      	beq.n	23000 <at_parse_process_element+0x180>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   22fb4:	b320      	cbz	r0, 23000 <at_parse_process_element+0x180>
					(uint32_t)strtoul(++tmpstr, &next, 10);
   22fb6:	f103 0901 	add.w	r9, r3, #1
			if (is_separator(*tmpstr)) {
   22fba:	f7ff ff3b 	bl	22e34 <is_separator>
				tmparray[i++] =
   22fbe:	f8cd 9000 	str.w	r9, [sp]
			if (is_separator(*tmpstr)) {
   22fc2:	b908      	cbnz	r0, 22fc8 <at_parse_process_element+0x148>
					tmpstr = next;
   22fc4:	4627      	mov	r7, r4
   22fc6:	e019      	b.n	22ffc <at_parse_process_element+0x17c>
					(uint32_t)strtoul(++tmpstr, &next, 10);
   22fc8:	220a      	movs	r2, #10
   22fca:	a901      	add	r1, sp, #4
   22fcc:	4648      	mov	r0, r9
   22fce:	f00a f8a5 	bl	2d11c <strtoul>
				tmparray[i++] =
   22fd2:	ab22      	add	r3, sp, #136	; 0x88
   22fd4:	1c67      	adds	r7, r4, #1
   22fd6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   22fda:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   22fde:	4648      	mov	r0, r9
   22fe0:	f7e6 f91f 	bl	9222 <strlen>
   22fe4:	f8dd 9004 	ldr.w	r9, [sp, #4]
   22fe8:	4604      	mov	r4, r0
   22fea:	4648      	mov	r0, r9
   22fec:	f7e6 f919 	bl	9222 <strlen>
   22ff0:	4284      	cmp	r4, r0
   22ff2:	d006      	beq.n	23002 <at_parse_process_element+0x182>
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   22ff4:	2f20      	cmp	r7, #32
					tmpstr = next;
   22ff6:	f8cd 9000 	str.w	r9, [sp]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   22ffa:	d002      	beq.n	23002 <at_parse_process_element+0x182>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   22ffc:	463c      	mov	r4, r7
   22ffe:	e7d5      	b.n	22fac <at_parse_process_element+0x12c>
   23000:	4627      	mov	r7, r4
		at_params_array_put(list, index, tmparray, i * sizeof(uint32_t));
   23002:	00bb      	lsls	r3, r7, #2
   23004:	4631      	mov	r1, r6
   23006:	4628      	mov	r0, r5
   23008:	aa02      	add	r2, sp, #8
   2300a:	f011 ffae 	bl	34f6a <at_params_array_put>
		tmpstr++;
   2300e:	9b00      	ldr	r3, [sp, #0]
   23010:	3301      	adds	r3, #1
   23012:	9300      	str	r3, [sp, #0]
   23014:	e79f      	b.n	22f56 <at_parse_process_element+0xd6>
		int64_t value = (int64_t)strtoll(tmpstr, &next, 10);
   23016:	220a      	movs	r2, #10
   23018:	4620      	mov	r0, r4
   2301a:	a902      	add	r1, sp, #8
   2301c:	f00a f802 	bl	2d024 <strtoll>
   23020:	460b      	mov	r3, r1
		tmpstr = next;
   23022:	9902      	ldr	r1, [sp, #8]
		int64_t value = (int64_t)strtoll(tmpstr, &next, 10);
   23024:	4602      	mov	r2, r0
		tmpstr = next;
   23026:	9100      	str	r1, [sp, #0]
		at_params_int_put(list, index, value);
   23028:	4628      	mov	r0, r5
   2302a:	4631      	mov	r1, r6
   2302c:	f011 ff65 	bl	34efa <at_params_int_put>
   23030:	e791      	b.n	22f56 <at_parse_process_element+0xd6>
   23032:	2101      	movs	r1, #1
   23034:	e75d      	b.n	22ef2 <at_parse_process_element+0x72>
		return -1;
   23036:	f04f 30ff 	mov.w	r0, #4294967295
   2303a:	e790      	b.n	22f5e <at_parse_process_element+0xde>
   2303c:	200106c1 	.word	0x200106c1
   23040:	00041f02 	.word	0x00041f02

00023044 <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   23044:	b510      	push	{r4, lr}
   23046:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   23048:	f7e6 f8eb 	bl	9222 <strlen>
   2304c:	2801      	cmp	r0, #1
   2304e:	d921      	bls.n	23094 <is_command+0x50>
		return false;
	}

	if ((toupper((int)str[0]) != 'A') || (toupper((int)str[1]) != 'T')) {
   23050:	7823      	ldrb	r3, [r4, #0]
   23052:	4912      	ldr	r1, [pc, #72]	; (2309c <is_command+0x58>)
   23054:	5cca      	ldrb	r2, [r1, r3]
   23056:	f002 0203 	and.w	r2, r2, #3
   2305a:	2a02      	cmp	r2, #2
   2305c:	bf08      	it	eq
   2305e:	3b20      	subeq	r3, #32
   23060:	2b41      	cmp	r3, #65	; 0x41
   23062:	d117      	bne.n	23094 <is_command+0x50>
   23064:	7863      	ldrb	r3, [r4, #1]
   23066:	5cca      	ldrb	r2, [r1, r3]
   23068:	f002 0203 	and.w	r2, r2, #3
   2306c:	2a02      	cmp	r2, #2
   2306e:	bf08      	it	eq
   23070:	3b20      	subeq	r3, #32
   23072:	2b54      	cmp	r3, #84	; 0x54
   23074:	d10e      	bne.n	23094 <is_command+0x50>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   23076:	78a2      	ldrb	r2, [r4, #2]
   23078:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   2307c:	2b23      	cmp	r3, #35	; 0x23
   2307e:	d00b      	beq.n	23098 <is_command+0x54>
   23080:	2a25      	cmp	r2, #37	; 0x25
   23082:	d009      	beq.n	23098 <is_command+0x54>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   23084:	4610      	mov	r0, r2
   23086:	f011 fee8 	bl	34e5a <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   2308a:	b910      	cbnz	r0, 23092 <is_command+0x4e>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2308c:	fab2 f082 	clz	r0, r2
   23090:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   23092:	bd10      	pop	{r4, pc}
		return false;
   23094:	2000      	movs	r0, #0
   23096:	e7fc      	b.n	23092 <is_command+0x4e>
		return true;
   23098:	2001      	movs	r0, #1
   2309a:	e7fa      	b.n	23092 <is_command+0x4e>
   2309c:	00041f02 	.word	0x00041f02

000230a0 <at_parse_detect_type>:
{
   230a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   230a4:	4607      	mov	r7, r0
	const char *tmpstr = *str;
   230a6:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   230a8:	f8df 8190 	ldr.w	r8, [pc, #400]	; 2323c <at_parse_detect_type+0x19c>
   230ac:	2900      	cmp	r1, #0
   230ae:	d13d      	bne.n	2312c <at_parse_detect_type+0x8c>
   230b0:	7820      	ldrb	r0, [r4, #0]
   230b2:	f011 fec6 	bl	34e42 <is_notification>
   230b6:	4e62      	ldr	r6, [pc, #392]	; (23240 <at_parse_detect_type+0x1a0>)
   230b8:	4605      	mov	r5, r0
   230ba:	b360      	cbz	r0, 23116 <at_parse_detect_type+0x76>
	state = new_state;
   230bc:	2306      	movs	r3, #6
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   230be:	2205      	movs	r2, #5
   230c0:	4620      	mov	r0, r4
   230c2:	4960      	ldr	r1, [pc, #384]	; (23244 <at_parse_detect_type+0x1a4>)
	state = new_state;
   230c4:	7033      	strb	r3, [r6, #0]
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   230c6:	f013 fbc3 	bl	36850 <strncmp>
   230ca:	b1f8      	cbz	r0, 2310c <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
   230cc:	2205      	movs	r2, #5
   230ce:	4620      	mov	r0, r4
   230d0:	495d      	ldr	r1, [pc, #372]	; (23248 <at_parse_detect_type+0x1a8>)
   230d2:	f013 fbbd 	bl	36850 <strncmp>
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   230d6:	b1c8      	cbz	r0, 2310c <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
   230d8:	220b      	movs	r2, #11
   230da:	4620      	mov	r0, r4
   230dc:	495b      	ldr	r1, [pc, #364]	; (2324c <at_parse_detect_type+0x1ac>)
   230de:	f013 fbb7 	bl	36850 <strncmp>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
   230e2:	b198      	cbz	r0, 2310c <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
   230e4:	220a      	movs	r2, #10
   230e6:	4620      	mov	r0, r4
   230e8:	4959      	ldr	r1, [pc, #356]	; (23250 <at_parse_detect_type+0x1b0>)
   230ea:	f013 fbb1 	bl	36850 <strncmp>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
   230ee:	b168      	cbz	r0, 2310c <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
   230f0:	220b      	movs	r2, #11
   230f2:	4620      	mov	r0, r4
   230f4:	4957      	ldr	r1, [pc, #348]	; (23254 <at_parse_detect_type+0x1b4>)
   230f6:	f013 fbab 	bl	36850 <strncmp>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
   230fa:	b138      	cbz	r0, 2310c <at_parse_detect_type+0x6c>
	    !strncmp(tmpstr, "%XICCID", AT_CMD_XICCID_LEN)) {
   230fc:	2207      	movs	r2, #7
   230fe:	4620      	mov	r0, r4
   23100:	4955      	ldr	r1, [pc, #340]	; (23258 <at_parse_detect_type+0x1b8>)
   23102:	f013 fba5 	bl	36850 <strncmp>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
   23106:	fab0 f580 	clz	r5, r0
   2310a:	096d      	lsrs	r5, r5, #5
		set_type_string = check_response_for_forced_string(tmpstr);
   2310c:	f888 5000 	strb.w	r5, [r8]
	return 0;
   23110:	2000      	movs	r0, #0
	*str = tmpstr;
   23112:	603c      	str	r4, [r7, #0]
	return 0;
   23114:	e04e      	b.n	231b4 <at_parse_detect_type+0x114>
	} else if (set_type_string) {
   23116:	f898 3000 	ldrb.w	r3, [r8]
   2311a:	b953      	cbnz	r3, 23132 <at_parse_detect_type+0x92>
	} else if ((index == 0) && is_command(tmpstr)) {
   2311c:	4620      	mov	r0, r4
   2311e:	f7ff ff91 	bl	23044 <is_command>
   23122:	2800      	cmp	r0, #0
   23124:	d048      	beq.n	231b8 <at_parse_detect_type+0x118>
	state = new_state;
   23126:	2307      	movs	r3, #7
   23128:	7033      	strb	r3, [r6, #0]
}
   2312a:	e7f1      	b.n	23110 <at_parse_detect_type+0x70>
	} else if (set_type_string) {
   2312c:	f898 3000 	ldrb.w	r3, [r8]
   23130:	b11b      	cbz	r3, 2313a <at_parse_detect_type+0x9a>
	state = new_state;
   23132:	2202      	movs	r2, #2
   23134:	4b42      	ldr	r3, [pc, #264]	; (23240 <at_parse_detect_type+0x1a0>)
   23136:	701a      	strb	r2, [r3, #0]
}
   23138:	e7ea      	b.n	23110 <at_parse_detect_type+0x70>
	} else if ((index > 0) && is_clac(tmpstr)) {
   2313a:	2900      	cmp	r1, #0
   2313c:	dd43      	ble.n	231c6 <at_parse_detect_type+0x126>
   2313e:	4622      	mov	r2, r4
 * @retval false Otherwise
 */
static bool is_clac(const char *str)
{
	/* skip leading <CR><LF>, if any, as check not from index 0 */
	while (is_lfcr(*str)) {
   23140:	7815      	ldrb	r5, [r2, #0]
   23142:	4616      	mov	r6, r2
   23144:	4628      	mov	r0, r5
   23146:	3201      	adds	r2, #1
   23148:	f011 fe87 	bl	34e5a <is_lfcr>
   2314c:	2800      	cmp	r0, #0
   2314e:	d1f7      	bne.n	23140 <at_parse_detect_type+0xa0>
		str++;
	}

	if (strlen(str) < 4) {
   23150:	4630      	mov	r0, r6
   23152:	f7e6 f866 	bl	9222 <strlen>
   23156:	2803      	cmp	r0, #3
   23158:	d930      	bls.n	231bc <at_parse_detect_type+0x11c>
		return false;
	}

	if ((toupper(str[0]) != 'A') || (toupper(str[1]) != 'T')) {
   2315a:	462b      	mov	r3, r5
   2315c:	4a3f      	ldr	r2, [pc, #252]	; (2325c <at_parse_detect_type+0x1bc>)
   2315e:	5d51      	ldrb	r1, [r2, r5]
   23160:	f001 0103 	and.w	r1, r1, #3
   23164:	2902      	cmp	r1, #2
   23166:	bf08      	it	eq
   23168:	f1a5 0320 	subeq.w	r3, r5, #32
   2316c:	2b41      	cmp	r3, #65	; 0x41
   2316e:	d125      	bne.n	231bc <at_parse_detect_type+0x11c>
   23170:	7873      	ldrb	r3, [r6, #1]
   23172:	5cd1      	ldrb	r1, [r2, r3]
   23174:	f001 0103 	and.w	r1, r1, #3
   23178:	2902      	cmp	r1, #2
   2317a:	bf08      	it	eq
   2317c:	3b20      	subeq	r3, #32
   2317e:	2b54      	cmp	r3, #84	; 0x54
   23180:	d11c      	bne.n	231bc <at_parse_detect_type+0x11c>
		/* Not an AT command */
		return false;
	}

	if ((toupper(str[2]) != '+') && (toupper(str[2]) != '%')) {
   23182:	78b3      	ldrb	r3, [r6, #2]
   23184:	5cd1      	ldrb	r1, [r2, r3]
   23186:	f001 0103 	and.w	r1, r1, #3
   2318a:	2902      	cmp	r1, #2
   2318c:	bf08      	it	eq
   2318e:	3b20      	subeq	r3, #32
   23190:	2b2b      	cmp	r3, #43	; 0x2b
   23192:	d00a      	beq.n	231aa <at_parse_detect_type+0x10a>
   23194:	2b25      	cmp	r3, #37	; 0x25
   23196:	d111      	bne.n	231bc <at_parse_detect_type+0x11c>
		/* Neither AT+ nor AT% */
		return false;
	}

	if ((toupper(str[2]) == '%') && (toupper(str[3]) == 'X')) {
   23198:	78f3      	ldrb	r3, [r6, #3]
   2319a:	5cd2      	ldrb	r2, [r2, r3]
   2319c:	f002 0203 	and.w	r2, r2, #3
   231a0:	2a02      	cmp	r2, #2
   231a2:	bf08      	it	eq
   231a4:	3b20      	subeq	r3, #32
   231a6:	2b58      	cmp	r3, #88	; 0x58
   231a8:	d008      	beq.n	231bc <at_parse_detect_type+0x11c>
	state = new_state;
   231aa:	2209      	movs	r2, #9
		return -2;
   231ac:	f06f 0001 	mvn.w	r0, #1
	state = new_state;
   231b0:	4b23      	ldr	r3, [pc, #140]	; (23240 <at_parse_detect_type+0x1a0>)
   231b2:	701a      	strb	r2, [r3, #0]
}
   231b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	state = new_state;
   231b8:	2302      	movs	r3, #2
   231ba:	e7b5      	b.n	23128 <at_parse_detect_type+0x88>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   231bc:	7820      	ldrb	r0, [r4, #0]
   231be:	f011 fe40 	bl	34e42 <is_notification>
   231c2:	2800      	cmp	r0, #0
   231c4:	d136      	bne.n	23234 <at_parse_detect_type+0x194>
	} else if (is_number(*tmpstr)) {
   231c6:	7822      	ldrb	r2, [r4, #0]
	if (isdigit((int)chr) || (chr == '-') || (chr == '+')) {
   231c8:	4b24      	ldr	r3, [pc, #144]	; (2325c <at_parse_detect_type+0x1bc>)
   231ca:	5c9b      	ldrb	r3, [r3, r2]
   231cc:	075b      	lsls	r3, r3, #29
   231ce:	d40a      	bmi.n	231e6 <at_parse_detect_type+0x146>
   231d0:	2a2d      	cmp	r2, #45	; 0x2d
   231d2:	d008      	beq.n	231e6 <at_parse_detect_type+0x146>
   231d4:	2a2b      	cmp	r2, #43	; 0x2b
   231d6:	d006      	beq.n	231e6 <at_parse_detect_type+0x146>
	if (chr == '"') {
   231d8:	2a22      	cmp	r2, #34	; 0x22
   231da:	d107      	bne.n	231ec <at_parse_detect_type+0x14c>
	state = new_state;
   231dc:	2203      	movs	r2, #3
   231de:	4b18      	ldr	r3, [pc, #96]	; (23240 <at_parse_detect_type+0x1a0>)
		tmpstr++;
   231e0:	3401      	adds	r4, #1
	state = new_state;
   231e2:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   231e4:	e794      	b.n	23110 <at_parse_detect_type+0x70>
	state = new_state;
   231e6:	2204      	movs	r2, #4
   231e8:	4b15      	ldr	r3, [pc, #84]	; (23240 <at_parse_detect_type+0x1a0>)
   231ea:	e7a4      	b.n	23136 <at_parse_detect_type+0x96>
	if (chr == '(') {
   231ec:	2a28      	cmp	r2, #40	; 0x28
   231ee:	d104      	bne.n	231fa <at_parse_detect_type+0x15a>
   231f0:	2201      	movs	r2, #1
   231f2:	4b13      	ldr	r3, [pc, #76]	; (23240 <at_parse_detect_type+0x1a0>)
		tmpstr++;
   231f4:	4414      	add	r4, r2
	state = new_state;
   231f6:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   231f8:	e78a      	b.n	23110 <at_parse_detect_type+0x70>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   231fa:	4610      	mov	r0, r2
   231fc:	f011 fe2d 	bl	34e5a <is_lfcr>
   23200:	b188      	cbz	r0, 23226 <at_parse_detect_type+0x186>
   23202:	490f      	ldr	r1, [pc, #60]	; (23240 <at_parse_detect_type+0x1a0>)
   23204:	780b      	ldrb	r3, [r1, #0]
   23206:	2b04      	cmp	r3, #4
   23208:	d10a      	bne.n	23220 <at_parse_detect_type+0x180>
   2320a:	4622      	mov	r2, r4
   2320c:	4614      	mov	r4, r2
		while (is_lfcr(*tmpstr)) {
   2320e:	f812 0b01 	ldrb.w	r0, [r2], #1
   23212:	f011 fe22 	bl	34e5a <is_lfcr>
   23216:	2800      	cmp	r0, #0
   23218:	d1f8      	bne.n	2320c <at_parse_detect_type+0x16c>
	state = new_state;
   2321a:	2305      	movs	r3, #5
   2321c:	700b      	strb	r3, [r1, #0]
}
   2321e:	e777      	b.n	23110 <at_parse_detect_type+0x70>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   23220:	2b08      	cmp	r3, #8
   23222:	f43f af75 	beq.w	23110 <at_parse_detect_type+0x70>
	} else if (is_separator(*tmpstr)) {
   23226:	4610      	mov	r0, r2
   23228:	f7ff fe04 	bl	22e34 <is_separator>
   2322c:	b110      	cbz	r0, 23234 <at_parse_detect_type+0x194>
	state = new_state;
   2322e:	2208      	movs	r2, #8
   23230:	4b03      	ldr	r3, [pc, #12]	; (23240 <at_parse_detect_type+0x1a0>)
   23232:	e780      	b.n	23136 <at_parse_detect_type+0x96>
		return -1;
   23234:	f04f 30ff 	mov.w	r0, #4294967295
   23238:	e7bc      	b.n	231b4 <at_parse_detect_type+0x114>
   2323a:	bf00      	nop
   2323c:	200106c0 	.word	0x200106c0
   23240:	200106c1 	.word	0x200106c1
   23244:	0003f07d 	.word	0x0003f07d
   23248:	0003f083 	.word	0x0003f083
   2324c:	0003f089 	.word	0x0003f089
   23250:	0003f095 	.word	0x0003f095
   23254:	0003f0a0 	.word	0x0003f0a0
   23258:	0003f0ac 	.word	0x0003f0ac
   2325c:	00041f02 	.word	0x00041f02

00023260 <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   23260:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23264:	4689      	mov	r9, r1
   23266:	4616      	mov	r6, r2
   23268:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   2326a:	4680      	mov	r8, r0
   2326c:	2800      	cmp	r0, #0
   2326e:	f000 8099 	beq.w	233a4 <at_parser_max_params_from_str+0x144>
   23272:	2a00      	cmp	r2, #0
   23274:	f000 8096 	beq.w	233a4 <at_parser_max_params_from_str+0x144>
   23278:	6853      	ldr	r3, [r2, #4]
   2327a:	2b00      	cmp	r3, #0
   2327c:	f000 8092 	beq.w	233a4 <at_parser_max_params_from_str+0x144>
	state = IDLE;
   23280:	2400      	movs	r4, #0
		return -EINVAL;
	}

	at_params_list_clear(list);
   23282:	4610      	mov	r0, r2
   23284:	f000 f900 	bl	23488 <at_params_list_clear>

	max_params_count = MIN(max_params_count, list->param_count);
   23288:	4642      	mov	r2, r8
   2328a:	6833      	ldr	r3, [r6, #0]
	const char *str = *at_params_str;
   2328c:	f8cd 8004 	str.w	r8, [sp, #4]
	max_params_count = MIN(max_params_count, list->param_count);
   23290:	429f      	cmp	r7, r3
   23292:	bf28      	it	cs
   23294:	461f      	movcs	r7, r3
	state = IDLE;
   23296:	4b45      	ldr	r3, [pc, #276]	; (233ac <at_parser_max_params_from_str+0x14c>)
   23298:	701c      	strb	r4, [r3, #0]
	set_type_string = false;
   2329a:	4b45      	ldr	r3, [pc, #276]	; (233b0 <at_parser_max_params_from_str+0x150>)
   2329c:	701c      	strb	r4, [r3, #0]
   2329e:	4611      	mov	r1, r2
	while (is_lfcr(*str)) {
   232a0:	7808      	ldrb	r0, [r1, #0]
   232a2:	f011 fdda 	bl	34e5a <is_lfcr>
   232a6:	4625      	mov	r5, r4
   232a8:	3201      	adds	r2, #1
   232aa:	4604      	mov	r4, r0
   232ac:	2800      	cmp	r0, #0
   232ae:	d1f6      	bne.n	2329e <at_parser_max_params_from_str+0x3e>
   232b0:	b105      	cbz	r5, 232b4 <at_parser_max_params_from_str+0x54>
   232b2:	9101      	str	r1, [sp, #4]
	int index = 0;
   232b4:	2500      	movs	r5, #0
		if (isspace((int)*str)) {
   232b6:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 233b4 <at_parser_max_params_from_str+0x154>
	while ((!is_terminated(*str)) && (index < max_params)) {
   232ba:	9b01      	ldr	r3, [sp, #4]
   232bc:	781a      	ldrb	r2, [r3, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   232be:	2a00      	cmp	r2, #0
   232c0:	d050      	beq.n	23364 <at_parser_max_params_from_str+0x104>
   232c2:	42af      	cmp	r7, r5
   232c4:	d94e      	bls.n	23364 <at_parser_max_params_from_str+0x104>
		if (isspace((int)*str)) {
   232c6:	f81b 2002 	ldrb.w	r2, [fp, r2]
		ret = at_parse_detect_type(&str, index);
   232ca:	4629      	mov	r1, r5
		if (isspace((int)*str)) {
   232cc:	0712      	lsls	r2, r2, #28
			str++;
   232ce:	bf48      	it	mi
   232d0:	3301      	addmi	r3, #1
		ret = at_parse_detect_type(&str, index);
   232d2:	a801      	add	r0, sp, #4
			str++;
   232d4:	bf48      	it	mi
   232d6:	9301      	strmi	r3, [sp, #4]
		ret = at_parse_detect_type(&str, index);
   232d8:	f7ff fee2 	bl	230a0 <at_parse_detect_type>
		if (ret == -1) {
   232dc:	1c43      	adds	r3, r0, #1
   232de:	d041      	beq.n	23364 <at_parser_max_params_from_str+0x104>
		if (ret == -2) {
   232e0:	3002      	adds	r0, #2
			index = 0;
   232e2:	bf08      	it	eq
   232e4:	2500      	moveq	r5, #0
		if (at_parse_process_element(&str, index, list) == -1) {
   232e6:	4632      	mov	r2, r6
   232e8:	4629      	mov	r1, r5
   232ea:	a801      	add	r0, sp, #4
			str = *at_params_str;
   232ec:	bf08      	it	eq
   232ee:	f8cd 8004 	streq.w	r8, [sp, #4]
		if (at_parse_process_element(&str, index, list) == -1) {
   232f2:	f7ff fdc5 	bl	22e80 <at_parse_process_element>
   232f6:	3001      	adds	r0, #1
   232f8:	d034      	beq.n	23364 <at_parser_max_params_from_str+0x104>
		if (is_separator(*str)) {
   232fa:	9a01      	ldr	r2, [sp, #4]
   232fc:	7810      	ldrb	r0, [r2, #0]
   232fe:	f7ff fd99 	bl	22e34 <is_separator>
   23302:	b1b0      	cbz	r0, 23332 <at_parser_max_params_from_str+0xd2>
			if (is_lfcr(*(str + 1))) {
   23304:	7850      	ldrb	r0, [r2, #1]
   23306:	f011 fda8 	bl	34e5a <is_lfcr>
   2330a:	b178      	cbz	r0, 2332c <at_parser_max_params_from_str+0xcc>
				index++;
   2330c:	3501      	adds	r5, #1
				if (index == max_params) {
   2330e:	42bd      	cmp	r5, r7
   23310:	d041      	beq.n	23396 <at_parser_max_params_from_str+0x136>
				if (at_parse_detect_type(&str, index) == -1) {
   23312:	4629      	mov	r1, r5
   23314:	a801      	add	r0, sp, #4
   23316:	f7ff fec3 	bl	230a0 <at_parse_detect_type>
   2331a:	3001      	adds	r0, #1
   2331c:	d022      	beq.n	23364 <at_parser_max_params_from_str+0x104>
				if (at_parse_process_element(&str, index,
   2331e:	4632      	mov	r2, r6
   23320:	4629      	mov	r1, r5
   23322:	a801      	add	r0, sp, #4
   23324:	f7ff fdac 	bl	22e80 <at_parse_process_element>
   23328:	3001      	adds	r0, #1
   2332a:	d01b      	beq.n	23364 <at_parser_max_params_from_str+0x104>
			str++;
   2332c:	9b01      	ldr	r3, [sp, #4]
   2332e:	3301      	adds	r3, #1
   23330:	9301      	str	r3, [sp, #4]
		if (is_lfcr(*str)) {
   23332:	9a01      	ldr	r2, [sp, #4]
   23334:	7810      	ldrb	r0, [r2, #0]
   23336:	f011 fd90 	bl	34e5a <is_lfcr>
   2333a:	b338      	cbz	r0, 2338c <at_parser_max_params_from_str+0x12c>
   2333c:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
   2333e:	7811      	ldrb	r1, [r2, #0]
   23340:	4692      	mov	sl, r2
   23342:	4608      	mov	r0, r1
   23344:	3201      	adds	r2, #1
   23346:	f011 fd88 	bl	34e5a <is_lfcr>
   2334a:	2800      	cmp	r0, #0
   2334c:	d1f7      	bne.n	2333e <at_parser_max_params_from_str+0xde>
   2334e:	b139      	cbz	r1, 23360 <at_parser_max_params_from_str+0x100>
			if (is_terminated(str[i]) || is_notification(str[i]) ||
   23350:	4608      	mov	r0, r1
   23352:	f011 fd76 	bl	34e42 <is_notification>
   23356:	b918      	cbnz	r0, 23360 <at_parser_max_params_from_str+0x100>
			    is_result(str + i)) {
   23358:	4650      	mov	r0, sl
   2335a:	f7ff fd79 	bl	22e50 <is_result>
			if (is_terminated(str[i]) || is_notification(str[i]) ||
   2335e:	b1a8      	cbz	r0, 2338c <at_parser_max_params_from_str+0x12c>
				str += i;
   23360:	f8cd a004 	str.w	sl, [sp, #4]
	*at_params_str = str;
   23364:	9d01      	ldr	r5, [sp, #4]
	if (oversized) {
   23366:	b9c4      	cbnz	r4, 2339a <at_parser_max_params_from_str+0x13a>
   23368:	782b      	ldrb	r3, [r5, #0]
   2336a:	b1cb      	cbz	r3, 233a0 <at_parser_max_params_from_str+0x140>
	if (!is_terminated(*str) && !is_result(str)) {
   2336c:	4628      	mov	r0, r5
   2336e:	f7ff fd6f 	bl	22e50 <is_result>
		return -EAGAIN;
   23372:	2800      	cmp	r0, #0
   23374:	bf14      	ite	ne
   23376:	2000      	movne	r0, #0
   23378:	f06f 000a 	mvneq.w	r0, #10

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   2337c:	f1b9 0f00 	cmp.w	r9, #0
   23380:	d001      	beq.n	23386 <at_parser_max_params_from_str+0x126>
		*next_param_str = (char *)at_params_str;
   23382:	f8c9 5000 	str.w	r5, [r9]
	}

	return err;
}
   23386:	b003      	add	sp, #12
   23388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		index++;
   2338c:	3501      	adds	r5, #1
			oversized = true;
   2338e:	42bd      	cmp	r5, r7
   23390:	bf08      	it	eq
   23392:	2401      	moveq	r4, #1
   23394:	e791      	b.n	232ba <at_parser_max_params_from_str+0x5a>
					oversized = true;
   23396:	4604      	mov	r4, r0
   23398:	e7e4      	b.n	23364 <at_parser_max_params_from_str+0x104>
		return -E2BIG;
   2339a:	f06f 0006 	mvn.w	r0, #6
   2339e:	e7ed      	b.n	2337c <at_parser_max_params_from_str+0x11c>
	return 0;
   233a0:	4620      	mov	r0, r4
   233a2:	e7eb      	b.n	2337c <at_parser_max_params_from_str+0x11c>
		return -EINVAL;
   233a4:	f06f 0015 	mvn.w	r0, #21
   233a8:	e7ed      	b.n	23386 <at_parser_max_params_from_str+0x126>
   233aa:	bf00      	nop
   233ac:	200106c1 	.word	0x200106c1
   233b0:	200106c0 	.word	0x200106c0
   233b4:	00041f02 	.word	0x00041f02

000233b8 <at_params_get>:
}

/* Internal function. Parameter cannot be null. */
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
   233b8:	b508      	push	{r3, lr}
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");
   233ba:	b960      	cbnz	r0, 233d6 <at_params_get+0x1e>
   233bc:	490a      	ldr	r1, [pc, #40]	; (233e8 <at_params_get+0x30>)
   233be:	232b      	movs	r3, #43	; 0x2b
   233c0:	4a0a      	ldr	r2, [pc, #40]	; (233ec <at_params_get+0x34>)
   233c2:	480b      	ldr	r0, [pc, #44]	; (233f0 <at_params_get+0x38>)
   233c4:	f00b fffe 	bl	2f3c4 <assert_print>
   233c8:	480a      	ldr	r0, [pc, #40]	; (233f4 <at_params_get+0x3c>)
   233ca:	f00b fffb 	bl	2f3c4 <assert_print>
   233ce:	212b      	movs	r1, #43	; 0x2b
   233d0:	4806      	ldr	r0, [pc, #24]	; (233ec <at_params_get+0x34>)
   233d2:	f00b fff0 	bl	2f3b6 <assert_post_action>

	if (index >= list->param_count) {
   233d6:	6803      	ldr	r3, [r0, #0]
   233d8:	428b      	cmp	r3, r1
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   233da:	bf8a      	itet	hi
   233dc:	6840      	ldrhi	r0, [r0, #4]
		return NULL;
   233de:	2000      	movls	r0, #0
	return &param[index];
   233e0:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
}
   233e4:	bd08      	pop	{r3, pc}
   233e6:	bf00      	nop
   233e8:	0003f105 	.word	0x0003f105
   233ec:	0003f0d7 	.word	0x0003f0d7
   233f0:	00039995 	.word	0x00039995
   233f4:	0003f119 	.word	0x0003f119

000233f8 <at_param_size>:

/* Internal function. Parameter cannot be null. */
static size_t at_param_size(const struct at_param *param)
{
   233f8:	b508      	push	{r3, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   233fa:	b960      	cbnz	r0, 23416 <at_param_size+0x1e>
   233fc:	490c      	ldr	r1, [pc, #48]	; (23430 <at_param_size+0x38>)
   233fe:	2339      	movs	r3, #57	; 0x39
   23400:	4a0c      	ldr	r2, [pc, #48]	; (23434 <at_param_size+0x3c>)
   23402:	480d      	ldr	r0, [pc, #52]	; (23438 <at_param_size+0x40>)
   23404:	f00b ffde 	bl	2f3c4 <assert_print>
   23408:	480c      	ldr	r0, [pc, #48]	; (2343c <at_param_size+0x44>)
   2340a:	f00b ffdb 	bl	2f3c4 <assert_print>
   2340e:	2139      	movs	r1, #57	; 0x39
   23410:	4808      	ldr	r0, [pc, #32]	; (23434 <at_param_size+0x3c>)
   23412:	f00b ffd0 	bl	2f3b6 <assert_post_action>

	if (param->type == AT_PARAM_TYPE_NUM_INT) {
   23416:	7803      	ldrb	r3, [r0, #0]
   23418:	2b01      	cmp	r3, #1
   2341a:	d004      	beq.n	23426 <at_param_size+0x2e>
		return sizeof(uint64_t);
	} else if ((param->type == AT_PARAM_TYPE_STRING) ||
   2341c:	3b02      	subs	r3, #2
   2341e:	2b01      	cmp	r3, #1
   23420:	d803      	bhi.n	2342a <at_param_size+0x32>
		   (param->type == AT_PARAM_TYPE_ARRAY)) {
		return param->size;
   23422:	6840      	ldr	r0, [r0, #4]
	}

	return 0;
}
   23424:	bd08      	pop	{r3, pc}
		return sizeof(uint64_t);
   23426:	2008      	movs	r0, #8
   23428:	e7fc      	b.n	23424 <at_param_size+0x2c>
	return 0;
   2342a:	2000      	movs	r0, #0
   2342c:	e7fa      	b.n	23424 <at_param_size+0x2c>
   2342e:	bf00      	nop
   23430:	0003f13a 	.word	0x0003f13a
   23434:	0003f0d7 	.word	0x0003f0d7
   23438:	00039995 	.word	0x00039995
   2343c:	0003f14f 	.word	0x0003f14f

00023440 <at_param_clear>:
{
   23440:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   23442:	4604      	mov	r4, r0
   23444:	b960      	cbnz	r0, 23460 <at_param_clear+0x20>
   23446:	490c      	ldr	r1, [pc, #48]	; (23478 <at_param_clear+0x38>)
   23448:	231d      	movs	r3, #29
   2344a:	4a0c      	ldr	r2, [pc, #48]	; (2347c <at_param_clear+0x3c>)
   2344c:	480c      	ldr	r0, [pc, #48]	; (23480 <at_param_clear+0x40>)
   2344e:	f00b ffb9 	bl	2f3c4 <assert_print>
   23452:	480c      	ldr	r0, [pc, #48]	; (23484 <at_param_clear+0x44>)
   23454:	f00b ffb6 	bl	2f3c4 <assert_print>
   23458:	211d      	movs	r1, #29
   2345a:	4808      	ldr	r0, [pc, #32]	; (2347c <at_param_clear+0x3c>)
   2345c:	f00b ffab 	bl	2f3b6 <assert_post_action>
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   23460:	7803      	ldrb	r3, [r0, #0]
   23462:	3b02      	subs	r3, #2
   23464:	2b01      	cmp	r3, #1
   23466:	d802      	bhi.n	2346e <at_param_clear+0x2e>
		k_free(param->value.str_val);
   23468:	6880      	ldr	r0, [r0, #8]
   2346a:	f013 f823 	bl	364b4 <k_free>
	param->value.int_val = 0;
   2346e:	2200      	movs	r2, #0
   23470:	2300      	movs	r3, #0
   23472:	e9c4 2302 	strd	r2, r3, [r4, #8]
}
   23476:	bd10      	pop	{r4, pc}
   23478:	0003f13a 	.word	0x0003f13a
   2347c:	0003f0d7 	.word	0x0003f0d7
   23480:	00039995 	.word	0x00039995
   23484:	0003f14f 	.word	0x0003f14f

00023488 <at_params_list_clear>:
	list->param_count = max_params_count;
	return 0;
}

void at_params_list_clear(struct at_param_list *list)
{
   23488:	b570      	push	{r4, r5, r6, lr}
	if (list == NULL || list->params == NULL) {
   2348a:	4604      	mov	r4, r0
   2348c:	b128      	cbz	r0, 2349a <at_params_list_clear+0x12>
   2348e:	6843      	ldr	r3, [r0, #4]
   23490:	b11b      	cbz	r3, 2349a <at_params_list_clear+0x12>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   23492:	2600      	movs	r6, #0
   23494:	6823      	ldr	r3, [r4, #0]
   23496:	429e      	cmp	r6, r3
   23498:	d300      	bcc.n	2349c <at_params_list_clear+0x14>
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
		at_param_init(&params[i]);
	}
}
   2349a:	bd70      	pop	{r4, r5, r6, pc}
		at_param_clear(&params[i]);
   2349c:	6865      	ldr	r5, [r4, #4]
   2349e:	eb05 1506 	add.w	r5, r5, r6, lsl #4
   234a2:	4628      	mov	r0, r5
   234a4:	f7ff ffcc 	bl	23440 <at_param_clear>
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   234a8:	b965      	cbnz	r5, 234c4 <at_params_list_clear+0x3c>
   234aa:	490a      	ldr	r1, [pc, #40]	; (234d4 <at_params_list_clear+0x4c>)
   234ac:	2314      	movs	r3, #20
   234ae:	4a0a      	ldr	r2, [pc, #40]	; (234d8 <at_params_list_clear+0x50>)
   234b0:	480a      	ldr	r0, [pc, #40]	; (234dc <at_params_list_clear+0x54>)
   234b2:	f00b ff87 	bl	2f3c4 <assert_print>
   234b6:	480a      	ldr	r0, [pc, #40]	; (234e0 <at_params_list_clear+0x58>)
   234b8:	f00b ff84 	bl	2f3c4 <assert_print>
   234bc:	2114      	movs	r1, #20
   234be:	4806      	ldr	r0, [pc, #24]	; (234d8 <at_params_list_clear+0x50>)
   234c0:	f00b ff79 	bl	2f3b6 <assert_post_action>
__ssp_bos_icheck3(memset, void *, int)
   234c4:	2210      	movs	r2, #16
   234c6:	2100      	movs	r1, #0
   234c8:	4628      	mov	r0, r5
   234ca:	f013 f84d 	bl	36568 <memset>
	for (size_t i = 0; i < list->param_count; ++i) {
   234ce:	3601      	adds	r6, #1
   234d0:	e7e0      	b.n	23494 <at_params_list_clear+0xc>
   234d2:	bf00      	nop
   234d4:	0003f13a 	.word	0x0003f13a
   234d8:	0003f0d7 	.word	0x0003f0d7
   234dc:	00039995 	.word	0x00039995
   234e0:	0003f14f 	.word	0x0003f14f

000234e4 <lte_lc_connect_async.part.0>:
int lte_lc_init_and_connect(void)
{
	return init_and_connect();
}

int lte_lc_connect_async(lte_lc_evt_handler_t handler)
   234e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
{
	if (handler) {
		event_handler_list_append_handler(handler);
	} else if (event_handler_list_is_empty()) {
		LOG_ERR("No handler registered");
   234e6:	4b07      	ldr	r3, [pc, #28]	; (23504 <lte_lc_connect_async.part.0+0x20>)
   234e8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   234ec:	9305      	str	r3, [sp, #20]
   234ee:	2302      	movs	r3, #2
   234f0:	4805      	ldr	r0, [pc, #20]	; (23508 <lte_lc_connect_async.part.0+0x24>)
   234f2:	aa04      	add	r2, sp, #16
   234f4:	9304      	str	r3, [sp, #16]
   234f6:	f011 fdf9 	bl	350ec <z_log_msg_static_create.constprop.0>
		return -EINVAL;
	}

	return connect_lte(false);
}
   234fa:	f06f 0015 	mvn.w	r0, #21
   234fe:	b007      	add	sp, #28
   23500:	f85d fb04 	ldr.w	pc, [sp], #4
   23504:	0003f16b 	.word	0x0003f16b
   23508:	00037990 	.word	0x00037990

0002350c <enable_notifications>:
{
   2350c:	b5b0      	push	{r4, r5, r7, lr}
   2350e:	b08e      	sub	sp, #56	; 0x38
	err = nrf_modem_at_printf(AT_CEREG_5);
   23510:	482c      	ldr	r0, [pc, #176]	; (235c4 <enable_notifications+0xb8>)
{
   23512:	af00      	add	r7, sp, #0
	err = nrf_modem_at_printf(AT_CEREG_5);
   23514:	f003 fe38 	bl	27188 <nrf_modem_at_printf>
	if (err) {
   23518:	4604      	mov	r4, r0
   2351a:	b1a0      	cbz	r0, 23546 <enable_notifications+0x3a>
		LOG_ERR("Failed to subscribe to CEREG notifications, error: %d", err);
   2351c:	466d      	mov	r5, sp
   2351e:	b088      	sub	sp, #32
   23520:	466a      	mov	r2, sp
   23522:	4b29      	ldr	r3, [pc, #164]	; (235c8 <enable_notifications+0xbc>)
   23524:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   23528:	e9c2 3005 	strd	r3, r0, [r2, #20]
   2352c:	2303      	movs	r3, #3
   2352e:	4827      	ldr	r0, [pc, #156]	; (235cc <enable_notifications+0xc0>)
   23530:	f842 3f10 	str.w	r3, [r2, #16]!
   23534:	f011 fdda 	bl	350ec <z_log_msg_static_create.constprop.0>
		return -EFAULT;
   23538:	f06f 040d 	mvn.w	r4, #13
   2353c:	46ad      	mov	sp, r5
}
   2353e:	4620      	mov	r0, r4
   23540:	3738      	adds	r7, #56	; 0x38
   23542:	46bd      	mov	sp, r7
   23544:	bdb0      	pop	{r4, r5, r7, pc}
	err = nrf_modem_at_printf(cscon);
   23546:	4822      	ldr	r0, [pc, #136]	; (235d0 <enable_notifications+0xc4>)
   23548:	f003 fe1e 	bl	27188 <nrf_modem_at_printf>
	if (err) {
   2354c:	2800      	cmp	r0, #0
   2354e:	d0f6      	beq.n	2353e <enable_notifications+0x32>
		LOG_WRN("AT+CSCON failed (%d), RRC notifications are not enabled", err);
   23550:	466d      	mov	r5, sp
   23552:	b088      	sub	sp, #32
   23554:	466a      	mov	r2, sp
   23556:	4b1f      	ldr	r3, [pc, #124]	; (235d4 <enable_notifications+0xc8>)
   23558:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   2355c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   23560:	2303      	movs	r3, #3
   23562:	481a      	ldr	r0, [pc, #104]	; (235cc <enable_notifications+0xc0>)
   23564:	f842 3f10 	str.w	r3, [r2, #16]!
   23568:	f011 fdc0 	bl	350ec <z_log_msg_static_create.constprop.0>
   2356c:	46ad      	mov	sp, r5
		LOG_WRN("AT+CSCON is supported in nRF9160 modem >= v1.1.0");
   2356e:	4b1a      	ldr	r3, [pc, #104]	; (235d8 <enable_notifications+0xcc>)
   23570:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   23574:	617b      	str	r3, [r7, #20]
   23576:	2302      	movs	r3, #2
   23578:	4814      	ldr	r0, [pc, #80]	; (235cc <enable_notifications+0xc0>)
   2357a:	f107 0210 	add.w	r2, r7, #16
   2357e:	613b      	str	r3, [r7, #16]
   23580:	f011 fdb4 	bl	350ec <z_log_msg_static_create.constprop.0>
		err = nrf_modem_at_cmd(buf, sizeof(buf), "AT+CGMR");
   23584:	2132      	movs	r1, #50	; 0x32
   23586:	4638      	mov	r0, r7
   23588:	4a14      	ldr	r2, [pc, #80]	; (235dc <enable_notifications+0xd0>)
   2358a:	f003 fe49 	bl	27220 <nrf_modem_at_cmd>
		if (err == 0) {
   2358e:	2800      	cmp	r0, #0
   23590:	d1d5      	bne.n	2353e <enable_notifications+0x32>
			char *end = strstr(buf, "\r\nOK");
   23592:	4638      	mov	r0, r7
   23594:	4912      	ldr	r1, [pc, #72]	; (235e0 <enable_notifications+0xd4>)
   23596:	f013 f98c 	bl	368b2 <strstr>
			if (end) {
   2359a:	b100      	cbz	r0, 2359e <enable_notifications+0x92>
				*end = '\0';
   2359c:	7004      	strb	r4, [r0, #0]
			LOG_WRN("Current modem firmware version: %s", buf);
   2359e:	466d      	mov	r5, sp
   235a0:	b088      	sub	sp, #32
   235a2:	466a      	mov	r2, sp
   235a4:	4b0f      	ldr	r3, [pc, #60]	; (235e4 <enable_notifications+0xd8>)
   235a6:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
   235aa:	e9c2 3705 	strd	r3, r7, [r2, #20]
   235ae:	f44f 7300 	mov.w	r3, #512	; 0x200
   235b2:	8393      	strh	r3, [r2, #28]
   235b4:	4b0c      	ldr	r3, [pc, #48]	; (235e8 <enable_notifications+0xdc>)
   235b6:	4805      	ldr	r0, [pc, #20]	; (235cc <enable_notifications+0xc0>)
   235b8:	f842 3f10 	str.w	r3, [r2, #16]!
   235bc:	f011 fd96 	bl	350ec <z_log_msg_static_create.constprop.0>
   235c0:	46ad      	mov	sp, r5
   235c2:	e7bc      	b.n	2353e <enable_notifications+0x32>
   235c4:	0003f181 	.word	0x0003f181
   235c8:	0003f18c 	.word	0x0003f18c
   235cc:	00037990 	.word	0x00037990
   235d0:	0003fa34 	.word	0x0003fa34
   235d4:	0003f1c2 	.word	0x0003f1c2
   235d8:	0003f1fa 	.word	0x0003f1fa
   235dc:	0003f22b 	.word	0x0003f22b
   235e0:	0003f233 	.word	0x0003f233
   235e4:	0003f238 	.word	0x0003f238
   235e8:	01000003 	.word	0x01000003

000235ec <at_handler_mdmev>:
{
   235ec:	b590      	push	{r4, r7, lr}
   235ee:	4604      	mov	r4, r0
   235f0:	b093      	sub	sp, #76	; 0x4c
   235f2:	af00      	add	r7, sp, #0
	struct lte_lc_evt evt = {0};
   235f4:	2248      	movs	r2, #72	; 0x48
   235f6:	2100      	movs	r1, #0
   235f8:	4638      	mov	r0, r7
   235fa:	f012 ffb5 	bl	36568 <memset>
	__ASSERT_NO_MSG(response != NULL);
   235fe:	b95c      	cbnz	r4, 23618 <at_handler_mdmev+0x2c>
   23600:	4914      	ldr	r1, [pc, #80]	; (23654 <at_handler_mdmev+0x68>)
   23602:	4815      	ldr	r0, [pc, #84]	; (23658 <at_handler_mdmev+0x6c>)
   23604:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
   23608:	4a14      	ldr	r2, [pc, #80]	; (2365c <at_handler_mdmev+0x70>)
   2360a:	f00b fedb 	bl	2f3c4 <assert_print>
   2360e:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
   23612:	4812      	ldr	r0, [pc, #72]	; (2365c <at_handler_mdmev+0x70>)
   23614:	f00b fecf 	bl	2f3b6 <assert_post_action>
	err = parse_mdmev(response, &evt.modem_evt);
   23618:	4620      	mov	r0, r4
   2361a:	f107 0108 	add.w	r1, r7, #8
   2361e:	f001 ffb3 	bl	25588 <parse_mdmev>
	if (err) {
   23622:	b188      	cbz	r0, 23648 <at_handler_mdmev+0x5c>
		LOG_ERR("Can't parse modem event notification, error: %d", err);
   23624:	466c      	mov	r4, sp
   23626:	b088      	sub	sp, #32
   23628:	466a      	mov	r2, sp
   2362a:	4b0d      	ldr	r3, [pc, #52]	; (23660 <at_handler_mdmev+0x74>)
   2362c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   23630:	e9c2 3005 	strd	r3, r0, [r2, #20]
   23634:	2303      	movs	r3, #3
   23636:	480b      	ldr	r0, [pc, #44]	; (23664 <at_handler_mdmev+0x78>)
   23638:	f842 3f10 	str.w	r3, [r2, #16]!
   2363c:	f011 fd56 	bl	350ec <z_log_msg_static_create.constprop.0>
   23640:	46a5      	mov	sp, r4
}
   23642:	374c      	adds	r7, #76	; 0x4c
   23644:	46bd      	mov	sp, r7
   23646:	bd90      	pop	{r4, r7, pc}
	evt.type = LTE_LC_EVT_MODEM_EVENT;
   23648:	230b      	movs	r3, #11
	event_handler_list_dispatch(&evt);
   2364a:	4638      	mov	r0, r7
	evt.type = LTE_LC_EVT_MODEM_EVENT;
   2364c:	703b      	strb	r3, [r7, #0]
	event_handler_list_dispatch(&evt);
   2364e:	f000 ffb7 	bl	245c0 <event_handler_list_dispatch>
   23652:	e7f6      	b.n	23642 <at_handler_mdmev+0x56>
   23654:	0003f289 	.word	0x0003f289
   23658:	00039995 	.word	0x00039995
   2365c:	0003f25b 	.word	0x0003f25b
   23660:	0003f2a1 	.word	0x0003f2a1
   23664:	00037990 	.word	0x00037990

00023668 <at_handler_xmodemsleep>:
{
   23668:	b590      	push	{r4, r7, lr}
   2366a:	4604      	mov	r4, r0
   2366c:	b093      	sub	sp, #76	; 0x4c
   2366e:	af00      	add	r7, sp, #0
	struct lte_lc_evt evt = {0};
   23670:	2248      	movs	r2, #72	; 0x48
   23672:	2100      	movs	r1, #0
   23674:	4638      	mov	r0, r7
   23676:	f012 ff77 	bl	36568 <memset>
	__ASSERT_NO_MSG(response != NULL);
   2367a:	b95c      	cbnz	r4, 23694 <at_handler_xmodemsleep+0x2c>
   2367c:	491e      	ldr	r1, [pc, #120]	; (236f8 <at_handler_xmodemsleep+0x90>)
   2367e:	481f      	ldr	r0, [pc, #124]	; (236fc <at_handler_xmodemsleep+0x94>)
   23680:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
   23684:	4a1e      	ldr	r2, [pc, #120]	; (23700 <at_handler_xmodemsleep+0x98>)
   23686:	f00b fe9d 	bl	2f3c4 <assert_print>
   2368a:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   2368e:	481c      	ldr	r0, [pc, #112]	; (23700 <at_handler_xmodemsleep+0x98>)
   23690:	f00b fe91 	bl	2f3b6 <assert_post_action>
	err = parse_xmodemsleep(response, &evt.modem_sleep);
   23694:	4620      	mov	r0, r4
   23696:	f107 0108 	add.w	r1, r7, #8
   2369a:	f001 fefb 	bl	25494 <parse_xmodemsleep>
	if (err) {
   2369e:	b188      	cbz	r0, 236c4 <at_handler_xmodemsleep+0x5c>
		LOG_ERR("Can't parse modem sleep pre-warning notification, error: %d", err);
   236a0:	466c      	mov	r4, sp
   236a2:	b088      	sub	sp, #32
   236a4:	466a      	mov	r2, sp
   236a6:	4b17      	ldr	r3, [pc, #92]	; (23704 <at_handler_xmodemsleep+0x9c>)
   236a8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   236ac:	e9c2 3005 	strd	r3, r0, [r2, #20]
   236b0:	2303      	movs	r3, #3
   236b2:	4815      	ldr	r0, [pc, #84]	; (23708 <at_handler_xmodemsleep+0xa0>)
   236b4:	f842 3f10 	str.w	r3, [r2, #16]!
   236b8:	f011 fd18 	bl	350ec <z_log_msg_static_create.constprop.0>
   236bc:	46a5      	mov	sp, r4
}
   236be:	374c      	adds	r7, #76	; 0x4c
   236c0:	46bd      	mov	sp, r7
   236c2:	bd90      	pop	{r4, r7, pc}
	if ((evt.modem_sleep.type != LTE_LC_MODEM_SLEEP_PSM) &&
   236c4:	7a3b      	ldrb	r3, [r7, #8]
   236c6:	1e5a      	subs	r2, r3, #1
   236c8:	2a03      	cmp	r2, #3
   236ca:	d901      	bls.n	236d0 <at_handler_xmodemsleep+0x68>
		(evt.modem_sleep.type != LTE_LC_MODEM_SLEEP_FLIGHT_MODE) &&
   236cc:	2b07      	cmp	r3, #7
   236ce:	d1f6      	bne.n	236be <at_handler_xmodemsleep+0x56>
	if (evt.modem_sleep.time == CONFIG_LTE_LC_MODEM_SLEEP_PRE_WARNING_TIME_MS) {
   236d0:	e9d7 2104 	ldrd	r2, r1, [r7, #16]
   236d4:	f5a2 539c 	sub.w	r3, r2, #4992	; 0x1380
   236d8:	3b08      	subs	r3, #8
   236da:	430b      	orrs	r3, r1
   236dc:	d007      	beq.n	236ee <at_handler_xmodemsleep+0x86>
	} else if (evt.modem_sleep.time == 0) {
   236de:	430a      	orrs	r2, r1
   236e0:	d007      	beq.n	236f2 <at_handler_xmodemsleep+0x8a>
   236e2:	230a      	movs	r3, #10
	event_handler_list_dispatch(&evt);
   236e4:	4638      	mov	r0, r7
		evt.type = LTE_LC_EVT_MODEM_SLEEP_EXIT_PRE_WARNING;
   236e6:	703b      	strb	r3, [r7, #0]
	event_handler_list_dispatch(&evt);
   236e8:	f000 ff6a 	bl	245c0 <event_handler_list_dispatch>
   236ec:	e7e7      	b.n	236be <at_handler_xmodemsleep+0x56>
   236ee:	2308      	movs	r3, #8
   236f0:	e7f8      	b.n	236e4 <at_handler_xmodemsleep+0x7c>
   236f2:	2309      	movs	r3, #9
   236f4:	e7f6      	b.n	236e4 <at_handler_xmodemsleep+0x7c>
   236f6:	bf00      	nop
   236f8:	0003f289 	.word	0x0003f289
   236fc:	00039995 	.word	0x00039995
   23700:	0003f25b 	.word	0x0003f25b
   23704:	0003f2d1 	.word	0x0003f2d1
   23708:	00037990 	.word	0x00037990

0002370c <at_handler_ncellmeas>:
{
   2370c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2370e:	4606      	mov	r6, r0
   23710:	b0ab      	sub	sp, #172	; 0xac
   23712:	af00      	add	r7, sp, #0
	struct lte_lc_evt evt = {0};
   23714:	2248      	movs	r2, #72	; 0x48
   23716:	2100      	movs	r1, #0
   23718:	f107 0018 	add.w	r0, r7, #24
   2371c:	f012 ff24 	bl	36568 <memset>
	__ASSERT_NO_MSG(response != NULL);
   23720:	b95e      	cbnz	r6, 2373a <at_handler_ncellmeas+0x2e>
   23722:	4965      	ldr	r1, [pc, #404]	; (238b8 <at_handler_ncellmeas+0x1ac>)
   23724:	4865      	ldr	r0, [pc, #404]	; (238bc <at_handler_ncellmeas+0x1b0>)
   23726:	f240 138b 	movw	r3, #395	; 0x18b
   2372a:	4a65      	ldr	r2, [pc, #404]	; (238c0 <at_handler_ncellmeas+0x1b4>)
   2372c:	f00b fe4a 	bl	2f3c4 <assert_print>
   23730:	f240 118b 	movw	r1, #395	; 0x18b
   23734:	4862      	ldr	r0, [pc, #392]	; (238c0 <at_handler_ncellmeas+0x1b4>)
   23736:	f00b fe3e 	bl	2f3b6 <assert_post_action>
	if (event_handler_list_is_empty() || !ncellmeas_ongoing) {
   2373a:	f000 ff0d 	bl	24558 <event_handler_list_is_empty>
   2373e:	4d61      	ldr	r5, [pc, #388]	; (238c4 <at_handler_ncellmeas+0x1b8>)
   23740:	4601      	mov	r1, r0
   23742:	b9e0      	cbnz	r0, 2377e <at_handler_ncellmeas+0x72>
   23744:	782b      	ldrb	r3, [r5, #0]
   23746:	b1d3      	cbz	r3, 2377e <at_handler_ncellmeas+0x72>
	if (ncellmeas_params.search_type > LTE_LC_NEIGHBOR_SEARCH_TYPE_EXTENDED_COMPLETE) {
   23748:	4c5f      	ldr	r4, [pc, #380]	; (238c8 <at_handler_ncellmeas+0x1bc>)
   2374a:	7823      	ldrb	r3, [r4, #0]
   2374c:	2b03      	cmp	r3, #3
   2374e:	d962      	bls.n	23816 <at_handler_ncellmeas+0x10a>
	struct lte_lc_evt evt = {0};
   23750:	2248      	movs	r2, #72	; 0x48
   23752:	f107 0060 	add.w	r0, r7, #96	; 0x60
   23756:	f012 ff07 	bl	36568 <memset>
	int max_cell_count = ncellmeas_params.gci_count;
   2375a:	7860      	ldrb	r0, [r4, #1]
	if (max_cell_count != 0) {
   2375c:	b1a0      	cbz	r0, 23788 <at_handler_ncellmeas+0x7c>
		cells = k_calloc(max_cell_count, sizeof(struct lte_lc_cell));
   2375e:	2130      	movs	r1, #48	; 0x30
   23760:	f012 feb3 	bl	364ca <k_calloc>
		if (cells == NULL) {
   23764:	4604      	mov	r4, r0
   23766:	b980      	cbnz	r0, 2378a <at_handler_ncellmeas+0x7e>
			LOG_ERR("Failed to allocate memory for the GCI cells");
   23768:	4b58      	ldr	r3, [pc, #352]	; (238cc <at_handler_ncellmeas+0x1c0>)
   2376a:	f107 0210 	add.w	r2, r7, #16
   2376e:	617b      	str	r3, [r7, #20]
   23770:	2302      	movs	r3, #2
   23772:	613b      	str	r3, [r7, #16]
			LOG_ERR("Failed to allocate memory for neighbor cells");
   23774:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   23778:	4855      	ldr	r0, [pc, #340]	; (238d0 <at_handler_ncellmeas+0x1c4>)
   2377a:	f011 fcb7 	bl	350ec <z_log_msg_static_create.constprop.0>
	ncellmeas_ongoing = false;
   2377e:	2300      	movs	r3, #0
}
   23780:	37ac      	adds	r7, #172	; 0xac
	ncellmeas_ongoing = false;
   23782:	702b      	strb	r3, [r5, #0]
}
   23784:	46bd      	mov	sp, r7
   23786:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct lte_lc_cell *cells = NULL;
   23788:	4604      	mov	r4, r0
	err = parse_ncellmeas_gci(&ncellmeas_params, resp, &evt.cells_info);
   2378a:	f107 0268 	add.w	r2, r7, #104	; 0x68
   2378e:	4631      	mov	r1, r6
   23790:	484d      	ldr	r0, [pc, #308]	; (238c8 <at_handler_ncellmeas+0x1bc>)
	evt.cells_info.gci_cells = cells;
   23792:	f8c7 40a4 	str.w	r4, [r7, #164]	; 0xa4
	err = parse_ncellmeas_gci(&ncellmeas_params, resp, &evt.cells_info);
   23796:	f001 fbb1 	bl	24efc <parse_ncellmeas_gci>
	switch (err) {
   2379a:	1dc2      	adds	r2, r0, #7
   2379c:	d011      	beq.n	237c2 <at_handler_ncellmeas+0xb6>
   2379e:	2801      	cmp	r0, #1
   237a0:	d92a      	bls.n	237f8 <at_handler_ncellmeas+0xec>
		LOG_ERR("Parsing of neighbor cells failed, err: %d", err);
   237a2:	466e      	mov	r6, sp
   237a4:	b088      	sub	sp, #32
   237a6:	466a      	mov	r2, sp
   237a8:	4b4a      	ldr	r3, [pc, #296]	; (238d4 <at_handler_ncellmeas+0x1c8>)
   237aa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   237ae:	e9c2 3005 	strd	r3, r0, [r2, #20]
   237b2:	2303      	movs	r3, #3
   237b4:	4846      	ldr	r0, [pc, #280]	; (238d0 <at_handler_ncellmeas+0x1c4>)
   237b6:	f842 3f10 	str.w	r3, [r2, #16]!
   237ba:	f011 fc97 	bl	350ec <z_log_msg_static_create.constprop.0>
   237be:	46b5      	mov	sp, r6
   237c0:	e021      	b.n	23806 <at_handler_ncellmeas+0xfa>
		LOG_WRN("Not all neighbor cells could be parsed");
   237c2:	466e      	mov	r6, sp
   237c4:	4b44      	ldr	r3, [pc, #272]	; (238d8 <at_handler_ncellmeas+0x1cc>)
   237c6:	f107 0210 	add.w	r2, r7, #16
   237ca:	617b      	str	r3, [r7, #20]
   237cc:	2302      	movs	r3, #2
   237ce:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   237d2:	483f      	ldr	r0, [pc, #252]	; (238d0 <at_handler_ncellmeas+0x1c4>)
   237d4:	613b      	str	r3, [r7, #16]
   237d6:	f011 fc89 	bl	350ec <z_log_msg_static_create.constprop.0>
		LOG_WRN("More cells than the configured max count of %d were found",
   237da:	b088      	sub	sp, #32
   237dc:	466a      	mov	r2, sp
   237de:	4b3f      	ldr	r3, [pc, #252]	; (238dc <at_handler_ncellmeas+0x1d0>)
   237e0:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   237e4:	6153      	str	r3, [r2, #20]
   237e6:	230a      	movs	r3, #10
   237e8:	6193      	str	r3, [r2, #24]
   237ea:	2303      	movs	r3, #3
   237ec:	4838      	ldr	r0, [pc, #224]	; (238d0 <at_handler_ncellmeas+0x1c4>)
   237ee:	f842 3f10 	str.w	r3, [r2, #16]!
   237f2:	f011 fc7b 	bl	350ec <z_log_msg_static_create.constprop.0>
   237f6:	46b5      	mov	sp, r6
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   237f8:	2307      	movs	r3, #7
		event_handler_list_dispatch(&evt);
   237fa:	f107 0060 	add.w	r0, r7, #96	; 0x60
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   237fe:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
		event_handler_list_dispatch(&evt);
   23802:	f000 fedd 	bl	245c0 <event_handler_list_dispatch>
	k_free(cells);
   23806:	4620      	mov	r0, r4
   23808:	f012 fe54 	bl	364b4 <k_free>
	k_free(evt.cells_info.neighbor_cells);
   2380c:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
		k_free(neighbor_cells);
   23810:	f012 fe50 	bl	364b4 <k_free>
   23814:	e7b3      	b.n	2377e <at_handler_ncellmeas+0x72>
	int ncell_count = neighborcell_count_get(response);
   23816:	4630      	mov	r0, r6
   23818:	f001 f9b0 	bl	24b7c <neighborcell_count_get>
   2381c:	4604      	mov	r4, r0
	if (ncell_count != 0) {
   2381e:	b158      	cbz	r0, 23838 <at_handler_ncellmeas+0x12c>
		neighbor_cells = k_calloc(ncell_count, sizeof(struct lte_lc_ncell));
   23820:	2110      	movs	r1, #16
   23822:	f012 fe52 	bl	364ca <k_calloc>
		if (neighbor_cells == NULL) {
   23826:	4604      	mov	r4, r0
   23828:	b930      	cbnz	r0, 23838 <at_handler_ncellmeas+0x12c>
			LOG_ERR("Failed to allocate memory for neighbor cells");
   2382a:	4b2d      	ldr	r3, [pc, #180]	; (238e0 <at_handler_ncellmeas+0x1d4>)
   2382c:	f107 0270 	add.w	r2, r7, #112	; 0x70
   23830:	677b      	str	r3, [r7, #116]	; 0x74
   23832:	2302      	movs	r3, #2
   23834:	673b      	str	r3, [r7, #112]	; 0x70
   23836:	e79d      	b.n	23774 <at_handler_ncellmeas+0x68>
	err = parse_ncellmeas(response, &evt.cells_info);
   23838:	4630      	mov	r0, r6
   2383a:	f107 0120 	add.w	r1, r7, #32
	evt.cells_info.neighbor_cells = neighbor_cells;
   2383e:	657c      	str	r4, [r7, #84]	; 0x54
	err = parse_ncellmeas(response, &evt.cells_info);
   23840:	f001 f9c2 	bl	24bc8 <parse_ncellmeas>
	switch (err) {
   23844:	1dc3      	adds	r3, r0, #7
   23846:	d011      	beq.n	2386c <at_handler_ncellmeas+0x160>
   23848:	2801      	cmp	r0, #1
   2384a:	d92a      	bls.n	238a2 <at_handler_ncellmeas+0x196>
		LOG_ERR("Parsing of neighbor cells failed, err: %d", err);
   2384c:	466e      	mov	r6, sp
   2384e:	b088      	sub	sp, #32
   23850:	466a      	mov	r2, sp
   23852:	4b20      	ldr	r3, [pc, #128]	; (238d4 <at_handler_ncellmeas+0x1c8>)
   23854:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   23858:	e9c2 3005 	strd	r3, r0, [r2, #20]
   2385c:	2303      	movs	r3, #3
   2385e:	481c      	ldr	r0, [pc, #112]	; (238d0 <at_handler_ncellmeas+0x1c4>)
   23860:	f842 3f10 	str.w	r3, [r2, #16]!
   23864:	f011 fc42 	bl	350ec <z_log_msg_static_create.constprop.0>
   23868:	46b5      	mov	sp, r6
   2386a:	e020      	b.n	238ae <at_handler_ncellmeas+0x1a2>
		LOG_WRN("Not all neighbor cells could be parsed");
   2386c:	466e      	mov	r6, sp
   2386e:	4b1a      	ldr	r3, [pc, #104]	; (238d8 <at_handler_ncellmeas+0x1cc>)
   23870:	f107 0270 	add.w	r2, r7, #112	; 0x70
   23874:	677b      	str	r3, [r7, #116]	; 0x74
   23876:	2302      	movs	r3, #2
   23878:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   2387c:	4814      	ldr	r0, [pc, #80]	; (238d0 <at_handler_ncellmeas+0x1c4>)
   2387e:	673b      	str	r3, [r7, #112]	; 0x70
   23880:	f011 fc34 	bl	350ec <z_log_msg_static_create.constprop.0>
		LOG_WRN("More cells than the configured max count of %d were found",
   23884:	b088      	sub	sp, #32
   23886:	466a      	mov	r2, sp
   23888:	4b14      	ldr	r3, [pc, #80]	; (238dc <at_handler_ncellmeas+0x1d0>)
   2388a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   2388e:	6153      	str	r3, [r2, #20]
   23890:	230a      	movs	r3, #10
   23892:	6193      	str	r3, [r2, #24]
   23894:	2303      	movs	r3, #3
   23896:	480e      	ldr	r0, [pc, #56]	; (238d0 <at_handler_ncellmeas+0x1c4>)
   23898:	f842 3f10 	str.w	r3, [r2, #16]!
   2389c:	f011 fc26 	bl	350ec <z_log_msg_static_create.constprop.0>
   238a0:	46b5      	mov	sp, r6
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   238a2:	2307      	movs	r3, #7
		event_handler_list_dispatch(&evt);
   238a4:	f107 0018 	add.w	r0, r7, #24
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   238a8:	763b      	strb	r3, [r7, #24]
		event_handler_list_dispatch(&evt);
   238aa:	f000 fe89 	bl	245c0 <event_handler_list_dispatch>
	if (neighbor_cells) {
   238ae:	2c00      	cmp	r4, #0
   238b0:	f43f af65 	beq.w	2377e <at_handler_ncellmeas+0x72>
		k_free(neighbor_cells);
   238b4:	4620      	mov	r0, r4
   238b6:	e7ab      	b.n	23810 <at_handler_ncellmeas+0x104>
   238b8:	0003f289 	.word	0x0003f289
   238bc:	00039995 	.word	0x00039995
   238c0:	0003f25b 	.word	0x0003f25b
   238c4:	20010767 	.word	0x20010767
   238c8:	20010768 	.word	0x20010768
   238cc:	0003f30d 	.word	0x0003f30d
   238d0:	00037990 	.word	0x00037990
   238d4:	0003f39a 	.word	0x0003f39a
   238d8:	0003f339 	.word	0x0003f339
   238dc:	0003f360 	.word	0x0003f360
   238e0:	0003f3c4 	.word	0x0003f3c4

000238e4 <at_handler_xt3412>:
{
   238e4:	b590      	push	{r4, r7, lr}
   238e6:	4604      	mov	r4, r0
   238e8:	b093      	sub	sp, #76	; 0x4c
   238ea:	af00      	add	r7, sp, #0
	struct lte_lc_evt evt = {0};
   238ec:	2248      	movs	r2, #72	; 0x48
   238ee:	2100      	movs	r1, #0
   238f0:	4638      	mov	r0, r7
   238f2:	f012 fe39 	bl	36568 <memset>
	__ASSERT_NO_MSG(response != NULL);
   238f6:	b95c      	cbnz	r4, 23910 <at_handler_xt3412+0x2c>
   238f8:	4918      	ldr	r1, [pc, #96]	; (2395c <at_handler_xt3412+0x78>)
   238fa:	4819      	ldr	r0, [pc, #100]	; (23960 <at_handler_xt3412+0x7c>)
   238fc:	f240 1341 	movw	r3, #321	; 0x141
   23900:	4a18      	ldr	r2, [pc, #96]	; (23964 <at_handler_xt3412+0x80>)
   23902:	f00b fd5f 	bl	2f3c4 <assert_print>
   23906:	f240 1141 	movw	r1, #321	; 0x141
   2390a:	4816      	ldr	r0, [pc, #88]	; (23964 <at_handler_xt3412+0x80>)
   2390c:	f00b fd53 	bl	2f3b6 <assert_post_action>
	err = parse_xt3412(response, &evt.time);
   23910:	4620      	mov	r0, r4
   23912:	f107 0108 	add.w	r1, r7, #8
   23916:	f001 f8c1 	bl	24a9c <parse_xt3412>
	if (err) {
   2391a:	b188      	cbz	r0, 23940 <at_handler_xt3412+0x5c>
		LOG_ERR("Can't parse TAU pre-warning notification, error: %d", err);
   2391c:	466c      	mov	r4, sp
   2391e:	b088      	sub	sp, #32
   23920:	466a      	mov	r2, sp
   23922:	4b11      	ldr	r3, [pc, #68]	; (23968 <at_handler_xt3412+0x84>)
   23924:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   23928:	e9c2 3005 	strd	r3, r0, [r2, #20]
   2392c:	2303      	movs	r3, #3
   2392e:	480f      	ldr	r0, [pc, #60]	; (2396c <at_handler_xt3412+0x88>)
   23930:	f842 3f10 	str.w	r3, [r2, #16]!
   23934:	f011 fbda 	bl	350ec <z_log_msg_static_create.constprop.0>
   23938:	46a5      	mov	sp, r4
}
   2393a:	374c      	adds	r7, #76	; 0x4c
   2393c:	46bd      	mov	sp, r7
   2393e:	bd90      	pop	{r4, r7, pc}
	if (evt.time != CONFIG_LTE_LC_TAU_PRE_WARNING_TIME_MS) {
   23940:	68bb      	ldr	r3, [r7, #8]
   23942:	68fa      	ldr	r2, [r7, #12]
   23944:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
   23948:	3b08      	subs	r3, #8
   2394a:	4313      	orrs	r3, r2
   2394c:	d1f5      	bne.n	2393a <at_handler_xt3412+0x56>
	evt.type = LTE_LC_EVT_TAU_PRE_WARNING;
   2394e:	2306      	movs	r3, #6
	event_handler_list_dispatch(&evt);
   23950:	4638      	mov	r0, r7
	evt.type = LTE_LC_EVT_TAU_PRE_WARNING;
   23952:	703b      	strb	r3, [r7, #0]
	event_handler_list_dispatch(&evt);
   23954:	f000 fe34 	bl	245c0 <event_handler_list_dispatch>
   23958:	e7ef      	b.n	2393a <at_handler_xt3412+0x56>
   2395a:	bf00      	nop
   2395c:	0003f289 	.word	0x0003f289
   23960:	00039995 	.word	0x00039995
   23964:	0003f25b 	.word	0x0003f25b
   23968:	0003f3f1 	.word	0x0003f3f1
   2396c:	00037990 	.word	0x00037990

00023970 <at_handler_cedrxp>:
{
   23970:	b590      	push	{r4, r7, lr}
   23972:	4604      	mov	r4, r0
   23974:	b093      	sub	sp, #76	; 0x4c
   23976:	af00      	add	r7, sp, #0
	struct lte_lc_evt evt = {0};
   23978:	2248      	movs	r2, #72	; 0x48
   2397a:	2100      	movs	r1, #0
   2397c:	4638      	mov	r0, r7
   2397e:	f012 fdf3 	bl	36568 <memset>
	__ASSERT_NO_MSG(response != NULL);
   23982:	b95c      	cbnz	r4, 2399c <at_handler_cedrxp+0x2c>
   23984:	4914      	ldr	r1, [pc, #80]	; (239d8 <at_handler_cedrxp+0x68>)
   23986:	4815      	ldr	r0, [pc, #84]	; (239dc <at_handler_cedrxp+0x6c>)
   23988:	f240 132d 	movw	r3, #301	; 0x12d
   2398c:	4a14      	ldr	r2, [pc, #80]	; (239e0 <at_handler_cedrxp+0x70>)
   2398e:	f00b fd19 	bl	2f3c4 <assert_print>
   23992:	f240 112d 	movw	r1, #301	; 0x12d
   23996:	4812      	ldr	r0, [pc, #72]	; (239e0 <at_handler_cedrxp+0x70>)
   23998:	f00b fd0d 	bl	2f3b6 <assert_post_action>
	err = parse_edrx(response, &evt.edrx_cfg);
   2399c:	4620      	mov	r0, r4
   2399e:	f107 0108 	add.w	r1, r7, #8
   239a2:	f7e6 f8c5 	bl	9b30 <parse_edrx>
	if (err) {
   239a6:	b188      	cbz	r0, 239cc <at_handler_cedrxp+0x5c>
		LOG_ERR("Can't parse eDRX, error: %d", err);
   239a8:	466c      	mov	r4, sp
   239aa:	b088      	sub	sp, #32
   239ac:	466a      	mov	r2, sp
   239ae:	4b0d      	ldr	r3, [pc, #52]	; (239e4 <at_handler_cedrxp+0x74>)
   239b0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   239b4:	e9c2 3005 	strd	r3, r0, [r2, #20]
   239b8:	2303      	movs	r3, #3
   239ba:	480b      	ldr	r0, [pc, #44]	; (239e8 <at_handler_cedrxp+0x78>)
   239bc:	f842 3f10 	str.w	r3, [r2, #16]!
   239c0:	f011 fb94 	bl	350ec <z_log_msg_static_create.constprop.0>
   239c4:	46a5      	mov	sp, r4
}
   239c6:	374c      	adds	r7, #76	; 0x4c
   239c8:	46bd      	mov	sp, r7
   239ca:	bd90      	pop	{r4, r7, pc}
	evt.type = LTE_LC_EVT_EDRX_UPDATE;
   239cc:	2302      	movs	r3, #2
	event_handler_list_dispatch(&evt);
   239ce:	4638      	mov	r0, r7
	evt.type = LTE_LC_EVT_EDRX_UPDATE;
   239d0:	703b      	strb	r3, [r7, #0]
	event_handler_list_dispatch(&evt);
   239d2:	f000 fdf5 	bl	245c0 <event_handler_list_dispatch>
   239d6:	e7f6      	b.n	239c6 <at_handler_cedrxp+0x56>
   239d8:	0003f289 	.word	0x0003f289
   239dc:	00039995 	.word	0x00039995
   239e0:	0003f25b 	.word	0x0003f25b
   239e4:	0003f425 	.word	0x0003f425
   239e8:	00037990 	.word	0x00037990

000239ec <at_handler_cscon>:
{
   239ec:	b590      	push	{r4, r7, lr}
   239ee:	4604      	mov	r4, r0
   239f0:	b093      	sub	sp, #76	; 0x4c
   239f2:	af00      	add	r7, sp, #0
	struct lte_lc_evt evt = {0};
   239f4:	2248      	movs	r2, #72	; 0x48
   239f6:	2100      	movs	r1, #0
   239f8:	4638      	mov	r0, r7
   239fa:	f012 fdb5 	bl	36568 <memset>
	__ASSERT_NO_MSG(response != NULL);
   239fe:	b95c      	cbnz	r4, 23a18 <at_handler_cscon+0x2c>
   23a00:	4915      	ldr	r1, [pc, #84]	; (23a58 <at_handler_cscon+0x6c>)
   23a02:	4816      	ldr	r0, [pc, #88]	; (23a5c <at_handler_cscon+0x70>)
   23a04:	f240 1313 	movw	r3, #275	; 0x113
   23a08:	4a15      	ldr	r2, [pc, #84]	; (23a60 <at_handler_cscon+0x74>)
   23a0a:	f00b fcdb 	bl	2f3c4 <assert_print>
   23a0e:	f240 1113 	movw	r1, #275	; 0x113
   23a12:	4813      	ldr	r0, [pc, #76]	; (23a60 <at_handler_cscon+0x74>)
   23a14:	f00b fccf 	bl	2f3b6 <assert_post_action>
	err = parse_rrc_mode(response, &evt.rrc_mode, AT_CSCON_RRC_MODE_INDEX);
   23a18:	2201      	movs	r2, #1
   23a1a:	4620      	mov	r0, r4
   23a1c:	f107 0108 	add.w	r1, r7, #8
   23a20:	f000 feac 	bl	2477c <parse_rrc_mode>
	if (err) {
   23a24:	b188      	cbz	r0, 23a4a <at_handler_cscon+0x5e>
		LOG_ERR("Can't parse signalling mode, error: %d", err);
   23a26:	466c      	mov	r4, sp
   23a28:	b088      	sub	sp, #32
   23a2a:	466a      	mov	r2, sp
   23a2c:	4b0d      	ldr	r3, [pc, #52]	; (23a64 <at_handler_cscon+0x78>)
   23a2e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   23a32:	e9c2 3005 	strd	r3, r0, [r2, #20]
   23a36:	2303      	movs	r3, #3
   23a38:	480b      	ldr	r0, [pc, #44]	; (23a68 <at_handler_cscon+0x7c>)
   23a3a:	f842 3f10 	str.w	r3, [r2, #16]!
   23a3e:	f011 fb55 	bl	350ec <z_log_msg_static_create.constprop.0>
   23a42:	46a5      	mov	sp, r4
}
   23a44:	374c      	adds	r7, #76	; 0x4c
   23a46:	46bd      	mov	sp, r7
   23a48:	bd90      	pop	{r4, r7, pc}
	evt.type = LTE_LC_EVT_RRC_UPDATE;
   23a4a:	2303      	movs	r3, #3
	event_handler_list_dispatch(&evt);
   23a4c:	4638      	mov	r0, r7
	evt.type = LTE_LC_EVT_RRC_UPDATE;
   23a4e:	703b      	strb	r3, [r7, #0]
	event_handler_list_dispatch(&evt);
   23a50:	f000 fdb6 	bl	245c0 <event_handler_list_dispatch>
   23a54:	e7f6      	b.n	23a44 <at_handler_cscon+0x58>
   23a56:	bf00      	nop
   23a58:	0003f289 	.word	0x0003f289
   23a5c:	00039995 	.word	0x00039995
   23a60:	0003f25b 	.word	0x0003f25b
   23a64:	0003f441 	.word	0x0003f441
   23a68:	00037990 	.word	0x00037990

00023a6c <lte_lc_psm_req>:

	return 0;
}

int lte_lc_psm_req(bool enable)
{
   23a6c:	b598      	push	{r3, r4, r7, lr}
   23a6e:	af00      	add	r7, sp, #0
	int err;

	if (enable) {
   23a70:	b388      	cbz	r0, 23ad6 <lte_lc_psm_req+0x6a>
		if (strlen(psm_param_rptau) == 8 &&
   23a72:	481a      	ldr	r0, [pc, #104]	; (23adc <lte_lc_psm_req+0x70>)
   23a74:	f7e5 fbd5 	bl	9222 <strlen>
   23a78:	4604      	mov	r4, r0
		    strlen(psm_param_rat) == 8) {
   23a7a:	4819      	ldr	r0, [pc, #100]	; (23ae0 <lte_lc_psm_req+0x74>)
   23a7c:	f7e5 fbd1 	bl	9222 <strlen>
		if (strlen(psm_param_rptau) == 8 &&
   23a80:	2c08      	cmp	r4, #8
   23a82:	d11f      	bne.n	23ac4 <lte_lc_psm_req+0x58>
   23a84:	2808      	cmp	r0, #8
   23a86:	d118      	bne.n	23aba <lte_lc_psm_req+0x4e>
			err = nrf_modem_at_printf("AT+CPSMS=1,,,\"%s\",\"%s\"",
   23a88:	4a15      	ldr	r2, [pc, #84]	; (23ae0 <lte_lc_psm_req+0x74>)
   23a8a:	4914      	ldr	r1, [pc, #80]	; (23adc <lte_lc_psm_req+0x70>)
   23a8c:	4815      	ldr	r0, [pc, #84]	; (23ae4 <lte_lc_psm_req+0x78>)
   23a8e:	f003 fb7b 	bl	27188 <nrf_modem_at_printf>
		}
	} else {
		err = nrf_modem_at_printf(psm_disable);
	}

	if (err) {
   23a92:	b180      	cbz	r0, 23ab6 <lte_lc_psm_req+0x4a>
		LOG_ERR("nrf_modem_at_printf failed, reported error: %d", err);
   23a94:	466c      	mov	r4, sp
   23a96:	b088      	sub	sp, #32
   23a98:	466a      	mov	r2, sp
   23a9a:	4b13      	ldr	r3, [pc, #76]	; (23ae8 <lte_lc_psm_req+0x7c>)
   23a9c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   23aa0:	e9c2 3005 	strd	r3, r0, [r2, #20]
   23aa4:	2303      	movs	r3, #3
   23aa6:	4811      	ldr	r0, [pc, #68]	; (23aec <lte_lc_psm_req+0x80>)
   23aa8:	f842 3f10 	str.w	r3, [r2, #16]!
   23aac:	f011 fb1e 	bl	350ec <z_log_msg_static_create.constprop.0>
		return -EFAULT;
   23ab0:	f06f 000d 	mvn.w	r0, #13
   23ab4:	46a5      	mov	sp, r4
	}

	return 0;
}
   23ab6:	46bd      	mov	sp, r7
   23ab8:	bd98      	pop	{r3, r4, r7, pc}
			err = nrf_modem_at_printf("AT+CPSMS=1,,,\"%s\"", psm_param_rptau);
   23aba:	4908      	ldr	r1, [pc, #32]	; (23adc <lte_lc_psm_req+0x70>)
   23abc:	480c      	ldr	r0, [pc, #48]	; (23af0 <lte_lc_psm_req+0x84>)
			err = nrf_modem_at_printf("AT+CPSMS=1,,,,\"%s\"", psm_param_rat);
   23abe:	f003 fb63 	bl	27188 <nrf_modem_at_printf>
   23ac2:	e7e6      	b.n	23a92 <lte_lc_psm_req+0x26>
		} else if (strlen(psm_param_rat) == 8) {
   23ac4:	2808      	cmp	r0, #8
   23ac6:	d102      	bne.n	23ace <lte_lc_psm_req+0x62>
			err = nrf_modem_at_printf("AT+CPSMS=1,,,,\"%s\"", psm_param_rat);
   23ac8:	4905      	ldr	r1, [pc, #20]	; (23ae0 <lte_lc_psm_req+0x74>)
   23aca:	480a      	ldr	r0, [pc, #40]	; (23af4 <lte_lc_psm_req+0x88>)
   23acc:	e7f7      	b.n	23abe <lte_lc_psm_req+0x52>
			err = nrf_modem_at_printf("AT+CPSMS=1");
   23ace:	480a      	ldr	r0, [pc, #40]	; (23af8 <lte_lc_psm_req+0x8c>)
		err = nrf_modem_at_printf(psm_disable);
   23ad0:	f003 fb5a 	bl	27188 <nrf_modem_at_printf>
   23ad4:	e7dd      	b.n	23a92 <lte_lc_psm_req+0x26>
   23ad6:	4809      	ldr	r0, [pc, #36]	; (23afc <lte_lc_psm_req+0x90>)
   23ad8:	e7fa      	b.n	23ad0 <lte_lc_psm_req+0x64>
   23ada:	bf00      	nop
   23adc:	2000ccbf 	.word	0x2000ccbf
   23ae0:	2000ccc8 	.word	0x2000ccc8
   23ae4:	0003f468 	.word	0x0003f468
   23ae8:	0003f4af 	.word	0x0003f4af
   23aec:	00037990 	.word	0x00037990
   23af0:	0003f47f 	.word	0x0003f47f
   23af4:	0003f491 	.word	0x0003f491
   23af8:	0003f4a4 	.word	0x0003f4a4
   23afc:	0003fa3f 	.word	0x0003fa3f

00023b00 <lte_lc_psm_get>:

int lte_lc_psm_get(int *tau, int *active_time)
{
	int err;
	struct lte_lc_psm_cfg psm_cfg;
	char active_time_str[9] = {0};
   23b00:	2300      	movs	r3, #0
{
   23b02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23b06:	b090      	sub	sp, #64	; 0x40
   23b08:	af00      	add	r7, sp, #0
   23b0a:	460d      	mov	r5, r1
	char tau_legacy_str[9] = {0};
	static char response[160] = { 0 };
	const char ch = ',';
	char *comma_ptr;

	if ((tau == NULL) || (active_time == NULL)) {
   23b0c:	4606      	mov	r6, r0
	char active_time_str[9] = {0};
   23b0e:	e9c7 3301 	strd	r3, r3, [r7, #4]
	char tau_ext_str[9] = {0};
   23b12:	e9c7 3304 	strd	r3, r3, [r7, #16]
	char tau_legacy_str[9] = {0};
   23b16:	e9c7 3307 	strd	r3, r3, [r7, #28]
	char active_time_str[9] = {0};
   23b1a:	733b      	strb	r3, [r7, #12]
	char tau_ext_str[9] = {0};
   23b1c:	763b      	strb	r3, [r7, #24]
	char tau_legacy_str[9] = {0};
   23b1e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	if ((tau == NULL) || (active_time == NULL)) {
   23b22:	2800      	cmp	r0, #0
   23b24:	d07e      	beq.n	23c24 <lte_lc_psm_get+0x124>
   23b26:	2900      	cmp	r1, #0
   23b28:	d07c      	beq.n	23c24 <lte_lc_psm_get+0x124>
	 * <Periodic-TAUext>,<Periodic-TAU>]
	 * We need to parse the three last parameters, Active-Time, Periodic-TAU-ext and
	 * Periodic-TAU. N.B. Periodic-TAU will not be present on modem firmwares < 1.2.0.
	 */

	response[0] = '\0';
   23b2a:	4c40      	ldr	r4, [pc, #256]	; (23c2c <lte_lc_psm_get+0x12c>)

	err = nrf_modem_at_cmd(response, sizeof(response), "AT%%XMONITOR");
   23b2c:	21a0      	movs	r1, #160	; 0xa0
   23b2e:	4620      	mov	r0, r4
   23b30:	4a3f      	ldr	r2, [pc, #252]	; (23c30 <lte_lc_psm_get+0x130>)
	response[0] = '\0';
   23b32:	7023      	strb	r3, [r4, #0]
	err = nrf_modem_at_cmd(response, sizeof(response), "AT%%XMONITOR");
   23b34:	f003 fb74 	bl	27220 <nrf_modem_at_cmd>
	if (err) {
   23b38:	b1a8      	cbz	r0, 23b66 <lte_lc_psm_get+0x66>
		LOG_ERR("AT command failed, error: %d", err);
   23b3a:	466c      	mov	r4, sp
   23b3c:	b088      	sub	sp, #32
   23b3e:	466a      	mov	r2, sp
   23b40:	4b3c      	ldr	r3, [pc, #240]	; (23c34 <lte_lc_psm_get+0x134>)
   23b42:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   23b46:	e9c2 3005 	strd	r3, r0, [r2, #20]
   23b4a:	2303      	movs	r3, #3
   23b4c:	483a      	ldr	r0, [pc, #232]	; (23c38 <lte_lc_psm_get+0x138>)
   23b4e:	f842 3f10 	str.w	r3, [r2, #16]!
   23b52:	f011 facb 	bl	350ec <z_log_msg_static_create.constprop.0>
   23b56:	46a5      	mov	sp, r4
		return -EFAULT;
   23b58:	f06f 040d 	mvn.w	r4, #13
	*active_time = psm_cfg.active_time;

	LOG_DBG("TAU: %d sec, active time: %d sec", *tau, *active_time);

	return 0;
}
   23b5c:	4620      	mov	r0, r4
   23b5e:	3740      	adds	r7, #64	; 0x40
   23b60:	46bd      	mov	sp, r7
   23b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	comma_ptr = strchr(response, ch);
   23b66:	4620      	mov	r0, r4
   23b68:	212c      	movs	r1, #44	; 0x2c
   23b6a:	f012 fe5c 	bl	36826 <strchr>
	if (!comma_ptr) {
   23b6e:	4604      	mov	r4, r0
   23b70:	2800      	cmp	r0, #0
   23b72:	d048      	beq.n	23c06 <lte_lc_psm_get+0x106>
   23b74:	f04f 080c 	mov.w	r8, #12
			comma_ptr = strchr(comma_ptr + 1, ch);
   23b78:	1c60      	adds	r0, r4, #1
   23b7a:	212c      	movs	r1, #44	; 0x2c
   23b7c:	f012 fe53 	bl	36826 <strchr>
	for (int i = 0; i < 12; i++) {
   23b80:	f1b8 0801 	subs.w	r8, r8, #1
			comma_ptr = strchr(comma_ptr + 1, ch);
   23b84:	4604      	mov	r4, r0
	for (int i = 0; i < 12; i++) {
   23b86:	d131      	bne.n	23bec <lte_lc_psm_get+0xec>
	if (comma_ptr) {
   23b88:	b390      	cbz	r0, 23bf0 <lte_lc_psm_get+0xf0>
		strncpy(active_time_str, comma_ptr + 2, 8);
   23b8a:	1c81      	adds	r1, r0, #2
   23b8c:	2208      	movs	r2, #8
   23b8e:	1d38      	adds	r0, r7, #4
   23b90:	f012 fe70 	bl	36874 <strncpy>
	comma_ptr = strchr(comma_ptr + 1, ch);
   23b94:	1c60      	adds	r0, r4, #1
   23b96:	212c      	movs	r1, #44	; 0x2c
   23b98:	f012 fe45 	bl	36826 <strchr>
	if (comma_ptr) {
   23b9c:	4604      	mov	r4, r0
   23b9e:	b338      	cbz	r0, 23bf0 <lte_lc_psm_get+0xf0>
		strncpy(tau_ext_str, comma_ptr + 2, 8);
   23ba0:	1c81      	adds	r1, r0, #2
   23ba2:	2208      	movs	r2, #8
   23ba4:	f107 0010 	add.w	r0, r7, #16
   23ba8:	f012 fe64 	bl	36874 <strncpy>
	comma_ptr = strchr(comma_ptr + 1, ch);
   23bac:	212c      	movs	r1, #44	; 0x2c
   23bae:	1c60      	adds	r0, r4, #1
   23bb0:	f012 fe39 	bl	36826 <strchr>
	if (comma_ptr) {
   23bb4:	bb50      	cbnz	r0, 23c0c <lte_lc_psm_get+0x10c>
	err = parse_psm(active_time_str, tau_ext_str, tau_legacy_str, &psm_cfg);
   23bb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
   23bba:	f107 021c 	add.w	r2, r7, #28
   23bbe:	f107 0110 	add.w	r1, r7, #16
   23bc2:	1d38      	adds	r0, r7, #4
   23bc4:	f000 fd46 	bl	24654 <parse_psm>
	if (err) {
   23bc8:	4604      	mov	r4, r0
   23bca:	b330      	cbz	r0, 23c1a <lte_lc_psm_get+0x11a>
		LOG_ERR("Failed to parse PSM configuration, error: %d", err);
   23bcc:	466d      	mov	r5, sp
   23bce:	b088      	sub	sp, #32
   23bd0:	466a      	mov	r2, sp
   23bd2:	4b1a      	ldr	r3, [pc, #104]	; (23c3c <lte_lc_psm_get+0x13c>)
   23bd4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   23bd8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   23bdc:	2303      	movs	r3, #3
   23bde:	4816      	ldr	r0, [pc, #88]	; (23c38 <lte_lc_psm_get+0x138>)
   23be0:	f842 3f10 	str.w	r3, [r2, #16]!
   23be4:	f011 fa82 	bl	350ec <z_log_msg_static_create.constprop.0>
   23be8:	46ad      	mov	sp, r5
		return err;
   23bea:	e7b7      	b.n	23b5c <lte_lc_psm_get+0x5c>
		if (comma_ptr) {
   23bec:	2c00      	cmp	r4, #0
   23bee:	d1c3      	bne.n	23b78 <lte_lc_psm_get+0x78>
		LOG_ERR("AT command parsing failed");
   23bf0:	4b13      	ldr	r3, [pc, #76]	; (23c40 <lte_lc_psm_get+0x140>)
   23bf2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   23bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
   23bf8:	2302      	movs	r3, #2
   23bfa:	480f      	ldr	r0, [pc, #60]	; (23c38 <lte_lc_psm_get+0x138>)
   23bfc:	63bb      	str	r3, [r7, #56]	; 0x38
   23bfe:	f107 0238 	add.w	r2, r7, #56	; 0x38
   23c02:	f011 fa73 	bl	350ec <z_log_msg_static_create.constprop.0>
		return -EBADMSG;
   23c06:	f06f 044c 	mvn.w	r4, #76	; 0x4c
   23c0a:	e7a7      	b.n	23b5c <lte_lc_psm_get+0x5c>
		strncpy(tau_legacy_str, comma_ptr + 2, 8);
   23c0c:	1c81      	adds	r1, r0, #2
   23c0e:	2208      	movs	r2, #8
   23c10:	f107 001c 	add.w	r0, r7, #28
   23c14:	f012 fe2e 	bl	36874 <strncpy>
   23c18:	e7cd      	b.n	23bb6 <lte_lc_psm_get+0xb6>
	*tau = psm_cfg.tau;
   23c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   23c1c:	6033      	str	r3, [r6, #0]
	*active_time = psm_cfg.active_time;
   23c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   23c20:	602b      	str	r3, [r5, #0]
	return 0;
   23c22:	e79b      	b.n	23b5c <lte_lc_psm_get+0x5c>
		return -EINVAL;
   23c24:	f06f 0415 	mvn.w	r4, #21
   23c28:	e798      	b.n	23b5c <lte_lc_psm_get+0x5c>
   23c2a:	bf00      	nop
   23c2c:	200106c2 	.word	0x200106c2
   23c30:	0003f4de 	.word	0x0003f4de
   23c34:	0003f4eb 	.word	0x0003f4eb
   23c38:	00037990 	.word	0x00037990
   23c3c:	0003f522 	.word	0x0003f522
   23c40:	0003f508 	.word	0x0003f508

00023c44 <at_handler_cereg>:
{
   23c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23c48:	4604      	mov	r4, r0
   23c4a:	b0aa      	sub	sp, #168	; 0xa8
   23c4c:	af02      	add	r7, sp, #8
	struct lte_lc_evt evt = {0};
   23c4e:	2248      	movs	r2, #72	; 0x48
   23c50:	2100      	movs	r1, #0
   23c52:	f107 0058 	add.w	r0, r7, #88	; 0x58
   23c56:	f012 fc87 	bl	36568 <memset>
	__ASSERT_NO_MSG(response != NULL);
   23c5a:	b94c      	cbnz	r4, 23c70 <at_handler_cereg+0x2c>
   23c5c:	4960      	ldr	r1, [pc, #384]	; (23de0 <at_handler_cereg+0x19c>)
   23c5e:	4861      	ldr	r0, [pc, #388]	; (23de4 <at_handler_cereg+0x1a0>)
   23c60:	2397      	movs	r3, #151	; 0x97
   23c62:	4a61      	ldr	r2, [pc, #388]	; (23de8 <at_handler_cereg+0x1a4>)
   23c64:	f00b fbae 	bl	2f3c4 <assert_print>
   23c68:	2197      	movs	r1, #151	; 0x97
   23c6a:	485f      	ldr	r0, [pc, #380]	; (23de8 <at_handler_cereg+0x1a4>)
   23c6c:	f00b fba3 	bl	2f3b6 <assert_post_action>
	enum lte_lc_nw_reg_status reg_status = 0;
   23c70:	2500      	movs	r5, #0
	struct lte_lc_cell cell = {0};
   23c72:	2230      	movs	r2, #48	; 0x30
   23c74:	4629      	mov	r1, r5
   23c76:	f107 0028 	add.w	r0, r7, #40	; 0x28
	enum lte_lc_nw_reg_status reg_status = 0;
   23c7a:	71bd      	strb	r5, [r7, #6]
	struct lte_lc_psm_cfg psm_cfg = {0};
   23c7c:	f107 0808 	add.w	r8, r7, #8
	struct lte_lc_cell cell = {0};
   23c80:	f012 fc72 	bl	36568 <memset>
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
   23c84:	1dfb      	adds	r3, r7, #7
	struct lte_lc_psm_cfg psm_cfg = {0};
   23c86:	60bd      	str	r5, [r7, #8]
   23c88:	f8c8 5004 	str.w	r5, [r8, #4]
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
   23c8c:	2101      	movs	r1, #1
   23c8e:	9300      	str	r3, [sp, #0]
   23c90:	4620      	mov	r0, r4
   23c92:	f107 0328 	add.w	r3, r7, #40	; 0x28
   23c96:	1dba      	adds	r2, r7, #6
   23c98:	f000 fde2 	bl	24860 <parse_cereg>
	if (err) {
   23c9c:	b1b0      	cbz	r0, 23ccc <at_handler_cereg+0x88>
		LOG_ERR("Failed to parse notification (error %d): %s",
   23c9e:	466d      	mov	r5, sp
   23ca0:	b08a      	sub	sp, #40	; 0x28
   23ca2:	aa02      	add	r2, sp, #8
   23ca4:	4b51      	ldr	r3, [pc, #324]	; (23dec <at_handler_cereg+0x1a8>)
   23ca6:	61d4      	str	r4, [r2, #28]
   23ca8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   23cac:	f240 3301 	movw	r3, #769	; 0x301
   23cb0:	8413      	strh	r3, [r2, #32]
   23cb2:	4b4f      	ldr	r3, [pc, #316]	; (23df0 <at_handler_cereg+0x1ac>)
   23cb4:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   23cb8:	484e      	ldr	r0, [pc, #312]	; (23df4 <at_handler_cereg+0x1b0>)
   23cba:	f842 3f10 	str.w	r3, [r2, #16]!
   23cbe:	f011 fa15 	bl	350ec <z_log_msg_static_create.constprop.0>
   23cc2:	46ad      	mov	sp, r5
}
   23cc4:	37a0      	adds	r7, #160	; 0xa0
   23cc6:	46bd      	mov	sp, r7
   23cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   23ccc:	79bb      	ldrb	r3, [r7, #6]
   23cce:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   23cd2:	2b01      	cmp	r3, #1
   23cd4:	d104      	bne.n	23ce0 <at_handler_cereg+0x9c>
	if (cellid == LTE_LC_CELL_EUTRAN_ID_INVALID) {
   23cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   23cd8:	3301      	adds	r3, #1
   23cda:	d162      	bne.n	23da2 <at_handler_cereg+0x15e>
			reg_status = LTE_LC_NW_REG_UNKNOWN;
   23cdc:	2304      	movs	r3, #4
   23cde:	71bb      	strb	r3, [r7, #6]
	if (event_handler_list_is_empty()) {
   23ce0:	f000 fc3a 	bl	24558 <event_handler_list_is_empty>
   23ce4:	2800      	cmp	r0, #0
   23ce6:	d1ed      	bne.n	23cc4 <at_handler_cereg+0x80>
	if (reg_status != prev_reg_status) {
   23ce8:	4a43      	ldr	r2, [pc, #268]	; (23df8 <at_handler_cereg+0x1b4>)
   23cea:	79bb      	ldrb	r3, [r7, #6]
   23cec:	7811      	ldrb	r1, [r2, #0]
   23cee:	4299      	cmp	r1, r3
   23cf0:	d008      	beq.n	23d04 <at_handler_cereg+0xc0>
		evt.type = LTE_LC_EVT_NW_REG_STATUS;
   23cf2:	f887 0058 	strb.w	r0, [r7, #88]	; 0x58
		event_handler_list_dispatch(&evt);
   23cf6:	f107 0058 	add.w	r0, r7, #88	; 0x58
		prev_reg_status = reg_status;
   23cfa:	7013      	strb	r3, [r2, #0]
		evt.nw_reg_status = reg_status;
   23cfc:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
		event_handler_list_dispatch(&evt);
   23d00:	f000 fc5e 	bl	245c0 <event_handler_list_dispatch>
	if ((cell.id != prev_cell.id) || (cell.tac != prev_cell.tac)) {
   23d04:	4b3d      	ldr	r3, [pc, #244]	; (23dfc <at_handler_cereg+0x1b8>)
   23d06:	6b39      	ldr	r1, [r7, #48]	; 0x30
   23d08:	689a      	ldr	r2, [r3, #8]
   23d0a:	4291      	cmp	r1, r2
   23d0c:	d103      	bne.n	23d16 <at_handler_cereg+0xd2>
   23d0e:	68db      	ldr	r3, [r3, #12]
   23d10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   23d12:	429a      	cmp	r2, r3
   23d14:	d01d      	beq.n	23d52 <at_handler_cereg+0x10e>
		evt.type = LTE_LC_EVT_CELL_UPDATE;
   23d16:	2304      	movs	r3, #4
		memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
   23d18:	4d38      	ldr	r5, [pc, #224]	; (23dfc <at_handler_cereg+0x1b8>)
   23d1a:	f107 0428 	add.w	r4, r7, #40	; 0x28
		evt.type = LTE_LC_EVT_CELL_UPDATE;
   23d1e:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
   23d22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   23d24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   23d26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   23d28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   23d2a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   23d2e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		memcpy(&evt.cell, &cell, sizeof(struct lte_lc_cell));
   23d32:	f107 0660 	add.w	r6, r7, #96	; 0x60
   23d36:	f107 0528 	add.w	r5, r7, #40	; 0x28
   23d3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   23d3c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   23d3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   23d40:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   23d42:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   23d46:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		event_handler_list_dispatch(&evt);
   23d4a:	f107 0058 	add.w	r0, r7, #88	; 0x58
   23d4e:	f000 fc37 	bl	245c0 <event_handler_list_dispatch>
	if (lte_mode != prev_lte_mode) {
   23d52:	4a2b      	ldr	r2, [pc, #172]	; (23e00 <at_handler_cereg+0x1bc>)
   23d54:	79fb      	ldrb	r3, [r7, #7]
   23d56:	7811      	ldrb	r1, [r2, #0]
   23d58:	4299      	cmp	r1, r3
   23d5a:	d009      	beq.n	23d70 <at_handler_cereg+0x12c>
		prev_lte_mode = lte_mode;
   23d5c:	7013      	strb	r3, [r2, #0]
		evt.type = LTE_LC_EVT_LTE_MODE_UPDATE;
   23d5e:	2205      	movs	r2, #5
		event_handler_list_dispatch(&evt);
   23d60:	f107 0058 	add.w	r0, r7, #88	; 0x58
		evt.type = LTE_LC_EVT_LTE_MODE_UPDATE;
   23d64:	f887 2058 	strb.w	r2, [r7, #88]	; 0x58
		evt.lte_mode = lte_mode;
   23d68:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
		event_handler_list_dispatch(&evt);
   23d6c:	f000 fc28 	bl	245c0 <event_handler_list_dispatch>
	if ((reg_status != LTE_LC_NW_REG_REGISTERED_HOME) &&
   23d70:	79bb      	ldrb	r3, [r7, #6]
   23d72:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   23d76:	2b01      	cmp	r3, #1
   23d78:	d1a4      	bne.n	23cc4 <at_handler_cereg+0x80>
	err = lte_lc_psm_get(&psm_cfg.tau, &psm_cfg.active_time);
   23d7a:	4640      	mov	r0, r8
   23d7c:	f107 010c 	add.w	r1, r7, #12
   23d80:	f7ff febe 	bl	23b00 <lte_lc_psm_get>
	if (err) {
   23d84:	b188      	cbz	r0, 23daa <at_handler_cereg+0x166>
		if (err != -EBADMSG) {
   23d86:	304d      	adds	r0, #77	; 0x4d
   23d88:	d09c      	beq.n	23cc4 <at_handler_cereg+0x80>
			LOG_ERR("Failed to get PSM information");
   23d8a:	4b1e      	ldr	r3, [pc, #120]	; (23e04 <at_handler_cereg+0x1c0>)
   23d8c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   23d90:	627b      	str	r3, [r7, #36]	; 0x24
   23d92:	2302      	movs	r3, #2
   23d94:	4817      	ldr	r0, [pc, #92]	; (23df4 <at_handler_cereg+0x1b0>)
   23d96:	f107 0220 	add.w	r2, r7, #32
   23d9a:	623b      	str	r3, [r7, #32]
   23d9c:	f011 f9a6 	bl	350ec <z_log_msg_static_create.constprop.0>
   23da0:	e790      	b.n	23cc4 <at_handler_cereg+0x80>
	z_impl_k_sem_give(sem);
   23da2:	4819      	ldr	r0, [pc, #100]	; (23e08 <at_handler_cereg+0x1c4>)
   23da4:	f005 fc80 	bl	296a8 <z_impl_k_sem_give>
}
   23da8:	e79a      	b.n	23ce0 <at_handler_cereg+0x9c>
	if ((psm_cfg.tau != prev_psm_cfg.tau) ||
   23daa:	4b18      	ldr	r3, [pc, #96]	; (23e0c <at_handler_cereg+0x1c8>)
   23dac:	68b9      	ldr	r1, [r7, #8]
   23dae:	681a      	ldr	r2, [r3, #0]
   23db0:	4291      	cmp	r1, r2
   23db2:	461a      	mov	r2, r3
   23db4:	d103      	bne.n	23dbe <at_handler_cereg+0x17a>
   23db6:	685b      	ldr	r3, [r3, #4]
   23db8:	68f9      	ldr	r1, [r7, #12]
   23dba:	4299      	cmp	r1, r3
   23dbc:	d082      	beq.n	23cc4 <at_handler_cereg+0x80>
		memcpy(&prev_psm_cfg, &psm_cfg, sizeof(struct lte_lc_psm_cfg));
   23dbe:	e898 0003 	ldmia.w	r8, {r0, r1}
		evt.type = LTE_LC_EVT_PSM_UPDATE;
   23dc2:	2301      	movs	r3, #1
   23dc4:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		memcpy(&evt.psm_cfg, &psm_cfg, sizeof(struct lte_lc_psm_cfg));
   23dc8:	f107 0360 	add.w	r3, r7, #96	; 0x60
		memcpy(&prev_psm_cfg, &psm_cfg, sizeof(struct lte_lc_psm_cfg));
   23dcc:	e882 0003 	stmia.w	r2, {r0, r1}
		memcpy(&evt.psm_cfg, &psm_cfg, sizeof(struct lte_lc_psm_cfg));
   23dd0:	e883 0003 	stmia.w	r3, {r0, r1}
		event_handler_list_dispatch(&evt);
   23dd4:	f107 0058 	add.w	r0, r7, #88	; 0x58
   23dd8:	f000 fbf2 	bl	245c0 <event_handler_list_dispatch>
   23ddc:	e772      	b.n	23cc4 <at_handler_cereg+0x80>
   23dde:	bf00      	nop
   23de0:	0003f289 	.word	0x0003f289
   23de4:	00039995 	.word	0x00039995
   23de8:	0003f25b 	.word	0x0003f25b
   23dec:	0003f54f 	.word	0x0003f54f
   23df0:	01000004 	.word	0x01000004
   23df4:	00037990 	.word	0x00037990
   23df8:	20010763 	.word	0x20010763
   23dfc:	2000dfc8 	.word	0x2000dfc8
   23e00:	20010762 	.word	0x20010762
   23e04:	0003f57b 	.word	0x0003f57b
   23e08:	2000eae4 	.word	0x2000eae4
   23e0c:	2000eadc 	.word	0x2000eadc

00023e10 <lte_lc_edrx_req>:
}

int lte_lc_edrx_req(bool enable)
{
	int err;
	int actt[] = {AT_CEDRXS_ACTT_WB, AT_CEDRXS_ACTT_NB};
   23e10:	2104      	movs	r1, #4
   23e12:	2305      	movs	r3, #5
{
   23e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23e18:	b085      	sub	sp, #20
   23e1a:	af00      	add	r7, sp, #0
	int actt[] = {AT_CEDRXS_ACTT_WB, AT_CEDRXS_ACTT_NB};
   23e1c:	e9c7 1302 	strd	r1, r3, [r7, #8]

	if (!enable) {
   23e20:	b9c8      	cbnz	r0, 23e56 <lte_lc_edrx_req+0x46>
		err = nrf_modem_at_printf(edrx_disable);
   23e22:	482b      	ldr	r0, [pc, #172]	; (23ed0 <lte_lc_edrx_req+0xc0>)
   23e24:	f003 f9b0 	bl	27188 <nrf_modem_at_printf>
		if (err) {
   23e28:	2800      	cmp	r0, #0
   23e2a:	d04f      	beq.n	23ecc <lte_lc_edrx_req+0xbc>
			LOG_ERR("Failed to disable eDRX, reported error: %d", err);
   23e2c:	466c      	mov	r4, sp
   23e2e:	b088      	sub	sp, #32
   23e30:	466a      	mov	r2, sp
   23e32:	4b28      	ldr	r3, [pc, #160]	; (23ed4 <lte_lc_edrx_req+0xc4>)
		} else {
			err = nrf_modem_at_printf("AT+CEDRXS=2,%d", actt[i]);
		}

		if (err) {
			LOG_ERR("Failed to enable eDRX, reported error: %d", err);
   23e34:	e9c2 3005 	strd	r3, r0, [r2, #20]
   23e38:	2303      	movs	r3, #3
   23e3a:	4827      	ldr	r0, [pc, #156]	; (23ed8 <lte_lc_edrx_req+0xc8>)
   23e3c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   23e40:	f842 3f10 	str.w	r3, [r2, #16]!
   23e44:	f011 f952 	bl	350ec <z_log_msg_static_create.constprop.0>
			return -EFAULT;
   23e48:	f06f 000d 	mvn.w	r0, #13
   23e4c:	46a5      	mov	sp, r4
			return -EFAULT;
		}
	}

	return 0;
}
   23e4e:	3714      	adds	r7, #20
   23e50:	46bd      	mov	sp, r7
   23e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < ARRAY_SIZE(actt); i++) {
   23e56:	2600      	movs	r6, #0
					edrx_param_ltem : edrx_param_nbiot;
   23e58:	f8df 9080 	ldr.w	r9, [pc, #128]	; 23edc <lte_lc_edrx_req+0xcc>
   23e5c:	f8df a080 	ldr.w	sl, [pc, #128]	; 23ee0 <lte_lc_edrx_req+0xd0>
   23e60:	f8df b080 	ldr.w	fp, [pc, #128]	; 23ee4 <lte_lc_edrx_req+0xd4>
   23e64:	f107 0808 	add.w	r8, r7, #8
		char *edrx_param = (actt[i] == AT_CEDRXS_ACTT_WB) ?
   23e68:	f858 4b04 	ldr.w	r4, [r8], #4
					edrx_param_ltem : edrx_param_nbiot;
   23e6c:	4d1e      	ldr	r5, [pc, #120]	; (23ee8 <lte_lc_edrx_req+0xd8>)
   23e6e:	2c04      	cmp	r4, #4
   23e70:	bf14      	ite	ne
   23e72:	464a      	movne	r2, r9
   23e74:	4652      	moveq	r2, sl
		if (strlen(edrx_param) == 4) {
   23e76:	4610      	mov	r0, r2
					edrx_param_ltem : edrx_param_nbiot;
   23e78:	bf18      	it	ne
   23e7a:	465d      	movne	r5, fp
		if (strlen(edrx_param) == 4) {
   23e7c:	607a      	str	r2, [r7, #4]
   23e7e:	f7e5 f9d0 	bl	9222 <strlen>
   23e82:	2804      	cmp	r0, #4
			err = nrf_modem_at_printf("AT+CEDRXS=2,%d,\"%s\"", actt[i], edrx_param);
   23e84:	4621      	mov	r1, r4
		if (strlen(edrx_param) == 4) {
   23e86:	687a      	ldr	r2, [r7, #4]
   23e88:	d10a      	bne.n	23ea0 <lte_lc_edrx_req+0x90>
			err = nrf_modem_at_printf("AT+CEDRXS=2,%d,\"%s\"", actt[i], edrx_param);
   23e8a:	4818      	ldr	r0, [pc, #96]	; (23eec <lte_lc_edrx_req+0xdc>)
   23e8c:	f003 f97c 	bl	27188 <nrf_modem_at_printf>
		if (err) {
   23e90:	b150      	cbz	r0, 23ea8 <lte_lc_edrx_req+0x98>
			LOG_ERR("Failed to enable eDRX, reported error: %d", err);
   23e92:	466c      	mov	r4, sp
   23e94:	b088      	sub	sp, #32
   23e96:	466a      	mov	r2, sp
   23e98:	4b15      	ldr	r3, [pc, #84]	; (23ef0 <lte_lc_edrx_req+0xe0>)
   23e9a:	e7cb      	b.n	23e34 <lte_lc_edrx_req+0x24>
	for (size_t i = 0; i < ARRAY_SIZE(actt); i++) {
   23e9c:	2601      	movs	r6, #1
   23e9e:	e7e3      	b.n	23e68 <lte_lc_edrx_req+0x58>
			err = nrf_modem_at_printf("AT+CEDRXS=2,%d", actt[i]);
   23ea0:	4814      	ldr	r0, [pc, #80]	; (23ef4 <lte_lc_edrx_req+0xe4>)
   23ea2:	f003 f971 	bl	27188 <nrf_modem_at_printf>
   23ea6:	e7f3      	b.n	23e90 <lte_lc_edrx_req+0x80>
		if (strlen(ptw_param) != 4) {
   23ea8:	4628      	mov	r0, r5
   23eaa:	f7e5 f9ba 	bl	9222 <strlen>
   23eae:	2804      	cmp	r0, #4
   23eb0:	d10a      	bne.n	23ec8 <lte_lc_edrx_req+0xb8>
		err = nrf_modem_at_printf("AT%%XPTW=%d,\"%s\"", actt[i], ptw_param);
   23eb2:	462a      	mov	r2, r5
   23eb4:	4621      	mov	r1, r4
   23eb6:	4810      	ldr	r0, [pc, #64]	; (23ef8 <lte_lc_edrx_req+0xe8>)
   23eb8:	f003 f966 	bl	27188 <nrf_modem_at_printf>
		if (err) {
   23ebc:	b120      	cbz	r0, 23ec8 <lte_lc_edrx_req+0xb8>
			LOG_ERR("Failed to request PTW, reported error: %d", err);
   23ebe:	466c      	mov	r4, sp
   23ec0:	b088      	sub	sp, #32
   23ec2:	466a      	mov	r2, sp
   23ec4:	4b0d      	ldr	r3, [pc, #52]	; (23efc <lte_lc_edrx_req+0xec>)
   23ec6:	e7b5      	b.n	23e34 <lte_lc_edrx_req+0x24>
	for (size_t i = 0; i < ARRAY_SIZE(actt); i++) {
   23ec8:	2e00      	cmp	r6, #0
   23eca:	d0e7      	beq.n	23e9c <lte_lc_edrx_req+0x8c>
		return 0;
   23ecc:	2000      	movs	r0, #0
   23ece:	e7be      	b.n	23e4e <lte_lc_edrx_req+0x3e>
   23ed0:	0003fa49 	.word	0x0003fa49
   23ed4:	0003f599 	.word	0x0003f599
   23ed8:	00037990 	.word	0x00037990
   23edc:	2000ccd1 	.word	0x2000ccd1
   23ee0:	2000ccd6 	.word	0x2000ccd6
   23ee4:	2001076a 	.word	0x2001076a
   23ee8:	2001076f 	.word	0x2001076f
   23eec:	0003f5c4 	.word	0x0003f5c4
   23ef0:	0003f5e7 	.word	0x0003f5e7
   23ef4:	0003f5d8 	.word	0x0003f5d8
   23ef8:	0003f611 	.word	0x0003f611
   23efc:	0003f622 	.word	0x0003f622

00023f00 <lte_lc_nw_reg_status_get>:

int lte_lc_nw_reg_status_get(enum lte_lc_nw_reg_status *status)
{
	int err;
	uint16_t status_tmp;
	uint32_t cell_id = 0;
   23f00:	2300      	movs	r3, #0
{
   23f02:	b590      	push	{r4, r7, lr}
   23f04:	b083      	sub	sp, #12
   23f06:	af00      	add	r7, sp, #0

	if (status == NULL) {
   23f08:	4604      	mov	r4, r0
	uint32_t cell_id = 0;
   23f0a:	607b      	str	r3, [r7, #4]
	if (status == NULL) {
   23f0c:	b320      	cbz	r0, 23f58 <lte_lc_nw_reg_status_get+0x58>
		return -EINVAL;
	}

	/* Read network registration status */
	err = nrf_modem_at_scanf("AT+CEREG?",
   23f0e:	4914      	ldr	r1, [pc, #80]	; (23f60 <lte_lc_nw_reg_status_get+0x60>)
   23f10:	4814      	ldr	r0, [pc, #80]	; (23f64 <lte_lc_nw_reg_status_get+0x64>)
   23f12:	1d3b      	adds	r3, r7, #4
   23f14:	1cba      	adds	r2, r7, #2
   23f16:	f003 fa17 	bl	27348 <nrf_modem_at_scanf>
		"%hu,"		/* <stat> */
		"%*[^,],"	/* <tac> */
		"\"%x\",",	/* <ci> */
		&status_tmp,
		&cell_id);
	if (err < 1) {
   23f1a:	2800      	cmp	r0, #0
   23f1c:	dc13      	bgt.n	23f46 <lte_lc_nw_reg_status_get+0x46>
		LOG_ERR("Could not get registration status, error: %d", err);
   23f1e:	466c      	mov	r4, sp
   23f20:	b088      	sub	sp, #32
   23f22:	466a      	mov	r2, sp
   23f24:	4b10      	ldr	r3, [pc, #64]	; (23f68 <lte_lc_nw_reg_status_get+0x68>)
   23f26:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   23f2a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   23f2e:	2303      	movs	r3, #3
   23f30:	480e      	ldr	r0, [pc, #56]	; (23f6c <lte_lc_nw_reg_status_get+0x6c>)
   23f32:	f842 3f10 	str.w	r3, [r2, #16]!
   23f36:	f011 f8d9 	bl	350ec <z_log_msg_static_create.constprop.0>
		return -EFAULT;
   23f3a:	f06f 000d 	mvn.w	r0, #13
   23f3e:	46a5      	mov	sp, r4
	} else {
		*status = status_tmp;
	}

	return 0;
}
   23f40:	370c      	adds	r7, #12
   23f42:	46bd      	mov	sp, r7
   23f44:	bd90      	pop	{r4, r7, pc}
	if (cellid == LTE_LC_CELL_EUTRAN_ID_INVALID) {
   23f46:	687b      	ldr	r3, [r7, #4]
   23f48:	3301      	adds	r3, #1
   23f4a:	d103      	bne.n	23f54 <lte_lc_nw_reg_status_get+0x54>
   23f4c:	2304      	movs	r3, #4
	return 0;
   23f4e:	2000      	movs	r0, #0
		*status = LTE_LC_NW_REG_UNKNOWN;
   23f50:	7023      	strb	r3, [r4, #0]
   23f52:	e7f5      	b.n	23f40 <lte_lc_nw_reg_status_get+0x40>
		*status = status_tmp;
   23f54:	78bb      	ldrb	r3, [r7, #2]
   23f56:	e7fa      	b.n	23f4e <lte_lc_nw_reg_status_get+0x4e>
		return -EINVAL;
   23f58:	f06f 0015 	mvn.w	r0, #21
   23f5c:	e7f0      	b.n	23f40 <lte_lc_nw_reg_status_get+0x40>
   23f5e:	bf00      	nop
   23f60:	0003f64c 	.word	0x0003f64c
   23f64:	0003f669 	.word	0x0003f669
   23f68:	0003f673 	.word	0x0003f673
   23f6c:	00037990 	.word	0x00037990

00023f70 <lte_lc_system_mode_set>:

int lte_lc_system_mode_set(enum lte_lc_system_mode mode,
			   enum lte_lc_system_mode_preference preference)
{
   23f70:	b5b0      	push	{r4, r5, r7, lr}
	int err;

	switch (mode) {
   23f72:	2807      	cmp	r0, #7
{
   23f74:	4605      	mov	r5, r0
   23f76:	460c      	mov	r4, r1
   23f78:	af00      	add	r7, sp, #0
	switch (mode) {
   23f7a:	d912      	bls.n	23fa2 <lte_lc_system_mode_set+0x32>
	case LTE_LC_SYSTEM_MODE_GPS:
	case LTE_LC_SYSTEM_MODE_LTEM_NBIOT:
	case LTE_LC_SYSTEM_MODE_LTEM_NBIOT_GPS:
		break;
	default:
		LOG_ERR("Invalid system mode requested: %d", mode);
   23f7c:	466c      	mov	r4, sp
   23f7e:	b088      	sub	sp, #32
   23f80:	466a      	mov	r2, sp
   23f82:	4b23      	ldr	r3, [pc, #140]	; (24010 <lte_lc_system_mode_set+0xa0>)
   23f84:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   23f88:	e9c2 3005 	strd	r3, r0, [r2, #20]
   23f8c:	2303      	movs	r3, #3
   23f8e:	4821      	ldr	r0, [pc, #132]	; (24014 <lte_lc_system_mode_set+0xa4>)
   23f90:	f842 3f10 	str.w	r3, [r2, #16]!
   23f94:	f011 f8aa 	bl	350ec <z_log_msg_static_create.constprop.0>
   23f98:	46a5      	mov	sp, r4
		return -EINVAL;
   23f9a:	f06f 0015 	mvn.w	r0, #21
	sys_mode_target = mode;
	mode_pref_current = preference;
	mode_pref_target = preference;

	return 0;
}
   23f9e:	46bd      	mov	sp, r7
   23fa0:	bdb0      	pop	{r4, r5, r7, pc}
	switch (preference) {
   23fa2:	2904      	cmp	r1, #4
   23fa4:	d90f      	bls.n	23fc6 <lte_lc_system_mode_set+0x56>
		LOG_ERR("Invalid LTE preference requested: %d", preference);
   23fa6:	466d      	mov	r5, sp
   23fa8:	b088      	sub	sp, #32
   23faa:	466a      	mov	r2, sp
   23fac:	4b1a      	ldr	r3, [pc, #104]	; (24018 <lte_lc_system_mode_set+0xa8>)
   23fae:	4819      	ldr	r0, [pc, #100]	; (24014 <lte_lc_system_mode_set+0xa4>)
   23fb0:	e9c2 3105 	strd	r3, r1, [r2, #20]
   23fb4:	2303      	movs	r3, #3
   23fb6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   23fba:	f842 3f10 	str.w	r3, [r2, #16]!
   23fbe:	f011 f895 	bl	350ec <z_log_msg_static_create.constprop.0>
   23fc2:	46ad      	mov	sp, r5
		return -EINVAL;
   23fc4:	e7e9      	b.n	23f9a <lte_lc_system_mode_set+0x2a>
	err = nrf_modem_at_printf("AT%%XSYSTEMMODE=%s,%c",
   23fc6:	4b15      	ldr	r3, [pc, #84]	; (2401c <lte_lc_system_mode_set+0xac>)
   23fc8:	5c5a      	ldrb	r2, [r3, r1]
   23fca:	4b15      	ldr	r3, [pc, #84]	; (24020 <lte_lc_system_mode_set+0xb0>)
   23fcc:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   23fd0:	4814      	ldr	r0, [pc, #80]	; (24024 <lte_lc_system_mode_set+0xb4>)
   23fd2:	f003 f8d9 	bl	27188 <nrf_modem_at_printf>
	if (err) {
   23fd6:	b188      	cbz	r0, 23ffc <lte_lc_system_mode_set+0x8c>
		LOG_ERR("Could not send AT command, error: %d", err);
   23fd8:	466c      	mov	r4, sp
   23fda:	b088      	sub	sp, #32
   23fdc:	466a      	mov	r2, sp
   23fde:	4b12      	ldr	r3, [pc, #72]	; (24028 <lte_lc_system_mode_set+0xb8>)
   23fe0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   23fe4:	e9c2 3005 	strd	r3, r0, [r2, #20]
   23fe8:	2303      	movs	r3, #3
   23fea:	480a      	ldr	r0, [pc, #40]	; (24014 <lte_lc_system_mode_set+0xa4>)
   23fec:	f842 3f10 	str.w	r3, [r2, #16]!
   23ff0:	f011 f87c 	bl	350ec <z_log_msg_static_create.constprop.0>
		return -EFAULT;
   23ff4:	f06f 000d 	mvn.w	r0, #13
   23ff8:	46a5      	mov	sp, r4
   23ffa:	e7d0      	b.n	23f9e <lte_lc_system_mode_set+0x2e>
	sys_mode_current = mode;
   23ffc:	4b0b      	ldr	r3, [pc, #44]	; (2402c <lte_lc_system_mode_set+0xbc>)
   23ffe:	701d      	strb	r5, [r3, #0]
	sys_mode_target = mode;
   24000:	4b0b      	ldr	r3, [pc, #44]	; (24030 <lte_lc_system_mode_set+0xc0>)
   24002:	701d      	strb	r5, [r3, #0]
	mode_pref_current = preference;
   24004:	4b0b      	ldr	r3, [pc, #44]	; (24034 <lte_lc_system_mode_set+0xc4>)
   24006:	701c      	strb	r4, [r3, #0]
	mode_pref_target = preference;
   24008:	4b0b      	ldr	r3, [pc, #44]	; (24038 <lte_lc_system_mode_set+0xc8>)
   2400a:	701c      	strb	r4, [r3, #0]
	return 0;
   2400c:	e7c7      	b.n	23f9e <lte_lc_system_mode_set+0x2e>
   2400e:	bf00      	nop
   24010:	0003f6a0 	.word	0x0003f6a0
   24014:	00037990 	.word	0x00037990
   24018:	0003f6c2 	.word	0x0003f6c2
   2401c:	0003fa2f 	.word	0x0003fa2f
   24020:	000386c0 	.word	0x000386c0
   24024:	0003f6e7 	.word	0x0003f6e7
   24028:	0003f6fd 	.word	0x0003f6fd
   2402c:	20010764 	.word	0x20010764
   24030:	2000ccbe 	.word	0x2000ccbe
   24034:	20010765 	.word	0x20010765
   24038:	20010766 	.word	0x20010766

0002403c <lte_lc_system_mode_get>:
int lte_lc_system_mode_get(enum lte_lc_system_mode *mode,
			   enum lte_lc_system_mode_preference *preference)
{
	int err;
	int mode_bitmask = 0;
	int ltem_mode = 0;
   2403c:	2300      	movs	r3, #0
{
   2403e:	b5b0      	push	{r4, r5, r7, lr}
   24040:	b08c      	sub	sp, #48	; 0x30
   24042:	af02      	add	r7, sp, #8
   24044:	460c      	mov	r4, r1
	int nbiot_mode = 0;
	int gps_mode = 0;
	int mode_preference = 0;

	if (mode == NULL) {
   24046:	4605      	mov	r5, r0
	int nbiot_mode = 0;
   24048:	e9c7 3300 	strd	r3, r3, [r7]
	int mode_preference = 0;
   2404c:	e9c7 3302 	strd	r3, r3, [r7, #8]
	if (mode == NULL) {
   24050:	2800      	cmp	r0, #0
   24052:	f000 808b 	beq.w	2416c <lte_lc_system_mode_get+0x130>
		return -EINVAL;
	}

	/* It's expected to have all 4 arguments matched */
	err = nrf_modem_at_scanf(AT_XSYSTEMMODE_READ, "%%XSYSTEMMODE: %d,%d,%d,%d",
   24056:	f107 030c 	add.w	r3, r7, #12
   2405a:	9301      	str	r3, [sp, #4]
   2405c:	f107 0308 	add.w	r3, r7, #8
   24060:	9300      	str	r3, [sp, #0]
   24062:	463a      	mov	r2, r7
   24064:	4943      	ldr	r1, [pc, #268]	; (24174 <lte_lc_system_mode_get+0x138>)
   24066:	4844      	ldr	r0, [pc, #272]	; (24178 <lte_lc_system_mode_get+0x13c>)
   24068:	1d3b      	adds	r3, r7, #4
   2406a:	f003 f96d 	bl	27348 <nrf_modem_at_scanf>
				 &ltem_mode, &nbiot_mode, &gps_mode, &mode_preference);
	if (err != 4) {
   2406e:	2804      	cmp	r0, #4
   24070:	d00f      	beq.n	24092 <lte_lc_system_mode_get+0x56>
		LOG_ERR("Failed to get system mode, error: %d", err);
   24072:	466c      	mov	r4, sp
   24074:	b088      	sub	sp, #32
   24076:	aa02      	add	r2, sp, #8
   24078:	4b40      	ldr	r3, [pc, #256]	; (2417c <lte_lc_system_mode_get+0x140>)
   2407a:	e9c2 3005 	strd	r3, r0, [r2, #20]
			break;
		case 4:
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
			break;
		default:
			LOG_ERR("Unsupported LTE preference: %d", mode_preference);
   2407e:	2303      	movs	r3, #3
   24080:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   24084:	483e      	ldr	r0, [pc, #248]	; (24180 <lte_lc_system_mode_get+0x144>)
   24086:	f842 3f10 	str.w	r3, [r2, #16]!
   2408a:	f011 f82f 	bl	350ec <z_log_msg_static_create.constprop.0>
   2408e:	46a5      	mov	sp, r4
			return -EFAULT;
   24090:	e03d      	b.n	2410e <lte_lc_system_mode_get+0xd2>
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   24092:	687b      	ldr	r3, [r7, #4]
   24094:	1e1a      	subs	r2, r3, #0
	mode_bitmask = (ltem_mode ? BIT(AT_XSYSTEMMODE_READ_LTEM_INDEX) : 0) |
   24096:	683b      	ldr	r3, [r7, #0]
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   24098:	bf18      	it	ne
   2409a:	2201      	movne	r2, #1
	mode_bitmask = (ltem_mode ? BIT(AT_XSYSTEMMODE_READ_LTEM_INDEX) : 0) |
   2409c:	3b00      	subs	r3, #0
   2409e:	bf18      	it	ne
   240a0:	2301      	movne	r3, #1
   240a2:	005b      	lsls	r3, r3, #1
   240a4:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
		       (gps_mode ? BIT(AT_XSYSTEMMODE_READ_GPS_INDEX) : 0);
   240a8:	68ba      	ldr	r2, [r7, #8]
   240aa:	3a00      	subs	r2, #0
   240ac:	bf18      	it	ne
   240ae:	2201      	movne	r2, #1
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   240b0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
	switch (mode_bitmask) {
   240b4:	2b0e      	cmp	r3, #14
   240b6:	d81f      	bhi.n	240f8 <lte_lc_system_mode_get+0xbc>
   240b8:	e8df f003 	tbb	[pc, r3]
   240bc:	1e081e2c 	.word	0x1e081e2c
   240c0:	1e1a1e2e 	.word	0x1e1a1e2e
   240c4:	1e161e14 	.word	0x1e161e14
   240c8:	1e18      	.short	0x1e18
   240ca:	1c          	.byte	0x1c
   240cb:	00          	.byte	0x00
   240cc:	2301      	movs	r3, #1
		*mode = LTE_LC_SYSTEM_MODE_NONE;
   240ce:	702b      	strb	r3, [r5, #0]
	if (preference != NULL) {
   240d0:	2c00      	cmp	r4, #0
   240d2:	d040      	beq.n	24156 <lte_lc_system_mode_get+0x11a>
		switch (mode_preference) {
   240d4:	68fb      	ldr	r3, [r7, #12]
   240d6:	2b04      	cmp	r3, #4
   240d8:	d836      	bhi.n	24148 <lte_lc_system_mode_get+0x10c>
   240da:	e8df f003 	tbb	[pc, r3]
   240de:	2d1f      	.short	0x2d1f
   240e0:	312f      	.short	0x312f
   240e2:	33          	.byte	0x33
   240e3:	00          	.byte	0x00
		break;
   240e4:	2303      	movs	r3, #3
   240e6:	e7f2      	b.n	240ce <lte_lc_system_mode_get+0x92>
		break;
   240e8:	2304      	movs	r3, #4
   240ea:	e7f0      	b.n	240ce <lte_lc_system_mode_get+0x92>
		break;
   240ec:	2305      	movs	r3, #5
   240ee:	e7ee      	b.n	240ce <lte_lc_system_mode_get+0x92>
		break;
   240f0:	2306      	movs	r3, #6
   240f2:	e7ec      	b.n	240ce <lte_lc_system_mode_get+0x92>
		break;
   240f4:	2307      	movs	r3, #7
   240f6:	e7ea      	b.n	240ce <lte_lc_system_mode_get+0x92>
		LOG_ERR("Invalid system mode, assuming parsing error");
   240f8:	4b22      	ldr	r3, [pc, #136]	; (24184 <lte_lc_system_mode_get+0x148>)
   240fa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   240fe:	627b      	str	r3, [r7, #36]	; 0x24
   24100:	2302      	movs	r3, #2
   24102:	481f      	ldr	r0, [pc, #124]	; (24180 <lte_lc_system_mode_get+0x144>)
   24104:	f107 0220 	add.w	r2, r7, #32
   24108:	623b      	str	r3, [r7, #32]
   2410a:	f010 ffef 	bl	350ec <z_log_msg_static_create.constprop.0>
		return -EFAULT;
   2410e:	f06f 000d 	mvn.w	r0, #13
   24112:	e026      	b.n	24162 <lte_lc_system_mode_get+0x126>
	switch (mode_bitmask) {
   24114:	2300      	movs	r3, #0
   24116:	e7da      	b.n	240ce <lte_lc_system_mode_get+0x92>
   24118:	2302      	movs	r3, #2
   2411a:	e7d8      	b.n	240ce <lte_lc_system_mode_get+0x92>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_AUTO;
   2411c:	2300      	movs	r3, #0
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
   2411e:	7023      	strb	r3, [r4, #0]
		}
	}

	if (sys_mode_current != *mode) {
   24120:	4b19      	ldr	r3, [pc, #100]	; (24188 <lte_lc_system_mode_get+0x14c>)
   24122:	782a      	ldrb	r2, [r5, #0]
   24124:	7819      	ldrb	r1, [r3, #0]
   24126:	4291      	cmp	r1, r2
   24128:	d11e      	bne.n	24168 <lte_lc_system_mode_get+0x12c>
		LOG_DBG("Current system mode updated from %d to %d",
			sys_mode_current, *mode);
		sys_mode_current = *mode;
	}

	if ((preference != NULL) && (mode_pref_current != *preference)) {
   2412a:	4b18      	ldr	r3, [pc, #96]	; (2418c <lte_lc_system_mode_get+0x150>)
   2412c:	7822      	ldrb	r2, [r4, #0]
   2412e:	7819      	ldrb	r1, [r3, #0]
   24130:	4291      	cmp	r1, r2
   24132:	d015      	beq.n	24160 <lte_lc_system_mode_get+0x124>
		LOG_DBG("Current system mode preference updated from %d to %d",
			mode_pref_current, *preference);
		mode_pref_current = *preference;
   24134:	701a      	strb	r2, [r3, #0]
   24136:	e013      	b.n	24160 <lte_lc_system_mode_get+0x124>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_LTEM;
   24138:	2301      	movs	r3, #1
   2413a:	e7f0      	b.n	2411e <lte_lc_system_mode_get+0xe2>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT;
   2413c:	2302      	movs	r3, #2
   2413e:	e7ee      	b.n	2411e <lte_lc_system_mode_get+0xe2>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_LTEM_PLMN_PRIO;
   24140:	2303      	movs	r3, #3
   24142:	e7ec      	b.n	2411e <lte_lc_system_mode_get+0xe2>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
   24144:	2304      	movs	r3, #4
   24146:	e7ea      	b.n	2411e <lte_lc_system_mode_get+0xe2>
			LOG_ERR("Unsupported LTE preference: %d", mode_preference);
   24148:	466c      	mov	r4, sp
   2414a:	b088      	sub	sp, #32
   2414c:	aa02      	add	r2, sp, #8
   2414e:	4910      	ldr	r1, [pc, #64]	; (24190 <lte_lc_system_mode_get+0x154>)
   24150:	e9c2 1305 	strd	r1, r3, [r2, #20]
   24154:	e793      	b.n	2407e <lte_lc_system_mode_get+0x42>
	if (sys_mode_current != *mode) {
   24156:	4a0c      	ldr	r2, [pc, #48]	; (24188 <lte_lc_system_mode_get+0x14c>)
   24158:	7811      	ldrb	r1, [r2, #0]
   2415a:	4299      	cmp	r1, r3
		sys_mode_current = *mode;
   2415c:	bf18      	it	ne
   2415e:	7013      	strbne	r3, [r2, #0]
	}

	return 0;
   24160:	2000      	movs	r0, #0
}
   24162:	3728      	adds	r7, #40	; 0x28
   24164:	46bd      	mov	sp, r7
   24166:	bdb0      	pop	{r4, r5, r7, pc}
		sys_mode_current = *mode;
   24168:	701a      	strb	r2, [r3, #0]
	if ((preference != NULL) && (mode_pref_current != *preference)) {
   2416a:	e7de      	b.n	2412a <lte_lc_system_mode_get+0xee>
		return -EINVAL;
   2416c:	f06f 0015 	mvn.w	r0, #21
   24170:	e7f7      	b.n	24162 <lte_lc_system_mode_get+0x126>
   24172:	bf00      	nop
   24174:	0003f722 	.word	0x0003f722
   24178:	0003f73d 	.word	0x0003f73d
   2417c:	0003f74d 	.word	0x0003f74d
   24180:	00037990 	.word	0x00037990
   24184:	0003f772 	.word	0x0003f772
   24188:	20010764 	.word	0x20010764
   2418c:	20010765 	.word	0x20010765
   24190:	0003f79e 	.word	0x0003f79e

00024194 <init_and_config>:
{
   24194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24198:	b086      	sub	sp, #24
	if (is_initialized) {
   2419a:	4d27      	ldr	r5, [pc, #156]	; (24238 <init_and_config+0xa4>)
{
   2419c:	af00      	add	r7, sp, #0
	if (is_initialized) {
   2419e:	7829      	ldrb	r1, [r5, #0]
   241a0:	2900      	cmp	r1, #0
   241a2:	d146      	bne.n	24232 <init_and_config+0x9e>
	err = lte_lc_system_mode_get(&sys_mode_current, &mode_pref_current);
   241a4:	4e25      	ldr	r6, [pc, #148]	; (2423c <init_and_config+0xa8>)
   241a6:	f8df 8098 	ldr.w	r8, [pc, #152]	; 24240 <init_and_config+0xac>
	return z_impl_k_sem_init(sem, initial_count, limit);
   241aa:	2201      	movs	r2, #1
   241ac:	4825      	ldr	r0, [pc, #148]	; (24244 <init_and_config+0xb0>)
   241ae:	f011 ffdf 	bl	36170 <z_impl_k_sem_init>
   241b2:	4631      	mov	r1, r6
   241b4:	4640      	mov	r0, r8
   241b6:	f7ff ff41 	bl	2403c <lte_lc_system_mode_get>
	if (err) {
   241ba:	4604      	mov	r4, r0
   241bc:	b198      	cbz	r0, 241e6 <init_and_config+0x52>
		LOG_ERR("Could not get current system mode, error: %d", err);
   241be:	466d      	mov	r5, sp
   241c0:	b088      	sub	sp, #32
   241c2:	466a      	mov	r2, sp
   241c4:	4b20      	ldr	r3, [pc, #128]	; (24248 <init_and_config+0xb4>)
			LOG_ERR("Could not set system mode, error: %d", err);
   241c6:	e9c2 3405 	strd	r3, r4, [r2, #20]
   241ca:	2303      	movs	r3, #3
   241cc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   241d0:	481e      	ldr	r0, [pc, #120]	; (2424c <init_and_config+0xb8>)
   241d2:	f842 3f10 	str.w	r3, [r2, #16]!
   241d6:	f010 ff89 	bl	350ec <z_log_msg_static_create.constprop.0>
   241da:	46ad      	mov	sp, r5
}
   241dc:	4620      	mov	r0, r4
   241de:	3718      	adds	r7, #24
   241e0:	46bd      	mov	sp, r7
   241e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((sys_mode_current != sys_mode_target) ||
   241e6:	4b1a      	ldr	r3, [pc, #104]	; (24250 <init_and_config+0xbc>)
   241e8:	7818      	ldrb	r0, [r3, #0]
	    (mode_pref_current != mode_pref_target)) {
   241ea:	4b1a      	ldr	r3, [pc, #104]	; (24254 <init_and_config+0xc0>)
   241ec:	7819      	ldrb	r1, [r3, #0]
	if ((sys_mode_current != sys_mode_target) ||
   241ee:	f898 3000 	ldrb.w	r3, [r8]
   241f2:	4283      	cmp	r3, r0
   241f4:	d102      	bne.n	241fc <init_and_config+0x68>
   241f6:	7833      	ldrb	r3, [r6, #0]
   241f8:	428b      	cmp	r3, r1
   241fa:	d008      	beq.n	2420e <init_and_config+0x7a>
		err = lte_lc_system_mode_set(sys_mode_target, mode_pref_target);
   241fc:	f7ff feb8 	bl	23f70 <lte_lc_system_mode_set>
		if (err) {
   24200:	4604      	mov	r4, r0
   24202:	b120      	cbz	r0, 2420e <init_and_config+0x7a>
			LOG_ERR("Could not set system mode, error: %d", err);
   24204:	466d      	mov	r5, sp
   24206:	b088      	sub	sp, #32
   24208:	466a      	mov	r2, sp
   2420a:	4b13      	ldr	r3, [pc, #76]	; (24258 <init_and_config+0xc4>)
   2420c:	e7db      	b.n	241c6 <init_and_config+0x32>
	err = enable_notifications();
   2420e:	f7ff f97d 	bl	2350c <enable_notifications>
	if (err) {
   24212:	4604      	mov	r4, r0
   24214:	b158      	cbz	r0, 2422e <init_and_config+0x9a>
		LOG_ERR("Failed to enable notifications");
   24216:	4b11      	ldr	r3, [pc, #68]	; (2425c <init_and_config+0xc8>)
   24218:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2421c:	617b      	str	r3, [r7, #20]
   2421e:	2302      	movs	r3, #2
   24220:	480a      	ldr	r0, [pc, #40]	; (2424c <init_and_config+0xb8>)
   24222:	f107 0210 	add.w	r2, r7, #16
   24226:	613b      	str	r3, [r7, #16]
   24228:	f010 ff60 	bl	350ec <z_log_msg_static_create.constprop.0>
		return err;
   2422c:	e7d6      	b.n	241dc <init_and_config+0x48>
	is_initialized = true;
   2422e:	2301      	movs	r3, #1
   24230:	702b      	strb	r3, [r5, #0]
		return 0;
   24232:	2400      	movs	r4, #0
   24234:	e7d2      	b.n	241dc <init_and_config+0x48>
   24236:	bf00      	nop
   24238:	20010774 	.word	0x20010774
   2423c:	20010765 	.word	0x20010765
   24240:	20010764 	.word	0x20010764
   24244:	2000eae4 	.word	0x2000eae4
   24248:	0003f7bd 	.word	0x0003f7bd
   2424c:	00037990 	.word	0x00037990
   24250:	2000ccbe 	.word	0x2000ccbe
   24254:	20010766 	.word	0x20010766
   24258:	0003f7ea 	.word	0x0003f7ea
   2425c:	0003f80f 	.word	0x0003f80f

00024260 <lte_lc_func_mode_get>:

int lte_lc_func_mode_get(enum lte_lc_func_mode *mode)
{
   24260:	b590      	push	{r4, r7, lr}
   24262:	b083      	sub	sp, #12
	int err;
	uint16_t mode_tmp;

	if (mode == NULL) {
   24264:	4604      	mov	r4, r0
{
   24266:	af00      	add	r7, sp, #0
	if (mode == NULL) {
   24268:	b1f0      	cbz	r0, 242a8 <lte_lc_func_mode_get+0x48>
		return -EINVAL;
	}

	/* Exactly one parameter is expected to match. */
	err = nrf_modem_at_scanf(AT_CFUN_READ, "+CFUN: %hu", &mode_tmp);
   2426a:	4911      	ldr	r1, [pc, #68]	; (242b0 <lte_lc_func_mode_get+0x50>)
   2426c:	4811      	ldr	r0, [pc, #68]	; (242b4 <lte_lc_func_mode_get+0x54>)
   2426e:	1dba      	adds	r2, r7, #6
   24270:	f003 f86a 	bl	27348 <nrf_modem_at_scanf>
	if (err != 1) {
   24274:	2801      	cmp	r0, #1
   24276:	d013      	beq.n	242a0 <lte_lc_func_mode_get+0x40>
		LOG_ERR("AT command failed, nrf_modem_at_scanf() returned error: %d", err);
   24278:	466c      	mov	r4, sp
   2427a:	b088      	sub	sp, #32
   2427c:	466a      	mov	r2, sp
   2427e:	4b0e      	ldr	r3, [pc, #56]	; (242b8 <lte_lc_func_mode_get+0x58>)
   24280:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   24284:	e9c2 3005 	strd	r3, r0, [r2, #20]
   24288:	2303      	movs	r3, #3
   2428a:	480c      	ldr	r0, [pc, #48]	; (242bc <lte_lc_func_mode_get+0x5c>)
   2428c:	f842 3f10 	str.w	r3, [r2, #16]!
   24290:	f010 ff2c 	bl	350ec <z_log_msg_static_create.constprop.0>
		return -EFAULT;
   24294:	f06f 000d 	mvn.w	r0, #13
   24298:	46a5      	mov	sp, r4
	}

	*mode = mode_tmp;

	return 0;
}
   2429a:	370c      	adds	r7, #12
   2429c:	46bd      	mov	sp, r7
   2429e:	bd90      	pop	{r4, r7, pc}
	*mode = mode_tmp;
   242a0:	88fb      	ldrh	r3, [r7, #6]
	return 0;
   242a2:	2000      	movs	r0, #0
	*mode = mode_tmp;
   242a4:	7023      	strb	r3, [r4, #0]
	return 0;
   242a6:	e7f8      	b.n	2429a <lte_lc_func_mode_get+0x3a>
		return -EINVAL;
   242a8:	f06f 0015 	mvn.w	r0, #21
   242ac:	e7f5      	b.n	2429a <lte_lc_func_mode_get+0x3a>
   242ae:	bf00      	nop
   242b0:	0003f82e 	.word	0x0003f82e
   242b4:	0003f839 	.word	0x0003f839
   242b8:	0003f842 	.word	0x0003f842
   242bc:	00037990 	.word	0x00037990

000242c0 <lte_lc_func_mode_set>:

int lte_lc_func_mode_set(enum lte_lc_func_mode mode)
{
   242c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int err;

	switch (mode) {
   242c4:	2804      	cmp	r0, #4
{
   242c6:	b086      	sub	sp, #24
   242c8:	4604      	mov	r4, r0
   242ca:	af00      	add	r7, sp, #0
	switch (mode) {
   242cc:	d826      	bhi.n	2431c <lte_lc_func_mode_set+0x5c>
   242ce:	2804      	cmp	r0, #4
   242d0:	d829      	bhi.n	24326 <lte_lc_func_mode_set+0x66>
   242d2:	e8df f000 	tbb	[pc, r0]
   242d6:	0a3a      	.short	0x0a3a
   242d8:	283a      	.short	0x283a
   242da:	3a          	.byte	0x3a
   242db:	00          	.byte	0x00
   242dc:	2201      	movs	r2, #1
   242de:	4931      	ldr	r1, [pc, #196]	; (243a4 <lte_lc_func_mode_set+0xe4>)
   242e0:	409a      	lsls	r2, r3
   242e2:	420a      	tst	r2, r1
   242e4:	d131      	bne.n	2434a <lte_lc_func_mode_set+0x8a>
   242e6:	2b01      	cmp	r3, #1
   242e8:	d11d      	bne.n	24326 <lte_lc_func_mode_set+0x66>

		break;
	case LTE_LC_FUNC_MODE_NORMAL:
		LTE_LC_TRACE(LTE_LC_TRACE_FUNC_MODE_NORMAL);

		err = enable_notifications();
   242ea:	f7ff f90f 	bl	2350c <enable_notifications>
		if (err) {
   242ee:	b360      	cbz	r0, 2434a <lte_lc_func_mode_set+0x8a>
			LOG_ERR("Failed to enable notifications, error: %d", err);
   242f0:	466c      	mov	r4, sp
   242f2:	b088      	sub	sp, #32
   242f4:	466a      	mov	r2, sp
   242f6:	4b2c      	ldr	r3, [pc, #176]	; (243a8 <lte_lc_func_mode_set+0xe8>)
   242f8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   242fc:	e9c2 3005 	strd	r3, r0, [r2, #20]
   24300:	2303      	movs	r3, #3
   24302:	482a      	ldr	r0, [pc, #168]	; (243ac <lte_lc_func_mode_set+0xec>)
   24304:	f842 3f10 	str.w	r3, [r2, #16]!
   24308:	f010 fef0 	bl	350ec <z_log_msg_static_create.constprop.0>
   2430c:	46a5      	mov	sp, r4
			return -EFAULT;
   2430e:	f06f 050d 	mvn.w	r5, #13
		LOG_DBG("CFUN monitor callback: %p", e->callback);
		e->callback(mode, e->context);
	}

	return 0;
}
   24312:	4628      	mov	r0, r5
   24314:	3718      	adds	r7, #24
   24316:	46bd      	mov	sp, r7
   24318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (mode) {
   2431c:	f1a0 0314 	sub.w	r3, r0, #20
   24320:	b2db      	uxtb	r3, r3
   24322:	2b18      	cmp	r3, #24
   24324:	d9da      	bls.n	242dc <lte_lc_func_mode_set+0x1c>
		LOG_ERR("Invalid functional mode: %d", mode);
   24326:	466d      	mov	r5, sp
   24328:	b088      	sub	sp, #32
   2432a:	466a      	mov	r2, sp
   2432c:	4b20      	ldr	r3, [pc, #128]	; (243b0 <lte_lc_func_mode_set+0xf0>)
   2432e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   24332:	e9c2 3405 	strd	r3, r4, [r2, #20]
   24336:	2303      	movs	r3, #3
   24338:	481c      	ldr	r0, [pc, #112]	; (243ac <lte_lc_func_mode_set+0xec>)
   2433a:	f842 3f10 	str.w	r3, [r2, #16]!
   2433e:	f010 fed5 	bl	350ec <z_log_msg_static_create.constprop.0>
   24342:	46ad      	mov	sp, r5
		return -EINVAL;
   24344:	f06f 0515 	mvn.w	r5, #21
   24348:	e7e3      	b.n	24312 <lte_lc_func_mode_set+0x52>
	err = nrf_modem_at_printf("AT+CFUN=%d", mode);
   2434a:	4621      	mov	r1, r4
   2434c:	4819      	ldr	r0, [pc, #100]	; (243b4 <lte_lc_func_mode_set+0xf4>)
   2434e:	f002 ff1b 	bl	27188 <nrf_modem_at_printf>
	if (err) {
   24352:	4605      	mov	r5, r0
   24354:	b158      	cbz	r0, 2436e <lte_lc_func_mode_set+0xae>
		LOG_ERR("Failed to set functional mode. Please check XSYSTEMMODE.");
   24356:	4b18      	ldr	r3, [pc, #96]	; (243b8 <lte_lc_func_mode_set+0xf8>)
   24358:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2435c:	617b      	str	r3, [r7, #20]
   2435e:	2302      	movs	r3, #2
   24360:	4812      	ldr	r0, [pc, #72]	; (243ac <lte_lc_func_mode_set+0xec>)
   24362:	f107 0210 	add.w	r2, r7, #16
   24366:	613b      	str	r3, [r7, #16]
   24368:	f010 fec0 	bl	350ec <z_log_msg_static_create.constprop.0>
		return -EFAULT;
   2436c:	e7cf      	b.n	2430e <lte_lc_func_mode_set+0x4e>
	STRUCT_SECTION_FOREACH(lte_lc_cfun_cb, e) {
   2436e:	4e13      	ldr	r6, [pc, #76]	; (243bc <lte_lc_func_mode_set+0xfc>)
   24370:	f8df 804c 	ldr.w	r8, [pc, #76]	; 243c0 <lte_lc_func_mode_set+0x100>
   24374:	e005      	b.n	24382 <lte_lc_func_mode_set+0xc2>
   24376:	d2cc      	bcs.n	24312 <lte_lc_func_mode_set+0x52>
		e->callback(mode, e->context);
   24378:	e9d6 3100 	ldrd	r3, r1, [r6]
   2437c:	4620      	mov	r0, r4
   2437e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(lte_lc_cfun_cb, e) {
   24380:	3608      	adds	r6, #8
   24382:	4546      	cmp	r6, r8
   24384:	d9f7      	bls.n	24376 <lte_lc_func_mode_set+0xb6>
   24386:	490f      	ldr	r1, [pc, #60]	; (243c4 <lte_lc_func_mode_set+0x104>)
   24388:	f240 5376 	movw	r3, #1398	; 0x576
   2438c:	4a0e      	ldr	r2, [pc, #56]	; (243c8 <lte_lc_func_mode_set+0x108>)
   2438e:	480f      	ldr	r0, [pc, #60]	; (243cc <lte_lc_func_mode_set+0x10c>)
   24390:	f00b f818 	bl	2f3c4 <assert_print>
   24394:	480e      	ldr	r0, [pc, #56]	; (243d0 <lte_lc_func_mode_set+0x110>)
   24396:	f00b f815 	bl	2f3c4 <assert_print>
   2439a:	f240 5176 	movw	r1, #1398	; 0x576
   2439e:	480a      	ldr	r0, [pc, #40]	; (243c8 <lte_lc_func_mode_set+0x108>)
   243a0:	f00b f809 	bl	2f3b6 <assert_post_action>
   243a4:	01300c01 	.word	0x01300c01
   243a8:	0003f87d 	.word	0x0003f87d
   243ac:	00037990 	.word	0x00037990
   243b0:	0003f8a7 	.word	0x0003f8a7
   243b4:	0003f8c3 	.word	0x0003f8c3
   243b8:	0003f8ce 	.word	0x0003f8ce
   243bc:	00042238 	.word	0x00042238
   243c0:	00042238 	.word	0x00042238
   243c4:	0003f907 	.word	0x0003f907
   243c8:	0003f25b 	.word	0x0003f25b
   243cc:	00039995 	.word	0x00039995
   243d0:	0003a18c 	.word	0x0003a18c

000243d4 <connect_lte>:
{
   243d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!is_initialized) {
   243d8:	4b4a      	ldr	r3, [pc, #296]	; (24504 <connect_lte+0x130>)
{
   243da:	4605      	mov	r5, r0
	if (!is_initialized) {
   243dc:	781b      	ldrb	r3, [r3, #0]
{
   243de:	b089      	sub	sp, #36	; 0x24
	if (!is_initialized) {
   243e0:	b973      	cbnz	r3, 24400 <connect_lte+0x2c>
		LOG_ERR("The LTE link controller is not initialized");
   243e2:	4b49      	ldr	r3, [pc, #292]	; (24508 <connect_lte+0x134>)
   243e4:	4849      	ldr	r0, [pc, #292]	; (2450c <connect_lte+0x138>)
   243e6:	9307      	str	r3, [sp, #28]
   243e8:	2302      	movs	r3, #2
   243ea:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   243ee:	aa06      	add	r2, sp, #24
   243f0:	9306      	str	r3, [sp, #24]
   243f2:	f010 fe7b 	bl	350ec <z_log_msg_static_create.constprop.0>
		return -EPERM;
   243f6:	f04f 30ff 	mov.w	r0, #4294967295
}
   243fa:	b009      	add	sp, #36	; 0x24
   243fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   24400:	2601      	movs	r6, #1
   24402:	4c43      	ldr	r4, [pc, #268]	; (24510 <connect_lte+0x13c>)
   24404:	e8d4 3fef 	ldaex	r3, [r4]
   24408:	e8c4 6fe2 	stlex	r2, r6, [r4]
   2440c:	2a00      	cmp	r2, #0
   2440e:	d1f9      	bne.n	24404 <connect_lte+0x30>
	if (atomic_set(&in_progress, 1)) {
   24410:	2b00      	cmp	r3, #0
   24412:	d173      	bne.n	244fc <connect_lte+0x128>
	err = lte_lc_nw_reg_status_get(&reg_status);
   24414:	f10d 0007 	add.w	r0, sp, #7
   24418:	f7ff fd72 	bl	23f00 <lte_lc_nw_reg_status_get>
	if (err) {
   2441c:	b160      	cbz	r0, 24438 <connect_lte+0x64>
		LOG_ERR("Failed to get current registration status");
   2441e:	4b3d      	ldr	r3, [pc, #244]	; (24514 <connect_lte+0x140>)
   24420:	483a      	ldr	r0, [pc, #232]	; (2450c <connect_lte+0x138>)
   24422:	9307      	str	r3, [sp, #28]
   24424:	2302      	movs	r3, #2
   24426:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2442a:	aa06      	add	r2, sp, #24
   2442c:	9306      	str	r3, [sp, #24]
   2442e:	f010 fe5d 	bl	350ec <z_log_msg_static_create.constprop.0>
		return -EFAULT;
   24432:	f06f 000d 	mvn.w	r0, #13
   24436:	e7e0      	b.n	243fa <connect_lte+0x26>
	if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   24438:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2443c:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   24440:	2b01      	cmp	r3, #1
   24442:	d017      	beq.n	24474 <connect_lte+0xa0>
	if (blocking) {
   24444:	b125      	cbz	r5, 24450 <connect_lte+0x7c>
   24446:	4601      	mov	r1, r0
   24448:	4632      	mov	r2, r6
   2444a:	4833      	ldr	r0, [pc, #204]	; (24518 <connect_lte+0x144>)
   2444c:	f011 fe90 	bl	36170 <z_impl_k_sem_init>
{
   24450:	2702      	movs	r7, #2
			err = lte_lc_system_mode_set(sys_mode_target, mode_pref_current);
   24452:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 2451c <connect_lte+0x148>
   24456:	4e32      	ldr	r6, [pc, #200]	; (24520 <connect_lte+0x14c>)
		err = lte_lc_func_mode_get(&current_func_mode);
   24458:	f10d 0006 	add.w	r0, sp, #6
   2445c:	f7ff ff00 	bl	24260 <lte_lc_func_mode_get>
		if (err) {
   24460:	b9b8      	cbnz	r0, 24492 <connect_lte+0xbe>
		if (!IS_ENABLED(CONFIG_LTE_NETWORK_DEFAULT) &&
   24462:	f89d 3006 	ldrb.w	r3, [sp, #6]
   24466:	f013 0ffb 	tst.w	r3, #251	; 0xfb
   2446a:	d00b      	beq.n	24484 <connect_lte+0xb0>
		err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_NORMAL);
   2446c:	2001      	movs	r0, #1
   2446e:	f7ff ff27 	bl	242c0 <lte_lc_func_mode_set>
		if (err || !blocking) {
   24472:	b188      	cbz	r0, 24498 <connect_lte+0xc4>
   24474:	2300      	movs	r3, #0
   24476:	e8d4 2fef 	ldaex	r2, [r4]
   2447a:	e8c4 3fe1 	stlex	r1, r3, [r4]
   2447e:	2900      	cmp	r1, #0
   24480:	d0bb      	beq.n	243fa <connect_lte+0x26>
   24482:	e7f8      	b.n	24476 <connect_lte+0xa2>
			err = lte_lc_system_mode_set(sys_mode_target, mode_pref_current);
   24484:	f898 1000 	ldrb.w	r1, [r8]
   24488:	7830      	ldrb	r0, [r6, #0]
   2448a:	f7ff fd71 	bl	23f70 <lte_lc_system_mode_set>
			if (err) {
   2448e:	2800      	cmp	r0, #0
   24490:	d0ec      	beq.n	2446c <connect_lte+0x98>
			err = -EFAULT;
   24492:	f06f 000d 	mvn.w	r0, #13
   24496:	e7ed      	b.n	24474 <connect_lte+0xa0>
		if (err || !blocking) {
   24498:	2d00      	cmp	r5, #0
   2449a:	d0eb      	beq.n	24474 <connect_lte+0xa0>
	return z_impl_k_sem_take(sem, timeout);
   2449c:	f04f 7296 	mov.w	r2, #19660800	; 0x12c0000
   244a0:	2300      	movs	r3, #0
   244a2:	481d      	ldr	r0, [pc, #116]	; (24518 <connect_lte+0x144>)
   244a4:	f005 f944 	bl	29730 <z_impl_k_sem_take>
		if (err == -EAGAIN) {
   244a8:	f110 0f0b 	cmn.w	r0, #11
   244ac:	d1e2      	bne.n	24474 <connect_lte+0xa0>
			LOG_INF("Network connection attempt timed out");
   244ae:	f04f 0902 	mov.w	r9, #2
   244b2:	4b1c      	ldr	r3, [pc, #112]	; (24524 <connect_lte+0x150>)
   244b4:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   244b8:	4814      	ldr	r0, [pc, #80]	; (2450c <connect_lte+0x138>)
   244ba:	aa06      	add	r2, sp, #24
   244bc:	9307      	str	r3, [sp, #28]
   244be:	f8cd 9018 	str.w	r9, [sp, #24]
   244c2:	f010 fe13 	bl	350ec <z_log_msg_static_create.constprop.0>
			if (IS_ENABLED(CONFIG_LTE_NETWORK_USE_FALLBACK) &&
   244c6:	2f01      	cmp	r7, #1
   244c8:	d015      	beq.n	244f6 <connect_lte+0x122>
				if (sys_mode_target == sys_mode_preferred) {
   244ca:	7833      	ldrb	r3, [r6, #0]
				err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_OFFLINE);
   244cc:	2004      	movs	r0, #4
					sys_mode_target = sys_mode_fallback;
   244ce:	2b04      	cmp	r3, #4
   244d0:	bf14      	ite	ne
   244d2:	2304      	movne	r3, #4
   244d4:	2305      	moveq	r3, #5
   244d6:	7033      	strb	r3, [r6, #0]
				err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_OFFLINE);
   244d8:	f7ff fef2 	bl	242c0 <lte_lc_func_mode_set>
				if (err) {
   244dc:	2800      	cmp	r0, #0
   244de:	d1d8      	bne.n	24492 <connect_lte+0xbe>
				LOG_INF("Using fallback network mode");
   244e0:	4b11      	ldr	r3, [pc, #68]	; (24528 <connect_lte+0x154>)
   244e2:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   244e6:	4809      	ldr	r0, [pc, #36]	; (2450c <connect_lte+0x138>)
   244e8:	aa06      	add	r2, sp, #24
   244ea:	e9cd 9306 	strd	r9, r3, [sp, #24]
   244ee:	2701      	movs	r7, #1
   244f0:	f010 fdfc 	bl	350ec <z_log_msg_static_create.constprop.0>
	} while (tries > 0);
   244f4:	e7b0      	b.n	24458 <connect_lte+0x84>
				err = -ETIMEDOUT;
   244f6:	f06f 0073 	mvn.w	r0, #115	; 0x73
   244fa:	e7bb      	b.n	24474 <connect_lte+0xa0>
		return -EINPROGRESS;
   244fc:	f06f 0076 	mvn.w	r0, #118	; 0x76
   24500:	e77b      	b.n	243fa <connect_lte+0x26>
   24502:	bf00      	nop
   24504:	20010774 	.word	0x20010774
   24508:	0003f925 	.word	0x0003f925
   2450c:	00037990 	.word	0x00037990
   24510:	2000ead8 	.word	0x2000ead8
   24514:	0003f950 	.word	0x0003f950
   24518:	2000eae4 	.word	0x2000eae4
   2451c:	20010765 	.word	0x20010765
   24520:	2000ccbe 	.word	0x2000ccbe
   24524:	0003f97a 	.word	0x0003f97a
   24528:	0003f99f 	.word	0x0003f99f

0002452c <lte_lc_deinit>:
{
   2452c:	b508      	push	{r3, lr}
	if (is_initialized) {
   2452e:	4b06      	ldr	r3, [pc, #24]	; (24548 <lte_lc_deinit+0x1c>)
   24530:	781a      	ldrb	r2, [r3, #0]
   24532:	b122      	cbz	r2, 2453e <lte_lc_deinit+0x12>
		is_initialized = false;
   24534:	2000      	movs	r0, #0
   24536:	7018      	strb	r0, [r3, #0]
		return lte_lc_func_mode_set(LTE_LC_FUNC_MODE_POWER_OFF) ? -EFAULT : 0;
   24538:	f7ff fec2 	bl	242c0 <lte_lc_func_mode_set>
   2453c:	b908      	cbnz	r0, 24542 <lte_lc_deinit+0x16>
   2453e:	2000      	movs	r0, #0
}
   24540:	bd08      	pop	{r3, pc}
		return lte_lc_func_mode_set(LTE_LC_FUNC_MODE_POWER_OFF) ? -EFAULT : 0;
   24542:	f06f 000d 	mvn.w	r0, #13
   24546:	e7fb      	b.n	24540 <lte_lc_deinit+0x14>
   24548:	20010774 	.word	0x20010774

0002454c <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   2454c:	4801      	ldr	r0, [pc, #4]	; (24554 <k_mutex_unlock.constprop.0.isra.0+0x8>)
   2454e:	f004 bf19 	b.w	29384 <z_impl_k_mutex_unlock>
   24552:	bf00      	nop
   24554:	2000ceb0 	.word	0x2000ceb0

00024558 <event_handler_list_is_empty>:
	return list->head;
   24558:	4b02      	ldr	r3, [pc, #8]	; (24564 <event_handler_list_is_empty+0xc>)
Z_GENLIST_IS_EMPTY(slist)
   2455a:	6818      	ldr	r0, [r3, #0]
}
   2455c:	fab0 f080 	clz	r0, r0
   24560:	0940      	lsrs	r0, r0, #5
   24562:	4770      	bx	lr
   24564:	2000eafc 	.word	0x2000eafc

00024568 <event_handler_list_append_handler>:
{
   24568:	b570      	push	{r4, r5, r6, lr}
   2456a:	4606      	mov	r6, r0
	return list->head;
   2456c:	4d12      	ldr	r5, [pc, #72]	; (245b8 <event_handler_list_append_handler+0x50>)
	return z_impl_k_mutex_lock(mutex, timeout);
   2456e:	f04f 32ff 	mov.w	r2, #4294967295
   24572:	f04f 33ff 	mov.w	r3, #4294967295
   24576:	4811      	ldr	r0, [pc, #68]	; (245bc <event_handler_list_append_handler+0x54>)
   24578:	f004 fe34 	bl	291e4 <z_impl_k_mutex_lock>
   2457c:	682c      	ldr	r4, [r5, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&handler_list, curr, node) {
   2457e:	b944      	cbnz	r4, 24592 <event_handler_list_append_handler+0x2a>
	to_ins = (struct event_handler *)k_malloc(sizeof(struct event_handler));
   24580:	2008      	movs	r0, #8
   24582:	f011 ff9e 	bl	364c2 <k_malloc>
	if (to_ins == NULL) {
   24586:	b948      	cbnz	r0, 2459c <event_handler_list_append_handler+0x34>
		k_mutex_unlock(&list_mtx);
   24588:	f7ff ffe0 	bl	2454c <k_mutex_unlock.constprop.0.isra.0>
		return -ENOBUFS;
   2458c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   24590:	e00d      	b.n	245ae <event_handler_list_append_handler+0x46>
		if (curr->handler == handler) {
   24592:	6863      	ldr	r3, [r4, #4]
   24594:	429e      	cmp	r6, r3
   24596:	d007      	beq.n	245a8 <event_handler_list_append_handler+0x40>
	return node->next;
   24598:	6824      	ldr	r4, [r4, #0]
   2459a:	e7f0      	b.n	2457e <event_handler_list_append_handler+0x16>
   2459c:	6004      	str	r4, [r0, #0]
	to_ins->handler = handler;
   2459e:	6046      	str	r6, [r0, #4]
	return list->tail;
   245a0:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   245a2:	b92b      	cbnz	r3, 245b0 <event_handler_list_append_handler+0x48>
	list->head = node;
   245a4:	e9c5 0000 	strd	r0, r0, [r5]
		k_mutex_unlock(&list_mtx);
   245a8:	f7ff ffd0 	bl	2454c <k_mutex_unlock.constprop.0.isra.0>
		return 0;
   245ac:	2000      	movs	r0, #0
}
   245ae:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   245b0:	6018      	str	r0, [r3, #0]
	list->tail = node;
   245b2:	6068      	str	r0, [r5, #4]
}
   245b4:	e7f8      	b.n	245a8 <event_handler_list_append_handler+0x40>
   245b6:	bf00      	nop
   245b8:	2000eafc 	.word	0x2000eafc
   245bc:	2000ceb0 	.word	0x2000ceb0

000245c0 <event_handler_list_dispatch>:
{
   245c0:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   245c2:	4c0f      	ldr	r4, [pc, #60]	; (24600 <event_handler_list_dispatch+0x40>)
   245c4:	4605      	mov	r5, r0
	if (event_handler_list_is_empty()) {
   245c6:	6823      	ldr	r3, [r4, #0]
   245c8:	b1c3      	cbz	r3, 245fc <event_handler_list_dispatch+0x3c>
   245ca:	f04f 33ff 	mov.w	r3, #4294967295
   245ce:	f04f 32ff 	mov.w	r2, #4294967295
   245d2:	480c      	ldr	r0, [pc, #48]	; (24604 <event_handler_list_dispatch+0x44>)
   245d4:	f004 fe06 	bl	291e4 <z_impl_k_mutex_lock>
   245d8:	6823      	ldr	r3, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   245da:	b10b      	cbz	r3, 245e0 <event_handler_list_dispatch+0x20>
	return node->next;
   245dc:	681c      	ldr	r4, [r3, #0]
   245de:	b91b      	cbnz	r3, 245e8 <event_handler_list_dispatch+0x28>
}
   245e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
   245e4:	f7ff bfb2 	b.w	2454c <k_mutex_unlock.constprop.0.isra.0>
		curr->handler(evt);
   245e8:	4628      	mov	r0, r5
   245ea:	685b      	ldr	r3, [r3, #4]
   245ec:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   245ee:	b11c      	cbz	r4, 245f8 <event_handler_list_dispatch+0x38>
   245f0:	6822      	ldr	r2, [r4, #0]
   245f2:	4623      	mov	r3, r4
   245f4:	4614      	mov	r4, r2
   245f6:	e7f2      	b.n	245de <event_handler_list_dispatch+0x1e>
   245f8:	4622      	mov	r2, r4
   245fa:	e7fa      	b.n	245f2 <event_handler_list_dispatch+0x32>
}
   245fc:	bd38      	pop	{r3, r4, r5, pc}
   245fe:	bf00      	nop
   24600:	2000eafc 	.word	0x2000eafc
   24604:	2000ceb0 	.word	0x2000ceb0

00024608 <response_is_valid>:
{
   24608:	b570      	push	{r4, r5, r6, lr}
   2460a:	460e      	mov	r6, r1
   2460c:	4614      	mov	r4, r2
	if ((response == NULL) || (check == NULL)) {
   2460e:	4605      	mov	r5, r0
{
   24610:	b086      	sub	sp, #24
	if ((response == NULL) || (check == NULL)) {
   24612:	b100      	cbz	r0, 24616 <response_is_valid+0xe>
   24614:	b962      	cbnz	r2, 24630 <response_is_valid+0x28>
		LOG_ERR("Invalid pointer provided");
   24616:	4b0d      	ldr	r3, [pc, #52]	; (2464c <response_is_valid+0x44>)
   24618:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2461c:	9305      	str	r3, [sp, #20]
   2461e:	2302      	movs	r3, #2
   24620:	480b      	ldr	r0, [pc, #44]	; (24650 <response_is_valid+0x48>)
   24622:	aa04      	add	r2, sp, #16
   24624:	9304      	str	r3, [sp, #16]
   24626:	f010 fd82 	bl	3512e <z_log_msg_static_create.constprop.0>
		return false;
   2462a:	2000      	movs	r0, #0
}
   2462c:	b006      	add	sp, #24
   2462e:	bd70      	pop	{r4, r5, r6, pc}
	if ((response_len < strlen(check)) ||
   24630:	4610      	mov	r0, r2
   24632:	f7e4 fdf6 	bl	9222 <strlen>
   24636:	42b0      	cmp	r0, r6
   24638:	d8f7      	bhi.n	2462a <response_is_valid+0x22>
	    (memcmp(response, check, response_len) != 0)) {
   2463a:	4632      	mov	r2, r6
   2463c:	4621      	mov	r1, r4
   2463e:	4628      	mov	r0, r5
   24640:	f011 ff62 	bl	36508 <memcmp>
	if ((response_len < strlen(check)) ||
   24644:	fab0 f080 	clz	r0, r0
   24648:	0940      	lsrs	r0, r0, #5
   2464a:	e7ef      	b.n	2462c <response_is_valid+0x24>
   2464c:	0003fa55 	.word	0x0003fa55
   24650:	00037998 	.word	0x00037998

00024654 <parse_psm>:

int parse_psm(const char *active_time_str, const char *tau_ext_str,
	      const char *tau_legacy_str, struct lte_lc_psm_cfg *psm_cfg)
{
   24654:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	char unit_str[4] = {0};
   24658:	f04f 0900 	mov.w	r9, #0
{
   2465c:	b089      	sub	sp, #36	; 0x24
   2465e:	4607      	mov	r7, r0
   24660:	460e      	mov	r6, r1
   24662:	4614      	mov	r4, r2
   24664:	461d      	mov	r5, r3
	char unit_str[4] = {0};
   24666:	f8cd 9004 	str.w	r9, [sp, #4]
	/* Lookup table for T3412 (legacy) timer used for periodic TAU. Unit is seconds.
	 * Ref: GPRS Timer in 3GPP TS 24.008 Table 10.5.172/3GPP TS 24.008.
	 */
	static const uint32_t t3412_lookup[8] = {2, 60, 360, 60, 60, 60, 60, 0};

	if ((strlen(active_time_str) != 8) || (strlen(tau_ext_str) != 8)) {
   2466a:	f7e4 fdda 	bl	9222 <strlen>
   2466e:	2808      	cmp	r0, #8
   24670:	d11b      	bne.n	246aa <parse_psm+0x56>
   24672:	4630      	mov	r0, r6
   24674:	f7e4 fdd5 	bl	9222 <strlen>
   24678:	2808      	cmp	r0, #8
   2467a:	d116      	bne.n	246aa <parse_psm+0x56>
		return -EINVAL;
	}

	/* Parse T3412-extended (periodic TAU) timer */
	memcpy(unit_str, tau_ext_str, unit_str_len);
   2467c:	8832      	ldrh	r2, [r6, #0]
   2467e:	78b3      	ldrb	r3, [r6, #2]
   24680:	f8ad 2004 	strh.w	r2, [sp, #4]

	lut_idx = strtoul(unit_str, NULL, 2);
   24684:	4649      	mov	r1, r9
   24686:	2202      	movs	r2, #2
   24688:	a801      	add	r0, sp, #4
	memcpy(unit_str, tau_ext_str, unit_str_len);
   2468a:	f88d 3006 	strb.w	r3, [sp, #6]
	lut_idx = strtoul(unit_str, NULL, 2);
   2468e:	f008 fd45 	bl	2d11c <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3412_ext_lookup) - 1)) {
   24692:	2807      	cmp	r0, #7
   24694:	d90e      	bls.n	246b4 <parse_psm+0x60>
		LOG_ERR("Unable to parse periodic TAU string (T3412 extended)");
   24696:	4b32      	ldr	r3, [pc, #200]	; (24760 <parse_psm+0x10c>)
   24698:	9307      	str	r3, [sp, #28]
   2469a:	2302      	movs	r3, #2
   2469c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   246a0:	4830      	ldr	r0, [pc, #192]	; (24764 <parse_psm+0x110>)
   246a2:	aa06      	add	r2, sp, #24
   246a4:	9306      	str	r3, [sp, #24]
   246a6:	f010 fd42 	bl	3512e <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   246aa:	f06f 0015 	mvn.w	r0, #21

	LOG_DBG("TAU: %d sec, active time: %d sec",
		psm_cfg->tau, psm_cfg->active_time);

	return 0;
}
   246ae:	b009      	add	sp, #36	; 0x24
   246b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	timer_unit = t3412_ext_lookup[lut_idx];
   246b4:	4b2c      	ldr	r3, [pc, #176]	; (24768 <parse_psm+0x114>)
	timer_value = strtoul(tau_ext_str + unit_str_len, NULL, 2);
   246b6:	2202      	movs	r2, #2
	timer_unit = t3412_ext_lookup[lut_idx];
   246b8:	f853 8020 	ldr.w	r8, [r3, r0, lsl #2]
	timer_value = strtoul(tau_ext_str + unit_str_len, NULL, 2);
   246bc:	4649      	mov	r1, r9
   246be:	1cf0      	adds	r0, r6, #3
   246c0:	f008 fd2c 	bl	2d11c <strtoul>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   246c4:	f1b8 0f00 	cmp.w	r8, #0
   246c8:	d117      	bne.n	246fa <parse_psm+0xa6>
   246ca:	f04f 33ff 	mov.w	r3, #4294967295
   246ce:	602b      	str	r3, [r5, #0]
	if ((psm_cfg->tau == -1) && tau_legacy_str && (strlen(tau_legacy_str) == 8)) {
   246d0:	b1c4      	cbz	r4, 24704 <parse_psm+0xb0>
   246d2:	4620      	mov	r0, r4
   246d4:	f7e4 fda5 	bl	9222 <strlen>
   246d8:	2808      	cmp	r0, #8
   246da:	d113      	bne.n	24704 <parse_psm+0xb0>
		memcpy(unit_str, tau_legacy_str, unit_str_len);
   246dc:	8822      	ldrh	r2, [r4, #0]
   246de:	78a3      	ldrb	r3, [r4, #2]
   246e0:	f8ad 2004 	strh.w	r2, [sp, #4]
		lut_idx = strtoul(unit_str, NULL, 2);
   246e4:	2100      	movs	r1, #0
   246e6:	2202      	movs	r2, #2
   246e8:	a801      	add	r0, sp, #4
		memcpy(unit_str, tau_legacy_str, unit_str_len);
   246ea:	f88d 3006 	strb.w	r3, [sp, #6]
		lut_idx = strtoul(unit_str, NULL, 2);
   246ee:	f008 fd15 	bl	2d11c <strtoul>
		if (lut_idx > (ARRAY_SIZE(t3412_lookup) - 1)) {
   246f2:	2807      	cmp	r0, #7
   246f4:	d915      	bls.n	24722 <parse_psm+0xce>
			LOG_ERR("Unable to parse periodic TAU string (T3412)");
   246f6:	4b1d      	ldr	r3, [pc, #116]	; (2476c <parse_psm+0x118>)
   246f8:	e7ce      	b.n	24698 <parse_psm+0x44>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   246fa:	fb00 f008 	mul.w	r0, r0, r8
   246fe:	6028      	str	r0, [r5, #0]
	if ((psm_cfg->tau == -1) && tau_legacy_str && (strlen(tau_legacy_str) == 8)) {
   24700:	3001      	adds	r0, #1
   24702:	d0e5      	beq.n	246d0 <parse_psm+0x7c>
	memcpy(unit_str, active_time_str, unit_str_len);
   24704:	883a      	ldrh	r2, [r7, #0]
   24706:	78bb      	ldrb	r3, [r7, #2]
   24708:	f8ad 2004 	strh.w	r2, [sp, #4]
	lut_idx = strtoul(unit_str, NULL, 2);
   2470c:	2100      	movs	r1, #0
   2470e:	2202      	movs	r2, #2
   24710:	a801      	add	r0, sp, #4
	memcpy(unit_str, active_time_str, unit_str_len);
   24712:	f88d 3006 	strb.w	r3, [sp, #6]
	lut_idx = strtoul(unit_str, NULL, 2);
   24716:	f008 fd01 	bl	2d11c <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3324_lookup) - 1)) {
   2471a:	2807      	cmp	r0, #7
   2471c:	d910      	bls.n	24740 <parse_psm+0xec>
		LOG_ERR("Unable to parse active time string");
   2471e:	4b14      	ldr	r3, [pc, #80]	; (24770 <parse_psm+0x11c>)
   24720:	e7ba      	b.n	24698 <parse_psm+0x44>
		timer_unit = t3412_lookup[lut_idx];
   24722:	4b14      	ldr	r3, [pc, #80]	; (24774 <parse_psm+0x120>)
		timer_value = strtoul(tau_legacy_str + unit_str_len, NULL, 2);
   24724:	2202      	movs	r2, #2
		timer_unit = t3412_lookup[lut_idx];
   24726:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
		timer_value = strtoul(tau_legacy_str + unit_str_len, NULL, 2);
   2472a:	2100      	movs	r1, #0
   2472c:	1ce0      	adds	r0, r4, #3
   2472e:	f008 fcf5 	bl	2d11c <strtoul>
		psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   24732:	b116      	cbz	r6, 2473a <parse_psm+0xe6>
   24734:	4370      	muls	r0, r6
   24736:	6028      	str	r0, [r5, #0]
   24738:	e7e4      	b.n	24704 <parse_psm+0xb0>
   2473a:	f04f 30ff 	mov.w	r0, #4294967295
   2473e:	e7fa      	b.n	24736 <parse_psm+0xe2>
	timer_unit = t3324_lookup[lut_idx];
   24740:	4b0d      	ldr	r3, [pc, #52]	; (24778 <parse_psm+0x124>)
	timer_value = strtoul(active_time_str + unit_str_len, NULL, 2);
   24742:	2202      	movs	r2, #2
	timer_unit = t3324_lookup[lut_idx];
   24744:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	timer_value = strtoul(active_time_str + unit_str_len, NULL, 2);
   24748:	2100      	movs	r1, #0
   2474a:	1cf8      	adds	r0, r7, #3
   2474c:	f008 fce6 	bl	2d11c <strtoul>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   24750:	b11c      	cbz	r4, 2475a <parse_psm+0x106>
   24752:	4344      	muls	r4, r0
	return 0;
   24754:	2000      	movs	r0, #0
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   24756:	606c      	str	r4, [r5, #4]
	return 0;
   24758:	e7a9      	b.n	246ae <parse_psm+0x5a>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   2475a:	f04f 34ff 	mov.w	r4, #4294967295
   2475e:	e7f9      	b.n	24754 <parse_psm+0x100>
   24760:	0003fba5 	.word	0x0003fba5
   24764:	00037998 	.word	0x00037998
   24768:	00038728 	.word	0x00038728
   2476c:	0003fbda 	.word	0x0003fbda
   24770:	0003fc06 	.word	0x0003fc06
   24774:	00038708 	.word	0x00038708
   24778:	00038708 	.word	0x00038708

0002477c <parse_rrc_mode>:
int parse_rrc_mode(const char *at_response,
		   enum lte_lc_rrc_mode *mode,
		   size_t mode_index)
{
	int err, temp_mode;
	struct at_param_list resp_list = {0};
   2477c:	2300      	movs	r3, #0
{
   2477e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24782:	b084      	sub	sp, #16
   24784:	af00      	add	r7, sp, #0
   24786:	4680      	mov	r8, r0
   24788:	460d      	mov	r5, r1

	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   2478a:	f107 0008 	add.w	r0, r7, #8
   2478e:	2104      	movs	r1, #4
{
   24790:	4616      	mov	r6, r2
	struct at_param_list resp_list = {0};
   24792:	e9c7 3302 	strd	r3, r3, [r7, #8]
	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   24796:	f010 fb7a 	bl	34e8e <at_params_list_init>
	if (err) {
   2479a:	4604      	mov	r4, r0
   2479c:	b198      	cbz	r0, 247c6 <parse_rrc_mode+0x4a>
		LOG_ERR("Could not init AT params list, error: %d", err);
   2479e:	466d      	mov	r5, sp
   247a0:	b088      	sub	sp, #32
   247a2:	466a      	mov	r2, sp
   247a4:	4b29      	ldr	r3, [pc, #164]	; (2484c <parse_rrc_mode+0xd0>)
   247a6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   247aa:	e9c2 3005 	strd	r3, r0, [r2, #20]
   247ae:	2303      	movs	r3, #3
   247b0:	4827      	ldr	r0, [pc, #156]	; (24850 <parse_rrc_mode+0xd4>)
   247b2:	f842 3f10 	str.w	r3, [r2, #16]!
   247b6:	f010 fcba 	bl	3512e <z_log_msg_static_create.constprop.0>
   247ba:	46ad      	mov	sp, r5

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   247bc:	4620      	mov	r0, r4
   247be:	3710      	adds	r7, #16
   247c0:	46bd      	mov	sp, r7
   247c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = at_parser_params_from_str(at_response,
   247c6:	4601      	mov	r1, r0
   247c8:	f107 0208 	add.w	r2, r7, #8
   247cc:	4640      	mov	r0, r8
   247ce:	f010 fb5b 	bl	34e88 <at_parser_params_from_str>
	if (err) {
   247d2:	4604      	mov	r4, r0
   247d4:	b198      	cbz	r0, 247fe <parse_rrc_mode+0x82>
		LOG_ERR("Could not parse +CSCON response, error: %d", err);
   247d6:	466d      	mov	r5, sp
   247d8:	b088      	sub	sp, #32
   247da:	466a      	mov	r2, sp
   247dc:	4b1d      	ldr	r3, [pc, #116]	; (24854 <parse_rrc_mode+0xd8>)
		LOG_ERR("Could not get signalling mode, error: %d", err);
   247de:	e9c2 3405 	strd	r3, r4, [r2, #20]
   247e2:	2303      	movs	r3, #3
   247e4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   247e8:	4819      	ldr	r0, [pc, #100]	; (24850 <parse_rrc_mode+0xd4>)
   247ea:	f842 3f10 	str.w	r3, [r2, #16]!
   247ee:	f010 fc9e 	bl	3512e <z_log_msg_static_create.constprop.0>
   247f2:	46ad      	mov	sp, r5
	at_params_list_free(&resp_list);
   247f4:	f107 0008 	add.w	r0, r7, #8
   247f8:	f010 fb5c 	bl	34eb4 <at_params_list_free>
	return err;
   247fc:	e7de      	b.n	247bc <parse_rrc_mode+0x40>
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
   247fe:	4631      	mov	r1, r6
   24800:	1d3a      	adds	r2, r7, #4
   24802:	f107 0008 	add.w	r0, r7, #8
   24806:	f010 fc09 	bl	3501c <at_params_int_get>
	if (err) {
   2480a:	4604      	mov	r4, r0
   2480c:	b120      	cbz	r0, 24818 <parse_rrc_mode+0x9c>
		LOG_ERR("Could not get signalling mode, error: %d", err);
   2480e:	466d      	mov	r5, sp
   24810:	b088      	sub	sp, #32
   24812:	466a      	mov	r2, sp
   24814:	4b10      	ldr	r3, [pc, #64]	; (24858 <parse_rrc_mode+0xdc>)
   24816:	e7e2      	b.n	247de <parse_rrc_mode+0x62>
	if (temp_mode == 0) {
   24818:	687b      	ldr	r3, [r7, #4]
   2481a:	b11b      	cbz	r3, 24824 <parse_rrc_mode+0xa8>
	} else if (temp_mode == 1) {
   2481c:	2b01      	cmp	r3, #1
   2481e:	d103      	bne.n	24828 <parse_rrc_mode+0xac>
		*mode = LTE_LC_RRC_MODE_CONNECTED;
   24820:	702b      	strb	r3, [r5, #0]
   24822:	e7e7      	b.n	247f4 <parse_rrc_mode+0x78>
   24824:	4603      	mov	r3, r0
   24826:	e7fb      	b.n	24820 <parse_rrc_mode+0xa4>
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
   24828:	466c      	mov	r4, sp
   2482a:	b088      	sub	sp, #32
   2482c:	466a      	mov	r2, sp
   2482e:	490b      	ldr	r1, [pc, #44]	; (2485c <parse_rrc_mode+0xe0>)
   24830:	4807      	ldr	r0, [pc, #28]	; (24850 <parse_rrc_mode+0xd4>)
   24832:	e9c2 1305 	strd	r1, r3, [r2, #20]
   24836:	2303      	movs	r3, #3
   24838:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2483c:	f842 3f10 	str.w	r3, [r2, #16]!
   24840:	f010 fc75 	bl	3512e <z_log_msg_static_create.constprop.0>
   24844:	46a5      	mov	sp, r4
		err = -EINVAL;
   24846:	f06f 0415 	mvn.w	r4, #21
   2484a:	e7d3      	b.n	247f4 <parse_rrc_mode+0x78>
   2484c:	0003fa6e 	.word	0x0003fa6e
   24850:	00037998 	.word	0x00037998
   24854:	0003fc29 	.word	0x0003fc29
   24858:	0003fc54 	.word	0x0003fc54
   2485c:	0003fc7d 	.word	0x0003fc7d

00024860 <parse_cereg>:
int parse_cereg(const char *at_response,
		bool is_notif,
		enum lte_lc_nw_reg_status *reg_status,
		struct lte_lc_cell *cell,
		enum lte_lc_lte_mode *lte_mode)
{
   24860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24864:	461d      	mov	r5, r3
	int err, status;
	struct at_param_list resp_list;
	char str_buf[10];
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   24866:	2300      	movs	r3, #0
{
   24868:	b08a      	sub	sp, #40	; 0x28
   2486a:	af00      	add	r7, sp, #0
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   2486c:	60fb      	str	r3, [r7, #12]
   2486e:	823b      	strh	r3, [r7, #16]
   24870:	74bb      	strb	r3, [r7, #18]
{
   24872:	4616      	mov	r6, r2
	size_t response_prefix_len = sizeof(response_prefix);
	size_t len = sizeof(str_buf) - 1;
   24874:	2309      	movs	r3, #9
   24876:	2207      	movs	r2, #7
{
   24878:	4680      	mov	r8, r0
   2487a:	4689      	mov	r9, r1

	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   2487c:	f107 0014 	add.w	r0, r7, #20
   24880:	210b      	movs	r1, #11
	size_t len = sizeof(str_buf) - 1;
   24882:	e9c7 2300 	strd	r2, r3, [r7]
{
   24886:	f8d7 a048 	ldr.w	sl, [r7, #72]	; 0x48
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   2488a:	f010 fb00 	bl	34e8e <at_params_list_init>
	if (err) {
   2488e:	4604      	mov	r4, r0
   24890:	b198      	cbz	r0, 248ba <parse_cereg+0x5a>
		LOG_ERR("Could not init AT params list, error: %d", err);
   24892:	466d      	mov	r5, sp
   24894:	b088      	sub	sp, #32
   24896:	466a      	mov	r2, sp
   24898:	4b77      	ldr	r3, [pc, #476]	; (24a78 <parse_cereg+0x218>)
   2489a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2489e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   248a2:	2303      	movs	r3, #3
   248a4:	4875      	ldr	r0, [pc, #468]	; (24a7c <parse_cereg+0x21c>)
   248a6:	f842 3f10 	str.w	r3, [r2, #16]!
   248aa:	f010 fc40 	bl	3512e <z_log_msg_static_create.constprop.0>
   248ae:	46ad      	mov	sp, r5

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   248b0:	4620      	mov	r0, r4
   248b2:	3728      	adds	r7, #40	; 0x28
   248b4:	46bd      	mov	sp, r7
   248b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	err = at_parser_params_from_str(at_response,
   248ba:	4601      	mov	r1, r0
   248bc:	f107 0214 	add.w	r2, r7, #20
   248c0:	4640      	mov	r0, r8
   248c2:	f010 fae1 	bl	34e88 <at_parser_params_from_str>
	if (err) {
   248c6:	4604      	mov	r4, r0
   248c8:	b198      	cbz	r0, 248f2 <parse_cereg+0x92>
		LOG_ERR("Could not parse AT+CEREG response, error: %d", err);
   248ca:	466d      	mov	r5, sp
   248cc:	b088      	sub	sp, #32
   248ce:	466a      	mov	r2, sp
   248d0:	4b6b      	ldr	r3, [pc, #428]	; (24a80 <parse_cereg+0x220>)
		LOG_ERR("Could not get response prefix, error: %d", err);
   248d2:	e9c2 3405 	strd	r3, r4, [r2, #20]
   248d6:	2303      	movs	r3, #3
   248d8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   248dc:	4867      	ldr	r0, [pc, #412]	; (24a7c <parse_cereg+0x21c>)
   248de:	f842 3f10 	str.w	r3, [r2, #16]!
   248e2:	f010 fc24 	bl	3512e <z_log_msg_static_create.constprop.0>
   248e6:	46ad      	mov	sp, r5
	at_params_list_free(&resp_list);
   248e8:	f107 0014 	add.w	r0, r7, #20
   248ec:	f010 fae2 	bl	34eb4 <at_params_list_free>
	return err;
   248f0:	e7de      	b.n	248b0 <parse_cereg+0x50>
	err = at_params_string_get(&resp_list,
   248f2:	4601      	mov	r1, r0
   248f4:	463b      	mov	r3, r7
   248f6:	f107 020c 	add.w	r2, r7, #12
   248fa:	f107 0014 	add.w	r0, r7, #20
   248fe:	f010 fbbb 	bl	35078 <at_params_string_get>
	if (err) {
   24902:	4604      	mov	r4, r0
   24904:	b120      	cbz	r0, 24910 <parse_cereg+0xb0>
		LOG_ERR("Could not get response prefix, error: %d", err);
   24906:	466d      	mov	r5, sp
   24908:	b088      	sub	sp, #32
   2490a:	466a      	mov	r2, sp
   2490c:	4b5d      	ldr	r3, [pc, #372]	; (24a84 <parse_cereg+0x224>)
   2490e:	e7e0      	b.n	248d2 <parse_cereg+0x72>
	if (!response_is_valid(response_prefix, response_prefix_len,
   24910:	4a5d      	ldr	r2, [pc, #372]	; (24a88 <parse_cereg+0x228>)
   24912:	6839      	ldr	r1, [r7, #0]
   24914:	f107 000c 	add.w	r0, r7, #12
   24918:	f7ff fe76 	bl	24608 <response_is_valid>
   2491c:	2800      	cmp	r0, #0
   2491e:	d0e3      	beq.n	248e8 <parse_cereg+0x88>
	err = at_params_int_get(list, reg_status_index, &reg_status);
   24920:	f107 021c 	add.w	r2, r7, #28
   24924:	f1c9 0102 	rsb	r1, r9, #2
   24928:	f107 0014 	add.w	r0, r7, #20
   2492c:	f010 fb76 	bl	3501c <at_params_int_get>
	if (err) {
   24930:	f1b0 0800 	subs.w	r8, r0, #0
   24934:	d165      	bne.n	24a02 <parse_cereg+0x1a2>
	switch (reg_status) {
   24936:	69fb      	ldr	r3, [r7, #28]
   24938:	2b08      	cmp	r3, #8
   2493a:	d03b      	beq.n	249b4 <parse_cereg+0x154>
   2493c:	dc23      	bgt.n	24986 <parse_cereg+0x126>
   2493e:	2b05      	cmp	r3, #5
   24940:	d938      	bls.n	249b4 <parse_cereg+0x154>
		LOG_ERR("Invalid network registration status: %d", reg_status);
   24942:	466c      	mov	r4, sp
   24944:	b088      	sub	sp, #32
   24946:	466a      	mov	r2, sp
   24948:	4950      	ldr	r1, [pc, #320]	; (24a8c <parse_cereg+0x22c>)
   2494a:	484c      	ldr	r0, [pc, #304]	; (24a7c <parse_cereg+0x21c>)
   2494c:	e9c2 1305 	strd	r1, r3, [r2, #20]
   24950:	2303      	movs	r3, #3
   24952:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   24956:	f842 3f10 	str.w	r3, [r2, #16]!
   2495a:	f010 fbe8 	bl	3512e <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   2495e:	f06f 0815 	mvn.w	r8, #21
   24962:	46a5      	mov	sp, r4
		LOG_ERR("Could not get registration status, error: %d", status);
   24964:	466c      	mov	r4, sp
   24966:	b088      	sub	sp, #32
   24968:	466a      	mov	r2, sp
   2496a:	4b49      	ldr	r3, [pc, #292]	; (24a90 <parse_cereg+0x230>)
   2496c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   24970:	e9c2 3805 	strd	r3, r8, [r2, #20]
   24974:	2303      	movs	r3, #3
   24976:	4841      	ldr	r0, [pc, #260]	; (24a7c <parse_cereg+0x21c>)
   24978:	f842 3f10 	str.w	r3, [r2, #16]!
   2497c:	f010 fbd7 	bl	3512e <z_log_msg_static_create.constprop.0>
   24980:	46a5      	mov	sp, r4
		goto clean_exit;
   24982:	4644      	mov	r4, r8
   24984:	e7b0      	b.n	248e8 <parse_cereg+0x88>
	switch (reg_status) {
   24986:	2b5a      	cmp	r3, #90	; 0x5a
   24988:	d1db      	bne.n	24942 <parse_cereg+0xe2>
	if (reg_status) {
   2498a:	b106      	cbz	r6, 2498e <parse_cereg+0x12e>
		*reg_status = status;
   2498c:	7033      	strb	r3, [r6, #0]
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   2498e:	2d00      	cmp	r5, #0
   24990:	d140      	bne.n	24a14 <parse_cereg+0x1b4>
	if (lte_mode) {
   24992:	f1ba 0f00 	cmp.w	sl, #0
   24996:	d0a7      	beq.n	248e8 <parse_cereg+0x88>
		err = at_params_int_get(&resp_list,
   24998:	f107 0208 	add.w	r2, r7, #8
   2499c:	f1c9 0105 	rsb	r1, r9, #5
   249a0:	f107 0014 	add.w	r0, r7, #20
   249a4:	f010 fb3a 	bl	3501c <at_params_int_get>
		if (err) {
   249a8:	2800      	cmp	r0, #0
   249aa:	d163      	bne.n	24a74 <parse_cereg+0x214>
			*lte_mode = mode;
   249ac:	7a3b      	ldrb	r3, [r7, #8]
			LOG_DBG("LTE mode: %d", *lte_mode);
   249ae:	f88a 3000 	strb.w	r3, [sl]
   249b2:	e799      	b.n	248e8 <parse_cereg+0x88>
	if (reg_status) {
   249b4:	bb1e      	cbnz	r6, 249fe <parse_cereg+0x19e>
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   249b6:	2d00      	cmp	r5, #0
   249b8:	d0eb      	beq.n	24992 <parse_cereg+0x132>
	    (at_params_valid_count_get(&resp_list) > AT_CEREG_CELL_ID_INDEX)) {
   249ba:	f107 0014 	add.w	r0, r7, #20
   249be:	f010 fb7e 	bl	350be <at_params_valid_count_get>
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   249c2:	2803      	cmp	r0, #3
   249c4:	d926      	bls.n	24a14 <parse_cereg+0x1b4>
		err = at_params_string_get(
   249c6:	1d3b      	adds	r3, r7, #4
   249c8:	f107 021c 	add.w	r2, r7, #28
   249cc:	f1c9 0103 	rsb	r1, r9, #3
   249d0:	f107 0014 	add.w	r0, r7, #20
   249d4:	f010 fb50 	bl	35078 <at_params_string_get>
		if (err) {
   249d8:	4606      	mov	r6, r0
   249da:	b300      	cbz	r0, 24a1e <parse_cereg+0x1be>
			LOG_ERR("Could not get tracking area code, error: %d", err);
   249dc:	466c      	mov	r4, sp
   249de:	b088      	sub	sp, #32
   249e0:	466a      	mov	r2, sp
   249e2:	4b2c      	ldr	r3, [pc, #176]	; (24a94 <parse_cereg+0x234>)
			LOG_ERR("Could not get cell ID, error: %d", err);
   249e4:	e9c2 3605 	strd	r3, r6, [r2, #20]
   249e8:	2303      	movs	r3, #3
   249ea:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   249ee:	4823      	ldr	r0, [pc, #140]	; (24a7c <parse_cereg+0x21c>)
   249f0:	f842 3f10 	str.w	r3, [r2, #16]!
   249f4:	f010 fb9b 	bl	3512e <z_log_msg_static_create.constprop.0>
   249f8:	46a5      	mov	sp, r4
			goto clean_exit;
   249fa:	4634      	mov	r4, r6
   249fc:	e774      	b.n	248e8 <parse_cereg+0x88>
		*reg_status = status;
   249fe:	7033      	strb	r3, [r6, #0]
   24a00:	e7d9      	b.n	249b6 <parse_cereg+0x156>
	if (status < 0) {
   24a02:	dbaf      	blt.n	24964 <parse_cereg+0x104>
	if (reg_status) {
   24a04:	b10e      	cbz	r6, 24a0a <parse_cereg+0x1aa>
		*reg_status = status;
   24a06:	f886 8000 	strb.w	r8, [r6]
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   24a0a:	2d00      	cmp	r5, #0
   24a0c:	d0c1      	beq.n	24992 <parse_cereg+0x132>
   24a0e:	f1b8 0f5a 	cmp.w	r8, #90	; 0x5a
   24a12:	d1d2      	bne.n	249ba <parse_cereg+0x15a>
		cell->tac = UINT32_MAX;
   24a14:	f04f 33ff 	mov.w	r3, #4294967295
		cell->id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   24a18:	e9c5 3302 	strd	r3, r3, [r5, #8]
   24a1c:	e7b9      	b.n	24992 <parse_cereg+0x132>
		str_buf[len] = '\0';
   24a1e:	687b      	ldr	r3, [r7, #4]
		cell->tac = strtoul(str_buf, NULL, 16);
   24a20:	4601      	mov	r1, r0
		str_buf[len] = '\0';
   24a22:	3328      	adds	r3, #40	; 0x28
   24a24:	443b      	add	r3, r7
   24a26:	f803 0c0c 	strb.w	r0, [r3, #-12]
		cell->tac = strtoul(str_buf, NULL, 16);
   24a2a:	2210      	movs	r2, #16
   24a2c:	f107 001c 	add.w	r0, r7, #28
   24a30:	f008 fb74 	bl	2d11c <strtoul>
		len = sizeof(str_buf) - 1;
   24a34:	2309      	movs	r3, #9
		cell->tac = strtoul(str_buf, NULL, 16);
   24a36:	60e8      	str	r0, [r5, #12]
		len = sizeof(str_buf) - 1;
   24a38:	607b      	str	r3, [r7, #4]
		err = at_params_string_get(&resp_list,
   24a3a:	f107 021c 	add.w	r2, r7, #28
   24a3e:	1d3b      	adds	r3, r7, #4
   24a40:	f1c9 0104 	rsb	r1, r9, #4
   24a44:	f107 0014 	add.w	r0, r7, #20
   24a48:	f010 fb16 	bl	35078 <at_params_string_get>
		if (err) {
   24a4c:	4606      	mov	r6, r0
   24a4e:	b120      	cbz	r0, 24a5a <parse_cereg+0x1fa>
			LOG_ERR("Could not get cell ID, error: %d", err);
   24a50:	466c      	mov	r4, sp
   24a52:	b088      	sub	sp, #32
   24a54:	466a      	mov	r2, sp
   24a56:	4b10      	ldr	r3, [pc, #64]	; (24a98 <parse_cereg+0x238>)
   24a58:	e7c4      	b.n	249e4 <parse_cereg+0x184>
		str_buf[len] = '\0';
   24a5a:	687b      	ldr	r3, [r7, #4]
		cell->id = strtoul(str_buf, NULL, 16);
   24a5c:	4601      	mov	r1, r0
		str_buf[len] = '\0';
   24a5e:	3328      	adds	r3, #40	; 0x28
   24a60:	443b      	add	r3, r7
   24a62:	f803 0c0c 	strb.w	r0, [r3, #-12]
		cell->id = strtoul(str_buf, NULL, 16);
   24a66:	2210      	movs	r2, #16
   24a68:	f107 001c 	add.w	r0, r7, #28
   24a6c:	f008 fb56 	bl	2d11c <strtoul>
   24a70:	60a8      	str	r0, [r5, #8]
   24a72:	e78e      	b.n	24992 <parse_cereg+0x132>
			*lte_mode = LTE_LC_LTE_MODE_NONE;
   24a74:	2300      	movs	r3, #0
   24a76:	e79a      	b.n	249ae <parse_cereg+0x14e>
   24a78:	0003fa6e 	.word	0x0003fa6e
   24a7c:	00037998 	.word	0x00037998
   24a80:	0003fc99 	.word	0x0003fc99
   24a84:	0003fcc6 	.word	0x0003fcc6
   24a88:	0003f9f1 	.word	0x0003f9f1
   24a8c:	0003fcef 	.word	0x0003fcef
   24a90:	0003f673 	.word	0x0003f673
   24a94:	0003fd17 	.word	0x0003fd17
   24a98:	0003fd43 	.word	0x0003fd43

00024a9c <parse_xt3412>:

int parse_xt3412(const char *at_response, uint64_t *time)
{
	int err;
	struct at_param_list resp_list = {0};
   24a9c:	2300      	movs	r3, #0
{
   24a9e:	b5f0      	push	{r4, r5, r6, r7, lr}
   24aa0:	b089      	sub	sp, #36	; 0x24
   24aa2:	af00      	add	r7, sp, #0
   24aa4:	4606      	mov	r6, r0

	if (time == NULL || at_response == NULL) {
   24aa6:	460d      	mov	r5, r1
	struct at_param_list resp_list = {0};
   24aa8:	e9c7 3300 	strd	r3, r3, [r7]
	if (time == NULL || at_response == NULL) {
   24aac:	2900      	cmp	r1, #0
   24aae:	d056      	beq.n	24b5e <parse_xt3412+0xc2>
   24ab0:	2800      	cmp	r0, #0
   24ab2:	d054      	beq.n	24b5e <parse_xt3412+0xc2>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_XT3412_PARAMS_COUNT_MAX);
   24ab4:	2104      	movs	r1, #4
   24ab6:	4638      	mov	r0, r7
   24ab8:	f010 f9e9 	bl	34e8e <at_params_list_init>
	if (err) {
   24abc:	4604      	mov	r4, r0
   24abe:	b190      	cbz	r0, 24ae6 <parse_xt3412+0x4a>
		LOG_ERR("Could not init AT params list, error: %d", err);
   24ac0:	466d      	mov	r5, sp
   24ac2:	b088      	sub	sp, #32
   24ac4:	466a      	mov	r2, sp
   24ac6:	4b27      	ldr	r3, [pc, #156]	; (24b64 <parse_xt3412+0xc8>)
   24ac8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   24acc:	e9c2 3005 	strd	r3, r0, [r2, #20]
   24ad0:	2303      	movs	r3, #3
   24ad2:	4825      	ldr	r0, [pc, #148]	; (24b68 <parse_xt3412+0xcc>)
   24ad4:	f842 3f10 	str.w	r3, [r2, #16]!
   24ad8:	f010 fb29 	bl	3512e <z_log_msg_static_create.constprop.0>
   24adc:	46ad      	mov	sp, r5
	}

clean_exit:
	at_params_list_free(&resp_list);
	return err;
}
   24ade:	4620      	mov	r0, r4
   24ae0:	3724      	adds	r7, #36	; 0x24
   24ae2:	46bd      	mov	sp, r7
   24ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   24ae6:	4601      	mov	r1, r0
   24ae8:	463a      	mov	r2, r7
   24aea:	4630      	mov	r0, r6
   24aec:	f010 f9cc 	bl	34e88 <at_parser_params_from_str>
	if (err) {
   24af0:	4604      	mov	r4, r0
   24af2:	b190      	cbz	r0, 24b1a <parse_xt3412+0x7e>
		LOG_ERR("Could not parse %%XT3412 response, error: %d", err);
   24af4:	466d      	mov	r5, sp
   24af6:	b088      	sub	sp, #32
   24af8:	466a      	mov	r2, sp
   24afa:	4b1c      	ldr	r3, [pc, #112]	; (24b6c <parse_xt3412+0xd0>)
		LOG_ERR("Could not get time until next TAU, error: %d", err);
   24afc:	e9c2 3405 	strd	r3, r4, [r2, #20]
   24b00:	2303      	movs	r3, #3
   24b02:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   24b06:	4818      	ldr	r0, [pc, #96]	; (24b68 <parse_xt3412+0xcc>)
   24b08:	f842 3f10 	str.w	r3, [r2, #16]!
   24b0c:	f010 fb0f 	bl	3512e <z_log_msg_static_create.constprop.0>
   24b10:	46ad      	mov	sp, r5
	at_params_list_free(&resp_list);
   24b12:	4638      	mov	r0, r7
   24b14:	f010 f9ce 	bl	34eb4 <at_params_list_free>
	return err;
   24b18:	e7e1      	b.n	24ade <parse_xt3412+0x42>
	err = at_params_int64_get(&resp_list, AT_XT3412_TIME_INDEX, time);
   24b1a:	462a      	mov	r2, r5
   24b1c:	2102      	movs	r1, #2
   24b1e:	4638      	mov	r0, r7
   24b20:	f010 fa95 	bl	3504e <at_params_int64_get>
	if (err) {
   24b24:	4604      	mov	r4, r0
   24b26:	b120      	cbz	r0, 24b32 <parse_xt3412+0x96>
		LOG_ERR("Could not get time until next TAU, error: %d", err);
   24b28:	466d      	mov	r5, sp
   24b2a:	b088      	sub	sp, #32
   24b2c:	466a      	mov	r2, sp
   24b2e:	4b10      	ldr	r3, [pc, #64]	; (24b70 <parse_xt3412+0xd4>)
   24b30:	e7e4      	b.n	24afc <parse_xt3412+0x60>
	if ((*time > T3412_MAX) || *time < 0) {
   24b32:	4910      	ldr	r1, [pc, #64]	; (24b74 <parse_xt3412+0xd8>)
   24b34:	e9d5 3200 	ldrd	r3, r2, [r5]
   24b38:	4299      	cmp	r1, r3
   24b3a:	f04f 0308 	mov.w	r3, #8
   24b3e:	4193      	sbcs	r3, r2
   24b40:	d2e7      	bcs.n	24b12 <parse_xt3412+0x76>
		LOG_WRN("Parsed time parameter not within valid range");
   24b42:	4b0d      	ldr	r3, [pc, #52]	; (24b78 <parse_xt3412+0xdc>)
   24b44:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   24b48:	61fb      	str	r3, [r7, #28]
   24b4a:	2302      	movs	r3, #2
   24b4c:	4806      	ldr	r0, [pc, #24]	; (24b68 <parse_xt3412+0xcc>)
   24b4e:	f107 0218 	add.w	r2, r7, #24
   24b52:	61bb      	str	r3, [r7, #24]
		err = -EINVAL;
   24b54:	f06f 0415 	mvn.w	r4, #21
		LOG_WRN("Parsed time parameter not within valid range");
   24b58:	f010 fae9 	bl	3512e <z_log_msg_static_create.constprop.0>
		err = -EINVAL;
   24b5c:	e7d9      	b.n	24b12 <parse_xt3412+0x76>
		return -EINVAL;
   24b5e:	f06f 0415 	mvn.w	r4, #21
   24b62:	e7bc      	b.n	24ade <parse_xt3412+0x42>
   24b64:	0003fa6e 	.word	0x0003fa6e
   24b68:	00037998 	.word	0x00037998
   24b6c:	0003fd64 	.word	0x0003fd64
   24b70:	0003fd91 	.word	0x0003fd91
   24b74:	5099e000 	.word	0x5099e000
   24b78:	0003fdbe 	.word	0x0003fdbe

00024b7c <neighborcell_count_get>:

uint32_t neighborcell_count_get(const char *at_response)
{
   24b7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint32_t comma_count, ncell_elements, ncell_count;

	if (at_response == NULL) {
   24b7e:	b968      	cbnz	r0, 24b9c <neighborcell_count_get+0x20>
		LOG_ERR("at_response is NULL, can't get cell count");
   24b80:	4b0f      	ldr	r3, [pc, #60]	; (24bc0 <neighborcell_count_get+0x44>)
   24b82:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   24b86:	9305      	str	r3, [sp, #20]
   24b88:	2302      	movs	r3, #2
   24b8a:	480e      	ldr	r0, [pc, #56]	; (24bc4 <neighborcell_count_get+0x48>)
   24b8c:	aa04      	add	r2, sp, #16
   24b8e:	9304      	str	r3, [sp, #16]
   24b90:	f010 facd 	bl	3512e <z_log_msg_static_create.constprop.0>
		return 0;
   24b94:	2000      	movs	r0, #0
	/* Add one, as there's no comma after the last element. */
	ncell_elements = comma_count - (AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT - 1) + 1;
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;

	return ncell_count;
}
   24b96:	b007      	add	sp, #28
   24b98:	f85d fb04 	ldr.w	pc, [sp], #4
	uint32_t count = 0;
   24b9c:	2300      	movs	r3, #0
   24b9e:	3801      	subs	r0, #1
		if (*str == c) {
   24ba0:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   24ba4:	2a2c      	cmp	r2, #44	; 0x2c
   24ba6:	d101      	bne.n	24bac <neighborcell_count_get+0x30>
			count++;
   24ba8:	3301      	adds	r3, #1
	} while (*(str++) != '\0');
   24baa:	e7f9      	b.n	24ba0 <neighborcell_count_get+0x24>
   24bac:	2a00      	cmp	r2, #0
   24bae:	d1f7      	bne.n	24ba0 <neighborcell_count_get+0x24>
	if (comma_count < AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT) {
   24bb0:	2b0a      	cmp	r3, #10
   24bb2:	d9ef      	bls.n	24b94 <neighborcell_count_get+0x18>
	ncell_elements = comma_count - (AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT - 1) + 1;
   24bb4:	f1a3 0009 	sub.w	r0, r3, #9
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;
   24bb8:	2305      	movs	r3, #5
   24bba:	fbb0 f0f3 	udiv	r0, r0, r3
	return ncell_count;
   24bbe:	e7ea      	b.n	24b96 <neighborcell_count_get+0x1a>
   24bc0:	0003fdeb 	.word	0x0003fdeb
   24bc4:	00037998 	.word	0x00037998

00024bc8 <parse_ncellmeas>:
 * Returns 1 on measurement failure
 * Returns -E2BIG if not all cells were parsed due to memory limitations
 * Returns otherwise a negative error code.
 */
int parse_ncellmeas(const char *at_response, struct lte_lc_cells_info *cells)
{
   24bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int err, status, tmp, len;
	struct at_param_list resp_list;
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
	size_t response_prefix_len = sizeof(response_prefix);
   24bcc:	230b      	movs	r3, #11
{
   24bce:	460d      	mov	r5, r1
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   24bd0:	2100      	movs	r1, #0
{
   24bd2:	4680      	mov	r8, r0
   24bd4:	b08c      	sub	sp, #48	; 0x30
   24bd6:	af00      	add	r7, sp, #0
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   24bd8:	e9c7 1109 	strd	r1, r1, [r7, #36]	; 0x24
	size_t response_prefix_len = sizeof(response_prefix);
   24bdc:	613b      	str	r3, [r7, #16]
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   24bde:	f8c7 102b 	str.w	r1, [r7, #43]	; 0x2b
static uint32_t get_char_frequency(const char *str, char c)
   24be2:	1e42      	subs	r2, r0, #1
		if (*str == c) {
   24be4:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   24be8:	2b2c      	cmp	r3, #44	; 0x2c
   24bea:	d101      	bne.n	24bf0 <parse_ncellmeas+0x28>
			count++;
   24bec:	3101      	adds	r1, #1
	} while (*(str++) != '\0');
   24bee:	e7f9      	b.n	24be4 <parse_ncellmeas+0x1c>
   24bf0:	2b00      	cmp	r3, #0
   24bf2:	d1f7      	bne.n	24be4 <parse_ncellmeas+0x1c>
	 * 3 is added to account for the parameters that do not have a trailng
	 * comma.
	 */
	size_t param_count = get_char_frequency(at_response, ',') + 3;

	cells->ncells_count = 0;
   24bf4:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   24bf8:	f04f 33ff 	mov.w	r3, #4294967295

	err = at_params_list_init(&resp_list, param_count);
   24bfc:	3103      	adds	r1, #3
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   24bfe:	60ab      	str	r3, [r5, #8]
	err = at_params_list_init(&resp_list, param_count);
   24c00:	f107 001c 	add.w	r0, r7, #28
   24c04:	f010 f943 	bl	34e8e <at_params_list_init>
	if (err) {
   24c08:	4604      	mov	r4, r0
   24c0a:	b198      	cbz	r0, 24c34 <parse_ncellmeas+0x6c>
		LOG_ERR("Could not init AT params list, error: %d", err);
   24c0c:	466d      	mov	r5, sp
   24c0e:	b088      	sub	sp, #32
   24c10:	466a      	mov	r2, sp
   24c12:	4bb5      	ldr	r3, [pc, #724]	; (24ee8 <parse_ncellmeas+0x320>)
   24c14:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   24c18:	e9c2 3005 	strd	r3, r0, [r2, #20]
   24c1c:	2303      	movs	r3, #3
   24c1e:	48b3      	ldr	r0, [pc, #716]	; (24eec <parse_ncellmeas+0x324>)
   24c20:	f842 3f10 	str.w	r3, [r2, #16]!
   24c24:	f010 fa83 	bl	3512e <z_log_msg_static_create.constprop.0>
   24c28:	46ad      	mov	sp, r5

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   24c2a:	4620      	mov	r0, r4
   24c2c:	3730      	adds	r7, #48	; 0x30
   24c2e:	46bd      	mov	sp, r7
   24c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	err = at_parser_params_from_str(at_response,
   24c34:	4601      	mov	r1, r0
   24c36:	f107 021c 	add.w	r2, r7, #28
   24c3a:	4640      	mov	r0, r8
   24c3c:	f010 f924 	bl	34e88 <at_parser_params_from_str>
	if (err && err != -E2BIG) {
   24c40:	4604      	mov	r4, r0
   24c42:	b1a8      	cbz	r0, 24c70 <parse_ncellmeas+0xa8>
   24c44:	1dc3      	adds	r3, r0, #7
   24c46:	d024      	beq.n	24c92 <parse_ncellmeas+0xca>
		LOG_ERR("Could not parse AT%%NCELLMEAS response, error: %d", err);
   24c48:	466d      	mov	r5, sp
   24c4a:	b088      	sub	sp, #32
   24c4c:	466a      	mov	r2, sp
   24c4e:	4ba8      	ldr	r3, [pc, #672]	; (24ef0 <parse_ncellmeas+0x328>)
		LOG_ERR("Could not get response prefix, error: %d", err);
   24c50:	e9c2 3405 	strd	r3, r4, [r2, #20]
   24c54:	2303      	movs	r3, #3
   24c56:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   24c5a:	48a4      	ldr	r0, [pc, #656]	; (24eec <parse_ncellmeas+0x324>)
   24c5c:	f842 3f10 	str.w	r3, [r2, #16]!
   24c60:	f010 fa65 	bl	3512e <z_log_msg_static_create.constprop.0>
   24c64:	46ad      	mov	sp, r5
	at_params_list_free(&resp_list);
   24c66:	f107 001c 	add.w	r0, r7, #28
   24c6a:	f010 f923 	bl	34eb4 <at_params_list_free>
	return err;
   24c6e:	e7dc      	b.n	24c2a <parse_ncellmeas+0x62>
	bool incomplete = false;
   24c70:	4606      	mov	r6, r0
	err = at_params_string_get(&resp_list,
   24c72:	2100      	movs	r1, #0
   24c74:	f107 0310 	add.w	r3, r7, #16
   24c78:	f107 0224 	add.w	r2, r7, #36	; 0x24
   24c7c:	f107 001c 	add.w	r0, r7, #28
   24c80:	f010 f9fa 	bl	35078 <at_params_string_get>
	if (err) {
   24c84:	4604      	mov	r4, r0
   24c86:	b130      	cbz	r0, 24c96 <parse_ncellmeas+0xce>
		LOG_ERR("Could not get response prefix, error: %d", err);
   24c88:	466d      	mov	r5, sp
   24c8a:	b088      	sub	sp, #32
   24c8c:	466a      	mov	r2, sp
   24c8e:	4b99      	ldr	r3, [pc, #612]	; (24ef4 <parse_ncellmeas+0x32c>)
   24c90:	e7de      	b.n	24c50 <parse_ncellmeas+0x88>
		incomplete = true;
   24c92:	2601      	movs	r6, #1
   24c94:	e7ed      	b.n	24c72 <parse_ncellmeas+0xaa>
	if (!response_is_valid(response_prefix, response_prefix_len,
   24c96:	4a98      	ldr	r2, [pc, #608]	; (24ef8 <parse_ncellmeas+0x330>)
   24c98:	6939      	ldr	r1, [r7, #16]
   24c9a:	f107 0024 	add.w	r0, r7, #36	; 0x24
   24c9e:	f7ff fcb3 	bl	24608 <response_is_valid>
   24ca2:	2800      	cmp	r0, #0
   24ca4:	f000 80b9 	beq.w	24e1a <parse_ncellmeas+0x252>
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_STATUS_INDEX, &status);
   24ca8:	2101      	movs	r1, #1
   24caa:	1d3a      	adds	r2, r7, #4
   24cac:	f107 001c 	add.w	r0, r7, #28
   24cb0:	f010 f9b4 	bl	3501c <at_params_int_get>
	if (err) {
   24cb4:	4604      	mov	r4, r0
   24cb6:	2800      	cmp	r0, #0
   24cb8:	d1d5      	bne.n	24c66 <parse_ncellmeas+0x9e>
	if (status != AT_NCELLMEAS_STATUS_VALUE_SUCCESS) {
   24cba:	687b      	ldr	r3, [r7, #4]
   24cbc:	2b00      	cmp	r3, #0
   24cbe:	f040 8110 	bne.w	24ee2 <parse_ncellmeas+0x31a>
	err = string_param_to_int(&resp_list, AT_NCELLMEAS_CELL_ID_INDEX, &tmp, 16);
   24cc2:	2102      	movs	r1, #2
   24cc4:	f107 0208 	add.w	r2, r7, #8
   24cc8:	f107 001c 	add.w	r0, r7, #28
   24ccc:	f010 fa58 	bl	35180 <string_param_to_int.constprop.0>
	if (err) {
   24cd0:	4604      	mov	r4, r0
   24cd2:	2800      	cmp	r0, #0
   24cd4:	d1c7      	bne.n	24c66 <parse_ncellmeas+0x9e>
	if (tmp > LTE_LC_CELL_EUTRAN_ID_MAX) {
   24cd6:	68bb      	ldr	r3, [r7, #8]
	len = sizeof(tmp_str);
   24cd8:	f04f 0907 	mov.w	r9, #7
	if (tmp > LTE_LC_CELL_EUTRAN_ID_MAX) {
   24cdc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
		tmp = LTE_LC_CELL_EUTRAN_ID_INVALID;
   24ce0:	bfa4      	itt	ge
   24ce2:	f04f 33ff 	movge.w	r3, #4294967295
   24ce6:	60bb      	strge	r3, [r7, #8]
	cells->current_cell.id = tmp;
   24ce8:	68bb      	ldr	r3, [r7, #8]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   24cea:	2103      	movs	r1, #3
	cells->current_cell.id = tmp;
   24cec:	60ab      	str	r3, [r5, #8]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   24cee:	f107 0214 	add.w	r2, r7, #20
   24cf2:	f107 030c 	add.w	r3, r7, #12
   24cf6:	f107 001c 	add.w	r0, r7, #28
	len = sizeof(tmp_str);
   24cfa:	f8c7 900c 	str.w	r9, [r7, #12]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   24cfe:	f010 f9bb 	bl	35078 <at_params_string_get>
	if (err) {
   24d02:	4604      	mov	r4, r0
   24d04:	2800      	cmp	r0, #0
   24d06:	d1ae      	bne.n	24c66 <parse_ncellmeas+0x9e>
	tmp_str[len] = '\0';
   24d08:	68fb      	ldr	r3, [r7, #12]
	err = string_to_int(&tmp_str[3], 10, &cells->current_cell.mnc);
   24d0a:	210a      	movs	r1, #10
	tmp_str[len] = '\0';
   24d0c:	3330      	adds	r3, #48	; 0x30
   24d0e:	443b      	add	r3, r7
   24d10:	f803 0c1c 	strb.w	r0, [r3, #-28]
	err = string_to_int(&tmp_str[3], 10, &cells->current_cell.mnc);
   24d14:	1d2a      	adds	r2, r5, #4
   24d16:	f107 0017 	add.w	r0, r7, #23
   24d1a:	f010 fa0b 	bl	35134 <string_to_int>
	if (err) {
   24d1e:	4604      	mov	r4, r0
   24d20:	2800      	cmp	r0, #0
   24d22:	d1a0      	bne.n	24c66 <parse_ncellmeas+0x9e>
	tmp_str[3] = '\0';
   24d24:	75f8      	strb	r0, [r7, #23]
	err = string_to_int(tmp_str, 10, &cells->current_cell.mcc);
   24d26:	462a      	mov	r2, r5
   24d28:	210a      	movs	r1, #10
   24d2a:	f107 0014 	add.w	r0, r7, #20
   24d2e:	f010 fa01 	bl	35134 <string_to_int>
	if (err) {
   24d32:	4604      	mov	r4, r0
   24d34:	2800      	cmp	r0, #0
   24d36:	d196      	bne.n	24c66 <parse_ncellmeas+0x9e>
	err = string_param_to_int(&resp_list, AT_NCELLMEAS_TAC_INDEX, &tmp, 16);
   24d38:	2104      	movs	r1, #4
   24d3a:	f107 0208 	add.w	r2, r7, #8
   24d3e:	f107 001c 	add.w	r0, r7, #28
   24d42:	f010 fa1d 	bl	35180 <string_param_to_int.constprop.0>
	if (err) {
   24d46:	4604      	mov	r4, r0
   24d48:	2800      	cmp	r0, #0
   24d4a:	d18c      	bne.n	24c66 <parse_ncellmeas+0x9e>
	cells->current_cell.tac = tmp;
   24d4c:	68bb      	ldr	r3, [r7, #8]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_TIMING_ADV_INDEX,
   24d4e:	2105      	movs	r1, #5
	cells->current_cell.tac = tmp;
   24d50:	60eb      	str	r3, [r5, #12]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_TIMING_ADV_INDEX,
   24d52:	f107 0208 	add.w	r2, r7, #8
   24d56:	f107 001c 	add.w	r0, r7, #28
   24d5a:	f010 f95f 	bl	3501c <at_params_int_get>
	if (err) {
   24d5e:	4604      	mov	r4, r0
   24d60:	2800      	cmp	r0, #0
   24d62:	d180      	bne.n	24c66 <parse_ncellmeas+0x9e>
	cells->current_cell.timing_advance = tmp;
   24d64:	68bb      	ldr	r3, [r7, #8]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_EARFCN_INDEX,
   24d66:	2106      	movs	r1, #6
	cells->current_cell.timing_advance = tmp;
   24d68:	82ab      	strh	r3, [r5, #20]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_EARFCN_INDEX,
   24d6a:	f105 0210 	add.w	r2, r5, #16
   24d6e:	f107 001c 	add.w	r0, r7, #28
   24d72:	f010 f953 	bl	3501c <at_params_int_get>
	if (err) {
   24d76:	4604      	mov	r4, r0
   24d78:	2800      	cmp	r0, #0
   24d7a:	f47f af74 	bne.w	24c66 <parse_ncellmeas+0x9e>
	err = at_params_short_get(&resp_list, AT_NCELLMEAS_PHYS_CELL_ID_INDEX,
   24d7e:	4649      	mov	r1, r9
   24d80:	f105 0228 	add.w	r2, r5, #40	; 0x28
   24d84:	f107 001c 	add.w	r0, r7, #28
   24d88:	f010 f912 	bl	34fb0 <at_params_short_get>
	if (err) {
   24d8c:	4604      	mov	r4, r0
   24d8e:	2800      	cmp	r0, #0
   24d90:	f47f af69 	bne.w	24c66 <parse_ncellmeas+0x9e>
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRP_INDEX, &tmp);
   24d94:	2108      	movs	r1, #8
   24d96:	f107 0208 	add.w	r2, r7, #8
   24d9a:	f107 001c 	add.w	r0, r7, #28
   24d9e:	f010 f93d 	bl	3501c <at_params_int_get>
	if (err) {
   24da2:	4604      	mov	r4, r0
   24da4:	2800      	cmp	r0, #0
   24da6:	f47f af5e 	bne.w	24c66 <parse_ncellmeas+0x9e>
	cells->current_cell.rsrp = tmp;
   24daa:	68bb      	ldr	r3, [r7, #8]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRQ_INDEX, &tmp);
   24dac:	2109      	movs	r1, #9
	cells->current_cell.rsrp = tmp;
   24dae:	856b      	strh	r3, [r5, #42]	; 0x2a
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRQ_INDEX, &tmp);
   24db0:	f107 0208 	add.w	r2, r7, #8
   24db4:	f107 001c 	add.w	r0, r7, #28
   24db8:	f010 f930 	bl	3501c <at_params_int_get>
	if (err) {
   24dbc:	4604      	mov	r4, r0
   24dbe:	2800      	cmp	r0, #0
   24dc0:	f47f af51 	bne.w	24c66 <parse_ncellmeas+0x9e>
	cells->current_cell.rsrq = tmp;
   24dc4:	68bb      	ldr	r3, [r7, #8]
	err = at_params_int64_get(&resp_list, AT_NCELLMEAS_MEASUREMENT_TIME_INDEX,
   24dc6:	210a      	movs	r1, #10
	cells->current_cell.rsrq = tmp;
   24dc8:	85ab      	strh	r3, [r5, #44]	; 0x2c
	err = at_params_int64_get(&resp_list, AT_NCELLMEAS_MEASUREMENT_TIME_INDEX,
   24dca:	f105 0220 	add.w	r2, r5, #32
   24dce:	f107 001c 	add.w	r0, r7, #28
   24dd2:	f010 f93c 	bl	3504e <at_params_int64_get>
	if (err) {
   24dd6:	4604      	mov	r4, r0
   24dd8:	2800      	cmp	r0, #0
   24dda:	f47f af44 	bne.w	24c66 <parse_ncellmeas+0x9e>
	cells->ncells_count = neighborcell_count_get(at_response);
   24dde:	4640      	mov	r0, r8
   24de0:	f7ff fecc 	bl	24b7c <neighborcell_count_get>
   24de4:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
			cells->ncells_count * AT_NCELLMEAS_N_PARAMS_COUNT;
   24de8:	b2c0      	uxtb	r0, r0
   24dea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	size_t ta_meas_time_index = AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT +
   24dee:	f100 040b 	add.w	r4, r0, #11
	if (at_params_valid_count_get(&resp_list) > ta_meas_time_index) {
   24df2:	f107 001c 	add.w	r0, r7, #28
   24df6:	f010 f962 	bl	350be <at_params_valid_count_get>
   24dfa:	4284      	cmp	r4, r0
   24dfc:	d20f      	bcs.n	24e1e <parse_ncellmeas+0x256>
		err = at_params_int64_get(&resp_list, ta_meas_time_index,
   24dfe:	4621      	mov	r1, r4
   24e00:	f105 0218 	add.w	r2, r5, #24
   24e04:	f107 001c 	add.w	r0, r7, #28
   24e08:	f010 f921 	bl	3504e <at_params_int64_get>
		if (err) {
   24e0c:	4604      	mov	r4, r0
   24e0e:	2800      	cmp	r0, #0
   24e10:	f47f af29 	bne.w	24c66 <parse_ncellmeas+0x9e>
	if ((cells->ncells_count == 0) || (cells->neighbor_cells == NULL)) {
   24e14:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   24e18:	b933      	cbnz	r3, 24e28 <parse_ncellmeas+0x260>
	err = at_params_string_get(&resp_list,
   24e1a:	2400      	movs	r4, #0
   24e1c:	e723      	b.n	24c66 <parse_ncellmeas+0x9e>
		cells->current_cell.timing_advance_meas_time = 0;
   24e1e:	2200      	movs	r2, #0
   24e20:	2300      	movs	r3, #0
   24e22:	e9c5 2306 	strd	r2, r3, [r5, #24]
   24e26:	e7f5      	b.n	24e14 <parse_ncellmeas+0x24c>
	if ((cells->ncells_count == 0) || (cells->neighbor_cells == NULL)) {
   24e28:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   24e2a:	2b00      	cmp	r3, #0
   24e2c:	d0f5      	beq.n	24e1a <parse_ncellmeas+0x252>
   24e2e:	f04f 080f 	mov.w	r8, #15
	for (size_t i = 0; i < cells->ncells_count; i++) {
   24e32:	f04f 0900 	mov.w	r9, #0
   24e36:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   24e3a:	4599      	cmp	r9, r3
   24e3c:	d304      	bcc.n	24e48 <parse_ncellmeas+0x280>
	if (incomplete) {
   24e3e:	2e00      	cmp	r6, #0
   24e40:	d0eb      	beq.n	24e1a <parse_ncellmeas+0x252>
		err = -E2BIG;
   24e42:	f06f 0406 	mvn.w	r4, #6
   24e46:	e70e      	b.n	24c66 <parse_ncellmeas+0x9e>
					&cells->neighbor_cells[i].earfcn);
   24e48:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		err = at_params_int_get(&resp_list,
   24e4a:	f1a8 0104 	sub.w	r1, r8, #4
   24e4e:	eb02 1209 	add.w	r2, r2, r9, lsl #4
   24e52:	f107 001c 	add.w	r0, r7, #28
   24e56:	f010 f8e1 	bl	3501c <at_params_int_get>
		if (err) {
   24e5a:	ea4f 1a09 	mov.w	sl, r9, lsl #4
   24e5e:	4604      	mov	r4, r0
   24e60:	2800      	cmp	r0, #0
   24e62:	f47f af00 	bne.w	24c66 <parse_ncellmeas+0x9e>
					  &cells->neighbor_cells[i].phys_cell_id);
   24e66:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		err = at_params_short_get(&resp_list,
   24e68:	f1a8 0103 	sub.w	r1, r8, #3
					  &cells->neighbor_cells[i].phys_cell_id);
   24e6c:	4452      	add	r2, sl
		err = at_params_short_get(&resp_list,
   24e6e:	3208      	adds	r2, #8
   24e70:	f107 001c 	add.w	r0, r7, #28
   24e74:	f010 f89c 	bl	34fb0 <at_params_short_get>
		if (err) {
   24e78:	4604      	mov	r4, r0
   24e7a:	2800      	cmp	r0, #0
   24e7c:	f47f aef3 	bne.w	24c66 <parse_ncellmeas+0x9e>
		err = at_params_int_get(&resp_list,
   24e80:	f107 0208 	add.w	r2, r7, #8
   24e84:	f1a8 0102 	sub.w	r1, r8, #2
   24e88:	f107 001c 	add.w	r0, r7, #28
   24e8c:	f010 f8c6 	bl	3501c <at_params_int_get>
		if (err) {
   24e90:	4604      	mov	r4, r0
   24e92:	2800      	cmp	r0, #0
   24e94:	f47f aee7 	bne.w	24c66 <parse_ncellmeas+0x9e>
		cells->neighbor_cells[i].rsrp = tmp;
   24e98:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   24e9a:	68ba      	ldr	r2, [r7, #8]
   24e9c:	4453      	add	r3, sl
   24e9e:	815a      	strh	r2, [r3, #10]
		err = at_params_int_get(&resp_list,
   24ea0:	f108 31ff 	add.w	r1, r8, #4294967295
   24ea4:	f107 0208 	add.w	r2, r7, #8
   24ea8:	f107 001c 	add.w	r0, r7, #28
   24eac:	f010 f8b6 	bl	3501c <at_params_int_get>
		if (err) {
   24eb0:	4604      	mov	r4, r0
   24eb2:	2800      	cmp	r0, #0
   24eb4:	f47f aed7 	bne.w	24c66 <parse_ncellmeas+0x9e>
		cells->neighbor_cells[i].rsrq = tmp;
   24eb8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   24eba:	68ba      	ldr	r2, [r7, #8]
   24ebc:	4453      	add	r3, sl
   24ebe:	819a      	strh	r2, [r3, #12]
					&cells->neighbor_cells[i].time_diff);
   24ec0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		err = at_params_int_get(&resp_list,
   24ec2:	4641      	mov	r1, r8
					&cells->neighbor_cells[i].time_diff);
   24ec4:	4452      	add	r2, sl
		err = at_params_int_get(&resp_list,
   24ec6:	3204      	adds	r2, #4
   24ec8:	f107 001c 	add.w	r0, r7, #28
   24ecc:	f010 f8a6 	bl	3501c <at_params_int_get>
		if (err) {
   24ed0:	f108 0805 	add.w	r8, r8, #5
   24ed4:	4604      	mov	r4, r0
   24ed6:	2800      	cmp	r0, #0
   24ed8:	f47f aec5 	bne.w	24c66 <parse_ncellmeas+0x9e>
	for (size_t i = 0; i < cells->ncells_count; i++) {
   24edc:	f109 0901 	add.w	r9, r9, #1
   24ee0:	e7a9      	b.n	24e36 <parse_ncellmeas+0x26e>
		err = 1;
   24ee2:	2401      	movs	r4, #1
   24ee4:	e6bf      	b.n	24c66 <parse_ncellmeas+0x9e>
   24ee6:	bf00      	nop
   24ee8:	0003fa6e 	.word	0x0003fa6e
   24eec:	00037998 	.word	0x00037998
   24ef0:	0003fe15 	.word	0x0003fe15
   24ef4:	0003fcc6 	.word	0x0003fcc6
   24ef8:	0003f9cf 	.word	0x0003f9cf

00024efc <parse_ncellmeas_gci>:
{
	struct at_param_list resp_list;
	struct lte_lc_ncell *ncells = NULL;
	int err, status, tmp_int, len;
	int16_t tmp_short;
	char response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   24efc:	2300      	movs	r3, #0
{
   24efe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24f02:	4616      	mov	r6, r2
	size_t response_prefix_len = sizeof(response_prefix);
   24f04:	220b      	movs	r2, #11
{
   24f06:	460d      	mov	r5, r1
	uint32_t count = 0;
   24f08:	4699      	mov	r9, r3
{
   24f0a:	b0a5      	sub	sp, #148	; 0x94
   24f0c:	af00      	add	r7, sp, #0
	char response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   24f0e:	e9c7 330f 	strd	r3, r3, [r7, #60]	; 0x3c
	size_t response_prefix_len = sizeof(response_prefix);
   24f12:	62ba      	str	r2, [r7, #40]	; 0x28
{
   24f14:	60f8      	str	r0, [r7, #12]
	char response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   24f16:	f8c7 3043 	str.w	r3, [r7, #67]	; 0x43
static uint32_t get_char_frequency(const char *str, char c)
   24f1a:	1e4a      	subs	r2, r1, #1
		if (*str == c) {
   24f1c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   24f20:	2b2c      	cmp	r3, #44	; 0x2c
   24f22:	d102      	bne.n	24f2a <parse_ncellmeas_gci+0x2e>
			count++;
   24f24:	f109 0901 	add.w	r9, r9, #1
	} while (*(str++) != '\0');
   24f28:	e7f8      	b.n	24f1c <parse_ncellmeas_gci+0x20>
   24f2a:	2b00      	cmp	r3, #0
   24f2c:	d1f6      	bne.n	24f1c <parse_ncellmeas_gci+0x20>
	size_t param_count = get_char_frequency(at_response, ',') + 3;

	/* Fill the defaults */
	cells->gci_cells_count = 0;
	cells->ncells_count = 0;
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   24f2e:	f04f 32ff 	mov.w	r2, #4294967295
   24f32:	2430      	movs	r4, #48	; 0x30
	size_t param_count = get_char_frequency(at_response, ',') + 3;
   24f34:	f109 0803 	add.w	r8, r9, #3
	cells->gci_cells_count = 0;
   24f38:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
	cells->ncells_count = 0;
   24f3c:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   24f40:	60b2      	str	r2, [r6, #8]

	for (i = 0; i < params->gci_count; i++) {
   24f42:	68f9      	ldr	r1, [r7, #12]
   24f44:	7849      	ldrb	r1, [r1, #1]
   24f46:	4299      	cmp	r1, r3
   24f48:	d812      	bhi.n	24f70 <parse_ncellmeas_gci+0x74>
	 *		<meas_time>,<serving>,<neighbor_count>
	 *	[,<n_earfcn1>,<n_phys_cell_id1>,<n_rsrp1>,<n_rsrq1>,<time_diff1>]
	 *	[,<n_earfcn2>,<n_phys_cell_id2>,<n_rsrp2>,<n_rsrq2>,<time_diff2>]...]...
	 */

	err = at_params_list_init(&resp_list, param_count);
   24f4a:	4641      	mov	r1, r8
   24f4c:	f107 0034 	add.w	r0, r7, #52	; 0x34
   24f50:	f00f ff9d 	bl	34e8e <at_params_list_init>
	if (err) {
   24f54:	4604      	mov	r4, r0
   24f56:	b1a8      	cbz	r0, 24f84 <parse_ncellmeas_gci+0x88>
		LOG_ERR("Could not init AT params list for cell_list, error: %d", err);
   24f58:	466d      	mov	r5, sp
   24f5a:	b088      	sub	sp, #32
   24f5c:	466a      	mov	r2, sp
   24f5e:	4bb1      	ldr	r3, [pc, #708]	; (25224 <parse_ncellmeas_gci+0x328>)

				/* <n_rsrq[j]> */
				curr_index++;
				err = at_params_int_get(&resp_list, curr_index, &tmp_int);
				if (err) {
					LOG_ERR("Could not parse n_rsrq, error: %d", err);
   24f60:	6153      	str	r3, [r2, #20]
		}
	}

	if (incomplete) {
		err = -E2BIG;
		LOG_ERR("Buffer is too small; results incomplete: %d", err);
   24f62:	2303      	movs	r3, #3
   24f64:	6194      	str	r4, [r2, #24]
   24f66:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   24f6a:	f842 3f10 	str.w	r3, [r2, #16]!
   24f6e:	e0a7      	b.n	250c0 <parse_ncellmeas_gci+0x1c4>
		cells->gci_cells[i].id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   24f70:	fb04 f003 	mul.w	r0, r4, r3
   24f74:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
	for (i = 0; i < params->gci_count; i++) {
   24f76:	3301      	adds	r3, #1
		cells->gci_cells[i].id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   24f78:	4401      	add	r1, r0
   24f7a:	608a      	str	r2, [r1, #8]
		cells->gci_cells[i].timing_advance = LTE_LC_CELL_TIMING_ADVANCE_INVALID;
   24f7c:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   24f7e:	4401      	add	r1, r0
   24f80:	828a      	strh	r2, [r1, #20]
	for (i = 0; i < params->gci_count; i++) {
   24f82:	e7de      	b.n	24f42 <parse_ncellmeas_gci+0x46>
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   24f84:	4601      	mov	r1, r0
   24f86:	f107 0234 	add.w	r2, r7, #52	; 0x34
   24f8a:	4628      	mov	r0, r5
   24f8c:	f00f ff7c 	bl	34e88 <at_parser_params_from_str>
	if (err && err != -E2BIG) {
   24f90:	4604      	mov	r4, r0
   24f92:	b360      	cbz	r0, 24fee <parse_ncellmeas_gci+0xf2>
   24f94:	1dc3      	adds	r3, r0, #7
   24f96:	d004      	beq.n	24fa2 <parse_ncellmeas_gci+0xa6>
		LOG_ERR("Could not parse AT%%NCELLMEAS response, error: %d", err);
   24f98:	466d      	mov	r5, sp
   24f9a:	b088      	sub	sp, #32
   24f9c:	466a      	mov	r2, sp
   24f9e:	4ba2      	ldr	r3, [pc, #648]	; (25228 <parse_ncellmeas_gci+0x32c>)
   24fa0:	e7de      	b.n	24f60 <parse_ncellmeas_gci+0x64>
		LOG_WRN("E2BIG was returned, continue. param_count %d, err %d, str %s",
   24fa2:	46ea      	mov	sl, sp
   24fa4:	b08a      	sub	sp, #40	; 0x28
   24fa6:	466a      	mov	r2, sp
   24fa8:	4ba0      	ldr	r3, [pc, #640]	; (2522c <parse_ncellmeas_gci+0x330>)
   24faa:	e9c2 0507 	strd	r0, r5, [r2, #28]
   24fae:	e9c2 3805 	strd	r3, r8, [r2, #20]
   24fb2:	f240 4302 	movw	r3, #1026	; 0x402
   24fb6:	8493      	strh	r3, [r2, #36]	; 0x24
   24fb8:	4b9d      	ldr	r3, [pc, #628]	; (25230 <parse_ncellmeas_gci+0x334>)
   24fba:	f44f 5132 	mov.w	r1, #11392	; 0x2c80
   24fbe:	f842 3f10 	str.w	r3, [r2, #16]!
   24fc2:	489c      	ldr	r0, [pc, #624]	; (25234 <parse_ncellmeas_gci+0x338>)
   24fc4:	f010 f8b3 	bl	3512e <z_log_msg_static_create.constprop.0>
		incomplete = true;
   24fc8:	2301      	movs	r3, #1
   24fca:	46d5      	mov	sp, sl
   24fcc:	617b      	str	r3, [r7, #20]
	err = at_params_string_get(&resp_list,
   24fce:	2100      	movs	r1, #0
   24fd0:	f107 0328 	add.w	r3, r7, #40	; 0x28
   24fd4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
   24fd8:	f107 0034 	add.w	r0, r7, #52	; 0x34
   24fdc:	f010 f84c 	bl	35078 <at_params_string_get>
	if (err) {
   24fe0:	4604      	mov	r4, r0
   24fe2:	b130      	cbz	r0, 24ff2 <parse_ncellmeas_gci+0xf6>
		LOG_ERR("Could not get response prefix, error: %d", err);
   24fe4:	466d      	mov	r5, sp
   24fe6:	b088      	sub	sp, #32
   24fe8:	466a      	mov	r2, sp
   24fea:	4b93      	ldr	r3, [pc, #588]	; (25238 <parse_ncellmeas_gci+0x33c>)
   24fec:	e7b8      	b.n	24f60 <parse_ncellmeas_gci+0x64>
	bool incomplete = false;
   24fee:	6178      	str	r0, [r7, #20]
   24ff0:	e7ed      	b.n	24fce <parse_ncellmeas_gci+0xd2>
	if (!response_is_valid(response_prefix, response_prefix_len,
   24ff2:	4a92      	ldr	r2, [pc, #584]	; (2523c <parse_ncellmeas_gci+0x340>)
   24ff4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   24ff6:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   24ffa:	f7ff fb05 	bl	24608 <response_is_valid>
   24ffe:	6138      	str	r0, [r7, #16]
   25000:	b9a0      	cbnz	r0, 2502c <parse_ncellmeas_gci+0x130>
		LOG_ERR("Not a valid NCELLMEAS response");
   25002:	4b8f      	ldr	r3, [pc, #572]	; (25240 <parse_ncellmeas_gci+0x344>)
   25004:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   25008:	677b      	str	r3, [r7, #116]	; 0x74
   2500a:	2302      	movs	r3, #2
   2500c:	4889      	ldr	r0, [pc, #548]	; (25234 <parse_ncellmeas_gci+0x338>)
   2500e:	673b      	str	r3, [r7, #112]	; 0x70
   25010:	f107 0270 	add.w	r2, r7, #112	; 0x70
   25014:	f010 f88b 	bl	3512e <z_log_msg_static_create.constprop.0>
	err = at_params_string_get(&resp_list,
   25018:	2400      	movs	r4, #0
	}

clean_exit:
	at_params_list_free(&resp_list);
   2501a:	f107 0034 	add.w	r0, r7, #52	; 0x34
   2501e:	f00f ff49 	bl	34eb4 <at_params_list_free>

	return err;
}
   25022:	4620      	mov	r0, r4
   25024:	3794      	adds	r7, #148	; 0x94
   25026:	46bd      	mov	sp, r7
   25028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	err = at_params_int_get(&resp_list, curr_index, &status);
   2502c:	2101      	movs	r1, #1
   2502e:	f107 021c 	add.w	r2, r7, #28
   25032:	f107 0034 	add.w	r0, r7, #52	; 0x34
   25036:	f00f fff1 	bl	3501c <at_params_int_get>
	if (err) {
   2503a:	4604      	mov	r4, r0
   2503c:	2800      	cmp	r0, #0
   2503e:	d1ec      	bne.n	2501a <parse_ncellmeas_gci+0x11e>
	if (status == AT_NCELLMEAS_STATUS_VALUE_FAIL) {
   25040:	69fc      	ldr	r4, [r7, #28]
   25042:	2c01      	cmp	r4, #1
   25044:	d0e9      	beq.n	2501a <parse_ncellmeas_gci+0x11e>
	} else if (status == AT_NCELLMEAS_STATUS_VALUE_INCOMPLETE) {
   25046:	2c02      	cmp	r4, #2
   25048:	d109      	bne.n	2505e <parse_ncellmeas_gci+0x162>
		LOG_WRN("NCELLMEAS measurements interrupted; results incomplete");
   2504a:	4b7e      	ldr	r3, [pc, #504]	; (25244 <parse_ncellmeas_gci+0x348>)
   2504c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   25050:	e9c7 431c 	strd	r4, r3, [r7, #112]	; 0x70
   25054:	4877      	ldr	r0, [pc, #476]	; (25234 <parse_ncellmeas_gci+0x338>)
   25056:	f107 0270 	add.w	r2, r7, #112	; 0x70
   2505a:	f010 f868 	bl	3512e <z_log_msg_static_create.constprop.0>
			for (j = 0; j < to_be_parsed_ncell_count; j++) {
   2505e:	f04f 0a00 	mov.w	sl, #0
   25062:	2501      	movs	r5, #1
   25064:	46d0      	mov	r8, sl
	for (i = 0; curr_index < (param_count - (AT_NCELLMEAS_GCI_CELL_PARAMS_COUNT + 1)) &&
   25066:	f1a9 030a 	sub.w	r3, r9, #10
   2506a:	607b      	str	r3, [r7, #4]
   2506c:	687b      	ldr	r3, [r7, #4]
   2506e:	42ab      	cmp	r3, r5
   25070:	d903      	bls.n	2507a <parse_ncellmeas_gci+0x17e>
			i < params->gci_count; i++) {
   25072:	68fb      	ldr	r3, [r7, #12]
   25074:	785b      	ldrb	r3, [r3, #1]
	for (i = 0; curr_index < (param_count - (AT_NCELLMEAS_GCI_CELL_PARAMS_COUNT + 1)) &&
   25076:	4543      	cmp	r3, r8
   25078:	d80a      	bhi.n	25090 <parse_ncellmeas_gci+0x194>
	if (incomplete) {
   2507a:	697b      	ldr	r3, [r7, #20]
   2507c:	2b00      	cmp	r3, #0
   2507e:	d0cb      	beq.n	25018 <parse_ncellmeas_gci+0x11c>
		LOG_ERR("Buffer is too small; results incomplete: %d", err);
   25080:	466d      	mov	r5, sp
   25082:	b088      	sub	sp, #32
   25084:	466a      	mov	r2, sp
   25086:	4b70      	ldr	r3, [pc, #448]	; (25248 <parse_ncellmeas_gci+0x34c>)
   25088:	f06f 0406 	mvn.w	r4, #6
   2508c:	6153      	str	r3, [r2, #20]
   2508e:	e768      	b.n	24f62 <parse_ncellmeas_gci+0x66>
		curr_index++;
   25090:	f105 0901 	add.w	r9, r5, #1
		err = string_param_to_int(&resp_list, curr_index, &tmp_int, 16);
   25094:	4649      	mov	r1, r9
   25096:	f107 0220 	add.w	r2, r7, #32
   2509a:	f107 0034 	add.w	r0, r7, #52	; 0x34
   2509e:	f010 f86f 	bl	35180 <string_param_to_int.constprop.0>
		if (err) {
   250a2:	4604      	mov	r4, r0
   250a4:	b188      	cbz	r0, 250ca <parse_ncellmeas_gci+0x1ce>
			LOG_ERR("Could not parse cell_id, index %d, i %d error: %d",
   250a6:	466d      	mov	r5, sp
   250a8:	b08a      	sub	sp, #40	; 0x28
   250aa:	466a      	mov	r2, sp
   250ac:	4b67      	ldr	r3, [pc, #412]	; (2524c <parse_ncellmeas_gci+0x350>)
   250ae:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   250b2:	e9c2 3905 	strd	r3, r9, [r2, #20]
   250b6:	2305      	movs	r3, #5
   250b8:	e9c2 8007 	strd	r8, r0, [r2, #28]
   250bc:	f842 3f10 	str.w	r3, [r2, #16]!
		LOG_ERR("Buffer is too small; results incomplete: %d", err);
   250c0:	485c      	ldr	r0, [pc, #368]	; (25234 <parse_ncellmeas_gci+0x338>)
   250c2:	f010 f834 	bl	3512e <z_log_msg_static_create.constprop.0>
   250c6:	46ad      	mov	sp, r5
   250c8:	e7a7      	b.n	2501a <parse_ncellmeas_gci+0x11e>
		if (tmp_int > LTE_LC_CELL_EUTRAN_ID_MAX) {
   250ca:	6a3b      	ldr	r3, [r7, #32]
   250cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   250d0:	db11      	blt.n	250f6 <parse_ncellmeas_gci+0x1fa>
			LOG_WRN("cell_id = %d which is > LTE_LC_CELL_EUTRAN_ID_MAX; "
   250d2:	466c      	mov	r4, sp
   250d4:	b088      	sub	sp, #32
   250d6:	466a      	mov	r2, sp
   250d8:	495d      	ldr	r1, [pc, #372]	; (25250 <parse_ncellmeas_gci+0x354>)
   250da:	4856      	ldr	r0, [pc, #344]	; (25234 <parse_ncellmeas_gci+0x338>)
   250dc:	e9c2 1305 	strd	r1, r3, [r2, #20]
   250e0:	2303      	movs	r3, #3
   250e2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   250e6:	f842 3f10 	str.w	r3, [r2, #16]!
   250ea:	f010 f820 	bl	3512e <z_log_msg_static_create.constprop.0>
			tmp_int = LTE_LC_CELL_EUTRAN_ID_INVALID;
   250ee:	f04f 33ff 	mov.w	r3, #4294967295
   250f2:	46a5      	mov	sp, r4
   250f4:	623b      	str	r3, [r7, #32]
		parsed_cell.id = tmp_int;
   250f6:	6a3b      	ldr	r3, [r7, #32]
		err = at_params_string_get(&resp_list, curr_index, tmp_str, &len);
   250f8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
		parsed_cell.id = tmp_int;
   250fc:	66bb      	str	r3, [r7, #104]	; 0x68
		len = sizeof(tmp_str);
   250fe:	2307      	movs	r3, #7
		err = at_params_string_get(&resp_list, curr_index, tmp_str, &len);
   25100:	1ca9      	adds	r1, r5, #2
		len = sizeof(tmp_str);
   25102:	627b      	str	r3, [r7, #36]	; 0x24
		err = at_params_string_get(&resp_list, curr_index, tmp_str, &len);
   25104:	f107 0034 	add.w	r0, r7, #52	; 0x34
   25108:	f107 0324 	add.w	r3, r7, #36	; 0x24
   2510c:	f00f ffb4 	bl	35078 <at_params_string_get>
		if (err) {
   25110:	4604      	mov	r4, r0
   25112:	b120      	cbz	r0, 2511e <parse_ncellmeas_gci+0x222>
			LOG_ERR("Could not parse plmn, error: %d", err);
   25114:	466d      	mov	r5, sp
   25116:	b088      	sub	sp, #32
   25118:	466a      	mov	r2, sp
   2511a:	4b4e      	ldr	r3, [pc, #312]	; (25254 <parse_ncellmeas_gci+0x358>)
   2511c:	e720      	b.n	24f60 <parse_ncellmeas_gci+0x64>
		tmp_str[len] = '\0';
   2511e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   25120:	f107 0218 	add.w	r2, r7, #24
   25124:	3378      	adds	r3, #120	; 0x78
   25126:	4413      	add	r3, r2
   25128:	f803 0c64 	strb.w	r0, [r3, #-100]
		err = string_to_int(&tmp_str[3], 10, &parsed_cell.mnc);
   2512c:	210a      	movs	r1, #10
   2512e:	f107 0264 	add.w	r2, r7, #100	; 0x64
   25132:	f107 002f 	add.w	r0, r7, #47	; 0x2f
   25136:	f00f fffd 	bl	35134 <string_to_int>
		if (err) {
   2513a:	4604      	mov	r4, r0
   2513c:	b120      	cbz	r0, 25148 <parse_ncellmeas_gci+0x24c>
			LOG_ERR("string_to_int, error: %d", err);
   2513e:	466d      	mov	r5, sp
   25140:	b088      	sub	sp, #32
   25142:	466a      	mov	r2, sp
   25144:	4b44      	ldr	r3, [pc, #272]	; (25258 <parse_ncellmeas_gci+0x35c>)
   25146:	e70b      	b.n	24f60 <parse_ncellmeas_gci+0x64>
		tmp_str[3] = '\0';
   25148:	f887 002f 	strb.w	r0, [r7, #47]	; 0x2f
		err = string_to_int(tmp_str, 10, &parsed_cell.mcc);
   2514c:	210a      	movs	r1, #10
   2514e:	f107 0260 	add.w	r2, r7, #96	; 0x60
   25152:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   25156:	f00f ffed 	bl	35134 <string_to_int>
		if (err) {
   2515a:	4604      	mov	r4, r0
   2515c:	2800      	cmp	r0, #0
   2515e:	d1ee      	bne.n	2513e <parse_ncellmeas_gci+0x242>
		err = string_param_to_int(&resp_list, curr_index, &tmp_int, 16);
   25160:	f107 0220 	add.w	r2, r7, #32
   25164:	1ce9      	adds	r1, r5, #3
   25166:	f107 0034 	add.w	r0, r7, #52	; 0x34
   2516a:	f010 f809 	bl	35180 <string_param_to_int.constprop.0>
		if (err) {
   2516e:	4604      	mov	r4, r0
   25170:	b160      	cbz	r0, 2518c <parse_ncellmeas_gci+0x290>
			LOG_ERR("Could not parse tracking_area_code in i %d, error: %d", i, err);
   25172:	466d      	mov	r5, sp
   25174:	b088      	sub	sp, #32
   25176:	466a      	mov	r2, sp
   25178:	4b38      	ldr	r3, [pc, #224]	; (2525c <parse_ncellmeas_gci+0x360>)
   2517a:	61d0      	str	r0, [r2, #28]
   2517c:	e9c2 3805 	strd	r3, r8, [r2, #20]
   25180:	2304      	movs	r3, #4
   25182:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   25186:	f842 3f10 	str.w	r3, [r2, #16]!
   2518a:	e799      	b.n	250c0 <parse_ncellmeas_gci+0x1c4>
		parsed_cell.tac = tmp_int;
   2518c:	6a3b      	ldr	r3, [r7, #32]
		err = at_params_int_get(&resp_list, curr_index, &tmp_int);
   2518e:	f107 0220 	add.w	r2, r7, #32
		parsed_cell.tac = tmp_int;
   25192:	66fb      	str	r3, [r7, #108]	; 0x6c
		err = at_params_int_get(&resp_list, curr_index, &tmp_int);
   25194:	1d29      	adds	r1, r5, #4
   25196:	f107 0034 	add.w	r0, r7, #52	; 0x34
   2519a:	f00f ff3f 	bl	3501c <at_params_int_get>
		if (err) {
   2519e:	4604      	mov	r4, r0
   251a0:	b120      	cbz	r0, 251ac <parse_ncellmeas_gci+0x2b0>
			LOG_ERR("Could not parse timing_advance, error: %d", err);
   251a2:	466d      	mov	r5, sp
   251a4:	b088      	sub	sp, #32
   251a6:	466a      	mov	r2, sp
   251a8:	4b2d      	ldr	r3, [pc, #180]	; (25260 <parse_ncellmeas_gci+0x364>)
   251aa:	e6d9      	b.n	24f60 <parse_ncellmeas_gci+0x64>
		parsed_cell.timing_advance = tmp_int;
   251ac:	6a3b      	ldr	r3, [r7, #32]
		err = at_params_int64_get(&resp_list, curr_index,
   251ae:	f107 0278 	add.w	r2, r7, #120	; 0x78
		parsed_cell.timing_advance = tmp_int;
   251b2:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
		err = at_params_int64_get(&resp_list, curr_index,
   251b6:	1d69      	adds	r1, r5, #5
   251b8:	f107 0034 	add.w	r0, r7, #52	; 0x34
   251bc:	f00f ff47 	bl	3504e <at_params_int64_get>
		if (err) {
   251c0:	4604      	mov	r4, r0
   251c2:	b120      	cbz	r0, 251ce <parse_ncellmeas_gci+0x2d2>
			LOG_ERR("Could not parse timing_advance_meas_time, error: %d", err);
   251c4:	466d      	mov	r5, sp
   251c6:	b088      	sub	sp, #32
   251c8:	466a      	mov	r2, sp
   251ca:	4b26      	ldr	r3, [pc, #152]	; (25264 <parse_ncellmeas_gci+0x368>)
   251cc:	e6c8      	b.n	24f60 <parse_ncellmeas_gci+0x64>
		err = at_params_int_get(&resp_list, curr_index, &parsed_cell.earfcn);
   251ce:	f107 0270 	add.w	r2, r7, #112	; 0x70
   251d2:	1da9      	adds	r1, r5, #6
   251d4:	f107 0034 	add.w	r0, r7, #52	; 0x34
   251d8:	f00f ff20 	bl	3501c <at_params_int_get>
		if (err) {
   251dc:	4604      	mov	r4, r0
   251de:	b120      	cbz	r0, 251ea <parse_ncellmeas_gci+0x2ee>
			LOG_ERR("Could not parse earfcn, error: %d", err);
   251e0:	466d      	mov	r5, sp
   251e2:	b088      	sub	sp, #32
   251e4:	466a      	mov	r2, sp
   251e6:	4b20      	ldr	r3, [pc, #128]	; (25268 <parse_ncellmeas_gci+0x36c>)
   251e8:	e6ba      	b.n	24f60 <parse_ncellmeas_gci+0x64>
		err = at_params_short_get(&resp_list, curr_index, &parsed_cell.phys_cell_id);
   251ea:	f107 0288 	add.w	r2, r7, #136	; 0x88
   251ee:	1de9      	adds	r1, r5, #7
   251f0:	f107 0034 	add.w	r0, r7, #52	; 0x34
   251f4:	f00f fedc 	bl	34fb0 <at_params_short_get>
		if (err) {
   251f8:	4604      	mov	r4, r0
   251fa:	b120      	cbz	r0, 25206 <parse_ncellmeas_gci+0x30a>
			LOG_ERR("Could not parse phys_cell_id, error: %d", err);
   251fc:	466d      	mov	r5, sp
   251fe:	b088      	sub	sp, #32
   25200:	466a      	mov	r2, sp
   25202:	4b1a      	ldr	r3, [pc, #104]	; (2526c <parse_ncellmeas_gci+0x370>)
   25204:	e6ac      	b.n	24f60 <parse_ncellmeas_gci+0x64>
		err = at_params_short_get(&resp_list, curr_index, &parsed_cell.rsrp);
   25206:	f107 028a 	add.w	r2, r7, #138	; 0x8a
   2520a:	f105 0108 	add.w	r1, r5, #8
   2520e:	f107 0034 	add.w	r0, r7, #52	; 0x34
   25212:	f00f fecd 	bl	34fb0 <at_params_short_get>
		if (err) {
   25216:	4604      	mov	r4, r0
   25218:	b360      	cbz	r0, 25274 <parse_ncellmeas_gci+0x378>
			LOG_ERR("Could not parse rsrp, error: %d", err);
   2521a:	466d      	mov	r5, sp
   2521c:	b088      	sub	sp, #32
   2521e:	466a      	mov	r2, sp
   25220:	4b13      	ldr	r3, [pc, #76]	; (25270 <parse_ncellmeas_gci+0x374>)
   25222:	e69d      	b.n	24f60 <parse_ncellmeas_gci+0x64>
   25224:	0003fe47 	.word	0x0003fe47
   25228:	0003fe15 	.word	0x0003fe15
   2522c:	0003fe7e 	.word	0x0003fe7e
   25230:	01000005 	.word	0x01000005
   25234:	00037998 	.word	0x00037998
   25238:	0003fcc6 	.word	0x0003fcc6
   2523c:	0003f9cf 	.word	0x0003f9cf
   25240:	0003febb 	.word	0x0003febb
   25244:	0003feda 	.word	0x0003feda
   25248:	00040292 	.word	0x00040292
   2524c:	0003ff11 	.word	0x0003ff11
   25250:	0003ff43 	.word	0x0003ff43
   25254:	0003ff86 	.word	0x0003ff86
   25258:	0003ffa6 	.word	0x0003ffa6
   2525c:	0003ffbf 	.word	0x0003ffbf
   25260:	0003fff5 	.word	0x0003fff5
   25264:	0004001f 	.word	0x0004001f
   25268:	00040053 	.word	0x00040053
   2526c:	00040075 	.word	0x00040075
   25270:	0004009d 	.word	0x0004009d
		err = at_params_short_get(&resp_list, curr_index, &parsed_cell.rsrq);
   25274:	f107 028c 	add.w	r2, r7, #140	; 0x8c
   25278:	f105 0109 	add.w	r1, r5, #9
   2527c:	f107 0034 	add.w	r0, r7, #52	; 0x34
   25280:	f00f fe96 	bl	34fb0 <at_params_short_get>
		if (err) {
   25284:	4604      	mov	r4, r0
   25286:	b120      	cbz	r0, 25292 <parse_ncellmeas_gci+0x396>
			LOG_ERR("Could not parse rsrq, error: %d", err);
   25288:	466d      	mov	r5, sp
   2528a:	b088      	sub	sp, #32
   2528c:	466a      	mov	r2, sp
   2528e:	4b75      	ldr	r3, [pc, #468]	; (25464 <parse_ncellmeas_gci+0x568>)
   25290:	e666      	b.n	24f60 <parse_ncellmeas_gci+0x64>
		err = at_params_int64_get(&resp_list, curr_index, &parsed_cell.measurement_time);
   25292:	f107 0280 	add.w	r2, r7, #128	; 0x80
   25296:	f105 010a 	add.w	r1, r5, #10
   2529a:	f107 0034 	add.w	r0, r7, #52	; 0x34
   2529e:	f00f fed6 	bl	3504e <at_params_int64_get>
		if (err) {
   252a2:	4604      	mov	r4, r0
   252a4:	b120      	cbz	r0, 252b0 <parse_ncellmeas_gci+0x3b4>
			LOG_ERR("Could not parse meas_time, error: %d", err);
   252a6:	466d      	mov	r5, sp
   252a8:	b088      	sub	sp, #32
   252aa:	466a      	mov	r2, sp
   252ac:	4b6e      	ldr	r3, [pc, #440]	; (25468 <parse_ncellmeas_gci+0x56c>)
   252ae:	e657      	b.n	24f60 <parse_ncellmeas_gci+0x64>
		err = at_params_short_get(&resp_list, curr_index, &tmp_short);
   252b0:	f107 021a 	add.w	r2, r7, #26
   252b4:	f105 010b 	add.w	r1, r5, #11
   252b8:	f107 0034 	add.w	r0, r7, #52	; 0x34
   252bc:	f00f fe78 	bl	34fb0 <at_params_short_get>
		if (err) {
   252c0:	4604      	mov	r4, r0
   252c2:	b120      	cbz	r0, 252ce <parse_ncellmeas_gci+0x3d2>
			LOG_ERR("Could not parse serving, error: %d", err);
   252c4:	466d      	mov	r5, sp
   252c6:	b088      	sub	sp, #32
   252c8:	466a      	mov	r2, sp
   252ca:	4b68      	ldr	r3, [pc, #416]	; (2546c <parse_ncellmeas_gci+0x570>)
   252cc:	e648      	b.n	24f60 <parse_ncellmeas_gci+0x64>
		curr_index++;
   252ce:	350c      	adds	r5, #12
		err = at_params_short_get(&resp_list, curr_index, &tmp_short);
   252d0:	4629      	mov	r1, r5
   252d2:	f107 021a 	add.w	r2, r7, #26
   252d6:	f107 0034 	add.w	r0, r7, #52	; 0x34
		is_serving_cell = tmp_short;
   252da:	f9b7 901a 	ldrsh.w	r9, [r7, #26]
		err = at_params_short_get(&resp_list, curr_index, &tmp_short);
   252de:	f00f fe67 	bl	34fb0 <at_params_short_get>
		if (err) {
   252e2:	4604      	mov	r4, r0
   252e4:	b120      	cbz	r0, 252f0 <parse_ncellmeas_gci+0x3f4>
			LOG_ERR("Could not parse neighbor_count, error: %d", err);
   252e6:	466d      	mov	r5, sp
   252e8:	b088      	sub	sp, #32
   252ea:	466a      	mov	r2, sp
   252ec:	4b60      	ldr	r3, [pc, #384]	; (25470 <parse_ncellmeas_gci+0x574>)
   252ee:	e637      	b.n	24f60 <parse_ncellmeas_gci+0x64>
		if (is_serving_cell) {
   252f0:	f1b9 0f00 	cmp.w	r9, #0
   252f4:	f000 809e 	beq.w	25434 <parse_ncellmeas_gci+0x538>
			cells->current_cell = parsed_cell;
   252f8:	46b4      	mov	ip, r6
   252fa:	f107 0e60 	add.w	lr, r7, #96	; 0x60
   252fe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   25302:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   25306:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   2530a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   2530e:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
		parsed_ncells_count = tmp_short;
   25312:	f897 901a 	ldrb.w	r9, [r7, #26]
			cells->current_cell = parsed_cell;
   25316:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
			if (parsed_ncells_count != 0) {
   2531a:	f1b9 0f00 	cmp.w	r9, #0
   2531e:	d02c      	beq.n	2537a <parse_ncellmeas_gci+0x47e>
				if (parsed_ncells_count > CONFIG_LTE_NEIGHBOR_CELLS_MAX) {
   25320:	f1b9 0f0a 	cmp.w	r9, #10
   25324:	d924      	bls.n	25370 <parse_ncellmeas_gci+0x474>
					LOG_WRN("Cutting response, because received neigbor cell"
   25326:	46e9      	mov	r9, sp
   25328:	b088      	sub	sp, #32
   2532a:	466a      	mov	r2, sp
   2532c:	4b51      	ldr	r3, [pc, #324]	; (25474 <parse_ncellmeas_gci+0x578>)
   2532e:	240a      	movs	r4, #10
   25330:	6153      	str	r3, [r2, #20]
   25332:	2303      	movs	r3, #3
   25334:	6194      	str	r4, [r2, #24]
   25336:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   2533a:	f842 3f10 	str.w	r3, [r2, #16]!
   2533e:	484e      	ldr	r0, [pc, #312]	; (25478 <parse_ncellmeas_gci+0x57c>)
   25340:	f00f fef5 	bl	3512e <z_log_msg_static_create.constprop.0>
   25344:	46cd      	mov	sp, r9
					incomplete = true;
   25346:	693b      	ldr	r3, [r7, #16]
   25348:	617b      	str	r3, [r7, #20]
				ncells = k_calloc(
   2534a:	2110      	movs	r1, #16
   2534c:	4620      	mov	r0, r4
   2534e:	f011 f8bc 	bl	364ca <k_calloc>
				if (ncells == NULL) {
   25352:	b978      	cbnz	r0, 25374 <parse_ncellmeas_gci+0x478>
					LOG_WRN("Failed to allocate memory for the ncells"
   25354:	4b49      	ldr	r3, [pc, #292]	; (2547c <parse_ncellmeas_gci+0x580>)
   25356:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   2535a:	65fb      	str	r3, [r7, #92]	; 0x5c
   2535c:	2302      	movs	r3, #2
   2535e:	4846      	ldr	r0, [pc, #280]	; (25478 <parse_ncellmeas_gci+0x57c>)
   25360:	f107 0258 	add.w	r2, r7, #88	; 0x58
   25364:	65bb      	str	r3, [r7, #88]	; 0x58
   25366:	f00f fee2 	bl	3512e <z_log_msg_static_create.constprop.0>
			i < params->gci_count; i++) {
   2536a:	f108 0801 	add.w	r8, r8, #1
   2536e:	e67d      	b.n	2506c <parse_ncellmeas_gci+0x170>
					to_be_parsed_ncell_count = parsed_ncells_count;
   25370:	464c      	mov	r4, r9
   25372:	e7ea      	b.n	2534a <parse_ncellmeas_gci+0x44e>
				cells->neighbor_cells = ncells;
   25374:	6370      	str	r0, [r6, #52]	; 0x34
				cells->ncells_count = to_be_parsed_ncell_count;
   25376:	f886 4030 	strb.w	r4, [r6, #48]	; 0x30
			for (j = 0; j < to_be_parsed_ncell_count; j++) {
   2537a:	f04f 0900 	mov.w	r9, #0
   2537e:	60bc      	str	r4, [r7, #8]
   25380:	68bb      	ldr	r3, [r7, #8]
   25382:	454b      	cmp	r3, r9
   25384:	d0f1      	beq.n	2536a <parse_ncellmeas_gci+0x46e>
							&cells->neighbor_cells[j].earfcn);
   25386:	6b72      	ldr	r2, [r6, #52]	; 0x34
				err = at_params_int_get(&resp_list,
   25388:	1c69      	adds	r1, r5, #1
   2538a:	eb02 1209 	add.w	r2, r2, r9, lsl #4
   2538e:	f107 0034 	add.w	r0, r7, #52	; 0x34
   25392:	f00f fe43 	bl	3501c <at_params_int_get>
				if (err) {
   25396:	ea4f 1b09 	mov.w	fp, r9, lsl #4
   2539a:	4604      	mov	r4, r0
   2539c:	b120      	cbz	r0, 253a8 <parse_ncellmeas_gci+0x4ac>
					LOG_ERR("Could not parse n_earfcn, error: %d", err);
   2539e:	466d      	mov	r5, sp
   253a0:	b088      	sub	sp, #32
   253a2:	466a      	mov	r2, sp
   253a4:	4b36      	ldr	r3, [pc, #216]	; (25480 <parse_ncellmeas_gci+0x584>)
   253a6:	e5db      	b.n	24f60 <parse_ncellmeas_gci+0x64>
							  &cells->neighbor_cells[j].phys_cell_id);
   253a8:	6b72      	ldr	r2, [r6, #52]	; 0x34
				err = at_params_short_get(&resp_list,
   253aa:	1ca9      	adds	r1, r5, #2
							  &cells->neighbor_cells[j].phys_cell_id);
   253ac:	445a      	add	r2, fp
				err = at_params_short_get(&resp_list,
   253ae:	3208      	adds	r2, #8
   253b0:	f107 0034 	add.w	r0, r7, #52	; 0x34
   253b4:	f00f fdfc 	bl	34fb0 <at_params_short_get>
				if (err) {
   253b8:	4604      	mov	r4, r0
   253ba:	b120      	cbz	r0, 253c6 <parse_ncellmeas_gci+0x4ca>
					LOG_ERR("Could not parse n_phys_cell_id, error: %d", err);
   253bc:	466d      	mov	r5, sp
   253be:	b088      	sub	sp, #32
   253c0:	466a      	mov	r2, sp
   253c2:	4b30      	ldr	r3, [pc, #192]	; (25484 <parse_ncellmeas_gci+0x588>)
   253c4:	e5cc      	b.n	24f60 <parse_ncellmeas_gci+0x64>
				err = at_params_int_get(&resp_list, curr_index, &tmp_int);
   253c6:	f107 0220 	add.w	r2, r7, #32
   253ca:	1ce9      	adds	r1, r5, #3
   253cc:	f107 0034 	add.w	r0, r7, #52	; 0x34
   253d0:	f00f fe24 	bl	3501c <at_params_int_get>
				if (err) {
   253d4:	4604      	mov	r4, r0
   253d6:	b120      	cbz	r0, 253e2 <parse_ncellmeas_gci+0x4e6>
					LOG_ERR("Could not parse n_rsrp, error: %d", err);
   253d8:	466d      	mov	r5, sp
   253da:	b088      	sub	sp, #32
   253dc:	466a      	mov	r2, sp
   253de:	4b2a      	ldr	r3, [pc, #168]	; (25488 <parse_ncellmeas_gci+0x58c>)
   253e0:	e5be      	b.n	24f60 <parse_ncellmeas_gci+0x64>
				cells->neighbor_cells[j].rsrp = tmp_int;
   253e2:	6b73      	ldr	r3, [r6, #52]	; 0x34
   253e4:	6a3a      	ldr	r2, [r7, #32]
   253e6:	445b      	add	r3, fp
   253e8:	815a      	strh	r2, [r3, #10]
				err = at_params_int_get(&resp_list, curr_index, &tmp_int);
   253ea:	1d29      	adds	r1, r5, #4
   253ec:	f107 0220 	add.w	r2, r7, #32
   253f0:	f107 0034 	add.w	r0, r7, #52	; 0x34
   253f4:	f00f fe12 	bl	3501c <at_params_int_get>
				if (err) {
   253f8:	4604      	mov	r4, r0
   253fa:	b120      	cbz	r0, 25406 <parse_ncellmeas_gci+0x50a>
					LOG_ERR("Could not parse n_rsrq, error: %d", err);
   253fc:	466d      	mov	r5, sp
   253fe:	b088      	sub	sp, #32
   25400:	466a      	mov	r2, sp
   25402:	4b22      	ldr	r3, [pc, #136]	; (2548c <parse_ncellmeas_gci+0x590>)
   25404:	e5ac      	b.n	24f60 <parse_ncellmeas_gci+0x64>
				cells->neighbor_cells[j].rsrq = tmp_int;
   25406:	6b73      	ldr	r3, [r6, #52]	; 0x34
   25408:	6a3a      	ldr	r2, [r7, #32]
   2540a:	445b      	add	r3, fp
   2540c:	819a      	strh	r2, [r3, #12]
							&cells->neighbor_cells[j].time_diff);
   2540e:	6b72      	ldr	r2, [r6, #52]	; 0x34
				curr_index++;
   25410:	3505      	adds	r5, #5
							&cells->neighbor_cells[j].time_diff);
   25412:	445a      	add	r2, fp
				err = at_params_int_get(&resp_list,
   25414:	4629      	mov	r1, r5
   25416:	3204      	adds	r2, #4
   25418:	f107 0034 	add.w	r0, r7, #52	; 0x34
   2541c:	f00f fdfe 	bl	3501c <at_params_int_get>
				if (err) {
   25420:	4604      	mov	r4, r0
   25422:	b120      	cbz	r0, 2542e <parse_ncellmeas_gci+0x532>
					LOG_ERR("Could not parse time_diff, error: %d", err);
   25424:	466d      	mov	r5, sp
   25426:	b088      	sub	sp, #32
   25428:	466a      	mov	r2, sp
   2542a:	4b19      	ldr	r3, [pc, #100]	; (25490 <parse_ncellmeas_gci+0x594>)
   2542c:	e598      	b.n	24f60 <parse_ncellmeas_gci+0x64>
			for (j = 0; j < to_be_parsed_ncell_count; j++) {
   2542e:	f109 0901 	add.w	r9, r9, #1
   25432:	e7a5      	b.n	25380 <parse_ncellmeas_gci+0x484>
			cells->gci_cells[k] = parsed_cell;
   25434:	2330      	movs	r3, #48	; 0x30
   25436:	6bf4      	ldr	r4, [r6, #60]	; 0x3c
   25438:	f107 0c60 	add.w	ip, r7, #96	; 0x60
   2543c:	fb03 440a 	mla	r4, r3, sl, r4
   25440:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   25444:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   25446:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   2544a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   2544c:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   25450:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			cells->gci_cells_count++; /* Increase count for non-serving GCI cell */
   25454:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
			k++;
   25458:	f10a 0a01 	add.w	sl, sl, #1
			cells->gci_cells_count++; /* Increase count for non-serving GCI cell */
   2545c:	3301      	adds	r3, #1
   2545e:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
			k++;
   25462:	e782      	b.n	2536a <parse_ncellmeas_gci+0x46e>
   25464:	000400bd 	.word	0x000400bd
   25468:	000400dd 	.word	0x000400dd
   2546c:	00040102 	.word	0x00040102
   25470:	00040125 	.word	0x00040125
   25474:	0004014f 	.word	0x0004014f
   25478:	00037998 	.word	0x00037998
   2547c:	000401a7 	.word	0x000401a7
   25480:	000401db 	.word	0x000401db
   25484:	000401ff 	.word	0x000401ff
   25488:	00040229 	.word	0x00040229
   2548c:	0004024b 	.word	0x0004024b
   25490:	0004026d 	.word	0x0004026d

00025494 <parse_xmodemsleep>:

int parse_xmodemsleep(const char *at_response, struct lte_lc_modem_sleep *modem_sleep)
{
	int err;
	struct at_param_list resp_list = {0};
   25494:	2300      	movs	r3, #0
{
   25496:	b5f0      	push	{r4, r5, r6, r7, lr}
   25498:	b085      	sub	sp, #20
   2549a:	af00      	add	r7, sp, #0
   2549c:	4606      	mov	r6, r0
	uint16_t type;

	if (modem_sleep == NULL || at_response == NULL) {
   2549e:	460d      	mov	r5, r1
	struct at_param_list resp_list = {0};
   254a0:	e9c7 3302 	strd	r3, r3, [r7, #8]
	if (modem_sleep == NULL || at_response == NULL) {
   254a4:	2900      	cmp	r1, #0
   254a6:	d062      	beq.n	2556e <parse_xmodemsleep+0xda>
   254a8:	2800      	cmp	r0, #0
   254aa:	d060      	beq.n	2556e <parse_xmodemsleep+0xda>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_XMODEMSLEEP_PARAMS_COUNT_MAX);
   254ac:	2104      	movs	r1, #4
   254ae:	f107 0008 	add.w	r0, r7, #8
   254b2:	f00f fcec 	bl	34e8e <at_params_list_init>
	if (err) {
   254b6:	4604      	mov	r4, r0
   254b8:	b190      	cbz	r0, 254e0 <parse_xmodemsleep+0x4c>
		LOG_ERR("Could not init AT params list, error: %d", err);
   254ba:	466d      	mov	r5, sp
   254bc:	b088      	sub	sp, #32
   254be:	466a      	mov	r2, sp
   254c0:	4b2c      	ldr	r3, [pc, #176]	; (25574 <parse_xmodemsleep+0xe0>)
   254c2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   254c6:	e9c2 3005 	strd	r3, r0, [r2, #20]
   254ca:	2303      	movs	r3, #3
   254cc:	482a      	ldr	r0, [pc, #168]	; (25578 <parse_xmodemsleep+0xe4>)
   254ce:	f842 3f10 	str.w	r3, [r2, #16]!
   254d2:	f00f fe2c 	bl	3512e <z_log_msg_static_create.constprop.0>
   254d6:	46ad      	mov	sp, r5
	}

clean_exit:
	at_params_list_free(&resp_list);
	return err;
}
   254d8:	4620      	mov	r0, r4
   254da:	3714      	adds	r7, #20
   254dc:	46bd      	mov	sp, r7
   254de:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   254e0:	4601      	mov	r1, r0
   254e2:	f107 0208 	add.w	r2, r7, #8
   254e6:	4630      	mov	r0, r6
   254e8:	f00f fcce 	bl	34e88 <at_parser_params_from_str>
	if (err) {
   254ec:	4604      	mov	r4, r0
   254ee:	b178      	cbz	r0, 25510 <parse_xmodemsleep+0x7c>
		LOG_ERR("Could not parse %%XMODEMSLEEP response, error: %d", err);
   254f0:	466d      	mov	r5, sp
   254f2:	b088      	sub	sp, #32
   254f4:	466a      	mov	r2, sp
   254f6:	4b21      	ldr	r3, [pc, #132]	; (2557c <parse_xmodemsleep+0xe8>)
		LOG_ERR("Could not get time until next modem sleep, error: %d", err);
   254f8:	e9c2 3405 	strd	r3, r4, [r2, #20]
   254fc:	2303      	movs	r3, #3
   254fe:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   25502:	481d      	ldr	r0, [pc, #116]	; (25578 <parse_xmodemsleep+0xe4>)
   25504:	f842 3f10 	str.w	r3, [r2, #16]!
   25508:	f00f fe11 	bl	3512e <z_log_msg_static_create.constprop.0>
   2550c:	46ad      	mov	sp, r5
		goto clean_exit;
   2550e:	e01a      	b.n	25546 <parse_xmodemsleep+0xb2>
	err = at_params_unsigned_short_get(&resp_list, AT_XMODEMSLEEP_TYPE_INDEX, &type);
   25510:	2101      	movs	r1, #1
   25512:	1dba      	adds	r2, r7, #6
   25514:	f107 0008 	add.w	r0, r7, #8
   25518:	f00f fd67 	bl	34fea <at_params_unsigned_short_get>
	if (err) {
   2551c:	4604      	mov	r4, r0
   2551e:	b120      	cbz	r0, 2552a <parse_xmodemsleep+0x96>
		LOG_ERR("Could not get mode sleep type, error: %d", err);
   25520:	466d      	mov	r5, sp
   25522:	b088      	sub	sp, #32
   25524:	466a      	mov	r2, sp
   25526:	4b16      	ldr	r3, [pc, #88]	; (25580 <parse_xmodemsleep+0xec>)
   25528:	e7e6      	b.n	254f8 <parse_xmodemsleep+0x64>
	modem_sleep->type = type;
   2552a:	88fb      	ldrh	r3, [r7, #6]
	if (at_params_valid_count_get(&resp_list) < AT_XMODEMSLEEP_PARAMS_COUNT_MAX - 1) {
   2552c:	f107 0008 	add.w	r0, r7, #8
	modem_sleep->type = type;
   25530:	702b      	strb	r3, [r5, #0]
	if (at_params_valid_count_get(&resp_list) < AT_XMODEMSLEEP_PARAMS_COUNT_MAX - 1) {
   25532:	f00f fdc4 	bl	350be <at_params_valid_count_get>
   25536:	2802      	cmp	r0, #2
   25538:	d80a      	bhi.n	25550 <parse_xmodemsleep+0xbc>
		modem_sleep->time = -1;
   2553a:	f04f 32ff 	mov.w	r2, #4294967295
   2553e:	f04f 33ff 	mov.w	r3, #4294967295
   25542:	e9c5 2302 	strd	r2, r3, [r5, #8]
	at_params_list_free(&resp_list);
   25546:	f107 0008 	add.w	r0, r7, #8
   2554a:	f00f fcb3 	bl	34eb4 <at_params_list_free>
	return err;
   2554e:	e7c3      	b.n	254d8 <parse_xmodemsleep+0x44>
	err = at_params_int64_get(&resp_list, AT_XMODEMSLEEP_TIME_INDEX, &modem_sleep->time);
   25550:	2102      	movs	r1, #2
   25552:	f105 0208 	add.w	r2, r5, #8
   25556:	f107 0008 	add.w	r0, r7, #8
   2555a:	f00f fd78 	bl	3504e <at_params_int64_get>
	if (err) {
   2555e:	4604      	mov	r4, r0
   25560:	2800      	cmp	r0, #0
   25562:	d0f0      	beq.n	25546 <parse_xmodemsleep+0xb2>
		LOG_ERR("Could not get time until next modem sleep, error: %d", err);
   25564:	466d      	mov	r5, sp
   25566:	b088      	sub	sp, #32
   25568:	466a      	mov	r2, sp
   2556a:	4b06      	ldr	r3, [pc, #24]	; (25584 <parse_xmodemsleep+0xf0>)
   2556c:	e7c4      	b.n	254f8 <parse_xmodemsleep+0x64>
		return -EINVAL;
   2556e:	f06f 0415 	mvn.w	r4, #21
   25572:	e7b1      	b.n	254d8 <parse_xmodemsleep+0x44>
   25574:	0003fa6e 	.word	0x0003fa6e
   25578:	00037998 	.word	0x00037998
   2557c:	000402be 	.word	0x000402be
   25580:	000402f0 	.word	0x000402f0
   25584:	00040319 	.word	0x00040319

00025588 <parse_mdmev>:

int parse_mdmev(const char *at_response, enum lte_lc_modem_evt *modem_evt)
{
   25588:	b5f0      	push	{r4, r5, r6, r7, lr}
   2558a:	460e      	mov	r6, r1
		[LTE_LC_MODEM_EVT_CE_LEVEL_1] = AT_MDMEV_CE_LEVEL_1,
		[LTE_LC_MODEM_EVT_CE_LEVEL_2] = AT_MDMEV_CE_LEVEL_2,
		[LTE_LC_MODEM_EVT_CE_LEVEL_3] = AT_MDMEV_CE_LEVEL_3,
	};

	if (at_response == NULL || modem_evt == NULL) {
   2558c:	4604      	mov	r4, r0
{
   2558e:	b087      	sub	sp, #28
	if (at_response == NULL || modem_evt == NULL) {
   25590:	b320      	cbz	r0, 255dc <parse_mdmev+0x54>
   25592:	b319      	cbz	r1, 255dc <parse_mdmev+0x54>
		return -EINVAL;
	}

	if (!response_is_valid(at_response, sizeof(AT_MDMEV_RESPONSE_PREFIX) - 1,
   25594:	2108      	movs	r1, #8
   25596:	4a13      	ldr	r2, [pc, #76]	; (255e4 <parse_mdmev+0x5c>)
   25598:	f7ff f836 	bl	24608 <response_is_valid>
   2559c:	b968      	cbnz	r0, 255ba <parse_mdmev+0x32>
			       AT_MDMEV_RESPONSE_PREFIX)) {
		LOG_ERR("Invalid MDMEV response");
   2559e:	4b12      	ldr	r3, [pc, #72]	; (255e8 <parse_mdmev+0x60>)
   255a0:	4812      	ldr	r0, [pc, #72]	; (255ec <parse_mdmev+0x64>)
   255a2:	9305      	str	r3, [sp, #20]
   255a4:	2302      	movs	r3, #2
   255a6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   255aa:	aa04      	add	r2, sp, #16
   255ac:	9304      	str	r3, [sp, #16]
   255ae:	f00f fdbe 	bl	3512e <z_log_msg_static_create.constprop.0>
		return -EIO;
   255b2:	f06f 0004 	mvn.w	r0, #4
	}

	LOG_DBG("No modem event type found: %s", at_response);

	return -ENODATA;
}
   255b6:	b007      	add	sp, #28
   255b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (size_t i = 0; i < ARRAY_SIZE(event_types); i++) {
   255ba:	2500      	movs	r5, #0
   255bc:	4f0c      	ldr	r7, [pc, #48]	; (255f0 <parse_mdmev+0x68>)
	const char *start_ptr = at_response + sizeof(AT_MDMEV_RESPONSE_PREFIX) - 1;
   255be:	3408      	adds	r4, #8
		if (strcmp(event_types[i], start_ptr) == 0) {
   255c0:	4621      	mov	r1, r4
   255c2:	f857 0b04 	ldr.w	r0, [r7], #4
   255c6:	f7e3 fe22 	bl	920e <strcmp>
   255ca:	b908      	cbnz	r0, 255d0 <parse_mdmev+0x48>
			*modem_evt = i;
   255cc:	7035      	strb	r5, [r6, #0]
			return 0;
   255ce:	e7f2      	b.n	255b6 <parse_mdmev+0x2e>
	for (size_t i = 0; i < ARRAY_SIZE(event_types); i++) {
   255d0:	3501      	adds	r5, #1
   255d2:	2d0a      	cmp	r5, #10
   255d4:	d1f4      	bne.n	255c0 <parse_mdmev+0x38>
	return -ENODATA;
   255d6:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   255da:	e7ec      	b.n	255b6 <parse_mdmev+0x2e>
		return -EINVAL;
   255dc:	f06f 0015 	mvn.w	r0, #21
   255e0:	e7e9      	b.n	255b6 <parse_mdmev+0x2e>
   255e2:	bf00      	nop
   255e4:	0004034e 	.word	0x0004034e
   255e8:	00040357 	.word	0x00040357
   255ec:	00037998 	.word	0x00037998
   255f0:	000386e0 	.word	0x000386e0

000255f4 <on_modem_init>:

NRF_MODEM_LIB_ON_INIT(lte_lc_init_hook, on_modem_init, NULL);
NRF_MODEM_LIB_ON_SHUTDOWN(lte_lc_shutdown_hook, on_modem_shutdown, NULL);

static void on_modem_init(int err, void *ctx)
{
   255f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (err) {
   255f6:	4604      	mov	r4, r0
{
   255f8:	af00      	add	r7, sp, #0
	if (err) {
   255fa:	b1a0      	cbz	r0, 25626 <on_modem_init+0x32>
		if (err == NRF_MODEM_DFU_RESULT_OK) {
   255fc:	4b1f      	ldr	r3, [pc, #124]	; (2567c <on_modem_init+0x88>)
   255fe:	4298      	cmp	r0, r3
   25600:	d00f      	beq.n	25622 <on_modem_init+0x2e>
			LOG_DBG("Modem DFU, lte_lc not initialized");
			return;
		}
		LOG_ERR("Modem library init error: %d, lte_lc not initialized", err);
   25602:	466d      	mov	r5, sp
   25604:	b088      	sub	sp, #32
   25606:	466a      	mov	r2, sp
   25608:	4b1d      	ldr	r3, [pc, #116]	; (25680 <on_modem_init+0x8c>)
   2560a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   2560e:	2303      	movs	r3, #3
   25610:	f842 3f10 	str.w	r3, [r2, #16]!
   25614:	2300      	movs	r3, #0
   25616:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2561a:	481a      	ldr	r0, [pc, #104]	; (25684 <on_modem_init+0x90>)
   2561c:	f7ea fe0a 	bl	10234 <z_impl_z_log_msg_static_create>
   25620:	46ad      	mov	sp, r5
	if (err) {
		LOG_ERR("Lte_lc failed to initialize and connect, err %d", err);
		return;
	}
#endif
}
   25622:	46bd      	mov	sp, r7
   25624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	err = lte_lc_psm_req(IS_ENABLED(CONFIG_LTE_PSM_REQ));
   25626:	f7fe fa21 	bl	23a6c <lte_lc_psm_req>
	if (err) {
   2562a:	4605      	mov	r5, r0
   2562c:	b180      	cbz	r0, 25650 <on_modem_init+0x5c>
		LOG_ERR("Failed to configure PSM, err %d", err);
   2562e:	466e      	mov	r6, sp
   25630:	b088      	sub	sp, #32
   25632:	466a      	mov	r2, sp
   25634:	4b14      	ldr	r3, [pc, #80]	; (25688 <on_modem_init+0x94>)
   25636:	e9c2 3005 	strd	r3, r0, [r2, #20]
   2563a:	2303      	movs	r3, #3
   2563c:	f842 3f10 	str.w	r3, [r2, #16]!
   25640:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   25644:	4623      	mov	r3, r4
   25646:	480f      	ldr	r0, [pc, #60]	; (25684 <on_modem_init+0x90>)
   25648:	f7ea fdf4 	bl	10234 <z_impl_z_log_msg_static_create>
   2564c:	46b5      	mov	sp, r6
		return;
   2564e:	e7e8      	b.n	25622 <on_modem_init+0x2e>
	err = lte_lc_edrx_req(IS_ENABLED(CONFIG_LTE_EDRX_REQ));
   25650:	f7fe fbde 	bl	23e10 <lte_lc_edrx_req>
	if (err) {
   25654:	2800      	cmp	r0, #0
   25656:	d0e4      	beq.n	25622 <on_modem_init+0x2e>
		LOG_ERR("Failed to configure eDRX, err %d", err);
   25658:	466c      	mov	r4, sp
   2565a:	b088      	sub	sp, #32
   2565c:	466a      	mov	r2, sp
   2565e:	4b0b      	ldr	r3, [pc, #44]	; (2568c <on_modem_init+0x98>)
   25660:	e9c2 3005 	strd	r3, r0, [r2, #20]
   25664:	2303      	movs	r3, #3
   25666:	f842 3f10 	str.w	r3, [r2, #16]!
   2566a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2566e:	462b      	mov	r3, r5
   25670:	4804      	ldr	r0, [pc, #16]	; (25684 <on_modem_init+0x90>)
   25672:	f7ea fddf 	bl	10234 <z_impl_z_log_msg_static_create>
   25676:	46a5      	mov	sp, r4
		return;
   25678:	e7d3      	b.n	25622 <on_modem_init+0x2e>
   2567a:	bf00      	nop
   2567c:	05500001 	.word	0x05500001
   25680:	00040425 	.word	0x00040425
   25684:	00037990 	.word	0x00037990
   25688:	0004045a 	.word	0x0004045a
   2568c:	0004047a 	.word	0x0004047a

00025690 <modem_info_parse>:
	}
}

static int modem_info_parse(const struct modem_info_data *modem_data,
			    const char *buf)
{
   25690:	b510      	push	{r4, lr}
   25692:	4604      	mov	r4, r0
	int err;
	uint32_t param_index;

	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   25694:	4a09      	ldr	r2, [pc, #36]	; (256bc <modem_info_parse+0x2c>)
{
   25696:	4608      	mov	r0, r1
	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   25698:	7a63      	ldrb	r3, [r4, #9]
   2569a:	2100      	movs	r1, #0
   2569c:	f7fd fde0 	bl	23260 <at_parser_max_params_from_str>
					    modem_data->param_count);

	if (err == -EAGAIN) {
   256a0:	f110 0f0b 	cmn.w	r0, #11
   256a4:	d000      	beq.n	256a8 <modem_info_parse+0x18>
		LOG_DBG("More items exist to parse for: %s",
			modem_data->data_name);
		err = 0;
	} else if (err != 0) {
   256a6:	b940      	cbnz	r0, 256ba <modem_info_parse+0x2a>
		return err;
	}

	param_index = at_params_valid_count_get(&m_param_list);
   256a8:	4804      	ldr	r0, [pc, #16]	; (256bc <modem_info_parse+0x2c>)
   256aa:	f00f fd08 	bl	350be <at_params_valid_count_get>
	if (param_index > modem_data->param_count) {
   256ae:	7a63      	ldrb	r3, [r4, #9]
		return -EAGAIN;
	}

	return err;
   256b0:	4298      	cmp	r0, r3
   256b2:	bf8c      	ite	hi
   256b4:	f06f 000a 	mvnhi.w	r0, #10
   256b8:	2000      	movls	r0, #0
}
   256ba:	bd10      	pop	{r4, pc}
   256bc:	2000eb04 	.word	0x2000eb04

000256c0 <modem_info_rsrp_subscribe_handler>:

	return len <= 0 ? -ENOTSUP : len;
}

static void modem_info_rsrp_subscribe_handler(const char *notif)
{
   256c0:	b590      	push	{r4, r7, lr}
   256c2:	b085      	sub	sp, #20
   256c4:	4604      	mov	r4, r0
   256c6:	af00      	add	r7, sp, #0
	int err;
	uint16_t param_value;

	const struct modem_info_data rsrp_notify_data = {
   256c8:	4a15      	ldr	r2, [pc, #84]	; (25720 <modem_info_rsrp_subscribe_handler+0x60>)
   256ca:	1d3b      	adds	r3, r7, #4
   256cc:	ca07      	ldmia	r2, {r0, r1, r2}
   256ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.param_index	= RSRP_NOTIFY_PARAM_INDEX,
		.param_count	= RSRP_NOTIFY_PARAM_COUNT,
		.data_type	= AT_PARAM_TYPE_NUM_INT,
	};

	err = modem_info_parse(&rsrp_notify_data, notif);
   256d2:	4621      	mov	r1, r4
   256d4:	4618      	mov	r0, r3
   256d6:	f7ff ffdb 	bl	25690 <modem_info_parse>
	if (err != 0) {
   256da:	b188      	cbz	r0, 25700 <modem_info_rsrp_subscribe_handler+0x40>
		LOG_ERR("modem_info_parse failed to parse "
   256dc:	466c      	mov	r4, sp
   256de:	b088      	sub	sp, #32
   256e0:	466a      	mov	r2, sp
   256e2:	4b10      	ldr	r3, [pc, #64]	; (25724 <modem_info_rsrp_subscribe_handler+0x64>)

	err = at_params_unsigned_short_get(&m_param_list,
					   rsrp_notify_data.param_index,
					   &param_value);
	if (err != 0) {
		LOG_ERR("Failed to obtain RSRP value, %d", err);
   256e4:	e9c2 3005 	strd	r3, r0, [r2, #20]
   256e8:	2303      	movs	r3, #3
   256ea:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   256ee:	480e      	ldr	r0, [pc, #56]	; (25728 <modem_info_rsrp_subscribe_handler+0x68>)
   256f0:	f842 3f10 	str.w	r3, [r2, #16]!
   256f4:	f00f fd60 	bl	351b8 <z_log_msg_static_create.constprop.0>
   256f8:	46a5      	mov	sp, r4
		return;
	}

	modem_info_rsrp_cb(param_value);
}
   256fa:	3714      	adds	r7, #20
   256fc:	46bd      	mov	sp, r7
   256fe:	bd90      	pop	{r4, r7, pc}
	err = at_params_unsigned_short_get(&m_param_list,
   25700:	2101      	movs	r1, #1
   25702:	480a      	ldr	r0, [pc, #40]	; (2572c <modem_info_rsrp_subscribe_handler+0x6c>)
   25704:	1cba      	adds	r2, r7, #2
   25706:	f00f fc70 	bl	34fea <at_params_unsigned_short_get>
	if (err != 0) {
   2570a:	b120      	cbz	r0, 25716 <modem_info_rsrp_subscribe_handler+0x56>
		LOG_ERR("Failed to obtain RSRP value, %d", err);
   2570c:	466c      	mov	r4, sp
   2570e:	b088      	sub	sp, #32
   25710:	466a      	mov	r2, sp
   25712:	4b07      	ldr	r3, [pc, #28]	; (25730 <modem_info_rsrp_subscribe_handler+0x70>)
   25714:	e7e6      	b.n	256e4 <modem_info_rsrp_subscribe_handler+0x24>
	modem_info_rsrp_cb(param_value);
   25716:	4b07      	ldr	r3, [pc, #28]	; (25734 <modem_info_rsrp_subscribe_handler+0x74>)
   25718:	78b8      	ldrb	r0, [r7, #2]
   2571a:	681b      	ldr	r3, [r3, #0]
   2571c:	4798      	blx	r3
   2571e:	e7ec      	b.n	256fa <modem_info_rsrp_subscribe_handler+0x3a>
   25720:	00037b84 	.word	0x00037b84
   25724:	0004049b 	.word	0x0004049b
   25728:	000379a8 	.word	0x000379a8
   2572c:	2000eb04 	.word	0x2000eb04
   25730:	000404d2 	.word	0x000404d2
   25734:	2000eb0c 	.word	0x2000eb0c

00025738 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   25738:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
   2573a:	f7ea fc15 	bl	ff68 <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   2573e:	4b07      	ldr	r3, [pc, #28]	; (2575c <k_sys_fatal_error_handler+0x24>)
   25740:	9305      	str	r3, [sp, #20]
   25742:	2302      	movs	r3, #2
   25744:	9304      	str	r3, [sp, #16]
   25746:	4806      	ldr	r0, [pc, #24]	; (25760 <k_sys_fatal_error_handler+0x28>)
   25748:	2300      	movs	r3, #0
   2574a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2574e:	aa04      	add	r2, sp, #16
   25750:	f7ea fd70 	bl	10234 <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
   25754:	2000      	movs	r0, #0
   25756:	f7ed fbd3 	bl	12f00 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   2575a:	bf00      	nop
   2575c:	000406a4 	.word	0x000406a4
   25760:	00037950 	.word	0x00037950

00025764 <on_modem_lib_init.part.0>:

LOG_MODULE_REGISTER(modem_antenna, CONFIG_MODEM_ANTENNA_LOG_LEVEL);

NRF_MODEM_LIB_ON_INIT(gnss_cfg_init_hook, on_modem_lib_init, NULL);

static void on_modem_lib_init(int ret, void *ctx)
   25764:	b598      	push	{r3, r4, r7, lr}
		return;
	}

	if (strlen(CONFIG_MODEM_ANTENNA_AT_MAGPIO) > 0) {
		LOG_DBG("Setting MAGPIO configuration: %s", CONFIG_MODEM_ANTENNA_AT_MAGPIO);
		err = nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_MAGPIO);
   25766:	4916      	ldr	r1, [pc, #88]	; (257c0 <on_modem_lib_init.part.0+0x5c>)
static void on_modem_lib_init(int ret, void *ctx)
   25768:	af00      	add	r7, sp, #0
		err = nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_MAGPIO);
   2576a:	4816      	ldr	r0, [pc, #88]	; (257c4 <on_modem_lib_init.part.0+0x60>)
   2576c:	f001 fd0c 	bl	27188 <nrf_modem_at_printf>
		if (err) {
   25770:	b178      	cbz	r0, 25792 <on_modem_lib_init.part.0+0x2e>
			LOG_ERR("Failed to set MAGPIO configuration (err: %d)", err);
   25772:	466c      	mov	r4, sp
   25774:	b088      	sub	sp, #32
   25776:	466a      	mov	r2, sp
   25778:	4b13      	ldr	r3, [pc, #76]	; (257c8 <on_modem_lib_init.part.0+0x64>)
   2577a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   2577e:	2303      	movs	r3, #3
   25780:	f842 3f10 	str.w	r3, [r2, #16]!
   25784:	2300      	movs	r3, #0
   25786:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2578a:	4810      	ldr	r0, [pc, #64]	; (257cc <on_modem_lib_init.part.0+0x68>)
   2578c:	f7ea fd52 	bl	10234 <z_impl_z_log_msg_static_create>
   25790:	46a5      	mov	sp, r4
		}
	}

	if (strlen(CONFIG_MODEM_ANTENNA_AT_COEX0) > 0) {
		LOG_DBG("Setting COEX0 configuration: %s", CONFIG_MODEM_ANTENNA_AT_COEX0);
		err = nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_COEX0);
   25792:	490f      	ldr	r1, [pc, #60]	; (257d0 <on_modem_lib_init.part.0+0x6c>)
   25794:	480b      	ldr	r0, [pc, #44]	; (257c4 <on_modem_lib_init.part.0+0x60>)
   25796:	f001 fcf7 	bl	27188 <nrf_modem_at_printf>
		if (err) {
   2579a:	b178      	cbz	r0, 257bc <on_modem_lib_init.part.0+0x58>
			LOG_ERR("Failed to set COEX0 configuration (err: %d)", err);
   2579c:	466c      	mov	r4, sp
   2579e:	b088      	sub	sp, #32
   257a0:	466a      	mov	r2, sp
   257a2:	4b0c      	ldr	r3, [pc, #48]	; (257d4 <on_modem_lib_init.part.0+0x70>)
   257a4:	e9c2 3005 	strd	r3, r0, [r2, #20]
   257a8:	2303      	movs	r3, #3
   257aa:	f842 3f10 	str.w	r3, [r2, #16]!
   257ae:	2300      	movs	r3, #0
   257b0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   257b4:	4805      	ldr	r0, [pc, #20]	; (257cc <on_modem_lib_init.part.0+0x68>)
   257b6:	f7ea fd3d 	bl	10234 <z_impl_z_log_msg_static_create>
   257ba:	46a5      	mov	sp, r4
		}
	}
}
   257bc:	46bd      	mov	sp, r7
   257be:	bd98      	pop	{r3, r4, r7, pc}
   257c0:	000406c1 	.word	0x000406c1
   257c4:	0003f578 	.word	0x0003f578
   257c8:	000406e0 	.word	0x000406e0
   257cc:	000379a0 	.word	0x000379a0
   257d0:	0004070d 	.word	0x0004070d
   257d4:	00040725 	.word	0x00040725

000257d8 <tfm_ns_interface_dispatch>:
K_MUTEX_DEFINE(tfm_mutex);

int32_t tfm_ns_interface_dispatch(veneer_fn fn,
				  uint32_t arg0, uint32_t arg1,
				  uint32_t arg2, uint32_t arg3)
{
   257d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   257dc:	461f      	mov	r7, r3
	return !z_sys_post_kernel;
   257de:	4b15      	ldr	r3, [pc, #84]	; (25834 <tfm_ns_interface_dispatch+0x5c>)
   257e0:	4604      	mov	r4, r0
   257e2:	f893 8000 	ldrb.w	r8, [r3]
   257e6:	460d      	mov	r5, r1
   257e8:	4616      	mov	r6, r2
   257ea:	b0a2      	sub	sp, #136	; 0x88
	int32_t result;
	bool is_pre_kernel = k_is_pre_kernel();
	int tfm_ns_saved_prio;

	if (!is_pre_kernel) {
   257ec:	f1b8 0f00 	cmp.w	r8, #0
   257f0:	d115      	bne.n	2581e <tfm_ns_interface_dispatch+0x46>
#endif
	}

	struct fpu_ctx_full context_buffer;

	z_arm_save_fp_context(&context_buffer);
   257f2:	4668      	mov	r0, sp
   257f4:	f00b fa4f 	bl	30c96 <z_arm_save_fp_context>

	result = fn(arg0, arg1, arg2, arg3);
   257f8:	463a      	mov	r2, r7
   257fa:	4631      	mov	r1, r6
   257fc:	4628      	mov	r0, r5
   257fe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   25800:	47a0      	blx	r4
   25802:	4604      	mov	r4, r0

	z_arm_restore_fp_context(&context_buffer);
   25804:	4668      	mov	r0, sp
   25806:	f00b fa47 	bl	30c98 <z_arm_restore_fp_context>

	if (!is_pre_kernel) {
   2580a:	f1b8 0f00 	cmp.w	r8, #0
   2580e:	d002      	beq.n	25816 <tfm_ns_interface_dispatch+0x3e>
	return z_impl_k_mutex_unlock(mutex);
   25810:	4809      	ldr	r0, [pc, #36]	; (25838 <tfm_ns_interface_dispatch+0x60>)
   25812:	f003 fdb7 	bl	29384 <z_impl_k_mutex_unlock>

		k_mutex_unlock(&tfm_mutex);
	}

	return result;
}
   25816:	4620      	mov	r0, r4
   25818:	b022      	add	sp, #136	; 0x88
   2581a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
   2581e:	f04f 32ff 	mov.w	r2, #4294967295
   25822:	f04f 33ff 	mov.w	r3, #4294967295
   25826:	4804      	ldr	r0, [pc, #16]	; (25838 <tfm_ns_interface_dispatch+0x60>)
   25828:	f003 fcdc 	bl	291e4 <z_impl_k_mutex_lock>
		if (k_mutex_lock(&tfm_mutex, K_FOREVER) != 0) {
   2582c:	2800      	cmp	r0, #0
   2582e:	d0e0      	beq.n	257f2 <tfm_ns_interface_dispatch+0x1a>
			return (int32_t)TFM_ERROR_GENERIC;
   25830:	241f      	movs	r4, #31
   25832:	e7f0      	b.n	25816 <tfm_ns_interface_dispatch+0x3e>
   25834:	20010782 	.word	0x20010782
   25838:	2000cf14 	.word	0x2000cf14

0002583c <tfm_platform_ioctl>:
enum tfm_platform_err_t
tfm_platform_ioctl(tfm_platform_ioctl_req_t request,
                   psa_invec *input, psa_outvec *output)
{
    tfm_platform_ioctl_req_t req = request;
    struct psa_invec in_vec[2] = { {0} };
   2583c:	2300      	movs	r3, #0
{
   2583e:	b500      	push	{lr}
   25840:	b089      	sub	sp, #36	; 0x24
    struct psa_invec in_vec[2] = { {0} };
   25842:	e9cd 3306 	strd	r3, r3, [sp, #24]
    size_t inlen, outlen;
    psa_status_t status = PSA_ERROR_CONNECTION_REFUSED;

    in_vec[0].base = &req;
   25846:	ab03      	add	r3, sp, #12
   25848:	9304      	str	r3, [sp, #16]
    in_vec[0].len = sizeof(req);
   2584a:	2304      	movs	r3, #4
    tfm_platform_ioctl_req_t req = request;
   2584c:	9003      	str	r0, [sp, #12]
    in_vec[0].len = sizeof(req);
   2584e:	9305      	str	r3, [sp, #20]
    if (input != NULL) {
   25850:	b1a9      	cbz	r1, 2587e <tfm_platform_ioctl+0x42>
        in_vec[1].base = input->base;
   25852:	680b      	ldr	r3, [r1, #0]
   25854:	9306      	str	r3, [sp, #24]
        in_vec[1].len = input->len;
   25856:	684b      	ldr	r3, [r1, #4]
   25858:	9307      	str	r3, [sp, #28]
        inlen = 2;
   2585a:	2302      	movs	r3, #2
    } else {
        inlen = 1;
    }

    if (output != NULL) {
   2585c:	1e11      	subs	r1, r2, #0
   2585e:	bf18      	it	ne
   25860:	2101      	movne	r1, #1
        outlen = 1;
    } else {
        outlen = 0;
    }

    status = psa_call(TFM_PLATFORM_SERVICE_HANDLE,
   25862:	4808      	ldr	r0, [pc, #32]	; (25884 <tfm_platform_ioctl+0x48>)
   25864:	e9cd 2100 	strd	r2, r1, [sp]
   25868:	f240 31f5 	movw	r1, #1013	; 0x3f5
   2586c:	aa04      	add	r2, sp, #16
   2586e:	f000 f82b 	bl	258c8 <psa_call>
                      TFM_PLATFORM_API_ID_IOCTL,
                      in_vec, inlen,
                      output, outlen);

    if (status < PSA_SUCCESS) {
   25872:	2800      	cmp	r0, #0
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
    } else {
        return (enum tfm_platform_err_t)status;
    }
}
   25874:	bfb8      	it	lt
   25876:	2001      	movlt	r0, #1
   25878:	b009      	add	sp, #36	; 0x24
   2587a:	f85d fb04 	ldr.w	pc, [sp], #4
        inlen = 1;
   2587e:	2301      	movs	r3, #1
   25880:	e7ec      	b.n	2585c <tfm_platform_ioctl+0x20>
   25882:	bf00      	nop
   25884:	40000105 	.word	0x40000105

00025888 <psa_generate_random>:
    return API_DISPATCH_NO_OUTVEC(in_vec);
}

psa_status_t psa_generate_random(uint8_t *output,
                                 size_t output_size)
{
   25888:	b570      	push	{r4, r5, r6, lr}
    struct tfm_crypto_pack_iovec iov = {
   2588a:	2630      	movs	r6, #48	; 0x30
{
   2588c:	b092      	sub	sp, #72	; 0x48
    struct tfm_crypto_pack_iovec iov = {
   2588e:	ab06      	add	r3, sp, #24
{
   25890:	4605      	mov	r5, r0
   25892:	460c      	mov	r4, r1
    struct tfm_crypto_pack_iovec iov = {
   25894:	4632      	mov	r2, r6
   25896:	2100      	movs	r1, #0
   25898:	4618      	mov	r0, r3
   2589a:	f010 fe65 	bl	36568 <memset>

    psa_invec in_vec[] = {
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
   2589e:	e9cd 5404 	strd	r5, r4, [sp, #16]
    psa_invec in_vec[] = {
   258a2:	e9cd 0602 	strd	r0, r6, [sp, #8]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
   258a6:	b154      	cbz	r4, 258be <psa_generate_random+0x36>
        return PSA_SUCCESS;
    }

    return API_DISPATCH(in_vec, out_vec);
   258a8:	2301      	movs	r3, #1
   258aa:	aa04      	add	r2, sp, #16
   258ac:	9200      	str	r2, [sp, #0]
   258ae:	2100      	movs	r1, #0
   258b0:	4804      	ldr	r0, [pc, #16]	; (258c4 <psa_generate_random+0x3c>)
   258b2:	9301      	str	r3, [sp, #4]
   258b4:	aa02      	add	r2, sp, #8
   258b6:	f000 f807 	bl	258c8 <psa_call>
}
   258ba:	b012      	add	sp, #72	; 0x48
   258bc:	bd70      	pop	{r4, r5, r6, pc}
        return PSA_SUCCESS;
   258be:	4620      	mov	r0, r4
   258c0:	e7fb      	b.n	258ba <psa_generate_random+0x32>
   258c2:	bf00      	nop
   258c4:	40000100 	.word	0x40000100

000258c8 <psa_call>:
psa_status_t psa_call(psa_handle_t handle, int32_t type,
                      const psa_invec *in_vec,
                      size_t in_len,
                      psa_outvec *out_vec,
                      size_t out_len)
{
   258c8:	b430      	push	{r4, r5}
    if ((type > INT16_MAX) ||
   258ca:	f501 4500 	add.w	r5, r1, #32768	; 0x8000
   258ce:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
{
   258d2:	9c03      	ldr	r4, [sp, #12]
    if ((type > INT16_MAX) ||
   258d4:	d20d      	bcs.n	258f2 <psa_call+0x2a>
        (type < INT16_MIN) ||
   258d6:	ea43 0504 	orr.w	r5, r3, r4
   258da:	2dff      	cmp	r5, #255	; 0xff
   258dc:	d809      	bhi.n	258f2 <psa_call+0x2a>
    }

    return tfm_ns_interface_dispatch(
                                (veneer_fn)tfm_psa_call_veneer,
                                (uint32_t)handle,
                                PARAM_PACK(type, in_len, out_len),
   258de:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    return tfm_ns_interface_dispatch(
   258e2:	4613      	mov	r3, r2
   258e4:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
   258e8:	4601      	mov	r1, r0
                                (uint32_t)in_vec,
                                (uint32_t)out_vec);
}
   258ea:	bc30      	pop	{r4, r5}
    return tfm_ns_interface_dispatch(
   258ec:	4803      	ldr	r0, [pc, #12]	; (258fc <psa_call+0x34>)
   258ee:	f7ff bf73 	b.w	257d8 <tfm_ns_interface_dispatch>
}
   258f2:	f06f 0080 	mvn.w	r0, #128	; 0x80
   258f6:	bc30      	pop	{r4, r5}
   258f8:	4770      	bx	lr
   258fa:	bf00      	nop
   258fc:	00007c11 	.word	0x00007c11

00025900 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   25900:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   25902:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   25904:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   25906:	fab2 f382 	clz	r3, r2
   2590a:	f1c3 031f 	rsb	r3, r3, #31
   2590e:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   25910:	fa05 f403 	lsl.w	r4, r5, r3
   25914:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   25918:	e8d0 6fef 	ldaex	r6, [r0]
   2591c:	4296      	cmp	r6, r2
   2591e:	d104      	bne.n	2592a <nrfx_flag32_alloc+0x2a>
   25920:	e8c0 4fec 	stlex	ip, r4, [r0]
   25924:	f1bc 0f00 	cmp.w	ip, #0
   25928:	d1f6      	bne.n	25918 <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   2592a:	d1eb      	bne.n	25904 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   2592c:	4801      	ldr	r0, [pc, #4]	; (25934 <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
   2592e:	700b      	strb	r3, [r1, #0]
}
   25930:	bd70      	pop	{r4, r5, r6, pc}
   25932:	bf00      	nop
   25934:	0bad0000 	.word	0x0bad0000

00025938 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   25938:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   2593a:	6803      	ldr	r3, [r0, #0]
   2593c:	40cb      	lsrs	r3, r1
   2593e:	07db      	lsls	r3, r3, #31
   25940:	d410      	bmi.n	25964 <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   25942:	2301      	movs	r3, #1
   25944:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   25946:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   25948:	ea43 0102 	orr.w	r1, r3, r2
   2594c:	e8d0 4fef 	ldaex	r4, [r0]
   25950:	4294      	cmp	r4, r2
   25952:	d104      	bne.n	2595e <nrfx_flag32_free+0x26>
   25954:	e8c0 1fec 	stlex	ip, r1, [r0]
   25958:	f1bc 0f00 	cmp.w	ip, #0
   2595c:	d1f6      	bne.n	2594c <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   2595e:	d1f2      	bne.n	25946 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   25960:	4801      	ldr	r0, [pc, #4]	; (25968 <nrfx_flag32_free+0x30>)
}
   25962:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   25964:	4801      	ldr	r0, [pc, #4]	; (2596c <nrfx_flag32_free+0x34>)
   25966:	e7fc      	b.n	25962 <nrfx_flag32_free+0x2a>
   25968:	0bad0000 	.word	0x0bad0000
   2596c:	0bad0004 	.word	0x0bad0004

00025970 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
   25970:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25972:	4b34      	ldr	r3, [pc, #208]	; (25a44 <clock_stop+0xd4>)
    switch (domain)
   25974:	4604      	mov	r4, r0
   25976:	b158      	cbz	r0, 25990 <clock_stop+0x20>
   25978:	2801      	cmp	r0, #1
   2597a:	d027      	beq.n	259cc <clock_stop+0x5c>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   2597c:	4932      	ldr	r1, [pc, #200]	; (25a48 <clock_stop+0xd8>)
   2597e:	4833      	ldr	r0, [pc, #204]	; (25a4c <clock_stop+0xdc>)
   25980:	23d8      	movs	r3, #216	; 0xd8
   25982:	4a33      	ldr	r2, [pc, #204]	; (25a50 <clock_stop+0xe0>)
   25984:	f009 fd1e 	bl	2f3c4 <assert_print>
   25988:	21d8      	movs	r1, #216	; 0xd8
   2598a:	4831      	ldr	r0, [pc, #196]	; (25a50 <clock_stop+0xe0>)
            NRFX_ASSERT(0);
   2598c:	f009 fd13 	bl	2f3b6 <assert_post_action>
    p_reg->INTENCLR = mask;
   25990:	2202      	movs	r2, #2
   25992:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   25996:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   2599a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2599e:	2201      	movs	r2, #1
            return;
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   259a0:	4607      	mov	r7, r0
   259a2:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   259a4:	2301      	movs	r3, #1
   259a6:	f242 7510 	movw	r5, #10000	; 0x2710
   259aa:	4e26      	ldr	r6, [pc, #152]	; (25a44 <clock_stop+0xd4>)
   259ac:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
   259b0:	b1bc      	cbz	r4, 259e2 <clock_stop+0x72>
   259b2:	2c01      	cmp	r4, #1
   259b4:	d033      	beq.n	25a1e <clock_stop+0xae>
            NRFX_ASSERT(0);
   259b6:	4924      	ldr	r1, [pc, #144]	; (25a48 <clock_stop+0xd8>)
   259b8:	4824      	ldr	r0, [pc, #144]	; (25a4c <clock_stop+0xdc>)
   259ba:	f240 3347 	movw	r3, #839	; 0x347
   259be:	4a25      	ldr	r2, [pc, #148]	; (25a54 <clock_stop+0xe4>)
   259c0:	f009 fd00 	bl	2f3c4 <assert_print>
   259c4:	f240 3147 	movw	r1, #839	; 0x347
   259c8:	4822      	ldr	r0, [pc, #136]	; (25a54 <clock_stop+0xe4>)
   259ca:	e7df      	b.n	2598c <clock_stop+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   259cc:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   259ce:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   259d2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   259d6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   259da:	f10d 0707 	add.w	r7, sp, #7
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   259de:	6058      	str	r0, [r3, #4]
   259e0:	e7e0      	b.n	259a4 <clock_stop+0x34>
            if (p_clk_src != NULL)
   259e2:	b18f      	cbz	r7, 25a08 <clock_stop+0x98>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   259e4:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   259e8:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   259ec:	703b      	strb	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   259ee:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   259f2:	03da      	lsls	r2, r3, #15
   259f4:	d511      	bpl.n	25a1a <clock_stop+0xaa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   259f6:	f89d 0007 	ldrb.w	r0, [sp, #7]
   259fa:	2801      	cmp	r0, #1
   259fc:	d10d      	bne.n	25a1a <clock_stop+0xaa>
   259fe:	f00f fc00 	bl	35202 <nrfx_busy_wait>
   25a02:	3d01      	subs	r5, #1
   25a04:	d1d4      	bne.n	259b0 <clock_stop+0x40>
   25a06:	e008      	b.n	25a1a <clock_stop+0xaa>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   25a08:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   25a0c:	03d9      	lsls	r1, r3, #15
   25a0e:	d504      	bpl.n	25a1a <clock_stop+0xaa>
   25a10:	2001      	movs	r0, #1
   25a12:	f00f fbf6 	bl	35202 <nrfx_busy_wait>
   25a16:	3d01      	subs	r5, #1
   25a18:	d1f6      	bne.n	25a08 <clock_stop+0x98>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   25a1a:	b003      	add	sp, #12
   25a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (p_clk_src != NULL)
   25a1e:	b13f      	cbz	r7, 25a30 <clock_stop+0xc0>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   25a20:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   25a24:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   25a28:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   25a2a:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   25a2e:	e7e0      	b.n	259f2 <clock_stop+0x82>
   25a30:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   25a34:	03db      	lsls	r3, r3, #15
   25a36:	d5f0      	bpl.n	25a1a <clock_stop+0xaa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   25a38:	2001      	movs	r0, #1
   25a3a:	f00f fbe2 	bl	35202 <nrfx_busy_wait>
   25a3e:	3d01      	subs	r5, #1
   25a40:	d1f6      	bne.n	25a30 <clock_stop+0xc0>
   25a42:	e7ea      	b.n	25a1a <clock_stop+0xaa>
   25a44:	40005000 	.word	0x40005000
   25a48:	0003ea9e 	.word	0x0003ea9e
   25a4c:	00039995 	.word	0x00039995
   25a50:	0004075f 	.word	0x0004075f
   25a54:	0004079c 	.word	0x0004079c

00025a58 <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   25a58:	b508      	push	{r3, lr}
    NRFX_ASSERT(event_handler);
   25a5a:	b958      	cbnz	r0, 25a74 <nrfx_clock_init+0x1c>
   25a5c:	490a      	ldr	r1, [pc, #40]	; (25a88 <nrfx_clock_init+0x30>)
   25a5e:	480b      	ldr	r0, [pc, #44]	; (25a8c <nrfx_clock_init+0x34>)
   25a60:	f240 1315 	movw	r3, #277	; 0x115
   25a64:	4a0a      	ldr	r2, [pc, #40]	; (25a90 <nrfx_clock_init+0x38>)
   25a66:	f009 fcad 	bl	2f3c4 <assert_print>
   25a6a:	f240 1115 	movw	r1, #277	; 0x115
   25a6e:	4808      	ldr	r0, [pc, #32]	; (25a90 <nrfx_clock_init+0x38>)
   25a70:	f009 fca1 	bl	2f3b6 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   25a74:	4b07      	ldr	r3, [pc, #28]	; (25a94 <nrfx_clock_init+0x3c>)
   25a76:	791a      	ldrb	r2, [r3, #4]
   25a78:	b922      	cbnz	r2, 25a84 <nrfx_clock_init+0x2c>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   25a7a:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   25a7c:	6018      	str	r0, [r3, #0]
    nrfx_err_t err_code = NRFX_SUCCESS;
   25a7e:	4806      	ldr	r0, [pc, #24]	; (25a98 <nrfx_clock_init+0x40>)
        m_clock_cb.module_initialized = true;
   25a80:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   25a82:	bd08      	pop	{r3, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   25a84:	4805      	ldr	r0, [pc, #20]	; (25a9c <nrfx_clock_init+0x44>)
    return err_code;
   25a86:	e7fc      	b.n	25a82 <nrfx_clock_init+0x2a>
   25a88:	000407d0 	.word	0x000407d0
   25a8c:	00039995 	.word	0x00039995
   25a90:	0004075f 	.word	0x0004075f
   25a94:	2000eb10 	.word	0x2000eb10
   25a98:	0bad0000 	.word	0x0bad0000
   25a9c:	0bad000c 	.word	0x0bad000c

00025aa0 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   25aa0:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   25aa2:	4b0d      	ldr	r3, [pc, #52]	; (25ad8 <nrfx_clock_enable+0x38>)
   25aa4:	791b      	ldrb	r3, [r3, #4]
   25aa6:	b95b      	cbnz	r3, 25ac0 <nrfx_clock_enable+0x20>
   25aa8:	490c      	ldr	r1, [pc, #48]	; (25adc <nrfx_clock_enable+0x3c>)
   25aaa:	480d      	ldr	r0, [pc, #52]	; (25ae0 <nrfx_clock_enable+0x40>)
   25aac:	f44f 7397 	mov.w	r3, #302	; 0x12e
   25ab0:	4a0c      	ldr	r2, [pc, #48]	; (25ae4 <nrfx_clock_enable+0x44>)
   25ab2:	f009 fc87 	bl	2f3c4 <assert_print>
   25ab6:	f44f 7197 	mov.w	r1, #302	; 0x12e
   25aba:	480a      	ldr	r0, [pc, #40]	; (25ae4 <nrfx_clock_enable+0x44>)
   25abc:	f009 fc7b 	bl	2f3b6 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   25ac0:	2005      	movs	r0, #5
   25ac2:	f7ec fd5f 	bl	12584 <arch_irq_is_enabled>
   25ac6:	b910      	cbnz	r0, 25ace <nrfx_clock_enable+0x2e>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   25ac8:	2005      	movs	r0, #5
   25aca:	f7ec fd39 	bl	12540 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
   25ace:	2201      	movs	r2, #1
   25ad0:	4b05      	ldr	r3, [pc, #20]	; (25ae8 <nrfx_clock_enable+0x48>)
   25ad2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   25ad6:	bd08      	pop	{r3, pc}
   25ad8:	2000eb10 	.word	0x2000eb10
   25adc:	000407de 	.word	0x000407de
   25ae0:	00039995 	.word	0x00039995
   25ae4:	0004075f 	.word	0x0004075f
   25ae8:	40005000 	.word	0x40005000

00025aec <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   25aec:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   25aee:	4b2a      	ldr	r3, [pc, #168]	; (25b98 <nrfx_clock_start+0xac>)
   25af0:	791b      	ldrb	r3, [r3, #4]
   25af2:	b95b      	cbnz	r3, 25b0c <nrfx_clock_start+0x20>
   25af4:	4929      	ldr	r1, [pc, #164]	; (25b9c <nrfx_clock_start+0xb0>)
   25af6:	f44f 73b4 	mov.w	r3, #360	; 0x168
   25afa:	4a29      	ldr	r2, [pc, #164]	; (25ba0 <nrfx_clock_start+0xb4>)
   25afc:	4829      	ldr	r0, [pc, #164]	; (25ba4 <nrfx_clock_start+0xb8>)
   25afe:	f009 fc61 	bl	2f3c4 <assert_print>
   25b02:	f44f 71b4 	mov.w	r1, #360	; 0x168
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   25b06:	4826      	ldr	r0, [pc, #152]	; (25ba0 <nrfx_clock_start+0xb4>)
   25b08:	f009 fc55 	bl	2f3b6 <assert_post_action>
    switch (domain)
   25b0c:	4b26      	ldr	r3, [pc, #152]	; (25ba8 <nrfx_clock_start+0xbc>)
   25b0e:	b158      	cbz	r0, 25b28 <nrfx_clock_start+0x3c>
   25b10:	2801      	cmp	r0, #1
   25b12:	d037      	beq.n	25b84 <nrfx_clock_start+0x98>
            NRFX_ASSERT(0);
   25b14:	4925      	ldr	r1, [pc, #148]	; (25bac <nrfx_clock_start+0xc0>)
   25b16:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
   25b1a:	4a21      	ldr	r2, [pc, #132]	; (25ba0 <nrfx_clock_start+0xb4>)
   25b1c:	4821      	ldr	r0, [pc, #132]	; (25ba4 <nrfx_clock_start+0xb8>)
   25b1e:	f009 fc51 	bl	2f3c4 <assert_print>
   25b22:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
   25b26:	e7ee      	b.n	25b06 <nrfx_clock_start+0x1a>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   25b28:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   25b2c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   25b30:	03c9      	lsls	r1, r1, #15
   25b32:	d511      	bpl.n	25b58 <nrfx_clock_start+0x6c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   25b34:	f002 0303 	and.w	r3, r2, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   25b38:	2b02      	cmp	r3, #2
   25b3a:	d11c      	bne.n	25b76 <nrfx_clock_start+0x8a>
    p_reg->LFCLKSRC = (uint32_t)(source);
   25b3c:	4a1a      	ldr	r2, [pc, #104]	; (25ba8 <nrfx_clock_start+0xbc>)
   25b3e:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   25b42:	2300      	movs	r3, #0
   25b44:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   25b48:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
   25b4c:	2302      	movs	r3, #2
   25b4e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   25b52:	2301      	movs	r3, #1
   25b54:	6093      	str	r3, [r2, #8]
}
   25b56:	e00d      	b.n	25b74 <nrfx_clock_start+0x88>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   25b58:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   25b5c:	07d2      	lsls	r2, r2, #31
   25b5e:	d50f      	bpl.n	25b80 <nrfx_clock_start+0x94>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   25b60:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
   25b64:	f002 0203 	and.w	r2, r2, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   25b68:	3a01      	subs	r2, #1
   25b6a:	2a01      	cmp	r2, #1
   25b6c:	d805      	bhi.n	25b7a <nrfx_clock_start+0x8e>
    p_reg->INTENSET = mask;
   25b6e:	2202      	movs	r2, #2
   25b70:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
            break;
    }
}
   25b74:	bd08      	pop	{r3, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   25b76:	2b01      	cmp	r3, #1
   25b78:	d002      	beq.n	25b80 <nrfx_clock_start+0x94>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   25b7a:	2000      	movs	r0, #0
   25b7c:	f7ff fef8 	bl	25970 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   25b80:	2301      	movs	r3, #1
   25b82:	e7db      	b.n	25b3c <nrfx_clock_start+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   25b84:	2200      	movs	r2, #0
   25b86:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   25b8a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   25b8e:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   25b92:	6018      	str	r0, [r3, #0]
}
   25b94:	e7ee      	b.n	25b74 <nrfx_clock_start+0x88>
   25b96:	bf00      	nop
   25b98:	2000eb10 	.word	0x2000eb10
   25b9c:	000407de 	.word	0x000407de
   25ba0:	0004075f 	.word	0x0004075f
   25ba4:	00039995 	.word	0x00039995
   25ba8:	40005000 	.word	0x40005000
   25bac:	0003ea9e 	.word	0x0003ea9e

00025bb0 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   25bb0:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   25bb2:	4b09      	ldr	r3, [pc, #36]	; (25bd8 <nrfx_clock_stop+0x28>)
   25bb4:	791b      	ldrb	r3, [r3, #4]
   25bb6:	b95b      	cbnz	r3, 25bd0 <nrfx_clock_stop+0x20>
   25bb8:	4908      	ldr	r1, [pc, #32]	; (25bdc <nrfx_clock_stop+0x2c>)
   25bba:	4809      	ldr	r0, [pc, #36]	; (25be0 <nrfx_clock_stop+0x30>)
   25bbc:	f240 13ad 	movw	r3, #429	; 0x1ad
   25bc0:	4a08      	ldr	r2, [pc, #32]	; (25be4 <nrfx_clock_stop+0x34>)
   25bc2:	f009 fbff 	bl	2f3c4 <assert_print>
   25bc6:	f240 11ad 	movw	r1, #429	; 0x1ad
   25bca:	4806      	ldr	r0, [pc, #24]	; (25be4 <nrfx_clock_stop+0x34>)
   25bcc:	f009 fbf3 	bl	2f3b6 <assert_post_action>
    clock_stop(domain);
}
   25bd0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    clock_stop(domain);
   25bd4:	f7ff becc 	b.w	25970 <clock_stop>
   25bd8:	2000eb10 	.word	0x2000eb10
   25bdc:	000407de 	.word	0x000407de
   25be0:	00039995 	.word	0x00039995
   25be4:	0004075f 	.word	0x0004075f

00025be8 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   25be8:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   25bea:	4b17      	ldr	r3, [pc, #92]	; (25c48 <nrfx_power_clock_irq_handler+0x60>)
   25bec:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   25bf0:	b152      	cbz	r2, 25c08 <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   25bf2:	2000      	movs	r0, #0
   25bf4:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   25bf8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   25bfc:	2201      	movs	r2, #1
   25bfe:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   25c02:	4b12      	ldr	r3, [pc, #72]	; (25c4c <nrfx_power_clock_irq_handler+0x64>)
   25c04:	681b      	ldr	r3, [r3, #0]
   25c06:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   25c08:	4b0f      	ldr	r3, [pc, #60]	; (25c48 <nrfx_power_clock_irq_handler+0x60>)
   25c0a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   25c0e:	b18a      	cbz	r2, 25c34 <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   25c10:	2200      	movs	r2, #0
   25c12:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   25c16:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   25c1a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   25c1e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   25c22:	f002 0203 	and.w	r2, r2, #3
   25c26:	2a01      	cmp	r2, #1
   25c28:	f04f 0102 	mov.w	r1, #2
   25c2c:	d103      	bne.n	25c36 <nrfx_power_clock_irq_handler+0x4e>
    p_reg->LFCLKSRC = (uint32_t)(source);
   25c2e:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   25c32:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   25c34:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   25c36:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   25c3a:	4b04      	ldr	r3, [pc, #16]	; (25c4c <nrfx_power_clock_irq_handler+0x64>)
   25c3c:	2001      	movs	r0, #1
}
   25c3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   25c42:	681b      	ldr	r3, [r3, #0]
   25c44:	4718      	bx	r3
   25c46:	bf00      	nop
   25c48:	40005000 	.word	0x40005000
   25c4c:	2000eb10 	.word	0x2000eb10

00025c50 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   25c50:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
   25c52:	4801      	ldr	r0, [pc, #4]	; (25c58 <nrfx_dppi_channel_alloc+0x8>)
   25c54:	f7ff be54 	b.w	25900 <nrfx_flag32_alloc>
   25c58:	2000c9f8 	.word	0x2000c9f8

00025c5c <nrfx_dppi_channel_enable>:
    nrf_dppi_channels_disable(NRF_DPPIC, NRFX_BIT(channel));
    return nrfx_flag32_free(&m_allocated_channels, channel);
}

nrfx_err_t nrfx_dppi_channel_enable(uint8_t channel)
{
   25c5c:	b510      	push	{r4, lr}
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!nrfx_flag32_is_allocated(m_allocated_channels, channel))
   25c5e:	4b08      	ldr	r3, [pc, #32]	; (25c80 <nrfx_dppi_channel_enable+0x24>)
{
   25c60:	4604      	mov	r4, r0
    if (!nrfx_flag32_is_allocated(m_allocated_channels, channel))
   25c62:	4601      	mov	r1, r0
   25c64:	6818      	ldr	r0, [r3, #0]
   25c66:	f00f face 	bl	35206 <nrfx_flag32_is_allocated>
   25c6a:	b130      	cbz	r0, 25c7a <nrfx_dppi_channel_enable+0x1e>
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    }
    else
    {
        nrf_dppi_channels_enable(NRF_DPPIC, DPPI_BIT_SET(channel));
   25c6c:	2301      	movs	r3, #1
   25c6e:	4a05      	ldr	r2, [pc, #20]	; (25c84 <nrfx_dppi_channel_enable+0x28>)
   25c70:	40a3      	lsls	r3, r4
    nrfx_err_t err_code = NRFX_SUCCESS;
   25c72:	4805      	ldr	r0, [pc, #20]	; (25c88 <nrfx_dppi_channel_enable+0x2c>)
   25c74:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   25c78:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_INVALID_PARAM;
   25c7a:	4804      	ldr	r0, [pc, #16]	; (25c8c <nrfx_dppi_channel_enable+0x30>)
    return err_code;
   25c7c:	e7fc      	b.n	25c78 <nrfx_dppi_channel_enable+0x1c>
   25c7e:	bf00      	nop
   25c80:	2000c9f8 	.word	0x2000c9f8
   25c84:	40017000 	.word	0x40017000
   25c88:	0bad0000 	.word	0x0bad0000
   25c8c:	0bad0004 	.word	0x0bad0004

00025c90 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   25c90:	4b03      	ldr	r3, [pc, #12]	; (25ca0 <pin_in_use_by_te+0x10>)
   25c92:	300c      	adds	r0, #12
   25c94:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   25c98:	f3c0 1040 	ubfx	r0, r0, #5, #1
   25c9c:	4770      	bx	lr
   25c9e:	bf00      	nop
   25ca0:	2000c9fc 	.word	0x2000c9fc

00025ca4 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   25ca4:	4b04      	ldr	r3, [pc, #16]	; (25cb8 <pin_has_trigger+0x14>)
   25ca6:	300c      	adds	r0, #12
   25ca8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   25cac:	f010 001c 	ands.w	r0, r0, #28
   25cb0:	bf18      	it	ne
   25cb2:	2001      	movne	r0, #1
   25cb4:	4770      	bx	lr
   25cb6:	bf00      	nop
   25cb8:	2000c9fc 	.word	0x2000c9fc

00025cbc <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   25cbc:	4b03      	ldr	r3, [pc, #12]	; (25ccc <pin_is_output+0x10>)
   25cbe:	300c      	adds	r0, #12
   25cc0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   25cc4:	f3c0 0040 	ubfx	r0, r0, #1, #1
   25cc8:	4770      	bx	lr
   25cca:	bf00      	nop
   25ccc:	2000c9fc 	.word	0x2000c9fc

00025cd0 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   25cd0:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   25cd2:	4c0d      	ldr	r4, [pc, #52]	; (25d08 <call_handler+0x38>)
   25cd4:	f100 030c 	add.w	r3, r0, #12
   25cd8:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
   25cdc:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   25cde:	05da      	lsls	r2, r3, #23
{
   25ce0:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   25ce2:	d507      	bpl.n	25cf4 <call_handler+0x24>
   25ce4:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   25ce8:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   25cec:	6852      	ldr	r2, [r2, #4]
   25cee:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   25cf2:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   25cf4:	6923      	ldr	r3, [r4, #16]
   25cf6:	b12b      	cbz	r3, 25d04 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   25cf8:	4631      	mov	r1, r6
   25cfa:	4628      	mov	r0, r5
   25cfc:	6962      	ldr	r2, [r4, #20]
    }
}
   25cfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   25d02:	4718      	bx	r3
}
   25d04:	bd70      	pop	{r4, r5, r6, pc}
   25d06:	bf00      	nop
   25d08:	2000c9fc 	.word	0x2000c9fc

00025d0c <release_handler>:
{
   25d0c:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   25d0e:	4a18      	ldr	r2, [pc, #96]	; (25d70 <release_handler+0x64>)
   25d10:	300c      	adds	r0, #12
   25d12:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   25d16:	05d9      	lsls	r1, r3, #23
   25d18:	d51d      	bpl.n	25d56 <release_handler+0x4a>
   25d1a:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   25d1e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   25d22:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   25d26:	2000      	movs	r0, #0
   25d28:	f102 0416 	add.w	r4, r2, #22
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   25d2c:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   25d30:	f413 7f80 	tst.w	r3, #256	; 0x100
   25d34:	d003      	beq.n	25d3e <release_handler+0x32>
   25d36:	f3c3 2343 	ubfx	r3, r3, #9, #4
   25d3a:	4299      	cmp	r1, r3
   25d3c:	d00b      	beq.n	25d56 <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   25d3e:	3001      	adds	r0, #1
   25d40:	2820      	cmp	r0, #32
   25d42:	d1f3      	bne.n	25d2c <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   25d44:	2300      	movs	r3, #0
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   25d46:	480b      	ldr	r0, [pc, #44]	; (25d74 <release_handler+0x68>)
        m_cb.handlers[handler_id].handler = NULL;
   25d48:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   25d4c:	f7ff fdf4 	bl	25938 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   25d50:	4b09      	ldr	r3, [pc, #36]	; (25d78 <release_handler+0x6c>)
   25d52:	4298      	cmp	r0, r3
   25d54:	d100      	bne.n	25d58 <release_handler+0x4c>
}
   25d56:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   25d58:	4908      	ldr	r1, [pc, #32]	; (25d7c <release_handler+0x70>)
   25d5a:	4809      	ldr	r0, [pc, #36]	; (25d80 <release_handler+0x74>)
   25d5c:	f44f 7399 	mov.w	r3, #306	; 0x132
   25d60:	4a08      	ldr	r2, [pc, #32]	; (25d84 <release_handler+0x78>)
   25d62:	f009 fb2f 	bl	2f3c4 <assert_print>
   25d66:	f44f 7199 	mov.w	r1, #306	; 0x132
   25d6a:	4806      	ldr	r0, [pc, #24]	; (25d84 <release_handler+0x78>)
   25d6c:	f009 fb23 	bl	2f3b6 <assert_post_action>
   25d70:	2000c9fc 	.word	0x2000c9fc
   25d74:	2000ca58 	.word	0x2000ca58
   25d78:	0bad0000 	.word	0x0bad0000
   25d7c:	0003e1a2 	.word	0x0003e1a2
   25d80:	00039995 	.word	0x00039995
   25d84:	00040811 	.word	0x00040811

00025d88 <pin_handler_trigger_uninit>:
{
   25d88:	b538      	push	{r3, r4, r5, lr}
   25d8a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   25d8c:	f7ff ff80 	bl	25c90 <pin_in_use_by_te>
   25d90:	4c0b      	ldr	r4, [pc, #44]	; (25dc0 <pin_handler_trigger_uninit+0x38>)
   25d92:	f102 050c 	add.w	r5, r2, #12
   25d96:	b160      	cbz	r0, 25db2 <pin_handler_trigger_uninit+0x2a>
    p_reg->CONFIG[idx] = 0;
   25d98:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   25d9a:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   25d9e:	0b5b      	lsrs	r3, r3, #13
   25da0:	009b      	lsls	r3, r3, #2
   25da2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   25da6:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   25daa:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
   25dae:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
   25db2:	4610      	mov	r0, r2
   25db4:	f7ff ffaa 	bl	25d0c <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   25db8:	2300      	movs	r3, #0
   25dba:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   25dbe:	bd38      	pop	{r3, r4, r5, pc}
   25dc0:	2000c9fc 	.word	0x2000c9fc

00025dc4 <nrf_gpio_pin_port_decode>:
{
   25dc4:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   25dc6:	6802      	ldr	r2, [r0, #0]
{
   25dc8:	4601      	mov	r1, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   25dca:	4610      	mov	r0, r2
   25dcc:	f00f fa20 	bl	35210 <nrf_gpio_pin_present_check>
   25dd0:	b958      	cbnz	r0, 25dea <nrf_gpio_pin_port_decode+0x26>
   25dd2:	490e      	ldr	r1, [pc, #56]	; (25e0c <nrf_gpio_pin_port_decode+0x48>)
   25dd4:	f240 2347 	movw	r3, #583	; 0x247
   25dd8:	4a0d      	ldr	r2, [pc, #52]	; (25e10 <nrf_gpio_pin_port_decode+0x4c>)
   25dda:	480e      	ldr	r0, [pc, #56]	; (25e14 <nrf_gpio_pin_port_decode+0x50>)
   25ddc:	f009 faf2 	bl	2f3c4 <assert_print>
   25de0:	f240 2147 	movw	r1, #583	; 0x247
            NRFX_ASSERT(0);
   25de4:	480a      	ldr	r0, [pc, #40]	; (25e10 <nrf_gpio_pin_port_decode+0x4c>)
   25de6:	f009 fae6 	bl	2f3b6 <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   25dea:	f002 031f 	and.w	r3, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   25dee:	0952      	lsrs	r2, r2, #5
    *p_pin = pin_number & 0x1F;
   25df0:	600b      	str	r3, [r1, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   25df2:	d009      	beq.n	25e08 <nrf_gpio_pin_port_decode+0x44>
            NRFX_ASSERT(0);
   25df4:	4908      	ldr	r1, [pc, #32]	; (25e18 <nrf_gpio_pin_port_decode+0x54>)
   25df6:	f44f 7313 	mov.w	r3, #588	; 0x24c
   25dfa:	4a05      	ldr	r2, [pc, #20]	; (25e10 <nrf_gpio_pin_port_decode+0x4c>)
   25dfc:	4805      	ldr	r0, [pc, #20]	; (25e14 <nrf_gpio_pin_port_decode+0x50>)
   25dfe:	f009 fae1 	bl	2f3c4 <assert_print>
   25e02:	f44f 7113 	mov.w	r1, #588	; 0x24c
   25e06:	e7ed      	b.n	25de4 <nrf_gpio_pin_port_decode+0x20>
}
   25e08:	4804      	ldr	r0, [pc, #16]	; (25e1c <nrf_gpio_pin_port_decode+0x58>)
   25e0a:	bd08      	pop	{r3, pc}
   25e0c:	0003e147 	.word	0x0003e147
   25e10:	0003e114 	.word	0x0003e114
   25e14:	00039995 	.word	0x00039995
   25e18:	0003ea9e 	.word	0x0003ea9e
   25e1c:	40842500 	.word	0x40842500

00025e20 <nrfx_gpiote_input_configure>:
{
   25e20:	b5f0      	push	{r4, r5, r6, r7, lr}
   25e22:	4604      	mov	r4, r0
   25e24:	4617      	mov	r7, r2
   25e26:	461d      	mov	r5, r3
   25e28:	b085      	sub	sp, #20
    if (p_input_config)
   25e2a:	b1d9      	cbz	r1, 25e64 <nrfx_gpiote_input_configure+0x44>
        if (pin_is_task_output(pin))
   25e2c:	f00f f9fc 	bl	35228 <pin_is_task_output>
   25e30:	bb00      	cbnz	r0, 25e74 <nrfx_gpiote_input_configure+0x54>
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   25e32:	460b      	mov	r3, r1
   25e34:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   25e38:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   25e3c:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   25e40:	f10d 020f 	add.w	r2, sp, #15
   25e44:	f10d 010e 	add.w	r1, sp, #14
   25e48:	4620      	mov	r0, r4
   25e4a:	f00f f9f8 	bl	3523e <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   25e4e:	4a48      	ldr	r2, [pc, #288]	; (25f70 <nrfx_gpiote_input_configure+0x150>)
   25e50:	f104 010c 	add.w	r1, r4, #12
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   25e54:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   25e58:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   25e5c:	f043 0301 	orr.w	r3, r3, #1
   25e60:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   25e64:	b36f      	cbz	r7, 25ec2 <nrfx_gpiote_input_configure+0xa2>
        if (pin_is_output(pin))
   25e66:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   25e68:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   25e6a:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
   25e6c:	f7ff ff26 	bl	25cbc <pin_is_output>
   25e70:	b110      	cbz	r0, 25e78 <nrfx_gpiote_input_configure+0x58>
            if (use_evt)
   25e72:	b1da      	cbz	r2, 25eac <nrfx_gpiote_input_configure+0x8c>
            return NRFX_ERROR_INVALID_PARAM;
   25e74:	483f      	ldr	r0, [pc, #252]	; (25f74 <nrfx_gpiote_input_configure+0x154>)
   25e76:	e026      	b.n	25ec6 <nrfx_gpiote_input_configure+0xa6>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   25e78:	483d      	ldr	r0, [pc, #244]	; (25f70 <nrfx_gpiote_input_configure+0x150>)
   25e7a:	f104 0c0c 	add.w	ip, r4, #12
   25e7e:	f830 101c 	ldrh.w	r1, [r0, ip, lsl #1]
   25e82:	f021 0120 	bic.w	r1, r1, #32
   25e86:	04c9      	lsls	r1, r1, #19
   25e88:	0cc9      	lsrs	r1, r1, #19
   25e8a:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]
            if (use_evt)
   25e8e:	b16a      	cbz	r2, 25eac <nrfx_gpiote_input_configure+0x8c>
                if (!edge)
   25e90:	2e03      	cmp	r6, #3
   25e92:	d8ef      	bhi.n	25e74 <nrfx_gpiote_input_configure+0x54>
                uint8_t ch = *p_trigger_config->p_in_channel;
   25e94:	687b      	ldr	r3, [r7, #4]
   25e96:	781f      	ldrb	r7, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   25e98:	00ba      	lsls	r2, r7, #2
   25e9a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   25e9e:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   25ea2:	b996      	cbnz	r6, 25eca <nrfx_gpiote_input_configure+0xaa>
    p_reg->CONFIG[idx] = 0;
   25ea4:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
   25ea8:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   25eac:	4a30      	ldr	r2, [pc, #192]	; (25f70 <nrfx_gpiote_input_configure+0x150>)
   25eae:	f104 010c 	add.w	r1, r4, #12
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   25eb2:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   25eb6:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   25eba:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
   25ebe:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
   25ec2:	bb15      	cbnz	r5, 25f0a <nrfx_gpiote_input_configure+0xea>
        err = NRFX_SUCCESS;
   25ec4:	482c      	ldr	r0, [pc, #176]	; (25f78 <nrfx_gpiote_input_configure+0x158>)
}
   25ec6:	b005      	add	sp, #20
   25ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   25eca:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   25ece:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   25ed2:	f023 0303 	bic.w	r3, r3, #3
   25ed6:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   25eda:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
   25ede:	f041 0120 	orr.w	r1, r1, #32
   25ee2:	f423 3347 	bic.w	r3, r3, #203776	; 0x31c00
   25ee6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
   25eea:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   25eee:	0223      	lsls	r3, r4, #8
   25ef0:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   25ef4:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
   25ef8:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   25efc:	ea43 030e 	orr.w	r3, r3, lr
   25f00:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   25f04:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]
   25f08:	e7d0      	b.n	25eac <nrfx_gpiote_input_configure+0x8c>
    release_handler(pin);
   25f0a:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   25f0c:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   25f10:	f7ff fefc 	bl	25d0c <release_handler>
    if (!handler)
   25f14:	2e00      	cmp	r6, #0
   25f16:	d0d5      	beq.n	25ec4 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   25f18:	4d15      	ldr	r5, [pc, #84]	; (25f70 <nrfx_gpiote_input_configure+0x150>)
   25f1a:	682b      	ldr	r3, [r5, #0]
   25f1c:	429e      	cmp	r6, r3
   25f1e:	d102      	bne.n	25f26 <nrfx_gpiote_input_configure+0x106>
   25f20:	686b      	ldr	r3, [r5, #4]
   25f22:	429f      	cmp	r7, r3
   25f24:	d016      	beq.n	25f54 <nrfx_gpiote_input_configure+0x134>
   25f26:	68ab      	ldr	r3, [r5, #8]
   25f28:	429e      	cmp	r6, r3
   25f2a:	d115      	bne.n	25f58 <nrfx_gpiote_input_configure+0x138>
   25f2c:	68eb      	ldr	r3, [r5, #12]
   25f2e:	429f      	cmp	r7, r3
   25f30:	d112      	bne.n	25f58 <nrfx_gpiote_input_configure+0x138>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   25f32:	2301      	movs	r3, #1
    m_cb.handlers[handler_id].p_context = p_context;
   25f34:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   25f38:	f104 000c 	add.w	r0, r4, #12
    m_cb.handlers[handler_id].p_context = p_context;
   25f3c:	6057      	str	r7, [r2, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   25f3e:	f835 2010 	ldrh.w	r2, [r5, r0, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
   25f42:	f845 6033 	str.w	r6, [r5, r3, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   25f46:	ea42 2343 	orr.w	r3, r2, r3, lsl #9
   25f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   25f4e:	f825 3010 	strh.w	r3, [r5, r0, lsl #1]
    return NRFX_SUCCESS;
   25f52:	e7b7      	b.n	25ec4 <nrfx_gpiote_input_configure+0xa4>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   25f54:	2300      	movs	r3, #0
    if (handler_id < 0)
   25f56:	e7ed      	b.n	25f34 <nrfx_gpiote_input_configure+0x114>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   25f58:	4808      	ldr	r0, [pc, #32]	; (25f7c <nrfx_gpiote_input_configure+0x15c>)
   25f5a:	f10d 010f 	add.w	r1, sp, #15
   25f5e:	f7ff fccf 	bl	25900 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   25f62:	4b05      	ldr	r3, [pc, #20]	; (25f78 <nrfx_gpiote_input_configure+0x158>)
   25f64:	4298      	cmp	r0, r3
   25f66:	d1ae      	bne.n	25ec6 <nrfx_gpiote_input_configure+0xa6>
        handler_id = (int32_t)id;
   25f68:	f89d 300f 	ldrb.w	r3, [sp, #15]
   25f6c:	e7e2      	b.n	25f34 <nrfx_gpiote_input_configure+0x114>
   25f6e:	bf00      	nop
   25f70:	2000c9fc 	.word	0x2000c9fc
   25f74:	0bad0004 	.word	0x0bad0004
   25f78:	0bad0000 	.word	0x0bad0000
   25f7c:	2000ca58 	.word	0x2000ca58

00025f80 <nrfx_gpiote_output_configure>:
{
   25f80:	b5f0      	push	{r4, r5, r6, r7, lr}
   25f82:	4604      	mov	r4, r0
   25f84:	4615      	mov	r5, r2
   25f86:	b085      	sub	sp, #20
    if (p_config)
   25f88:	b321      	cbz	r1, 25fd4 <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
   25f8a:	f7ff fe97 	bl	25cbc <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   25f8e:	b920      	cbnz	r0, 25f9a <nrfx_gpiote_output_configure+0x1a>
   25f90:	4620      	mov	r0, r4
   25f92:	f7ff fe7d 	bl	25c90 <pin_in_use_by_te>
   25f96:	2800      	cmp	r0, #0
   25f98:	d161      	bne.n	2605e <nrfx_gpiote_output_configure+0xde>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   25f9a:	4620      	mov	r0, r4
   25f9c:	f7ff fe82 	bl	25ca4 <pin_has_trigger>
   25fa0:	b110      	cbz	r0, 25fa8 <nrfx_gpiote_output_configure+0x28>
   25fa2:	784b      	ldrb	r3, [r1, #1]
   25fa4:	2b01      	cmp	r3, #1
   25fa6:	d05a      	beq.n	2605e <nrfx_gpiote_output_configure+0xde>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   25fa8:	2301      	movs	r3, #1
   25faa:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   25fae:	2300      	movs	r3, #0
   25fb0:	1c4a      	adds	r2, r1, #1
   25fb2:	e9cd 1300 	strd	r1, r3, [sp]
   25fb6:	4620      	mov	r0, r4
   25fb8:	1c8b      	adds	r3, r1, #2
   25fba:	f10d 010f 	add.w	r1, sp, #15
   25fbe:	f00f f93e 	bl	3523e <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   25fc2:	4a28      	ldr	r2, [pc, #160]	; (26064 <nrfx_gpiote_output_configure+0xe4>)
   25fc4:	f104 010c 	add.w	r1, r4, #12
   25fc8:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   25fcc:	f043 0303 	orr.w	r3, r3, #3
   25fd0:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   25fd4:	b915      	cbnz	r5, 25fdc <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
   25fd6:	4824      	ldr	r0, [pc, #144]	; (26068 <nrfx_gpiote_output_configure+0xe8>)
}
   25fd8:	b005      	add	sp, #20
   25fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
   25fdc:	4620      	mov	r0, r4
   25fde:	f7ff fe6d 	bl	25cbc <pin_is_output>
        if (pin_is_input(pin))
   25fe2:	2800      	cmp	r0, #0
   25fe4:	d03b      	beq.n	2605e <nrfx_gpiote_output_configure+0xde>
        uint32_t ch = p_task_config->task_ch;
   25fe6:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   25fea:	2300      	movs	r3, #0
   25fec:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   25fee:	4e1d      	ldr	r6, [pc, #116]	; (26064 <nrfx_gpiote_output_configure+0xe4>)
   25ff0:	f104 070c 	add.w	r7, r4, #12
   25ff4:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
   25ff8:	0089      	lsls	r1, r1, #2
   25ffa:	f020 0020 	bic.w	r0, r0, #32
   25ffe:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   26002:	04c0      	lsls	r0, r0, #19
   26004:	f501 3144 	add.w	r1, r1, #200704	; 0x31000
   26008:	0cc0      	lsrs	r0, r0, #19
   2600a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   2600e:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   26012:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   26016:	786a      	ldrb	r2, [r5, #1]
   26018:	2a00      	cmp	r2, #0
   2601a:	d0dc      	beq.n	25fd6 <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   2601c:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   26020:	78ad      	ldrb	r5, [r5, #2]
   26022:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
   26026:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   2602a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2602e:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   26032:	0223      	lsls	r3, r4, #8
   26034:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   26038:	0412      	lsls	r2, r2, #16
   2603a:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2603e:	ea43 030e 	orr.w	r3, r3, lr
   26042:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   26044:	052a      	lsls	r2, r5, #20
   26046:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   2604a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2604e:	4313      	orrs	r3, r2
   26050:	f040 0020 	orr.w	r0, r0, #32
   26054:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   26058:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   2605c:	e7bb      	b.n	25fd6 <nrfx_gpiote_output_configure+0x56>
{
   2605e:	4803      	ldr	r0, [pc, #12]	; (2606c <nrfx_gpiote_output_configure+0xec>)
   26060:	e7ba      	b.n	25fd8 <nrfx_gpiote_output_configure+0x58>
   26062:	bf00      	nop
   26064:	2000c9fc 	.word	0x2000c9fc
   26068:	0bad0000 	.word	0x0bad0000
   2606c:	0bad0004 	.word	0x0bad0004

00026070 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   26070:	4b01      	ldr	r3, [pc, #4]	; (26078 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   26072:	e9c3 0104 	strd	r0, r1, [r3, #16]
}
   26076:	4770      	bx	lr
   26078:	2000c9fc 	.word	0x2000c9fc

0002607c <nrfx_gpiote_channel_get>:
{
   2607c:	4602      	mov	r2, r0
   2607e:	b508      	push	{r3, lr}
    NRFX_ASSERT(p_channel);
   26080:	b959      	cbnz	r1, 2609a <nrfx_gpiote_channel_get+0x1e>
   26082:	490c      	ldr	r1, [pc, #48]	; (260b4 <nrfx_gpiote_channel_get+0x38>)
   26084:	480c      	ldr	r0, [pc, #48]	; (260b8 <nrfx_gpiote_channel_get+0x3c>)
   26086:	f240 2335 	movw	r3, #565	; 0x235
   2608a:	4a0c      	ldr	r2, [pc, #48]	; (260bc <nrfx_gpiote_channel_get+0x40>)
   2608c:	f009 f99a 	bl	2f3c4 <assert_print>
   26090:	f240 2135 	movw	r1, #565	; 0x235
   26094:	4809      	ldr	r0, [pc, #36]	; (260bc <nrfx_gpiote_channel_get+0x40>)
   26096:	f009 f98e 	bl	2f3b6 <assert_post_action>
    if (pin_in_use_by_te(pin))
   2609a:	f7ff fdf9 	bl	25c90 <pin_in_use_by_te>
   2609e:	b138      	cbz	r0, 260b0 <nrfx_gpiote_channel_get+0x34>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   260a0:	4b07      	ldr	r3, [pc, #28]	; (260c0 <nrfx_gpiote_channel_get+0x44>)
   260a2:	320c      	adds	r2, #12
   260a4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
   260a8:	4806      	ldr	r0, [pc, #24]	; (260c4 <nrfx_gpiote_channel_get+0x48>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   260aa:	0b5b      	lsrs	r3, r3, #13
   260ac:	700b      	strb	r3, [r1, #0]
}
   260ae:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   260b0:	4805      	ldr	r0, [pc, #20]	; (260c8 <nrfx_gpiote_channel_get+0x4c>)
   260b2:	e7fc      	b.n	260ae <nrfx_gpiote_channel_get+0x32>
   260b4:	0004084f 	.word	0x0004084f
   260b8:	00039995 	.word	0x00039995
   260bc:	00040811 	.word	0x00040811
   260c0:	2000c9fc 	.word	0x2000c9fc
   260c4:	0bad0000 	.word	0x0bad0000
   260c8:	0bad0004 	.word	0x0bad0004

000260cc <nrfx_gpiote_init>:
{
   260cc:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   260ce:	4c0f      	ldr	r4, [pc, #60]	; (2610c <nrfx_gpiote_init+0x40>)
   260d0:	f894 5060 	ldrb.w	r5, [r4, #96]	; 0x60
   260d4:	b9c5      	cbnz	r5, 26108 <nrfx_gpiote_init+0x3c>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   260d6:	2240      	movs	r2, #64	; 0x40
   260d8:	4629      	mov	r1, r5
   260da:	f104 0018 	add.w	r0, r4, #24
   260de:	f010 fa43 	bl	36568 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   260e2:	2031      	movs	r0, #49	; 0x31
   260e4:	f7ec fa2c 	bl	12540 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   260e8:	4b09      	ldr	r3, [pc, #36]	; (26110 <nrfx_gpiote_init+0x44>)
    return err_code;
   260ea:	480a      	ldr	r0, [pc, #40]	; (26114 <nrfx_gpiote_init+0x48>)
   260ec:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   260f0:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   260f4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   260f8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   260fc:	2301      	movs	r3, #1
   260fe:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   26102:	2303      	movs	r3, #3
   26104:	65e3      	str	r3, [r4, #92]	; 0x5c
}
   26106:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   26108:	4803      	ldr	r0, [pc, #12]	; (26118 <nrfx_gpiote_init+0x4c>)
   2610a:	e7fc      	b.n	26106 <nrfx_gpiote_init+0x3a>
   2610c:	2000c9fc 	.word	0x2000c9fc
   26110:	40031000 	.word	0x40031000
   26114:	0bad0000 	.word	0x0bad0000
   26118:	0bad0005 	.word	0x0bad0005

0002611c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   2611c:	4b03      	ldr	r3, [pc, #12]	; (2612c <nrfx_gpiote_is_init+0x10>)
   2611e:	f893 0060 	ldrb.w	r0, [r3, #96]	; 0x60
}
   26122:	3800      	subs	r0, #0
   26124:	bf18      	it	ne
   26126:	2001      	movne	r0, #1
   26128:	4770      	bx	lr
   2612a:	bf00      	nop
   2612c:	2000c9fc 	.word	0x2000c9fc

00026130 <nrfx_gpiote_channel_free>:
{
   26130:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   26132:	4801      	ldr	r0, [pc, #4]	; (26138 <nrfx_gpiote_channel_free+0x8>)
   26134:	f7ff bc00 	b.w	25938 <nrfx_flag32_free>
   26138:	2000ca54 	.word	0x2000ca54

0002613c <nrfx_gpiote_channel_alloc>:
{
   2613c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   2613e:	4801      	ldr	r0, [pc, #4]	; (26144 <nrfx_gpiote_channel_alloc+0x8>)
   26140:	f7ff bbde 	b.w	25900 <nrfx_flag32_alloc>
   26144:	2000ca54 	.word	0x2000ca54

00026148 <nrfx_gpiote_trigger_enable>:
{
   26148:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2614a:	4604      	mov	r4, r0
    NRFX_ASSERT(pin_has_trigger(pin));
   2614c:	f7ff fdaa 	bl	25ca4 <pin_has_trigger>
   26150:	b958      	cbnz	r0, 2616a <nrfx_gpiote_trigger_enable+0x22>
   26152:	492b      	ldr	r1, [pc, #172]	; (26200 <nrfx_gpiote_trigger_enable+0xb8>)
   26154:	f240 33df 	movw	r3, #991	; 0x3df
   26158:	4a2a      	ldr	r2, [pc, #168]	; (26204 <nrfx_gpiote_trigger_enable+0xbc>)
   2615a:	482b      	ldr	r0, [pc, #172]	; (26208 <nrfx_gpiote_trigger_enable+0xc0>)
   2615c:	f009 f932 	bl	2f3c4 <assert_print>
   26160:	f240 31df 	movw	r1, #991	; 0x3df
        NRFX_ASSERT(int_enable);
   26164:	4827      	ldr	r0, [pc, #156]	; (26204 <nrfx_gpiote_trigger_enable+0xbc>)
   26166:	f009 f926 	bl	2f3b6 <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   2616a:	4620      	mov	r0, r4
   2616c:	f7ff fd90 	bl	25c90 <pin_in_use_by_te>
   26170:	4a26      	ldr	r2, [pc, #152]	; (2620c <nrfx_gpiote_trigger_enable+0xc4>)
   26172:	f104 050c 	add.w	r5, r4, #12
   26176:	b1e0      	cbz	r0, 261b2 <nrfx_gpiote_trigger_enable+0x6a>
    return !pin_is_output(pin);
   26178:	4620      	mov	r0, r4
   2617a:	f7ff fd9f 	bl	25cbc <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   2617e:	b9c0      	cbnz	r0, 261b2 <nrfx_gpiote_trigger_enable+0x6a>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   26180:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
    return ((uint32_t)p_reg + event);
   26184:	4c22      	ldr	r4, [pc, #136]	; (26210 <nrfx_gpiote_trigger_enable+0xc8>)
   26186:	0b52      	lsrs	r2, r2, #13
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   26188:	0093      	lsls	r3, r2, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2618a:	50e0      	str	r0, [r4, r3]
   2618c:	58e0      	ldr	r0, [r4, r3]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   2618e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   26192:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   26196:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
   2619a:	f040 0001 	orr.w	r0, r0, #1
   2619e:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
        if (int_enable)
   261a2:	b121      	cbz	r1, 261ae <nrfx_gpiote_trigger_enable+0x66>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   261a4:	2301      	movs	r3, #1
   261a6:	4093      	lsls	r3, r2
    p_reg->INTENSET = mask;
   261a8:	4a1a      	ldr	r2, [pc, #104]	; (26214 <nrfx_gpiote_trigger_enable+0xcc>)
   261aa:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   261ae:	b003      	add	sp, #12
   261b0:	bd30      	pop	{r4, r5, pc}
        NRFX_ASSERT(int_enable);
   261b2:	b949      	cbnz	r1, 261c8 <nrfx_gpiote_trigger_enable+0x80>
   261b4:	4918      	ldr	r1, [pc, #96]	; (26218 <nrfx_gpiote_trigger_enable+0xd0>)
   261b6:	f240 33ee 	movw	r3, #1006	; 0x3ee
   261ba:	4a12      	ldr	r2, [pc, #72]	; (26204 <nrfx_gpiote_trigger_enable+0xbc>)
   261bc:	4812      	ldr	r0, [pc, #72]	; (26208 <nrfx_gpiote_trigger_enable+0xc0>)
   261be:	f009 f901 	bl	2f3c4 <assert_print>
   261c2:	f240 31ee 	movw	r1, #1006	; 0x3ee
   261c6:	e7cd      	b.n	26164 <nrfx_gpiote_trigger_enable+0x1c>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   261c8:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
   261cc:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   261d0:	2b04      	cmp	r3, #4
   261d2:	d011      	beq.n	261f8 <nrfx_gpiote_trigger_enable+0xb0>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   261d4:	2b05      	cmp	r3, #5
   261d6:	d011      	beq.n	261fc <nrfx_gpiote_trigger_enable+0xb4>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   261d8:	a801      	add	r0, sp, #4
   261da:	9401      	str	r4, [sp, #4]
   261dc:	f7ff fdf2 	bl	25dc4 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   261e0:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   261e2:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   261e4:	40d9      	lsrs	r1, r3
   261e6:	f001 0101 	and.w	r1, r1, #1
   261ea:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   261ec:	4620      	mov	r0, r4
}
   261ee:	b003      	add	sp, #12
   261f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   261f4:	f00f b870 	b.w	352d8 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   261f8:	2103      	movs	r1, #3
   261fa:	e7f7      	b.n	261ec <nrfx_gpiote_trigger_enable+0xa4>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   261fc:	2102      	movs	r1, #2
   261fe:	e7f5      	b.n	261ec <nrfx_gpiote_trigger_enable+0xa4>
   26200:	000408a6 	.word	0x000408a6
   26204:	00040811 	.word	0x00040811
   26208:	00039995 	.word	0x00039995
   2620c:	2000c9fc 	.word	0x2000c9fc
   26210:	40031100 	.word	0x40031100
   26214:	40031000 	.word	0x40031000
   26218:	000408bb 	.word	0x000408bb

0002621c <nrfx_gpiote_trigger_disable>:
{
   2621c:	b508      	push	{r3, lr}
   2621e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   26220:	f7ff fd36 	bl	25c90 <pin_in_use_by_te>
   26224:	b1c8      	cbz	r0, 2625a <nrfx_gpiote_trigger_disable+0x3e>
    return !pin_is_output(pin);
   26226:	4610      	mov	r0, r2
   26228:	f7ff fd48 	bl	25cbc <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   2622c:	b9a8      	cbnz	r0, 2625a <nrfx_gpiote_trigger_disable+0x3e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2622e:	4b0e      	ldr	r3, [pc, #56]	; (26268 <nrfx_gpiote_trigger_disable+0x4c>)
   26230:	320c      	adds	r2, #12
   26232:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   26236:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   26238:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   2623a:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   2623c:	490b      	ldr	r1, [pc, #44]	; (2626c <nrfx_gpiote_trigger_disable+0x50>)
   2623e:	009b      	lsls	r3, r3, #2
   26240:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   26244:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   26248:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   2624c:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   26250:	f022 0203 	bic.w	r2, r2, #3
   26254:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   26258:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   2625a:	2100      	movs	r1, #0
}
   2625c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   26260:	4610      	mov	r0, r2
   26262:	f00f b839 	b.w	352d8 <nrf_gpio_cfg_sense_set>
   26266:	bf00      	nop
   26268:	2000c9fc 	.word	0x2000c9fc
   2626c:	40031000 	.word	0x40031000

00026270 <nrfx_gpiote_pin_uninit>:
{
   26270:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   26272:	4b0d      	ldr	r3, [pc, #52]	; (262a8 <nrfx_gpiote_pin_uninit+0x38>)
   26274:	f100 020c 	add.w	r2, r0, #12
   26278:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
   2627c:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   2627e:	07db      	lsls	r3, r3, #31
   26280:	d510      	bpl.n	262a4 <nrfx_gpiote_pin_uninit+0x34>
    nrfx_gpiote_trigger_disable(pin);
   26282:	f7ff ffcb 	bl	2621c <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   26286:	4620      	mov	r0, r4
   26288:	f7ff fd7e 	bl	25d88 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2628c:	a801      	add	r0, sp, #4
   2628e:	9401      	str	r4, [sp, #4]
   26290:	f7ff fd98 	bl	25dc4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   26294:	2202      	movs	r2, #2
   26296:	9b01      	ldr	r3, [sp, #4]
   26298:	3380      	adds	r3, #128	; 0x80
   2629a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   2629e:	4803      	ldr	r0, [pc, #12]	; (262ac <nrfx_gpiote_pin_uninit+0x3c>)
}
   262a0:	b002      	add	sp, #8
   262a2:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   262a4:	4802      	ldr	r0, [pc, #8]	; (262b0 <nrfx_gpiote_pin_uninit+0x40>)
   262a6:	e7fb      	b.n	262a0 <nrfx_gpiote_pin_uninit+0x30>
   262a8:	2000c9fc 	.word	0x2000c9fc
   262ac:	0bad0000 	.word	0x0bad0000
   262b0:	0bad0004 	.word	0x0bad0004

000262b4 <nrfx_gpiote_in_is_set>:
{
   262b4:	b507      	push	{r0, r1, r2, lr}
   262b6:	4602      	mov	r2, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(pin));
   262b8:	f00e ffaa 	bl	35210 <nrf_gpio_pin_present_check>
   262bc:	b958      	cbnz	r0, 262d6 <nrfx_gpiote_in_is_set+0x22>
   262be:	490c      	ldr	r1, [pc, #48]	; (262f0 <nrfx_gpiote_in_is_set+0x3c>)
   262c0:	480c      	ldr	r0, [pc, #48]	; (262f4 <nrfx_gpiote_in_is_set+0x40>)
   262c2:	f240 4326 	movw	r3, #1062	; 0x426
   262c6:	4a0c      	ldr	r2, [pc, #48]	; (262f8 <nrfx_gpiote_in_is_set+0x44>)
   262c8:	f009 f87c 	bl	2f3c4 <assert_print>
   262cc:	f240 4126 	movw	r1, #1062	; 0x426
   262d0:	4809      	ldr	r0, [pc, #36]	; (262f8 <nrfx_gpiote_in_is_set+0x44>)
   262d2:	f009 f870 	bl	2f3b6 <assert_post_action>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   262d6:	a801      	add	r0, sp, #4
   262d8:	9201      	str	r2, [sp, #4]
   262da:	f7ff fd73 	bl	25dc4 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   262de:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   262e0:	6900      	ldr	r0, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   262e2:	40d8      	lsrs	r0, r3
}
   262e4:	f000 0001 	and.w	r0, r0, #1
   262e8:	b003      	add	sp, #12
   262ea:	f85d fb04 	ldr.w	pc, [sp], #4
   262ee:	bf00      	nop
   262f0:	00040859 	.word	0x00040859
   262f4:	00039995 	.word	0x00039995
   262f8:	00040811 	.word	0x00040811

000262fc <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   262fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
   26300:	2500      	movs	r5, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   26302:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   26304:	462c      	mov	r4, r5
{
   26306:	4b56      	ldr	r3, [pc, #344]	; (26460 <nrfx_gpiote_irq_handler+0x164>)
    return p_reg->INTENSET & mask;
   26308:	4856      	ldr	r0, [pc, #344]	; (26464 <nrfx_gpiote_irq_handler+0x168>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   2630a:	4957      	ldr	r1, [pc, #348]	; (26468 <nrfx_gpiote_irq_handler+0x16c>)
{
   2630c:	b085      	sub	sp, #20
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2630e:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   26310:	b136      	cbz	r6, 26320 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   26312:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
   26316:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   26318:	bf1e      	ittt	ne
   2631a:	601c      	strne	r4, [r3, #0]
   2631c:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   2631e:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   26320:	3304      	adds	r3, #4
   26322:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   26324:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   26328:	d1f1      	bne.n	2630e <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2632a:	f8df 8138 	ldr.w	r8, [pc, #312]	; 26464 <nrfx_gpiote_irq_handler+0x168>
   2632e:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   26332:	b183      	cbz	r3, 26356 <nrfx_gpiote_irq_handler+0x5a>
        *p_masks = gpio_regs[i]->LATCH;
   26334:	4f4d      	ldr	r7, [pc, #308]	; (2646c <nrfx_gpiote_irq_handler+0x170>)
   26336:	6a3b      	ldr	r3, [r7, #32]
   26338:	9302      	str	r3, [sp, #8]
        gpio_regs[i]->LATCH = *p_masks;
   2633a:	623b      	str	r3, [r7, #32]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   2633c:	f04f 0901 	mov.w	r9, #1
            while (latch[i])
   26340:	9c02      	ldr	r4, [sp, #8]
   26342:	b974      	cbnz	r4, 26362 <nrfx_gpiote_irq_handler+0x66>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   26344:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
   26348:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   2634c:	6a3b      	ldr	r3, [r7, #32]
   2634e:	9302      	str	r3, [sp, #8]
        gpio_regs[i]->LATCH = *p_masks;
   26350:	623b      	str	r3, [r7, #32]
        if (latch[port_idx])
   26352:	2b00      	cmp	r3, #0
   26354:	d1f2      	bne.n	2633c <nrfx_gpiote_irq_handler+0x40>
        mask &= ~NRFX_BIT(ch);
   26356:	2401      	movs	r4, #1
    while (mask)
   26358:	2d00      	cmp	r5, #0
   2635a:	d168      	bne.n	2642e <nrfx_gpiote_irq_handler+0x132>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   2635c:	b005      	add	sp, #20
   2635e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
   26362:	fa94 f4a4 	rbit	r4, r4
   26366:	fab4 f484 	clz	r4, r4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   2636a:	4a41      	ldr	r2, [pc, #260]	; (26470 <nrfx_gpiote_irq_handler+0x174>)
   2636c:	f104 030c 	add.w	r3, r4, #12
   26370:	f832 6013 	ldrh.w	r6, [r2, r3, lsl #1]
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   26374:	08e0      	lsrs	r0, r4, #3
    p_mask8[byte_idx] &= ~(1 << bit);
   26376:	ab02      	add	r3, sp, #8
   26378:	5c1b      	ldrb	r3, [r3, r0]
    bit = BITMASK_RELBIT_GET(bit);
   2637a:	f004 0107 	and.w	r1, r4, #7
   2637e:	08b2      	lsrs	r2, r6, #2
    p_mask8[byte_idx] &= ~(1 << bit);
   26380:	fa09 f101 	lsl.w	r1, r9, r1
   26384:	ea23 0301 	bic.w	r3, r3, r1
   26388:	9201      	str	r2, [sp, #4]
   2638a:	aa02      	add	r2, sp, #8
   2638c:	5413      	strb	r3, [r2, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2638e:	a803      	add	r0, sp, #12
   26390:	9403      	str	r4, [sp, #12]
   26392:	f7ff fd17 	bl	25dc4 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   26396:	9b03      	ldr	r3, [sp, #12]
    if (is_level(trigger))
   26398:	9a01      	ldr	r2, [sp, #4]
   2639a:	3380      	adds	r3, #128	; 0x80
   2639c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   263a0:	f3c6 0b82 	ubfx	fp, r6, #2, #3
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   263a4:	f3c3 4a01 	ubfx	sl, r3, #16, #2
    if (is_level(trigger))
   263a8:	0753      	lsls	r3, r2, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   263aa:	465e      	mov	r6, fp
    if (is_level(trigger))
   263ac:	d522      	bpl.n	263f4 <nrfx_gpiote_irq_handler+0xf8>
        call_handler(pin, trigger);
   263ae:	4659      	mov	r1, fp
   263b0:	4620      	mov	r0, r4
   263b2:	f7ff fc8d 	bl	25cd0 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   263b6:	a803      	add	r0, sp, #12
   263b8:	9403      	str	r4, [sp, #12]
   263ba:	f7ff fd03 	bl	25dc4 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   263be:	9b03      	ldr	r3, [sp, #12]
   263c0:	fa5f fa8a 	uxtb.w	sl, sl
   263c4:	3380      	adds	r3, #128	; 0x80
   263c6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   263ca:	f3c3 4301 	ubfx	r3, r3, #16, #2
   263ce:	459a      	cmp	sl, r3
   263d0:	d107      	bne.n	263e2 <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   263d2:	2100      	movs	r1, #0
   263d4:	4620      	mov	r0, r4
   263d6:	f00e ff7f 	bl	352d8 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   263da:	4651      	mov	r1, sl
   263dc:	4620      	mov	r0, r4
   263de:	f00e ff7b 	bl	352d8 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   263e2:	a803      	add	r0, sp, #12
   263e4:	9403      	str	r4, [sp, #12]
   263e6:	f7ff fced 	bl	25dc4 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   263ea:	9b03      	ldr	r3, [sp, #12]
   263ec:	fa09 f303 	lsl.w	r3, r9, r3
   263f0:	6203      	str	r3, [r0, #32]
   263f2:	e7a5      	b.n	26340 <nrfx_gpiote_irq_handler+0x44>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   263f4:	f1ba 0f02 	cmp.w	sl, #2
   263f8:	d10c      	bne.n	26414 <nrfx_gpiote_irq_handler+0x118>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   263fa:	2103      	movs	r1, #3
   263fc:	4620      	mov	r0, r4
   263fe:	f00e ff6b 	bl	352d8 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   26402:	f00b 0305 	and.w	r3, fp, #5
   26406:	2b01      	cmp	r3, #1
   26408:	d1eb      	bne.n	263e2 <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
   2640a:	4631      	mov	r1, r6
   2640c:	4620      	mov	r0, r4
   2640e:	f7ff fc5f 	bl	25cd0 <call_handler>
   26412:	e7e6      	b.n	263e2 <nrfx_gpiote_irq_handler+0xe6>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   26414:	2102      	movs	r1, #2
   26416:	4620      	mov	r0, r4
   26418:	f00e ff5e 	bl	352d8 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   2641c:	f1bb 0f03 	cmp.w	fp, #3
   26420:	d0f3      	beq.n	2640a <nrfx_gpiote_irq_handler+0x10e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   26422:	f1ba 0f03 	cmp.w	sl, #3
   26426:	d1dc      	bne.n	263e2 <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   26428:	f1bb 0f02 	cmp.w	fp, #2
   2642c:	e7ec      	b.n	26408 <nrfx_gpiote_irq_handler+0x10c>
        uint32_t ch = NRF_CTZ(mask);
   2642e:	fa95 f3a5 	rbit	r3, r5
   26432:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   26436:	fa04 f203 	lsl.w	r2, r4, r3
   2643a:	009b      	lsls	r3, r3, #2
   2643c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   26440:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   26444:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   26448:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   2644c:	f3c0 2004 	ubfx	r0, r0, #8, #5
   26450:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
   26454:	ea25 0502 	bic.w	r5, r5, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   26458:	f7ff fc3a 	bl	25cd0 <call_handler>
   2645c:	e77c      	b.n	26358 <nrfx_gpiote_irq_handler+0x5c>
   2645e:	bf00      	nop
   26460:	40031100 	.word	0x40031100
   26464:	40031000 	.word	0x40031000
   26468:	40031120 	.word	0x40031120
   2646c:	40842500 	.word	0x40842500
   26470:	2000c9fc 	.word	0x2000c9fc

00026474 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   26474:	b570      	push	{r4, r5, r6, lr}
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   26476:	4c08      	ldr	r4, [pc, #32]	; (26498 <nrfx_ipc_init+0x24>)
{
   26478:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   2647a:	7923      	ldrb	r3, [r4, #4]
{
   2647c:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   2647e:	b943      	cbnz	r3, 26492 <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   26480:	202a      	movs	r0, #42	; 0x2a
   26482:	f7ec f85d 	bl	12540 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   26486:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   26488:	4804      	ldr	r0, [pc, #16]	; (2649c <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   2648a:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   2648c:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
   2648e:	60a5      	str	r5, [r4, #8]
}
   26490:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   26492:	4803      	ldr	r0, [pc, #12]	; (264a0 <nrfx_ipc_init+0x2c>)
   26494:	e7fc      	b.n	26490 <nrfx_ipc_init+0x1c>
   26496:	bf00      	nop
   26498:	2000eb18 	.word	0x2000eb18
   2649c:	0bad0000 	.word	0x0bad0000
   264a0:	0bad000c 	.word	0x0bad000c

000264a4 <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
   264a4:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
   264a6:	b948      	cbnz	r0, 264bc <nrfx_ipc_config_load+0x18>
   264a8:	4918      	ldr	r1, [pc, #96]	; (2650c <nrfx_ipc_config_load+0x68>)
   264aa:	2345      	movs	r3, #69	; 0x45
   264ac:	4a18      	ldr	r2, [pc, #96]	; (26510 <nrfx_ipc_config_load+0x6c>)
   264ae:	4819      	ldr	r0, [pc, #100]	; (26514 <nrfx_ipc_config_load+0x70>)
   264b0:	f008 ff88 	bl	2f3c4 <assert_print>
   264b4:	2145      	movs	r1, #69	; 0x45
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   264b6:	4816      	ldr	r0, [pc, #88]	; (26510 <nrfx_ipc_config_load+0x6c>)
   264b8:	f008 ff7d 	bl	2f3b6 <assert_post_action>
   264bc:	4b16      	ldr	r3, [pc, #88]	; (26518 <nrfx_ipc_config_load+0x74>)
   264be:	791b      	ldrb	r3, [r3, #4]
   264c0:	2b01      	cmp	r3, #1
   264c2:	d007      	beq.n	264d4 <nrfx_ipc_config_load+0x30>
   264c4:	4915      	ldr	r1, [pc, #84]	; (2651c <nrfx_ipc_config_load+0x78>)
   264c6:	2346      	movs	r3, #70	; 0x46
   264c8:	4a11      	ldr	r2, [pc, #68]	; (26510 <nrfx_ipc_config_load+0x6c>)
   264ca:	4812      	ldr	r0, [pc, #72]	; (26514 <nrfx_ipc_config_load+0x70>)
   264cc:	f008 ff7a 	bl	2f3c4 <assert_print>
   264d0:	2146      	movs	r1, #70	; 0x46
   264d2:	e7f0      	b.n	264b6 <nrfx_ipc_config_load+0x12>

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   264d4:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
   264d6:	4a12      	ldr	r2, [pc, #72]	; (26520 <nrfx_ipc_config_load+0x7c>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   264d8:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   264dc:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   264e0:	3301      	adds	r3, #1
   264e2:	2b08      	cmp	r3, #8
   264e4:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   264e8:	d1f6      	bne.n	264d8 <nrfx_ipc_config_load+0x34>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   264ea:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
   264ec:	4a0c      	ldr	r2, [pc, #48]	; (26520 <nrfx_ipc_config_load+0x7c>)
   264ee:	f100 011c 	add.w	r1, r0, #28
   264f2:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   264f6:	f851 5f04 	ldr.w	r5, [r1, #4]!
    for (i = 0; i < IPC_CONF_NUM; ++i)
   264fa:	3301      	adds	r3, #1
   264fc:	2b08      	cmp	r3, #8
   264fe:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   26502:	d1f6      	bne.n	264f2 <nrfx_ipc_config_load+0x4e>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   26504:	6c03      	ldr	r3, [r0, #64]	; 0x40
    p_reg->INTENSET = mask;
   26506:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   2650a:	bd38      	pop	{r3, r4, r5, pc}
   2650c:	0004090d 	.word	0x0004090d
   26510:	000408d2 	.word	0x000408d2
   26514:	00039995 	.word	0x00039995
   26518:	2000eb18 	.word	0x2000eb18
   2651c:	00040916 	.word	0x00040916
   26520:	4002a000 	.word	0x4002a000

00026524 <nrfx_ipc_uninit>:

void nrfx_ipc_uninit(void)
{
   26524:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   26526:	491b      	ldr	r1, [pc, #108]	; (26594 <nrfx_ipc_uninit+0x70>)
   26528:	790b      	ldrb	r3, [r1, #4]
   2652a:	2b01      	cmp	r3, #1
   2652c:	d009      	beq.n	26542 <nrfx_ipc_uninit+0x1e>
   2652e:	491a      	ldr	r1, [pc, #104]	; (26598 <nrfx_ipc_uninit+0x74>)
   26530:	481a      	ldr	r0, [pc, #104]	; (2659c <nrfx_ipc_uninit+0x78>)
   26532:	2358      	movs	r3, #88	; 0x58
   26534:	4a1a      	ldr	r2, [pc, #104]	; (265a0 <nrfx_ipc_uninit+0x7c>)
   26536:	f008 ff45 	bl	2f3c4 <assert_print>
   2653a:	2158      	movs	r1, #88	; 0x58
   2653c:	4818      	ldr	r0, [pc, #96]	; (265a0 <nrfx_ipc_uninit+0x7c>)
   2653e:	f008 ff3a 	bl	2f3b6 <assert_post_action>
    p_reg->SEND_CNF[index] = channels_mask;
   26542:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
   26544:	f04f 30ff 	mov.w	r0, #4294967295
    p_reg->SEND_CNF[index] = channels_mask;
   26548:	4a16      	ldr	r2, [pc, #88]	; (265a4 <nrfx_ipc_uninit+0x80>)
   2654a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   2654e:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
   26552:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
   26556:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
   2655a:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
   2655e:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
   26562:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
   26566:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
    p_reg->RECEIVE_CNF[index] = channels_mask;
   2656a:	f8c2 3590 	str.w	r3, [r2, #1424]	; 0x590
   2656e:	f8c2 3594 	str.w	r3, [r2, #1428]	; 0x594
   26572:	f8c2 3598 	str.w	r3, [r2, #1432]	; 0x598
   26576:	f8c2 359c 	str.w	r3, [r2, #1436]	; 0x59c
   2657a:	f8c2 35a0 	str.w	r3, [r2, #1440]	; 0x5a0
   2657e:	f8c2 35a4 	str.w	r3, [r2, #1444]	; 0x5a4
   26582:	f8c2 35a8 	str.w	r3, [r2, #1448]	; 0x5a8
   26586:	f8c2 35ac 	str.w	r3, [r2, #1452]	; 0x5ac
    p_reg->INTENCLR = mask;
   2658a:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, 0);
    }

    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
   2658e:	710b      	strb	r3, [r1, #4]
}
   26590:	bd08      	pop	{r3, pc}
   26592:	bf00      	nop
   26594:	2000eb18 	.word	0x2000eb18
   26598:	00040916 	.word	0x00040916
   2659c:	00039995 	.word	0x00039995
   265a0:	000408d2 	.word	0x000408d2
   265a4:	4002a000 	.word	0x4002a000

000265a8 <nrfx_ipc_receive_event_enable>:

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
   265a8:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   265aa:	4b09      	ldr	r3, [pc, #36]	; (265d0 <nrfx_ipc_receive_event_enable+0x28>)
   265ac:	791b      	ldrb	r3, [r3, #4]
   265ae:	2b01      	cmp	r3, #1
   265b0:	d009      	beq.n	265c6 <nrfx_ipc_receive_event_enable+0x1e>
   265b2:	4908      	ldr	r1, [pc, #32]	; (265d4 <nrfx_ipc_receive_event_enable+0x2c>)
   265b4:	4808      	ldr	r0, [pc, #32]	; (265d8 <nrfx_ipc_receive_event_enable+0x30>)
   265b6:	236b      	movs	r3, #107	; 0x6b
   265b8:	4a08      	ldr	r2, [pc, #32]	; (265dc <nrfx_ipc_receive_event_enable+0x34>)
   265ba:	f008 ff03 	bl	2f3c4 <assert_print>
   265be:	216b      	movs	r1, #107	; 0x6b
   265c0:	4806      	ldr	r0, [pc, #24]	; (265dc <nrfx_ipc_receive_event_enable+0x34>)
   265c2:	f008 fef8 	bl	2f3b6 <assert_post_action>
    p_reg->INTENSET = mask;
   265c6:	4a06      	ldr	r2, [pc, #24]	; (265e0 <nrfx_ipc_receive_event_enable+0x38>)
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   265c8:	4083      	lsls	r3, r0
   265ca:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   265ce:	bd08      	pop	{r3, pc}
   265d0:	2000eb18 	.word	0x2000eb18
   265d4:	00040916 	.word	0x00040916
   265d8:	00039995 	.word	0x00039995
   265dc:	000408d2 	.word	0x000408d2
   265e0:	4002a000 	.word	0x4002a000

000265e4 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
   265e4:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   265e6:	4b09      	ldr	r3, [pc, #36]	; (2660c <nrfx_ipc_receive_event_disable+0x28>)
   265e8:	791b      	ldrb	r3, [r3, #4]
   265ea:	2b01      	cmp	r3, #1
   265ec:	d009      	beq.n	26602 <nrfx_ipc_receive_event_disable+0x1e>
   265ee:	4908      	ldr	r1, [pc, #32]	; (26610 <nrfx_ipc_receive_event_disable+0x2c>)
   265f0:	4808      	ldr	r0, [pc, #32]	; (26614 <nrfx_ipc_receive_event_disable+0x30>)
   265f2:	2371      	movs	r3, #113	; 0x71
   265f4:	4a08      	ldr	r2, [pc, #32]	; (26618 <nrfx_ipc_receive_event_disable+0x34>)
   265f6:	f008 fee5 	bl	2f3c4 <assert_print>
   265fa:	2171      	movs	r1, #113	; 0x71
   265fc:	4806      	ldr	r0, [pc, #24]	; (26618 <nrfx_ipc_receive_event_disable+0x34>)
   265fe:	f008 feda 	bl	2f3b6 <assert_post_action>
    p_reg->INTENCLR = mask;
   26602:	4a06      	ldr	r2, [pc, #24]	; (2661c <nrfx_ipc_receive_event_disable+0x38>)
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   26604:	4083      	lsls	r3, r0
   26606:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   2660a:	bd08      	pop	{r3, pc}
   2660c:	2000eb18 	.word	0x2000eb18
   26610:	00040916 	.word	0x00040916
   26614:	00039995 	.word	0x00039995
   26618:	000408d2 	.word	0x000408d2
   2661c:	4002a000 	.word	0x4002a000

00026620 <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   26620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t bitmask = events_map;

    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
   26622:	2601      	movs	r6, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26624:	2700      	movs	r7, #0
    return p_reg->INTPEND;
   26626:	4b12      	ldr	r3, [pc, #72]	; (26670 <nrfx_ipc_irq_handler+0x50>)
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
#if NRFX_CHECK(NRFX_CONFIG_API_VER_2_10)
        if (m_ipc_cb.handler)
   26628:	4d12      	ldr	r5, [pc, #72]	; (26674 <nrfx_ipc_irq_handler+0x54>)
   2662a:	f8d3 430c 	ldr.w	r4, [r3, #780]	; 0x30c
    while (bitmask)
   2662e:	b904      	cbnz	r4, 26632 <nrfx_ipc_irq_handler+0x12>
    if (m_ipc_cb.handler)
    {
        m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
#endif
    }
}
   26630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t event_idx = NRF_CTZ(bitmask);
   26632:	fa94 f0a4 	rbit	r0, r4
   26636:	fab0 f080 	clz	r0, r0
        bitmask &= ~(1UL << event_idx);
   2663a:	fa06 f300 	lsl.w	r3, r6, r0
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
   2663e:	2807      	cmp	r0, #7
   26640:	ea24 0403 	bic.w	r4, r4, r3
   26644:	dd0b      	ble.n	2665e <nrfx_ipc_irq_handler+0x3e>
   26646:	490c      	ldr	r1, [pc, #48]	; (26678 <nrfx_ipc_irq_handler+0x58>)
   26648:	480c      	ldr	r0, [pc, #48]	; (2667c <nrfx_ipc_irq_handler+0x5c>)
   2664a:	f240 13e7 	movw	r3, #487	; 0x1e7
   2664e:	4a0c      	ldr	r2, [pc, #48]	; (26680 <nrfx_ipc_irq_handler+0x60>)
   26650:	f008 feb8 	bl	2f3c4 <assert_print>
   26654:	f240 11e7 	movw	r1, #487	; 0x1e7
   26658:	4809      	ldr	r0, [pc, #36]	; (26680 <nrfx_ipc_irq_handler+0x60>)
   2665a:	f008 feac 	bl	2f3b6 <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2665e:	4b09      	ldr	r3, [pc, #36]	; (26684 <nrfx_ipc_irq_handler+0x64>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   26660:	0082      	lsls	r2, r0, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26662:	509f      	str	r7, [r3, r2]
        if (m_ipc_cb.handler)
   26664:	682b      	ldr	r3, [r5, #0]
   26666:	2b00      	cmp	r3, #0
   26668:	d0e1      	beq.n	2662e <nrfx_ipc_irq_handler+0xe>
            m_ipc_cb.handler(event_idx, m_ipc_cb.p_context);
   2666a:	68a9      	ldr	r1, [r5, #8]
   2666c:	4798      	blx	r3
   2666e:	e7de      	b.n	2662e <nrfx_ipc_irq_handler+0xe>
   26670:	4002a000 	.word	0x4002a000
   26674:	2000eb18 	.word	0x2000eb18
   26678:	0003e58a 	.word	0x0003e58a
   2667c:	00039995 	.word	0x00039995
   26680:	00040943 	.word	0x00040943
   26684:	4002a100 	.word	0x4002a100

00026688 <nvmc_word_write>:
}

#if defined(NVMC_READYNEXT_READYNEXT_Msk)
NRF_STATIC_INLINE bool nrf_nvmc_write_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READYNEXT & NVMC_READYNEXT_READYNEXT_Msk);
   26688:	4a04      	ldr	r2, [pc, #16]	; (2669c <nvmc_word_write+0x14>)
   2668a:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
}

static void nvmc_word_write(uint32_t addr, uint32_t value)
{
#if defined(NRF91_SERIES)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
   2668e:	07db      	lsls	r3, r3, #31
   26690:	d5fb      	bpl.n	2668a <nvmc_word_write+0x2>
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
#endif

    *(volatile uint32_t *)addr = value;
   26692:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   26694:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   26698:	4770      	bx	lr
   2669a:	bf00      	nop
   2669c:	40039000 	.word	0x40039000

000266a0 <nrfx_nvmc_page_erase>:
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   266a0:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
   266a4:	b508      	push	{r3, lr}
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   266a6:	d30b      	bcc.n	266c0 <nrfx_nvmc_page_erase+0x20>
    NRFX_ASSERT(is_valid_address(addr, false));
   266a8:	4910      	ldr	r1, [pc, #64]	; (266ec <nrfx_nvmc_page_erase+0x4c>)
   266aa:	4811      	ldr	r0, [pc, #68]	; (266f0 <nrfx_nvmc_page_erase+0x50>)
   266ac:	f240 1307 	movw	r3, #263	; 0x107
   266b0:	4a10      	ldr	r2, [pc, #64]	; (266f4 <nrfx_nvmc_page_erase+0x54>)
   266b2:	f008 fe87 	bl	2f3c4 <assert_print>
   266b6:	f240 1107 	movw	r1, #263	; 0x107
   266ba:	480e      	ldr	r0, [pc, #56]	; (266f4 <nrfx_nvmc_page_erase+0x54>)
   266bc:	f008 fe7b 	bl	2f3b6 <assert_post_action>
    return !(addr % flash_page_size_get());
   266c0:	f3c0 030b 	ubfx	r3, r0, #0, #12

    if (!is_page_aligned_check(addr))
   266c4:	b97b      	cbnz	r3, 266e6 <nrfx_nvmc_page_erase+0x46>

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
   266c6:	2202      	movs	r2, #2
   266c8:	4b0b      	ldr	r3, [pc, #44]	; (266f8 <nrfx_nvmc_page_erase+0x58>)
   266ca:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF53_SERIES) || defined(NRF91_SERIES)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
   266ce:	f04f 32ff 	mov.w	r2, #4294967295
   266d2:	6002      	str	r2, [r0, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   266d4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   266d8:	07d2      	lsls	r2, r2, #31
   266da:	d5fb      	bpl.n	266d4 <nrfx_nvmc_page_erase+0x34>
    p_reg->CONFIGNS = (uint32_t)mode;
   266dc:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   266de:	4807      	ldr	r0, [pc, #28]	; (266fc <nrfx_nvmc_page_erase+0x5c>)
   266e0:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
}
   266e4:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_ADDR;
   266e6:	4806      	ldr	r0, [pc, #24]	; (26700 <nrfx_nvmc_page_erase+0x60>)
   266e8:	e7fc      	b.n	266e4 <nrfx_nvmc_page_erase+0x44>
   266ea:	bf00      	nop
   266ec:	000409d1 	.word	0x000409d1
   266f0:	00039995 	.word	0x00039995
   266f4:	00040975 	.word	0x00040975
   266f8:	40039000 	.word	0x40039000
   266fc:	0bad0000 	.word	0x0bad0000
   26700:	0bad000a 	.word	0x0bad000a

00026704 <nrfx_nvmc_word_write>:
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   26704:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   26708:	b538      	push	{r3, r4, r5, lr}
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   2670a:	d30b      	bcc.n	26724 <nrfx_nvmc_word_write+0x20>
    NRFX_ASSERT(is_valid_address(addr, true));
   2670c:	4910      	ldr	r1, [pc, #64]	; (26750 <nrfx_nvmc_word_write+0x4c>)
   2670e:	f240 1395 	movw	r3, #405	; 0x195
   26712:	4a10      	ldr	r2, [pc, #64]	; (26754 <nrfx_nvmc_word_write+0x50>)
   26714:	4810      	ldr	r0, [pc, #64]	; (26758 <nrfx_nvmc_word_write+0x54>)
   26716:	f008 fe55 	bl	2f3c4 <assert_print>
   2671a:	f240 1195 	movw	r1, #405	; 0x195
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   2671e:	480d      	ldr	r0, [pc, #52]	; (26754 <nrfx_nvmc_word_write+0x50>)
   26720:	f008 fe49 	bl	2f3b6 <assert_post_action>
   26724:	f010 0403 	ands.w	r4, r0, #3
   26728:	d009      	beq.n	2673e <nrfx_nvmc_word_write+0x3a>
   2672a:	490c      	ldr	r1, [pc, #48]	; (2675c <nrfx_nvmc_word_write+0x58>)
   2672c:	f44f 73cb 	mov.w	r3, #406	; 0x196
   26730:	4a08      	ldr	r2, [pc, #32]	; (26754 <nrfx_nvmc_word_write+0x50>)
   26732:	4809      	ldr	r0, [pc, #36]	; (26758 <nrfx_nvmc_word_write+0x54>)
   26734:	f008 fe46 	bl	2f3c4 <assert_print>
   26738:	f44f 71cb 	mov.w	r1, #406	; 0x196
   2673c:	e7ef      	b.n	2671e <nrfx_nvmc_word_write+0x1a>
   2673e:	2301      	movs	r3, #1
   26740:	4d07      	ldr	r5, [pc, #28]	; (26760 <nrfx_nvmc_word_write+0x5c>)
   26742:	f8c5 3584 	str.w	r3, [r5, #1412]	; 0x584

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   26746:	f7ff ff9f 	bl	26688 <nvmc_word_write>
   2674a:	f8c5 4584 	str.w	r4, [r5, #1412]	; 0x584

    nvmc_readonly_mode_set();
}
   2674e:	bd38      	pop	{r3, r4, r5, pc}
   26750:	000409eb 	.word	0x000409eb
   26754:	00040975 	.word	0x00040975
   26758:	00039995 	.word	0x00039995
   2675c:	00040a05 	.word	0x00040a05
   26760:	40039000 	.word	0x40039000

00026764 <nrfx_timer_init>:
static timer_control_block_t m_cb[NRFX_TIMER_ENABLED_COUNT];

nrfx_err_t nrfx_timer_init(nrfx_timer_t const *        p_instance,
                           nrfx_timer_config_t const * p_config,
                           nrfx_timer_event_handler_t  timer_event_handler)
{
   26764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26766:	4604      	mov	r4, r0
    timer_control_block_t * p_cb = &m_cb[p_instance->instance_id];
#ifdef SOFTDEVICE_PRESENT
    NRFX_ASSERT(p_instance->p_reg != NRF_TIMER0);
#endif
    NRFX_ASSERT(p_config);
   26768:	460d      	mov	r5, r1
    timer_control_block_t * p_cb = &m_cb[p_instance->instance_id];
   2676a:	7907      	ldrb	r7, [r0, #4]
    NRFX_ASSERT(p_config);
   2676c:	b949      	cbnz	r1, 26782 <nrfx_timer_init+0x1e>
   2676e:	4938      	ldr	r1, [pc, #224]	; (26850 <nrfx_timer_init+0xec>)
   26770:	2353      	movs	r3, #83	; 0x53
   26772:	4a38      	ldr	r2, [pc, #224]	; (26854 <nrfx_timer_init+0xf0>)
   26774:	4838      	ldr	r0, [pc, #224]	; (26858 <nrfx_timer_init+0xf4>)
   26776:	f008 fe25 	bl	2f3c4 <assert_print>
   2677a:	2153      	movs	r1, #83	; 0x53
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    NRFX_ASSERT(NRF_TIMER_IS_BIT_WIDTH_VALID(p_instance->p_reg, p_config->bit_width));
   2677c:	4835      	ldr	r0, [pc, #212]	; (26854 <nrfx_timer_init+0xf0>)
   2677e:	f008 fe1a 	bl	2f3b6 <assert_post_action>
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   26782:	230c      	movs	r3, #12
   26784:	4e35      	ldr	r6, [pc, #212]	; (2685c <nrfx_timer_init+0xf8>)
   26786:	fb03 6307 	mla	r3, r3, r7, r6
   2678a:	7a1b      	ldrb	r3, [r3, #8]
   2678c:	2b00      	cmp	r3, #0
   2678e:	d15d      	bne.n	2684c <nrfx_timer_init+0xe8>
    NRFX_ASSERT(NRF_TIMER_IS_BIT_WIDTH_VALID(p_instance->p_reg, p_config->bit_width));
   26790:	6803      	ldr	r3, [r0, #0]
   26792:	4933      	ldr	r1, [pc, #204]	; (26860 <nrfx_timer_init+0xfc>)
   26794:	428b      	cmp	r3, r1
   26796:	d007      	beq.n	267a8 <nrfx_timer_init+0x44>
   26798:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
   2679c:	428b      	cmp	r3, r1
   2679e:	d003      	beq.n	267a8 <nrfx_timer_init+0x44>
   267a0:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
   267a4:	428b      	cmp	r3, r1
   267a6:	d102      	bne.n	267ae <nrfx_timer_init+0x4a>
   267a8:	78ab      	ldrb	r3, [r5, #2]
   267aa:	2b03      	cmp	r3, #3
   267ac:	d907      	bls.n	267be <nrfx_timer_init+0x5a>
   267ae:	492d      	ldr	r1, [pc, #180]	; (26864 <nrfx_timer_init+0x100>)
   267b0:	2360      	movs	r3, #96	; 0x60
   267b2:	4a28      	ldr	r2, [pc, #160]	; (26854 <nrfx_timer_init+0xf0>)
   267b4:	4828      	ldr	r0, [pc, #160]	; (26858 <nrfx_timer_init+0xf4>)
   267b6:	f008 fe05 	bl	2f3c4 <assert_print>
   267ba:	2160      	movs	r1, #96	; 0x60
   267bc:	e7de      	b.n	2677c <nrfx_timer_init+0x18>

    p_cb->handler = timer_event_handler;
   267be:	230c      	movs	r3, #12
   267c0:	437b      	muls	r3, r7
   267c2:	50f2      	str	r2, [r6, r3]
    p_cb->context = p_config->p_context;

    uint8_t i;
    for (i = 0; i < p_instance->cc_channel_count; ++i)
   267c4:	2200      	movs	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   267c6:	4694      	mov	ip, r2
    p_cb->handler = timer_event_handler;
   267c8:	18f1      	adds	r1, r6, r3
    p_cb->context = p_config->p_context;
   267ca:	686b      	ldr	r3, [r5, #4]
   267cc:	604b      	str	r3, [r1, #4]
    for (i = 0; i < p_instance->cc_channel_count; ++i)
   267ce:	7961      	ldrb	r1, [r4, #5]
   267d0:	b2d3      	uxtb	r3, r2
   267d2:	4299      	cmp	r1, r3
    {
        nrf_timer_event_clear(p_instance->p_reg,
   267d4:	6820      	ldr	r0, [r4, #0]
    for (i = 0; i < p_instance->cc_channel_count; ++i)
   267d6:	d828      	bhi.n	2682a <nrfx_timer_init+0xc6>
                              nrf_timer_compare_event_get(i));
    }

    NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
        p_config->interrupt_priority);
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   267d8:	f340 3007 	sbfx	r0, r0, #12, #8
   267dc:	f7eb feb0 	bl	12540 <arch_irq_enable>

    nrf_timer_mode_set(p_instance->p_reg, p_config->mode);
   267e0:	6821      	ldr	r1, [r4, #0]

NRF_STATIC_INLINE void nrf_timer_mode_set(NRF_TIMER_Type * p_reg,
                                          nrf_timer_mode_t mode)
{
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
                    ((mode << TIMER_MODE_MODE_Pos) & TIMER_MODE_MODE_Msk);
   267e2:	786b      	ldrb	r3, [r5, #1]
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
   267e4:	f8d1 2504 	ldr.w	r2, [r1, #1284]	; 0x504
                    ((mode << TIMER_MODE_MODE_Pos) & TIMER_MODE_MODE_Msk);
   267e8:	f003 0303 	and.w	r3, r3, #3
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
   267ec:	f022 0203 	bic.w	r2, r2, #3
   267f0:	4313      	orrs	r3, r2
   267f2:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nrf_timer_bit_width_set(p_instance->p_reg, p_config->bit_width);
   267f6:	6821      	ldr	r1, [r4, #0]

NRF_STATIC_INLINE void nrf_timer_bit_width_set(NRF_TIMER_Type *      p_reg,
                                               nrf_timer_bit_width_t bit_width)
{
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
                       ((bit_width << TIMER_BITMODE_BITMODE_Pos) &
   267f8:	78ab      	ldrb	r3, [r5, #2]
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
   267fa:	f8d1 2508 	ldr.w	r2, [r1, #1288]	; 0x508
                       ((bit_width << TIMER_BITMODE_BITMODE_Pos) &
   267fe:	f003 0303 	and.w	r3, r3, #3
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
   26802:	f022 0203 	bic.w	r2, r2, #3
   26806:	4313      	orrs	r3, r2
   26808:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
    // nrf_timer_frequency_t is mapped to prescaler for 16MHz base clock frequency timers
    nrf_timer_prescaler_set(p_instance->p_reg, (uint32_t)p_config->frequency);
   2680c:	782b      	ldrb	r3, [r5, #0]
   2680e:	6822      	ldr	r2, [r4, #0]
    return (nrf_timer_frequency_t)(p_reg->PRESCALER);
}

NRF_STATIC_INLINE void nrf_timer_prescaler_set(NRF_TIMER_Type * p_reg, uint32_t prescaler_factor)
{
    NRFX_ASSERT(prescaler_factor <= NRF_TIMER_PRESCALER_MAX);
   26810:	2b09      	cmp	r3, #9
   26812:	d912      	bls.n	2683a <nrfx_timer_init+0xd6>
   26814:	4914      	ldr	r1, [pc, #80]	; (26868 <nrfx_timer_init+0x104>)
   26816:	4810      	ldr	r0, [pc, #64]	; (26858 <nrfx_timer_init+0xf4>)
   26818:	f240 3355 	movw	r3, #853	; 0x355
   2681c:	4a13      	ldr	r2, [pc, #76]	; (2686c <nrfx_timer_init+0x108>)
   2681e:	f008 fdd1 	bl	2f3c4 <assert_print>
   26822:	f240 3155 	movw	r1, #853	; 0x355
   26826:	4811      	ldr	r0, [pc, #68]	; (2686c <nrfx_timer_init+0x108>)
   26828:	e7a9      	b.n	2677e <nrfx_timer_init+0x1a>
    return (nrf_timer_task_t)NRFX_OFFSETOF(NRF_TIMER_Type, TASKS_CAPTURE[channel]);
}

NRF_STATIC_INLINE nrf_timer_event_t nrf_timer_compare_event_get(uint32_t channel)
{
    return (nrf_timer_event_t)NRFX_OFFSETOF(NRF_TIMER_Type, EVENTS_COMPARE[channel]);
   2682a:	009b      	lsls	r3, r3, #2
   2682c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26830:	f840 c003 	str.w	ip, [r0, r3]
   26834:	58c3      	ldr	r3, [r0, r3]
    for (i = 0; i < p_instance->cc_channel_count; ++i)
   26836:	3201      	adds	r2, #1
   26838:	e7c9      	b.n	267ce <nrfx_timer_init+0x6a>
    p_reg->PRESCALER = prescaler_factor;
   2683a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   2683e:	230c      	movs	r3, #12
   26840:	fb03 6607 	mla	r6, r3, r7, r6
   26844:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   26846:	480a      	ldr	r0, [pc, #40]	; (26870 <nrfx_timer_init+0x10c>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   26848:	7233      	strb	r3, [r6, #8]
}
   2684a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return err_code;
   2684c:	4809      	ldr	r0, [pc, #36]	; (26874 <nrfx_timer_init+0x110>)
   2684e:	e7fc      	b.n	2684a <nrfx_timer_init+0xe6>
   26850:	0004090d 	.word	0x0004090d
   26854:	00040a2e 	.word	0x00040a2e
   26858:	00039995 	.word	0x00039995
   2685c:	2000eb24 	.word	0x2000eb24
   26860:	4000f000 	.word	0x4000f000
   26864:	00040a6b 	.word	0x00040a6b
   26868:	000411e0 	.word	0x000411e0
   2686c:	000411ac 	.word	0x000411ac
   26870:	0bad0000 	.word	0x0bad0000
   26874:	0bad0005 	.word	0x0bad0005

00026878 <nrfx_timer_enable>:
    NRFX_LOG_INFO("Uninitialized instance: %d.", p_instance->instance_id);
}

void nrfx_timer_enable(nrfx_timer_t const * p_instance)
{
    NRFX_ASSERT(m_cb[p_instance->instance_id].state == NRFX_DRV_STATE_INITIALIZED);
   26878:	210c      	movs	r1, #12
{
   2687a:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state == NRFX_DRV_STATE_INITIALIZED);
   2687c:	4b0c      	ldr	r3, [pc, #48]	; (268b0 <nrfx_timer_enable+0x38>)
   2687e:	7902      	ldrb	r2, [r0, #4]
   26880:	fb01 3202 	mla	r2, r1, r2, r3
   26884:	7a12      	ldrb	r2, [r2, #8]
   26886:	2a01      	cmp	r2, #1
   26888:	d009      	beq.n	2689e <nrfx_timer_enable+0x26>
   2688a:	490a      	ldr	r1, [pc, #40]	; (268b4 <nrfx_timer_enable+0x3c>)
   2688c:	480a      	ldr	r0, [pc, #40]	; (268b8 <nrfx_timer_enable+0x40>)
   2688e:	238f      	movs	r3, #143	; 0x8f
   26890:	4a0a      	ldr	r2, [pc, #40]	; (268bc <nrfx_timer_enable+0x44>)
   26892:	f008 fd97 	bl	2f3c4 <assert_print>
   26896:	218f      	movs	r1, #143	; 0x8f
   26898:	4808      	ldr	r0, [pc, #32]	; (268bc <nrfx_timer_enable+0x44>)
   2689a:	f008 fd8c 	bl	2f3b6 <assert_post_action>
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_START);
   2689e:	6804      	ldr	r4, [r0, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   268a0:	6022      	str	r2, [r4, #0]
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_POWERED_ON;
   268a2:	7902      	ldrb	r2, [r0, #4]
   268a4:	fb01 3302 	mla	r3, r1, r2, r3
   268a8:	2202      	movs	r2, #2
   268aa:	721a      	strb	r2, [r3, #8]
    NRFX_LOG_INFO("Enabled instance: %d.", p_instance->instance_id);
}
   268ac:	bd10      	pop	{r4, pc}
   268ae:	bf00      	nop
   268b0:	2000eb24 	.word	0x2000eb24
   268b4:	000411f6 	.word	0x000411f6
   268b8:	00039995 	.word	0x00039995
   268bc:	00040a2e 	.word	0x00040a2e

000268c0 <nrfx_timer_disable>:

void nrfx_timer_disable(nrfx_timer_t const * p_instance)
{
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   268c0:	210c      	movs	r1, #12
{
   268c2:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   268c4:	4b0b      	ldr	r3, [pc, #44]	; (268f4 <nrfx_timer_disable+0x34>)
   268c6:	7902      	ldrb	r2, [r0, #4]
   268c8:	fb01 3202 	mla	r2, r1, r2, r3
   268cc:	7a12      	ldrb	r2, [r2, #8]
   268ce:	b94a      	cbnz	r2, 268e4 <nrfx_timer_disable+0x24>
   268d0:	4909      	ldr	r1, [pc, #36]	; (268f8 <nrfx_timer_disable+0x38>)
   268d2:	480a      	ldr	r0, [pc, #40]	; (268fc <nrfx_timer_disable+0x3c>)
   268d4:	2397      	movs	r3, #151	; 0x97
   268d6:	4a0a      	ldr	r2, [pc, #40]	; (26900 <nrfx_timer_disable+0x40>)
   268d8:	f008 fd74 	bl	2f3c4 <assert_print>
   268dc:	2197      	movs	r1, #151	; 0x97
   268de:	4808      	ldr	r0, [pc, #32]	; (26900 <nrfx_timer_disable+0x40>)
   268e0:	f008 fd69 	bl	2f3b6 <assert_post_action>
   268e4:	2201      	movs	r2, #1
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_SHUTDOWN);
   268e6:	6804      	ldr	r4, [r0, #0]
   268e8:	6122      	str	r2, [r4, #16]
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_INITIALIZED;
   268ea:	7900      	ldrb	r0, [r0, #4]
   268ec:	fb01 3300 	mla	r3, r1, r0, r3
   268f0:	721a      	strb	r2, [r3, #8]
    NRFX_LOG_INFO("Disabled instance: %d.", p_instance->instance_id);
}
   268f2:	bd10      	pop	{r4, pc}
   268f4:	2000eb24 	.word	0x2000eb24
   268f8:	00041238 	.word	0x00041238
   268fc:	00039995 	.word	0x00039995
   26900:	00040a2e 	.word	0x00040a2e

00026904 <nrfx_timer_uninit>:
{
   26904:	b538      	push	{r3, r4, r5, lr}
   26906:	4604      	mov	r4, r0
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   26908:	6800      	ldr	r0, [r0, #0]
    p_reg->SHORTS &= ~(mask);
   2690a:	2500      	movs	r5, #0
    NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   2690c:	f340 3007 	sbfx	r0, r0, #12, #8
   26910:	f7eb fe24 	bl	1255c <arch_irq_disable>
    nrf_timer_shorts_disable(p_instance->p_reg, DISABLE_ALL);
   26914:	6823      	ldr	r3, [r4, #0]
    nrfx_timer_disable(p_instance);
   26916:	4620      	mov	r0, r4
   26918:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    p_reg->INTENCLR = mask;
   2691c:	f04f 32ff 	mov.w	r2, #4294967295
    p_reg->SHORTS &= ~(mask);
   26920:	f8c3 5200 	str.w	r5, [r3, #512]	; 0x200
    nrf_timer_int_disable(p_instance->p_reg, DISABLE_ALL);
   26924:	6823      	ldr	r3, [r4, #0]
    p_reg->INTENCLR = mask;
   26926:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    nrfx_timer_disable(p_instance);
   2692a:	f7ff ffc9 	bl	268c0 <nrfx_timer_disable>
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_UNINITIALIZED;
   2692e:	210c      	movs	r1, #12
   26930:	7922      	ldrb	r2, [r4, #4]
   26932:	4b02      	ldr	r3, [pc, #8]	; (2693c <nrfx_timer_uninit+0x38>)
   26934:	fb01 3302 	mla	r3, r1, r2, r3
   26938:	721d      	strb	r5, [r3, #8]
}
   2693a:	bd38      	pop	{r3, r4, r5, pc}
   2693c:	2000eb24 	.word	0x2000eb24

00026940 <nrfx_timer_clear>:
    NRFX_LOG_INFO("Paused instance: %d.", p_instance->instance_id);
}

void nrfx_timer_clear(nrfx_timer_t const * p_instance)
{
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   26940:	210c      	movs	r1, #12
{
   26942:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   26944:	4b09      	ldr	r3, [pc, #36]	; (2696c <nrfx_timer_clear+0x2c>)
   26946:	7902      	ldrb	r2, [r0, #4]
   26948:	fb01 3302 	mla	r3, r1, r2, r3
   2694c:	7a1b      	ldrb	r3, [r3, #8]
   2694e:	b94b      	cbnz	r3, 26964 <nrfx_timer_clear+0x24>
   26950:	4907      	ldr	r1, [pc, #28]	; (26970 <nrfx_timer_clear+0x30>)
   26952:	4808      	ldr	r0, [pc, #32]	; (26974 <nrfx_timer_clear+0x34>)
   26954:	23b3      	movs	r3, #179	; 0xb3
   26956:	4a08      	ldr	r2, [pc, #32]	; (26978 <nrfx_timer_clear+0x38>)
   26958:	f008 fd34 	bl	2f3c4 <assert_print>
   2695c:	21b3      	movs	r1, #179	; 0xb3
   2695e:	4806      	ldr	r0, [pc, #24]	; (26978 <nrfx_timer_clear+0x38>)
   26960:	f008 fd29 	bl	2f3b6 <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26964:	2201      	movs	r2, #1
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_CLEAR);
   26966:	6803      	ldr	r3, [r0, #0]
   26968:	60da      	str	r2, [r3, #12]
}
   2696a:	bd08      	pop	{r3, pc}
   2696c:	2000eb24 	.word	0x2000eb24
   26970:	00041238 	.word	0x00041238
   26974:	00039995 	.word	0x00039995
   26978:	00040a2e 	.word	0x00040a2e

0002697c <nrfx_timer_increment>:

void nrfx_timer_increment(nrfx_timer_t const * p_instance)
{
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   2697c:	210c      	movs	r1, #12
{
   2697e:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   26980:	4b0f      	ldr	r3, [pc, #60]	; (269c0 <nrfx_timer_increment+0x44>)
   26982:	7902      	ldrb	r2, [r0, #4]
   26984:	fb01 3302 	mla	r3, r1, r2, r3
   26988:	7a1b      	ldrb	r3, [r3, #8]
   2698a:	b94b      	cbnz	r3, 269a0 <nrfx_timer_increment+0x24>
   2698c:	490d      	ldr	r1, [pc, #52]	; (269c4 <nrfx_timer_increment+0x48>)
   2698e:	23b9      	movs	r3, #185	; 0xb9
   26990:	4a0d      	ldr	r2, [pc, #52]	; (269c8 <nrfx_timer_increment+0x4c>)
   26992:	480e      	ldr	r0, [pc, #56]	; (269cc <nrfx_timer_increment+0x50>)
   26994:	f008 fd16 	bl	2f3c4 <assert_print>
   26998:	21b9      	movs	r1, #185	; 0xb9
    NRFX_ASSERT(nrf_timer_mode_get(p_instance->p_reg) != NRF_TIMER_MODE_TIMER);
   2699a:	480b      	ldr	r0, [pc, #44]	; (269c8 <nrfx_timer_increment+0x4c>)
   2699c:	f008 fd0b 	bl	2f3b6 <assert_post_action>
   269a0:	6802      	ldr	r2, [r0, #0]
    return (nrf_timer_mode_t)(p_reg->MODE);
   269a2:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
   269a6:	b2db      	uxtb	r3, r3
   269a8:	b93b      	cbnz	r3, 269ba <nrfx_timer_increment+0x3e>
   269aa:	4909      	ldr	r1, [pc, #36]	; (269d0 <nrfx_timer_increment+0x54>)
   269ac:	23ba      	movs	r3, #186	; 0xba
   269ae:	4a06      	ldr	r2, [pc, #24]	; (269c8 <nrfx_timer_increment+0x4c>)
   269b0:	4806      	ldr	r0, [pc, #24]	; (269cc <nrfx_timer_increment+0x50>)
   269b2:	f008 fd07 	bl	2f3c4 <assert_print>
   269b6:	21ba      	movs	r1, #186	; 0xba
   269b8:	e7ef      	b.n	2699a <nrfx_timer_increment+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   269ba:	2301      	movs	r3, #1
   269bc:	6093      	str	r3, [r2, #8]

    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_COUNT);
}
   269be:	bd08      	pop	{r3, pc}
   269c0:	2000eb24 	.word	0x2000eb24
   269c4:	00041238 	.word	0x00041238
   269c8:	00040a2e 	.word	0x00040a2e
   269cc:	00039995 	.word	0x00039995
   269d0:	0004127c 	.word	0x0004127c

000269d4 <nrfx_timer_capture>:

uint32_t nrfx_timer_capture(nrfx_timer_t const *   p_instance,
                            nrf_timer_cc_channel_t cc_channel)
{
   269d4:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   269d6:	240c      	movs	r4, #12
   269d8:	7902      	ldrb	r2, [r0, #4]
   269da:	4b13      	ldr	r3, [pc, #76]	; (26a28 <nrfx_timer_capture+0x54>)
   269dc:	fb04 3302 	mla	r3, r4, r2, r3
   269e0:	7a1b      	ldrb	r3, [r3, #8]
   269e2:	b94b      	cbnz	r3, 269f8 <nrfx_timer_capture+0x24>
   269e4:	4911      	ldr	r1, [pc, #68]	; (26a2c <nrfx_timer_capture+0x58>)
   269e6:	23c2      	movs	r3, #194	; 0xc2
   269e8:	4a11      	ldr	r2, [pc, #68]	; (26a30 <nrfx_timer_capture+0x5c>)
   269ea:	4812      	ldr	r0, [pc, #72]	; (26a34 <nrfx_timer_capture+0x60>)
   269ec:	f008 fcea 	bl	2f3c4 <assert_print>
   269f0:	21c2      	movs	r1, #194	; 0xc2
    NRFX_ASSERT(cc_channel < p_instance->cc_channel_count);
   269f2:	480f      	ldr	r0, [pc, #60]	; (26a30 <nrfx_timer_capture+0x5c>)
   269f4:	f008 fcdf 	bl	2f3b6 <assert_post_action>
   269f8:	7943      	ldrb	r3, [r0, #5]
   269fa:	428b      	cmp	r3, r1
   269fc:	d807      	bhi.n	26a0e <nrfx_timer_capture+0x3a>
   269fe:	490e      	ldr	r1, [pc, #56]	; (26a38 <nrfx_timer_capture+0x64>)
   26a00:	23c3      	movs	r3, #195	; 0xc3
   26a02:	4a0b      	ldr	r2, [pc, #44]	; (26a30 <nrfx_timer_capture+0x5c>)
   26a04:	480b      	ldr	r0, [pc, #44]	; (26a34 <nrfx_timer_capture+0x60>)
   26a06:	f008 fcdd 	bl	2f3c4 <assert_print>
   26a0a:	21c3      	movs	r1, #195	; 0xc3
   26a0c:	e7f1      	b.n	269f2 <nrfx_timer_capture+0x1e>
   26a0e:	2401      	movs	r4, #1
    return (nrf_timer_task_t)NRFX_OFFSETOF(NRF_TIMER_Type, TASKS_CAPTURE[channel]);
   26a10:	008b      	lsls	r3, r1, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26a12:	6802      	ldr	r2, [r0, #0]
    return (nrf_timer_task_t)NRFX_OFFSETOF(NRF_TIMER_Type, TASKS_CAPTURE[channel]);
   26a14:	3340      	adds	r3, #64	; 0x40
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26a16:	b2db      	uxtb	r3, r3
   26a18:	50d4      	str	r4, [r2, r3]

    nrf_timer_task_trigger(p_instance->p_reg,
        nrf_timer_capture_task_get(cc_channel));
    return nrf_timer_cc_get(p_instance->p_reg, cc_channel);
   26a1a:	6803      	ldr	r3, [r0, #0]
    return (uint32_t)p_reg->CC[cc_channel];
   26a1c:	f501 71a8 	add.w	r1, r1, #336	; 0x150
   26a20:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
   26a24:	bd10      	pop	{r4, pc}
   26a26:	bf00      	nop
   26a28:	2000eb24 	.word	0x2000eb24
   26a2c:	00041238 	.word	0x00041238
   26a30:	00040a2e 	.word	0x00040a2e
   26a34:	00039995 	.word	0x00039995
   26a38:	000412ba 	.word	0x000412ba

00026a3c <rpc_handle_data_message>:
   26a3c:	b570      	push	{r4, r5, r6, lr}
   26a3e:	6803      	ldr	r3, [r0, #0]
   26a40:	4604      	mov	r4, r0
   26a42:	3b03      	subs	r3, #3
   26a44:	b2db      	uxtb	r3, r3
   26a46:	2b04      	cmp	r3, #4
   26a48:	d803      	bhi.n	26a52 <rpc_handle_data_message+0x16>
   26a4a:	4a09      	ldr	r2, [pc, #36]	; (26a70 <rpc_handle_data_message+0x34>)
   26a4c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   26a50:	b92d      	cbnz	r5, 26a5e <rpc_handle_data_message+0x22>
   26a52:	68a0      	ldr	r0, [r4, #8]
   26a54:	b108      	cbz	r0, 26a5a <rpc_handle_data_message+0x1e>
   26a56:	f000 f825 	bl	26aa4 <rpc_transport_msg_data_rx_free>
   26a5a:	2000      	movs	r0, #0
   26a5c:	bd70      	pop	{r4, r5, r6, pc}
   26a5e:	f00e fcaa 	bl	353b6 <rpc_client_msg_from_rpc_msg_get>
   26a62:	6821      	ldr	r1, [r4, #0]
   26a64:	462b      	mov	r3, r5
   26a66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   26a6a:	0c09      	lsrs	r1, r1, #16
   26a6c:	4718      	bx	r3
   26a6e:	bf00      	nop
   26a70:	00038748 	.word	0x00038748

00026a74 <rpc_transport_init>:
   26a74:	4b01      	ldr	r3, [pc, #4]	; (26a7c <rpc_transport_init+0x8>)
   26a76:	699b      	ldr	r3, [r3, #24]
   26a78:	4718      	bx	r3
   26a7a:	bf00      	nop
   26a7c:	2000ca60 	.word	0x2000ca60

00026a80 <rpc_transport_msg_alloc>:
   26a80:	4b01      	ldr	r3, [pc, #4]	; (26a88 <rpc_transport_msg_alloc+0x8>)
   26a82:	681b      	ldr	r3, [r3, #0]
   26a84:	4718      	bx	r3
   26a86:	bf00      	nop
   26a88:	2000ca60 	.word	0x2000ca60

00026a8c <rpc_transport_msg_data_tx_size>:
   26a8c:	4b01      	ldr	r3, [pc, #4]	; (26a94 <rpc_transport_msg_data_tx_size+0x8>)
   26a8e:	685b      	ldr	r3, [r3, #4]
   26a90:	4718      	bx	r3
   26a92:	bf00      	nop
   26a94:	2000ca60 	.word	0x2000ca60

00026a98 <rpc_transport_msg_rx_free>:
   26a98:	4b01      	ldr	r3, [pc, #4]	; (26aa0 <rpc_transport_msg_rx_free+0x8>)
   26a9a:	68db      	ldr	r3, [r3, #12]
   26a9c:	4718      	bx	r3
   26a9e:	bf00      	nop
   26aa0:	2000ca60 	.word	0x2000ca60

00026aa4 <rpc_transport_msg_data_rx_free>:
   26aa4:	4b01      	ldr	r3, [pc, #4]	; (26aac <rpc_transport_msg_data_rx_free+0x8>)
   26aa6:	695b      	ldr	r3, [r3, #20]
   26aa8:	4718      	bx	r3
   26aaa:	bf00      	nop
   26aac:	2000ca60 	.word	0x2000ca60

00026ab0 <rpc_transport_msg_send>:
   26ab0:	4b01      	ldr	r3, [pc, #4]	; (26ab8 <rpc_transport_msg_send+0x8>)
   26ab2:	689b      	ldr	r3, [r3, #8]
   26ab4:	4718      	bx	r3
   26ab6:	bf00      	nop
   26ab8:	2000ca60 	.word	0x2000ca60

00026abc <rpc_transport_data_rx_suspend>:
   26abc:	4b01      	ldr	r3, [pc, #4]	; (26ac4 <rpc_transport_data_rx_suspend+0x8>)
   26abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   26ac0:	4718      	bx	r3
   26ac2:	bf00      	nop
   26ac4:	2000ca60 	.word	0x2000ca60

00026ac8 <rpc_transport_data_rx_resume>:
   26ac8:	4b01      	ldr	r3, [pc, #4]	; (26ad0 <rpc_transport_data_rx_resume+0x8>)
   26aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26acc:	4718      	bx	r3
   26ace:	bf00      	nop
   26ad0:	2000ca60 	.word	0x2000ca60

00026ad4 <rpc_transport_ipc_msg_data_tx_size>:
   26ad4:	4b01      	ldr	r3, [pc, #4]	; (26adc <rpc_transport_ipc_msg_data_tx_size+0x8>)
   26ad6:	681b      	ldr	r3, [r3, #0]
   26ad8:	68d8      	ldr	r0, [r3, #12]
   26ada:	4770      	bx	lr
   26adc:	2000eb30 	.word	0x2000eb30

00026ae0 <rpc_transport_ipc_msg_rx_free>:
   26ae0:	2300      	movs	r3, #0
   26ae2:	b530      	push	{r4, r5, lr}
   26ae4:	4910      	ldr	r1, [pc, #64]	; (26b28 <rpc_transport_ipc_msg_rx_free+0x48>)
   26ae6:	680a      	ldr	r2, [r1, #0]
   26ae8:	6814      	ldr	r4, [r2, #0]
   26aea:	42a3      	cmp	r3, r4
   26aec:	d10b      	bne.n	26b06 <rpc_transport_ipc_msg_rx_free+0x26>
   26aee:	2300      	movs	r3, #0
   26af0:	684a      	ldr	r2, [r1, #4]
   26af2:	6811      	ldr	r1, [r2, #0]
   26af4:	428b      	cmp	r3, r1
   26af6:	d015      	beq.n	26b24 <rpc_transport_ipc_msg_rx_free+0x44>
   26af8:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
   26afc:	68a4      	ldr	r4, [r4, #8]
   26afe:	42a0      	cmp	r0, r4
   26b00:	d008      	beq.n	26b14 <rpc_transport_ipc_msg_rx_free+0x34>
   26b02:	3301      	adds	r3, #1
   26b04:	e7f6      	b.n	26af4 <rpc_transport_ipc_msg_rx_free+0x14>
   26b06:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
   26b0a:	68ad      	ldr	r5, [r5, #8]
   26b0c:	42a8      	cmp	r0, r5
   26b0e:	d001      	beq.n	26b14 <rpc_transport_ipc_msg_rx_free+0x34>
   26b10:	3301      	adds	r3, #1
   26b12:	e7ea      	b.n	26aea <rpc_transport_ipc_msg_rx_free+0xa>
   26b14:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   26b18:	6853      	ldr	r3, [r2, #4]
   26b1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   26b1e:	f043 0303 	orr.w	r3, r3, #3
   26b22:	6053      	str	r3, [r2, #4]
   26b24:	bd30      	pop	{r4, r5, pc}
   26b26:	bf00      	nop
   26b28:	2000eb50 	.word	0x2000eb50

00026b2c <rpc_transport_ipc_msg_tx_free>:
   26b2c:	2200      	movs	r2, #0
   26b2e:	b530      	push	{r4, r5, lr}
   26b30:	4b0b      	ldr	r3, [pc, #44]	; (26b60 <rpc_transport_ipc_msg_tx_free+0x34>)
   26b32:	6819      	ldr	r1, [r3, #0]
   26b34:	680c      	ldr	r4, [r1, #0]
   26b36:	4294      	cmp	r4, r2
   26b38:	d00f      	beq.n	26b5a <rpc_transport_ipc_msg_tx_free+0x2e>
   26b3a:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   26b3e:	689d      	ldr	r5, [r3, #8]
   26b40:	42a8      	cmp	r0, r5
   26b42:	d10b      	bne.n	26b5c <rpc_transport_ipc_msg_tx_free+0x30>
   26b44:	f04f 0203 	mov.w	r2, #3
   26b48:	3304      	adds	r3, #4
   26b4a:	e8d3 1fcf 	ldaexb	r1, [r3]
   26b4e:	2900      	cmp	r1, #0
   26b50:	d103      	bne.n	26b5a <rpc_transport_ipc_msg_tx_free+0x2e>
   26b52:	e8c3 2fc0 	stlexb	r0, r2, [r3]
   26b56:	2800      	cmp	r0, #0
   26b58:	d1f7      	bne.n	26b4a <rpc_transport_ipc_msg_tx_free+0x1e>
   26b5a:	bd30      	pop	{r4, r5, pc}
   26b5c:	3201      	adds	r2, #1
   26b5e:	e7ea      	b.n	26b36 <rpc_transport_ipc_msg_tx_free+0xa>
   26b60:	2000eb48 	.word	0x2000eb48

00026b64 <handle_modem_rpc_msg>:
   26b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26b68:	2500      	movs	r5, #0
   26b6a:	4606      	mov	r6, r0
   26b6c:	460f      	mov	r7, r1
   26b6e:	4628      	mov	r0, r5
   26b70:	f8df 8064 	ldr.w	r8, [pc, #100]	; 26bd8 <handle_modem_rpc_msg+0x74>
   26b74:	6833      	ldr	r3, [r6, #0]
   26b76:	42ab      	cmp	r3, r5
   26b78:	d801      	bhi.n	26b7e <handle_modem_rpc_msg+0x1a>
   26b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26b7e:	eb06 04c5 	add.w	r4, r6, r5, lsl #3
   26b82:	6863      	ldr	r3, [r4, #4]
   26b84:	b2db      	uxtb	r3, r3
   26b86:	2b01      	cmp	r3, #1
   26b88:	d117      	bne.n	26bba <handle_modem_rpc_msg+0x56>
   26b8a:	6862      	ldr	r2, [r4, #4]
   26b8c:	f8b8 3000 	ldrh.w	r3, [r8]
   26b90:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   26b94:	d111      	bne.n	26bba <handle_modem_rpc_msg+0x56>
   26b96:	2f02      	cmp	r7, #2
   26b98:	68a0      	ldr	r0, [r4, #8]
   26b9a:	d110      	bne.n	26bbe <handle_modem_rpc_msg+0x5a>
   26b9c:	f7ff ff4e 	bl	26a3c <rpc_handle_data_message>
   26ba0:	b990      	cbnz	r0, 26bc8 <handle_modem_rpc_msg+0x64>
   26ba2:	6863      	ldr	r3, [r4, #4]
   26ba4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   26ba8:	f043 0303 	orr.w	r3, r3, #3
   26bac:	6063      	str	r3, [r4, #4]
   26bae:	2001      	movs	r0, #1
   26bb0:	f8b8 3000 	ldrh.w	r3, [r8]
   26bb4:	3301      	adds	r3, #1
   26bb6:	f8a8 3000 	strh.w	r3, [r8]
   26bba:	3501      	adds	r5, #1
   26bbc:	e7da      	b.n	26b74 <handle_modem_rpc_msg+0x10>
   26bbe:	6801      	ldr	r1, [r0, #0]
   26bc0:	0c09      	lsrs	r1, r1, #16
   26bc2:	f00e fba1 	bl	35308 <rpc_handle_ctrl_message>
   26bc6:	e7eb      	b.n	26ba0 <handle_modem_rpc_msg+0x3c>
   26bc8:	2801      	cmp	r0, #1
   26bca:	d1f0      	bne.n	26bae <handle_modem_rpc_msg+0x4a>
   26bcc:	6863      	ldr	r3, [r4, #4]
   26bce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   26bd2:	f043 0302 	orr.w	r3, r3, #2
   26bd6:	e7e9      	b.n	26bac <handle_modem_rpc_msg+0x48>
   26bd8:	2000ef86 	.word	0x2000ef86

00026bdc <rpc_message_handler>:
   26bdc:	b538      	push	{r3, r4, r5, lr}
   26bde:	4d07      	ldr	r5, [pc, #28]	; (26bfc <rpc_message_handler+0x20>)
   26be0:	2101      	movs	r1, #1
   26be2:	6828      	ldr	r0, [r5, #0]
   26be4:	f7ff ffbe 	bl	26b64 <handle_modem_rpc_msg>
   26be8:	2102      	movs	r1, #2
   26bea:	4604      	mov	r4, r0
   26bec:	6868      	ldr	r0, [r5, #4]
   26bee:	f7ff ffb9 	bl	26b64 <handle_modem_rpc_msg>
   26bf2:	2800      	cmp	r0, #0
   26bf4:	d1f4      	bne.n	26be0 <rpc_message_handler+0x4>
   26bf6:	2c00      	cmp	r4, #0
   26bf8:	d1f2      	bne.n	26be0 <rpc_message_handler+0x4>
   26bfa:	bd38      	pop	{r3, r4, r5, pc}
   26bfc:	2000eb50 	.word	0x2000eb50

00026c00 <ipc_irq_handler>:
   26c00:	b570      	push	{r4, r5, r6, lr}
   26c02:	2807      	cmp	r0, #7
   26c04:	d868      	bhi.n	26cd8 <ipc_irq_handler+0xd8>
   26c06:	e8df f000 	tbb	[pc, r0]
   26c0a:	670b      	.short	0x670b
   26c0c:	674b674f 	.word	0x674b674f
   26c10:	0440      	.short	0x0440
   26c12:	f001 fd75 	bl	28700 <ipc_trace_handler>
   26c16:	2003      	movs	r0, #3
   26c18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   26c1c:	f7fa be12 	b.w	21844 <nrf_modem_os_event_notify>
   26c20:	2003      	movs	r0, #3
   26c22:	4b2e      	ldr	r3, [pc, #184]	; (26cdc <ipc_irq_handler+0xdc>)
   26c24:	f8d3 4614 	ldr.w	r4, [r3, #1556]	; 0x614
   26c28:	f8d3 6618 	ldr.w	r6, [r3, #1560]	; 0x618
   26c2c:	4b2c      	ldr	r3, [pc, #176]	; (26ce0 <ipc_irq_handler+0xe0>)
   26c2e:	781d      	ldrb	r5, [r3, #0]
   26c30:	7018      	strb	r0, [r3, #0]
   26c32:	f001 fd3b 	bl	286ac <nrf_modem_state_set>
   26c36:	4b2b      	ldr	r3, [pc, #172]	; (26ce4 <ipc_irq_handler+0xe4>)
   26c38:	b2ed      	uxtb	r5, r5
   26c3a:	6818      	ldr	r0, [r3, #0]
   26c3c:	f7fa fd9e 	bl	2177c <nrf_modem_os_sem_give>
   26c40:	2d01      	cmp	r5, #1
   26c42:	d11c      	bne.n	26c7e <ipc_irq_handler+0x7e>
   26c44:	4b28      	ldr	r3, [pc, #160]	; (26ce8 <ipc_irq_handler+0xe8>)
   26c46:	429c      	cmp	r4, r3
   26c48:	d010      	beq.n	26c6c <ipc_irq_handler+0x6c>
   26c4a:	d809      	bhi.n	26c60 <ipc_irq_handler+0x60>
   26c4c:	3b02      	subs	r3, #2
   26c4e:	429c      	cmp	r4, r3
   26c50:	d00f      	beq.n	26c72 <ipc_irq_handler+0x72>
   26c52:	3301      	adds	r3, #1
   26c54:	429c      	cmp	r4, r3
   26c56:	d00f      	beq.n	26c78 <ipc_irq_handler+0x78>
   26c58:	4b24      	ldr	r3, [pc, #144]	; (26cec <ipc_irq_handler+0xec>)
   26c5a:	601c      	str	r4, [r3, #0]
   26c5c:	2000      	movs	r0, #0
   26c5e:	e7db      	b.n	26c18 <ipc_irq_handler+0x18>
   26c60:	4b23      	ldr	r3, [pc, #140]	; (26cf0 <ipc_irq_handler+0xf0>)
   26c62:	429c      	cmp	r4, r3
   26c64:	d1f8      	bne.n	26c58 <ipc_irq_handler+0x58>
   26c66:	f06f 040c 	mvn.w	r4, #12
   26c6a:	e7f5      	b.n	26c58 <ipc_irq_handler+0x58>
   26c6c:	f06f 040b 	mvn.w	r4, #11
   26c70:	e7f2      	b.n	26c58 <ipc_irq_handler+0x58>
   26c72:	f06f 0415 	mvn.w	r4, #21
   26c76:	e7ef      	b.n	26c58 <ipc_irq_handler+0x58>
   26c78:	f06f 0485 	mvn.w	r4, #133	; 0x85
   26c7c:	e7ec      	b.n	26c58 <ipc_irq_handler+0x58>
   26c7e:	4631      	mov	r1, r6
   26c80:	f3c4 000b 	ubfx	r0, r4, #0, #12
   26c84:	f001 fd06 	bl	28694 <nrf_modem_fault_handler_internal>
   26c88:	e7e8      	b.n	26c5c <ipc_irq_handler+0x5c>
   26c8a:	2202      	movs	r2, #2
   26c8c:	4b14      	ldr	r3, [pc, #80]	; (26ce0 <ipc_irq_handler+0xe0>)
   26c8e:	2000      	movs	r0, #0
   26c90:	701a      	strb	r2, [r3, #0]
   26c92:	f001 fd0b 	bl	286ac <nrf_modem_state_set>
   26c96:	4b13      	ldr	r3, [pc, #76]	; (26ce4 <ipc_irq_handler+0xe4>)
   26c98:	6818      	ldr	r0, [r3, #0]
   26c9a:	f7fa fd6f 	bl	2177c <nrf_modem_os_sem_give>
   26c9e:	e7dd      	b.n	26c5c <ipc_irq_handler+0x5c>
   26ca0:	f7ff ff9c 	bl	26bdc <rpc_message_handler>
   26ca4:	2002      	movs	r0, #2
   26ca6:	e7b7      	b.n	26c18 <ipc_irq_handler+0x18>
   26ca8:	4b0d      	ldr	r3, [pc, #52]	; (26ce0 <ipc_irq_handler+0xe0>)
   26caa:	781a      	ldrb	r2, [r3, #0]
   26cac:	2a01      	cmp	r2, #1
   26cae:	b2d0      	uxtb	r0, r2
   26cb0:	d10e      	bne.n	26cd0 <ipc_irq_handler+0xd0>
   26cb2:	4a10      	ldr	r2, [pc, #64]	; (26cf4 <ipc_irq_handler+0xf4>)
   26cb4:	6811      	ldr	r1, [r2, #0]
   26cb6:	4a10      	ldr	r2, [pc, #64]	; (26cf8 <ipc_irq_handler+0xf8>)
   26cb8:	688c      	ldr	r4, [r1, #8]
   26cba:	6054      	str	r4, [r2, #4]
   26cbc:	6849      	ldr	r1, [r1, #4]
   26cbe:	6011      	str	r1, [r2, #0]
   26cc0:	2200      	movs	r2, #0
   26cc2:	701a      	strb	r2, [r3, #0]
   26cc4:	f001 fcf2 	bl	286ac <nrf_modem_state_set>
   26cc8:	4b06      	ldr	r3, [pc, #24]	; (26ce4 <ipc_irq_handler+0xe4>)
   26cca:	6818      	ldr	r0, [r3, #0]
   26ccc:	f7fa fd56 	bl	2177c <nrf_modem_os_sem_give>
   26cd0:	f7ff ff84 	bl	26bdc <rpc_message_handler>
   26cd4:	2001      	movs	r0, #1
   26cd6:	e79f      	b.n	26c18 <ipc_irq_handler+0x18>
   26cd8:	bd70      	pop	{r4, r5, r6, pc}
   26cda:	bf00      	nop
   26cdc:	4002a000 	.word	0x4002a000
   26ce0:	20010776 	.word	0x20010776
   26ce4:	2000eb38 	.word	0x2000eb38
   26ce8:	00010022 	.word	0x00010022
   26cec:	2000eb4c 	.word	0x2000eb4c
   26cf0:	00013032 	.word	0x00013032
   26cf4:	2000eb34 	.word	0x2000eb34
   26cf8:	2000eb50 	.word	0x2000eb50

00026cfc <rpc_transport_ipc_data_msg_send>:
   26cfc:	b570      	push	{r4, r5, r6, lr}
   26cfe:	4b16      	ldr	r3, [pc, #88]	; (26d58 <rpc_transport_ipc_data_msg_send+0x5c>)
   26d00:	6842      	ldr	r2, [r0, #4]
   26d02:	681b      	ldr	r3, [r3, #0]
   26d04:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   26d08:	f042 0202 	orr.w	r2, r2, #2
   26d0c:	1ac3      	subs	r3, r0, r3
   26d0e:	6042      	str	r2, [r0, #4]
   26d10:	4812      	ldr	r0, [pc, #72]	; (26d5c <rpc_transport_ipc_data_msg_send+0x60>)
   26d12:	4a13      	ldr	r2, [pc, #76]	; (26d60 <rpc_transport_ipc_data_msg_send+0x64>)
   26d14:	6801      	ldr	r1, [r0, #0]
   26d16:	f3c3 1389 	ubfx	r3, r3, #6, #10
   26d1a:	e8d2 4fdf 	ldaexh	r4, [r2]
   26d1e:	1c65      	adds	r5, r4, #1
   26d20:	e8c2 5fd6 	stlexh	r6, r5, [r2]
   26d24:	2e00      	cmp	r6, #0
   26d26:	d1f8      	bne.n	26d1a <rpc_transport_ipc_data_msg_send+0x1e>
   26d28:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   26d2c:	684a      	ldr	r2, [r1, #4]
   26d2e:	b292      	uxth	r2, r2
   26d30:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   26d34:	604a      	str	r2, [r1, #4]
   26d36:	6802      	ldr	r2, [r0, #0]
   26d38:	2003      	movs	r0, #3
   26d3a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   26d3e:	6853      	ldr	r3, [r2, #4]
   26d40:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   26d44:	f043 0301 	orr.w	r3, r3, #1
   26d48:	6053      	str	r3, [r2, #4]
   26d4a:	f00d fe9c 	bl	34a86 <nrf_modem_os_busywait>
   26d4e:	2201      	movs	r2, #1
   26d50:	4b04      	ldr	r3, [pc, #16]	; (26d64 <rpc_transport_ipc_data_msg_send+0x68>)
   26d52:	60da      	str	r2, [r3, #12]
   26d54:	bd70      	pop	{r4, r5, r6, pc}
   26d56:	bf00      	nop
   26d58:	2000eb40 	.word	0x2000eb40
   26d5c:	2000eb48 	.word	0x2000eb48
   26d60:	2000ef88 	.word	0x2000ef88
   26d64:	4002a000 	.word	0x4002a000

00026d68 <rpc_transport_ipc_ctrl_msg_alloc>:
   26d68:	230a      	movs	r3, #10
   26d6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   26d6c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   26d70:	4e0c      	ldr	r6, [pc, #48]	; (26da4 <rpc_transport_ipc_ctrl_msg_alloc+0x3c>)
   26d72:	4f0d      	ldr	r7, [pc, #52]	; (26da8 <rpc_transport_ipc_ctrl_msg_alloc+0x40>)
   26d74:	9301      	str	r3, [sp, #4]
   26d76:	6831      	ldr	r1, [r6, #0]
   26d78:	6838      	ldr	r0, [r7, #0]
   26d7a:	f00e faf7 	bl	3536c <rpc_transport_ipc_msg_alloc>
   26d7e:	4604      	mov	r4, r0
   26d80:	b940      	cbnz	r0, 26d94 <rpc_transport_ipc_ctrl_msg_alloc+0x2c>
   26d82:	f00d fe82 	bl	34a8a <nrf_modem_os_is_in_isr>
   26d86:	b940      	cbnz	r0, 26d9a <rpc_transport_ipc_ctrl_msg_alloc+0x32>
   26d88:	2001      	movs	r0, #1
   26d8a:	a901      	add	r1, sp, #4
   26d8c:	f7fa fbe2 	bl	21554 <nrf_modem_os_timedwait>
   26d90:	306e      	adds	r0, #110	; 0x6e
   26d92:	d1f0      	bne.n	26d76 <rpc_transport_ipc_ctrl_msg_alloc+0xe>
   26d94:	4620      	mov	r0, r4
   26d96:	b003      	add	sp, #12
   26d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26d9a:	9801      	ldr	r0, [sp, #4]
   26d9c:	4368      	muls	r0, r5
   26d9e:	f00d fe72 	bl	34a86 <nrf_modem_os_busywait>
   26da2:	e7e8      	b.n	26d76 <rpc_transport_ipc_ctrl_msg_alloc+0xe>
   26da4:	2000eb3c 	.word	0x2000eb3c
   26da8:	2000eb44 	.word	0x2000eb44

00026dac <rpc_transport_ipc_data_msg_alloc>:
   26dac:	4b05      	ldr	r3, [pc, #20]	; (26dc4 <rpc_transport_ipc_data_msg_alloc+0x18>)
   26dae:	781b      	ldrb	r3, [r3, #0]
   26db0:	b92b      	cbnz	r3, 26dbe <rpc_transport_ipc_data_msg_alloc+0x12>
   26db2:	4b05      	ldr	r3, [pc, #20]	; (26dc8 <rpc_transport_ipc_data_msg_alloc+0x1c>)
   26db4:	6819      	ldr	r1, [r3, #0]
   26db6:	4b05      	ldr	r3, [pc, #20]	; (26dcc <rpc_transport_ipc_data_msg_alloc+0x20>)
   26db8:	6818      	ldr	r0, [r3, #0]
   26dba:	f00e bad7 	b.w	3536c <rpc_transport_ipc_msg_alloc>
   26dbe:	2000      	movs	r0, #0
   26dc0:	4770      	bx	lr
   26dc2:	bf00      	nop
   26dc4:	20010775 	.word	0x20010775
   26dc8:	2000eb40 	.word	0x2000eb40
   26dcc:	2000eb48 	.word	0x2000eb48

00026dd0 <rpc_transport_ipc_init>:
   26dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26dd4:	b095      	sub	sp, #84	; 0x54
   26dd6:	2238      	movs	r2, #56	; 0x38
   26dd8:	2100      	movs	r1, #0
   26dda:	4606      	mov	r6, r0
   26ddc:	a803      	add	r0, sp, #12
   26dde:	f00f fbc3 	bl	36568 <memset>
   26de2:	2302      	movs	r3, #2
   26de4:	9304      	str	r3, [sp, #16]
   26de6:	2308      	movs	r3, #8
   26de8:	9306      	str	r3, [sp, #24]
   26dea:	2320      	movs	r3, #32
   26dec:	9308      	str	r3, [sp, #32]
   26dee:	2304      	movs	r3, #4
   26df0:	930d      	str	r3, [sp, #52]	; 0x34
   26df2:	2310      	movs	r3, #16
   26df4:	2540      	movs	r5, #64	; 0x40
   26df6:	930f      	str	r3, [sp, #60]	; 0x3c
   26df8:	2380      	movs	r3, #128	; 0x80
   26dfa:	2201      	movs	r2, #1
   26dfc:	e9cd 5311 	strd	r5, r3, [sp, #68]	; 0x44
   26e00:	23d5      	movs	r3, #213	; 0xd5
   26e02:	2100      	movs	r1, #0
   26e04:	4855      	ldr	r0, [pc, #340]	; (26f5c <rpc_transport_ipc_init+0x18c>)
   26e06:	920b      	str	r2, [sp, #44]	; 0x2c
   26e08:	9313      	str	r3, [sp, #76]	; 0x4c
   26e0a:	f7fa fc83 	bl	21714 <nrf_modem_os_sem_init>
   26e0e:	4605      	mov	r5, r0
   26e10:	2800      	cmp	r0, #0
   26e12:	f040 809f 	bne.w	26f54 <rpc_transport_ipc_init+0x184>
   26e16:	4602      	mov	r2, r0
   26e18:	4951      	ldr	r1, [pc, #324]	; (26f60 <rpc_transport_ipc_init+0x190>)
   26e1a:	7930      	ldrb	r0, [r6, #4]
   26e1c:	f7ff fb2a 	bl	26474 <nrfx_ipc_init>
   26e20:	a803      	add	r0, sp, #12
   26e22:	f7ff fb3f 	bl	264a4 <nrfx_ipc_config_load>
   26e26:	6834      	ldr	r4, [r6, #0]
   26e28:	6862      	ldr	r2, [r4, #4]
   26e2a:	f5b2 6f9d 	cmp.w	r2, #1256	; 0x4e8
   26e2e:	f040 8089 	bne.w	26f44 <rpc_transport_ipc_init+0x174>
   26e32:	6961      	ldr	r1, [r4, #20]
   26e34:	68e3      	ldr	r3, [r4, #12]
   26e36:	440b      	add	r3, r1
   26e38:	69e1      	ldr	r1, [r4, #28]
   26e3a:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
   26e3e:	440b      	add	r3, r1
   26e40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   26e44:	d87e      	bhi.n	26f44 <rpc_transport_ipc_init+0x174>
   26e46:	6820      	ldr	r0, [r4, #0]
   26e48:	4629      	mov	r1, r5
   26e4a:	f00f fb8d 	bl	36568 <memset>
   26e4e:	6833      	ldr	r3, [r6, #0]
   26e50:	681c      	ldr	r4, [r3, #0]
   26e52:	f8d3 901c 	ldr.w	r9, [r3, #28]
   26e56:	f504 723a 	add.w	r2, r4, #744	; 0x2e8
   26e5a:	9201      	str	r2, [sp, #4]
   26e5c:	f104 0760 	add.w	r7, r4, #96	; 0x60
   26e60:	4a40      	ldr	r2, [pc, #256]	; (26f64 <rpc_transport_ipc_init+0x194>)
   26e62:	f104 08a4 	add.w	r8, r4, #164	; 0xa4
   26e66:	f104 0b20 	add.w	fp, r4, #32
   26e6a:	f1b9 0f00 	cmp.w	r9, #0
   26e6e:	d15c      	bne.n	26f2a <rpc_transport_ipc_init+0x15a>
   26e70:	f8c2 b000 	str.w	fp, [r2]
   26e74:	2500      	movs	r5, #0
   26e76:	f04f 0a01 	mov.w	sl, #1
   26e7a:	7025      	strb	r5, [r4, #0]
   26e7c:	7065      	strb	r5, [r4, #1]
   26e7e:	f884 a002 	strb.w	sl, [r4, #2]
   26e82:	70e5      	strb	r5, [r4, #3]
   26e84:	6833      	ldr	r3, [r6, #0]
   26e86:	4640      	mov	r0, r8
   26e88:	691b      	ldr	r3, [r3, #16]
   26e8a:	6063      	str	r3, [r4, #4]
   26e8c:	6833      	ldr	r3, [r6, #0]
   26e8e:	695b      	ldr	r3, [r3, #20]
   26e90:	f8c4 b014 	str.w	fp, [r4, #20]
   26e94:	60a3      	str	r3, [r4, #8]
   26e96:	4b34      	ldr	r3, [pc, #208]	; (26f68 <rpc_transport_ipc_init+0x198>)
   26e98:	f8c4 9018 	str.w	r9, [r4, #24]
   26e9c:	f8c3 8000 	str.w	r8, [r3]
   26ea0:	4b32      	ldr	r3, [pc, #200]	; (26f6c <rpc_transport_ipc_init+0x19c>)
   26ea2:	60e7      	str	r7, [r4, #12]
   26ea4:	601f      	str	r7, [r3, #0]
   26ea6:	2308      	movs	r3, #8
   26ea8:	f8c4 8010 	str.w	r8, [r4, #16]
   26eac:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
   26eb0:	f888 5001 	strb.w	r5, [r8, #1]
   26eb4:	f888 5002 	strb.w	r5, [r8, #2]
   26eb8:	f888 5003 	strb.w	r5, [r8, #3]
   26ebc:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
   26ec0:	707d      	strb	r5, [r7, #1]
   26ec2:	70bd      	strb	r5, [r7, #2]
   26ec4:	70fd      	strb	r5, [r7, #3]
   26ec6:	f00e fa39 	bl	3533c <rpc_list_preambles_init>
   26eca:	4638      	mov	r0, r7
   26ecc:	f00e fa36 	bl	3533c <rpc_list_preambles_init>
   26ed0:	4b27      	ldr	r3, [pc, #156]	; (26f70 <rpc_transport_ipc_init+0x1a0>)
   26ed2:	f504 723a 	add.w	r2, r4, #744	; 0x2e8
   26ed6:	601a      	str	r2, [r3, #0]
   26ed8:	4b26      	ldr	r3, [pc, #152]	; (26f74 <rpc_transport_ipc_init+0x1a4>)
   26eda:	f104 02e8 	add.w	r2, r4, #232	; 0xe8
   26ede:	601a      	str	r2, [r3, #0]
   26ee0:	6831      	ldr	r1, [r6, #0]
   26ee2:	4b25      	ldr	r3, [pc, #148]	; (26f78 <rpc_transport_ipc_init+0x1a8>)
   26ee4:	6019      	str	r1, [r3, #0]
   26ee6:	4b25      	ldr	r3, [pc, #148]	; (26f7c <rpc_transport_ipc_init+0x1ac>)
   26ee8:	4925      	ldr	r1, [pc, #148]	; (26f80 <rpc_transport_ipc_init+0x1b0>)
   26eea:	f8c3 4610 	str.w	r4, [r3, #1552]	; 0x610
   26eee:	f8c3 5614 	str.w	r5, [r3, #1556]	; 0x614
   26ef2:	4b24      	ldr	r3, [pc, #144]	; (26f84 <rpc_transport_ipc_init+0x1b4>)
   26ef4:	4c24      	ldr	r4, [pc, #144]	; (26f88 <rpc_transport_ipc_init+0x1b8>)
   26ef6:	801d      	strh	r5, [r3, #0]
   26ef8:	4b24      	ldr	r3, [pc, #144]	; (26f8c <rpc_transport_ipc_init+0x1bc>)
   26efa:	6025      	str	r5, [r4, #0]
   26efc:	801d      	strh	r5, [r3, #0]
   26efe:	4b24      	ldr	r3, [pc, #144]	; (26f90 <rpc_transport_ipc_init+0x1c0>)
   26f00:	f883 a000 	strb.w	sl, [r3]
   26f04:	4b23      	ldr	r3, [pc, #140]	; (26f94 <rpc_transport_ipc_init+0x1c4>)
   26f06:	9502      	str	r5, [sp, #8]
   26f08:	611d      	str	r5, [r3, #16]
   26f0a:	691b      	ldr	r3, [r3, #16]
   26f0c:	9302      	str	r3, [sp, #8]
   26f0e:	9b02      	ldr	r3, [sp, #8]
   26f10:	4b12      	ldr	r3, [pc, #72]	; (26f5c <rpc_transport_ipc_init+0x18c>)
   26f12:	6818      	ldr	r0, [r3, #0]
   26f14:	f7fa fc56 	bl	217c4 <nrf_modem_os_sem_take>
   26f18:	b9c8      	cbnz	r0, 26f4e <rpc_transport_ipc_init+0x17e>
   26f1a:	6824      	ldr	r4, [r4, #0]
   26f1c:	b9a4      	cbnz	r4, 26f48 <rpc_transport_ipc_init+0x178>
   26f1e:	4b1e      	ldr	r3, [pc, #120]	; (26f98 <rpc_transport_ipc_init+0x1c8>)
   26f20:	701c      	strb	r4, [r3, #0]
   26f22:	4620      	mov	r0, r4
   26f24:	b015      	add	sp, #84	; 0x54
   26f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26f2a:	699b      	ldr	r3, [r3, #24]
   26f2c:	f104 0940 	add.w	r9, r4, #64	; 0x40
   26f30:	6463      	str	r3, [r4, #68]	; 0x44
   26f32:	6833      	ldr	r3, [r6, #0]
   26f34:	4648      	mov	r0, r9
   26f36:	69db      	ldr	r3, [r3, #28]
   26f38:	f8c2 b000 	str.w	fp, [r2]
   26f3c:	6423      	str	r3, [r4, #64]	; 0x40
   26f3e:	f001 fbc3 	bl	286c8 <ipc_trace_init>
   26f42:	e797      	b.n	26e74 <rpc_transport_ipc_init+0xa4>
   26f44:	f06f 0415 	mvn.w	r4, #21
   26f48:	f7ff faec 	bl	26524 <nrfx_ipc_uninit>
   26f4c:	e7e9      	b.n	26f22 <rpc_transport_ipc_init+0x152>
   26f4e:	f06f 0473 	mvn.w	r4, #115	; 0x73
   26f52:	e7f9      	b.n	26f48 <rpc_transport_ipc_init+0x178>
   26f54:	f06f 042d 	mvn.w	r4, #45	; 0x2d
   26f58:	e7e3      	b.n	26f22 <rpc_transport_ipc_init+0x152>
   26f5a:	bf00      	nop
   26f5c:	2000eb38 	.word	0x2000eb38
   26f60:	00026c01 	.word	0x00026c01
   26f64:	2000eb34 	.word	0x2000eb34
   26f68:	2000eb48 	.word	0x2000eb48
   26f6c:	2000eb44 	.word	0x2000eb44
   26f70:	2000eb40 	.word	0x2000eb40
   26f74:	2000eb3c 	.word	0x2000eb3c
   26f78:	2000eb30 	.word	0x2000eb30
   26f7c:	4002a000 	.word	0x4002a000
   26f80:	000249f0 	.word	0x000249f0
   26f84:	2000ef88 	.word	0x2000ef88
   26f88:	2000eb4c 	.word	0x2000eb4c
   26f8c:	2000ef86 	.word	0x2000ef86
   26f90:	20010776 	.word	0x20010776
   26f94:	40005600 	.word	0x40005600
   26f98:	20010775 	.word	0x20010775

00026f9c <rpc_transport_ipc_ctrl_msg_send>:
   26f9c:	b570      	push	{r4, r5, r6, lr}
   26f9e:	4b16      	ldr	r3, [pc, #88]	; (26ff8 <rpc_transport_ipc_ctrl_msg_send+0x5c>)
   26fa0:	6842      	ldr	r2, [r0, #4]
   26fa2:	681b      	ldr	r3, [r3, #0]
   26fa4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   26fa8:	f042 0201 	orr.w	r2, r2, #1
   26fac:	1ac3      	subs	r3, r0, r3
   26fae:	6042      	str	r2, [r0, #4]
   26fb0:	4812      	ldr	r0, [pc, #72]	; (26ffc <rpc_transport_ipc_ctrl_msg_send+0x60>)
   26fb2:	4a13      	ldr	r2, [pc, #76]	; (27000 <rpc_transport_ipc_ctrl_msg_send+0x64>)
   26fb4:	6801      	ldr	r1, [r0, #0]
   26fb6:	f3c3 1389 	ubfx	r3, r3, #6, #10
   26fba:	e8d2 4fdf 	ldaexh	r4, [r2]
   26fbe:	1c65      	adds	r5, r4, #1
   26fc0:	e8c2 5fd6 	stlexh	r6, r5, [r2]
   26fc4:	2e00      	cmp	r6, #0
   26fc6:	d1f8      	bne.n	26fba <rpc_transport_ipc_ctrl_msg_send+0x1e>
   26fc8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   26fcc:	684a      	ldr	r2, [r1, #4]
   26fce:	b292      	uxth	r2, r2
   26fd0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   26fd4:	604a      	str	r2, [r1, #4]
   26fd6:	6802      	ldr	r2, [r0, #0]
   26fd8:	2003      	movs	r0, #3
   26fda:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   26fde:	6853      	ldr	r3, [r2, #4]
   26fe0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   26fe4:	f043 0301 	orr.w	r3, r3, #1
   26fe8:	6053      	str	r3, [r2, #4]
   26fea:	f00d fd4c 	bl	34a86 <nrf_modem_os_busywait>
   26fee:	2201      	movs	r2, #1
   26ff0:	4b04      	ldr	r3, [pc, #16]	; (27004 <rpc_transport_ipc_ctrl_msg_send+0x68>)
   26ff2:	605a      	str	r2, [r3, #4]
   26ff4:	bd70      	pop	{r4, r5, r6, pc}
   26ff6:	bf00      	nop
   26ff8:	2000eb3c 	.word	0x2000eb3c
   26ffc:	2000eb44 	.word	0x2000eb44
   27000:	2000ef88 	.word	0x2000ef88
   27004:	4002a000 	.word	0x4002a000

00027008 <rpc_transport_ipc_request_shutdown>:
   27008:	b510      	push	{r4, lr}
   2700a:	f7ff fead 	bl	26d68 <rpc_transport_ipc_ctrl_msg_alloc>
   2700e:	2401      	movs	r4, #1
   27010:	2200      	movs	r2, #0
   27012:	2103      	movs	r1, #3
   27014:	7004      	strb	r4, [r0, #0]
   27016:	7081      	strb	r1, [r0, #2]
   27018:	7042      	strb	r2, [r0, #1]
   2701a:	70c2      	strb	r2, [r0, #3]
   2701c:	f7ff ffbe 	bl	26f9c <rpc_transport_ipc_ctrl_msg_send>
   27020:	4b05      	ldr	r3, [pc, #20]	; (27038 <rpc_transport_ipc_request_shutdown+0x30>)
   27022:	701c      	strb	r4, [r3, #0]
   27024:	f00e f99d 	bl	35362 <rpc_transport_ipc_data_rx_suspend>
   27028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2702c:	4b03      	ldr	r3, [pc, #12]	; (2703c <rpc_transport_ipc_request_shutdown+0x34>)
   2702e:	f247 5130 	movw	r1, #30000	; 0x7530
   27032:	6818      	ldr	r0, [r3, #0]
   27034:	f7fa bbc6 	b.w	217c4 <nrf_modem_os_sem_take>
   27038:	20010775 	.word	0x20010775
   2703c:	2000eb38 	.word	0x2000eb38

00027040 <rpc_transport_ipc_msg_data_rx_free>:
   27040:	b510      	push	{r4, lr}
   27042:	4b0a      	ldr	r3, [pc, #40]	; (2706c <rpc_transport_ipc_msg_data_rx_free+0x2c>)
   27044:	4604      	mov	r4, r0
   27046:	781b      	ldrb	r3, [r3, #0]
   27048:	2b03      	cmp	r3, #3
   2704a:	d00e      	beq.n	2706a <rpc_transport_ipc_msg_data_rx_free+0x2a>
   2704c:	f7ff fe8c 	bl	26d68 <rpc_transport_ipc_ctrl_msg_alloc>
   27050:	b158      	cbz	r0, 2706a <rpc_transport_ipc_msg_data_rx_free+0x2a>
   27052:	2101      	movs	r1, #1
   27054:	2200      	movs	r2, #0
   27056:	7001      	strb	r1, [r0, #0]
   27058:	2102      	movs	r1, #2
   2705a:	6084      	str	r4, [r0, #8]
   2705c:	7042      	strb	r2, [r0, #1]
   2705e:	7081      	strb	r1, [r0, #2]
   27060:	70c2      	strb	r2, [r0, #3]
   27062:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   27066:	f7ff bf99 	b.w	26f9c <rpc_transport_ipc_ctrl_msg_send>
   2706a:	bd10      	pop	{r4, pc}
   2706c:	20010776 	.word	0x20010776

00027070 <at_cmd_send>:
   27070:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   27074:	4605      	mov	r5, r0
   27076:	2000      	movs	r0, #0
   27078:	4617      	mov	r7, r2
   2707a:	4688      	mov	r8, r1
   2707c:	461e      	mov	r6, r3
   2707e:	f00e f99c 	bl	353ba <rpc_client_msg_alloc>
   27082:	4602      	mov	r2, r0
   27084:	b940      	cbnz	r0, 27098 <at_cmd_send+0x28>
   27086:	b115      	cbz	r5, 2708e <at_cmd_send+0x1e>
   27088:	4628      	mov	r0, r5
   2708a:	f00e f9c2 	bl	35412 <rpc_client_msg_data_tx_free>
   2708e:	f06f 000b 	mvn.w	r0, #11
   27092:	b002      	add	sp, #8
   27094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27098:	f06f 0358 	mvn.w	r3, #88	; 0x58
   2709c:	2400      	movs	r4, #0
   2709e:	7303      	strb	r3, [r0, #12]
   270a0:	2304      	movs	r3, #4
   270a2:	6005      	str	r5, [r0, #0]
   270a4:	4d0e      	ldr	r5, [pc, #56]	; (270e0 <at_cmd_send+0x70>)
   270a6:	7203      	strb	r3, [r0, #8]
   270a8:	7344      	strb	r4, [r0, #13]
   270aa:	7384      	strb	r4, [r0, #14]
   270ac:	73c4      	strb	r4, [r0, #15]
   270ae:	7244      	strb	r4, [r0, #9]
   270b0:	7284      	strb	r4, [r0, #10]
   270b2:	72c4      	strb	r4, [r0, #11]
   270b4:	f8c0 8004 	str.w	r8, [r0, #4]
   270b8:	4639      	mov	r1, r7
   270ba:	2003      	movs	r0, #3
   270bc:	702c      	strb	r4, [r5, #0]
   270be:	f00e f998 	bl	353f2 <rpc_client_msg_send>
   270c2:	f04f 33ff 	mov.w	r3, #4294967295
   270c6:	9301      	str	r3, [sp, #4]
   270c8:	782b      	ldrb	r3, [r5, #0]
   270ca:	42b3      	cmp	r3, r6
   270cc:	d101      	bne.n	270d2 <at_cmd_send+0x62>
   270ce:	2000      	movs	r0, #0
   270d0:	e7df      	b.n	27092 <at_cmd_send+0x22>
   270d2:	2002      	movs	r0, #2
   270d4:	a901      	add	r1, sp, #4
   270d6:	f7fa fa3d 	bl	21554 <nrf_modem_os_timedwait>
   270da:	2800      	cmp	r0, #0
   270dc:	d0f4      	beq.n	270c8 <at_cmd_send+0x58>
   270de:	e7d8      	b.n	27092 <at_cmd_send+0x22>
   270e0:	20010777 	.word	0x20010777

000270e4 <at_response_match>:
   270e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   270e6:	4605      	mov	r5, r0
   270e8:	2400      	movs	r4, #0
   270ea:	4f0f      	ldr	r7, [pc, #60]	; (27128 <at_response_match+0x44>)
   270ec:	f857 6b04 	ldr.w	r6, [r7], #4
   270f0:	4628      	mov	r0, r5
   270f2:	4631      	mov	r1, r6
   270f4:	f00f fbdd 	bl	368b2 <strstr>
   270f8:	b928      	cbnz	r0, 27106 <at_response_match+0x22>
   270fa:	3401      	adds	r4, #1
   270fc:	2c04      	cmp	r4, #4
   270fe:	d1f5      	bne.n	270ec <at_response_match+0x8>
   27100:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   27104:	e00d      	b.n	27122 <at_response_match+0x3e>
   27106:	b16c      	cbz	r4, 27124 <at_response_match+0x40>
   27108:	1ea3      	subs	r3, r4, #2
   2710a:	2b01      	cmp	r3, #1
   2710c:	d8f8      	bhi.n	27100 <at_response_match+0x1c>
   2710e:	4630      	mov	r0, r6
   27110:	f7e2 f887 	bl	9222 <strlen>
   27114:	220a      	movs	r2, #10
   27116:	2100      	movs	r1, #0
   27118:	4428      	add	r0, r5
   2711a:	f005 fee5 	bl	2cee8 <strtol>
   2711e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
   27122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27124:	4620      	mov	r0, r4
   27126:	e7fc      	b.n	27122 <at_response_match+0x3e>
   27128:	0003875c 	.word	0x0003875c

0002712c <at_vsprintf>:
   2712c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   27130:	2500      	movs	r5, #0
   27132:	4681      	mov	r9, r0
   27134:	460f      	mov	r7, r1
   27136:	4810      	ldr	r0, [pc, #64]	; (27178 <at_vsprintf+0x4c>)
   27138:	4629      	mov	r1, r5
   2713a:	4690      	mov	r8, r2
   2713c:	461e      	mov	r6, r3
   2713e:	9301      	str	r3, [sp, #4]
   27140:	f005 fff6 	bl	2d130 <vsniprintf>
   27144:	1e04      	subs	r4, r0, #0
   27146:	db11      	blt.n	2716c <at_vsprintf+0x40>
   27148:	3401      	adds	r4, #1
   2714a:	4620      	mov	r0, r4
   2714c:	f00e f95f 	bl	3540e <rpc_client_msg_data_tx_alloc>
   27150:	f8c9 0000 	str.w	r0, [r9]
   27154:	b168      	cbz	r0, 27172 <at_vsprintf+0x46>
   27156:	4633      	mov	r3, r6
   27158:	4642      	mov	r2, r8
   2715a:	4621      	mov	r1, r4
   2715c:	9601      	str	r6, [sp, #4]
   2715e:	f005 ffe7 	bl	2d130 <vsniprintf>
   27162:	4628      	mov	r0, r5
   27164:	603c      	str	r4, [r7, #0]
   27166:	b003      	add	sp, #12
   27168:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2716c:	f06f 0015 	mvn.w	r0, #21
   27170:	e7f9      	b.n	27166 <at_vsprintf+0x3a>
   27172:	f06f 000b 	mvn.w	r0, #11
   27176:	e7f6      	b.n	27166 <at_vsprintf+0x3a>
   27178:	00037c37 	.word	0x00037c37

0002717c <nrf_modem_at_notif_handler_set>:
   2717c:	4b01      	ldr	r3, [pc, #4]	; (27184 <nrf_modem_at_notif_handler_set+0x8>)
   2717e:	6018      	str	r0, [r3, #0]
   27180:	2000      	movs	r0, #0
   27182:	4770      	bx	lr
   27184:	2000eb64 	.word	0x2000eb64

00027188 <nrf_modem_at_printf>:
   27188:	b40f      	push	{r0, r1, r2, r3}
   2718a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2718c:	9c08      	ldr	r4, [sp, #32]
   2718e:	f001 fa93 	bl	286b8 <nrf_modem_state_is_initialized>
   27192:	2800      	cmp	r0, #0
   27194:	d039      	beq.n	2720a <nrf_modem_at_printf+0x82>
   27196:	2c00      	cmp	r4, #0
   27198:	d03a      	beq.n	27210 <nrf_modem_at_printf+0x88>
   2719a:	4622      	mov	r2, r4
   2719c:	ab09      	add	r3, sp, #36	; 0x24
   2719e:	a903      	add	r1, sp, #12
   271a0:	a802      	add	r0, sp, #8
   271a2:	9301      	str	r3, [sp, #4]
   271a4:	f7ff ffc2 	bl	2712c <at_vsprintf>
   271a8:	4604      	mov	r4, r0
   271aa:	b960      	cbnz	r0, 271c6 <nrf_modem_at_printf+0x3e>
   271ac:	4e1a      	ldr	r6, [pc, #104]	; (27218 <nrf_modem_at_printf+0x90>)
   271ae:	f04f 31ff 	mov.w	r1, #4294967295
   271b2:	6830      	ldr	r0, [r6, #0]
   271b4:	f7fa fb06 	bl	217c4 <nrf_modem_os_sem_take>
   271b8:	4603      	mov	r3, r0
   271ba:	9802      	ldr	r0, [sp, #8]
   271bc:	b14b      	cbz	r3, 271d2 <nrf_modem_at_printf+0x4a>
   271be:	f00e f928 	bl	35412 <rpc_client_msg_data_tx_free>
   271c2:	f06f 040a 	mvn.w	r4, #10
   271c6:	4620      	mov	r0, r4
   271c8:	b004      	add	sp, #16
   271ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   271ce:	b004      	add	sp, #16
   271d0:	4770      	bx	lr
   271d2:	2302      	movs	r3, #2
   271d4:	2201      	movs	r2, #1
   271d6:	9903      	ldr	r1, [sp, #12]
   271d8:	f7ff ff4a 	bl	27070 <at_cmd_send>
   271dc:	4604      	mov	r4, r0
   271de:	b118      	cbz	r0, 271e8 <nrf_modem_at_printf+0x60>
   271e0:	6830      	ldr	r0, [r6, #0]
   271e2:	f7fa facb 	bl	2177c <nrf_modem_os_sem_give>
   271e6:	e7ee      	b.n	271c6 <nrf_modem_at_printf+0x3e>
   271e8:	4d0c      	ldr	r5, [pc, #48]	; (2721c <nrf_modem_at_printf+0x94>)
   271ea:	682b      	ldr	r3, [r5, #0]
   271ec:	6818      	ldr	r0, [r3, #0]
   271ee:	f7ff ff79 	bl	270e4 <at_response_match>
   271f2:	4604      	mov	r4, r0
   271f4:	6830      	ldr	r0, [r6, #0]
   271f6:	f7fa fac1 	bl	2177c <nrf_modem_os_sem_give>
   271fa:	682b      	ldr	r3, [r5, #0]
   271fc:	6818      	ldr	r0, [r3, #0]
   271fe:	f00e f902 	bl	35406 <rpc_client_msg_data_rx_free>
   27202:	6828      	ldr	r0, [r5, #0]
   27204:	f00e f8fc 	bl	35400 <rpc_client_msg_rx_free>
   27208:	e7dd      	b.n	271c6 <nrf_modem_at_printf+0x3e>
   2720a:	f04f 34ff 	mov.w	r4, #4294967295
   2720e:	e7da      	b.n	271c6 <nrf_modem_at_printf+0x3e>
   27210:	f06f 040d 	mvn.w	r4, #13
   27214:	e7d7      	b.n	271c6 <nrf_modem_at_printf+0x3e>
   27216:	bf00      	nop
   27218:	2000eb6c 	.word	0x2000eb6c
   2721c:	2000eb68 	.word	0x2000eb68

00027220 <nrf_modem_at_cmd>:
   27220:	b40c      	push	{r2, r3}
   27222:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   27226:	b085      	sub	sp, #20
   27228:	4606      	mov	r6, r0
   2722a:	460d      	mov	r5, r1
   2722c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2722e:	f001 fa43 	bl	286b8 <nrf_modem_state_is_initialized>
   27232:	2800      	cmp	r0, #0
   27234:	d076      	beq.n	27324 <nrf_modem_at_cmd+0x104>
   27236:	2e00      	cmp	r6, #0
   27238:	d077      	beq.n	2732a <nrf_modem_at_cmd+0x10a>
   2723a:	2c00      	cmp	r4, #0
   2723c:	d075      	beq.n	2732a <nrf_modem_at_cmd+0x10a>
   2723e:	2d00      	cmp	r5, #0
   27240:	d076      	beq.n	27330 <nrf_modem_at_cmd+0x110>
   27242:	4622      	mov	r2, r4
   27244:	ab0d      	add	r3, sp, #52	; 0x34
   27246:	a903      	add	r1, sp, #12
   27248:	a802      	add	r0, sp, #8
   2724a:	9301      	str	r3, [sp, #4]
   2724c:	f7ff ff6e 	bl	2712c <at_vsprintf>
   27250:	4604      	mov	r4, r0
   27252:	bba0      	cbnz	r0, 272be <nrf_modem_at_cmd+0x9e>
   27254:	4b38      	ldr	r3, [pc, #224]	; (27338 <nrf_modem_at_cmd+0x118>)
   27256:	9f02      	ldr	r7, [sp, #8]
   27258:	f8d3 8000 	ldr.w	r8, [r3]
   2725c:	f1b8 0f00 	cmp.w	r8, #0
   27260:	d00f      	beq.n	27282 <nrf_modem_at_cmd+0x62>
   27262:	4b36      	ldr	r3, [pc, #216]	; (2733c <nrf_modem_at_cmd+0x11c>)
   27264:	f8d3 9000 	ldr.w	r9, [r3]
   27268:	454c      	cmp	r4, r9
   2726a:	d00a      	beq.n	27282 <nrf_modem_at_cmd+0x62>
   2726c:	4638      	mov	r0, r7
   2726e:	f858 1034 	ldr.w	r1, [r8, r4, lsl #3]
   27272:	f00f fb1e 	bl	368b2 <strstr>
   27276:	b198      	cbz	r0, 272a0 <nrf_modem_at_cmd+0x80>
   27278:	eb08 08c4 	add.w	r8, r8, r4, lsl #3
   2727c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   27280:	b983      	cbnz	r3, 272a4 <nrf_modem_at_cmd+0x84>
   27282:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 27340 <nrf_modem_at_cmd+0x120>
   27286:	f04f 31ff 	mov.w	r1, #4294967295
   2728a:	f8d8 0000 	ldr.w	r0, [r8]
   2728e:	f7fa fa99 	bl	217c4 <nrf_modem_os_sem_take>
   27292:	b1d0      	cbz	r0, 272ca <nrf_modem_at_cmd+0xaa>
   27294:	4638      	mov	r0, r7
   27296:	f00e f8bc 	bl	35412 <rpc_client_msg_data_tx_free>
   2729a:	f06f 040a 	mvn.w	r4, #10
   2729e:	e00e      	b.n	272be <nrf_modem_at_cmd+0x9e>
   272a0:	3401      	adds	r4, #1
   272a2:	e7e1      	b.n	27268 <nrf_modem_at_cmd+0x48>
   272a4:	463a      	mov	r2, r7
   272a6:	4629      	mov	r1, r5
   272a8:	4630      	mov	r0, r6
   272aa:	4798      	blx	r3
   272ac:	4604      	mov	r4, r0
   272ae:	b918      	cbnz	r0, 272b8 <nrf_modem_at_cmd+0x98>
   272b0:	4630      	mov	r0, r6
   272b2:	f7ff ff17 	bl	270e4 <at_response_match>
   272b6:	4604      	mov	r4, r0
   272b8:	4638      	mov	r0, r7
   272ba:	f00e f8aa 	bl	35412 <rpc_client_msg_data_tx_free>
   272be:	4620      	mov	r0, r4
   272c0:	b005      	add	sp, #20
   272c2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   272c6:	b002      	add	sp, #8
   272c8:	4770      	bx	lr
   272ca:	2302      	movs	r3, #2
   272cc:	2201      	movs	r2, #1
   272ce:	4638      	mov	r0, r7
   272d0:	9903      	ldr	r1, [sp, #12]
   272d2:	f7ff fecd 	bl	27070 <at_cmd_send>
   272d6:	4604      	mov	r4, r0
   272d8:	b120      	cbz	r0, 272e4 <nrf_modem_at_cmd+0xc4>
   272da:	f8d8 0000 	ldr.w	r0, [r8]
   272de:	f7fa fa4d 	bl	2177c <nrf_modem_os_sem_give>
   272e2:	e7ec      	b.n	272be <nrf_modem_at_cmd+0x9e>
   272e4:	4f17      	ldr	r7, [pc, #92]	; (27344 <nrf_modem_at_cmd+0x124>)
   272e6:	4630      	mov	r0, r6
   272e8:	683c      	ldr	r4, [r7, #0]
   272ea:	6862      	ldr	r2, [r4, #4]
   272ec:	6821      	ldr	r1, [r4, #0]
   272ee:	42aa      	cmp	r2, r5
   272f0:	bf28      	it	cs
   272f2:	462a      	movcs	r2, r5
   272f4:	f00f f918 	bl	36528 <memcpy>
   272f8:	6863      	ldr	r3, [r4, #4]
   272fa:	42ab      	cmp	r3, r5
   272fc:	d80f      	bhi.n	2731e <nrf_modem_at_cmd+0xfe>
   272fe:	6820      	ldr	r0, [r4, #0]
   27300:	f7ff fef0 	bl	270e4 <at_response_match>
   27304:	4604      	mov	r4, r0
   27306:	f8d8 0000 	ldr.w	r0, [r8]
   2730a:	f7fa fa37 	bl	2177c <nrf_modem_os_sem_give>
   2730e:	683b      	ldr	r3, [r7, #0]
   27310:	6818      	ldr	r0, [r3, #0]
   27312:	f00e f878 	bl	35406 <rpc_client_msg_data_rx_free>
   27316:	6838      	ldr	r0, [r7, #0]
   27318:	f00e f872 	bl	35400 <rpc_client_msg_rx_free>
   2731c:	e7cf      	b.n	272be <nrf_modem_at_cmd+0x9e>
   2731e:	f06f 0406 	mvn.w	r4, #6
   27322:	e7f0      	b.n	27306 <nrf_modem_at_cmd+0xe6>
   27324:	f04f 34ff 	mov.w	r4, #4294967295
   27328:	e7c9      	b.n	272be <nrf_modem_at_cmd+0x9e>
   2732a:	f06f 040d 	mvn.w	r4, #13
   2732e:	e7c6      	b.n	272be <nrf_modem_at_cmd+0x9e>
   27330:	f06f 0415 	mvn.w	r4, #21
   27334:	e7c3      	b.n	272be <nrf_modem_at_cmd+0x9e>
   27336:	bf00      	nop
   27338:	2000eb5c 	.word	0x2000eb5c
   2733c:	2000eb58 	.word	0x2000eb58
   27340:	2000eb6c 	.word	0x2000eb6c
   27344:	2000eb68 	.word	0x2000eb68

00027348 <nrf_modem_at_scanf>:
   27348:	b40e      	push	{r1, r2, r3}
   2734a:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
   2734c:	9f07      	ldr	r7, [sp, #28]
   2734e:	4606      	mov	r6, r0
   27350:	f001 f9b2 	bl	286b8 <nrf_modem_state_is_initialized>
   27354:	2800      	cmp	r0, #0
   27356:	d042      	beq.n	273de <nrf_modem_at_scanf+0x96>
   27358:	2e00      	cmp	r6, #0
   2735a:	d043      	beq.n	273e4 <nrf_modem_at_scanf+0x9c>
   2735c:	2f00      	cmp	r7, #0
   2735e:	d041      	beq.n	273e4 <nrf_modem_at_scanf+0x9c>
   27360:	4630      	mov	r0, r6
   27362:	f7e1 ff5e 	bl	9222 <strlen>
   27366:	1c45      	adds	r5, r0, #1
   27368:	4628      	mov	r0, r5
   2736a:	f00e f850 	bl	3540e <rpc_client_msg_data_tx_alloc>
   2736e:	4604      	mov	r4, r0
   27370:	2800      	cmp	r0, #0
   27372:	d03a      	beq.n	273ea <nrf_modem_at_scanf+0xa2>
   27374:	4631      	mov	r1, r6
   27376:	4e1e      	ldr	r6, [pc, #120]	; (273f0 <nrf_modem_at_scanf+0xa8>)
   27378:	462a      	mov	r2, r5
   2737a:	f00f fa7b 	bl	36874 <strncpy>
   2737e:	f04f 31ff 	mov.w	r1, #4294967295
   27382:	6830      	ldr	r0, [r6, #0]
   27384:	f7fa fa1e 	bl	217c4 <nrf_modem_os_sem_take>
   27388:	b150      	cbz	r0, 273a0 <nrf_modem_at_scanf+0x58>
   2738a:	4620      	mov	r0, r4
   2738c:	f00e f841 	bl	35412 <rpc_client_msg_data_tx_free>
   27390:	f06f 040a 	mvn.w	r4, #10
   27394:	4620      	mov	r0, r4
   27396:	b002      	add	sp, #8
   27398:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2739c:	b003      	add	sp, #12
   2739e:	4770      	bx	lr
   273a0:	4620      	mov	r0, r4
   273a2:	2302      	movs	r3, #2
   273a4:	2201      	movs	r2, #1
   273a6:	4629      	mov	r1, r5
   273a8:	f7ff fe62 	bl	27070 <at_cmd_send>
   273ac:	4604      	mov	r4, r0
   273ae:	b990      	cbnz	r0, 273d6 <nrf_modem_at_scanf+0x8e>
   273b0:	4d10      	ldr	r5, [pc, #64]	; (273f4 <nrf_modem_at_scanf+0xac>)
   273b2:	aa08      	add	r2, sp, #32
   273b4:	682b      	ldr	r3, [r5, #0]
   273b6:	4639      	mov	r1, r7
   273b8:	6818      	ldr	r0, [r3, #0]
   273ba:	9201      	str	r2, [sp, #4]
   273bc:	f005 feea 	bl	2d194 <vsiscanf>
   273c0:	682b      	ldr	r3, [r5, #0]
   273c2:	1e04      	subs	r4, r0, #0
   273c4:	6818      	ldr	r0, [r3, #0]
   273c6:	bf08      	it	eq
   273c8:	f06f 044c 	mvneq.w	r4, #76	; 0x4c
   273cc:	f00e f81b 	bl	35406 <rpc_client_msg_data_rx_free>
   273d0:	6828      	ldr	r0, [r5, #0]
   273d2:	f00e f815 	bl	35400 <rpc_client_msg_rx_free>
   273d6:	6830      	ldr	r0, [r6, #0]
   273d8:	f7fa f9d0 	bl	2177c <nrf_modem_os_sem_give>
   273dc:	e7da      	b.n	27394 <nrf_modem_at_scanf+0x4c>
   273de:	f04f 34ff 	mov.w	r4, #4294967295
   273e2:	e7d7      	b.n	27394 <nrf_modem_at_scanf+0x4c>
   273e4:	f06f 040d 	mvn.w	r4, #13
   273e8:	e7d4      	b.n	27394 <nrf_modem_at_scanf+0x4c>
   273ea:	f06f 040b 	mvn.w	r4, #11
   273ee:	e7d1      	b.n	27394 <nrf_modem_at_scanf+0x4c>
   273f0:	2000eb6c 	.word	0x2000eb6c
   273f4:	2000eb68 	.word	0x2000eb68

000273f8 <rpc_at_event_handler>:
   273f8:	b538      	push	{r3, r4, r5, lr}
   273fa:	68c3      	ldr	r3, [r0, #12]
   273fc:	4604      	mov	r4, r0
   273fe:	2ba7      	cmp	r3, #167	; 0xa7
   27400:	d003      	beq.n	2740a <rpc_at_event_handler+0x12>
   27402:	6820      	ldr	r0, [r4, #0]
   27404:	f00d ffff 	bl	35406 <rpc_client_msg_data_rx_free>
   27408:	e008      	b.n	2741c <rpc_at_event_handler+0x24>
   2740a:	2903      	cmp	r1, #3
   2740c:	d008      	beq.n	27420 <rpc_at_event_handler+0x28>
   2740e:	2904      	cmp	r1, #4
   27410:	d021      	beq.n	27456 <rpc_at_event_handler+0x5e>
   27412:	2902      	cmp	r1, #2
   27414:	bf02      	ittt	eq
   27416:	2201      	moveq	r2, #1
   27418:	4b12      	ldreq	r3, [pc, #72]	; (27464 <rpc_at_event_handler+0x6c>)
   2741a:	701a      	strbeq	r2, [r3, #0]
   2741c:	2000      	movs	r0, #0
   2741e:	bd38      	pop	{r3, r4, r5, pc}
   27420:	4d11      	ldr	r5, [pc, #68]	; (27468 <rpc_at_event_handler+0x70>)
   27422:	682b      	ldr	r3, [r5, #0]
   27424:	b13b      	cbz	r3, 27436 <rpc_at_event_handler+0x3e>
   27426:	6800      	ldr	r0, [r0, #0]
   27428:	4798      	blx	r3
   2742a:	2300      	movs	r3, #0
   2742c:	6820      	ldr	r0, [r4, #0]
   2742e:	602b      	str	r3, [r5, #0]
   27430:	f00d ffe9 	bl	35406 <rpc_client_msg_data_rx_free>
   27434:	e006      	b.n	27444 <rpc_at_event_handler+0x4c>
   27436:	4b0b      	ldr	r3, [pc, #44]	; (27464 <rpc_at_event_handler+0x6c>)
   27438:	781a      	ldrb	r2, [r3, #0]
   2743a:	2a02      	cmp	r2, #2
   2743c:	d105      	bne.n	2744a <rpc_at_event_handler+0x52>
   2743e:	6800      	ldr	r0, [r0, #0]
   27440:	2800      	cmp	r0, #0
   27442:	d1f5      	bne.n	27430 <rpc_at_event_handler+0x38>
   27444:	2000      	movs	r0, #0
   27446:	b2c0      	uxtb	r0, r0
   27448:	e7e9      	b.n	2741e <rpc_at_event_handler+0x26>
   2744a:	4a08      	ldr	r2, [pc, #32]	; (2746c <rpc_at_event_handler+0x74>)
   2744c:	6010      	str	r0, [r2, #0]
   2744e:	2202      	movs	r2, #2
   27450:	2001      	movs	r0, #1
   27452:	701a      	strb	r2, [r3, #0]
   27454:	e7f7      	b.n	27446 <rpc_at_event_handler+0x4e>
   27456:	4b06      	ldr	r3, [pc, #24]	; (27470 <rpc_at_event_handler+0x78>)
   27458:	681b      	ldr	r3, [r3, #0]
   2745a:	2b00      	cmp	r3, #0
   2745c:	d0d1      	beq.n	27402 <rpc_at_event_handler+0xa>
   2745e:	6800      	ldr	r0, [r0, #0]
   27460:	4798      	blx	r3
   27462:	e7ce      	b.n	27402 <rpc_at_event_handler+0xa>
   27464:	20010777 	.word	0x20010777
   27468:	2000eb60 	.word	0x2000eb60
   2746c:	2000eb68 	.word	0x2000eb68
   27470:	2000eb64 	.word	0x2000eb64

00027474 <rpc_at_init>:
   27474:	2201      	movs	r2, #1
   27476:	b510      	push	{r4, lr}
   27478:	4611      	mov	r1, r2
   2747a:	4807      	ldr	r0, [pc, #28]	; (27498 <rpc_at_init+0x24>)
   2747c:	f7fa f94a 	bl	21714 <nrf_modem_os_sem_init>
   27480:	4601      	mov	r1, r0
   27482:	b928      	cbnz	r0, 27490 <rpc_at_init+0x1c>
   27484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   27488:	2301      	movs	r3, #1
   2748a:	2205      	movs	r2, #5
   2748c:	f7ff bdf0 	b.w	27070 <at_cmd_send>
   27490:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   27494:	bd10      	pop	{r4, pc}
   27496:	bf00      	nop
   27498:	2000eb6c 	.word	0x2000eb6c

0002749c <sock_init>:
   2749c:	f44f 7248 	mov.w	r2, #800	; 0x320
   274a0:	2100      	movs	r1, #0
   274a2:	b508      	push	{r3, lr}
   274a4:	4808      	ldr	r0, [pc, #32]	; (274c8 <sock_init+0x2c>)
   274a6:	f00f f85f 	bl	36568 <memset>
   274aa:	2300      	movs	r3, #0
   274ac:	4619      	mov	r1, r3
   274ae:	4a07      	ldr	r2, [pc, #28]	; (274cc <sock_init+0x30>)
   274b0:	4807      	ldr	r0, [pc, #28]	; (274d0 <sock_init+0x34>)
   274b2:	7013      	strb	r3, [r2, #0]
   274b4:	4a04      	ldr	r2, [pc, #16]	; (274c8 <sock_init+0x2c>)
   274b6:	3301      	adds	r3, #1
   274b8:	2b08      	cmp	r3, #8
   274ba:	e9c2 0100 	strd	r0, r1, [r2]
   274be:	6091      	str	r1, [r2, #8]
   274c0:	f102 0264 	add.w	r2, r2, #100	; 0x64
   274c4:	d1f7      	bne.n	274b6 <sock_init+0x1a>
   274c6:	bd08      	pop	{r3, pc}
   274c8:	2000eb70 	.word	0x2000eb70
   274cc:	20010778 	.word	0x20010778
   274d0:	1badf11e 	.word	0x1badf11e

000274d4 <sock_open>:
   274d4:	b570      	push	{r4, r5, r6, lr}
   274d6:	2300      	movs	r3, #0
   274d8:	2464      	movs	r4, #100	; 0x64
   274da:	4a0e      	ldr	r2, [pc, #56]	; (27514 <sock_open+0x40>)
   274dc:	4d0e      	ldr	r5, [pc, #56]	; (27518 <sock_open+0x44>)
   274de:	fb04 f103 	mul.w	r1, r4, r3
   274e2:	5856      	ldr	r6, [r2, r1]
   274e4:	1888      	adds	r0, r1, r2
   274e6:	42ae      	cmp	r6, r5
   274e8:	d10e      	bne.n	27508 <sock_open+0x34>
   274ea:	f04f 33ff 	mov.w	r3, #4294967295
   274ee:	5053      	str	r3, [r2, r1]
   274f0:	4a0a      	ldr	r2, [pc, #40]	; (2751c <sock_open+0x48>)
   274f2:	7f03      	ldrb	r3, [r0, #28]
   274f4:	7812      	ldrb	r2, [r2, #0]
   274f6:	f362 1386 	bfi	r3, r2, #6, #1
   274fa:	7703      	strb	r3, [r0, #28]
   274fc:	2302      	movs	r3, #2
   274fe:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
   27502:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
   27506:	bd70      	pop	{r4, r5, r6, pc}
   27508:	3301      	adds	r3, #1
   2750a:	2b08      	cmp	r3, #8
   2750c:	d1e7      	bne.n	274de <sock_open+0xa>
   2750e:	2000      	movs	r0, #0
   27510:	e7f9      	b.n	27506 <sock_open+0x32>
   27512:	bf00      	nop
   27514:	2000eb70 	.word	0x2000eb70
   27518:	1badf11e 	.word	0x1badf11e
   2751c:	20010778 	.word	0x20010778

00027520 <sock_find>:
   27520:	b530      	push	{r4, r5, lr}
   27522:	4602      	mov	r2, r0
   27524:	2300      	movs	r3, #0
   27526:	2564      	movs	r5, #100	; 0x64
   27528:	4905      	ldr	r1, [pc, #20]	; (27540 <sock_find+0x20>)
   2752a:	fb05 f403 	mul.w	r4, r5, r3
   2752e:	1860      	adds	r0, r4, r1
   27530:	590c      	ldr	r4, [r1, r4]
   27532:	4294      	cmp	r4, r2
   27534:	d003      	beq.n	2753e <sock_find+0x1e>
   27536:	3301      	adds	r3, #1
   27538:	2b08      	cmp	r3, #8
   2753a:	d1f6      	bne.n	2752a <sock_find+0xa>
   2753c:	2000      	movs	r0, #0
   2753e:	bd30      	pop	{r4, r5, pc}
   27540:	2000eb70 	.word	0x2000eb70

00027544 <_sock_close>:
   27544:	b538      	push	{r3, r4, r5, lr}
   27546:	f7ff ffeb 	bl	27520 <sock_find>
   2754a:	4604      	mov	r4, r0
   2754c:	1d05      	adds	r5, r0, #4
   2754e:	4628      	mov	r0, r5
   27550:	f00e f8e9 	bl	35726 <pkt_flush>
   27554:	6c20      	ldr	r0, [r4, #64]	; 0x40
   27556:	b108      	cbz	r0, 2755c <_sock_close+0x18>
   27558:	f7fa f998 	bl	2188c <nrf_modem_os_free>
   2755c:	2260      	movs	r2, #96	; 0x60
   2755e:	2100      	movs	r1, #0
   27560:	4628      	mov	r0, r5
   27562:	f00f f801 	bl	36568 <memset>
   27566:	4b01      	ldr	r3, [pc, #4]	; (2756c <_sock_close+0x28>)
   27568:	6023      	str	r3, [r4, #0]
   2756a:	bd38      	pop	{r3, r4, r5, pc}
   2756c:	1badf11e 	.word	0x1badf11e

00027570 <sock_shutdown>:
   27570:	b570      	push	{r4, r5, r6, lr}
   27572:	2400      	movs	r4, #0
   27574:	4d05      	ldr	r5, [pc, #20]	; (2758c <sock_shutdown+0x1c>)
   27576:	4e06      	ldr	r6, [pc, #24]	; (27590 <sock_shutdown+0x20>)
   27578:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   2757c:	42b0      	cmp	r0, r6
   2757e:	d001      	beq.n	27584 <sock_shutdown+0x14>
   27580:	f7ff ffe0 	bl	27544 <_sock_close>
   27584:	3419      	adds	r4, #25
   27586:	2cc8      	cmp	r4, #200	; 0xc8
   27588:	d1f6      	bne.n	27578 <sock_shutdown+0x8>
   2758a:	bd70      	pop	{r4, r5, r6, pc}
   2758c:	2000eb70 	.word	0x2000eb70
   27590:	1badf11e 	.word	0x1badf11e

00027594 <sock_flow_control_set>:
   27594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27598:	1e02      	subs	r2, r0, #0
   2759a:	4c10      	ldr	r4, [pc, #64]	; (275dc <sock_flow_control_set+0x48>)
   2759c:	bf18      	it	ne
   2759e:	2201      	movne	r2, #1
   275a0:	4606      	mov	r6, r0
   275a2:	2500      	movs	r5, #0
   275a4:	46a0      	mov	r8, r4
   275a6:	f04f 0964 	mov.w	r9, #100	; 0x64
   275aa:	4b0d      	ldr	r3, [pc, #52]	; (275e0 <sock_flow_control_set+0x4c>)
   275ac:	4f0d      	ldr	r7, [pc, #52]	; (275e4 <sock_flow_control_set+0x50>)
   275ae:	701a      	strb	r2, [r3, #0]
   275b0:	6823      	ldr	r3, [r4, #0]
   275b2:	42bb      	cmp	r3, r7
   275b4:	d00a      	beq.n	275cc <sock_flow_control_set+0x38>
   275b6:	fb09 8305 	mla	r3, r9, r5, r8
   275ba:	7f1a      	ldrb	r2, [r3, #28]
   275bc:	f366 1286 	bfi	r2, r6, #6, #1
   275c0:	771a      	strb	r2, [r3, #28]
   275c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   275c4:	b113      	cbz	r3, 275cc <sock_flow_control_set+0x38>
   275c6:	4620      	mov	r0, r4
   275c8:	f00d ff64 	bl	35494 <sock_pollcb>
   275cc:	3501      	adds	r5, #1
   275ce:	2d08      	cmp	r5, #8
   275d0:	f104 0464 	add.w	r4, r4, #100	; 0x64
   275d4:	d1ec      	bne.n	275b0 <sock_flow_control_set+0x1c>
   275d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   275da:	bf00      	nop
   275dc:	2000eb70 	.word	0x2000eb70
   275e0:	20010778 	.word	0x20010778
   275e4:	1badf11e 	.word	0x1badf11e

000275e8 <sock_proto_is_valid>:
   275e8:	2811      	cmp	r0, #17
   275ea:	dc06      	bgt.n	275fa <sock_proto_is_valid+0x12>
   275ec:	2800      	cmp	r0, #0
   275ee:	db0d      	blt.n	2760c <sock_proto_is_valid+0x24>
   275f0:	4b08      	ldr	r3, [pc, #32]	; (27614 <sock_proto_is_valid+0x2c>)
   275f2:	40c3      	lsrs	r3, r0
   275f4:	f003 0001 	and.w	r0, r3, #1
   275f8:	4770      	bx	lr
   275fa:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   275fe:	d007      	beq.n	27610 <sock_proto_is_valid+0x28>
   27600:	f240 1311 	movw	r3, #273	; 0x111
   27604:	1ac3      	subs	r3, r0, r3
   27606:	4258      	negs	r0, r3
   27608:	4158      	adcs	r0, r3
   2760a:	4770      	bx	lr
   2760c:	2000      	movs	r0, #0
   2760e:	4770      	bx	lr
   27610:	2001      	movs	r0, #1
   27612:	4770      	bx	lr
   27614:	00020041 	.word	0x00020041

00027618 <on_getaddrinfo_res>:
   27618:	2301      	movs	r3, #1
   2761a:	4a03      	ldr	r2, [pc, #12]	; (27628 <on_getaddrinfo_res+0x10>)
   2761c:	7013      	strb	r3, [r2, #0]
   2761e:	4a03      	ldr	r2, [pc, #12]	; (2762c <on_getaddrinfo_res+0x14>)
   27620:	6010      	str	r0, [r2, #0]
   27622:	4618      	mov	r0, r3
   27624:	4770      	bx	lr
   27626:	bf00      	nop
   27628:	20010779 	.word	0x20010779
   2762c:	2000ee90 	.word	0x2000ee90

00027630 <addrinfo_init>:
   27630:	2201      	movs	r2, #1
   27632:	b508      	push	{r3, lr}
   27634:	4611      	mov	r1, r2
   27636:	4804      	ldr	r0, [pc, #16]	; (27648 <addrinfo_init+0x18>)
   27638:	f7fa f86c 	bl	21714 <nrf_modem_os_sem_init>
   2763c:	2800      	cmp	r0, #0
   2763e:	bf18      	it	ne
   27640:	f06f 002d 	mvnne.w	r0, #45	; 0x2d
   27644:	bd08      	pop	{r3, pc}
   27646:	bf00      	nop
   27648:	2000ee94 	.word	0x2000ee94

0002764c <nrf_getaddrinfo>:
   2764c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27650:	b085      	sub	sp, #20
   27652:	4682      	mov	sl, r0
   27654:	460f      	mov	r7, r1
   27656:	4616      	mov	r6, r2
   27658:	461d      	mov	r5, r3
   2765a:	f001 f82d 	bl	286b8 <nrf_modem_state_is_initialized>
   2765e:	b928      	cbnz	r0, 2766c <nrf_getaddrinfo+0x20>
   27660:	2001      	movs	r0, #1
   27662:	f7fa f839 	bl	216d8 <nrf_modem_os_errno_set>
   27666:	f06f 040a 	mvn.w	r4, #10
   2766a:	e01c      	b.n	276a6 <nrf_getaddrinfo+0x5a>
   2766c:	ea5a 0307 	orrs.w	r3, sl, r7
   27670:	f000 8158 	beq.w	27924 <nrf_getaddrinfo+0x2d8>
   27674:	b31e      	cbz	r6, 276be <nrf_getaddrinfo+0x72>
   27676:	6833      	ldr	r3, [r6, #0]
   27678:	f423 53a0 	bic.w	r3, r3, #5120	; 0x1400
   2767c:	f023 0302 	bic.w	r3, r3, #2
   27680:	2b00      	cmp	r3, #0
   27682:	f040 8152 	bne.w	2792a <nrf_getaddrinfo+0x2de>
   27686:	6870      	ldr	r0, [r6, #4]
   27688:	b938      	cbnz	r0, 2769a <nrf_getaddrinfo+0x4e>
   2768a:	68b0      	ldr	r0, [r6, #8]
   2768c:	b178      	cbz	r0, 276ae <nrf_getaddrinfo+0x62>
   2768e:	f00d ffe7 	bl	35660 <sock_type_is_valid>
   27692:	b960      	cbnz	r0, 276ae <nrf_getaddrinfo+0x62>
   27694:	f06f 0406 	mvn.w	r4, #6
   27698:	e005      	b.n	276a6 <nrf_getaddrinfo+0x5a>
   2769a:	f00d ffdb 	bl	35654 <sock_family_is_valid>
   2769e:	2800      	cmp	r0, #0
   276a0:	d1f3      	bne.n	2768a <nrf_getaddrinfo+0x3e>
   276a2:	f06f 0405 	mvn.w	r4, #5
   276a6:	4620      	mov	r0, r4
   276a8:	b005      	add	sp, #20
   276aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   276ae:	68f0      	ldr	r0, [r6, #12]
   276b0:	b128      	cbz	r0, 276be <nrf_getaddrinfo+0x72>
   276b2:	68b1      	ldr	r1, [r6, #8]
   276b4:	f00d ffda 	bl	3566c <sock_proto_supports_type>
   276b8:	b908      	cbnz	r0, 276be <nrf_getaddrinfo+0x72>
   276ba:	206b      	movs	r0, #107	; 0x6b
   276bc:	e7d1      	b.n	27662 <nrf_getaddrinfo+0x16>
   276be:	4b9e      	ldr	r3, [pc, #632]	; (27938 <nrf_getaddrinfo+0x2ec>)
   276c0:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
   276c4:	6818      	ldr	r0, [r3, #0]
   276c6:	f7fa f87d 	bl	217c4 <nrf_modem_os_sem_take>
   276ca:	4604      	mov	r4, r0
   276cc:	2800      	cmp	r0, #0
   276ce:	f040 812f 	bne.w	27930 <nrf_getaddrinfo+0x2e4>
   276d2:	2f00      	cmp	r7, #0
   276d4:	d062      	beq.n	2779c <nrf_getaddrinfo+0x150>
   276d6:	b1f6      	cbz	r6, 27716 <nrf_getaddrinfo+0xca>
   276d8:	6833      	ldr	r3, [r6, #0]
   276da:	f403 53a0 	and.w	r3, r3, #5120	; 0x1400
   276de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   276e2:	d118      	bne.n	27716 <nrf_getaddrinfo+0xca>
   276e4:	6833      	ldr	r3, [r6, #0]
   276e6:	04db      	lsls	r3, r3, #19
   276e8:	d443      	bmi.n	27772 <nrf_getaddrinfo+0x126>
   276ea:	f04f 38ff 	mov.w	r8, #4294967295
   276ee:	6870      	ldr	r0, [r6, #4]
   276f0:	b108      	cbz	r0, 276f6 <nrf_getaddrinfo+0xaa>
   276f2:	f000 fe6b 	bl	283cc <nrf_af_to_rpc_af>
   276f6:	4b91      	ldr	r3, [pc, #580]	; (2793c <nrf_getaddrinfo+0x2f0>)
   276f8:	4a91      	ldr	r2, [pc, #580]	; (27940 <nrf_getaddrinfo+0x2f4>)
   276fa:	6018      	str	r0, [r3, #0]
   276fc:	68b3      	ldr	r3, [r6, #8]
   276fe:	2b00      	cmp	r3, #0
   27700:	bf08      	it	eq
   27702:	2301      	moveq	r3, #1
   27704:	6013      	str	r3, [r2, #0]
   27706:	68f3      	ldr	r3, [r6, #12]
   27708:	4a8e      	ldr	r2, [pc, #568]	; (27944 <nrf_getaddrinfo+0x2f8>)
   2770a:	2b00      	cmp	r3, #0
   2770c:	bf08      	it	eq
   2770e:	2306      	moveq	r3, #6
   27710:	6013      	str	r3, [r2, #0]
   27712:	6833      	ldr	r3, [r6, #0]
   27714:	e01c      	b.n	27750 <nrf_getaddrinfo+0x104>
   27716:	220a      	movs	r2, #10
   27718:	2100      	movs	r1, #0
   2771a:	4638      	mov	r0, r7
   2771c:	f005 fcfe 	bl	2d11c <strtoul>
   27720:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   27724:	1e42      	subs	r2, r0, #1
   27726:	429a      	cmp	r2, r3
   27728:	f200 80f9 	bhi.w	2791e <nrf_getaddrinfo+0x2d2>
   2772c:	4a86      	ldr	r2, [pc, #536]	; (27948 <nrf_getaddrinfo+0x2fc>)
   2772e:	0203      	lsls	r3, r0, #8
   27730:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
   27734:	8013      	strh	r3, [r2, #0]
   27736:	2e00      	cmp	r6, #0
   27738:	d1d4      	bne.n	276e4 <nrf_getaddrinfo+0x98>
   2773a:	2300      	movs	r3, #0
   2773c:	2101      	movs	r1, #1
   2773e:	4a7f      	ldr	r2, [pc, #508]	; (2793c <nrf_getaddrinfo+0x2f0>)
   27740:	f04f 38ff 	mov.w	r8, #4294967295
   27744:	6013      	str	r3, [r2, #0]
   27746:	4a7e      	ldr	r2, [pc, #504]	; (27940 <nrf_getaddrinfo+0x2f4>)
   27748:	6011      	str	r1, [r2, #0]
   2774a:	2106      	movs	r1, #6
   2774c:	4a7d      	ldr	r2, [pc, #500]	; (27944 <nrf_getaddrinfo+0x2f8>)
   2774e:	6011      	str	r1, [r2, #0]
   27750:	4f7e      	ldr	r7, [pc, #504]	; (2794c <nrf_getaddrinfo+0x300>)
   27752:	4650      	mov	r0, sl
   27754:	603b      	str	r3, [r7, #0]
   27756:	f1ba 0f00 	cmp.w	sl, #0
   2775a:	d16f      	bne.n	2783c <nrf_getaddrinfo+0x1f0>
   2775c:	f00d fe2d 	bl	353ba <rpc_client_msg_alloc>
   27760:	4606      	mov	r6, r0
   27762:	bb00      	cbnz	r0, 277a6 <nrf_getaddrinfo+0x15a>
   27764:	f06f 0409 	mvn.w	r4, #9
   27768:	4b73      	ldr	r3, [pc, #460]	; (27938 <nrf_getaddrinfo+0x2ec>)
   2776a:	6818      	ldr	r0, [r3, #0]
   2776c:	f7fa f806 	bl	2177c <nrf_modem_os_sem_give>
   27770:	e799      	b.n	276a6 <nrf_getaddrinfo+0x5a>
   27772:	213a      	movs	r1, #58	; 0x3a
   27774:	4638      	mov	r0, r7
   27776:	f00f f856 	bl	36826 <strchr>
   2777a:	b100      	cbz	r0, 2777e <nrf_getaddrinfo+0x132>
   2777c:	1c47      	adds	r7, r0, #1
   2777e:	4638      	mov	r0, r7
   27780:	4973      	ldr	r1, [pc, #460]	; (27950 <nrf_getaddrinfo+0x304>)
   27782:	f00f f896 	bl	368b2 <strstr>
   27786:	220a      	movs	r2, #10
   27788:	b128      	cbz	r0, 27796 <nrf_getaddrinfo+0x14a>
   2778a:	2100      	movs	r1, #0
   2778c:	3003      	adds	r0, #3
   2778e:	f005 fbab 	bl	2cee8 <strtol>
   27792:	4680      	mov	r8, r0
   27794:	e7ab      	b.n	276ee <nrf_getaddrinfo+0xa2>
   27796:	4601      	mov	r1, r0
   27798:	4638      	mov	r0, r7
   2779a:	e7f8      	b.n	2778e <nrf_getaddrinfo+0x142>
   2779c:	4b6a      	ldr	r3, [pc, #424]	; (27948 <nrf_getaddrinfo+0x2fc>)
   2779e:	8018      	strh	r0, [r3, #0]
   277a0:	2e00      	cmp	r6, #0
   277a2:	d0ca      	beq.n	2773a <nrf_getaddrinfo+0xee>
   277a4:	e7a1      	b.n	276ea <nrf_getaddrinfo+0x9e>
   277a6:	f8c0 8010 	str.w	r8, [r0, #16]
   277aa:	4b64      	ldr	r3, [pc, #400]	; (2793c <nrf_getaddrinfo+0x2f0>)
   277ac:	f8df b190 	ldr.w	fp, [pc, #400]	; 27940 <nrf_getaddrinfo+0x2f4>
   277b0:	681b      	ldr	r3, [r3, #0]
   277b2:	f8df a190 	ldr.w	sl, [pc, #400]	; 27944 <nrf_getaddrinfo+0x2f8>
   277b6:	61b3      	str	r3, [r6, #24]
   277b8:	f8db 3000 	ldr.w	r3, [fp]
   277bc:	4632      	mov	r2, r6
   277be:	61f3      	str	r3, [r6, #28]
   277c0:	f8da 3000 	ldr.w	r3, [sl]
   277c4:	f247 010d 	movw	r1, #28685	; 0x700d
   277c8:	6233      	str	r3, [r6, #32]
   277ca:	683b      	ldr	r3, [r7, #0]
   277cc:	2004      	movs	r0, #4
   277ce:	6173      	str	r3, [r6, #20]
   277d0:	f00d fe0f 	bl	353f2 <rpc_client_msg_send>
   277d4:	2300      	movs	r3, #0
   277d6:	4e5f      	ldr	r6, [pc, #380]	; (27954 <nrf_getaddrinfo+0x308>)
   277d8:	7033      	strb	r3, [r6, #0]
   277da:	f04f 33ff 	mov.w	r3, #4294967295
   277de:	9303      	str	r3, [sp, #12]
   277e0:	7833      	ldrb	r3, [r6, #0]
   277e2:	2b01      	cmp	r3, #1
   277e4:	d13c      	bne.n	27860 <nrf_getaddrinfo+0x214>
   277e6:	f8df 8170 	ldr.w	r8, [pc, #368]	; 27958 <nrf_getaddrinfo+0x30c>
   277ea:	f8d8 3000 	ldr.w	r3, [r8]
   277ee:	6958      	ldr	r0, [r3, #20]
   277f0:	2800      	cmp	r0, #0
   277f2:	f040 8090 	bne.w	27916 <nrf_getaddrinfo+0x2ca>
   277f6:	2020      	movs	r0, #32
   277f8:	f8d3 9000 	ldr.w	r9, [r3]
   277fc:	f7fa f83e 	bl	2187c <nrf_modem_os_alloc>
   27800:	6028      	str	r0, [r5, #0]
   27802:	b170      	cbz	r0, 27822 <nrf_getaddrinfo+0x1d6>
   27804:	f109 0318 	add.w	r3, r9, #24
   27808:	4a4f      	ldr	r2, [pc, #316]	; (27948 <nrf_getaddrinfo+0x2fc>)
   2780a:	9301      	str	r3, [sp, #4]
   2780c:	4618      	mov	r0, r3
   2780e:	8812      	ldrh	r2, [r2, #0]
   27810:	f8b9 1014 	ldrh.w	r1, [r9, #20]
   27814:	f00d fe05 	bl	35422 <sockaddr_init>
   27818:	4606      	mov	r6, r0
   2781a:	bb68      	cbnz	r0, 27878 <nrf_getaddrinfo+0x22c>
   2781c:	6828      	ldr	r0, [r5, #0]
   2781e:	f7fa f835 	bl	2188c <nrf_modem_os_free>
   27822:	f06f 0409 	mvn.w	r4, #9
   27826:	f8d8 3000 	ldr.w	r3, [r8]
   2782a:	6818      	ldr	r0, [r3, #0]
   2782c:	b108      	cbz	r0, 27832 <nrf_getaddrinfo+0x1e6>
   2782e:	f00d fdea 	bl	35406 <rpc_client_msg_data_rx_free>
   27832:	f8d8 0000 	ldr.w	r0, [r8]
   27836:	f00d fde3 	bl	35400 <rpc_client_msg_rx_free>
   2783a:	e795      	b.n	27768 <nrf_getaddrinfo+0x11c>
   2783c:	f7e1 fcf1 	bl	9222 <strlen>
   27840:	f00d fdbb 	bl	353ba <rpc_client_msg_alloc>
   27844:	4606      	mov	r6, r0
   27846:	2800      	cmp	r0, #0
   27848:	d08c      	beq.n	27764 <nrf_getaddrinfo+0x118>
   2784a:	f8c0 8010 	str.w	r8, [r0, #16]
   2784e:	4650      	mov	r0, sl
   27850:	f7e1 fce7 	bl	9222 <strlen>
   27854:	4651      	mov	r1, sl
   27856:	4602      	mov	r2, r0
   27858:	6830      	ldr	r0, [r6, #0]
   2785a:	f00e fe65 	bl	36528 <memcpy>
   2785e:	e7a4      	b.n	277aa <nrf_getaddrinfo+0x15e>
   27860:	2002      	movs	r0, #2
   27862:	a903      	add	r1, sp, #12
   27864:	f7f9 fe76 	bl	21554 <nrf_modem_os_timedwait>
   27868:	2800      	cmp	r0, #0
   2786a:	d0b9      	beq.n	277e0 <nrf_getaddrinfo+0x194>
   2786c:	206e      	movs	r0, #110	; 0x6e
   2786e:	f7f9 ff33 	bl	216d8 <nrf_modem_os_errno_set>
   27872:	f06f 040a 	mvn.w	r4, #10
   27876:	e777      	b.n	27768 <nrf_getaddrinfo+0x11c>
   27878:	f8d9 2008 	ldr.w	r2, [r9, #8]
   2787c:	2a01      	cmp	r2, #1
   2787e:	d004      	beq.n	2788a <nrf_getaddrinfo+0x23e>
   27880:	2a02      	cmp	r2, #2
   27882:	d01a      	beq.n	278ba <nrf_getaddrinfo+0x26e>
   27884:	f06f 0405 	mvn.w	r4, #5
   27888:	e7cd      	b.n	27826 <nrf_getaddrinfo+0x1da>
   2788a:	2110      	movs	r1, #16
   2788c:	682a      	ldr	r2, [r5, #0]
   2788e:	6111      	str	r1, [r2, #16]
   27890:	683a      	ldr	r2, [r7, #0]
   27892:	6829      	ldr	r1, [r5, #0]
   27894:	f012 0202 	ands.w	r2, r2, #2
   27898:	d03b      	beq.n	27912 <nrf_getaddrinfo+0x2c6>
   2789a:	9101      	str	r1, [sp, #4]
   2789c:	f8b9 0016 	ldrh.w	r0, [r9, #22]
   278a0:	3001      	adds	r0, #1
   278a2:	f7f9 ffeb 	bl	2187c <nrf_modem_os_alloc>
   278a6:	9901      	ldr	r1, [sp, #4]
   278a8:	6188      	str	r0, [r1, #24]
   278aa:	682a      	ldr	r2, [r5, #0]
   278ac:	6990      	ldr	r0, [r2, #24]
   278ae:	b938      	cbnz	r0, 278c0 <nrf_getaddrinfo+0x274>
   278b0:	4628      	mov	r0, r5
   278b2:	f7f9 ffeb 	bl	2188c <nrf_modem_os_free>
   278b6:	4630      	mov	r0, r6
   278b8:	e7b1      	b.n	2781e <nrf_getaddrinfo+0x1d2>
   278ba:	2124      	movs	r1, #36	; 0x24
   278bc:	682a      	ldr	r2, [r5, #0]
   278be:	e7e6      	b.n	2788e <nrf_getaddrinfo+0x242>
   278c0:	f8b9 1014 	ldrh.w	r1, [r9, #20]
   278c4:	f109 0318 	add.w	r3, r9, #24
   278c8:	440b      	add	r3, r1
   278ca:	4619      	mov	r1, r3
   278cc:	f8b9 2016 	ldrh.w	r2, [r9, #22]
   278d0:	f00e fe2a 	bl	36528 <memcpy>
   278d4:	2000      	movs	r0, #0
   278d6:	6829      	ldr	r1, [r5, #0]
   278d8:	f8b9 2016 	ldrh.w	r2, [r9, #22]
   278dc:	6989      	ldr	r1, [r1, #24]
   278de:	5488      	strb	r0, [r1, r2]
   278e0:	682a      	ldr	r2, [r5, #0]
   278e2:	9201      	str	r2, [sp, #4]
   278e4:	f8d9 0008 	ldr.w	r0, [r9, #8]
   278e8:	f00e fb0e 	bl	35f08 <rpc_af_to_nrf_af>
   278ec:	9a01      	ldr	r2, [sp, #4]
   278ee:	6050      	str	r0, [r2, #4]
   278f0:	682b      	ldr	r3, [r5, #0]
   278f2:	f8db 2000 	ldr.w	r2, [fp]
   278f6:	609a      	str	r2, [r3, #8]
   278f8:	682b      	ldr	r3, [r5, #0]
   278fa:	f8da 2000 	ldr.w	r2, [sl]
   278fe:	60da      	str	r2, [r3, #12]
   27900:	682b      	ldr	r3, [r5, #0]
   27902:	683a      	ldr	r2, [r7, #0]
   27904:	601a      	str	r2, [r3, #0]
   27906:	2200      	movs	r2, #0
   27908:	682b      	ldr	r3, [r5, #0]
   2790a:	615e      	str	r6, [r3, #20]
   2790c:	682b      	ldr	r3, [r5, #0]
   2790e:	61da      	str	r2, [r3, #28]
   27910:	e789      	b.n	27826 <nrf_getaddrinfo+0x1da>
   27912:	618a      	str	r2, [r1, #24]
   27914:	e7e4      	b.n	278e0 <nrf_getaddrinfo+0x294>
   27916:	f00e fb3d 	bl	35f94 <rpc_error_to_nrf_gai_errno>
   2791a:	4604      	mov	r4, r0
   2791c:	e783      	b.n	27826 <nrf_getaddrinfo+0x1da>
   2791e:	f06f 0407 	mvn.w	r4, #7
   27922:	e721      	b.n	27768 <nrf_getaddrinfo+0x11c>
   27924:	f06f 0401 	mvn.w	r4, #1
   27928:	e6bd      	b.n	276a6 <nrf_getaddrinfo+0x5a>
   2792a:	f04f 34ff 	mov.w	r4, #4294967295
   2792e:	e6ba      	b.n	276a6 <nrf_getaddrinfo+0x5a>
   27930:	f06f 0402 	mvn.w	r4, #2
   27934:	e6b7      	b.n	276a6 <nrf_getaddrinfo+0x5a>
   27936:	bf00      	nop
   27938:	2000ee94 	.word	0x2000ee94
   2793c:	2000eea0 	.word	0x2000eea0
   27940:	2000ee9c 	.word	0x2000ee9c
   27944:	2000ee98 	.word	0x2000ee98
   27948:	2000ef8a 	.word	0x2000ef8a
   2794c:	2000eea4 	.word	0x2000eea4
   27950:	00041307 	.word	0x00041307
   27954:	20010779 	.word	0x20010779
   27958:	2000ee90 	.word	0x2000ee90

0002795c <rpc_ip_event_handler>:
   2795c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2795e:	f248 030f 	movw	r3, #32783	; 0x800f
   27962:	4299      	cmp	r1, r3
   27964:	4606      	mov	r6, r0
   27966:	460d      	mov	r5, r1
   27968:	d03b      	beq.n	279e2 <rpc_ip_event_handler+0x86>
   2796a:	d822      	bhi.n	279b2 <rpc_ip_event_handler+0x56>
   2796c:	f248 030d 	movw	r3, #32781	; 0x800d
   27970:	4299      	cmp	r1, r3
   27972:	d02f      	beq.n	279d4 <rpc_ip_event_handler+0x78>
   27974:	f248 030e 	movw	r3, #32782	; 0x800e
   27978:	4299      	cmp	r1, r3
   2797a:	d02f      	beq.n	279dc <rpc_ip_event_handler+0x80>
   2797c:	6900      	ldr	r0, [r0, #16]
   2797e:	f7ff fdcf 	bl	27520 <sock_find>
   27982:	4604      	mov	r4, r0
   27984:	b308      	cbz	r0, 279ca <rpc_ip_event_handler+0x6e>
   27986:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   2798a:	d91e      	bls.n	279ca <rpc_ip_event_handler+0x6e>
   2798c:	f5a5 4500 	sub.w	r5, r5, #32768	; 0x8000
   27990:	3d01      	subs	r5, #1
   27992:	2d0b      	cmp	r5, #11
   27994:	d819      	bhi.n	279ca <rpc_ip_event_handler+0x6e>
   27996:	e8df f015 	tbh	[pc, r5, lsl #1]
   2799a:	0090      	.short	0x0090
   2799c:	009400b3 	.word	0x009400b3
   279a0:	00940094 	.word	0x00940094
   279a4:	00ee00ee 	.word	0x00ee00ee
   279a8:	00990094 	.word	0x00990094
   279ac:	00180018 	.word	0x00180018
   279b0:	00d2      	.short	0x00d2
   279b2:	f249 0304 	movw	r3, #36868	; 0x9004
   279b6:	4299      	cmp	r1, r3
   279b8:	d016      	beq.n	279e8 <rpc_ip_event_handler+0x8c>
   279ba:	f5b1 4f10 	cmp.w	r1, #36864	; 0x9000
   279be:	d924      	bls.n	27a0a <rpc_ip_event_handler+0xae>
   279c0:	68c0      	ldr	r0, [r0, #12]
   279c2:	f7ff fdad 	bl	27520 <sock_find>
   279c6:	4604      	mov	r4, r0
   279c8:	bb70      	cbnz	r0, 27a28 <rpc_ip_event_handler+0xcc>
   279ca:	6830      	ldr	r0, [r6, #0]
   279cc:	b1b0      	cbz	r0, 279fc <rpc_ip_event_handler+0xa0>
   279ce:	f00d fd1a 	bl	35406 <rpc_client_msg_data_rx_free>
   279d2:	e013      	b.n	279fc <rpc_ip_event_handler+0xa0>
   279d4:	f7ff fe20 	bl	27618 <on_getaddrinfo_res>
   279d8:	b2c0      	uxtb	r0, r0
   279da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   279dc:	f00d fec4 	bl	35768 <on_getifaddrs_res>
   279e0:	e7fa      	b.n	279d8 <rpc_ip_event_handler+0x7c>
   279e2:	f00d feae 	bl	35742 <on_conf_dnssrv_res>
   279e6:	e7f7      	b.n	279d8 <rpc_ip_event_handler+0x7c>
   279e8:	6903      	ldr	r3, [r0, #16]
   279ea:	2b03      	cmp	r3, #3
   279ec:	d806      	bhi.n	279fc <rpc_ip_event_handler+0xa0>
   279ee:	e8df f003 	tbb	[pc, r3]
   279f2:	0a02      	.short	0x0a02
   279f4:	0702      	.short	0x0702
   279f6:	2000      	movs	r0, #0
   279f8:	f7ff fdcc 	bl	27594 <sock_flow_control_set>
   279fc:	2000      	movs	r0, #0
   279fe:	e7ec      	b.n	279da <rpc_ip_event_handler+0x7e>
   27a00:	2201      	movs	r2, #1
   27a02:	4b65      	ldr	r3, [pc, #404]	; (27b98 <rpc_ip_event_handler+0x23c>)
   27a04:	701a      	strb	r2, [r3, #0]
   27a06:	2001      	movs	r0, #1
   27a08:	e7f6      	b.n	279f8 <rpc_ip_event_handler+0x9c>
   27a0a:	6900      	ldr	r0, [r0, #16]
   27a0c:	f7ff fd88 	bl	27520 <sock_find>
   27a10:	4604      	mov	r4, r0
   27a12:	2800      	cmp	r0, #0
   27a14:	d0d9      	beq.n	279ca <rpc_ip_event_handler+0x6e>
   27a16:	f248 0381 	movw	r3, #32897	; 0x8081
   27a1a:	429d      	cmp	r5, r3
   27a1c:	d1d5      	bne.n	279ca <rpc_ip_event_handler+0x6e>
   27a1e:	4601      	mov	r1, r0
   27a20:	4630      	mov	r0, r6
   27a22:	f000 fc2d 	bl	28280 <on_tls_attach_res>
   27a26:	e04f      	b.n	27ac8 <rpc_ip_event_handler+0x16c>
   27a28:	f249 0302 	movw	r3, #36866	; 0x9002
   27a2c:	429d      	cmp	r5, r3
   27a2e:	f000 809e 	beq.w	27b6e <rpc_ip_event_handler+0x212>
   27a32:	d835      	bhi.n	27aa0 <rpc_ip_event_handler+0x144>
   27a34:	f00d fda9 	bl	3558a <sock_has_stream_error>
   27a38:	4607      	mov	r7, r0
   27a3a:	b9e0      	cbnz	r0, 27a76 <rpc_ip_event_handler+0x11a>
   27a3c:	2010      	movs	r0, #16
   27a3e:	f7f9 ff1d 	bl	2187c <nrf_modem_os_alloc>
   27a42:	4605      	mov	r5, r0
   27a44:	b1b8      	cbz	r0, 27a76 <rpc_ip_event_handler+0x11a>
   27a46:	4639      	mov	r1, r7
   27a48:	2210      	movs	r2, #16
   27a4a:	f00e fd8d 	bl	36568 <memset>
   27a4e:	6833      	ldr	r3, [r6, #0]
   27a50:	606b      	str	r3, [r5, #4]
   27a52:	6873      	ldr	r3, [r6, #4]
   27a54:	812b      	strh	r3, [r5, #8]
   27a56:	8a71      	ldrh	r1, [r6, #18]
   27a58:	2900      	cmp	r1, #0
   27a5a:	f000 8097 	beq.w	27b8c <rpc_ip_event_handler+0x230>
   27a5e:	8a32      	ldrh	r2, [r6, #16]
   27a60:	f106 0014 	add.w	r0, r6, #20
   27a64:	f00d fcdd 	bl	35422 <sockaddr_init>
   27a68:	60e8      	str	r0, [r5, #12]
   27a6a:	2800      	cmp	r0, #0
   27a6c:	f040 808e 	bne.w	27b8c <rpc_ip_event_handler+0x230>
   27a70:	4628      	mov	r0, r5
   27a72:	f7f9 ff0b 	bl	2188c <nrf_modem_os_free>
   27a76:	6830      	ldr	r0, [r6, #0]
   27a78:	f00d fcc5 	bl	35406 <rpc_client_msg_data_rx_free>
   27a7c:	4620      	mov	r0, r4
   27a7e:	f00d fd46 	bl	3550e <sock_is_stream>
   27a82:	b148      	cbz	r0, 27a98 <rpc_ip_event_handler+0x13c>
   27a84:	4620      	mov	r0, r4
   27a86:	f00d fd80 	bl	3558a <sock_has_stream_error>
   27a8a:	b928      	cbnz	r0, 27a98 <rpc_ip_event_handler+0x13c>
   27a8c:	230c      	movs	r3, #12
   27a8e:	61a3      	str	r3, [r4, #24]
   27a90:	7f23      	ldrb	r3, [r4, #28]
   27a92:	f063 037e 	orn	r3, r3, #126	; 0x7e
   27a96:	7723      	strb	r3, [r4, #28]
   27a98:	4620      	mov	r0, r4
   27a9a:	f00d fd3d 	bl	35518 <sock_is_datagram>
   27a9e:	e025      	b.n	27aec <rpc_ip_event_handler+0x190>
   27aa0:	f249 0303 	movw	r3, #36867	; 0x9003
   27aa4:	429d      	cmp	r5, r3
   27aa6:	d018      	beq.n	27ada <rpc_ip_event_handler+0x17e>
   27aa8:	f249 0382 	movw	r3, #36994	; 0x9082
   27aac:	429d      	cmp	r5, r3
   27aae:	d18c      	bne.n	279ca <rpc_ip_event_handler+0x6e>
   27ab0:	4601      	mov	r1, r0
   27ab2:	4630      	mov	r0, r6
   27ab4:	f000 fbf8 	bl	282a8 <on_tls_handshake_ntf>
   27ab8:	e006      	b.n	27ac8 <rpc_ip_event_handler+0x16c>
   27aba:	6973      	ldr	r3, [r6, #20]
   27abc:	b90b      	cbnz	r3, 27ac2 <rpc_ip_event_handler+0x166>
   27abe:	69b3      	ldr	r3, [r6, #24]
   27ac0:	6003      	str	r3, [r0, #0]
   27ac2:	4630      	mov	r0, r6
   27ac4:	f00e fab0 	bl	36028 <res_forward>
   27ac8:	4605      	mov	r5, r0
   27aca:	e010      	b.n	27aee <rpc_ip_event_handler+0x192>
   27acc:	7f03      	ldrb	r3, [r0, #28]
   27ace:	f023 0303 	bic.w	r3, r3, #3
   27ad2:	f043 0303 	orr.w	r3, r3, #3
   27ad6:	7703      	strb	r3, [r0, #28]
   27ad8:	e7f3      	b.n	27ac2 <rpc_ip_event_handler+0x166>
   27ada:	7f03      	ldrb	r3, [r0, #28]
   27adc:	f043 0301 	orr.w	r3, r3, #1
   27ae0:	7703      	strb	r3, [r0, #28]
   27ae2:	6930      	ldr	r0, [r6, #16]
   27ae4:	2869      	cmp	r0, #105	; 0x69
   27ae6:	d112      	bne.n	27b0e <rpc_ip_event_handler+0x1b2>
   27ae8:	2368      	movs	r3, #104	; 0x68
   27aea:	61a3      	str	r3, [r4, #24]
   27aec:	2500      	movs	r5, #0
   27aee:	4620      	mov	r0, r4
   27af0:	f00d fd59 	bl	355a6 <sock_has_pollcb>
   27af4:	b110      	cbz	r0, 27afc <rpc_ip_event_handler+0x1a0>
   27af6:	4620      	mov	r0, r4
   27af8:	f00d fccc 	bl	35494 <sock_pollcb>
   27afc:	b2e8      	uxtb	r0, r5
   27afe:	e76c      	b.n	279da <rpc_ip_event_handler+0x7e>
   27b00:	7f03      	ldrb	r3, [r0, #28]
   27b02:	68f5      	ldr	r5, [r6, #12]
   27b04:	f36f 0382 	bfc	r3, #2, #1
   27b08:	7703      	strb	r3, [r0, #28]
   27b0a:	6970      	ldr	r0, [r6, #20]
   27b0c:	b118      	cbz	r0, 27b16 <rpc_ip_event_handler+0x1ba>
   27b0e:	f000 fc71 	bl	283f4 <rpc_error_to_nrf_errno>
   27b12:	61a0      	str	r0, [r4, #24]
   27b14:	e7ea      	b.n	27aec <rpc_ip_event_handler+0x190>
   27b16:	4620      	mov	r0, r4
   27b18:	f00d fd08 	bl	3552c <sock_proto_is_secure>
   27b1c:	b918      	cbnz	r0, 27b26 <rpc_ip_event_handler+0x1ca>
   27b1e:	7f23      	ldrb	r3, [r4, #28]
   27b20:	f043 0308 	orr.w	r3, r3, #8
   27b24:	7723      	strb	r3, [r4, #28]
   27b26:	4620      	mov	r0, r4
   27b28:	f00d fd00 	bl	3552c <sock_proto_is_secure>
   27b2c:	2800      	cmp	r0, #0
   27b2e:	d0cb      	beq.n	27ac8 <rpc_ip_event_handler+0x16c>
   27b30:	2d00      	cmp	r5, #0
   27b32:	d0dc      	beq.n	27aee <rpc_ip_event_handler+0x192>
   27b34:	2100      	movs	r1, #0
   27b36:	4620      	mov	r0, r4
   27b38:	f000 fbd0 	bl	282dc <tls_attach>
   27b3c:	e7d6      	b.n	27aec <rpc_ip_event_handler+0x190>
   27b3e:	7f43      	ldrb	r3, [r0, #29]
   27b40:	3b01      	subs	r3, #1
   27b42:	7743      	strb	r3, [r0, #29]
   27b44:	6973      	ldr	r3, [r6, #20]
   27b46:	2b00      	cmp	r3, #0
   27b48:	d1bb      	bne.n	27ac2 <rpc_ip_event_handler+0x166>
   27b4a:	4630      	mov	r0, r6
   27b4c:	f00e fa6a 	bl	36024 <res_cookie_get>
   27b50:	69b2      	ldr	r2, [r6, #24]
   27b52:	6843      	ldr	r3, [r0, #4]
   27b54:	601a      	str	r2, [r3, #0]
   27b56:	6842      	ldr	r2, [r0, #4]
   27b58:	7f13      	ldrb	r3, [r2, #28]
   27b5a:	f043 0308 	orr.w	r3, r3, #8
   27b5e:	7713      	strb	r3, [r2, #28]
   27b60:	6843      	ldr	r3, [r0, #4]
   27b62:	6922      	ldr	r2, [r4, #16]
   27b64:	611a      	str	r2, [r3, #16]
   27b66:	6843      	ldr	r3, [r0, #4]
   27b68:	6962      	ldr	r2, [r4, #20]
   27b6a:	615a      	str	r2, [r3, #20]
   27b6c:	e7a9      	b.n	27ac2 <rpc_ip_event_handler+0x166>
   27b6e:	7f43      	ldrb	r3, [r0, #29]
   27b70:	3301      	adds	r3, #1
   27b72:	7743      	strb	r3, [r0, #29]
   27b74:	e7ba      	b.n	27aec <rpc_ip_event_handler+0x190>
   27b76:	4630      	mov	r0, r6
   27b78:	f00e fa54 	bl	36024 <res_cookie_get>
   27b7c:	6973      	ldr	r3, [r6, #20]
   27b7e:	b913      	cbnz	r3, 27b86 <rpc_ip_event_handler+0x22a>
   27b80:	69b3      	ldr	r3, [r6, #24]
   27b82:	6043      	str	r3, [r0, #4]
   27b84:	e79d      	b.n	27ac2 <rpc_ip_event_handler+0x166>
   27b86:	f04f 33ff 	mov.w	r3, #4294967295
   27b8a:	e7fa      	b.n	27b82 <rpc_ip_event_handler+0x226>
   27b8c:	4629      	mov	r1, r5
   27b8e:	4620      	mov	r0, r4
   27b90:	f00d fc9d 	bl	354ce <sock_pkt_append>
   27b94:	e7aa      	b.n	27aec <rpc_ip_event_handler+0x190>
   27b96:	bf00      	nop
   27b98:	2001077a 	.word	0x2001077a

00027b9c <nrf_close>:
   27b9c:	b570      	push	{r4, r5, r6, lr}
   27b9e:	4604      	mov	r4, r0
   27ba0:	f7ff fcbe 	bl	27520 <sock_find>
   27ba4:	4605      	mov	r5, r0
   27ba6:	b930      	cbnz	r0, 27bb6 <nrf_close+0x1a>
   27ba8:	2009      	movs	r0, #9
   27baa:	f7f9 fd95 	bl	216d8 <nrf_modem_os_errno_set>
   27bae:	f04f 36ff 	mov.w	r6, #4294967295
   27bb2:	4630      	mov	r0, r6
   27bb4:	bd70      	pop	{r4, r5, r6, pc}
   27bb6:	f000 fd7f 	bl	286b8 <nrf_modem_state_is_initialized>
   27bba:	b960      	cbnz	r0, 27bd6 <nrf_close+0x3a>
   27bbc:	2600      	movs	r6, #0
   27bbe:	4628      	mov	r0, r5
   27bc0:	f00d fcc8 	bl	35554 <sock_is_attaching>
   27bc4:	b118      	cbz	r0, 27bce <nrf_close+0x32>
   27bc6:	4b0e      	ldr	r3, [pc, #56]	; (27c00 <nrf_close+0x64>)
   27bc8:	6818      	ldr	r0, [r3, #0]
   27bca:	f7f9 fdd7 	bl	2177c <nrf_modem_os_sem_give>
   27bce:	4620      	mov	r0, r4
   27bd0:	f7ff fcb8 	bl	27544 <_sock_close>
   27bd4:	e7ed      	b.n	27bb2 <nrf_close+0x16>
   27bd6:	2000      	movs	r0, #0
   27bd8:	f00d fbef 	bl	353ba <rpc_client_msg_alloc>
   27bdc:	4601      	mov	r1, r0
   27bde:	b908      	cbnz	r0, 27be4 <nrf_close+0x48>
   27be0:	2069      	movs	r0, #105	; 0x69
   27be2:	e7e2      	b.n	27baa <nrf_close+0xe>
   27be4:	6104      	str	r4, [r0, #16]
   27be6:	f247 0009 	movw	r0, #28681	; 0x7009
   27bea:	f00e f9ed 	bl	35fc8 <req_forward>
   27bee:	2800      	cmp	r0, #0
   27bf0:	d0e4      	beq.n	27bbc <nrf_close+0x20>
   27bf2:	2816      	cmp	r0, #22
   27bf4:	d0e2      	beq.n	27bbc <nrf_close+0x20>
   27bf6:	f7f9 fd6f 	bl	216d8 <nrf_modem_os_errno_set>
   27bfa:	f04f 36ff 	mov.w	r6, #4294967295
   27bfe:	e7de      	b.n	27bbe <nrf_close+0x22>
   27c00:	2000eea8 	.word	0x2000eea8

00027c04 <nrf_sendto>:
   27c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27c08:	4698      	mov	r8, r3
   27c0a:	2300      	movs	r3, #0
   27c0c:	b085      	sub	sp, #20
   27c0e:	4682      	mov	sl, r0
   27c10:	4689      	mov	r9, r1
   27c12:	4616      	mov	r6, r2
   27c14:	e9cd 3302 	strd	r3, r3, [sp, #8]
   27c18:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   27c1a:	f7ff fc81 	bl	27520 <sock_find>
   27c1e:	4605      	mov	r5, r0
   27c20:	b940      	cbnz	r0, 27c34 <nrf_sendto+0x30>
   27c22:	2009      	movs	r0, #9
   27c24:	f7f9 fd58 	bl	216d8 <nrf_modem_os_errno_set>
   27c28:	f04f 34ff 	mov.w	r4, #4294967295
   27c2c:	4620      	mov	r0, r4
   27c2e:	b005      	add	sp, #20
   27c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27c34:	f038 0340 	bics.w	r3, r8, #64	; 0x40
   27c38:	d001      	beq.n	27c3e <nrf_sendto+0x3a>
   27c3a:	205f      	movs	r0, #95	; 0x5f
   27c3c:	e7f2      	b.n	27c24 <nrf_sendto+0x20>
   27c3e:	f00d fcb7 	bl	355b0 <sock_has_rai_no_data>
   27c42:	b128      	cbz	r0, 27c50 <nrf_sendto+0x4c>
   27c44:	4628      	mov	r0, r5
   27c46:	f00d fca3 	bl	35590 <sock_has_error>
   27c4a:	b128      	cbz	r0, 27c58 <nrf_sendto+0x54>
   27c4c:	69a8      	ldr	r0, [r5, #24]
   27c4e:	e7e9      	b.n	27c24 <nrf_sendto+0x20>
   27c50:	4628      	mov	r0, r5
   27c52:	f00d fc87 	bl	35564 <sock_is_closed>
   27c56:	e7f8      	b.n	27c4a <nrf_sendto+0x46>
   27c58:	4628      	mov	r0, r5
   27c5a:	b1d7      	cbz	r7, 27c92 <nrf_sendto+0x8e>
   27c5c:	f00d fc57 	bl	3550e <sock_is_stream>
   27c60:	bb00      	cbnz	r0, 27ca4 <nrf_sendto+0xa0>
   27c62:	4639      	mov	r1, r7
   27c64:	4628      	mov	r0, r5
   27c66:	f00d fd2f 	bl	356c8 <sock_sockaddr_fam_is_valid>
   27c6a:	b908      	cbnz	r0, 27c70 <nrf_sendto+0x6c>
   27c6c:	206a      	movs	r0, #106	; 0x6a
   27c6e:	e7d9      	b.n	27c24 <nrf_sendto+0x20>
   27c70:	4638      	mov	r0, r7
   27c72:	990f      	ldr	r1, [sp, #60]	; 0x3c
   27c74:	f00d fd14 	bl	356a0 <sock_sockaddr_len_is_valid>
   27c78:	b908      	cbnz	r0, 27c7e <nrf_sendto+0x7a>
   27c7a:	2016      	movs	r0, #22
   27c7c:	e7d2      	b.n	27c24 <nrf_sendto+0x20>
   27c7e:	4628      	mov	r0, r5
   27c80:	f00d fc4a 	bl	35518 <sock_is_datagram>
   27c84:	b170      	cbz	r0, 27ca4 <nrf_sendto+0xa0>
   27c86:	4628      	mov	r0, r5
   27c88:	f00d fc50 	bl	3552c <sock_proto_is_secure>
   27c8c:	b150      	cbz	r0, 27ca4 <nrf_sendto+0xa0>
   27c8e:	207f      	movs	r0, #127	; 0x7f
   27c90:	e7c8      	b.n	27c24 <nrf_sendto+0x20>
   27c92:	f00d fc41 	bl	35518 <sock_is_datagram>
   27c96:	b128      	cbz	r0, 27ca4 <nrf_sendto+0xa0>
   27c98:	4628      	mov	r0, r5
   27c9a:	f00d fc57 	bl	3554c <sock_is_connected>
   27c9e:	b908      	cbnz	r0, 27ca4 <nrf_sendto+0xa0>
   27ca0:	2079      	movs	r0, #121	; 0x79
   27ca2:	e7bf      	b.n	27c24 <nrf_sendto+0x20>
   27ca4:	4628      	mov	r0, r5
   27ca6:	f00d fcc3 	bl	35630 <sock_sndtimeo_ms_get>
   27caa:	9001      	str	r0, [sp, #4]
   27cac:	4628      	mov	r0, r5
   27cae:	f00d fc55 	bl	3555c <sock_is_nonblock>
   27cb2:	bb78      	cbnz	r0, 27d14 <nrf_sendto+0x110>
   27cb4:	f3c8 1880 	ubfx	r8, r8, #6, #1
   27cb8:	4628      	mov	r0, r5
   27cba:	f00d fc28 	bl	3550e <sock_is_stream>
   27cbe:	b140      	cbz	r0, 27cd2 <nrf_sendto+0xce>
   27cc0:	4628      	mov	r0, r5
   27cc2:	f00d fc33 	bl	3552c <sock_proto_is_secure>
   27cc6:	b120      	cbz	r0, 27cd2 <nrf_sendto+0xce>
   27cc8:	f5b6 6f00 	cmp.w	r6, #2048	; 0x800
   27ccc:	bf28      	it	cs
   27cce:	f44f 6600 	movcs.w	r6, #2048	; 0x800
   27cd2:	f00d fb9a 	bl	3540a <rpc_client_msg_data_tx_size>
   27cd6:	42b0      	cmp	r0, r6
   27cd8:	d206      	bcs.n	27ce8 <nrf_sendto+0xe4>
   27cda:	4628      	mov	r0, r5
   27cdc:	f00d fc17 	bl	3550e <sock_is_stream>
   27ce0:	b1d8      	cbz	r0, 27d1a <nrf_sendto+0x116>
   27ce2:	f00d fb92 	bl	3540a <rpc_client_msg_data_tx_size>
   27ce6:	4606      	mov	r6, r0
   27ce8:	4628      	mov	r0, r5
   27cea:	f00d fc58 	bl	3559e <sock_has_flow_control>
   27cee:	b118      	cbz	r0, 27cf8 <nrf_sendto+0xf4>
   27cf0:	4628      	mov	r0, r5
   27cf2:	f00d fc37 	bl	35564 <sock_is_closed>
   27cf6:	b190      	cbz	r0, 27d1e <nrf_sendto+0x11a>
   27cf8:	4630      	mov	r0, r6
   27cfa:	f00d fb5e 	bl	353ba <rpc_client_msg_alloc>
   27cfe:	4604      	mov	r4, r0
   27d00:	b9e0      	cbnz	r0, 27d3c <nrf_sendto+0x138>
   27d02:	2001      	movs	r0, #1
   27d04:	a901      	add	r1, sp, #4
   27d06:	f7f9 fc25 	bl	21554 <nrf_modem_os_timedwait>
   27d0a:	b998      	cbnz	r0, 27d34 <nrf_sendto+0x130>
   27d0c:	f1b8 0f00 	cmp.w	r8, #0
   27d10:	d0f2      	beq.n	27cf8 <nrf_sendto+0xf4>
   27d12:	e007      	b.n	27d24 <nrf_sendto+0x120>
   27d14:	f04f 0801 	mov.w	r8, #1
   27d18:	e7ce      	b.n	27cb8 <nrf_sendto+0xb4>
   27d1a:	207a      	movs	r0, #122	; 0x7a
   27d1c:	e782      	b.n	27c24 <nrf_sendto+0x20>
   27d1e:	f1b8 0f00 	cmp.w	r8, #0
   27d22:	d001      	beq.n	27d28 <nrf_sendto+0x124>
   27d24:	200b      	movs	r0, #11
   27d26:	e77d      	b.n	27c24 <nrf_sendto+0x20>
   27d28:	2002      	movs	r0, #2
   27d2a:	a901      	add	r1, sp, #4
   27d2c:	f7f9 fc12 	bl	21554 <nrf_modem_os_timedwait>
   27d30:	2800      	cmp	r0, #0
   27d32:	d0d9      	beq.n	27ce8 <nrf_sendto+0xe4>
   27d34:	2800      	cmp	r0, #0
   27d36:	bfb8      	it	lt
   27d38:	4240      	neglt	r0, r0
   27d3a:	e773      	b.n	27c24 <nrf_sendto+0x20>
   27d3c:	f8c0 a010 	str.w	sl, [r0, #16]
   27d40:	f1b9 0f00 	cmp.w	r9, #0
   27d44:	d004      	beq.n	27d50 <nrf_sendto+0x14c>
   27d46:	4632      	mov	r2, r6
   27d48:	4649      	mov	r1, r9
   27d4a:	6800      	ldr	r0, [r0, #0]
   27d4c:	f00e fbec 	bl	36528 <memcpy>
   27d50:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
   27d54:	f1bb 0f00 	cmp.w	fp, #0
   27d58:	d001      	beq.n	27d5e <nrf_sendto+0x15a>
   27d5a:	2300      	movs	r3, #0
   27d5c:	632b      	str	r3, [r5, #48]	; 0x30
   27d5e:	b3cf      	cbz	r7, 27dd4 <nrf_sendto+0x1d0>
   27d60:	4628      	mov	r0, r5
   27d62:	f00d fbd4 	bl	3550e <sock_is_stream>
   27d66:	bba8      	cbnz	r0, 27dd4 <nrf_sendto+0x1d0>
   27d68:	2318      	movs	r3, #24
   27d6a:	7260      	strb	r0, [r4, #9]
   27d6c:	7223      	strb	r3, [r4, #8]
   27d6e:	72a0      	strb	r0, [r4, #10]
   27d70:	72e0      	strb	r0, [r4, #11]
   27d72:	f8c4 b014 	str.w	fp, [r4, #20]
   27d76:	687b      	ldr	r3, [r7, #4]
   27d78:	2b01      	cmp	r3, #1
   27d7a:	d012      	beq.n	27da2 <nrf_sendto+0x19e>
   27d7c:	2b02      	cmp	r3, #2
   27d7e:	d018      	beq.n	27db2 <nrf_sendto+0x1ae>
   27d80:	f247 0b07 	movw	fp, #28679	; 0x7007
   27d84:	4620      	mov	r0, r4
   27d86:	a902      	add	r1, sp, #8
   27d88:	f00e f94a 	bl	36020 <req_cookie_set>
   27d8c:	4621      	mov	r1, r4
   27d8e:	4658      	mov	r0, fp
   27d90:	f00e f91a 	bl	35fc8 <req_forward>
   27d94:	4603      	mov	r3, r0
   27d96:	bb40      	cbnz	r0, 27dea <nrf_sendto+0x1e6>
   27d98:	e9dd 0402 	ldrd	r0, r4, [sp, #8]
   27d9c:	f00d fb30 	bl	35400 <rpc_client_msg_rx_free>
   27da0:	e744      	b.n	27c2c <nrf_sendto+0x28>
   27da2:	893b      	ldrh	r3, [r7, #8]
   27da4:	76e0      	strb	r0, [r4, #27]
   27da6:	8323      	strh	r3, [r4, #24]
   27da8:	2304      	movs	r3, #4
   27daa:	76a3      	strb	r3, [r4, #26]
   27dac:	68fb      	ldr	r3, [r7, #12]
   27dae:	61e3      	str	r3, [r4, #28]
   27db0:	e7e6      	b.n	27d80 <nrf_sendto+0x17c>
   27db2:	893b      	ldrh	r3, [r7, #8]
   27db4:	f104 021c 	add.w	r2, r4, #28
   27db8:	8323      	strh	r3, [r4, #24]
   27dba:	2310      	movs	r3, #16
   27dbc:	76e0      	strb	r0, [r4, #27]
   27dbe:	76a3      	strb	r3, [r4, #26]
   27dc0:	f107 0120 	add.w	r1, r7, #32
   27dc4:	18fb      	adds	r3, r7, r3
   27dc6:	f853 0b04 	ldr.w	r0, [r3], #4
   27dca:	428b      	cmp	r3, r1
   27dcc:	f842 0b04 	str.w	r0, [r2], #4
   27dd0:	d1f9      	bne.n	27dc6 <nrf_sendto+0x1c2>
   27dd2:	e7d5      	b.n	27d80 <nrf_sendto+0x17c>
   27dd4:	2300      	movs	r3, #0
   27dd6:	2204      	movs	r2, #4
   27dd8:	f8c4 b014 	str.w	fp, [r4, #20]
   27ddc:	7222      	strb	r2, [r4, #8]
   27dde:	f247 0b06 	movw	fp, #28678	; 0x7006
   27de2:	7263      	strb	r3, [r4, #9]
   27de4:	72a3      	strb	r3, [r4, #10]
   27de6:	72e3      	strb	r3, [r4, #11]
   27de8:	e7cc      	b.n	27d84 <nrf_sendto+0x180>
   27dea:	280c      	cmp	r0, #12
   27dec:	dc0f      	bgt.n	27e0e <nrf_sendto+0x20a>
   27dee:	280a      	cmp	r0, #10
   27df0:	dd10      	ble.n	27e14 <nrf_sendto+0x210>
   27df2:	4b09      	ldr	r3, [pc, #36]	; (27e18 <nrf_sendto+0x214>)
   27df4:	781b      	ldrb	r3, [r3, #0]
   27df6:	b92b      	cbnz	r3, 27e04 <nrf_sendto+0x200>
   27df8:	2001      	movs	r0, #1
   27dfa:	a901      	add	r1, sp, #4
   27dfc:	f7f9 fbaa 	bl	21554 <nrf_modem_os_timedwait>
   27e00:	2800      	cmp	r0, #0
   27e02:	d197      	bne.n	27d34 <nrf_sendto+0x130>
   27e04:	f1b8 0f00 	cmp.w	r8, #0
   27e08:	f43f af6e 	beq.w	27ce8 <nrf_sendto+0xe4>
   27e0c:	e78a      	b.n	27d24 <nrf_sendto+0x120>
   27e0e:	288c      	cmp	r0, #140	; 0x8c
   27e10:	f43f af08 	beq.w	27c24 <nrf_sendto+0x20>
   27e14:	4618      	mov	r0, r3
   27e16:	e705      	b.n	27c24 <nrf_sendto+0x20>
   27e18:	2001077a 	.word	0x2001077a

00027e1c <nrf_setsockopt>:
   27e1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   27e20:	b085      	sub	sp, #20
   27e22:	4681      	mov	r9, r0
   27e24:	4688      	mov	r8, r1
   27e26:	4617      	mov	r7, r2
   27e28:	461e      	mov	r6, r3
   27e2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   27e2c:	f7ff fb78 	bl	27520 <sock_find>
   27e30:	4604      	mov	r4, r0
   27e32:	b938      	cbnz	r0, 27e44 <nrf_setsockopt+0x28>
   27e34:	2009      	movs	r0, #9
   27e36:	f7f9 fc4f 	bl	216d8 <nrf_modem_os_errno_set>
   27e3a:	f04f 30ff 	mov.w	r0, #4294967295
   27e3e:	b005      	add	sp, #20
   27e40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   27e44:	b916      	cbnz	r6, 27e4c <nrf_setsockopt+0x30>
   27e46:	b10d      	cbz	r5, 27e4c <nrf_setsockopt+0x30>
   27e48:	2016      	movs	r0, #22
   27e4a:	e7f4      	b.n	27e36 <nrf_setsockopt+0x1a>
   27e4c:	f1b8 0f29 	cmp.w	r8, #41	; 0x29
   27e50:	f000 80fe 	beq.w	28050 <nrf_setsockopt+0x234>
   27e54:	dc0c      	bgt.n	27e70 <nrf_setsockopt+0x54>
   27e56:	f1b8 0f01 	cmp.w	r8, #1
   27e5a:	d012      	beq.n	27e82 <nrf_setsockopt+0x66>
   27e5c:	f1b8 0f06 	cmp.w	r8, #6
   27e60:	f000 80f0 	beq.w	28044 <nrf_setsockopt+0x228>
   27e64:	f1b8 0f00 	cmp.w	r8, #0
   27e68:	f000 80f0 	beq.w	2804c <nrf_setsockopt+0x230>
   27e6c:	206d      	movs	r0, #109	; 0x6d
   27e6e:	e7e2      	b.n	27e36 <nrf_setsockopt+0x1a>
   27e70:	f5b8 7f8d 	cmp.w	r8, #282	; 0x11a
   27e74:	f000 8092 	beq.w	27f9c <nrf_setsockopt+0x180>
   27e78:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   27e7c:	d1f6      	bne.n	27e6c <nrf_setsockopt+0x50>
   27e7e:	2f1e      	cmp	r7, #30
   27e80:	e0e1      	b.n	28046 <nrf_setsockopt+0x22a>
   27e82:	2f3c      	cmp	r7, #60	; 0x3c
   27e84:	dcf2      	bgt.n	27e6c <nrf_setsockopt+0x50>
   27e86:	2f31      	cmp	r7, #49	; 0x31
   27e88:	dc0f      	bgt.n	27eaa <nrf_setsockopt+0x8e>
   27e8a:	2f15      	cmp	r7, #21
   27e8c:	d046      	beq.n	27f1c <nrf_setsockopt+0x100>
   27e8e:	dc29      	bgt.n	27ee4 <nrf_setsockopt+0xc8>
   27e90:	2f02      	cmp	r7, #2
   27e92:	d03a      	beq.n	27f0a <nrf_setsockopt+0xee>
   27e94:	2f14      	cmp	r7, #20
   27e96:	d1e9      	bne.n	27e6c <nrf_setsockopt+0x50>
   27e98:	f104 0020 	add.w	r0, r4, #32
   27e9c:	2d00      	cmp	r5, #0
   27e9e:	d143      	bne.n	27f28 <nrf_setsockopt+0x10c>
   27ea0:	2300      	movs	r3, #0
   27ea2:	6223      	str	r3, [r4, #32]
   27ea4:	6043      	str	r3, [r0, #4]
   27ea6:	2000      	movs	r0, #0
   27ea8:	e7c9      	b.n	27e3e <nrf_setsockopt+0x22>
   27eaa:	3f32      	subs	r7, #50	; 0x32
   27eac:	2f0a      	cmp	r7, #10
   27eae:	d8dd      	bhi.n	27e6c <nrf_setsockopt+0x50>
   27eb0:	a301      	add	r3, pc, #4	; (adr r3, 27eb8 <nrf_setsockopt+0x9c>)
   27eb2:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
   27eb6:	bf00      	nop
   27eb8:	00027f81 	.word	0x00027f81
   27ebc:	00027f67 	.word	0x00027f67
   27ec0:	00027f6f 	.word	0x00027f6f
   27ec4:	00027f75 	.word	0x00027f75
   27ec8:	00027f7b 	.word	0x00027f7b
   27ecc:	00027e6d 	.word	0x00027e6d
   27ed0:	00027e6d 	.word	0x00027e6d
   27ed4:	00027e6d 	.word	0x00027e6d
   27ed8:	00027e6d 	.word	0x00027e6d
   27edc:	00027e6d 	.word	0x00027e6d
   27ee0:	00027f39 	.word	0x00027f39
   27ee4:	2f19      	cmp	r7, #25
   27ee6:	d1c1      	bne.n	27e6c <nrf_setsockopt+0x50>
   27ee8:	2e00      	cmp	r6, #0
   27eea:	d0ad      	beq.n	27e48 <nrf_setsockopt+0x2c>
   27eec:	2203      	movs	r2, #3
   27eee:	4969      	ldr	r1, [pc, #420]	; (28094 <nrf_setsockopt+0x278>)
   27ef0:	4630      	mov	r0, r6
   27ef2:	f00e fb09 	bl	36508 <memcmp>
   27ef6:	220a      	movs	r2, #10
   27ef8:	2100      	movs	r1, #0
   27efa:	2800      	cmp	r0, #0
   27efc:	d14c      	bne.n	27f98 <nrf_setsockopt+0x17c>
   27efe:	1cf0      	adds	r0, r6, #3
   27f00:	f005 f90c 	bl	2d11c <strtoul>
   27f04:	2504      	movs	r5, #4
   27f06:	9003      	str	r0, [sp, #12]
   27f08:	ae03      	add	r6, sp, #12
   27f0a:	4628      	mov	r0, r5
   27f0c:	f00d fa55 	bl	353ba <rpc_client_msg_alloc>
   27f10:	4604      	mov	r4, r0
   27f12:	2800      	cmp	r0, #0
   27f14:	f040 809e 	bne.w	28054 <nrf_setsockopt+0x238>
   27f18:	2069      	movs	r0, #105	; 0x69
   27f1a:	e78c      	b.n	27e36 <nrf_setsockopt+0x1a>
   27f1c:	f104 0028 	add.w	r0, r4, #40	; 0x28
   27f20:	b915      	cbnz	r5, 27f28 <nrf_setsockopt+0x10c>
   27f22:	62a5      	str	r5, [r4, #40]	; 0x28
   27f24:	6045      	str	r5, [r0, #4]
   27f26:	e7be      	b.n	27ea6 <nrf_setsockopt+0x8a>
   27f28:	2d08      	cmp	r5, #8
   27f2a:	462a      	mov	r2, r5
   27f2c:	4631      	mov	r1, r6
   27f2e:	bf28      	it	cs
   27f30:	2208      	movcs	r2, #8
   27f32:	f00e faf9 	bl	36528 <memcpy>
   27f36:	e7b6      	b.n	27ea6 <nrf_setsockopt+0x8a>
   27f38:	b17e      	cbz	r6, 27f5a <nrf_setsockopt+0x13e>
   27f3a:	2d08      	cmp	r5, #8
   27f3c:	d184      	bne.n	27e48 <nrf_setsockopt+0x2c>
   27f3e:	f7fe fdbd 	bl	26abc <rpc_transport_data_rx_suspend>
   27f42:	e896 0003 	ldmia.w	r6, {r0, r1}
   27f46:	f104 0334 	add.w	r3, r4, #52	; 0x34
   27f4a:	e883 0003 	stmia.w	r3, {r0, r1}
   27f4e:	4620      	mov	r0, r4
   27f50:	f00d faa0 	bl	35494 <sock_pollcb>
   27f54:	f7fe fdb8 	bl	26ac8 <rpc_transport_data_rx_resume>
   27f58:	e7a5      	b.n	27ea6 <nrf_setsockopt+0x8a>
   27f5a:	2d00      	cmp	r5, #0
   27f5c:	f47f af74 	bne.w	27e48 <nrf_setsockopt+0x2c>
   27f60:	6365      	str	r5, [r4, #52]	; 0x34
   27f62:	63a5      	str	r5, [r4, #56]	; 0x38
   27f64:	e79f      	b.n	27ea6 <nrf_setsockopt+0x8a>
   27f66:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   27f6a:	6323      	str	r3, [r4, #48]	; 0x30
   27f6c:	e79b      	b.n	27ea6 <nrf_setsockopt+0x8a>
   27f6e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   27f72:	e7fa      	b.n	27f6a <nrf_setsockopt+0x14e>
   27f74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   27f78:	e7f7      	b.n	27f6a <nrf_setsockopt+0x14e>
   27f7a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   27f7e:	e7f4      	b.n	27f6a <nrf_setsockopt+0x14e>
   27f80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   27f84:	6323      	str	r3, [r4, #48]	; 0x30
   27f86:	2300      	movs	r3, #0
   27f88:	4648      	mov	r0, r9
   27f8a:	461a      	mov	r2, r3
   27f8c:	4619      	mov	r1, r3
   27f8e:	e9cd 3300 	strd	r3, r3, [sp]
   27f92:	f7ff fe37 	bl	27c04 <nrf_sendto>
   27f96:	e752      	b.n	27e3e <nrf_setsockopt+0x22>
   27f98:	4630      	mov	r0, r6
   27f9a:	e7b1      	b.n	27f00 <nrf_setsockopt+0xe4>
   27f9c:	1e7b      	subs	r3, r7, #1
   27f9e:	2b11      	cmp	r3, #17
   27fa0:	f63f af64 	bhi.w	27e6c <nrf_setsockopt+0x50>
   27fa4:	a201      	add	r2, pc, #4	; (adr r2, 27fac <nrf_setsockopt+0x190>)
   27fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   27faa:	bf00      	nop
   27fac:	00028005 	.word	0x00028005
   27fb0:	00028035 	.word	0x00028035
   27fb4:	00027f0b 	.word	0x00027f0b
   27fb8:	00027e6d 	.word	0x00027e6d
   27fbc:	00028025 	.word	0x00028025
   27fc0:	00027ff5 	.word	0x00027ff5
   27fc4:	00027e6d 	.word	0x00027e6d
   27fc8:	00027e6d 	.word	0x00027e6d
   27fcc:	00027e6d 	.word	0x00027e6d
   27fd0:	00027e6d 	.word	0x00027e6d
   27fd4:	00027e6d 	.word	0x00027e6d
   27fd8:	00028015 	.word	0x00028015
   27fdc:	00027f0b 	.word	0x00027f0b
   27fe0:	00027f0b 	.word	0x00027f0b
   27fe4:	00027f0b 	.word	0x00027f0b
   27fe8:	00027e6d 	.word	0x00027e6d
   27fec:	00027f0b 	.word	0x00027f0b
   27ff0:	00027f0b 	.word	0x00027f0b
   27ff4:	462a      	mov	r2, r5
   27ff6:	4631      	mov	r1, r6
   27ff8:	4620      	mov	r0, r4
   27ffa:	b005      	add	sp, #20
   27ffc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28000:	f00d beaf 	b.w	35d62 <tls_setopt_role>
   28004:	462a      	mov	r2, r5
   28006:	4631      	mov	r1, r6
   28008:	4620      	mov	r0, r4
   2800a:	b005      	add	sp, #20
   2800c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28010:	f00d bebb 	b.w	35d8a <tls_setopt_taglist>
   28014:	462a      	mov	r2, r5
   28016:	4631      	mov	r1, r6
   28018:	4620      	mov	r0, r4
   2801a:	b005      	add	sp, #20
   2801c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28020:	f00d bec8 	b.w	35db4 <tls_setopt_sess_cache>
   28024:	462a      	mov	r2, r5
   28026:	4631      	mov	r1, r6
   28028:	4620      	mov	r0, r4
   2802a:	b005      	add	sp, #20
   2802c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28030:	f00d bed2 	b.w	35dd8 <tls_setopt_peer_verify>
   28034:	462a      	mov	r2, r5
   28036:	4631      	mov	r1, r6
   28038:	4620      	mov	r0, r4
   2803a:	b005      	add	sp, #20
   2803c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28040:	f00d bed9 	b.w	35df6 <tls_setopt_hostname>
   28044:	2f37      	cmp	r7, #55	; 0x37
   28046:	f43f af60 	beq.w	27f0a <nrf_setsockopt+0xee>
   2804a:	e70f      	b.n	27e6c <nrf_setsockopt+0x50>
   2804c:	2f1f      	cmp	r7, #31
   2804e:	e7fa      	b.n	28046 <nrf_setsockopt+0x22a>
   28050:	2f20      	cmp	r7, #32
   28052:	e7f8      	b.n	28046 <nrf_setsockopt+0x22a>
   28054:	2300      	movs	r3, #0
   28056:	2208      	movs	r2, #8
   28058:	7243      	strb	r3, [r0, #9]
   2805a:	7202      	strb	r2, [r0, #8]
   2805c:	7283      	strb	r3, [r0, #10]
   2805e:	72c3      	strb	r3, [r0, #11]
   28060:	f8c0 9010 	str.w	r9, [r0, #16]
   28064:	4640      	mov	r0, r8
   28066:	f00d ff78 	bl	35f5a <nrf_sol_to_rpc_sol>
   2806a:	6160      	str	r0, [r4, #20]
   2806c:	4638      	mov	r0, r7
   2806e:	f000 f9b5 	bl	283dc <nrf_so_to_rpc_so>
   28072:	4631      	mov	r1, r6
   28074:	61a0      	str	r0, [r4, #24]
   28076:	462a      	mov	r2, r5
   28078:	6820      	ldr	r0, [r4, #0]
   2807a:	f00e fa55 	bl	36528 <memcpy>
   2807e:	4621      	mov	r1, r4
   28080:	f247 0003 	movw	r0, #28675	; 0x7003
   28084:	6065      	str	r5, [r4, #4]
   28086:	f00d ff9f 	bl	35fc8 <req_forward>
   2808a:	2800      	cmp	r0, #0
   2808c:	f43f af0b 	beq.w	27ea6 <nrf_setsockopt+0x8a>
   28090:	e6d1      	b.n	27e36 <nrf_setsockopt+0x1a>
   28092:	bf00      	nop
   28094:	00041307 	.word	0x00041307

00028098 <nrf_getsockopt>:
   28098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2809c:	9c08      	ldr	r4, [sp, #32]
   2809e:	4681      	mov	r9, r0
   280a0:	4688      	mov	r8, r1
   280a2:	4617      	mov	r7, r2
   280a4:	461e      	mov	r6, r3
   280a6:	f7ff fa3b 	bl	27520 <sock_find>
   280aa:	b930      	cbnz	r0, 280ba <nrf_getsockopt+0x22>
   280ac:	2009      	movs	r0, #9
   280ae:	f7f9 fb13 	bl	216d8 <nrf_modem_os_errno_set>
   280b2:	f04f 30ff 	mov.w	r0, #4294967295
   280b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   280ba:	b106      	cbz	r6, 280be <nrf_getsockopt+0x26>
   280bc:	b90c      	cbnz	r4, 280c2 <nrf_getsockopt+0x2a>
   280be:	200e      	movs	r0, #14
   280c0:	e7f5      	b.n	280ae <nrf_getsockopt+0x16>
   280c2:	f1b8 0f29 	cmp.w	r8, #41	; 0x29
   280c6:	f000 8096 	beq.w	281f6 <nrf_getsockopt+0x15e>
   280ca:	dc0c      	bgt.n	280e6 <nrf_getsockopt+0x4e>
   280cc:	f1b8 0f01 	cmp.w	r8, #1
   280d0:	d011      	beq.n	280f6 <nrf_getsockopt+0x5e>
   280d2:	f1b8 0f06 	cmp.w	r8, #6
   280d6:	f000 8082 	beq.w	281de <nrf_getsockopt+0x146>
   280da:	f1b8 0f00 	cmp.w	r8, #0
   280de:	f000 8088 	beq.w	281f2 <nrf_getsockopt+0x15a>
   280e2:	206d      	movs	r0, #109	; 0x6d
   280e4:	e7e3      	b.n	280ae <nrf_getsockopt+0x16>
   280e6:	f5b8 7f8d 	cmp.w	r8, #282	; 0x11a
   280ea:	d024      	beq.n	28136 <nrf_getsockopt+0x9e>
   280ec:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   280f0:	d1f7      	bne.n	280e2 <nrf_getsockopt+0x4a>
   280f2:	2f1e      	cmp	r7, #30
   280f4:	e074      	b.n	281e0 <nrf_getsockopt+0x148>
   280f6:	2f14      	cmp	r7, #20
   280f8:	d00a      	beq.n	28110 <nrf_getsockopt+0x78>
   280fa:	2f15      	cmp	r7, #21
   280fc:	d013      	beq.n	28126 <nrf_getsockopt+0x8e>
   280fe:	2f04      	cmp	r7, #4
   28100:	d1ef      	bne.n	280e2 <nrf_getsockopt+0x4a>
   28102:	6983      	ldr	r3, [r0, #24]
   28104:	6027      	str	r7, [r4, #0]
   28106:	6033      	str	r3, [r6, #0]
   28108:	2300      	movs	r3, #0
   2810a:	6183      	str	r3, [r0, #24]
   2810c:	2000      	movs	r0, #0
   2810e:	e7d2      	b.n	280b6 <nrf_getsockopt+0x1e>
   28110:	6822      	ldr	r2, [r4, #0]
   28112:	f100 0120 	add.w	r1, r0, #32
   28116:	2a08      	cmp	r2, #8
   28118:	bf28      	it	cs
   2811a:	2208      	movcs	r2, #8
   2811c:	6022      	str	r2, [r4, #0]
   2811e:	4630      	mov	r0, r6
   28120:	f00e fa02 	bl	36528 <memcpy>
   28124:	e7f2      	b.n	2810c <nrf_getsockopt+0x74>
   28126:	6822      	ldr	r2, [r4, #0]
   28128:	f100 0128 	add.w	r1, r0, #40	; 0x28
   2812c:	2a08      	cmp	r2, #8
   2812e:	bf28      	it	cs
   28130:	2208      	movcs	r2, #8
   28132:	6022      	str	r2, [r4, #0]
   28134:	e7f3      	b.n	2811e <nrf_getsockopt+0x86>
   28136:	1e7b      	subs	r3, r7, #1
   28138:	2b12      	cmp	r3, #18
   2813a:	d8d2      	bhi.n	280e2 <nrf_getsockopt+0x4a>
   2813c:	a201      	add	r2, pc, #4	; (adr r2, 28144 <nrf_getsockopt+0xac>)
   2813e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   28142:	bf00      	nop
   28144:	000281b1 	.word	0x000281b1
   28148:	000281c7 	.word	0x000281c7
   2814c:	000281e5 	.word	0x000281e5
   28150:	000281e5 	.word	0x000281e5
   28154:	000281a7 	.word	0x000281a7
   28158:	00028191 	.word	0x00028191
   2815c:	000280e3 	.word	0x000280e3
   28160:	000280e3 	.word	0x000280e3
   28164:	000280e3 	.word	0x000280e3
   28168:	000280e3 	.word	0x000280e3
   2816c:	000280e3 	.word	0x000280e3
   28170:	0002819d 	.word	0x0002819d
   28174:	000280e3 	.word	0x000280e3
   28178:	000281e5 	.word	0x000281e5
   2817c:	000281e5 	.word	0x000281e5
   28180:	000281e5 	.word	0x000281e5
   28184:	000280e3 	.word	0x000280e3
   28188:	000280e3 	.word	0x000280e3
   2818c:	000281e5 	.word	0x000281e5
   28190:	2304      	movs	r3, #4
   28192:	6023      	str	r3, [r4, #0]
   28194:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
   28198:	6033      	str	r3, [r6, #0]
   2819a:	e7b7      	b.n	2810c <nrf_getsockopt+0x74>
   2819c:	2304      	movs	r3, #4
   2819e:	6023      	str	r3, [r4, #0]
   281a0:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
   281a4:	e7f8      	b.n	28198 <nrf_getsockopt+0x100>
   281a6:	2304      	movs	r3, #4
   281a8:	6023      	str	r3, [r4, #0]
   281aa:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
   281ae:	e7f3      	b.n	28198 <nrf_getsockopt+0x100>
   281b0:	f890 2047 	ldrb.w	r2, [r0, #71]	; 0x47
   281b4:	6823      	ldr	r3, [r4, #0]
   281b6:	0092      	lsls	r2, r2, #2
   281b8:	429a      	cmp	r2, r3
   281ba:	bf28      	it	cs
   281bc:	461a      	movcs	r2, r3
   281be:	f100 0148 	add.w	r1, r0, #72	; 0x48
   281c2:	6022      	str	r2, [r4, #0]
   281c4:	e7ab      	b.n	2811e <nrf_getsockopt+0x86>
   281c6:	6c05      	ldr	r5, [r0, #64]	; 0x40
   281c8:	4628      	mov	r0, r5
   281ca:	f7e1 f82a 	bl	9222 <strlen>
   281ce:	6823      	ldr	r3, [r4, #0]
   281d0:	1c42      	adds	r2, r0, #1
   281d2:	429a      	cmp	r2, r3
   281d4:	bf28      	it	cs
   281d6:	461a      	movcs	r2, r3
   281d8:	4629      	mov	r1, r5
   281da:	6022      	str	r2, [r4, #0]
   281dc:	e79f      	b.n	2811e <nrf_getsockopt+0x86>
   281de:	2f37      	cmp	r7, #55	; 0x37
   281e0:	f47f af7f 	bne.w	280e2 <nrf_getsockopt+0x4a>
   281e4:	6820      	ldr	r0, [r4, #0]
   281e6:	f00d f8e8 	bl	353ba <rpc_client_msg_alloc>
   281ea:	4605      	mov	r5, r0
   281ec:	b928      	cbnz	r0, 281fa <nrf_getsockopt+0x162>
   281ee:	2069      	movs	r0, #105	; 0x69
   281f0:	e75d      	b.n	280ae <nrf_getsockopt+0x16>
   281f2:	2f1f      	cmp	r7, #31
   281f4:	e7f4      	b.n	281e0 <nrf_getsockopt+0x148>
   281f6:	2f20      	cmp	r7, #32
   281f8:	e7f2      	b.n	281e0 <nrf_getsockopt+0x148>
   281fa:	2300      	movs	r3, #0
   281fc:	2208      	movs	r2, #8
   281fe:	7243      	strb	r3, [r0, #9]
   28200:	7202      	strb	r2, [r0, #8]
   28202:	7283      	strb	r3, [r0, #10]
   28204:	72c3      	strb	r3, [r0, #11]
   28206:	f8c0 9010 	str.w	r9, [r0, #16]
   2820a:	4640      	mov	r0, r8
   2820c:	f00d fea5 	bl	35f5a <nrf_sol_to_rpc_sol>
   28210:	6168      	str	r0, [r5, #20]
   28212:	4638      	mov	r0, r7
   28214:	f000 f8e2 	bl	283dc <nrf_so_to_rpc_so>
   28218:	4629      	mov	r1, r5
   2821a:	61a8      	str	r0, [r5, #24]
   2821c:	f247 0004 	movw	r0, #28676	; 0x7004
   28220:	f8d5 8000 	ldr.w	r8, [r5]
   28224:	f00d fed0 	bl	35fc8 <req_forward>
   28228:	4607      	mov	r7, r0
   2822a:	b120      	cbz	r0, 28236 <nrf_getsockopt+0x19e>
   2822c:	4640      	mov	r0, r8
   2822e:	f00d f8f0 	bl	35412 <rpc_client_msg_data_tx_free>
   28232:	4638      	mov	r0, r7
   28234:	e73b      	b.n	280ae <nrf_getsockopt+0x16>
   28236:	686a      	ldr	r2, [r5, #4]
   28238:	6823      	ldr	r3, [r4, #0]
   2823a:	4641      	mov	r1, r8
   2823c:	429a      	cmp	r2, r3
   2823e:	bf28      	it	cs
   28240:	461a      	movcs	r2, r3
   28242:	4630      	mov	r0, r6
   28244:	6022      	str	r2, [r4, #0]
   28246:	f00e f96f 	bl	36528 <memcpy>
   2824a:	4640      	mov	r0, r8
   2824c:	f00d f8e1 	bl	35412 <rpc_client_msg_data_tx_free>
   28250:	e75c      	b.n	2810c <nrf_getsockopt+0x74>
   28252:	bf00      	nop

00028254 <rpc_ip_init>:
   28254:	b508      	push	{r3, lr}
   28256:	f7ff f921 	bl	2749c <sock_init>
   2825a:	f7ff f9e9 	bl	27630 <addrinfo_init>
   2825e:	2200      	movs	r2, #0
   28260:	4b05      	ldr	r3, [pc, #20]	; (28278 <rpc_ip_init+0x24>)
   28262:	4806      	ldr	r0, [pc, #24]	; (2827c <rpc_ip_init+0x28>)
   28264:	701a      	strb	r2, [r3, #0]
   28266:	2201      	movs	r2, #1
   28268:	4611      	mov	r1, r2
   2826a:	f7f9 fa53 	bl	21714 <nrf_modem_os_sem_init>
   2826e:	2800      	cmp	r0, #0
   28270:	bf18      	it	ne
   28272:	f06f 002d 	mvnne.w	r0, #45	; 0x2d
   28276:	bd08      	pop	{r3, pc}
   28278:	2001077a 	.word	0x2001077a
   2827c:	2000eea8 	.word	0x2000eea8

00028280 <on_tls_attach_res>:
   28280:	b510      	push	{r4, lr}
   28282:	6943      	ldr	r3, [r0, #20]
   28284:	460c      	mov	r4, r1
   28286:	b15b      	cbz	r3, 282a0 <on_tls_attach_res+0x20>
   28288:	7f0b      	ldrb	r3, [r1, #28]
   2828a:	f36f 1304 	bfc	r3, #4, #1
   2828e:	770b      	strb	r3, [r1, #28]
   28290:	6940      	ldr	r0, [r0, #20]
   28292:	f000 f8af 	bl	283f4 <rpc_error_to_nrf_errno>
   28296:	4b03      	ldr	r3, [pc, #12]	; (282a4 <on_tls_attach_res+0x24>)
   28298:	61a0      	str	r0, [r4, #24]
   2829a:	6818      	ldr	r0, [r3, #0]
   2829c:	f7f9 fa6e 	bl	2177c <nrf_modem_os_sem_give>
   282a0:	2000      	movs	r0, #0
   282a2:	bd10      	pop	{r4, pc}
   282a4:	2000eea8 	.word	0x2000eea8

000282a8 <on_tls_handshake_ntf>:
   282a8:	b510      	push	{r4, lr}
   282aa:	7f0b      	ldrb	r3, [r1, #28]
   282ac:	460c      	mov	r4, r1
   282ae:	f36f 1304 	bfc	r3, #4, #1
   282b2:	770b      	strb	r3, [r1, #28]
   282b4:	6900      	ldr	r0, [r0, #16]
   282b6:	b958      	cbnz	r0, 282d0 <on_tls_handshake_ntf+0x28>
   282b8:	b2db      	uxtb	r3, r3
   282ba:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   282be:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   282c2:	770b      	strb	r3, [r1, #28]
   282c4:	4b04      	ldr	r3, [pc, #16]	; (282d8 <on_tls_handshake_ntf+0x30>)
   282c6:	6818      	ldr	r0, [r3, #0]
   282c8:	f7f9 fa58 	bl	2177c <nrf_modem_os_sem_give>
   282cc:	2000      	movs	r0, #0
   282ce:	bd10      	pop	{r4, pc}
   282d0:	f000 f890 	bl	283f4 <rpc_error_to_nrf_errno>
   282d4:	61a0      	str	r0, [r4, #24]
   282d6:	e7f5      	b.n	282c4 <on_tls_handshake_ntf+0x1c>
   282d8:	2000eea8 	.word	0x2000eea8

000282dc <tls_attach>:
   282dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   282e0:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 283c8 <tls_attach+0xec>
   282e4:	4605      	mov	r5, r0
   282e6:	f8d8 0000 	ldr.w	r0, [r8]
   282ea:	9101      	str	r1, [sp, #4]
   282ec:	f7f9 fa6a 	bl	217c4 <nrf_modem_os_sem_take>
   282f0:	4607      	mov	r7, r0
   282f2:	b150      	cbz	r0, 2830a <tls_attach+0x2e>
   282f4:	9b01      	ldr	r3, [sp, #4]
   282f6:	2b00      	cmp	r3, #0
   282f8:	d163      	bne.n	283c2 <tls_attach+0xe6>
   282fa:	2310      	movs	r3, #16
   282fc:	61ab      	str	r3, [r5, #24]
   282fe:	f04f 37ff 	mov.w	r7, #4294967295
   28302:	4638      	mov	r0, r7
   28304:	b002      	add	sp, #8
   28306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2830a:	6c28      	ldr	r0, [r5, #64]	; 0x40
   2830c:	b1a8      	cbz	r0, 2833a <tls_attach+0x5e>
   2830e:	f7e0 ff88 	bl	9222 <strlen>
   28312:	1c46      	adds	r6, r0, #1
   28314:	4630      	mov	r0, r6
   28316:	f00d f850 	bl	353ba <rpc_client_msg_alloc>
   2831a:	4604      	mov	r4, r0
   2831c:	b978      	cbnz	r0, 2833e <tls_attach+0x62>
   2831e:	4628      	mov	r0, r5
   28320:	f00d f91c 	bl	3555c <sock_is_nonblock>
   28324:	b108      	cbz	r0, 2832a <tls_attach+0x4e>
   28326:	2369      	movs	r3, #105	; 0x69
   28328:	61ab      	str	r3, [r5, #24]
   2832a:	f8d8 0000 	ldr.w	r0, [r8]
   2832e:	f7f9 fa25 	bl	2177c <nrf_modem_os_sem_give>
   28332:	2069      	movs	r0, #105	; 0x69
   28334:	f7f9 f9d0 	bl	216d8 <nrf_modem_os_errno_set>
   28338:	e7e1      	b.n	282fe <tls_attach+0x22>
   2833a:	463e      	mov	r6, r7
   2833c:	e7ea      	b.n	28314 <tls_attach+0x38>
   2833e:	682b      	ldr	r3, [r5, #0]
   28340:	2204      	movs	r2, #4
   28342:	6103      	str	r3, [r0, #16]
   28344:	2300      	movs	r3, #0
   28346:	7202      	strb	r2, [r0, #8]
   28348:	7243      	strb	r3, [r0, #9]
   2834a:	7283      	strb	r3, [r0, #10]
   2834c:	72c3      	strb	r3, [r0, #11]
   2834e:	f895 2047 	ldrb.w	r2, [r5, #71]	; 0x47
   28352:	f105 0144 	add.w	r1, r5, #68	; 0x44
   28356:	3201      	adds	r2, #1
   28358:	0092      	lsls	r2, r2, #2
   2835a:	6082      	str	r2, [r0, #8]
   2835c:	3014      	adds	r0, #20
   2835e:	f00e f8e3 	bl	36528 <memcpy>
   28362:	b1e6      	cbz	r6, 2839e <tls_attach+0xc2>
   28364:	4632      	mov	r2, r6
   28366:	6c29      	ldr	r1, [r5, #64]	; 0x40
   28368:	6820      	ldr	r0, [r4, #0]
   2836a:	f00e fa83 	bl	36874 <strncpy>
   2836e:	6066      	str	r6, [r4, #4]
   28370:	7f2b      	ldrb	r3, [r5, #28]
   28372:	2004      	movs	r0, #4
   28374:	f043 0310 	orr.w	r3, r3, #16
   28378:	4622      	mov	r2, r4
   2837a:	f247 0181 	movw	r1, #28801	; 0x7081
   2837e:	772b      	strb	r3, [r5, #28]
   28380:	f00d f837 	bl	353f2 <rpc_client_msg_send>
   28384:	4628      	mov	r0, r5
   28386:	f00d f8e9 	bl	3555c <sock_is_nonblock>
   2838a:	2800      	cmp	r0, #0
   2838c:	d1b9      	bne.n	28302 <tls_attach+0x26>
   2838e:	4628      	mov	r0, r5
   28390:	f00d f8e0 	bl	35554 <sock_is_attaching>
   28394:	b940      	cbnz	r0, 283a8 <tls_attach+0xcc>
   28396:	69a8      	ldr	r0, [r5, #24]
   28398:	2800      	cmp	r0, #0
   2839a:	d0b2      	beq.n	28302 <tls_attach+0x26>
   2839c:	e7ca      	b.n	28334 <tls_attach+0x58>
   2839e:	7026      	strb	r6, [r4, #0]
   283a0:	7066      	strb	r6, [r4, #1]
   283a2:	70a6      	strb	r6, [r4, #2]
   283a4:	70e6      	strb	r6, [r4, #3]
   283a6:	e7e2      	b.n	2836e <tls_attach+0x92>
   283a8:	2002      	movs	r0, #2
   283aa:	a901      	add	r1, sp, #4
   283ac:	f7f9 f8d2 	bl	21554 <nrf_modem_os_timedwait>
   283b0:	f110 0f0b 	cmn.w	r0, #11
   283b4:	d005      	beq.n	283c2 <tls_attach+0xe6>
   283b6:	2800      	cmp	r0, #0
   283b8:	d0e9      	beq.n	2838e <tls_attach+0xb2>
   283ba:	2800      	cmp	r0, #0
   283bc:	bfb8      	it	lt
   283be:	4240      	neglt	r0, r0
   283c0:	e7b8      	b.n	28334 <tls_attach+0x58>
   283c2:	2074      	movs	r0, #116	; 0x74
   283c4:	e7b6      	b.n	28334 <tls_attach+0x58>
   283c6:	bf00      	nop
   283c8:	2000eea8 	.word	0x2000eea8

000283cc <nrf_af_to_rpc_af>:
   283cc:	2803      	cmp	r0, #3
   283ce:	bf9c      	itt	ls
   283d0:	4b01      	ldrls	r3, [pc, #4]	; (283d8 <nrf_af_to_rpc_af+0xc>)
   283d2:	5618      	ldrsbls	r0, [r3, r0]
   283d4:	4770      	bx	lr
   283d6:	bf00      	nop
   283d8:	0004130b 	.word	0x0004130b

000283dc <nrf_so_to_rpc_so>:
   283dc:	3802      	subs	r0, #2
   283de:	2835      	cmp	r0, #53	; 0x35
   283e0:	bf9a      	itte	ls
   283e2:	4b03      	ldrls	r3, [pc, #12]	; (283f0 <nrf_so_to_rpc_so+0x14>)
   283e4:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   283e8:	f04f 30ff 	movhi.w	r0, #4294967295
   283ec:	4770      	bx	lr
   283ee:	bf00      	nop
   283f0:	00038930 	.word	0x00038930

000283f4 <rpc_error_to_nrf_errno>:
   283f4:	2870      	cmp	r0, #112	; 0x70
   283f6:	bf9a      	itte	ls
   283f8:	4b02      	ldrls	r3, [pc, #8]	; (28404 <rpc_error_to_nrf_errno+0x10>)
   283fa:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   283fe:	4802      	ldrhi	r0, [pc, #8]	; (28408 <rpc_error_to_nrf_errno+0x14>)
   28400:	4770      	bx	lr
   28402:	bf00      	nop
   28404:	0003876c 	.word	0x0003876c
   28408:	baadbaad 	.word	0xbaadbaad

0002840c <rpc_gnss_event_handler>:
   2840c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2840e:	6804      	ldr	r4, [r0, #0]
   28410:	4606      	mov	r6, r0
   28412:	b13c      	cbz	r4, 28424 <rpc_gnss_event_handler+0x18>
   28414:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   28418:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   2841c:	d104      	bne.n	28428 <rpc_gnss_event_handler+0x1c>
   2841e:	4b41      	ldr	r3, [pc, #260]	; (28524 <rpc_gnss_event_handler+0x118>)
   28420:	e9c3 1400 	strd	r1, r4, [r3]
   28424:	2000      	movs	r0, #0
   28426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28428:	4d3f      	ldr	r5, [pc, #252]	; (28528 <rpc_gnss_event_handler+0x11c>)
   2842a:	682b      	ldr	r3, [r5, #0]
   2842c:	2b00      	cmp	r3, #0
   2842e:	d06f      	beq.n	28510 <rpc_gnss_event_handler+0x104>
   28430:	f244 0204 	movw	r2, #16388	; 0x4004
   28434:	4291      	cmp	r1, r2
   28436:	d80b      	bhi.n	28450 <rpc_gnss_event_handler+0x44>
   28438:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
   2843c:	d968      	bls.n	28510 <rpc_gnss_event_handler+0x104>
   2843e:	f5a1 4180 	sub.w	r1, r1, #16384	; 0x4000
   28442:	3902      	subs	r1, #2
   28444:	2902      	cmp	r1, #2
   28446:	d82a      	bhi.n	2849e <rpc_gnss_event_handler+0x92>
   28448:	e8df f001 	tbb	[pc, r1]
   2844c:	5047      	.short	0x5047
   2844e:	59          	.byte	0x59
   2844f:	00          	.byte	0x00
   28450:	f244 1301 	movw	r3, #16641	; 0x4101
   28454:	4299      	cmp	r1, r3
   28456:	d02e      	beq.n	284b6 <rpc_gnss_event_handler+0xaa>
   28458:	f244 2301 	movw	r3, #16897	; 0x4201
   2845c:	4299      	cmp	r1, r3
   2845e:	d157      	bne.n	28510 <rpc_gnss_event_handler+0x104>
   28460:	4e32      	ldr	r6, [pc, #200]	; (2852c <rpc_gnss_event_handler+0x120>)
   28462:	6830      	ldr	r0, [r6, #0]
   28464:	b108      	cbz	r0, 2846a <rpc_gnss_event_handler+0x5e>
   28466:	f00c ffce 	bl	35406 <rpc_client_msg_data_rx_free>
   2846a:	2202      	movs	r2, #2
   2846c:	4b30      	ldr	r3, [pc, #192]	; (28530 <rpc_gnss_event_handler+0x124>)
   2846e:	6034      	str	r4, [r6, #0]
   28470:	f894 4051 	ldrb.w	r4, [r4, #81]	; 0x51
   28474:	701a      	strb	r2, [r3, #0]
   28476:	4e2f      	ldr	r6, [pc, #188]	; (28534 <rpc_gnss_event_handler+0x128>)
   28478:	f014 0708 	ands.w	r7, r4, #8
   2847c:	682b      	ldr	r3, [r5, #0]
   2847e:	7832      	ldrb	r2, [r6, #0]
   28480:	d025      	beq.n	284ce <rpc_gnss_event_handler+0xc2>
   28482:	b91a      	cbnz	r2, 2848c <rpc_gnss_event_handler+0x80>
   28484:	2005      	movs	r0, #5
   28486:	4798      	blx	r3
   28488:	2301      	movs	r3, #1
   2848a:	7033      	strb	r3, [r6, #0]
   2848c:	07e3      	lsls	r3, r4, #31
   2848e:	d502      	bpl.n	28496 <rpc_gnss_event_handler+0x8a>
   28490:	2002      	movs	r0, #2
   28492:	682b      	ldr	r3, [r5, #0]
   28494:	4798      	blx	r3
   28496:	2001      	movs	r0, #1
   28498:	682b      	ldr	r3, [r5, #0]
   2849a:	4798      	blx	r3
   2849c:	e7c2      	b.n	28424 <rpc_gnss_event_handler+0x18>
   2849e:	4e23      	ldr	r6, [pc, #140]	; (2852c <rpc_gnss_event_handler+0x120>)
   284a0:	6830      	ldr	r0, [r6, #0]
   284a2:	b108      	cbz	r0, 284a8 <rpc_gnss_event_handler+0x9c>
   284a4:	f00c ffaf 	bl	35406 <rpc_client_msg_data_rx_free>
   284a8:	2200      	movs	r2, #0
   284aa:	4b21      	ldr	r3, [pc, #132]	; (28530 <rpc_gnss_event_handler+0x124>)
   284ac:	6034      	str	r4, [r6, #0]
   284ae:	701a      	strb	r2, [r3, #0]
   284b0:	f894 403d 	ldrb.w	r4, [r4, #61]	; 0x3d
   284b4:	e7df      	b.n	28476 <rpc_gnss_event_handler+0x6a>
   284b6:	4e1d      	ldr	r6, [pc, #116]	; (2852c <rpc_gnss_event_handler+0x120>)
   284b8:	6830      	ldr	r0, [r6, #0]
   284ba:	b108      	cbz	r0, 284c0 <rpc_gnss_event_handler+0xb4>
   284bc:	f00c ffa3 	bl	35406 <rpc_client_msg_data_rx_free>
   284c0:	2201      	movs	r2, #1
   284c2:	4b1b      	ldr	r3, [pc, #108]	; (28530 <rpc_gnss_event_handler+0x124>)
   284c4:	6034      	str	r4, [r6, #0]
   284c6:	701a      	strb	r2, [r3, #0]
   284c8:	f894 4041 	ldrb.w	r4, [r4, #65]	; 0x41
   284cc:	e7d3      	b.n	28476 <rpc_gnss_event_handler+0x6a>
   284ce:	2a00      	cmp	r2, #0
   284d0:	d0dc      	beq.n	2848c <rpc_gnss_event_handler+0x80>
   284d2:	2006      	movs	r0, #6
   284d4:	4798      	blx	r3
   284d6:	7037      	strb	r7, [r6, #0]
   284d8:	e7d8      	b.n	2848c <rpc_gnss_event_handler+0x80>
   284da:	4e17      	ldr	r6, [pc, #92]	; (28538 <rpc_gnss_event_handler+0x12c>)
   284dc:	6830      	ldr	r0, [r6, #0]
   284de:	b108      	cbz	r0, 284e4 <rpc_gnss_event_handler+0xd8>
   284e0:	f00c ff91 	bl	35406 <rpc_client_msg_data_rx_free>
   284e4:	2003      	movs	r0, #3
   284e6:	682b      	ldr	r3, [r5, #0]
   284e8:	6034      	str	r4, [r6, #0]
   284ea:	e7d6      	b.n	2849a <rpc_gnss_event_handler+0x8e>
   284ec:	4e13      	ldr	r6, [pc, #76]	; (2853c <rpc_gnss_event_handler+0x130>)
   284ee:	6830      	ldr	r0, [r6, #0]
   284f0:	b108      	cbz	r0, 284f6 <rpc_gnss_event_handler+0xea>
   284f2:	f00c ff88 	bl	35406 <rpc_client_msg_data_rx_free>
   284f6:	2004      	movs	r0, #4
   284f8:	682b      	ldr	r3, [r5, #0]
   284fa:	6034      	str	r4, [r6, #0]
   284fc:	e7cd      	b.n	2849a <rpc_gnss_event_handler+0x8e>
   284fe:	7822      	ldrb	r2, [r4, #0]
   28500:	2a03      	cmp	r2, #3
   28502:	d805      	bhi.n	28510 <rpc_gnss_event_handler+0x104>
   28504:	e8df f002 	tbb	[pc, r2]
   28508:	0c0a0802 	.word	0x0c0a0802
   2850c:	2007      	movs	r0, #7
   2850e:	4798      	blx	r3
   28510:	6830      	ldr	r0, [r6, #0]
   28512:	f00c ff78 	bl	35406 <rpc_client_msg_data_rx_free>
   28516:	e785      	b.n	28424 <rpc_gnss_event_handler+0x18>
   28518:	2008      	movs	r0, #8
   2851a:	e7f8      	b.n	2850e <rpc_gnss_event_handler+0x102>
   2851c:	2009      	movs	r0, #9
   2851e:	e7f6      	b.n	2850e <rpc_gnss_event_handler+0x102>
   28520:	200a      	movs	r0, #10
   28522:	e7f4      	b.n	2850e <rpc_gnss_event_handler+0x102>
   28524:	2000eebc 	.word	0x2000eebc
   28528:	2000eeac 	.word	0x2000eeac
   2852c:	2000eeb8 	.word	0x2000eeb8
   28530:	2001077b 	.word	0x2001077b
   28534:	2001077c 	.word	0x2001077c
   28538:	2000eeb4 	.word	0x2000eeb4
   2853c:	2000eeb0 	.word	0x2000eeb0

00028540 <rpc_gnss_init>:
   28540:	b508      	push	{r3, lr}
   28542:	2300      	movs	r3, #0
   28544:	4a09      	ldr	r2, [pc, #36]	; (2856c <rpc_gnss_init+0x2c>)
   28546:	480a      	ldr	r0, [pc, #40]	; (28570 <rpc_gnss_init+0x30>)
   28548:	7013      	strb	r3, [r2, #0]
   2854a:	4a0a      	ldr	r2, [pc, #40]	; (28574 <rpc_gnss_init+0x34>)
   2854c:	7013      	strb	r3, [r2, #0]
   2854e:	4a0a      	ldr	r2, [pc, #40]	; (28578 <rpc_gnss_init+0x38>)
   28550:	7013      	strb	r3, [r2, #0]
   28552:	4a0a      	ldr	r2, [pc, #40]	; (2857c <rpc_gnss_init+0x3c>)
   28554:	7013      	strb	r3, [r2, #0]
   28556:	4a0a      	ldr	r2, [pc, #40]	; (28580 <rpc_gnss_init+0x40>)
   28558:	6013      	str	r3, [r2, #0]
   2855a:	2201      	movs	r2, #1
   2855c:	4611      	mov	r1, r2
   2855e:	f7f9 f8d9 	bl	21714 <nrf_modem_os_sem_init>
   28562:	2800      	cmp	r0, #0
   28564:	bf18      	it	ne
   28566:	f06f 002d 	mvnne.w	r0, #45	; 0x2d
   2856a:	bd08      	pop	{r3, pc}
   2856c:	2001077c 	.word	0x2001077c
   28570:	2000eec4 	.word	0x2000eec4
   28574:	2001077e 	.word	0x2001077e
   28578:	2001077d 	.word	0x2001077d
   2857c:	2001077b 	.word	0x2001077b
   28580:	2000eeac 	.word	0x2000eeac

00028584 <rpc_gnss_deinit>:
   28584:	b510      	push	{r4, lr}
   28586:	4c0b      	ldr	r4, [pc, #44]	; (285b4 <rpc_gnss_deinit+0x30>)
   28588:	6820      	ldr	r0, [r4, #0]
   2858a:	b118      	cbz	r0, 28594 <rpc_gnss_deinit+0x10>
   2858c:	f00c ff3b 	bl	35406 <rpc_client_msg_data_rx_free>
   28590:	2300      	movs	r3, #0
   28592:	6023      	str	r3, [r4, #0]
   28594:	4c08      	ldr	r4, [pc, #32]	; (285b8 <rpc_gnss_deinit+0x34>)
   28596:	6820      	ldr	r0, [r4, #0]
   28598:	b118      	cbz	r0, 285a2 <rpc_gnss_deinit+0x1e>
   2859a:	f00c ff34 	bl	35406 <rpc_client_msg_data_rx_free>
   2859e:	2300      	movs	r3, #0
   285a0:	6023      	str	r3, [r4, #0]
   285a2:	4c06      	ldr	r4, [pc, #24]	; (285bc <rpc_gnss_deinit+0x38>)
   285a4:	6820      	ldr	r0, [r4, #0]
   285a6:	b118      	cbz	r0, 285b0 <rpc_gnss_deinit+0x2c>
   285a8:	f00c ff2d 	bl	35406 <rpc_client_msg_data_rx_free>
   285ac:	2300      	movs	r3, #0
   285ae:	6023      	str	r3, [r4, #0]
   285b0:	2000      	movs	r0, #0
   285b2:	bd10      	pop	{r4, pc}
   285b4:	2000eeb8 	.word	0x2000eeb8
   285b8:	2000eeb4 	.word	0x2000eeb4
   285bc:	2000eeb0 	.word	0x2000eeb0

000285c0 <modem_off>:
   285c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   285c2:	2501      	movs	r5, #1
   285c4:	4c07      	ldr	r4, [pc, #28]	; (285e4 <modem_off+0x24>)
   285c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   285ca:	6165      	str	r5, [r4, #20]
   285cc:	f00c fa5b 	bl	34a86 <nrf_modem_os_busywait>
   285d0:	2300      	movs	r3, #0
   285d2:	6163      	str	r3, [r4, #20]
   285d4:	9301      	str	r3, [sp, #4]
   285d6:	6125      	str	r5, [r4, #16]
   285d8:	6923      	ldr	r3, [r4, #16]
   285da:	9301      	str	r3, [sp, #4]
   285dc:	9b01      	ldr	r3, [sp, #4]
   285de:	b003      	add	sp, #12
   285e0:	bd30      	pop	{r4, r5, pc}
   285e2:	bf00      	nop
   285e4:	40005600 	.word	0x40005600

000285e8 <atomic_set.constprop.0.isra.0>:
   285e8:	4b03      	ldr	r3, [pc, #12]	; (285f8 <atomic_set.constprop.0.isra.0+0x10>)
   285ea:	e8d3 2fef 	ldaex	r2, [r3]
   285ee:	e8c3 0fe1 	stlex	r1, r0, [r3]
   285f2:	2900      	cmp	r1, #0
   285f4:	d1f9      	bne.n	285ea <atomic_set.constprop.0.isra.0+0x2>
   285f6:	4770      	bx	lr
   285f8:	2000eec8 	.word	0x2000eec8

000285fc <nrf_modem_init>:
   285fc:	b570      	push	{r4, r5, r6, lr}
   285fe:	4604      	mov	r4, r0
   28600:	b086      	sub	sp, #24
   28602:	b390      	cbz	r0, 2866a <nrf_modem_init+0x6e>
   28604:	6a43      	ldr	r3, [r0, #36]	; 0x24
   28606:	b3ab      	cbz	r3, 28674 <nrf_modem_init+0x78>
   28608:	2201      	movs	r2, #1
   2860a:	4b1d      	ldr	r3, [pc, #116]	; (28680 <nrf_modem_init+0x84>)
   2860c:	e8d3 1fef 	ldaex	r1, [r3]
   28610:	2900      	cmp	r1, #0
   28612:	d103      	bne.n	2861c <nrf_modem_init+0x20>
   28614:	e8c3 2fe0 	stlex	r0, r2, [r3]
   28618:	2800      	cmp	r0, #0
   2861a:	d1f7      	bne.n	2860c <nrf_modem_init+0x10>
   2861c:	d12d      	bne.n	2867a <nrf_modem_init+0x7e>
   2861e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   28620:	f000 f832 	bl	28688 <nrf_modem_fault_handler_set>
   28624:	f7f9 f946 	bl	218b4 <nrf_modem_os_init>
   28628:	6a23      	ldr	r3, [r4, #32]
   2862a:	ad02      	add	r5, sp, #8
   2862c:	f88d 3004 	strb.w	r3, [sp, #4]
   28630:	4b14      	ldr	r3, [pc, #80]	; (28684 <nrf_modem_init+0x88>)
   28632:	9400      	str	r4, [sp, #0]
   28634:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   28636:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   2863a:	4668      	mov	r0, sp
   2863c:	f00c fe7c 	bl	35338 <rpc_init>
   28640:	4604      	mov	r4, r0
   28642:	b950      	cbnz	r0, 2865a <nrf_modem_init+0x5e>
   28644:	4606      	mov	r6, r0
   28646:	f855 3b04 	ldr.w	r3, [r5], #4
   2864a:	4798      	blx	r3
   2864c:	4604      	mov	r4, r0
   2864e:	b920      	cbnz	r0, 2865a <nrf_modem_init+0x5e>
   28650:	3601      	adds	r6, #1
   28652:	2e04      	cmp	r6, #4
   28654:	d1f7      	bne.n	28646 <nrf_modem_init+0x4a>
   28656:	2002      	movs	r0, #2
   28658:	e004      	b.n	28664 <nrf_modem_init+0x68>
   2865a:	f7ff ffb1 	bl	285c0 <modem_off>
   2865e:	f7f9 f941 	bl	218e4 <nrf_modem_os_shutdown>
   28662:	2000      	movs	r0, #0
   28664:	f7ff ffc0 	bl	285e8 <atomic_set.constprop.0.isra.0>
   28668:	e001      	b.n	2866e <nrf_modem_init+0x72>
   2866a:	f06f 040d 	mvn.w	r4, #13
   2866e:	4620      	mov	r0, r4
   28670:	b006      	add	sp, #24
   28672:	bd70      	pop	{r4, r5, r6, pc}
   28674:	f06f 0415 	mvn.w	r4, #21
   28678:	e7f9      	b.n	2866e <nrf_modem_init+0x72>
   2867a:	f04f 34ff 	mov.w	r4, #4294967295
   2867e:	e7f6      	b.n	2866e <nrf_modem_init+0x72>
   28680:	2000eec8 	.word	0x2000eec8
   28684:	00037b90 	.word	0x00037b90

00028688 <nrf_modem_fault_handler_set>:
   28688:	4b01      	ldr	r3, [pc, #4]	; (28690 <nrf_modem_fault_handler_set+0x8>)
   2868a:	6018      	str	r0, [r3, #0]
   2868c:	4770      	bx	lr
   2868e:	bf00      	nop
   28690:	2000eecc 	.word	0x2000eecc

00028694 <nrf_modem_fault_handler_internal>:
   28694:	b507      	push	{r0, r1, r2, lr}
   28696:	4b04      	ldr	r3, [pc, #16]	; (286a8 <nrf_modem_fault_handler_internal+0x14>)
   28698:	e9cd 0100 	strd	r0, r1, [sp]
   2869c:	681b      	ldr	r3, [r3, #0]
   2869e:	4668      	mov	r0, sp
   286a0:	4798      	blx	r3
   286a2:	b003      	add	sp, #12
   286a4:	f85d fb04 	ldr.w	pc, [sp], #4
   286a8:	2000eecc 	.word	0x2000eecc

000286ac <nrf_modem_state_set>:
   286ac:	4b01      	ldr	r3, [pc, #4]	; (286b4 <nrf_modem_state_set+0x8>)
   286ae:	7018      	strb	r0, [r3, #0]
   286b0:	4770      	bx	lr
   286b2:	bf00      	nop
   286b4:	2001077f 	.word	0x2001077f

000286b8 <nrf_modem_state_is_initialized>:
   286b8:	4b02      	ldr	r3, [pc, #8]	; (286c4 <nrf_modem_state_is_initialized+0xc>)
   286ba:	7818      	ldrb	r0, [r3, #0]
   286bc:	1e43      	subs	r3, r0, #1
   286be:	4258      	negs	r0, r3
   286c0:	4158      	adcs	r0, r3
   286c2:	4770      	bx	lr
   286c4:	2001077f 	.word	0x2001077f

000286c8 <ipc_trace_init>:
   286c8:	2100      	movs	r1, #0
   286ca:	4b07      	ldr	r3, [pc, #28]	; (286e8 <ipc_trace_init+0x20>)
   286cc:	2201      	movs	r2, #1
   286ce:	7019      	strb	r1, [r3, #0]
   286d0:	4b06      	ldr	r3, [pc, #24]	; (286ec <ipc_trace_init+0x24>)
   286d2:	7019      	strb	r1, [r3, #0]
   286d4:	4b06      	ldr	r3, [pc, #24]	; (286f0 <ipc_trace_init+0x28>)
   286d6:	6019      	str	r1, [r3, #0]
   286d8:	4b06      	ldr	r3, [pc, #24]	; (286f4 <ipc_trace_init+0x2c>)
   286da:	6019      	str	r1, [r3, #0]
   286dc:	4b06      	ldr	r3, [pc, #24]	; (286f8 <ipc_trace_init+0x30>)
   286de:	6018      	str	r0, [r3, #0]
   286e0:	4806      	ldr	r0, [pc, #24]	; (286fc <ipc_trace_init+0x34>)
   286e2:	f7f9 b817 	b.w	21714 <nrf_modem_os_sem_init>
   286e6:	bf00      	nop
   286e8:	20010780 	.word	0x20010780
   286ec:	20010781 	.word	0x20010781
   286f0:	2000eed4 	.word	0x2000eed4
   286f4:	2000eed8 	.word	0x2000eed8
   286f8:	2000eee8 	.word	0x2000eee8
   286fc:	2000eed0 	.word	0x2000eed0

00028700 <ipc_trace_handler>:
   28700:	b470      	push	{r4, r5, r6}
   28702:	4b2d      	ldr	r3, [pc, #180]	; (287b8 <ipc_trace_handler+0xb8>)
   28704:	681b      	ldr	r3, [r3, #0]
   28706:	6919      	ldr	r1, [r3, #16]
   28708:	6958      	ldr	r0, [r3, #20]
   2870a:	7c1a      	ldrb	r2, [r3, #16]
   2870c:	2200      	movs	r2, #0
   2870e:	741a      	strb	r2, [r3, #16]
   28710:	7c5c      	ldrb	r4, [r3, #17]
   28712:	745a      	strb	r2, [r3, #17]
   28714:	7c9c      	ldrb	r4, [r3, #18]
   28716:	749a      	strb	r2, [r3, #18]
   28718:	7cdc      	ldrb	r4, [r3, #19]
   2871a:	74da      	strb	r2, [r3, #19]
   2871c:	7d1c      	ldrb	r4, [r3, #20]
   2871e:	751a      	strb	r2, [r3, #20]
   28720:	7d5c      	ldrb	r4, [r3, #21]
   28722:	755a      	strb	r2, [r3, #21]
   28724:	7d9c      	ldrb	r4, [r3, #22]
   28726:	2903      	cmp	r1, #3
   28728:	759a      	strb	r2, [r3, #22]
   2872a:	7ddc      	ldrb	r4, [r3, #23]
   2872c:	75da      	strb	r2, [r3, #23]
   2872e:	d029      	beq.n	28784 <ipc_trace_handler+0x84>
   28730:	2904      	cmp	r1, #4
   28732:	d033      	beq.n	2879c <ipc_trace_handler+0x9c>
   28734:	2901      	cmp	r1, #1
   28736:	d12f      	bne.n	28798 <ipc_trace_handler+0x98>
   28738:	6885      	ldr	r5, [r0, #8]
   2873a:	4e20      	ldr	r6, [pc, #128]	; (287bc <ipc_trace_handler+0xbc>)
   2873c:	4295      	cmp	r5, r2
   2873e:	d110      	bne.n	28762 <ipc_trace_handler+0x62>
   28740:	2101      	movs	r1, #1
   28742:	7a1a      	ldrb	r2, [r3, #8]
   28744:	2200      	movs	r2, #0
   28746:	7219      	strb	r1, [r3, #8]
   28748:	7a59      	ldrb	r1, [r3, #9]
   2874a:	725a      	strb	r2, [r3, #9]
   2874c:	7a99      	ldrb	r1, [r3, #10]
   2874e:	729a      	strb	r2, [r3, #10]
   28750:	7ada      	ldrb	r2, [r3, #11]
   28752:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   28756:	72da      	strb	r2, [r3, #11]
   28758:	4b19      	ldr	r3, [pc, #100]	; (287c0 <ipc_trace_handler+0xc0>)
   2875a:	bc70      	pop	{r4, r5, r6}
   2875c:	6818      	ldr	r0, [r3, #0]
   2875e:	f7f9 b80d 	b.w	2177c <nrf_modem_os_sem_give>
   28762:	1c91      	adds	r1, r2, #2
   28764:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   28768:	684c      	ldr	r4, [r1, #4]
   2876a:	7821      	ldrb	r1, [r4, #0]
   2876c:	2962      	cmp	r1, #98	; 0x62
   2876e:	d007      	beq.n	28780 <ipc_trace_handler+0x80>
   28770:	3963      	subs	r1, #99	; 0x63
   28772:	bf18      	it	ne
   28774:	2101      	movne	r1, #1
   28776:	0049      	lsls	r1, r1, #1
   28778:	f846 4021 	str.w	r4, [r6, r1, lsl #2]
   2877c:	3201      	adds	r2, #1
   2877e:	e7dd      	b.n	2873c <ipc_trace_handler+0x3c>
   28780:	2101      	movs	r1, #1
   28782:	e7f9      	b.n	28778 <ipc_trace_handler+0x78>
   28784:	7a18      	ldrb	r0, [r3, #8]
   28786:	7219      	strb	r1, [r3, #8]
   28788:	7a59      	ldrb	r1, [r3, #9]
   2878a:	725a      	strb	r2, [r3, #9]
   2878c:	7a99      	ldrb	r1, [r3, #10]
   2878e:	729a      	strb	r2, [r3, #10]
   28790:	7ada      	ldrb	r2, [r3, #11]
   28792:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   28796:	72da      	strb	r2, [r3, #11]
   28798:	bc70      	pop	{r4, r5, r6}
   2879a:	4770      	bx	lr
   2879c:	7a18      	ldrb	r0, [r3, #8]
   2879e:	7219      	strb	r1, [r3, #8]
   287a0:	7a59      	ldrb	r1, [r3, #9]
   287a2:	725a      	strb	r2, [r3, #9]
   287a4:	7a99      	ldrb	r1, [r3, #10]
   287a6:	729a      	strb	r2, [r3, #10]
   287a8:	7ada      	ldrb	r2, [r3, #11]
   287aa:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   287ae:	72da      	strb	r2, [r3, #11]
   287b0:	2201      	movs	r2, #1
   287b2:	4b04      	ldr	r3, [pc, #16]	; (287c4 <ipc_trace_handler+0xc4>)
   287b4:	701a      	strb	r2, [r3, #0]
   287b6:	e7ef      	b.n	28798 <ipc_trace_handler+0x98>
   287b8:	2000eee8 	.word	0x2000eee8
   287bc:	2000eedc 	.word	0x2000eedc
   287c0:	2000eed0 	.word	0x2000eed0
   287c4:	20010781 	.word	0x20010781

000287c8 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   287c8:	4b01      	ldr	r3, [pc, #4]	; (287d0 <z_impl_z_errno+0x8>)
   287ca:	6898      	ldr	r0, [r3, #8]
}
   287cc:	3064      	adds	r0, #100	; 0x64
   287ce:	4770      	bx	lr
   287d0:	2000eeec 	.word	0x2000eeec

000287d4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   287d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   287d8:	b086      	sub	sp, #24
   287da:	4604      	mov	r4, r0
   287dc:	460e      	mov	r6, r1
   287de:	af00      	add	r7, sp, #0
	__asm__ volatile(
   287e0:	f04f 0320 	mov.w	r3, #32
   287e4:	f3ef 8811 	mrs	r8, BASEPRI
   287e8:	f383 8812 	msr	BASEPRI_MAX, r3
   287ec:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   287f0:	f002 fde0 	bl	2b3b4 <z_impl_z_current_get>
   287f4:	2c04      	cmp	r4, #4
   287f6:	bf98      	it	ls
   287f8:	4b34      	ldrls	r3, [pc, #208]	; (288cc <z_fatal_error+0xf8>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   287fa:	46e9      	mov	r9, sp
   287fc:	b08a      	sub	sp, #40	; 0x28
   287fe:	4605      	mov	r5, r0
   28800:	466a      	mov	r2, sp
   28802:	bf94      	ite	ls
   28804:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
   28808:	4b31      	ldrhi	r3, [pc, #196]	; (288d0 <z_fatal_error+0xfc>)
   2880a:	61d3      	str	r3, [r2, #28]
   2880c:	f240 3301 	movw	r3, #769	; 0x301
   28810:	f04f 0a00 	mov.w	sl, #0
   28814:	8493      	strh	r3, [r2, #36]	; 0x24
   28816:	492f      	ldr	r1, [pc, #188]	; (288d4 <z_fatal_error+0x100>)
   28818:	4b2f      	ldr	r3, [pc, #188]	; (288d8 <z_fatal_error+0x104>)
   2881a:	e9c2 1405 	strd	r1, r4, [r2, #20]
   2881e:	f8c2 a020 	str.w	sl, [r2, #32]
   28822:	f842 3f10 	str.w	r3, [r2, #16]!
   28826:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   2882a:	4653      	mov	r3, sl
   2882c:	482b      	ldr	r0, [pc, #172]	; (288dc <z_fatal_error+0x108>)
   2882e:	f7e7 fd01 	bl	10234 <z_impl_z_log_msg_static_create>
   28832:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   28834:	b17e      	cbz	r6, 28856 <z_fatal_error+0x82>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   28836:	69f3      	ldr	r3, [r6, #28]
   28838:	f3c3 0308 	ubfx	r3, r3, #0, #9
   2883c:	b15b      	cbz	r3, 28856 <z_fatal_error+0x82>
		LOG_ERR("Fault during interrupt handling\n");
   2883e:	4b28      	ldr	r3, [pc, #160]	; (288e0 <z_fatal_error+0x10c>)
   28840:	617b      	str	r3, [r7, #20]
   28842:	2302      	movs	r3, #2
   28844:	613b      	str	r3, [r7, #16]
   28846:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2884a:	4653      	mov	r3, sl
   2884c:	4823      	ldr	r0, [pc, #140]	; (288dc <z_fatal_error+0x108>)
   2884e:	f107 0210 	add.w	r2, r7, #16
   28852:	f7e7 fcef 	bl	10234 <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   28856:	b12d      	cbz	r5, 28864 <z_fatal_error+0x90>
   28858:	4628      	mov	r0, r5
   2885a:	f00d fc3d 	bl	360d8 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   2885e:	b108      	cbz	r0, 28864 <z_fatal_error+0x90>
   28860:	7803      	ldrb	r3, [r0, #0]
   28862:	b903      	cbnz	r3, 28866 <z_fatal_error+0x92>
		thread_name = "unknown";
   28864:	481f      	ldr	r0, [pc, #124]	; (288e4 <z_fatal_error+0x110>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   28866:	46e9      	mov	r9, sp
   28868:	b08a      	sub	sp, #40	; 0x28
   2886a:	466a      	mov	r2, sp
   2886c:	4b1e      	ldr	r3, [pc, #120]	; (288e8 <z_fatal_error+0x114>)
   2886e:	61d0      	str	r0, [r2, #28]
   28870:	e9c2 3505 	strd	r3, r5, [r2, #20]
   28874:	f240 3301 	movw	r3, #769	; 0x301
   28878:	8413      	strh	r3, [r2, #32]
   2887a:	4b1c      	ldr	r3, [pc, #112]	; (288ec <z_fatal_error+0x118>)
   2887c:	f842 3f10 	str.w	r3, [r2, #16]!
   28880:	2300      	movs	r3, #0
   28882:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   28886:	4815      	ldr	r0, [pc, #84]	; (288dc <z_fatal_error+0x108>)
   28888:	f7e7 fcd4 	bl	10234 <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   2888c:	4631      	mov	r1, r6
   2888e:	46cd      	mov	sp, r9
   28890:	4620      	mov	r0, r4
   28892:	f7fc ff51 	bl	25738 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   28896:	2c04      	cmp	r4, #4
   28898:	d10c      	bne.n	288b4 <z_fatal_error+0xe0>
   2889a:	4915      	ldr	r1, [pc, #84]	; (288f0 <z_fatal_error+0x11c>)
   2889c:	2393      	movs	r3, #147	; 0x93
   2889e:	4a15      	ldr	r2, [pc, #84]	; (288f4 <z_fatal_error+0x120>)
   288a0:	4815      	ldr	r0, [pc, #84]	; (288f8 <z_fatal_error+0x124>)
   288a2:	f006 fd8f 	bl	2f3c4 <assert_print>
   288a6:	4815      	ldr	r0, [pc, #84]	; (288fc <z_fatal_error+0x128>)
   288a8:	f006 fd8c 	bl	2f3c4 <assert_print>
   288ac:	2193      	movs	r1, #147	; 0x93
   288ae:	4811      	ldr	r0, [pc, #68]	; (288f4 <z_fatal_error+0x120>)
   288b0:	f006 fd81 	bl	2f3b6 <assert_post_action>
	__asm__ volatile(
   288b4:	f388 8811 	msr	BASEPRI, r8
   288b8:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   288bc:	4628      	mov	r0, r5
   288be:	f7ea fb69 	bl	12f94 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   288c2:	3718      	adds	r7, #24
   288c4:	46bd      	mov	sp, r7
   288c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   288ca:	bf00      	nop
   288cc:	00038a0c 	.word	0x00038a0c
   288d0:	0004130f 	.word	0x0004130f
   288d4:	0004131d 	.word	0x0004131d
   288d8:	01000005 	.word	0x01000005
   288dc:	00037a40 	.word	0x00037a40
   288e0:	00041345 	.word	0x00041345
   288e4:	0003b90a 	.word	0x0003b90a
   288e8:	00041366 	.word	0x00041366
   288ec:	01000004 	.word	0x01000004
   288f0:	000413a0 	.word	0x000413a0
   288f4:	0004137e 	.word	0x0004137e
   288f8:	00039995 	.word	0x00039995
   288fc:	000413bd 	.word	0x000413bd

00028900 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   28900:	4b10      	ldr	r3, [pc, #64]	; (28944 <z_sys_init_run_level+0x44>)
{
   28902:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   28904:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   28908:	3001      	adds	r0, #1
   2890a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   2890e:	42a6      	cmp	r6, r4
   28910:	d800      	bhi.n	28914 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
   28912:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
   28914:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
   28918:	b18d      	cbz	r5, 2893e <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
   2891a:	4628      	mov	r0, r5
   2891c:	4798      	blx	r3
			if (rc != 0) {
   2891e:	b138      	cbz	r0, 28930 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   28920:	2800      	cmp	r0, #0
   28922:	bfb8      	it	lt
   28924:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
   28926:	28ff      	cmp	r0, #255	; 0xff
   28928:	bfa8      	it	ge
   2892a:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   2892c:	68eb      	ldr	r3, [r5, #12]
   2892e:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   28930:	68ea      	ldr	r2, [r5, #12]
   28932:	7853      	ldrb	r3, [r2, #1]
   28934:	f043 0301 	orr.w	r3, r3, #1
   28938:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   2893a:	3408      	adds	r4, #8
   2893c:	e7e7      	b.n	2890e <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
   2893e:	4798      	blx	r3
   28940:	e7fb      	b.n	2893a <z_sys_init_run_level+0x3a>
   28942:	bf00      	nop
   28944:	00038a20 	.word	0x00038a20

00028948 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   28948:	2201      	movs	r2, #1
{
   2894a:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   2894c:	4b09      	ldr	r3, [pc, #36]	; (28974 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   2894e:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   28950:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   28952:	f7ff ffd5 	bl	28900 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   28956:	f003 fdd3 	bl	2c500 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   2895a:	2004      	movs	r0, #4
   2895c:	f7ff ffd0 	bl	28900 <z_sys_init_run_level>

	z_init_static_threads();
   28960:	f000 fb66 	bl	29030 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
   28964:	f7e3 f9d6 	bl	bd14 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   28968:	4a03      	ldr	r2, [pc, #12]	; (28978 <bg_thread_main+0x30>)
   2896a:	7b13      	ldrb	r3, [r2, #12]
   2896c:	f023 0301 	bic.w	r3, r3, #1
   28970:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   28972:	bd08      	pop	{r3, pc}
   28974:	20010782 	.word	0x20010782
   28978:	2000e080 	.word	0x2000e080

0002897c <z_bss_zero>:
{
   2897c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   2897e:	4803      	ldr	r0, [pc, #12]	; (2898c <z_bss_zero+0x10>)
   28980:	4a03      	ldr	r2, [pc, #12]	; (28990 <z_bss_zero+0x14>)
   28982:	2100      	movs	r1, #0
   28984:	1a12      	subs	r2, r2, r0
   28986:	f00d fb72 	bl	3606e <z_early_memset>
}
   2898a:	bd08      	pop	{r3, pc}
   2898c:	2000d1b8 	.word	0x2000d1b8
   28990:	20010784 	.word	0x20010784

00028994 <z_init_cpu>:

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
	struct k_thread *thread = &z_idle_threads[i];
   28994:	2388      	movs	r3, #136	; 0x88
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   28996:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
   28998:	4e13      	ldr	r6, [pc, #76]	; (289e8 <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
   2899a:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
   2899c:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
   289a0:	2300      	movs	r3, #0
{
   289a2:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   289a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
   289a8:	220f      	movs	r2, #15
   289aa:	9301      	str	r3, [sp, #4]
   289ac:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   289b0:	2314      	movs	r3, #20
	z_setup_new_thread(thread, stack,
   289b2:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   289b6:	4d0d      	ldr	r5, [pc, #52]	; (289ec <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
   289b8:	490d      	ldr	r1, [pc, #52]	; (289f0 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   289ba:	fb03 5500 	mla	r5, r3, r0, r5
{
   289be:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   289c0:	fb02 1100 	mla	r1, r2, r0, r1
   289c4:	4b0b      	ldr	r3, [pc, #44]	; (289f4 <z_init_cpu+0x60>)
   289c6:	4630      	mov	r0, r6
   289c8:	9500      	str	r5, [sp, #0]
   289ca:	f000 fa97 	bl	28efc <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   289ce:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
   289d0:	742c      	strb	r4, [r5, #16]
   289d2:	f023 0304 	bic.w	r3, r3, #4
   289d6:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   289d8:	4b07      	ldr	r3, [pc, #28]	; (289f8 <z_init_cpu+0x64>)
   289da:	3401      	adds	r4, #1
   289dc:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   289e0:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   289e2:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   289e4:	b006      	add	sp, #24
   289e6:	bd70      	pop	{r4, r5, r6, pc}
   289e8:	2000dff8 	.word	0x2000dff8
   289ec:	2000eeec 	.word	0x2000eeec
   289f0:	20012cc8 	.word	0x20012cc8
   289f4:	00029181 	.word	0x00029181
   289f8:	200124c8 	.word	0x200124c8

000289fc <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
   289fc:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   289fe:	2000      	movs	r0, #0
{
   28a00:	b0a8      	sub	sp, #160	; 0xa0
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   28a02:	f7ff ff7d 	bl	28900 <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   28a06:	4b2f      	ldr	r3, [pc, #188]	; (28ac4 <z_cstart+0xc8>)
	uint32_t msp =
   28a08:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   28a0c:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   28a10:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   28a14:	2400      	movs	r4, #0
   28a16:	23e0      	movs	r3, #224	; 0xe0
   28a18:	4d2b      	ldr	r5, [pc, #172]	; (28ac8 <z_cstart+0xcc>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   28a1a:	4e2c      	ldr	r6, [pc, #176]	; (28acc <z_cstart+0xd0>)
   28a1c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   28a20:	77ec      	strb	r4, [r5, #31]
   28a22:	762c      	strb	r4, [r5, #24]
   28a24:	766c      	strb	r4, [r5, #25]
   28a26:	76ac      	strb	r4, [r5, #26]
   28a28:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   28a2c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   28a2e:	4f28      	ldr	r7, [pc, #160]	; (28ad0 <z_cstart+0xd4>)
   28a30:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   28a34:	626b      	str	r3, [r5, #36]	; 0x24
   28a36:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   28a3a:	f7ea fa0f 	bl	12e5c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   28a3e:	f7e9 fcf9 	bl	12434 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   28a42:	f04f 33ff 	mov.w	r3, #4294967295
   28a46:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   28a48:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   28a4a:	f7ea fc83 	bl	13354 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   28a4e:	f7ea fab7 	bl	12fc0 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   28a52:	f7e7 f9e1 	bl	fe18 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   28a56:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   28a5a:	ad06      	add	r5, sp, #24
   28a5c:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
   28a5e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
   28a62:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	k_thread_system_pool_assign(dummy_thread);
   28a66:	f003 fd2d 	bl	2c4c4 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   28a6a:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   28a6c:	f00d faf3 	bl	36056 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   28a70:	2001      	movs	r0, #1
   28a72:	f7ff ff45 	bl	28900 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   28a76:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   28a78:	4d16      	ldr	r5, [pc, #88]	; (28ad4 <z_cstart+0xd8>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   28a7a:	f7ff ff41 	bl	28900 <z_sys_init_run_level>
	z_sched_init();
   28a7e:	f002 fb23 	bl	2b0c8 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   28a82:	4b15      	ldr	r3, [pc, #84]	; (28ad8 <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
   28a84:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   28a86:	9305      	str	r3, [sp, #20]
   28a88:	2301      	movs	r3, #1
   28a8a:	4914      	ldr	r1, [pc, #80]	; (28adc <z_cstart+0xe0>)
   28a8c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   28a90:	e9cd 4303 	strd	r4, r3, [sp, #12]
   28a94:	4628      	mov	r0, r5
   28a96:	463b      	mov	r3, r7
   28a98:	e9cd 4401 	strd	r4, r4, [sp, #4]
   28a9c:	9400      	str	r4, [sp, #0]
   28a9e:	f000 fa2d 	bl	28efc <z_setup_new_thread>
   28aa2:	4606      	mov	r6, r0
   28aa4:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
   28aa6:	4628      	mov	r0, r5
   28aa8:	f022 0204 	bic.w	r2, r2, #4
   28aac:	736a      	strb	r2, [r5, #13]
   28aae:	f001 fcf1 	bl	2a494 <z_ready_thread>
	z_init_cpu(0);
   28ab2:	4620      	mov	r0, r4
   28ab4:	f7ff ff6e 	bl	28994 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   28ab8:	463a      	mov	r2, r7
   28aba:	4631      	mov	r1, r6
   28abc:	4628      	mov	r0, r5
   28abe:	f7e9 fe3b 	bl	12738 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   28ac2:	bf00      	nop
   28ac4:	200124c8 	.word	0x200124c8
   28ac8:	e000ed00 	.word	0xe000ed00
   28acc:	2000eeec 	.word	0x2000eeec
   28ad0:	00028949 	.word	0x00028949
   28ad4:	2000e080 	.word	0x2000e080
   28ad8:	0004143c 	.word	0x0004143c
   28adc:	20012e08 	.word	0x20012e08

00028ae0 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
   28ae0:	b538      	push	{r3, r4, r5, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
   28ae2:	4c0d      	ldr	r4, [pc, #52]	; (28b18 <statics_init+0x38>)
   28ae4:	4d0d      	ldr	r5, [pc, #52]	; (28b1c <statics_init+0x3c>)
   28ae6:	42ac      	cmp	r4, r5
   28ae8:	d913      	bls.n	28b12 <statics_init+0x32>
   28aea:	490d      	ldr	r1, [pc, #52]	; (28b20 <statics_init+0x40>)
   28aec:	2317      	movs	r3, #23
   28aee:	4a0d      	ldr	r2, [pc, #52]	; (28b24 <statics_init+0x44>)
   28af0:	480d      	ldr	r0, [pc, #52]	; (28b28 <statics_init+0x48>)
   28af2:	f006 fc67 	bl	2f3c4 <assert_print>
   28af6:	480d      	ldr	r0, [pc, #52]	; (28b2c <statics_init+0x4c>)
   28af8:	f006 fc64 	bl	2f3c4 <assert_print>
   28afc:	2117      	movs	r1, #23
   28afe:	4809      	ldr	r0, [pc, #36]	; (28b24 <statics_init+0x44>)
   28b00:	f006 fc59 	bl	2f3b6 <assert_post_action>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   28b04:	4620      	mov	r0, r4
   28b06:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   28b0a:	f00d fab4 	bl	36076 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   28b0e:	3418      	adds	r4, #24
   28b10:	e7e9      	b.n	28ae6 <statics_init+0x6>
   28b12:	d3f7      	bcc.n	28b04 <statics_init+0x24>
		}
	}
	return 0;
}
   28b14:	2000      	movs	r0, #0
   28b16:	bd38      	pop	{r3, r4, r5, pc}
   28b18:	2000ce08 	.word	0x2000ce08
   28b1c:	2000ce38 	.word	0x2000ce38
   28b20:	00041466 	.word	0x00041466
   28b24:	00041444 	.word	0x00041444
   28b28:	00039995 	.word	0x00039995
   28b2c:	0003a18c 	.word	0x0003a18c

00028b30 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   28b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28b34:	b085      	sub	sp, #20
   28b36:	e9dd 9b0e 	ldrd	r9, fp, [sp, #56]	; 0x38
   28b3a:	4680      	mov	r8, r0
   28b3c:	9103      	str	r1, [sp, #12]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   28b3e:	4648      	mov	r0, r9
   28b40:	4659      	mov	r1, fp
{
   28b42:	4692      	mov	sl, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   28b44:	f00d fbc8 	bl	362d8 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   28b48:	f1bb 3fff 	cmp.w	fp, #4294967295
   28b4c:	bf08      	it	eq
   28b4e:	f1b9 3fff 	cmpeq.w	r9, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   28b52:	4606      	mov	r6, r0
   28b54:	460f      	mov	r7, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   28b56:	bf04      	itt	eq
   28b58:	f04f 36ff 	moveq.w	r6, #4294967295
   28b5c:	f06f 4700 	mvneq.w	r7, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   28b60:	f108 0414 	add.w	r4, r8, #20
	__asm__ volatile(
   28b64:	f04f 0320 	mov.w	r3, #32
   28b68:	f3ef 8511 	mrs	r5, BASEPRI
   28b6c:	f383 8812 	msr	BASEPRI_MAX, r3
   28b70:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28b74:	4620      	mov	r0, r4
   28b76:	f000 fadf 	bl	29138 <z_spin_lock_valid>
   28b7a:	b960      	cbnz	r0, 28b96 <k_heap_aligned_alloc+0x66>
   28b7c:	2394      	movs	r3, #148	; 0x94
   28b7e:	4a33      	ldr	r2, [pc, #204]	; (28c4c <k_heap_aligned_alloc+0x11c>)
   28b80:	4933      	ldr	r1, [pc, #204]	; (28c50 <k_heap_aligned_alloc+0x120>)
   28b82:	4834      	ldr	r0, [pc, #208]	; (28c54 <k_heap_aligned_alloc+0x124>)
   28b84:	f006 fc1e 	bl	2f3c4 <assert_print>
   28b88:	4621      	mov	r1, r4
   28b8a:	4833      	ldr	r0, [pc, #204]	; (28c58 <k_heap_aligned_alloc+0x128>)
   28b8c:	f006 fc1a 	bl	2f3c4 <assert_print>
   28b90:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28b92:	482e      	ldr	r0, [pc, #184]	; (28c4c <k_heap_aligned_alloc+0x11c>)
   28b94:	e031      	b.n	28bfa <k_heap_aligned_alloc+0xca>
	z_spin_lock_set_owner(l);
   28b96:	4620      	mov	r0, r4
   28b98:	f000 faea 	bl	29170 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   28b9c:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   28ba0:	b113      	cbz	r3, 28ba8 <k_heap_aligned_alloc+0x78>
   28ba2:	ea5b 0909 	orrs.w	r9, fp, r9
   28ba6:	d11d      	bne.n	28be4 <k_heap_aligned_alloc+0xb4>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   28ba8:	f108 0b0c 	add.w	fp, r8, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   28bac:	4652      	mov	r2, sl
   28bae:	4640      	mov	r0, r8
   28bb0:	9903      	ldr	r1, [sp, #12]
   28bb2:	f7e5 f93b 	bl	de2c <sys_heap_aligned_alloc>
   28bb6:	4681      	mov	r9, r0
		now = sys_clock_tick_get();
   28bb8:	f002 ff9a 	bl	2baf0 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   28bbc:	f1b9 0f00 	cmp.w	r9, #0
   28bc0:	d01d      	beq.n	28bfe <k_heap_aligned_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28bc2:	4620      	mov	r0, r4
   28bc4:	f000 fac6 	bl	29154 <z_spin_unlock_valid>
   28bc8:	2800      	cmp	r0, #0
   28bca:	d137      	bne.n	28c3c <k_heap_aligned_alloc+0x10c>
   28bcc:	23c2      	movs	r3, #194	; 0xc2
   28bce:	4a1f      	ldr	r2, [pc, #124]	; (28c4c <k_heap_aligned_alloc+0x11c>)
   28bd0:	4922      	ldr	r1, [pc, #136]	; (28c5c <k_heap_aligned_alloc+0x12c>)
   28bd2:	4820      	ldr	r0, [pc, #128]	; (28c54 <k_heap_aligned_alloc+0x124>)
   28bd4:	f006 fbf6 	bl	2f3c4 <assert_print>
   28bd8:	4621      	mov	r1, r4
   28bda:	4821      	ldr	r0, [pc, #132]	; (28c60 <k_heap_aligned_alloc+0x130>)
   28bdc:	f006 fbf2 	bl	2f3c4 <assert_print>
   28be0:	21c2      	movs	r1, #194	; 0xc2
   28be2:	e7d6      	b.n	28b92 <k_heap_aligned_alloc+0x62>
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   28be4:	491f      	ldr	r1, [pc, #124]	; (28c64 <k_heap_aligned_alloc+0x134>)
   28be6:	234b      	movs	r3, #75	; 0x4b
   28be8:	4a1f      	ldr	r2, [pc, #124]	; (28c68 <k_heap_aligned_alloc+0x138>)
   28bea:	481a      	ldr	r0, [pc, #104]	; (28c54 <k_heap_aligned_alloc+0x124>)
   28bec:	f006 fbea 	bl	2f3c4 <assert_print>
   28bf0:	481e      	ldr	r0, [pc, #120]	; (28c6c <k_heap_aligned_alloc+0x13c>)
   28bf2:	f006 fbe7 	bl	2f3c4 <assert_print>
   28bf6:	214b      	movs	r1, #75	; 0x4b
   28bf8:	481b      	ldr	r0, [pc, #108]	; (28c68 <k_heap_aligned_alloc+0x138>)
   28bfa:	f006 fbdc 	bl	2f3b6 <assert_post_action>
		    (ret != NULL) || ((end - now) <= 0)) {
   28bfe:	1a30      	subs	r0, r6, r0
   28c00:	eb67 0101 	sbc.w	r1, r7, r1
   28c04:	2801      	cmp	r0, #1
   28c06:	f171 0300 	sbcs.w	r3, r1, #0
   28c0a:	dbda      	blt.n	28bc2 <k_heap_aligned_alloc+0x92>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   28c0c:	e9cd 0100 	strd	r0, r1, [sp]
   28c10:	465a      	mov	r2, fp
   28c12:	4629      	mov	r1, r5
   28c14:	4620      	mov	r0, r4
   28c16:	f001 ff87 	bl	2ab28 <z_pend_curr>
   28c1a:	f04f 0320 	mov.w	r3, #32
   28c1e:	f3ef 8511 	mrs	r5, BASEPRI
   28c22:	f383 8812 	msr	BASEPRI_MAX, r3
   28c26:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28c2a:	4620      	mov	r0, r4
   28c2c:	f000 fa84 	bl	29138 <z_spin_lock_valid>
   28c30:	2800      	cmp	r0, #0
   28c32:	d0a3      	beq.n	28b7c <k_heap_aligned_alloc+0x4c>
	z_spin_lock_set_owner(l);
   28c34:	4620      	mov	r0, r4
   28c36:	f000 fa9b 	bl	29170 <z_spin_lock_set_owner>
	return k;
   28c3a:	e7b7      	b.n	28bac <k_heap_aligned_alloc+0x7c>
	__asm__ volatile(
   28c3c:	f385 8811 	msr	BASEPRI, r5
   28c40:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   28c44:	4648      	mov	r0, r9
   28c46:	b005      	add	sp, #20
   28c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28c4c:	00039e53 	.word	0x00039e53
   28c50:	00039eac 	.word	0x00039eac
   28c54:	00039995 	.word	0x00039995
   28c58:	00039ec1 	.word	0x00039ec1
   28c5c:	00039e80 	.word	0x00039e80
   28c60:	00039e97 	.word	0x00039e97
   28c64:	0004147c 	.word	0x0004147c
   28c68:	00041444 	.word	0x00041444
   28c6c:	0003a4e8 	.word	0x0003a4e8

00028c70 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   28c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28c72:	4605      	mov	r5, r0
   28c74:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   28c76:	f100 0414 	add.w	r4, r0, #20
	__asm__ volatile(
   28c7a:	f04f 0320 	mov.w	r3, #32
   28c7e:	f3ef 8711 	mrs	r7, BASEPRI
   28c82:	f383 8812 	msr	BASEPRI_MAX, r3
   28c86:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28c8a:	4620      	mov	r0, r4
   28c8c:	f000 fa54 	bl	29138 <z_spin_lock_valid>
   28c90:	b968      	cbnz	r0, 28cae <k_heap_free+0x3e>
   28c92:	2394      	movs	r3, #148	; 0x94
   28c94:	4a19      	ldr	r2, [pc, #100]	; (28cfc <k_heap_free+0x8c>)
   28c96:	491a      	ldr	r1, [pc, #104]	; (28d00 <k_heap_free+0x90>)
   28c98:	481a      	ldr	r0, [pc, #104]	; (28d04 <k_heap_free+0x94>)
   28c9a:	f006 fb93 	bl	2f3c4 <assert_print>
   28c9e:	4621      	mov	r1, r4
   28ca0:	4819      	ldr	r0, [pc, #100]	; (28d08 <k_heap_free+0x98>)
   28ca2:	f006 fb8f 	bl	2f3c4 <assert_print>
   28ca6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28ca8:	4814      	ldr	r0, [pc, #80]	; (28cfc <k_heap_free+0x8c>)
   28caa:	f006 fb84 	bl	2f3b6 <assert_post_action>
	z_spin_lock_set_owner(l);
   28cae:	4620      	mov	r0, r4
   28cb0:	f000 fa5e 	bl	29170 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   28cb4:	4628      	mov	r0, r5
   28cb6:	4631      	mov	r1, r6
   28cb8:	f7e5 f872 	bl	dda0 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   28cbc:	f105 000c 	add.w	r0, r5, #12
   28cc0:	f00d faf0 	bl	362a4 <z_unpend_all>
   28cc4:	b128      	cbz	r0, 28cd2 <k_heap_free+0x62>
		z_reschedule(&h->lock, key);
   28cc6:	4639      	mov	r1, r7
   28cc8:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   28cca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   28cce:	f001 bc6f 	b.w	2a5b0 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28cd2:	4620      	mov	r0, r4
   28cd4:	f000 fa3e 	bl	29154 <z_spin_unlock_valid>
   28cd8:	b958      	cbnz	r0, 28cf2 <k_heap_free+0x82>
   28cda:	23c2      	movs	r3, #194	; 0xc2
   28cdc:	4a07      	ldr	r2, [pc, #28]	; (28cfc <k_heap_free+0x8c>)
   28cde:	490b      	ldr	r1, [pc, #44]	; (28d0c <k_heap_free+0x9c>)
   28ce0:	4808      	ldr	r0, [pc, #32]	; (28d04 <k_heap_free+0x94>)
   28ce2:	f006 fb6f 	bl	2f3c4 <assert_print>
   28ce6:	4621      	mov	r1, r4
   28ce8:	4809      	ldr	r0, [pc, #36]	; (28d10 <k_heap_free+0xa0>)
   28cea:	f006 fb6b 	bl	2f3c4 <assert_print>
   28cee:	21c2      	movs	r1, #194	; 0xc2
   28cf0:	e7da      	b.n	28ca8 <k_heap_free+0x38>
	__asm__ volatile(
   28cf2:	f387 8811 	msr	BASEPRI, r7
   28cf6:	f3bf 8f6f 	isb	sy
}
   28cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28cfc:	00039e53 	.word	0x00039e53
   28d00:	00039eac 	.word	0x00039eac
   28d04:	00039995 	.word	0x00039995
   28d08:	00039ec1 	.word	0x00039ec1
   28d0c:	00039e80 	.word	0x00039e80
   28d10:	00039e97 	.word	0x00039e97

00028d14 <init_mem_slab_module>:
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(void)
{
	int rc = 0;
   28d14:	2000      	movs	r0, #0
{
   28d16:	b538      	push	{r3, r4, r5, lr}

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   28d18:	4c0c      	ldr	r4, [pc, #48]	; (28d4c <init_mem_slab_module+0x38>)
   28d1a:	4d0d      	ldr	r5, [pc, #52]	; (28d50 <init_mem_slab_module+0x3c>)
   28d1c:	42ac      	cmp	r4, r5
   28d1e:	d913      	bls.n	28d48 <init_mem_slab_module+0x34>
   28d20:	490c      	ldr	r1, [pc, #48]	; (28d54 <init_mem_slab_module+0x40>)
   28d22:	233c      	movs	r3, #60	; 0x3c
   28d24:	4a0c      	ldr	r2, [pc, #48]	; (28d58 <init_mem_slab_module+0x44>)
   28d26:	480d      	ldr	r0, [pc, #52]	; (28d5c <init_mem_slab_module+0x48>)
   28d28:	f006 fb4c 	bl	2f3c4 <assert_print>
   28d2c:	480c      	ldr	r0, [pc, #48]	; (28d60 <init_mem_slab_module+0x4c>)
   28d2e:	f006 fb49 	bl	2f3c4 <assert_print>
   28d32:	213c      	movs	r1, #60	; 0x3c
   28d34:	4808      	ldr	r0, [pc, #32]	; (28d58 <init_mem_slab_module+0x44>)
   28d36:	f006 fb3e 	bl	2f3b6 <assert_post_action>
		rc = create_free_list(slab);
   28d3a:	4620      	mov	r0, r4
   28d3c:	f00d f9ad 	bl	3609a <create_free_list>
		if (rc < 0) {
   28d40:	2800      	cmp	r0, #0
   28d42:	db02      	blt.n	28d4a <init_mem_slab_module+0x36>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   28d44:	3420      	adds	r4, #32
   28d46:	e7e9      	b.n	28d1c <init_mem_slab_module+0x8>
   28d48:	d3f7      	bcc.n	28d3a <init_mem_slab_module+0x26>
		z_object_init(slab);
	}

out:
	return rc;
}
   28d4a:	bd38      	pop	{r3, r4, r5, pc}
   28d4c:	2000cda8 	.word	0x2000cda8
   28d50:	2000ce08 	.word	0x2000ce08
   28d54:	000414e7 	.word	0x000414e7
   28d58:	000414c2 	.word	0x000414c2
   28d5c:	00039995 	.word	0x00039995
   28d60:	0003a18c 	.word	0x0003a18c

00028d64 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   28d64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   28d68:	4604      	mov	r4, r0
   28d6a:	460e      	mov	r6, r1
   28d6c:	4690      	mov	r8, r2
   28d6e:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   28d70:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   28d74:	f04f 0320 	mov.w	r3, #32
   28d78:	f3ef 8911 	mrs	r9, BASEPRI
   28d7c:	f383 8812 	msr	BASEPRI_MAX, r3
   28d80:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28d84:	4628      	mov	r0, r5
   28d86:	f000 f9d7 	bl	29138 <z_spin_lock_valid>
   28d8a:	b968      	cbnz	r0, 28da8 <k_mem_slab_alloc+0x44>
   28d8c:	2394      	movs	r3, #148	; 0x94
   28d8e:	4a23      	ldr	r2, [pc, #140]	; (28e1c <k_mem_slab_alloc+0xb8>)
   28d90:	4923      	ldr	r1, [pc, #140]	; (28e20 <k_mem_slab_alloc+0xbc>)
   28d92:	4824      	ldr	r0, [pc, #144]	; (28e24 <k_mem_slab_alloc+0xc0>)
   28d94:	f006 fb16 	bl	2f3c4 <assert_print>
   28d98:	4629      	mov	r1, r5
   28d9a:	4823      	ldr	r0, [pc, #140]	; (28e28 <k_mem_slab_alloc+0xc4>)
   28d9c:	f006 fb12 	bl	2f3c4 <assert_print>
   28da0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28da2:	481e      	ldr	r0, [pc, #120]	; (28e1c <k_mem_slab_alloc+0xb8>)
   28da4:	f006 fb07 	bl	2f3b6 <assert_post_action>
	z_spin_lock_set_owner(l);
   28da8:	4628      	mov	r0, r5
   28daa:	f000 f9e1 	bl	29170 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   28dae:	69a3      	ldr	r3, [r4, #24]
   28db0:	b1b3      	cbz	r3, 28de0 <k_mem_slab_alloc+0x7c>
		/* take a free block */
		*mem = slab->free_list;
   28db2:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
   28db4:	681b      	ldr	r3, [r3, #0]
   28db6:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   28db8:	69e3      	ldr	r3, [r4, #28]
   28dba:	3301      	adds	r3, #1
   28dbc:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   28dbe:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28dc0:	4628      	mov	r0, r5
   28dc2:	f000 f9c7 	bl	29154 <z_spin_unlock_valid>
   28dc6:	bb18      	cbnz	r0, 28e10 <k_mem_slab_alloc+0xac>
   28dc8:	23c2      	movs	r3, #194	; 0xc2
   28dca:	4a14      	ldr	r2, [pc, #80]	; (28e1c <k_mem_slab_alloc+0xb8>)
   28dcc:	4917      	ldr	r1, [pc, #92]	; (28e2c <k_mem_slab_alloc+0xc8>)
   28dce:	4815      	ldr	r0, [pc, #84]	; (28e24 <k_mem_slab_alloc+0xc0>)
   28dd0:	f006 faf8 	bl	2f3c4 <assert_print>
   28dd4:	4629      	mov	r1, r5
   28dd6:	4816      	ldr	r0, [pc, #88]	; (28e30 <k_mem_slab_alloc+0xcc>)
   28dd8:	f006 faf4 	bl	2f3c4 <assert_print>
   28ddc:	21c2      	movs	r1, #194	; 0xc2
   28dde:	e7e0      	b.n	28da2 <k_mem_slab_alloc+0x3e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   28de0:	ea58 0207 	orrs.w	r2, r8, r7
   28de4:	d103      	bne.n	28dee <k_mem_slab_alloc+0x8a>
		   !IS_ENABLED(CONFIG_MULTITHREADING)) {
		/* don't wait for a free block to become available */
		*mem = NULL;
		result = -ENOMEM;
   28de6:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
   28dea:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
   28dec:	e7e8      	b.n	28dc0 <k_mem_slab_alloc+0x5c>
	} else {
		SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_mem_slab, alloc, slab, timeout);

		/* wait for a free block or timeout */
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   28dee:	4622      	mov	r2, r4
   28df0:	4649      	mov	r1, r9
   28df2:	4628      	mov	r0, r5
   28df4:	e9cd 8700 	strd	r8, r7, [sp]
   28df8:	f001 fe96 	bl	2ab28 <z_pend_curr>
		if (result == 0) {
   28dfc:	4604      	mov	r4, r0
   28dfe:	b918      	cbnz	r0, 28e08 <k_mem_slab_alloc+0xa4>
			*mem = _current->base.swap_data;
   28e00:	4b0c      	ldr	r3, [pc, #48]	; (28e34 <k_mem_slab_alloc+0xd0>)
   28e02:	689b      	ldr	r3, [r3, #8]
   28e04:	695b      	ldr	r3, [r3, #20]
   28e06:	6033      	str	r3, [r6, #0]
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   28e08:	4620      	mov	r0, r4
   28e0a:	b003      	add	sp, #12
   28e0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__asm__ volatile(
   28e10:	f389 8811 	msr	BASEPRI, r9
   28e14:	f3bf 8f6f 	isb	sy
	return result;
   28e18:	e7f6      	b.n	28e08 <k_mem_slab_alloc+0xa4>
   28e1a:	bf00      	nop
   28e1c:	00039e53 	.word	0x00039e53
   28e20:	00039eac 	.word	0x00039eac
   28e24:	00039995 	.word	0x00039995
   28e28:	00039ec1 	.word	0x00039ec1
   28e2c:	00039e80 	.word	0x00039e80
   28e30:	00039e97 	.word	0x00039e97
   28e34:	2000eeec 	.word	0x2000eeec

00028e38 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   28e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28e3c:	4604      	mov	r4, r0
   28e3e:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   28e40:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   28e44:	f04f 0320 	mov.w	r3, #32
   28e48:	f3ef 8711 	mrs	r7, BASEPRI
   28e4c:	f383 8812 	msr	BASEPRI_MAX, r3
   28e50:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28e54:	4628      	mov	r0, r5
   28e56:	f000 f96f 	bl	29138 <z_spin_lock_valid>
   28e5a:	b968      	cbnz	r0, 28e78 <k_mem_slab_free+0x40>
   28e5c:	2394      	movs	r3, #148	; 0x94
   28e5e:	4a21      	ldr	r2, [pc, #132]	; (28ee4 <k_mem_slab_free+0xac>)
   28e60:	4921      	ldr	r1, [pc, #132]	; (28ee8 <k_mem_slab_free+0xb0>)
   28e62:	4822      	ldr	r0, [pc, #136]	; (28eec <k_mem_slab_free+0xb4>)
   28e64:	f006 faae 	bl	2f3c4 <assert_print>
   28e68:	4629      	mov	r1, r5
   28e6a:	4821      	ldr	r0, [pc, #132]	; (28ef0 <k_mem_slab_free+0xb8>)
   28e6c:	f006 faaa 	bl	2f3c4 <assert_print>
   28e70:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28e72:	481c      	ldr	r0, [pc, #112]	; (28ee4 <k_mem_slab_free+0xac>)
   28e74:	f006 fa9f 	bl	2f3b6 <assert_post_action>
	z_spin_lock_set_owner(l);
   28e78:	4628      	mov	r0, r5
   28e7a:	f000 f979 	bl	29170 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   28e7e:	f8d4 8018 	ldr.w	r8, [r4, #24]
   28e82:	f1b8 0f00 	cmp.w	r8, #0
   28e86:	d10f      	bne.n	28ea8 <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   28e88:	4620      	mov	r0, r4
   28e8a:	f002 f8cd 	bl	2b028 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   28e8e:	b158      	cbz	r0, 28ea8 <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   28e90:	6832      	ldr	r2, [r6, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   28e92:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   28e96:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   28e98:	f001 fafc 	bl	2a494 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   28e9c:	4639      	mov	r1, r7
   28e9e:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   28ea0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
   28ea4:	f001 bb84 	b.w	2a5b0 <z_reschedule>
	**(char ***) mem = slab->free_list;
   28ea8:	6833      	ldr	r3, [r6, #0]
   28eaa:	69a2      	ldr	r2, [r4, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28eac:	4628      	mov	r0, r5
   28eae:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   28eb0:	6833      	ldr	r3, [r6, #0]
   28eb2:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   28eb4:	69e3      	ldr	r3, [r4, #28]
   28eb6:	3b01      	subs	r3, #1
   28eb8:	61e3      	str	r3, [r4, #28]
   28eba:	f000 f94b 	bl	29154 <z_spin_unlock_valid>
   28ebe:	b958      	cbnz	r0, 28ed8 <k_mem_slab_free+0xa0>
   28ec0:	23c2      	movs	r3, #194	; 0xc2
   28ec2:	4a08      	ldr	r2, [pc, #32]	; (28ee4 <k_mem_slab_free+0xac>)
   28ec4:	490b      	ldr	r1, [pc, #44]	; (28ef4 <k_mem_slab_free+0xbc>)
   28ec6:	4809      	ldr	r0, [pc, #36]	; (28eec <k_mem_slab_free+0xb4>)
   28ec8:	f006 fa7c 	bl	2f3c4 <assert_print>
   28ecc:	4629      	mov	r1, r5
   28ece:	480a      	ldr	r0, [pc, #40]	; (28ef8 <k_mem_slab_free+0xc0>)
   28ed0:	f006 fa78 	bl	2f3c4 <assert_print>
   28ed4:	21c2      	movs	r1, #194	; 0xc2
   28ed6:	e7cc      	b.n	28e72 <k_mem_slab_free+0x3a>
	__asm__ volatile(
   28ed8:	f387 8811 	msr	BASEPRI, r7
   28edc:	f3bf 8f6f 	isb	sy
}
   28ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   28ee4:	00039e53 	.word	0x00039e53
   28ee8:	00039eac 	.word	0x00039eac
   28eec:	00039995 	.word	0x00039995
   28ef0:	00039ec1 	.word	0x00039ec1
   28ef4:	00039e80 	.word	0x00039e80
   28ef8:	00039e97 	.word	0x00039e97

00028efc <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   28efc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   28efe:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   28f00:	4604      	mov	r4, r0
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   28f02:	2e0f      	cmp	r6, #15
   28f04:	d12a      	bne.n	28f5c <z_setup_new_thread+0x60>
   28f06:	4821      	ldr	r0, [pc, #132]	; (28f8c <z_setup_new_thread+0x90>)
   28f08:	4283      	cmp	r3, r0
   28f0a:	d12b      	bne.n	28f64 <z_setup_new_thread+0x68>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   28f0c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   28f10:	e9c4 0016 	strd	r0, r0, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   28f14:	980c      	ldr	r0, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   28f16:	2500      	movs	r5, #0
	thread_base->user_options = (uint8_t)options;
   28f18:	7320      	strb	r0, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   28f1a:	2004      	movs	r0, #4
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   28f1c:	3207      	adds	r2, #7
   28f1e:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.size = stack_buf_size;
   28f22:	e9c4 121a 	strd	r1, r2, [r4, #104]	; 0x68

	thread_base->prio = priority;
   28f26:	73a6      	strb	r6, [r4, #14]
	stack_ptr = (char *)stack + stack_obj_size;
   28f28:	188e      	adds	r6, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   28f2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	thread_base->thread_state = (uint8_t)initial_state;
   28f2c:	7360      	strb	r0, [r4, #13]
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   28f2e:	e9c4 5506 	strd	r5, r5, [r4, #24]
	thread_base->pended_on = NULL;
   28f32:	60a5      	str	r5, [r4, #8]

	thread_base->sched_locked = 0U;
   28f34:	73e5      	strb	r5, [r4, #15]
	new_thread->stack_info.delta = delta;
   28f36:	6725      	str	r5, [r4, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   28f38:	9202      	str	r2, [sp, #8]
   28f3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   28f3c:	4620      	mov	r0, r4
   28f3e:	9201      	str	r2, [sp, #4]
   28f40:	9a08      	ldr	r2, [sp, #32]
   28f42:	9200      	str	r2, [sp, #0]
   28f44:	4632      	mov	r2, r6
   28f46:	f7e9 fbd7 	bl	126f8 <arch_new_thread>
	if (!_current) {
   28f4a:	4b11      	ldr	r3, [pc, #68]	; (28f90 <z_setup_new_thread+0x94>)
	new_thread->init_data = NULL;
   28f4c:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   28f4e:	689b      	ldr	r3, [r3, #8]
   28f50:	b103      	cbz	r3, 28f54 <z_setup_new_thread+0x58>
	new_thread->resource_pool = _current->resource_pool;
   28f52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   28f54:	4630      	mov	r0, r6
   28f56:	6763      	str	r3, [r4, #116]	; 0x74
   28f58:	b004      	add	sp, #16
   28f5a:	bd70      	pop	{r4, r5, r6, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   28f5c:	f106 0010 	add.w	r0, r6, #16
   28f60:	281e      	cmp	r0, #30
   28f62:	d9d3      	bls.n	28f0c <z_setup_new_thread+0x10>
   28f64:	f44f 7306 	mov.w	r3, #536	; 0x218
   28f68:	4a0a      	ldr	r2, [pc, #40]	; (28f94 <z_setup_new_thread+0x98>)
   28f6a:	490b      	ldr	r1, [pc, #44]	; (28f98 <z_setup_new_thread+0x9c>)
   28f6c:	480b      	ldr	r0, [pc, #44]	; (28f9c <z_setup_new_thread+0xa0>)
   28f6e:	f006 fa29 	bl	2f3c4 <assert_print>
   28f72:	4631      	mov	r1, r6
   28f74:	480a      	ldr	r0, [pc, #40]	; (28fa0 <z_setup_new_thread+0xa4>)
   28f76:	f06f 030f 	mvn.w	r3, #15
   28f7a:	220e      	movs	r2, #14
   28f7c:	f006 fa22 	bl	2f3c4 <assert_print>
   28f80:	f44f 7106 	mov.w	r1, #536	; 0x218
   28f84:	4803      	ldr	r0, [pc, #12]	; (28f94 <z_setup_new_thread+0x98>)
   28f86:	f006 fa16 	bl	2f3b6 <assert_post_action>
   28f8a:	bf00      	nop
   28f8c:	00029181 	.word	0x00029181
   28f90:	2000eeec 	.word	0x2000eeec
   28f94:	00041504 	.word	0x00041504
   28f98:	00041527 	.word	0x00041527
   28f9c:	00039995 	.word	0x00039995
   28fa0:	000415a7 	.word	0x000415a7

00028fa4 <z_impl_k_thread_create>:
{
   28fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
   28fa6:	b087      	sub	sp, #28
   28fa8:	4604      	mov	r4, r0
   28faa:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
   28fae:	f3ef 8505 	mrs	r5, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   28fb2:	b175      	cbz	r5, 28fd2 <z_impl_k_thread_create+0x2e>
   28fb4:	4919      	ldr	r1, [pc, #100]	; (2901c <z_impl_k_thread_create+0x78>)
   28fb6:	f240 238a 	movw	r3, #650	; 0x28a
   28fba:	4a19      	ldr	r2, [pc, #100]	; (29020 <z_impl_k_thread_create+0x7c>)
   28fbc:	4819      	ldr	r0, [pc, #100]	; (29024 <z_impl_k_thread_create+0x80>)
   28fbe:	f006 fa01 	bl	2f3c4 <assert_print>
   28fc2:	4819      	ldr	r0, [pc, #100]	; (29028 <z_impl_k_thread_create+0x84>)
   28fc4:	f006 f9fe 	bl	2f3c4 <assert_print>
   28fc8:	f240 218a 	movw	r1, #650	; 0x28a
   28fcc:	4814      	ldr	r0, [pc, #80]	; (29020 <z_impl_k_thread_create+0x7c>)
   28fce:	f006 f9f2 	bl	2f3b6 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   28fd2:	9505      	str	r5, [sp, #20]
   28fd4:	9d10      	ldr	r5, [sp, #64]	; 0x40
   28fd6:	9504      	str	r5, [sp, #16]
   28fd8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   28fda:	9503      	str	r5, [sp, #12]
   28fdc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   28fde:	9502      	str	r5, [sp, #8]
   28fe0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   28fe2:	9501      	str	r5, [sp, #4]
   28fe4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   28fe6:	9500      	str	r5, [sp, #0]
   28fe8:	f7ff ff88 	bl	28efc <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   28fec:	f1b6 3fff 	cmp.w	r6, #4294967295
   28ff0:	bf08      	it	eq
   28ff2:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   28ff6:	d005      	beq.n	29004 <z_impl_k_thread_create+0x60>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   28ff8:	ea56 0307 	orrs.w	r3, r6, r7
   28ffc:	d105      	bne.n	2900a <z_impl_k_thread_create+0x66>
	z_sched_start(thread);
   28ffe:	4620      	mov	r0, r4
   29000:	f001 fb18 	bl	2a634 <z_sched_start>
}
   29004:	4620      	mov	r0, r4
   29006:	b007      	add	sp, #28
   29008:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   2900a:	463a      	mov	r2, r7
   2900c:	4633      	mov	r3, r6
   2900e:	4907      	ldr	r1, [pc, #28]	; (2902c <z_impl_k_thread_create+0x88>)
   29010:	f104 0018 	add.w	r0, r4, #24
   29014:	f002 fb6c 	bl	2b6f0 <z_add_timeout>
   29018:	e7f4      	b.n	29004 <z_impl_k_thread_create+0x60>
   2901a:	bf00      	nop
   2901c:	000415d8 	.word	0x000415d8
   29020:	00041504 	.word	0x00041504
   29024:	00039995 	.word	0x00039995
   29028:	000415ea 	.word	0x000415ea
   2902c:	0003629d 	.word	0x0003629d

00029030 <z_init_static_threads>:
{
   29030:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   29034:	4c39      	ldr	r4, [pc, #228]	; (2911c <z_init_static_threads+0xec>)
	_FOREACH_STATIC_THREAD(thread_data) {
   29036:	4d3a      	ldr	r5, [pc, #232]	; (29120 <z_init_static_threads+0xf0>)
{
   29038:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   2903a:	42ac      	cmp	r4, r5
   2903c:	4626      	mov	r6, r4
   2903e:	d92a      	bls.n	29096 <z_init_static_threads+0x66>
   29040:	4938      	ldr	r1, [pc, #224]	; (29124 <z_init_static_threads+0xf4>)
   29042:	f240 23f1 	movw	r3, #753	; 0x2f1
   29046:	4a38      	ldr	r2, [pc, #224]	; (29128 <z_init_static_threads+0xf8>)
   29048:	4838      	ldr	r0, [pc, #224]	; (2912c <z_init_static_threads+0xfc>)
   2904a:	f006 f9bb 	bl	2f3c4 <assert_print>
   2904e:	4838      	ldr	r0, [pc, #224]	; (29130 <z_init_static_threads+0x100>)
   29050:	f006 f9b8 	bl	2f3c4 <assert_print>
   29054:	f240 21f1 	movw	r1, #753	; 0x2f1
	_FOREACH_STATIC_THREAD(thread_data) {
   29058:	4833      	ldr	r0, [pc, #204]	; (29128 <z_init_static_threads+0xf8>)
   2905a:	f006 f9ac 	bl	2f3b6 <assert_post_action>
		z_setup_new_thread(
   2905e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   29062:	9305      	str	r3, [sp, #20]
   29064:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   29068:	9304      	str	r3, [sp, #16]
   2906a:	f854 3c10 	ldr.w	r3, [r4, #-16]
   2906e:	9303      	str	r3, [sp, #12]
   29070:	f854 3c14 	ldr.w	r3, [r4, #-20]
   29074:	9302      	str	r3, [sp, #8]
   29076:	f854 3c18 	ldr.w	r3, [r4, #-24]
   2907a:	9301      	str	r3, [sp, #4]
   2907c:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   29080:	9300      	str	r3, [sp, #0]
   29082:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
   29086:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
   2908a:	f7ff ff37 	bl	28efc <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   2908e:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   29092:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   29094:	e7d1      	b.n	2903a <z_init_static_threads+0xa>
   29096:	42ae      	cmp	r6, r5
   29098:	f104 042c 	add.w	r4, r4, #44	; 0x2c
   2909c:	d3df      	bcc.n	2905e <z_init_static_threads+0x2e>
	k_sched_lock();
   2909e:	f001 fb1b 	bl	2a6d8 <k_sched_lock>
   290a2:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   290a6:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
   290aa:	4c1c      	ldr	r4, [pc, #112]	; (2911c <z_init_static_threads+0xec>)
   290ac:	f8df 9084 	ldr.w	r9, [pc, #132]	; 29134 <z_init_static_threads+0x104>
   290b0:	42ac      	cmp	r4, r5
   290b2:	d92c      	bls.n	2910e <z_init_static_threads+0xde>
   290b4:	491b      	ldr	r1, [pc, #108]	; (29124 <z_init_static_threads+0xf4>)
   290b6:	f44f 7344 	mov.w	r3, #784	; 0x310
   290ba:	4a1b      	ldr	r2, [pc, #108]	; (29128 <z_init_static_threads+0xf8>)
   290bc:	481b      	ldr	r0, [pc, #108]	; (2912c <z_init_static_threads+0xfc>)
   290be:	f006 f981 	bl	2f3c4 <assert_print>
   290c2:	481b      	ldr	r0, [pc, #108]	; (29130 <z_init_static_threads+0x100>)
   290c4:	f006 f97e 	bl	2f3c4 <assert_print>
   290c8:	f44f 7144 	mov.w	r1, #784	; 0x310
   290cc:	e7c4      	b.n	29058 <z_init_static_threads+0x28>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   290ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
   290d0:	1c5a      	adds	r2, r3, #1
   290d2:	d00d      	beq.n	290f0 <z_init_static_threads+0xc0>
   290d4:	2100      	movs	r1, #0
   290d6:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
   290d8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   290dc:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   290e0:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   290e4:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   290e8:	d104      	bne.n	290f4 <z_init_static_threads+0xc4>
	z_sched_start(thread);
   290ea:	4640      	mov	r0, r8
   290ec:	f001 faa2 	bl	2a634 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   290f0:	342c      	adds	r4, #44	; 0x2c
   290f2:	e7dd      	b.n	290b0 <z_init_static_threads+0x80>
   290f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   290f8:	2300      	movs	r3, #0
   290fa:	f7df fecb 	bl	8e94 <__aeabi_uldivmod>
   290fe:	4602      	mov	r2, r0
   29100:	460b      	mov	r3, r1
   29102:	f108 0018 	add.w	r0, r8, #24
   29106:	4649      	mov	r1, r9
   29108:	f002 faf2 	bl	2b6f0 <z_add_timeout>
   2910c:	e7f0      	b.n	290f0 <z_init_static_threads+0xc0>
   2910e:	d3de      	bcc.n	290ce <z_init_static_threads+0x9e>
}
   29110:	b007      	add	sp, #28
   29112:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   29116:	f001 bb4b 	b.w	2a7b0 <k_sched_unlock>
   2911a:	bf00      	nop
   2911c:	000377e4 	.word	0x000377e4
   29120:	000377e4 	.word	0x000377e4
   29124:	0004160f 	.word	0x0004160f
   29128:	00041504 	.word	0x00041504
   2912c:	00039995 	.word	0x00039995
   29130:	0003a18c 	.word	0x0003a18c
   29134:	0003629d 	.word	0x0003629d

00029138 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   29138:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   2913a:	b138      	cbz	r0, 2914c <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   2913c:	4b04      	ldr	r3, [pc, #16]	; (29150 <z_spin_lock_valid+0x18>)
   2913e:	f000 0003 	and.w	r0, r0, #3
   29142:	7c1b      	ldrb	r3, [r3, #16]
   29144:	1ac0      	subs	r0, r0, r3
   29146:	bf18      	it	ne
   29148:	2001      	movne	r0, #1
   2914a:	4770      	bx	lr
			return false;
		}
	}
	return true;
   2914c:	2001      	movs	r0, #1
}
   2914e:	4770      	bx	lr
   29150:	2000eeec 	.word	0x2000eeec

00029154 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   29154:	4a05      	ldr	r2, [pc, #20]	; (2916c <z_spin_unlock_valid+0x18>)
{
   29156:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   29158:	7c11      	ldrb	r1, [r2, #16]
   2915a:	6892      	ldr	r2, [r2, #8]
   2915c:	430a      	orrs	r2, r1
   2915e:	6801      	ldr	r1, [r0, #0]
   29160:	2000      	movs	r0, #0
   29162:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
   29164:	bf04      	itt	eq
   29166:	6018      	streq	r0, [r3, #0]
	return true;
   29168:	2001      	moveq	r0, #1
}
   2916a:	4770      	bx	lr
   2916c:	2000eeec 	.word	0x2000eeec

00029170 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   29170:	4b02      	ldr	r3, [pc, #8]	; (2917c <z_spin_lock_set_owner+0xc>)
   29172:	7c1a      	ldrb	r2, [r3, #16]
   29174:	689b      	ldr	r3, [r3, #8]
   29176:	4313      	orrs	r3, r2
   29178:	6003      	str	r3, [r0, #0]
}
   2917a:	4770      	bx	lr
   2917c:	2000eeec 	.word	0x2000eeec

00029180 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   29180:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   29182:	4c13      	ldr	r4, [pc, #76]	; (291d0 <idle+0x50>)
   29184:	68a3      	ldr	r3, [r4, #8]
   29186:	f993 300e 	ldrsb.w	r3, [r3, #14]
   2918a:	2b00      	cmp	r3, #0
   2918c:	db10      	blt.n	291b0 <idle+0x30>
   2918e:	4d11      	ldr	r5, [pc, #68]	; (291d4 <idle+0x54>)
	__asm__ volatile(
   29190:	f04f 0220 	mov.w	r2, #32
   29194:	f3ef 8311 	mrs	r3, BASEPRI
   29198:	f382 8812 	msr	BASEPRI_MAX, r2
   2919c:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   291a0:	f002 fbb2 	bl	2b908 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   291a4:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   291a6:	6160      	str	r0, [r4, #20]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   291a8:	b963      	cbnz	r3, 291c4 <idle+0x44>
	arch_cpu_idle();
   291aa:	f7e9 f949 	bl	12440 <arch_cpu_idle>
}
   291ae:	e7ef      	b.n	29190 <idle+0x10>
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   291b0:	4909      	ldr	r1, [pc, #36]	; (291d8 <idle+0x58>)
   291b2:	480a      	ldr	r0, [pc, #40]	; (291dc <idle+0x5c>)
   291b4:	2327      	movs	r3, #39	; 0x27
   291b6:	4a0a      	ldr	r2, [pc, #40]	; (291e0 <idle+0x60>)
   291b8:	f006 f904 	bl	2f3c4 <assert_print>
   291bc:	2127      	movs	r1, #39	; 0x27
   291be:	4808      	ldr	r0, [pc, #32]	; (291e0 <idle+0x60>)
   291c0:	f006 f8f9 	bl	2f3b6 <assert_post_action>
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   291c4:	f7e7 fc40 	bl	10a48 <pm_system_suspend>
   291c8:	2800      	cmp	r0, #0
   291ca:	d1e1      	bne.n	29190 <idle+0x10>
   291cc:	e7ed      	b.n	291aa <idle+0x2a>
   291ce:	bf00      	nop
   291d0:	2000eeec 	.word	0x2000eeec
   291d4:	20010782 	.word	0x20010782
   291d8:	0004165d 	.word	0x0004165d
   291dc:	00039995 	.word	0x00039995
   291e0:	0004163c 	.word	0x0004163c

000291e4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   291e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   291e8:	4604      	mov	r4, r0
   291ea:	4617      	mov	r7, r2
   291ec:	461e      	mov	r6, r3
   291ee:	f3ef 8505 	mrs	r5, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   291f2:	b165      	cbz	r5, 2920e <z_impl_k_mutex_lock+0x2a>
   291f4:	4958      	ldr	r1, [pc, #352]	; (29358 <z_impl_k_mutex_lock+0x174>)
   291f6:	2365      	movs	r3, #101	; 0x65
   291f8:	4a58      	ldr	r2, [pc, #352]	; (2935c <z_impl_k_mutex_lock+0x178>)
   291fa:	4859      	ldr	r0, [pc, #356]	; (29360 <z_impl_k_mutex_lock+0x17c>)
   291fc:	f006 f8e2 	bl	2f3c4 <assert_print>
   29200:	4858      	ldr	r0, [pc, #352]	; (29364 <z_impl_k_mutex_lock+0x180>)
   29202:	f006 f8df 	bl	2f3c4 <assert_print>
   29206:	2165      	movs	r1, #101	; 0x65
   29208:	4854      	ldr	r0, [pc, #336]	; (2935c <z_impl_k_mutex_lock+0x178>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2920a:	f006 f8d4 	bl	2f3b6 <assert_post_action>
   2920e:	f04f 0320 	mov.w	r3, #32
   29212:	f3ef 8811 	mrs	r8, BASEPRI
   29216:	f383 8812 	msr	BASEPRI_MAX, r3
   2921a:	f3bf 8f6f 	isb	sy
   2921e:	4852      	ldr	r0, [pc, #328]	; (29368 <z_impl_k_mutex_lock+0x184>)
   29220:	f7ff ff8a 	bl	29138 <z_spin_lock_valid>
   29224:	b960      	cbnz	r0, 29240 <z_impl_k_mutex_lock+0x5c>
   29226:	2394      	movs	r3, #148	; 0x94
   29228:	4a50      	ldr	r2, [pc, #320]	; (2936c <z_impl_k_mutex_lock+0x188>)
   2922a:	4951      	ldr	r1, [pc, #324]	; (29370 <z_impl_k_mutex_lock+0x18c>)
   2922c:	484c      	ldr	r0, [pc, #304]	; (29360 <z_impl_k_mutex_lock+0x17c>)
   2922e:	f006 f8c9 	bl	2f3c4 <assert_print>
   29232:	494d      	ldr	r1, [pc, #308]	; (29368 <z_impl_k_mutex_lock+0x184>)
   29234:	484f      	ldr	r0, [pc, #316]	; (29374 <z_impl_k_mutex_lock+0x190>)
   29236:	f006 f8c5 	bl	2f3c4 <assert_print>
   2923a:	2194      	movs	r1, #148	; 0x94
   2923c:	484b      	ldr	r0, [pc, #300]	; (2936c <z_impl_k_mutex_lock+0x188>)
   2923e:	e7e4      	b.n	2920a <z_impl_k_mutex_lock+0x26>
	z_spin_lock_set_owner(l);
   29240:	4849      	ldr	r0, [pc, #292]	; (29368 <z_impl_k_mutex_lock+0x184>)
   29242:	f7ff ff95 	bl	29170 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   29246:	68e3      	ldr	r3, [r4, #12]
   29248:	4a4b      	ldr	r2, [pc, #300]	; (29378 <z_impl_k_mutex_lock+0x194>)
   2924a:	b19b      	cbz	r3, 29274 <z_impl_k_mutex_lock+0x90>
   2924c:	68a0      	ldr	r0, [r4, #8]
   2924e:	6891      	ldr	r1, [r2, #8]
   29250:	4288      	cmp	r0, r1
   29252:	d027      	beq.n	292a4 <z_impl_k_mutex_lock+0xc0>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   29254:	ea57 0306 	orrs.w	r3, r7, r6
   29258:	d12c      	bne.n	292b4 <z_impl_k_mutex_lock+0xd0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2925a:	4843      	ldr	r0, [pc, #268]	; (29368 <z_impl_k_mutex_lock+0x184>)
   2925c:	f7ff ff7a 	bl	29154 <z_spin_unlock_valid>
   29260:	b1a0      	cbz	r0, 2928c <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile(
   29262:	f388 8811 	msr	BASEPRI, r8
   29266:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   2926a:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   2926e:	b002      	add	sp, #8
   29270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   29274:	6891      	ldr	r1, [r2, #8]
   29276:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   2927a:	3301      	adds	r3, #1
   2927c:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   2927e:	6893      	ldr	r3, [r2, #8]
   29280:	4839      	ldr	r0, [pc, #228]	; (29368 <z_impl_k_mutex_lock+0x184>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   29282:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   29284:	60a3      	str	r3, [r4, #8]
   29286:	f7ff ff65 	bl	29154 <z_spin_unlock_valid>
   2928a:	b968      	cbnz	r0, 292a8 <z_impl_k_mutex_lock+0xc4>
   2928c:	23c2      	movs	r3, #194	; 0xc2
   2928e:	4a37      	ldr	r2, [pc, #220]	; (2936c <z_impl_k_mutex_lock+0x188>)
   29290:	493a      	ldr	r1, [pc, #232]	; (2937c <z_impl_k_mutex_lock+0x198>)
   29292:	4833      	ldr	r0, [pc, #204]	; (29360 <z_impl_k_mutex_lock+0x17c>)
   29294:	f006 f896 	bl	2f3c4 <assert_print>
   29298:	4933      	ldr	r1, [pc, #204]	; (29368 <z_impl_k_mutex_lock+0x184>)
   2929a:	4839      	ldr	r0, [pc, #228]	; (29380 <z_impl_k_mutex_lock+0x19c>)
   2929c:	f006 f892 	bl	2f3c4 <assert_print>
   292a0:	21c2      	movs	r1, #194	; 0xc2
   292a2:	e7cb      	b.n	2923c <z_impl_k_mutex_lock+0x58>
					_current->base.prio :
   292a4:	6921      	ldr	r1, [r4, #16]
   292a6:	e7e8      	b.n	2927a <z_impl_k_mutex_lock+0x96>
   292a8:	f388 8811 	msr	BASEPRI, r8
   292ac:	f3bf 8f6f 	isb	sy
		return 0;
   292b0:	2000      	movs	r0, #0
   292b2:	e7dc      	b.n	2926e <z_impl_k_mutex_lock+0x8a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   292b4:	f991 100e 	ldrsb.w	r1, [r1, #14]
   292b8:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   292bc:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   292c0:	4299      	cmp	r1, r3
   292c2:	bfa8      	it	ge
   292c4:	4619      	movge	r1, r3
   292c6:	4291      	cmp	r1, r2
   292c8:	bfb8      	it	lt
   292ca:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   292cc:	428b      	cmp	r3, r1
   292ce:	dd02      	ble.n	292d6 <z_impl_k_mutex_lock+0xf2>
		resched = adjust_owner_prio(mutex, new_prio);
   292d0:	f00c ff0d 	bl	360ee <adjust_owner_prio.isra.0>
   292d4:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   292d6:	4622      	mov	r2, r4
   292d8:	4641      	mov	r1, r8
   292da:	e9cd 7600 	strd	r7, r6, [sp]
   292de:	4822      	ldr	r0, [pc, #136]	; (29368 <z_impl_k_mutex_lock+0x184>)
   292e0:	f001 fc22 	bl	2ab28 <z_pend_curr>
	if (got_mutex == 0) {
   292e4:	2800      	cmp	r0, #0
   292e6:	d0e3      	beq.n	292b0 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   292e8:	f04f 0320 	mov.w	r3, #32
   292ec:	f3ef 8611 	mrs	r6, BASEPRI
   292f0:	f383 8812 	msr	BASEPRI_MAX, r3
   292f4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   292f8:	481b      	ldr	r0, [pc, #108]	; (29368 <z_impl_k_mutex_lock+0x184>)
   292fa:	f7ff ff1d 	bl	29138 <z_spin_lock_valid>
   292fe:	2800      	cmp	r0, #0
   29300:	d091      	beq.n	29226 <z_impl_k_mutex_lock+0x42>
	z_spin_lock_set_owner(l);
   29302:	4819      	ldr	r0, [pc, #100]	; (29368 <z_impl_k_mutex_lock+0x184>)
   29304:	f7ff ff34 	bl	29170 <z_spin_lock_set_owner>
	if (likely(mutex->owner != NULL)) {
   29308:	68a0      	ldr	r0, [r4, #8]
   2930a:	b1c0      	cbz	r0, 2933e <z_impl_k_mutex_lock+0x15a>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   2930c:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   2930e:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29310:	429c      	cmp	r4, r3
   29312:	d00a      	beq.n	2932a <z_impl_k_mutex_lock+0x146>
   29314:	b14b      	cbz	r3, 2932a <z_impl_k_mutex_lock+0x146>
   29316:	f993 300e 	ldrsb.w	r3, [r3, #14]
   2931a:	4299      	cmp	r1, r3
   2931c:	bfa8      	it	ge
   2931e:	4619      	movge	r1, r3
   29320:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   29324:	4299      	cmp	r1, r3
   29326:	bfb8      	it	lt
   29328:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   2932a:	f00c fee0 	bl	360ee <adjust_owner_prio.isra.0>
   2932e:	b130      	cbz	r0, 2933e <z_impl_k_mutex_lock+0x15a>
		z_reschedule(&lock, key);
   29330:	4631      	mov	r1, r6
   29332:	480d      	ldr	r0, [pc, #52]	; (29368 <z_impl_k_mutex_lock+0x184>)
   29334:	f001 f93c 	bl	2a5b0 <z_reschedule>
	return -EAGAIN;
   29338:	f06f 000a 	mvn.w	r0, #10
   2933c:	e797      	b.n	2926e <z_impl_k_mutex_lock+0x8a>
	if (resched) {
   2933e:	2d00      	cmp	r5, #0
   29340:	d1f6      	bne.n	29330 <z_impl_k_mutex_lock+0x14c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   29342:	4809      	ldr	r0, [pc, #36]	; (29368 <z_impl_k_mutex_lock+0x184>)
   29344:	f7ff ff06 	bl	29154 <z_spin_unlock_valid>
   29348:	2800      	cmp	r0, #0
   2934a:	d09f      	beq.n	2928c <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile(
   2934c:	f386 8811 	msr	BASEPRI, r6
   29350:	f3bf 8f6f 	isb	sy
   29354:	e7f0      	b.n	29338 <z_impl_k_mutex_lock+0x154>
   29356:	bf00      	nop
   29358:	000415d8 	.word	0x000415d8
   2935c:	00041685 	.word	0x00041685
   29360:	00039995 	.word	0x00039995
   29364:	000416a7 	.word	0x000416a7
   29368:	2000ef10 	.word	0x2000ef10
   2936c:	00039e53 	.word	0x00039e53
   29370:	00039eac 	.word	0x00039eac
   29374:	00039ec1 	.word	0x00039ec1
   29378:	2000eeec 	.word	0x2000eeec
   2937c:	00039e80 	.word	0x00039e80
   29380:	00039e97 	.word	0x00039e97

00029384 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   29384:	b570      	push	{r4, r5, r6, lr}
   29386:	4604      	mov	r4, r0
   29388:	f3ef 8605 	mrs	r6, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   2938c:	b166      	cbz	r6, 293a8 <z_impl_k_mutex_unlock+0x24>
   2938e:	4938      	ldr	r1, [pc, #224]	; (29470 <z_impl_k_mutex_unlock+0xec>)
   29390:	23cd      	movs	r3, #205	; 0xcd
   29392:	4a38      	ldr	r2, [pc, #224]	; (29474 <z_impl_k_mutex_unlock+0xf0>)
   29394:	4838      	ldr	r0, [pc, #224]	; (29478 <z_impl_k_mutex_unlock+0xf4>)
   29396:	f006 f815 	bl	2f3c4 <assert_print>
   2939a:	4838      	ldr	r0, [pc, #224]	; (2947c <z_impl_k_mutex_unlock+0xf8>)
   2939c:	f006 f812 	bl	2f3c4 <assert_print>
   293a0:	21cd      	movs	r1, #205	; 0xcd
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   293a2:	4834      	ldr	r0, [pc, #208]	; (29474 <z_impl_k_mutex_unlock+0xf0>)
   293a4:	f006 f807 	bl	2f3b6 <assert_post_action>
	CHECKIF(mutex->owner == NULL) {
   293a8:	6883      	ldr	r3, [r0, #8]
   293aa:	2b00      	cmp	r3, #0
   293ac:	d059      	beq.n	29462 <z_impl_k_mutex_unlock+0xde>
	CHECKIF(mutex->owner != _current) {
   293ae:	4a34      	ldr	r2, [pc, #208]	; (29480 <z_impl_k_mutex_unlock+0xfc>)
   293b0:	6892      	ldr	r2, [r2, #8]
   293b2:	4293      	cmp	r3, r2
   293b4:	d158      	bne.n	29468 <z_impl_k_mutex_unlock+0xe4>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   293b6:	68c3      	ldr	r3, [r0, #12]
   293b8:	b93b      	cbnz	r3, 293ca <z_impl_k_mutex_unlock+0x46>
   293ba:	4932      	ldr	r1, [pc, #200]	; (29484 <z_impl_k_mutex_unlock+0x100>)
   293bc:	23e5      	movs	r3, #229	; 0xe5
   293be:	4a2d      	ldr	r2, [pc, #180]	; (29474 <z_impl_k_mutex_unlock+0xf0>)
   293c0:	482d      	ldr	r0, [pc, #180]	; (29478 <z_impl_k_mutex_unlock+0xf4>)
   293c2:	f005 ffff 	bl	2f3c4 <assert_print>
   293c6:	21e5      	movs	r1, #229	; 0xe5
   293c8:	e7eb      	b.n	293a2 <z_impl_k_mutex_unlock+0x1e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   293ca:	2b01      	cmp	r3, #1
   293cc:	d003      	beq.n	293d6 <z_impl_k_mutex_unlock+0x52>
		mutex->lock_count--;
   293ce:	3b01      	subs	r3, #1
   293d0:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   293d2:	2000      	movs	r0, #0
}
   293d4:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   293d6:	f04f 0320 	mov.w	r3, #32
   293da:	f3ef 8511 	mrs	r5, BASEPRI
   293de:	f383 8812 	msr	BASEPRI_MAX, r3
   293e2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   293e6:	4828      	ldr	r0, [pc, #160]	; (29488 <z_impl_k_mutex_unlock+0x104>)
   293e8:	f7ff fea6 	bl	29138 <z_spin_lock_valid>
   293ec:	b960      	cbnz	r0, 29408 <z_impl_k_mutex_unlock+0x84>
   293ee:	2394      	movs	r3, #148	; 0x94
   293f0:	4a26      	ldr	r2, [pc, #152]	; (2948c <z_impl_k_mutex_unlock+0x108>)
   293f2:	4927      	ldr	r1, [pc, #156]	; (29490 <z_impl_k_mutex_unlock+0x10c>)
   293f4:	4820      	ldr	r0, [pc, #128]	; (29478 <z_impl_k_mutex_unlock+0xf4>)
   293f6:	f005 ffe5 	bl	2f3c4 <assert_print>
   293fa:	4923      	ldr	r1, [pc, #140]	; (29488 <z_impl_k_mutex_unlock+0x104>)
   293fc:	4825      	ldr	r0, [pc, #148]	; (29494 <z_impl_k_mutex_unlock+0x110>)
   293fe:	f005 ffe1 	bl	2f3c4 <assert_print>
   29402:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   29404:	4821      	ldr	r0, [pc, #132]	; (2948c <z_impl_k_mutex_unlock+0x108>)
   29406:	e7cd      	b.n	293a4 <z_impl_k_mutex_unlock+0x20>
	z_spin_lock_set_owner(l);
   29408:	481f      	ldr	r0, [pc, #124]	; (29488 <z_impl_k_mutex_unlock+0x104>)
   2940a:	f7ff feb1 	bl	29170 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   2940e:	6921      	ldr	r1, [r4, #16]
   29410:	68a0      	ldr	r0, [r4, #8]
   29412:	f00c fe6c 	bl	360ee <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   29416:	4620      	mov	r0, r4
   29418:	f001 fe06 	bl	2b028 <z_unpend_first_thread>
	mutex->owner = new_owner;
   2941c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   2941e:	b150      	cbz	r0, 29436 <z_impl_k_mutex_unlock+0xb2>
		mutex->owner_orig_prio = new_owner->base.prio;
   29420:	f990 200e 	ldrsb.w	r2, [r0, #14]
   29424:	6122      	str	r2, [r4, #16]
   29426:	67c6      	str	r6, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   29428:	f001 f834 	bl	2a494 <z_ready_thread>
		z_reschedule(&lock, key);
   2942c:	4629      	mov	r1, r5
   2942e:	4816      	ldr	r0, [pc, #88]	; (29488 <z_impl_k_mutex_unlock+0x104>)
   29430:	f001 f8be 	bl	2a5b0 <z_reschedule>
   29434:	e7cd      	b.n	293d2 <z_impl_k_mutex_unlock+0x4e>
		mutex->lock_count = 0U;
   29436:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   29438:	4813      	ldr	r0, [pc, #76]	; (29488 <z_impl_k_mutex_unlock+0x104>)
   2943a:	f7ff fe8b 	bl	29154 <z_spin_unlock_valid>
   2943e:	b958      	cbnz	r0, 29458 <z_impl_k_mutex_unlock+0xd4>
   29440:	23c2      	movs	r3, #194	; 0xc2
   29442:	4a12      	ldr	r2, [pc, #72]	; (2948c <z_impl_k_mutex_unlock+0x108>)
   29444:	4914      	ldr	r1, [pc, #80]	; (29498 <z_impl_k_mutex_unlock+0x114>)
   29446:	480c      	ldr	r0, [pc, #48]	; (29478 <z_impl_k_mutex_unlock+0xf4>)
   29448:	f005 ffbc 	bl	2f3c4 <assert_print>
   2944c:	490e      	ldr	r1, [pc, #56]	; (29488 <z_impl_k_mutex_unlock+0x104>)
   2944e:	4813      	ldr	r0, [pc, #76]	; (2949c <z_impl_k_mutex_unlock+0x118>)
   29450:	f005 ffb8 	bl	2f3c4 <assert_print>
   29454:	21c2      	movs	r1, #194	; 0xc2
   29456:	e7d5      	b.n	29404 <z_impl_k_mutex_unlock+0x80>
	__asm__ volatile(
   29458:	f385 8811 	msr	BASEPRI, r5
   2945c:	f3bf 8f6f 	isb	sy
   29460:	e7b7      	b.n	293d2 <z_impl_k_mutex_unlock+0x4e>
		return -EINVAL;
   29462:	f06f 0015 	mvn.w	r0, #21
   29466:	e7b5      	b.n	293d4 <z_impl_k_mutex_unlock+0x50>
		return -EPERM;
   29468:	f04f 30ff 	mov.w	r0, #4294967295
   2946c:	e7b2      	b.n	293d4 <z_impl_k_mutex_unlock+0x50>
   2946e:	bf00      	nop
   29470:	000415d8 	.word	0x000415d8
   29474:	00041685 	.word	0x00041685
   29478:	00039995 	.word	0x00039995
   2947c:	000416a7 	.word	0x000416a7
   29480:	2000eeec 	.word	0x2000eeec
   29484:	000416cc 	.word	0x000416cc
   29488:	2000ef10 	.word	0x2000ef10
   2948c:	00039e53 	.word	0x00039e53
   29490:	00039eac 	.word	0x00039eac
   29494:	00039ec1 	.word	0x00039ec1
   29498:	00039e80 	.word	0x00039e80
   2949c:	00039e97 	.word	0x00039e97

000294a0 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   294a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   294a4:	4604      	mov	r4, r0
   294a6:	460e      	mov	r6, r1
   294a8:	4690      	mov	r8, r2
   294aa:	4699      	mov	r9, r3
   294ac:	f89d a020 	ldrb.w	sl, [sp, #32]
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   294b0:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   294b4:	f04f 0320 	mov.w	r3, #32
   294b8:	f3ef 8711 	mrs	r7, BASEPRI
   294bc:	f383 8812 	msr	BASEPRI_MAX, r3
   294c0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   294c4:	4628      	mov	r0, r5
   294c6:	f7ff fe37 	bl	29138 <z_spin_lock_valid>
   294ca:	b968      	cbnz	r0, 294e8 <queue_insert+0x48>
   294cc:	2394      	movs	r3, #148	; 0x94
   294ce:	4a3b      	ldr	r2, [pc, #236]	; (295bc <queue_insert+0x11c>)
   294d0:	493b      	ldr	r1, [pc, #236]	; (295c0 <queue_insert+0x120>)
   294d2:	483c      	ldr	r0, [pc, #240]	; (295c4 <queue_insert+0x124>)
   294d4:	f005 ff76 	bl	2f3c4 <assert_print>
   294d8:	4629      	mov	r1, r5
   294da:	483b      	ldr	r0, [pc, #236]	; (295c8 <queue_insert+0x128>)
   294dc:	f005 ff72 	bl	2f3c4 <assert_print>
   294e0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   294e2:	4836      	ldr	r0, [pc, #216]	; (295bc <queue_insert+0x11c>)
   294e4:	f005 ff67 	bl	2f3b6 <assert_post_action>
	z_spin_lock_set_owner(l);
   294e8:	4628      	mov	r0, r5
   294ea:	f7ff fe41 	bl	29170 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   294ee:	f1ba 0f00 	cmp.w	sl, #0
   294f2:	d000      	beq.n	294f6 <queue_insert+0x56>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   294f4:	6866      	ldr	r6, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   294f6:	f104 000c 	add.w	r0, r4, #12
   294fa:	f001 fd95 	bl	2b028 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   294fe:	b158      	cbz	r0, 29518 <queue_insert+0x78>
   29500:	2300      	movs	r3, #0
   29502:	f8c0 8014 	str.w	r8, [r0, #20]
   29506:	67c3      	str	r3, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   29508:	f000 ffc4 	bl	2a494 <z_ready_thread>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   2950c:	4628      	mov	r0, r5
   2950e:	4639      	mov	r1, r7
   29510:	f001 f84e 	bl	2a5b0 <z_reschedule>
		return 0;
   29514:	2000      	movs	r0, #0
   29516:	e01c      	b.n	29552 <queue_insert+0xb2>
	if (alloc) {
   29518:	f1b9 0f00 	cmp.w	r9, #0
   2951c:	d02b      	beq.n	29576 <queue_insert+0xd6>
	return z_thread_aligned_alloc(0, size);
   2951e:	2108      	movs	r1, #8
   29520:	f002 ffd6 	bl	2c4d0 <z_thread_aligned_alloc>
		if (anode == NULL) {
   29524:	b9b8      	cbnz	r0, 29556 <queue_insert+0xb6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   29526:	4628      	mov	r0, r5
   29528:	f7ff fe14 	bl	29154 <z_spin_unlock_valid>
   2952c:	b958      	cbnz	r0, 29546 <queue_insert+0xa6>
   2952e:	23c2      	movs	r3, #194	; 0xc2
   29530:	4a22      	ldr	r2, [pc, #136]	; (295bc <queue_insert+0x11c>)
   29532:	4926      	ldr	r1, [pc, #152]	; (295cc <queue_insert+0x12c>)
   29534:	4823      	ldr	r0, [pc, #140]	; (295c4 <queue_insert+0x124>)
   29536:	f005 ff45 	bl	2f3c4 <assert_print>
   2953a:	4629      	mov	r1, r5
   2953c:	4824      	ldr	r0, [pc, #144]	; (295d0 <queue_insert+0x130>)
   2953e:	f005 ff41 	bl	2f3c4 <assert_print>
   29542:	21c2      	movs	r1, #194	; 0xc2
   29544:	e7cd      	b.n	294e2 <queue_insert+0x42>
	__asm__ volatile(
   29546:	f387 8811 	msr	BASEPRI, r7
   2954a:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   2954e:	f06f 000b 	mvn.w	r0, #11

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
}
   29552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   29556:	2201      	movs	r2, #1
		anode->data = data;
   29558:	f8c0 8004 	str.w	r8, [r0, #4]
   2955c:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2955e:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   29560:	f001 0103 	and.w	r1, r1, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   29564:	b95e      	cbnz	r6, 2957e <queue_insert+0xde>
	parent->next_and_flags = cur_flags | (unative_t)child;
   29566:	6822      	ldr	r2, [r4, #0]
   29568:	430a      	orrs	r2, r1
   2956a:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2956c:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   2956e:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   29570:	b96a      	cbnz	r2, 2958e <queue_insert+0xee>
	list->tail = node;
   29572:	6060      	str	r0, [r4, #4]
}
   29574:	e00b      	b.n	2958e <queue_insert+0xee>
}
   29576:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   29578:	f8c8 9000 	str.w	r9, [r8]
}
   2957c:	e7ef      	b.n	2955e <queue_insert+0xbe>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2957e:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   29580:	2a03      	cmp	r2, #3
   29582:	d810      	bhi.n	295a6 <queue_insert+0x106>
	parent->next_and_flags = cur_flags | (unative_t)child;
   29584:	6001      	str	r1, [r0, #0]
	return list->tail;
   29586:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   29588:	b939      	cbnz	r1, 2959a <queue_insert+0xfa>
	list->head = node;
   2958a:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   2958e:	2104      	movs	r1, #4
   29590:	f104 0014 	add.w	r0, r4, #20
   29594:	f00c ff76 	bl	36484 <z_handle_obj_poll_events>
   29598:	e7b8      	b.n	2950c <queue_insert+0x6c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2959a:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2959c:	f002 0203 	and.w	r2, r2, #3
   295a0:	4302      	orrs	r2, r0
   295a2:	600a      	str	r2, [r1, #0]
   295a4:	e7e5      	b.n	29572 <queue_insert+0xd2>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   295a6:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   295aa:	430a      	orrs	r2, r1
   295ac:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   295ae:	6832      	ldr	r2, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   295b0:	f002 0203 	and.w	r2, r2, #3
   295b4:	ea40 0302 	orr.w	r3, r0, r2
   295b8:	6033      	str	r3, [r6, #0]
}
   295ba:	e7e8      	b.n	2958e <queue_insert+0xee>
   295bc:	00039e53 	.word	0x00039e53
   295c0:	00039eac 	.word	0x00039eac
   295c4:	00039995 	.word	0x00039995
   295c8:	00039ec1 	.word	0x00039ec1
   295cc:	00039e80 	.word	0x00039e80
   295d0:	00039e97 	.word	0x00039e97

000295d4 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   295d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   295d8:	4606      	mov	r6, r0
   295da:	4691      	mov	r9, r2
   295dc:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   295de:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   295e2:	f04f 0320 	mov.w	r3, #32
   295e6:	f3ef 8811 	mrs	r8, BASEPRI
   295ea:	f383 8812 	msr	BASEPRI_MAX, r3
   295ee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   295f2:	4628      	mov	r0, r5
   295f4:	f7ff fda0 	bl	29138 <z_spin_lock_valid>
   295f8:	b968      	cbnz	r0, 29616 <z_impl_k_queue_get+0x42>
   295fa:	2394      	movs	r3, #148	; 0x94
   295fc:	4a23      	ldr	r2, [pc, #140]	; (2968c <z_impl_k_queue_get+0xb8>)
   295fe:	4924      	ldr	r1, [pc, #144]	; (29690 <z_impl_k_queue_get+0xbc>)
   29600:	4824      	ldr	r0, [pc, #144]	; (29694 <z_impl_k_queue_get+0xc0>)
   29602:	f005 fedf 	bl	2f3c4 <assert_print>
   29606:	4629      	mov	r1, r5
   29608:	4823      	ldr	r0, [pc, #140]	; (29698 <z_impl_k_queue_get+0xc4>)
   2960a:	f005 fedb 	bl	2f3c4 <assert_print>
   2960e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   29610:	481e      	ldr	r0, [pc, #120]	; (2968c <z_impl_k_queue_get+0xb8>)
   29612:	f005 fed0 	bl	2f3b6 <assert_post_action>
	z_spin_lock_set_owner(l);
   29616:	4628      	mov	r0, r5
   29618:	f7ff fdaa 	bl	29170 <z_spin_lock_set_owner>
	return list->head;
   2961c:	6834      	ldr	r4, [r6, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   2961e:	b1ec      	cbz	r4, 2965c <z_impl_k_queue_get+0x88>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   29620:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   29622:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   29624:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   29628:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   2962a:	4620      	mov	r0, r4
   2962c:	f04f 0101 	mov.w	r1, #1
	list->head = node;
   29630:	6033      	str	r3, [r6, #0]
	list->tail = node;
   29632:	bf08      	it	eq
   29634:	6073      	streq	r3, [r6, #4]
   29636:	f00c fd69 	bl	3610c <z_queue_node_peek>
   2963a:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2963c:	4628      	mov	r0, r5
   2963e:	f7ff fd89 	bl	29154 <z_spin_unlock_valid>
   29642:	b9d8      	cbnz	r0, 2967c <z_impl_k_queue_get+0xa8>
   29644:	23c2      	movs	r3, #194	; 0xc2
   29646:	4a11      	ldr	r2, [pc, #68]	; (2968c <z_impl_k_queue_get+0xb8>)
   29648:	4914      	ldr	r1, [pc, #80]	; (2969c <z_impl_k_queue_get+0xc8>)
   2964a:	4812      	ldr	r0, [pc, #72]	; (29694 <z_impl_k_queue_get+0xc0>)
   2964c:	f005 feba 	bl	2f3c4 <assert_print>
   29650:	4629      	mov	r1, r5
   29652:	4813      	ldr	r0, [pc, #76]	; (296a0 <z_impl_k_queue_get+0xcc>)
   29654:	f005 feb6 	bl	2f3c4 <assert_print>
   29658:	21c2      	movs	r1, #194	; 0xc2
   2965a:	e7d9      	b.n	29610 <z_impl_k_queue_get+0x3c>
		return data;
	}

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, get, queue, timeout);

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2965c:	ea59 0307 	orrs.w	r3, r9, r7
   29660:	d0ec      	beq.n	2963c <z_impl_k_queue_get+0x68>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout, NULL);

		return NULL;
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   29662:	4641      	mov	r1, r8
   29664:	4628      	mov	r0, r5
   29666:	e9cd 9700 	strd	r9, r7, [sp]
   2966a:	f106 020c 	add.w	r2, r6, #12
   2966e:	f001 fa5b 	bl	2ab28 <z_pend_curr>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
   29672:	b938      	cbnz	r0, 29684 <z_impl_k_queue_get+0xb0>
   29674:	4b0b      	ldr	r3, [pc, #44]	; (296a4 <z_impl_k_queue_get+0xd0>)
   29676:	689b      	ldr	r3, [r3, #8]
   29678:	695c      	ldr	r4, [r3, #20]
   2967a:	e003      	b.n	29684 <z_impl_k_queue_get+0xb0>
	__asm__ volatile(
   2967c:	f388 8811 	msr	BASEPRI, r8
   29680:	f3bf 8f6f 	isb	sy
}
   29684:	4620      	mov	r0, r4
   29686:	b003      	add	sp, #12
   29688:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2968c:	00039e53 	.word	0x00039e53
   29690:	00039eac 	.word	0x00039eac
   29694:	00039995 	.word	0x00039995
   29698:	00039ec1 	.word	0x00039ec1
   2969c:	00039e80 	.word	0x00039e80
   296a0:	00039e97 	.word	0x00039e97
   296a4:	2000eeec 	.word	0x2000eeec

000296a8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   296a8:	b538      	push	{r3, r4, r5, lr}
   296aa:	4604      	mov	r4, r0
	__asm__ volatile(
   296ac:	f04f 0320 	mov.w	r3, #32
   296b0:	f3ef 8511 	mrs	r5, BASEPRI
   296b4:	f383 8812 	msr	BASEPRI_MAX, r3
   296b8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   296bc:	4817      	ldr	r0, [pc, #92]	; (2971c <z_impl_k_sem_give+0x74>)
   296be:	f7ff fd3b 	bl	29138 <z_spin_lock_valid>
   296c2:	b968      	cbnz	r0, 296e0 <z_impl_k_sem_give+0x38>
   296c4:	2394      	movs	r3, #148	; 0x94
   296c6:	4a16      	ldr	r2, [pc, #88]	; (29720 <z_impl_k_sem_give+0x78>)
   296c8:	4916      	ldr	r1, [pc, #88]	; (29724 <z_impl_k_sem_give+0x7c>)
   296ca:	4817      	ldr	r0, [pc, #92]	; (29728 <z_impl_k_sem_give+0x80>)
   296cc:	f005 fe7a 	bl	2f3c4 <assert_print>
   296d0:	4912      	ldr	r1, [pc, #72]	; (2971c <z_impl_k_sem_give+0x74>)
   296d2:	4816      	ldr	r0, [pc, #88]	; (2972c <z_impl_k_sem_give+0x84>)
   296d4:	f005 fe76 	bl	2f3c4 <assert_print>
   296d8:	2194      	movs	r1, #148	; 0x94
   296da:	4811      	ldr	r0, [pc, #68]	; (29720 <z_impl_k_sem_give+0x78>)
   296dc:	f005 fe6b 	bl	2f3b6 <assert_post_action>
	z_spin_lock_set_owner(l);
   296e0:	480e      	ldr	r0, [pc, #56]	; (2971c <z_impl_k_sem_give+0x74>)
   296e2:	f7ff fd45 	bl	29170 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   296e6:	4620      	mov	r0, r4
   296e8:	f001 fc9e 	bl	2b028 <z_unpend_first_thread>

	if (thread != NULL) {
   296ec:	b148      	cbz	r0, 29702 <z_impl_k_sem_give+0x5a>
   296ee:	2200      	movs	r2, #0
   296f0:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   296f2:	f000 fecf 	bl	2a494 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   296f6:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   296f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   296fc:	4807      	ldr	r0, [pc, #28]	; (2971c <z_impl_k_sem_give+0x74>)
   296fe:	f000 bf57 	b.w	2a5b0 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   29702:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   29706:	429a      	cmp	r2, r3
   29708:	bf18      	it	ne
   2970a:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   2970c:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   2970e:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   29710:	f104 0010 	add.w	r0, r4, #16
   29714:	f00c feb6 	bl	36484 <z_handle_obj_poll_events>
}
   29718:	e7ed      	b.n	296f6 <z_impl_k_sem_give+0x4e>
   2971a:	bf00      	nop
   2971c:	2000ef14 	.word	0x2000ef14
   29720:	00039e53 	.word	0x00039e53
   29724:	00039eac 	.word	0x00039eac
   29728:	00039995 	.word	0x00039995
   2972c:	00039ec1 	.word	0x00039ec1

00029730 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   29730:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   29732:	4604      	mov	r4, r0
   29734:	4616      	mov	r6, r2
   29736:	461d      	mov	r5, r3
   29738:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   2973c:	b17b      	cbz	r3, 2975e <z_impl_k_sem_take+0x2e>
   2973e:	ea52 0305 	orrs.w	r3, r2, r5
   29742:	d00c      	beq.n	2975e <z_impl_k_sem_take+0x2e>
   29744:	492d      	ldr	r1, [pc, #180]	; (297fc <z_impl_k_sem_take+0xcc>)
   29746:	2379      	movs	r3, #121	; 0x79
   29748:	4a2d      	ldr	r2, [pc, #180]	; (29800 <z_impl_k_sem_take+0xd0>)
   2974a:	482e      	ldr	r0, [pc, #184]	; (29804 <z_impl_k_sem_take+0xd4>)
   2974c:	f005 fe3a 	bl	2f3c4 <assert_print>
   29750:	482d      	ldr	r0, [pc, #180]	; (29808 <z_impl_k_sem_take+0xd8>)
   29752:	f005 fe37 	bl	2f3c4 <assert_print>
   29756:	2179      	movs	r1, #121	; 0x79
   29758:	4829      	ldr	r0, [pc, #164]	; (29800 <z_impl_k_sem_take+0xd0>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2975a:	f005 fe2c 	bl	2f3b6 <assert_post_action>
   2975e:	f04f 0320 	mov.w	r3, #32
   29762:	f3ef 8711 	mrs	r7, BASEPRI
   29766:	f383 8812 	msr	BASEPRI_MAX, r3
   2976a:	f3bf 8f6f 	isb	sy
   2976e:	4827      	ldr	r0, [pc, #156]	; (2980c <z_impl_k_sem_take+0xdc>)
   29770:	f7ff fce2 	bl	29138 <z_spin_lock_valid>
   29774:	b960      	cbnz	r0, 29790 <z_impl_k_sem_take+0x60>
   29776:	2394      	movs	r3, #148	; 0x94
   29778:	4a25      	ldr	r2, [pc, #148]	; (29810 <z_impl_k_sem_take+0xe0>)
   2977a:	4926      	ldr	r1, [pc, #152]	; (29814 <z_impl_k_sem_take+0xe4>)
   2977c:	4821      	ldr	r0, [pc, #132]	; (29804 <z_impl_k_sem_take+0xd4>)
   2977e:	f005 fe21 	bl	2f3c4 <assert_print>
   29782:	4922      	ldr	r1, [pc, #136]	; (2980c <z_impl_k_sem_take+0xdc>)
   29784:	4824      	ldr	r0, [pc, #144]	; (29818 <z_impl_k_sem_take+0xe8>)
   29786:	f005 fe1d 	bl	2f3c4 <assert_print>
   2978a:	2194      	movs	r1, #148	; 0x94
   2978c:	4820      	ldr	r0, [pc, #128]	; (29810 <z_impl_k_sem_take+0xe0>)
   2978e:	e7e4      	b.n	2975a <z_impl_k_sem_take+0x2a>
	z_spin_lock_set_owner(l);
   29790:	481e      	ldr	r0, [pc, #120]	; (2980c <z_impl_k_sem_take+0xdc>)
   29792:	f7ff fced 	bl	29170 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   29796:	68a3      	ldr	r3, [r4, #8]
   29798:	b1c3      	cbz	r3, 297cc <z_impl_k_sem_take+0x9c>
		sem->count--;
   2979a:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2979c:	481b      	ldr	r0, [pc, #108]	; (2980c <z_impl_k_sem_take+0xdc>)
   2979e:	60a3      	str	r3, [r4, #8]
   297a0:	f7ff fcd8 	bl	29154 <z_spin_unlock_valid>
   297a4:	b958      	cbnz	r0, 297be <z_impl_k_sem_take+0x8e>
   297a6:	23c2      	movs	r3, #194	; 0xc2
   297a8:	4a19      	ldr	r2, [pc, #100]	; (29810 <z_impl_k_sem_take+0xe0>)
   297aa:	491c      	ldr	r1, [pc, #112]	; (2981c <z_impl_k_sem_take+0xec>)
   297ac:	4815      	ldr	r0, [pc, #84]	; (29804 <z_impl_k_sem_take+0xd4>)
   297ae:	f005 fe09 	bl	2f3c4 <assert_print>
   297b2:	4916      	ldr	r1, [pc, #88]	; (2980c <z_impl_k_sem_take+0xdc>)
   297b4:	481a      	ldr	r0, [pc, #104]	; (29820 <z_impl_k_sem_take+0xf0>)
   297b6:	f005 fe05 	bl	2f3c4 <assert_print>
   297ba:	21c2      	movs	r1, #194	; 0xc2
   297bc:	e7e6      	b.n	2978c <z_impl_k_sem_take+0x5c>
	__asm__ volatile(
   297be:	f387 8811 	msr	BASEPRI, r7
   297c2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   297c6:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   297c8:	b003      	add	sp, #12
   297ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   297cc:	ea56 0305 	orrs.w	r3, r6, r5
   297d0:	d10b      	bne.n	297ea <z_impl_k_sem_take+0xba>
   297d2:	480e      	ldr	r0, [pc, #56]	; (2980c <z_impl_k_sem_take+0xdc>)
   297d4:	f7ff fcbe 	bl	29154 <z_spin_unlock_valid>
   297d8:	2800      	cmp	r0, #0
   297da:	d0e4      	beq.n	297a6 <z_impl_k_sem_take+0x76>
   297dc:	f387 8811 	msr	BASEPRI, r7
   297e0:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   297e4:	f06f 000f 	mvn.w	r0, #15
   297e8:	e7ee      	b.n	297c8 <z_impl_k_sem_take+0x98>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   297ea:	4622      	mov	r2, r4
   297ec:	4639      	mov	r1, r7
   297ee:	e9cd 6500 	strd	r6, r5, [sp]
   297f2:	4806      	ldr	r0, [pc, #24]	; (2980c <z_impl_k_sem_take+0xdc>)
   297f4:	f001 f998 	bl	2ab28 <z_pend_curr>
	return ret;
   297f8:	e7e6      	b.n	297c8 <z_impl_k_sem_take+0x98>
   297fa:	bf00      	nop
   297fc:	00041703 	.word	0x00041703
   29800:	000416e3 	.word	0x000416e3
   29804:	00039995 	.word	0x00039995
   29808:	0003a4e8 	.word	0x0003a4e8
   2980c:	2000ef14 	.word	0x2000ef14
   29810:	00039e53 	.word	0x00039e53
   29814:	00039eac 	.word	0x00039eac
   29818:	00039ec1 	.word	0x00039ec1
   2981c:	00039e80 	.word	0x00039e80
   29820:	00039e97 	.word	0x00039e97

00029824 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
   29824:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_work_queue_config cfg = {
   29826:	2400      	movs	r4, #0
   29828:	4b08      	ldr	r3, [pc, #32]	; (2984c <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   2982a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	struct k_work_queue_config cfg = {
   2982e:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
   29830:	ab02      	add	r3, sp, #8
   29832:	9300      	str	r3, [sp, #0]
   29834:	4906      	ldr	r1, [pc, #24]	; (29850 <k_sys_work_q_init+0x2c>)
   29836:	f04f 33ff 	mov.w	r3, #4294967295
   2983a:	4806      	ldr	r0, [pc, #24]	; (29854 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   2983c:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   29840:	f000 fac0 	bl	29dc4 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   29844:	4620      	mov	r0, r4
   29846:	b004      	add	sp, #16
   29848:	bd10      	pop	{r4, pc}
   2984a:	bf00      	nop
   2984c:	00041751 	.word	0x00041751
   29850:	20014e08 	.word	0x20014e08
   29854:	2000e108 	.word	0x2000e108

00029858 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   29858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2985c:	4604      	mov	r4, r0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2985e:	4e6e      	ldr	r6, [pc, #440]	; (29a18 <work_queue_main+0x1c0>)
	return list->head;
   29860:	4f6e      	ldr	r7, [pc, #440]	; (29a1c <work_queue_main+0x1c4>)
   29862:	b085      	sub	sp, #20
	__asm__ volatile(
   29864:	f04f 0320 	mov.w	r3, #32
   29868:	f3ef 8811 	mrs	r8, BASEPRI
   2986c:	f383 8812 	msr	BASEPRI_MAX, r3
   29870:	f3bf 8f6f 	isb	sy
   29874:	4630      	mov	r0, r6
   29876:	f7ff fc5f 	bl	29138 <z_spin_lock_valid>
   2987a:	b968      	cbnz	r0, 29898 <work_queue_main+0x40>
   2987c:	2394      	movs	r3, #148	; 0x94
   2987e:	4a68      	ldr	r2, [pc, #416]	; (29a20 <work_queue_main+0x1c8>)
   29880:	4968      	ldr	r1, [pc, #416]	; (29a24 <work_queue_main+0x1cc>)
   29882:	4869      	ldr	r0, [pc, #420]	; (29a28 <work_queue_main+0x1d0>)
   29884:	f005 fd9e 	bl	2f3c4 <assert_print>
   29888:	4963      	ldr	r1, [pc, #396]	; (29a18 <work_queue_main+0x1c0>)
   2988a:	4868      	ldr	r0, [pc, #416]	; (29a2c <work_queue_main+0x1d4>)
   2988c:	f005 fd9a 	bl	2f3c4 <assert_print>
   29890:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   29892:	4863      	ldr	r0, [pc, #396]	; (29a20 <work_queue_main+0x1c8>)
   29894:	f005 fd8f 	bl	2f3b6 <assert_post_action>
	z_spin_lock_set_owner(l);
   29898:	4630      	mov	r0, r6
   2989a:	f7ff fc69 	bl	29170 <z_spin_lock_set_owner>
   2989e:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
Z_GENLIST_GET(slist, snode)
   298a2:	b9ad      	cbnz	r5, 298d0 <work_queue_main+0x78>
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   298a4:	2102      	movs	r1, #2
   298a6:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   298aa:	f00c fc71 	bl	36190 <flag_test_and_clear>
   298ae:	2800      	cmp	r0, #0
   298b0:	d135      	bne.n	2991e <work_queue_main+0xc6>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   298b2:	2300      	movs	r3, #0
   298b4:	f04f 32ff 	mov.w	r2, #4294967295
   298b8:	9302      	str	r3, [sp, #8]
   298ba:	f04f 33ff 	mov.w	r3, #4294967295
   298be:	4641      	mov	r1, r8
   298c0:	e9cd 2300 	strd	r2, r3, [sp]
   298c4:	4630      	mov	r0, r6
   298c6:	f104 0290 	add.w	r2, r4, #144	; 0x90
   298ca:	f001 fe9f 	bl	2b60c <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
   298ce:	e7c9      	b.n	29864 <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   298d0:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
	return node->next;
   298d4:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   298d6:	4295      	cmp	r5, r2
	list->tail = node;
   298d8:	bf08      	it	eq
   298da:	f8c4 308c 	streq.w	r3, [r4, #140]	; 0x8c
	list->head = node;
   298de:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	*flagp |= BIT(bit);
   298e2:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   298e6:	4630      	mov	r0, r6
   298e8:	f043 0302 	orr.w	r3, r3, #2
   298ec:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	*flagp &= ~BIT(bit);
   298f0:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
   298f2:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
   298f6:	f023 0304 	bic.w	r3, r3, #4
   298fa:	f043 0301 	orr.w	r3, r3, #1
   298fe:	60eb      	str	r3, [r5, #12]
   29900:	f7ff fc28 	bl	29154 <z_spin_unlock_valid>
   29904:	b9a8      	cbnz	r0, 29932 <work_queue_main+0xda>
   29906:	23c2      	movs	r3, #194	; 0xc2
   29908:	4a45      	ldr	r2, [pc, #276]	; (29a20 <work_queue_main+0x1c8>)
   2990a:	4949      	ldr	r1, [pc, #292]	; (29a30 <work_queue_main+0x1d8>)
   2990c:	4846      	ldr	r0, [pc, #280]	; (29a28 <work_queue_main+0x1d0>)
   2990e:	f005 fd59 	bl	2f3c4 <assert_print>
   29912:	4941      	ldr	r1, [pc, #260]	; (29a18 <work_queue_main+0x1c0>)
   29914:	4847      	ldr	r0, [pc, #284]	; (29a34 <work_queue_main+0x1dc>)
   29916:	f005 fd55 	bl	2f3c4 <assert_print>
   2991a:	21c2      	movs	r1, #194	; 0xc2
   2991c:	e7b9      	b.n	29892 <work_queue_main+0x3a>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   2991e:	f104 0598 	add.w	r5, r4, #152	; 0x98
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   29922:	2200      	movs	r2, #0
   29924:	2101      	movs	r1, #1
   29926:	4628      	mov	r0, r5
   29928:	f001 fe12 	bl	2b550 <z_sched_wake>
   2992c:	2800      	cmp	r0, #0
   2992e:	d1f8      	bne.n	29922 <work_queue_main+0xca>
   29930:	e7bf      	b.n	298b2 <work_queue_main+0x5a>
	__asm__ volatile(
   29932:	f388 8811 	msr	BASEPRI, r8
   29936:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
   2993a:	f1b9 0f00 	cmp.w	r9, #0
   2993e:	d10a      	bne.n	29956 <work_queue_main+0xfe>
   29940:	493d      	ldr	r1, [pc, #244]	; (29a38 <work_queue_main+0x1e0>)
   29942:	4839      	ldr	r0, [pc, #228]	; (29a28 <work_queue_main+0x1d0>)
   29944:	f240 239b 	movw	r3, #667	; 0x29b
   29948:	4a3c      	ldr	r2, [pc, #240]	; (29a3c <work_queue_main+0x1e4>)
   2994a:	f005 fd3b 	bl	2f3c4 <assert_print>
   2994e:	f240 219b 	movw	r1, #667	; 0x29b
   29952:	483a      	ldr	r0, [pc, #232]	; (29a3c <work_queue_main+0x1e4>)
   29954:	e79e      	b.n	29894 <work_queue_main+0x3c>
		handler(work);
   29956:	4628      	mov	r0, r5
   29958:	47c8      	blx	r9
	__asm__ volatile(
   2995a:	f04f 0320 	mov.w	r3, #32
   2995e:	f3ef 8a11 	mrs	sl, BASEPRI
   29962:	f383 8812 	msr	BASEPRI_MAX, r3
   29966:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2996a:	4630      	mov	r0, r6
   2996c:	f7ff fbe4 	bl	29138 <z_spin_lock_valid>
   29970:	2800      	cmp	r0, #0
   29972:	d083      	beq.n	2987c <work_queue_main+0x24>
	z_spin_lock_set_owner(l);
   29974:	4630      	mov	r0, r6
   29976:	f7ff fbfb 	bl	29170 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   2997a:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2997c:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   2997e:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   29982:	d417      	bmi.n	299b4 <work_queue_main+0x15c>
	*flagp &= ~BIT(bit);
   29984:	60ea      	str	r2, [r5, #12]
   29986:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2998a:	4630      	mov	r0, r6
   2998c:	f023 0302 	bic.w	r3, r3, #2
   29990:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	return (*flagp & BIT(bit)) != 0U;
   29994:	f3c3 2500 	ubfx	r5, r3, #8, #1
   29998:	f7ff fbdc 	bl	29154 <z_spin_unlock_valid>
   2999c:	2800      	cmp	r0, #0
   2999e:	d0b2      	beq.n	29906 <work_queue_main+0xae>
	__asm__ volatile(
   299a0:	f38a 8811 	msr	BASEPRI, sl
   299a4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   299a8:	2d00      	cmp	r5, #0
   299aa:	f47f af5b 	bne.w	29864 <work_queue_main+0xc>
	z_impl_k_yield();
   299ae:	f001 fb93 	bl	2b0d8 <z_impl_k_yield>
}
   299b2:	e757      	b.n	29864 <work_queue_main+0xc>
	return list->head;
   299b4:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   299b6:	f023 0303 	bic.w	r3, r3, #3
   299ba:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   299bc:	2800      	cmp	r0, #0
   299be:	d0e2      	beq.n	29986 <work_queue_main+0x12e>
	return node->next;
   299c0:	f04f 0800 	mov.w	r8, #0
	parent->next = child;
   299c4:	46c3      	mov	fp, r8
	return node->next;
   299c6:	f8d0 9000 	ldr.w	r9, [r0]
   299ca:	2800      	cmp	r0, #0
   299cc:	d0db      	beq.n	29986 <work_queue_main+0x12e>
		if (wc->work == work) {
   299ce:	6843      	ldr	r3, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   299d0:	4602      	mov	r2, r0
		if (wc->work == work) {
   299d2:	429d      	cmp	r5, r3
   299d4:	d10d      	bne.n	299f2 <work_queue_main+0x19a>
   299d6:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   299d8:	f1b8 0f00 	cmp.w	r8, #0
   299dc:	d112      	bne.n	29a04 <work_queue_main+0x1ac>
   299de:	687b      	ldr	r3, [r7, #4]
	list->head = node;
   299e0:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   299e2:	4283      	cmp	r3, r0
   299e4:	d100      	bne.n	299e8 <work_queue_main+0x190>
	list->tail = node;
   299e6:	607a      	str	r2, [r7, #4]
	parent->next = child;
   299e8:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   299ec:	f7ff fe5c 	bl	296a8 <z_impl_k_sem_give>
}
   299f0:	4642      	mov	r2, r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   299f2:	f1b9 0f00 	cmp.w	r9, #0
   299f6:	d00d      	beq.n	29a14 <work_queue_main+0x1bc>
	return node->next;
   299f8:	f8d9 3000 	ldr.w	r3, [r9]
   299fc:	4648      	mov	r0, r9
   299fe:	4690      	mov	r8, r2
   29a00:	4699      	mov	r9, r3
   29a02:	e7e2      	b.n	299ca <work_queue_main+0x172>
	parent->next = child;
   29a04:	f8c8 2000 	str.w	r2, [r8]
Z_GENLIST_REMOVE(slist, snode)
   29a08:	687b      	ldr	r3, [r7, #4]
   29a0a:	4283      	cmp	r3, r0
	list->tail = node;
   29a0c:	bf08      	it	eq
   29a0e:	f8c7 8004 	streq.w	r8, [r7, #4]
}
   29a12:	e7e9      	b.n	299e8 <work_queue_main+0x190>
   29a14:	464b      	mov	r3, r9
   29a16:	e7f1      	b.n	299fc <work_queue_main+0x1a4>
   29a18:	2000ef20 	.word	0x2000ef20
   29a1c:	2000ef18 	.word	0x2000ef18
   29a20:	00039e53 	.word	0x00039e53
   29a24:	00039eac 	.word	0x00039eac
   29a28:	00039995 	.word	0x00039995
   29a2c:	00039ec1 	.word	0x00039ec1
   29a30:	00039e80 	.word	0x00039e80
   29a34:	00039e97 	.word	0x00039e97
   29a38:	0004177b 	.word	0x0004177b
   29a3c:	0004175a 	.word	0x0004175a

00029a40 <cancel_sync_locked>:
{
   29a40:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   29a42:	68c3      	ldr	r3, [r0, #12]
{
   29a44:	4605      	mov	r5, r0
	return (*flagp & BIT(bit)) != 0U;
   29a46:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   29a4a:	079b      	lsls	r3, r3, #30
{
   29a4c:	460c      	mov	r4, r1
	if (ret) {
   29a4e:	d50d      	bpl.n	29a6c <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   29a50:	2201      	movs	r2, #1
   29a52:	2100      	movs	r1, #0
   29a54:	f104 0008 	add.w	r0, r4, #8
   29a58:	f00c fb8a 	bl	36170 <z_impl_k_sem_init>
	parent->next = child;
   29a5c:	2300      	movs	r3, #0
   29a5e:	6023      	str	r3, [r4, #0]
	return list->tail;
   29a60:	4b05      	ldr	r3, [pc, #20]	; (29a78 <cancel_sync_locked+0x38>)
	canceler->work = work;
   29a62:	6065      	str	r5, [r4, #4]
   29a64:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   29a66:	b91a      	cbnz	r2, 29a70 <cancel_sync_locked+0x30>
	list->head = node;
   29a68:	e9c3 4400 	strd	r4, r4, [r3]
}
   29a6c:	4630      	mov	r0, r6
   29a6e:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   29a70:	6014      	str	r4, [r2, #0]
	list->tail = node;
   29a72:	605c      	str	r4, [r3, #4]
}
   29a74:	e7fa      	b.n	29a6c <cancel_sync_locked+0x2c>
   29a76:	bf00      	nop
   29a78:	2000ef18 	.word	0x2000ef18

00029a7c <submit_to_queue_locked>:
{
   29a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   29a7e:	68c3      	ldr	r3, [r0, #12]
{
   29a80:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   29a82:	079a      	lsls	r2, r3, #30
{
   29a84:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   29a86:	f3c3 0640 	ubfx	r6, r3, #1, #1
   29a8a:	d439      	bmi.n	29b00 <submit_to_queue_locked+0x84>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   29a8c:	075b      	lsls	r3, r3, #29
   29a8e:	d425      	bmi.n	29adc <submit_to_queue_locked+0x60>
		if (*queuep == NULL) {
   29a90:	680b      	ldr	r3, [r1, #0]
   29a92:	b90b      	cbnz	r3, 29a98 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   29a94:	6883      	ldr	r3, [r0, #8]
   29a96:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   29a98:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   29a9a:	07dd      	lsls	r5, r3, #31
   29a9c:	d521      	bpl.n	29ae2 <submit_to_queue_locked+0x66>
			__ASSERT_NO_MSG(work->queue != NULL);
   29a9e:	68a3      	ldr	r3, [r4, #8]
   29aa0:	b95b      	cbnz	r3, 29aba <submit_to_queue_locked+0x3e>
   29aa2:	4928      	ldr	r1, [pc, #160]	; (29b44 <submit_to_queue_locked+0xc8>)
   29aa4:	4828      	ldr	r0, [pc, #160]	; (29b48 <submit_to_queue_locked+0xcc>)
   29aa6:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   29aaa:	4a28      	ldr	r2, [pc, #160]	; (29b4c <submit_to_queue_locked+0xd0>)
   29aac:	f005 fc8a 	bl	2f3c4 <assert_print>
   29ab0:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   29ab4:	4825      	ldr	r0, [pc, #148]	; (29b4c <submit_to_queue_locked+0xd0>)
   29ab6:	f005 fc7e 	bl	2f3b6 <assert_post_action>
			ret = 2;
   29aba:	2602      	movs	r6, #2
			*queuep = work->queue;
   29abc:	603b      	str	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   29abe:	683d      	ldr	r5, [r7, #0]
	if (queue == NULL) {
   29ac0:	2d00      	cmp	r5, #0
   29ac2:	d03c      	beq.n	29b3e <submit_to_queue_locked+0xc2>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   29ac4:	4b22      	ldr	r3, [pc, #136]	; (29b50 <submit_to_queue_locked+0xd4>)
   29ac6:	689b      	ldr	r3, [r3, #8]
   29ac8:	42ab      	cmp	r3, r5
   29aca:	d00c      	beq.n	29ae6 <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   29acc:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   29ad0:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   29ad2:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   29ad6:	d416      	bmi.n	29b06 <submit_to_queue_locked+0x8a>
		ret = -EBUSY;
   29ad8:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   29adc:	2300      	movs	r3, #0
   29ade:	603b      	str	r3, [r7, #0]
	return ret;
   29ae0:	e027      	b.n	29b32 <submit_to_queue_locked+0xb6>
		ret = 1;
   29ae2:	2601      	movs	r6, #1
   29ae4:	e7eb      	b.n	29abe <submit_to_queue_locked+0x42>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   29ae6:	f00c faee 	bl	360c6 <k_is_in_isr>
   29aea:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
   29aee:	2800      	cmp	r0, #0
   29af0:	d1ee      	bne.n	29ad0 <submit_to_queue_locked+0x54>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   29af2:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   29af4:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   29af8:	d5ee      	bpl.n	29ad8 <submit_to_queue_locked+0x5c>
	} else if (plugged && !draining) {
   29afa:	b152      	cbz	r2, 29b12 <submit_to_queue_locked+0x96>
   29afc:	075b      	lsls	r3, r3, #29
   29afe:	d408      	bmi.n	29b12 <submit_to_queue_locked+0x96>
		ret = -EBUSY;
   29b00:	f06f 060f 	mvn.w	r6, #15
   29b04:	e7ea      	b.n	29adc <submit_to_queue_locked+0x60>
	} else if (draining && !chained) {
   29b06:	2a00      	cmp	r2, #0
   29b08:	d1fa      	bne.n	29b00 <submit_to_queue_locked+0x84>
	return (*flagp & BIT(bit)) != 0U;
   29b0a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   29b0e:	2b00      	cmp	r3, #0
   29b10:	d1f6      	bne.n	29b00 <submit_to_queue_locked+0x84>
	parent->next = child;
   29b12:	2300      	movs	r3, #0
   29b14:	6023      	str	r3, [r4, #0]
	return list->tail;
   29b16:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
Z_GENLIST_APPEND(slist, snode)
   29b1a:	b963      	cbnz	r3, 29b36 <submit_to_queue_locked+0xba>
	list->head = node;
   29b1c:	e9c5 4422 	strd	r4, r4, [r5, #136]	; 0x88
		(void)notify_queue_locked(queue);
   29b20:	4628      	mov	r0, r5
   29b22:	f00c fb4f 	bl	361c4 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   29b26:	68e3      	ldr	r3, [r4, #12]
   29b28:	f043 0304 	orr.w	r3, r3, #4
   29b2c:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   29b2e:	683b      	ldr	r3, [r7, #0]
   29b30:	60a3      	str	r3, [r4, #8]
}
   29b32:	4630      	mov	r0, r6
   29b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   29b36:	601c      	str	r4, [r3, #0]
	list->tail = node;
   29b38:	f8c5 408c 	str.w	r4, [r5, #140]	; 0x8c
}
   29b3c:	e7f0      	b.n	29b20 <submit_to_queue_locked+0xa4>
		return -EINVAL;
   29b3e:	f06f 0615 	mvn.w	r6, #21
   29b42:	e7cb      	b.n	29adc <submit_to_queue_locked+0x60>
   29b44:	00041792 	.word	0x00041792
   29b48:	00039995 	.word	0x00039995
   29b4c:	0004175a 	.word	0x0004175a
   29b50:	2000eeec 	.word	0x2000eeec

00029b54 <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   29b54:	b573      	push	{r0, r1, r4, r5, r6, lr}
   29b56:	4604      	mov	r4, r0
	__asm__ volatile(
   29b58:	f04f 0320 	mov.w	r3, #32
   29b5c:	f3ef 8511 	mrs	r5, BASEPRI
   29b60:	f383 8812 	msr	BASEPRI_MAX, r3
   29b64:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   29b68:	481c      	ldr	r0, [pc, #112]	; (29bdc <work_timeout+0x88>)
   29b6a:	f7ff fae5 	bl	29138 <z_spin_lock_valid>
   29b6e:	b968      	cbnz	r0, 29b8c <work_timeout+0x38>
   29b70:	2394      	movs	r3, #148	; 0x94
   29b72:	4a1b      	ldr	r2, [pc, #108]	; (29be0 <work_timeout+0x8c>)
   29b74:	491b      	ldr	r1, [pc, #108]	; (29be4 <work_timeout+0x90>)
   29b76:	481c      	ldr	r0, [pc, #112]	; (29be8 <work_timeout+0x94>)
   29b78:	f005 fc24 	bl	2f3c4 <assert_print>
   29b7c:	4917      	ldr	r1, [pc, #92]	; (29bdc <work_timeout+0x88>)
   29b7e:	481b      	ldr	r0, [pc, #108]	; (29bec <work_timeout+0x98>)
   29b80:	f005 fc20 	bl	2f3c4 <assert_print>
   29b84:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   29b86:	4816      	ldr	r0, [pc, #88]	; (29be0 <work_timeout+0x8c>)
   29b88:	f005 fc15 	bl	2f3b6 <assert_post_action>
	z_spin_lock_set_owner(l);
   29b8c:	4813      	ldr	r0, [pc, #76]	; (29bdc <work_timeout+0x88>)
   29b8e:	f7ff faef 	bl	29170 <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   29b92:	2300      	movs	r3, #0
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   29b94:	2103      	movs	r1, #3
   29b96:	1f20      	subs	r0, r4, #4
	struct k_work_q *queue = NULL;
   29b98:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   29b9a:	f1a4 0610 	sub.w	r6, r4, #16
   29b9e:	f00c faf7 	bl	36190 <flag_test_and_clear>
   29ba2:	b128      	cbz	r0, 29bb0 <work_timeout+0x5c>
		queue = dw->queue;
   29ba4:	69a3      	ldr	r3, [r4, #24]
		(void)submit_to_queue_locked(wp, &queue);
   29ba6:	4630      	mov	r0, r6
   29ba8:	a901      	add	r1, sp, #4
		queue = dw->queue;
   29baa:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   29bac:	f7ff ff66 	bl	29a7c <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   29bb0:	480a      	ldr	r0, [pc, #40]	; (29bdc <work_timeout+0x88>)
   29bb2:	f7ff facf 	bl	29154 <z_spin_unlock_valid>
   29bb6:	b958      	cbnz	r0, 29bd0 <work_timeout+0x7c>
   29bb8:	23c2      	movs	r3, #194	; 0xc2
   29bba:	4a09      	ldr	r2, [pc, #36]	; (29be0 <work_timeout+0x8c>)
   29bbc:	490c      	ldr	r1, [pc, #48]	; (29bf0 <work_timeout+0x9c>)
   29bbe:	480a      	ldr	r0, [pc, #40]	; (29be8 <work_timeout+0x94>)
   29bc0:	f005 fc00 	bl	2f3c4 <assert_print>
   29bc4:	4905      	ldr	r1, [pc, #20]	; (29bdc <work_timeout+0x88>)
   29bc6:	480b      	ldr	r0, [pc, #44]	; (29bf4 <work_timeout+0xa0>)
   29bc8:	f005 fbfc 	bl	2f3c4 <assert_print>
   29bcc:	21c2      	movs	r1, #194	; 0xc2
   29bce:	e7da      	b.n	29b86 <work_timeout+0x32>
	__asm__ volatile(
   29bd0:	f385 8811 	msr	BASEPRI, r5
   29bd4:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
   29bd8:	b002      	add	sp, #8
   29bda:	bd70      	pop	{r4, r5, r6, pc}
   29bdc:	2000ef20 	.word	0x2000ef20
   29be0:	00039e53 	.word	0x00039e53
   29be4:	00039eac 	.word	0x00039eac
   29be8:	00039995 	.word	0x00039995
   29bec:	00039ec1 	.word	0x00039ec1
   29bf0:	00039e80 	.word	0x00039e80
   29bf4:	00039e97 	.word	0x00039e97

00029bf8 <k_work_init>:
{
   29bf8:	b538      	push	{r3, r4, r5, lr}
   29bfa:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   29bfc:	4604      	mov	r4, r0
   29bfe:	b948      	cbnz	r0, 29c14 <k_work_init+0x1c>
   29c00:	490c      	ldr	r1, [pc, #48]	; (29c34 <k_work_init+0x3c>)
   29c02:	2389      	movs	r3, #137	; 0x89
   29c04:	4a0c      	ldr	r2, [pc, #48]	; (29c38 <k_work_init+0x40>)
   29c06:	480d      	ldr	r0, [pc, #52]	; (29c3c <k_work_init+0x44>)
   29c08:	f005 fbdc 	bl	2f3c4 <assert_print>
   29c0c:	2189      	movs	r1, #137	; 0x89
	__ASSERT_NO_MSG(handler != NULL);
   29c0e:	480a      	ldr	r0, [pc, #40]	; (29c38 <k_work_init+0x40>)
   29c10:	f005 fbd1 	bl	2f3b6 <assert_post_action>
   29c14:	b939      	cbnz	r1, 29c26 <k_work_init+0x2e>
   29c16:	490a      	ldr	r1, [pc, #40]	; (29c40 <k_work_init+0x48>)
   29c18:	238a      	movs	r3, #138	; 0x8a
   29c1a:	4a07      	ldr	r2, [pc, #28]	; (29c38 <k_work_init+0x40>)
   29c1c:	4807      	ldr	r0, [pc, #28]	; (29c3c <k_work_init+0x44>)
   29c1e:	f005 fbd1 	bl	2f3c4 <assert_print>
   29c22:	218a      	movs	r1, #138	; 0x8a
   29c24:	e7f3      	b.n	29c0e <k_work_init+0x16>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   29c26:	2210      	movs	r2, #16
   29c28:	2100      	movs	r1, #0
   29c2a:	f00c fc9d 	bl	36568 <memset>
   29c2e:	6065      	str	r5, [r4, #4]
}
   29c30:	bd38      	pop	{r3, r4, r5, pc}
   29c32:	bf00      	nop
   29c34:	00041831 	.word	0x00041831
   29c38:	0004175a 	.word	0x0004175a
   29c3c:	00039995 	.word	0x00039995
   29c40:	0004177b 	.word	0x0004177b

00029c44 <k_work_busy_get>:
{
   29c44:	b538      	push	{r3, r4, r5, lr}
   29c46:	4604      	mov	r4, r0
	__asm__ volatile(
   29c48:	f04f 0320 	mov.w	r3, #32
   29c4c:	f3ef 8511 	mrs	r5, BASEPRI
   29c50:	f383 8812 	msr	BASEPRI_MAX, r3
   29c54:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   29c58:	4816      	ldr	r0, [pc, #88]	; (29cb4 <k_work_busy_get+0x70>)
   29c5a:	f7ff fa6d 	bl	29138 <z_spin_lock_valid>
   29c5e:	b968      	cbnz	r0, 29c7c <k_work_busy_get+0x38>
   29c60:	2394      	movs	r3, #148	; 0x94
   29c62:	4a15      	ldr	r2, [pc, #84]	; (29cb8 <k_work_busy_get+0x74>)
   29c64:	4915      	ldr	r1, [pc, #84]	; (29cbc <k_work_busy_get+0x78>)
   29c66:	4816      	ldr	r0, [pc, #88]	; (29cc0 <k_work_busy_get+0x7c>)
   29c68:	f005 fbac 	bl	2f3c4 <assert_print>
   29c6c:	4911      	ldr	r1, [pc, #68]	; (29cb4 <k_work_busy_get+0x70>)
   29c6e:	4815      	ldr	r0, [pc, #84]	; (29cc4 <k_work_busy_get+0x80>)
   29c70:	f005 fba8 	bl	2f3c4 <assert_print>
   29c74:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   29c76:	4810      	ldr	r0, [pc, #64]	; (29cb8 <k_work_busy_get+0x74>)
   29c78:	f005 fb9d 	bl	2f3b6 <assert_post_action>
	z_spin_lock_set_owner(l);
   29c7c:	480d      	ldr	r0, [pc, #52]	; (29cb4 <k_work_busy_get+0x70>)
   29c7e:	f7ff fa77 	bl	29170 <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
   29c82:	68e4      	ldr	r4, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   29c84:	480b      	ldr	r0, [pc, #44]	; (29cb4 <k_work_busy_get+0x70>)
   29c86:	f004 040f 	and.w	r4, r4, #15
   29c8a:	f7ff fa63 	bl	29154 <z_spin_unlock_valid>
   29c8e:	b958      	cbnz	r0, 29ca8 <k_work_busy_get+0x64>
   29c90:	23c2      	movs	r3, #194	; 0xc2
   29c92:	4a09      	ldr	r2, [pc, #36]	; (29cb8 <k_work_busy_get+0x74>)
   29c94:	490c      	ldr	r1, [pc, #48]	; (29cc8 <k_work_busy_get+0x84>)
   29c96:	480a      	ldr	r0, [pc, #40]	; (29cc0 <k_work_busy_get+0x7c>)
   29c98:	f005 fb94 	bl	2f3c4 <assert_print>
   29c9c:	4905      	ldr	r1, [pc, #20]	; (29cb4 <k_work_busy_get+0x70>)
   29c9e:	480b      	ldr	r0, [pc, #44]	; (29ccc <k_work_busy_get+0x88>)
   29ca0:	f005 fb90 	bl	2f3c4 <assert_print>
   29ca4:	21c2      	movs	r1, #194	; 0xc2
   29ca6:	e7e6      	b.n	29c76 <k_work_busy_get+0x32>
	__asm__ volatile(
   29ca8:	f385 8811 	msr	BASEPRI, r5
   29cac:	f3bf 8f6f 	isb	sy
}
   29cb0:	4620      	mov	r0, r4
   29cb2:	bd38      	pop	{r3, r4, r5, pc}
   29cb4:	2000ef20 	.word	0x2000ef20
   29cb8:	00039e53 	.word	0x00039e53
   29cbc:	00039eac 	.word	0x00039eac
   29cc0:	00039995 	.word	0x00039995
   29cc4:	00039ec1 	.word	0x00039ec1
   29cc8:	00039e80 	.word	0x00039e80
   29ccc:	00039e97 	.word	0x00039e97

00029cd0 <z_work_submit_to_queue>:
{
   29cd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   29cd2:	460c      	mov	r4, r1
{
   29cd4:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   29cd6:	b959      	cbnz	r1, 29cf0 <z_work_submit_to_queue+0x20>
   29cd8:	4921      	ldr	r1, [pc, #132]	; (29d60 <z_work_submit_to_queue+0x90>)
   29cda:	4822      	ldr	r0, [pc, #136]	; (29d64 <z_work_submit_to_queue+0x94>)
   29cdc:	f44f 73ba 	mov.w	r3, #372	; 0x174
   29ce0:	4a21      	ldr	r2, [pc, #132]	; (29d68 <z_work_submit_to_queue+0x98>)
   29ce2:	f005 fb6f 	bl	2f3c4 <assert_print>
   29ce6:	f44f 71ba 	mov.w	r1, #372	; 0x174
   29cea:	481f      	ldr	r0, [pc, #124]	; (29d68 <z_work_submit_to_queue+0x98>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   29cec:	f005 fb63 	bl	2f3b6 <assert_post_action>
	__asm__ volatile(
   29cf0:	f04f 0320 	mov.w	r3, #32
   29cf4:	f3ef 8511 	mrs	r5, BASEPRI
   29cf8:	f383 8812 	msr	BASEPRI_MAX, r3
   29cfc:	f3bf 8f6f 	isb	sy
   29d00:	481a      	ldr	r0, [pc, #104]	; (29d6c <z_work_submit_to_queue+0x9c>)
   29d02:	f7ff fa19 	bl	29138 <z_spin_lock_valid>
   29d06:	b960      	cbnz	r0, 29d22 <z_work_submit_to_queue+0x52>
   29d08:	2394      	movs	r3, #148	; 0x94
   29d0a:	4a19      	ldr	r2, [pc, #100]	; (29d70 <z_work_submit_to_queue+0xa0>)
   29d0c:	4919      	ldr	r1, [pc, #100]	; (29d74 <z_work_submit_to_queue+0xa4>)
   29d0e:	4815      	ldr	r0, [pc, #84]	; (29d64 <z_work_submit_to_queue+0x94>)
   29d10:	f005 fb58 	bl	2f3c4 <assert_print>
   29d14:	4915      	ldr	r1, [pc, #84]	; (29d6c <z_work_submit_to_queue+0x9c>)
   29d16:	4818      	ldr	r0, [pc, #96]	; (29d78 <z_work_submit_to_queue+0xa8>)
   29d18:	f005 fb54 	bl	2f3c4 <assert_print>
   29d1c:	2194      	movs	r1, #148	; 0x94
   29d1e:	4814      	ldr	r0, [pc, #80]	; (29d70 <z_work_submit_to_queue+0xa0>)
   29d20:	e7e4      	b.n	29cec <z_work_submit_to_queue+0x1c>
	z_spin_lock_set_owner(l);
   29d22:	4812      	ldr	r0, [pc, #72]	; (29d6c <z_work_submit_to_queue+0x9c>)
   29d24:	f7ff fa24 	bl	29170 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   29d28:	4620      	mov	r0, r4
   29d2a:	a901      	add	r1, sp, #4
   29d2c:	f7ff fea6 	bl	29a7c <submit_to_queue_locked>
   29d30:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   29d32:	480e      	ldr	r0, [pc, #56]	; (29d6c <z_work_submit_to_queue+0x9c>)
   29d34:	f7ff fa0e 	bl	29154 <z_spin_unlock_valid>
   29d38:	b958      	cbnz	r0, 29d52 <z_work_submit_to_queue+0x82>
   29d3a:	23c2      	movs	r3, #194	; 0xc2
   29d3c:	4a0c      	ldr	r2, [pc, #48]	; (29d70 <z_work_submit_to_queue+0xa0>)
   29d3e:	490f      	ldr	r1, [pc, #60]	; (29d7c <z_work_submit_to_queue+0xac>)
   29d40:	4808      	ldr	r0, [pc, #32]	; (29d64 <z_work_submit_to_queue+0x94>)
   29d42:	f005 fb3f 	bl	2f3c4 <assert_print>
   29d46:	4909      	ldr	r1, [pc, #36]	; (29d6c <z_work_submit_to_queue+0x9c>)
   29d48:	480d      	ldr	r0, [pc, #52]	; (29d80 <z_work_submit_to_queue+0xb0>)
   29d4a:	f005 fb3b 	bl	2f3c4 <assert_print>
   29d4e:	21c2      	movs	r1, #194	; 0xc2
   29d50:	e7e5      	b.n	29d1e <z_work_submit_to_queue+0x4e>
	__asm__ volatile(
   29d52:	f385 8811 	msr	BASEPRI, r5
   29d56:	f3bf 8f6f 	isb	sy
}
   29d5a:	4620      	mov	r0, r4
   29d5c:	b003      	add	sp, #12
   29d5e:	bd30      	pop	{r4, r5, pc}
   29d60:	00041831 	.word	0x00041831
   29d64:	00039995 	.word	0x00039995
   29d68:	0004175a 	.word	0x0004175a
   29d6c:	2000ef20 	.word	0x2000ef20
   29d70:	00039e53 	.word	0x00039e53
   29d74:	00039eac 	.word	0x00039eac
   29d78:	00039ec1 	.word	0x00039ec1
   29d7c:	00039e80 	.word	0x00039e80
   29d80:	00039e97 	.word	0x00039e97

00029d84 <k_work_submit>:
{
   29d84:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   29d86:	4801      	ldr	r0, [pc, #4]	; (29d8c <k_work_submit+0x8>)
   29d88:	f00c ba56 	b.w	36238 <k_work_submit_to_queue>
   29d8c:	2000e108 	.word	0x2000e108

00029d90 <k_work_queue_init>:
{
   29d90:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(queue != NULL);
   29d92:	b958      	cbnz	r0, 29dac <k_work_queue_init+0x1c>
   29d94:	4908      	ldr	r1, [pc, #32]	; (29db8 <k_work_queue_init+0x28>)
   29d96:	4809      	ldr	r0, [pc, #36]	; (29dbc <k_work_queue_init+0x2c>)
   29d98:	f240 23b9 	movw	r3, #697	; 0x2b9
   29d9c:	4a08      	ldr	r2, [pc, #32]	; (29dc0 <k_work_queue_init+0x30>)
   29d9e:	f005 fb11 	bl	2f3c4 <assert_print>
   29da2:	f240 21b9 	movw	r1, #697	; 0x2b9
   29da6:	4806      	ldr	r0, [pc, #24]	; (29dc0 <k_work_queue_init+0x30>)
   29da8:	f005 fb05 	bl	2f3b6 <assert_post_action>
	*queue = (struct k_work_q) {
   29dac:	22a8      	movs	r2, #168	; 0xa8
   29dae:	2100      	movs	r1, #0
   29db0:	f00c fbda 	bl	36568 <memset>
}
   29db4:	bd08      	pop	{r3, pc}
   29db6:	bf00      	nop
   29db8:	00041798 	.word	0x00041798
   29dbc:	00039995 	.word	0x00039995
   29dc0:	0004175a 	.word	0x0004175a

00029dc4 <k_work_queue_start>:
{
   29dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   29dc6:	b089      	sub	sp, #36	; 0x24
	__ASSERT_NO_MSG(queue);
   29dc8:	4604      	mov	r4, r0
{
   29dca:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	__ASSERT_NO_MSG(queue);
   29dcc:	b958      	cbnz	r0, 29de6 <k_work_queue_start+0x22>
   29dce:	492b      	ldr	r1, [pc, #172]	; (29e7c <k_work_queue_start+0xb8>)
   29dd0:	f44f 7332 	mov.w	r3, #712	; 0x2c8
   29dd4:	4a2a      	ldr	r2, [pc, #168]	; (29e80 <k_work_queue_start+0xbc>)
   29dd6:	482b      	ldr	r0, [pc, #172]	; (29e84 <k_work_queue_start+0xc0>)
   29dd8:	f005 faf4 	bl	2f3c4 <assert_print>
   29ddc:	f44f 7132 	mov.w	r1, #712	; 0x2c8
	__ASSERT_NO_MSG(stack);
   29de0:	4827      	ldr	r0, [pc, #156]	; (29e80 <k_work_queue_start+0xbc>)
   29de2:	f005 fae8 	bl	2f3b6 <assert_post_action>
   29de6:	b949      	cbnz	r1, 29dfc <k_work_queue_start+0x38>
   29de8:	4927      	ldr	r1, [pc, #156]	; (29e88 <k_work_queue_start+0xc4>)
   29dea:	f240 23c9 	movw	r3, #713	; 0x2c9
   29dee:	4a24      	ldr	r2, [pc, #144]	; (29e80 <k_work_queue_start+0xbc>)
   29df0:	4824      	ldr	r0, [pc, #144]	; (29e84 <k_work_queue_start+0xc0>)
   29df2:	f005 fae7 	bl	2f3c4 <assert_print>
   29df6:	f240 21c9 	movw	r1, #713	; 0x2c9
   29dfa:	e7f1      	b.n	29de0 <k_work_queue_start+0x1c>
	return (*flagp & BIT(bit)) != 0U;
   29dfc:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   29e00:	f010 0001 	ands.w	r0, r0, #1
   29e04:	d009      	beq.n	29e1a <k_work_queue_start+0x56>
   29e06:	4921      	ldr	r1, [pc, #132]	; (29e8c <k_work_queue_start+0xc8>)
   29e08:	f240 23ca 	movw	r3, #714	; 0x2ca
   29e0c:	4a1c      	ldr	r2, [pc, #112]	; (29e80 <k_work_queue_start+0xbc>)
   29e0e:	481d      	ldr	r0, [pc, #116]	; (29e84 <k_work_queue_start+0xc0>)
   29e10:	f005 fad8 	bl	2f3c4 <assert_print>
   29e14:	f240 21ca 	movw	r1, #714	; 0x2ca
   29e18:	e7e2      	b.n	29de0 <k_work_queue_start+0x1c>
	list->tail = NULL;
   29e1a:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   29e1e:	f104 0090 	add.w	r0, r4, #144	; 0x90
	list->tail = (sys_dnode_t *)list;
   29e22:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90
   29e26:	f104 0098 	add.w	r0, r4, #152	; 0x98
   29e2a:	e9c4 0026 	strd	r0, r0, [r4, #152]	; 0x98
	if ((cfg != NULL) && cfg->no_yield) {
   29e2e:	b31d      	cbz	r5, 29e78 <k_work_queue_start+0xb4>
   29e30:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   29e32:	2800      	cmp	r0, #0
   29e34:	f240 1001 	movw	r0, #257	; 0x101
   29e38:	bf08      	it	eq
   29e3a:	2001      	moveq	r0, #1
	*flagp = flags;
   29e3c:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   29e40:	2000      	movs	r0, #0
   29e42:	f04f 36ff 	mov.w	r6, #4294967295
   29e46:	f04f 37ff 	mov.w	r7, #4294967295
   29e4a:	e9cd 3003 	strd	r3, r0, [sp, #12]
   29e4e:	e9cd 0001 	strd	r0, r0, [sp, #4]
   29e52:	e9cd 6706 	strd	r6, r7, [sp, #24]
   29e56:	4620      	mov	r0, r4
   29e58:	4b0d      	ldr	r3, [pc, #52]	; (29e90 <k_work_queue_start+0xcc>)
   29e5a:	9400      	str	r4, [sp, #0]
   29e5c:	f7ff f8a2 	bl	28fa4 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   29e60:	b125      	cbz	r5, 29e6c <k_work_queue_start+0xa8>
   29e62:	6829      	ldr	r1, [r5, #0]
   29e64:	b111      	cbz	r1, 29e6c <k_work_queue_start+0xa8>
	return z_impl_k_thread_name_set(thread, str);
   29e66:	4620      	mov	r0, r4
   29e68:	f00c f933 	bl	360d2 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   29e6c:	4620      	mov	r0, r4
}
   29e6e:	b009      	add	sp, #36	; 0x24
   29e70:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   29e74:	f00c b932 	b.w	360dc <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   29e78:	2001      	movs	r0, #1
   29e7a:	e7df      	b.n	29e3c <k_work_queue_start+0x78>
   29e7c:	000417f0 	.word	0x000417f0
   29e80:	0004175a 	.word	0x0004175a
   29e84:	00039995 	.word	0x00039995
   29e88:	000417f6 	.word	0x000417f6
   29e8c:	000417fc 	.word	0x000417fc
   29e90:	00029859 	.word	0x00029859

00029e94 <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
   29e94:	b538      	push	{r3, r4, r5, lr}
   29e96:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
   29e98:	4604      	mov	r4, r0
   29e9a:	b958      	cbnz	r0, 29eb4 <k_work_init_delayable+0x20>
   29e9c:	490f      	ldr	r1, [pc, #60]	; (29edc <k_work_init_delayable+0x48>)
   29e9e:	f44f 7350 	mov.w	r3, #832	; 0x340
   29ea2:	4a0f      	ldr	r2, [pc, #60]	; (29ee0 <k_work_init_delayable+0x4c>)
   29ea4:	480f      	ldr	r0, [pc, #60]	; (29ee4 <k_work_init_delayable+0x50>)
   29ea6:	f005 fa8d 	bl	2f3c4 <assert_print>
   29eaa:	f44f 7150 	mov.w	r1, #832	; 0x340
	__ASSERT_NO_MSG(handler != NULL);
   29eae:	480c      	ldr	r0, [pc, #48]	; (29ee0 <k_work_init_delayable+0x4c>)
   29eb0:	f005 fa81 	bl	2f3b6 <assert_post_action>
   29eb4:	b949      	cbnz	r1, 29eca <k_work_init_delayable+0x36>
   29eb6:	490c      	ldr	r1, [pc, #48]	; (29ee8 <k_work_init_delayable+0x54>)
   29eb8:	f240 3341 	movw	r3, #833	; 0x341
   29ebc:	4a08      	ldr	r2, [pc, #32]	; (29ee0 <k_work_init_delayable+0x4c>)
   29ebe:	4809      	ldr	r0, [pc, #36]	; (29ee4 <k_work_init_delayable+0x50>)
   29ec0:	f005 fa80 	bl	2f3c4 <assert_print>
   29ec4:	f240 3141 	movw	r1, #833	; 0x341
   29ec8:	e7f1      	b.n	29eae <k_work_init_delayable+0x1a>

	*dwork = (struct k_work_delayable){
   29eca:	2230      	movs	r2, #48	; 0x30
   29ecc:	2100      	movs	r1, #0
   29ece:	f00c fb4b 	bl	36568 <memset>
   29ed2:	f44f 7380 	mov.w	r3, #256	; 0x100
   29ed6:	6065      	str	r5, [r4, #4]
   29ed8:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
   29eda:	bd38      	pop	{r3, r4, r5, pc}
   29edc:	00041830 	.word	0x00041830
   29ee0:	0004175a 	.word	0x0004175a
   29ee4:	00039995 	.word	0x00039995
   29ee8:	0004177b 	.word	0x0004177b

00029eec <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   29eec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   29eee:	4616      	mov	r6, r2
   29ef0:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   29ef2:	460c      	mov	r4, r1
{
   29ef4:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   29ef6:	b959      	cbnz	r1, 29f10 <k_work_schedule_for_queue+0x24>
   29ef8:	492d      	ldr	r1, [pc, #180]	; (29fb0 <k_work_schedule_for_queue+0xc4>)
   29efa:	482e      	ldr	r0, [pc, #184]	; (29fb4 <k_work_schedule_for_queue+0xc8>)
   29efc:	f240 33ba 	movw	r3, #954	; 0x3ba
   29f00:	4a2d      	ldr	r2, [pc, #180]	; (29fb8 <k_work_schedule_for_queue+0xcc>)
   29f02:	f005 fa5f 	bl	2f3c4 <assert_print>
   29f06:	f240 31ba 	movw	r1, #954	; 0x3ba
   29f0a:	482b      	ldr	r0, [pc, #172]	; (29fb8 <k_work_schedule_for_queue+0xcc>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   29f0c:	f005 fa53 	bl	2f3b6 <assert_post_action>
	__asm__ volatile(
   29f10:	f04f 0320 	mov.w	r3, #32
   29f14:	f3ef 8711 	mrs	r7, BASEPRI
   29f18:	f383 8812 	msr	BASEPRI_MAX, r3
   29f1c:	f3bf 8f6f 	isb	sy
   29f20:	4826      	ldr	r0, [pc, #152]	; (29fbc <k_work_schedule_for_queue+0xd0>)
   29f22:	f7ff f909 	bl	29138 <z_spin_lock_valid>
   29f26:	b960      	cbnz	r0, 29f42 <k_work_schedule_for_queue+0x56>
   29f28:	2394      	movs	r3, #148	; 0x94
   29f2a:	4a25      	ldr	r2, [pc, #148]	; (29fc0 <k_work_schedule_for_queue+0xd4>)
   29f2c:	4925      	ldr	r1, [pc, #148]	; (29fc4 <k_work_schedule_for_queue+0xd8>)
   29f2e:	4821      	ldr	r0, [pc, #132]	; (29fb4 <k_work_schedule_for_queue+0xc8>)
   29f30:	f005 fa48 	bl	2f3c4 <assert_print>
   29f34:	4921      	ldr	r1, [pc, #132]	; (29fbc <k_work_schedule_for_queue+0xd0>)
   29f36:	4824      	ldr	r0, [pc, #144]	; (29fc8 <k_work_schedule_for_queue+0xdc>)
   29f38:	f005 fa44 	bl	2f3c4 <assert_print>
   29f3c:	2194      	movs	r1, #148	; 0x94
   29f3e:	4820      	ldr	r0, [pc, #128]	; (29fc0 <k_work_schedule_for_queue+0xd4>)
   29f40:	e7e4      	b.n	29f0c <k_work_schedule_for_queue+0x20>
	z_spin_lock_set_owner(l);
   29f42:	481e      	ldr	r0, [pc, #120]	; (29fbc <k_work_schedule_for_queue+0xd0>)
   29f44:	f7ff f914 	bl	29170 <z_spin_lock_set_owner>
	return *flagp;
   29f48:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   29f4a:	f013 0f0e 	tst.w	r3, #14
   29f4e:	d125      	bne.n	29f9c <k_work_schedule_for_queue+0xb0>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   29f50:	ea55 0206 	orrs.w	r2, r5, r6
   29f54:	d114      	bne.n	29f80 <k_work_schedule_for_queue+0x94>
		return submit_to_queue_locked(work, queuep);
   29f56:	4620      	mov	r0, r4
   29f58:	a901      	add	r1, sp, #4
   29f5a:	f7ff fd8f 	bl	29a7c <submit_to_queue_locked>
   29f5e:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   29f60:	4816      	ldr	r0, [pc, #88]	; (29fbc <k_work_schedule_for_queue+0xd0>)
   29f62:	f7ff f8f7 	bl	29154 <z_spin_unlock_valid>
   29f66:	b9d8      	cbnz	r0, 29fa0 <k_work_schedule_for_queue+0xb4>
   29f68:	23c2      	movs	r3, #194	; 0xc2
   29f6a:	4a15      	ldr	r2, [pc, #84]	; (29fc0 <k_work_schedule_for_queue+0xd4>)
   29f6c:	4917      	ldr	r1, [pc, #92]	; (29fcc <k_work_schedule_for_queue+0xe0>)
   29f6e:	4811      	ldr	r0, [pc, #68]	; (29fb4 <k_work_schedule_for_queue+0xc8>)
   29f70:	f005 fa28 	bl	2f3c4 <assert_print>
   29f74:	4911      	ldr	r1, [pc, #68]	; (29fbc <k_work_schedule_for_queue+0xd0>)
   29f76:	4816      	ldr	r0, [pc, #88]	; (29fd0 <k_work_schedule_for_queue+0xe4>)
   29f78:	f005 fa24 	bl	2f3c4 <assert_print>
   29f7c:	21c2      	movs	r1, #194	; 0xc2
   29f7e:	e7de      	b.n	29f3e <k_work_schedule_for_queue+0x52>
	*flagp |= BIT(bit);
   29f80:	f043 0308 	orr.w	r3, r3, #8
   29f84:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   29f86:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   29f88:	f104 0010 	add.w	r0, r4, #16
	dwork->queue = *queuep;
   29f8c:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   29f8e:	4632      	mov	r2, r6
   29f90:	462b      	mov	r3, r5
   29f92:	4910      	ldr	r1, [pc, #64]	; (29fd4 <k_work_schedule_for_queue+0xe8>)
   29f94:	f001 fbac 	bl	2b6f0 <z_add_timeout>
	return ret;
   29f98:	2401      	movs	r4, #1
   29f9a:	e7e1      	b.n	29f60 <k_work_schedule_for_queue+0x74>
	int ret = 0;
   29f9c:	2400      	movs	r4, #0
   29f9e:	e7df      	b.n	29f60 <k_work_schedule_for_queue+0x74>
	__asm__ volatile(
   29fa0:	f387 8811 	msr	BASEPRI, r7
   29fa4:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   29fa8:	4620      	mov	r0, r4
   29faa:	b003      	add	sp, #12
   29fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29fae:	bf00      	nop
   29fb0:	00041830 	.word	0x00041830
   29fb4:	00039995 	.word	0x00039995
   29fb8:	0004175a 	.word	0x0004175a
   29fbc:	2000ef20 	.word	0x2000ef20
   29fc0:	00039e53 	.word	0x00039e53
   29fc4:	00039eac 	.word	0x00039eac
   29fc8:	00039ec1 	.word	0x00039ec1
   29fcc:	00039e80 	.word	0x00039e80
   29fd0:	00039e97 	.word	0x00039e97
   29fd4:	00029b55 	.word	0x00029b55

00029fd8 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   29fd8:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   29fda:	4801      	ldr	r0, [pc, #4]	; (29fe0 <k_work_schedule+0x8>)
   29fdc:	f7ff bf86 	b.w	29eec <k_work_schedule_for_queue>
   29fe0:	2000e108 	.word	0x2000e108

00029fe4 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   29fe4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   29fe6:	4616      	mov	r6, r2
   29fe8:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   29fea:	460c      	mov	r4, r1
{
   29fec:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   29fee:	b959      	cbnz	r1, 2a008 <k_work_reschedule_for_queue+0x24>
   29ff0:	492c      	ldr	r1, [pc, #176]	; (2a0a4 <k_work_reschedule_for_queue+0xc0>)
   29ff2:	482d      	ldr	r0, [pc, #180]	; (2a0a8 <k_work_reschedule_for_queue+0xc4>)
   29ff4:	f240 33de 	movw	r3, #990	; 0x3de
   29ff8:	4a2c      	ldr	r2, [pc, #176]	; (2a0ac <k_work_reschedule_for_queue+0xc8>)
   29ffa:	f005 f9e3 	bl	2f3c4 <assert_print>
   29ffe:	f240 31de 	movw	r1, #990	; 0x3de
   2a002:	482a      	ldr	r0, [pc, #168]	; (2a0ac <k_work_reschedule_for_queue+0xc8>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a004:	f005 f9d7 	bl	2f3b6 <assert_post_action>
	__asm__ volatile(
   2a008:	f04f 0320 	mov.w	r3, #32
   2a00c:	f3ef 8711 	mrs	r7, BASEPRI
   2a010:	f383 8812 	msr	BASEPRI_MAX, r3
   2a014:	f3bf 8f6f 	isb	sy
   2a018:	4825      	ldr	r0, [pc, #148]	; (2a0b0 <k_work_reschedule_for_queue+0xcc>)
   2a01a:	f7ff f88d 	bl	29138 <z_spin_lock_valid>
   2a01e:	b960      	cbnz	r0, 2a03a <k_work_reschedule_for_queue+0x56>
   2a020:	2394      	movs	r3, #148	; 0x94
   2a022:	4a24      	ldr	r2, [pc, #144]	; (2a0b4 <k_work_reschedule_for_queue+0xd0>)
   2a024:	4924      	ldr	r1, [pc, #144]	; (2a0b8 <k_work_reschedule_for_queue+0xd4>)
   2a026:	4820      	ldr	r0, [pc, #128]	; (2a0a8 <k_work_reschedule_for_queue+0xc4>)
   2a028:	f005 f9cc 	bl	2f3c4 <assert_print>
   2a02c:	4920      	ldr	r1, [pc, #128]	; (2a0b0 <k_work_reschedule_for_queue+0xcc>)
   2a02e:	4823      	ldr	r0, [pc, #140]	; (2a0bc <k_work_reschedule_for_queue+0xd8>)
   2a030:	f005 f9c8 	bl	2f3c4 <assert_print>
   2a034:	2194      	movs	r1, #148	; 0x94
   2a036:	481f      	ldr	r0, [pc, #124]	; (2a0b4 <k_work_reschedule_for_queue+0xd0>)
   2a038:	e7e4      	b.n	2a004 <k_work_reschedule_for_queue+0x20>
	z_spin_lock_set_owner(l);
   2a03a:	481d      	ldr	r0, [pc, #116]	; (2a0b0 <k_work_reschedule_for_queue+0xcc>)
   2a03c:	f7ff f898 	bl	29170 <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   2a040:	4620      	mov	r0, r4
   2a042:	f00c f8b0 	bl	361a6 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2a046:	ea55 0306 	orrs.w	r3, r5, r6
   2a04a:	d114      	bne.n	2a076 <k_work_reschedule_for_queue+0x92>
		return submit_to_queue_locked(work, queuep);
   2a04c:	4620      	mov	r0, r4
   2a04e:	a901      	add	r1, sp, #4
   2a050:	f7ff fd14 	bl	29a7c <submit_to_queue_locked>
   2a054:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a056:	4816      	ldr	r0, [pc, #88]	; (2a0b0 <k_work_reschedule_for_queue+0xcc>)
   2a058:	f7ff f87c 	bl	29154 <z_spin_unlock_valid>
   2a05c:	b9d0      	cbnz	r0, 2a094 <k_work_reschedule_for_queue+0xb0>
   2a05e:	23c2      	movs	r3, #194	; 0xc2
   2a060:	4a14      	ldr	r2, [pc, #80]	; (2a0b4 <k_work_reschedule_for_queue+0xd0>)
   2a062:	4917      	ldr	r1, [pc, #92]	; (2a0c0 <k_work_reschedule_for_queue+0xdc>)
   2a064:	4810      	ldr	r0, [pc, #64]	; (2a0a8 <k_work_reschedule_for_queue+0xc4>)
   2a066:	f005 f9ad 	bl	2f3c4 <assert_print>
   2a06a:	4911      	ldr	r1, [pc, #68]	; (2a0b0 <k_work_reschedule_for_queue+0xcc>)
   2a06c:	4815      	ldr	r0, [pc, #84]	; (2a0c4 <k_work_reschedule_for_queue+0xe0>)
   2a06e:	f005 f9a9 	bl	2f3c4 <assert_print>
   2a072:	21c2      	movs	r1, #194	; 0xc2
   2a074:	e7df      	b.n	2a036 <k_work_reschedule_for_queue+0x52>
	*flagp |= BIT(bit);
   2a076:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   2a078:	f104 0010 	add.w	r0, r4, #16
	*flagp |= BIT(bit);
   2a07c:	f043 0308 	orr.w	r3, r3, #8
   2a080:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   2a082:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   2a084:	4632      	mov	r2, r6
	dwork->queue = *queuep;
   2a086:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   2a088:	490f      	ldr	r1, [pc, #60]	; (2a0c8 <k_work_reschedule_for_queue+0xe4>)
   2a08a:	462b      	mov	r3, r5
   2a08c:	f001 fb30 	bl	2b6f0 <z_add_timeout>
	return ret;
   2a090:	2401      	movs	r4, #1
   2a092:	e7e0      	b.n	2a056 <k_work_reschedule_for_queue+0x72>
	__asm__ volatile(
   2a094:	f387 8811 	msr	BASEPRI, r7
   2a098:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   2a09c:	4620      	mov	r0, r4
   2a09e:	b003      	add	sp, #12
   2a0a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a0a2:	bf00      	nop
   2a0a4:	00041830 	.word	0x00041830
   2a0a8:	00039995 	.word	0x00039995
   2a0ac:	0004175a 	.word	0x0004175a
   2a0b0:	2000ef20 	.word	0x2000ef20
   2a0b4:	00039e53 	.word	0x00039e53
   2a0b8:	00039eac 	.word	0x00039eac
   2a0bc:	00039ec1 	.word	0x00039ec1
   2a0c0:	00039e80 	.word	0x00039e80
   2a0c4:	00039e97 	.word	0x00039e97
   2a0c8:	00029b55 	.word	0x00029b55

0002a0cc <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   2a0cc:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   2a0ce:	4801      	ldr	r0, [pc, #4]	; (2a0d4 <k_work_reschedule+0x8>)
   2a0d0:	f7ff bf88 	b.w	29fe4 <k_work_reschedule_for_queue>
   2a0d4:	2000e108 	.word	0x2000e108

0002a0d8 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   2a0d8:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   2a0da:	4604      	mov	r4, r0
   2a0dc:	b958      	cbnz	r0, 2a0f6 <k_work_cancel_delayable+0x1e>
   2a0de:	4922      	ldr	r1, [pc, #136]	; (2a168 <k_work_cancel_delayable+0x90>)
   2a0e0:	4822      	ldr	r0, [pc, #136]	; (2a16c <k_work_cancel_delayable+0x94>)
   2a0e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2a0e6:	4a22      	ldr	r2, [pc, #136]	; (2a170 <k_work_cancel_delayable+0x98>)
   2a0e8:	f005 f96c 	bl	2f3c4 <assert_print>
   2a0ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
   2a0f0:	481f      	ldr	r0, [pc, #124]	; (2a170 <k_work_cancel_delayable+0x98>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a0f2:	f005 f960 	bl	2f3b6 <assert_post_action>
	__asm__ volatile(
   2a0f6:	f04f 0320 	mov.w	r3, #32
   2a0fa:	f3ef 8511 	mrs	r5, BASEPRI
   2a0fe:	f383 8812 	msr	BASEPRI_MAX, r3
   2a102:	f3bf 8f6f 	isb	sy
   2a106:	481b      	ldr	r0, [pc, #108]	; (2a174 <k_work_cancel_delayable+0x9c>)
   2a108:	f7ff f816 	bl	29138 <z_spin_lock_valid>
   2a10c:	b960      	cbnz	r0, 2a128 <k_work_cancel_delayable+0x50>
   2a10e:	2394      	movs	r3, #148	; 0x94
   2a110:	4a19      	ldr	r2, [pc, #100]	; (2a178 <k_work_cancel_delayable+0xa0>)
   2a112:	491a      	ldr	r1, [pc, #104]	; (2a17c <k_work_cancel_delayable+0xa4>)
   2a114:	4815      	ldr	r0, [pc, #84]	; (2a16c <k_work_cancel_delayable+0x94>)
   2a116:	f005 f955 	bl	2f3c4 <assert_print>
   2a11a:	4916      	ldr	r1, [pc, #88]	; (2a174 <k_work_cancel_delayable+0x9c>)
   2a11c:	4818      	ldr	r0, [pc, #96]	; (2a180 <k_work_cancel_delayable+0xa8>)
   2a11e:	f005 f951 	bl	2f3c4 <assert_print>
   2a122:	2194      	movs	r1, #148	; 0x94
   2a124:	4814      	ldr	r0, [pc, #80]	; (2a178 <k_work_cancel_delayable+0xa0>)
   2a126:	e7e4      	b.n	2a0f2 <k_work_cancel_delayable+0x1a>
	z_spin_lock_set_owner(l);
   2a128:	4812      	ldr	r0, [pc, #72]	; (2a174 <k_work_cancel_delayable+0x9c>)
   2a12a:	f7ff f821 	bl	29170 <z_spin_lock_set_owner>
	(void)unschedule_locked(dwork);
   2a12e:	4620      	mov	r0, r4
   2a130:	f00c f839 	bl	361a6 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2a134:	4620      	mov	r0, r4
   2a136:	f00c f84c 	bl	361d2 <cancel_async_locked>
   2a13a:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a13c:	480d      	ldr	r0, [pc, #52]	; (2a174 <k_work_cancel_delayable+0x9c>)
   2a13e:	f7ff f809 	bl	29154 <z_spin_unlock_valid>
   2a142:	b958      	cbnz	r0, 2a15c <k_work_cancel_delayable+0x84>
   2a144:	23c2      	movs	r3, #194	; 0xc2
   2a146:	4a0c      	ldr	r2, [pc, #48]	; (2a178 <k_work_cancel_delayable+0xa0>)
   2a148:	490e      	ldr	r1, [pc, #56]	; (2a184 <k_work_cancel_delayable+0xac>)
   2a14a:	4808      	ldr	r0, [pc, #32]	; (2a16c <k_work_cancel_delayable+0x94>)
   2a14c:	f005 f93a 	bl	2f3c4 <assert_print>
   2a150:	4908      	ldr	r1, [pc, #32]	; (2a174 <k_work_cancel_delayable+0x9c>)
   2a152:	480d      	ldr	r0, [pc, #52]	; (2a188 <k_work_cancel_delayable+0xb0>)
   2a154:	f005 f936 	bl	2f3c4 <assert_print>
   2a158:	21c2      	movs	r1, #194	; 0xc2
   2a15a:	e7e3      	b.n	2a124 <k_work_cancel_delayable+0x4c>
	__asm__ volatile(
   2a15c:	f385 8811 	msr	BASEPRI, r5
   2a160:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   2a164:	4620      	mov	r0, r4
   2a166:	bd38      	pop	{r3, r4, r5, pc}
   2a168:	00041830 	.word	0x00041830
   2a16c:	00039995 	.word	0x00039995
   2a170:	0004175a 	.word	0x0004175a
   2a174:	2000ef20 	.word	0x2000ef20
   2a178:	00039e53 	.word	0x00039e53
   2a17c:	00039eac 	.word	0x00039eac
   2a180:	00039ec1 	.word	0x00039ec1
   2a184:	00039e80 	.word	0x00039e80
   2a188:	00039e97 	.word	0x00039e97

0002a18c <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   2a18c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a190:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(dwork != NULL);
   2a192:	4605      	mov	r5, r0
   2a194:	b958      	cbnz	r0, 2a1ae <k_work_cancel_delayable_sync+0x22>
   2a196:	493a      	ldr	r1, [pc, #232]	; (2a280 <k_work_cancel_delayable_sync+0xf4>)
   2a198:	f240 4311 	movw	r3, #1041	; 0x411
   2a19c:	4a39      	ldr	r2, [pc, #228]	; (2a284 <k_work_cancel_delayable_sync+0xf8>)
   2a19e:	483a      	ldr	r0, [pc, #232]	; (2a288 <k_work_cancel_delayable_sync+0xfc>)
   2a1a0:	f005 f910 	bl	2f3c4 <assert_print>
   2a1a4:	f240 4111 	movw	r1, #1041	; 0x411
	__ASSERT_NO_MSG(sync != NULL);
   2a1a8:	4836      	ldr	r0, [pc, #216]	; (2a284 <k_work_cancel_delayable_sync+0xf8>)
   2a1aa:	f005 f904 	bl	2f3b6 <assert_post_action>
   2a1ae:	b949      	cbnz	r1, 2a1c4 <k_work_cancel_delayable_sync+0x38>
   2a1b0:	4936      	ldr	r1, [pc, #216]	; (2a28c <k_work_cancel_delayable_sync+0x100>)
   2a1b2:	f240 4312 	movw	r3, #1042	; 0x412
   2a1b6:	4a33      	ldr	r2, [pc, #204]	; (2a284 <k_work_cancel_delayable_sync+0xf8>)
   2a1b8:	4833      	ldr	r0, [pc, #204]	; (2a288 <k_work_cancel_delayable_sync+0xfc>)
   2a1ba:	f005 f903 	bl	2f3c4 <assert_print>
   2a1be:	f240 4112 	movw	r1, #1042	; 0x412
   2a1c2:	e7f1      	b.n	2a1a8 <k_work_cancel_delayable_sync+0x1c>
	__ASSERT_NO_MSG(!k_is_in_isr());
   2a1c4:	f00b ff7f 	bl	360c6 <k_is_in_isr>
   2a1c8:	4604      	mov	r4, r0
   2a1ca:	b148      	cbz	r0, 2a1e0 <k_work_cancel_delayable_sync+0x54>
   2a1cc:	4930      	ldr	r1, [pc, #192]	; (2a290 <k_work_cancel_delayable_sync+0x104>)
   2a1ce:	f240 4313 	movw	r3, #1043	; 0x413
   2a1d2:	4a2c      	ldr	r2, [pc, #176]	; (2a284 <k_work_cancel_delayable_sync+0xf8>)
   2a1d4:	482c      	ldr	r0, [pc, #176]	; (2a288 <k_work_cancel_delayable_sync+0xfc>)
   2a1d6:	f005 f8f5 	bl	2f3c4 <assert_print>
   2a1da:	f240 4113 	movw	r1, #1043	; 0x413
   2a1de:	e7e3      	b.n	2a1a8 <k_work_cancel_delayable_sync+0x1c>
	__asm__ volatile(
   2a1e0:	f04f 0320 	mov.w	r3, #32
   2a1e4:	f3ef 8811 	mrs	r8, BASEPRI
   2a1e8:	f383 8812 	msr	BASEPRI_MAX, r3
   2a1ec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a1f0:	4828      	ldr	r0, [pc, #160]	; (2a294 <k_work_cancel_delayable_sync+0x108>)
   2a1f2:	f7fe ffa1 	bl	29138 <z_spin_lock_valid>
   2a1f6:	b960      	cbnz	r0, 2a212 <k_work_cancel_delayable_sync+0x86>
   2a1f8:	2394      	movs	r3, #148	; 0x94
   2a1fa:	4a27      	ldr	r2, [pc, #156]	; (2a298 <k_work_cancel_delayable_sync+0x10c>)
   2a1fc:	4927      	ldr	r1, [pc, #156]	; (2a29c <k_work_cancel_delayable_sync+0x110>)
   2a1fe:	4822      	ldr	r0, [pc, #136]	; (2a288 <k_work_cancel_delayable_sync+0xfc>)
   2a200:	f005 f8e0 	bl	2f3c4 <assert_print>
   2a204:	4923      	ldr	r1, [pc, #140]	; (2a294 <k_work_cancel_delayable_sync+0x108>)
   2a206:	4826      	ldr	r0, [pc, #152]	; (2a2a0 <k_work_cancel_delayable_sync+0x114>)
   2a208:	f005 f8dc 	bl	2f3c4 <assert_print>
   2a20c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a20e:	4822      	ldr	r0, [pc, #136]	; (2a298 <k_work_cancel_delayable_sync+0x10c>)
   2a210:	e7cb      	b.n	2a1aa <k_work_cancel_delayable_sync+0x1e>
	z_spin_lock_set_owner(l);
   2a212:	4820      	ldr	r0, [pc, #128]	; (2a294 <k_work_cancel_delayable_sync+0x108>)
   2a214:	f7fe ffac 	bl	29170 <z_spin_lock_set_owner>
	return *flagp;
   2a218:	68eb      	ldr	r3, [r5, #12]
   2a21a:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   2a21e:	2b00      	cmp	r3, #0
   2a220:	bf14      	ite	ne
   2a222:	2701      	movne	r7, #1
   2a224:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   2a226:	d00a      	beq.n	2a23e <k_work_cancel_delayable_sync+0xb2>
	(void)unschedule_locked(dwork);
   2a228:	4628      	mov	r0, r5
   2a22a:	f00b ffbc 	bl	361a6 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2a22e:	4628      	mov	r0, r5
   2a230:	f00b ffcf 	bl	361d2 <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   2a234:	4631      	mov	r1, r6
   2a236:	4628      	mov	r0, r5
   2a238:	f7ff fc02 	bl	29a40 <cancel_sync_locked>
   2a23c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a23e:	4815      	ldr	r0, [pc, #84]	; (2a294 <k_work_cancel_delayable_sync+0x108>)
   2a240:	f7fe ff88 	bl	29154 <z_spin_unlock_valid>
   2a244:	b958      	cbnz	r0, 2a25e <k_work_cancel_delayable_sync+0xd2>
   2a246:	23c2      	movs	r3, #194	; 0xc2
   2a248:	4a13      	ldr	r2, [pc, #76]	; (2a298 <k_work_cancel_delayable_sync+0x10c>)
   2a24a:	4916      	ldr	r1, [pc, #88]	; (2a2a4 <k_work_cancel_delayable_sync+0x118>)
   2a24c:	480e      	ldr	r0, [pc, #56]	; (2a288 <k_work_cancel_delayable_sync+0xfc>)
   2a24e:	f005 f8b9 	bl	2f3c4 <assert_print>
   2a252:	4910      	ldr	r1, [pc, #64]	; (2a294 <k_work_cancel_delayable_sync+0x108>)
   2a254:	4814      	ldr	r0, [pc, #80]	; (2a2a8 <k_work_cancel_delayable_sync+0x11c>)
   2a256:	f005 f8b5 	bl	2f3c4 <assert_print>
   2a25a:	21c2      	movs	r1, #194	; 0xc2
   2a25c:	e7d7      	b.n	2a20e <k_work_cancel_delayable_sync+0x82>
	__asm__ volatile(
   2a25e:	f388 8811 	msr	BASEPRI, r8
   2a262:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   2a266:	b13c      	cbz	r4, 2a278 <k_work_cancel_delayable_sync+0xec>
	return z_impl_k_sem_take(sem, timeout);
   2a268:	f04f 32ff 	mov.w	r2, #4294967295
   2a26c:	f04f 33ff 	mov.w	r3, #4294967295
   2a270:	f106 0008 	add.w	r0, r6, #8
   2a274:	f7ff fa5c 	bl	29730 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   2a278:	4638      	mov	r0, r7
   2a27a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a27e:	bf00      	nop
   2a280:	00041830 	.word	0x00041830
   2a284:	0004175a 	.word	0x0004175a
   2a288:	00039995 	.word	0x00039995
   2a28c:	000417dc 	.word	0x000417dc
   2a290:	0003c916 	.word	0x0003c916
   2a294:	2000ef20 	.word	0x2000ef20
   2a298:	00039e53 	.word	0x00039e53
   2a29c:	00039eac 	.word	0x00039eac
   2a2a0:	00039ec1 	.word	0x00039ec1
   2a2a4:	00039e80 	.word	0x00039e80
   2a2a8:	00039e97 	.word	0x00039e97

0002a2ac <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
   2a2ac:	89c3      	ldrh	r3, [r0, #14]
   2a2ae:	2b7f      	cmp	r3, #127	; 0x7f
   2a2b0:	d812      	bhi.n	2a2d8 <sliceable+0x2c>
	int ret = slice_ticks;
   2a2b2:	4b0a      	ldr	r3, [pc, #40]	; (2a2dc <sliceable+0x30>)
   2a2b4:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
   2a2b6:	b163      	cbz	r3, 2a2d2 <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   2a2b8:	4b09      	ldr	r3, [pc, #36]	; (2a2e0 <sliceable+0x34>)
   2a2ba:	f990 200e 	ldrsb.w	r2, [r0, #14]
   2a2be:	681b      	ldr	r3, [r3, #0]
   2a2c0:	429a      	cmp	r2, r3
   2a2c2:	db09      	blt.n	2a2d8 <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
   2a2c4:	7b43      	ldrb	r3, [r0, #13]
   2a2c6:	06db      	lsls	r3, r3, #27
   2a2c8:	d106      	bne.n	2a2d8 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
   2a2ca:	4b06      	ldr	r3, [pc, #24]	; (2a2e4 <sliceable+0x38>)
   2a2cc:	1ac3      	subs	r3, r0, r3
   2a2ce:	bf18      	it	ne
   2a2d0:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
   2a2d2:	f003 0001 	and.w	r0, r3, #1
   2a2d6:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
   2a2d8:	2300      	movs	r3, #0
   2a2da:	e7fa      	b.n	2a2d2 <sliceable+0x26>
   2a2dc:	2000ef2c 	.word	0x2000ef2c
   2a2e0:	2000ef28 	.word	0x2000ef28
   2a2e4:	2000dff8 	.word	0x2000dff8

0002a2e8 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
   2a2e8:	b508      	push	{r3, lr}
	int cpu = ARRAY_INDEX(slice_timeouts, t);
   2a2ea:	b168      	cbz	r0, 2a308 <slice_timeout+0x20>
   2a2ec:	4b10      	ldr	r3, [pc, #64]	; (2a330 <slice_timeout+0x48>)
   2a2ee:	4298      	cmp	r0, r3
   2a2f0:	d30a      	bcc.n	2a308 <slice_timeout+0x20>
   2a2f2:	f103 0218 	add.w	r2, r3, #24
   2a2f6:	4290      	cmp	r0, r2
   2a2f8:	d206      	bcs.n	2a308 <slice_timeout+0x20>
   2a2fa:	2218      	movs	r2, #24
   2a2fc:	1ac0      	subs	r0, r0, r3
   2a2fe:	fbb0 f3f2 	udiv	r3, r0, r2
   2a302:	fb02 0313 	mls	r3, r2, r3, r0
   2a306:	b15b      	cbz	r3, 2a320 <slice_timeout+0x38>
   2a308:	490a      	ldr	r1, [pc, #40]	; (2a334 <slice_timeout+0x4c>)
   2a30a:	480b      	ldr	r0, [pc, #44]	; (2a338 <slice_timeout+0x50>)
   2a30c:	f240 13cb 	movw	r3, #459	; 0x1cb
   2a310:	4a0a      	ldr	r2, [pc, #40]	; (2a33c <slice_timeout+0x54>)
   2a312:	f005 f857 	bl	2f3c4 <assert_print>
   2a316:	f240 11cb 	movw	r1, #459	; 0x1cb
   2a31a:	4808      	ldr	r0, [pc, #32]	; (2a33c <slice_timeout+0x54>)
   2a31c:	f005 f84b 	bl	2f3b6 <assert_post_action>

	slice_expired[cpu] = true;
   2a320:	2201      	movs	r2, #1
	int cpu = ARRAY_INDEX(slice_timeouts, t);
   2a322:	4b07      	ldr	r3, [pc, #28]	; (2a340 <slice_timeout+0x58>)
   2a324:	10c0      	asrs	r0, r0, #3
   2a326:	4358      	muls	r0, r3
	slice_expired[cpu] = true;
   2a328:	4b06      	ldr	r3, [pc, #24]	; (2a344 <slice_timeout+0x5c>)
   2a32a:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
   2a32c:	bd08      	pop	{r3, pc}
   2a32e:	bf00      	nop
   2a330:	2000e1b0 	.word	0x2000e1b0
   2a334:	00041867 	.word	0x00041867
   2a338:	00039995 	.word	0x00039995
   2a33c:	00041845 	.word	0x00041845
   2a340:	aaaaaaab 	.word	0xaaaaaaab
   2a344:	20010783 	.word	0x20010783

0002a348 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
   2a348:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
   2a34a:	4b0e      	ldr	r3, [pc, #56]	; (2a384 <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
   2a34c:	4c0e      	ldr	r4, [pc, #56]	; (2a388 <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
   2a34e:	7c1e      	ldrb	r6, [r3, #16]
{
   2a350:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
   2a352:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   2a356:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
   2a35a:	4620      	mov	r0, r4
   2a35c:	f001 fa88 	bl	2b870 <z_abort_timeout>
	slice_expired[cpu] = false;
   2a360:	2200      	movs	r2, #0
   2a362:	4b0a      	ldr	r3, [pc, #40]	; (2a38c <z_reset_time_slice+0x44>)
	if (sliceable(curr)) {
   2a364:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
   2a366:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
   2a368:	f7ff ffa0 	bl	2a2ac <sliceable>
   2a36c:	b148      	cbz	r0, 2a382 <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
   2a36e:	4b08      	ldr	r3, [pc, #32]	; (2a390 <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   2a370:	4620      	mov	r0, r4
			      K_TICKS(slice_time(curr) - 1));
	}
}
   2a372:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			      K_TICKS(slice_time(curr) - 1));
   2a376:	681a      	ldr	r2, [r3, #0]
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   2a378:	4906      	ldr	r1, [pc, #24]	; (2a394 <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
   2a37a:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   2a37c:	17d3      	asrs	r3, r2, #31
   2a37e:	f001 b9b7 	b.w	2b6f0 <z_add_timeout>
}
   2a382:	bd70      	pop	{r4, r5, r6, pc}
   2a384:	2000eeec 	.word	0x2000eeec
   2a388:	2000e1b0 	.word	0x2000e1b0
   2a38c:	20010783 	.word	0x20010783
   2a390:	2000ef2c 	.word	0x2000ef2c
   2a394:	0002a2e9 	.word	0x0002a2e9

0002a398 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   2a398:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   2a39a:	4d14      	ldr	r5, [pc, #80]	; (2a3ec <update_cache+0x54>)
   2a39c:	462b      	mov	r3, r5
   2a39e:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2a3a2:	429c      	cmp	r4, r3
   2a3a4:	d000      	beq.n	2a3a8 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   2a3a6:	b904      	cbnz	r4, 2a3aa <update_cache+0x12>
   2a3a8:	68ec      	ldr	r4, [r5, #12]
	__ASSERT(_current != NULL, "");
   2a3aa:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   2a3ac:	b9a8      	cbnz	r0, 2a3da <update_cache+0x42>
	__ASSERT(_current != NULL, "");
   2a3ae:	b963      	cbnz	r3, 2a3ca <update_cache+0x32>
   2a3b0:	490f      	ldr	r1, [pc, #60]	; (2a3f0 <update_cache+0x58>)
   2a3b2:	238a      	movs	r3, #138	; 0x8a
   2a3b4:	4a0f      	ldr	r2, [pc, #60]	; (2a3f4 <update_cache+0x5c>)
   2a3b6:	4810      	ldr	r0, [pc, #64]	; (2a3f8 <update_cache+0x60>)
   2a3b8:	f005 f804 	bl	2f3c4 <assert_print>
   2a3bc:	480f      	ldr	r0, [pc, #60]	; (2a3fc <update_cache+0x64>)
   2a3be:	f005 f801 	bl	2f3c4 <assert_print>
   2a3c2:	218a      	movs	r1, #138	; 0x8a
   2a3c4:	480b      	ldr	r0, [pc, #44]	; (2a3f4 <update_cache+0x5c>)
   2a3c6:	f004 fff6 	bl	2f3b6 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   2a3ca:	7b5a      	ldrb	r2, [r3, #13]
   2a3cc:	06d2      	lsls	r2, r2, #27
   2a3ce:	d104      	bne.n	2a3da <update_cache+0x42>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   2a3d0:	69a2      	ldr	r2, [r4, #24]
   2a3d2:	b912      	cbnz	r2, 2a3da <update_cache+0x42>
	if (is_preempt(_current) || is_metairq(thread)) {
   2a3d4:	89da      	ldrh	r2, [r3, #14]
   2a3d6:	2a7f      	cmp	r2, #127	; 0x7f
   2a3d8:	d805      	bhi.n	2a3e6 <update_cache+0x4e>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   2a3da:	429c      	cmp	r4, r3
   2a3dc:	d002      	beq.n	2a3e4 <update_cache+0x4c>
			z_reset_time_slice(thread);
   2a3de:	4620      	mov	r0, r4
   2a3e0:	f7ff ffb2 	bl	2a348 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   2a3e4:	4623      	mov	r3, r4
   2a3e6:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   2a3e8:	bd38      	pop	{r3, r4, r5, pc}
   2a3ea:	bf00      	nop
   2a3ec:	2000eeec 	.word	0x2000eeec
   2a3f0:	00041a00 	.word	0x00041a00
   2a3f4:	00041845 	.word	0x00041845
   2a3f8:	00039995 	.word	0x00039995
   2a3fc:	0003a4e8 	.word	0x0003a4e8

0002a400 <ready_thread>:
#endif
	return false;
}

static void ready_thread(struct k_thread *thread)
{
   2a400:	b570      	push	{r4, r5, r6, lr}
#endif

	/* If thread is queued already, do not try and added it to the
	 * run queue again
	 */
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   2a402:	f990 300d 	ldrsb.w	r3, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   2a406:	7b42      	ldrb	r2, [r0, #13]
   2a408:	2b00      	cmp	r3, #0
   2a40a:	db38      	blt.n	2a47e <ready_thread+0x7e>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2a40c:	06d3      	lsls	r3, r2, #27
   2a40e:	d136      	bne.n	2a47e <ready_thread+0x7e>
	return node->next != NULL;
   2a410:	6983      	ldr	r3, [r0, #24]
   2a412:	2b00      	cmp	r3, #0
   2a414:	d133      	bne.n	2a47e <ready_thread+0x7e>
	thread->base.thread_state |= _THREAD_QUEUED;
   2a416:	f062 027f 	orn	r2, r2, #127	; 0x7f
   2a41a:	7342      	strb	r2, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2a41c:	4a18      	ldr	r2, [pc, #96]	; (2a480 <ready_thread+0x80>)
   2a41e:	4290      	cmp	r0, r2
   2a420:	d109      	bne.n	2a436 <ready_thread+0x36>
   2a422:	4918      	ldr	r1, [pc, #96]	; (2a484 <ready_thread+0x84>)
   2a424:	4818      	ldr	r0, [pc, #96]	; (2a488 <ready_thread+0x88>)
   2a426:	23bc      	movs	r3, #188	; 0xbc
   2a428:	4a18      	ldr	r2, [pc, #96]	; (2a48c <ready_thread+0x8c>)
   2a42a:	f004 ffcb 	bl	2f3c4 <assert_print>
   2a42e:	21bc      	movs	r1, #188	; 0xbc
   2a430:	4816      	ldr	r0, [pc, #88]	; (2a48c <ready_thread+0x8c>)
   2a432:	f004 ffc0 	bl	2f3b6 <assert_post_action>
	return list->head == list;
   2a436:	4916      	ldr	r1, [pc, #88]	; (2a490 <ready_thread+0x90>)
   2a438:	460a      	mov	r2, r1
   2a43a:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2a43e:	4294      	cmp	r4, r2
   2a440:	bf18      	it	ne
   2a442:	4623      	movne	r3, r4
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   2a444:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2a446:	b923      	cbnz	r3, 2a452 <ready_thread+0x52>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   2a448:	e9c0 2400 	strd	r2, r4, [r0]

	tail->next = node;
   2a44c:	6020      	str	r0, [r4, #0]
	list->tail = node;
   2a44e:	6208      	str	r0, [r1, #32]
}
   2a450:	e00c      	b.n	2a46c <ready_thread+0x6c>
	int32_t b1 = thread_1->base.prio;
   2a452:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2a456:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   2a45a:	42b5      	cmp	r5, r6
   2a45c:	d00b      	beq.n	2a476 <ready_thread+0x76>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2a45e:	42ae      	cmp	r6, r5
   2a460:	dd09      	ble.n	2a476 <ready_thread+0x76>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   2a462:	685a      	ldr	r2, [r3, #4]

	node->prev = prev;
	node->next = successor;
   2a464:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   2a468:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   2a46a:	6058      	str	r0, [r3, #4]
		SYS_PORT_TRACING_OBJ_FUNC(k_thread, sched_ready, thread);

		queue_thread(thread);
		update_cache(0);
   2a46c:	2000      	movs	r0, #0
		flag_ipi();
	}
}
   2a46e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   2a472:	f7ff bf91 	b.w	2a398 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   2a476:	42a3      	cmp	r3, r4
   2a478:	d0e6      	beq.n	2a448 <ready_thread+0x48>
   2a47a:	681b      	ldr	r3, [r3, #0]
   2a47c:	e7e3      	b.n	2a446 <ready_thread+0x46>
}
   2a47e:	bd70      	pop	{r4, r5, r6, pc}
   2a480:	2000dff8 	.word	0x2000dff8
   2a484:	00041a27 	.word	0x00041a27
   2a488:	00039995 	.word	0x00039995
   2a48c:	00041845 	.word	0x00041845
   2a490:	2000eeec 	.word	0x2000eeec

0002a494 <z_ready_thread>:

void z_ready_thread(struct k_thread *thread)
{
   2a494:	b538      	push	{r3, r4, r5, lr}
   2a496:	4604      	mov	r4, r0
	__asm__ volatile(
   2a498:	f04f 0320 	mov.w	r3, #32
   2a49c:	f3ef 8511 	mrs	r5, BASEPRI
   2a4a0:	f383 8812 	msr	BASEPRI_MAX, r3
   2a4a4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a4a8:	4816      	ldr	r0, [pc, #88]	; (2a504 <z_ready_thread+0x70>)
   2a4aa:	f7fe fe45 	bl	29138 <z_spin_lock_valid>
   2a4ae:	b968      	cbnz	r0, 2a4cc <z_ready_thread+0x38>
   2a4b0:	2394      	movs	r3, #148	; 0x94
   2a4b2:	4a15      	ldr	r2, [pc, #84]	; (2a508 <z_ready_thread+0x74>)
   2a4b4:	4915      	ldr	r1, [pc, #84]	; (2a50c <z_ready_thread+0x78>)
   2a4b6:	4816      	ldr	r0, [pc, #88]	; (2a510 <z_ready_thread+0x7c>)
   2a4b8:	f004 ff84 	bl	2f3c4 <assert_print>
   2a4bc:	4911      	ldr	r1, [pc, #68]	; (2a504 <z_ready_thread+0x70>)
   2a4be:	4815      	ldr	r0, [pc, #84]	; (2a514 <z_ready_thread+0x80>)
   2a4c0:	f004 ff80 	bl	2f3c4 <assert_print>
   2a4c4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a4c6:	4810      	ldr	r0, [pc, #64]	; (2a508 <z_ready_thread+0x74>)
   2a4c8:	f004 ff75 	bl	2f3b6 <assert_post_action>
	z_spin_lock_set_owner(l);
   2a4cc:	480d      	ldr	r0, [pc, #52]	; (2a504 <z_ready_thread+0x70>)
   2a4ce:	f7fe fe4f 	bl	29170 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		if (!thread_active_elsewhere(thread)) {
			ready_thread(thread);
   2a4d2:	4620      	mov	r0, r4
   2a4d4:	f7ff ff94 	bl	2a400 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a4d8:	480a      	ldr	r0, [pc, #40]	; (2a504 <z_ready_thread+0x70>)
   2a4da:	f7fe fe3b 	bl	29154 <z_spin_unlock_valid>
   2a4de:	b958      	cbnz	r0, 2a4f8 <z_ready_thread+0x64>
   2a4e0:	23c2      	movs	r3, #194	; 0xc2
   2a4e2:	4a09      	ldr	r2, [pc, #36]	; (2a508 <z_ready_thread+0x74>)
   2a4e4:	490c      	ldr	r1, [pc, #48]	; (2a518 <z_ready_thread+0x84>)
   2a4e6:	480a      	ldr	r0, [pc, #40]	; (2a510 <z_ready_thread+0x7c>)
   2a4e8:	f004 ff6c 	bl	2f3c4 <assert_print>
   2a4ec:	4905      	ldr	r1, [pc, #20]	; (2a504 <z_ready_thread+0x70>)
   2a4ee:	480b      	ldr	r0, [pc, #44]	; (2a51c <z_ready_thread+0x88>)
   2a4f0:	f004 ff68 	bl	2f3c4 <assert_print>
   2a4f4:	21c2      	movs	r1, #194	; 0xc2
   2a4f6:	e7e6      	b.n	2a4c6 <z_ready_thread+0x32>
	__asm__ volatile(
   2a4f8:	f385 8811 	msr	BASEPRI, r5
   2a4fc:	f3bf 8f6f 	isb	sy
		}
	}
}
   2a500:	bd38      	pop	{r3, r4, r5, pc}
   2a502:	bf00      	nop
   2a504:	2000ef30 	.word	0x2000ef30
   2a508:	00039e53 	.word	0x00039e53
   2a50c:	00039eac 	.word	0x00039eac
   2a510:	00039995 	.word	0x00039995
   2a514:	00039ec1 	.word	0x00039ec1
   2a518:	00039e80 	.word	0x00039e80
   2a51c:	00039e97 	.word	0x00039e97

0002a520 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   2a520:	b538      	push	{r3, r4, r5, lr}
   2a522:	4604      	mov	r4, r0
	__asm__ volatile(
   2a524:	f04f 0320 	mov.w	r3, #32
   2a528:	f3ef 8511 	mrs	r5, BASEPRI
   2a52c:	f383 8812 	msr	BASEPRI_MAX, r3
   2a530:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a534:	4817      	ldr	r0, [pc, #92]	; (2a594 <z_unpend_thread_no_timeout+0x74>)
   2a536:	f7fe fdff 	bl	29138 <z_spin_lock_valid>
   2a53a:	b968      	cbnz	r0, 2a558 <z_unpend_thread_no_timeout+0x38>
   2a53c:	2394      	movs	r3, #148	; 0x94
   2a53e:	4a16      	ldr	r2, [pc, #88]	; (2a598 <z_unpend_thread_no_timeout+0x78>)
   2a540:	4916      	ldr	r1, [pc, #88]	; (2a59c <z_unpend_thread_no_timeout+0x7c>)
   2a542:	4817      	ldr	r0, [pc, #92]	; (2a5a0 <z_unpend_thread_no_timeout+0x80>)
   2a544:	f004 ff3e 	bl	2f3c4 <assert_print>
   2a548:	4912      	ldr	r1, [pc, #72]	; (2a594 <z_unpend_thread_no_timeout+0x74>)
   2a54a:	4816      	ldr	r0, [pc, #88]	; (2a5a4 <z_unpend_thread_no_timeout+0x84>)
   2a54c:	f004 ff3a 	bl	2f3c4 <assert_print>
   2a550:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a552:	4811      	ldr	r0, [pc, #68]	; (2a598 <z_unpend_thread_no_timeout+0x78>)
   2a554:	f004 ff2f 	bl	2f3b6 <assert_post_action>
	z_spin_lock_set_owner(l);
   2a558:	480e      	ldr	r0, [pc, #56]	; (2a594 <z_unpend_thread_no_timeout+0x74>)
   2a55a:	f7fe fe09 	bl	29170 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		if (thread->base.pended_on != NULL) {
   2a55e:	68a3      	ldr	r3, [r4, #8]
   2a560:	b113      	cbz	r3, 2a568 <z_unpend_thread_no_timeout+0x48>
			unpend_thread_no_timeout(thread);
   2a562:	4620      	mov	r0, r4
   2a564:	f000 fc50 	bl	2ae08 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a568:	480a      	ldr	r0, [pc, #40]	; (2a594 <z_unpend_thread_no_timeout+0x74>)
   2a56a:	f7fe fdf3 	bl	29154 <z_spin_unlock_valid>
   2a56e:	b958      	cbnz	r0, 2a588 <z_unpend_thread_no_timeout+0x68>
   2a570:	23c2      	movs	r3, #194	; 0xc2
   2a572:	4a09      	ldr	r2, [pc, #36]	; (2a598 <z_unpend_thread_no_timeout+0x78>)
   2a574:	490c      	ldr	r1, [pc, #48]	; (2a5a8 <z_unpend_thread_no_timeout+0x88>)
   2a576:	480a      	ldr	r0, [pc, #40]	; (2a5a0 <z_unpend_thread_no_timeout+0x80>)
   2a578:	f004 ff24 	bl	2f3c4 <assert_print>
   2a57c:	4905      	ldr	r1, [pc, #20]	; (2a594 <z_unpend_thread_no_timeout+0x74>)
   2a57e:	480b      	ldr	r0, [pc, #44]	; (2a5ac <z_unpend_thread_no_timeout+0x8c>)
   2a580:	f004 ff20 	bl	2f3c4 <assert_print>
   2a584:	21c2      	movs	r1, #194	; 0xc2
   2a586:	e7e4      	b.n	2a552 <z_unpend_thread_no_timeout+0x32>
	__asm__ volatile(
   2a588:	f385 8811 	msr	BASEPRI, r5
   2a58c:	f3bf 8f6f 	isb	sy
		}
	}
}
   2a590:	bd38      	pop	{r3, r4, r5, pc}
   2a592:	bf00      	nop
   2a594:	2000ef30 	.word	0x2000ef30
   2a598:	00039e53 	.word	0x00039e53
   2a59c:	00039eac 	.word	0x00039eac
   2a5a0:	00039995 	.word	0x00039995
   2a5a4:	00039ec1 	.word	0x00039ec1
   2a5a8:	00039e80 	.word	0x00039e80
   2a5ac:	00039e97 	.word	0x00039e97

0002a5b0 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   2a5b0:	b570      	push	{r4, r5, r6, lr}
   2a5b2:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2a5b4:	460d      	mov	r5, r1
   2a5b6:	b9e9      	cbnz	r1, 2a5f4 <z_reschedule+0x44>
   2a5b8:	f3ef 8605 	mrs	r6, IPSR
   2a5bc:	b9d6      	cbnz	r6, 2a5f4 <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
   2a5be:	4b18      	ldr	r3, [pc, #96]	; (2a620 <z_reschedule+0x70>)
	if (resched(key.key) && need_swap()) {
   2a5c0:	699a      	ldr	r2, [r3, #24]
   2a5c2:	689b      	ldr	r3, [r3, #8]
   2a5c4:	429a      	cmp	r2, r3
   2a5c6:	d015      	beq.n	2a5f4 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a5c8:	f7fe fdc4 	bl	29154 <z_spin_unlock_valid>
   2a5cc:	b968      	cbnz	r0, 2a5ea <z_reschedule+0x3a>
   2a5ce:	23e1      	movs	r3, #225	; 0xe1
   2a5d0:	4a14      	ldr	r2, [pc, #80]	; (2a624 <z_reschedule+0x74>)
   2a5d2:	4915      	ldr	r1, [pc, #84]	; (2a628 <z_reschedule+0x78>)
   2a5d4:	4815      	ldr	r0, [pc, #84]	; (2a62c <z_reschedule+0x7c>)
   2a5d6:	f004 fef5 	bl	2f3c4 <assert_print>
   2a5da:	4621      	mov	r1, r4
   2a5dc:	4814      	ldr	r0, [pc, #80]	; (2a630 <z_reschedule+0x80>)
   2a5de:	f004 fef1 	bl	2f3c4 <assert_print>
   2a5e2:	21e1      	movs	r1, #225	; 0xe1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a5e4:	480f      	ldr	r0, [pc, #60]	; (2a624 <z_reschedule+0x74>)
   2a5e6:	f004 fee6 	bl	2f3b6 <assert_post_action>
	ret = arch_swap(key);
   2a5ea:	4630      	mov	r0, r6
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   2a5ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2a5f0:	f7e8 b828 	b.w	12644 <arch_swap>
   2a5f4:	4620      	mov	r0, r4
   2a5f6:	f7fe fdad 	bl	29154 <z_spin_unlock_valid>
   2a5fa:	b958      	cbnz	r0, 2a614 <z_reschedule+0x64>
   2a5fc:	23c2      	movs	r3, #194	; 0xc2
   2a5fe:	4a09      	ldr	r2, [pc, #36]	; (2a624 <z_reschedule+0x74>)
   2a600:	4909      	ldr	r1, [pc, #36]	; (2a628 <z_reschedule+0x78>)
   2a602:	480a      	ldr	r0, [pc, #40]	; (2a62c <z_reschedule+0x7c>)
   2a604:	f004 fede 	bl	2f3c4 <assert_print>
   2a608:	4621      	mov	r1, r4
   2a60a:	4809      	ldr	r0, [pc, #36]	; (2a630 <z_reschedule+0x80>)
   2a60c:	f004 feda 	bl	2f3c4 <assert_print>
   2a610:	21c2      	movs	r1, #194	; 0xc2
   2a612:	e7e7      	b.n	2a5e4 <z_reschedule+0x34>
   2a614:	f385 8811 	msr	BASEPRI, r5
   2a618:	f3bf 8f6f 	isb	sy
   2a61c:	bd70      	pop	{r4, r5, r6, pc}
   2a61e:	bf00      	nop
   2a620:	2000eeec 	.word	0x2000eeec
   2a624:	00039e53 	.word	0x00039e53
   2a628:	00039e80 	.word	0x00039e80
   2a62c:	00039995 	.word	0x00039995
   2a630:	00039e97 	.word	0x00039e97

0002a634 <z_sched_start>:
{
   2a634:	b538      	push	{r3, r4, r5, lr}
   2a636:	4604      	mov	r4, r0
	__asm__ volatile(
   2a638:	f04f 0320 	mov.w	r3, #32
   2a63c:	f3ef 8511 	mrs	r5, BASEPRI
   2a640:	f383 8812 	msr	BASEPRI_MAX, r3
   2a644:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a648:	481c      	ldr	r0, [pc, #112]	; (2a6bc <z_sched_start+0x88>)
   2a64a:	f7fe fd75 	bl	29138 <z_spin_lock_valid>
   2a64e:	b968      	cbnz	r0, 2a66c <z_sched_start+0x38>
   2a650:	2394      	movs	r3, #148	; 0x94
   2a652:	4a1b      	ldr	r2, [pc, #108]	; (2a6c0 <z_sched_start+0x8c>)
   2a654:	491b      	ldr	r1, [pc, #108]	; (2a6c4 <z_sched_start+0x90>)
   2a656:	481c      	ldr	r0, [pc, #112]	; (2a6c8 <z_sched_start+0x94>)
   2a658:	f004 feb4 	bl	2f3c4 <assert_print>
   2a65c:	4917      	ldr	r1, [pc, #92]	; (2a6bc <z_sched_start+0x88>)
   2a65e:	481b      	ldr	r0, [pc, #108]	; (2a6cc <z_sched_start+0x98>)
   2a660:	f004 feb0 	bl	2f3c4 <assert_print>
   2a664:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a666:	4816      	ldr	r0, [pc, #88]	; (2a6c0 <z_sched_start+0x8c>)
   2a668:	f004 fea5 	bl	2f3b6 <assert_post_action>
	z_spin_lock_set_owner(l);
   2a66c:	4813      	ldr	r0, [pc, #76]	; (2a6bc <z_sched_start+0x88>)
   2a66e:	f7fe fd7f 	bl	29170 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   2a672:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   2a674:	075a      	lsls	r2, r3, #29
   2a676:	d414      	bmi.n	2a6a2 <z_sched_start+0x6e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a678:	4810      	ldr	r0, [pc, #64]	; (2a6bc <z_sched_start+0x88>)
   2a67a:	f7fe fd6b 	bl	29154 <z_spin_unlock_valid>
   2a67e:	b958      	cbnz	r0, 2a698 <z_sched_start+0x64>
   2a680:	23c2      	movs	r3, #194	; 0xc2
   2a682:	4a0f      	ldr	r2, [pc, #60]	; (2a6c0 <z_sched_start+0x8c>)
   2a684:	4912      	ldr	r1, [pc, #72]	; (2a6d0 <z_sched_start+0x9c>)
   2a686:	4810      	ldr	r0, [pc, #64]	; (2a6c8 <z_sched_start+0x94>)
   2a688:	f004 fe9c 	bl	2f3c4 <assert_print>
   2a68c:	490b      	ldr	r1, [pc, #44]	; (2a6bc <z_sched_start+0x88>)
   2a68e:	4811      	ldr	r0, [pc, #68]	; (2a6d4 <z_sched_start+0xa0>)
   2a690:	f004 fe98 	bl	2f3c4 <assert_print>
   2a694:	21c2      	movs	r1, #194	; 0xc2
   2a696:	e7e6      	b.n	2a666 <z_sched_start+0x32>
	__asm__ volatile(
   2a698:	f385 8811 	msr	BASEPRI, r5
   2a69c:	f3bf 8f6f 	isb	sy
}
   2a6a0:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2a6a2:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   2a6a6:	4620      	mov	r0, r4
   2a6a8:	7363      	strb	r3, [r4, #13]
   2a6aa:	f7ff fea9 	bl	2a400 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   2a6ae:	4629      	mov	r1, r5
}
   2a6b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   2a6b4:	4801      	ldr	r0, [pc, #4]	; (2a6bc <z_sched_start+0x88>)
   2a6b6:	f7ff bf7b 	b.w	2a5b0 <z_reschedule>
   2a6ba:	bf00      	nop
   2a6bc:	2000ef30 	.word	0x2000ef30
   2a6c0:	00039e53 	.word	0x00039e53
   2a6c4:	00039eac 	.word	0x00039eac
   2a6c8:	00039995 	.word	0x00039995
   2a6cc:	00039ec1 	.word	0x00039ec1
   2a6d0:	00039e80 	.word	0x00039e80
   2a6d4:	00039e97 	.word	0x00039e97

0002a6d8 <k_sched_lock>:
		signal_pending_ipi();
	}
}

void k_sched_lock(void)
{
   2a6d8:	b510      	push	{r4, lr}
	__asm__ volatile(
   2a6da:	f04f 0320 	mov.w	r3, #32
   2a6de:	f3ef 8411 	mrs	r4, BASEPRI
   2a6e2:	f383 8812 	msr	BASEPRI_MAX, r3
   2a6e6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a6ea:	4825      	ldr	r0, [pc, #148]	; (2a780 <k_sched_lock+0xa8>)
   2a6ec:	f7fe fd24 	bl	29138 <z_spin_lock_valid>
   2a6f0:	b960      	cbnz	r0, 2a70c <k_sched_lock+0x34>
   2a6f2:	2394      	movs	r3, #148	; 0x94
   2a6f4:	4a23      	ldr	r2, [pc, #140]	; (2a784 <k_sched_lock+0xac>)
   2a6f6:	4924      	ldr	r1, [pc, #144]	; (2a788 <k_sched_lock+0xb0>)
   2a6f8:	4824      	ldr	r0, [pc, #144]	; (2a78c <k_sched_lock+0xb4>)
   2a6fa:	f004 fe63 	bl	2f3c4 <assert_print>
   2a6fe:	4920      	ldr	r1, [pc, #128]	; (2a780 <k_sched_lock+0xa8>)
   2a700:	4823      	ldr	r0, [pc, #140]	; (2a790 <k_sched_lock+0xb8>)
   2a702:	f004 fe5f 	bl	2f3c4 <assert_print>
   2a706:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a708:	481e      	ldr	r0, [pc, #120]	; (2a784 <k_sched_lock+0xac>)
   2a70a:	e010      	b.n	2a72e <k_sched_lock+0x56>
	z_spin_lock_set_owner(l);
   2a70c:	481c      	ldr	r0, [pc, #112]	; (2a780 <k_sched_lock+0xa8>)
   2a70e:	f7fe fd2f 	bl	29170 <z_spin_lock_set_owner>
   2a712:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   2a716:	b163      	cbz	r3, 2a732 <k_sched_lock+0x5a>
   2a718:	491e      	ldr	r1, [pc, #120]	; (2a794 <k_sched_lock+0xbc>)
   2a71a:	23fd      	movs	r3, #253	; 0xfd
   2a71c:	4a1e      	ldr	r2, [pc, #120]	; (2a798 <k_sched_lock+0xc0>)
   2a71e:	481b      	ldr	r0, [pc, #108]	; (2a78c <k_sched_lock+0xb4>)
   2a720:	f004 fe50 	bl	2f3c4 <assert_print>
   2a724:	481d      	ldr	r0, [pc, #116]	; (2a79c <k_sched_lock+0xc4>)
   2a726:	f004 fe4d 	bl	2f3c4 <assert_print>
   2a72a:	21fd      	movs	r1, #253	; 0xfd
   2a72c:	481a      	ldr	r0, [pc, #104]	; (2a798 <k_sched_lock+0xc0>)
   2a72e:	f004 fe42 	bl	2f3b6 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   2a732:	4b1b      	ldr	r3, [pc, #108]	; (2a7a0 <k_sched_lock+0xc8>)
   2a734:	689a      	ldr	r2, [r3, #8]
   2a736:	7bd3      	ldrb	r3, [r2, #15]
   2a738:	2b01      	cmp	r3, #1
   2a73a:	d10a      	bne.n	2a752 <k_sched_lock+0x7a>
   2a73c:	4919      	ldr	r1, [pc, #100]	; (2a7a4 <k_sched_lock+0xcc>)
   2a73e:	23fe      	movs	r3, #254	; 0xfe
   2a740:	4a15      	ldr	r2, [pc, #84]	; (2a798 <k_sched_lock+0xc0>)
   2a742:	4812      	ldr	r0, [pc, #72]	; (2a78c <k_sched_lock+0xb4>)
   2a744:	f004 fe3e 	bl	2f3c4 <assert_print>
   2a748:	4814      	ldr	r0, [pc, #80]	; (2a79c <k_sched_lock+0xc4>)
   2a74a:	f004 fe3b 	bl	2f3c4 <assert_print>
   2a74e:	21fe      	movs	r1, #254	; 0xfe
   2a750:	e7ec      	b.n	2a72c <k_sched_lock+0x54>
	--_current->base.sched_locked;
   2a752:	3b01      	subs	r3, #1
   2a754:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a756:	480a      	ldr	r0, [pc, #40]	; (2a780 <k_sched_lock+0xa8>)
   2a758:	f7fe fcfc 	bl	29154 <z_spin_unlock_valid>
   2a75c:	b958      	cbnz	r0, 2a776 <k_sched_lock+0x9e>
   2a75e:	23c2      	movs	r3, #194	; 0xc2
   2a760:	4a08      	ldr	r2, [pc, #32]	; (2a784 <k_sched_lock+0xac>)
   2a762:	4911      	ldr	r1, [pc, #68]	; (2a7a8 <k_sched_lock+0xd0>)
   2a764:	4809      	ldr	r0, [pc, #36]	; (2a78c <k_sched_lock+0xb4>)
   2a766:	f004 fe2d 	bl	2f3c4 <assert_print>
   2a76a:	4905      	ldr	r1, [pc, #20]	; (2a780 <k_sched_lock+0xa8>)
   2a76c:	480f      	ldr	r0, [pc, #60]	; (2a7ac <k_sched_lock+0xd4>)
   2a76e:	f004 fe29 	bl	2f3c4 <assert_print>
   2a772:	21c2      	movs	r1, #194	; 0xc2
   2a774:	e7c8      	b.n	2a708 <k_sched_lock+0x30>
	__asm__ volatile(
   2a776:	f384 8811 	msr	BASEPRI, r4
   2a77a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   2a77e:	bd10      	pop	{r4, pc}
   2a780:	2000ef30 	.word	0x2000ef30
   2a784:	00039e53 	.word	0x00039e53
   2a788:	00039eac 	.word	0x00039eac
   2a78c:	00039995 	.word	0x00039995
   2a790:	00039ec1 	.word	0x00039ec1
   2a794:	000415d8 	.word	0x000415d8
   2a798:	00041a48 	.word	0x00041a48
   2a79c:	0003a4e8 	.word	0x0003a4e8
   2a7a0:	2000eeec 	.word	0x2000eeec
   2a7a4:	00041a73 	.word	0x00041a73
   2a7a8:	00039e80 	.word	0x00039e80
   2a7ac:	00039e97 	.word	0x00039e97

0002a7b0 <k_sched_unlock>:

void k_sched_unlock(void)
{
   2a7b0:	b510      	push	{r4, lr}
	__asm__ volatile(
   2a7b2:	f04f 0320 	mov.w	r3, #32
   2a7b6:	f3ef 8411 	mrs	r4, BASEPRI
   2a7ba:	f383 8812 	msr	BASEPRI_MAX, r3
   2a7be:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a7c2:	4829      	ldr	r0, [pc, #164]	; (2a868 <k_sched_unlock+0xb8>)
   2a7c4:	f7fe fcb8 	bl	29138 <z_spin_lock_valid>
   2a7c8:	b960      	cbnz	r0, 2a7e4 <k_sched_unlock+0x34>
   2a7ca:	2394      	movs	r3, #148	; 0x94
   2a7cc:	4a27      	ldr	r2, [pc, #156]	; (2a86c <k_sched_unlock+0xbc>)
   2a7ce:	4928      	ldr	r1, [pc, #160]	; (2a870 <k_sched_unlock+0xc0>)
   2a7d0:	4828      	ldr	r0, [pc, #160]	; (2a874 <k_sched_unlock+0xc4>)
   2a7d2:	f004 fdf7 	bl	2f3c4 <assert_print>
   2a7d6:	4924      	ldr	r1, [pc, #144]	; (2a868 <k_sched_unlock+0xb8>)
   2a7d8:	4827      	ldr	r0, [pc, #156]	; (2a878 <k_sched_unlock+0xc8>)
   2a7da:	f004 fdf3 	bl	2f3c4 <assert_print>
   2a7de:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a7e0:	4822      	ldr	r0, [pc, #136]	; (2a86c <k_sched_unlock+0xbc>)
   2a7e2:	e013      	b.n	2a80c <k_sched_unlock+0x5c>
	z_spin_lock_set_owner(l);
   2a7e4:	4820      	ldr	r0, [pc, #128]	; (2a868 <k_sched_unlock+0xb8>)
   2a7e6:	f7fe fcc3 	bl	29170 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		__ASSERT(_current->base.sched_locked != 0U, "");
   2a7ea:	4b24      	ldr	r3, [pc, #144]	; (2a87c <k_sched_unlock+0xcc>)
   2a7ec:	689a      	ldr	r2, [r3, #8]
   2a7ee:	7bd3      	ldrb	r3, [r2, #15]
   2a7f0:	b973      	cbnz	r3, 2a810 <k_sched_unlock+0x60>
   2a7f2:	4923      	ldr	r1, [pc, #140]	; (2a880 <k_sched_unlock+0xd0>)
   2a7f4:	f240 33ef 	movw	r3, #1007	; 0x3ef
   2a7f8:	4a22      	ldr	r2, [pc, #136]	; (2a884 <k_sched_unlock+0xd4>)
   2a7fa:	481e      	ldr	r0, [pc, #120]	; (2a874 <k_sched_unlock+0xc4>)
   2a7fc:	f004 fde2 	bl	2f3c4 <assert_print>
   2a800:	4821      	ldr	r0, [pc, #132]	; (2a888 <k_sched_unlock+0xd8>)
   2a802:	f004 fddf 	bl	2f3c4 <assert_print>
   2a806:	f240 31ef 	movw	r1, #1007	; 0x3ef
   2a80a:	481e      	ldr	r0, [pc, #120]	; (2a884 <k_sched_unlock+0xd4>)
   2a80c:	f004 fdd3 	bl	2f3b6 <assert_post_action>
   2a810:	f3ef 8005 	mrs	r0, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   2a814:	b160      	cbz	r0, 2a830 <k_sched_unlock+0x80>
   2a816:	491d      	ldr	r1, [pc, #116]	; (2a88c <k_sched_unlock+0xdc>)
   2a818:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
   2a81c:	4a19      	ldr	r2, [pc, #100]	; (2a884 <k_sched_unlock+0xd4>)
   2a81e:	4815      	ldr	r0, [pc, #84]	; (2a874 <k_sched_unlock+0xc4>)
   2a820:	f004 fdd0 	bl	2f3c4 <assert_print>
   2a824:	4818      	ldr	r0, [pc, #96]	; (2a888 <k_sched_unlock+0xd8>)
   2a826:	f004 fdcd 	bl	2f3c4 <assert_print>
   2a82a:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
   2a82e:	e7ec      	b.n	2a80a <k_sched_unlock+0x5a>

		++_current->base.sched_locked;
   2a830:	3301      	adds	r3, #1
   2a832:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   2a834:	f7ff fdb0 	bl	2a398 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a838:	480b      	ldr	r0, [pc, #44]	; (2a868 <k_sched_unlock+0xb8>)
   2a83a:	f7fe fc8b 	bl	29154 <z_spin_unlock_valid>
   2a83e:	b958      	cbnz	r0, 2a858 <k_sched_unlock+0xa8>
   2a840:	23c2      	movs	r3, #194	; 0xc2
   2a842:	4a0a      	ldr	r2, [pc, #40]	; (2a86c <k_sched_unlock+0xbc>)
   2a844:	4912      	ldr	r1, [pc, #72]	; (2a890 <k_sched_unlock+0xe0>)
   2a846:	480b      	ldr	r0, [pc, #44]	; (2a874 <k_sched_unlock+0xc4>)
   2a848:	f004 fdbc 	bl	2f3c4 <assert_print>
   2a84c:	4906      	ldr	r1, [pc, #24]	; (2a868 <k_sched_unlock+0xb8>)
   2a84e:	4811      	ldr	r0, [pc, #68]	; (2a894 <k_sched_unlock+0xe4>)
   2a850:	f004 fdb8 	bl	2f3c4 <assert_print>
   2a854:	21c2      	movs	r1, #194	; 0xc2
   2a856:	e7c3      	b.n	2a7e0 <k_sched_unlock+0x30>
	__asm__ volatile(
   2a858:	f384 8811 	msr	BASEPRI, r4
   2a85c:	f3bf 8f6f 	isb	sy
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
   2a860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   2a864:	f00b bd10 	b.w	36288 <z_reschedule_unlocked>
   2a868:	2000ef30 	.word	0x2000ef30
   2a86c:	00039e53 	.word	0x00039e53
   2a870:	00039eac 	.word	0x00039eac
   2a874:	00039995 	.word	0x00039995
   2a878:	00039ec1 	.word	0x00039ec1
   2a87c:	2000eeec 	.word	0x2000eeec
   2a880:	00041aa4 	.word	0x00041aa4
   2a884:	00041845 	.word	0x00041845
   2a888:	0003a4e8 	.word	0x0003a4e8
   2a88c:	000415d8 	.word	0x000415d8
   2a890:	00039e80 	.word	0x00039e80
   2a894:	00039e97 	.word	0x00039e97

0002a898 <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
   2a898:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2a89a:	4b0b      	ldr	r3, [pc, #44]	; (2a8c8 <z_priq_dumb_remove+0x30>)
   2a89c:	4299      	cmp	r1, r3
   2a89e:	d10b      	bne.n	2a8b8 <z_priq_dumb_remove+0x20>
   2a8a0:	490a      	ldr	r1, [pc, #40]	; (2a8cc <z_priq_dumb_remove+0x34>)
   2a8a2:	480b      	ldr	r0, [pc, #44]	; (2a8d0 <z_priq_dumb_remove+0x38>)
   2a8a4:	f240 437b 	movw	r3, #1147	; 0x47b
   2a8a8:	4a0a      	ldr	r2, [pc, #40]	; (2a8d4 <z_priq_dumb_remove+0x3c>)
   2a8aa:	f004 fd8b 	bl	2f3c4 <assert_print>
   2a8ae:	f240 417b 	movw	r1, #1147	; 0x47b
   2a8b2:	4808      	ldr	r0, [pc, #32]	; (2a8d4 <z_priq_dumb_remove+0x3c>)
   2a8b4:	f004 fd7f 	bl	2f3b6 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   2a8b8:	e9d1 3200 	ldrd	r3, r2, [r1]

	prev->next = next;
   2a8bc:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2a8be:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2a8c0:	2300      	movs	r3, #0
	node->prev = NULL;
   2a8c2:	e9c1 3300 	strd	r3, r3, [r1]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   2a8c6:	bd08      	pop	{r3, pc}
   2a8c8:	2000dff8 	.word	0x2000dff8
   2a8cc:	00041a27 	.word	0x00041a27
   2a8d0:	00039995 	.word	0x00039995
   2a8d4:	00041845 	.word	0x00041845

0002a8d8 <move_thread_to_end_of_prio_q>:
{
   2a8d8:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   2a8da:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   2a8de:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   2a8e0:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   2a8e2:	7b43      	ldrb	r3, [r0, #13]
   2a8e4:	da06      	bge.n	2a8f4 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2a8e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   2a8ea:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2a8ec:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   2a8ee:	481d      	ldr	r0, [pc, #116]	; (2a964 <move_thread_to_end_of_prio_q+0x8c>)
   2a8f0:	f7ff ffd2 	bl	2a898 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   2a8f4:	7b63      	ldrb	r3, [r4, #13]
   2a8f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2a8fa:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2a8fc:	4b1a      	ldr	r3, [pc, #104]	; (2a968 <move_thread_to_end_of_prio_q+0x90>)
   2a8fe:	429c      	cmp	r4, r3
   2a900:	d109      	bne.n	2a916 <move_thread_to_end_of_prio_q+0x3e>
   2a902:	491a      	ldr	r1, [pc, #104]	; (2a96c <move_thread_to_end_of_prio_q+0x94>)
   2a904:	481a      	ldr	r0, [pc, #104]	; (2a970 <move_thread_to_end_of_prio_q+0x98>)
   2a906:	23bc      	movs	r3, #188	; 0xbc
   2a908:	4a1a      	ldr	r2, [pc, #104]	; (2a974 <move_thread_to_end_of_prio_q+0x9c>)
   2a90a:	f004 fd5b 	bl	2f3c4 <assert_print>
   2a90e:	21bc      	movs	r1, #188	; 0xbc
   2a910:	4818      	ldr	r0, [pc, #96]	; (2a974 <move_thread_to_end_of_prio_q+0x9c>)
   2a912:	f004 fd50 	bl	2f3b6 <assert_post_action>
	return list->head == list;
   2a916:	4a18      	ldr	r2, [pc, #96]	; (2a978 <move_thread_to_end_of_prio_q+0xa0>)
   2a918:	4611      	mov	r1, r2
   2a91a:	f851 3f1c 	ldr.w	r3, [r1, #28]!
	return (node == list->tail) ? NULL : node->next;
   2a91e:	6a10      	ldr	r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2a920:	428b      	cmp	r3, r1
   2a922:	bf08      	it	eq
   2a924:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2a926:	b923      	cbnz	r3, 2a932 <move_thread_to_end_of_prio_q+0x5a>
	node->prev = tail;
   2a928:	e9c4 1000 	strd	r1, r0, [r4]
	tail->next = node;
   2a92c:	6004      	str	r4, [r0, #0]
	list->tail = node;
   2a92e:	6214      	str	r4, [r2, #32]
}
   2a930:	e00c      	b.n	2a94c <move_thread_to_end_of_prio_q+0x74>
	int32_t b1 = thread_1->base.prio;
   2a932:	f994 500e 	ldrsb.w	r5, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   2a936:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   2a93a:	42b5      	cmp	r5, r6
   2a93c:	d00e      	beq.n	2a95c <move_thread_to_end_of_prio_q+0x84>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2a93e:	42ae      	cmp	r6, r5
   2a940:	dd0c      	ble.n	2a95c <move_thread_to_end_of_prio_q+0x84>
	sys_dnode_t *const prev = successor->prev;
   2a942:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   2a944:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   2a948:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   2a94a:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   2a94c:	6890      	ldr	r0, [r2, #8]
   2a94e:	1b03      	subs	r3, r0, r4
   2a950:	4258      	negs	r0, r3
   2a952:	4158      	adcs	r0, r3
}
   2a954:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   2a958:	f7ff bd1e 	b.w	2a398 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   2a95c:	4298      	cmp	r0, r3
   2a95e:	d0e3      	beq.n	2a928 <move_thread_to_end_of_prio_q+0x50>
   2a960:	681b      	ldr	r3, [r3, #0]
   2a962:	e7e0      	b.n	2a926 <move_thread_to_end_of_prio_q+0x4e>
   2a964:	2000ef08 	.word	0x2000ef08
   2a968:	2000dff8 	.word	0x2000dff8
   2a96c:	00041a27 	.word	0x00041a27
   2a970:	00039995 	.word	0x00039995
   2a974:	00041845 	.word	0x00041845
   2a978:	2000eeec 	.word	0x2000eeec

0002a97c <z_time_slice>:
{
   2a97c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2a97e:	f04f 0320 	mov.w	r3, #32
   2a982:	f3ef 8511 	mrs	r5, BASEPRI
   2a986:	f383 8812 	msr	BASEPRI_MAX, r3
   2a98a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a98e:	4823      	ldr	r0, [pc, #140]	; (2aa1c <z_time_slice+0xa0>)
   2a990:	f7fe fbd2 	bl	29138 <z_spin_lock_valid>
   2a994:	b968      	cbnz	r0, 2a9b2 <z_time_slice+0x36>
   2a996:	2394      	movs	r3, #148	; 0x94
   2a998:	4a21      	ldr	r2, [pc, #132]	; (2aa20 <z_time_slice+0xa4>)
   2a99a:	4922      	ldr	r1, [pc, #136]	; (2aa24 <z_time_slice+0xa8>)
   2a99c:	4822      	ldr	r0, [pc, #136]	; (2aa28 <z_time_slice+0xac>)
   2a99e:	f004 fd11 	bl	2f3c4 <assert_print>
   2a9a2:	491e      	ldr	r1, [pc, #120]	; (2aa1c <z_time_slice+0xa0>)
   2a9a4:	4821      	ldr	r0, [pc, #132]	; (2aa2c <z_time_slice+0xb0>)
   2a9a6:	f004 fd0d 	bl	2f3c4 <assert_print>
   2a9aa:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a9ac:	481c      	ldr	r0, [pc, #112]	; (2aa20 <z_time_slice+0xa4>)
   2a9ae:	f004 fd02 	bl	2f3b6 <assert_post_action>
	z_spin_lock_set_owner(l);
   2a9b2:	481a      	ldr	r0, [pc, #104]	; (2aa1c <z_time_slice+0xa0>)
   2a9b4:	f7fe fbdc 	bl	29170 <z_spin_lock_set_owner>
	struct k_thread *curr = _current;
   2a9b8:	4b1d      	ldr	r3, [pc, #116]	; (2aa30 <z_time_slice+0xb4>)
	if (pending_current == curr) {
   2a9ba:	4a1e      	ldr	r2, [pc, #120]	; (2aa34 <z_time_slice+0xb8>)
	struct k_thread *curr = _current;
   2a9bc:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
   2a9be:	6810      	ldr	r0, [r2, #0]
   2a9c0:	42a0      	cmp	r0, r4
   2a9c2:	d111      	bne.n	2a9e8 <z_time_slice+0x6c>
		z_reset_time_slice(curr);
   2a9c4:	f7ff fcc0 	bl	2a348 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a9c8:	4814      	ldr	r0, [pc, #80]	; (2aa1c <z_time_slice+0xa0>)
   2a9ca:	f7fe fbc3 	bl	29154 <z_spin_unlock_valid>
   2a9ce:	b9f8      	cbnz	r0, 2aa10 <z_time_slice+0x94>
   2a9d0:	23c2      	movs	r3, #194	; 0xc2
   2a9d2:	4a13      	ldr	r2, [pc, #76]	; (2aa20 <z_time_slice+0xa4>)
   2a9d4:	4918      	ldr	r1, [pc, #96]	; (2aa38 <z_time_slice+0xbc>)
   2a9d6:	4814      	ldr	r0, [pc, #80]	; (2aa28 <z_time_slice+0xac>)
   2a9d8:	f004 fcf4 	bl	2f3c4 <assert_print>
   2a9dc:	490f      	ldr	r1, [pc, #60]	; (2aa1c <z_time_slice+0xa0>)
   2a9de:	4817      	ldr	r0, [pc, #92]	; (2aa3c <z_time_slice+0xc0>)
   2a9e0:	f004 fcf0 	bl	2f3c4 <assert_print>
   2a9e4:	21c2      	movs	r1, #194	; 0xc2
   2a9e6:	e7e1      	b.n	2a9ac <z_time_slice+0x30>
	pending_current = NULL;
   2a9e8:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   2a9ea:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
   2a9ec:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   2a9ee:	4a14      	ldr	r2, [pc, #80]	; (2aa40 <z_time_slice+0xc4>)
   2a9f0:	5cd3      	ldrb	r3, [r2, r3]
   2a9f2:	2b00      	cmp	r3, #0
   2a9f4:	d0e8      	beq.n	2a9c8 <z_time_slice+0x4c>
   2a9f6:	4620      	mov	r0, r4
   2a9f8:	f7ff fc58 	bl	2a2ac <sliceable>
   2a9fc:	2800      	cmp	r0, #0
   2a9fe:	d0e3      	beq.n	2a9c8 <z_time_slice+0x4c>
		if (!z_is_thread_prevented_from_running(curr)) {
   2aa00:	7b63      	ldrb	r3, [r4, #13]
   2aa02:	06db      	lsls	r3, r3, #27
   2aa04:	d102      	bne.n	2aa0c <z_time_slice+0x90>
			move_thread_to_end_of_prio_q(curr);
   2aa06:	4620      	mov	r0, r4
   2aa08:	f7ff ff66 	bl	2a8d8 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
   2aa0c:	4620      	mov	r0, r4
   2aa0e:	e7d9      	b.n	2a9c4 <z_time_slice+0x48>
	__asm__ volatile(
   2aa10:	f385 8811 	msr	BASEPRI, r5
   2aa14:	f3bf 8f6f 	isb	sy
}
   2aa18:	bd38      	pop	{r3, r4, r5, pc}
   2aa1a:	bf00      	nop
   2aa1c:	2000ef30 	.word	0x2000ef30
   2aa20:	00039e53 	.word	0x00039e53
   2aa24:	00039eac 	.word	0x00039eac
   2aa28:	00039995 	.word	0x00039995
   2aa2c:	00039ec1 	.word	0x00039ec1
   2aa30:	2000eeec 	.word	0x2000eeec
   2aa34:	2000ef24 	.word	0x2000ef24
   2aa38:	00039e80 	.word	0x00039e80
   2aa3c:	00039e97 	.word	0x00039e97
   2aa40:	20010783 	.word	0x20010783

0002aa44 <unready_thread>:
{
   2aa44:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   2aa46:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   2aa4a:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   2aa4c:	2a00      	cmp	r2, #0
   2aa4e:	7b43      	ldrb	r3, [r0, #13]
   2aa50:	da06      	bge.n	2aa60 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2aa52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   2aa56:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2aa58:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   2aa5a:	4806      	ldr	r0, [pc, #24]	; (2aa74 <unready_thread+0x30>)
   2aa5c:	f7ff ff1c 	bl	2a898 <z_priq_dumb_remove>
	update_cache(thread == _current);
   2aa60:	4b05      	ldr	r3, [pc, #20]	; (2aa78 <unready_thread+0x34>)
   2aa62:	6898      	ldr	r0, [r3, #8]
   2aa64:	1b03      	subs	r3, r0, r4
   2aa66:	4258      	negs	r0, r3
   2aa68:	4158      	adcs	r0, r3
}
   2aa6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   2aa6e:	f7ff bc93 	b.w	2a398 <update_cache>
   2aa72:	bf00      	nop
   2aa74:	2000ef08 	.word	0x2000ef08
   2aa78:	2000eeec 	.word	0x2000eeec

0002aa7c <add_to_waitq_locked>:
{
   2aa7c:	b538      	push	{r3, r4, r5, lr}
   2aa7e:	4604      	mov	r4, r0
   2aa80:	460d      	mov	r5, r1
	unready_thread(thread);
   2aa82:	f7ff ffdf 	bl	2aa44 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   2aa86:	7b63      	ldrb	r3, [r4, #13]
   2aa88:	f043 0302 	orr.w	r3, r3, #2
   2aa8c:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   2aa8e:	b34d      	cbz	r5, 2aae4 <add_to_waitq_locked+0x68>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2aa90:	4b15      	ldr	r3, [pc, #84]	; (2aae8 <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
   2aa92:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2aa94:	429c      	cmp	r4, r3
   2aa96:	d109      	bne.n	2aaac <add_to_waitq_locked+0x30>
   2aa98:	4914      	ldr	r1, [pc, #80]	; (2aaec <add_to_waitq_locked+0x70>)
   2aa9a:	4815      	ldr	r0, [pc, #84]	; (2aaf0 <add_to_waitq_locked+0x74>)
   2aa9c:	23bc      	movs	r3, #188	; 0xbc
   2aa9e:	4a15      	ldr	r2, [pc, #84]	; (2aaf4 <add_to_waitq_locked+0x78>)
   2aaa0:	f004 fc90 	bl	2f3c4 <assert_print>
   2aaa4:	21bc      	movs	r1, #188	; 0xbc
   2aaa6:	4813      	ldr	r0, [pc, #76]	; (2aaf4 <add_to_waitq_locked+0x78>)
   2aaa8:	f004 fc85 	bl	2f3b6 <assert_post_action>
	return list->head == list;
   2aaac:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2aaae:	429d      	cmp	r5, r3
   2aab0:	d109      	bne.n	2aac6 <add_to_waitq_locked+0x4a>
	sys_dnode_t *const tail = list->tail;
   2aab2:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   2aab4:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   2aab8:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2aaba:	606c      	str	r4, [r5, #4]
}
   2aabc:	e012      	b.n	2aae4 <add_to_waitq_locked+0x68>
	return (node == list->tail) ? NULL : node->next;
   2aabe:	686a      	ldr	r2, [r5, #4]
   2aac0:	4293      	cmp	r3, r2
   2aac2:	d0f6      	beq.n	2aab2 <add_to_waitq_locked+0x36>
   2aac4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2aac6:	2b00      	cmp	r3, #0
   2aac8:	d0f3      	beq.n	2aab2 <add_to_waitq_locked+0x36>
	int32_t b1 = thread_1->base.prio;
   2aaca:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   2aace:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   2aad2:	428a      	cmp	r2, r1
   2aad4:	d0f3      	beq.n	2aabe <add_to_waitq_locked+0x42>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2aad6:	4291      	cmp	r1, r2
   2aad8:	ddf1      	ble.n	2aabe <add_to_waitq_locked+0x42>
	sys_dnode_t *const prev = successor->prev;
   2aada:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2aadc:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   2aae0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2aae2:	605c      	str	r4, [r3, #4]
}
   2aae4:	bd38      	pop	{r3, r4, r5, pc}
   2aae6:	bf00      	nop
   2aae8:	2000dff8 	.word	0x2000dff8
   2aaec:	00041a27 	.word	0x00041a27
   2aaf0:	00039995 	.word	0x00039995
   2aaf4:	00041845 	.word	0x00041845

0002aaf8 <pend_locked>:
{
   2aaf8:	b570      	push	{r4, r5, r6, lr}
   2aafa:	4615      	mov	r5, r2
   2aafc:	461c      	mov	r4, r3
   2aafe:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   2ab00:	f7ff ffbc 	bl	2aa7c <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2ab04:	f1b4 3fff 	cmp.w	r4, #4294967295
   2ab08:	bf08      	it	eq
   2ab0a:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   2ab0e:	d008      	beq.n	2ab22 <pend_locked+0x2a>
   2ab10:	462a      	mov	r2, r5
   2ab12:	4623      	mov	r3, r4
   2ab14:	f106 0018 	add.w	r0, r6, #24
   2ab18:	4902      	ldr	r1, [pc, #8]	; (2ab24 <pend_locked+0x2c>)
}
   2ab1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2ab1e:	f000 bde7 	b.w	2b6f0 <z_add_timeout>
   2ab22:	bd70      	pop	{r4, r5, r6, pc}
   2ab24:	0003629d 	.word	0x0003629d

0002ab28 <z_pend_curr>:
{
   2ab28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2ab2c:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
	pending_current = _current;
   2ab30:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 2abe8 <z_pend_curr+0xc0>
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   2ab34:	4c2d      	ldr	r4, [pc, #180]	; (2abec <z_pend_curr+0xc4>)
{
   2ab36:	4617      	mov	r7, r2
	pending_current = _current;
   2ab38:	4b2d      	ldr	r3, [pc, #180]	; (2abf0 <z_pend_curr+0xc8>)
   2ab3a:	f8da 2008 	ldr.w	r2, [sl, #8]
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   2ab3e:	42a0      	cmp	r0, r4
{
   2ab40:	4605      	mov	r5, r0
   2ab42:	460e      	mov	r6, r1
	pending_current = _current;
   2ab44:	601a      	str	r2, [r3, #0]
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   2ab46:	d10b      	bne.n	2ab60 <z_pend_curr+0x38>
   2ab48:	492a      	ldr	r1, [pc, #168]	; (2abf4 <z_pend_curr+0xcc>)
   2ab4a:	482b      	ldr	r0, [pc, #172]	; (2abf8 <z_pend_curr+0xd0>)
   2ab4c:	f240 3356 	movw	r3, #854	; 0x356
   2ab50:	4a2a      	ldr	r2, [pc, #168]	; (2abfc <z_pend_curr+0xd4>)
   2ab52:	f004 fc37 	bl	2f3c4 <assert_print>
   2ab56:	f240 3156 	movw	r1, #854	; 0x356
   2ab5a:	4828      	ldr	r0, [pc, #160]	; (2abfc <z_pend_curr+0xd4>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2ab5c:	f004 fc2b 	bl	2f3b6 <assert_post_action>
	__asm__ volatile(
   2ab60:	f04f 0220 	mov.w	r2, #32
   2ab64:	f3ef 8311 	mrs	r3, BASEPRI
   2ab68:	f382 8812 	msr	BASEPRI_MAX, r2
   2ab6c:	f3bf 8f6f 	isb	sy
   2ab70:	4620      	mov	r0, r4
   2ab72:	f7fe fae1 	bl	29138 <z_spin_lock_valid>
   2ab76:	b960      	cbnz	r0, 2ab92 <z_pend_curr+0x6a>
   2ab78:	2394      	movs	r3, #148	; 0x94
   2ab7a:	4a21      	ldr	r2, [pc, #132]	; (2ac00 <z_pend_curr+0xd8>)
   2ab7c:	4921      	ldr	r1, [pc, #132]	; (2ac04 <z_pend_curr+0xdc>)
   2ab7e:	481e      	ldr	r0, [pc, #120]	; (2abf8 <z_pend_curr+0xd0>)
   2ab80:	f004 fc20 	bl	2f3c4 <assert_print>
   2ab84:	4621      	mov	r1, r4
   2ab86:	4820      	ldr	r0, [pc, #128]	; (2ac08 <z_pend_curr+0xe0>)
   2ab88:	f004 fc1c 	bl	2f3c4 <assert_print>
   2ab8c:	2194      	movs	r1, #148	; 0x94
   2ab8e:	481c      	ldr	r0, [pc, #112]	; (2ac00 <z_pend_curr+0xd8>)
   2ab90:	e7e4      	b.n	2ab5c <z_pend_curr+0x34>
	z_spin_lock_set_owner(l);
   2ab92:	4620      	mov	r0, r4
   2ab94:	f7fe faec 	bl	29170 <z_spin_lock_set_owner>
	pend_locked(_current, wait_q, timeout);
   2ab98:	f8da 0008 	ldr.w	r0, [sl, #8]
   2ab9c:	4642      	mov	r2, r8
   2ab9e:	464b      	mov	r3, r9
   2aba0:	4639      	mov	r1, r7
   2aba2:	f7ff ffa9 	bl	2aaf8 <pend_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2aba6:	4628      	mov	r0, r5
   2aba8:	f7fe fad4 	bl	29154 <z_spin_unlock_valid>
   2abac:	b958      	cbnz	r0, 2abc6 <z_pend_curr+0x9e>
   2abae:	4917      	ldr	r1, [pc, #92]	; (2ac0c <z_pend_curr+0xe4>)
   2abb0:	23e1      	movs	r3, #225	; 0xe1
   2abb2:	4a13      	ldr	r2, [pc, #76]	; (2ac00 <z_pend_curr+0xd8>)
   2abb4:	4810      	ldr	r0, [pc, #64]	; (2abf8 <z_pend_curr+0xd0>)
   2abb6:	f004 fc05 	bl	2f3c4 <assert_print>
   2abba:	4629      	mov	r1, r5
   2abbc:	4814      	ldr	r0, [pc, #80]	; (2ac10 <z_pend_curr+0xe8>)
   2abbe:	f004 fc01 	bl	2f3c4 <assert_print>
   2abc2:	21e1      	movs	r1, #225	; 0xe1
   2abc4:	e7e3      	b.n	2ab8e <z_pend_curr+0x66>
   2abc6:	4620      	mov	r0, r4
   2abc8:	f7fe fac4 	bl	29154 <z_spin_unlock_valid>
   2abcc:	b938      	cbnz	r0, 2abde <z_pend_curr+0xb6>
   2abce:	490f      	ldr	r1, [pc, #60]	; (2ac0c <z_pend_curr+0xe4>)
   2abd0:	23e1      	movs	r3, #225	; 0xe1
   2abd2:	4a0b      	ldr	r2, [pc, #44]	; (2ac00 <z_pend_curr+0xd8>)
   2abd4:	4808      	ldr	r0, [pc, #32]	; (2abf8 <z_pend_curr+0xd0>)
   2abd6:	f004 fbf5 	bl	2f3c4 <assert_print>
   2abda:	4621      	mov	r1, r4
   2abdc:	e7ee      	b.n	2abbc <z_pend_curr+0x94>
   2abde:	4630      	mov	r0, r6
}
   2abe0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2abe4:	f7e7 bd2e 	b.w	12644 <arch_swap>
   2abe8:	2000eeec 	.word	0x2000eeec
   2abec:	2000ef30 	.word	0x2000ef30
   2abf0:	2000ef24 	.word	0x2000ef24
   2abf4:	00041ad5 	.word	0x00041ad5
   2abf8:	00039995 	.word	0x00039995
   2abfc:	00041845 	.word	0x00041845
   2ac00:	00039e53 	.word	0x00039e53
   2ac04:	00039eac 	.word	0x00039eac
   2ac08:	00039ec1 	.word	0x00039ec1
   2ac0c:	00039e80 	.word	0x00039e80
   2ac10:	00039e97 	.word	0x00039e97

0002ac14 <z_set_prio>:
{
   2ac14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2ac18:	4604      	mov	r4, r0
   2ac1a:	460e      	mov	r6, r1
   2ac1c:	f04f 0320 	mov.w	r3, #32
   2ac20:	f3ef 8911 	mrs	r9, BASEPRI
   2ac24:	f383 8812 	msr	BASEPRI_MAX, r3
   2ac28:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2ac2c:	4837      	ldr	r0, [pc, #220]	; (2ad0c <z_set_prio+0xf8>)
   2ac2e:	f7fe fa83 	bl	29138 <z_spin_lock_valid>
   2ac32:	4607      	mov	r7, r0
   2ac34:	b960      	cbnz	r0, 2ac50 <z_set_prio+0x3c>
   2ac36:	2394      	movs	r3, #148	; 0x94
   2ac38:	4a35      	ldr	r2, [pc, #212]	; (2ad10 <z_set_prio+0xfc>)
   2ac3a:	4936      	ldr	r1, [pc, #216]	; (2ad14 <z_set_prio+0x100>)
   2ac3c:	4836      	ldr	r0, [pc, #216]	; (2ad18 <z_set_prio+0x104>)
   2ac3e:	f004 fbc1 	bl	2f3c4 <assert_print>
   2ac42:	4932      	ldr	r1, [pc, #200]	; (2ad0c <z_set_prio+0xf8>)
   2ac44:	4835      	ldr	r0, [pc, #212]	; (2ad1c <z_set_prio+0x108>)
   2ac46:	f004 fbbd 	bl	2f3c4 <assert_print>
   2ac4a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2ac4c:	4830      	ldr	r0, [pc, #192]	; (2ad10 <z_set_prio+0xfc>)
   2ac4e:	e021      	b.n	2ac94 <z_set_prio+0x80>
	z_spin_lock_set_owner(l);
   2ac50:	482e      	ldr	r0, [pc, #184]	; (2ad0c <z_set_prio+0xf8>)
   2ac52:	f7fe fa8d 	bl	29170 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   2ac56:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   2ac58:	b276      	sxtb	r6, r6
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2ac5a:	06da      	lsls	r2, r3, #27
   2ac5c:	d11c      	bne.n	2ac98 <z_set_prio+0x84>
	return node->next != NULL;
   2ac5e:	69a5      	ldr	r5, [r4, #24]
   2ac60:	b9d5      	cbnz	r5, 2ac98 <z_set_prio+0x84>
	_priq_run_remove(thread_runq(thread), thread);
   2ac62:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 2ad20 <z_set_prio+0x10c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2ac66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2ac6a:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   2ac6c:	4621      	mov	r1, r4
   2ac6e:	4640      	mov	r0, r8
   2ac70:	f7ff fe12 	bl	2a898 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   2ac74:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   2ac76:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   2ac78:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2ac7c:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2ac7e:	4b29      	ldr	r3, [pc, #164]	; (2ad24 <z_set_prio+0x110>)
   2ac80:	429c      	cmp	r4, r3
   2ac82:	d11b      	bne.n	2acbc <z_set_prio+0xa8>
   2ac84:	4928      	ldr	r1, [pc, #160]	; (2ad28 <z_set_prio+0x114>)
   2ac86:	4824      	ldr	r0, [pc, #144]	; (2ad18 <z_set_prio+0x104>)
   2ac88:	23bc      	movs	r3, #188	; 0xbc
   2ac8a:	4a28      	ldr	r2, [pc, #160]	; (2ad2c <z_set_prio+0x118>)
   2ac8c:	f004 fb9a 	bl	2f3c4 <assert_print>
   2ac90:	21bc      	movs	r1, #188	; 0xbc
   2ac92:	4826      	ldr	r0, [pc, #152]	; (2ad2c <z_set_prio+0x118>)
   2ac94:	f004 fb8f 	bl	2f3b6 <assert_post_action>
   2ac98:	2700      	movs	r7, #0
			thread->base.prio = prio;
   2ac9a:	73a6      	strb	r6, [r4, #14]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2ac9c:	481b      	ldr	r0, [pc, #108]	; (2ad0c <z_set_prio+0xf8>)
   2ac9e:	f7fe fa59 	bl	29154 <z_spin_unlock_valid>
   2aca2:	bb58      	cbnz	r0, 2acfc <z_set_prio+0xe8>
   2aca4:	23c2      	movs	r3, #194	; 0xc2
   2aca6:	4a1a      	ldr	r2, [pc, #104]	; (2ad10 <z_set_prio+0xfc>)
   2aca8:	4921      	ldr	r1, [pc, #132]	; (2ad30 <z_set_prio+0x11c>)
   2acaa:	481b      	ldr	r0, [pc, #108]	; (2ad18 <z_set_prio+0x104>)
   2acac:	f004 fb8a 	bl	2f3c4 <assert_print>
   2acb0:	4916      	ldr	r1, [pc, #88]	; (2ad0c <z_set_prio+0xf8>)
   2acb2:	4820      	ldr	r0, [pc, #128]	; (2ad34 <z_set_prio+0x120>)
   2acb4:	f004 fb86 	bl	2f3c4 <assert_print>
   2acb8:	21c2      	movs	r1, #194	; 0xc2
   2acba:	e7c7      	b.n	2ac4c <z_set_prio+0x38>
	return list->head == list;
   2acbc:	4643      	mov	r3, r8
   2acbe:	f853 291c 	ldr.w	r2, [r3], #-28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2acc2:	4542      	cmp	r2, r8
   2acc4:	bf18      	it	ne
   2acc6:	4615      	movne	r5, r2
	return (node == list->tail) ? NULL : node->next;
   2acc8:	6a1a      	ldr	r2, [r3, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2acca:	b925      	cbnz	r5, 2acd6 <z_set_prio+0xc2>
	node->prev = tail;
   2accc:	e9c4 8200 	strd	r8, r2, [r4]
	tail->next = node;
   2acd0:	6014      	str	r4, [r2, #0]
	list->tail = node;
   2acd2:	621c      	str	r4, [r3, #32]
}
   2acd4:	e00a      	b.n	2acec <z_set_prio+0xd8>
	int32_t b2 = thread_2->base.prio;
   2acd6:	f995 100e 	ldrsb.w	r1, [r5, #14]
	if (b1 != b2) {
   2acda:	428e      	cmp	r6, r1
   2acdc:	d00a      	beq.n	2acf4 <z_set_prio+0xe0>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2acde:	42b1      	cmp	r1, r6
   2ace0:	dd08      	ble.n	2acf4 <z_set_prio+0xe0>
	sys_dnode_t *const prev = successor->prev;
   2ace2:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   2ace4:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   2ace8:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   2acea:	606c      	str	r4, [r5, #4]
			update_cache(1);
   2acec:	2001      	movs	r0, #1
   2acee:	f7ff fb53 	bl	2a398 <update_cache>
   2acf2:	e7d3      	b.n	2ac9c <z_set_prio+0x88>
	return (node == list->tail) ? NULL : node->next;
   2acf4:	42aa      	cmp	r2, r5
   2acf6:	d0e9      	beq.n	2accc <z_set_prio+0xb8>
   2acf8:	682d      	ldr	r5, [r5, #0]
   2acfa:	e7e6      	b.n	2acca <z_set_prio+0xb6>
	__asm__ volatile(
   2acfc:	f389 8811 	msr	BASEPRI, r9
   2ad00:	f3bf 8f6f 	isb	sy
}
   2ad04:	4638      	mov	r0, r7
   2ad06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2ad0a:	bf00      	nop
   2ad0c:	2000ef30 	.word	0x2000ef30
   2ad10:	00039e53 	.word	0x00039e53
   2ad14:	00039eac 	.word	0x00039eac
   2ad18:	00039995 	.word	0x00039995
   2ad1c:	00039ec1 	.word	0x00039ec1
   2ad20:	2000ef08 	.word	0x2000ef08
   2ad24:	2000dff8 	.word	0x2000dff8
   2ad28:	00041a27 	.word	0x00041a27
   2ad2c:	00041845 	.word	0x00041845
   2ad30:	00039e80 	.word	0x00039e80
   2ad34:	00039e97 	.word	0x00039e97

0002ad38 <z_impl_k_thread_suspend>:
{
   2ad38:	b570      	push	{r4, r5, r6, lr}
   2ad3a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   2ad3c:	3018      	adds	r0, #24
   2ad3e:	f000 fd97 	bl	2b870 <z_abort_timeout>
	__asm__ volatile(
   2ad42:	f04f 0320 	mov.w	r3, #32
   2ad46:	f3ef 8611 	mrs	r6, BASEPRI
   2ad4a:	f383 8812 	msr	BASEPRI_MAX, r3
   2ad4e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2ad52:	4824      	ldr	r0, [pc, #144]	; (2ade4 <z_impl_k_thread_suspend+0xac>)
   2ad54:	f7fe f9f0 	bl	29138 <z_spin_lock_valid>
   2ad58:	b968      	cbnz	r0, 2ad76 <z_impl_k_thread_suspend+0x3e>
   2ad5a:	2394      	movs	r3, #148	; 0x94
   2ad5c:	4a22      	ldr	r2, [pc, #136]	; (2ade8 <z_impl_k_thread_suspend+0xb0>)
   2ad5e:	4923      	ldr	r1, [pc, #140]	; (2adec <z_impl_k_thread_suspend+0xb4>)
   2ad60:	4823      	ldr	r0, [pc, #140]	; (2adf0 <z_impl_k_thread_suspend+0xb8>)
   2ad62:	f004 fb2f 	bl	2f3c4 <assert_print>
   2ad66:	491f      	ldr	r1, [pc, #124]	; (2ade4 <z_impl_k_thread_suspend+0xac>)
   2ad68:	4822      	ldr	r0, [pc, #136]	; (2adf4 <z_impl_k_thread_suspend+0xbc>)
   2ad6a:	f004 fb2b 	bl	2f3c4 <assert_print>
   2ad6e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2ad70:	481d      	ldr	r0, [pc, #116]	; (2ade8 <z_impl_k_thread_suspend+0xb0>)
   2ad72:	f004 fb20 	bl	2f3b6 <assert_post_action>
	z_spin_lock_set_owner(l);
   2ad76:	481b      	ldr	r0, [pc, #108]	; (2ade4 <z_impl_k_thread_suspend+0xac>)
   2ad78:	f7fe f9fa 	bl	29170 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   2ad7c:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   2ad80:	7b63      	ldrb	r3, [r4, #13]
   2ad82:	2a00      	cmp	r2, #0
   2ad84:	da06      	bge.n	2ad94 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2ad86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   2ad8a:	4621      	mov	r1, r4
   2ad8c:	481a      	ldr	r0, [pc, #104]	; (2adf8 <z_impl_k_thread_suspend+0xc0>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2ad8e:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   2ad90:	f7ff fd82 	bl	2a898 <z_priq_dumb_remove>
		update_cache(thread == _current);
   2ad94:	4d19      	ldr	r5, [pc, #100]	; (2adfc <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2ad96:	7b63      	ldrb	r3, [r4, #13]
   2ad98:	68a8      	ldr	r0, [r5, #8]
   2ad9a:	f043 0310 	orr.w	r3, r3, #16
   2ad9e:	7363      	strb	r3, [r4, #13]
   2ada0:	1b03      	subs	r3, r0, r4
   2ada2:	4258      	negs	r0, r3
   2ada4:	4158      	adcs	r0, r3
   2ada6:	f7ff faf7 	bl	2a398 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2adaa:	480e      	ldr	r0, [pc, #56]	; (2ade4 <z_impl_k_thread_suspend+0xac>)
   2adac:	f7fe f9d2 	bl	29154 <z_spin_unlock_valid>
   2adb0:	b958      	cbnz	r0, 2adca <z_impl_k_thread_suspend+0x92>
   2adb2:	23c2      	movs	r3, #194	; 0xc2
   2adb4:	4a0c      	ldr	r2, [pc, #48]	; (2ade8 <z_impl_k_thread_suspend+0xb0>)
   2adb6:	4912      	ldr	r1, [pc, #72]	; (2ae00 <z_impl_k_thread_suspend+0xc8>)
   2adb8:	480d      	ldr	r0, [pc, #52]	; (2adf0 <z_impl_k_thread_suspend+0xb8>)
   2adba:	f004 fb03 	bl	2f3c4 <assert_print>
   2adbe:	4909      	ldr	r1, [pc, #36]	; (2ade4 <z_impl_k_thread_suspend+0xac>)
   2adc0:	4810      	ldr	r0, [pc, #64]	; (2ae04 <z_impl_k_thread_suspend+0xcc>)
   2adc2:	f004 faff 	bl	2f3c4 <assert_print>
   2adc6:	21c2      	movs	r1, #194	; 0xc2
   2adc8:	e7d2      	b.n	2ad70 <z_impl_k_thread_suspend+0x38>
	__asm__ volatile(
   2adca:	f386 8811 	msr	BASEPRI, r6
   2adce:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   2add2:	68ab      	ldr	r3, [r5, #8]
   2add4:	42a3      	cmp	r3, r4
   2add6:	d103      	bne.n	2ade0 <z_impl_k_thread_suspend+0xa8>
}
   2add8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   2addc:	f00b ba54 	b.w	36288 <z_reschedule_unlocked>
}
   2ade0:	bd70      	pop	{r4, r5, r6, pc}
   2ade2:	bf00      	nop
   2ade4:	2000ef30 	.word	0x2000ef30
   2ade8:	00039e53 	.word	0x00039e53
   2adec:	00039eac 	.word	0x00039eac
   2adf0:	00039995 	.word	0x00039995
   2adf4:	00039ec1 	.word	0x00039ec1
   2adf8:	2000ef08 	.word	0x2000ef08
   2adfc:	2000eeec 	.word	0x2000eeec
   2ae00:	00039e80 	.word	0x00039e80
   2ae04:	00039e97 	.word	0x00039e97

0002ae08 <unpend_thread_no_timeout>:
{
   2ae08:	b510      	push	{r4, lr}
   2ae0a:	4604      	mov	r4, r0
   2ae0c:	6880      	ldr	r0, [r0, #8]
	__ASSERT_NO_MSG(thread->base.pended_on);
   2ae0e:	b958      	cbnz	r0, 2ae28 <unpend_thread_no_timeout+0x20>
   2ae10:	490a      	ldr	r1, [pc, #40]	; (2ae3c <unpend_thread_no_timeout+0x34>)
   2ae12:	480b      	ldr	r0, [pc, #44]	; (2ae40 <unpend_thread_no_timeout+0x38>)
   2ae14:	f240 23c9 	movw	r3, #713	; 0x2c9
   2ae18:	4a0a      	ldr	r2, [pc, #40]	; (2ae44 <unpend_thread_no_timeout+0x3c>)
   2ae1a:	f004 fad3 	bl	2f3c4 <assert_print>
   2ae1e:	f240 21c9 	movw	r1, #713	; 0x2c9
   2ae22:	4808      	ldr	r0, [pc, #32]	; (2ae44 <unpend_thread_no_timeout+0x3c>)
   2ae24:	f004 fac7 	bl	2f3b6 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   2ae28:	4621      	mov	r1, r4
   2ae2a:	f7ff fd35 	bl	2a898 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2ae2e:	7b63      	ldrb	r3, [r4, #13]
   2ae30:	f023 0302 	bic.w	r3, r3, #2
   2ae34:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   2ae36:	2300      	movs	r3, #0
   2ae38:	60a3      	str	r3, [r4, #8]
}
   2ae3a:	bd10      	pop	{r4, pc}
   2ae3c:	00041b0c 	.word	0x00041b0c
   2ae40:	00039995 	.word	0x00039995
   2ae44:	00041845 	.word	0x00041845

0002ae48 <z_unpend_thread>:
{
   2ae48:	b538      	push	{r3, r4, r5, lr}
   2ae4a:	4604      	mov	r4, r0
	__asm__ volatile(
   2ae4c:	f04f 0320 	mov.w	r3, #32
   2ae50:	f3ef 8511 	mrs	r5, BASEPRI
   2ae54:	f383 8812 	msr	BASEPRI_MAX, r3
   2ae58:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2ae5c:	4819      	ldr	r0, [pc, #100]	; (2aec4 <z_unpend_thread+0x7c>)
   2ae5e:	f7fe f96b 	bl	29138 <z_spin_lock_valid>
   2ae62:	b968      	cbnz	r0, 2ae80 <z_unpend_thread+0x38>
   2ae64:	2394      	movs	r3, #148	; 0x94
   2ae66:	4a18      	ldr	r2, [pc, #96]	; (2aec8 <z_unpend_thread+0x80>)
   2ae68:	4918      	ldr	r1, [pc, #96]	; (2aecc <z_unpend_thread+0x84>)
   2ae6a:	4819      	ldr	r0, [pc, #100]	; (2aed0 <z_unpend_thread+0x88>)
   2ae6c:	f004 faaa 	bl	2f3c4 <assert_print>
   2ae70:	4914      	ldr	r1, [pc, #80]	; (2aec4 <z_unpend_thread+0x7c>)
   2ae72:	4818      	ldr	r0, [pc, #96]	; (2aed4 <z_unpend_thread+0x8c>)
   2ae74:	f004 faa6 	bl	2f3c4 <assert_print>
   2ae78:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2ae7a:	4813      	ldr	r0, [pc, #76]	; (2aec8 <z_unpend_thread+0x80>)
   2ae7c:	f004 fa9b 	bl	2f3b6 <assert_post_action>
	z_spin_lock_set_owner(l);
   2ae80:	4810      	ldr	r0, [pc, #64]	; (2aec4 <z_unpend_thread+0x7c>)
   2ae82:	f7fe f975 	bl	29170 <z_spin_lock_set_owner>
		if (thread->base.pended_on != NULL) {
   2ae86:	68a3      	ldr	r3, [r4, #8]
   2ae88:	b113      	cbz	r3, 2ae90 <z_unpend_thread+0x48>
			unpend_thread_no_timeout(thread);
   2ae8a:	4620      	mov	r0, r4
   2ae8c:	f7ff ffbc 	bl	2ae08 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2ae90:	480c      	ldr	r0, [pc, #48]	; (2aec4 <z_unpend_thread+0x7c>)
   2ae92:	f7fe f95f 	bl	29154 <z_spin_unlock_valid>
   2ae96:	b958      	cbnz	r0, 2aeb0 <z_unpend_thread+0x68>
   2ae98:	23c2      	movs	r3, #194	; 0xc2
   2ae9a:	4a0b      	ldr	r2, [pc, #44]	; (2aec8 <z_unpend_thread+0x80>)
   2ae9c:	490e      	ldr	r1, [pc, #56]	; (2aed8 <z_unpend_thread+0x90>)
   2ae9e:	480c      	ldr	r0, [pc, #48]	; (2aed0 <z_unpend_thread+0x88>)
   2aea0:	f004 fa90 	bl	2f3c4 <assert_print>
   2aea4:	4907      	ldr	r1, [pc, #28]	; (2aec4 <z_unpend_thread+0x7c>)
   2aea6:	480d      	ldr	r0, [pc, #52]	; (2aedc <z_unpend_thread+0x94>)
   2aea8:	f004 fa8c 	bl	2f3c4 <assert_print>
   2aeac:	21c2      	movs	r1, #194	; 0xc2
   2aeae:	e7e4      	b.n	2ae7a <z_unpend_thread+0x32>
	__asm__ volatile(
   2aeb0:	f385 8811 	msr	BASEPRI, r5
   2aeb4:	f3bf 8f6f 	isb	sy
   2aeb8:	f104 0018 	add.w	r0, r4, #24
}
   2aebc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2aec0:	f000 bcd6 	b.w	2b870 <z_abort_timeout>
   2aec4:	2000ef30 	.word	0x2000ef30
   2aec8:	00039e53 	.word	0x00039e53
   2aecc:	00039eac 	.word	0x00039eac
   2aed0:	00039995 	.word	0x00039995
   2aed4:	00039ec1 	.word	0x00039ec1
   2aed8:	00039e80 	.word	0x00039e80
   2aedc:	00039e97 	.word	0x00039e97

0002aee0 <z_sched_wake_thread>:
{
   2aee0:	b570      	push	{r4, r5, r6, lr}
   2aee2:	4604      	mov	r4, r0
   2aee4:	460d      	mov	r5, r1
	__asm__ volatile(
   2aee6:	f04f 0320 	mov.w	r3, #32
   2aeea:	f3ef 8611 	mrs	r6, BASEPRI
   2aeee:	f383 8812 	msr	BASEPRI_MAX, r3
   2aef2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2aef6:	481f      	ldr	r0, [pc, #124]	; (2af74 <z_sched_wake_thread+0x94>)
   2aef8:	f7fe f91e 	bl	29138 <z_spin_lock_valid>
   2aefc:	b968      	cbnz	r0, 2af1a <z_sched_wake_thread+0x3a>
   2aefe:	2394      	movs	r3, #148	; 0x94
   2af00:	4a1d      	ldr	r2, [pc, #116]	; (2af78 <z_sched_wake_thread+0x98>)
   2af02:	491e      	ldr	r1, [pc, #120]	; (2af7c <z_sched_wake_thread+0x9c>)
   2af04:	481e      	ldr	r0, [pc, #120]	; (2af80 <z_sched_wake_thread+0xa0>)
   2af06:	f004 fa5d 	bl	2f3c4 <assert_print>
   2af0a:	491a      	ldr	r1, [pc, #104]	; (2af74 <z_sched_wake_thread+0x94>)
   2af0c:	481d      	ldr	r0, [pc, #116]	; (2af84 <z_sched_wake_thread+0xa4>)
   2af0e:	f004 fa59 	bl	2f3c4 <assert_print>
   2af12:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2af14:	4818      	ldr	r0, [pc, #96]	; (2af78 <z_sched_wake_thread+0x98>)
   2af16:	f004 fa4e 	bl	2f3b6 <assert_post_action>
	z_spin_lock_set_owner(l);
   2af1a:	4816      	ldr	r0, [pc, #88]	; (2af74 <z_sched_wake_thread+0x94>)
   2af1c:	f7fe f928 	bl	29170 <z_spin_lock_set_owner>
		if (!killed) {
   2af20:	7b63      	ldrb	r3, [r4, #13]
   2af22:	f013 0f28 	tst.w	r3, #40	; 0x28
   2af26:	d10c      	bne.n	2af42 <z_sched_wake_thread+0x62>
			if (thread->base.pended_on != NULL) {
   2af28:	68a3      	ldr	r3, [r4, #8]
   2af2a:	b113      	cbz	r3, 2af32 <z_sched_wake_thread+0x52>
				unpend_thread_no_timeout(thread);
   2af2c:	4620      	mov	r0, r4
   2af2e:	f7ff ff6b 	bl	2ae08 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2af32:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
   2af34:	b9ad      	cbnz	r5, 2af62 <z_sched_wake_thread+0x82>
   2af36:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
			ready_thread(thread);
   2af3a:	4620      	mov	r0, r4
   2af3c:	7363      	strb	r3, [r4, #13]
   2af3e:	f7ff fa5f 	bl	2a400 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2af42:	480c      	ldr	r0, [pc, #48]	; (2af74 <z_sched_wake_thread+0x94>)
   2af44:	f7fe f906 	bl	29154 <z_spin_unlock_valid>
   2af48:	b970      	cbnz	r0, 2af68 <z_sched_wake_thread+0x88>
   2af4a:	23c2      	movs	r3, #194	; 0xc2
   2af4c:	4a0a      	ldr	r2, [pc, #40]	; (2af78 <z_sched_wake_thread+0x98>)
   2af4e:	490e      	ldr	r1, [pc, #56]	; (2af88 <z_sched_wake_thread+0xa8>)
   2af50:	480b      	ldr	r0, [pc, #44]	; (2af80 <z_sched_wake_thread+0xa0>)
   2af52:	f004 fa37 	bl	2f3c4 <assert_print>
   2af56:	4907      	ldr	r1, [pc, #28]	; (2af74 <z_sched_wake_thread+0x94>)
   2af58:	480c      	ldr	r0, [pc, #48]	; (2af8c <z_sched_wake_thread+0xac>)
   2af5a:	f004 fa33 	bl	2f3c4 <assert_print>
   2af5e:	21c2      	movs	r1, #194	; 0xc2
   2af60:	e7d8      	b.n	2af14 <z_sched_wake_thread+0x34>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2af62:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
   2af66:	e7e8      	b.n	2af3a <z_sched_wake_thread+0x5a>
	__asm__ volatile(
   2af68:	f386 8811 	msr	BASEPRI, r6
   2af6c:	f3bf 8f6f 	isb	sy
}
   2af70:	bd70      	pop	{r4, r5, r6, pc}
   2af72:	bf00      	nop
   2af74:	2000ef30 	.word	0x2000ef30
   2af78:	00039e53 	.word	0x00039e53
   2af7c:	00039eac 	.word	0x00039eac
   2af80:	00039995 	.word	0x00039995
   2af84:	00039ec1 	.word	0x00039ec1
   2af88:	00039e80 	.word	0x00039e80
   2af8c:	00039e97 	.word	0x00039e97

0002af90 <z_unpend1_no_timeout>:
{
   2af90:	b570      	push	{r4, r5, r6, lr}
   2af92:	4605      	mov	r5, r0
	__asm__ volatile(
   2af94:	f04f 0320 	mov.w	r3, #32
   2af98:	f3ef 8611 	mrs	r6, BASEPRI
   2af9c:	f383 8812 	msr	BASEPRI_MAX, r3
   2afa0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2afa4:	4819      	ldr	r0, [pc, #100]	; (2b00c <z_unpend1_no_timeout+0x7c>)
   2afa6:	f7fe f8c7 	bl	29138 <z_spin_lock_valid>
   2afaa:	b968      	cbnz	r0, 2afc8 <z_unpend1_no_timeout+0x38>
   2afac:	2394      	movs	r3, #148	; 0x94
   2afae:	4a18      	ldr	r2, [pc, #96]	; (2b010 <z_unpend1_no_timeout+0x80>)
   2afb0:	4918      	ldr	r1, [pc, #96]	; (2b014 <z_unpend1_no_timeout+0x84>)
   2afb2:	4819      	ldr	r0, [pc, #100]	; (2b018 <z_unpend1_no_timeout+0x88>)
   2afb4:	f004 fa06 	bl	2f3c4 <assert_print>
   2afb8:	4914      	ldr	r1, [pc, #80]	; (2b00c <z_unpend1_no_timeout+0x7c>)
   2afba:	4818      	ldr	r0, [pc, #96]	; (2b01c <z_unpend1_no_timeout+0x8c>)
   2afbc:	f004 fa02 	bl	2f3c4 <assert_print>
   2afc0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2afc2:	4813      	ldr	r0, [pc, #76]	; (2b010 <z_unpend1_no_timeout+0x80>)
   2afc4:	f004 f9f7 	bl	2f3b6 <assert_post_action>
	z_spin_lock_set_owner(l);
   2afc8:	4810      	ldr	r0, [pc, #64]	; (2b00c <z_unpend1_no_timeout+0x7c>)
   2afca:	f7fe f8d1 	bl	29170 <z_spin_lock_set_owner>
	return list->head == list;
   2afce:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2afd0:	42a5      	cmp	r5, r4
   2afd2:	d013      	beq.n	2affc <z_unpend1_no_timeout+0x6c>
		if (thread != NULL) {
   2afd4:	b114      	cbz	r4, 2afdc <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
   2afd6:	4620      	mov	r0, r4
   2afd8:	f7ff ff16 	bl	2ae08 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2afdc:	480b      	ldr	r0, [pc, #44]	; (2b00c <z_unpend1_no_timeout+0x7c>)
   2afde:	f7fe f8b9 	bl	29154 <z_spin_unlock_valid>
   2afe2:	b968      	cbnz	r0, 2b000 <z_unpend1_no_timeout+0x70>
   2afe4:	23c2      	movs	r3, #194	; 0xc2
   2afe6:	4a0a      	ldr	r2, [pc, #40]	; (2b010 <z_unpend1_no_timeout+0x80>)
   2afe8:	490d      	ldr	r1, [pc, #52]	; (2b020 <z_unpend1_no_timeout+0x90>)
   2afea:	480b      	ldr	r0, [pc, #44]	; (2b018 <z_unpend1_no_timeout+0x88>)
   2afec:	f004 f9ea 	bl	2f3c4 <assert_print>
   2aff0:	4906      	ldr	r1, [pc, #24]	; (2b00c <z_unpend1_no_timeout+0x7c>)
   2aff2:	480c      	ldr	r0, [pc, #48]	; (2b024 <z_unpend1_no_timeout+0x94>)
   2aff4:	f004 f9e6 	bl	2f3c4 <assert_print>
   2aff8:	21c2      	movs	r1, #194	; 0xc2
   2affa:	e7e2      	b.n	2afc2 <z_unpend1_no_timeout+0x32>
   2affc:	2400      	movs	r4, #0
   2affe:	e7ed      	b.n	2afdc <z_unpend1_no_timeout+0x4c>
	__asm__ volatile(
   2b000:	f386 8811 	msr	BASEPRI, r6
   2b004:	f3bf 8f6f 	isb	sy
}
   2b008:	4620      	mov	r0, r4
   2b00a:	bd70      	pop	{r4, r5, r6, pc}
   2b00c:	2000ef30 	.word	0x2000ef30
   2b010:	00039e53 	.word	0x00039e53
   2b014:	00039eac 	.word	0x00039eac
   2b018:	00039995 	.word	0x00039995
   2b01c:	00039ec1 	.word	0x00039ec1
   2b020:	00039e80 	.word	0x00039e80
   2b024:	00039e97 	.word	0x00039e97

0002b028 <z_unpend_first_thread>:
{
   2b028:	b570      	push	{r4, r5, r6, lr}
   2b02a:	4605      	mov	r5, r0
	__asm__ volatile(
   2b02c:	f04f 0320 	mov.w	r3, #32
   2b030:	f3ef 8611 	mrs	r6, BASEPRI
   2b034:	f383 8812 	msr	BASEPRI_MAX, r3
   2b038:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b03c:	481b      	ldr	r0, [pc, #108]	; (2b0ac <z_unpend_first_thread+0x84>)
   2b03e:	f7fe f87b 	bl	29138 <z_spin_lock_valid>
   2b042:	b968      	cbnz	r0, 2b060 <z_unpend_first_thread+0x38>
   2b044:	2394      	movs	r3, #148	; 0x94
   2b046:	4a1a      	ldr	r2, [pc, #104]	; (2b0b0 <z_unpend_first_thread+0x88>)
   2b048:	491a      	ldr	r1, [pc, #104]	; (2b0b4 <z_unpend_first_thread+0x8c>)
   2b04a:	481b      	ldr	r0, [pc, #108]	; (2b0b8 <z_unpend_first_thread+0x90>)
   2b04c:	f004 f9ba 	bl	2f3c4 <assert_print>
   2b050:	4916      	ldr	r1, [pc, #88]	; (2b0ac <z_unpend_first_thread+0x84>)
   2b052:	481a      	ldr	r0, [pc, #104]	; (2b0bc <z_unpend_first_thread+0x94>)
   2b054:	f004 f9b6 	bl	2f3c4 <assert_print>
   2b058:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b05a:	4815      	ldr	r0, [pc, #84]	; (2b0b0 <z_unpend_first_thread+0x88>)
   2b05c:	f004 f9ab 	bl	2f3b6 <assert_post_action>
	z_spin_lock_set_owner(l);
   2b060:	4812      	ldr	r0, [pc, #72]	; (2b0ac <z_unpend_first_thread+0x84>)
   2b062:	f7fe f885 	bl	29170 <z_spin_lock_set_owner>
	return list->head == list;
   2b066:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2b068:	42a5      	cmp	r5, r4
   2b06a:	d017      	beq.n	2b09c <z_unpend_first_thread+0x74>
		if (thread != NULL) {
   2b06c:	b134      	cbz	r4, 2b07c <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
   2b06e:	4620      	mov	r0, r4
   2b070:	f7ff feca 	bl	2ae08 <unpend_thread_no_timeout>
   2b074:	f104 0018 	add.w	r0, r4, #24
   2b078:	f000 fbfa 	bl	2b870 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b07c:	480b      	ldr	r0, [pc, #44]	; (2b0ac <z_unpend_first_thread+0x84>)
   2b07e:	f7fe f869 	bl	29154 <z_spin_unlock_valid>
   2b082:	b968      	cbnz	r0, 2b0a0 <z_unpend_first_thread+0x78>
   2b084:	23c2      	movs	r3, #194	; 0xc2
   2b086:	4a0a      	ldr	r2, [pc, #40]	; (2b0b0 <z_unpend_first_thread+0x88>)
   2b088:	490d      	ldr	r1, [pc, #52]	; (2b0c0 <z_unpend_first_thread+0x98>)
   2b08a:	480b      	ldr	r0, [pc, #44]	; (2b0b8 <z_unpend_first_thread+0x90>)
   2b08c:	f004 f99a 	bl	2f3c4 <assert_print>
   2b090:	4906      	ldr	r1, [pc, #24]	; (2b0ac <z_unpend_first_thread+0x84>)
   2b092:	480c      	ldr	r0, [pc, #48]	; (2b0c4 <z_unpend_first_thread+0x9c>)
   2b094:	f004 f996 	bl	2f3c4 <assert_print>
   2b098:	21c2      	movs	r1, #194	; 0xc2
   2b09a:	e7de      	b.n	2b05a <z_unpend_first_thread+0x32>
   2b09c:	2400      	movs	r4, #0
   2b09e:	e7ed      	b.n	2b07c <z_unpend_first_thread+0x54>
	__asm__ volatile(
   2b0a0:	f386 8811 	msr	BASEPRI, r6
   2b0a4:	f3bf 8f6f 	isb	sy
}
   2b0a8:	4620      	mov	r0, r4
   2b0aa:	bd70      	pop	{r4, r5, r6, pc}
   2b0ac:	2000ef30 	.word	0x2000ef30
   2b0b0:	00039e53 	.word	0x00039e53
   2b0b4:	00039eac 	.word	0x00039eac
   2b0b8:	00039995 	.word	0x00039995
   2b0bc:	00039ec1 	.word	0x00039ec1
   2b0c0:	00039e80 	.word	0x00039e80
   2b0c4:	00039e97 	.word	0x00039e97

0002b0c8 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   2b0c8:	4b02      	ldr	r3, [pc, #8]	; (2b0d4 <z_sched_init+0xc>)
   2b0ca:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
   2b0ce:	e9c3 2207 	strd	r2, r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
   2b0d2:	4770      	bx	lr
   2b0d4:	2000eeec 	.word	0x2000eeec

0002b0d8 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   2b0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b0da:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   2b0de:	b16b      	cbz	r3, 2b0fc <z_impl_k_yield+0x24>
   2b0e0:	493c      	ldr	r1, [pc, #240]	; (2b1d4 <z_impl_k_yield+0xfc>)
   2b0e2:	f240 5371 	movw	r3, #1393	; 0x571
   2b0e6:	4a3c      	ldr	r2, [pc, #240]	; (2b1d8 <z_impl_k_yield+0x100>)
   2b0e8:	483c      	ldr	r0, [pc, #240]	; (2b1dc <z_impl_k_yield+0x104>)
   2b0ea:	f004 f96b 	bl	2f3c4 <assert_print>
   2b0ee:	483c      	ldr	r0, [pc, #240]	; (2b1e0 <z_impl_k_yield+0x108>)
   2b0f0:	f004 f968 	bl	2f3c4 <assert_print>
   2b0f4:	f240 5171 	movw	r1, #1393	; 0x571
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2b0f8:	4837      	ldr	r0, [pc, #220]	; (2b1d8 <z_impl_k_yield+0x100>)
   2b0fa:	e017      	b.n	2b12c <z_impl_k_yield+0x54>
	__asm__ volatile(
   2b0fc:	f04f 0320 	mov.w	r3, #32
   2b100:	f3ef 8611 	mrs	r6, BASEPRI
   2b104:	f383 8812 	msr	BASEPRI_MAX, r3
   2b108:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b10c:	4835      	ldr	r0, [pc, #212]	; (2b1e4 <z_impl_k_yield+0x10c>)
   2b10e:	f7fe f813 	bl	29138 <z_spin_lock_valid>
   2b112:	b968      	cbnz	r0, 2b130 <z_impl_k_yield+0x58>
   2b114:	2394      	movs	r3, #148	; 0x94
   2b116:	4a34      	ldr	r2, [pc, #208]	; (2b1e8 <z_impl_k_yield+0x110>)
   2b118:	4934      	ldr	r1, [pc, #208]	; (2b1ec <z_impl_k_yield+0x114>)
   2b11a:	4830      	ldr	r0, [pc, #192]	; (2b1dc <z_impl_k_yield+0x104>)
   2b11c:	f004 f952 	bl	2f3c4 <assert_print>
   2b120:	4930      	ldr	r1, [pc, #192]	; (2b1e4 <z_impl_k_yield+0x10c>)
   2b122:	4833      	ldr	r0, [pc, #204]	; (2b1f0 <z_impl_k_yield+0x118>)
   2b124:	f004 f94e 	bl	2f3c4 <assert_print>
   2b128:	2194      	movs	r1, #148	; 0x94
   2b12a:	482f      	ldr	r0, [pc, #188]	; (2b1e8 <z_impl_k_yield+0x110>)
   2b12c:	f004 f943 	bl	2f3b6 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   2b130:	4c30      	ldr	r4, [pc, #192]	; (2b1f4 <z_impl_k_yield+0x11c>)
	z_spin_lock_set_owner(l);
   2b132:	482c      	ldr	r0, [pc, #176]	; (2b1e4 <z_impl_k_yield+0x10c>)
   2b134:	f7fe f81c 	bl	29170 <z_spin_lock_set_owner>
   2b138:	68a1      	ldr	r1, [r4, #8]
	_priq_run_remove(thread_runq(thread), thread);
   2b13a:	f104 051c 	add.w	r5, r4, #28
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2b13e:	7b4b      	ldrb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   2b140:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2b142:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2b146:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   2b148:	f7ff fba6 	bl	2a898 <z_priq_dumb_remove>
	}
	queue_thread(_current);
   2b14c:	68a3      	ldr	r3, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   2b14e:	7b5a      	ldrb	r2, [r3, #13]
   2b150:	f062 027f 	orn	r2, r2, #127	; 0x7f
   2b154:	735a      	strb	r2, [r3, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2b156:	4a28      	ldr	r2, [pc, #160]	; (2b1f8 <z_impl_k_yield+0x120>)
   2b158:	4293      	cmp	r3, r2
   2b15a:	d107      	bne.n	2b16c <z_impl_k_yield+0x94>
   2b15c:	4927      	ldr	r1, [pc, #156]	; (2b1fc <z_impl_k_yield+0x124>)
   2b15e:	23bc      	movs	r3, #188	; 0xbc
   2b160:	4a1d      	ldr	r2, [pc, #116]	; (2b1d8 <z_impl_k_yield+0x100>)
   2b162:	481e      	ldr	r0, [pc, #120]	; (2b1dc <z_impl_k_yield+0x104>)
   2b164:	f004 f92e 	bl	2f3c4 <assert_print>
   2b168:	21bc      	movs	r1, #188	; 0xbc
   2b16a:	e7c5      	b.n	2b0f8 <z_impl_k_yield+0x20>
	return list->head == list;
   2b16c:	69e2      	ldr	r2, [r4, #28]
	return (node == list->tail) ? NULL : node->next;
   2b16e:	6a21      	ldr	r1, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2b170:	42aa      	cmp	r2, r5
   2b172:	bf08      	it	eq
   2b174:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2b176:	b922      	cbnz	r2, 2b182 <z_impl_k_yield+0xaa>
	node->prev = tail;
   2b178:	e9c3 5100 	strd	r5, r1, [r3]
	tail->next = node;
   2b17c:	600b      	str	r3, [r1, #0]
	list->tail = node;
   2b17e:	6223      	str	r3, [r4, #32]
}
   2b180:	e00c      	b.n	2b19c <z_impl_k_yield+0xc4>
	int32_t b1 = thread_1->base.prio;
   2b182:	f993 000e 	ldrsb.w	r0, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   2b186:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   2b18a:	42b8      	cmp	r0, r7
   2b18c:	d019      	beq.n	2b1c2 <z_impl_k_yield+0xea>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2b18e:	4287      	cmp	r7, r0
   2b190:	dd17      	ble.n	2b1c2 <z_impl_k_yield+0xea>
	sys_dnode_t *const prev = successor->prev;
   2b192:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   2b194:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   2b198:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   2b19a:	6053      	str	r3, [r2, #4]
	update_cache(1);
   2b19c:	2001      	movs	r0, #1
   2b19e:	f7ff f8fb 	bl	2a398 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b1a2:	4810      	ldr	r0, [pc, #64]	; (2b1e4 <z_impl_k_yield+0x10c>)
   2b1a4:	f7fd ffd6 	bl	29154 <z_spin_unlock_valid>
   2b1a8:	b978      	cbnz	r0, 2b1ca <z_impl_k_yield+0xf2>
   2b1aa:	23e1      	movs	r3, #225	; 0xe1
   2b1ac:	4a0e      	ldr	r2, [pc, #56]	; (2b1e8 <z_impl_k_yield+0x110>)
   2b1ae:	4914      	ldr	r1, [pc, #80]	; (2b200 <z_impl_k_yield+0x128>)
   2b1b0:	480a      	ldr	r0, [pc, #40]	; (2b1dc <z_impl_k_yield+0x104>)
   2b1b2:	f004 f907 	bl	2f3c4 <assert_print>
   2b1b6:	490b      	ldr	r1, [pc, #44]	; (2b1e4 <z_impl_k_yield+0x10c>)
   2b1b8:	4812      	ldr	r0, [pc, #72]	; (2b204 <z_impl_k_yield+0x12c>)
   2b1ba:	f004 f903 	bl	2f3c4 <assert_print>
   2b1be:	21e1      	movs	r1, #225	; 0xe1
   2b1c0:	e7b3      	b.n	2b12a <z_impl_k_yield+0x52>
	return (node == list->tail) ? NULL : node->next;
   2b1c2:	428a      	cmp	r2, r1
   2b1c4:	d0d8      	beq.n	2b178 <z_impl_k_yield+0xa0>
   2b1c6:	6812      	ldr	r2, [r2, #0]
   2b1c8:	e7d5      	b.n	2b176 <z_impl_k_yield+0x9e>
   2b1ca:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   2b1cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2b1d0:	f7e7 ba38 	b.w	12644 <arch_swap>
   2b1d4:	000415d8 	.word	0x000415d8
   2b1d8:	00041845 	.word	0x00041845
   2b1dc:	00039995 	.word	0x00039995
   2b1e0:	0003a4e8 	.word	0x0003a4e8
   2b1e4:	2000ef30 	.word	0x2000ef30
   2b1e8:	00039e53 	.word	0x00039e53
   2b1ec:	00039eac 	.word	0x00039eac
   2b1f0:	00039ec1 	.word	0x00039ec1
   2b1f4:	2000eeec 	.word	0x2000eeec
   2b1f8:	2000dff8 	.word	0x2000dff8
   2b1fc:	00041a27 	.word	0x00041a27
   2b200:	00039e80 	.word	0x00039e80
   2b204:	00039e97 	.word	0x00039e97

0002b208 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   2b208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b20c:	4605      	mov	r5, r0
   2b20e:	460e      	mov	r6, r1
   2b210:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   2b214:	b16b      	cbz	r3, 2b232 <z_tick_sleep+0x2a>
   2b216:	493f      	ldr	r1, [pc, #252]	; (2b314 <z_tick_sleep+0x10c>)
   2b218:	f240 538d 	movw	r3, #1421	; 0x58d
   2b21c:	4a3e      	ldr	r2, [pc, #248]	; (2b318 <z_tick_sleep+0x110>)
   2b21e:	483f      	ldr	r0, [pc, #252]	; (2b31c <z_tick_sleep+0x114>)
   2b220:	f004 f8d0 	bl	2f3c4 <assert_print>
   2b224:	483e      	ldr	r0, [pc, #248]	; (2b320 <z_tick_sleep+0x118>)
   2b226:	f004 f8cd 	bl	2f3c4 <assert_print>
   2b22a:	f240 518d 	movw	r1, #1421	; 0x58d
	z_add_thread_timeout(_current, timeout);
	z_mark_thread_as_suspended(_current);

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   2b22e:	483a      	ldr	r0, [pc, #232]	; (2b318 <z_tick_sleep+0x110>)
   2b230:	e025      	b.n	2b27e <z_tick_sleep+0x76>
	if (ticks == 0) {
   2b232:	ea50 0301 	orrs.w	r3, r0, r1
   2b236:	d103      	bne.n	2b240 <z_tick_sleep+0x38>
	z_impl_k_yield();
   2b238:	f7ff ff4e 	bl	2b0d8 <z_impl_k_yield>
		return 0;
   2b23c:	2000      	movs	r0, #0
   2b23e:	e066      	b.n	2b30e <z_tick_sleep+0x106>
	if (Z_TICK_ABS(ticks) <= 0) {
   2b240:	1c82      	adds	r2, r0, #2
   2b242:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   2b246:	db1c      	blt.n	2b282 <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   2b248:	f00b f83c 	bl	362c4 <sys_clock_tick_get_32>
   2b24c:	182c      	adds	r4, r5, r0
   2b24e:	f04f 0320 	mov.w	r3, #32
   2b252:	f3ef 8811 	mrs	r8, BASEPRI
   2b256:	f383 8812 	msr	BASEPRI_MAX, r3
   2b25a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b25e:	4831      	ldr	r0, [pc, #196]	; (2b324 <z_tick_sleep+0x11c>)
   2b260:	f7fd ff6a 	bl	29138 <z_spin_lock_valid>
   2b264:	b988      	cbnz	r0, 2b28a <z_tick_sleep+0x82>
   2b266:	2394      	movs	r3, #148	; 0x94
   2b268:	4a2f      	ldr	r2, [pc, #188]	; (2b328 <z_tick_sleep+0x120>)
   2b26a:	4930      	ldr	r1, [pc, #192]	; (2b32c <z_tick_sleep+0x124>)
   2b26c:	482b      	ldr	r0, [pc, #172]	; (2b31c <z_tick_sleep+0x114>)
   2b26e:	f004 f8a9 	bl	2f3c4 <assert_print>
   2b272:	492c      	ldr	r1, [pc, #176]	; (2b324 <z_tick_sleep+0x11c>)
   2b274:	482e      	ldr	r0, [pc, #184]	; (2b330 <z_tick_sleep+0x128>)
   2b276:	f004 f8a5 	bl	2f3c4 <assert_print>
   2b27a:	2194      	movs	r1, #148	; 0x94
   2b27c:	482a      	ldr	r0, [pc, #168]	; (2b328 <z_tick_sleep+0x120>)
   2b27e:	f004 f89a 	bl	2f3b6 <assert_post_action>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   2b282:	f06f 0401 	mvn.w	r4, #1
   2b286:	1a24      	subs	r4, r4, r0
   2b288:	e7e1      	b.n	2b24e <z_tick_sleep+0x46>
	pending_current = _current;
   2b28a:	4f2a      	ldr	r7, [pc, #168]	; (2b334 <z_tick_sleep+0x12c>)
	z_spin_lock_set_owner(l);
   2b28c:	4825      	ldr	r0, [pc, #148]	; (2b324 <z_tick_sleep+0x11c>)
   2b28e:	f7fd ff6f 	bl	29170 <z_spin_lock_set_owner>
   2b292:	68b8      	ldr	r0, [r7, #8]
   2b294:	4b28      	ldr	r3, [pc, #160]	; (2b338 <z_tick_sleep+0x130>)
   2b296:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   2b298:	f7ff fbd4 	bl	2aa44 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   2b29c:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   2b29e:	462a      	mov	r2, r5
   2b2a0:	4633      	mov	r3, r6
   2b2a2:	3018      	adds	r0, #24
   2b2a4:	4925      	ldr	r1, [pc, #148]	; (2b33c <z_tick_sleep+0x134>)
   2b2a6:	f000 fa23 	bl	2b6f0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   2b2aa:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b2ac:	481d      	ldr	r0, [pc, #116]	; (2b324 <z_tick_sleep+0x11c>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2b2ae:	7b53      	ldrb	r3, [r2, #13]
   2b2b0:	f043 0310 	orr.w	r3, r3, #16
   2b2b4:	7353      	strb	r3, [r2, #13]
   2b2b6:	f7fd ff4d 	bl	29154 <z_spin_unlock_valid>
   2b2ba:	b958      	cbnz	r0, 2b2d4 <z_tick_sleep+0xcc>
   2b2bc:	23e1      	movs	r3, #225	; 0xe1
   2b2be:	4a1a      	ldr	r2, [pc, #104]	; (2b328 <z_tick_sleep+0x120>)
   2b2c0:	491f      	ldr	r1, [pc, #124]	; (2b340 <z_tick_sleep+0x138>)
   2b2c2:	4816      	ldr	r0, [pc, #88]	; (2b31c <z_tick_sleep+0x114>)
   2b2c4:	f004 f87e 	bl	2f3c4 <assert_print>
   2b2c8:	4916      	ldr	r1, [pc, #88]	; (2b324 <z_tick_sleep+0x11c>)
   2b2ca:	481e      	ldr	r0, [pc, #120]	; (2b344 <z_tick_sleep+0x13c>)
   2b2cc:	f004 f87a 	bl	2f3c4 <assert_print>
   2b2d0:	21e1      	movs	r1, #225	; 0xe1
   2b2d2:	e7d3      	b.n	2b27c <z_tick_sleep+0x74>
   2b2d4:	4640      	mov	r0, r8
   2b2d6:	f7e7 f9b5 	bl	12644 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   2b2da:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   2b2dc:	7b5b      	ldrb	r3, [r3, #13]
   2b2de:	06db      	lsls	r3, r3, #27
   2b2e0:	d50c      	bpl.n	2b2fc <z_tick_sleep+0xf4>
   2b2e2:	4919      	ldr	r1, [pc, #100]	; (2b348 <z_tick_sleep+0x140>)
   2b2e4:	f240 53a9 	movw	r3, #1449	; 0x5a9
   2b2e8:	4a0b      	ldr	r2, [pc, #44]	; (2b318 <z_tick_sleep+0x110>)
   2b2ea:	480c      	ldr	r0, [pc, #48]	; (2b31c <z_tick_sleep+0x114>)
   2b2ec:	f004 f86a 	bl	2f3c4 <assert_print>
   2b2f0:	480b      	ldr	r0, [pc, #44]	; (2b320 <z_tick_sleep+0x118>)
   2b2f2:	f004 f867 	bl	2f3c4 <assert_print>
   2b2f6:	f240 51a9 	movw	r1, #1449	; 0x5a9
   2b2fa:	e798      	b.n	2b22e <z_tick_sleep+0x26>

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   2b2fc:	f00a ffe2 	bl	362c4 <sys_clock_tick_get_32>
   2b300:	1a20      	subs	r0, r4, r0
   2b302:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   2b306:	2801      	cmp	r0, #1
   2b308:	f173 0300 	sbcs.w	r3, r3, #0
   2b30c:	db96      	blt.n	2b23c <z_tick_sleep+0x34>
		return ticks;
	}
#endif

	return 0;
}
   2b30e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2b312:	bf00      	nop
   2b314:	000415d8 	.word	0x000415d8
   2b318:	00041845 	.word	0x00041845
   2b31c:	00039995 	.word	0x00039995
   2b320:	0003a4e8 	.word	0x0003a4e8
   2b324:	2000ef30 	.word	0x2000ef30
   2b328:	00039e53 	.word	0x00039e53
   2b32c:	00039eac 	.word	0x00039eac
   2b330:	00039ec1 	.word	0x00039ec1
   2b334:	2000eeec 	.word	0x2000eeec
   2b338:	2000ef24 	.word	0x2000ef24
   2b33c:	0003629d 	.word	0x0003629d
   2b340:	00039e80 	.word	0x00039e80
   2b344:	00039e97 	.word	0x00039e97
   2b348:	00041b23 	.word	0x00041b23

0002b34c <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   2b34c:	b508      	push	{r3, lr}
   2b34e:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   2b352:	b173      	cbz	r3, 2b372 <z_impl_k_sleep+0x26>
   2b354:	4912      	ldr	r1, [pc, #72]	; (2b3a0 <z_impl_k_sleep+0x54>)
   2b356:	f44f 63b7 	mov.w	r3, #1464	; 0x5b8
   2b35a:	4a12      	ldr	r2, [pc, #72]	; (2b3a4 <z_impl_k_sleep+0x58>)
   2b35c:	4812      	ldr	r0, [pc, #72]	; (2b3a8 <z_impl_k_sleep+0x5c>)
   2b35e:	f004 f831 	bl	2f3c4 <assert_print>
   2b362:	4812      	ldr	r0, [pc, #72]	; (2b3ac <z_impl_k_sleep+0x60>)
   2b364:	f004 f82e 	bl	2f3c4 <assert_print>
   2b368:	f44f 61b7 	mov.w	r1, #1464	; 0x5b8
   2b36c:	480d      	ldr	r0, [pc, #52]	; (2b3a4 <z_impl_k_sleep+0x58>)
   2b36e:	f004 f822 	bl	2f3b6 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2b372:	f1b1 3fff 	cmp.w	r1, #4294967295
   2b376:	bf08      	it	eq
   2b378:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   2b37c:	d106      	bne.n	2b38c <z_impl_k_sleep+0x40>
		k_thread_suspend(_current);
   2b37e:	4b0c      	ldr	r3, [pc, #48]	; (2b3b0 <z_impl_k_sleep+0x64>)
   2b380:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   2b382:	f7ff fcd9 	bl	2ad38 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   2b386:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   2b38a:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   2b38c:	f7ff ff3c 	bl	2b208 <z_tick_sleep>
   2b390:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2b394:	fb80 0303 	smull	r0, r3, r0, r3
   2b398:	0bc0      	lsrs	r0, r0, #15
   2b39a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   2b39e:	e7f4      	b.n	2b38a <z_impl_k_sleep+0x3e>
   2b3a0:	000415d8 	.word	0x000415d8
   2b3a4:	00041845 	.word	0x00041845
   2b3a8:	00039995 	.word	0x00039995
   2b3ac:	0003a4e8 	.word	0x0003a4e8
   2b3b0:	2000eeec 	.word	0x2000eeec

0002b3b4 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   2b3b4:	4b01      	ldr	r3, [pc, #4]	; (2b3bc <z_impl_z_current_get+0x8>)
   2b3b6:	6898      	ldr	r0, [r3, #8]
   2b3b8:	4770      	bx	lr
   2b3ba:	bf00      	nop
   2b3bc:	2000eeec 	.word	0x2000eeec

0002b3c0 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   2b3c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b3c4:	4604      	mov	r4, r0
   2b3c6:	f04f 0320 	mov.w	r3, #32
   2b3ca:	f3ef 8611 	mrs	r6, BASEPRI
   2b3ce:	f383 8812 	msr	BASEPRI_MAX, r3
   2b3d2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b3d6:	4851      	ldr	r0, [pc, #324]	; (2b51c <z_thread_abort+0x15c>)
   2b3d8:	f7fd feae 	bl	29138 <z_spin_lock_valid>
   2b3dc:	b968      	cbnz	r0, 2b3fa <z_thread_abort+0x3a>
   2b3de:	2394      	movs	r3, #148	; 0x94
   2b3e0:	4a4f      	ldr	r2, [pc, #316]	; (2b520 <z_thread_abort+0x160>)
   2b3e2:	4950      	ldr	r1, [pc, #320]	; (2b524 <z_thread_abort+0x164>)
   2b3e4:	4850      	ldr	r0, [pc, #320]	; (2b528 <z_thread_abort+0x168>)
   2b3e6:	f003 ffed 	bl	2f3c4 <assert_print>
   2b3ea:	494c      	ldr	r1, [pc, #304]	; (2b51c <z_thread_abort+0x15c>)
   2b3ec:	484f      	ldr	r0, [pc, #316]	; (2b52c <z_thread_abort+0x16c>)
   2b3ee:	f003 ffe9 	bl	2f3c4 <assert_print>
   2b3f2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b3f4:	484a      	ldr	r0, [pc, #296]	; (2b520 <z_thread_abort+0x160>)
   2b3f6:	f003 ffde 	bl	2f3b6 <assert_post_action>
	z_spin_lock_set_owner(l);
   2b3fa:	4848      	ldr	r0, [pc, #288]	; (2b51c <z_thread_abort+0x15c>)
   2b3fc:	f7fd feb8 	bl	29170 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   2b400:	7b23      	ldrb	r3, [r4, #12]
   2b402:	07d9      	lsls	r1, r3, #31
   2b404:	d522      	bpl.n	2b44c <z_thread_abort+0x8c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b406:	4845      	ldr	r0, [pc, #276]	; (2b51c <z_thread_abort+0x15c>)
   2b408:	f7fd fea4 	bl	29154 <z_spin_unlock_valid>
   2b40c:	b958      	cbnz	r0, 2b426 <z_thread_abort+0x66>
   2b40e:	23c2      	movs	r3, #194	; 0xc2
   2b410:	4a43      	ldr	r2, [pc, #268]	; (2b520 <z_thread_abort+0x160>)
   2b412:	4947      	ldr	r1, [pc, #284]	; (2b530 <z_thread_abort+0x170>)
   2b414:	4844      	ldr	r0, [pc, #272]	; (2b528 <z_thread_abort+0x168>)
   2b416:	f003 ffd5 	bl	2f3c4 <assert_print>
   2b41a:	4940      	ldr	r1, [pc, #256]	; (2b51c <z_thread_abort+0x15c>)
   2b41c:	4845      	ldr	r0, [pc, #276]	; (2b534 <z_thread_abort+0x174>)
   2b41e:	f003 ffd1 	bl	2f3c4 <assert_print>
   2b422:	21c2      	movs	r1, #194	; 0xc2
   2b424:	e7e6      	b.n	2b3f4 <z_thread_abort+0x34>
	__asm__ volatile(
   2b426:	f386 8811 	msr	BASEPRI, r6
   2b42a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
   2b42e:	f240 63ca 	movw	r3, #1738	; 0x6ca
   2b432:	4a41      	ldr	r2, [pc, #260]	; (2b538 <z_thread_abort+0x178>)
   2b434:	4941      	ldr	r1, [pc, #260]	; (2b53c <z_thread_abort+0x17c>)
   2b436:	483c      	ldr	r0, [pc, #240]	; (2b528 <z_thread_abort+0x168>)
   2b438:	f003 ffc4 	bl	2f3c4 <assert_print>
   2b43c:	4621      	mov	r1, r4
   2b43e:	4840      	ldr	r0, [pc, #256]	; (2b540 <z_thread_abort+0x180>)
   2b440:	f003 ffc0 	bl	2f3c4 <assert_print>
   2b444:	f240 61ca 	movw	r1, #1738	; 0x6ca
	}
#endif
	end_thread(thread);
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
   2b448:	483b      	ldr	r0, [pc, #236]	; (2b538 <z_thread_abort+0x178>)
   2b44a:	e7d4      	b.n	2b3f6 <z_thread_abort+0x36>
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   2b44c:	7b63      	ldrb	r3, [r4, #13]
   2b44e:	071a      	lsls	r2, r3, #28
   2b450:	d50a      	bpl.n	2b468 <z_thread_abort+0xa8>
   2b452:	4832      	ldr	r0, [pc, #200]	; (2b51c <z_thread_abort+0x15c>)
   2b454:	f7fd fe7e 	bl	29154 <z_spin_unlock_valid>
   2b458:	2800      	cmp	r0, #0
   2b45a:	d0d8      	beq.n	2b40e <z_thread_abort+0x4e>
   2b45c:	f386 8811 	msr	BASEPRI, r6
   2b460:	f3bf 8f6f 	isb	sy
	}
	k_spin_unlock(&sched_spinlock, key);
}
   2b464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   2b468:	f023 0220 	bic.w	r2, r3, #32
   2b46c:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   2b470:	09d2      	lsrs	r2, r2, #7
   2b472:	d12c      	bne.n	2b4ce <z_thread_abort+0x10e>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   2b474:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   2b476:	68a3      	ldr	r3, [r4, #8]
   2b478:	b113      	cbz	r3, 2b480 <z_thread_abort+0xc0>
			unpend_thread_no_timeout(thread);
   2b47a:	4620      	mov	r0, r4
   2b47c:	f7ff fcc4 	bl	2ae08 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   2b480:	f104 0018 	add.w	r0, r4, #24
   2b484:	f000 f9f4 	bl	2b870 <z_abort_timeout>
   2b488:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   2b48c:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   2b490:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2b492:	42bd      	cmp	r5, r7
   2b494:	d000      	beq.n	2b498 <z_thread_abort+0xd8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2b496:	bb25      	cbnz	r5, 2b4e2 <z_thread_abort+0x122>
		update_cache(1);
   2b498:	2001      	movs	r0, #1
   2b49a:	f7fe ff7d 	bl	2a398 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   2b49e:	4b29      	ldr	r3, [pc, #164]	; (2b544 <z_thread_abort+0x184>)
   2b4a0:	689b      	ldr	r3, [r3, #8]
   2b4a2:	42a3      	cmp	r3, r4
   2b4a4:	d1d5      	bne.n	2b452 <z_thread_abort+0x92>
   2b4a6:	f3ef 8305 	mrs	r3, IPSR
   2b4aa:	2b00      	cmp	r3, #0
   2b4ac:	d1d1      	bne.n	2b452 <z_thread_abort+0x92>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b4ae:	481b      	ldr	r0, [pc, #108]	; (2b51c <z_thread_abort+0x15c>)
   2b4b0:	f7fd fe50 	bl	29154 <z_spin_unlock_valid>
   2b4b4:	bb10      	cbnz	r0, 2b4fc <z_thread_abort+0x13c>
   2b4b6:	23e1      	movs	r3, #225	; 0xe1
   2b4b8:	4a19      	ldr	r2, [pc, #100]	; (2b520 <z_thread_abort+0x160>)
   2b4ba:	491d      	ldr	r1, [pc, #116]	; (2b530 <z_thread_abort+0x170>)
   2b4bc:	481a      	ldr	r0, [pc, #104]	; (2b528 <z_thread_abort+0x168>)
   2b4be:	f003 ff81 	bl	2f3c4 <assert_print>
   2b4c2:	4916      	ldr	r1, [pc, #88]	; (2b51c <z_thread_abort+0x15c>)
   2b4c4:	481b      	ldr	r0, [pc, #108]	; (2b534 <z_thread_abort+0x174>)
   2b4c6:	f003 ff7d 	bl	2f3c4 <assert_print>
   2b4ca:	21e1      	movs	r1, #225	; 0xe1
   2b4cc:	e792      	b.n	2b3f4 <z_thread_abort+0x34>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2b4ce:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   2b4d2:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
   2b4d6:	4621      	mov	r1, r4
   2b4d8:	481b      	ldr	r0, [pc, #108]	; (2b548 <z_thread_abort+0x188>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2b4da:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   2b4dc:	f7ff f9dc 	bl	2a898 <z_priq_dumb_remove>
}
   2b4e0:	e7c9      	b.n	2b476 <z_thread_abort+0xb6>
		unpend_thread_no_timeout(thread);
   2b4e2:	4628      	mov	r0, r5
   2b4e4:	f7ff fc90 	bl	2ae08 <unpend_thread_no_timeout>
   2b4e8:	f105 0018 	add.w	r0, r5, #24
   2b4ec:	f000 f9c0 	bl	2b870 <z_abort_timeout>
		ready_thread(thread);
   2b4f0:	4628      	mov	r0, r5
   2b4f2:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
   2b4f6:	f7fe ff83 	bl	2a400 <ready_thread>
   2b4fa:	e7c9      	b.n	2b490 <z_thread_abort+0xd0>
   2b4fc:	4630      	mov	r0, r6
   2b4fe:	f7e7 f8a1 	bl	12644 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   2b502:	490e      	ldr	r1, [pc, #56]	; (2b53c <z_thread_abort+0x17c>)
   2b504:	f240 63f9 	movw	r3, #1785	; 0x6f9
   2b508:	4a0b      	ldr	r2, [pc, #44]	; (2b538 <z_thread_abort+0x178>)
   2b50a:	4807      	ldr	r0, [pc, #28]	; (2b528 <z_thread_abort+0x168>)
   2b50c:	f003 ff5a 	bl	2f3c4 <assert_print>
   2b510:	480e      	ldr	r0, [pc, #56]	; (2b54c <z_thread_abort+0x18c>)
   2b512:	f003 ff57 	bl	2f3c4 <assert_print>
   2b516:	f240 61f9 	movw	r1, #1785	; 0x6f9
   2b51a:	e795      	b.n	2b448 <z_thread_abort+0x88>
   2b51c:	2000ef30 	.word	0x2000ef30
   2b520:	00039e53 	.word	0x00039e53
   2b524:	00039eac 	.word	0x00039eac
   2b528:	00039995 	.word	0x00039995
   2b52c:	00039ec1 	.word	0x00039ec1
   2b530:	00039e80 	.word	0x00039e80
   2b534:	00039e97 	.word	0x00039e97
   2b538:	00041845 	.word	0x00041845
   2b53c:	0003ea9e 	.word	0x0003ea9e
   2b540:	00041b63 	.word	0x00041b63
   2b544:	2000eeec 	.word	0x2000eeec
   2b548:	2000ef08 	.word	0x2000ef08
   2b54c:	00041b82 	.word	0x00041b82

0002b550 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   2b550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2b554:	4606      	mov	r6, r0
   2b556:	4688      	mov	r8, r1
   2b558:	4617      	mov	r7, r2
	__asm__ volatile(
   2b55a:	f04f 0320 	mov.w	r3, #32
   2b55e:	f3ef 8911 	mrs	r9, BASEPRI
   2b562:	f383 8812 	msr	BASEPRI_MAX, r3
   2b566:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b56a:	4821      	ldr	r0, [pc, #132]	; (2b5f0 <z_sched_wake+0xa0>)
   2b56c:	f7fd fde4 	bl	29138 <z_spin_lock_valid>
   2b570:	4605      	mov	r5, r0
   2b572:	b968      	cbnz	r0, 2b590 <z_sched_wake+0x40>
   2b574:	2394      	movs	r3, #148	; 0x94
   2b576:	4a1f      	ldr	r2, [pc, #124]	; (2b5f4 <z_sched_wake+0xa4>)
   2b578:	491f      	ldr	r1, [pc, #124]	; (2b5f8 <z_sched_wake+0xa8>)
   2b57a:	4820      	ldr	r0, [pc, #128]	; (2b5fc <z_sched_wake+0xac>)
   2b57c:	f003 ff22 	bl	2f3c4 <assert_print>
   2b580:	491b      	ldr	r1, [pc, #108]	; (2b5f0 <z_sched_wake+0xa0>)
   2b582:	481f      	ldr	r0, [pc, #124]	; (2b600 <z_sched_wake+0xb0>)
   2b584:	f003 ff1e 	bl	2f3c4 <assert_print>
   2b588:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b58a:	481a      	ldr	r0, [pc, #104]	; (2b5f4 <z_sched_wake+0xa4>)
   2b58c:	f003 ff13 	bl	2f3b6 <assert_post_action>
	z_spin_lock_set_owner(l);
   2b590:	4817      	ldr	r0, [pc, #92]	; (2b5f0 <z_sched_wake+0xa0>)
   2b592:	f7fd fded 	bl	29170 <z_spin_lock_set_owner>
	return list->head == list;
   2b596:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2b598:	42a6      	cmp	r6, r4
   2b59a:	d01d      	beq.n	2b5d8 <z_sched_wake+0x88>
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);

		if (thread != NULL) {
   2b59c:	b1f4      	cbz	r4, 2b5dc <z_sched_wake+0x8c>
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   2b59e:	4620      	mov	r0, r4
   2b5a0:	f8c4 807c 	str.w	r8, [r4, #124]	; 0x7c
	thread->base.swap_data = data;
   2b5a4:	6167      	str	r7, [r4, #20]
   2b5a6:	f7ff fc2f 	bl	2ae08 <unpend_thread_no_timeout>
   2b5aa:	f104 0018 	add.w	r0, r4, #24
   2b5ae:	f000 f95f 	bl	2b870 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   2b5b2:	4620      	mov	r0, r4
   2b5b4:	f7fe ff24 	bl	2a400 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b5b8:	480d      	ldr	r0, [pc, #52]	; (2b5f0 <z_sched_wake+0xa0>)
   2b5ba:	f7fd fdcb 	bl	29154 <z_spin_unlock_valid>
   2b5be:	b978      	cbnz	r0, 2b5e0 <z_sched_wake+0x90>
   2b5c0:	23c2      	movs	r3, #194	; 0xc2
   2b5c2:	4a0c      	ldr	r2, [pc, #48]	; (2b5f4 <z_sched_wake+0xa4>)
   2b5c4:	490f      	ldr	r1, [pc, #60]	; (2b604 <z_sched_wake+0xb4>)
   2b5c6:	480d      	ldr	r0, [pc, #52]	; (2b5fc <z_sched_wake+0xac>)
   2b5c8:	f003 fefc 	bl	2f3c4 <assert_print>
   2b5cc:	4908      	ldr	r1, [pc, #32]	; (2b5f0 <z_sched_wake+0xa0>)
   2b5ce:	480e      	ldr	r0, [pc, #56]	; (2b608 <z_sched_wake+0xb8>)
   2b5d0:	f003 fef8 	bl	2f3c4 <assert_print>
   2b5d4:	21c2      	movs	r1, #194	; 0xc2
   2b5d6:	e7d8      	b.n	2b58a <z_sched_wake+0x3a>
	bool ret = false;
   2b5d8:	2500      	movs	r5, #0
   2b5da:	e7ed      	b.n	2b5b8 <z_sched_wake+0x68>
   2b5dc:	4625      	mov	r5, r4
   2b5de:	e7eb      	b.n	2b5b8 <z_sched_wake+0x68>
	__asm__ volatile(
   2b5e0:	f389 8811 	msr	BASEPRI, r9
   2b5e4:	f3bf 8f6f 	isb	sy
			ret = true;
		}
	}

	return ret;
}
   2b5e8:	4628      	mov	r0, r5
   2b5ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2b5ee:	bf00      	nop
   2b5f0:	2000ef30 	.word	0x2000ef30
   2b5f4:	00039e53 	.word	0x00039e53
   2b5f8:	00039eac 	.word	0x00039eac
   2b5fc:	00039995 	.word	0x00039995
   2b600:	00039ec1 	.word	0x00039ec1
   2b604:	00039e80 	.word	0x00039e80
   2b608:	00039e97 	.word	0x00039e97

0002b60c <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   2b60c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   2b60e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   2b612:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   2b614:	e9cd 6700 	strd	r6, r7, [sp]
   2b618:	f7ff fa86 	bl	2ab28 <z_pend_curr>

	if (data != NULL) {
   2b61c:	b11c      	cbz	r4, 2b626 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   2b61e:	4b03      	ldr	r3, [pc, #12]	; (2b62c <z_sched_wait+0x20>)
   2b620:	689b      	ldr	r3, [r3, #8]
   2b622:	695b      	ldr	r3, [r3, #20]
   2b624:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   2b626:	b002      	add	sp, #8
   2b628:	bdd0      	pop	{r4, r6, r7, pc}
   2b62a:	bf00      	nop
   2b62c:	2000eeec 	.word	0x2000eeec

0002b630 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   2b630:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   2b632:	4806      	ldr	r0, [pc, #24]	; (2b64c <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   2b634:	4a06      	ldr	r2, [pc, #24]	; (2b650 <z_data_copy+0x20>)
   2b636:	4907      	ldr	r1, [pc, #28]	; (2b654 <z_data_copy+0x24>)
   2b638:	1a12      	subs	r2, r2, r0
   2b63a:	f00a fd1a 	bl	36072 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   2b63e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   2b642:	4a05      	ldr	r2, [pc, #20]	; (2b658 <z_data_copy+0x28>)
   2b644:	4905      	ldr	r1, [pc, #20]	; (2b65c <z_data_copy+0x2c>)
   2b646:	4806      	ldr	r0, [pc, #24]	; (2b660 <z_data_copy+0x30>)
   2b648:	f00a bd13 	b.w	36072 <z_early_memcpy>
   2b64c:	2000c580 	.word	0x2000c580
   2b650:	2000d1b8 	.word	0x2000d1b8
   2b654:	00042268 	.word	0x00042268
   2b658:	00000000 	.word	0x00000000
   2b65c:	00042250 	.word	0x00042250
   2b660:	2000c580 	.word	0x2000c580

0002b664 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   2b664:	4b03      	ldr	r3, [pc, #12]	; (2b674 <elapsed+0x10>)
   2b666:	681b      	ldr	r3, [r3, #0]
   2b668:	b90b      	cbnz	r3, 2b66e <elapsed+0xa>
   2b66a:	f7f5 beeb 	b.w	21444 <sys_clock_elapsed>
}
   2b66e:	2000      	movs	r0, #0
   2b670:	4770      	bx	lr
   2b672:	bf00      	nop
   2b674:	2000ef34 	.word	0x2000ef34

0002b678 <next_timeout>:

static int32_t next_timeout(void)
{
   2b678:	b510      	push	{r4, lr}
	return list->head == list;
   2b67a:	4b0e      	ldr	r3, [pc, #56]	; (2b6b4 <next_timeout+0x3c>)
   2b67c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2b67e:	429c      	cmp	r4, r3
   2b680:	d104      	bne.n	2b68c <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   2b682:	f7ff ffef 	bl	2b664 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   2b686:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
   2b68a:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   2b68c:	f7ff ffea 	bl	2b664 <elapsed>
	if ((to == NULL) ||
   2b690:	2c00      	cmp	r4, #0
   2b692:	d0f8      	beq.n	2b686 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   2b694:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   2b698:	1a1b      	subs	r3, r3, r0
   2b69a:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   2b69e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   2b6a2:	f172 0100 	sbcs.w	r1, r2, #0
   2b6a6:	daee      	bge.n	2b686 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   2b6a8:	2a00      	cmp	r2, #0
   2b6aa:	bfac      	ite	ge
   2b6ac:	4618      	movge	r0, r3
   2b6ae:	2000      	movlt	r0, #0
	return ret;
   2b6b0:	e7eb      	b.n	2b68a <next_timeout+0x12>
   2b6b2:	bf00      	nop
   2b6b4:	2000ca8c 	.word	0x2000ca8c

0002b6b8 <remove_timeout>:
{
   2b6b8:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2b6ba:	b170      	cbz	r0, 2b6da <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   2b6bc:	4b0b      	ldr	r3, [pc, #44]	; (2b6ec <remove_timeout+0x34>)
   2b6be:	685b      	ldr	r3, [r3, #4]
   2b6c0:	4298      	cmp	r0, r3
   2b6c2:	d00a      	beq.n	2b6da <remove_timeout+0x22>
   2b6c4:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   2b6c6:	b143      	cbz	r3, 2b6da <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   2b6c8:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   2b6cc:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   2b6d0:	1912      	adds	r2, r2, r4
   2b6d2:	eb41 0105 	adc.w	r1, r1, r5
   2b6d6:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const next = node->next;
   2b6da:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2b6de:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2b6e0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2b6e2:	2300      	movs	r3, #0
	node->prev = NULL;
   2b6e4:	e9c0 3300 	strd	r3, r3, [r0]
}
   2b6e8:	bd30      	pop	{r4, r5, pc}
   2b6ea:	bf00      	nop
   2b6ec:	2000ca8c 	.word	0x2000ca8c

0002b6f0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2b6f0:	f1b3 3fff 	cmp.w	r3, #4294967295
   2b6f4:	bf08      	it	eq
   2b6f6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   2b6fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2b6fe:	4604      	mov	r4, r0
   2b700:	4692      	mov	sl, r2
   2b702:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2b704:	f000 8099 	beq.w	2b83a <z_add_timeout+0x14a>
	return node->next != NULL;
   2b708:	6806      	ldr	r6, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   2b70a:	b166      	cbz	r6, 2b726 <z_add_timeout+0x36>
   2b70c:	494c      	ldr	r1, [pc, #304]	; (2b840 <z_add_timeout+0x150>)
   2b70e:	235e      	movs	r3, #94	; 0x5e
   2b710:	4a4c      	ldr	r2, [pc, #304]	; (2b844 <z_add_timeout+0x154>)
   2b712:	484d      	ldr	r0, [pc, #308]	; (2b848 <z_add_timeout+0x158>)
   2b714:	f003 fe56 	bl	2f3c4 <assert_print>
   2b718:	484c      	ldr	r0, [pc, #304]	; (2b84c <z_add_timeout+0x15c>)
   2b71a:	f003 fe53 	bl	2f3c4 <assert_print>
   2b71e:	215e      	movs	r1, #94	; 0x5e
   2b720:	4848      	ldr	r0, [pc, #288]	; (2b844 <z_add_timeout+0x154>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b722:	f003 fe48 	bl	2f3b6 <assert_post_action>
	to->fn = fn;
   2b726:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   2b728:	f04f 0320 	mov.w	r3, #32
   2b72c:	f3ef 8711 	mrs	r7, BASEPRI
   2b730:	f383 8812 	msr	BASEPRI_MAX, r3
   2b734:	f3bf 8f6f 	isb	sy
   2b738:	4845      	ldr	r0, [pc, #276]	; (2b850 <z_add_timeout+0x160>)
   2b73a:	f7fd fcfd 	bl	29138 <z_spin_lock_valid>
   2b73e:	b960      	cbnz	r0, 2b75a <z_add_timeout+0x6a>
   2b740:	2394      	movs	r3, #148	; 0x94
   2b742:	4a44      	ldr	r2, [pc, #272]	; (2b854 <z_add_timeout+0x164>)
   2b744:	4944      	ldr	r1, [pc, #272]	; (2b858 <z_add_timeout+0x168>)
   2b746:	4840      	ldr	r0, [pc, #256]	; (2b848 <z_add_timeout+0x158>)
   2b748:	f003 fe3c 	bl	2f3c4 <assert_print>
   2b74c:	4940      	ldr	r1, [pc, #256]	; (2b850 <z_add_timeout+0x160>)
   2b74e:	4843      	ldr	r0, [pc, #268]	; (2b85c <z_add_timeout+0x16c>)
   2b750:	f003 fe38 	bl	2f3c4 <assert_print>
   2b754:	2194      	movs	r1, #148	; 0x94
   2b756:	483f      	ldr	r0, [pc, #252]	; (2b854 <z_add_timeout+0x164>)
   2b758:	e7e3      	b.n	2b722 <z_add_timeout+0x32>
	z_spin_lock_set_owner(l);
   2b75a:	483d      	ldr	r0, [pc, #244]	; (2b850 <z_add_timeout+0x160>)
   2b75c:	f7fd fd08 	bl	29170 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   2b760:	f1ba 3fff 	cmp.w	sl, #4294967295
   2b764:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   2b768:	da23      	bge.n	2b7b2 <z_add_timeout+0xc2>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   2b76a:	f06f 0301 	mvn.w	r3, #1
   2b76e:	493c      	ldr	r1, [pc, #240]	; (2b860 <z_add_timeout+0x170>)
   2b770:	e9d1 2000 	ldrd	r2, r0, [r1]
   2b774:	1a9b      	subs	r3, r3, r2
   2b776:	f04f 32ff 	mov.w	r2, #4294967295
   2b77a:	eb62 0000 	sbc.w	r0, r2, r0
   2b77e:	ebb3 030a 	subs.w	r3, r3, sl
   2b782:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   2b786:	2b01      	cmp	r3, #1
   2b788:	f170 0200 	sbcs.w	r2, r0, #0
   2b78c:	da01      	bge.n	2b792 <z_add_timeout+0xa2>
   2b78e:	2301      	movs	r3, #1
   2b790:	4630      	mov	r0, r6
   2b792:	e9c4 3004 	strd	r3, r0, [r4, #16]
	return list->head == list;
   2b796:	4b33      	ldr	r3, [pc, #204]	; (2b864 <z_add_timeout+0x174>)
   2b798:	681a      	ldr	r2, [r3, #0]
	return (node == list->tail) ? NULL : node->next;
   2b79a:	f8d3 c004 	ldr.w	ip, [r3, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2b79e:	429a      	cmp	r2, r3
   2b7a0:	bf18      	it	ne
   2b7a2:	4616      	movne	r6, r2
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   2b7a4:	b986      	cbnz	r6, 2b7c8 <z_add_timeout+0xd8>
	node->prev = tail;
   2b7a6:	e9c4 3c00 	strd	r3, ip, [r4]
	tail->next = node;
   2b7aa:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   2b7ae:	605c      	str	r4, [r3, #4]
}
   2b7b0:	e01c      	b.n	2b7ec <z_add_timeout+0xfc>
			to->dticks = timeout.ticks + 1 + elapsed();
   2b7b2:	f7ff ff57 	bl	2b664 <elapsed>
   2b7b6:	f11a 0801 	adds.w	r8, sl, #1
   2b7ba:	f145 0500 	adc.w	r5, r5, #0
   2b7be:	eb18 0300 	adds.w	r3, r8, r0
   2b7c2:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   2b7c6:	e7e4      	b.n	2b792 <z_add_timeout+0xa2>
			if (t->dticks > to->dticks) {
   2b7c8:	e9d6 1504 	ldrd	r1, r5, [r6, #16]
   2b7cc:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
   2b7d0:	428a      	cmp	r2, r1
   2b7d2:	eb70 0e05 	sbcs.w	lr, r0, r5
   2b7d6:	da23      	bge.n	2b820 <z_add_timeout+0x130>
				t->dticks -= to->dticks;
   2b7d8:	1a89      	subs	r1, r1, r2
	sys_dnode_t *const prev = successor->prev;
   2b7da:	6872      	ldr	r2, [r6, #4]
   2b7dc:	eb65 0500 	sbc.w	r5, r5, r0
   2b7e0:	e9c6 1504 	strd	r1, r5, [r6, #16]
	node->next = successor;
   2b7e4:	e9c4 6200 	strd	r6, r2, [r4]
	prev->next = node;
   2b7e8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2b7ea:	6074      	str	r4, [r6, #4]
	return list->head == list;
   2b7ec:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2b7ee:	429a      	cmp	r2, r3
   2b7f0:	d006      	beq.n	2b800 <z_add_timeout+0x110>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   2b7f2:	4294      	cmp	r4, r2
   2b7f4:	d104      	bne.n	2b800 <z_add_timeout+0x110>
			sys_clock_set_timeout(next_timeout(), false);
   2b7f6:	f7ff ff3f 	bl	2b678 <next_timeout>
   2b7fa:	2100      	movs	r1, #0
   2b7fc:	f7f5 fdf6 	bl	213ec <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b800:	4813      	ldr	r0, [pc, #76]	; (2b850 <z_add_timeout+0x160>)
   2b802:	f7fd fca7 	bl	29154 <z_spin_unlock_valid>
   2b806:	b9a0      	cbnz	r0, 2b832 <z_add_timeout+0x142>
   2b808:	23c2      	movs	r3, #194	; 0xc2
   2b80a:	4a12      	ldr	r2, [pc, #72]	; (2b854 <z_add_timeout+0x164>)
   2b80c:	4916      	ldr	r1, [pc, #88]	; (2b868 <z_add_timeout+0x178>)
   2b80e:	480e      	ldr	r0, [pc, #56]	; (2b848 <z_add_timeout+0x158>)
   2b810:	f003 fdd8 	bl	2f3c4 <assert_print>
   2b814:	490e      	ldr	r1, [pc, #56]	; (2b850 <z_add_timeout+0x160>)
   2b816:	4815      	ldr	r0, [pc, #84]	; (2b86c <z_add_timeout+0x17c>)
   2b818:	f003 fdd4 	bl	2f3c4 <assert_print>
   2b81c:	21c2      	movs	r1, #194	; 0xc2
   2b81e:	e79a      	b.n	2b756 <z_add_timeout+0x66>
			to->dticks -= t->dticks;
   2b820:	1a52      	subs	r2, r2, r1
   2b822:	eb60 0005 	sbc.w	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
   2b826:	4566      	cmp	r6, ip
   2b828:	e9c4 2004 	strd	r2, r0, [r4, #16]
   2b82c:	d0bb      	beq.n	2b7a6 <z_add_timeout+0xb6>
   2b82e:	6836      	ldr	r6, [r6, #0]
   2b830:	e7b8      	b.n	2b7a4 <z_add_timeout+0xb4>
	__asm__ volatile(
   2b832:	f387 8811 	msr	BASEPRI, r7
   2b836:	f3bf 8f6f 	isb	sy
		}
	}
}
   2b83a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2b83e:	bf00      	nop
   2b840:	00041bc8 	.word	0x00041bc8
   2b844:	00041ba4 	.word	0x00041ba4
   2b848:	00039995 	.word	0x00039995
   2b84c:	0003a4e8 	.word	0x0003a4e8
   2b850:	2000ef38 	.word	0x2000ef38
   2b854:	00039e53 	.word	0x00039e53
   2b858:	00039eac 	.word	0x00039eac
   2b85c:	00039ec1 	.word	0x00039ec1
   2b860:	2000e1c8 	.word	0x2000e1c8
   2b864:	2000ca8c 	.word	0x2000ca8c
   2b868:	00039e80 	.word	0x00039e80
   2b86c:	00039e97 	.word	0x00039e97

0002b870 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   2b870:	b538      	push	{r3, r4, r5, lr}
   2b872:	4604      	mov	r4, r0
	__asm__ volatile(
   2b874:	f04f 0320 	mov.w	r3, #32
   2b878:	f3ef 8511 	mrs	r5, BASEPRI
   2b87c:	f383 8812 	msr	BASEPRI_MAX, r3
   2b880:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b884:	4819      	ldr	r0, [pc, #100]	; (2b8ec <z_abort_timeout+0x7c>)
   2b886:	f7fd fc57 	bl	29138 <z_spin_lock_valid>
   2b88a:	b968      	cbnz	r0, 2b8a8 <z_abort_timeout+0x38>
   2b88c:	2394      	movs	r3, #148	; 0x94
   2b88e:	4a18      	ldr	r2, [pc, #96]	; (2b8f0 <z_abort_timeout+0x80>)
   2b890:	4918      	ldr	r1, [pc, #96]	; (2b8f4 <z_abort_timeout+0x84>)
   2b892:	4819      	ldr	r0, [pc, #100]	; (2b8f8 <z_abort_timeout+0x88>)
   2b894:	f003 fd96 	bl	2f3c4 <assert_print>
   2b898:	4914      	ldr	r1, [pc, #80]	; (2b8ec <z_abort_timeout+0x7c>)
   2b89a:	4818      	ldr	r0, [pc, #96]	; (2b8fc <z_abort_timeout+0x8c>)
   2b89c:	f003 fd92 	bl	2f3c4 <assert_print>
   2b8a0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b8a2:	4813      	ldr	r0, [pc, #76]	; (2b8f0 <z_abort_timeout+0x80>)
   2b8a4:	f003 fd87 	bl	2f3b6 <assert_post_action>
	z_spin_lock_set_owner(l);
   2b8a8:	4810      	ldr	r0, [pc, #64]	; (2b8ec <z_abort_timeout+0x7c>)
   2b8aa:	f7fd fc61 	bl	29170 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   2b8ae:	6823      	ldr	r3, [r4, #0]
   2b8b0:	b19b      	cbz	r3, 2b8da <z_abort_timeout+0x6a>
			remove_timeout(to);
   2b8b2:	4620      	mov	r0, r4
   2b8b4:	f7ff ff00 	bl	2b6b8 <remove_timeout>
			ret = 0;
   2b8b8:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b8ba:	480c      	ldr	r0, [pc, #48]	; (2b8ec <z_abort_timeout+0x7c>)
   2b8bc:	f7fd fc4a 	bl	29154 <z_spin_unlock_valid>
   2b8c0:	b970      	cbnz	r0, 2b8e0 <z_abort_timeout+0x70>
   2b8c2:	23c2      	movs	r3, #194	; 0xc2
   2b8c4:	4a0a      	ldr	r2, [pc, #40]	; (2b8f0 <z_abort_timeout+0x80>)
   2b8c6:	490e      	ldr	r1, [pc, #56]	; (2b900 <z_abort_timeout+0x90>)
   2b8c8:	480b      	ldr	r0, [pc, #44]	; (2b8f8 <z_abort_timeout+0x88>)
   2b8ca:	f003 fd7b 	bl	2f3c4 <assert_print>
   2b8ce:	4907      	ldr	r1, [pc, #28]	; (2b8ec <z_abort_timeout+0x7c>)
   2b8d0:	480c      	ldr	r0, [pc, #48]	; (2b904 <z_abort_timeout+0x94>)
   2b8d2:	f003 fd77 	bl	2f3c4 <assert_print>
   2b8d6:	21c2      	movs	r1, #194	; 0xc2
   2b8d8:	e7e3      	b.n	2b8a2 <z_abort_timeout+0x32>
	int ret = -EINVAL;
   2b8da:	f06f 0415 	mvn.w	r4, #21
   2b8de:	e7ec      	b.n	2b8ba <z_abort_timeout+0x4a>
	__asm__ volatile(
   2b8e0:	f385 8811 	msr	BASEPRI, r5
   2b8e4:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   2b8e8:	4620      	mov	r0, r4
   2b8ea:	bd38      	pop	{r3, r4, r5, pc}
   2b8ec:	2000ef38 	.word	0x2000ef38
   2b8f0:	00039e53 	.word	0x00039e53
   2b8f4:	00039eac 	.word	0x00039eac
   2b8f8:	00039995 	.word	0x00039995
   2b8fc:	00039ec1 	.word	0x00039ec1
   2b900:	00039e80 	.word	0x00039e80
   2b904:	00039e97 	.word	0x00039e97

0002b908 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   2b908:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2b90a:	f04f 0320 	mov.w	r3, #32
   2b90e:	f3ef 8511 	mrs	r5, BASEPRI
   2b912:	f383 8812 	msr	BASEPRI_MAX, r3
   2b916:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b91a:	4817      	ldr	r0, [pc, #92]	; (2b978 <z_get_next_timeout_expiry+0x70>)
   2b91c:	f7fd fc0c 	bl	29138 <z_spin_lock_valid>
   2b920:	b968      	cbnz	r0, 2b93e <z_get_next_timeout_expiry+0x36>
   2b922:	2394      	movs	r3, #148	; 0x94
   2b924:	4a15      	ldr	r2, [pc, #84]	; (2b97c <z_get_next_timeout_expiry+0x74>)
   2b926:	4916      	ldr	r1, [pc, #88]	; (2b980 <z_get_next_timeout_expiry+0x78>)
   2b928:	4816      	ldr	r0, [pc, #88]	; (2b984 <z_get_next_timeout_expiry+0x7c>)
   2b92a:	f003 fd4b 	bl	2f3c4 <assert_print>
   2b92e:	4912      	ldr	r1, [pc, #72]	; (2b978 <z_get_next_timeout_expiry+0x70>)
   2b930:	4815      	ldr	r0, [pc, #84]	; (2b988 <z_get_next_timeout_expiry+0x80>)
   2b932:	f003 fd47 	bl	2f3c4 <assert_print>
   2b936:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b938:	4810      	ldr	r0, [pc, #64]	; (2b97c <z_get_next_timeout_expiry+0x74>)
   2b93a:	f003 fd3c 	bl	2f3b6 <assert_post_action>
	z_spin_lock_set_owner(l);
   2b93e:	480e      	ldr	r0, [pc, #56]	; (2b978 <z_get_next_timeout_expiry+0x70>)
   2b940:	f7fd fc16 	bl	29170 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   2b944:	f7ff fe98 	bl	2b678 <next_timeout>
   2b948:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b94a:	480b      	ldr	r0, [pc, #44]	; (2b978 <z_get_next_timeout_expiry+0x70>)
   2b94c:	f7fd fc02 	bl	29154 <z_spin_unlock_valid>
   2b950:	b958      	cbnz	r0, 2b96a <z_get_next_timeout_expiry+0x62>
   2b952:	23c2      	movs	r3, #194	; 0xc2
   2b954:	4a09      	ldr	r2, [pc, #36]	; (2b97c <z_get_next_timeout_expiry+0x74>)
   2b956:	490d      	ldr	r1, [pc, #52]	; (2b98c <z_get_next_timeout_expiry+0x84>)
   2b958:	480a      	ldr	r0, [pc, #40]	; (2b984 <z_get_next_timeout_expiry+0x7c>)
   2b95a:	f003 fd33 	bl	2f3c4 <assert_print>
   2b95e:	4906      	ldr	r1, [pc, #24]	; (2b978 <z_get_next_timeout_expiry+0x70>)
   2b960:	480b      	ldr	r0, [pc, #44]	; (2b990 <z_get_next_timeout_expiry+0x88>)
   2b962:	f003 fd2f 	bl	2f3c4 <assert_print>
   2b966:	21c2      	movs	r1, #194	; 0xc2
   2b968:	e7e6      	b.n	2b938 <z_get_next_timeout_expiry+0x30>
	__asm__ volatile(
   2b96a:	f385 8811 	msr	BASEPRI, r5
   2b96e:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   2b972:	4620      	mov	r0, r4
   2b974:	bd38      	pop	{r3, r4, r5, pc}
   2b976:	bf00      	nop
   2b978:	2000ef38 	.word	0x2000ef38
   2b97c:	00039e53 	.word	0x00039e53
   2b980:	00039eac 	.word	0x00039eac
   2b984:	00039995 	.word	0x00039995
   2b988:	00039ec1 	.word	0x00039ec1
   2b98c:	00039e80 	.word	0x00039e80
   2b990:	00039e97 	.word	0x00039e97

0002b994 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   2b994:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b998:	4604      	mov	r4, r0
	__asm__ volatile(
   2b99a:	f04f 0320 	mov.w	r3, #32
   2b99e:	f3ef 8811 	mrs	r8, BASEPRI
   2b9a2:	f383 8812 	msr	BASEPRI_MAX, r3
   2b9a6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b9aa:	4847      	ldr	r0, [pc, #284]	; (2bac8 <sys_clock_announce+0x134>)
   2b9ac:	f7fd fbc4 	bl	29138 <z_spin_lock_valid>
   2b9b0:	b968      	cbnz	r0, 2b9ce <sys_clock_announce+0x3a>
   2b9b2:	2394      	movs	r3, #148	; 0x94
   2b9b4:	4a45      	ldr	r2, [pc, #276]	; (2bacc <sys_clock_announce+0x138>)
   2b9b6:	4946      	ldr	r1, [pc, #280]	; (2bad0 <sys_clock_announce+0x13c>)
   2b9b8:	4846      	ldr	r0, [pc, #280]	; (2bad4 <sys_clock_announce+0x140>)
   2b9ba:	f003 fd03 	bl	2f3c4 <assert_print>
   2b9be:	4942      	ldr	r1, [pc, #264]	; (2bac8 <sys_clock_announce+0x134>)
   2b9c0:	4845      	ldr	r0, [pc, #276]	; (2bad8 <sys_clock_announce+0x144>)
   2b9c2:	f003 fcff 	bl	2f3c4 <assert_print>
   2b9c6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b9c8:	4840      	ldr	r0, [pc, #256]	; (2bacc <sys_clock_announce+0x138>)
   2b9ca:	f003 fcf4 	bl	2f3b6 <assert_post_action>
	return list->head == list;
   2b9ce:	f8df 910c 	ldr.w	r9, [pc, #268]	; 2badc <sys_clock_announce+0x148>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   2b9d2:	f8df b10c 	ldr.w	fp, [pc, #268]	; 2bae0 <sys_clock_announce+0x14c>
	z_spin_lock_set_owner(l);
   2b9d6:	483c      	ldr	r0, [pc, #240]	; (2bac8 <sys_clock_announce+0x134>)
   2b9d8:	f7fd fbca 	bl	29170 <z_spin_lock_set_owner>
   2b9dc:	f8cb 4000 	str.w	r4, [fp]
   2b9e0:	f8d9 4000 	ldr.w	r4, [r9]
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
		t->dticks = 0;
   2b9e4:	2600      	movs	r6, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2b9e6:	454c      	cmp	r4, r9
   2b9e8:	bf08      	it	eq
   2b9ea:	2400      	moveq	r4, #0
   2b9ec:	2700      	movs	r7, #0
		curr_tick += dt;
   2b9ee:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 2bae4 <sys_clock_announce+0x150>
	     (t != NULL) && (t->dticks <= announce_remaining);
   2b9f2:	f8db 3000 	ldr.w	r3, [fp]
		curr_tick += dt;
   2b9f6:	e9da 2100 	ldrd	r2, r1, [sl]
	     (t != NULL) && (t->dticks <= announce_remaining);
   2b9fa:	2c00      	cmp	r4, #0
   2b9fc:	d049      	beq.n	2ba92 <sys_clock_announce+0xfe>
   2b9fe:	e9d4 5004 	ldrd	r5, r0, [r4, #16]
   2ba02:	ea4f 7ce3 	mov.w	ip, r3, asr #31
   2ba06:	42ab      	cmp	r3, r5
   2ba08:	eb7c 0e00 	sbcs.w	lr, ip, r0
   2ba0c:	da05      	bge.n	2ba1a <sys_clock_announce+0x86>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
   2ba0e:	1aed      	subs	r5, r5, r3
   2ba10:	eb60 000c 	sbc.w	r0, r0, ip
   2ba14:	e9c4 5004 	strd	r5, r0, [r4, #16]
   2ba18:	e03b      	b.n	2ba92 <sys_clock_announce+0xfe>
		curr_tick += dt;
   2ba1a:	18aa      	adds	r2, r5, r2
   2ba1c:	eb41 71e5 	adc.w	r1, r1, r5, asr #31
		remove_timeout(t);
   2ba20:	4620      	mov	r0, r4
		t->dticks = 0;
   2ba22:	e9c4 6704 	strd	r6, r7, [r4, #16]
		curr_tick += dt;
   2ba26:	e9ca 2100 	strd	r2, r1, [sl]
		remove_timeout(t);
   2ba2a:	f7ff fe45 	bl	2b6b8 <remove_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2ba2e:	4826      	ldr	r0, [pc, #152]	; (2bac8 <sys_clock_announce+0x134>)
   2ba30:	f7fd fb90 	bl	29154 <z_spin_unlock_valid>
   2ba34:	b958      	cbnz	r0, 2ba4e <sys_clock_announce+0xba>
   2ba36:	23c2      	movs	r3, #194	; 0xc2
   2ba38:	4a24      	ldr	r2, [pc, #144]	; (2bacc <sys_clock_announce+0x138>)
   2ba3a:	492b      	ldr	r1, [pc, #172]	; (2bae8 <sys_clock_announce+0x154>)
   2ba3c:	4825      	ldr	r0, [pc, #148]	; (2bad4 <sys_clock_announce+0x140>)
   2ba3e:	f003 fcc1 	bl	2f3c4 <assert_print>
   2ba42:	4921      	ldr	r1, [pc, #132]	; (2bac8 <sys_clock_announce+0x134>)
   2ba44:	4829      	ldr	r0, [pc, #164]	; (2baec <sys_clock_announce+0x158>)
   2ba46:	f003 fcbd 	bl	2f3c4 <assert_print>
   2ba4a:	21c2      	movs	r1, #194	; 0xc2
   2ba4c:	e7bc      	b.n	2b9c8 <sys_clock_announce+0x34>
	__asm__ volatile(
   2ba4e:	f388 8811 	msr	BASEPRI, r8
   2ba52:	f3bf 8f6f 	isb	sy
		t->fn(t);
   2ba56:	4620      	mov	r0, r4
   2ba58:	68a3      	ldr	r3, [r4, #8]
   2ba5a:	4798      	blx	r3
	__asm__ volatile(
   2ba5c:	f04f 0320 	mov.w	r3, #32
   2ba60:	f3ef 8811 	mrs	r8, BASEPRI
   2ba64:	f383 8812 	msr	BASEPRI_MAX, r3
   2ba68:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2ba6c:	4816      	ldr	r0, [pc, #88]	; (2bac8 <sys_clock_announce+0x134>)
   2ba6e:	f7fd fb63 	bl	29138 <z_spin_lock_valid>
   2ba72:	2800      	cmp	r0, #0
   2ba74:	d09d      	beq.n	2b9b2 <sys_clock_announce+0x1e>
	z_spin_lock_set_owner(l);
   2ba76:	4814      	ldr	r0, [pc, #80]	; (2bac8 <sys_clock_announce+0x134>)
   2ba78:	f7fd fb7a 	bl	29170 <z_spin_lock_set_owner>
		announce_remaining -= dt;
   2ba7c:	f8db 3000 	ldr.w	r3, [fp]
	return list->head == list;
   2ba80:	f8d9 4000 	ldr.w	r4, [r9]
   2ba84:	1b5b      	subs	r3, r3, r5
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2ba86:	454c      	cmp	r4, r9
   2ba88:	f8cb 3000 	str.w	r3, [fp]
   2ba8c:	d1b1      	bne.n	2b9f2 <sys_clock_announce+0x5e>
		curr_tick += dt;
   2ba8e:	e9da 2100 	ldrd	r2, r1, [sl]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   2ba92:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   2ba94:	189a      	adds	r2, r3, r2
   2ba96:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   2ba9a:	e9ca 2100 	strd	r2, r1, [sl]
	announce_remaining = 0;
   2ba9e:	f8cb 4000 	str.w	r4, [fp]

	sys_clock_set_timeout(next_timeout(), false);
   2baa2:	f7ff fde9 	bl	2b678 <next_timeout>
   2baa6:	4621      	mov	r1, r4
   2baa8:	f7f5 fca0 	bl	213ec <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2baac:	4806      	ldr	r0, [pc, #24]	; (2bac8 <sys_clock_announce+0x134>)
   2baae:	f7fd fb51 	bl	29154 <z_spin_unlock_valid>
   2bab2:	2800      	cmp	r0, #0
   2bab4:	d0bf      	beq.n	2ba36 <sys_clock_announce+0xa2>
	__asm__ volatile(
   2bab6:	f388 8811 	msr	BASEPRI, r8
   2baba:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
   2babe:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
   2bac2:	f7fe bf5b 	b.w	2a97c <z_time_slice>
   2bac6:	bf00      	nop
   2bac8:	2000ef38 	.word	0x2000ef38
   2bacc:	00039e53 	.word	0x00039e53
   2bad0:	00039eac 	.word	0x00039eac
   2bad4:	00039995 	.word	0x00039995
   2bad8:	00039ec1 	.word	0x00039ec1
   2badc:	2000ca8c 	.word	0x2000ca8c
   2bae0:	2000ef34 	.word	0x2000ef34
   2bae4:	2000e1c8 	.word	0x2000e1c8
   2bae8:	00039e80 	.word	0x00039e80
   2baec:	00039e97 	.word	0x00039e97

0002baf0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   2baf0:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
   2baf2:	f04f 0320 	mov.w	r3, #32
   2baf6:	f3ef 8611 	mrs	r6, BASEPRI
   2bafa:	f383 8812 	msr	BASEPRI_MAX, r3
   2bafe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2bb02:	481a      	ldr	r0, [pc, #104]	; (2bb6c <sys_clock_tick_get+0x7c>)
   2bb04:	f7fd fb18 	bl	29138 <z_spin_lock_valid>
   2bb08:	b968      	cbnz	r0, 2bb26 <sys_clock_tick_get+0x36>
   2bb0a:	2394      	movs	r3, #148	; 0x94
   2bb0c:	4a18      	ldr	r2, [pc, #96]	; (2bb70 <sys_clock_tick_get+0x80>)
   2bb0e:	4919      	ldr	r1, [pc, #100]	; (2bb74 <sys_clock_tick_get+0x84>)
   2bb10:	4819      	ldr	r0, [pc, #100]	; (2bb78 <sys_clock_tick_get+0x88>)
   2bb12:	f003 fc57 	bl	2f3c4 <assert_print>
   2bb16:	4915      	ldr	r1, [pc, #84]	; (2bb6c <sys_clock_tick_get+0x7c>)
   2bb18:	4818      	ldr	r0, [pc, #96]	; (2bb7c <sys_clock_tick_get+0x8c>)
   2bb1a:	f003 fc53 	bl	2f3c4 <assert_print>
   2bb1e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2bb20:	4813      	ldr	r0, [pc, #76]	; (2bb70 <sys_clock_tick_get+0x80>)
   2bb22:	f003 fc48 	bl	2f3b6 <assert_post_action>
	z_spin_lock_set_owner(l);
   2bb26:	4811      	ldr	r0, [pc, #68]	; (2bb6c <sys_clock_tick_get+0x7c>)
   2bb28:	f7fd fb22 	bl	29170 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   2bb2c:	f7ff fd9a 	bl	2b664 <elapsed>
   2bb30:	4a13      	ldr	r2, [pc, #76]	; (2bb80 <sys_clock_tick_get+0x90>)
   2bb32:	e9d2 4500 	ldrd	r4, r5, [r2]
   2bb36:	1904      	adds	r4, r0, r4
   2bb38:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2bb3c:	480b      	ldr	r0, [pc, #44]	; (2bb6c <sys_clock_tick_get+0x7c>)
   2bb3e:	f7fd fb09 	bl	29154 <z_spin_unlock_valid>
   2bb42:	b958      	cbnz	r0, 2bb5c <sys_clock_tick_get+0x6c>
   2bb44:	23c2      	movs	r3, #194	; 0xc2
   2bb46:	4a0a      	ldr	r2, [pc, #40]	; (2bb70 <sys_clock_tick_get+0x80>)
   2bb48:	490e      	ldr	r1, [pc, #56]	; (2bb84 <sys_clock_tick_get+0x94>)
   2bb4a:	480b      	ldr	r0, [pc, #44]	; (2bb78 <sys_clock_tick_get+0x88>)
   2bb4c:	f003 fc3a 	bl	2f3c4 <assert_print>
   2bb50:	4906      	ldr	r1, [pc, #24]	; (2bb6c <sys_clock_tick_get+0x7c>)
   2bb52:	480d      	ldr	r0, [pc, #52]	; (2bb88 <sys_clock_tick_get+0x98>)
   2bb54:	f003 fc36 	bl	2f3c4 <assert_print>
   2bb58:	21c2      	movs	r1, #194	; 0xc2
   2bb5a:	e7e1      	b.n	2bb20 <sys_clock_tick_get+0x30>
	__asm__ volatile(
   2bb5c:	f386 8811 	msr	BASEPRI, r6
   2bb60:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   2bb64:	4620      	mov	r0, r4
   2bb66:	4629      	mov	r1, r5
   2bb68:	bd70      	pop	{r4, r5, r6, pc}
   2bb6a:	bf00      	nop
   2bb6c:	2000ef38 	.word	0x2000ef38
   2bb70:	00039e53 	.word	0x00039e53
   2bb74:	00039eac 	.word	0x00039eac
   2bb78:	00039995 	.word	0x00039995
   2bb7c:	00039ec1 	.word	0x00039ec1
   2bb80:	2000e1c8 	.word	0x2000e1c8
   2bb84:	00039e80 	.word	0x00039e80
   2bb88:	00039e97 	.word	0x00039e97

0002bb8c <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   2bb8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2bb8e:	4604      	mov	r4, r0
	__asm__ volatile(
   2bb90:	f04f 0320 	mov.w	r3, #32
   2bb94:	f3ef 8711 	mrs	r7, BASEPRI
   2bb98:	f383 8812 	msr	BASEPRI_MAX, r3
   2bb9c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2bba0:	484e      	ldr	r0, [pc, #312]	; (2bcdc <z_timer_expiration_handler+0x150>)
   2bba2:	f7fd fac9 	bl	29138 <z_spin_lock_valid>
   2bba6:	b968      	cbnz	r0, 2bbc4 <z_timer_expiration_handler+0x38>
   2bba8:	2394      	movs	r3, #148	; 0x94
   2bbaa:	4a4d      	ldr	r2, [pc, #308]	; (2bce0 <z_timer_expiration_handler+0x154>)
   2bbac:	494d      	ldr	r1, [pc, #308]	; (2bce4 <z_timer_expiration_handler+0x158>)
   2bbae:	484e      	ldr	r0, [pc, #312]	; (2bce8 <z_timer_expiration_handler+0x15c>)
   2bbb0:	f003 fc08 	bl	2f3c4 <assert_print>
   2bbb4:	4949      	ldr	r1, [pc, #292]	; (2bcdc <z_timer_expiration_handler+0x150>)
   2bbb6:	484d      	ldr	r0, [pc, #308]	; (2bcec <z_timer_expiration_handler+0x160>)
   2bbb8:	f003 fc04 	bl	2f3c4 <assert_print>
   2bbbc:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2bbbe:	4848      	ldr	r0, [pc, #288]	; (2bce0 <z_timer_expiration_handler+0x154>)
   2bbc0:	f003 fbf9 	bl	2f3b6 <assert_post_action>
	z_spin_lock_set_owner(l);
   2bbc4:	4845      	ldr	r0, [pc, #276]	; (2bcdc <z_timer_expiration_handler+0x150>)
   2bbc6:	f7fd fad3 	bl	29170 <z_spin_lock_set_owner>
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
   2bbca:	6822      	ldr	r2, [r4, #0]
   2bbcc:	b182      	cbz	r2, 2bbf0 <z_timer_expiration_handler+0x64>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2bbce:	4843      	ldr	r0, [pc, #268]	; (2bcdc <z_timer_expiration_handler+0x150>)
   2bbd0:	f7fd fac0 	bl	29154 <z_spin_unlock_valid>
   2bbd4:	2800      	cmp	r0, #0
   2bbd6:	d17b      	bne.n	2bcd0 <z_timer_expiration_handler+0x144>
   2bbd8:	23c2      	movs	r3, #194	; 0xc2
   2bbda:	4a41      	ldr	r2, [pc, #260]	; (2bce0 <z_timer_expiration_handler+0x154>)
   2bbdc:	4944      	ldr	r1, [pc, #272]	; (2bcf0 <z_timer_expiration_handler+0x164>)
   2bbde:	4842      	ldr	r0, [pc, #264]	; (2bce8 <z_timer_expiration_handler+0x15c>)
   2bbe0:	f003 fbf0 	bl	2f3c4 <assert_print>
   2bbe4:	493d      	ldr	r1, [pc, #244]	; (2bcdc <z_timer_expiration_handler+0x150>)
   2bbe6:	4843      	ldr	r0, [pc, #268]	; (2bcf4 <z_timer_expiration_handler+0x168>)
   2bbe8:	f003 fbec 	bl	2f3c4 <assert_print>
   2bbec:	21c2      	movs	r1, #194	; 0xc2
   2bbee:	e7e6      	b.n	2bbbe <z_timer_expiration_handler+0x32>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   2bbf0:	e9d4 360a 	ldrd	r3, r6, [r4, #40]	; 0x28
   2bbf4:	1c58      	adds	r0, r3, #1
   2bbf6:	f146 0100 	adc.w	r1, r6, #0
   2bbfa:	2802      	cmp	r0, #2
   2bbfc:	f171 0100 	sbcs.w	r1, r1, #0
   2bc00:	d327      	bcc.n	2bc52 <z_timer_expiration_handler+0xc6>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		k_timeout_t next = timer->period;

		/* see note about z_add_timeout() in z_impl_k_timer_start() */
		next.ticks = MAX(next.ticks - 1, 0);
   2bc02:	2b01      	cmp	r3, #1
   2bc04:	f176 0100 	sbcs.w	r1, r6, #0
   2bc08:	bfbc      	itt	lt
   2bc0a:	2301      	movlt	r3, #1
   2bc0c:	4616      	movlt	r6, r2
   2bc0e:	1e5d      	subs	r5, r3, #1
   2bc10:	f146 36ff 	adc.w	r6, r6, #4294967295
	return z_impl_k_uptime_ticks();
   2bc14:	f00a fb5a 	bl	362cc <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
   2bc18:	3001      	adds	r0, #1
   2bc1a:	f141 0100 	adc.w	r1, r1, #0
   2bc1e:	1940      	adds	r0, r0, r5
   2bc20:	eb46 0101 	adc.w	r1, r6, r1
   2bc24:	2801      	cmp	r0, #1
   2bc26:	f171 0100 	sbcs.w	r1, r1, #0
   2bc2a:	db4c      	blt.n	2bcc6 <z_timer_expiration_handler+0x13a>
   2bc2c:	f00a fb4e 	bl	362cc <z_impl_k_uptime_ticks>
   2bc30:	3001      	adds	r0, #1
   2bc32:	f141 0100 	adc.w	r1, r1, #0
   2bc36:	f06f 0201 	mvn.w	r2, #1
   2bc3a:	1940      	adds	r0, r0, r5
   2bc3c:	eb46 0301 	adc.w	r3, r6, r1
   2bc40:	f04f 31ff 	mov.w	r1, #4294967295
   2bc44:	1a12      	subs	r2, r2, r0
   2bc46:	eb61 0303 	sbc.w	r3, r1, r3
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2bc4a:	4620      	mov	r0, r4
   2bc4c:	492a      	ldr	r1, [pc, #168]	; (2bcf8 <z_timer_expiration_handler+0x16c>)
   2bc4e:	f7ff fd4f 	bl	2b6f0 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   2bc52:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2bc54:	3301      	adds	r3, #1
   2bc56:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   2bc58:	6a23      	ldr	r3, [r4, #32]
   2bc5a:	b1db      	cbz	r3, 2bc94 <z_timer_expiration_handler+0x108>
   2bc5c:	481f      	ldr	r0, [pc, #124]	; (2bcdc <z_timer_expiration_handler+0x150>)
   2bc5e:	f7fd fa79 	bl	29154 <z_spin_unlock_valid>
   2bc62:	2800      	cmp	r0, #0
   2bc64:	d0b8      	beq.n	2bbd8 <z_timer_expiration_handler+0x4c>
	__asm__ volatile(
   2bc66:	f387 8811 	msr	BASEPRI, r7
   2bc6a:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   2bc6e:	4620      	mov	r0, r4
   2bc70:	6a23      	ldr	r3, [r4, #32]
   2bc72:	4798      	blx	r3
	__asm__ volatile(
   2bc74:	f04f 0320 	mov.w	r3, #32
   2bc78:	f3ef 8711 	mrs	r7, BASEPRI
   2bc7c:	f383 8812 	msr	BASEPRI_MAX, r3
   2bc80:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2bc84:	4815      	ldr	r0, [pc, #84]	; (2bcdc <z_timer_expiration_handler+0x150>)
   2bc86:	f7fd fa57 	bl	29138 <z_spin_lock_valid>
   2bc8a:	2800      	cmp	r0, #0
   2bc8c:	d08c      	beq.n	2bba8 <z_timer_expiration_handler+0x1c>
	z_spin_lock_set_owner(l);
   2bc8e:	4813      	ldr	r0, [pc, #76]	; (2bcdc <z_timer_expiration_handler+0x150>)
   2bc90:	f7fd fa6e 	bl	29170 <z_spin_lock_set_owner>
	return list->head == list;
   2bc94:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2bc98:	42a5      	cmp	r5, r4
   2bc9a:	d098      	beq.n	2bbce <z_timer_expiration_handler+0x42>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   2bc9c:	2d00      	cmp	r5, #0
   2bc9e:	d096      	beq.n	2bbce <z_timer_expiration_handler+0x42>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
   2bca0:	4628      	mov	r0, r5
   2bca2:	f7fe fc3d 	bl	2a520 <z_unpend_thread_no_timeout>
   2bca6:	2300      	movs	r3, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2bca8:	480c      	ldr	r0, [pc, #48]	; (2bcdc <z_timer_expiration_handler+0x150>)
   2bcaa:	67eb      	str	r3, [r5, #124]	; 0x7c
   2bcac:	f7fd fa52 	bl	29154 <z_spin_unlock_valid>
   2bcb0:	2800      	cmp	r0, #0
   2bcb2:	d091      	beq.n	2bbd8 <z_timer_expiration_handler+0x4c>
	__asm__ volatile(
   2bcb4:	f387 8811 	msr	BASEPRI, r7
   2bcb8:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
   2bcbc:	4628      	mov	r0, r5
}
   2bcbe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
   2bcc2:	f7fe bbe7 	b.w	2a494 <z_ready_thread>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
   2bcc6:	f06f 0201 	mvn.w	r2, #1
   2bcca:	f04f 33ff 	mov.w	r3, #4294967295
   2bcce:	e7bc      	b.n	2bc4a <z_timer_expiration_handler+0xbe>
   2bcd0:	f387 8811 	msr	BASEPRI, r7
   2bcd4:	f3bf 8f6f 	isb	sy
}
   2bcd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2bcda:	bf00      	nop
   2bcdc:	2000ef3c 	.word	0x2000ef3c
   2bce0:	00039e53 	.word	0x00039e53
   2bce4:	00039eac 	.word	0x00039eac
   2bce8:	00039995 	.word	0x00039995
   2bcec:	00039ec1 	.word	0x00039ec1
   2bcf0:	00039e80 	.word	0x00039e80
   2bcf4:	00039e97 	.word	0x00039e97
   2bcf8:	0002bb8d 	.word	0x0002bb8d

0002bcfc <z_impl_k_timer_start>:
void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   2bcfc:	f1b3 3fff 	cmp.w	r3, #4294967295
   2bd00:	bf08      	it	eq
   2bd02:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   2bd06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2bd0a:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   2bd0e:	4605      	mov	r5, r0
   2bd10:	461c      	mov	r4, r3
   2bd12:	4691      	mov	r9, r2
   2bd14:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   2bd16:	d01c      	beq.n	2bd52 <z_impl_k_timer_start+0x56>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
   2bd18:	1c53      	adds	r3, r2, #1
   2bd1a:	f174 33ff 	sbcs.w	r3, r4, #4294967295
   2bd1e:	db09      	blt.n	2bd34 <z_impl_k_timer_start+0x38>
		duration.ticks = MAX(duration.ticks - 1, 0);
   2bd20:	2a01      	cmp	r2, #1
   2bd22:	f174 0300 	sbcs.w	r3, r4, #0
   2bd26:	bfbc      	itt	lt
   2bd28:	2201      	movlt	r2, #1
   2bd2a:	2400      	movlt	r4, #0
   2bd2c:	f112 39ff 	adds.w	r9, r2, #4294967295
   2bd30:	f144 38ff 	adc.w	r8, r4, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   2bd34:	4628      	mov	r0, r5
   2bd36:	f7ff fd9b 	bl	2b870 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   2bd3a:	2300      	movs	r3, #0
	timer->period = period;
   2bd3c:	e9c5 670a 	strd	r6, r7, [r5, #40]	; 0x28
	timer->status = 0U;
   2bd40:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2bd42:	464a      	mov	r2, r9
   2bd44:	4643      	mov	r3, r8
   2bd46:	4628      	mov	r0, r5
		     duration);
}
   2bd48:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2bd4c:	4902      	ldr	r1, [pc, #8]	; (2bd58 <z_impl_k_timer_start+0x5c>)
   2bd4e:	f7ff bccf 	b.w	2b6f0 <z_add_timeout>
}
   2bd52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2bd56:	bf00      	nop
   2bd58:	0002bb8d 	.word	0x0002bb8d

0002bd5c <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   2bd5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   2bd60:	2600      	movs	r6, #0
{
   2bd62:	4688      	mov	r8, r1
   2bd64:	4615      	mov	r5, r2
	for (int ii = 0; ii < num_events; ii++) {
   2bd66:	4604      	mov	r4, r0
	int events_registered = 0;
   2bd68:	4637      	mov	r7, r6
	event->poller = NULL;
   2bd6a:	46b2      	mov	sl, r6
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2bd6c:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 2bf2c <register_events+0x1d0>
{
   2bd70:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   2bd72:	4546      	cmp	r6, r8
   2bd74:	db03      	blt.n	2bd7e <register_events+0x22>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   2bd76:	4638      	mov	r0, r7
   2bd78:	b003      	add	sp, #12
   2bd7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   2bd7e:	f04f 0320 	mov.w	r3, #32
   2bd82:	f3ef 8b11 	mrs	fp, BASEPRI
   2bd86:	f383 8812 	msr	BASEPRI_MAX, r3
   2bd8a:	f3bf 8f6f 	isb	sy
   2bd8e:	4648      	mov	r0, r9
   2bd90:	f7fd f9d2 	bl	29138 <z_spin_lock_valid>
   2bd94:	b960      	cbnz	r0, 2bdb0 <register_events+0x54>
   2bd96:	2394      	movs	r3, #148	; 0x94
   2bd98:	4a65      	ldr	r2, [pc, #404]	; (2bf30 <register_events+0x1d4>)
   2bd9a:	4966      	ldr	r1, [pc, #408]	; (2bf34 <register_events+0x1d8>)
   2bd9c:	4866      	ldr	r0, [pc, #408]	; (2bf38 <register_events+0x1dc>)
   2bd9e:	f003 fb11 	bl	2f3c4 <assert_print>
   2bda2:	4962      	ldr	r1, [pc, #392]	; (2bf2c <register_events+0x1d0>)
   2bda4:	4865      	ldr	r0, [pc, #404]	; (2bf3c <register_events+0x1e0>)
   2bda6:	f003 fb0d 	bl	2f3c4 <assert_print>
   2bdaa:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2bdac:	4860      	ldr	r0, [pc, #384]	; (2bf30 <register_events+0x1d4>)
   2bdae:	e060      	b.n	2be72 <register_events+0x116>
	z_spin_lock_set_owner(l);
   2bdb0:	4648      	mov	r0, r9
   2bdb2:	f7fd f9dd 	bl	29170 <z_spin_lock_set_owner>
	switch (event->type) {
   2bdb6:	7b63      	ldrb	r3, [r4, #13]
   2bdb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2bdbc:	2b08      	cmp	r3, #8
   2bdbe:	d84a      	bhi.n	2be56 <register_events+0xfa>
   2bdc0:	e8df f003 	tbb	[pc, r3]
   2bdc4:	49053d2b 	.word	0x49053d2b
   2bdc8:	49494927 	.word	0x49494927
   2bdcc:	43          	.byte	0x43
   2bdcd:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   2bdce:	6923      	ldr	r3, [r4, #16]
   2bdd0:	689b      	ldr	r3, [r3, #8]
   2bdd2:	b313      	cbz	r3, 2be1a <register_events+0xbe>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   2bdd4:	2302      	movs	r3, #2
	event->state |= state;
   2bdd6:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   2bdd8:	f8c4 a008 	str.w	sl, [r4, #8]
	event->state |= state;
   2bddc:	f3c2 3186 	ubfx	r1, r2, #14, #7
   2bde0:	430b      	orrs	r3, r1
   2bde2:	f363 3294 	bfi	r2, r3, #14, #7
   2bde6:	60e2      	str	r2, [r4, #12]
			poller->is_polling = false;
   2bde8:	f885 a000 	strb.w	sl, [r5]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2bdec:	4648      	mov	r0, r9
   2bdee:	f7fd f9b1 	bl	29154 <z_spin_unlock_valid>
   2bdf2:	3414      	adds	r4, #20
   2bdf4:	2800      	cmp	r0, #0
   2bdf6:	f040 8092 	bne.w	2bf1e <register_events+0x1c2>
   2bdfa:	23c2      	movs	r3, #194	; 0xc2
   2bdfc:	4a4c      	ldr	r2, [pc, #304]	; (2bf30 <register_events+0x1d4>)
   2bdfe:	4950      	ldr	r1, [pc, #320]	; (2bf40 <register_events+0x1e4>)
   2be00:	484d      	ldr	r0, [pc, #308]	; (2bf38 <register_events+0x1dc>)
   2be02:	f003 fadf 	bl	2f3c4 <assert_print>
   2be06:	4949      	ldr	r1, [pc, #292]	; (2bf2c <register_events+0x1d0>)
   2be08:	484e      	ldr	r0, [pc, #312]	; (2bf44 <register_events+0x1e8>)
   2be0a:	f003 fadb 	bl	2f3c4 <assert_print>
   2be0e:	21c2      	movs	r1, #194	; 0xc2
   2be10:	e7cc      	b.n	2bdac <register_events+0x50>
		if (!k_queue_is_empty(event->queue)) {
   2be12:	6923      	ldr	r3, [r4, #16]
   2be14:	681b      	ldr	r3, [r3, #0]
   2be16:	2b00      	cmp	r3, #0
   2be18:	d12d      	bne.n	2be76 <register_events+0x11a>
		} else if (!just_check && poller->is_polling) {
   2be1a:	9b01      	ldr	r3, [sp, #4]
   2be1c:	2b00      	cmp	r3, #0
   2be1e:	d1e5      	bne.n	2bdec <register_events+0x90>
   2be20:	782b      	ldrb	r3, [r5, #0]
   2be22:	2b00      	cmp	r3, #0
   2be24:	d0e2      	beq.n	2bdec <register_events+0x90>
	switch (event->type) {
   2be26:	7b63      	ldrb	r3, [r4, #13]
   2be28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2be2c:	2b08      	cmp	r3, #8
   2be2e:	d86b      	bhi.n	2bf08 <register_events+0x1ac>
   2be30:	e8df f003 	tbb	[pc, r3]
   2be34:	6a234935 	.word	0x6a234935
   2be38:	6a6a6a38 	.word	0x6a6a6a38
   2be3c:	59          	.byte	0x59
   2be3d:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   2be3e:	6923      	ldr	r3, [r4, #16]
   2be40:	689b      	ldr	r3, [r3, #8]
   2be42:	2b00      	cmp	r3, #0
   2be44:	d0e9      	beq.n	2be1a <register_events+0xbe>
			*state = K_POLL_STATE_SIGNALED;
   2be46:	2301      	movs	r3, #1
   2be48:	e7c5      	b.n	2bdd6 <register_events+0x7a>
		if (event->msgq->used_msgs > 0) {
   2be4a:	6923      	ldr	r3, [r4, #16]
   2be4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2be4e:	2b00      	cmp	r3, #0
   2be50:	d0e3      	beq.n	2be1a <register_events+0xbe>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   2be52:	2310      	movs	r3, #16
   2be54:	e7bf      	b.n	2bdd6 <register_events+0x7a>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   2be56:	2363      	movs	r3, #99	; 0x63
   2be58:	4a3b      	ldr	r2, [pc, #236]	; (2bf48 <register_events+0x1ec>)
   2be5a:	493c      	ldr	r1, [pc, #240]	; (2bf4c <register_events+0x1f0>)
   2be5c:	4836      	ldr	r0, [pc, #216]	; (2bf38 <register_events+0x1dc>)
   2be5e:	f003 fab1 	bl	2f3c4 <assert_print>
   2be62:	7b61      	ldrb	r1, [r4, #13]
   2be64:	483a      	ldr	r0, [pc, #232]	; (2bf50 <register_events+0x1f4>)
   2be66:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   2be6a:	f003 faab 	bl	2f3c4 <assert_print>
   2be6e:	2163      	movs	r1, #99	; 0x63
   2be70:	4835      	ldr	r0, [pc, #212]	; (2bf48 <register_events+0x1ec>)
   2be72:	f003 faa0 	bl	2f3b6 <assert_post_action>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   2be76:	2304      	movs	r3, #4
   2be78:	e7ad      	b.n	2bdd6 <register_events+0x7a>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   2be7a:	6920      	ldr	r0, [r4, #16]
   2be7c:	b950      	cbnz	r0, 2be94 <register_events+0x138>
   2be7e:	4935      	ldr	r1, [pc, #212]	; (2bf54 <register_events+0x1f8>)
   2be80:	238d      	movs	r3, #141	; 0x8d
   2be82:	4a31      	ldr	r2, [pc, #196]	; (2bf48 <register_events+0x1ec>)
   2be84:	482c      	ldr	r0, [pc, #176]	; (2bf38 <register_events+0x1dc>)
   2be86:	f003 fa9d 	bl	2f3c4 <assert_print>
   2be8a:	4833      	ldr	r0, [pc, #204]	; (2bf58 <register_events+0x1fc>)
   2be8c:	f003 fa9a 	bl	2f3c4 <assert_print>
   2be90:	218d      	movs	r1, #141	; 0x8d
   2be92:	e7ed      	b.n	2be70 <register_events+0x114>
		add_event(&event->sem->poll_events, event, poller);
   2be94:	462a      	mov	r2, r5
   2be96:	4621      	mov	r1, r4
   2be98:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   2be9a:	f00a fa68 	bl	3636e <add_event>
	event->poller = poller;
   2be9e:	60a5      	str	r5, [r4, #8]
			events_registered += 1;
   2bea0:	3701      	adds	r7, #1
   2bea2:	e7a3      	b.n	2bdec <register_events+0x90>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   2bea4:	6920      	ldr	r0, [r4, #16]
   2bea6:	b950      	cbnz	r0, 2bebe <register_events+0x162>
   2bea8:	492c      	ldr	r1, [pc, #176]	; (2bf5c <register_events+0x200>)
   2beaa:	2391      	movs	r3, #145	; 0x91
   2beac:	4a26      	ldr	r2, [pc, #152]	; (2bf48 <register_events+0x1ec>)
   2beae:	4822      	ldr	r0, [pc, #136]	; (2bf38 <register_events+0x1dc>)
   2beb0:	f003 fa88 	bl	2f3c4 <assert_print>
   2beb4:	482a      	ldr	r0, [pc, #168]	; (2bf60 <register_events+0x204>)
   2beb6:	f003 fa85 	bl	2f3c4 <assert_print>
   2beba:	2191      	movs	r1, #145	; 0x91
   2bebc:	e7d8      	b.n	2be70 <register_events+0x114>
		add_event(&event->queue->poll_events, event, poller);
   2bebe:	462a      	mov	r2, r5
   2bec0:	4621      	mov	r1, r4
   2bec2:	3014      	adds	r0, #20
   2bec4:	e7e9      	b.n	2be9a <register_events+0x13e>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   2bec6:	6920      	ldr	r0, [r4, #16]
   2bec8:	b950      	cbnz	r0, 2bee0 <register_events+0x184>
   2beca:	4926      	ldr	r1, [pc, #152]	; (2bf64 <register_events+0x208>)
   2becc:	2395      	movs	r3, #149	; 0x95
   2bece:	4a1e      	ldr	r2, [pc, #120]	; (2bf48 <register_events+0x1ec>)
   2bed0:	4819      	ldr	r0, [pc, #100]	; (2bf38 <register_events+0x1dc>)
   2bed2:	f003 fa77 	bl	2f3c4 <assert_print>
   2bed6:	4824      	ldr	r0, [pc, #144]	; (2bf68 <register_events+0x20c>)
   2bed8:	f003 fa74 	bl	2f3c4 <assert_print>
   2bedc:	2195      	movs	r1, #149	; 0x95
   2bede:	e7c7      	b.n	2be70 <register_events+0x114>
		add_event(&event->signal->poll_events, event, poller);
   2bee0:	462a      	mov	r2, r5
   2bee2:	4621      	mov	r1, r4
   2bee4:	e7d9      	b.n	2be9a <register_events+0x13e>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   2bee6:	6920      	ldr	r0, [r4, #16]
   2bee8:	b950      	cbnz	r0, 2bf00 <register_events+0x1a4>
   2beea:	4920      	ldr	r1, [pc, #128]	; (2bf6c <register_events+0x210>)
   2beec:	2399      	movs	r3, #153	; 0x99
   2beee:	4a16      	ldr	r2, [pc, #88]	; (2bf48 <register_events+0x1ec>)
   2bef0:	4811      	ldr	r0, [pc, #68]	; (2bf38 <register_events+0x1dc>)
   2bef2:	f003 fa67 	bl	2f3c4 <assert_print>
   2bef6:	481e      	ldr	r0, [pc, #120]	; (2bf70 <register_events+0x214>)
   2bef8:	f003 fa64 	bl	2f3c4 <assert_print>
   2befc:	2199      	movs	r1, #153	; 0x99
   2befe:	e7b7      	b.n	2be70 <register_events+0x114>
		add_event(&event->msgq->poll_events, event, poller);
   2bf00:	462a      	mov	r2, r5
   2bf02:	4621      	mov	r1, r4
   2bf04:	3028      	adds	r0, #40	; 0x28
   2bf06:	e7c8      	b.n	2be9a <register_events+0x13e>
		__ASSERT(false, "invalid event type\n");
   2bf08:	4910      	ldr	r1, [pc, #64]	; (2bf4c <register_events+0x1f0>)
   2bf0a:	23a6      	movs	r3, #166	; 0xa6
   2bf0c:	4a0e      	ldr	r2, [pc, #56]	; (2bf48 <register_events+0x1ec>)
   2bf0e:	480a      	ldr	r0, [pc, #40]	; (2bf38 <register_events+0x1dc>)
   2bf10:	f003 fa58 	bl	2f3c4 <assert_print>
   2bf14:	4817      	ldr	r0, [pc, #92]	; (2bf74 <register_events+0x218>)
   2bf16:	f003 fa55 	bl	2f3c4 <assert_print>
   2bf1a:	21a6      	movs	r1, #166	; 0xa6
   2bf1c:	e7a8      	b.n	2be70 <register_events+0x114>
	__asm__ volatile(
   2bf1e:	f38b 8811 	msr	BASEPRI, fp
   2bf22:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   2bf26:	3601      	adds	r6, #1
   2bf28:	e723      	b.n	2bd72 <register_events+0x16>
   2bf2a:	bf00      	nop
   2bf2c:	2000ef40 	.word	0x2000ef40
   2bf30:	00039e53 	.word	0x00039e53
   2bf34:	00039eac 	.word	0x00039eac
   2bf38:	00039995 	.word	0x00039995
   2bf3c:	00039ec1 	.word	0x00039ec1
   2bf40:	00039e80 	.word	0x00039e80
   2bf44:	00039e97 	.word	0x00039e97
   2bf48:	00041be8 	.word	0x00041be8
   2bf4c:	0003ea9e 	.word	0x0003ea9e
   2bf50:	00041c09 	.word	0x00041c09
   2bf54:	00041c26 	.word	0x00041c26
   2bf58:	00041c40 	.word	0x00041c40
   2bf5c:	00041c55 	.word	0x00041c55
   2bf60:	00041c71 	.word	0x00041c71
   2bf64:	00041c82 	.word	0x00041c82
   2bf68:	00041c9f 	.word	0x00041c9f
   2bf6c:	00041cb6 	.word	0x00041cb6
   2bf70:	00041cd1 	.word	0x00041cd1
   2bf74:	00041cea 	.word	0x00041cea

0002bf78 <clear_event_registrations>:
{
   2bf78:	2314      	movs	r3, #20
   2bf7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2bf7e:	4615      	mov	r5, r2
	while (num_events--) {
   2bf80:	460c      	mov	r4, r1
	event->poller = NULL;
   2bf82:	2600      	movs	r6, #0
   2bf84:	fb03 0001 	mla	r0, r3, r1, r0
   2bf88:	4f4b      	ldr	r7, [pc, #300]	; (2c0b8 <clear_event_registrations+0x140>)
	while (num_events--) {
   2bf8a:	b90c      	cbnz	r4, 2bf90 <clear_event_registrations+0x18>
}
   2bf8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (event->type) {
   2bf90:	f810 3c07 	ldrb.w	r3, [r0, #-7]
   2bf94:	f1a0 0814 	sub.w	r8, r0, #20
   2bf98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	event->poller = NULL;
   2bf9c:	f840 6c0c 	str.w	r6, [r0, #-12]
	switch (event->type) {
   2bfa0:	2b08      	cmp	r3, #8
   2bfa2:	d842      	bhi.n	2c02a <clear_event_registrations+0xb2>
   2bfa4:	e8df f003 	tbb	[pc, r3]
   2bfa8:	41052555 	.word	0x41052555
   2bfac:	41414116 	.word	0x41414116
   2bfb0:	33          	.byte	0x33
   2bfb1:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   2bfb2:	f850 3c04 	ldr.w	r3, [r0, #-4]
   2bfb6:	2b00      	cmp	r3, #0
   2bfb8:	d142      	bne.n	2c040 <clear_event_registrations+0xc8>
   2bfba:	4940      	ldr	r1, [pc, #256]	; (2c0bc <clear_event_registrations+0x144>)
   2bfbc:	23b6      	movs	r3, #182	; 0xb6
   2bfbe:	4a40      	ldr	r2, [pc, #256]	; (2c0c0 <clear_event_registrations+0x148>)
   2bfc0:	4840      	ldr	r0, [pc, #256]	; (2c0c4 <clear_event_registrations+0x14c>)
   2bfc2:	f003 f9ff 	bl	2f3c4 <assert_print>
   2bfc6:	4840      	ldr	r0, [pc, #256]	; (2c0c8 <clear_event_registrations+0x150>)
   2bfc8:	f003 f9fc 	bl	2f3c4 <assert_print>
   2bfcc:	21b6      	movs	r1, #182	; 0xb6
		__ASSERT(event->queue != NULL, "invalid queue\n");
   2bfce:	483c      	ldr	r0, [pc, #240]	; (2c0c0 <clear_event_registrations+0x148>)
   2bfd0:	f003 f9f1 	bl	2f3b6 <assert_post_action>
   2bfd4:	f850 3c04 	ldr.w	r3, [r0, #-4]
   2bfd8:	2b00      	cmp	r3, #0
   2bfda:	d131      	bne.n	2c040 <clear_event_registrations+0xc8>
   2bfdc:	493b      	ldr	r1, [pc, #236]	; (2c0cc <clear_event_registrations+0x154>)
   2bfde:	23ba      	movs	r3, #186	; 0xba
   2bfe0:	4a37      	ldr	r2, [pc, #220]	; (2c0c0 <clear_event_registrations+0x148>)
   2bfe2:	4838      	ldr	r0, [pc, #224]	; (2c0c4 <clear_event_registrations+0x14c>)
   2bfe4:	f003 f9ee 	bl	2f3c4 <assert_print>
   2bfe8:	4839      	ldr	r0, [pc, #228]	; (2c0d0 <clear_event_registrations+0x158>)
   2bfea:	f003 f9eb 	bl	2f3c4 <assert_print>
   2bfee:	21ba      	movs	r1, #186	; 0xba
   2bff0:	e7ed      	b.n	2bfce <clear_event_registrations+0x56>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   2bff2:	f850 3c04 	ldr.w	r3, [r0, #-4]
   2bff6:	bb1b      	cbnz	r3, 2c040 <clear_event_registrations+0xc8>
   2bff8:	4936      	ldr	r1, [pc, #216]	; (2c0d4 <clear_event_registrations+0x15c>)
   2bffa:	23be      	movs	r3, #190	; 0xbe
   2bffc:	4a30      	ldr	r2, [pc, #192]	; (2c0c0 <clear_event_registrations+0x148>)
   2bffe:	4831      	ldr	r0, [pc, #196]	; (2c0c4 <clear_event_registrations+0x14c>)
   2c000:	f003 f9e0 	bl	2f3c4 <assert_print>
   2c004:	4834      	ldr	r0, [pc, #208]	; (2c0d8 <clear_event_registrations+0x160>)
   2c006:	f003 f9dd 	bl	2f3c4 <assert_print>
   2c00a:	21be      	movs	r1, #190	; 0xbe
   2c00c:	e7df      	b.n	2bfce <clear_event_registrations+0x56>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   2c00e:	f850 3c04 	ldr.w	r3, [r0, #-4]
   2c012:	b9ab      	cbnz	r3, 2c040 <clear_event_registrations+0xc8>
   2c014:	4931      	ldr	r1, [pc, #196]	; (2c0dc <clear_event_registrations+0x164>)
   2c016:	23c2      	movs	r3, #194	; 0xc2
   2c018:	4a29      	ldr	r2, [pc, #164]	; (2c0c0 <clear_event_registrations+0x148>)
   2c01a:	482a      	ldr	r0, [pc, #168]	; (2c0c4 <clear_event_registrations+0x14c>)
   2c01c:	f003 f9d2 	bl	2f3c4 <assert_print>
   2c020:	482f      	ldr	r0, [pc, #188]	; (2c0e0 <clear_event_registrations+0x168>)
   2c022:	f003 f9cf 	bl	2f3c4 <assert_print>
   2c026:	21c2      	movs	r1, #194	; 0xc2
   2c028:	e7d1      	b.n	2bfce <clear_event_registrations+0x56>
		__ASSERT(false, "invalid event type\n");
   2c02a:	492e      	ldr	r1, [pc, #184]	; (2c0e4 <clear_event_registrations+0x16c>)
   2c02c:	23cf      	movs	r3, #207	; 0xcf
   2c02e:	4a24      	ldr	r2, [pc, #144]	; (2c0c0 <clear_event_registrations+0x148>)
   2c030:	4824      	ldr	r0, [pc, #144]	; (2c0c4 <clear_event_registrations+0x14c>)
   2c032:	f003 f9c7 	bl	2f3c4 <assert_print>
   2c036:	482c      	ldr	r0, [pc, #176]	; (2c0e8 <clear_event_registrations+0x170>)
   2c038:	f003 f9c4 	bl	2f3c4 <assert_print>
   2c03c:	21cf      	movs	r1, #207	; 0xcf
   2c03e:	e7c6      	b.n	2bfce <clear_event_registrations+0x56>
	return node->next != NULL;
   2c040:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   2c044:	b12b      	cbz	r3, 2c052 <clear_event_registrations+0xda>
	sys_dnode_t *const prev = node->prev;
   2c046:	f850 2c10 	ldr.w	r2, [r0, #-16]
	prev->next = next;
   2c04a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2c04c:	605a      	str	r2, [r3, #4]
	node->prev = NULL;
   2c04e:	e940 6605 	strd	r6, r6, [r0, #-20]
   2c052:	4638      	mov	r0, r7
   2c054:	f7fd f87e 	bl	29154 <z_spin_unlock_valid>
   2c058:	b960      	cbnz	r0, 2c074 <clear_event_registrations+0xfc>
   2c05a:	23c2      	movs	r3, #194	; 0xc2
   2c05c:	4a23      	ldr	r2, [pc, #140]	; (2c0ec <clear_event_registrations+0x174>)
   2c05e:	4924      	ldr	r1, [pc, #144]	; (2c0f0 <clear_event_registrations+0x178>)
   2c060:	4818      	ldr	r0, [pc, #96]	; (2c0c4 <clear_event_registrations+0x14c>)
   2c062:	f003 f9af 	bl	2f3c4 <assert_print>
   2c066:	4914      	ldr	r1, [pc, #80]	; (2c0b8 <clear_event_registrations+0x140>)
   2c068:	4822      	ldr	r0, [pc, #136]	; (2c0f4 <clear_event_registrations+0x17c>)
   2c06a:	f003 f9ab 	bl	2f3c4 <assert_print>
   2c06e:	21c2      	movs	r1, #194	; 0xc2
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2c070:	481e      	ldr	r0, [pc, #120]	; (2c0ec <clear_event_registrations+0x174>)
   2c072:	e7ad      	b.n	2bfd0 <clear_event_registrations+0x58>
   2c074:	f385 8811 	msr	BASEPRI, r5
   2c078:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2c07c:	f04f 0320 	mov.w	r3, #32
   2c080:	f3ef 8511 	mrs	r5, BASEPRI
   2c084:	f383 8812 	msr	BASEPRI_MAX, r3
   2c088:	f3bf 8f6f 	isb	sy
   2c08c:	4638      	mov	r0, r7
   2c08e:	f7fd f853 	bl	29138 <z_spin_lock_valid>
   2c092:	3c01      	subs	r4, #1
   2c094:	b958      	cbnz	r0, 2c0ae <clear_event_registrations+0x136>
   2c096:	2394      	movs	r3, #148	; 0x94
   2c098:	4a14      	ldr	r2, [pc, #80]	; (2c0ec <clear_event_registrations+0x174>)
   2c09a:	4917      	ldr	r1, [pc, #92]	; (2c0f8 <clear_event_registrations+0x180>)
   2c09c:	4809      	ldr	r0, [pc, #36]	; (2c0c4 <clear_event_registrations+0x14c>)
   2c09e:	f003 f991 	bl	2f3c4 <assert_print>
   2c0a2:	4905      	ldr	r1, [pc, #20]	; (2c0b8 <clear_event_registrations+0x140>)
   2c0a4:	4815      	ldr	r0, [pc, #84]	; (2c0fc <clear_event_registrations+0x184>)
   2c0a6:	f003 f98d 	bl	2f3c4 <assert_print>
   2c0aa:	2194      	movs	r1, #148	; 0x94
   2c0ac:	e7e0      	b.n	2c070 <clear_event_registrations+0xf8>
	z_spin_lock_set_owner(l);
   2c0ae:	4638      	mov	r0, r7
   2c0b0:	f7fd f85e 	bl	29170 <z_spin_lock_set_owner>
	return k;
   2c0b4:	4640      	mov	r0, r8
   2c0b6:	e768      	b.n	2bf8a <clear_event_registrations+0x12>
   2c0b8:	2000ef40 	.word	0x2000ef40
   2c0bc:	00041c26 	.word	0x00041c26
   2c0c0:	00041be8 	.word	0x00041be8
   2c0c4:	00039995 	.word	0x00039995
   2c0c8:	00041c40 	.word	0x00041c40
   2c0cc:	00041c55 	.word	0x00041c55
   2c0d0:	00041c71 	.word	0x00041c71
   2c0d4:	00041c82 	.word	0x00041c82
   2c0d8:	00041c9f 	.word	0x00041c9f
   2c0dc:	00041cb6 	.word	0x00041cb6
   2c0e0:	00041cd1 	.word	0x00041cd1
   2c0e4:	0003ea9e 	.word	0x0003ea9e
   2c0e8:	00041cea 	.word	0x00041cea
   2c0ec:	00039e53 	.word	0x00039e53
   2c0f0:	00039e80 	.word	0x00039e80
   2c0f4:	00039e97 	.word	0x00039e97
   2c0f8:	00039eac 	.word	0x00039eac
   2c0fc:	00039ec1 	.word	0x00039ec1

0002c100 <k_poll_event_init>:
{
   2c100:	b508      	push	{r3, lr}
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   2c102:	b162      	cbz	r2, 2c11e <k_poll_event_init+0x1e>
   2c104:	4917      	ldr	r1, [pc, #92]	; (2c164 <k_poll_event_init+0x64>)
   2c106:	232d      	movs	r3, #45	; 0x2d
   2c108:	4a17      	ldr	r2, [pc, #92]	; (2c168 <k_poll_event_init+0x68>)
   2c10a:	4818      	ldr	r0, [pc, #96]	; (2c16c <k_poll_event_init+0x6c>)
   2c10c:	f003 f95a 	bl	2f3c4 <assert_print>
   2c110:	4817      	ldr	r0, [pc, #92]	; (2c170 <k_poll_event_init+0x70>)
   2c112:	f003 f957 	bl	2f3c4 <assert_print>
   2c116:	212d      	movs	r1, #45	; 0x2d
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   2c118:	4813      	ldr	r0, [pc, #76]	; (2c168 <k_poll_event_init+0x68>)
   2c11a:	f003 f94c 	bl	2f3b6 <assert_post_action>
   2c11e:	293f      	cmp	r1, #63	; 0x3f
   2c120:	d90a      	bls.n	2c138 <k_poll_event_init+0x38>
   2c122:	4914      	ldr	r1, [pc, #80]	; (2c174 <k_poll_event_init+0x74>)
   2c124:	232f      	movs	r3, #47	; 0x2f
   2c126:	4a10      	ldr	r2, [pc, #64]	; (2c168 <k_poll_event_init+0x68>)
   2c128:	4810      	ldr	r0, [pc, #64]	; (2c16c <k_poll_event_init+0x6c>)
   2c12a:	f003 f94b 	bl	2f3c4 <assert_print>
   2c12e:	4812      	ldr	r0, [pc, #72]	; (2c178 <k_poll_event_init+0x78>)
   2c130:	f003 f948 	bl	2f3c4 <assert_print>
   2c134:	212f      	movs	r1, #47	; 0x2f
   2c136:	e7ef      	b.n	2c118 <k_poll_event_init+0x18>
	__ASSERT(obj != NULL, "must provide an object\n");
   2c138:	b953      	cbnz	r3, 2c150 <k_poll_event_init+0x50>
   2c13a:	4910      	ldr	r1, [pc, #64]	; (2c17c <k_poll_event_init+0x7c>)
   2c13c:	2330      	movs	r3, #48	; 0x30
   2c13e:	4a0a      	ldr	r2, [pc, #40]	; (2c168 <k_poll_event_init+0x68>)
   2c140:	480a      	ldr	r0, [pc, #40]	; (2c16c <k_poll_event_init+0x6c>)
   2c142:	f003 f93f 	bl	2f3c4 <assert_print>
   2c146:	480e      	ldr	r0, [pc, #56]	; (2c180 <k_poll_event_init+0x80>)
   2c148:	f003 f93c 	bl	2f3c4 <assert_print>
   2c14c:	2130      	movs	r1, #48	; 0x30
   2c14e:	e7e3      	b.n	2c118 <k_poll_event_init+0x18>
	event->poller = NULL;
   2c150:	6082      	str	r2, [r0, #8]
	event->type = type;
   2c152:	0209      	lsls	r1, r1, #8
   2c154:	7b02      	ldrb	r2, [r0, #12]
   2c156:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   2c15a:	4311      	orrs	r1, r2
	event->obj = obj;
   2c15c:	e9c0 1303 	strd	r1, r3, [r0, #12]
}
   2c160:	bd08      	pop	{r3, pc}
   2c162:	bf00      	nop
   2c164:	00041d00 	.word	0x00041d00
   2c168:	00041be8 	.word	0x00041be8
   2c16c:	00039995 	.word	0x00039995
   2c170:	00041d20 	.word	0x00041d20
   2c174:	00041d46 	.word	0x00041d46
   2c178:	00041d6a 	.word	0x00041d6a
   2c17c:	00041d7a 	.word	0x00041d7a
   2c180:	00041d8d 	.word	0x00041d8d

0002c184 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   2c184:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c188:	461e      	mov	r6, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   2c18a:	4b5c      	ldr	r3, [pc, #368]	; (2c2fc <z_impl_k_poll+0x178>)
{
   2c18c:	4617      	mov	r7, r2
	struct z_poller *poller = &_current->poller;
   2c18e:	f8d3 8008 	ldr.w	r8, [r3, #8]

	poller->is_polling = true;
   2c192:	2301      	movs	r3, #1
{
   2c194:	4605      	mov	r5, r0
	struct z_poller *poller = &_current->poller;
   2c196:	f108 0260 	add.w	r2, r8, #96	; 0x60
	poller->is_polling = true;
   2c19a:	f888 3060 	strb.w	r3, [r8, #96]	; 0x60
	poller->mode = MODE_POLL;
   2c19e:	f888 3061 	strb.w	r3, [r8, #97]	; 0x61
   2c1a2:	f3ef 8b05 	mrs	fp, IPSR

	__ASSERT(!arch_is_in_isr(), "");
   2c1a6:	f1bb 0f00 	cmp.w	fp, #0
   2c1aa:	d00e      	beq.n	2c1ca <z_impl_k_poll+0x46>
   2c1ac:	4954      	ldr	r1, [pc, #336]	; (2c300 <z_impl_k_poll+0x17c>)
   2c1ae:	f240 132d 	movw	r3, #301	; 0x12d
   2c1b2:	4a54      	ldr	r2, [pc, #336]	; (2c304 <z_impl_k_poll+0x180>)
   2c1b4:	4854      	ldr	r0, [pc, #336]	; (2c308 <z_impl_k_poll+0x184>)
   2c1b6:	f003 f905 	bl	2f3c4 <assert_print>
   2c1ba:	4854      	ldr	r0, [pc, #336]	; (2c30c <z_impl_k_poll+0x188>)
   2c1bc:	f003 f902 	bl	2f3c4 <assert_print>
   2c1c0:	f240 112d 	movw	r1, #301	; 0x12d
	__ASSERT(events != NULL, "NULL events\n");
   2c1c4:	484f      	ldr	r0, [pc, #316]	; (2c304 <z_impl_k_poll+0x180>)
   2c1c6:	f003 f8f6 	bl	2f3b6 <assert_post_action>
   2c1ca:	b960      	cbnz	r0, 2c1e6 <z_impl_k_poll+0x62>
   2c1cc:	4950      	ldr	r1, [pc, #320]	; (2c310 <z_impl_k_poll+0x18c>)
   2c1ce:	f44f 7397 	mov.w	r3, #302	; 0x12e
   2c1d2:	4a4c      	ldr	r2, [pc, #304]	; (2c304 <z_impl_k_poll+0x180>)
   2c1d4:	484c      	ldr	r0, [pc, #304]	; (2c308 <z_impl_k_poll+0x184>)
   2c1d6:	f003 f8f5 	bl	2f3c4 <assert_print>
   2c1da:	484e      	ldr	r0, [pc, #312]	; (2c314 <z_impl_k_poll+0x190>)
   2c1dc:	f003 f8f2 	bl	2f3c4 <assert_print>
   2c1e0:	f44f 7197 	mov.w	r1, #302	; 0x12e
   2c1e4:	e7ee      	b.n	2c1c4 <z_impl_k_poll+0x40>
	__ASSERT(num_events >= 0, "<0 events\n");
   2c1e6:	2900      	cmp	r1, #0
   2c1e8:	da0c      	bge.n	2c204 <z_impl_k_poll+0x80>
   2c1ea:	494b      	ldr	r1, [pc, #300]	; (2c318 <z_impl_k_poll+0x194>)
   2c1ec:	f240 132f 	movw	r3, #303	; 0x12f
   2c1f0:	4a44      	ldr	r2, [pc, #272]	; (2c304 <z_impl_k_poll+0x180>)
   2c1f2:	4845      	ldr	r0, [pc, #276]	; (2c308 <z_impl_k_poll+0x184>)
   2c1f4:	f003 f8e6 	bl	2f3c4 <assert_print>
   2c1f8:	4848      	ldr	r0, [pc, #288]	; (2c31c <z_impl_k_poll+0x198>)
   2c1fa:	f003 f8e3 	bl	2f3c4 <assert_print>
   2c1fe:	f240 112f 	movw	r1, #303	; 0x12f
   2c202:	e7df      	b.n	2c1c4 <z_impl_k_poll+0x40>

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   2c204:	ea57 0306 	orrs.w	r3, r7, r6
   2c208:	bf0c      	ite	eq
   2c20a:	2301      	moveq	r3, #1
   2c20c:	2300      	movne	r3, #0
   2c20e:	f7ff fda5 	bl	2bd5c <register_events>
   2c212:	4681      	mov	r9, r0
   2c214:	f04f 0320 	mov.w	r3, #32
   2c218:	f3ef 8a11 	mrs	sl, BASEPRI
   2c21c:	f383 8812 	msr	BASEPRI_MAX, r3
   2c220:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2c224:	483e      	ldr	r0, [pc, #248]	; (2c320 <z_impl_k_poll+0x19c>)
   2c226:	f7fc ff87 	bl	29138 <z_spin_lock_valid>
   2c22a:	b960      	cbnz	r0, 2c246 <z_impl_k_poll+0xc2>
   2c22c:	2394      	movs	r3, #148	; 0x94
   2c22e:	4a3d      	ldr	r2, [pc, #244]	; (2c324 <z_impl_k_poll+0x1a0>)
   2c230:	493d      	ldr	r1, [pc, #244]	; (2c328 <z_impl_k_poll+0x1a4>)
   2c232:	4835      	ldr	r0, [pc, #212]	; (2c308 <z_impl_k_poll+0x184>)
   2c234:	f003 f8c6 	bl	2f3c4 <assert_print>
   2c238:	4939      	ldr	r1, [pc, #228]	; (2c320 <z_impl_k_poll+0x19c>)
   2c23a:	483c      	ldr	r0, [pc, #240]	; (2c32c <z_impl_k_poll+0x1a8>)
   2c23c:	f003 f8c2 	bl	2f3c4 <assert_print>
   2c240:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2c242:	4838      	ldr	r0, [pc, #224]	; (2c324 <z_impl_k_poll+0x1a0>)
   2c244:	e7bf      	b.n	2c1c6 <z_impl_k_poll+0x42>
	z_spin_lock_set_owner(l);
   2c246:	4836      	ldr	r0, [pc, #216]	; (2c320 <z_impl_k_poll+0x19c>)
   2c248:	f7fc ff92 	bl	29170 <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   2c24c:	f898 4060 	ldrb.w	r4, [r8, #96]	; 0x60
   2c250:	b9e4      	cbnz	r4, 2c28c <z_impl_k_poll+0x108>
		clear_event_registrations(events, events_registered, key);
   2c252:	4628      	mov	r0, r5
   2c254:	4652      	mov	r2, sl
   2c256:	4649      	mov	r1, r9
   2c258:	f7ff fe8e 	bl	2bf78 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2c25c:	4830      	ldr	r0, [pc, #192]	; (2c320 <z_impl_k_poll+0x19c>)
   2c25e:	f7fc ff79 	bl	29154 <z_spin_unlock_valid>
   2c262:	b958      	cbnz	r0, 2c27c <z_impl_k_poll+0xf8>
   2c264:	23c2      	movs	r3, #194	; 0xc2
   2c266:	4a2f      	ldr	r2, [pc, #188]	; (2c324 <z_impl_k_poll+0x1a0>)
   2c268:	4931      	ldr	r1, [pc, #196]	; (2c330 <z_impl_k_poll+0x1ac>)
   2c26a:	4827      	ldr	r0, [pc, #156]	; (2c308 <z_impl_k_poll+0x184>)
   2c26c:	f003 f8aa 	bl	2f3c4 <assert_print>
   2c270:	492b      	ldr	r1, [pc, #172]	; (2c320 <z_impl_k_poll+0x19c>)
   2c272:	4830      	ldr	r0, [pc, #192]	; (2c334 <z_impl_k_poll+0x1b0>)
   2c274:	f003 f8a6 	bl	2f3c4 <assert_print>
   2c278:	21c2      	movs	r1, #194	; 0xc2
   2c27a:	e7e2      	b.n	2c242 <z_impl_k_poll+0xbe>
	__asm__ volatile(
   2c27c:	f38a 8811 	msr	BASEPRI, sl
   2c280:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   2c284:	4620      	mov	r0, r4
   2c286:	b003      	add	sp, #12
   2c288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2c28c:	ea57 0306 	orrs.w	r3, r7, r6
	poller->is_polling = false;
   2c290:	f888 b060 	strb.w	fp, [r8, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2c294:	d10b      	bne.n	2c2ae <z_impl_k_poll+0x12a>
   2c296:	4822      	ldr	r0, [pc, #136]	; (2c320 <z_impl_k_poll+0x19c>)
   2c298:	f7fc ff5c 	bl	29154 <z_spin_unlock_valid>
   2c29c:	2800      	cmp	r0, #0
   2c29e:	d0e1      	beq.n	2c264 <z_impl_k_poll+0xe0>
   2c2a0:	f38a 8811 	msr	BASEPRI, sl
   2c2a4:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   2c2a8:	f06f 040a 	mvn.w	r4, #10
   2c2ac:	e7ea      	b.n	2c284 <z_impl_k_poll+0x100>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   2c2ae:	4651      	mov	r1, sl
   2c2b0:	e9cd 7600 	strd	r7, r6, [sp]
   2c2b4:	4a20      	ldr	r2, [pc, #128]	; (2c338 <z_impl_k_poll+0x1b4>)
   2c2b6:	481a      	ldr	r0, [pc, #104]	; (2c320 <z_impl_k_poll+0x19c>)
   2c2b8:	f7fe fc36 	bl	2ab28 <z_pend_curr>
   2c2bc:	4604      	mov	r4, r0
	__asm__ volatile(
   2c2be:	f04f 0320 	mov.w	r3, #32
   2c2c2:	f3ef 8611 	mrs	r6, BASEPRI
   2c2c6:	f383 8812 	msr	BASEPRI_MAX, r3
   2c2ca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2c2ce:	4814      	ldr	r0, [pc, #80]	; (2c320 <z_impl_k_poll+0x19c>)
   2c2d0:	f7fc ff32 	bl	29138 <z_spin_lock_valid>
   2c2d4:	2800      	cmp	r0, #0
   2c2d6:	d0a9      	beq.n	2c22c <z_impl_k_poll+0xa8>
	z_spin_lock_set_owner(l);
   2c2d8:	4811      	ldr	r0, [pc, #68]	; (2c320 <z_impl_k_poll+0x19c>)
   2c2da:	f7fc ff49 	bl	29170 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   2c2de:	4628      	mov	r0, r5
   2c2e0:	4632      	mov	r2, r6
   2c2e2:	4649      	mov	r1, r9
   2c2e4:	f7ff fe48 	bl	2bf78 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2c2e8:	480d      	ldr	r0, [pc, #52]	; (2c320 <z_impl_k_poll+0x19c>)
   2c2ea:	f7fc ff33 	bl	29154 <z_spin_unlock_valid>
   2c2ee:	2800      	cmp	r0, #0
   2c2f0:	d0b8      	beq.n	2c264 <z_impl_k_poll+0xe0>
	__asm__ volatile(
   2c2f2:	f386 8811 	msr	BASEPRI, r6
   2c2f6:	f3bf 8f6f 	isb	sy
	return swap_rc;
   2c2fa:	e7c3      	b.n	2c284 <z_impl_k_poll+0x100>
   2c2fc:	2000eeec 	.word	0x2000eeec
   2c300:	000415d8 	.word	0x000415d8
   2c304:	00041be8 	.word	0x00041be8
   2c308:	00039995 	.word	0x00039995
   2c30c:	0003a4e8 	.word	0x0003a4e8
   2c310:	00041da7 	.word	0x00041da7
   2c314:	00041dbd 	.word	0x00041dbd
   2c318:	00041dcc 	.word	0x00041dcc
   2c31c:	00041ddc 	.word	0x00041ddc
   2c320:	2000ef40 	.word	0x2000ef40
   2c324:	00039e53 	.word	0x00039e53
   2c328:	00039eac 	.word	0x00039eac
   2c32c:	00039ec1 	.word	0x00039ec1
   2c330:	00039e80 	.word	0x00039e80
   2c334:	00039e97 	.word	0x00039e97
   2c338:	2000ca94 	.word	0x2000ca94

0002c33c <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   2c33c:	b570      	push	{r4, r5, r6, lr}
   2c33e:	4604      	mov	r4, r0
   2c340:	460d      	mov	r5, r1
	__asm__ volatile(
   2c342:	f04f 0320 	mov.w	r3, #32
   2c346:	f3ef 8611 	mrs	r6, BASEPRI
   2c34a:	f383 8812 	msr	BASEPRI_MAX, r3
   2c34e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2c352:	4820      	ldr	r0, [pc, #128]	; (2c3d4 <z_impl_k_poll_signal_raise+0x98>)
   2c354:	f7fc fef0 	bl	29138 <z_spin_lock_valid>
   2c358:	b968      	cbnz	r0, 2c376 <z_impl_k_poll_signal_raise+0x3a>
   2c35a:	2394      	movs	r3, #148	; 0x94
   2c35c:	4a1e      	ldr	r2, [pc, #120]	; (2c3d8 <z_impl_k_poll_signal_raise+0x9c>)
   2c35e:	491f      	ldr	r1, [pc, #124]	; (2c3dc <z_impl_k_poll_signal_raise+0xa0>)
   2c360:	481f      	ldr	r0, [pc, #124]	; (2c3e0 <z_impl_k_poll_signal_raise+0xa4>)
   2c362:	f003 f82f 	bl	2f3c4 <assert_print>
   2c366:	491b      	ldr	r1, [pc, #108]	; (2c3d4 <z_impl_k_poll_signal_raise+0x98>)
   2c368:	481e      	ldr	r0, [pc, #120]	; (2c3e4 <z_impl_k_poll_signal_raise+0xa8>)
   2c36a:	f003 f82b 	bl	2f3c4 <assert_print>
   2c36e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2c370:	4819      	ldr	r0, [pc, #100]	; (2c3d8 <z_impl_k_poll_signal_raise+0x9c>)
   2c372:	f003 f820 	bl	2f3b6 <assert_post_action>
	z_spin_lock_set_owner(l);
   2c376:	4817      	ldr	r0, [pc, #92]	; (2c3d4 <z_impl_k_poll_signal_raise+0x98>)
   2c378:	f7fc fefa 	bl	29170 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
	sig->signaled = 1U;
   2c37c:	2101      	movs	r1, #1
	return list->head == list;
   2c37e:	6820      	ldr	r0, [r4, #0]
	sig->result = result;
   2c380:	60e5      	str	r5, [r4, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   2c382:	4284      	cmp	r4, r0
	sig->signaled = 1U;
   2c384:	60a1      	str	r1, [r4, #8]
   2c386:	d10f      	bne.n	2c3a8 <z_impl_k_poll_signal_raise+0x6c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2c388:	4812      	ldr	r0, [pc, #72]	; (2c3d4 <z_impl_k_poll_signal_raise+0x98>)
   2c38a:	f7fc fee3 	bl	29154 <z_spin_unlock_valid>
   2c38e:	b9d8      	cbnz	r0, 2c3c8 <z_impl_k_poll_signal_raise+0x8c>
   2c390:	23c2      	movs	r3, #194	; 0xc2
   2c392:	4a11      	ldr	r2, [pc, #68]	; (2c3d8 <z_impl_k_poll_signal_raise+0x9c>)
   2c394:	4914      	ldr	r1, [pc, #80]	; (2c3e8 <z_impl_k_poll_signal_raise+0xac>)
   2c396:	4812      	ldr	r0, [pc, #72]	; (2c3e0 <z_impl_k_poll_signal_raise+0xa4>)
   2c398:	f003 f814 	bl	2f3c4 <assert_print>
   2c39c:	490d      	ldr	r1, [pc, #52]	; (2c3d4 <z_impl_k_poll_signal_raise+0x98>)
   2c39e:	4813      	ldr	r0, [pc, #76]	; (2c3ec <z_impl_k_poll_signal_raise+0xb0>)
   2c3a0:	f003 f810 	bl	2f3c4 <assert_print>
   2c3a4:	21c2      	movs	r1, #194	; 0xc2
   2c3a6:	e7e3      	b.n	2c370 <z_impl_k_poll_signal_raise+0x34>
	sys_dnode_t *const next = node->next;
   2c3a8:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2c3ac:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2c3ae:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2c3b0:	2300      	movs	r3, #0
	node->prev = NULL;
   2c3b2:	e9c0 3300 	strd	r3, r3, [r0]
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   2c3b6:	f00a f80b 	bl	363d0 <signal_poll_event>

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   2c3ba:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   2c3bc:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   2c3be:	4805      	ldr	r0, [pc, #20]	; (2c3d4 <z_impl_k_poll_signal_raise+0x98>)
   2c3c0:	f7fe f8f6 	bl	2a5b0 <z_reschedule>
	return rc;
}
   2c3c4:	4620      	mov	r0, r4
   2c3c6:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   2c3c8:	f386 8811 	msr	BASEPRI, r6
   2c3cc:	f3bf 8f6f 	isb	sy
		return 0;
   2c3d0:	2400      	movs	r4, #0
   2c3d2:	e7f7      	b.n	2c3c4 <z_impl_k_poll_signal_raise+0x88>
   2c3d4:	2000ef40 	.word	0x2000ef40
   2c3d8:	00039e53 	.word	0x00039e53
   2c3dc:	00039eac 	.word	0x00039eac
   2c3e0:	00039995 	.word	0x00039995
   2c3e4:	00039ec1 	.word	0x00039ec1
   2c3e8:	00039e80 	.word	0x00039e80
   2c3ec:	00039e97 	.word	0x00039e97

0002c3f0 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   2c3f0:	3204      	adds	r2, #4
#include <string.h>
#include <zephyr/sys/math_extras.h>
#include <zephyr/sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
   2c3f2:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   2c3f6:	4606      	mov	r6, r0
   2c3f8:	460d      	mov	r5, r1
   2c3fa:	d220      	bcs.n	2c43e <z_heap_aligned_alloc+0x4e>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   2c3fc:	f04f 0800 	mov.w	r8, #0
   2c400:	f04f 0900 	mov.w	r9, #0
   2c404:	f041 0104 	orr.w	r1, r1, #4
   2c408:	e9cd 8900 	strd	r8, r9, [sp]
   2c40c:	f7fc fb90 	bl	28b30 <k_heap_aligned_alloc>
	if (mem == NULL) {
   2c410:	4604      	mov	r4, r0
   2c412:	b1a0      	cbz	r0, 2c43e <z_heap_aligned_alloc+0x4e>
		return NULL;
	}

	heap_ref = mem;
	*heap_ref = heap;
   2c414:	f844 6b04 	str.w	r6, [r4], #4
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   2c418:	b195      	cbz	r5, 2c440 <z_heap_aligned_alloc+0x50>
   2c41a:	1e6b      	subs	r3, r5, #1
   2c41c:	421c      	tst	r4, r3
   2c41e:	d00f      	beq.n	2c440 <z_heap_aligned_alloc+0x50>
   2c420:	2325      	movs	r3, #37	; 0x25
   2c422:	4a09      	ldr	r2, [pc, #36]	; (2c448 <z_heap_aligned_alloc+0x58>)
   2c424:	4909      	ldr	r1, [pc, #36]	; (2c44c <z_heap_aligned_alloc+0x5c>)
   2c426:	480a      	ldr	r0, [pc, #40]	; (2c450 <z_heap_aligned_alloc+0x60>)
   2c428:	f002 ffcc 	bl	2f3c4 <assert_print>
   2c42c:	4621      	mov	r1, r4
   2c42e:	4809      	ldr	r0, [pc, #36]	; (2c454 <z_heap_aligned_alloc+0x64>)
   2c430:	462a      	mov	r2, r5
   2c432:	f002 ffc7 	bl	2f3c4 <assert_print>
   2c436:	2125      	movs	r1, #37	; 0x25
   2c438:	4803      	ldr	r0, [pc, #12]	; (2c448 <z_heap_aligned_alloc+0x58>)
   2c43a:	f002 ffbc 	bl	2f3b6 <assert_post_action>
		return NULL;
   2c43e:	2400      	movs	r4, #0
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
   2c440:	4620      	mov	r0, r4
   2c442:	b002      	add	sp, #8
   2c444:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   2c448:	00041de9 	.word	0x00041de9
   2c44c:	00041e0d 	.word	0x00041e0d
   2c450:	00039995 	.word	0x00039995
   2c454:	00041e3f 	.word	0x00041e3f

0002c458 <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
   2c458:	2803      	cmp	r0, #3
{
   2c45a:	460a      	mov	r2, r1
   2c45c:	b508      	push	{r3, lr}
	__ASSERT(align / sizeof(void *) >= 1
   2c45e:	d901      	bls.n	2c464 <k_aligned_alloc+0xc>
   2c460:	0783      	lsls	r3, r0, #30
   2c462:	d00c      	beq.n	2c47e <k_aligned_alloc+0x26>
   2c464:	4910      	ldr	r1, [pc, #64]	; (2c4a8 <k_aligned_alloc+0x50>)
   2c466:	2342      	movs	r3, #66	; 0x42
   2c468:	4a10      	ldr	r2, [pc, #64]	; (2c4ac <k_aligned_alloc+0x54>)
   2c46a:	4811      	ldr	r0, [pc, #68]	; (2c4b0 <k_aligned_alloc+0x58>)
   2c46c:	f002 ffaa 	bl	2f3c4 <assert_print>
   2c470:	4810      	ldr	r0, [pc, #64]	; (2c4b4 <k_aligned_alloc+0x5c>)
   2c472:	f002 ffa7 	bl	2f3c4 <assert_print>
   2c476:	2142      	movs	r1, #66	; 0x42
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   2c478:	480c      	ldr	r0, [pc, #48]	; (2c4ac <k_aligned_alloc+0x54>)
   2c47a:	f002 ff9c 	bl	2f3b6 <assert_post_action>
   2c47e:	1e43      	subs	r3, r0, #1
   2c480:	4203      	tst	r3, r0
   2c482:	d00a      	beq.n	2c49a <k_aligned_alloc+0x42>
   2c484:	490c      	ldr	r1, [pc, #48]	; (2c4b8 <k_aligned_alloc+0x60>)
   2c486:	2346      	movs	r3, #70	; 0x46
   2c488:	4a08      	ldr	r2, [pc, #32]	; (2c4ac <k_aligned_alloc+0x54>)
   2c48a:	4809      	ldr	r0, [pc, #36]	; (2c4b0 <k_aligned_alloc+0x58>)
   2c48c:	f002 ff9a 	bl	2f3c4 <assert_print>
   2c490:	480a      	ldr	r0, [pc, #40]	; (2c4bc <k_aligned_alloc+0x64>)
   2c492:	f002 ff97 	bl	2f3c4 <assert_print>
   2c496:	2146      	movs	r1, #70	; 0x46
   2c498:	e7ee      	b.n	2c478 <k_aligned_alloc+0x20>
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   2c49a:	4601      	mov	r1, r0

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
   2c49c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   2c4a0:	4807      	ldr	r0, [pc, #28]	; (2c4c0 <k_aligned_alloc+0x68>)
   2c4a2:	f7ff bfa5 	b.w	2c3f0 <z_heap_aligned_alloc>
   2c4a6:	bf00      	nop
   2c4a8:	00041e67 	.word	0x00041e67
   2c4ac:	00041de9 	.word	0x00041de9
   2c4b0:	00039995 	.word	0x00039995
   2c4b4:	00041ea4 	.word	0x00041ea4
   2c4b8:	00039cbd 	.word	0x00039cbd
   2c4bc:	00039cd8 	.word	0x00039cd8
   2c4c0:	2000ce08 	.word	0x2000ce08

0002c4c4 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   2c4c4:	4b01      	ldr	r3, [pc, #4]	; (2c4cc <k_thread_system_pool_assign+0x8>)
   2c4c6:	6743      	str	r3, [r0, #116]	; 0x74
}
   2c4c8:	4770      	bx	lr
   2c4ca:	bf00      	nop
   2c4cc:	2000ce08 	.word	0x2000ce08

0002c4d0 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   2c4d0:	b538      	push	{r3, r4, r5, lr}
   2c4d2:	4604      	mov	r4, r0
   2c4d4:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   2c4d6:	f009 fdf6 	bl	360c6 <k_is_in_isr>
   2c4da:	b920      	cbnz	r0, 2c4e6 <z_thread_aligned_alloc+0x16>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   2c4dc:	4b06      	ldr	r3, [pc, #24]	; (2c4f8 <z_thread_aligned_alloc+0x28>)
   2c4de:	689b      	ldr	r3, [r3, #8]
   2c4e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   2c4e2:	b90b      	cbnz	r3, 2c4e8 <z_thread_aligned_alloc+0x18>
	} else {
		ret = NULL;
	}

	return ret;
}
   2c4e4:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   2c4e6:	4b05      	ldr	r3, [pc, #20]	; (2c4fc <z_thread_aligned_alloc+0x2c>)
		ret = z_heap_aligned_alloc(heap, align, size);
   2c4e8:	462a      	mov	r2, r5
   2c4ea:	4621      	mov	r1, r4
   2c4ec:	4618      	mov	r0, r3
}
   2c4ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   2c4f2:	f7ff bf7d 	b.w	2c3f0 <z_heap_aligned_alloc>
   2c4f6:	bf00      	nop
   2c4f8:	2000eeec 	.word	0x2000eeec
   2c4fc:	2000ce08 	.word	0x2000ce08

0002c500 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   2c500:	4801      	ldr	r0, [pc, #4]	; (2c508 <boot_banner+0x8>)
   2c502:	f002 bd82 	b.w	2f00a <printk>
   2c506:	bf00      	nop
   2c508:	00041ed1 	.word	0x00041ed1

0002c50c <malloc>:
   2c50c:	4b02      	ldr	r3, [pc, #8]	; (2c518 <malloc+0xc>)
   2c50e:	4601      	mov	r1, r0
   2c510:	6818      	ldr	r0, [r3, #0]
   2c512:	f000 b855 	b.w	2c5c0 <_malloc_r>
   2c516:	bf00      	nop
   2c518:	2000ca9c 	.word	0x2000ca9c

0002c51c <free>:
   2c51c:	4b02      	ldr	r3, [pc, #8]	; (2c528 <free+0xc>)
   2c51e:	4601      	mov	r1, r0
   2c520:	6818      	ldr	r0, [r3, #0]
   2c522:	f000 b803 	b.w	2c52c <_free_r>
   2c526:	bf00      	nop
   2c528:	2000ca9c 	.word	0x2000ca9c

0002c52c <_free_r>:
   2c52c:	b538      	push	{r3, r4, r5, lr}
   2c52e:	4605      	mov	r5, r0
   2c530:	2900      	cmp	r1, #0
   2c532:	d041      	beq.n	2c5b8 <_free_r+0x8c>
   2c534:	f851 3c04 	ldr.w	r3, [r1, #-4]
   2c538:	1f0c      	subs	r4, r1, #4
   2c53a:	2b00      	cmp	r3, #0
   2c53c:	bfb8      	it	lt
   2c53e:	18e4      	addlt	r4, r4, r3
   2c540:	f001 f89a 	bl	2d678 <__malloc_lock>
   2c544:	4a1d      	ldr	r2, [pc, #116]	; (2c5bc <_free_r+0x90>)
   2c546:	6813      	ldr	r3, [r2, #0]
   2c548:	b933      	cbnz	r3, 2c558 <_free_r+0x2c>
   2c54a:	6063      	str	r3, [r4, #4]
   2c54c:	6014      	str	r4, [r2, #0]
   2c54e:	4628      	mov	r0, r5
   2c550:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2c554:	f001 b896 	b.w	2d684 <__malloc_unlock>
   2c558:	42a3      	cmp	r3, r4
   2c55a:	d908      	bls.n	2c56e <_free_r+0x42>
   2c55c:	6820      	ldr	r0, [r4, #0]
   2c55e:	1821      	adds	r1, r4, r0
   2c560:	428b      	cmp	r3, r1
   2c562:	bf01      	itttt	eq
   2c564:	6819      	ldreq	r1, [r3, #0]
   2c566:	685b      	ldreq	r3, [r3, #4]
   2c568:	1809      	addeq	r1, r1, r0
   2c56a:	6021      	streq	r1, [r4, #0]
   2c56c:	e7ed      	b.n	2c54a <_free_r+0x1e>
   2c56e:	461a      	mov	r2, r3
   2c570:	685b      	ldr	r3, [r3, #4]
   2c572:	b10b      	cbz	r3, 2c578 <_free_r+0x4c>
   2c574:	42a3      	cmp	r3, r4
   2c576:	d9fa      	bls.n	2c56e <_free_r+0x42>
   2c578:	6811      	ldr	r1, [r2, #0]
   2c57a:	1850      	adds	r0, r2, r1
   2c57c:	42a0      	cmp	r0, r4
   2c57e:	d10b      	bne.n	2c598 <_free_r+0x6c>
   2c580:	6820      	ldr	r0, [r4, #0]
   2c582:	4401      	add	r1, r0
   2c584:	1850      	adds	r0, r2, r1
   2c586:	6011      	str	r1, [r2, #0]
   2c588:	4283      	cmp	r3, r0
   2c58a:	d1e0      	bne.n	2c54e <_free_r+0x22>
   2c58c:	6818      	ldr	r0, [r3, #0]
   2c58e:	685b      	ldr	r3, [r3, #4]
   2c590:	4408      	add	r0, r1
   2c592:	6053      	str	r3, [r2, #4]
   2c594:	6010      	str	r0, [r2, #0]
   2c596:	e7da      	b.n	2c54e <_free_r+0x22>
   2c598:	d902      	bls.n	2c5a0 <_free_r+0x74>
   2c59a:	230c      	movs	r3, #12
   2c59c:	602b      	str	r3, [r5, #0]
   2c59e:	e7d6      	b.n	2c54e <_free_r+0x22>
   2c5a0:	6820      	ldr	r0, [r4, #0]
   2c5a2:	1821      	adds	r1, r4, r0
   2c5a4:	428b      	cmp	r3, r1
   2c5a6:	bf02      	ittt	eq
   2c5a8:	6819      	ldreq	r1, [r3, #0]
   2c5aa:	685b      	ldreq	r3, [r3, #4]
   2c5ac:	1809      	addeq	r1, r1, r0
   2c5ae:	6063      	str	r3, [r4, #4]
   2c5b0:	bf08      	it	eq
   2c5b2:	6021      	streq	r1, [r4, #0]
   2c5b4:	6054      	str	r4, [r2, #4]
   2c5b6:	e7ca      	b.n	2c54e <_free_r+0x22>
   2c5b8:	bd38      	pop	{r3, r4, r5, pc}
   2c5ba:	bf00      	nop
   2c5bc:	2000ef48 	.word	0x2000ef48

0002c5c0 <_malloc_r>:
   2c5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c5c2:	1ccd      	adds	r5, r1, #3
   2c5c4:	4606      	mov	r6, r0
   2c5c6:	f025 0503 	bic.w	r5, r5, #3
   2c5ca:	3508      	adds	r5, #8
   2c5cc:	2d0c      	cmp	r5, #12
   2c5ce:	bf38      	it	cc
   2c5d0:	250c      	movcc	r5, #12
   2c5d2:	2d00      	cmp	r5, #0
   2c5d4:	db01      	blt.n	2c5da <_malloc_r+0x1a>
   2c5d6:	42a9      	cmp	r1, r5
   2c5d8:	d903      	bls.n	2c5e2 <_malloc_r+0x22>
   2c5da:	230c      	movs	r3, #12
   2c5dc:	6033      	str	r3, [r6, #0]
   2c5de:	2000      	movs	r0, #0
   2c5e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2c5e2:	f001 f849 	bl	2d678 <__malloc_lock>
   2c5e6:	4921      	ldr	r1, [pc, #132]	; (2c66c <_malloc_r+0xac>)
   2c5e8:	680a      	ldr	r2, [r1, #0]
   2c5ea:	4614      	mov	r4, r2
   2c5ec:	b99c      	cbnz	r4, 2c616 <_malloc_r+0x56>
   2c5ee:	4f20      	ldr	r7, [pc, #128]	; (2c670 <_malloc_r+0xb0>)
   2c5f0:	683b      	ldr	r3, [r7, #0]
   2c5f2:	b923      	cbnz	r3, 2c5fe <_malloc_r+0x3e>
   2c5f4:	4621      	mov	r1, r4
   2c5f6:	4630      	mov	r0, r6
   2c5f8:	f000 fba8 	bl	2cd4c <_sbrk_r>
   2c5fc:	6038      	str	r0, [r7, #0]
   2c5fe:	4629      	mov	r1, r5
   2c600:	4630      	mov	r0, r6
   2c602:	f000 fba3 	bl	2cd4c <_sbrk_r>
   2c606:	1c43      	adds	r3, r0, #1
   2c608:	d123      	bne.n	2c652 <_malloc_r+0x92>
   2c60a:	230c      	movs	r3, #12
   2c60c:	4630      	mov	r0, r6
   2c60e:	6033      	str	r3, [r6, #0]
   2c610:	f001 f838 	bl	2d684 <__malloc_unlock>
   2c614:	e7e3      	b.n	2c5de <_malloc_r+0x1e>
   2c616:	6823      	ldr	r3, [r4, #0]
   2c618:	1b5b      	subs	r3, r3, r5
   2c61a:	d417      	bmi.n	2c64c <_malloc_r+0x8c>
   2c61c:	2b0b      	cmp	r3, #11
   2c61e:	d903      	bls.n	2c628 <_malloc_r+0x68>
   2c620:	6023      	str	r3, [r4, #0]
   2c622:	441c      	add	r4, r3
   2c624:	6025      	str	r5, [r4, #0]
   2c626:	e004      	b.n	2c632 <_malloc_r+0x72>
   2c628:	6863      	ldr	r3, [r4, #4]
   2c62a:	42a2      	cmp	r2, r4
   2c62c:	bf0c      	ite	eq
   2c62e:	600b      	streq	r3, [r1, #0]
   2c630:	6053      	strne	r3, [r2, #4]
   2c632:	4630      	mov	r0, r6
   2c634:	f001 f826 	bl	2d684 <__malloc_unlock>
   2c638:	f104 000b 	add.w	r0, r4, #11
   2c63c:	1d23      	adds	r3, r4, #4
   2c63e:	f020 0007 	bic.w	r0, r0, #7
   2c642:	1ac2      	subs	r2, r0, r3
   2c644:	bf1c      	itt	ne
   2c646:	1a1b      	subne	r3, r3, r0
   2c648:	50a3      	strne	r3, [r4, r2]
   2c64a:	e7c9      	b.n	2c5e0 <_malloc_r+0x20>
   2c64c:	4622      	mov	r2, r4
   2c64e:	6864      	ldr	r4, [r4, #4]
   2c650:	e7cc      	b.n	2c5ec <_malloc_r+0x2c>
   2c652:	1cc4      	adds	r4, r0, #3
   2c654:	f024 0403 	bic.w	r4, r4, #3
   2c658:	42a0      	cmp	r0, r4
   2c65a:	d0e3      	beq.n	2c624 <_malloc_r+0x64>
   2c65c:	1a21      	subs	r1, r4, r0
   2c65e:	4630      	mov	r0, r6
   2c660:	f000 fb74 	bl	2cd4c <_sbrk_r>
   2c664:	3001      	adds	r0, #1
   2c666:	d1dd      	bne.n	2c624 <_malloc_r+0x64>
   2c668:	e7cf      	b.n	2c60a <_malloc_r+0x4a>
   2c66a:	bf00      	nop
   2c66c:	2000ef48 	.word	0x2000ef48
   2c670:	2000ef44 	.word	0x2000ef44

0002c674 <_printf_float>:
   2c674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c678:	b091      	sub	sp, #68	; 0x44
   2c67a:	460c      	mov	r4, r1
   2c67c:	4616      	mov	r6, r2
   2c67e:	461f      	mov	r7, r3
   2c680:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   2c684:	4605      	mov	r5, r0
   2c686:	f000 ffe1 	bl	2d64c <_localeconv_r>
   2c68a:	6803      	ldr	r3, [r0, #0]
   2c68c:	4618      	mov	r0, r3
   2c68e:	9308      	str	r3, [sp, #32]
   2c690:	f7dc fdc7 	bl	9222 <strlen>
   2c694:	2300      	movs	r3, #0
   2c696:	9009      	str	r0, [sp, #36]	; 0x24
   2c698:	930e      	str	r3, [sp, #56]	; 0x38
   2c69a:	f8d8 3000 	ldr.w	r3, [r8]
   2c69e:	f894 a018 	ldrb.w	sl, [r4, #24]
   2c6a2:	3307      	adds	r3, #7
   2c6a4:	f8d4 b000 	ldr.w	fp, [r4]
   2c6a8:	f023 0307 	bic.w	r3, r3, #7
   2c6ac:	f103 0208 	add.w	r2, r3, #8
   2c6b0:	f8c8 2000 	str.w	r2, [r8]
   2c6b4:	f04f 32ff 	mov.w	r2, #4294967295
   2c6b8:	e9d3 8900 	ldrd	r8, r9, [r3]
   2c6bc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
   2c6c0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   2c6c4:	930b      	str	r3, [sp, #44]	; 0x2c
   2c6c6:	4b9d      	ldr	r3, [pc, #628]	; (2c93c <_printf_float+0x2c8>)
   2c6c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   2c6cc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
   2c6d0:	f7dc fa44 	bl	8b5c <__aeabi_dcmpun>
   2c6d4:	bb70      	cbnz	r0, 2c734 <_printf_float+0xc0>
   2c6d6:	f04f 32ff 	mov.w	r2, #4294967295
   2c6da:	4b98      	ldr	r3, [pc, #608]	; (2c93c <_printf_float+0x2c8>)
   2c6dc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   2c6e0:	f7dc fa1e 	bl	8b20 <__aeabi_dcmple>
   2c6e4:	bb30      	cbnz	r0, 2c734 <_printf_float+0xc0>
   2c6e6:	2200      	movs	r2, #0
   2c6e8:	2300      	movs	r3, #0
   2c6ea:	4640      	mov	r0, r8
   2c6ec:	4649      	mov	r1, r9
   2c6ee:	f7dc fa0d 	bl	8b0c <__aeabi_dcmplt>
   2c6f2:	b110      	cbz	r0, 2c6fa <_printf_float+0x86>
   2c6f4:	232d      	movs	r3, #45	; 0x2d
   2c6f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   2c6fa:	4a91      	ldr	r2, [pc, #580]	; (2c940 <_printf_float+0x2cc>)
   2c6fc:	4b91      	ldr	r3, [pc, #580]	; (2c944 <_printf_float+0x2d0>)
   2c6fe:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   2c702:	bf94      	ite	ls
   2c704:	4690      	movls	r8, r2
   2c706:	4698      	movhi	r8, r3
   2c708:	2303      	movs	r3, #3
   2c70a:	f04f 0900 	mov.w	r9, #0
   2c70e:	6123      	str	r3, [r4, #16]
   2c710:	f02b 0304 	bic.w	r3, fp, #4
   2c714:	6023      	str	r3, [r4, #0]
   2c716:	4633      	mov	r3, r6
   2c718:	aa0f      	add	r2, sp, #60	; 0x3c
   2c71a:	4621      	mov	r1, r4
   2c71c:	4628      	mov	r0, r5
   2c71e:	9700      	str	r7, [sp, #0]
   2c720:	f009 ffca 	bl	366b8 <_printf_common>
   2c724:	3001      	adds	r0, #1
   2c726:	f040 8099 	bne.w	2c85c <_printf_float+0x1e8>
   2c72a:	f04f 30ff 	mov.w	r0, #4294967295
   2c72e:	b011      	add	sp, #68	; 0x44
   2c730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c734:	4642      	mov	r2, r8
   2c736:	464b      	mov	r3, r9
   2c738:	4640      	mov	r0, r8
   2c73a:	4649      	mov	r1, r9
   2c73c:	f7dc fa0e 	bl	8b5c <__aeabi_dcmpun>
   2c740:	b140      	cbz	r0, 2c754 <_printf_float+0xe0>
   2c742:	464b      	mov	r3, r9
   2c744:	4a80      	ldr	r2, [pc, #512]	; (2c948 <_printf_float+0x2d4>)
   2c746:	2b00      	cmp	r3, #0
   2c748:	bfbc      	itt	lt
   2c74a:	232d      	movlt	r3, #45	; 0x2d
   2c74c:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   2c750:	4b7e      	ldr	r3, [pc, #504]	; (2c94c <_printf_float+0x2d8>)
   2c752:	e7d4      	b.n	2c6fe <_printf_float+0x8a>
   2c754:	6863      	ldr	r3, [r4, #4]
   2c756:	1c5a      	adds	r2, r3, #1
   2c758:	d129      	bne.n	2c7ae <_printf_float+0x13a>
   2c75a:	2306      	movs	r3, #6
   2c75c:	6063      	str	r3, [r4, #4]
   2c75e:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
   2c762:	2200      	movs	r2, #0
   2c764:	4628      	mov	r0, r5
   2c766:	6023      	str	r3, [r4, #0]
   2c768:	9206      	str	r2, [sp, #24]
   2c76a:	aa0e      	add	r2, sp, #56	; 0x38
   2c76c:	e9cd a204 	strd	sl, r2, [sp, #16]
   2c770:	aa0d      	add	r2, sp, #52	; 0x34
   2c772:	9203      	str	r2, [sp, #12]
   2c774:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   2c778:	e9cd 3201 	strd	r3, r2, [sp, #4]
   2c77c:	6863      	ldr	r3, [r4, #4]
   2c77e:	4642      	mov	r2, r8
   2c780:	9300      	str	r3, [sp, #0]
   2c782:	464b      	mov	r3, r9
   2c784:	f009 fef8 	bl	36578 <__cvt>
   2c788:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
   2c78c:	4680      	mov	r8, r0
   2c78e:	990d      	ldr	r1, [sp, #52]	; 0x34
   2c790:	d115      	bne.n	2c7be <_printf_float+0x14a>
   2c792:	1ccb      	adds	r3, r1, #3
   2c794:	db3b      	blt.n	2c80e <_printf_float+0x19a>
   2c796:	6863      	ldr	r3, [r4, #4]
   2c798:	4299      	cmp	r1, r3
   2c79a:	dc38      	bgt.n	2c80e <_printf_float+0x19a>
   2c79c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2c79e:	4299      	cmp	r1, r3
   2c7a0:	db55      	blt.n	2c84e <_printf_float+0x1da>
   2c7a2:	6823      	ldr	r3, [r4, #0]
   2c7a4:	6121      	str	r1, [r4, #16]
   2c7a6:	07d8      	lsls	r0, r3, #31
   2c7a8:	d545      	bpl.n	2c836 <_printf_float+0x1c2>
   2c7aa:	1c4b      	adds	r3, r1, #1
   2c7ac:	e042      	b.n	2c834 <_printf_float+0x1c0>
   2c7ae:	f00a 02df 	and.w	r2, sl, #223	; 0xdf
   2c7b2:	2a47      	cmp	r2, #71	; 0x47
   2c7b4:	d1d3      	bne.n	2c75e <_printf_float+0xea>
   2c7b6:	2b00      	cmp	r3, #0
   2c7b8:	d1d1      	bne.n	2c75e <_printf_float+0xea>
   2c7ba:	2301      	movs	r3, #1
   2c7bc:	e7ce      	b.n	2c75c <_printf_float+0xe8>
   2c7be:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   2c7c2:	d107      	bne.n	2c7d4 <_printf_float+0x160>
   2c7c4:	1cc8      	adds	r0, r1, #3
   2c7c6:	db25      	blt.n	2c814 <_printf_float+0x1a0>
   2c7c8:	6863      	ldr	r3, [r4, #4]
   2c7ca:	428b      	cmp	r3, r1
   2c7cc:	db22      	blt.n	2c814 <_printf_float+0x1a0>
   2c7ce:	f04f 0a67 	mov.w	sl, #103	; 0x67
   2c7d2:	e7e3      	b.n	2c79c <_printf_float+0x128>
   2c7d4:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   2c7d8:	d81f      	bhi.n	2c81a <_printf_float+0x1a6>
   2c7da:	3901      	subs	r1, #1
   2c7dc:	4652      	mov	r2, sl
   2c7de:	f104 0050 	add.w	r0, r4, #80	; 0x50
   2c7e2:	910d      	str	r1, [sp, #52]	; 0x34
   2c7e4:	f009 ff2f 	bl	36646 <__exponent>
   2c7e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2c7ea:	4681      	mov	r9, r0
   2c7ec:	1813      	adds	r3, r2, r0
   2c7ee:	2a01      	cmp	r2, #1
   2c7f0:	6123      	str	r3, [r4, #16]
   2c7f2:	dc02      	bgt.n	2c7fa <_printf_float+0x186>
   2c7f4:	6822      	ldr	r2, [r4, #0]
   2c7f6:	07d2      	lsls	r2, r2, #31
   2c7f8:	d501      	bpl.n	2c7fe <_printf_float+0x18a>
   2c7fa:	3301      	adds	r3, #1
   2c7fc:	6123      	str	r3, [r4, #16]
   2c7fe:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   2c802:	2b00      	cmp	r3, #0
   2c804:	d087      	beq.n	2c716 <_printf_float+0xa2>
   2c806:	232d      	movs	r3, #45	; 0x2d
   2c808:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   2c80c:	e783      	b.n	2c716 <_printf_float+0xa2>
   2c80e:	f04f 0a65 	mov.w	sl, #101	; 0x65
   2c812:	e7e2      	b.n	2c7da <_printf_float+0x166>
   2c814:	f04f 0a45 	mov.w	sl, #69	; 0x45
   2c818:	e7df      	b.n	2c7da <_printf_float+0x166>
   2c81a:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
   2c81e:	d1bd      	bne.n	2c79c <_printf_float+0x128>
   2c820:	2900      	cmp	r1, #0
   2c822:	6863      	ldr	r3, [r4, #4]
   2c824:	dd0b      	ble.n	2c83e <_printf_float+0x1ca>
   2c826:	6121      	str	r1, [r4, #16]
   2c828:	b913      	cbnz	r3, 2c830 <_printf_float+0x1bc>
   2c82a:	6822      	ldr	r2, [r4, #0]
   2c82c:	07d0      	lsls	r0, r2, #31
   2c82e:	d502      	bpl.n	2c836 <_printf_float+0x1c2>
   2c830:	3301      	adds	r3, #1
   2c832:	440b      	add	r3, r1
   2c834:	6123      	str	r3, [r4, #16]
   2c836:	f04f 0900 	mov.w	r9, #0
   2c83a:	65a1      	str	r1, [r4, #88]	; 0x58
   2c83c:	e7df      	b.n	2c7fe <_printf_float+0x18a>
   2c83e:	b913      	cbnz	r3, 2c846 <_printf_float+0x1d2>
   2c840:	6822      	ldr	r2, [r4, #0]
   2c842:	07d2      	lsls	r2, r2, #31
   2c844:	d501      	bpl.n	2c84a <_printf_float+0x1d6>
   2c846:	3302      	adds	r3, #2
   2c848:	e7f4      	b.n	2c834 <_printf_float+0x1c0>
   2c84a:	2301      	movs	r3, #1
   2c84c:	e7f2      	b.n	2c834 <_printf_float+0x1c0>
   2c84e:	2900      	cmp	r1, #0
   2c850:	bfd4      	ite	le
   2c852:	f1c1 0202 	rsble	r2, r1, #2
   2c856:	2201      	movgt	r2, #1
   2c858:	4413      	add	r3, r2
   2c85a:	e7eb      	b.n	2c834 <_printf_float+0x1c0>
   2c85c:	6823      	ldr	r3, [r4, #0]
   2c85e:	055a      	lsls	r2, r3, #21
   2c860:	d407      	bmi.n	2c872 <_printf_float+0x1fe>
   2c862:	6923      	ldr	r3, [r4, #16]
   2c864:	4642      	mov	r2, r8
   2c866:	4631      	mov	r1, r6
   2c868:	4628      	mov	r0, r5
   2c86a:	47b8      	blx	r7
   2c86c:	3001      	adds	r0, #1
   2c86e:	d12b      	bne.n	2c8c8 <_printf_float+0x254>
   2c870:	e75b      	b.n	2c72a <_printf_float+0xb6>
   2c872:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   2c876:	f240 80dc 	bls.w	2ca32 <_printf_float+0x3be>
   2c87a:	2200      	movs	r2, #0
   2c87c:	2300      	movs	r3, #0
   2c87e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   2c882:	f7dc f939 	bl	8af8 <__aeabi_dcmpeq>
   2c886:	2800      	cmp	r0, #0
   2c888:	d033      	beq.n	2c8f2 <_printf_float+0x27e>
   2c88a:	2301      	movs	r3, #1
   2c88c:	4a30      	ldr	r2, [pc, #192]	; (2c950 <_printf_float+0x2dc>)
   2c88e:	4631      	mov	r1, r6
   2c890:	4628      	mov	r0, r5
   2c892:	47b8      	blx	r7
   2c894:	3001      	adds	r0, #1
   2c896:	f43f af48 	beq.w	2c72a <_printf_float+0xb6>
   2c89a:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	; 0x34
   2c89e:	4543      	cmp	r3, r8
   2c8a0:	db02      	blt.n	2c8a8 <_printf_float+0x234>
   2c8a2:	6823      	ldr	r3, [r4, #0]
   2c8a4:	07d8      	lsls	r0, r3, #31
   2c8a6:	d50f      	bpl.n	2c8c8 <_printf_float+0x254>
   2c8a8:	4631      	mov	r1, r6
   2c8aa:	4628      	mov	r0, r5
   2c8ac:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   2c8b0:	47b8      	blx	r7
   2c8b2:	3001      	adds	r0, #1
   2c8b4:	f43f af39 	beq.w	2c72a <_printf_float+0xb6>
   2c8b8:	f04f 0900 	mov.w	r9, #0
   2c8bc:	f108 38ff 	add.w	r8, r8, #4294967295
   2c8c0:	f104 0a1a 	add.w	sl, r4, #26
   2c8c4:	45c8      	cmp	r8, r9
   2c8c6:	dc09      	bgt.n	2c8dc <_printf_float+0x268>
   2c8c8:	6823      	ldr	r3, [r4, #0]
   2c8ca:	079b      	lsls	r3, r3, #30
   2c8cc:	f100 8102 	bmi.w	2cad4 <_printf_float+0x460>
   2c8d0:	68e0      	ldr	r0, [r4, #12]
   2c8d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2c8d4:	4298      	cmp	r0, r3
   2c8d6:	bfb8      	it	lt
   2c8d8:	4618      	movlt	r0, r3
   2c8da:	e728      	b.n	2c72e <_printf_float+0xba>
   2c8dc:	2301      	movs	r3, #1
   2c8de:	4652      	mov	r2, sl
   2c8e0:	4631      	mov	r1, r6
   2c8e2:	4628      	mov	r0, r5
   2c8e4:	47b8      	blx	r7
   2c8e6:	3001      	adds	r0, #1
   2c8e8:	f43f af1f 	beq.w	2c72a <_printf_float+0xb6>
   2c8ec:	f109 0901 	add.w	r9, r9, #1
   2c8f0:	e7e8      	b.n	2c8c4 <_printf_float+0x250>
   2c8f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2c8f4:	2b00      	cmp	r3, #0
   2c8f6:	dc38      	bgt.n	2c96a <_printf_float+0x2f6>
   2c8f8:	2301      	movs	r3, #1
   2c8fa:	4a15      	ldr	r2, [pc, #84]	; (2c950 <_printf_float+0x2dc>)
   2c8fc:	4631      	mov	r1, r6
   2c8fe:	4628      	mov	r0, r5
   2c900:	47b8      	blx	r7
   2c902:	3001      	adds	r0, #1
   2c904:	f43f af11 	beq.w	2c72a <_printf_float+0xb6>
   2c908:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	; 0x34
   2c90c:	ea59 0303 	orrs.w	r3, r9, r3
   2c910:	d102      	bne.n	2c918 <_printf_float+0x2a4>
   2c912:	6823      	ldr	r3, [r4, #0]
   2c914:	07d9      	lsls	r1, r3, #31
   2c916:	d5d7      	bpl.n	2c8c8 <_printf_float+0x254>
   2c918:	4631      	mov	r1, r6
   2c91a:	4628      	mov	r0, r5
   2c91c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   2c920:	47b8      	blx	r7
   2c922:	3001      	adds	r0, #1
   2c924:	f43f af01 	beq.w	2c72a <_printf_float+0xb6>
   2c928:	f04f 0a00 	mov.w	sl, #0
   2c92c:	f104 0b1a 	add.w	fp, r4, #26
   2c930:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2c932:	425b      	negs	r3, r3
   2c934:	4553      	cmp	r3, sl
   2c936:	dc0d      	bgt.n	2c954 <_printf_float+0x2e0>
   2c938:	464b      	mov	r3, r9
   2c93a:	e793      	b.n	2c864 <_printf_float+0x1f0>
   2c93c:	7fefffff 	.word	0x7fefffff
   2c940:	00042002 	.word	0x00042002
   2c944:	0003a3d1 	.word	0x0003a3d1
   2c948:	00042006 	.word	0x00042006
   2c94c:	0004200a 	.word	0x0004200a
   2c950:	0003ea9e 	.word	0x0003ea9e
   2c954:	2301      	movs	r3, #1
   2c956:	465a      	mov	r2, fp
   2c958:	4631      	mov	r1, r6
   2c95a:	4628      	mov	r0, r5
   2c95c:	47b8      	blx	r7
   2c95e:	3001      	adds	r0, #1
   2c960:	f43f aee3 	beq.w	2c72a <_printf_float+0xb6>
   2c964:	f10a 0a01 	add.w	sl, sl, #1
   2c968:	e7e2      	b.n	2c930 <_printf_float+0x2bc>
   2c96a:	6da3      	ldr	r3, [r4, #88]	; 0x58
   2c96c:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   2c970:	4553      	cmp	r3, sl
   2c972:	bfa8      	it	ge
   2c974:	4653      	movge	r3, sl
   2c976:	2b00      	cmp	r3, #0
   2c978:	4699      	mov	r9, r3
   2c97a:	dc36      	bgt.n	2c9ea <_printf_float+0x376>
   2c97c:	f04f 0b00 	mov.w	fp, #0
   2c980:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   2c984:	f104 021a 	add.w	r2, r4, #26
   2c988:	6da3      	ldr	r3, [r4, #88]	; 0x58
   2c98a:	930a      	str	r3, [sp, #40]	; 0x28
   2c98c:	eba3 0309 	sub.w	r3, r3, r9
   2c990:	455b      	cmp	r3, fp
   2c992:	dc31      	bgt.n	2c9f8 <_printf_float+0x384>
   2c994:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2c996:	459a      	cmp	sl, r3
   2c998:	dc3a      	bgt.n	2ca10 <_printf_float+0x39c>
   2c99a:	6823      	ldr	r3, [r4, #0]
   2c99c:	07da      	lsls	r2, r3, #31
   2c99e:	d437      	bmi.n	2ca10 <_printf_float+0x39c>
   2c9a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2c9a2:	ebaa 0903 	sub.w	r9, sl, r3
   2c9a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c9a8:	ebaa 0303 	sub.w	r3, sl, r3
   2c9ac:	4599      	cmp	r9, r3
   2c9ae:	bfa8      	it	ge
   2c9b0:	4699      	movge	r9, r3
   2c9b2:	f1b9 0f00 	cmp.w	r9, #0
   2c9b6:	dc33      	bgt.n	2ca20 <_printf_float+0x3ac>
   2c9b8:	f04f 0800 	mov.w	r8, #0
   2c9bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   2c9c0:	f104 0b1a 	add.w	fp, r4, #26
   2c9c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2c9c6:	ebaa 0303 	sub.w	r3, sl, r3
   2c9ca:	eba3 0309 	sub.w	r3, r3, r9
   2c9ce:	4543      	cmp	r3, r8
   2c9d0:	f77f af7a 	ble.w	2c8c8 <_printf_float+0x254>
   2c9d4:	2301      	movs	r3, #1
   2c9d6:	465a      	mov	r2, fp
   2c9d8:	4631      	mov	r1, r6
   2c9da:	4628      	mov	r0, r5
   2c9dc:	47b8      	blx	r7
   2c9de:	3001      	adds	r0, #1
   2c9e0:	f43f aea3 	beq.w	2c72a <_printf_float+0xb6>
   2c9e4:	f108 0801 	add.w	r8, r8, #1
   2c9e8:	e7ec      	b.n	2c9c4 <_printf_float+0x350>
   2c9ea:	4642      	mov	r2, r8
   2c9ec:	4631      	mov	r1, r6
   2c9ee:	4628      	mov	r0, r5
   2c9f0:	47b8      	blx	r7
   2c9f2:	3001      	adds	r0, #1
   2c9f4:	d1c2      	bne.n	2c97c <_printf_float+0x308>
   2c9f6:	e698      	b.n	2c72a <_printf_float+0xb6>
   2c9f8:	2301      	movs	r3, #1
   2c9fa:	4631      	mov	r1, r6
   2c9fc:	4628      	mov	r0, r5
   2c9fe:	920a      	str	r2, [sp, #40]	; 0x28
   2ca00:	47b8      	blx	r7
   2ca02:	3001      	adds	r0, #1
   2ca04:	f43f ae91 	beq.w	2c72a <_printf_float+0xb6>
   2ca08:	f10b 0b01 	add.w	fp, fp, #1
   2ca0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2ca0e:	e7bb      	b.n	2c988 <_printf_float+0x314>
   2ca10:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   2ca14:	4631      	mov	r1, r6
   2ca16:	4628      	mov	r0, r5
   2ca18:	47b8      	blx	r7
   2ca1a:	3001      	adds	r0, #1
   2ca1c:	d1c0      	bne.n	2c9a0 <_printf_float+0x32c>
   2ca1e:	e684      	b.n	2c72a <_printf_float+0xb6>
   2ca20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2ca22:	464b      	mov	r3, r9
   2ca24:	4631      	mov	r1, r6
   2ca26:	4628      	mov	r0, r5
   2ca28:	4442      	add	r2, r8
   2ca2a:	47b8      	blx	r7
   2ca2c:	3001      	adds	r0, #1
   2ca2e:	d1c3      	bne.n	2c9b8 <_printf_float+0x344>
   2ca30:	e67b      	b.n	2c72a <_printf_float+0xb6>
   2ca32:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   2ca36:	f1ba 0f01 	cmp.w	sl, #1
   2ca3a:	dc01      	bgt.n	2ca40 <_printf_float+0x3cc>
   2ca3c:	07db      	lsls	r3, r3, #31
   2ca3e:	d536      	bpl.n	2caae <_printf_float+0x43a>
   2ca40:	2301      	movs	r3, #1
   2ca42:	4642      	mov	r2, r8
   2ca44:	4631      	mov	r1, r6
   2ca46:	4628      	mov	r0, r5
   2ca48:	47b8      	blx	r7
   2ca4a:	3001      	adds	r0, #1
   2ca4c:	f43f ae6d 	beq.w	2c72a <_printf_float+0xb6>
   2ca50:	4631      	mov	r1, r6
   2ca52:	4628      	mov	r0, r5
   2ca54:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   2ca58:	47b8      	blx	r7
   2ca5a:	3001      	adds	r0, #1
   2ca5c:	f43f ae65 	beq.w	2c72a <_printf_float+0xb6>
   2ca60:	2200      	movs	r2, #0
   2ca62:	2300      	movs	r3, #0
   2ca64:	f10a 3aff 	add.w	sl, sl, #4294967295
   2ca68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   2ca6c:	f7dc f844 	bl	8af8 <__aeabi_dcmpeq>
   2ca70:	b9c0      	cbnz	r0, 2caa4 <_printf_float+0x430>
   2ca72:	4653      	mov	r3, sl
   2ca74:	f108 0201 	add.w	r2, r8, #1
   2ca78:	4631      	mov	r1, r6
   2ca7a:	4628      	mov	r0, r5
   2ca7c:	47b8      	blx	r7
   2ca7e:	3001      	adds	r0, #1
   2ca80:	d10c      	bne.n	2ca9c <_printf_float+0x428>
   2ca82:	e652      	b.n	2c72a <_printf_float+0xb6>
   2ca84:	2301      	movs	r3, #1
   2ca86:	465a      	mov	r2, fp
   2ca88:	4631      	mov	r1, r6
   2ca8a:	4628      	mov	r0, r5
   2ca8c:	47b8      	blx	r7
   2ca8e:	3001      	adds	r0, #1
   2ca90:	f43f ae4b 	beq.w	2c72a <_printf_float+0xb6>
   2ca94:	f108 0801 	add.w	r8, r8, #1
   2ca98:	45d0      	cmp	r8, sl
   2ca9a:	dbf3      	blt.n	2ca84 <_printf_float+0x410>
   2ca9c:	464b      	mov	r3, r9
   2ca9e:	f104 0250 	add.w	r2, r4, #80	; 0x50
   2caa2:	e6e0      	b.n	2c866 <_printf_float+0x1f2>
   2caa4:	f04f 0800 	mov.w	r8, #0
   2caa8:	f104 0b1a 	add.w	fp, r4, #26
   2caac:	e7f4      	b.n	2ca98 <_printf_float+0x424>
   2caae:	2301      	movs	r3, #1
   2cab0:	4642      	mov	r2, r8
   2cab2:	e7e1      	b.n	2ca78 <_printf_float+0x404>
   2cab4:	2301      	movs	r3, #1
   2cab6:	464a      	mov	r2, r9
   2cab8:	4631      	mov	r1, r6
   2caba:	4628      	mov	r0, r5
   2cabc:	47b8      	blx	r7
   2cabe:	3001      	adds	r0, #1
   2cac0:	f43f ae33 	beq.w	2c72a <_printf_float+0xb6>
   2cac4:	f108 0801 	add.w	r8, r8, #1
   2cac8:	68e3      	ldr	r3, [r4, #12]
   2caca:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2cacc:	1a5b      	subs	r3, r3, r1
   2cace:	4543      	cmp	r3, r8
   2cad0:	dcf0      	bgt.n	2cab4 <_printf_float+0x440>
   2cad2:	e6fd      	b.n	2c8d0 <_printf_float+0x25c>
   2cad4:	f04f 0800 	mov.w	r8, #0
   2cad8:	f104 0919 	add.w	r9, r4, #25
   2cadc:	e7f4      	b.n	2cac8 <_printf_float+0x454>
   2cade:	bf00      	nop

0002cae0 <_printf_i>:
   2cae0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   2cae4:	7e0f      	ldrb	r7, [r1, #24]
   2cae6:	4691      	mov	r9, r2
   2cae8:	4680      	mov	r8, r0
   2caea:	460c      	mov	r4, r1
   2caec:	2f78      	cmp	r7, #120	; 0x78
   2caee:	469a      	mov	sl, r3
   2caf0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   2caf2:	f101 0243 	add.w	r2, r1, #67	; 0x43
   2caf6:	d807      	bhi.n	2cb08 <_printf_i+0x28>
   2caf8:	2f62      	cmp	r7, #98	; 0x62
   2cafa:	d80a      	bhi.n	2cb12 <_printf_i+0x32>
   2cafc:	2f00      	cmp	r7, #0
   2cafe:	f000 80e0 	beq.w	2ccc2 <_printf_i+0x1e2>
   2cb02:	2f58      	cmp	r7, #88	; 0x58
   2cb04:	f000 80bb 	beq.w	2cc7e <_printf_i+0x19e>
   2cb08:	f104 0642 	add.w	r6, r4, #66	; 0x42
   2cb0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   2cb10:	e03a      	b.n	2cb88 <_printf_i+0xa8>
   2cb12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   2cb16:	2b15      	cmp	r3, #21
   2cb18:	d8f6      	bhi.n	2cb08 <_printf_i+0x28>
   2cb1a:	a101      	add	r1, pc, #4	; (adr r1, 2cb20 <_printf_i+0x40>)
   2cb1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   2cb20:	0002cb79 	.word	0x0002cb79
   2cb24:	0002cb8d 	.word	0x0002cb8d
   2cb28:	0002cb09 	.word	0x0002cb09
   2cb2c:	0002cb09 	.word	0x0002cb09
   2cb30:	0002cb09 	.word	0x0002cb09
   2cb34:	0002cb09 	.word	0x0002cb09
   2cb38:	0002cb8d 	.word	0x0002cb8d
   2cb3c:	0002cb09 	.word	0x0002cb09
   2cb40:	0002cb09 	.word	0x0002cb09
   2cb44:	0002cb09 	.word	0x0002cb09
   2cb48:	0002cb09 	.word	0x0002cb09
   2cb4c:	0002cca9 	.word	0x0002cca9
   2cb50:	0002cc1d 	.word	0x0002cc1d
   2cb54:	0002cc5f 	.word	0x0002cc5f
   2cb58:	0002cb09 	.word	0x0002cb09
   2cb5c:	0002cb09 	.word	0x0002cb09
   2cb60:	0002cccb 	.word	0x0002cccb
   2cb64:	0002cb09 	.word	0x0002cb09
   2cb68:	0002cc1d 	.word	0x0002cc1d
   2cb6c:	0002cb09 	.word	0x0002cb09
   2cb70:	0002cb09 	.word	0x0002cb09
   2cb74:	0002cc67 	.word	0x0002cc67
   2cb78:	682b      	ldr	r3, [r5, #0]
   2cb7a:	f104 0642 	add.w	r6, r4, #66	; 0x42
   2cb7e:	1d1a      	adds	r2, r3, #4
   2cb80:	681b      	ldr	r3, [r3, #0]
   2cb82:	602a      	str	r2, [r5, #0]
   2cb84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   2cb88:	2301      	movs	r3, #1
   2cb8a:	e0ab      	b.n	2cce4 <_printf_i+0x204>
   2cb8c:	6823      	ldr	r3, [r4, #0]
   2cb8e:	6829      	ldr	r1, [r5, #0]
   2cb90:	061f      	lsls	r7, r3, #24
   2cb92:	f101 0004 	add.w	r0, r1, #4
   2cb96:	6028      	str	r0, [r5, #0]
   2cb98:	d501      	bpl.n	2cb9e <_printf_i+0xbe>
   2cb9a:	680d      	ldr	r5, [r1, #0]
   2cb9c:	e003      	b.n	2cba6 <_printf_i+0xc6>
   2cb9e:	065e      	lsls	r6, r3, #25
   2cba0:	d5fb      	bpl.n	2cb9a <_printf_i+0xba>
   2cba2:	f9b1 5000 	ldrsh.w	r5, [r1]
   2cba6:	2d00      	cmp	r5, #0
   2cba8:	6861      	ldr	r1, [r4, #4]
   2cbaa:	da7a      	bge.n	2cca2 <_printf_i+0x1c2>
   2cbac:	202d      	movs	r0, #45	; 0x2d
   2cbae:	2900      	cmp	r1, #0
   2cbb0:	60a1      	str	r1, [r4, #8]
   2cbb2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
   2cbb6:	da2d      	bge.n	2cc14 <_printf_i+0x134>
   2cbb8:	426d      	negs	r5, r5
   2cbba:	485e      	ldr	r0, [pc, #376]	; (2cd34 <_printf_i+0x254>)
   2cbbc:	230a      	movs	r3, #10
   2cbbe:	4616      	mov	r6, r2
   2cbc0:	fbb5 f1f3 	udiv	r1, r5, r3
   2cbc4:	fb03 5711 	mls	r7, r3, r1, r5
   2cbc8:	5dc7      	ldrb	r7, [r0, r7]
   2cbca:	f806 7d01 	strb.w	r7, [r6, #-1]!
   2cbce:	462f      	mov	r7, r5
   2cbd0:	460d      	mov	r5, r1
   2cbd2:	42bb      	cmp	r3, r7
   2cbd4:	d9f4      	bls.n	2cbc0 <_printf_i+0xe0>
   2cbd6:	2b08      	cmp	r3, #8
   2cbd8:	d10b      	bne.n	2cbf2 <_printf_i+0x112>
   2cbda:	6823      	ldr	r3, [r4, #0]
   2cbdc:	07df      	lsls	r7, r3, #31
   2cbde:	d508      	bpl.n	2cbf2 <_printf_i+0x112>
   2cbe0:	6923      	ldr	r3, [r4, #16]
   2cbe2:	6861      	ldr	r1, [r4, #4]
   2cbe4:	4299      	cmp	r1, r3
   2cbe6:	bfde      	ittt	le
   2cbe8:	2330      	movle	r3, #48	; 0x30
   2cbea:	f806 3c01 	strble.w	r3, [r6, #-1]
   2cbee:	f106 36ff 	addle.w	r6, r6, #4294967295
   2cbf2:	1b92      	subs	r2, r2, r6
   2cbf4:	6122      	str	r2, [r4, #16]
   2cbf6:	464b      	mov	r3, r9
   2cbf8:	aa03      	add	r2, sp, #12
   2cbfa:	4621      	mov	r1, r4
   2cbfc:	4640      	mov	r0, r8
   2cbfe:	f8cd a000 	str.w	sl, [sp]
   2cc02:	f009 fd59 	bl	366b8 <_printf_common>
   2cc06:	3001      	adds	r0, #1
   2cc08:	d171      	bne.n	2ccee <_printf_i+0x20e>
   2cc0a:	f04f 30ff 	mov.w	r0, #4294967295
   2cc0e:	b004      	add	sp, #16
   2cc10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2cc14:	f023 0304 	bic.w	r3, r3, #4
   2cc18:	6023      	str	r3, [r4, #0]
   2cc1a:	e7cd      	b.n	2cbb8 <_printf_i+0xd8>
   2cc1c:	682b      	ldr	r3, [r5, #0]
   2cc1e:	6820      	ldr	r0, [r4, #0]
   2cc20:	1d19      	adds	r1, r3, #4
   2cc22:	6029      	str	r1, [r5, #0]
   2cc24:	0605      	lsls	r5, r0, #24
   2cc26:	d501      	bpl.n	2cc2c <_printf_i+0x14c>
   2cc28:	681d      	ldr	r5, [r3, #0]
   2cc2a:	e002      	b.n	2cc32 <_printf_i+0x152>
   2cc2c:	0641      	lsls	r1, r0, #25
   2cc2e:	d5fb      	bpl.n	2cc28 <_printf_i+0x148>
   2cc30:	881d      	ldrh	r5, [r3, #0]
   2cc32:	2f6f      	cmp	r7, #111	; 0x6f
   2cc34:	483f      	ldr	r0, [pc, #252]	; (2cd34 <_printf_i+0x254>)
   2cc36:	bf14      	ite	ne
   2cc38:	230a      	movne	r3, #10
   2cc3a:	2308      	moveq	r3, #8
   2cc3c:	2100      	movs	r1, #0
   2cc3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   2cc42:	6866      	ldr	r6, [r4, #4]
   2cc44:	2e00      	cmp	r6, #0
   2cc46:	60a6      	str	r6, [r4, #8]
   2cc48:	dbb9      	blt.n	2cbbe <_printf_i+0xde>
   2cc4a:	6821      	ldr	r1, [r4, #0]
   2cc4c:	f021 0104 	bic.w	r1, r1, #4
   2cc50:	6021      	str	r1, [r4, #0]
   2cc52:	2d00      	cmp	r5, #0
   2cc54:	d1b3      	bne.n	2cbbe <_printf_i+0xde>
   2cc56:	2e00      	cmp	r6, #0
   2cc58:	d1b1      	bne.n	2cbbe <_printf_i+0xde>
   2cc5a:	4616      	mov	r6, r2
   2cc5c:	e7bb      	b.n	2cbd6 <_printf_i+0xf6>
   2cc5e:	6823      	ldr	r3, [r4, #0]
   2cc60:	f043 0320 	orr.w	r3, r3, #32
   2cc64:	6023      	str	r3, [r4, #0]
   2cc66:	2778      	movs	r7, #120	; 0x78
   2cc68:	4833      	ldr	r0, [pc, #204]	; (2cd38 <_printf_i+0x258>)
   2cc6a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   2cc6e:	6829      	ldr	r1, [r5, #0]
   2cc70:	6823      	ldr	r3, [r4, #0]
   2cc72:	1d0e      	adds	r6, r1, #4
   2cc74:	602e      	str	r6, [r5, #0]
   2cc76:	061e      	lsls	r6, r3, #24
   2cc78:	d503      	bpl.n	2cc82 <_printf_i+0x1a2>
   2cc7a:	680d      	ldr	r5, [r1, #0]
   2cc7c:	e004      	b.n	2cc88 <_printf_i+0x1a8>
   2cc7e:	482d      	ldr	r0, [pc, #180]	; (2cd34 <_printf_i+0x254>)
   2cc80:	e7f3      	b.n	2cc6a <_printf_i+0x18a>
   2cc82:	065d      	lsls	r5, r3, #25
   2cc84:	d5f9      	bpl.n	2cc7a <_printf_i+0x19a>
   2cc86:	880d      	ldrh	r5, [r1, #0]
   2cc88:	07d9      	lsls	r1, r3, #31
   2cc8a:	bf44      	itt	mi
   2cc8c:	f043 0320 	orrmi.w	r3, r3, #32
   2cc90:	6023      	strmi	r3, [r4, #0]
   2cc92:	b10d      	cbz	r5, 2cc98 <_printf_i+0x1b8>
   2cc94:	2310      	movs	r3, #16
   2cc96:	e7d1      	b.n	2cc3c <_printf_i+0x15c>
   2cc98:	6823      	ldr	r3, [r4, #0]
   2cc9a:	f023 0320 	bic.w	r3, r3, #32
   2cc9e:	6023      	str	r3, [r4, #0]
   2cca0:	e7f8      	b.n	2cc94 <_printf_i+0x1b4>
   2cca2:	4824      	ldr	r0, [pc, #144]	; (2cd34 <_printf_i+0x254>)
   2cca4:	230a      	movs	r3, #10
   2cca6:	e7cc      	b.n	2cc42 <_printf_i+0x162>
   2cca8:	682b      	ldr	r3, [r5, #0]
   2ccaa:	6826      	ldr	r6, [r4, #0]
   2ccac:	1d18      	adds	r0, r3, #4
   2ccae:	6961      	ldr	r1, [r4, #20]
   2ccb0:	6028      	str	r0, [r5, #0]
   2ccb2:	0635      	lsls	r5, r6, #24
   2ccb4:	681b      	ldr	r3, [r3, #0]
   2ccb6:	d501      	bpl.n	2ccbc <_printf_i+0x1dc>
   2ccb8:	6019      	str	r1, [r3, #0]
   2ccba:	e002      	b.n	2ccc2 <_printf_i+0x1e2>
   2ccbc:	0670      	lsls	r0, r6, #25
   2ccbe:	d5fb      	bpl.n	2ccb8 <_printf_i+0x1d8>
   2ccc0:	8019      	strh	r1, [r3, #0]
   2ccc2:	2300      	movs	r3, #0
   2ccc4:	4616      	mov	r6, r2
   2ccc6:	6123      	str	r3, [r4, #16]
   2ccc8:	e795      	b.n	2cbf6 <_printf_i+0x116>
   2ccca:	682b      	ldr	r3, [r5, #0]
   2cccc:	2100      	movs	r1, #0
   2ccce:	1d1a      	adds	r2, r3, #4
   2ccd0:	602a      	str	r2, [r5, #0]
   2ccd2:	681e      	ldr	r6, [r3, #0]
   2ccd4:	6862      	ldr	r2, [r4, #4]
   2ccd6:	4630      	mov	r0, r6
   2ccd8:	f009 fc08 	bl	364ec <memchr>
   2ccdc:	b108      	cbz	r0, 2cce2 <_printf_i+0x202>
   2ccde:	1b80      	subs	r0, r0, r6
   2cce0:	6060      	str	r0, [r4, #4]
   2cce2:	6863      	ldr	r3, [r4, #4]
   2cce4:	6123      	str	r3, [r4, #16]
   2cce6:	2300      	movs	r3, #0
   2cce8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   2ccec:	e783      	b.n	2cbf6 <_printf_i+0x116>
   2ccee:	6923      	ldr	r3, [r4, #16]
   2ccf0:	4632      	mov	r2, r6
   2ccf2:	4649      	mov	r1, r9
   2ccf4:	4640      	mov	r0, r8
   2ccf6:	47d0      	blx	sl
   2ccf8:	3001      	adds	r0, #1
   2ccfa:	d086      	beq.n	2cc0a <_printf_i+0x12a>
   2ccfc:	6823      	ldr	r3, [r4, #0]
   2ccfe:	079b      	lsls	r3, r3, #30
   2cd00:	d414      	bmi.n	2cd2c <_printf_i+0x24c>
   2cd02:	68e0      	ldr	r0, [r4, #12]
   2cd04:	9b03      	ldr	r3, [sp, #12]
   2cd06:	4298      	cmp	r0, r3
   2cd08:	bfb8      	it	lt
   2cd0a:	4618      	movlt	r0, r3
   2cd0c:	e77f      	b.n	2cc0e <_printf_i+0x12e>
   2cd0e:	2301      	movs	r3, #1
   2cd10:	4632      	mov	r2, r6
   2cd12:	4649      	mov	r1, r9
   2cd14:	4640      	mov	r0, r8
   2cd16:	47d0      	blx	sl
   2cd18:	3001      	adds	r0, #1
   2cd1a:	f43f af76 	beq.w	2cc0a <_printf_i+0x12a>
   2cd1e:	3501      	adds	r5, #1
   2cd20:	68e3      	ldr	r3, [r4, #12]
   2cd22:	9903      	ldr	r1, [sp, #12]
   2cd24:	1a5b      	subs	r3, r3, r1
   2cd26:	42ab      	cmp	r3, r5
   2cd28:	dcf1      	bgt.n	2cd0e <_printf_i+0x22e>
   2cd2a:	e7ea      	b.n	2cd02 <_printf_i+0x222>
   2cd2c:	2500      	movs	r5, #0
   2cd2e:	f104 0619 	add.w	r6, r4, #25
   2cd32:	e7f5      	b.n	2cd20 <_printf_i+0x240>
   2cd34:	0004200e 	.word	0x0004200e
   2cd38:	0004201f 	.word	0x0004201f

0002cd3c <realloc>:
   2cd3c:	4b02      	ldr	r3, [pc, #8]	; (2cd48 <realloc+0xc>)
   2cd3e:	460a      	mov	r2, r1
   2cd40:	4601      	mov	r1, r0
   2cd42:	6818      	ldr	r0, [r3, #0]
   2cd44:	f00a b8cd 	b.w	36ee2 <_realloc_r>
   2cd48:	2000ca9c 	.word	0x2000ca9c

0002cd4c <_sbrk_r>:
   2cd4c:	b538      	push	{r3, r4, r5, lr}
   2cd4e:	2300      	movs	r3, #0
   2cd50:	4d05      	ldr	r5, [pc, #20]	; (2cd68 <_sbrk_r+0x1c>)
   2cd52:	4604      	mov	r4, r0
   2cd54:	4608      	mov	r0, r1
   2cd56:	602b      	str	r3, [r5, #0]
   2cd58:	f7e6 fbac 	bl	134b4 <_sbrk>
   2cd5c:	1c43      	adds	r3, r0, #1
   2cd5e:	d102      	bne.n	2cd66 <_sbrk_r+0x1a>
   2cd60:	682b      	ldr	r3, [r5, #0]
   2cd62:	b103      	cbz	r3, 2cd66 <_sbrk_r+0x1a>
   2cd64:	6023      	str	r3, [r4, #0]
   2cd66:	bd38      	pop	{r3, r4, r5, pc}
   2cd68:	2000ef4c 	.word	0x2000ef4c

0002cd6c <sniprintf>:
   2cd6c:	b40c      	push	{r2, r3}
   2cd6e:	4b18      	ldr	r3, [pc, #96]	; (2cdd0 <sniprintf+0x64>)
   2cd70:	b530      	push	{r4, r5, lr}
   2cd72:	1e0c      	subs	r4, r1, #0
   2cd74:	b09d      	sub	sp, #116	; 0x74
   2cd76:	681d      	ldr	r5, [r3, #0]
   2cd78:	da08      	bge.n	2cd8c <sniprintf+0x20>
   2cd7a:	238b      	movs	r3, #139	; 0x8b
   2cd7c:	f04f 30ff 	mov.w	r0, #4294967295
   2cd80:	602b      	str	r3, [r5, #0]
   2cd82:	b01d      	add	sp, #116	; 0x74
   2cd84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   2cd88:	b002      	add	sp, #8
   2cd8a:	4770      	bx	lr
   2cd8c:	f44f 7302 	mov.w	r3, #520	; 0x208
   2cd90:	9002      	str	r0, [sp, #8]
   2cd92:	9006      	str	r0, [sp, #24]
   2cd94:	a902      	add	r1, sp, #8
   2cd96:	f8ad 3014 	strh.w	r3, [sp, #20]
   2cd9a:	bf14      	ite	ne
   2cd9c:	f104 33ff 	addne.w	r3, r4, #4294967295
   2cda0:	4623      	moveq	r3, r4
   2cda2:	9a20      	ldr	r2, [sp, #128]	; 0x80
   2cda4:	4628      	mov	r0, r5
   2cda6:	9304      	str	r3, [sp, #16]
   2cda8:	9307      	str	r3, [sp, #28]
   2cdaa:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2cdae:	f8ad 3016 	strh.w	r3, [sp, #22]
   2cdb2:	ab21      	add	r3, sp, #132	; 0x84
   2cdb4:	9301      	str	r3, [sp, #4]
   2cdb6:	f001 f83d 	bl	2de34 <_svfiprintf_r>
   2cdba:	1c43      	adds	r3, r0, #1
   2cdbc:	bfbc      	itt	lt
   2cdbe:	238b      	movlt	r3, #139	; 0x8b
   2cdc0:	602b      	strlt	r3, [r5, #0]
   2cdc2:	2c00      	cmp	r4, #0
   2cdc4:	d0dd      	beq.n	2cd82 <sniprintf+0x16>
   2cdc6:	9b02      	ldr	r3, [sp, #8]
   2cdc8:	2200      	movs	r2, #0
   2cdca:	701a      	strb	r2, [r3, #0]
   2cdcc:	e7d9      	b.n	2cd82 <sniprintf+0x16>
   2cdce:	bf00      	nop
   2cdd0:	2000ca9c 	.word	0x2000ca9c

0002cdd4 <strtod>:
   2cdd4:	460a      	mov	r2, r1
   2cdd6:	4601      	mov	r1, r0
   2cdd8:	4802      	ldr	r0, [pc, #8]	; (2cde4 <strtod+0x10>)
   2cdda:	4b03      	ldr	r3, [pc, #12]	; (2cde8 <strtod+0x14>)
   2cddc:	6800      	ldr	r0, [r0, #0]
   2cdde:	f7dc bfb7 	b.w	9d50 <_strtod_l>
   2cde2:	bf00      	nop
   2cde4:	2000ca9c 	.word	0x2000ca9c
   2cde8:	2000cb00 	.word	0x2000cb00

0002cdec <_strtol_l.constprop.0>:
   2cdec:	2b24      	cmp	r3, #36	; 0x24
   2cdee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2cdf2:	4686      	mov	lr, r0
   2cdf4:	4690      	mov	r8, r2
   2cdf6:	d801      	bhi.n	2cdfc <_strtol_l.constprop.0+0x10>
   2cdf8:	2b01      	cmp	r3, #1
   2cdfa:	d106      	bne.n	2ce0a <_strtol_l.constprop.0+0x1e>
   2cdfc:	f003 ff96 	bl	30d2c <__errno>
   2ce00:	2316      	movs	r3, #22
   2ce02:	6003      	str	r3, [r0, #0]
   2ce04:	2000      	movs	r0, #0
   2ce06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2ce0a:	460d      	mov	r5, r1
   2ce0c:	4835      	ldr	r0, [pc, #212]	; (2cee4 <_strtol_l.constprop.0+0xf8>)
   2ce0e:	462a      	mov	r2, r5
   2ce10:	f815 4b01 	ldrb.w	r4, [r5], #1
   2ce14:	5d06      	ldrb	r6, [r0, r4]
   2ce16:	f016 0608 	ands.w	r6, r6, #8
   2ce1a:	d1f8      	bne.n	2ce0e <_strtol_l.constprop.0+0x22>
   2ce1c:	2c2d      	cmp	r4, #45	; 0x2d
   2ce1e:	d124      	bne.n	2ce6a <_strtol_l.constprop.0+0x7e>
   2ce20:	782c      	ldrb	r4, [r5, #0]
   2ce22:	2601      	movs	r6, #1
   2ce24:	1c95      	adds	r5, r2, #2
   2ce26:	bb2b      	cbnz	r3, 2ce74 <_strtol_l.constprop.0+0x88>
   2ce28:	2c30      	cmp	r4, #48	; 0x30
   2ce2a:	d030      	beq.n	2ce8e <_strtol_l.constprop.0+0xa2>
   2ce2c:	230a      	movs	r3, #10
   2ce2e:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
   2ce32:	2200      	movs	r2, #0
   2ce34:	f10c 3cff 	add.w	ip, ip, #4294967295
   2ce38:	4610      	mov	r0, r2
   2ce3a:	fbbc f9f3 	udiv	r9, ip, r3
   2ce3e:	fb03 ca19 	mls	sl, r3, r9, ip
   2ce42:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
   2ce46:	2f09      	cmp	r7, #9
   2ce48:	d828      	bhi.n	2ce9c <_strtol_l.constprop.0+0xb0>
   2ce4a:	463c      	mov	r4, r7
   2ce4c:	42a3      	cmp	r3, r4
   2ce4e:	dd34      	ble.n	2ceba <_strtol_l.constprop.0+0xce>
   2ce50:	1c57      	adds	r7, r2, #1
   2ce52:	d007      	beq.n	2ce64 <_strtol_l.constprop.0+0x78>
   2ce54:	4581      	cmp	r9, r0
   2ce56:	d32d      	bcc.n	2ceb4 <_strtol_l.constprop.0+0xc8>
   2ce58:	d101      	bne.n	2ce5e <_strtol_l.constprop.0+0x72>
   2ce5a:	45a2      	cmp	sl, r4
   2ce5c:	db2a      	blt.n	2ceb4 <_strtol_l.constprop.0+0xc8>
   2ce5e:	fb00 4003 	mla	r0, r0, r3, r4
   2ce62:	2201      	movs	r2, #1
   2ce64:	f815 4b01 	ldrb.w	r4, [r5], #1
   2ce68:	e7eb      	b.n	2ce42 <_strtol_l.constprop.0+0x56>
   2ce6a:	2c2b      	cmp	r4, #43	; 0x2b
   2ce6c:	bf04      	itt	eq
   2ce6e:	782c      	ldrbeq	r4, [r5, #0]
   2ce70:	1c95      	addeq	r5, r2, #2
   2ce72:	e7d8      	b.n	2ce26 <_strtol_l.constprop.0+0x3a>
   2ce74:	2b10      	cmp	r3, #16
   2ce76:	d1da      	bne.n	2ce2e <_strtol_l.constprop.0+0x42>
   2ce78:	2c30      	cmp	r4, #48	; 0x30
   2ce7a:	d1d8      	bne.n	2ce2e <_strtol_l.constprop.0+0x42>
   2ce7c:	782a      	ldrb	r2, [r5, #0]
   2ce7e:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   2ce82:	2a58      	cmp	r2, #88	; 0x58
   2ce84:	d1d3      	bne.n	2ce2e <_strtol_l.constprop.0+0x42>
   2ce86:	786c      	ldrb	r4, [r5, #1]
   2ce88:	2310      	movs	r3, #16
   2ce8a:	3502      	adds	r5, #2
   2ce8c:	e7cf      	b.n	2ce2e <_strtol_l.constprop.0+0x42>
   2ce8e:	782b      	ldrb	r3, [r5, #0]
   2ce90:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2ce94:	2b58      	cmp	r3, #88	; 0x58
   2ce96:	d0f6      	beq.n	2ce86 <_strtol_l.constprop.0+0x9a>
   2ce98:	2308      	movs	r3, #8
   2ce9a:	e7c8      	b.n	2ce2e <_strtol_l.constprop.0+0x42>
   2ce9c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
   2cea0:	2f19      	cmp	r7, #25
   2cea2:	d801      	bhi.n	2cea8 <_strtol_l.constprop.0+0xbc>
   2cea4:	3c37      	subs	r4, #55	; 0x37
   2cea6:	e7d1      	b.n	2ce4c <_strtol_l.constprop.0+0x60>
   2cea8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
   2ceac:	2f19      	cmp	r7, #25
   2ceae:	d804      	bhi.n	2ceba <_strtol_l.constprop.0+0xce>
   2ceb0:	3c57      	subs	r4, #87	; 0x57
   2ceb2:	e7cb      	b.n	2ce4c <_strtol_l.constprop.0+0x60>
   2ceb4:	f04f 32ff 	mov.w	r2, #4294967295
   2ceb8:	e7d4      	b.n	2ce64 <_strtol_l.constprop.0+0x78>
   2ceba:	1c53      	adds	r3, r2, #1
   2cebc:	d108      	bne.n	2ced0 <_strtol_l.constprop.0+0xe4>
   2cebe:	2322      	movs	r3, #34	; 0x22
   2cec0:	4660      	mov	r0, ip
   2cec2:	f8ce 3000 	str.w	r3, [lr]
   2cec6:	f1b8 0f00 	cmp.w	r8, #0
   2ceca:	d09c      	beq.n	2ce06 <_strtol_l.constprop.0+0x1a>
   2cecc:	1e69      	subs	r1, r5, #1
   2cece:	e006      	b.n	2cede <_strtol_l.constprop.0+0xf2>
   2ced0:	b106      	cbz	r6, 2ced4 <_strtol_l.constprop.0+0xe8>
   2ced2:	4240      	negs	r0, r0
   2ced4:	f1b8 0f00 	cmp.w	r8, #0
   2ced8:	d095      	beq.n	2ce06 <_strtol_l.constprop.0+0x1a>
   2ceda:	2a00      	cmp	r2, #0
   2cedc:	d1f6      	bne.n	2cecc <_strtol_l.constprop.0+0xe0>
   2cede:	f8c8 1000 	str.w	r1, [r8]
   2cee2:	e790      	b.n	2ce06 <_strtol_l.constprop.0+0x1a>
   2cee4:	00041f02 	.word	0x00041f02

0002cee8 <strtol>:
   2cee8:	4613      	mov	r3, r2
   2ceea:	460a      	mov	r2, r1
   2ceec:	4601      	mov	r1, r0
   2ceee:	4802      	ldr	r0, [pc, #8]	; (2cef8 <strtol+0x10>)
   2cef0:	6800      	ldr	r0, [r0, #0]
   2cef2:	f7ff bf7b 	b.w	2cdec <_strtol_l.constprop.0>
   2cef6:	bf00      	nop
   2cef8:	2000ca9c 	.word	0x2000ca9c

0002cefc <_strtoll_l.constprop.0>:
   2cefc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cf00:	4690      	mov	r8, r2
   2cf02:	b085      	sub	sp, #20
   2cf04:	4689      	mov	r9, r1
   2cf06:	461e      	mov	r6, r3
   2cf08:	460d      	mov	r5, r1
   2cf0a:	4a45      	ldr	r2, [pc, #276]	; (2d020 <_strtoll_l.constprop.0+0x124>)
   2cf0c:	9002      	str	r0, [sp, #8]
   2cf0e:	462b      	mov	r3, r5
   2cf10:	f815 4b01 	ldrb.w	r4, [r5], #1
   2cf14:	5d17      	ldrb	r7, [r2, r4]
   2cf16:	f017 0708 	ands.w	r7, r7, #8
   2cf1a:	d1f8      	bne.n	2cf0e <_strtoll_l.constprop.0+0x12>
   2cf1c:	2c2d      	cmp	r4, #45	; 0x2d
   2cf1e:	d141      	bne.n	2cfa4 <_strtoll_l.constprop.0+0xa8>
   2cf20:	782c      	ldrb	r4, [r5, #0]
   2cf22:	2701      	movs	r7, #1
   2cf24:	1c9d      	adds	r5, r3, #2
   2cf26:	2e00      	cmp	r6, #0
   2cf28:	d141      	bne.n	2cfae <_strtoll_l.constprop.0+0xb2>
   2cf2a:	2c30      	cmp	r4, #48	; 0x30
   2cf2c:	d04c      	beq.n	2cfc8 <_strtoll_l.constprop.0+0xcc>
   2cf2e:	260a      	movs	r6, #10
   2cf30:	f107 4a00 	add.w	sl, r7, #2147483648	; 0x80000000
   2cf34:	f107 3bff 	add.w	fp, r7, #4294967295
   2cf38:	17f3      	asrs	r3, r6, #31
   2cf3a:	4632      	mov	r2, r6
   2cf3c:	f10a 3aff 	add.w	sl, sl, #4294967295
   2cf40:	4658      	mov	r0, fp
   2cf42:	9303      	str	r3, [sp, #12]
   2cf44:	4651      	mov	r1, sl
   2cf46:	f7db ffa5 	bl	8e94 <__aeabi_uldivmod>
   2cf4a:	9201      	str	r2, [sp, #4]
   2cf4c:	2200      	movs	r2, #0
   2cf4e:	468e      	mov	lr, r1
   2cf50:	4684      	mov	ip, r0
   2cf52:	4611      	mov	r1, r2
   2cf54:	4610      	mov	r0, r2
   2cf56:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   2cf5a:	2b09      	cmp	r3, #9
   2cf5c:	d905      	bls.n	2cf6a <_strtoll_l.constprop.0+0x6e>
   2cf5e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
   2cf62:	2b19      	cmp	r3, #25
   2cf64:	d837      	bhi.n	2cfd6 <_strtoll_l.constprop.0+0xda>
   2cf66:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
   2cf6a:	429e      	cmp	r6, r3
   2cf6c:	dd3d      	ble.n	2cfea <_strtoll_l.constprop.0+0xee>
   2cf6e:	1c54      	adds	r4, r2, #1
   2cf70:	d015      	beq.n	2cf9e <_strtoll_l.constprop.0+0xa2>
   2cf72:	4584      	cmp	ip, r0
   2cf74:	eb7e 0201 	sbcs.w	r2, lr, r1
   2cf78:	d334      	bcc.n	2cfe4 <_strtoll_l.constprop.0+0xe8>
   2cf7a:	458e      	cmp	lr, r1
   2cf7c:	bf08      	it	eq
   2cf7e:	4584      	cmpeq	ip, r0
   2cf80:	d102      	bne.n	2cf88 <_strtoll_l.constprop.0+0x8c>
   2cf82:	9a01      	ldr	r2, [sp, #4]
   2cf84:	429a      	cmp	r2, r3
   2cf86:	db2d      	blt.n	2cfe4 <_strtoll_l.constprop.0+0xe8>
   2cf88:	9a03      	ldr	r2, [sp, #12]
   2cf8a:	4371      	muls	r1, r6
   2cf8c:	fb00 1102 	mla	r1, r0, r2, r1
   2cf90:	fba6 0200 	umull	r0, r2, r6, r0
   2cf94:	440a      	add	r2, r1
   2cf96:	1818      	adds	r0, r3, r0
   2cf98:	eb42 71e3 	adc.w	r1, r2, r3, asr #31
   2cf9c:	2201      	movs	r2, #1
   2cf9e:	f815 4b01 	ldrb.w	r4, [r5], #1
   2cfa2:	e7d8      	b.n	2cf56 <_strtoll_l.constprop.0+0x5a>
   2cfa4:	2c2b      	cmp	r4, #43	; 0x2b
   2cfa6:	bf04      	itt	eq
   2cfa8:	782c      	ldrbeq	r4, [r5, #0]
   2cfaa:	1c9d      	addeq	r5, r3, #2
   2cfac:	e7bb      	b.n	2cf26 <_strtoll_l.constprop.0+0x2a>
   2cfae:	2e10      	cmp	r6, #16
   2cfb0:	d1be      	bne.n	2cf30 <_strtoll_l.constprop.0+0x34>
   2cfb2:	2c30      	cmp	r4, #48	; 0x30
   2cfb4:	d1bc      	bne.n	2cf30 <_strtoll_l.constprop.0+0x34>
   2cfb6:	782b      	ldrb	r3, [r5, #0]
   2cfb8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2cfbc:	2b58      	cmp	r3, #88	; 0x58
   2cfbe:	d1b7      	bne.n	2cf30 <_strtoll_l.constprop.0+0x34>
   2cfc0:	786c      	ldrb	r4, [r5, #1]
   2cfc2:	2610      	movs	r6, #16
   2cfc4:	3502      	adds	r5, #2
   2cfc6:	e7b3      	b.n	2cf30 <_strtoll_l.constprop.0+0x34>
   2cfc8:	782b      	ldrb	r3, [r5, #0]
   2cfca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2cfce:	2b58      	cmp	r3, #88	; 0x58
   2cfd0:	d0f6      	beq.n	2cfc0 <_strtoll_l.constprop.0+0xc4>
   2cfd2:	2608      	movs	r6, #8
   2cfd4:	e7ac      	b.n	2cf30 <_strtoll_l.constprop.0+0x34>
   2cfd6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   2cfda:	2b19      	cmp	r3, #25
   2cfdc:	d805      	bhi.n	2cfea <_strtoll_l.constprop.0+0xee>
   2cfde:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
   2cfe2:	e7c2      	b.n	2cf6a <_strtoll_l.constprop.0+0x6e>
   2cfe4:	f04f 32ff 	mov.w	r2, #4294967295
   2cfe8:	e7d9      	b.n	2cf9e <_strtoll_l.constprop.0+0xa2>
   2cfea:	1c53      	adds	r3, r2, #1
   2cfec:	d10a      	bne.n	2d004 <_strtoll_l.constprop.0+0x108>
   2cfee:	2322      	movs	r3, #34	; 0x22
   2cff0:	9a02      	ldr	r2, [sp, #8]
   2cff2:	4658      	mov	r0, fp
   2cff4:	4651      	mov	r1, sl
   2cff6:	6013      	str	r3, [r2, #0]
   2cff8:	f1b8 0f00 	cmp.w	r8, #0
   2cffc:	d10a      	bne.n	2d014 <_strtoll_l.constprop.0+0x118>
   2cffe:	b005      	add	sp, #20
   2d000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d004:	b117      	cbz	r7, 2d00c <_strtoll_l.constprop.0+0x110>
   2d006:	4240      	negs	r0, r0
   2d008:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   2d00c:	f1b8 0f00 	cmp.w	r8, #0
   2d010:	d0f5      	beq.n	2cffe <_strtoll_l.constprop.0+0x102>
   2d012:	b10a      	cbz	r2, 2d018 <_strtoll_l.constprop.0+0x11c>
   2d014:	f105 39ff 	add.w	r9, r5, #4294967295
   2d018:	f8c8 9000 	str.w	r9, [r8]
   2d01c:	e7ef      	b.n	2cffe <_strtoll_l.constprop.0+0x102>
   2d01e:	bf00      	nop
   2d020:	00041f02 	.word	0x00041f02

0002d024 <strtoll>:
   2d024:	4613      	mov	r3, r2
   2d026:	460a      	mov	r2, r1
   2d028:	4601      	mov	r1, r0
   2d02a:	4802      	ldr	r0, [pc, #8]	; (2d034 <strtoll+0x10>)
   2d02c:	6800      	ldr	r0, [r0, #0]
   2d02e:	f7ff bf65 	b.w	2cefc <_strtoll_l.constprop.0>
   2d032:	bf00      	nop
   2d034:	2000ca9c 	.word	0x2000ca9c

0002d038 <_strtoul_l.constprop.0>:
   2d038:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2d03c:	4686      	mov	lr, r0
   2d03e:	460d      	mov	r5, r1
   2d040:	4e35      	ldr	r6, [pc, #212]	; (2d118 <_strtoul_l.constprop.0+0xe0>)
   2d042:	4628      	mov	r0, r5
   2d044:	f815 4b01 	ldrb.w	r4, [r5], #1
   2d048:	5d37      	ldrb	r7, [r6, r4]
   2d04a:	f017 0708 	ands.w	r7, r7, #8
   2d04e:	d1f8      	bne.n	2d042 <_strtoul_l.constprop.0+0xa>
   2d050:	2c2d      	cmp	r4, #45	; 0x2d
   2d052:	d126      	bne.n	2d0a2 <_strtoul_l.constprop.0+0x6a>
   2d054:	782c      	ldrb	r4, [r5, #0]
   2d056:	2701      	movs	r7, #1
   2d058:	1c85      	adds	r5, r0, #2
   2d05a:	bb3b      	cbnz	r3, 2d0ac <_strtoul_l.constprop.0+0x74>
   2d05c:	2c30      	cmp	r4, #48	; 0x30
   2d05e:	d032      	beq.n	2d0c6 <_strtoul_l.constprop.0+0x8e>
   2d060:	230a      	movs	r3, #10
   2d062:	f04f 38ff 	mov.w	r8, #4294967295
   2d066:	2600      	movs	r6, #0
   2d068:	fbb8 f8f3 	udiv	r8, r8, r3
   2d06c:	fb03 f908 	mul.w	r9, r3, r8
   2d070:	4630      	mov	r0, r6
   2d072:	ea6f 0909 	mvn.w	r9, r9
   2d076:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   2d07a:	f1bc 0f09 	cmp.w	ip, #9
   2d07e:	d829      	bhi.n	2d0d4 <_strtoul_l.constprop.0+0x9c>
   2d080:	4664      	mov	r4, ip
   2d082:	42a3      	cmp	r3, r4
   2d084:	dd37      	ble.n	2d0f6 <_strtoul_l.constprop.0+0xbe>
   2d086:	f1b6 3fff 	cmp.w	r6, #4294967295
   2d08a:	d007      	beq.n	2d09c <_strtoul_l.constprop.0+0x64>
   2d08c:	4580      	cmp	r8, r0
   2d08e:	d32f      	bcc.n	2d0f0 <_strtoul_l.constprop.0+0xb8>
   2d090:	d101      	bne.n	2d096 <_strtoul_l.constprop.0+0x5e>
   2d092:	45a1      	cmp	r9, r4
   2d094:	db2c      	blt.n	2d0f0 <_strtoul_l.constprop.0+0xb8>
   2d096:	fb00 4003 	mla	r0, r0, r3, r4
   2d09a:	2601      	movs	r6, #1
   2d09c:	f815 4b01 	ldrb.w	r4, [r5], #1
   2d0a0:	e7e9      	b.n	2d076 <_strtoul_l.constprop.0+0x3e>
   2d0a2:	2c2b      	cmp	r4, #43	; 0x2b
   2d0a4:	bf04      	itt	eq
   2d0a6:	782c      	ldrbeq	r4, [r5, #0]
   2d0a8:	1c85      	addeq	r5, r0, #2
   2d0aa:	e7d6      	b.n	2d05a <_strtoul_l.constprop.0+0x22>
   2d0ac:	2b10      	cmp	r3, #16
   2d0ae:	d1d8      	bne.n	2d062 <_strtoul_l.constprop.0+0x2a>
   2d0b0:	2c30      	cmp	r4, #48	; 0x30
   2d0b2:	d1d6      	bne.n	2d062 <_strtoul_l.constprop.0+0x2a>
   2d0b4:	7828      	ldrb	r0, [r5, #0]
   2d0b6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   2d0ba:	2858      	cmp	r0, #88	; 0x58
   2d0bc:	d1d1      	bne.n	2d062 <_strtoul_l.constprop.0+0x2a>
   2d0be:	786c      	ldrb	r4, [r5, #1]
   2d0c0:	2310      	movs	r3, #16
   2d0c2:	3502      	adds	r5, #2
   2d0c4:	e7cd      	b.n	2d062 <_strtoul_l.constprop.0+0x2a>
   2d0c6:	782b      	ldrb	r3, [r5, #0]
   2d0c8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2d0cc:	2b58      	cmp	r3, #88	; 0x58
   2d0ce:	d0f6      	beq.n	2d0be <_strtoul_l.constprop.0+0x86>
   2d0d0:	2308      	movs	r3, #8
   2d0d2:	e7c6      	b.n	2d062 <_strtoul_l.constprop.0+0x2a>
   2d0d4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
   2d0d8:	f1bc 0f19 	cmp.w	ip, #25
   2d0dc:	d801      	bhi.n	2d0e2 <_strtoul_l.constprop.0+0xaa>
   2d0de:	3c37      	subs	r4, #55	; 0x37
   2d0e0:	e7cf      	b.n	2d082 <_strtoul_l.constprop.0+0x4a>
   2d0e2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
   2d0e6:	f1bc 0f19 	cmp.w	ip, #25
   2d0ea:	d804      	bhi.n	2d0f6 <_strtoul_l.constprop.0+0xbe>
   2d0ec:	3c57      	subs	r4, #87	; 0x57
   2d0ee:	e7c8      	b.n	2d082 <_strtoul_l.constprop.0+0x4a>
   2d0f0:	f04f 36ff 	mov.w	r6, #4294967295
   2d0f4:	e7d2      	b.n	2d09c <_strtoul_l.constprop.0+0x64>
   2d0f6:	1c73      	adds	r3, r6, #1
   2d0f8:	d106      	bne.n	2d108 <_strtoul_l.constprop.0+0xd0>
   2d0fa:	2322      	movs	r3, #34	; 0x22
   2d0fc:	4630      	mov	r0, r6
   2d0fe:	f8ce 3000 	str.w	r3, [lr]
   2d102:	b932      	cbnz	r2, 2d112 <_strtoul_l.constprop.0+0xda>
   2d104:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2d108:	b107      	cbz	r7, 2d10c <_strtoul_l.constprop.0+0xd4>
   2d10a:	4240      	negs	r0, r0
   2d10c:	2a00      	cmp	r2, #0
   2d10e:	d0f9      	beq.n	2d104 <_strtoul_l.constprop.0+0xcc>
   2d110:	b106      	cbz	r6, 2d114 <_strtoul_l.constprop.0+0xdc>
   2d112:	1e69      	subs	r1, r5, #1
   2d114:	6011      	str	r1, [r2, #0]
   2d116:	e7f5      	b.n	2d104 <_strtoul_l.constprop.0+0xcc>
   2d118:	00041f02 	.word	0x00041f02

0002d11c <strtoul>:
   2d11c:	4613      	mov	r3, r2
   2d11e:	460a      	mov	r2, r1
   2d120:	4601      	mov	r1, r0
   2d122:	4802      	ldr	r0, [pc, #8]	; (2d12c <strtoul+0x10>)
   2d124:	6800      	ldr	r0, [r0, #0]
   2d126:	f7ff bf87 	b.w	2d038 <_strtoul_l.constprop.0>
   2d12a:	bf00      	nop
   2d12c:	2000ca9c 	.word	0x2000ca9c

0002d130 <vsniprintf>:
   2d130:	b507      	push	{r0, r1, r2, lr}
   2d132:	9300      	str	r3, [sp, #0]
   2d134:	4613      	mov	r3, r2
   2d136:	460a      	mov	r2, r1
   2d138:	4601      	mov	r1, r0
   2d13a:	4803      	ldr	r0, [pc, #12]	; (2d148 <vsniprintf+0x18>)
   2d13c:	6800      	ldr	r0, [r0, #0]
   2d13e:	f009 fbf3 	bl	36928 <_vsniprintf_r>
   2d142:	b003      	add	sp, #12
   2d144:	f85d fb04 	ldr.w	pc, [sp], #4
   2d148:	2000ca9c 	.word	0x2000ca9c

0002d14c <_vsiscanf_r>:
   2d14c:	b570      	push	{r4, r5, r6, lr}
   2d14e:	461e      	mov	r6, r3
   2d150:	b09a      	sub	sp, #104	; 0x68
   2d152:	f44f 7301 	mov.w	r3, #516	; 0x204
   2d156:	4604      	mov	r4, r0
   2d158:	4608      	mov	r0, r1
   2d15a:	4615      	mov	r5, r2
   2d15c:	f8ad 300c 	strh.w	r3, [sp, #12]
   2d160:	9100      	str	r1, [sp, #0]
   2d162:	9104      	str	r1, [sp, #16]
   2d164:	f7dc f85d 	bl	9222 <strlen>
   2d168:	4b09      	ldr	r3, [pc, #36]	; (2d190 <_vsiscanf_r+0x44>)
   2d16a:	462a      	mov	r2, r5
   2d16c:	4669      	mov	r1, sp
   2d16e:	9001      	str	r0, [sp, #4]
   2d170:	9309      	str	r3, [sp, #36]	; 0x24
   2d172:	2300      	movs	r3, #0
   2d174:	9005      	str	r0, [sp, #20]
   2d176:	4620      	mov	r0, r4
   2d178:	930d      	str	r3, [sp, #52]	; 0x34
   2d17a:	9312      	str	r3, [sp, #72]	; 0x48
   2d17c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2d180:	f8ad 300e 	strh.w	r3, [sp, #14]
   2d184:	4633      	mov	r3, r6
   2d186:	f000 ff51 	bl	2e02c <__ssvfiscanf_r>
   2d18a:	b01a      	add	sp, #104	; 0x68
   2d18c:	bd70      	pop	{r4, r5, r6, pc}
   2d18e:	bf00      	nop
   2d190:	000367bf 	.word	0x000367bf

0002d194 <vsiscanf>:
   2d194:	4613      	mov	r3, r2
   2d196:	460a      	mov	r2, r1
   2d198:	4601      	mov	r1, r0
   2d19a:	4802      	ldr	r0, [pc, #8]	; (2d1a4 <vsiscanf+0x10>)
   2d19c:	6800      	ldr	r0, [r0, #0]
   2d19e:	f7ff bfd5 	b.w	2d14c <_vsiscanf_r>
   2d1a2:	bf00      	nop
   2d1a4:	2000ca9c 	.word	0x2000ca9c

0002d1a8 <_write_r>:
   2d1a8:	b538      	push	{r3, r4, r5, lr}
   2d1aa:	4604      	mov	r4, r0
   2d1ac:	4d06      	ldr	r5, [pc, #24]	; (2d1c8 <_write_r+0x20>)
   2d1ae:	4608      	mov	r0, r1
   2d1b0:	4611      	mov	r1, r2
   2d1b2:	2200      	movs	r2, #0
   2d1b4:	602a      	str	r2, [r5, #0]
   2d1b6:	461a      	mov	r2, r3
   2d1b8:	f003 fda1 	bl	30cfe <_write>
   2d1bc:	1c43      	adds	r3, r0, #1
   2d1be:	d102      	bne.n	2d1c6 <_write_r+0x1e>
   2d1c0:	682b      	ldr	r3, [r5, #0]
   2d1c2:	b103      	cbz	r3, 2d1c6 <_write_r+0x1e>
   2d1c4:	6023      	str	r3, [r4, #0]
   2d1c6:	bd38      	pop	{r3, r4, r5, pc}
   2d1c8:	2000ef4c 	.word	0x2000ef4c

0002d1cc <_close_r>:
   2d1cc:	b538      	push	{r3, r4, r5, lr}
   2d1ce:	2300      	movs	r3, #0
   2d1d0:	4d05      	ldr	r5, [pc, #20]	; (2d1e8 <_close_r+0x1c>)
   2d1d2:	4604      	mov	r4, r0
   2d1d4:	4608      	mov	r0, r1
   2d1d6:	602b      	str	r3, [r5, #0]
   2d1d8:	f003 fd95 	bl	30d06 <_close>
   2d1dc:	1c43      	adds	r3, r0, #1
   2d1de:	d102      	bne.n	2d1e6 <_close_r+0x1a>
   2d1e0:	682b      	ldr	r3, [r5, #0]
   2d1e2:	b103      	cbz	r3, 2d1e6 <_close_r+0x1a>
   2d1e4:	6023      	str	r3, [r4, #0]
   2d1e6:	bd38      	pop	{r3, r4, r5, pc}
   2d1e8:	2000ef4c 	.word	0x2000ef4c

0002d1ec <__gethex>:
   2d1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d1f0:	b08b      	sub	sp, #44	; 0x2c
   2d1f2:	468b      	mov	fp, r1
   2d1f4:	4690      	mov	r8, r2
   2d1f6:	9305      	str	r3, [sp, #20]
   2d1f8:	4bac      	ldr	r3, [pc, #688]	; (2d4ac <__gethex+0x2c0>)
   2d1fa:	9002      	str	r0, [sp, #8]
   2d1fc:	681b      	ldr	r3, [r3, #0]
   2d1fe:	4618      	mov	r0, r3
   2d200:	9303      	str	r3, [sp, #12]
   2d202:	f7dc f80e 	bl	9222 <strlen>
   2d206:	9b03      	ldr	r3, [sp, #12]
   2d208:	9001      	str	r0, [sp, #4]
   2d20a:	4403      	add	r3, r0
   2d20c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   2d210:	9306      	str	r3, [sp, #24]
   2d212:	f8db 3000 	ldr.w	r3, [fp]
   2d216:	1c9a      	adds	r2, r3, #2
   2d218:	4617      	mov	r7, r2
   2d21a:	f812 0b01 	ldrb.w	r0, [r2], #1
   2d21e:	2830      	cmp	r0, #48	; 0x30
   2d220:	d0fa      	beq.n	2d218 <__gethex+0x2c>
   2d222:	1afb      	subs	r3, r7, r3
   2d224:	f1a3 0a02 	sub.w	sl, r3, #2
   2d228:	f009 fc87 	bl	36b3a <__hexdig_fun>
   2d22c:	4604      	mov	r4, r0
   2d22e:	2800      	cmp	r0, #0
   2d230:	d138      	bne.n	2d2a4 <__gethex+0xb8>
   2d232:	9a01      	ldr	r2, [sp, #4]
   2d234:	4638      	mov	r0, r7
   2d236:	9903      	ldr	r1, [sp, #12]
   2d238:	f009 fb0a 	bl	36850 <strncmp>
   2d23c:	4605      	mov	r5, r0
   2d23e:	2800      	cmp	r0, #0
   2d240:	d164      	bne.n	2d30c <__gethex+0x120>
   2d242:	9b01      	ldr	r3, [sp, #4]
   2d244:	5cf8      	ldrb	r0, [r7, r3]
   2d246:	18fe      	adds	r6, r7, r3
   2d248:	f009 fc77 	bl	36b3a <__hexdig_fun>
   2d24c:	2800      	cmp	r0, #0
   2d24e:	d05f      	beq.n	2d310 <__gethex+0x124>
   2d250:	4633      	mov	r3, r6
   2d252:	7818      	ldrb	r0, [r3, #0]
   2d254:	461f      	mov	r7, r3
   2d256:	3301      	adds	r3, #1
   2d258:	2830      	cmp	r0, #48	; 0x30
   2d25a:	d0fa      	beq.n	2d252 <__gethex+0x66>
   2d25c:	f009 fc6d 	bl	36b3a <__hexdig_fun>
   2d260:	fab0 f480 	clz	r4, r0
   2d264:	4635      	mov	r5, r6
   2d266:	f04f 0a01 	mov.w	sl, #1
   2d26a:	0964      	lsrs	r4, r4, #5
   2d26c:	463a      	mov	r2, r7
   2d26e:	4616      	mov	r6, r2
   2d270:	3201      	adds	r2, #1
   2d272:	7830      	ldrb	r0, [r6, #0]
   2d274:	f009 fc61 	bl	36b3a <__hexdig_fun>
   2d278:	2800      	cmp	r0, #0
   2d27a:	d1f8      	bne.n	2d26e <__gethex+0x82>
   2d27c:	9a01      	ldr	r2, [sp, #4]
   2d27e:	4630      	mov	r0, r6
   2d280:	9903      	ldr	r1, [sp, #12]
   2d282:	f009 fae5 	bl	36850 <strncmp>
   2d286:	b980      	cbnz	r0, 2d2aa <__gethex+0xbe>
   2d288:	b94d      	cbnz	r5, 2d29e <__gethex+0xb2>
   2d28a:	9b01      	ldr	r3, [sp, #4]
   2d28c:	18f5      	adds	r5, r6, r3
   2d28e:	462a      	mov	r2, r5
   2d290:	4616      	mov	r6, r2
   2d292:	3201      	adds	r2, #1
   2d294:	7830      	ldrb	r0, [r6, #0]
   2d296:	f009 fc50 	bl	36b3a <__hexdig_fun>
   2d29a:	2800      	cmp	r0, #0
   2d29c:	d1f8      	bne.n	2d290 <__gethex+0xa4>
   2d29e:	1bad      	subs	r5, r5, r6
   2d2a0:	00ad      	lsls	r5, r5, #2
   2d2a2:	e004      	b.n	2d2ae <__gethex+0xc2>
   2d2a4:	2400      	movs	r4, #0
   2d2a6:	4625      	mov	r5, r4
   2d2a8:	e7e0      	b.n	2d26c <__gethex+0x80>
   2d2aa:	2d00      	cmp	r5, #0
   2d2ac:	d1f7      	bne.n	2d29e <__gethex+0xb2>
   2d2ae:	7833      	ldrb	r3, [r6, #0]
   2d2b0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2d2b4:	2b50      	cmp	r3, #80	; 0x50
   2d2b6:	d138      	bne.n	2d32a <__gethex+0x13e>
   2d2b8:	7873      	ldrb	r3, [r6, #1]
   2d2ba:	2b2b      	cmp	r3, #43	; 0x2b
   2d2bc:	d02a      	beq.n	2d314 <__gethex+0x128>
   2d2be:	2b2d      	cmp	r3, #45	; 0x2d
   2d2c0:	d02c      	beq.n	2d31c <__gethex+0x130>
   2d2c2:	1c71      	adds	r1, r6, #1
   2d2c4:	f04f 0900 	mov.w	r9, #0
   2d2c8:	7808      	ldrb	r0, [r1, #0]
   2d2ca:	f009 fc36 	bl	36b3a <__hexdig_fun>
   2d2ce:	1e43      	subs	r3, r0, #1
   2d2d0:	b2db      	uxtb	r3, r3
   2d2d2:	2b18      	cmp	r3, #24
   2d2d4:	d829      	bhi.n	2d32a <__gethex+0x13e>
   2d2d6:	f1a0 0210 	sub.w	r2, r0, #16
   2d2da:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   2d2de:	f009 fc2c 	bl	36b3a <__hexdig_fun>
   2d2e2:	1e43      	subs	r3, r0, #1
   2d2e4:	b2db      	uxtb	r3, r3
   2d2e6:	2b18      	cmp	r3, #24
   2d2e8:	d91b      	bls.n	2d322 <__gethex+0x136>
   2d2ea:	f1b9 0f00 	cmp.w	r9, #0
   2d2ee:	d000      	beq.n	2d2f2 <__gethex+0x106>
   2d2f0:	4252      	negs	r2, r2
   2d2f2:	4415      	add	r5, r2
   2d2f4:	f8cb 1000 	str.w	r1, [fp]
   2d2f8:	b1cc      	cbz	r4, 2d32e <__gethex+0x142>
   2d2fa:	f1ba 0f00 	cmp.w	sl, #0
   2d2fe:	bf0c      	ite	eq
   2d300:	2606      	moveq	r6, #6
   2d302:	2600      	movne	r6, #0
   2d304:	4630      	mov	r0, r6
   2d306:	b00b      	add	sp, #44	; 0x2c
   2d308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d30c:	463e      	mov	r6, r7
   2d30e:	4625      	mov	r5, r4
   2d310:	2401      	movs	r4, #1
   2d312:	e7cc      	b.n	2d2ae <__gethex+0xc2>
   2d314:	f04f 0900 	mov.w	r9, #0
   2d318:	1cb1      	adds	r1, r6, #2
   2d31a:	e7d5      	b.n	2d2c8 <__gethex+0xdc>
   2d31c:	f04f 0901 	mov.w	r9, #1
   2d320:	e7fa      	b.n	2d318 <__gethex+0x12c>
   2d322:	230a      	movs	r3, #10
   2d324:	fb03 0002 	mla	r0, r3, r2, r0
   2d328:	e7d5      	b.n	2d2d6 <__gethex+0xea>
   2d32a:	4631      	mov	r1, r6
   2d32c:	e7e2      	b.n	2d2f4 <__gethex+0x108>
   2d32e:	1bf3      	subs	r3, r6, r7
   2d330:	4621      	mov	r1, r4
   2d332:	3b01      	subs	r3, #1
   2d334:	2b07      	cmp	r3, #7
   2d336:	dc0a      	bgt.n	2d34e <__gethex+0x162>
   2d338:	9802      	ldr	r0, [sp, #8]
   2d33a:	f000 f9a9 	bl	2d690 <_Balloc>
   2d33e:	4604      	mov	r4, r0
   2d340:	b940      	cbnz	r0, 2d354 <__gethex+0x168>
   2d342:	4b5b      	ldr	r3, [pc, #364]	; (2d4b0 <__gethex+0x2c4>)
   2d344:	4602      	mov	r2, r0
   2d346:	21de      	movs	r1, #222	; 0xde
   2d348:	485a      	ldr	r0, [pc, #360]	; (2d4b4 <__gethex+0x2c8>)
   2d34a:	f001 f957 	bl	2e5fc <__assert_func>
   2d34e:	3101      	adds	r1, #1
   2d350:	105b      	asrs	r3, r3, #1
   2d352:	e7ef      	b.n	2d334 <__gethex+0x148>
   2d354:	f04f 0b00 	mov.w	fp, #0
   2d358:	9b01      	ldr	r3, [sp, #4]
   2d35a:	f100 0914 	add.w	r9, r0, #20
   2d35e:	f1c3 0301 	rsb	r3, r3, #1
   2d362:	46da      	mov	sl, fp
   2d364:	f8cd 9010 	str.w	r9, [sp, #16]
   2d368:	9308      	str	r3, [sp, #32]
   2d36a:	42b7      	cmp	r7, r6
   2d36c:	d338      	bcc.n	2d3e0 <__gethex+0x1f4>
   2d36e:	9e04      	ldr	r6, [sp, #16]
   2d370:	4650      	mov	r0, sl
   2d372:	f846 ab04 	str.w	sl, [r6], #4
   2d376:	eba6 0609 	sub.w	r6, r6, r9
   2d37a:	10b6      	asrs	r6, r6, #2
   2d37c:	6126      	str	r6, [r4, #16]
   2d37e:	0176      	lsls	r6, r6, #5
   2d380:	f009 fcc3 	bl	36d0a <__hi0bits>
   2d384:	f8d8 7000 	ldr.w	r7, [r8]
   2d388:	1a36      	subs	r6, r6, r0
   2d38a:	42be      	cmp	r6, r7
   2d38c:	dd60      	ble.n	2d450 <__gethex+0x264>
   2d38e:	1bf6      	subs	r6, r6, r7
   2d390:	4620      	mov	r0, r4
   2d392:	4631      	mov	r1, r6
   2d394:	f009 fd76 	bl	36e84 <__any_on>
   2d398:	4682      	mov	sl, r0
   2d39a:	b178      	cbz	r0, 2d3bc <__gethex+0x1d0>
   2d39c:	1e73      	subs	r3, r6, #1
   2d39e:	f04f 0a01 	mov.w	sl, #1
   2d3a2:	1159      	asrs	r1, r3, #5
   2d3a4:	f003 021f 	and.w	r2, r3, #31
   2d3a8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   2d3ac:	fa0a f202 	lsl.w	r2, sl, r2
   2d3b0:	420a      	tst	r2, r1
   2d3b2:	d003      	beq.n	2d3bc <__gethex+0x1d0>
   2d3b4:	4553      	cmp	r3, sl
   2d3b6:	dc42      	bgt.n	2d43e <__gethex+0x252>
   2d3b8:	f04f 0a02 	mov.w	sl, #2
   2d3bc:	4435      	add	r5, r6
   2d3be:	4631      	mov	r1, r6
   2d3c0:	4620      	mov	r0, r4
   2d3c2:	f009 fb69 	bl	36a98 <rshift>
   2d3c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2d3ca:	42ab      	cmp	r3, r5
   2d3cc:	da4e      	bge.n	2d46c <__gethex+0x280>
   2d3ce:	4621      	mov	r1, r4
   2d3d0:	9802      	ldr	r0, [sp, #8]
   2d3d2:	f000 f99d 	bl	2d710 <_Bfree>
   2d3d6:	2300      	movs	r3, #0
   2d3d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
   2d3da:	26a3      	movs	r6, #163	; 0xa3
   2d3dc:	6013      	str	r3, [r2, #0]
   2d3de:	e791      	b.n	2d304 <__gethex+0x118>
   2d3e0:	1e73      	subs	r3, r6, #1
   2d3e2:	9a06      	ldr	r2, [sp, #24]
   2d3e4:	9307      	str	r3, [sp, #28]
   2d3e6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   2d3ea:	4293      	cmp	r3, r2
   2d3ec:	d017      	beq.n	2d41e <__gethex+0x232>
   2d3ee:	f1bb 0f20 	cmp.w	fp, #32
   2d3f2:	d106      	bne.n	2d402 <__gethex+0x216>
   2d3f4:	9b04      	ldr	r3, [sp, #16]
   2d3f6:	f843 ab04 	str.w	sl, [r3], #4
   2d3fa:	f04f 0a00 	mov.w	sl, #0
   2d3fe:	9304      	str	r3, [sp, #16]
   2d400:	46d3      	mov	fp, sl
   2d402:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   2d406:	f009 fb98 	bl	36b3a <__hexdig_fun>
   2d40a:	f000 000f 	and.w	r0, r0, #15
   2d40e:	9b07      	ldr	r3, [sp, #28]
   2d410:	fa00 f00b 	lsl.w	r0, r0, fp
   2d414:	f10b 0b04 	add.w	fp, fp, #4
   2d418:	ea4a 0a00 	orr.w	sl, sl, r0
   2d41c:	e00d      	b.n	2d43a <__gethex+0x24e>
   2d41e:	1e73      	subs	r3, r6, #1
   2d420:	9a08      	ldr	r2, [sp, #32]
   2d422:	4413      	add	r3, r2
   2d424:	42bb      	cmp	r3, r7
   2d426:	d3e2      	bcc.n	2d3ee <__gethex+0x202>
   2d428:	4618      	mov	r0, r3
   2d42a:	9a01      	ldr	r2, [sp, #4]
   2d42c:	9903      	ldr	r1, [sp, #12]
   2d42e:	9309      	str	r3, [sp, #36]	; 0x24
   2d430:	f009 fa0e 	bl	36850 <strncmp>
   2d434:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2d436:	2800      	cmp	r0, #0
   2d438:	d1d9      	bne.n	2d3ee <__gethex+0x202>
   2d43a:	461e      	mov	r6, r3
   2d43c:	e795      	b.n	2d36a <__gethex+0x17e>
   2d43e:	1eb1      	subs	r1, r6, #2
   2d440:	4620      	mov	r0, r4
   2d442:	f009 fd1f 	bl	36e84 <__any_on>
   2d446:	2800      	cmp	r0, #0
   2d448:	d0b6      	beq.n	2d3b8 <__gethex+0x1cc>
   2d44a:	f04f 0a03 	mov.w	sl, #3
   2d44e:	e7b5      	b.n	2d3bc <__gethex+0x1d0>
   2d450:	da09      	bge.n	2d466 <__gethex+0x27a>
   2d452:	1bbe      	subs	r6, r7, r6
   2d454:	4621      	mov	r1, r4
   2d456:	9802      	ldr	r0, [sp, #8]
   2d458:	4632      	mov	r2, r6
   2d45a:	1bad      	subs	r5, r5, r6
   2d45c:	f000 fb26 	bl	2daac <__lshift>
   2d460:	4604      	mov	r4, r0
   2d462:	f100 0914 	add.w	r9, r0, #20
   2d466:	f04f 0a00 	mov.w	sl, #0
   2d46a:	e7ac      	b.n	2d3c6 <__gethex+0x1da>
   2d46c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   2d470:	42ab      	cmp	r3, r5
   2d472:	dd70      	ble.n	2d556 <__gethex+0x36a>
   2d474:	1b5d      	subs	r5, r3, r5
   2d476:	42af      	cmp	r7, r5
   2d478:	dc35      	bgt.n	2d4e6 <__gethex+0x2fa>
   2d47a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   2d47e:	2b02      	cmp	r3, #2
   2d480:	d029      	beq.n	2d4d6 <__gethex+0x2ea>
   2d482:	2b03      	cmp	r3, #3
   2d484:	d02b      	beq.n	2d4de <__gethex+0x2f2>
   2d486:	2b01      	cmp	r3, #1
   2d488:	d11c      	bne.n	2d4c4 <__gethex+0x2d8>
   2d48a:	42af      	cmp	r7, r5
   2d48c:	d11a      	bne.n	2d4c4 <__gethex+0x2d8>
   2d48e:	2f01      	cmp	r7, #1
   2d490:	d112      	bne.n	2d4b8 <__gethex+0x2cc>
   2d492:	f8d8 3004 	ldr.w	r3, [r8, #4]
   2d496:	2662      	movs	r6, #98	; 0x62
   2d498:	9a05      	ldr	r2, [sp, #20]
   2d49a:	6013      	str	r3, [r2, #0]
   2d49c:	2301      	movs	r3, #1
   2d49e:	6123      	str	r3, [r4, #16]
   2d4a0:	f8c9 3000 	str.w	r3, [r9]
   2d4a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2d4a6:	601c      	str	r4, [r3, #0]
   2d4a8:	e72c      	b.n	2d304 <__gethex+0x118>
   2d4aa:	bf00      	nop
   2d4ac:	00038a64 	.word	0x00038a64
   2d4b0:	000420c8 	.word	0x000420c8
   2d4b4:	000420d9 	.word	0x000420d9
   2d4b8:	1e79      	subs	r1, r7, #1
   2d4ba:	4620      	mov	r0, r4
   2d4bc:	f009 fce2 	bl	36e84 <__any_on>
   2d4c0:	2800      	cmp	r0, #0
   2d4c2:	d1e6      	bne.n	2d492 <__gethex+0x2a6>
   2d4c4:	4621      	mov	r1, r4
   2d4c6:	9802      	ldr	r0, [sp, #8]
   2d4c8:	f000 f922 	bl	2d710 <_Bfree>
   2d4cc:	2300      	movs	r3, #0
   2d4ce:	9a14      	ldr	r2, [sp, #80]	; 0x50
   2d4d0:	2650      	movs	r6, #80	; 0x50
   2d4d2:	6013      	str	r3, [r2, #0]
   2d4d4:	e716      	b.n	2d304 <__gethex+0x118>
   2d4d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2d4d8:	2b00      	cmp	r3, #0
   2d4da:	d1f3      	bne.n	2d4c4 <__gethex+0x2d8>
   2d4dc:	e7d9      	b.n	2d492 <__gethex+0x2a6>
   2d4de:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2d4e0:	2b00      	cmp	r3, #0
   2d4e2:	d1d6      	bne.n	2d492 <__gethex+0x2a6>
   2d4e4:	e7ee      	b.n	2d4c4 <__gethex+0x2d8>
   2d4e6:	1e6e      	subs	r6, r5, #1
   2d4e8:	f1ba 0f00 	cmp.w	sl, #0
   2d4ec:	d130      	bne.n	2d550 <__gethex+0x364>
   2d4ee:	b126      	cbz	r6, 2d4fa <__gethex+0x30e>
   2d4f0:	4631      	mov	r1, r6
   2d4f2:	4620      	mov	r0, r4
   2d4f4:	f009 fcc6 	bl	36e84 <__any_on>
   2d4f8:	4682      	mov	sl, r0
   2d4fa:	1172      	asrs	r2, r6, #5
   2d4fc:	2301      	movs	r3, #1
   2d4fe:	f006 061f 	and.w	r6, r6, #31
   2d502:	4629      	mov	r1, r5
   2d504:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
   2d508:	4620      	mov	r0, r4
   2d50a:	40b3      	lsls	r3, r6
   2d50c:	1b7f      	subs	r7, r7, r5
   2d50e:	2602      	movs	r6, #2
   2d510:	4213      	tst	r3, r2
   2d512:	bf18      	it	ne
   2d514:	f04a 0a02 	orrne.w	sl, sl, #2
   2d518:	f009 fabe 	bl	36a98 <rshift>
   2d51c:	f8d8 5004 	ldr.w	r5, [r8, #4]
   2d520:	f1ba 0f00 	cmp.w	sl, #0
   2d524:	d047      	beq.n	2d5b6 <__gethex+0x3ca>
   2d526:	f8d8 300c 	ldr.w	r3, [r8, #12]
   2d52a:	2b02      	cmp	r3, #2
   2d52c:	d015      	beq.n	2d55a <__gethex+0x36e>
   2d52e:	2b03      	cmp	r3, #3
   2d530:	d017      	beq.n	2d562 <__gethex+0x376>
   2d532:	2b01      	cmp	r3, #1
   2d534:	d109      	bne.n	2d54a <__gethex+0x35e>
   2d536:	f01a 0f02 	tst.w	sl, #2
   2d53a:	d006      	beq.n	2d54a <__gethex+0x35e>
   2d53c:	f8d9 3000 	ldr.w	r3, [r9]
   2d540:	ea4a 0a03 	orr.w	sl, sl, r3
   2d544:	f01a 0f01 	tst.w	sl, #1
   2d548:	d10e      	bne.n	2d568 <__gethex+0x37c>
   2d54a:	f046 0610 	orr.w	r6, r6, #16
   2d54e:	e032      	b.n	2d5b6 <__gethex+0x3ca>
   2d550:	f04f 0a01 	mov.w	sl, #1
   2d554:	e7d1      	b.n	2d4fa <__gethex+0x30e>
   2d556:	2601      	movs	r6, #1
   2d558:	e7e2      	b.n	2d520 <__gethex+0x334>
   2d55a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2d55c:	f1c3 0301 	rsb	r3, r3, #1
   2d560:	9315      	str	r3, [sp, #84]	; 0x54
   2d562:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2d564:	2b00      	cmp	r3, #0
   2d566:	d0f0      	beq.n	2d54a <__gethex+0x35e>
   2d568:	f8d4 b010 	ldr.w	fp, [r4, #16]
   2d56c:	f104 0314 	add.w	r3, r4, #20
   2d570:	f04f 0c00 	mov.w	ip, #0
   2d574:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   2d578:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   2d57c:	4618      	mov	r0, r3
   2d57e:	f853 2b04 	ldr.w	r2, [r3], #4
   2d582:	f1b2 3fff 	cmp.w	r2, #4294967295
   2d586:	d01b      	beq.n	2d5c0 <__gethex+0x3d4>
   2d588:	3201      	adds	r2, #1
   2d58a:	6002      	str	r2, [r0, #0]
   2d58c:	2e02      	cmp	r6, #2
   2d58e:	f104 0314 	add.w	r3, r4, #20
   2d592:	d13c      	bne.n	2d60e <__gethex+0x422>
   2d594:	f8d8 2000 	ldr.w	r2, [r8]
   2d598:	3a01      	subs	r2, #1
   2d59a:	42ba      	cmp	r2, r7
   2d59c:	d109      	bne.n	2d5b2 <__gethex+0x3c6>
   2d59e:	1179      	asrs	r1, r7, #5
   2d5a0:	2201      	movs	r2, #1
   2d5a2:	f007 071f 	and.w	r7, r7, #31
   2d5a6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   2d5aa:	fa02 f707 	lsl.w	r7, r2, r7
   2d5ae:	421f      	tst	r7, r3
   2d5b0:	d13a      	bne.n	2d628 <__gethex+0x43c>
   2d5b2:	f046 0620 	orr.w	r6, r6, #32
   2d5b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2d5b8:	601c      	str	r4, [r3, #0]
   2d5ba:	9b05      	ldr	r3, [sp, #20]
   2d5bc:	601d      	str	r5, [r3, #0]
   2d5be:	e6a1      	b.n	2d304 <__gethex+0x118>
   2d5c0:	4299      	cmp	r1, r3
   2d5c2:	f843 cc04 	str.w	ip, [r3, #-4]
   2d5c6:	d8d9      	bhi.n	2d57c <__gethex+0x390>
   2d5c8:	68a3      	ldr	r3, [r4, #8]
   2d5ca:	459b      	cmp	fp, r3
   2d5cc:	db17      	blt.n	2d5fe <__gethex+0x412>
   2d5ce:	6861      	ldr	r1, [r4, #4]
   2d5d0:	9802      	ldr	r0, [sp, #8]
   2d5d2:	3101      	adds	r1, #1
   2d5d4:	f000 f85c 	bl	2d690 <_Balloc>
   2d5d8:	4681      	mov	r9, r0
   2d5da:	b918      	cbnz	r0, 2d5e4 <__gethex+0x3f8>
   2d5dc:	4b1a      	ldr	r3, [pc, #104]	; (2d648 <__gethex+0x45c>)
   2d5de:	4602      	mov	r2, r0
   2d5e0:	2184      	movs	r1, #132	; 0x84
   2d5e2:	e6b1      	b.n	2d348 <__gethex+0x15c>
   2d5e4:	6922      	ldr	r2, [r4, #16]
   2d5e6:	f104 010c 	add.w	r1, r4, #12
   2d5ea:	300c      	adds	r0, #12
   2d5ec:	3202      	adds	r2, #2
   2d5ee:	0092      	lsls	r2, r2, #2
   2d5f0:	f008 ff9a 	bl	36528 <memcpy>
   2d5f4:	4621      	mov	r1, r4
   2d5f6:	464c      	mov	r4, r9
   2d5f8:	9802      	ldr	r0, [sp, #8]
   2d5fa:	f000 f889 	bl	2d710 <_Bfree>
   2d5fe:	6923      	ldr	r3, [r4, #16]
   2d600:	1c5a      	adds	r2, r3, #1
   2d602:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   2d606:	6122      	str	r2, [r4, #16]
   2d608:	2201      	movs	r2, #1
   2d60a:	615a      	str	r2, [r3, #20]
   2d60c:	e7be      	b.n	2d58c <__gethex+0x3a0>
   2d60e:	6922      	ldr	r2, [r4, #16]
   2d610:	455a      	cmp	r2, fp
   2d612:	dd0b      	ble.n	2d62c <__gethex+0x440>
   2d614:	2101      	movs	r1, #1
   2d616:	4620      	mov	r0, r4
   2d618:	f009 fa3e 	bl	36a98 <rshift>
   2d61c:	3501      	adds	r5, #1
   2d61e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2d622:	42ab      	cmp	r3, r5
   2d624:	f6ff aed3 	blt.w	2d3ce <__gethex+0x1e2>
   2d628:	2601      	movs	r6, #1
   2d62a:	e7c2      	b.n	2d5b2 <__gethex+0x3c6>
   2d62c:	f017 071f 	ands.w	r7, r7, #31
   2d630:	d0fa      	beq.n	2d628 <__gethex+0x43c>
   2d632:	4453      	add	r3, sl
   2d634:	f1c7 0720 	rsb	r7, r7, #32
   2d638:	f853 0c04 	ldr.w	r0, [r3, #-4]
   2d63c:	f009 fb65 	bl	36d0a <__hi0bits>
   2d640:	42b8      	cmp	r0, r7
   2d642:	dbe7      	blt.n	2d614 <__gethex+0x428>
   2d644:	e7f0      	b.n	2d628 <__gethex+0x43c>
   2d646:	bf00      	nop
   2d648:	000420c8 	.word	0x000420c8

0002d64c <_localeconv_r>:
   2d64c:	4800      	ldr	r0, [pc, #0]	; (2d650 <_localeconv_r+0x4>)
   2d64e:	4770      	bx	lr
   2d650:	2000cbf0 	.word	0x2000cbf0

0002d654 <_lseek_r>:
   2d654:	b538      	push	{r3, r4, r5, lr}
   2d656:	4604      	mov	r4, r0
   2d658:	4d06      	ldr	r5, [pc, #24]	; (2d674 <_lseek_r+0x20>)
   2d65a:	4608      	mov	r0, r1
   2d65c:	4611      	mov	r1, r2
   2d65e:	2200      	movs	r2, #0
   2d660:	602a      	str	r2, [r5, #0]
   2d662:	461a      	mov	r2, r3
   2d664:	f003 fb52 	bl	30d0c <_lseek>
   2d668:	1c43      	adds	r3, r0, #1
   2d66a:	d102      	bne.n	2d672 <_lseek_r+0x1e>
   2d66c:	682b      	ldr	r3, [r5, #0]
   2d66e:	b103      	cbz	r3, 2d672 <_lseek_r+0x1e>
   2d670:	6023      	str	r3, [r4, #0]
   2d672:	bd38      	pop	{r3, r4, r5, pc}
   2d674:	2000ef4c 	.word	0x2000ef4c

0002d678 <__malloc_lock>:
   2d678:	4801      	ldr	r0, [pc, #4]	; (2d680 <__malloc_lock+0x8>)
   2d67a:	f7e5 bf5f 	b.w	1353c <__retarget_lock_acquire_recursive>
   2d67e:	bf00      	nop
   2d680:	2000ce38 	.word	0x2000ce38

0002d684 <__malloc_unlock>:
   2d684:	4801      	ldr	r0, [pc, #4]	; (2d68c <__malloc_unlock+0x8>)
   2d686:	f7e5 bf75 	b.w	13574 <__retarget_lock_release_recursive>
   2d68a:	bf00      	nop
   2d68c:	2000ce38 	.word	0x2000ce38

0002d690 <_Balloc>:
   2d690:	b570      	push	{r4, r5, r6, lr}
   2d692:	6a46      	ldr	r6, [r0, #36]	; 0x24
   2d694:	4604      	mov	r4, r0
   2d696:	460d      	mov	r5, r1
   2d698:	b976      	cbnz	r6, 2d6b8 <_Balloc+0x28>
   2d69a:	2010      	movs	r0, #16
   2d69c:	f7fe ff36 	bl	2c50c <malloc>
   2d6a0:	4602      	mov	r2, r0
   2d6a2:	6260      	str	r0, [r4, #36]	; 0x24
   2d6a4:	b920      	cbnz	r0, 2d6b0 <_Balloc+0x20>
   2d6a6:	4b18      	ldr	r3, [pc, #96]	; (2d708 <_Balloc+0x78>)
   2d6a8:	2166      	movs	r1, #102	; 0x66
   2d6aa:	4818      	ldr	r0, [pc, #96]	; (2d70c <_Balloc+0x7c>)
   2d6ac:	f000 ffa6 	bl	2e5fc <__assert_func>
   2d6b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
   2d6b4:	6006      	str	r6, [r0, #0]
   2d6b6:	60c6      	str	r6, [r0, #12]
   2d6b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
   2d6ba:	68f3      	ldr	r3, [r6, #12]
   2d6bc:	b183      	cbz	r3, 2d6e0 <_Balloc+0x50>
   2d6be:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2d6c0:	68db      	ldr	r3, [r3, #12]
   2d6c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   2d6c6:	b9b8      	cbnz	r0, 2d6f8 <_Balloc+0x68>
   2d6c8:	2101      	movs	r1, #1
   2d6ca:	4620      	mov	r0, r4
   2d6cc:	fa01 f605 	lsl.w	r6, r1, r5
   2d6d0:	1d72      	adds	r2, r6, #5
   2d6d2:	0092      	lsls	r2, r2, #2
   2d6d4:	f009 fbf7 	bl	36ec6 <_calloc_r>
   2d6d8:	b160      	cbz	r0, 2d6f4 <_Balloc+0x64>
   2d6da:	e9c0 5601 	strd	r5, r6, [r0, #4]
   2d6de:	e00e      	b.n	2d6fe <_Balloc+0x6e>
   2d6e0:	2221      	movs	r2, #33	; 0x21
   2d6e2:	2104      	movs	r1, #4
   2d6e4:	4620      	mov	r0, r4
   2d6e6:	f009 fbee 	bl	36ec6 <_calloc_r>
   2d6ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2d6ec:	60f0      	str	r0, [r6, #12]
   2d6ee:	68db      	ldr	r3, [r3, #12]
   2d6f0:	2b00      	cmp	r3, #0
   2d6f2:	d1e4      	bne.n	2d6be <_Balloc+0x2e>
   2d6f4:	2000      	movs	r0, #0
   2d6f6:	bd70      	pop	{r4, r5, r6, pc}
   2d6f8:	6802      	ldr	r2, [r0, #0]
   2d6fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   2d6fe:	2300      	movs	r3, #0
   2d700:	e9c0 3303 	strd	r3, r3, [r0, #12]
   2d704:	e7f7      	b.n	2d6f6 <_Balloc+0x66>
   2d706:	bf00      	nop
   2d708:	0004203d 	.word	0x0004203d
   2d70c:	0004215b 	.word	0x0004215b

0002d710 <_Bfree>:
   2d710:	b570      	push	{r4, r5, r6, lr}
   2d712:	6a46      	ldr	r6, [r0, #36]	; 0x24
   2d714:	4605      	mov	r5, r0
   2d716:	460c      	mov	r4, r1
   2d718:	b976      	cbnz	r6, 2d738 <_Bfree+0x28>
   2d71a:	2010      	movs	r0, #16
   2d71c:	f7fe fef6 	bl	2c50c <malloc>
   2d720:	4602      	mov	r2, r0
   2d722:	6268      	str	r0, [r5, #36]	; 0x24
   2d724:	b920      	cbnz	r0, 2d730 <_Bfree+0x20>
   2d726:	4b09      	ldr	r3, [pc, #36]	; (2d74c <_Bfree+0x3c>)
   2d728:	218a      	movs	r1, #138	; 0x8a
   2d72a:	4809      	ldr	r0, [pc, #36]	; (2d750 <_Bfree+0x40>)
   2d72c:	f000 ff66 	bl	2e5fc <__assert_func>
   2d730:	e9c0 6601 	strd	r6, r6, [r0, #4]
   2d734:	6006      	str	r6, [r0, #0]
   2d736:	60c6      	str	r6, [r0, #12]
   2d738:	b13c      	cbz	r4, 2d74a <_Bfree+0x3a>
   2d73a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   2d73c:	6862      	ldr	r2, [r4, #4]
   2d73e:	68db      	ldr	r3, [r3, #12]
   2d740:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   2d744:	6021      	str	r1, [r4, #0]
   2d746:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   2d74a:	bd70      	pop	{r4, r5, r6, pc}
   2d74c:	0004203d 	.word	0x0004203d
   2d750:	0004215b 	.word	0x0004215b

0002d754 <__multadd>:
   2d754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d758:	f101 0c14 	add.w	ip, r1, #20
   2d75c:	4607      	mov	r7, r0
   2d75e:	460c      	mov	r4, r1
   2d760:	461e      	mov	r6, r3
   2d762:	690d      	ldr	r5, [r1, #16]
   2d764:	2000      	movs	r0, #0
   2d766:	f8dc 3000 	ldr.w	r3, [ip]
   2d76a:	3001      	adds	r0, #1
   2d76c:	b299      	uxth	r1, r3
   2d76e:	4285      	cmp	r5, r0
   2d770:	fb02 6101 	mla	r1, r2, r1, r6
   2d774:	ea4f 4613 	mov.w	r6, r3, lsr #16
   2d778:	ea4f 4311 	mov.w	r3, r1, lsr #16
   2d77c:	b289      	uxth	r1, r1
   2d77e:	fb02 3306 	mla	r3, r2, r6, r3
   2d782:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   2d786:	ea4f 4613 	mov.w	r6, r3, lsr #16
   2d78a:	f84c 1b04 	str.w	r1, [ip], #4
   2d78e:	dcea      	bgt.n	2d766 <__multadd+0x12>
   2d790:	b30e      	cbz	r6, 2d7d6 <__multadd+0x82>
   2d792:	68a3      	ldr	r3, [r4, #8]
   2d794:	42ab      	cmp	r3, r5
   2d796:	dc19      	bgt.n	2d7cc <__multadd+0x78>
   2d798:	6861      	ldr	r1, [r4, #4]
   2d79a:	4638      	mov	r0, r7
   2d79c:	3101      	adds	r1, #1
   2d79e:	f7ff ff77 	bl	2d690 <_Balloc>
   2d7a2:	4680      	mov	r8, r0
   2d7a4:	b928      	cbnz	r0, 2d7b2 <__multadd+0x5e>
   2d7a6:	4602      	mov	r2, r0
   2d7a8:	4b0c      	ldr	r3, [pc, #48]	; (2d7dc <__multadd+0x88>)
   2d7aa:	21b5      	movs	r1, #181	; 0xb5
   2d7ac:	480c      	ldr	r0, [pc, #48]	; (2d7e0 <__multadd+0x8c>)
   2d7ae:	f000 ff25 	bl	2e5fc <__assert_func>
   2d7b2:	6922      	ldr	r2, [r4, #16]
   2d7b4:	f104 010c 	add.w	r1, r4, #12
   2d7b8:	300c      	adds	r0, #12
   2d7ba:	3202      	adds	r2, #2
   2d7bc:	0092      	lsls	r2, r2, #2
   2d7be:	f008 feb3 	bl	36528 <memcpy>
   2d7c2:	4621      	mov	r1, r4
   2d7c4:	4644      	mov	r4, r8
   2d7c6:	4638      	mov	r0, r7
   2d7c8:	f7ff ffa2 	bl	2d710 <_Bfree>
   2d7cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   2d7d0:	3501      	adds	r5, #1
   2d7d2:	615e      	str	r6, [r3, #20]
   2d7d4:	6125      	str	r5, [r4, #16]
   2d7d6:	4620      	mov	r0, r4
   2d7d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2d7dc:	000420c8 	.word	0x000420c8
   2d7e0:	0004215b 	.word	0x0004215b

0002d7e4 <__s2b>:
   2d7e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2d7e8:	4615      	mov	r5, r2
   2d7ea:	461f      	mov	r7, r3
   2d7ec:	2209      	movs	r2, #9
   2d7ee:	3308      	adds	r3, #8
   2d7f0:	460c      	mov	r4, r1
   2d7f2:	4606      	mov	r6, r0
   2d7f4:	2100      	movs	r1, #0
   2d7f6:	fb93 f3f2 	sdiv	r3, r3, r2
   2d7fa:	2201      	movs	r2, #1
   2d7fc:	429a      	cmp	r2, r3
   2d7fe:	db09      	blt.n	2d814 <__s2b+0x30>
   2d800:	4630      	mov	r0, r6
   2d802:	f7ff ff45 	bl	2d690 <_Balloc>
   2d806:	b940      	cbnz	r0, 2d81a <__s2b+0x36>
   2d808:	4602      	mov	r2, r0
   2d80a:	4b19      	ldr	r3, [pc, #100]	; (2d870 <__s2b+0x8c>)
   2d80c:	21ce      	movs	r1, #206	; 0xce
   2d80e:	4819      	ldr	r0, [pc, #100]	; (2d874 <__s2b+0x90>)
   2d810:	f000 fef4 	bl	2e5fc <__assert_func>
   2d814:	0052      	lsls	r2, r2, #1
   2d816:	3101      	adds	r1, #1
   2d818:	e7f0      	b.n	2d7fc <__s2b+0x18>
   2d81a:	9b08      	ldr	r3, [sp, #32]
   2d81c:	2d09      	cmp	r5, #9
   2d81e:	6143      	str	r3, [r0, #20]
   2d820:	f04f 0301 	mov.w	r3, #1
   2d824:	6103      	str	r3, [r0, #16]
   2d826:	dd16      	ble.n	2d856 <__s2b+0x72>
   2d828:	f104 0909 	add.w	r9, r4, #9
   2d82c:	442c      	add	r4, r5
   2d82e:	46c8      	mov	r8, r9
   2d830:	f818 3b01 	ldrb.w	r3, [r8], #1
   2d834:	4601      	mov	r1, r0
   2d836:	220a      	movs	r2, #10
   2d838:	4630      	mov	r0, r6
   2d83a:	3b30      	subs	r3, #48	; 0x30
   2d83c:	f7ff ff8a 	bl	2d754 <__multadd>
   2d840:	45a0      	cmp	r8, r4
   2d842:	d1f5      	bne.n	2d830 <__s2b+0x4c>
   2d844:	f1a5 0408 	sub.w	r4, r5, #8
   2d848:	444c      	add	r4, r9
   2d84a:	1b2d      	subs	r5, r5, r4
   2d84c:	1963      	adds	r3, r4, r5
   2d84e:	42bb      	cmp	r3, r7
   2d850:	db04      	blt.n	2d85c <__s2b+0x78>
   2d852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2d856:	340a      	adds	r4, #10
   2d858:	2509      	movs	r5, #9
   2d85a:	e7f6      	b.n	2d84a <__s2b+0x66>
   2d85c:	f814 3b01 	ldrb.w	r3, [r4], #1
   2d860:	4601      	mov	r1, r0
   2d862:	220a      	movs	r2, #10
   2d864:	4630      	mov	r0, r6
   2d866:	3b30      	subs	r3, #48	; 0x30
   2d868:	f7ff ff74 	bl	2d754 <__multadd>
   2d86c:	e7ee      	b.n	2d84c <__s2b+0x68>
   2d86e:	bf00      	nop
   2d870:	000420c8 	.word	0x000420c8
   2d874:	0004215b 	.word	0x0004215b

0002d878 <__i2b>:
   2d878:	b510      	push	{r4, lr}
   2d87a:	460c      	mov	r4, r1
   2d87c:	2101      	movs	r1, #1
   2d87e:	f7ff ff07 	bl	2d690 <_Balloc>
   2d882:	4602      	mov	r2, r0
   2d884:	b928      	cbnz	r0, 2d892 <__i2b+0x1a>
   2d886:	4b05      	ldr	r3, [pc, #20]	; (2d89c <__i2b+0x24>)
   2d888:	f44f 71a0 	mov.w	r1, #320	; 0x140
   2d88c:	4804      	ldr	r0, [pc, #16]	; (2d8a0 <__i2b+0x28>)
   2d88e:	f000 feb5 	bl	2e5fc <__assert_func>
   2d892:	2301      	movs	r3, #1
   2d894:	6144      	str	r4, [r0, #20]
   2d896:	6103      	str	r3, [r0, #16]
   2d898:	bd10      	pop	{r4, pc}
   2d89a:	bf00      	nop
   2d89c:	000420c8 	.word	0x000420c8
   2d8a0:	0004215b 	.word	0x0004215b

0002d8a4 <__multiply>:
   2d8a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d8a8:	4614      	mov	r4, r2
   2d8aa:	690a      	ldr	r2, [r1, #16]
   2d8ac:	460f      	mov	r7, r1
   2d8ae:	b085      	sub	sp, #20
   2d8b0:	6923      	ldr	r3, [r4, #16]
   2d8b2:	429a      	cmp	r2, r3
   2d8b4:	bfa2      	ittt	ge
   2d8b6:	4623      	movge	r3, r4
   2d8b8:	460c      	movge	r4, r1
   2d8ba:	461f      	movge	r7, r3
   2d8bc:	f8d4 a010 	ldr.w	sl, [r4, #16]
   2d8c0:	68a3      	ldr	r3, [r4, #8]
   2d8c2:	f8d7 9010 	ldr.w	r9, [r7, #16]
   2d8c6:	6861      	ldr	r1, [r4, #4]
   2d8c8:	eb0a 0609 	add.w	r6, sl, r9
   2d8cc:	42b3      	cmp	r3, r6
   2d8ce:	bfb8      	it	lt
   2d8d0:	3101      	addlt	r1, #1
   2d8d2:	f7ff fedd 	bl	2d690 <_Balloc>
   2d8d6:	b930      	cbnz	r0, 2d8e6 <__multiply+0x42>
   2d8d8:	4602      	mov	r2, r0
   2d8da:	4b45      	ldr	r3, [pc, #276]	; (2d9f0 <__multiply+0x14c>)
   2d8dc:	f240 115d 	movw	r1, #349	; 0x15d
   2d8e0:	4844      	ldr	r0, [pc, #272]	; (2d9f4 <__multiply+0x150>)
   2d8e2:	f000 fe8b 	bl	2e5fc <__assert_func>
   2d8e6:	f100 0514 	add.w	r5, r0, #20
   2d8ea:	2200      	movs	r2, #0
   2d8ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   2d8f0:	462b      	mov	r3, r5
   2d8f2:	4543      	cmp	r3, r8
   2d8f4:	d321      	bcc.n	2d93a <__multiply+0x96>
   2d8f6:	f107 0114 	add.w	r1, r7, #20
   2d8fa:	f104 0214 	add.w	r2, r4, #20
   2d8fe:	f104 0715 	add.w	r7, r4, #21
   2d902:	eb02 028a 	add.w	r2, r2, sl, lsl #2
   2d906:	eb01 0389 	add.w	r3, r1, r9, lsl #2
   2d90a:	9302      	str	r3, [sp, #8]
   2d90c:	1b13      	subs	r3, r2, r4
   2d90e:	3b15      	subs	r3, #21
   2d910:	f023 0303 	bic.w	r3, r3, #3
   2d914:	3304      	adds	r3, #4
   2d916:	42ba      	cmp	r2, r7
   2d918:	bf38      	it	cc
   2d91a:	2304      	movcc	r3, #4
   2d91c:	9301      	str	r3, [sp, #4]
   2d91e:	9b02      	ldr	r3, [sp, #8]
   2d920:	9103      	str	r1, [sp, #12]
   2d922:	428b      	cmp	r3, r1
   2d924:	d80c      	bhi.n	2d940 <__multiply+0x9c>
   2d926:	2e00      	cmp	r6, #0
   2d928:	dd03      	ble.n	2d932 <__multiply+0x8e>
   2d92a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   2d92e:	2b00      	cmp	r3, #0
   2d930:	d05b      	beq.n	2d9ea <__multiply+0x146>
   2d932:	6106      	str	r6, [r0, #16]
   2d934:	b005      	add	sp, #20
   2d936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d93a:	f843 2b04 	str.w	r2, [r3], #4
   2d93e:	e7d8      	b.n	2d8f2 <__multiply+0x4e>
   2d940:	f8b1 a000 	ldrh.w	sl, [r1]
   2d944:	f1ba 0f00 	cmp.w	sl, #0
   2d948:	d024      	beq.n	2d994 <__multiply+0xf0>
   2d94a:	f104 0e14 	add.w	lr, r4, #20
   2d94e:	46a9      	mov	r9, r5
   2d950:	f04f 0c00 	mov.w	ip, #0
   2d954:	f85e 7b04 	ldr.w	r7, [lr], #4
   2d958:	f8d9 3000 	ldr.w	r3, [r9]
   2d95c:	fa1f fb87 	uxth.w	fp, r7
   2d960:	4572      	cmp	r2, lr
   2d962:	b29b      	uxth	r3, r3
   2d964:	ea4f 4717 	mov.w	r7, r7, lsr #16
   2d968:	fb0a 330b 	mla	r3, sl, fp, r3
   2d96c:	4463      	add	r3, ip
   2d96e:	f8d9 c000 	ldr.w	ip, [r9]
   2d972:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
   2d976:	fb0a c707 	mla	r7, sl, r7, ip
   2d97a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
   2d97e:	b29b      	uxth	r3, r3
   2d980:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   2d984:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   2d988:	f849 3b04 	str.w	r3, [r9], #4
   2d98c:	d8e2      	bhi.n	2d954 <__multiply+0xb0>
   2d98e:	9b01      	ldr	r3, [sp, #4]
   2d990:	f845 c003 	str.w	ip, [r5, r3]
   2d994:	9b03      	ldr	r3, [sp, #12]
   2d996:	3104      	adds	r1, #4
   2d998:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   2d99c:	f1b9 0f00 	cmp.w	r9, #0
   2d9a0:	d021      	beq.n	2d9e6 <__multiply+0x142>
   2d9a2:	682b      	ldr	r3, [r5, #0]
   2d9a4:	f104 0c14 	add.w	ip, r4, #20
   2d9a8:	46ae      	mov	lr, r5
   2d9aa:	f04f 0a00 	mov.w	sl, #0
   2d9ae:	f8bc b000 	ldrh.w	fp, [ip]
   2d9b2:	b29b      	uxth	r3, r3
   2d9b4:	f8be 7002 	ldrh.w	r7, [lr, #2]
   2d9b8:	fb09 770b 	mla	r7, r9, fp, r7
   2d9bc:	4457      	add	r7, sl
   2d9be:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   2d9c2:	f84e 3b04 	str.w	r3, [lr], #4
   2d9c6:	f85c 3b04 	ldr.w	r3, [ip], #4
   2d9ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   2d9ce:	f8be 3000 	ldrh.w	r3, [lr]
   2d9d2:	4562      	cmp	r2, ip
   2d9d4:	fb09 330a 	mla	r3, r9, sl, r3
   2d9d8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
   2d9dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   2d9e0:	d8e5      	bhi.n	2d9ae <__multiply+0x10a>
   2d9e2:	9f01      	ldr	r7, [sp, #4]
   2d9e4:	51eb      	str	r3, [r5, r7]
   2d9e6:	3504      	adds	r5, #4
   2d9e8:	e799      	b.n	2d91e <__multiply+0x7a>
   2d9ea:	3e01      	subs	r6, #1
   2d9ec:	e79b      	b.n	2d926 <__multiply+0x82>
   2d9ee:	bf00      	nop
   2d9f0:	000420c8 	.word	0x000420c8
   2d9f4:	0004215b 	.word	0x0004215b

0002d9f8 <__pow5mult>:
   2d9f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2d9fc:	4615      	mov	r5, r2
   2d9fe:	f012 0203 	ands.w	r2, r2, #3
   2da02:	4607      	mov	r7, r0
   2da04:	460e      	mov	r6, r1
   2da06:	d007      	beq.n	2da18 <__pow5mult+0x20>
   2da08:	3a01      	subs	r2, #1
   2da0a:	4c25      	ldr	r4, [pc, #148]	; (2daa0 <__pow5mult+0xa8>)
   2da0c:	2300      	movs	r3, #0
   2da0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   2da12:	f7ff fe9f 	bl	2d754 <__multadd>
   2da16:	4606      	mov	r6, r0
   2da18:	10ad      	asrs	r5, r5, #2
   2da1a:	d03d      	beq.n	2da98 <__pow5mult+0xa0>
   2da1c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   2da1e:	b97c      	cbnz	r4, 2da40 <__pow5mult+0x48>
   2da20:	2010      	movs	r0, #16
   2da22:	f7fe fd73 	bl	2c50c <malloc>
   2da26:	4602      	mov	r2, r0
   2da28:	6278      	str	r0, [r7, #36]	; 0x24
   2da2a:	b928      	cbnz	r0, 2da38 <__pow5mult+0x40>
   2da2c:	4b1d      	ldr	r3, [pc, #116]	; (2daa4 <__pow5mult+0xac>)
   2da2e:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   2da32:	481d      	ldr	r0, [pc, #116]	; (2daa8 <__pow5mult+0xb0>)
   2da34:	f000 fde2 	bl	2e5fc <__assert_func>
   2da38:	e9c0 4401 	strd	r4, r4, [r0, #4]
   2da3c:	6004      	str	r4, [r0, #0]
   2da3e:	60c4      	str	r4, [r0, #12]
   2da40:	f8d7 8024 	ldr.w	r8, [r7, #36]	; 0x24
   2da44:	f8d8 4008 	ldr.w	r4, [r8, #8]
   2da48:	b94c      	cbnz	r4, 2da5e <__pow5mult+0x66>
   2da4a:	f240 2171 	movw	r1, #625	; 0x271
   2da4e:	4638      	mov	r0, r7
   2da50:	f7ff ff12 	bl	2d878 <__i2b>
   2da54:	2300      	movs	r3, #0
   2da56:	4604      	mov	r4, r0
   2da58:	f8c8 0008 	str.w	r0, [r8, #8]
   2da5c:	6003      	str	r3, [r0, #0]
   2da5e:	f04f 0900 	mov.w	r9, #0
   2da62:	07eb      	lsls	r3, r5, #31
   2da64:	d50a      	bpl.n	2da7c <__pow5mult+0x84>
   2da66:	4631      	mov	r1, r6
   2da68:	4622      	mov	r2, r4
   2da6a:	4638      	mov	r0, r7
   2da6c:	f7ff ff1a 	bl	2d8a4 <__multiply>
   2da70:	4680      	mov	r8, r0
   2da72:	4631      	mov	r1, r6
   2da74:	4638      	mov	r0, r7
   2da76:	4646      	mov	r6, r8
   2da78:	f7ff fe4a 	bl	2d710 <_Bfree>
   2da7c:	106d      	asrs	r5, r5, #1
   2da7e:	d00b      	beq.n	2da98 <__pow5mult+0xa0>
   2da80:	6820      	ldr	r0, [r4, #0]
   2da82:	b938      	cbnz	r0, 2da94 <__pow5mult+0x9c>
   2da84:	4622      	mov	r2, r4
   2da86:	4621      	mov	r1, r4
   2da88:	4638      	mov	r0, r7
   2da8a:	f7ff ff0b 	bl	2d8a4 <__multiply>
   2da8e:	6020      	str	r0, [r4, #0]
   2da90:	f8c0 9000 	str.w	r9, [r0]
   2da94:	4604      	mov	r4, r0
   2da96:	e7e4      	b.n	2da62 <__pow5mult+0x6a>
   2da98:	4630      	mov	r0, r6
   2da9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2da9e:	bf00      	nop
   2daa0:	00038a70 	.word	0x00038a70
   2daa4:	0004203d 	.word	0x0004203d
   2daa8:	0004215b 	.word	0x0004215b

0002daac <__lshift>:
   2daac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2dab0:	460c      	mov	r4, r1
   2dab2:	4607      	mov	r7, r0
   2dab4:	4691      	mov	r9, r2
   2dab6:	ea4f 1a62 	mov.w	sl, r2, asr #5
   2daba:	6923      	ldr	r3, [r4, #16]
   2dabc:	6849      	ldr	r1, [r1, #4]
   2dabe:	eb03 1862 	add.w	r8, r3, r2, asr #5
   2dac2:	68a3      	ldr	r3, [r4, #8]
   2dac4:	f108 0601 	add.w	r6, r8, #1
   2dac8:	42b3      	cmp	r3, r6
   2daca:	db0b      	blt.n	2dae4 <__lshift+0x38>
   2dacc:	4638      	mov	r0, r7
   2dace:	f7ff fddf 	bl	2d690 <_Balloc>
   2dad2:	4605      	mov	r5, r0
   2dad4:	b948      	cbnz	r0, 2daea <__lshift+0x3e>
   2dad6:	4602      	mov	r2, r0
   2dad8:	4b28      	ldr	r3, [pc, #160]	; (2db7c <__lshift+0xd0>)
   2dada:	f240 11d9 	movw	r1, #473	; 0x1d9
   2dade:	4828      	ldr	r0, [pc, #160]	; (2db80 <__lshift+0xd4>)
   2dae0:	f000 fd8c 	bl	2e5fc <__assert_func>
   2dae4:	3101      	adds	r1, #1
   2dae6:	005b      	lsls	r3, r3, #1
   2dae8:	e7ee      	b.n	2dac8 <__lshift+0x1c>
   2daea:	2300      	movs	r3, #0
   2daec:	f100 0114 	add.w	r1, r0, #20
   2daf0:	f100 0210 	add.w	r2, r0, #16
   2daf4:	4618      	mov	r0, r3
   2daf6:	4553      	cmp	r3, sl
   2daf8:	db33      	blt.n	2db62 <__lshift+0xb6>
   2dafa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   2dafe:	f104 0314 	add.w	r3, r4, #20
   2db02:	6920      	ldr	r0, [r4, #16]
   2db04:	f019 091f 	ands.w	r9, r9, #31
   2db08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   2db0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   2db10:	d02b      	beq.n	2db6a <__lshift+0xbe>
   2db12:	f1c9 0e20 	rsb	lr, r9, #32
   2db16:	468a      	mov	sl, r1
   2db18:	2200      	movs	r2, #0
   2db1a:	6818      	ldr	r0, [r3, #0]
   2db1c:	fa00 f009 	lsl.w	r0, r0, r9
   2db20:	4310      	orrs	r0, r2
   2db22:	f84a 0b04 	str.w	r0, [sl], #4
   2db26:	f853 2b04 	ldr.w	r2, [r3], #4
   2db2a:	459c      	cmp	ip, r3
   2db2c:	fa22 f20e 	lsr.w	r2, r2, lr
   2db30:	d8f3      	bhi.n	2db1a <__lshift+0x6e>
   2db32:	ebac 0304 	sub.w	r3, ip, r4
   2db36:	f104 0015 	add.w	r0, r4, #21
   2db3a:	3b15      	subs	r3, #21
   2db3c:	f023 0303 	bic.w	r3, r3, #3
   2db40:	3304      	adds	r3, #4
   2db42:	4584      	cmp	ip, r0
   2db44:	bf38      	it	cc
   2db46:	2304      	movcc	r3, #4
   2db48:	50ca      	str	r2, [r1, r3]
   2db4a:	b10a      	cbz	r2, 2db50 <__lshift+0xa4>
   2db4c:	f108 0602 	add.w	r6, r8, #2
   2db50:	3e01      	subs	r6, #1
   2db52:	4638      	mov	r0, r7
   2db54:	4621      	mov	r1, r4
   2db56:	612e      	str	r6, [r5, #16]
   2db58:	f7ff fdda 	bl	2d710 <_Bfree>
   2db5c:	4628      	mov	r0, r5
   2db5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2db62:	3301      	adds	r3, #1
   2db64:	f842 0f04 	str.w	r0, [r2, #4]!
   2db68:	e7c5      	b.n	2daf6 <__lshift+0x4a>
   2db6a:	3904      	subs	r1, #4
   2db6c:	f853 2b04 	ldr.w	r2, [r3], #4
   2db70:	459c      	cmp	ip, r3
   2db72:	f841 2f04 	str.w	r2, [r1, #4]!
   2db76:	d8f9      	bhi.n	2db6c <__lshift+0xc0>
   2db78:	e7ea      	b.n	2db50 <__lshift+0xa4>
   2db7a:	bf00      	nop
   2db7c:	000420c8 	.word	0x000420c8
   2db80:	0004215b 	.word	0x0004215b

0002db84 <__mdiff>:
   2db84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2db88:	4689      	mov	r9, r1
   2db8a:	4606      	mov	r6, r0
   2db8c:	4611      	mov	r1, r2
   2db8e:	4614      	mov	r4, r2
   2db90:	4648      	mov	r0, r9
   2db92:	f009 f909 	bl	36da8 <__mcmp>
   2db96:	1e05      	subs	r5, r0, #0
   2db98:	d112      	bne.n	2dbc0 <__mdiff+0x3c>
   2db9a:	4629      	mov	r1, r5
   2db9c:	4630      	mov	r0, r6
   2db9e:	f7ff fd77 	bl	2d690 <_Balloc>
   2dba2:	4602      	mov	r2, r0
   2dba4:	b928      	cbnz	r0, 2dbb2 <__mdiff+0x2e>
   2dba6:	4b40      	ldr	r3, [pc, #256]	; (2dca8 <__mdiff+0x124>)
   2dba8:	f240 2132 	movw	r1, #562	; 0x232
   2dbac:	483f      	ldr	r0, [pc, #252]	; (2dcac <__mdiff+0x128>)
   2dbae:	f000 fd25 	bl	2e5fc <__assert_func>
   2dbb2:	2301      	movs	r3, #1
   2dbb4:	e9c0 3504 	strd	r3, r5, [r0, #16]
   2dbb8:	4610      	mov	r0, r2
   2dbba:	b003      	add	sp, #12
   2dbbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2dbc0:	bfbc      	itt	lt
   2dbc2:	464b      	movlt	r3, r9
   2dbc4:	46a1      	movlt	r9, r4
   2dbc6:	4630      	mov	r0, r6
   2dbc8:	bfb8      	it	lt
   2dbca:	2501      	movlt	r5, #1
   2dbcc:	f8d9 1004 	ldr.w	r1, [r9, #4]
   2dbd0:	bfb4      	ite	lt
   2dbd2:	461c      	movlt	r4, r3
   2dbd4:	2500      	movge	r5, #0
   2dbd6:	f7ff fd5b 	bl	2d690 <_Balloc>
   2dbda:	4602      	mov	r2, r0
   2dbdc:	b918      	cbnz	r0, 2dbe6 <__mdiff+0x62>
   2dbde:	4b32      	ldr	r3, [pc, #200]	; (2dca8 <__mdiff+0x124>)
   2dbe0:	f44f 7110 	mov.w	r1, #576	; 0x240
   2dbe4:	e7e2      	b.n	2dbac <__mdiff+0x28>
   2dbe6:	f8d9 7010 	ldr.w	r7, [r9, #16]
   2dbea:	f104 0e14 	add.w	lr, r4, #20
   2dbee:	6926      	ldr	r6, [r4, #16]
   2dbf0:	f100 0b14 	add.w	fp, r0, #20
   2dbf4:	60c5      	str	r5, [r0, #12]
   2dbf6:	f109 0514 	add.w	r5, r9, #20
   2dbfa:	f109 0310 	add.w	r3, r9, #16
   2dbfe:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
   2dc02:	eb05 0887 	add.w	r8, r5, r7, lsl #2
   2dc06:	46d9      	mov	r9, fp
   2dc08:	f04f 0c00 	mov.w	ip, #0
   2dc0c:	9301      	str	r3, [sp, #4]
   2dc0e:	9b01      	ldr	r3, [sp, #4]
   2dc10:	f85e 0b04 	ldr.w	r0, [lr], #4
   2dc14:	f853 af04 	ldr.w	sl, [r3, #4]!
   2dc18:	b281      	uxth	r1, r0
   2dc1a:	4576      	cmp	r6, lr
   2dc1c:	9301      	str	r3, [sp, #4]
   2dc1e:	fa1f f38a 	uxth.w	r3, sl
   2dc22:	ea4f 4010 	mov.w	r0, r0, lsr #16
   2dc26:	eba3 0301 	sub.w	r3, r3, r1
   2dc2a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
   2dc2e:	4463      	add	r3, ip
   2dc30:	eb00 4023 	add.w	r0, r0, r3, asr #16
   2dc34:	b29b      	uxth	r3, r3
   2dc36:	ea4f 4c20 	mov.w	ip, r0, asr #16
   2dc3a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   2dc3e:	f849 3b04 	str.w	r3, [r9], #4
   2dc42:	d8e4      	bhi.n	2dc0e <__mdiff+0x8a>
   2dc44:	1b33      	subs	r3, r6, r4
   2dc46:	3415      	adds	r4, #21
   2dc48:	3b15      	subs	r3, #21
   2dc4a:	f023 0303 	bic.w	r3, r3, #3
   2dc4e:	3304      	adds	r3, #4
   2dc50:	42a6      	cmp	r6, r4
   2dc52:	bf38      	it	cc
   2dc54:	2304      	movcc	r3, #4
   2dc56:	441d      	add	r5, r3
   2dc58:	445b      	add	r3, fp
   2dc5a:	462c      	mov	r4, r5
   2dc5c:	461e      	mov	r6, r3
   2dc5e:	4544      	cmp	r4, r8
   2dc60:	d30e      	bcc.n	2dc80 <__mdiff+0xfc>
   2dc62:	f108 0103 	add.w	r1, r8, #3
   2dc66:	1b49      	subs	r1, r1, r5
   2dc68:	3d03      	subs	r5, #3
   2dc6a:	f021 0103 	bic.w	r1, r1, #3
   2dc6e:	45a8      	cmp	r8, r5
   2dc70:	bf38      	it	cc
   2dc72:	2100      	movcc	r1, #0
   2dc74:	440b      	add	r3, r1
   2dc76:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   2dc7a:	b199      	cbz	r1, 2dca4 <__mdiff+0x120>
   2dc7c:	6117      	str	r7, [r2, #16]
   2dc7e:	e79b      	b.n	2dbb8 <__mdiff+0x34>
   2dc80:	f854 1b04 	ldr.w	r1, [r4], #4
   2dc84:	46e6      	mov	lr, ip
   2dc86:	fa1f fc81 	uxth.w	ip, r1
   2dc8a:	0c08      	lsrs	r0, r1, #16
   2dc8c:	4471      	add	r1, lr
   2dc8e:	44f4      	add	ip, lr
   2dc90:	b289      	uxth	r1, r1
   2dc92:	eb00 402c 	add.w	r0, r0, ip, asr #16
   2dc96:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   2dc9a:	ea4f 4c20 	mov.w	ip, r0, asr #16
   2dc9e:	f846 1b04 	str.w	r1, [r6], #4
   2dca2:	e7dc      	b.n	2dc5e <__mdiff+0xda>
   2dca4:	3f01      	subs	r7, #1
   2dca6:	e7e6      	b.n	2dc76 <__mdiff+0xf2>
   2dca8:	000420c8 	.word	0x000420c8
   2dcac:	0004215b 	.word	0x0004215b

0002dcb0 <__ulp>:
   2dcb0:	4b0e      	ldr	r3, [pc, #56]	; (2dcec <__ulp+0x3c>)
   2dcb2:	400b      	ands	r3, r1
   2dcb4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
   2dcb8:	2b00      	cmp	r3, #0
   2dcba:	dc08      	bgt.n	2dcce <__ulp+0x1e>
   2dcbc:	425b      	negs	r3, r3
   2dcbe:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
   2dcc2:	ea4f 5223 	mov.w	r2, r3, asr #20
   2dcc6:	da04      	bge.n	2dcd2 <__ulp+0x22>
   2dcc8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   2dccc:	4113      	asrs	r3, r2
   2dcce:	2200      	movs	r2, #0
   2dcd0:	e008      	b.n	2dce4 <__ulp+0x34>
   2dcd2:	f1a2 0314 	sub.w	r3, r2, #20
   2dcd6:	2b1e      	cmp	r3, #30
   2dcd8:	bfd6      	itet	le
   2dcda:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
   2dcde:	2201      	movgt	r2, #1
   2dce0:	40da      	lsrle	r2, r3
   2dce2:	2300      	movs	r3, #0
   2dce4:	4619      	mov	r1, r3
   2dce6:	4610      	mov	r0, r2
   2dce8:	4770      	bx	lr
   2dcea:	bf00      	nop
   2dcec:	7ff00000 	.word	0x7ff00000

0002dcf0 <__b2d>:
   2dcf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2dcf2:	6902      	ldr	r2, [r0, #16]
   2dcf4:	f100 0614 	add.w	r6, r0, #20
   2dcf8:	4f21      	ldr	r7, [pc, #132]	; (2dd80 <__b2d+0x90>)
   2dcfa:	eb06 0282 	add.w	r2, r6, r2, lsl #2
   2dcfe:	f852 4c04 	ldr.w	r4, [r2, #-4]
   2dd02:	1f15      	subs	r5, r2, #4
   2dd04:	4620      	mov	r0, r4
   2dd06:	f009 f800 	bl	36d0a <__hi0bits>
   2dd0a:	4603      	mov	r3, r0
   2dd0c:	f1c0 0020 	rsb	r0, r0, #32
   2dd10:	2b0a      	cmp	r3, #10
   2dd12:	6008      	str	r0, [r1, #0]
   2dd14:	dc13      	bgt.n	2dd3e <__b2d+0x4e>
   2dd16:	42ae      	cmp	r6, r5
   2dd18:	f1c3 0c0b 	rsb	ip, r3, #11
   2dd1c:	f103 0315 	add.w	r3, r3, #21
   2dd20:	bf34      	ite	cc
   2dd22:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
   2dd26:	2200      	movcs	r2, #0
   2dd28:	fa24 fe0c 	lsr.w	lr, r4, ip
   2dd2c:	fa04 f303 	lsl.w	r3, r4, r3
   2dd30:	fa22 f20c 	lsr.w	r2, r2, ip
   2dd34:	ea4e 0107 	orr.w	r1, lr, r7
   2dd38:	431a      	orrs	r2, r3
   2dd3a:	4610      	mov	r0, r2
   2dd3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2dd3e:	42ae      	cmp	r6, r5
   2dd40:	bf36      	itet	cc
   2dd42:	f1a2 0508 	subcc.w	r5, r2, #8
   2dd46:	2200      	movcs	r2, #0
   2dd48:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
   2dd4c:	3b0b      	subs	r3, #11
   2dd4e:	d014      	beq.n	2dd7a <__b2d+0x8a>
   2dd50:	f1c3 0720 	rsb	r7, r3, #32
   2dd54:	409c      	lsls	r4, r3
   2dd56:	42b5      	cmp	r5, r6
   2dd58:	fa22 f107 	lsr.w	r1, r2, r7
   2dd5c:	fa02 f203 	lsl.w	r2, r2, r3
   2dd60:	ea44 0401 	orr.w	r4, r4, r1
   2dd64:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
   2dd68:	bf8c      	ite	hi
   2dd6a:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
   2dd6e:	2400      	movls	r4, #0
   2dd70:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   2dd74:	40fc      	lsrs	r4, r7
   2dd76:	4322      	orrs	r2, r4
   2dd78:	e7df      	b.n	2dd3a <__b2d+0x4a>
   2dd7a:	ea44 0107 	orr.w	r1, r4, r7
   2dd7e:	e7dc      	b.n	2dd3a <__b2d+0x4a>
   2dd80:	3ff00000 	.word	0x3ff00000

0002dd84 <__d2b>:
   2dd84:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   2dd88:	2101      	movs	r1, #1
   2dd8a:	4690      	mov	r8, r2
   2dd8c:	4699      	mov	r9, r3
   2dd8e:	9e08      	ldr	r6, [sp, #32]
   2dd90:	f7ff fc7e 	bl	2d690 <_Balloc>
   2dd94:	4604      	mov	r4, r0
   2dd96:	b930      	cbnz	r0, 2dda6 <__d2b+0x22>
   2dd98:	4602      	mov	r2, r0
   2dd9a:	4b24      	ldr	r3, [pc, #144]	; (2de2c <__d2b+0xa8>)
   2dd9c:	f240 310a 	movw	r1, #778	; 0x30a
   2dda0:	4823      	ldr	r0, [pc, #140]	; (2de30 <__d2b+0xac>)
   2dda2:	f000 fc2b 	bl	2e5fc <__assert_func>
   2dda6:	f3c9 550a 	ubfx	r5, r9, #20, #11
   2ddaa:	f3c9 0313 	ubfx	r3, r9, #0, #20
   2ddae:	b10d      	cbz	r5, 2ddb4 <__d2b+0x30>
   2ddb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   2ddb4:	9301      	str	r3, [sp, #4]
   2ddb6:	f1b8 0300 	subs.w	r3, r8, #0
   2ddba:	d024      	beq.n	2de06 <__d2b+0x82>
   2ddbc:	4668      	mov	r0, sp
   2ddbe:	9300      	str	r3, [sp, #0]
   2ddc0:	f008 ffc5 	bl	36d4e <__lo0bits>
   2ddc4:	e9dd 1200 	ldrd	r1, r2, [sp]
   2ddc8:	b1d8      	cbz	r0, 2de02 <__d2b+0x7e>
   2ddca:	f1c0 0320 	rsb	r3, r0, #32
   2ddce:	fa02 f303 	lsl.w	r3, r2, r3
   2ddd2:	40c2      	lsrs	r2, r0
   2ddd4:	430b      	orrs	r3, r1
   2ddd6:	9201      	str	r2, [sp, #4]
   2ddd8:	6163      	str	r3, [r4, #20]
   2ddda:	9b01      	ldr	r3, [sp, #4]
   2dddc:	2b00      	cmp	r3, #0
   2ddde:	61a3      	str	r3, [r4, #24]
   2dde0:	bf0c      	ite	eq
   2dde2:	2201      	moveq	r2, #1
   2dde4:	2202      	movne	r2, #2
   2dde6:	6122      	str	r2, [r4, #16]
   2dde8:	b1ad      	cbz	r5, 2de16 <__d2b+0x92>
   2ddea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   2ddee:	4405      	add	r5, r0
   2ddf0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   2ddf4:	6035      	str	r5, [r6, #0]
   2ddf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2ddf8:	6018      	str	r0, [r3, #0]
   2ddfa:	4620      	mov	r0, r4
   2ddfc:	b002      	add	sp, #8
   2ddfe:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   2de02:	6161      	str	r1, [r4, #20]
   2de04:	e7e9      	b.n	2ddda <__d2b+0x56>
   2de06:	a801      	add	r0, sp, #4
   2de08:	f008 ffa1 	bl	36d4e <__lo0bits>
   2de0c:	9b01      	ldr	r3, [sp, #4]
   2de0e:	3020      	adds	r0, #32
   2de10:	2201      	movs	r2, #1
   2de12:	6163      	str	r3, [r4, #20]
   2de14:	e7e7      	b.n	2dde6 <__d2b+0x62>
   2de16:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   2de1a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   2de1e:	6030      	str	r0, [r6, #0]
   2de20:	6918      	ldr	r0, [r3, #16]
   2de22:	f008 ff72 	bl	36d0a <__hi0bits>
   2de26:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   2de2a:	e7e4      	b.n	2ddf6 <__d2b+0x72>
   2de2c:	000420c8 	.word	0x000420c8
   2de30:	0004215b 	.word	0x0004215b

0002de34 <_svfiprintf_r>:
   2de34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2de38:	4698      	mov	r8, r3
   2de3a:	898b      	ldrh	r3, [r1, #12]
   2de3c:	b09d      	sub	sp, #116	; 0x74
   2de3e:	4607      	mov	r7, r0
   2de40:	061b      	lsls	r3, r3, #24
   2de42:	460d      	mov	r5, r1
   2de44:	4614      	mov	r4, r2
   2de46:	d510      	bpl.n	2de6a <_svfiprintf_r+0x36>
   2de48:	690b      	ldr	r3, [r1, #16]
   2de4a:	b973      	cbnz	r3, 2de6a <_svfiprintf_r+0x36>
   2de4c:	2140      	movs	r1, #64	; 0x40
   2de4e:	f7fe fbb7 	bl	2c5c0 <_malloc_r>
   2de52:	6028      	str	r0, [r5, #0]
   2de54:	6128      	str	r0, [r5, #16]
   2de56:	b930      	cbnz	r0, 2de66 <_svfiprintf_r+0x32>
   2de58:	230c      	movs	r3, #12
   2de5a:	603b      	str	r3, [r7, #0]
   2de5c:	f04f 30ff 	mov.w	r0, #4294967295
   2de60:	b01d      	add	sp, #116	; 0x74
   2de62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2de66:	2340      	movs	r3, #64	; 0x40
   2de68:	616b      	str	r3, [r5, #20]
   2de6a:	2300      	movs	r3, #0
   2de6c:	f8cd 800c 	str.w	r8, [sp, #12]
   2de70:	f04f 0901 	mov.w	r9, #1
   2de74:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 2e018 <_svfiprintf_r+0x1e4>
   2de78:	9309      	str	r3, [sp, #36]	; 0x24
   2de7a:	2320      	movs	r3, #32
   2de7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   2de80:	2330      	movs	r3, #48	; 0x30
   2de82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   2de86:	4623      	mov	r3, r4
   2de88:	469a      	mov	sl, r3
   2de8a:	f813 2b01 	ldrb.w	r2, [r3], #1
   2de8e:	b10a      	cbz	r2, 2de94 <_svfiprintf_r+0x60>
   2de90:	2a25      	cmp	r2, #37	; 0x25
   2de92:	d1f9      	bne.n	2de88 <_svfiprintf_r+0x54>
   2de94:	ebba 0b04 	subs.w	fp, sl, r4
   2de98:	d00b      	beq.n	2deb2 <_svfiprintf_r+0x7e>
   2de9a:	465b      	mov	r3, fp
   2de9c:	4622      	mov	r2, r4
   2de9e:	4629      	mov	r1, r5
   2dea0:	4638      	mov	r0, r7
   2dea2:	f009 f843 	bl	36f2c <__ssputs_r>
   2dea6:	3001      	adds	r0, #1
   2dea8:	f000 80a7 	beq.w	2dffa <_svfiprintf_r+0x1c6>
   2deac:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2deae:	445a      	add	r2, fp
   2deb0:	9209      	str	r2, [sp, #36]	; 0x24
   2deb2:	f89a 3000 	ldrb.w	r3, [sl]
   2deb6:	2b00      	cmp	r3, #0
   2deb8:	f000 809f 	beq.w	2dffa <_svfiprintf_r+0x1c6>
   2debc:	2300      	movs	r3, #0
   2debe:	f04f 32ff 	mov.w	r2, #4294967295
   2dec2:	f10a 0a01 	add.w	sl, sl, #1
   2dec6:	9304      	str	r3, [sp, #16]
   2dec8:	9307      	str	r3, [sp, #28]
   2deca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   2dece:	931a      	str	r3, [sp, #104]	; 0x68
   2ded0:	e9cd 2305 	strd	r2, r3, [sp, #20]
   2ded4:	4654      	mov	r4, sl
   2ded6:	2205      	movs	r2, #5
   2ded8:	484f      	ldr	r0, [pc, #316]	; (2e018 <_svfiprintf_r+0x1e4>)
   2deda:	f814 1b01 	ldrb.w	r1, [r4], #1
   2dede:	f008 fb05 	bl	364ec <memchr>
   2dee2:	9a04      	ldr	r2, [sp, #16]
   2dee4:	b9d8      	cbnz	r0, 2df1e <_svfiprintf_r+0xea>
   2dee6:	06d0      	lsls	r0, r2, #27
   2dee8:	bf44      	itt	mi
   2deea:	2320      	movmi	r3, #32
   2deec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   2def0:	0711      	lsls	r1, r2, #28
   2def2:	bf44      	itt	mi
   2def4:	232b      	movmi	r3, #43	; 0x2b
   2def6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   2defa:	f89a 3000 	ldrb.w	r3, [sl]
   2defe:	2b2a      	cmp	r3, #42	; 0x2a
   2df00:	d015      	beq.n	2df2e <_svfiprintf_r+0xfa>
   2df02:	9a07      	ldr	r2, [sp, #28]
   2df04:	4654      	mov	r4, sl
   2df06:	2000      	movs	r0, #0
   2df08:	f04f 0c0a 	mov.w	ip, #10
   2df0c:	4621      	mov	r1, r4
   2df0e:	f811 3b01 	ldrb.w	r3, [r1], #1
   2df12:	3b30      	subs	r3, #48	; 0x30
   2df14:	2b09      	cmp	r3, #9
   2df16:	d94b      	bls.n	2dfb0 <_svfiprintf_r+0x17c>
   2df18:	b1b0      	cbz	r0, 2df48 <_svfiprintf_r+0x114>
   2df1a:	9207      	str	r2, [sp, #28]
   2df1c:	e014      	b.n	2df48 <_svfiprintf_r+0x114>
   2df1e:	eba0 0308 	sub.w	r3, r0, r8
   2df22:	46a2      	mov	sl, r4
   2df24:	fa09 f303 	lsl.w	r3, r9, r3
   2df28:	4313      	orrs	r3, r2
   2df2a:	9304      	str	r3, [sp, #16]
   2df2c:	e7d2      	b.n	2ded4 <_svfiprintf_r+0xa0>
   2df2e:	9b03      	ldr	r3, [sp, #12]
   2df30:	1d19      	adds	r1, r3, #4
   2df32:	681b      	ldr	r3, [r3, #0]
   2df34:	2b00      	cmp	r3, #0
   2df36:	9103      	str	r1, [sp, #12]
   2df38:	bfbb      	ittet	lt
   2df3a:	425b      	neglt	r3, r3
   2df3c:	f042 0202 	orrlt.w	r2, r2, #2
   2df40:	9307      	strge	r3, [sp, #28]
   2df42:	9307      	strlt	r3, [sp, #28]
   2df44:	bfb8      	it	lt
   2df46:	9204      	strlt	r2, [sp, #16]
   2df48:	7823      	ldrb	r3, [r4, #0]
   2df4a:	2b2e      	cmp	r3, #46	; 0x2e
   2df4c:	d10a      	bne.n	2df64 <_svfiprintf_r+0x130>
   2df4e:	7863      	ldrb	r3, [r4, #1]
   2df50:	2b2a      	cmp	r3, #42	; 0x2a
   2df52:	d132      	bne.n	2dfba <_svfiprintf_r+0x186>
   2df54:	9b03      	ldr	r3, [sp, #12]
   2df56:	3402      	adds	r4, #2
   2df58:	1d1a      	adds	r2, r3, #4
   2df5a:	681b      	ldr	r3, [r3, #0]
   2df5c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
   2df60:	9203      	str	r2, [sp, #12]
   2df62:	9305      	str	r3, [sp, #20]
   2df64:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 2e01c <_svfiprintf_r+0x1e8>
   2df68:	2203      	movs	r2, #3
   2df6a:	7821      	ldrb	r1, [r4, #0]
   2df6c:	4650      	mov	r0, sl
   2df6e:	f008 fabd 	bl	364ec <memchr>
   2df72:	b138      	cbz	r0, 2df84 <_svfiprintf_r+0x150>
   2df74:	eba0 000a 	sub.w	r0, r0, sl
   2df78:	2240      	movs	r2, #64	; 0x40
   2df7a:	9b04      	ldr	r3, [sp, #16]
   2df7c:	3401      	adds	r4, #1
   2df7e:	4082      	lsls	r2, r0
   2df80:	4313      	orrs	r3, r2
   2df82:	9304      	str	r3, [sp, #16]
   2df84:	f814 1b01 	ldrb.w	r1, [r4], #1
   2df88:	2206      	movs	r2, #6
   2df8a:	4825      	ldr	r0, [pc, #148]	; (2e020 <_svfiprintf_r+0x1ec>)
   2df8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   2df90:	f008 faac 	bl	364ec <memchr>
   2df94:	2800      	cmp	r0, #0
   2df96:	d036      	beq.n	2e006 <_svfiprintf_r+0x1d2>
   2df98:	4b22      	ldr	r3, [pc, #136]	; (2e024 <_svfiprintf_r+0x1f0>)
   2df9a:	bb1b      	cbnz	r3, 2dfe4 <_svfiprintf_r+0x1b0>
   2df9c:	9b03      	ldr	r3, [sp, #12]
   2df9e:	3307      	adds	r3, #7
   2dfa0:	f023 0307 	bic.w	r3, r3, #7
   2dfa4:	3308      	adds	r3, #8
   2dfa6:	9303      	str	r3, [sp, #12]
   2dfa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2dfaa:	4433      	add	r3, r6
   2dfac:	9309      	str	r3, [sp, #36]	; 0x24
   2dfae:	e76a      	b.n	2de86 <_svfiprintf_r+0x52>
   2dfb0:	fb0c 3202 	mla	r2, ip, r2, r3
   2dfb4:	460c      	mov	r4, r1
   2dfb6:	2001      	movs	r0, #1
   2dfb8:	e7a8      	b.n	2df0c <_svfiprintf_r+0xd8>
   2dfba:	2300      	movs	r3, #0
   2dfbc:	3401      	adds	r4, #1
   2dfbe:	f04f 0c0a 	mov.w	ip, #10
   2dfc2:	4619      	mov	r1, r3
   2dfc4:	9305      	str	r3, [sp, #20]
   2dfc6:	4620      	mov	r0, r4
   2dfc8:	f810 2b01 	ldrb.w	r2, [r0], #1
   2dfcc:	3a30      	subs	r2, #48	; 0x30
   2dfce:	2a09      	cmp	r2, #9
   2dfd0:	d903      	bls.n	2dfda <_svfiprintf_r+0x1a6>
   2dfd2:	2b00      	cmp	r3, #0
   2dfd4:	d0c6      	beq.n	2df64 <_svfiprintf_r+0x130>
   2dfd6:	9105      	str	r1, [sp, #20]
   2dfd8:	e7c4      	b.n	2df64 <_svfiprintf_r+0x130>
   2dfda:	fb0c 2101 	mla	r1, ip, r1, r2
   2dfde:	4604      	mov	r4, r0
   2dfe0:	2301      	movs	r3, #1
   2dfe2:	e7f0      	b.n	2dfc6 <_svfiprintf_r+0x192>
   2dfe4:	ab03      	add	r3, sp, #12
   2dfe6:	462a      	mov	r2, r5
   2dfe8:	a904      	add	r1, sp, #16
   2dfea:	4638      	mov	r0, r7
   2dfec:	9300      	str	r3, [sp, #0]
   2dfee:	4b0e      	ldr	r3, [pc, #56]	; (2e028 <_svfiprintf_r+0x1f4>)
   2dff0:	f7fe fb40 	bl	2c674 <_printf_float>
   2dff4:	1c42      	adds	r2, r0, #1
   2dff6:	4606      	mov	r6, r0
   2dff8:	d1d6      	bne.n	2dfa8 <_svfiprintf_r+0x174>
   2dffa:	89ab      	ldrh	r3, [r5, #12]
   2dffc:	065b      	lsls	r3, r3, #25
   2dffe:	f53f af2d 	bmi.w	2de5c <_svfiprintf_r+0x28>
   2e002:	9809      	ldr	r0, [sp, #36]	; 0x24
   2e004:	e72c      	b.n	2de60 <_svfiprintf_r+0x2c>
   2e006:	ab03      	add	r3, sp, #12
   2e008:	462a      	mov	r2, r5
   2e00a:	a904      	add	r1, sp, #16
   2e00c:	4638      	mov	r0, r7
   2e00e:	9300      	str	r3, [sp, #0]
   2e010:	4b05      	ldr	r3, [pc, #20]	; (2e028 <_svfiprintf_r+0x1f4>)
   2e012:	f7fe fd65 	bl	2cae0 <_printf_i>
   2e016:	e7ed      	b.n	2dff4 <_svfiprintf_r+0x1c0>
   2e018:	000421d0 	.word	0x000421d0
   2e01c:	000421d6 	.word	0x000421d6
   2e020:	000421da 	.word	0x000421da
   2e024:	0002c675 	.word	0x0002c675
   2e028:	00036f2d 	.word	0x00036f2d

0002e02c <__ssvfiscanf_r>:
   2e02c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2e030:	460c      	mov	r4, r1
   2e032:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
   2e036:	2100      	movs	r1, #0
   2e038:	4606      	mov	r6, r0
   2e03a:	f10d 0804 	add.w	r8, sp, #4
   2e03e:	4fa7      	ldr	r7, [pc, #668]	; (2e2dc <__ssvfiscanf_r+0x2b0>)
   2e040:	9300      	str	r3, [sp, #0]
   2e042:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
   2e046:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
   2e04a:	49a5      	ldr	r1, [pc, #660]	; (2e2e0 <__ssvfiscanf_r+0x2b4>)
   2e04c:	91a0      	str	r1, [sp, #640]	; 0x280
   2e04e:	49a5      	ldr	r1, [pc, #660]	; (2e2e4 <__ssvfiscanf_r+0x2b8>)
   2e050:	91a1      	str	r1, [sp, #644]	; 0x284
   2e052:	7813      	ldrb	r3, [r2, #0]
   2e054:	2b00      	cmp	r3, #0
   2e056:	f000 815c 	beq.w	2e312 <__ssvfiscanf_r+0x2e6>
   2e05a:	5cf9      	ldrb	r1, [r7, r3]
   2e05c:	1c55      	adds	r5, r2, #1
   2e05e:	f011 0108 	ands.w	r1, r1, #8
   2e062:	d019      	beq.n	2e098 <__ssvfiscanf_r+0x6c>
   2e064:	6863      	ldr	r3, [r4, #4]
   2e066:	2b00      	cmp	r3, #0
   2e068:	dd0f      	ble.n	2e08a <__ssvfiscanf_r+0x5e>
   2e06a:	6823      	ldr	r3, [r4, #0]
   2e06c:	781a      	ldrb	r2, [r3, #0]
   2e06e:	5cba      	ldrb	r2, [r7, r2]
   2e070:	0712      	lsls	r2, r2, #28
   2e072:	d401      	bmi.n	2e078 <__ssvfiscanf_r+0x4c>
   2e074:	462a      	mov	r2, r5
   2e076:	e7ec      	b.n	2e052 <__ssvfiscanf_r+0x26>
   2e078:	9a45      	ldr	r2, [sp, #276]	; 0x114
   2e07a:	3301      	adds	r3, #1
   2e07c:	3201      	adds	r2, #1
   2e07e:	6023      	str	r3, [r4, #0]
   2e080:	9245      	str	r2, [sp, #276]	; 0x114
   2e082:	6862      	ldr	r2, [r4, #4]
   2e084:	3a01      	subs	r2, #1
   2e086:	6062      	str	r2, [r4, #4]
   2e088:	e7ec      	b.n	2e064 <__ssvfiscanf_r+0x38>
   2e08a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   2e08c:	4621      	mov	r1, r4
   2e08e:	4630      	mov	r0, r6
   2e090:	4798      	blx	r3
   2e092:	2800      	cmp	r0, #0
   2e094:	d0e9      	beq.n	2e06a <__ssvfiscanf_r+0x3e>
   2e096:	e7ed      	b.n	2e074 <__ssvfiscanf_r+0x48>
   2e098:	2b25      	cmp	r3, #37	; 0x25
   2e09a:	d012      	beq.n	2e0c2 <__ssvfiscanf_r+0x96>
   2e09c:	4699      	mov	r9, r3
   2e09e:	6863      	ldr	r3, [r4, #4]
   2e0a0:	2b00      	cmp	r3, #0
   2e0a2:	f340 8094 	ble.w	2e1ce <__ssvfiscanf_r+0x1a2>
   2e0a6:	6822      	ldr	r2, [r4, #0]
   2e0a8:	7813      	ldrb	r3, [r2, #0]
   2e0aa:	454b      	cmp	r3, r9
   2e0ac:	f040 8131 	bne.w	2e312 <__ssvfiscanf_r+0x2e6>
   2e0b0:	6863      	ldr	r3, [r4, #4]
   2e0b2:	3201      	adds	r2, #1
   2e0b4:	3b01      	subs	r3, #1
   2e0b6:	6022      	str	r2, [r4, #0]
   2e0b8:	6063      	str	r3, [r4, #4]
   2e0ba:	9b45      	ldr	r3, [sp, #276]	; 0x114
   2e0bc:	3301      	adds	r3, #1
   2e0be:	9345      	str	r3, [sp, #276]	; 0x114
   2e0c0:	e7d8      	b.n	2e074 <__ssvfiscanf_r+0x48>
   2e0c2:	9141      	str	r1, [sp, #260]	; 0x104
   2e0c4:	9143      	str	r1, [sp, #268]	; 0x10c
   2e0c6:	7853      	ldrb	r3, [r2, #1]
   2e0c8:	2b2a      	cmp	r3, #42	; 0x2a
   2e0ca:	bf04      	itt	eq
   2e0cc:	2310      	moveq	r3, #16
   2e0ce:	1c95      	addeq	r5, r2, #2
   2e0d0:	f04f 020a 	mov.w	r2, #10
   2e0d4:	bf08      	it	eq
   2e0d6:	9341      	streq	r3, [sp, #260]	; 0x104
   2e0d8:	46a9      	mov	r9, r5
   2e0da:	f819 1b01 	ldrb.w	r1, [r9], #1
   2e0de:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   2e0e2:	2b09      	cmp	r3, #9
   2e0e4:	d91e      	bls.n	2e124 <__ssvfiscanf_r+0xf8>
   2e0e6:	f8df a200 	ldr.w	sl, [pc, #512]	; 2e2e8 <__ssvfiscanf_r+0x2bc>
   2e0ea:	2203      	movs	r2, #3
   2e0ec:	4650      	mov	r0, sl
   2e0ee:	f008 f9fd 	bl	364ec <memchr>
   2e0f2:	b138      	cbz	r0, 2e104 <__ssvfiscanf_r+0xd8>
   2e0f4:	eba0 000a 	sub.w	r0, r0, sl
   2e0f8:	2301      	movs	r3, #1
   2e0fa:	9a41      	ldr	r2, [sp, #260]	; 0x104
   2e0fc:	464d      	mov	r5, r9
   2e0fe:	4083      	lsls	r3, r0
   2e100:	4313      	orrs	r3, r2
   2e102:	9341      	str	r3, [sp, #260]	; 0x104
   2e104:	f815 3b01 	ldrb.w	r3, [r5], #1
   2e108:	2b78      	cmp	r3, #120	; 0x78
   2e10a:	d806      	bhi.n	2e11a <__ssvfiscanf_r+0xee>
   2e10c:	2b57      	cmp	r3, #87	; 0x57
   2e10e:	d810      	bhi.n	2e132 <__ssvfiscanf_r+0x106>
   2e110:	2b25      	cmp	r3, #37	; 0x25
   2e112:	d0c3      	beq.n	2e09c <__ssvfiscanf_r+0x70>
   2e114:	d856      	bhi.n	2e1c4 <__ssvfiscanf_r+0x198>
   2e116:	2b00      	cmp	r3, #0
   2e118:	d064      	beq.n	2e1e4 <__ssvfiscanf_r+0x1b8>
   2e11a:	2303      	movs	r3, #3
   2e11c:	9347      	str	r3, [sp, #284]	; 0x11c
   2e11e:	230a      	movs	r3, #10
   2e120:	9342      	str	r3, [sp, #264]	; 0x108
   2e122:	e06a      	b.n	2e1fa <__ssvfiscanf_r+0x1ce>
   2e124:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   2e126:	464d      	mov	r5, r9
   2e128:	fb02 1103 	mla	r1, r2, r3, r1
   2e12c:	3930      	subs	r1, #48	; 0x30
   2e12e:	9143      	str	r1, [sp, #268]	; 0x10c
   2e130:	e7d2      	b.n	2e0d8 <__ssvfiscanf_r+0xac>
   2e132:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
   2e136:	2a20      	cmp	r2, #32
   2e138:	d8ef      	bhi.n	2e11a <__ssvfiscanf_r+0xee>
   2e13a:	a101      	add	r1, pc, #4	; (adr r1, 2e140 <__ssvfiscanf_r+0x114>)
   2e13c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   2e140:	0002e22f 	.word	0x0002e22f
   2e144:	0002e11b 	.word	0x0002e11b
   2e148:	0002e11b 	.word	0x0002e11b
   2e14c:	0002e251 	.word	0x0002e251
   2e150:	0002e11b 	.word	0x0002e11b
   2e154:	0002e11b 	.word	0x0002e11b
   2e158:	0002e11b 	.word	0x0002e11b
   2e15c:	0002e11b 	.word	0x0002e11b
   2e160:	0002e11b 	.word	0x0002e11b
   2e164:	0002e11b 	.word	0x0002e11b
   2e168:	0002e11b 	.word	0x0002e11b
   2e16c:	0002e267 	.word	0x0002e267
   2e170:	0002e24d 	.word	0x0002e24d
   2e174:	0002e1cb 	.word	0x0002e1cb
   2e178:	0002e1cb 	.word	0x0002e1cb
   2e17c:	0002e1cb 	.word	0x0002e1cb
   2e180:	0002e11b 	.word	0x0002e11b
   2e184:	0002e241 	.word	0x0002e241
   2e188:	0002e11b 	.word	0x0002e11b
   2e18c:	0002e11b 	.word	0x0002e11b
   2e190:	0002e11b 	.word	0x0002e11b
   2e194:	0002e11b 	.word	0x0002e11b
   2e198:	0002e277 	.word	0x0002e277
   2e19c:	0002e249 	.word	0x0002e249
   2e1a0:	0002e1eb 	.word	0x0002e1eb
   2e1a4:	0002e11b 	.word	0x0002e11b
   2e1a8:	0002e11b 	.word	0x0002e11b
   2e1ac:	0002e273 	.word	0x0002e273
   2e1b0:	0002e11b 	.word	0x0002e11b
   2e1b4:	0002e24d 	.word	0x0002e24d
   2e1b8:	0002e11b 	.word	0x0002e11b
   2e1bc:	0002e11b 	.word	0x0002e11b
   2e1c0:	0002e22f 	.word	0x0002e22f
   2e1c4:	3b45      	subs	r3, #69	; 0x45
   2e1c6:	2b02      	cmp	r3, #2
   2e1c8:	d8a7      	bhi.n	2e11a <__ssvfiscanf_r+0xee>
   2e1ca:	2305      	movs	r3, #5
   2e1cc:	e014      	b.n	2e1f8 <__ssvfiscanf_r+0x1cc>
   2e1ce:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   2e1d0:	4621      	mov	r1, r4
   2e1d2:	4630      	mov	r0, r6
   2e1d4:	4798      	blx	r3
   2e1d6:	2800      	cmp	r0, #0
   2e1d8:	f43f af65 	beq.w	2e0a6 <__ssvfiscanf_r+0x7a>
   2e1dc:	9844      	ldr	r0, [sp, #272]	; 0x110
   2e1de:	2800      	cmp	r0, #0
   2e1e0:	f040 808f 	bne.w	2e302 <__ssvfiscanf_r+0x2d6>
   2e1e4:	f04f 30ff 	mov.w	r0, #4294967295
   2e1e8:	e08f      	b.n	2e30a <__ssvfiscanf_r+0x2de>
   2e1ea:	9b41      	ldr	r3, [sp, #260]	; 0x104
   2e1ec:	f443 7308 	orr.w	r3, r3, #544	; 0x220
   2e1f0:	9341      	str	r3, [sp, #260]	; 0x104
   2e1f2:	2310      	movs	r3, #16
   2e1f4:	9342      	str	r3, [sp, #264]	; 0x108
   2e1f6:	2304      	movs	r3, #4
   2e1f8:	9347      	str	r3, [sp, #284]	; 0x11c
   2e1fa:	6863      	ldr	r3, [r4, #4]
   2e1fc:	2b00      	cmp	r3, #0
   2e1fe:	dd4a      	ble.n	2e296 <__ssvfiscanf_r+0x26a>
   2e200:	9b41      	ldr	r3, [sp, #260]	; 0x104
   2e202:	0659      	lsls	r1, r3, #25
   2e204:	d404      	bmi.n	2e210 <__ssvfiscanf_r+0x1e4>
   2e206:	6823      	ldr	r3, [r4, #0]
   2e208:	781a      	ldrb	r2, [r3, #0]
   2e20a:	5cba      	ldrb	r2, [r7, r2]
   2e20c:	0712      	lsls	r2, r2, #28
   2e20e:	d449      	bmi.n	2e2a4 <__ssvfiscanf_r+0x278>
   2e210:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   2e212:	2b02      	cmp	r3, #2
   2e214:	dc58      	bgt.n	2e2c8 <__ssvfiscanf_r+0x29c>
   2e216:	466b      	mov	r3, sp
   2e218:	4622      	mov	r2, r4
   2e21a:	a941      	add	r1, sp, #260	; 0x104
   2e21c:	4630      	mov	r0, r6
   2e21e:	f000 f87d 	bl	2e31c <_scanf_chars>
   2e222:	2801      	cmp	r0, #1
   2e224:	d075      	beq.n	2e312 <__ssvfiscanf_r+0x2e6>
   2e226:	2802      	cmp	r0, #2
   2e228:	f47f af24 	bne.w	2e074 <__ssvfiscanf_r+0x48>
   2e22c:	e7d6      	b.n	2e1dc <__ssvfiscanf_r+0x1b0>
   2e22e:	9a41      	ldr	r2, [sp, #260]	; 0x104
   2e230:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   2e234:	9241      	str	r2, [sp, #260]	; 0x104
   2e236:	2210      	movs	r2, #16
   2e238:	2b6e      	cmp	r3, #110	; 0x6e
   2e23a:	9242      	str	r2, [sp, #264]	; 0x108
   2e23c:	d902      	bls.n	2e244 <__ssvfiscanf_r+0x218>
   2e23e:	e7da      	b.n	2e1f6 <__ssvfiscanf_r+0x1ca>
   2e240:	2300      	movs	r3, #0
   2e242:	9342      	str	r3, [sp, #264]	; 0x108
   2e244:	2303      	movs	r3, #3
   2e246:	e7d7      	b.n	2e1f8 <__ssvfiscanf_r+0x1cc>
   2e248:	2308      	movs	r3, #8
   2e24a:	e7d3      	b.n	2e1f4 <__ssvfiscanf_r+0x1c8>
   2e24c:	220a      	movs	r2, #10
   2e24e:	e7f3      	b.n	2e238 <__ssvfiscanf_r+0x20c>
   2e250:	4629      	mov	r1, r5
   2e252:	4640      	mov	r0, r8
   2e254:	f008 ff1d 	bl	37092 <__sccl>
   2e258:	9b41      	ldr	r3, [sp, #260]	; 0x104
   2e25a:	4605      	mov	r5, r0
   2e25c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2e260:	9341      	str	r3, [sp, #260]	; 0x104
   2e262:	2301      	movs	r3, #1
   2e264:	e7c8      	b.n	2e1f8 <__ssvfiscanf_r+0x1cc>
   2e266:	9b41      	ldr	r3, [sp, #260]	; 0x104
   2e268:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2e26c:	9341      	str	r3, [sp, #260]	; 0x104
   2e26e:	2300      	movs	r3, #0
   2e270:	e7c2      	b.n	2e1f8 <__ssvfiscanf_r+0x1cc>
   2e272:	2302      	movs	r3, #2
   2e274:	e7c0      	b.n	2e1f8 <__ssvfiscanf_r+0x1cc>
   2e276:	9841      	ldr	r0, [sp, #260]	; 0x104
   2e278:	06c3      	lsls	r3, r0, #27
   2e27a:	f53f aefb 	bmi.w	2e074 <__ssvfiscanf_r+0x48>
   2e27e:	9b00      	ldr	r3, [sp, #0]
   2e280:	f010 0f01 	tst.w	r0, #1
   2e284:	9a45      	ldr	r2, [sp, #276]	; 0x114
   2e286:	f103 0104 	add.w	r1, r3, #4
   2e28a:	9100      	str	r1, [sp, #0]
   2e28c:	681b      	ldr	r3, [r3, #0]
   2e28e:	bf14      	ite	ne
   2e290:	801a      	strhne	r2, [r3, #0]
   2e292:	601a      	streq	r2, [r3, #0]
   2e294:	e6ee      	b.n	2e074 <__ssvfiscanf_r+0x48>
   2e296:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   2e298:	4621      	mov	r1, r4
   2e29a:	4630      	mov	r0, r6
   2e29c:	4798      	blx	r3
   2e29e:	2800      	cmp	r0, #0
   2e2a0:	d0ae      	beq.n	2e200 <__ssvfiscanf_r+0x1d4>
   2e2a2:	e79b      	b.n	2e1dc <__ssvfiscanf_r+0x1b0>
   2e2a4:	9a45      	ldr	r2, [sp, #276]	; 0x114
   2e2a6:	3201      	adds	r2, #1
   2e2a8:	9245      	str	r2, [sp, #276]	; 0x114
   2e2aa:	6862      	ldr	r2, [r4, #4]
   2e2ac:	3a01      	subs	r2, #1
   2e2ae:	2a00      	cmp	r2, #0
   2e2b0:	6062      	str	r2, [r4, #4]
   2e2b2:	dd02      	ble.n	2e2ba <__ssvfiscanf_r+0x28e>
   2e2b4:	3301      	adds	r3, #1
   2e2b6:	6023      	str	r3, [r4, #0]
   2e2b8:	e7a5      	b.n	2e206 <__ssvfiscanf_r+0x1da>
   2e2ba:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   2e2bc:	4621      	mov	r1, r4
   2e2be:	4630      	mov	r0, r6
   2e2c0:	4798      	blx	r3
   2e2c2:	2800      	cmp	r0, #0
   2e2c4:	d09f      	beq.n	2e206 <__ssvfiscanf_r+0x1da>
   2e2c6:	e789      	b.n	2e1dc <__ssvfiscanf_r+0x1b0>
   2e2c8:	2b04      	cmp	r3, #4
   2e2ca:	dc0f      	bgt.n	2e2ec <__ssvfiscanf_r+0x2c0>
   2e2cc:	466b      	mov	r3, sp
   2e2ce:	4622      	mov	r2, r4
   2e2d0:	a941      	add	r1, sp, #260	; 0x104
   2e2d2:	4630      	mov	r0, r6
   2e2d4:	f000 f87c 	bl	2e3d0 <_scanf_i>
   2e2d8:	e7a3      	b.n	2e222 <__ssvfiscanf_r+0x1f6>
   2e2da:	bf00      	nop
   2e2dc:	00041f02 	.word	0x00041f02
   2e2e0:	00036fe3 	.word	0x00036fe3
   2e2e4:	00037059 	.word	0x00037059
   2e2e8:	000421d6 	.word	0x000421d6
   2e2ec:	4b0a      	ldr	r3, [pc, #40]	; (2e318 <__ssvfiscanf_r+0x2ec>)
   2e2ee:	2b00      	cmp	r3, #0
   2e2f0:	f43f aec0 	beq.w	2e074 <__ssvfiscanf_r+0x48>
   2e2f4:	466b      	mov	r3, sp
   2e2f6:	4622      	mov	r2, r4
   2e2f8:	a941      	add	r1, sp, #260	; 0x104
   2e2fa:	4630      	mov	r0, r6
   2e2fc:	f3af 8000 	nop.w
   2e300:	e78f      	b.n	2e222 <__ssvfiscanf_r+0x1f6>
   2e302:	89a3      	ldrh	r3, [r4, #12]
   2e304:	065b      	lsls	r3, r3, #25
   2e306:	f53f af6d 	bmi.w	2e1e4 <__ssvfiscanf_r+0x1b8>
   2e30a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
   2e30e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2e312:	9844      	ldr	r0, [sp, #272]	; 0x110
   2e314:	e7f9      	b.n	2e30a <__ssvfiscanf_r+0x2de>
   2e316:	bf00      	nop
   2e318:	00000000 	.word	0x00000000

0002e31c <_scanf_chars>:
   2e31c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2e320:	4615      	mov	r5, r2
   2e322:	688a      	ldr	r2, [r1, #8]
   2e324:	4680      	mov	r8, r0
   2e326:	460c      	mov	r4, r1
   2e328:	b932      	cbnz	r2, 2e338 <_scanf_chars+0x1c>
   2e32a:	698a      	ldr	r2, [r1, #24]
   2e32c:	2a00      	cmp	r2, #0
   2e32e:	bf14      	ite	ne
   2e330:	f04f 32ff 	movne.w	r2, #4294967295
   2e334:	2201      	moveq	r2, #1
   2e336:	608a      	str	r2, [r1, #8]
   2e338:	6822      	ldr	r2, [r4, #0]
   2e33a:	2700      	movs	r7, #0
   2e33c:	f8df 908c 	ldr.w	r9, [pc, #140]	; 2e3cc <_scanf_chars+0xb0>
   2e340:	06d1      	lsls	r1, r2, #27
   2e342:	bf5f      	itttt	pl
   2e344:	681a      	ldrpl	r2, [r3, #0]
   2e346:	1d11      	addpl	r1, r2, #4
   2e348:	6019      	strpl	r1, [r3, #0]
   2e34a:	6816      	ldrpl	r6, [r2, #0]
   2e34c:	69a0      	ldr	r0, [r4, #24]
   2e34e:	b188      	cbz	r0, 2e374 <_scanf_chars+0x58>
   2e350:	2801      	cmp	r0, #1
   2e352:	d107      	bne.n	2e364 <_scanf_chars+0x48>
   2e354:	682b      	ldr	r3, [r5, #0]
   2e356:	781a      	ldrb	r2, [r3, #0]
   2e358:	6963      	ldr	r3, [r4, #20]
   2e35a:	5c9b      	ldrb	r3, [r3, r2]
   2e35c:	b953      	cbnz	r3, 2e374 <_scanf_chars+0x58>
   2e35e:	2f00      	cmp	r7, #0
   2e360:	d031      	beq.n	2e3c6 <_scanf_chars+0xaa>
   2e362:	e022      	b.n	2e3aa <_scanf_chars+0x8e>
   2e364:	2802      	cmp	r0, #2
   2e366:	d120      	bne.n	2e3aa <_scanf_chars+0x8e>
   2e368:	682b      	ldr	r3, [r5, #0]
   2e36a:	781b      	ldrb	r3, [r3, #0]
   2e36c:	f819 3003 	ldrb.w	r3, [r9, r3]
   2e370:	071b      	lsls	r3, r3, #28
   2e372:	d41a      	bmi.n	2e3aa <_scanf_chars+0x8e>
   2e374:	6823      	ldr	r3, [r4, #0]
   2e376:	3701      	adds	r7, #1
   2e378:	06da      	lsls	r2, r3, #27
   2e37a:	bf5e      	ittt	pl
   2e37c:	682b      	ldrpl	r3, [r5, #0]
   2e37e:	781b      	ldrbpl	r3, [r3, #0]
   2e380:	f806 3b01 	strbpl.w	r3, [r6], #1
   2e384:	682a      	ldr	r2, [r5, #0]
   2e386:	686b      	ldr	r3, [r5, #4]
   2e388:	3201      	adds	r2, #1
   2e38a:	3b01      	subs	r3, #1
   2e38c:	602a      	str	r2, [r5, #0]
   2e38e:	68a2      	ldr	r2, [r4, #8]
   2e390:	606b      	str	r3, [r5, #4]
   2e392:	3a01      	subs	r2, #1
   2e394:	60a2      	str	r2, [r4, #8]
   2e396:	b142      	cbz	r2, 2e3aa <_scanf_chars+0x8e>
   2e398:	2b00      	cmp	r3, #0
   2e39a:	dcd7      	bgt.n	2e34c <_scanf_chars+0x30>
   2e39c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   2e3a0:	4629      	mov	r1, r5
   2e3a2:	4640      	mov	r0, r8
   2e3a4:	4798      	blx	r3
   2e3a6:	2800      	cmp	r0, #0
   2e3a8:	d0d0      	beq.n	2e34c <_scanf_chars+0x30>
   2e3aa:	6823      	ldr	r3, [r4, #0]
   2e3ac:	f013 0310 	ands.w	r3, r3, #16
   2e3b0:	d105      	bne.n	2e3be <_scanf_chars+0xa2>
   2e3b2:	68e2      	ldr	r2, [r4, #12]
   2e3b4:	3201      	adds	r2, #1
   2e3b6:	60e2      	str	r2, [r4, #12]
   2e3b8:	69a2      	ldr	r2, [r4, #24]
   2e3ba:	b102      	cbz	r2, 2e3be <_scanf_chars+0xa2>
   2e3bc:	7033      	strb	r3, [r6, #0]
   2e3be:	6923      	ldr	r3, [r4, #16]
   2e3c0:	2000      	movs	r0, #0
   2e3c2:	443b      	add	r3, r7
   2e3c4:	6123      	str	r3, [r4, #16]
   2e3c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2e3ca:	bf00      	nop
   2e3cc:	00041f02 	.word	0x00041f02

0002e3d0 <_scanf_i>:
   2e3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e3d4:	4698      	mov	r8, r3
   2e3d6:	b087      	sub	sp, #28
   2e3d8:	4b78      	ldr	r3, [pc, #480]	; (2e5bc <_scanf_i+0x1ec>)
   2e3da:	460c      	mov	r4, r1
   2e3dc:	4682      	mov	sl, r0
   2e3de:	4616      	mov	r6, r2
   2e3e0:	4627      	mov	r7, r4
   2e3e2:	f04f 0b00 	mov.w	fp, #0
   2e3e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   2e3ea:	ab03      	add	r3, sp, #12
   2e3ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   2e3f0:	4b73      	ldr	r3, [pc, #460]	; (2e5c0 <_scanf_i+0x1f0>)
   2e3f2:	69a1      	ldr	r1, [r4, #24]
   2e3f4:	4a73      	ldr	r2, [pc, #460]	; (2e5c4 <_scanf_i+0x1f4>)
   2e3f6:	2903      	cmp	r1, #3
   2e3f8:	bf08      	it	eq
   2e3fa:	461a      	moveq	r2, r3
   2e3fc:	68a3      	ldr	r3, [r4, #8]
   2e3fe:	9201      	str	r2, [sp, #4]
   2e400:	1e5a      	subs	r2, r3, #1
   2e402:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
   2e406:	bf89      	itett	hi
   2e408:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
   2e40c:	f04f 0900 	movls.w	r9, #0
   2e410:	eb03 0905 	addhi.w	r9, r3, r5
   2e414:	f240 135d 	movwhi	r3, #349	; 0x15d
   2e418:	bf88      	it	hi
   2e41a:	60a3      	strhi	r3, [r4, #8]
   2e41c:	f857 3b1c 	ldr.w	r3, [r7], #28
   2e420:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
   2e424:	463d      	mov	r5, r7
   2e426:	6023      	str	r3, [r4, #0]
   2e428:	6831      	ldr	r1, [r6, #0]
   2e42a:	ab03      	add	r3, sp, #12
   2e42c:	2202      	movs	r2, #2
   2e42e:	7809      	ldrb	r1, [r1, #0]
   2e430:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
   2e434:	f008 f85a 	bl	364ec <memchr>
   2e438:	2800      	cmp	r0, #0
   2e43a:	d040      	beq.n	2e4be <_scanf_i+0xee>
   2e43c:	f1bb 0f01 	cmp.w	fp, #1
   2e440:	d112      	bne.n	2e468 <_scanf_i+0x98>
   2e442:	6862      	ldr	r2, [r4, #4]
   2e444:	b92a      	cbnz	r2, 2e452 <_scanf_i+0x82>
   2e446:	6822      	ldr	r2, [r4, #0]
   2e448:	2108      	movs	r1, #8
   2e44a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   2e44e:	6061      	str	r1, [r4, #4]
   2e450:	6022      	str	r2, [r4, #0]
   2e452:	6822      	ldr	r2, [r4, #0]
   2e454:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
   2e458:	6022      	str	r2, [r4, #0]
   2e45a:	68a2      	ldr	r2, [r4, #8]
   2e45c:	1e51      	subs	r1, r2, #1
   2e45e:	60a1      	str	r1, [r4, #8]
   2e460:	b9da      	cbnz	r2, 2e49a <_scanf_i+0xca>
   2e462:	f04f 0b02 	mov.w	fp, #2
   2e466:	e7df      	b.n	2e428 <_scanf_i+0x58>
   2e468:	f1bb 0f02 	cmp.w	fp, #2
   2e46c:	d006      	beq.n	2e47c <_scanf_i+0xac>
   2e46e:	68a2      	ldr	r2, [r4, #8]
   2e470:	1e51      	subs	r1, r2, #1
   2e472:	60a1      	str	r1, [r4, #8]
   2e474:	b98a      	cbnz	r2, 2e49a <_scanf_i+0xca>
   2e476:	f04f 0b01 	mov.w	fp, #1
   2e47a:	e7d5      	b.n	2e428 <_scanf_i+0x58>
   2e47c:	6822      	ldr	r2, [r4, #0]
   2e47e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
   2e482:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   2e486:	d11f      	bne.n	2e4c8 <_scanf_i+0xf8>
   2e488:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   2e48c:	2110      	movs	r1, #16
   2e48e:	6022      	str	r2, [r4, #0]
   2e490:	68a2      	ldr	r2, [r4, #8]
   2e492:	6061      	str	r1, [r4, #4]
   2e494:	1e51      	subs	r1, r2, #1
   2e496:	60a1      	str	r1, [r4, #8]
   2e498:	b1b2      	cbz	r2, 2e4c8 <_scanf_i+0xf8>
   2e49a:	6832      	ldr	r2, [r6, #0]
   2e49c:	1c51      	adds	r1, r2, #1
   2e49e:	6031      	str	r1, [r6, #0]
   2e4a0:	7812      	ldrb	r2, [r2, #0]
   2e4a2:	f805 2b01 	strb.w	r2, [r5], #1
   2e4a6:	6872      	ldr	r2, [r6, #4]
   2e4a8:	3a01      	subs	r2, #1
   2e4aa:	2a00      	cmp	r2, #0
   2e4ac:	6072      	str	r2, [r6, #4]
   2e4ae:	dc06      	bgt.n	2e4be <_scanf_i+0xee>
   2e4b0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
   2e4b4:	4631      	mov	r1, r6
   2e4b6:	4650      	mov	r0, sl
   2e4b8:	4790      	blx	r2
   2e4ba:	2800      	cmp	r0, #0
   2e4bc:	d174      	bne.n	2e5a8 <_scanf_i+0x1d8>
   2e4be:	f10b 0b01 	add.w	fp, fp, #1
   2e4c2:	f1bb 0f03 	cmp.w	fp, #3
   2e4c6:	d1af      	bne.n	2e428 <_scanf_i+0x58>
   2e4c8:	6863      	ldr	r3, [r4, #4]
   2e4ca:	b90b      	cbnz	r3, 2e4d0 <_scanf_i+0x100>
   2e4cc:	230a      	movs	r3, #10
   2e4ce:	6063      	str	r3, [r4, #4]
   2e4d0:	6863      	ldr	r3, [r4, #4]
   2e4d2:	f04f 0b00 	mov.w	fp, #0
   2e4d6:	493c      	ldr	r1, [pc, #240]	; (2e5c8 <_scanf_i+0x1f8>)
   2e4d8:	6960      	ldr	r0, [r4, #20]
   2e4da:	1ac9      	subs	r1, r1, r3
   2e4dc:	f008 fdd9 	bl	37092 <__sccl>
   2e4e0:	68a3      	ldr	r3, [r4, #8]
   2e4e2:	6822      	ldr	r2, [r4, #0]
   2e4e4:	b373      	cbz	r3, 2e544 <_scanf_i+0x174>
   2e4e6:	6831      	ldr	r1, [r6, #0]
   2e4e8:	6960      	ldr	r0, [r4, #20]
   2e4ea:	f891 c000 	ldrb.w	ip, [r1]
   2e4ee:	f810 000c 	ldrb.w	r0, [r0, ip]
   2e4f2:	b338      	cbz	r0, 2e544 <_scanf_i+0x174>
   2e4f4:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
   2e4f8:	d116      	bne.n	2e528 <_scanf_i+0x158>
   2e4fa:	0510      	lsls	r0, r2, #20
   2e4fc:	d514      	bpl.n	2e528 <_scanf_i+0x158>
   2e4fe:	f10b 0b01 	add.w	fp, fp, #1
   2e502:	f1b9 0f00 	cmp.w	r9, #0
   2e506:	d003      	beq.n	2e510 <_scanf_i+0x140>
   2e508:	3301      	adds	r3, #1
   2e50a:	f109 39ff 	add.w	r9, r9, #4294967295
   2e50e:	60a3      	str	r3, [r4, #8]
   2e510:	6873      	ldr	r3, [r6, #4]
   2e512:	3b01      	subs	r3, #1
   2e514:	2b00      	cmp	r3, #0
   2e516:	6073      	str	r3, [r6, #4]
   2e518:	dd0d      	ble.n	2e536 <_scanf_i+0x166>
   2e51a:	6833      	ldr	r3, [r6, #0]
   2e51c:	3301      	adds	r3, #1
   2e51e:	6033      	str	r3, [r6, #0]
   2e520:	68a3      	ldr	r3, [r4, #8]
   2e522:	3b01      	subs	r3, #1
   2e524:	60a3      	str	r3, [r4, #8]
   2e526:	e7db      	b.n	2e4e0 <_scanf_i+0x110>
   2e528:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
   2e52c:	6022      	str	r2, [r4, #0]
   2e52e:	780b      	ldrb	r3, [r1, #0]
   2e530:	f805 3b01 	strb.w	r3, [r5], #1
   2e534:	e7ec      	b.n	2e510 <_scanf_i+0x140>
   2e536:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   2e53a:	4631      	mov	r1, r6
   2e53c:	4650      	mov	r0, sl
   2e53e:	4798      	blx	r3
   2e540:	2800      	cmp	r0, #0
   2e542:	d0ed      	beq.n	2e520 <_scanf_i+0x150>
   2e544:	6823      	ldr	r3, [r4, #0]
   2e546:	05d9      	lsls	r1, r3, #23
   2e548:	d50d      	bpl.n	2e566 <_scanf_i+0x196>
   2e54a:	42bd      	cmp	r5, r7
   2e54c:	d909      	bls.n	2e562 <_scanf_i+0x192>
   2e54e:	f105 39ff 	add.w	r9, r5, #4294967295
   2e552:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   2e556:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
   2e55a:	4632      	mov	r2, r6
   2e55c:	464d      	mov	r5, r9
   2e55e:	4650      	mov	r0, sl
   2e560:	4798      	blx	r3
   2e562:	42bd      	cmp	r5, r7
   2e564:	d028      	beq.n	2e5b8 <_scanf_i+0x1e8>
   2e566:	6822      	ldr	r2, [r4, #0]
   2e568:	f012 0210 	ands.w	r2, r2, #16
   2e56c:	d113      	bne.n	2e596 <_scanf_i+0x1c6>
   2e56e:	702a      	strb	r2, [r5, #0]
   2e570:	4639      	mov	r1, r7
   2e572:	6863      	ldr	r3, [r4, #4]
   2e574:	4650      	mov	r0, sl
   2e576:	9e01      	ldr	r6, [sp, #4]
   2e578:	47b0      	blx	r6
   2e57a:	f8d8 3000 	ldr.w	r3, [r8]
   2e57e:	6821      	ldr	r1, [r4, #0]
   2e580:	1d1a      	adds	r2, r3, #4
   2e582:	f011 0f20 	tst.w	r1, #32
   2e586:	f8c8 2000 	str.w	r2, [r8]
   2e58a:	681b      	ldr	r3, [r3, #0]
   2e58c:	d00f      	beq.n	2e5ae <_scanf_i+0x1de>
   2e58e:	6018      	str	r0, [r3, #0]
   2e590:	68e3      	ldr	r3, [r4, #12]
   2e592:	3301      	adds	r3, #1
   2e594:	60e3      	str	r3, [r4, #12]
   2e596:	1bed      	subs	r5, r5, r7
   2e598:	6923      	ldr	r3, [r4, #16]
   2e59a:	2000      	movs	r0, #0
   2e59c:	445d      	add	r5, fp
   2e59e:	442b      	add	r3, r5
   2e5a0:	6123      	str	r3, [r4, #16]
   2e5a2:	b007      	add	sp, #28
   2e5a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e5a8:	f04f 0b00 	mov.w	fp, #0
   2e5ac:	e7ca      	b.n	2e544 <_scanf_i+0x174>
   2e5ae:	07ca      	lsls	r2, r1, #31
   2e5b0:	bf4c      	ite	mi
   2e5b2:	8018      	strhmi	r0, [r3, #0]
   2e5b4:	6018      	strpl	r0, [r3, #0]
   2e5b6:	e7eb      	b.n	2e590 <_scanf_i+0x1c0>
   2e5b8:	2001      	movs	r0, #1
   2e5ba:	e7f2      	b.n	2e5a2 <_scanf_i+0x1d2>
   2e5bc:	00037bb0 	.word	0x00037bb0
   2e5c0:	00036921 	.word	0x00036921
   2e5c4:	00036925 	.word	0x00036925
   2e5c8:	000421f1 	.word	0x000421f1

0002e5cc <_read_r>:
   2e5cc:	b538      	push	{r3, r4, r5, lr}
   2e5ce:	4604      	mov	r4, r0
   2e5d0:	4d06      	ldr	r5, [pc, #24]	; (2e5ec <_read_r+0x20>)
   2e5d2:	4608      	mov	r0, r1
   2e5d4:	4611      	mov	r1, r2
   2e5d6:	2200      	movs	r2, #0
   2e5d8:	602a      	str	r2, [r5, #0]
   2e5da:	461a      	mov	r2, r3
   2e5dc:	f002 fb8b 	bl	30cf6 <_read>
   2e5e0:	1c43      	adds	r3, r0, #1
   2e5e2:	d102      	bne.n	2e5ea <_read_r+0x1e>
   2e5e4:	682b      	ldr	r3, [r5, #0]
   2e5e6:	b103      	cbz	r3, 2e5ea <_read_r+0x1e>
   2e5e8:	6023      	str	r3, [r4, #0]
   2e5ea:	bd38      	pop	{r3, r4, r5, pc}
   2e5ec:	2000ef4c 	.word	0x2000ef4c

0002e5f0 <nan>:
   2e5f0:	2000      	movs	r0, #0
   2e5f2:	4901      	ldr	r1, [pc, #4]	; (2e5f8 <nan+0x8>)
   2e5f4:	4770      	bx	lr
   2e5f6:	bf00      	nop
   2e5f8:	7ff80000 	.word	0x7ff80000

0002e5fc <__assert_func>:
   2e5fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2e5fe:	4614      	mov	r4, r2
   2e600:	461a      	mov	r2, r3
   2e602:	4b09      	ldr	r3, [pc, #36]	; (2e628 <__assert_func+0x2c>)
   2e604:	4605      	mov	r5, r0
   2e606:	681b      	ldr	r3, [r3, #0]
   2e608:	68d8      	ldr	r0, [r3, #12]
   2e60a:	b954      	cbnz	r4, 2e622 <__assert_func+0x26>
   2e60c:	4b07      	ldr	r3, [pc, #28]	; (2e62c <__assert_func+0x30>)
   2e60e:	461c      	mov	r4, r3
   2e610:	9100      	str	r1, [sp, #0]
   2e612:	4907      	ldr	r1, [pc, #28]	; (2e630 <__assert_func+0x34>)
   2e614:	e9cd 3401 	strd	r3, r4, [sp, #4]
   2e618:	462b      	mov	r3, r5
   2e61a:	f000 f909 	bl	2e830 <fiprintf>
   2e61e:	f008 feb2 	bl	37386 <abort>
   2e622:	4b04      	ldr	r3, [pc, #16]	; (2e634 <__assert_func+0x38>)
   2e624:	e7f4      	b.n	2e610 <__assert_func+0x14>
   2e626:	bf00      	nop
   2e628:	2000ca9c 	.word	0x2000ca9c
   2e62c:	0003a4ea 	.word	0x0003a4ea
   2e630:	00042206 	.word	0x00042206
   2e634:	000421f9 	.word	0x000421f9

0002e638 <_fflush_r>:
   2e638:	b538      	push	{r3, r4, r5, lr}
   2e63a:	690b      	ldr	r3, [r1, #16]
   2e63c:	4605      	mov	r5, r0
   2e63e:	460c      	mov	r4, r1
   2e640:	b913      	cbnz	r3, 2e648 <_fflush_r+0x10>
   2e642:	2500      	movs	r5, #0
   2e644:	4628      	mov	r0, r5
   2e646:	bd38      	pop	{r3, r4, r5, pc}
   2e648:	b118      	cbz	r0, 2e652 <_fflush_r+0x1a>
   2e64a:	6983      	ldr	r3, [r0, #24]
   2e64c:	b90b      	cbnz	r3, 2e652 <_fflush_r+0x1a>
   2e64e:	f000 f871 	bl	2e734 <__sinit>
   2e652:	4b14      	ldr	r3, [pc, #80]	; (2e6a4 <_fflush_r+0x6c>)
   2e654:	429c      	cmp	r4, r3
   2e656:	d11b      	bne.n	2e690 <_fflush_r+0x58>
   2e658:	686c      	ldr	r4, [r5, #4]
   2e65a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2e65e:	2b00      	cmp	r3, #0
   2e660:	d0ef      	beq.n	2e642 <_fflush_r+0xa>
   2e662:	6e62      	ldr	r2, [r4, #100]	; 0x64
   2e664:	07d0      	lsls	r0, r2, #31
   2e666:	d404      	bmi.n	2e672 <_fflush_r+0x3a>
   2e668:	0599      	lsls	r1, r3, #22
   2e66a:	d402      	bmi.n	2e672 <_fflush_r+0x3a>
   2e66c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2e66e:	f7e4 ff65 	bl	1353c <__retarget_lock_acquire_recursive>
   2e672:	4628      	mov	r0, r5
   2e674:	4621      	mov	r1, r4
   2e676:	f008 fd89 	bl	3718c <__sflush_r>
   2e67a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2e67c:	4605      	mov	r5, r0
   2e67e:	07da      	lsls	r2, r3, #31
   2e680:	d4e0      	bmi.n	2e644 <_fflush_r+0xc>
   2e682:	89a3      	ldrh	r3, [r4, #12]
   2e684:	059b      	lsls	r3, r3, #22
   2e686:	d4dd      	bmi.n	2e644 <_fflush_r+0xc>
   2e688:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2e68a:	f7e4 ff73 	bl	13574 <__retarget_lock_release_recursive>
   2e68e:	e7d9      	b.n	2e644 <_fflush_r+0xc>
   2e690:	4b05      	ldr	r3, [pc, #20]	; (2e6a8 <_fflush_r+0x70>)
   2e692:	429c      	cmp	r4, r3
   2e694:	d101      	bne.n	2e69a <_fflush_r+0x62>
   2e696:	68ac      	ldr	r4, [r5, #8]
   2e698:	e7df      	b.n	2e65a <_fflush_r+0x22>
   2e69a:	4b04      	ldr	r3, [pc, #16]	; (2e6ac <_fflush_r+0x74>)
   2e69c:	429c      	cmp	r4, r3
   2e69e:	bf08      	it	eq
   2e6a0:	68ec      	ldreq	r4, [r5, #12]
   2e6a2:	e7da      	b.n	2e65a <_fflush_r+0x22>
   2e6a4:	00038abc 	.word	0x00038abc
   2e6a8:	00038a9c 	.word	0x00038a9c
   2e6ac:	00038a7c 	.word	0x00038a7c

0002e6b0 <std>:
   2e6b0:	2300      	movs	r3, #0
   2e6b2:	b510      	push	{r4, lr}
   2e6b4:	4604      	mov	r4, r0
   2e6b6:	6083      	str	r3, [r0, #8]
   2e6b8:	8181      	strh	r1, [r0, #12]
   2e6ba:	4619      	mov	r1, r3
   2e6bc:	6643      	str	r3, [r0, #100]	; 0x64
   2e6be:	81c2      	strh	r2, [r0, #14]
   2e6c0:	2208      	movs	r2, #8
   2e6c2:	6183      	str	r3, [r0, #24]
   2e6c4:	e9c0 3300 	strd	r3, r3, [r0]
   2e6c8:	e9c0 3304 	strd	r3, r3, [r0, #16]
   2e6cc:	305c      	adds	r0, #92	; 0x5c
   2e6ce:	f007 ff4b 	bl	36568 <memset>
   2e6d2:	4b05      	ldr	r3, [pc, #20]	; (2e6e8 <std+0x38>)
   2e6d4:	6224      	str	r4, [r4, #32]
   2e6d6:	6263      	str	r3, [r4, #36]	; 0x24
   2e6d8:	4b04      	ldr	r3, [pc, #16]	; (2e6ec <std+0x3c>)
   2e6da:	62a3      	str	r3, [r4, #40]	; 0x28
   2e6dc:	4b04      	ldr	r3, [pc, #16]	; (2e6f0 <std+0x40>)
   2e6de:	62e3      	str	r3, [r4, #44]	; 0x2c
   2e6e0:	4b04      	ldr	r3, [pc, #16]	; (2e6f4 <std+0x44>)
   2e6e2:	6323      	str	r3, [r4, #48]	; 0x30
   2e6e4:	bd10      	pop	{r4, pc}
   2e6e6:	bf00      	nop
   2e6e8:	0003679d 	.word	0x0003679d
   2e6ec:	000367c3 	.word	0x000367c3
   2e6f0:	000367fb 	.word	0x000367fb
   2e6f4:	0003681f 	.word	0x0003681f

0002e6f8 <_cleanup_r>:
   2e6f8:	4901      	ldr	r1, [pc, #4]	; (2e700 <_cleanup_r+0x8>)
   2e6fa:	f008 bddc 	b.w	372b6 <_fwalk_reent>
   2e6fe:	bf00      	nop
   2e700:	0002e639 	.word	0x0002e639

0002e704 <__sfp_lock_acquire>:
   2e704:	4801      	ldr	r0, [pc, #4]	; (2e70c <__sfp_lock_acquire+0x8>)
   2e706:	f7e4 bf19 	b.w	1353c <__retarget_lock_acquire_recursive>
   2e70a:	bf00      	nop
   2e70c:	2000ce4c 	.word	0x2000ce4c

0002e710 <__sfp_lock_release>:
   2e710:	4801      	ldr	r0, [pc, #4]	; (2e718 <__sfp_lock_release+0x8>)
   2e712:	f7e4 bf2f 	b.w	13574 <__retarget_lock_release_recursive>
   2e716:	bf00      	nop
   2e718:	2000ce4c 	.word	0x2000ce4c

0002e71c <__sinit_lock_acquire>:
   2e71c:	4801      	ldr	r0, [pc, #4]	; (2e724 <__sinit_lock_acquire+0x8>)
   2e71e:	f7e4 bf0d 	b.w	1353c <__retarget_lock_acquire_recursive>
   2e722:	bf00      	nop
   2e724:	2000ce60 	.word	0x2000ce60

0002e728 <__sinit_lock_release>:
   2e728:	4801      	ldr	r0, [pc, #4]	; (2e730 <__sinit_lock_release+0x8>)
   2e72a:	f7e4 bf23 	b.w	13574 <__retarget_lock_release_recursive>
   2e72e:	bf00      	nop
   2e730:	2000ce60 	.word	0x2000ce60

0002e734 <__sinit>:
   2e734:	b510      	push	{r4, lr}
   2e736:	4604      	mov	r4, r0
   2e738:	f7ff fff0 	bl	2e71c <__sinit_lock_acquire>
   2e73c:	69a3      	ldr	r3, [r4, #24]
   2e73e:	b11b      	cbz	r3, 2e748 <__sinit+0x14>
   2e740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2e744:	f7ff bff0 	b.w	2e728 <__sinit_lock_release>
   2e748:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   2e74c:	6523      	str	r3, [r4, #80]	; 0x50
   2e74e:	4620      	mov	r0, r4
   2e750:	4b12      	ldr	r3, [pc, #72]	; (2e79c <__sinit+0x68>)
   2e752:	4a13      	ldr	r2, [pc, #76]	; (2e7a0 <__sinit+0x6c>)
   2e754:	681b      	ldr	r3, [r3, #0]
   2e756:	62a2      	str	r2, [r4, #40]	; 0x28
   2e758:	42a3      	cmp	r3, r4
   2e75a:	bf04      	itt	eq
   2e75c:	2301      	moveq	r3, #1
   2e75e:	61a3      	streq	r3, [r4, #24]
   2e760:	f000 f820 	bl	2e7a4 <__sfp>
   2e764:	6060      	str	r0, [r4, #4]
   2e766:	4620      	mov	r0, r4
   2e768:	f000 f81c 	bl	2e7a4 <__sfp>
   2e76c:	60a0      	str	r0, [r4, #8]
   2e76e:	4620      	mov	r0, r4
   2e770:	f000 f818 	bl	2e7a4 <__sfp>
   2e774:	2200      	movs	r2, #0
   2e776:	2104      	movs	r1, #4
   2e778:	60e0      	str	r0, [r4, #12]
   2e77a:	6860      	ldr	r0, [r4, #4]
   2e77c:	f7ff ff98 	bl	2e6b0 <std>
   2e780:	2201      	movs	r2, #1
   2e782:	2109      	movs	r1, #9
   2e784:	68a0      	ldr	r0, [r4, #8]
   2e786:	f7ff ff93 	bl	2e6b0 <std>
   2e78a:	2202      	movs	r2, #2
   2e78c:	2112      	movs	r1, #18
   2e78e:	68e0      	ldr	r0, [r4, #12]
   2e790:	f7ff ff8e 	bl	2e6b0 <std>
   2e794:	2301      	movs	r3, #1
   2e796:	61a3      	str	r3, [r4, #24]
   2e798:	e7d2      	b.n	2e740 <__sinit+0xc>
   2e79a:	bf00      	nop
   2e79c:	00038a60 	.word	0x00038a60
   2e7a0:	0002e6f9 	.word	0x0002e6f9

0002e7a4 <__sfp>:
   2e7a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e7a6:	4607      	mov	r7, r0
   2e7a8:	f7ff ffac 	bl	2e704 <__sfp_lock_acquire>
   2e7ac:	4b1e      	ldr	r3, [pc, #120]	; (2e828 <__sfp+0x84>)
   2e7ae:	681e      	ldr	r6, [r3, #0]
   2e7b0:	69b3      	ldr	r3, [r6, #24]
   2e7b2:	b913      	cbnz	r3, 2e7ba <__sfp+0x16>
   2e7b4:	4630      	mov	r0, r6
   2e7b6:	f7ff ffbd 	bl	2e734 <__sinit>
   2e7ba:	3648      	adds	r6, #72	; 0x48
   2e7bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   2e7c0:	3b01      	subs	r3, #1
   2e7c2:	d503      	bpl.n	2e7cc <__sfp+0x28>
   2e7c4:	6833      	ldr	r3, [r6, #0]
   2e7c6:	b30b      	cbz	r3, 2e80c <__sfp+0x68>
   2e7c8:	6836      	ldr	r6, [r6, #0]
   2e7ca:	e7f7      	b.n	2e7bc <__sfp+0x18>
   2e7cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   2e7d0:	b9d5      	cbnz	r5, 2e808 <__sfp+0x64>
   2e7d2:	4b16      	ldr	r3, [pc, #88]	; (2e82c <__sfp+0x88>)
   2e7d4:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2e7d8:	6665      	str	r5, [r4, #100]	; 0x64
   2e7da:	60e3      	str	r3, [r4, #12]
   2e7dc:	f7e4 fe7e 	bl	134dc <__retarget_lock_init_recursive>
   2e7e0:	f7ff ff96 	bl	2e710 <__sfp_lock_release>
   2e7e4:	2208      	movs	r2, #8
   2e7e6:	4629      	mov	r1, r5
   2e7e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   2e7ec:	6025      	str	r5, [r4, #0]
   2e7ee:	61a5      	str	r5, [r4, #24]
   2e7f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
   2e7f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
   2e7f8:	f007 feb6 	bl	36568 <memset>
   2e7fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   2e800:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   2e804:	4620      	mov	r0, r4
   2e806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2e808:	3468      	adds	r4, #104	; 0x68
   2e80a:	e7d9      	b.n	2e7c0 <__sfp+0x1c>
   2e80c:	2104      	movs	r1, #4
   2e80e:	4638      	mov	r0, r7
   2e810:	f008 fd3b 	bl	3728a <__sfmoreglue>
   2e814:	4604      	mov	r4, r0
   2e816:	6030      	str	r0, [r6, #0]
   2e818:	2800      	cmp	r0, #0
   2e81a:	d1d5      	bne.n	2e7c8 <__sfp+0x24>
   2e81c:	f7ff ff78 	bl	2e710 <__sfp_lock_release>
   2e820:	230c      	movs	r3, #12
   2e822:	603b      	str	r3, [r7, #0]
   2e824:	e7ee      	b.n	2e804 <__sfp+0x60>
   2e826:	bf00      	nop
   2e828:	00038a60 	.word	0x00038a60
   2e82c:	ffff0001 	.word	0xffff0001

0002e830 <fiprintf>:
   2e830:	b40e      	push	{r1, r2, r3}
   2e832:	b503      	push	{r0, r1, lr}
   2e834:	ab03      	add	r3, sp, #12
   2e836:	4601      	mov	r1, r0
   2e838:	4805      	ldr	r0, [pc, #20]	; (2e850 <fiprintf+0x20>)
   2e83a:	f853 2b04 	ldr.w	r2, [r3], #4
   2e83e:	6800      	ldr	r0, [r0, #0]
   2e840:	9301      	str	r3, [sp, #4]
   2e842:	f000 f807 	bl	2e854 <_vfiprintf_r>
   2e846:	b002      	add	sp, #8
   2e848:	f85d eb04 	ldr.w	lr, [sp], #4
   2e84c:	b003      	add	sp, #12
   2e84e:	4770      	bx	lr
   2e850:	2000ca9c 	.word	0x2000ca9c

0002e854 <_vfiprintf_r>:
   2e854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e858:	460d      	mov	r5, r1
   2e85a:	b09d      	sub	sp, #116	; 0x74
   2e85c:	4614      	mov	r4, r2
   2e85e:	4698      	mov	r8, r3
   2e860:	4606      	mov	r6, r0
   2e862:	b118      	cbz	r0, 2e86c <_vfiprintf_r+0x18>
   2e864:	6983      	ldr	r3, [r0, #24]
   2e866:	b90b      	cbnz	r3, 2e86c <_vfiprintf_r+0x18>
   2e868:	f7ff ff64 	bl	2e734 <__sinit>
   2e86c:	4b87      	ldr	r3, [pc, #540]	; (2ea8c <_vfiprintf_r+0x238>)
   2e86e:	429d      	cmp	r5, r3
   2e870:	d11b      	bne.n	2e8aa <_vfiprintf_r+0x56>
   2e872:	6875      	ldr	r5, [r6, #4]
   2e874:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   2e876:	07d9      	lsls	r1, r3, #31
   2e878:	d405      	bmi.n	2e886 <_vfiprintf_r+0x32>
   2e87a:	89ab      	ldrh	r3, [r5, #12]
   2e87c:	059a      	lsls	r2, r3, #22
   2e87e:	d402      	bmi.n	2e886 <_vfiprintf_r+0x32>
   2e880:	6da8      	ldr	r0, [r5, #88]	; 0x58
   2e882:	f7e4 fe5b 	bl	1353c <__retarget_lock_acquire_recursive>
   2e886:	89ab      	ldrh	r3, [r5, #12]
   2e888:	071b      	lsls	r3, r3, #28
   2e88a:	d501      	bpl.n	2e890 <_vfiprintf_r+0x3c>
   2e88c:	692b      	ldr	r3, [r5, #16]
   2e88e:	b9eb      	cbnz	r3, 2e8cc <_vfiprintf_r+0x78>
   2e890:	4629      	mov	r1, r5
   2e892:	4630      	mov	r0, r6
   2e894:	f000 f95c 	bl	2eb50 <__swsetup_r>
   2e898:	b1c0      	cbz	r0, 2e8cc <_vfiprintf_r+0x78>
   2e89a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   2e89c:	07dc      	lsls	r4, r3, #31
   2e89e:	d50e      	bpl.n	2e8be <_vfiprintf_r+0x6a>
   2e8a0:	f04f 30ff 	mov.w	r0, #4294967295
   2e8a4:	b01d      	add	sp, #116	; 0x74
   2e8a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e8aa:	4b79      	ldr	r3, [pc, #484]	; (2ea90 <_vfiprintf_r+0x23c>)
   2e8ac:	429d      	cmp	r5, r3
   2e8ae:	d101      	bne.n	2e8b4 <_vfiprintf_r+0x60>
   2e8b0:	68b5      	ldr	r5, [r6, #8]
   2e8b2:	e7df      	b.n	2e874 <_vfiprintf_r+0x20>
   2e8b4:	4b77      	ldr	r3, [pc, #476]	; (2ea94 <_vfiprintf_r+0x240>)
   2e8b6:	429d      	cmp	r5, r3
   2e8b8:	bf08      	it	eq
   2e8ba:	68f5      	ldreq	r5, [r6, #12]
   2e8bc:	e7da      	b.n	2e874 <_vfiprintf_r+0x20>
   2e8be:	89ab      	ldrh	r3, [r5, #12]
   2e8c0:	0598      	lsls	r0, r3, #22
   2e8c2:	d4ed      	bmi.n	2e8a0 <_vfiprintf_r+0x4c>
   2e8c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
   2e8c6:	f7e4 fe55 	bl	13574 <__retarget_lock_release_recursive>
   2e8ca:	e7e9      	b.n	2e8a0 <_vfiprintf_r+0x4c>
   2e8cc:	2300      	movs	r3, #0
   2e8ce:	f8cd 800c 	str.w	r8, [sp, #12]
   2e8d2:	f04f 0901 	mov.w	r9, #1
   2e8d6:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 2ea98 <_vfiprintf_r+0x244>
   2e8da:	9309      	str	r3, [sp, #36]	; 0x24
   2e8dc:	2320      	movs	r3, #32
   2e8de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   2e8e2:	2330      	movs	r3, #48	; 0x30
   2e8e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   2e8e8:	4623      	mov	r3, r4
   2e8ea:	469a      	mov	sl, r3
   2e8ec:	f813 2b01 	ldrb.w	r2, [r3], #1
   2e8f0:	b10a      	cbz	r2, 2e8f6 <_vfiprintf_r+0xa2>
   2e8f2:	2a25      	cmp	r2, #37	; 0x25
   2e8f4:	d1f9      	bne.n	2e8ea <_vfiprintf_r+0x96>
   2e8f6:	ebba 0b04 	subs.w	fp, sl, r4
   2e8fa:	d00b      	beq.n	2e914 <_vfiprintf_r+0xc0>
   2e8fc:	465b      	mov	r3, fp
   2e8fe:	4622      	mov	r2, r4
   2e900:	4629      	mov	r1, r5
   2e902:	4630      	mov	r0, r6
   2e904:	f008 fd2d 	bl	37362 <__sfputs_r>
   2e908:	3001      	adds	r0, #1
   2e90a:	f000 80a6 	beq.w	2ea5a <_vfiprintf_r+0x206>
   2e90e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2e910:	445a      	add	r2, fp
   2e912:	9209      	str	r2, [sp, #36]	; 0x24
   2e914:	f89a 3000 	ldrb.w	r3, [sl]
   2e918:	2b00      	cmp	r3, #0
   2e91a:	f000 809e 	beq.w	2ea5a <_vfiprintf_r+0x206>
   2e91e:	2300      	movs	r3, #0
   2e920:	f04f 32ff 	mov.w	r2, #4294967295
   2e924:	f10a 0a01 	add.w	sl, sl, #1
   2e928:	9304      	str	r3, [sp, #16]
   2e92a:	9307      	str	r3, [sp, #28]
   2e92c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   2e930:	931a      	str	r3, [sp, #104]	; 0x68
   2e932:	e9cd 2305 	strd	r2, r3, [sp, #20]
   2e936:	4654      	mov	r4, sl
   2e938:	2205      	movs	r2, #5
   2e93a:	4857      	ldr	r0, [pc, #348]	; (2ea98 <_vfiprintf_r+0x244>)
   2e93c:	f814 1b01 	ldrb.w	r1, [r4], #1
   2e940:	f007 fdd4 	bl	364ec <memchr>
   2e944:	9b04      	ldr	r3, [sp, #16]
   2e946:	b9d0      	cbnz	r0, 2e97e <_vfiprintf_r+0x12a>
   2e948:	06d9      	lsls	r1, r3, #27
   2e94a:	bf44      	itt	mi
   2e94c:	2220      	movmi	r2, #32
   2e94e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   2e952:	071a      	lsls	r2, r3, #28
   2e954:	bf44      	itt	mi
   2e956:	222b      	movmi	r2, #43	; 0x2b
   2e958:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   2e95c:	f89a 2000 	ldrb.w	r2, [sl]
   2e960:	2a2a      	cmp	r2, #42	; 0x2a
   2e962:	d014      	beq.n	2e98e <_vfiprintf_r+0x13a>
   2e964:	9a07      	ldr	r2, [sp, #28]
   2e966:	4654      	mov	r4, sl
   2e968:	2000      	movs	r0, #0
   2e96a:	f04f 0c0a 	mov.w	ip, #10
   2e96e:	4621      	mov	r1, r4
   2e970:	f811 3b01 	ldrb.w	r3, [r1], #1
   2e974:	3b30      	subs	r3, #48	; 0x30
   2e976:	2b09      	cmp	r3, #9
   2e978:	d94a      	bls.n	2ea10 <_vfiprintf_r+0x1bc>
   2e97a:	b970      	cbnz	r0, 2e99a <_vfiprintf_r+0x146>
   2e97c:	e014      	b.n	2e9a8 <_vfiprintf_r+0x154>
   2e97e:	eba0 0008 	sub.w	r0, r0, r8
   2e982:	46a2      	mov	sl, r4
   2e984:	fa09 f000 	lsl.w	r0, r9, r0
   2e988:	4318      	orrs	r0, r3
   2e98a:	9004      	str	r0, [sp, #16]
   2e98c:	e7d3      	b.n	2e936 <_vfiprintf_r+0xe2>
   2e98e:	9a03      	ldr	r2, [sp, #12]
   2e990:	1d11      	adds	r1, r2, #4
   2e992:	6812      	ldr	r2, [r2, #0]
   2e994:	2a00      	cmp	r2, #0
   2e996:	9103      	str	r1, [sp, #12]
   2e998:	db01      	blt.n	2e99e <_vfiprintf_r+0x14a>
   2e99a:	9207      	str	r2, [sp, #28]
   2e99c:	e004      	b.n	2e9a8 <_vfiprintf_r+0x154>
   2e99e:	4252      	negs	r2, r2
   2e9a0:	f043 0302 	orr.w	r3, r3, #2
   2e9a4:	9207      	str	r2, [sp, #28]
   2e9a6:	9304      	str	r3, [sp, #16]
   2e9a8:	7823      	ldrb	r3, [r4, #0]
   2e9aa:	2b2e      	cmp	r3, #46	; 0x2e
   2e9ac:	d10a      	bne.n	2e9c4 <_vfiprintf_r+0x170>
   2e9ae:	7863      	ldrb	r3, [r4, #1]
   2e9b0:	2b2a      	cmp	r3, #42	; 0x2a
   2e9b2:	d132      	bne.n	2ea1a <_vfiprintf_r+0x1c6>
   2e9b4:	9b03      	ldr	r3, [sp, #12]
   2e9b6:	3402      	adds	r4, #2
   2e9b8:	1d1a      	adds	r2, r3, #4
   2e9ba:	681b      	ldr	r3, [r3, #0]
   2e9bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
   2e9c0:	9203      	str	r2, [sp, #12]
   2e9c2:	9305      	str	r3, [sp, #20]
   2e9c4:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 2ea9c <_vfiprintf_r+0x248>
   2e9c8:	2203      	movs	r2, #3
   2e9ca:	7821      	ldrb	r1, [r4, #0]
   2e9cc:	4650      	mov	r0, sl
   2e9ce:	f007 fd8d 	bl	364ec <memchr>
   2e9d2:	b138      	cbz	r0, 2e9e4 <_vfiprintf_r+0x190>
   2e9d4:	eba0 000a 	sub.w	r0, r0, sl
   2e9d8:	2240      	movs	r2, #64	; 0x40
   2e9da:	9b04      	ldr	r3, [sp, #16]
   2e9dc:	3401      	adds	r4, #1
   2e9de:	4082      	lsls	r2, r0
   2e9e0:	4313      	orrs	r3, r2
   2e9e2:	9304      	str	r3, [sp, #16]
   2e9e4:	f814 1b01 	ldrb.w	r1, [r4], #1
   2e9e8:	2206      	movs	r2, #6
   2e9ea:	482d      	ldr	r0, [pc, #180]	; (2eaa0 <_vfiprintf_r+0x24c>)
   2e9ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   2e9f0:	f007 fd7c 	bl	364ec <memchr>
   2e9f4:	2800      	cmp	r0, #0
   2e9f6:	d03f      	beq.n	2ea78 <_vfiprintf_r+0x224>
   2e9f8:	4b2a      	ldr	r3, [pc, #168]	; (2eaa4 <_vfiprintf_r+0x250>)
   2e9fa:	bb1b      	cbnz	r3, 2ea44 <_vfiprintf_r+0x1f0>
   2e9fc:	9b03      	ldr	r3, [sp, #12]
   2e9fe:	3307      	adds	r3, #7
   2ea00:	f023 0307 	bic.w	r3, r3, #7
   2ea04:	3308      	adds	r3, #8
   2ea06:	9303      	str	r3, [sp, #12]
   2ea08:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2ea0a:	443b      	add	r3, r7
   2ea0c:	9309      	str	r3, [sp, #36]	; 0x24
   2ea0e:	e76b      	b.n	2e8e8 <_vfiprintf_r+0x94>
   2ea10:	fb0c 3202 	mla	r2, ip, r2, r3
   2ea14:	460c      	mov	r4, r1
   2ea16:	2001      	movs	r0, #1
   2ea18:	e7a9      	b.n	2e96e <_vfiprintf_r+0x11a>
   2ea1a:	2300      	movs	r3, #0
   2ea1c:	3401      	adds	r4, #1
   2ea1e:	f04f 0c0a 	mov.w	ip, #10
   2ea22:	4619      	mov	r1, r3
   2ea24:	9305      	str	r3, [sp, #20]
   2ea26:	4620      	mov	r0, r4
   2ea28:	f810 2b01 	ldrb.w	r2, [r0], #1
   2ea2c:	3a30      	subs	r2, #48	; 0x30
   2ea2e:	2a09      	cmp	r2, #9
   2ea30:	d903      	bls.n	2ea3a <_vfiprintf_r+0x1e6>
   2ea32:	2b00      	cmp	r3, #0
   2ea34:	d0c6      	beq.n	2e9c4 <_vfiprintf_r+0x170>
   2ea36:	9105      	str	r1, [sp, #20]
   2ea38:	e7c4      	b.n	2e9c4 <_vfiprintf_r+0x170>
   2ea3a:	fb0c 2101 	mla	r1, ip, r1, r2
   2ea3e:	4604      	mov	r4, r0
   2ea40:	2301      	movs	r3, #1
   2ea42:	e7f0      	b.n	2ea26 <_vfiprintf_r+0x1d2>
   2ea44:	ab03      	add	r3, sp, #12
   2ea46:	462a      	mov	r2, r5
   2ea48:	a904      	add	r1, sp, #16
   2ea4a:	4630      	mov	r0, r6
   2ea4c:	9300      	str	r3, [sp, #0]
   2ea4e:	4b16      	ldr	r3, [pc, #88]	; (2eaa8 <_vfiprintf_r+0x254>)
   2ea50:	f7fd fe10 	bl	2c674 <_printf_float>
   2ea54:	4607      	mov	r7, r0
   2ea56:	1c78      	adds	r0, r7, #1
   2ea58:	d1d6      	bne.n	2ea08 <_vfiprintf_r+0x1b4>
   2ea5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   2ea5c:	07d9      	lsls	r1, r3, #31
   2ea5e:	d405      	bmi.n	2ea6c <_vfiprintf_r+0x218>
   2ea60:	89ab      	ldrh	r3, [r5, #12]
   2ea62:	059a      	lsls	r2, r3, #22
   2ea64:	d402      	bmi.n	2ea6c <_vfiprintf_r+0x218>
   2ea66:	6da8      	ldr	r0, [r5, #88]	; 0x58
   2ea68:	f7e4 fd84 	bl	13574 <__retarget_lock_release_recursive>
   2ea6c:	89ab      	ldrh	r3, [r5, #12]
   2ea6e:	065b      	lsls	r3, r3, #25
   2ea70:	f53f af16 	bmi.w	2e8a0 <_vfiprintf_r+0x4c>
   2ea74:	9809      	ldr	r0, [sp, #36]	; 0x24
   2ea76:	e715      	b.n	2e8a4 <_vfiprintf_r+0x50>
   2ea78:	ab03      	add	r3, sp, #12
   2ea7a:	462a      	mov	r2, r5
   2ea7c:	a904      	add	r1, sp, #16
   2ea7e:	4630      	mov	r0, r6
   2ea80:	9300      	str	r3, [sp, #0]
   2ea82:	4b09      	ldr	r3, [pc, #36]	; (2eaa8 <_vfiprintf_r+0x254>)
   2ea84:	f7fe f82c 	bl	2cae0 <_printf_i>
   2ea88:	e7e4      	b.n	2ea54 <_vfiprintf_r+0x200>
   2ea8a:	bf00      	nop
   2ea8c:	00038abc 	.word	0x00038abc
   2ea90:	00038a9c 	.word	0x00038a9c
   2ea94:	00038a7c 	.word	0x00038a7c
   2ea98:	000421d0 	.word	0x000421d0
   2ea9c:	000421d6 	.word	0x000421d6
   2eaa0:	000421da 	.word	0x000421da
   2eaa4:	0002c675 	.word	0x0002c675
   2eaa8:	00037363 	.word	0x00037363

0002eaac <__swbuf_r>:
   2eaac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2eaae:	460e      	mov	r6, r1
   2eab0:	4614      	mov	r4, r2
   2eab2:	4605      	mov	r5, r0
   2eab4:	b118      	cbz	r0, 2eabe <__swbuf_r+0x12>
   2eab6:	6983      	ldr	r3, [r0, #24]
   2eab8:	b90b      	cbnz	r3, 2eabe <__swbuf_r+0x12>
   2eaba:	f7ff fe3b 	bl	2e734 <__sinit>
   2eabe:	4b21      	ldr	r3, [pc, #132]	; (2eb44 <__swbuf_r+0x98>)
   2eac0:	429c      	cmp	r4, r3
   2eac2:	d110      	bne.n	2eae6 <__swbuf_r+0x3a>
   2eac4:	686c      	ldr	r4, [r5, #4]
   2eac6:	69a3      	ldr	r3, [r4, #24]
   2eac8:	60a3      	str	r3, [r4, #8]
   2eaca:	89a3      	ldrh	r3, [r4, #12]
   2eacc:	071a      	lsls	r2, r3, #28
   2eace:	d501      	bpl.n	2ead4 <__swbuf_r+0x28>
   2ead0:	6923      	ldr	r3, [r4, #16]
   2ead2:	b993      	cbnz	r3, 2eafa <__swbuf_r+0x4e>
   2ead4:	4621      	mov	r1, r4
   2ead6:	4628      	mov	r0, r5
   2ead8:	f000 f83a 	bl	2eb50 <__swsetup_r>
   2eadc:	b168      	cbz	r0, 2eafa <__swbuf_r+0x4e>
   2eade:	f04f 37ff 	mov.w	r7, #4294967295
   2eae2:	4638      	mov	r0, r7
   2eae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2eae6:	4b18      	ldr	r3, [pc, #96]	; (2eb48 <__swbuf_r+0x9c>)
   2eae8:	429c      	cmp	r4, r3
   2eaea:	d101      	bne.n	2eaf0 <__swbuf_r+0x44>
   2eaec:	68ac      	ldr	r4, [r5, #8]
   2eaee:	e7ea      	b.n	2eac6 <__swbuf_r+0x1a>
   2eaf0:	4b16      	ldr	r3, [pc, #88]	; (2eb4c <__swbuf_r+0xa0>)
   2eaf2:	429c      	cmp	r4, r3
   2eaf4:	bf08      	it	eq
   2eaf6:	68ec      	ldreq	r4, [r5, #12]
   2eaf8:	e7e5      	b.n	2eac6 <__swbuf_r+0x1a>
   2eafa:	6923      	ldr	r3, [r4, #16]
   2eafc:	b2f6      	uxtb	r6, r6
   2eafe:	6820      	ldr	r0, [r4, #0]
   2eb00:	4637      	mov	r7, r6
   2eb02:	1ac0      	subs	r0, r0, r3
   2eb04:	6963      	ldr	r3, [r4, #20]
   2eb06:	4283      	cmp	r3, r0
   2eb08:	dc05      	bgt.n	2eb16 <__swbuf_r+0x6a>
   2eb0a:	4621      	mov	r1, r4
   2eb0c:	4628      	mov	r0, r5
   2eb0e:	f7ff fd93 	bl	2e638 <_fflush_r>
   2eb12:	2800      	cmp	r0, #0
   2eb14:	d1e3      	bne.n	2eade <__swbuf_r+0x32>
   2eb16:	68a3      	ldr	r3, [r4, #8]
   2eb18:	3001      	adds	r0, #1
   2eb1a:	3b01      	subs	r3, #1
   2eb1c:	60a3      	str	r3, [r4, #8]
   2eb1e:	6823      	ldr	r3, [r4, #0]
   2eb20:	1c5a      	adds	r2, r3, #1
   2eb22:	6022      	str	r2, [r4, #0]
   2eb24:	701e      	strb	r6, [r3, #0]
   2eb26:	6963      	ldr	r3, [r4, #20]
   2eb28:	4283      	cmp	r3, r0
   2eb2a:	d004      	beq.n	2eb36 <__swbuf_r+0x8a>
   2eb2c:	89a3      	ldrh	r3, [r4, #12]
   2eb2e:	07db      	lsls	r3, r3, #31
   2eb30:	d5d7      	bpl.n	2eae2 <__swbuf_r+0x36>
   2eb32:	2e0a      	cmp	r6, #10
   2eb34:	d1d5      	bne.n	2eae2 <__swbuf_r+0x36>
   2eb36:	4621      	mov	r1, r4
   2eb38:	4628      	mov	r0, r5
   2eb3a:	f7ff fd7d 	bl	2e638 <_fflush_r>
   2eb3e:	2800      	cmp	r0, #0
   2eb40:	d0cf      	beq.n	2eae2 <__swbuf_r+0x36>
   2eb42:	e7cc      	b.n	2eade <__swbuf_r+0x32>
   2eb44:	00038abc 	.word	0x00038abc
   2eb48:	00038a9c 	.word	0x00038a9c
   2eb4c:	00038a7c 	.word	0x00038a7c

0002eb50 <__swsetup_r>:
   2eb50:	4b31      	ldr	r3, [pc, #196]	; (2ec18 <__swsetup_r+0xc8>)
   2eb52:	b570      	push	{r4, r5, r6, lr}
   2eb54:	681d      	ldr	r5, [r3, #0]
   2eb56:	4606      	mov	r6, r0
   2eb58:	460c      	mov	r4, r1
   2eb5a:	b125      	cbz	r5, 2eb66 <__swsetup_r+0x16>
   2eb5c:	69ab      	ldr	r3, [r5, #24]
   2eb5e:	b913      	cbnz	r3, 2eb66 <__swsetup_r+0x16>
   2eb60:	4628      	mov	r0, r5
   2eb62:	f7ff fde7 	bl	2e734 <__sinit>
   2eb66:	4b2d      	ldr	r3, [pc, #180]	; (2ec1c <__swsetup_r+0xcc>)
   2eb68:	429c      	cmp	r4, r3
   2eb6a:	d10e      	bne.n	2eb8a <__swsetup_r+0x3a>
   2eb6c:	686c      	ldr	r4, [r5, #4]
   2eb6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2eb72:	071a      	lsls	r2, r3, #28
   2eb74:	d42c      	bmi.n	2ebd0 <__swsetup_r+0x80>
   2eb76:	06dd      	lsls	r5, r3, #27
   2eb78:	d411      	bmi.n	2eb9e <__swsetup_r+0x4e>
   2eb7a:	2209      	movs	r2, #9
   2eb7c:	6032      	str	r2, [r6, #0]
   2eb7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2eb82:	f04f 30ff 	mov.w	r0, #4294967295
   2eb86:	81a3      	strh	r3, [r4, #12]
   2eb88:	e03d      	b.n	2ec06 <__swsetup_r+0xb6>
   2eb8a:	4b25      	ldr	r3, [pc, #148]	; (2ec20 <__swsetup_r+0xd0>)
   2eb8c:	429c      	cmp	r4, r3
   2eb8e:	d101      	bne.n	2eb94 <__swsetup_r+0x44>
   2eb90:	68ac      	ldr	r4, [r5, #8]
   2eb92:	e7ec      	b.n	2eb6e <__swsetup_r+0x1e>
   2eb94:	4b23      	ldr	r3, [pc, #140]	; (2ec24 <__swsetup_r+0xd4>)
   2eb96:	429c      	cmp	r4, r3
   2eb98:	bf08      	it	eq
   2eb9a:	68ec      	ldreq	r4, [r5, #12]
   2eb9c:	e7e7      	b.n	2eb6e <__swsetup_r+0x1e>
   2eb9e:	0758      	lsls	r0, r3, #29
   2eba0:	d512      	bpl.n	2ebc8 <__swsetup_r+0x78>
   2eba2:	6b61      	ldr	r1, [r4, #52]	; 0x34
   2eba4:	b141      	cbz	r1, 2ebb8 <__swsetup_r+0x68>
   2eba6:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2ebaa:	4299      	cmp	r1, r3
   2ebac:	d002      	beq.n	2ebb4 <__swsetup_r+0x64>
   2ebae:	4630      	mov	r0, r6
   2ebb0:	f7fd fcbc 	bl	2c52c <_free_r>
   2ebb4:	2300      	movs	r3, #0
   2ebb6:	6363      	str	r3, [r4, #52]	; 0x34
   2ebb8:	89a3      	ldrh	r3, [r4, #12]
   2ebba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   2ebbe:	81a3      	strh	r3, [r4, #12]
   2ebc0:	2300      	movs	r3, #0
   2ebc2:	6063      	str	r3, [r4, #4]
   2ebc4:	6923      	ldr	r3, [r4, #16]
   2ebc6:	6023      	str	r3, [r4, #0]
   2ebc8:	89a3      	ldrh	r3, [r4, #12]
   2ebca:	f043 0308 	orr.w	r3, r3, #8
   2ebce:	81a3      	strh	r3, [r4, #12]
   2ebd0:	6923      	ldr	r3, [r4, #16]
   2ebd2:	b94b      	cbnz	r3, 2ebe8 <__swsetup_r+0x98>
   2ebd4:	89a3      	ldrh	r3, [r4, #12]
   2ebd6:	f403 7320 	and.w	r3, r3, #640	; 0x280
   2ebda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   2ebde:	d003      	beq.n	2ebe8 <__swsetup_r+0x98>
   2ebe0:	4621      	mov	r1, r4
   2ebe2:	4630      	mov	r0, r6
   2ebe4:	f000 f820 	bl	2ec28 <__smakebuf_r>
   2ebe8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2ebec:	f013 0201 	ands.w	r2, r3, #1
   2ebf0:	d00a      	beq.n	2ec08 <__swsetup_r+0xb8>
   2ebf2:	2200      	movs	r2, #0
   2ebf4:	60a2      	str	r2, [r4, #8]
   2ebf6:	6962      	ldr	r2, [r4, #20]
   2ebf8:	4252      	negs	r2, r2
   2ebfa:	61a2      	str	r2, [r4, #24]
   2ebfc:	6922      	ldr	r2, [r4, #16]
   2ebfe:	b942      	cbnz	r2, 2ec12 <__swsetup_r+0xc2>
   2ec00:	f013 0080 	ands.w	r0, r3, #128	; 0x80
   2ec04:	d1bb      	bne.n	2eb7e <__swsetup_r+0x2e>
   2ec06:	bd70      	pop	{r4, r5, r6, pc}
   2ec08:	0799      	lsls	r1, r3, #30
   2ec0a:	bf58      	it	pl
   2ec0c:	6962      	ldrpl	r2, [r4, #20]
   2ec0e:	60a2      	str	r2, [r4, #8]
   2ec10:	e7f4      	b.n	2ebfc <__swsetup_r+0xac>
   2ec12:	2000      	movs	r0, #0
   2ec14:	e7f7      	b.n	2ec06 <__swsetup_r+0xb6>
   2ec16:	bf00      	nop
   2ec18:	2000ca9c 	.word	0x2000ca9c
   2ec1c:	00038abc 	.word	0x00038abc
   2ec20:	00038a9c 	.word	0x00038a9c
   2ec24:	00038a7c 	.word	0x00038a7c

0002ec28 <__smakebuf_r>:
   2ec28:	898b      	ldrh	r3, [r1, #12]
   2ec2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2ec2c:	079d      	lsls	r5, r3, #30
   2ec2e:	4606      	mov	r6, r0
   2ec30:	460c      	mov	r4, r1
   2ec32:	d507      	bpl.n	2ec44 <__smakebuf_r+0x1c>
   2ec34:	f104 0347 	add.w	r3, r4, #71	; 0x47
   2ec38:	6023      	str	r3, [r4, #0]
   2ec3a:	6123      	str	r3, [r4, #16]
   2ec3c:	2301      	movs	r3, #1
   2ec3e:	6163      	str	r3, [r4, #20]
   2ec40:	b003      	add	sp, #12
   2ec42:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2ec44:	ab01      	add	r3, sp, #4
   2ec46:	466a      	mov	r2, sp
   2ec48:	f008 fba4 	bl	37394 <__swhatbuf_r>
   2ec4c:	9f00      	ldr	r7, [sp, #0]
   2ec4e:	4605      	mov	r5, r0
   2ec50:	4630      	mov	r0, r6
   2ec52:	4639      	mov	r1, r7
   2ec54:	f7fd fcb4 	bl	2c5c0 <_malloc_r>
   2ec58:	b948      	cbnz	r0, 2ec6e <__smakebuf_r+0x46>
   2ec5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2ec5e:	059a      	lsls	r2, r3, #22
   2ec60:	d4ee      	bmi.n	2ec40 <__smakebuf_r+0x18>
   2ec62:	f023 0303 	bic.w	r3, r3, #3
   2ec66:	f043 0302 	orr.w	r3, r3, #2
   2ec6a:	81a3      	strh	r3, [r4, #12]
   2ec6c:	e7e2      	b.n	2ec34 <__smakebuf_r+0xc>
   2ec6e:	4b0d      	ldr	r3, [pc, #52]	; (2eca4 <__smakebuf_r+0x7c>)
   2ec70:	62b3      	str	r3, [r6, #40]	; 0x28
   2ec72:	89a3      	ldrh	r3, [r4, #12]
   2ec74:	6020      	str	r0, [r4, #0]
   2ec76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2ec7a:	81a3      	strh	r3, [r4, #12]
   2ec7c:	9b01      	ldr	r3, [sp, #4]
   2ec7e:	e9c4 0704 	strd	r0, r7, [r4, #16]
   2ec82:	b15b      	cbz	r3, 2ec9c <__smakebuf_r+0x74>
   2ec84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   2ec88:	4630      	mov	r0, r6
   2ec8a:	f000 f839 	bl	2ed00 <_isatty_r>
   2ec8e:	b128      	cbz	r0, 2ec9c <__smakebuf_r+0x74>
   2ec90:	89a3      	ldrh	r3, [r4, #12]
   2ec92:	f023 0303 	bic.w	r3, r3, #3
   2ec96:	f043 0301 	orr.w	r3, r3, #1
   2ec9a:	81a3      	strh	r3, [r4, #12]
   2ec9c:	89a3      	ldrh	r3, [r4, #12]
   2ec9e:	431d      	orrs	r5, r3
   2eca0:	81a5      	strh	r5, [r4, #12]
   2eca2:	e7cd      	b.n	2ec40 <__smakebuf_r+0x18>
   2eca4:	0002e6f9 	.word	0x0002e6f9

0002eca8 <raise>:
   2eca8:	4b02      	ldr	r3, [pc, #8]	; (2ecb4 <raise+0xc>)
   2ecaa:	4601      	mov	r1, r0
   2ecac:	6818      	ldr	r0, [r3, #0]
   2ecae:	f008 bb96 	b.w	373de <_raise_r>
   2ecb2:	bf00      	nop
   2ecb4:	2000ca9c 	.word	0x2000ca9c

0002ecb8 <_kill_r>:
   2ecb8:	b538      	push	{r3, r4, r5, lr}
   2ecba:	2300      	movs	r3, #0
   2ecbc:	4d06      	ldr	r5, [pc, #24]	; (2ecd8 <_kill_r+0x20>)
   2ecbe:	4604      	mov	r4, r0
   2ecc0:	4608      	mov	r0, r1
   2ecc2:	4611      	mov	r1, r2
   2ecc4:	602b      	str	r3, [r5, #0]
   2ecc6:	f002 f828 	bl	30d1a <_kill>
   2ecca:	1c43      	adds	r3, r0, #1
   2eccc:	d102      	bne.n	2ecd4 <_kill_r+0x1c>
   2ecce:	682b      	ldr	r3, [r5, #0]
   2ecd0:	b103      	cbz	r3, 2ecd4 <_kill_r+0x1c>
   2ecd2:	6023      	str	r3, [r4, #0]
   2ecd4:	bd38      	pop	{r3, r4, r5, pc}
   2ecd6:	bf00      	nop
   2ecd8:	2000ef4c 	.word	0x2000ef4c

0002ecdc <_fstat_r>:
   2ecdc:	b538      	push	{r3, r4, r5, lr}
   2ecde:	2300      	movs	r3, #0
   2ece0:	4d06      	ldr	r5, [pc, #24]	; (2ecfc <_fstat_r+0x20>)
   2ece2:	4604      	mov	r4, r0
   2ece4:	4608      	mov	r0, r1
   2ece6:	4611      	mov	r1, r2
   2ece8:	602b      	str	r3, [r5, #0]
   2ecea:	f002 f81a 	bl	30d22 <_fstat>
   2ecee:	1c43      	adds	r3, r0, #1
   2ecf0:	d102      	bne.n	2ecf8 <_fstat_r+0x1c>
   2ecf2:	682b      	ldr	r3, [r5, #0]
   2ecf4:	b103      	cbz	r3, 2ecf8 <_fstat_r+0x1c>
   2ecf6:	6023      	str	r3, [r4, #0]
   2ecf8:	bd38      	pop	{r3, r4, r5, pc}
   2ecfa:	bf00      	nop
   2ecfc:	2000ef4c 	.word	0x2000ef4c

0002ed00 <_isatty_r>:
   2ed00:	b538      	push	{r3, r4, r5, lr}
   2ed02:	2300      	movs	r3, #0
   2ed04:	4d05      	ldr	r5, [pc, #20]	; (2ed1c <_isatty_r+0x1c>)
   2ed06:	4604      	mov	r4, r0
   2ed08:	4608      	mov	r0, r1
   2ed0a:	602b      	str	r3, [r5, #0]
   2ed0c:	f002 f800 	bl	30d10 <_isatty>
   2ed10:	1c43      	adds	r3, r0, #1
   2ed12:	d102      	bne.n	2ed1a <_isatty_r+0x1a>
   2ed14:	682b      	ldr	r3, [r5, #0]
   2ed16:	b103      	cbz	r3, 2ed1a <_isatty_r+0x1a>
   2ed18:	6023      	str	r3, [r4, #0]
   2ed1a:	bd38      	pop	{r3, r4, r5, pc}
   2ed1c:	2000ef4c 	.word	0x2000ef4c

0002ed20 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   2ed20:	4770      	bx	lr

0002ed22 <z_log_msg_static_create.constprop.0>:
   2ed22:	2300      	movs	r3, #0
   2ed24:	f7e1 ba86 	b.w	10234 <z_impl_z_log_msg_static_create>

0002ed28 <fds_init>:

/**@brief Initialize the file descriptor structure used by poll.
 */
int fds_init(struct mqtt_client *c, struct pollfd *fds)
{
   2ed28:	4603      	mov	r3, r0
	if (c->transport.type == MQTT_TRANSPORT_NON_SECURE) {
   2ed2a:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   2ed2e:	b920      	cbnz	r0, 2ed3a <fds_init+0x12>
		fds->fd = c->transport.tcp.sock;
   2ed30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2ed32:	600b      	str	r3, [r1, #0]
	} else {
		return -ENOTSUP;
	}

	fds->events = POLLIN;
   2ed34:	2301      	movs	r3, #1
   2ed36:	808b      	strh	r3, [r1, #4]

	return 0;
   2ed38:	4770      	bx	lr
		return -ENOTSUP;
   2ed3a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2ed3e:	4770      	bx	lr

0002ed40 <z_log_msg_static_create.constprop.0>:
   2ed40:	2300      	movs	r3, #0
   2ed42:	f7e1 ba77 	b.w	10234 <z_impl_z_log_msg_static_create>

0002ed46 <button_handler>:
	switch (has_changed) {
   2ed46:	2901      	cmp	r1, #1
   2ed48:	d103      	bne.n	2ed52 <button_handler+0xc>
		if (buttons & DK_BTN1_MSK){
   2ed4a:	07c3      	lsls	r3, r0, #31
   2ed4c:	d501      	bpl.n	2ed52 <button_handler+0xc>
   2ed4e:	f7dc bf6d 	b.w	bc2c <button_handler.part.0>
}
   2ed52:	4770      	bx	lr

0002ed54 <nrf_modem_fault_handler>:
	sys_reboot(SYS_REBOOT_COLD);
   2ed54:	2001      	movs	r0, #1
{
   2ed56:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_COLD);
   2ed58:	f7e0 fb78 	bl	f44c <sys_reboot>

0002ed5c <z_log_msg_static_create>:
   2ed5c:	f7e1 ba6a 	b.w	10234 <z_impl_z_log_msg_static_create>

0002ed60 <parse_hex4>:
    for (i = 0; i < 4; i++)
   2ed60:	2100      	movs	r1, #0
{
   2ed62:	b510      	push	{r4, lr}
    unsigned int h = 0;
   2ed64:	460a      	mov	r2, r1
{
   2ed66:	4604      	mov	r4, r0
        if ((input[i] >= '0') && (input[i] <= '9'))
   2ed68:	5c63      	ldrb	r3, [r4, r1]
   2ed6a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   2ed6e:	2809      	cmp	r0, #9
   2ed70:	d807      	bhi.n	2ed82 <parse_hex4+0x22>
            h += (unsigned int) input[i] - '0';
   2ed72:	3a30      	subs	r2, #48	; 0x30
        if (i < 3)
   2ed74:	2903      	cmp	r1, #3
            h += (unsigned int) 10 + input[i] - 'a';
   2ed76:	eb03 0002 	add.w	r0, r3, r2
        if (i < 3)
   2ed7a:	d00f      	beq.n	2ed9c <parse_hex4+0x3c>
            h = h << 4;
   2ed7c:	0102      	lsls	r2, r0, #4
    for (i = 0; i < 4; i++)
   2ed7e:	3101      	adds	r1, #1
   2ed80:	e7f2      	b.n	2ed68 <parse_hex4+0x8>
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
   2ed82:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
   2ed86:	2805      	cmp	r0, #5
   2ed88:	d801      	bhi.n	2ed8e <parse_hex4+0x2e>
            h += (unsigned int) 10 + input[i] - 'A';
   2ed8a:	3a37      	subs	r2, #55	; 0x37
   2ed8c:	e7f2      	b.n	2ed74 <parse_hex4+0x14>
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
   2ed8e:	f1a3 0061 	sub.w	r0, r3, #97	; 0x61
   2ed92:	2805      	cmp	r0, #5
   2ed94:	d801      	bhi.n	2ed9a <parse_hex4+0x3a>
            h += (unsigned int) 10 + input[i] - 'a';
   2ed96:	3a57      	subs	r2, #87	; 0x57
   2ed98:	e7ec      	b.n	2ed74 <parse_hex4+0x14>
            return 0;
   2ed9a:	2000      	movs	r0, #0
}
   2ed9c:	bd10      	pop	{r4, pc}

0002ed9e <buffer_skip_whitespace>:
{
   2ed9e:	b510      	push	{r4, lr}
    if ((buffer == NULL) || (buffer->content == NULL))
   2eda0:	b128      	cbz	r0, 2edae <buffer_skip_whitespace+0x10>
   2eda2:	6801      	ldr	r1, [r0, #0]
   2eda4:	b181      	cbz	r1, 2edc8 <buffer_skip_whitespace+0x2a>
    if (cannot_access_at_index(buffer, 0))
   2eda6:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
   2edaa:	429a      	cmp	r2, r3
   2edac:	d305      	bcc.n	2edba <buffer_skip_whitespace+0x1c>
}
   2edae:	bd10      	pop	{r4, pc}
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
   2edb0:	5c8c      	ldrb	r4, [r1, r2]
   2edb2:	2c20      	cmp	r4, #32
   2edb4:	d8fb      	bhi.n	2edae <buffer_skip_whitespace+0x10>
       buffer->offset++;
   2edb6:	3201      	adds	r2, #1
   2edb8:	6082      	str	r2, [r0, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
   2edba:	6882      	ldr	r2, [r0, #8]
   2edbc:	4293      	cmp	r3, r2
   2edbe:	d8f7      	bhi.n	2edb0 <buffer_skip_whitespace+0x12>
    if (buffer->offset == buffer->length)
   2edc0:	d1f5      	bne.n	2edae <buffer_skip_whitespace+0x10>
        buffer->offset--;
   2edc2:	3b01      	subs	r3, #1
   2edc4:	6083      	str	r3, [r0, #8]
   2edc6:	e7f2      	b.n	2edae <buffer_skip_whitespace+0x10>
        return NULL;
   2edc8:	4608      	mov	r0, r1
   2edca:	e7f0      	b.n	2edae <buffer_skip_whitespace+0x10>

0002edcc <cJSON_New_Item.isra.0>:
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
   2edcc:	4603      	mov	r3, r0
   2edce:	b510      	push	{r4, lr}
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
   2edd0:	2028      	movs	r0, #40	; 0x28
   2edd2:	4798      	blx	r3
    if (node)
   2edd4:	4604      	mov	r4, r0
   2edd6:	b118      	cbz	r0, 2ede0 <cJSON_New_Item.isra.0+0x14>
   2edd8:	2228      	movs	r2, #40	; 0x28
   2edda:	2100      	movs	r1, #0
   2eddc:	f007 fbc4 	bl	36568 <memset>
}
   2ede0:	4620      	mov	r0, r4
   2ede2:	bd10      	pop	{r4, pc}

0002ede4 <cJSON_ParseWithOpts>:
{
   2ede4:	b570      	push	{r4, r5, r6, lr}
   2ede6:	460d      	mov	r5, r1
   2ede8:	4616      	mov	r6, r2
    if (NULL == value)
   2edea:	4604      	mov	r4, r0
   2edec:	b148      	cbz	r0, 2ee02 <cJSON_ParseWithOpts+0x1e>
    buffer_length = strlen(value) + sizeof("");
   2edee:	f7da fa18 	bl	9222 <strlen>
    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
   2edf2:	4633      	mov	r3, r6
   2edf4:	462a      	mov	r2, r5
   2edf6:	1c41      	adds	r1, r0, #1
   2edf8:	4620      	mov	r0, r4
}
   2edfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
   2edfe:	f7de ba5f 	b.w	d2c0 <cJSON_ParseWithLengthOpts>
}
   2ee02:	bd70      	pop	{r4, r5, r6, pc}

0002ee04 <cJSON_Parse>:
    return cJSON_ParseWithOpts(value, 0, 0);
   2ee04:	2200      	movs	r2, #0
   2ee06:	4611      	mov	r1, r2
   2ee08:	f7ff bfec 	b.w	2ede4 <cJSON_ParseWithOpts>

0002ee0c <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
    return get_object_item(object, string, false);
   2ee0c:	2200      	movs	r2, #0
   2ee0e:	f7de b9f5 	b.w	d1fc <get_object_item>

0002ee12 <cJSON_IsString>:
    return (item->type & 0xFF) == cJSON_Number;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item)
{
    if (item == NULL)
   2ee12:	b120      	cbz	r0, 2ee1e <cJSON_IsString+0xc>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_String;
   2ee14:	7b00      	ldrb	r0, [r0, #12]
   2ee16:	f1a0 0310 	sub.w	r3, r0, #16
   2ee1a:	4258      	negs	r0, r3
   2ee1c:	4158      	adcs	r0, r3
}
   2ee1e:	4770      	bx	lr

0002ee20 <cbpprintf_external>:
{
   2ee20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2ee24:	4606      	mov	r6, r0
   2ee26:	460d      	mov	r5, r1
   2ee28:	4617      	mov	r7, r2
	if (buf == NULL) {
   2ee2a:	4698      	mov	r8, r3
   2ee2c:	b32b      	cbz	r3, 2ee7a <cbpprintf_external+0x5a>
	for (i = 0; i < s_nbr; i++) {
   2ee2e:	f04f 0a00 	mov.w	sl, #0
	args_size = hdr->hdr.desc.len * sizeof(int);
   2ee32:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
   2ee36:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   2ee3a:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
   2ee3c:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   2ee3e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   2ee42:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   2ee46:	441c      	add	r4, r3
   2ee48:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
   2ee4a:	45ca      	cmp	sl, r9
   2ee4c:	d309      	bcc.n	2ee62 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
   2ee4e:	4639      	mov	r1, r7
   2ee50:	4630      	mov	r0, r6
   2ee52:	46ac      	mov	ip, r5
   2ee54:	f8d8 2004 	ldr.w	r2, [r8, #4]
   2ee58:	f108 0308 	add.w	r3, r8, #8
}
   2ee5c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   2ee60:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   2ee62:	f814 3b01 	ldrb.w	r3, [r4], #1
	for (i = 0; i < s_nbr; i++) {
   2ee66:	f10a 0a01 	add.w	sl, sl, #1
		s += strlen(s) + 1;
   2ee6a:	4620      	mov	r0, r4
		*ps = s;
   2ee6c:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
   2ee70:	f7da f9d7 	bl	9222 <strlen>
   2ee74:	3001      	adds	r0, #1
   2ee76:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   2ee78:	e7e7      	b.n	2ee4a <cbpprintf_external+0x2a>
}
   2ee7a:	f06f 0015 	mvn.w	r0, #21
   2ee7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002ee82 <is_ptr>:
{
   2ee82:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
   2ee84:	2500      	movs	r5, #0
{
   2ee86:	4602      	mov	r2, r0
	bool mod = false;
   2ee88:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
   2ee8a:	4614      	mov	r4, r2
   2ee8c:	f814 3b01 	ldrb.w	r3, [r4], #1
   2ee90:	b90b      	cbnz	r3, 2ee96 <is_ptr+0x14>
					return false;
   2ee92:	4618      	mov	r0, r3
   2ee94:	e009      	b.n	2eeaa <is_ptr+0x28>
		if (mod) {
   2ee96:	b198      	cbz	r0, 2eec0 <is_ptr+0x3e>
			if (cnt == n) {
   2ee98:	428d      	cmp	r5, r1
   2ee9a:	d107      	bne.n	2eeac <is_ptr+0x2a>
				if (c == 'p') {
   2ee9c:	2b70      	cmp	r3, #112	; 0x70
   2ee9e:	d004      	beq.n	2eeaa <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
   2eea0:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
   2eea4:	2a3a      	cmp	r2, #58	; 0x3a
   2eea6:	d80b      	bhi.n	2eec0 <is_ptr+0x3e>
					return false;
   2eea8:	2000      	movs	r0, #0
}
   2eeaa:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
   2eeac:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
   2eeb0:	2e3a      	cmp	r6, #58	; 0x3a
   2eeb2:	d805      	bhi.n	2eec0 <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
   2eeb4:	7853      	ldrb	r3, [r2, #1]
				cnt++;
   2eeb6:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
   2eeb8:	1c94      	adds	r4, r2, #2
   2eeba:	2b00      	cmp	r3, #0
   2eebc:	d0e9      	beq.n	2ee92 <is_ptr+0x10>
   2eebe:	2000      	movs	r0, #0
		if (c == '%') {
   2eec0:	2b25      	cmp	r3, #37	; 0x25
	while ((c = *fmt++) != '\0') {
   2eec2:	4622      	mov	r2, r4
			mod = !mod;
   2eec4:	bf08      	it	eq
   2eec6:	f080 0001 	eoreq.w	r0, r0, #1
   2eeca:	e7de      	b.n	2ee8a <is_ptr+0x8>

0002eecc <u8_to_dec>:
 */

#include <zephyr/sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   2eecc:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
   2eece:	2364      	movs	r3, #100	; 0x64
{
   2eed0:	4605      	mov	r5, r0
	uint8_t num_digits = 0;
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   2eed2:	2604      	movs	r6, #4
	uint8_t num_digits = 0;
   2eed4:	2000      	movs	r0, #0
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   2eed6:	270a      	movs	r7, #10
	while (buflen > 0 && divisor > 0) {
   2eed8:	b969      	cbnz	r1, 2eef6 <u8_to_dec+0x2a>
	if (buflen) {
		*buf = '\0';
	}

	return num_digits;
}
   2eeda:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   2eedc:	429a      	cmp	r2, r3
   2eede:	fbb2 f4f3 	udiv	r4, r2, r3
   2eee2:	d20c      	bcs.n	2eefe <u8_to_dec+0x32>
   2eee4:	2b01      	cmp	r3, #1
   2eee6:	d00a      	beq.n	2eefe <u8_to_dec+0x32>
   2eee8:	b948      	cbnz	r0, 2eefe <u8_to_dec+0x32>
		value -= digit * divisor;
   2eeea:	fb03 2214 	mls	r2, r3, r4, r2
		divisor /= 10;
   2eeee:	240a      	movs	r4, #10
   2eef0:	fbb3 f3f4 	udiv	r3, r3, r4
   2eef4:	b2d2      	uxtb	r2, r2
	while (buflen > 0 && divisor > 0) {
   2eef6:	3e01      	subs	r6, #1
   2eef8:	d1f0      	bne.n	2eedc <u8_to_dec+0x10>
		*buf = '\0';
   2eefa:	702e      	strb	r6, [r5, #0]
	return num_digits;
   2eefc:	e7ed      	b.n	2eeda <u8_to_dec+0xe>
			*buf = (char)digit + '0';
   2eefe:	3430      	adds	r4, #48	; 0x30
   2ef00:	f805 4b01 	strb.w	r4, [r5], #1
			buflen--;
   2ef04:	fbb2 f4f3 	udiv	r4, r2, r3
   2ef08:	fb03 2214 	mls	r2, r3, r4, r2
		divisor /= 10;
   2ef0c:	fbb3 f3f7 	udiv	r3, r3, r7
			buflen--;
   2ef10:	3901      	subs	r1, #1
			num_digits++;
   2ef12:	3001      	adds	r0, #1
			buflen--;
   2ef14:	b2c9      	uxtb	r1, r1
			num_digits++;
   2ef16:	b2c0      	uxtb	r0, r0
		value -= digit * divisor;
   2ef18:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   2ef1a:	b2db      	uxtb	r3, r3
   2ef1c:	e7dc      	b.n	2eed8 <u8_to_dec+0xc>

0002ef1e <z_fdtable_call_ioctl.constprop.0>:
 * @param vtable vtable containing ioctl function pointer
 * @param obj Object to call ioctl on
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
   2ef1e:	b40c      	push	{r2, r3}
   2ef20:	4603      	mov	r3, r0
   2ef22:	b507      	push	{r0, r1, r2, lr}
   2ef24:	4608      	mov	r0, r1
				       unsigned long request, ...)
{
	va_list args;
	int res;

	va_start(args, request);
   2ef26:	aa05      	add	r2, sp, #20
	res = vtable->ioctl(obj, request, args);
   2ef28:	f240 1105 	movw	r1, #261	; 0x105
   2ef2c:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   2ef2e:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   2ef30:	4798      	blx	r3
	va_end(args);

	return res;
}
   2ef32:	b003      	add	sp, #12
   2ef34:	f85d eb04 	ldr.w	lr, [sp], #4
   2ef38:	b002      	add	sp, #8
   2ef3a:	4770      	bx	lr

0002ef3c <char2hex>:
#include <errno.h>
#include <zephyr/sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   2ef3c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   2ef40:	b2db      	uxtb	r3, r3
   2ef42:	2b09      	cmp	r3, #9
   2ef44:	d802      	bhi.n	2ef4c <char2hex+0x10>
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   2ef46:	2000      	movs	r0, #0
		*x = c - '0';
   2ef48:	700b      	strb	r3, [r1, #0]
   2ef4a:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   2ef4c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   2ef50:	2b05      	cmp	r3, #5
   2ef52:	d802      	bhi.n	2ef5a <char2hex+0x1e>
		*x = c - 'a' + 10;
   2ef54:	3857      	subs	r0, #87	; 0x57
		*x = c - 'A' + 10;
   2ef56:	b2c3      	uxtb	r3, r0
   2ef58:	e7f5      	b.n	2ef46 <char2hex+0xa>
	} else if (c >= 'A' && c <= 'F') {
   2ef5a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   2ef5e:	2b05      	cmp	r3, #5
   2ef60:	d801      	bhi.n	2ef66 <char2hex+0x2a>
		*x = c - 'A' + 10;
   2ef62:	3837      	subs	r0, #55	; 0x37
   2ef64:	e7f7      	b.n	2ef56 <char2hex+0x1a>
		return -EINVAL;
   2ef66:	f06f 0015 	mvn.w	r0, #21
}
   2ef6a:	4770      	bx	lr

0002ef6c <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   2ef6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2ef6e:	4605      	mov	r5, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   2ef70:	f001 0001 	and.w	r0, r1, #1
   2ef74:	eb00 0651 	add.w	r6, r0, r1, lsr #1
   2ef78:	429e      	cmp	r6, r3
   2ef7a:	ea4f 0751 	mov.w	r7, r1, lsr #1
   2ef7e:	d903      	bls.n	2ef88 <hex2bin+0x1c>
		return 0;
   2ef80:	2600      	movs	r6, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   2ef82:	4630      	mov	r0, r6
   2ef84:	b003      	add	sp, #12
   2ef86:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   2ef88:	b158      	cbz	r0, 2efa2 <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   2ef8a:	7828      	ldrb	r0, [r5, #0]
   2ef8c:	f10d 0107 	add.w	r1, sp, #7
   2ef90:	f7ff ffd4 	bl	2ef3c <char2hex>
   2ef94:	2800      	cmp	r0, #0
   2ef96:	dbf3      	blt.n	2ef80 <hex2bin+0x14>
		buf[0] = dec;
   2ef98:	f89d 3007 	ldrb.w	r3, [sp, #7]
		hex++;
   2ef9c:	3501      	adds	r5, #1
		buf[0] = dec;
   2ef9e:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   2efa2:	3501      	adds	r5, #1
   2efa4:	4417      	add	r7, r2
   2efa6:	42ba      	cmp	r2, r7
   2efa8:	d0eb      	beq.n	2ef82 <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   2efaa:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   2efae:	f10d 0107 	add.w	r1, sp, #7
   2efb2:	f7ff ffc3 	bl	2ef3c <char2hex>
   2efb6:	2800      	cmp	r0, #0
   2efb8:	dbe2      	blt.n	2ef80 <hex2bin+0x14>
		buf[i] = dec << 4;
   2efba:	f89d 4007 	ldrb.w	r4, [sp, #7]
   2efbe:	0124      	lsls	r4, r4, #4
   2efc0:	b2e4      	uxtb	r4, r4
   2efc2:	7014      	strb	r4, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   2efc4:	f815 0b02 	ldrb.w	r0, [r5], #2
   2efc8:	f7ff ffb8 	bl	2ef3c <char2hex>
   2efcc:	2800      	cmp	r0, #0
   2efce:	dbd7      	blt.n	2ef80 <hex2bin+0x14>
		buf[i] += dec;
   2efd0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2efd4:	441c      	add	r4, r3
   2efd6:	f802 4b01 	strb.w	r4, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   2efda:	e7e4      	b.n	2efa6 <hex2bin+0x3a>

0002efdc <arch_printk_char_out>:
}
   2efdc:	2000      	movs	r0, #0
   2efde:	4770      	bx	lr

0002efe0 <str_out>:
{
   2efe0:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2efe2:	688a      	ldr	r2, [r1, #8]
   2efe4:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   2efe6:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2efe8:	b114      	cbz	r4, 2eff0 <str_out+0x10>
   2efea:	684b      	ldr	r3, [r1, #4]
   2efec:	4293      	cmp	r3, r2
   2efee:	dc01      	bgt.n	2eff4 <str_out+0x14>
		ctx->count++;
   2eff0:	608d      	str	r5, [r1, #8]
}
   2eff2:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   2eff4:	3b01      	subs	r3, #1
   2eff6:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   2eff8:	bf08      	it	eq
   2effa:	2200      	moveq	r2, #0
   2effc:	608d      	str	r5, [r1, #8]
   2effe:	bf0c      	ite	eq
   2f000:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   2f002:	54a0      	strbne	r0, [r4, r2]
   2f004:	e7f5      	b.n	2eff2 <str_out+0x12>

0002f006 <vprintk>:
		z_log_vprintk(fmt, ap);
   2f006:	f000 bd91 	b.w	2fb2c <z_log_vprintk>

0002f00a <printk>:
{
   2f00a:	b40f      	push	{r0, r1, r2, r3}
   2f00c:	b507      	push	{r0, r1, r2, lr}
   2f00e:	a904      	add	r1, sp, #16
   2f010:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   2f014:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
   2f016:	f000 fd89 	bl	2fb2c <z_log_vprintk>
}
   2f01a:	b003      	add	sp, #12
   2f01c:	f85d eb04 	ldr.w	lr, [sp], #4
   2f020:	b004      	add	sp, #16
   2f022:	4770      	bx	lr

0002f024 <snprintk>:
{
   2f024:	b40c      	push	{r2, r3}
   2f026:	b507      	push	{r0, r1, r2, lr}
   2f028:	ab04      	add	r3, sp, #16
   2f02a:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   2f02e:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   2f030:	f7de fea0 	bl	dd74 <vsnprintk>
}
   2f034:	b003      	add	sp, #12
   2f036:	f85d eb04 	ldr.w	lr, [sp], #4
   2f03a:	b002      	add	sp, #8
   2f03c:	4770      	bx	lr

0002f03e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   2f03e:	4604      	mov	r4, r0
   2f040:	b508      	push	{r3, lr}
   2f042:	4608      	mov	r0, r1
   2f044:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   2f046:	461a      	mov	r2, r3
   2f048:	47a0      	blx	r4
	return z_impl_z_current_get();
   2f04a:	f7fc f9b3 	bl	2b3b4 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   2f04e:	f7e3 ffa1 	bl	12f94 <z_impl_k_thread_abort>

0002f052 <chunk_size>:
		return ((uint16_t *)cmem)[f];
   2f052:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   2f056:	8840      	ldrh	r0, [r0, #2]
}
   2f058:	0840      	lsrs	r0, r0, #1
   2f05a:	4770      	bx	lr

0002f05c <free_list_add>:
{
   2f05c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f05e:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   2f060:	f7ff fff7 	bl	2f052 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   2f064:	fab0 f080 	clz	r0, r0
   2f068:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   2f06c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   2f070:	f8dc 6010 	ldr.w	r6, [ip, #16]
	void *cmem = &buf[c];
   2f074:	00ca      	lsls	r2, r1, #3
		((uint16_t *)cmem)[f] = val;
   2f076:	1d17      	adds	r7, r2, #4
{
   2f078:	460c      	mov	r4, r1
   2f07a:	3206      	adds	r2, #6
   2f07c:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   2f07e:	b956      	cbnz	r6, 2f096 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   2f080:	2101      	movs	r1, #1
   2f082:	fa01 f000 	lsl.w	r0, r1, r0
   2f086:	68d9      	ldr	r1, [r3, #12]
   2f088:	4301      	orrs	r1, r0
   2f08a:	60d9      	str	r1, [r3, #12]
		b->next = c;
   2f08c:	f8cc 4010 	str.w	r4, [ip, #16]
   2f090:	53dd      	strh	r5, [r3, r7]
   2f092:	529d      	strh	r5, [r3, r2]
}
   2f094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   2f096:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   2f098:	3104      	adds	r1, #4
   2f09a:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   2f09c:	53d8      	strh	r0, [r3, r7]
   2f09e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   2f0a2:	529e      	strh	r6, [r3, r2]
   2f0a4:	80c5      	strh	r5, [r0, #6]
   2f0a6:	525d      	strh	r5, [r3, r1]
   2f0a8:	e7f4      	b.n	2f094 <free_list_add+0x38>

0002f0aa <free_list_remove_bidx>:
{
   2f0aa:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   2f0ac:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   2f0b0:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   2f0b2:	4299      	cmp	r1, r3
   2f0b4:	f102 0104 	add.w	r1, r2, #4
   2f0b8:	d10a      	bne.n	2f0d0 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   2f0ba:	2301      	movs	r3, #1
   2f0bc:	fa03 f202 	lsl.w	r2, r3, r2
   2f0c0:	68c3      	ldr	r3, [r0, #12]
   2f0c2:	ea23 0302 	bic.w	r3, r3, r2
   2f0c6:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   2f0c8:	2300      	movs	r3, #0
   2f0ca:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   2f0ce:	bd10      	pop	{r4, pc}
   2f0d0:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   2f0d2:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   2f0d6:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   2f0da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   2f0de:	80cb      	strh	r3, [r1, #6]
   2f0e0:	8082      	strh	r2, [r0, #4]
}
   2f0e2:	e7f4      	b.n	2f0ce <free_list_remove_bidx+0x24>

0002f0e4 <free_list_remove>:
{
   2f0e4:	b508      	push	{r3, lr}
   2f0e6:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   2f0e8:	f7ff ffb3 	bl	2f052 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   2f0ec:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   2f0f0:	4618      	mov	r0, r3
}
   2f0f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   2f0f6:	f1c2 021f 	rsb	r2, r2, #31
   2f0fa:	f7ff bfd6 	b.w	2f0aa <free_list_remove_bidx>

0002f0fe <alloc_chunk>:
{
   2f0fe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2f102:	fab1 f581 	clz	r5, r1
   2f106:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
   2f10a:	eb00 0889 	add.w	r8, r0, r9, lsl #2
   2f10e:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   2f112:	4603      	mov	r3, r0
   2f114:	460e      	mov	r6, r1
	if (b->next) {
   2f116:	b1c2      	cbz	r2, 2f14a <alloc_chunk+0x4c>
   2f118:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   2f11a:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   2f11e:	4618      	mov	r0, r3
   2f120:	4621      	mov	r1, r4
   2f122:	f7ff ff96 	bl	2f052 <chunk_size>
   2f126:	42b0      	cmp	r0, r6
   2f128:	d306      	bcc.n	2f138 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   2f12a:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
   2f12c:	4618      	mov	r0, r3
   2f12e:	f7ff ffbc 	bl	2f0aa <free_list_remove_bidx>
}
   2f132:	4620      	mov	r0, r4
   2f134:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   2f138:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   2f13c:	88e0      	ldrh	r0, [r4, #6]
		} while (--i && b->next != first);
   2f13e:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   2f140:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   2f144:	d001      	beq.n	2f14a <alloc_chunk+0x4c>
   2f146:	4282      	cmp	r2, r0
   2f148:	d1e7      	bne.n	2f11a <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   2f14a:	f04f 34ff 	mov.w	r4, #4294967295
   2f14e:	f1c5 0220 	rsb	r2, r5, #32
   2f152:	4094      	lsls	r4, r2
   2f154:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   2f156:	4014      	ands	r4, r2
   2f158:	d0eb      	beq.n	2f132 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   2f15a:	fa94 f2a4 	rbit	r2, r4
   2f15e:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   2f162:	1d11      	adds	r1, r2, #4
   2f164:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   2f168:	4621      	mov	r1, r4
   2f16a:	e7df      	b.n	2f12c <alloc_chunk+0x2e>

0002f16c <merge_chunks>:
{
   2f16c:	b538      	push	{r3, r4, r5, lr}
   2f16e:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2f170:	f7ff ff6f 	bl	2f052 <chunk_size>
{
   2f174:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2f176:	4604      	mov	r4, r0
   2f178:	4611      	mov	r1, r2
   2f17a:	4618      	mov	r0, r3
   2f17c:	f7ff ff69 	bl	2f052 <chunk_size>
   2f180:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2f182:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   2f184:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   2f188:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   2f18a:	4618      	mov	r0, r3
   2f18c:	f7ff ff61 	bl	2f052 <chunk_size>
	void *cmem = &buf[c];
   2f190:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   2f192:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   2f196:	bd38      	pop	{r3, r4, r5, pc}

0002f198 <split_chunks>:
{
   2f198:	b538      	push	{r3, r4, r5, lr}
   2f19a:	460c      	mov	r4, r1
   2f19c:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   2f19e:	f7ff ff58 	bl	2f052 <chunk_size>
	chunksz_t rsz = sz0 - lsz;
   2f1a2:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   2f1a4:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
   2f1a6:	4405      	add	r5, r0
   2f1a8:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2f1ac:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   2f1ae:	8060      	strh	r0, [r4, #2]
   2f1b0:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2f1b4:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   2f1b6:	8044      	strh	r4, [r0, #2]
   2f1b8:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   2f1bc:	4618      	mov	r0, r3
   2f1be:	4611      	mov	r1, r2
   2f1c0:	f7ff ff47 	bl	2f052 <chunk_size>
	void *cmem = &buf[c];
   2f1c4:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   2f1c6:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   2f1ca:	bd38      	pop	{r3, r4, r5, pc}

0002f1cc <free_chunk>:
{
   2f1cc:	b538      	push	{r3, r4, r5, lr}
   2f1ce:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   2f1d0:	f7ff ff3f 	bl	2f052 <chunk_size>
   2f1d4:	460c      	mov	r4, r1
   2f1d6:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   2f1d8:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2f1dc:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   2f1de:	07da      	lsls	r2, r3, #31
   2f1e0:	d40a      	bmi.n	2f1f8 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   2f1e2:	4628      	mov	r0, r5
   2f1e4:	f7ff ff7e 	bl	2f0e4 <free_list_remove>
	return c + chunk_size(h, c);
   2f1e8:	4621      	mov	r1, r4
   2f1ea:	4628      	mov	r0, r5
   2f1ec:	f7ff ff31 	bl	2f052 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   2f1f0:	1822      	adds	r2, r4, r0
   2f1f2:	4628      	mov	r0, r5
   2f1f4:	f7ff ffba 	bl	2f16c <merge_chunks>
		return ((uint16_t *)cmem)[f];
   2f1f8:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   2f1fc:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   2f1fe:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2f202:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   2f204:	07db      	lsls	r3, r3, #31
   2f206:	d40c      	bmi.n	2f222 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   2f208:	4628      	mov	r0, r5
   2f20a:	f7ff ff6b 	bl	2f0e4 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   2f20e:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   2f212:	4622      	mov	r2, r4
   2f214:	1a61      	subs	r1, r4, r1
   2f216:	4628      	mov	r0, r5
   2f218:	f7ff ffa8 	bl	2f16c <merge_chunks>
   2f21c:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   2f220:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   2f222:	4621      	mov	r1, r4
   2f224:	4628      	mov	r0, r5
}
   2f226:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   2f22a:	f7ff bf17 	b.w	2f05c <free_list_add>

0002f22e <sys_heap_alloc>:
{
   2f22e:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   2f230:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   2f232:	b909      	cbnz	r1, 2f238 <sys_heap_alloc+0xa>
		return NULL;
   2f234:	2000      	movs	r0, #0
}
   2f236:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   2f238:	68ab      	ldr	r3, [r5, #8]
   2f23a:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   2f23e:	d9f9      	bls.n	2f234 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2f240:	310b      	adds	r1, #11
   2f242:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   2f244:	4621      	mov	r1, r4
   2f246:	4628      	mov	r0, r5
   2f248:	f7ff ff59 	bl	2f0fe <alloc_chunk>
	if (c == 0U) {
   2f24c:	4606      	mov	r6, r0
   2f24e:	2800      	cmp	r0, #0
   2f250:	d0f0      	beq.n	2f234 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   2f252:	4601      	mov	r1, r0
   2f254:	4628      	mov	r0, r5
   2f256:	f7ff fefc 	bl	2f052 <chunk_size>
   2f25a:	42a0      	cmp	r0, r4
   2f25c:	d907      	bls.n	2f26e <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   2f25e:	4628      	mov	r0, r5
   2f260:	1932      	adds	r2, r6, r4
   2f262:	f7ff ff99 	bl	2f198 <split_chunks>
		free_list_add(h, c + chunk_sz);
   2f266:	4611      	mov	r1, r2
   2f268:	4628      	mov	r0, r5
   2f26a:	f7ff fef7 	bl	2f05c <free_list_add>
	void *cmem = &buf[c];
   2f26e:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   2f272:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2f274:	8853      	ldrh	r3, [r2, #2]
   2f276:	3004      	adds	r0, #4
   2f278:	f043 0301 	orr.w	r3, r3, #1
   2f27c:	8053      	strh	r3, [r2, #2]
	return mem;
   2f27e:	e7da      	b.n	2f236 <sys_heap_alloc+0x8>

0002f280 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2f280:	2200      	movs	r2, #0
	return list->head;
   2f282:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2f284:	b90b      	cbnz	r3, 2f28a <sys_slist_find_and_remove+0xa>
   2f286:	4618      	mov	r0, r3
   2f288:	4770      	bx	lr
   2f28a:	428b      	cmp	r3, r1
   2f28c:	d110      	bne.n	2f2b0 <sys_slist_find_and_remove+0x30>
	return node->next;
   2f28e:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2f290:	b942      	cbnz	r2, 2f2a4 <sys_slist_find_and_remove+0x24>
   2f292:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   2f294:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   2f296:	4291      	cmp	r1, r2
   2f298:	d100      	bne.n	2f29c <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   2f29a:	6043      	str	r3, [r0, #4]
	parent->next = child;
   2f29c:	2300      	movs	r3, #0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2f29e:	2001      	movs	r0, #1
	parent->next = child;
   2f2a0:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2f2a2:	4770      	bx	lr
	parent->next = child;
   2f2a4:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2f2a6:	6843      	ldr	r3, [r0, #4]
   2f2a8:	4299      	cmp	r1, r3
	list->tail = node;
   2f2aa:	bf08      	it	eq
   2f2ac:	6042      	streq	r2, [r0, #4]
}
   2f2ae:	e7f5      	b.n	2f29c <sys_slist_find_and_remove+0x1c>
	return node->next;
   2f2b0:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2f2b2:	681b      	ldr	r3, [r3, #0]
   2f2b4:	e7e6      	b.n	2f284 <sys_slist_find_and_remove+0x4>

0002f2b6 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2f2b6:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   2f2b8:	f013 0307 	ands.w	r3, r3, #7
   2f2bc:	d105      	bne.n	2f2ca <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   2f2be:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   2f2c0:	2b00      	cmp	r3, #0
   2f2c2:	bf0c      	ite	eq
   2f2c4:	2000      	moveq	r0, #0
   2f2c6:	2003      	movne	r0, #3
   2f2c8:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   2f2ca:	2b02      	cmp	r3, #2
   2f2cc:	d105      	bne.n	2f2da <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   2f2ce:	8bc0      	ldrh	r0, [r0, #30]
   2f2d0:	fab0 f080 	clz	r0, r0
   2f2d4:	0940      	lsrs	r0, r0, #5
   2f2d6:	0080      	lsls	r0, r0, #2
   2f2d8:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   2f2da:	2b01      	cmp	r3, #1
   2f2dc:	d105      	bne.n	2f2ea <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   2f2de:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   2f2e0:	2b00      	cmp	r3, #0
   2f2e2:	bf0c      	ite	eq
   2f2e4:	2000      	moveq	r0, #0
   2f2e6:	2005      	movne	r0, #5
   2f2e8:	4770      	bx	lr
	int evt = EVT_NOP;
   2f2ea:	2000      	movs	r0, #0
}
   2f2ec:	4770      	bx	lr

0002f2ee <validate_args>:
{
   2f2ee:	b510      	push	{r4, lr}
   2f2f0:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   2f2f2:	b100      	cbz	r0, 2f2f6 <validate_args+0x8>
   2f2f4:	b911      	cbnz	r1, 2f2fc <validate_args+0xe>
		return -EINVAL;
   2f2f6:	f06f 0015 	mvn.w	r0, #21
}
   2f2fa:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   2f2fc:	1d08      	adds	r0, r1, #4
   2f2fe:	f000 f82f 	bl	2f360 <sys_notify_validate>
	if ((rv == 0)
   2f302:	2800      	cmp	r0, #0
   2f304:	d1f9      	bne.n	2f2fa <validate_args+0xc>
	    && ((cli->notify.flags
   2f306:	68a3      	ldr	r3, [r4, #8]
   2f308:	2b03      	cmp	r3, #3
   2f30a:	d9f6      	bls.n	2f2fa <validate_args+0xc>
   2f30c:	e7f3      	b.n	2f2f6 <validate_args+0x8>

0002f30e <notify_one>:
{
   2f30e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f312:	460d      	mov	r5, r1
   2f314:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2f316:	4619      	mov	r1, r3
   2f318:	1d28      	adds	r0, r5, #4
{
   2f31a:	4690      	mov	r8, r2
   2f31c:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2f31e:	f7df fa07 	bl	e730 <sys_notify_finalize>
	if (cb) {
   2f322:	4604      	mov	r4, r0
   2f324:	b138      	cbz	r0, 2f336 <notify_one+0x28>
		cb(mgr, cli, state, res);
   2f326:	4633      	mov	r3, r6
   2f328:	4642      	mov	r2, r8
   2f32a:	4629      	mov	r1, r5
   2f32c:	4638      	mov	r0, r7
   2f32e:	46a4      	mov	ip, r4
}
   2f330:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   2f334:	4760      	bx	ip
}
   2f336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002f33a <onoff_manager_init>:
{
   2f33a:	b538      	push	{r3, r4, r5, lr}
   2f33c:	460c      	mov	r4, r1
	if ((mgr == NULL)
   2f33e:	4605      	mov	r5, r0
   2f340:	b158      	cbz	r0, 2f35a <onoff_manager_init+0x20>
	    || (transitions == NULL)
   2f342:	b151      	cbz	r1, 2f35a <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   2f344:	680b      	ldr	r3, [r1, #0]
   2f346:	b143      	cbz	r3, 2f35a <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   2f348:	684b      	ldr	r3, [r1, #4]
   2f34a:	b133      	cbz	r3, 2f35a <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2f34c:	2220      	movs	r2, #32
   2f34e:	2100      	movs	r1, #0
   2f350:	f007 f90a 	bl	36568 <memset>
	return 0;
   2f354:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2f356:	612c      	str	r4, [r5, #16]
}
   2f358:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2f35a:	f06f 0015 	mvn.w	r0, #21
   2f35e:	e7fb      	b.n	2f358 <onoff_manager_init+0x1e>

0002f360 <sys_notify_validate>:
	if (notify == NULL) {
   2f360:	4603      	mov	r3, r0
   2f362:	b140      	cbz	r0, 2f376 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   2f364:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   2f366:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   2f36a:	2a02      	cmp	r2, #2
   2f36c:	d006      	beq.n	2f37c <sys_notify_validate+0x1c>
   2f36e:	2a03      	cmp	r2, #3
   2f370:	d004      	beq.n	2f37c <sys_notify_validate+0x1c>
   2f372:	2a01      	cmp	r2, #1
   2f374:	d005      	beq.n	2f382 <sys_notify_validate+0x22>
   2f376:	f06f 0015 	mvn.w	r0, #21
}
   2f37a:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   2f37c:	681a      	ldr	r2, [r3, #0]
   2f37e:	2a00      	cmp	r2, #0
   2f380:	d0f9      	beq.n	2f376 <sys_notify_validate+0x16>
		notify->result = 0;
   2f382:	2000      	movs	r0, #0
   2f384:	6098      	str	r0, [r3, #8]
   2f386:	4770      	bx	lr

0002f388 <outs>:
{
   2f388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f38c:	4607      	mov	r7, r0
   2f38e:	4688      	mov	r8, r1
   2f390:	4615      	mov	r5, r2
   2f392:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   2f394:	4614      	mov	r4, r2
   2f396:	42b4      	cmp	r4, r6
   2f398:	d305      	bcc.n	2f3a6 <outs+0x1e>
   2f39a:	b10e      	cbz	r6, 2f3a0 <outs+0x18>
	return (int)count;
   2f39c:	1b60      	subs	r0, r4, r5
   2f39e:	e008      	b.n	2f3b2 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   2f3a0:	7823      	ldrb	r3, [r4, #0]
   2f3a2:	2b00      	cmp	r3, #0
   2f3a4:	d0fa      	beq.n	2f39c <outs+0x14>
		int rc = out((int)*sp++, ctx);
   2f3a6:	4641      	mov	r1, r8
   2f3a8:	f814 0b01 	ldrb.w	r0, [r4], #1
   2f3ac:	47b8      	blx	r7
		if (rc < 0) {
   2f3ae:	2800      	cmp	r0, #0
   2f3b0:	daf1      	bge.n	2f396 <outs+0xe>
}
   2f3b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002f3b6 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   2f3b6:	4040      	eors	r0, r0
   2f3b8:	f380 8811 	msr	BASEPRI, r0
   2f3bc:	f04f 0004 	mov.w	r0, #4
   2f3c0:	df02      	svc	2
}
   2f3c2:	4770      	bx	lr

0002f3c4 <assert_print>:

void assert_print(const char *fmt, ...)
{
   2f3c4:	b40f      	push	{r0, r1, r2, r3}
   2f3c6:	b507      	push	{r0, r1, r2, lr}
   2f3c8:	a904      	add	r1, sp, #16
   2f3ca:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   2f3ce:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   2f3d0:	f7ff fe19 	bl	2f006 <vprintk>

	va_end(ap);
}
   2f3d4:	b003      	add	sp, #12
   2f3d6:	f85d eb04 	ldr.w	lr, [sp], #4
   2f3da:	b004      	add	sp, #16
   2f3dc:	4770      	bx	lr

0002f3de <free_space>:
{
   2f3de:	b510      	push	{r4, lr}
	if (buffer->flags & MPSC_PBUF_FULL) {
   2f3e0:	6903      	ldr	r3, [r0, #16]
{
   2f3e2:	4602      	mov	r2, r0
	if (buffer->flags & MPSC_PBUF_FULL) {
   2f3e4:	f013 0008 	ands.w	r0, r3, #8
   2f3e8:	d109      	bne.n	2f3fe <free_space+0x20>
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   2f3ea:	6813      	ldr	r3, [r2, #0]
   2f3ec:	68d4      	ldr	r4, [r2, #12]
   2f3ee:	429c      	cmp	r4, r3
	return true;
   2f3f0:	bf9b      	ittet	ls
   2f3f2:	2001      	movls	r0, #1
	*res = buffer->size - buffer->tmp_wr_idx;
   2f3f4:	6a52      	ldrls	r2, [r2, #36]	; 0x24
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
   2f3f6:	1ae3      	subhi	r3, r4, r3
	*res = buffer->size - buffer->tmp_wr_idx;
   2f3f8:	1ad3      	subls	r3, r2, r3
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
   2f3fa:	600b      	str	r3, [r1, #0]
}
   2f3fc:	bd10      	pop	{r4, pc}
   2f3fe:	2300      	movs	r3, #0
		return false;
   2f400:	4618      	mov	r0, r3
   2f402:	e7fa      	b.n	2f3fa <free_space+0x1c>

0002f404 <get_usage>:
{
   2f404:	b513      	push	{r0, r1, r4, lr}
	if (free_space(buffer, &f)) {
   2f406:	a901      	add	r1, sp, #4
{
   2f408:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
   2f40a:	f7ff ffe8 	bl	2f3de <free_space>
   2f40e:	b120      	cbz	r0, 2f41a <get_usage+0x16>
		f += (buffer->rd_idx - 1);
   2f410:	9b01      	ldr	r3, [sp, #4]
   2f412:	68e2      	ldr	r2, [r4, #12]
   2f414:	3b01      	subs	r3, #1
   2f416:	4413      	add	r3, r2
   2f418:	9301      	str	r3, [sp, #4]
	return buffer->size - 1 - f;
   2f41a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   2f41c:	9b01      	ldr	r3, [sp, #4]
   2f41e:	1ac0      	subs	r0, r0, r3
}
   2f420:	3801      	subs	r0, #1
   2f422:	b002      	add	sp, #8
   2f424:	bd10      	pop	{r4, pc}

0002f426 <idx_inc>:
{
   2f426:	b510      	push	{r4, lr}
   2f428:	4604      	mov	r4, r0
	uint32_t i = idx + val;
   2f42a:	1850      	adds	r0, r2, r1
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   2f42c:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
   2f42e:	6a63      	ldr	r3, [r4, #36]	; 0x24
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   2f430:	07d2      	lsls	r2, r2, #31
   2f432:	d502      	bpl.n	2f43a <idx_inc+0x14>
		return i & (buffer->size - 1);
   2f434:	3b01      	subs	r3, #1
   2f436:	4018      	ands	r0, r3
}
   2f438:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
   2f43a:	4298      	cmp	r0, r3
   2f43c:	bf28      	it	cs
   2f43e:	1ac0      	subcs	r0, r0, r3
   2f440:	e7fa      	b.n	2f438 <idx_inc+0x12>

0002f442 <rd_idx_inc>:
{
   2f442:	b510      	push	{r4, lr}
   2f444:	4604      	mov	r4, r0
   2f446:	460a      	mov	r2, r1
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   2f448:	68c1      	ldr	r1, [r0, #12]
   2f44a:	f7ff ffec 	bl	2f426 <idx_inc>
	buffer->flags &= ~MPSC_PBUF_FULL;
   2f44e:	6923      	ldr	r3, [r4, #16]
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   2f450:	60e0      	str	r0, [r4, #12]
	buffer->flags &= ~MPSC_PBUF_FULL;
   2f452:	f023 0308 	bic.w	r3, r3, #8
   2f456:	6123      	str	r3, [r4, #16]
}
   2f458:	bd10      	pop	{r4, pc}

0002f45a <add_skip_item>:
{
   2f45a:	b538      	push	{r3, r4, r5, lr}
   2f45c:	460d      	mov	r5, r1
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   2f45e:	6a02      	ldr	r2, [r0, #32]
	union mpsc_pbuf_generic skip = {
   2f460:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   2f462:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
   2f464:	f043 0302 	orr.w	r3, r3, #2
{
   2f468:	4604      	mov	r4, r0
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   2f46a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   2f46e:	6801      	ldr	r1, [r0, #0]
   2f470:	462a      	mov	r2, r5
   2f472:	f7ff ffd8 	bl	2f426 <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   2f476:	68e3      	ldr	r3, [r4, #12]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   2f478:	6861      	ldr	r1, [r4, #4]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   2f47a:	4298      	cmp	r0, r3
		buffer->flags |= MPSC_PBUF_FULL;
   2f47c:	bf08      	it	eq
   2f47e:	6923      	ldreq	r3, [r4, #16]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   2f480:	6020      	str	r0, [r4, #0]
		buffer->flags |= MPSC_PBUF_FULL;
   2f482:	bf08      	it	eq
   2f484:	f043 0308 	orreq.w	r3, r3, #8
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   2f488:	462a      	mov	r2, r5
   2f48a:	4620      	mov	r0, r4
		buffer->flags |= MPSC_PBUF_FULL;
   2f48c:	bf08      	it	eq
   2f48e:	6123      	streq	r3, [r4, #16]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   2f490:	f7ff ffc9 	bl	2f426 <idx_inc>
   2f494:	6060      	str	r0, [r4, #4]
}
   2f496:	bd38      	pop	{r3, r4, r5, pc}

0002f498 <drop_item_locked>:
{
   2f498:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   2f49c:	68c7      	ldr	r7, [r0, #12]
   2f49e:	6a06      	ldr	r6, [r0, #32]
{
   2f4a0:	469b      	mov	fp, r3
	if (item->hdr.busy && !item->hdr.valid) {
   2f4a2:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
{
   2f4a6:	4604      	mov	r4, r0
	if (item->hdr.busy && !item->hdr.valid) {
   2f4a8:	f003 0303 	and.w	r3, r3, #3
   2f4ac:	2b02      	cmp	r3, #2
{
   2f4ae:	4688      	mov	r8, r1
   2f4b0:	4691      	mov	r9, r2
   2f4b2:	f04f 0300 	mov.w	r3, #0
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   2f4b6:	eb06 0a87 	add.w	sl, r6, r7, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   2f4ba:	d009      	beq.n	2f4d0 <drop_item_locked+0x38>
	*item_to_drop = NULL;
   2f4bc:	6013      	str	r3, [r2, #0]
	*tmp_wr_idx_shift = 0;
   2f4be:	f8cb 3000 	str.w	r3, [fp]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE)) {
   2f4c2:	6923      	ldr	r3, [r4, #16]
   2f4c4:	0799      	lsls	r1, r3, #30
   2f4c6:	d410      	bmi.n	2f4ea <drop_item_locked+0x52>
		return false;
   2f4c8:	2000      	movs	r0, #0
}
   2f4ca:	b003      	add	sp, #12
   2f4cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return item->skip.len;
   2f4d0:	f856 1027 	ldr.w	r1, [r6, r7, lsl #2]
	*item_to_drop = NULL;
   2f4d4:	6013      	str	r3, [r2, #0]
	if (skip_wlen) {
   2f4d6:	0889      	lsrs	r1, r1, #2
	*tmp_wr_idx_shift = 0;
   2f4d8:	f8cb 3000 	str.w	r3, [fp]
	if (skip_wlen) {
   2f4dc:	d0f1      	beq.n	2f4c2 <drop_item_locked+0x2a>
		rd_idx_inc(buffer, skip_wlen);
   2f4de:	f7ff ffb0 	bl	2f442 <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   2f4e2:	68e3      	ldr	r3, [r4, #12]
   2f4e4:	60a3      	str	r3, [r4, #8]
		return true;
   2f4e6:	2001      	movs	r0, #1
   2f4e8:	e7ef      	b.n	2f4ca <drop_item_locked+0x32>
	uint32_t rd_wlen = buffer->get_wlen(item);
   2f4ea:	69e3      	ldr	r3, [r4, #28]
   2f4ec:	4650      	mov	r0, sl
   2f4ee:	4798      	blx	r3
	return item->hdr.valid;
   2f4f0:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
	uint32_t rd_wlen = buffer->get_wlen(item);
   2f4f4:	4605      	mov	r5, r0
	if (!is_valid(item)) {
   2f4f6:	07da      	lsls	r2, r3, #31
   2f4f8:	d5e6      	bpl.n	2f4c8 <drop_item_locked+0x30>
	} else if (item->hdr.busy) {
   2f4fa:	f013 0302 	ands.w	r3, r3, #2
   2f4fe:	d01d      	beq.n	2f53c <drop_item_locked+0xa4>
		if (free_wlen) {
   2f500:	f1b8 0f00 	cmp.w	r8, #0
   2f504:	d003      	beq.n	2f50e <drop_item_locked+0x76>
			add_skip_item(buffer, free_wlen);
   2f506:	4641      	mov	r1, r8
   2f508:	4620      	mov	r0, r4
   2f50a:	f7ff ffa6 	bl	2f45a <add_skip_item>
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   2f50e:	6861      	ldr	r1, [r4, #4]
   2f510:	462a      	mov	r2, r5
   2f512:	4620      	mov	r0, r4
   2f514:	f7ff ff87 	bl	2f426 <idx_inc>
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   2f518:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
   2f51c:	4299      	cmp	r1, r3
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   2f51e:	6060      	str	r0, [r4, #4]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   2f520:	d104      	bne.n	2f52c <drop_item_locked+0x94>
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, rd_wlen);
   2f522:	462a      	mov	r2, r5
   2f524:	4620      	mov	r0, r4
   2f526:	f7ff ff7e 	bl	2f426 <idx_inc>
   2f52a:	60a0      	str	r0, [r4, #8]
		buffer->tmp_wr_idx = buffer->tmp_rd_idx;
   2f52c:	68a3      	ldr	r3, [r4, #8]
   2f52e:	6023      	str	r3, [r4, #0]
		buffer->rd_idx = buffer->tmp_rd_idx;
   2f530:	60e3      	str	r3, [r4, #12]
		buffer->flags |= MPSC_PBUF_FULL;
   2f532:	6923      	ldr	r3, [r4, #16]
   2f534:	f043 0308 	orr.w	r3, r3, #8
   2f538:	6123      	str	r3, [r4, #16]
   2f53a:	e7d4      	b.n	2f4e6 <drop_item_locked+0x4e>
		rd_idx_inc(buffer, rd_wlen);
   2f53c:	4601      	mov	r1, r0
   2f53e:	4620      	mov	r0, r4
   2f540:	9301      	str	r3, [sp, #4]
   2f542:	f7ff ff7e 	bl	2f442 <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   2f546:	68e2      	ldr	r2, [r4, #12]
   2f548:	60a2      	str	r2, [r4, #8]
		if (free_wlen) {
   2f54a:	f1b8 0f00 	cmp.w	r8, #0
   2f54e:	d004      	beq.n	2f55a <drop_item_locked+0xc2>
			buffer->buf[buffer->tmp_wr_idx] = invalid.raw;
   2f550:	6821      	ldr	r1, [r4, #0]
   2f552:	6a22      	ldr	r2, [r4, #32]
   2f554:	9b01      	ldr	r3, [sp, #4]
   2f556:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		*tmp_wr_idx_shift = rd_wlen + free_wlen;
   2f55a:	eb05 0208 	add.w	r2, r5, r8
   2f55e:	f8cb 2000 	str.w	r2, [fp]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
   2f562:	6821      	ldr	r1, [r4, #0]
   2f564:	4620      	mov	r0, r4
   2f566:	f7ff ff5e 	bl	2f426 <idx_inc>
		buffer->flags |= MPSC_PBUF_FULL;
   2f56a:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
   2f56c:	6020      	str	r0, [r4, #0]
		buffer->flags |= MPSC_PBUF_FULL;
   2f56e:	f043 0308 	orr.w	r3, r3, #8
   2f572:	6123      	str	r3, [r4, #16]
		item->hdr.valid = 0;
   2f574:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
   2f578:	f36f 0300 	bfc	r3, #0, #1
   2f57c:	f806 3027 	strb.w	r3, [r6, r7, lsl #2]
		*item_to_drop = item;
   2f580:	f8c9 a000 	str.w	sl, [r9]
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
   2f584:	e7af      	b.n	2f4e6 <drop_item_locked+0x4e>

0002f586 <post_drop_action>:
{
   2f586:	b570      	push	{r4, r5, r6, lr}
   2f588:	4604      	mov	r4, r0
   2f58a:	4615      	mov	r5, r2
	uint32_t cmp_tmp_wr_idx = idx_inc(buffer, prev_tmp_wr_idx, tmp_wr_idx_shift);
   2f58c:	f7ff ff4b 	bl	2f426 <idx_inc>
	if (cmp_tmp_wr_idx == buffer->tmp_wr_idx) {
   2f590:	6823      	ldr	r3, [r4, #0]
   2f592:	4283      	cmp	r3, r0
   2f594:	d105      	bne.n	2f5a2 <post_drop_action+0x1c>
		buffer->flags &= ~MPSC_PBUF_FULL;
   2f596:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
   2f598:	6021      	str	r1, [r4, #0]
		buffer->flags &= ~MPSC_PBUF_FULL;
   2f59a:	f023 0308 	bic.w	r3, r3, #8
   2f59e:	6123      	str	r3, [r4, #16]
}
   2f5a0:	bd70      	pop	{r4, r5, r6, pc}
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
   2f5a2:	6a22      	ldr	r2, [r4, #32]
	union mpsc_pbuf_generic skip = {
   2f5a4:	00ab      	lsls	r3, r5, #2
   2f5a6:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
   2f5aa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->wr_idx = idx_inc(buffer,
   2f5ae:	6861      	ldr	r1, [r4, #4]
   2f5b0:	462a      	mov	r2, r5
   2f5b2:	4620      	mov	r0, r4
   2f5b4:	f7ff ff37 	bl	2f426 <idx_inc>
   2f5b8:	6060      	str	r0, [r4, #4]
   2f5ba:	e7f1      	b.n	2f5a0 <post_drop_action+0x1a>

0002f5bc <max_utilization_update>:
{
   2f5bc:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   2f5be:	6903      	ldr	r3, [r0, #16]
{
   2f5c0:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   2f5c2:	075b      	lsls	r3, r3, #29
   2f5c4:	d506      	bpl.n	2f5d4 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   2f5c6:	6a85      	ldr	r5, [r0, #40]	; 0x28
   2f5c8:	f7ff ff1c 	bl	2f404 <get_usage>
   2f5cc:	4285      	cmp	r5, r0
   2f5ce:	bf2c      	ite	cs
   2f5d0:	62a5      	strcs	r5, [r4, #40]	; 0x28
   2f5d2:	62a0      	strcc	r0, [r4, #40]	; 0x28
}
   2f5d4:	bd38      	pop	{r3, r4, r5, pc}

0002f5d6 <mpsc_pbuf_is_pending>:
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
   2f5d6:	6902      	ldr	r2, [r0, #16]
   2f5d8:	6883      	ldr	r3, [r0, #8]
   2f5da:	0712      	lsls	r2, r2, #28
   2f5dc:	d402      	bmi.n	2f5e4 <mpsc_pbuf_is_pending+0xe>
   2f5de:	6842      	ldr	r2, [r0, #4]
   2f5e0:	429a      	cmp	r2, r3
   2f5e2:	d200      	bcs.n	2f5e6 <mpsc_pbuf_is_pending+0x10>
		*res = buffer->size - buffer->tmp_rd_idx;
   2f5e4:	6a42      	ldr	r2, [r0, #36]	; 0x24
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   2f5e6:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   2f5e8:	1e18      	subs	r0, r3, #0
   2f5ea:	bf18      	it	ne
   2f5ec:	2001      	movne	r0, #1
   2f5ee:	4770      	bx	lr

0002f5f0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   2f5f0:	4770      	bx	lr

0002f5f2 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   2f5f2:	2806      	cmp	r0, #6
   2f5f4:	d108      	bne.n	2f608 <pm_state_set+0x16>
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   2f5f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   2f5fa:	2201      	movs	r2, #1
   2f5fc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   2f600:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
   2f604:	bf20      	wfe
    while (true)
   2f606:	e7fd      	b.n	2f604 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   2f608:	4770      	bx	lr

0002f60a <pm_state_exit_post_ops>:
   2f60a:	2300      	movs	r3, #0
   2f60c:	f383 8811 	msr	BASEPRI, r3
   2f610:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   2f614:	4770      	bx	lr

0002f616 <soc_secure_mem_read>:
	__ASSERT(result == 0, "GPIO service error (%d)", result);
}
#endif /* NRF_GPIO_HAS_SEL */

int soc_secure_mem_read(void *dst, void *src, size_t len)
{
   2f616:	b507      	push	{r0, r1, r2, lr}
	enum tfm_platform_err_t status;
	uint32_t result;

	status = tfm_platform_mem_read(dst, (uintptr_t)src, len, &result);
   2f618:	ab01      	add	r3, sp, #4
   2f61a:	f005 fdd8 	bl	351ce <tfm_platform_mem_read>

	switch (status) {
   2f61e:	2802      	cmp	r0, #2
   2f620:	d00a      	beq.n	2f638 <soc_secure_mem_read+0x22>
   2f622:	2803      	cmp	r0, #3
   2f624:	d00b      	beq.n	2f63e <soc_secure_mem_read+0x28>
   2f626:	b968      	cbnz	r0, 2f644 <soc_secure_mem_read+0x2e>
	case TFM_PLATFORM_ERR_INVALID_PARAM:
		return -EINVAL;
	case TFM_PLATFORM_ERR_NOT_SUPPORTED:
		return -ENOTSUP;
	case TFM_PLATFORM_ERR_SUCCESS:
		if (result == 0) {
   2f628:	9801      	ldr	r0, [sp, #4]
   2f62a:	3800      	subs	r0, #0
   2f62c:	bf18      	it	ne
   2f62e:	2001      	movne	r0, #1
   2f630:	4240      	negs	r0, r0
		}
		/* Fallthrough */
	default:
		return -EPERM;
	}
}
   2f632:	b003      	add	sp, #12
   2f634:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   2f638:	f06f 0015 	mvn.w	r0, #21
   2f63c:	e7f9      	b.n	2f632 <soc_secure_mem_read+0x1c>
	switch (status) {
   2f63e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2f642:	e7f6      	b.n	2f632 <soc_secure_mem_read+0x1c>
		return -EPERM;
   2f644:	f04f 30ff 	mov.w	r0, #4294967295
   2f648:	e7f3      	b.n	2f632 <soc_secure_mem_read+0x1c>

0002f64a <nvs_flash_rd>:
{
   2f64a:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   2f64c:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2f64e:	8984      	ldrh	r4, [r0, #12]
   2f650:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   2f652:	fa16 f181 	uxtah	r1, r6, r1
   2f656:	fb05 1104 	mla	r1, r5, r4, r1
	rc = flash_read(fs->flash_device, offset, data, len);
   2f65a:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return api->read(dev, offset, data, len);
   2f65c:	6884      	ldr	r4, [r0, #8]
   2f65e:	6824      	ldr	r4, [r4, #0]
   2f660:	46a4      	mov	ip, r4
}
   2f662:	bc70      	pop	{r4, r5, r6}
   2f664:	4760      	bx	ip

0002f666 <nvs_sector_advance>:
	*addr += (1 << ADDR_SECT_SHIFT);
   2f666:	680b      	ldr	r3, [r1, #0]
   2f668:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   2f66c:	600b      	str	r3, [r1, #0]
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   2f66e:	89c0      	ldrh	r0, [r0, #14]
   2f670:	0c1a      	lsrs	r2, r3, #16
   2f672:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   2f676:	bf04      	itt	eq
   2f678:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   2f67c:	600b      	streq	r3, [r1, #0]
}
   2f67e:	4770      	bx	lr

0002f680 <nvs_flash_block_cmp>:
{
   2f680:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2f684:	4681      	mov	r9, r0
   2f686:	460e      	mov	r6, r1
   2f688:	4617      	mov	r7, r2
   2f68a:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2f68c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
   2f68e:	b089      	sub	sp, #36	; 0x24
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2f690:	681d      	ldr	r5, [r3, #0]
   2f692:	426d      	negs	r5, r5
	block_size =
   2f694:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   2f698:	b91c      	cbnz	r4, 2f6a2 <nvs_flash_block_cmp+0x22>
	return 0;
   2f69a:	4620      	mov	r0, r4
}
   2f69c:	b009      	add	sp, #36	; 0x24
   2f69e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   2f6a2:	42ac      	cmp	r4, r5
   2f6a4:	46a0      	mov	r8, r4
   2f6a6:	bf28      	it	cs
   2f6a8:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   2f6aa:	466a      	mov	r2, sp
   2f6ac:	4643      	mov	r3, r8
   2f6ae:	4631      	mov	r1, r6
   2f6b0:	4648      	mov	r0, r9
   2f6b2:	f7ff ffca 	bl	2f64a <nvs_flash_rd>
		if (rc) {
   2f6b6:	2800      	cmp	r0, #0
   2f6b8:	d1f0      	bne.n	2f69c <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   2f6ba:	4642      	mov	r2, r8
   2f6bc:	4669      	mov	r1, sp
   2f6be:	4638      	mov	r0, r7
   2f6c0:	f006 ff22 	bl	36508 <memcmp>
		if (rc) {
   2f6c4:	b920      	cbnz	r0, 2f6d0 <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   2f6c6:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   2f6ca:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   2f6cc:	4447      	add	r7, r8
   2f6ce:	e7e3      	b.n	2f698 <nvs_flash_block_cmp+0x18>
			return 1;
   2f6d0:	2001      	movs	r0, #1
   2f6d2:	e7e3      	b.n	2f69c <nvs_flash_block_cmp+0x1c>

0002f6d4 <nvs_ate_crc8_update>:
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2f6d4:	4601      	mov	r1, r0
{
   2f6d6:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2f6d8:	2207      	movs	r2, #7
{
   2f6da:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2f6dc:	20ff      	movs	r0, #255	; 0xff
   2f6de:	f7df f853 	bl	e788 <crc8_ccitt>
	entry->crc8 = crc8;
   2f6e2:	71e0      	strb	r0, [r4, #7]
}
   2f6e4:	bd10      	pop	{r4, pc}

0002f6e6 <nvs_flash_cmp_const>:
{
   2f6e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f6ea:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2f6ec:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
   2f6ee:	b088      	sub	sp, #32
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2f6f0:	681d      	ldr	r5, [r3, #0]
{
   2f6f2:	4607      	mov	r7, r0
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2f6f4:	426d      	negs	r5, r5
	block_size =
   2f6f6:	f005 0520 	and.w	r5, r5, #32
{
   2f6fa:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   2f6fc:	4668      	mov	r0, sp
{
   2f6fe:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   2f700:	462a      	mov	r2, r5
   2f702:	f006 ff31 	bl	36568 <memset>
	while (len) {
   2f706:	b91c      	cbnz	r4, 2f710 <nvs_flash_cmp_const+0x2a>
	return 0;
   2f708:	4620      	mov	r0, r4
}
   2f70a:	b008      	add	sp, #32
   2f70c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   2f710:	42ac      	cmp	r4, r5
   2f712:	46a0      	mov	r8, r4
   2f714:	bf28      	it	cs
   2f716:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   2f718:	466a      	mov	r2, sp
   2f71a:	4643      	mov	r3, r8
   2f71c:	4631      	mov	r1, r6
   2f71e:	4638      	mov	r0, r7
   2f720:	f7ff ffae 	bl	2f680 <nvs_flash_block_cmp>
		if (rc) {
   2f724:	2800      	cmp	r0, #0
   2f726:	d1f0      	bne.n	2f70a <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   2f728:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   2f72c:	4446      	add	r6, r8
   2f72e:	e7ea      	b.n	2f706 <nvs_flash_cmp_const+0x20>

0002f730 <nvs_flash_erase_sector>:
{
   2f730:	b538      	push	{r3, r4, r5, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2f732:	8982      	ldrh	r2, [r0, #12]
   2f734:	6803      	ldr	r3, [r0, #0]
	addr &= ADDR_SECT_MASK;
   2f736:	0c0d      	lsrs	r5, r1, #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2f738:	0c09      	lsrs	r1, r1, #16
{
   2f73a:	4604      	mov	r4, r0
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2f73c:	fb02 3101 	mla	r1, r2, r1, r3
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   2f740:	6a80      	ldr	r0, [r0, #40]	; 0x28
	addr &= ADDR_SECT_MASK;
   2f742:	042d      	lsls	r5, r5, #16
	rc = api->erase(dev, offset, size);
   2f744:	6883      	ldr	r3, [r0, #8]
   2f746:	689b      	ldr	r3, [r3, #8]
   2f748:	4798      	blx	r3
	if (rc) {
   2f74a:	b950      	cbnz	r0, 2f762 <nvs_flash_erase_sector+0x32>
	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   2f74c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   2f74e:	4629      	mov	r1, r5
   2f750:	4620      	mov	r0, r4
   2f752:	89a3      	ldrh	r3, [r4, #12]
   2f754:	7912      	ldrb	r2, [r2, #4]
   2f756:	f7ff ffc6 	bl	2f6e6 <nvs_flash_cmp_const>
		rc = -ENXIO;
   2f75a:	2800      	cmp	r0, #0
   2f75c:	bf18      	it	ne
   2f75e:	f06f 0005 	mvnne.w	r0, #5
}
   2f762:	bd38      	pop	{r3, r4, r5, pc}

0002f764 <z_log_msg_static_create.constprop.0>:
   2f764:	2300      	movs	r3, #0
   2f766:	f7e0 bd65 	b.w	10234 <z_impl_z_log_msg_static_create>

0002f76a <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   2f76a:	7803      	ldrb	r3, [r0, #0]
   2f76c:	2b01      	cmp	r3, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   2f76e:	bf81      	itttt	hi
   2f770:	f101 31ff 	addhi.w	r1, r1, #4294967295
   2f774:	18c9      	addhi	r1, r1, r3
   2f776:	425b      	neghi	r3, r3
   2f778:	4019      	andhi	r1, r3
}
   2f77a:	4608      	mov	r0, r1
   2f77c:	4770      	bx	lr

0002f77e <nvs_ate_valid>:
{
   2f77e:	b570      	push	{r4, r5, r6, lr}
   2f780:	460c      	mov	r4, r1
   2f782:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2f784:	2108      	movs	r1, #8
   2f786:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   2f788:	f7ff ffef 	bl	2f76a <nvs_al_size.isra.0>
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2f78c:	2207      	movs	r2, #7
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2f78e:	4606      	mov	r6, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2f790:	4621      	mov	r1, r4
   2f792:	20ff      	movs	r0, #255	; 0xff
   2f794:	f7de fff8 	bl	e788 <crc8_ccitt>
	if (crc8 == entry->crc8) {
   2f798:	79e3      	ldrb	r3, [r4, #7]
   2f79a:	4283      	cmp	r3, r0
   2f79c:	d107      	bne.n	2f7ae <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   2f79e:	89aa      	ldrh	r2, [r5, #12]
   2f7a0:	8863      	ldrh	r3, [r4, #2]
   2f7a2:	1b90      	subs	r0, r2, r6
	if ((nvs_ate_crc8_check(entry)) ||
   2f7a4:	4283      	cmp	r3, r0
   2f7a6:	bf2c      	ite	cs
   2f7a8:	2000      	movcs	r0, #0
   2f7aa:	2001      	movcc	r0, #1
}
   2f7ac:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   2f7ae:	2000      	movs	r0, #0
   2f7b0:	e7fc      	b.n	2f7ac <nvs_ate_valid+0x2e>

0002f7b2 <nvs_close_ate_valid>:
{
   2f7b2:	b538      	push	{r3, r4, r5, lr}
   2f7b4:	4605      	mov	r5, r0
   2f7b6:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   2f7b8:	f7ff ffe1 	bl	2f77e <nvs_ate_valid>
   2f7bc:	b1a0      	cbz	r0, 2f7e8 <nvs_close_ate_valid+0x36>
   2f7be:	88a0      	ldrh	r0, [r4, #4]
   2f7c0:	b998      	cbnz	r0, 2f7ea <nvs_close_ate_valid+0x38>
   2f7c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2f7c6:	8822      	ldrh	r2, [r4, #0]
   2f7c8:	429a      	cmp	r2, r3
   2f7ca:	d10d      	bne.n	2f7e8 <nvs_close_ate_valid+0x36>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2f7cc:	2108      	movs	r1, #8
   2f7ce:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   2f7d0:	f7ff ffcb 	bl	2f76a <nvs_al_size.isra.0>
	if ((fs->sector_size - entry->offset) % ate_size) {
   2f7d4:	8862      	ldrh	r2, [r4, #2]
   2f7d6:	89ab      	ldrh	r3, [r5, #12]
   2f7d8:	1a9b      	subs	r3, r3, r2
   2f7da:	fbb3 f2f0 	udiv	r2, r3, r0
   2f7de:	fb02 3010 	mls	r0, r2, r0, r3
   2f7e2:	fab0 f080 	clz	r0, r0
   2f7e6:	0940      	lsrs	r0, r0, #5
}
   2f7e8:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   2f7ea:	2000      	movs	r0, #0
   2f7ec:	e7fc      	b.n	2f7e8 <nvs_close_ate_valid+0x36>

0002f7ee <nvs_prev_ate>:
{
   2f7ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2f7f0:	4604      	mov	r4, r0
   2f7f2:	460d      	mov	r5, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2f7f4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   2f7f6:	2108      	movs	r1, #8
   2f7f8:	f7ff ffb7 	bl	2f76a <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2f7fc:	2308      	movs	r3, #8
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2f7fe:	4607      	mov	r7, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2f800:	6829      	ldr	r1, [r5, #0]
   2f802:	4620      	mov	r0, r4
   2f804:	f7ff ff21 	bl	2f64a <nvs_flash_rd>
	if (rc) {
   2f808:	4606      	mov	r6, r0
   2f80a:	2800      	cmp	r0, #0
   2f80c:	d136      	bne.n	2f87c <nvs_prev_ate+0x8e>
	*addr += ate_size;
   2f80e:	682b      	ldr	r3, [r5, #0]
   2f810:	443b      	add	r3, r7
   2f812:	602b      	str	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   2f814:	89a2      	ldrh	r2, [r4, #12]
   2f816:	b299      	uxth	r1, r3
   2f818:	1bd2      	subs	r2, r2, r7
   2f81a:	4291      	cmp	r1, r2
   2f81c:	d12e      	bne.n	2f87c <nvs_prev_ate+0x8e>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   2f81e:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   2f820:	bf09      	itett	eq
   2f822:	89e2      	ldrheq	r2, [r4, #14]
		*addr -= (1 << ADDR_SECT_SHIFT);
   2f824:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   2f828:	f102 32ff 	addeq.w	r2, r2, #4294967295
   2f82c:	eb03 4102 	addeq.w	r1, r3, r2, lsl #16
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2f830:	4620      	mov	r0, r4
   2f832:	2308      	movs	r3, #8
   2f834:	466a      	mov	r2, sp
   2f836:	6029      	str	r1, [r5, #0]
   2f838:	f7ff ff07 	bl	2f64a <nvs_flash_rd>
	if (rc) {
   2f83c:	b9e8      	cbnz	r0, 2f87a <nvs_prev_ate+0x8c>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   2f83e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2f840:	791a      	ldrb	r2, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2f842:	466b      	mov	r3, sp
		if (data8[i] != value) {
   2f844:	f813 1b01 	ldrb.w	r1, [r3], #1
   2f848:	428a      	cmp	r2, r1
   2f84a:	d10c      	bne.n	2f866 <nvs_prev_ate+0x78>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2f84c:	3001      	adds	r0, #1
   2f84e:	2808      	cmp	r0, #8
   2f850:	d1f8      	bne.n	2f844 <nvs_prev_ate+0x56>
		*addr = fs->ate_wra;
   2f852:	6863      	ldr	r3, [r4, #4]
   2f854:	e005      	b.n	2f862 <nvs_prev_ate+0x74>
		(*addr) &= ADDR_SECT_MASK;
   2f856:	682b      	ldr	r3, [r5, #0]
		(*addr) += close_ate.offset;
   2f858:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		(*addr) &= ADDR_SECT_MASK;
   2f85c:	0c1b      	lsrs	r3, r3, #16
   2f85e:	041b      	lsls	r3, r3, #16
		(*addr) += close_ate.offset;
   2f860:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   2f862:	602b      	str	r3, [r5, #0]
		return 0;
   2f864:	e00a      	b.n	2f87c <nvs_prev_ate+0x8e>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   2f866:	4669      	mov	r1, sp
   2f868:	4620      	mov	r0, r4
   2f86a:	f7ff ffa2 	bl	2f7b2 <nvs_close_ate_valid>
   2f86e:	2800      	cmp	r0, #0
   2f870:	d1f1      	bne.n	2f856 <nvs_prev_ate+0x68>
	return nvs_recover_last_ate(fs, addr);
   2f872:	4629      	mov	r1, r5
   2f874:	4620      	mov	r0, r4
   2f876:	f7df fe21 	bl	f4bc <nvs_recover_last_ate>
   2f87a:	4606      	mov	r6, r0
}
   2f87c:	4630      	mov	r0, r6
   2f87e:	b003      	add	sp, #12
   2f880:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002f882 <nvs_flash_al_wrt>:
{
   2f882:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2f886:	4607      	mov	r7, r0
   2f888:	4690      	mov	r8, r2
	if (!len) {
   2f88a:	461e      	mov	r6, r3
{
   2f88c:	b089      	sub	sp, #36	; 0x24
	if (!len) {
   2f88e:	b91b      	cbnz	r3, 2f898 <nvs_flash_al_wrt+0x16>
		return 0;
   2f890:	2000      	movs	r0, #0
}
   2f892:	b009      	add	sp, #36	; 0x24
   2f894:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	offset += addr & ADDR_OFFS_MASK;
   2f898:	683c      	ldr	r4, [r7, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2f89a:	8983      	ldrh	r3, [r0, #12]
   2f89c:	0c08      	lsrs	r0, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   2f89e:	fa14 f181 	uxtah	r1, r4, r1
   2f8a2:	fb00 1403 	mla	r4, r0, r3, r1
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   2f8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2f8a8:	681d      	ldr	r5, [r3, #0]
   2f8aa:	426d      	negs	r5, r5
	if (blen > 0) {
   2f8ac:	4035      	ands	r5, r6
   2f8ae:	d00c      	beq.n	2f8ca <nvs_flash_al_wrt+0x48>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   2f8b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	rc = api->write(dev, offset, data, len);
   2f8b2:	6883      	ldr	r3, [r0, #8]
   2f8b4:	4621      	mov	r1, r4
   2f8b6:	f8d3 9004 	ldr.w	r9, [r3, #4]
   2f8ba:	462b      	mov	r3, r5
   2f8bc:	47c8      	blx	r9
		if (rc) {
   2f8be:	2800      	cmp	r0, #0
   2f8c0:	d1e7      	bne.n	2f892 <nvs_flash_al_wrt+0x10>
	if (len) {
   2f8c2:	1b76      	subs	r6, r6, r5
   2f8c4:	d0e4      	beq.n	2f890 <nvs_flash_al_wrt+0xe>
		offset += blen;
   2f8c6:	442c      	add	r4, r5
		data8 += blen;
   2f8c8:	44a8      	add	r8, r5
		memcpy(buf, data8, len);
   2f8ca:	2320      	movs	r3, #32
   2f8cc:	4632      	mov	r2, r6
   2f8ce:	4641      	mov	r1, r8
   2f8d0:	4668      	mov	r0, sp
   2f8d2:	f006 fe36 	bl	36542 <__memcpy_chk>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   2f8d6:	6afd      	ldr	r5, [r7, #44]	; 0x2c
   2f8d8:	eb0d 0006 	add.w	r0, sp, r6
   2f8dc:	682a      	ldr	r2, [r5, #0]
   2f8de:	7929      	ldrb	r1, [r5, #4]
   2f8e0:	1b92      	subs	r2, r2, r6
   2f8e2:	f006 fe41 	bl	36568 <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   2f8e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
				 fs->flash_parameters->write_block_size);
   2f8e8:	682b      	ldr	r3, [r5, #0]
   2f8ea:	6882      	ldr	r2, [r0, #8]
   2f8ec:	4621      	mov	r1, r4
   2f8ee:	6855      	ldr	r5, [r2, #4]
   2f8f0:	466a      	mov	r2, sp
   2f8f2:	47a8      	blx	r5
	return rc;
   2f8f4:	e7cd      	b.n	2f892 <nvs_flash_al_wrt+0x10>

0002f8f6 <nvs_flash_ate_wrt>:
{
   2f8f6:	b510      	push	{r4, lr}
   2f8f8:	460a      	mov	r2, r1
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   2f8fa:	2308      	movs	r3, #8
   2f8fc:	6841      	ldr	r1, [r0, #4]
{
   2f8fe:	4604      	mov	r4, r0
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   2f900:	f7ff ffbf 	bl	2f882 <nvs_flash_al_wrt>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   2f904:	2108      	movs	r1, #8
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   2f906:	4602      	mov	r2, r0
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   2f908:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2f90a:	f7ff ff2e 	bl	2f76a <nvs_al_size.isra.0>
   2f90e:	6863      	ldr	r3, [r4, #4]
   2f910:	1a1b      	subs	r3, r3, r0
   2f912:	6063      	str	r3, [r4, #4]
}
   2f914:	4610      	mov	r0, r2
   2f916:	bd10      	pop	{r4, pc}

0002f918 <nvs_add_gc_done_ate>:
	gc_done_ate.id = 0xffff;
   2f918:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
   2f91c:	b513      	push	{r0, r1, r4, lr}
	gc_done_ate.id = 0xffff;
   2f91e:	f8ad 3000 	strh.w	r3, [sp]
	gc_done_ate.len = 0U;
   2f922:	2300      	movs	r3, #0
{
   2f924:	4604      	mov	r4, r0
	gc_done_ate.len = 0U;
   2f926:	f8ad 3004 	strh.w	r3, [sp, #4]
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   2f92a:	6883      	ldr	r3, [r0, #8]
	nvs_ate_crc8_update(&gc_done_ate);
   2f92c:	4668      	mov	r0, sp
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   2f92e:	f8ad 3002 	strh.w	r3, [sp, #2]
	nvs_ate_crc8_update(&gc_done_ate);
   2f932:	f7ff fecf 	bl	2f6d4 <nvs_ate_crc8_update>
	return nvs_flash_ate_wrt(fs, &gc_done_ate);
   2f936:	4669      	mov	r1, sp
   2f938:	4620      	mov	r0, r4
   2f93a:	f7ff ffdc 	bl	2f8f6 <nvs_flash_ate_wrt>
}
   2f93e:	b002      	add	sp, #8
   2f940:	bd10      	pop	{r4, pc}

0002f942 <nvs_gc>:
{
   2f942:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2f946:	2108      	movs	r1, #8
{
   2f948:	b095      	sub	sp, #84	; 0x54
   2f94a:	4604      	mov	r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2f94c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   2f94e:	f7ff ff0c 	bl	2f76a <nvs_al_size.isra.0>
   2f952:	4605      	mov	r5, r0
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   2f954:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &sec_addr);
   2f956:	4620      	mov	r0, r4
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   2f958:	0c1b      	lsrs	r3, r3, #16
   2f95a:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &sec_addr);
   2f95c:	a903      	add	r1, sp, #12
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   2f95e:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &sec_addr);
   2f960:	f7ff fe81 	bl	2f666 <nvs_sector_advance>
	gc_addr = sec_addr + fs->sector_size - ate_size;
   2f964:	f8dd b00c 	ldr.w	fp, [sp, #12]
   2f968:	89a6      	ldrh	r6, [r4, #12]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2f96a:	aa06      	add	r2, sp, #24
	gc_addr = sec_addr + fs->sector_size - ate_size;
   2f96c:	445e      	add	r6, fp
   2f96e:	1b76      	subs	r6, r6, r5
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2f970:	2308      	movs	r3, #8
   2f972:	4631      	mov	r1, r6
   2f974:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
   2f976:	9604      	str	r6, [sp, #16]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2f978:	f7ff fe67 	bl	2f64a <nvs_flash_rd>
	if (rc < 0) {
   2f97c:	1e02      	subs	r2, r0, #0
   2f97e:	f2c0 80a9 	blt.w	2fad4 <nvs_gc+0x192>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   2f982:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2f984:	aa06      	add	r2, sp, #24
   2f986:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2f988:	2300      	movs	r3, #0
		if (data8[i] != value) {
   2f98a:	f812 0b01 	ldrb.w	r0, [r2], #1
   2f98e:	4281      	cmp	r1, r0
   2f990:	f040 808f 	bne.w	2fab2 <nvs_gc+0x170>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2f994:	3301      	adds	r3, #1
   2f996:	2b08      	cmp	r3, #8
   2f998:	d1f7      	bne.n	2f98a <nvs_gc+0x48>
	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
   2f99a:	68a3      	ldr	r3, [r4, #8]
   2f99c:	6862      	ldr	r2, [r4, #4]
   2f99e:	442b      	add	r3, r5
   2f9a0:	429a      	cmp	r2, r3
   2f9a2:	d27e      	bcs.n	2faa2 <nvs_gc+0x160>
	rc = nvs_flash_erase_sector(fs, sec_addr);
   2f9a4:	4659      	mov	r1, fp
   2f9a6:	4620      	mov	r0, r4
   2f9a8:	f7ff fec2 	bl	2f730 <nvs_flash_erase_sector>
   2f9ac:	4602      	mov	r2, r0
	if (rc) {
   2f9ae:	e091      	b.n	2fad4 <nvs_gc+0x192>
		gc_addr += close_ate.offset;
   2f9b0:	f8bd 301a 	ldrh.w	r3, [sp, #26]
		gc_addr &= ADDR_SECT_MASK;
   2f9b4:	0c36      	lsrs	r6, r6, #16
   2f9b6:	0436      	lsls	r6, r6, #16
		gc_addr += close_ate.offset;
   2f9b8:	441e      	add	r6, r3
   2f9ba:	9604      	str	r6, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   2f9bc:	aa08      	add	r2, sp, #32
   2f9be:	4620      	mov	r0, r4
   2f9c0:	a904      	add	r1, sp, #16
		gc_prev_addr = gc_addr;
   2f9c2:	f8dd a010 	ldr.w	sl, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   2f9c6:	f7ff ff12 	bl	2f7ee <nvs_prev_ate>
		if (rc) {
   2f9ca:	4602      	mov	r2, r0
   2f9cc:	2800      	cmp	r0, #0
   2f9ce:	f040 8081 	bne.w	2fad4 <nvs_gc+0x192>
		if (!nvs_ate_valid(fs, &gc_ate)) {
   2f9d2:	4620      	mov	r0, r4
   2f9d4:	a908      	add	r1, sp, #32
   2f9d6:	f7ff fed2 	bl	2f77e <nvs_ate_valid>
   2f9da:	b918      	cbnz	r0, 2f9e4 <nvs_gc+0xa2>
	} while (gc_prev_addr != stop_addr);
   2f9dc:	9b01      	ldr	r3, [sp, #4]
   2f9de:	459a      	cmp	sl, r3
   2f9e0:	d1ec      	bne.n	2f9bc <nvs_gc+0x7a>
   2f9e2:	e7da      	b.n	2f99a <nvs_gc+0x58>
		wlk_addr = fs->ate_wra;
   2f9e4:	6863      	ldr	r3, [r4, #4]
   2f9e6:	9305      	str	r3, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   2f9e8:	aa0a      	add	r2, sp, #40	; 0x28
   2f9ea:	4620      	mov	r0, r4
   2f9ec:	a905      	add	r1, sp, #20
			wlk_prev_addr = wlk_addr;
   2f9ee:	9e05      	ldr	r6, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   2f9f0:	f7ff fefd 	bl	2f7ee <nvs_prev_ate>
			if (rc) {
   2f9f4:	4602      	mov	r2, r0
   2f9f6:	2800      	cmp	r0, #0
   2f9f8:	d16c      	bne.n	2fad4 <nvs_gc+0x192>
			if ((wlk_ate.id == gc_ate.id) &&
   2f9fa:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   2f9fe:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   2fa02:	429a      	cmp	r2, r3
   2fa04:	d027      	beq.n	2fa56 <nvs_gc+0x114>
		} while (wlk_addr != fs->ate_wra);
   2fa06:	6862      	ldr	r2, [r4, #4]
   2fa08:	9b05      	ldr	r3, [sp, #20]
   2fa0a:	429a      	cmp	r2, r3
   2fa0c:	d1ec      	bne.n	2f9e8 <nvs_gc+0xa6>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   2fa0e:	4556      	cmp	r6, sl
   2fa10:	d1e4      	bne.n	2f9dc <nvs_gc+0x9a>
   2fa12:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   2fa16:	2b00      	cmp	r3, #0
   2fa18:	d0e0      	beq.n	2f9dc <nvs_gc+0x9a>
			data_addr += gc_ate.offset;
   2fa1a:	f8bd 7022 	ldrh.w	r7, [sp, #34]	; 0x22
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   2fa1e:	ea4f 431a 	mov.w	r3, sl, lsr #16
   2fa22:	041b      	lsls	r3, r3, #16
			data_addr += gc_ate.offset;
   2fa24:	441f      	add	r7, r3
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   2fa26:	68a3      	ldr	r3, [r4, #8]
			nvs_ate_crc8_update(&gc_ate);
   2fa28:	a808      	add	r0, sp, #32
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   2fa2a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			nvs_ate_crc8_update(&gc_ate);
   2fa2e:	f7ff fe51 	bl	2f6d4 <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2fa32:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
   2fa34:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2fa38:	681e      	ldr	r6, [r3, #0]
   2fa3a:	4276      	negs	r6, r6
	block_size =
   2fa3c:	f006 0620 	and.w	r6, r6, #32
	while (len) {
   2fa40:	f1b9 0f00 	cmp.w	r9, #0
   2fa44:	d10e      	bne.n	2fa64 <nvs_gc+0x122>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
   2fa46:	4620      	mov	r0, r4
   2fa48:	a908      	add	r1, sp, #32
   2fa4a:	f7ff ff54 	bl	2f8f6 <nvs_flash_ate_wrt>
			if (rc) {
   2fa4e:	4602      	mov	r2, r0
   2fa50:	2800      	cmp	r0, #0
   2fa52:	d0c3      	beq.n	2f9dc <nvs_gc+0x9a>
   2fa54:	e03e      	b.n	2fad4 <nvs_gc+0x192>
			    (nvs_ate_valid(fs, &wlk_ate))) {
   2fa56:	4620      	mov	r0, r4
   2fa58:	a90a      	add	r1, sp, #40	; 0x28
   2fa5a:	f7ff fe90 	bl	2f77e <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
   2fa5e:	2800      	cmp	r0, #0
   2fa60:	d0d1      	beq.n	2fa06 <nvs_gc+0xc4>
   2fa62:	e7d4      	b.n	2fa0e <nvs_gc+0xcc>
		bytes_to_copy = MIN(block_size, len);
   2fa64:	454e      	cmp	r6, r9
   2fa66:	46b0      	mov	r8, r6
   2fa68:	bf28      	it	cs
   2fa6a:	46c8      	movcs	r8, r9
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   2fa6c:	aa0c      	add	r2, sp, #48	; 0x30
   2fa6e:	4643      	mov	r3, r8
   2fa70:	4639      	mov	r1, r7
   2fa72:	4620      	mov	r0, r4
   2fa74:	f7ff fde9 	bl	2f64a <nvs_flash_rd>
		if (rc) {
   2fa78:	4602      	mov	r2, r0
   2fa7a:	bb58      	cbnz	r0, 2fad4 <nvs_gc+0x192>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   2fa7c:	4643      	mov	r3, r8
   2fa7e:	68a1      	ldr	r1, [r4, #8]
   2fa80:	aa0c      	add	r2, sp, #48	; 0x30
   2fa82:	4620      	mov	r0, r4
   2fa84:	f7ff fefd 	bl	2f882 <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
   2fa88:	4641      	mov	r1, r8
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   2fa8a:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
   2fa8c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2fa8e:	f7ff fe6c 	bl	2f76a <nvs_al_size.isra.0>
   2fa92:	68a3      	ldr	r3, [r4, #8]
   2fa94:	4403      	add	r3, r0
   2fa96:	60a3      	str	r3, [r4, #8]
		if (rc) {
   2fa98:	b9e2      	cbnz	r2, 2fad4 <nvs_gc+0x192>
		len -= bytes_to_copy;
   2fa9a:	eba9 0908 	sub.w	r9, r9, r8
		addr += bytes_to_copy;
   2fa9e:	4447      	add	r7, r8
   2faa0:	e7ce      	b.n	2fa40 <nvs_gc+0xfe>
		rc = nvs_add_gc_done_ate(fs);
   2faa2:	4620      	mov	r0, r4
   2faa4:	f7ff ff38 	bl	2f918 <nvs_add_gc_done_ate>
		if (rc) {
   2faa8:	4602      	mov	r2, r0
   2faaa:	2800      	cmp	r0, #0
   2faac:	f43f af7a 	beq.w	2f9a4 <nvs_gc+0x62>
   2fab0:	e010      	b.n	2fad4 <nvs_gc+0x192>
	stop_addr = gc_addr - ate_size;
   2fab2:	1b73      	subs	r3, r6, r5
	if (nvs_close_ate_valid(fs, &close_ate)) {
   2fab4:	4620      	mov	r0, r4
   2fab6:	a906      	add	r1, sp, #24
	stop_addr = gc_addr - ate_size;
   2fab8:	9301      	str	r3, [sp, #4]
	if (nvs_close_ate_valid(fs, &close_ate)) {
   2faba:	f7ff fe7a 	bl	2f7b2 <nvs_close_ate_valid>
   2fabe:	2800      	cmp	r0, #0
   2fac0:	f47f af76 	bne.w	2f9b0 <nvs_gc+0x6e>
		rc = nvs_recover_last_ate(fs, &gc_addr);
   2fac4:	4620      	mov	r0, r4
   2fac6:	a904      	add	r1, sp, #16
   2fac8:	f7df fcf8 	bl	f4bc <nvs_recover_last_ate>
		if (rc) {
   2facc:	4602      	mov	r2, r0
   2face:	2800      	cmp	r0, #0
   2fad0:	f43f af74 	beq.w	2f9bc <nvs_gc+0x7a>
}
   2fad4:	4610      	mov	r0, r2
   2fad6:	b015      	add	sp, #84	; 0x54
   2fad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002fadc <nvs_delete>:
	return nvs_write(fs, id, NULL, 0);
   2fadc:	2300      	movs	r3, #0
   2fade:	461a      	mov	r2, r3
   2fae0:	f7df bef6 	b.w	f8d0 <nvs_write>

0002fae4 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   2fae4:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   2fae6:	2400      	movs	r4, #0
   2fae8:	9400      	str	r4, [sp, #0]
   2faea:	f7df ffcd 	bl	fa88 <nvs_read_hist>
	return rc;
}
   2faee:	b002      	add	sp, #8
   2faf0:	bd10      	pop	{r4, pc}

0002faf2 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG_LOG;
   2faf2:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   2faf4:	075b      	lsls	r3, r3, #29
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
   2faf6:	bf5f      	itttt	pl
   2faf8:	6803      	ldrpl	r3, [r0, #0]
   2fafa:	8842      	ldrhpl	r2, [r0, #2]
   2fafc:	f3c3 234a 	ubfxpl	r3, r3, #9, #11
   2fb00:	eb03 1012 	addpl.w	r0, r3, r2, lsr #4
   2fb04:	bf5d      	ittte	pl
   2fb06:	3017      	addpl	r0, #23
   2fb08:	f020 0007 	bicpl.w	r0, r0, #7
   2fb0c:	0880      	lsrpl	r0, r0, #2
	return 0;
   2fb0e:	2000      	movmi	r0, #0
}
   2fb10:	4770      	bx	lr

0002fb12 <dummy_timestamp>:
}
   2fb12:	2000      	movs	r0, #0
   2fb14:	4770      	bx	lr

0002fb16 <default_get_timestamp>:
   2fb16:	f004 bfb2 	b.w	34a7e <sys_clock_cycle_get_32>

0002fb1a <atomic_inc>:
{
   2fb1a:	4603      	mov	r3, r0
}
   2fb1c:	e8d3 0fef 	ldaex	r0, [r3]
   2fb20:	1c42      	adds	r2, r0, #1
   2fb22:	e8c3 2fe1 	stlex	r1, r2, [r3]
   2fb26:	2900      	cmp	r1, #0
   2fb28:	d1f8      	bne.n	2fb1c <atomic_inc+0x2>
   2fb2a:	4770      	bx	lr

0002fb2c <z_log_vprintk>:
{
   2fb2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
   2fb2e:	2300      	movs	r3, #0
   2fb30:	e9cd 0102 	strd	r0, r1, [sp, #8]
   2fb34:	461a      	mov	r2, r3
   2fb36:	4619      	mov	r1, r3
   2fb38:	4618      	mov	r0, r3
   2fb3a:	e9cd 3300 	strd	r3, r3, [sp]
   2fb3e:	f7e0 fc0d 	bl	1035c <z_impl_z_log_msg_runtime_vcreate>
}
   2fb42:	b005      	add	sp, #20
   2fb44:	f85d fb04 	ldr.w	pc, [sp], #4

0002fb48 <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
   2fb48:	2001      	movs	r0, #1
   2fb4a:	f7e0 b905 	b.w	fd58 <z_log_dropped>

0002fb4e <z_log_get_tag>:
}
   2fb4e:	2000      	movs	r0, #0
   2fb50:	4770      	bx	lr

0002fb52 <z_cbprintf_cpy>:
{
   2fb52:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
   2fb54:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
   2fb58:	1b9b      	subs	r3, r3, r6
   2fb5a:	428b      	cmp	r3, r1
{
   2fb5c:	460c      	mov	r4, r1
   2fb5e:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
   2fb60:	d30a      	bcc.n	2fb78 <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
   2fb62:	6813      	ldr	r3, [r2, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2fb64:	460a      	mov	r2, r1
   2fb66:	4601      	mov	r1, r0
   2fb68:	1998      	adds	r0, r3, r6
   2fb6a:	f006 fcdd 	bl	36528 <memcpy>
	return len;
   2fb6e:	4620      	mov	r0, r4
	desc->off += len;
   2fb70:	68ab      	ldr	r3, [r5, #8]
   2fb72:	4423      	add	r3, r4
   2fb74:	60ab      	str	r3, [r5, #8]
}
   2fb76:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   2fb78:	f06f 001b 	mvn.w	r0, #27
   2fb7c:	e7fb      	b.n	2fb76 <z_cbprintf_cpy+0x24>

0002fb7e <z_log_msg_finalize>:
{
   2fb7e:	b570      	push	{r4, r5, r6, lr}
   2fb80:	460e      	mov	r6, r1
   2fb82:	4615      	mov	r5, r2
   2fb84:	4619      	mov	r1, r3
	if (!msg) {
   2fb86:	4604      	mov	r4, r0
   2fb88:	0d12      	lsrs	r2, r2, #20
   2fb8a:	b918      	cbnz	r0, 2fb94 <z_log_msg_finalize+0x16>
}
   2fb8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   2fb90:	f7e0 b8e2 	b.w	fd58 <z_log_dropped>
	if (data) {
   2fb94:	b12b      	cbz	r3, 2fba2 <z_log_msg_finalize+0x24>
		uint8_t *d = msg->data + desc.package_len;
   2fb96:	3010      	adds	r0, #16
   2fb98:	f3c5 234a 	ubfx	r3, r5, #9, #11
   2fb9c:	4418      	add	r0, r3
   2fb9e:	f006 fcc3 	bl	36528 <memcpy>
	msg->hdr.source = source;
   2fba2:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   2fba6:	4620      	mov	r0, r4
}
   2fba8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   2fbac:	f7e0 bafc 	b.w	101a8 <z_log_msg_commit>

0002fbb0 <buffer_write>:
{
   2fbb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2fbb2:	4606      	mov	r6, r0
   2fbb4:	460d      	mov	r5, r1
   2fbb6:	4614      	mov	r4, r2
   2fbb8:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   2fbba:	4621      	mov	r1, r4
   2fbbc:	4628      	mov	r0, r5
   2fbbe:	463a      	mov	r2, r7
   2fbc0:	47b0      	blx	r6
	} while (len != 0);
   2fbc2:	1a24      	subs	r4, r4, r0
		buf += processed;
   2fbc4:	4405      	add	r5, r0
	} while (len != 0);
   2fbc6:	d1f8      	bne.n	2fbba <buffer_write+0xa>
}
   2fbc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002fbca <cbvprintf>:
{
   2fbca:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   2fbcc:	2400      	movs	r4, #0
   2fbce:	9400      	str	r4, [sp, #0]
   2fbd0:	f7de fe52 	bl	e878 <z_cbvprintf_impl>
}
   2fbd4:	b002      	add	sp, #8
   2fbd6:	bd10      	pop	{r4, pc}

0002fbd8 <log_output_flush>:
{
   2fbd8:	b510      	push	{r4, lr}
		     output->control_block->offset,
   2fbda:	6842      	ldr	r2, [r0, #4]
{
   2fbdc:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   2fbde:	e9d2 2300 	ldrd	r2, r3, [r2]
   2fbe2:	6881      	ldr	r1, [r0, #8]
   2fbe4:	6800      	ldr	r0, [r0, #0]
   2fbe6:	f7ff ffe3 	bl	2fbb0 <buffer_write>
	output->control_block->offset = 0;
   2fbea:	2200      	movs	r2, #0
   2fbec:	6863      	ldr	r3, [r4, #4]
   2fbee:	601a      	str	r2, [r3, #0]
}
   2fbf0:	bd10      	pop	{r4, pc}

0002fbf2 <cr_out_func>:
	if (c == '\n') {
   2fbf2:	280a      	cmp	r0, #10
{
   2fbf4:	b538      	push	{r3, r4, r5, lr}
   2fbf6:	4604      	mov	r4, r0
   2fbf8:	460d      	mov	r5, r1
	if (c == '\n') {
   2fbfa:	d102      	bne.n	2fc02 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
   2fbfc:	200d      	movs	r0, #13
   2fbfe:	f7e0 fc2d 	bl	1045c <out_func>
	out_func(c, ctx);
   2fc02:	4629      	mov	r1, r5
   2fc04:	4620      	mov	r0, r4
   2fc06:	f7e0 fc29 	bl	1045c <out_func>
}
   2fc0a:	2000      	movs	r0, #0
   2fc0c:	bd38      	pop	{r3, r4, r5, pc}

0002fc0e <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   2fc0e:	4770      	bx	lr

0002fc10 <get_sectors_cb>:
{
   2fc10:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   2fc12:	684c      	ldr	r4, [r1, #4]
   2fc14:	6803      	ldr	r3, [r0, #0]
   2fc16:	42a3      	cmp	r3, r4
   2fc18:	d201      	bcs.n	2fc1e <get_sectors_cb+0xe>
		*bail_value = true;
   2fc1a:	2001      	movs	r0, #1
}
   2fc1c:	bd70      	pop	{r4, r5, r6, pc}
	} else if (info->start_offset >= data->area_off + data->area_len) {
   2fc1e:	688a      	ldr	r2, [r1, #8]
   2fc20:	4422      	add	r2, r4
   2fc22:	4293      	cmp	r3, r2
   2fc24:	d301      	bcc.n	2fc2a <get_sectors_cb+0x1a>
		*bail_value = false;
   2fc26:	2000      	movs	r0, #0
   2fc28:	e7f8      	b.n	2fc1c <get_sectors_cb+0xc>
	} else if (data->ret_idx >= data->ret_len) {
   2fc2a:	694e      	ldr	r6, [r1, #20]
   2fc2c:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
   2fc30:	42b5      	cmp	r5, r6
   2fc32:	d303      	bcc.n	2fc3c <get_sectors_cb+0x2c>
		data->status = -ENOMEM;
   2fc34:	f06f 030b 	mvn.w	r3, #11
   2fc38:	618b      	str	r3, [r1, #24]
		return true;
   2fc3a:	e7f4      	b.n	2fc26 <get_sectors_cb+0x16>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   2fc3c:	1b1b      	subs	r3, r3, r4
   2fc3e:	f842 3035 	str.w	r3, [r2, r5, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   2fc42:	6843      	ldr	r3, [r0, #4]
   2fc44:	6908      	ldr	r0, [r1, #16]
   2fc46:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
   2fc4a:	6053      	str	r3, [r2, #4]
	data->ret_idx++;
   2fc4c:	690b      	ldr	r3, [r1, #16]
   2fc4e:	3301      	adds	r3, #1
   2fc50:	610b      	str	r3, [r1, #16]
	return true;
   2fc52:	e7e2      	b.n	2fc1a <get_sectors_cb+0xa>

0002fc54 <zsock_getaddrinfo>:
int zsock_getaddrinfo(const char *host, const char *service,
		      const struct zsock_addrinfo *hints,
		      struct zsock_addrinfo **res)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_getaddrinfo(host, service, hints, res);
   2fc54:	f7e1 b9b8 	b.w	10fc8 <socket_offload_getaddrinfo>

0002fc58 <zsock_freeaddrinfo>:
}

void zsock_freeaddrinfo(struct zsock_addrinfo *ai)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_freeaddrinfo(ai);
   2fc58:	f7e1 b9dc 	b.w	11014 <socket_offload_freeaddrinfo>

0002fc5c <z_fdtable_call_ioctl>:
{
   2fc5c:	b40c      	push	{r2, r3}
   2fc5e:	4603      	mov	r3, r0
   2fc60:	b507      	push	{r0, r1, r2, lr}
   2fc62:	aa04      	add	r2, sp, #16
   2fc64:	4608      	mov	r0, r1
   2fc66:	f852 1b04 	ldr.w	r1, [r2], #4
	res = vtable->ioctl(obj, request, args);
   2fc6a:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   2fc6c:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   2fc6e:	4798      	blx	r3
}
   2fc70:	b003      	add	sp, #12
   2fc72:	f85d eb04 	ldr.w	lr, [sp], #4
   2fc76:	b002      	add	sp, #8
   2fc78:	4770      	bx	lr

0002fc7a <timeout_recalc>:
{
   2fc7a:	b570      	push	{r4, r5, r6, lr}
   2fc7c:	4614      	mov	r4, r2
	if (!K_TIMEOUT_EQ(*timeout, K_NO_WAIT) &&
   2fc7e:	e9d2 3200 	ldrd	r3, r2, [r2]
   2fc82:	3301      	adds	r3, #1
   2fc84:	f142 0200 	adc.w	r2, r2, #0
   2fc88:	2b02      	cmp	r3, #2
   2fc8a:	f172 0200 	sbcs.w	r2, r2, #0
{
   2fc8e:	4605      	mov	r5, r0
   2fc90:	460e      	mov	r6, r1
	if (!K_TIMEOUT_EQ(*timeout, K_NO_WAIT) &&
   2fc92:	d30c      	bcc.n	2fcae <timeout_recalc+0x34>
		int64_t remaining = end - sys_clock_tick_get();
   2fc94:	f7fb ff2c 	bl	2baf0 <sys_clock_tick_get>
   2fc98:	1a2d      	subs	r5, r5, r0
   2fc9a:	eb66 0101 	sbc.w	r1, r6, r1
		if (remaining <= 0) {
   2fc9e:	2d01      	cmp	r5, #1
   2fca0:	f171 0300 	sbcs.w	r3, r1, #0
   2fca4:	da04      	bge.n	2fcb0 <timeout_recalc+0x36>
			*timeout = K_NO_WAIT;
   2fca6:	2200      	movs	r2, #0
   2fca8:	2300      	movs	r3, #0
   2fcaa:	e9c4 2300 	strd	r2, r3, [r4]
}
   2fcae:	bd70      	pop	{r4, r5, r6, pc}
			*timeout = Z_TIMEOUT_TICKS(remaining);
   2fcb0:	e9c4 5100 	strd	r5, r1, [r4]
}
   2fcb4:	e7fb      	b.n	2fcae <timeout_recalc+0x34>

0002fcb6 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   2fcb6:	f7f9 ba95 	b.w	291e4 <z_impl_k_mutex_lock>

0002fcba <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   2fcba:	f7f9 bb63 	b.w	29384 <z_impl_k_mutex_unlock>

0002fcbe <z_impl_zsock_close>:
{
   2fcbe:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ctx = z_get_fd_obj_and_vtable(sock,
   2fcc0:	4669      	mov	r1, sp
   2fcc2:	aa01      	add	r2, sp, #4
{
   2fcc4:	4605      	mov	r5, r0
	ctx = z_get_fd_obj_and_vtable(sock,
   2fcc6:	f7dd ffc9 	bl	dc5c <z_get_fd_obj_and_vtable>
	if (ctx == NULL) {
   2fcca:	4604      	mov	r4, r0
   2fccc:	b940      	cbnz	r0, 2fce0 <z_impl_zsock_close+0x22>
		errno = EBADF;
   2fcce:	f001 f82d 	bl	30d2c <__errno>
   2fcd2:	2309      	movs	r3, #9
		return -1;
   2fcd4:	f04f 34ff 	mov.w	r4, #4294967295
		errno = EBADF;
   2fcd8:	6003      	str	r3, [r0, #0]
}
   2fcda:	4620      	mov	r0, r4
   2fcdc:	b003      	add	sp, #12
   2fcde:	bd30      	pop	{r4, r5, pc}
	(void)k_mutex_lock(lock, K_FOREVER);
   2fce0:	f04f 32ff 	mov.w	r2, #4294967295
   2fce4:	9801      	ldr	r0, [sp, #4]
   2fce6:	f04f 33ff 	mov.w	r3, #4294967295
   2fcea:	f7ff ffe4 	bl	2fcb6 <k_mutex_lock.constprop.0.isra.0>
	ret = vtable->fd_vtable.close(ctx);
   2fcee:	9b00      	ldr	r3, [sp, #0]
   2fcf0:	4620      	mov	r0, r4
   2fcf2:	689b      	ldr	r3, [r3, #8]
   2fcf4:	4798      	blx	r3
   2fcf6:	4604      	mov	r4, r0
	k_mutex_unlock(lock);
   2fcf8:	9801      	ldr	r0, [sp, #4]
   2fcfa:	f7ff ffde 	bl	2fcba <k_mutex_unlock.isra.0>
	z_free_fd(sock);
   2fcfe:	4628      	mov	r0, r5
   2fd00:	f7de f814 	bl	dd2c <z_free_fd>
	return ret;
   2fd04:	e7e9      	b.n	2fcda <z_impl_zsock_close+0x1c>

0002fd06 <z_impl_zsock_connect>:
{
   2fd06:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2fd08:	460d      	mov	r5, r1
   2fd0a:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   2fd0c:	4669      	mov	r1, sp
   2fd0e:	aa01      	add	r2, sp, #4
   2fd10:	f7dd ffa4 	bl	dc5c <z_get_fd_obj_and_vtable>
	VTABLE_CALL(connect, sock, addr, addrlen);
   2fd14:	4604      	mov	r4, r0
   2fd16:	b940      	cbnz	r0, 2fd2a <z_impl_zsock_connect+0x24>
   2fd18:	f001 f808 	bl	30d2c <__errno>
   2fd1c:	2309      	movs	r3, #9
   2fd1e:	f04f 34ff 	mov.w	r4, #4294967295
   2fd22:	6003      	str	r3, [r0, #0]
}
   2fd24:	4620      	mov	r0, r4
   2fd26:	b002      	add	sp, #8
   2fd28:	bd70      	pop	{r4, r5, r6, pc}
	VTABLE_CALL(connect, sock, addr, addrlen);
   2fd2a:	9b00      	ldr	r3, [sp, #0]
   2fd2c:	699b      	ldr	r3, [r3, #24]
   2fd2e:	b91b      	cbnz	r3, 2fd38 <z_impl_zsock_connect+0x32>
   2fd30:	f000 fffc 	bl	30d2c <__errno>
   2fd34:	235f      	movs	r3, #95	; 0x5f
   2fd36:	e7f2      	b.n	2fd1e <z_impl_zsock_connect+0x18>
   2fd38:	9801      	ldr	r0, [sp, #4]
   2fd3a:	f04f 32ff 	mov.w	r2, #4294967295
   2fd3e:	f04f 33ff 	mov.w	r3, #4294967295
   2fd42:	f7ff ffb8 	bl	2fcb6 <k_mutex_lock.constprop.0.isra.0>
   2fd46:	9b00      	ldr	r3, [sp, #0]
   2fd48:	4632      	mov	r2, r6
   2fd4a:	4629      	mov	r1, r5
   2fd4c:	4620      	mov	r0, r4
   2fd4e:	699b      	ldr	r3, [r3, #24]
   2fd50:	4798      	blx	r3
   2fd52:	4604      	mov	r4, r0
   2fd54:	9801      	ldr	r0, [sp, #4]
   2fd56:	f7ff ffb0 	bl	2fcba <k_mutex_unlock.isra.0>
   2fd5a:	e7e3      	b.n	2fd24 <z_impl_zsock_connect+0x1e>

0002fd5c <z_impl_zsock_sendto>:
{
   2fd5c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   2fd60:	460d      	mov	r5, r1
   2fd62:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   2fd64:	a902      	add	r1, sp, #8
   2fd66:	aa03      	add	r2, sp, #12
{
   2fd68:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   2fd6a:	f7dd ff77 	bl	dc5c <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   2fd6e:	4604      	mov	r4, r0
   2fd70:	b948      	cbnz	r0, 2fd86 <z_impl_zsock_sendto+0x2a>
   2fd72:	f000 ffdb 	bl	30d2c <__errno>
   2fd76:	2309      	movs	r3, #9
   2fd78:	f04f 34ff 	mov.w	r4, #4294967295
   2fd7c:	6003      	str	r3, [r0, #0]
}
   2fd7e:	4620      	mov	r0, r4
   2fd80:	b004      	add	sp, #16
   2fd82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   2fd86:	9b02      	ldr	r3, [sp, #8]
   2fd88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2fd8a:	b91b      	cbnz	r3, 2fd94 <z_impl_zsock_sendto+0x38>
   2fd8c:	f000 ffce 	bl	30d2c <__errno>
   2fd90:	235f      	movs	r3, #95	; 0x5f
   2fd92:	e7f1      	b.n	2fd78 <z_impl_zsock_sendto+0x1c>
   2fd94:	9803      	ldr	r0, [sp, #12]
   2fd96:	f04f 32ff 	mov.w	r2, #4294967295
   2fd9a:	f04f 33ff 	mov.w	r3, #4294967295
   2fd9e:	f7ff ff8a 	bl	2fcb6 <k_mutex_lock.constprop.0.isra.0>
   2fda2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2fda4:	4632      	mov	r2, r6
   2fda6:	9301      	str	r3, [sp, #4]
   2fda8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2fdaa:	4629      	mov	r1, r5
   2fdac:	9300      	str	r3, [sp, #0]
   2fdae:	9b02      	ldr	r3, [sp, #8]
   2fdb0:	4620      	mov	r0, r4
   2fdb2:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
   2fdb6:	463b      	mov	r3, r7
   2fdb8:	47c0      	blx	r8
   2fdba:	4604      	mov	r4, r0
   2fdbc:	9803      	ldr	r0, [sp, #12]
   2fdbe:	f7ff ff7c 	bl	2fcba <k_mutex_unlock.isra.0>
   2fdc2:	e7dc      	b.n	2fd7e <z_impl_zsock_sendto+0x22>

0002fdc4 <z_impl_zsock_sendmsg>:
{
   2fdc4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2fdc6:	460d      	mov	r5, r1
   2fdc8:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   2fdca:	4669      	mov	r1, sp
   2fdcc:	aa01      	add	r2, sp, #4
   2fdce:	f7dd ff45 	bl	dc5c <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendmsg, sock, msg, flags);
   2fdd2:	4604      	mov	r4, r0
   2fdd4:	b940      	cbnz	r0, 2fde8 <z_impl_zsock_sendmsg+0x24>
   2fdd6:	f000 ffa9 	bl	30d2c <__errno>
   2fdda:	2309      	movs	r3, #9
   2fddc:	f04f 34ff 	mov.w	r4, #4294967295
   2fde0:	6003      	str	r3, [r0, #0]
}
   2fde2:	4620      	mov	r0, r4
   2fde4:	b002      	add	sp, #8
   2fde6:	bd70      	pop	{r4, r5, r6, pc}
	VTABLE_CALL(sendmsg, sock, msg, flags);
   2fde8:	9b00      	ldr	r3, [sp, #0]
   2fdea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   2fdec:	b91b      	cbnz	r3, 2fdf6 <z_impl_zsock_sendmsg+0x32>
   2fdee:	f000 ff9d 	bl	30d2c <__errno>
   2fdf2:	235f      	movs	r3, #95	; 0x5f
   2fdf4:	e7f2      	b.n	2fddc <z_impl_zsock_sendmsg+0x18>
   2fdf6:	9801      	ldr	r0, [sp, #4]
   2fdf8:	f04f 32ff 	mov.w	r2, #4294967295
   2fdfc:	f04f 33ff 	mov.w	r3, #4294967295
   2fe00:	f7ff ff59 	bl	2fcb6 <k_mutex_lock.constprop.0.isra.0>
   2fe04:	9b00      	ldr	r3, [sp, #0]
   2fe06:	4632      	mov	r2, r6
   2fe08:	4629      	mov	r1, r5
   2fe0a:	4620      	mov	r0, r4
   2fe0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   2fe0e:	4798      	blx	r3
   2fe10:	4604      	mov	r4, r0
   2fe12:	9801      	ldr	r0, [sp, #4]
   2fe14:	f7ff ff51 	bl	2fcba <k_mutex_unlock.isra.0>
   2fe18:	e7e3      	b.n	2fde2 <z_impl_zsock_sendmsg+0x1e>

0002fe1a <z_impl_zsock_recvfrom>:
{
   2fe1a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   2fe1e:	460d      	mov	r5, r1
   2fe20:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   2fe22:	a902      	add	r1, sp, #8
   2fe24:	aa03      	add	r2, sp, #12
{
   2fe26:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   2fe28:	f7dd ff18 	bl	dc5c <z_get_fd_obj_and_vtable>
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   2fe2c:	4604      	mov	r4, r0
   2fe2e:	b948      	cbnz	r0, 2fe44 <z_impl_zsock_recvfrom+0x2a>
   2fe30:	f000 ff7c 	bl	30d2c <__errno>
   2fe34:	2309      	movs	r3, #9
   2fe36:	f04f 34ff 	mov.w	r4, #4294967295
   2fe3a:	6003      	str	r3, [r0, #0]
}
   2fe3c:	4620      	mov	r0, r4
   2fe3e:	b004      	add	sp, #16
   2fe40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   2fe44:	9b02      	ldr	r3, [sp, #8]
   2fe46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2fe48:	b91b      	cbnz	r3, 2fe52 <z_impl_zsock_recvfrom+0x38>
   2fe4a:	f000 ff6f 	bl	30d2c <__errno>
   2fe4e:	235f      	movs	r3, #95	; 0x5f
   2fe50:	e7f1      	b.n	2fe36 <z_impl_zsock_recvfrom+0x1c>
   2fe52:	9803      	ldr	r0, [sp, #12]
   2fe54:	f04f 32ff 	mov.w	r2, #4294967295
   2fe58:	f04f 33ff 	mov.w	r3, #4294967295
   2fe5c:	f7ff ff2b 	bl	2fcb6 <k_mutex_lock.constprop.0.isra.0>
   2fe60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2fe62:	4632      	mov	r2, r6
   2fe64:	9301      	str	r3, [sp, #4]
   2fe66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2fe68:	4629      	mov	r1, r5
   2fe6a:	9300      	str	r3, [sp, #0]
   2fe6c:	9b02      	ldr	r3, [sp, #8]
   2fe6e:	4620      	mov	r0, r4
   2fe70:	f8d3 8028 	ldr.w	r8, [r3, #40]	; 0x28
   2fe74:	463b      	mov	r3, r7
   2fe76:	47c0      	blx	r8
   2fe78:	4604      	mov	r4, r0
   2fe7a:	9803      	ldr	r0, [sp, #12]
   2fe7c:	f7ff ff1d 	bl	2fcba <k_mutex_unlock.isra.0>
   2fe80:	e7dc      	b.n	2fe3c <z_impl_zsock_recvfrom+0x22>

0002fe82 <z_impl_zsock_poll>:

int z_impl_zsock_poll(struct zsock_pollfd *fds, int nfds, int poll_timeout)
{
   2fe82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	k_timeout_t timeout;

	if (poll_timeout < 0) {
   2fe86:	1e14      	subs	r4, r2, #0
{
   2fe88:	4605      	mov	r5, r0
   2fe8a:	460e      	mov	r6, r1
	if (poll_timeout < 0) {
   2fe8c:	db13      	blt.n	2feb6 <z_impl_zsock_poll+0x34>
   2fe8e:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   2fe92:	f240 30e7 	movw	r0, #999	; 0x3e7
   2fe96:	2100      	movs	r1, #0
   2fe98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2fe9c:	2300      	movs	r3, #0
   2fe9e:	fbc4 0107 	smlal	r0, r1, r4, r7
   2fea2:	f7d8 fff7 	bl	8e94 <__aeabi_uldivmod>
   2fea6:	4602      	mov	r2, r0
   2fea8:	460b      	mov	r3, r1
		timeout = K_FOREVER;
	} else {
		timeout = K_MSEC(poll_timeout);
	}

	return zsock_poll_internal(fds, nfds, timeout);
   2feaa:	4631      	mov	r1, r6
   2feac:	4628      	mov	r0, r5
}
   2feae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return zsock_poll_internal(fds, nfds, timeout);
   2feb2:	f7e0 bf6d 	b.w	10d90 <zsock_poll_internal>
		timeout = K_FOREVER;
   2feb6:	f04f 32ff 	mov.w	r2, #4294967295
   2feba:	4613      	mov	r3, r2
   2febc:	e7f5      	b.n	2feaa <z_impl_zsock_poll+0x28>

0002febe <settings_load>:
	return settings_load_subtree(NULL);
   2febe:	2000      	movs	r0, #0
   2fec0:	f7e1 b908 	b.w	110d4 <settings_load_subtree>

0002fec4 <settings_delete>:
	return settings_save_one(name, NULL, 0);
   2fec4:	2200      	movs	r2, #0
   2fec6:	4611      	mov	r1, r2
   2fec8:	f7e1 b8ca 	b.w	11060 <settings_save_one>

0002fecc <settings_name_steq>:
{
   2fecc:	4603      	mov	r3, r0
   2fece:	b510      	push	{r4, lr}
   2fed0:	4608      	mov	r0, r1
	if (next) {
   2fed2:	b10a      	cbz	r2, 2fed8 <settings_name_steq+0xc>
		*next = NULL;
   2fed4:	2100      	movs	r1, #0
   2fed6:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   2fed8:	b153      	cbz	r3, 2fef0 <settings_name_steq+0x24>
   2feda:	b1d0      	cbz	r0, 2ff12 <settings_name_steq+0x46>
   2fedc:	1e41      	subs	r1, r0, #1
	while ((*key != '\0') && (*key == *name) &&
   2fede:	f811 0f01 	ldrb.w	r0, [r1, #1]!
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   2fee2:	b180      	cbz	r0, 2ff06 <settings_name_steq+0x3a>
	while ((*key != '\0') && (*key == *name) &&
   2fee4:	f813 4b01 	ldrb.w	r4, [r3], #1
   2fee8:	42a0      	cmp	r0, r4
   2feea:	d101      	bne.n	2fef0 <settings_name_steq+0x24>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   2feec:	283d      	cmp	r0, #61	; 0x3d
   2feee:	d1f6      	bne.n	2fede <settings_name_steq+0x12>
		return 0;
   2fef0:	2000      	movs	r0, #0
   2fef2:	e00e      	b.n	2ff12 <settings_name_steq+0x46>
			*next = name + 1;
   2fef4:	3301      	adds	r3, #1
   2fef6:	6013      	str	r3, [r2, #0]
   2fef8:	e00a      	b.n	2ff10 <settings_name_steq+0x44>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   2fefa:	283d      	cmp	r0, #61	; 0x3d
   2fefc:	d008      	beq.n	2ff10 <settings_name_steq+0x44>
   2fefe:	fab0 f080 	clz	r0, r0
   2ff02:	0940      	lsrs	r0, r0, #5
   2ff04:	e005      	b.n	2ff12 <settings_name_steq+0x46>
	if (*name == SETTINGS_NAME_SEPARATOR) {
   2ff06:	7818      	ldrb	r0, [r3, #0]
   2ff08:	282f      	cmp	r0, #47	; 0x2f
   2ff0a:	d1f6      	bne.n	2fefa <settings_name_steq+0x2e>
		if (next) {
   2ff0c:	2a00      	cmp	r2, #0
   2ff0e:	d1f1      	bne.n	2fef4 <settings_name_steq+0x28>
		return 1;
   2ff10:	2001      	movs	r0, #1
}
   2ff12:	bd10      	pop	{r4, pc}

0002ff14 <settings_name_next>:
{
   2ff14:	b510      	push	{r4, lr}
	if (next) {
   2ff16:	b109      	cbz	r1, 2ff1c <settings_name_next+0x8>
		*next = NULL;
   2ff18:	2300      	movs	r3, #0
   2ff1a:	600b      	str	r3, [r1, #0]
	if (!name) {
   2ff1c:	b158      	cbz	r0, 2ff36 <settings_name_next+0x22>
   2ff1e:	4603      	mov	r3, r0
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   2ff20:	781a      	ldrb	r2, [r3, #0]
   2ff22:	461c      	mov	r4, r3
   2ff24:	3301      	adds	r3, #1
   2ff26:	b12a      	cbz	r2, 2ff34 <settings_name_next+0x20>
   2ff28:	2a3d      	cmp	r2, #61	; 0x3d
   2ff2a:	d003      	beq.n	2ff34 <settings_name_next+0x20>
   2ff2c:	2a2f      	cmp	r2, #47	; 0x2f
   2ff2e:	d1f7      	bne.n	2ff20 <settings_name_next+0xc>
		if (next) {
   2ff30:	b101      	cbz	r1, 2ff34 <settings_name_next+0x20>
			*next = name + 1;
   2ff32:	600b      	str	r3, [r1, #0]
   2ff34:	1a20      	subs	r0, r4, r0
}
   2ff36:	bd10      	pop	{r4, pc}

0002ff38 <settings_nvs_storage_get>:
static void *settings_nvs_storage_get(struct settings_store *cs)
{
	struct settings_nvs *cf = CONTAINER_OF(cs, struct settings_nvs, cf_store);

	return &cf->cf_nvs;
}
   2ff38:	3008      	adds	r0, #8
   2ff3a:	4770      	bx	lr

0002ff3c <settings_nvs_read_fn>:
{
   2ff3c:	b510      	push	{r4, lr}
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   2ff3e:	4613      	mov	r3, r2
{
   2ff40:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   2ff42:	460a      	mov	r2, r1
   2ff44:	8881      	ldrh	r1, [r0, #4]
   2ff46:	6800      	ldr	r0, [r0, #0]
   2ff48:	f7ff fdcc 	bl	2fae4 <nvs_read>
}
   2ff4c:	42a0      	cmp	r0, r4
   2ff4e:	bfa8      	it	ge
   2ff50:	4620      	movge	r0, r4
   2ff52:	bd10      	pop	{r4, pc}

0002ff54 <settings_nvs_save>:
{
   2ff54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ff58:	b097      	sub	sp, #92	; 0x5c
   2ff5a:	4604      	mov	r4, r0
   2ff5c:	469a      	mov	sl, r3
	if (!name) {
   2ff5e:	4689      	mov	r9, r1
{
   2ff60:	9201      	str	r2, [sp, #4]
	if (!name) {
   2ff62:	2900      	cmp	r1, #0
   2ff64:	d07e      	beq.n	30064 <CONFIG_FLASH_LOAD_SIZE+0x64>
	delete = ((value == NULL) || (val_len == 0));
   2ff66:	b1da      	cbz	r2, 2ffa0 <settings_nvs_save+0x4c>
   2ff68:	faba f78a 	clz	r7, sl
   2ff6c:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   2ff6e:	8f25      	ldrh	r5, [r4, #56]	; 0x38
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   2ff70:	f104 0b08 	add.w	fp, r4, #8
	name_id = cf->last_name_id + 1;
   2ff74:	3501      	adds	r5, #1
   2ff76:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   2ff78:	46a8      	mov	r8, r5
		name_id--;
   2ff7a:	1e6e      	subs	r6, r5, #1
   2ff7c:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   2ff7e:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   2ff82:	d029      	beq.n	2ffd8 <settings_nvs_save+0x84>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   2ff84:	234a      	movs	r3, #74	; 0x4a
   2ff86:	4631      	mov	r1, r6
   2ff88:	4658      	mov	r0, fp
   2ff8a:	aa03      	add	r2, sp, #12
   2ff8c:	f7ff fdaa 	bl	2fae4 <nvs_read>
		if (rc < 0) {
   2ff90:	2800      	cmp	r0, #0
   2ff92:	da07      	bge.n	2ffa4 <settings_nvs_save+0x50>
		name_id--;
   2ff94:	f110 0f02 	cmn.w	r0, #2
   2ff98:	bf08      	it	eq
   2ff9a:	46b0      	moveq	r8, r6
   2ff9c:	4635      	mov	r5, r6
   2ff9e:	e7ec      	b.n	2ff7a <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   2ffa0:	2701      	movs	r7, #1
   2ffa2:	e7e4      	b.n	2ff6e <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   2ffa4:	f100 0358 	add.w	r3, r0, #88	; 0x58
   2ffa8:	eb0d 0003 	add.w	r0, sp, r3
   2ffac:	2300      	movs	r3, #0
		if (strcmp(name, rdname)) {
   2ffae:	a903      	add	r1, sp, #12
		rdname[rc] = '\0';
   2ffb0:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   2ffb4:	4648      	mov	r0, r9
   2ffb6:	f7d9 f92a 	bl	920e <strcmp>
   2ffba:	2800      	cmp	r0, #0
   2ffbc:	d1ee      	bne.n	2ff9c <settings_nvs_save+0x48>
		if (!delete) {
   2ffbe:	b32f      	cbz	r7, 3000c <CONFIG_FLASH_LOAD_SIZE+0xc>
		if (name_id == cf->last_name_id) {
   2ffc0:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   2ffc2:	42b3      	cmp	r3, r6
   2ffc4:	d00b      	beq.n	2ffde <settings_nvs_save+0x8a>
		rc = nvs_delete(&cf->cf_nvs, name_id);
   2ffc6:	4631      	mov	r1, r6
   2ffc8:	4658      	mov	r0, fp
   2ffca:	f7ff fd87 	bl	2fadc <nvs_delete>
		if (rc >= 0) {
   2ffce:	2800      	cmp	r0, #0
   2ffd0:	da12      	bge.n	2fff8 <settings_nvs_save+0xa4>
}
   2ffd2:	b017      	add	sp, #92	; 0x5c
   2ffd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (delete) {
   2ffd8:	b3b7      	cbz	r7, 30048 <CONFIG_FLASH_LOAD_SIZE+0x48>
			return 0;
   2ffda:	2000      	movs	r0, #0
   2ffdc:	e7f9      	b.n	2ffd2 <settings_nvs_save+0x7e>
			cf->last_name_id--;
   2ffde:	4622      	mov	r2, r4
   2ffe0:	1e73      	subs	r3, r6, #1
   2ffe2:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   2ffe6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   2ffea:	2302      	movs	r3, #2
   2ffec:	4658      	mov	r0, fp
   2ffee:	f7df fc6f 	bl	f8d0 <nvs_write>
			if (rc < 0) {
   2fff2:	2800      	cmp	r0, #0
   2fff4:	dae7      	bge.n	2ffc6 <settings_nvs_save+0x72>
   2fff6:	e7ec      	b.n	2ffd2 <settings_nvs_save+0x7e>
			rc = nvs_delete(&cf->cf_nvs, name_id +
   2fff8:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   2fffc:	313f      	adds	r1, #63	; 0x3f
   2fffe:	4658      	mov	r0, fp
   30000:	b289      	uxth	r1, r1
   30002:	f7ff fd6b 	bl	2fadc <nvs_delete>
	if (rc < 0) {
   30006:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   3000a:	e7e2      	b.n	2ffd2 <settings_nvs_save+0x7e>
		name_id--;
   3000c:	46b0      	mov	r8, r6
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   3000e:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   30012:	d02a      	beq.n	3006a <CONFIG_FLASH_LOAD_SIZE+0x6a>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   30014:	f104 0508 	add.w	r5, r4, #8
   30018:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   3001c:	4653      	mov	r3, sl
   3001e:	4628      	mov	r0, r5
   30020:	9a01      	ldr	r2, [sp, #4]
   30022:	b289      	uxth	r1, r1
   30024:	f7df fc54 	bl	f8d0 <nvs_write>
	if (rc < 0) {
   30028:	2800      	cmp	r0, #0
   3002a:	dbd2      	blt.n	2ffd2 <settings_nvs_save+0x7e>
	if (write_name) {
   3002c:	b977      	cbnz	r7, 3004c <CONFIG_FLASH_LOAD_SIZE+0x4c>
	if (write_name_id > cf->last_name_id) {
   3002e:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   30030:	4543      	cmp	r3, r8
   30032:	d2d2      	bcs.n	2ffda <settings_nvs_save+0x86>
		cf->last_name_id = write_name_id;
   30034:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   30036:	2302      	movs	r3, #2
   30038:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   3003c:	4628      	mov	r0, r5
		cf->last_name_id = write_name_id;
   3003e:	f822 8f38 	strh.w	r8, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   30042:	f7df fc45 	bl	f8d0 <nvs_write>
   30046:	e7de      	b.n	30006 <CONFIG_FLASH_LOAD_SIZE+0x6>
	write_name = true;
   30048:	2701      	movs	r7, #1
   3004a:	e7e0      	b.n	3000e <CONFIG_FLASH_LOAD_SIZE+0xe>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   3004c:	4648      	mov	r0, r9
   3004e:	f7d9 f8e8 	bl	9222 <strlen>
   30052:	464a      	mov	r2, r9
   30054:	4603      	mov	r3, r0
   30056:	4641      	mov	r1, r8
   30058:	4628      	mov	r0, r5
   3005a:	f7df fc39 	bl	f8d0 <nvs_write>
		if (rc < 0) {
   3005e:	2800      	cmp	r0, #0
   30060:	dae5      	bge.n	3002e <CONFIG_FLASH_LOAD_SIZE+0x2e>
   30062:	e7b6      	b.n	2ffd2 <settings_nvs_save+0x7e>
		return -EINVAL;
   30064:	f06f 0015 	mvn.w	r0, #21
   30068:	e7b3      	b.n	2ffd2 <settings_nvs_save+0x7e>
		return -ENOMEM;
   3006a:	f06f 000b 	mvn.w	r0, #11
   3006e:	e7b0      	b.n	2ffd2 <settings_nvs_save+0x7e>

00030070 <settings_nvs_backend_init>:
{
   30070:	b573      	push	{r0, r1, r4, r5, r6, lr}
	cf->cf_nvs.flash_device = cf->flash_dev;
   30072:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
   30074:	4604      	mov	r4, r0
	cf->cf_nvs.flash_device = cf->flash_dev;
   30076:	6303      	str	r3, [r0, #48]	; 0x30
	if (cf->cf_nvs.flash_device == NULL) {
   30078:	b1c3      	cbz	r3, 300ac <settings_nvs_backend_init+0x3c>
	rc = nvs_mount(&cf->cf_nvs);
   3007a:	f100 0608 	add.w	r6, r0, #8
   3007e:	4630      	mov	r0, r6
   30080:	f7df fa4e 	bl	f520 <nvs_mount>
	if (rc) {
   30084:	4605      	mov	r5, r0
   30086:	b970      	cbnz	r0, 300a6 <settings_nvs_backend_init+0x36>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   30088:	2302      	movs	r3, #2
   3008a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   3008e:	4630      	mov	r0, r6
   30090:	f10d 0206 	add.w	r2, sp, #6
   30094:	f7ff fd26 	bl	2fae4 <nvs_read>
	if (rc < 0) {
   30098:	2800      	cmp	r0, #0
		cf->last_name_id = last_name_id;
   3009a:	bfb4      	ite	lt
   3009c:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
   300a0:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
   300a4:	8723      	strh	r3, [r4, #56]	; 0x38
}
   300a6:	4628      	mov	r0, r5
   300a8:	b002      	add	sp, #8
   300aa:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   300ac:	f06f 0512 	mvn.w	r5, #18
   300b0:	e7f9      	b.n	300a6 <settings_nvs_backend_init+0x36>

000300b2 <attr_find_by_handle>:
{
   300b2:	b570      	push	{r4, r5, r6, lr}
   300b4:	4604      	mov	r4, r0
	if (!dm->cur_attr_id) {
   300b6:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   300ba:	b1a8      	cbz	r0, 300e8 <attr_find_by_handle+0x36>
	ssize_t lower = 0;
   300bc:	2600      	movs	r6, #0
	ssize_t upper = dm->cur_attr_id - 1;
   300be:	1e45      	subs	r5, r0, #1
	while (upper >= lower) {
   300c0:	42ae      	cmp	r6, r5
   300c2:	dd01      	ble.n	300c8 <attr_find_by_handle+0x16>
		return NULL;
   300c4:	2000      	movs	r0, #0
   300c6:	e00f      	b.n	300e8 <attr_find_by_handle+0x36>
		size_t m = (lower + upper) / 2;
   300c8:	1972      	adds	r2, r6, r5
   300ca:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   300ce:	1052      	asrs	r2, r2, #1
		if (cur_attr->handle < handle) {
   300d0:	1cd0      	adds	r0, r2, #3
   300d2:	00c3      	lsls	r3, r0, #3
   300d4:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
   300d8:	8900      	ldrh	r0, [r0, #8]
   300da:	4288      	cmp	r0, r1
   300dc:	d201      	bcs.n	300e2 <attr_find_by_handle+0x30>
			lower = m + 1;
   300de:	1c56      	adds	r6, r2, #1
   300e0:	e7ee      	b.n	300c0 <attr_find_by_handle+0xe>
		} else if (cur_attr->handle > handle) {
   300e2:	d802      	bhi.n	300ea <attr_find_by_handle+0x38>
		struct bt_gatt_dm_attr *cur_attr = &dm->attrs[m];
   300e4:	3304      	adds	r3, #4
   300e6:	18e0      	adds	r0, r4, r3
}
   300e8:	bd70      	pop	{r4, r5, r6, pc}
			upper = m - 1;
   300ea:	1e55      	subs	r5, r2, #1
   300ec:	e7e8      	b.n	300c0 <attr_find_by_handle+0xe>

000300ee <svc_attr_memory_release>:
	dm->cur_attr_id = 0;
   300ee:	2300      	movs	r3, #0
{
   300f0:	b510      	push	{r4, lr}
   300f2:	4604      	mov	r4, r0
	dm->cur_attr_id = 0;
   300f4:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
	return list->head;
   300f8:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
	while (!sys_slist_is_empty(&dm->chunk_list)) {
   300fc:	b910      	cbnz	r0, 30104 <svc_attr_memory_release+0x16>
	dm->cur_chunk_len = 0;
   300fe:	f8c4 0158 	str.w	r0, [r4, #344]	; 0x158
}
   30102:	bd10      	pop	{r4, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   30104:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
	return node->next;
   30108:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   3010a:	4290      	cmp	r0, r2
	list->head = node;
   3010c:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
	list->tail = node;
   30110:	bf08      	it	eq
   30112:	f8c4 3154 	streq.w	r3, [r4, #340]	; 0x154
		k_free(item);
   30116:	f006 f9cd 	bl	364b4 <k_free>
   3011a:	e7ed      	b.n	300f8 <svc_attr_memory_release+0xa>

0003011c <atomic_and>:
{
   3011c:	4603      	mov	r3, r0
   3011e:	b510      	push	{r4, lr}
}
   30120:	e8d3 0fef 	ldaex	r0, [r3]
   30124:	ea00 0201 	and.w	r2, r0, r1
   30128:	e8c3 2fe4 	stlex	r4, r2, [r3]
   3012c:	2c00      	cmp	r4, #0
   3012e:	d1f7      	bne.n	30120 <atomic_and+0x4>
   30130:	bd10      	pop	{r4, pc}

00030132 <z_log_msg_static_create.constprop.0>:
	z_impl_z_log_msg_static_create(source, desc, package, data);
   30132:	2300      	movs	r3, #0
   30134:	f7e0 b87e 	b.w	10234 <z_impl_z_log_msg_static_create>

00030138 <discovery_complete_error>:
{
   30138:	b570      	push	{r4, r5, r6, lr}
   3013a:	4604      	mov	r4, r0
   3013c:	460d      	mov	r5, r1
	svc_attr_memory_release(dm);
   3013e:	f7ff ffd6 	bl	300ee <svc_attr_memory_release>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   30142:	f06f 0101 	mvn.w	r1, #1
   30146:	f504 709c 	add.w	r0, r4, #312	; 0x138
   3014a:	f7ff ffe7 	bl	3011c <atomic_and>
	if (dm->callback->error_found) {
   3014e:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
   30152:	689b      	ldr	r3, [r3, #8]
   30154:	b12b      	cbz	r3, 30162 <discovery_complete_error+0x2a>
		dm->callback->error_found(dm->conn, err, dm->context);
   30156:	4629      	mov	r1, r5
   30158:	6862      	ldr	r2, [r4, #4]
   3015a:	6820      	ldr	r0, [r4, #0]
}
   3015c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		dm->callback->error_found(dm->conn, err, dm->context);
   30160:	4718      	bx	r3
}
   30162:	bd70      	pop	{r4, r5, r6, pc}

00030164 <discovery_complete_not_found>:
{
   30164:	b510      	push	{r4, lr}
   30166:	4604      	mov	r4, r0
	svc_attr_memory_release(dm);
   30168:	f7ff ffc1 	bl	300ee <svc_attr_memory_release>
   3016c:	f06f 0101 	mvn.w	r1, #1
   30170:	f504 709c 	add.w	r0, r4, #312	; 0x138
   30174:	f7ff ffd2 	bl	3011c <atomic_and>
	if (dm->callback->service_not_found) {
   30178:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
   3017c:	685b      	ldr	r3, [r3, #4]
   3017e:	b123      	cbz	r3, 3018a <discovery_complete_not_found+0x26>
		dm->callback->service_not_found(dm->conn, dm->context);
   30180:	e9d4 0100 	ldrd	r0, r1, [r4]
}
   30184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		dm->callback->service_not_found(dm->conn, dm->context);
   30188:	4718      	bx	r3
}
   3018a:	bd10      	pop	{r4, pc}

0003018c <bt_gatt_dm_attr_service_val>:
{
   3018c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   3018e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   30192:	2400      	movs	r4, #0
{
   30194:	4605      	mov	r5, r0
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   30196:	6801      	ldr	r1, [r0, #0]
   30198:	4668      	mov	r0, sp
   3019a:	f88d 4000 	strb.w	r4, [sp]
   3019e:	f8ad 3002 	strh.w	r3, [sp, #2]
   301a2:	f000 fe12 	bl	30dca <bt_uuid_cmp>
   301a6:	b918      	cbnz	r0, 301b0 <bt_gatt_dm_attr_service_val+0x24>
		return &((struct bt_gatt_service_val *)attr->uuid)[-1];
   301a8:	6828      	ldr	r0, [r5, #0]
   301aa:	3808      	subs	r0, #8
}
   301ac:	b003      	add	sp, #12
   301ae:	bd30      	pop	{r4, r5, pc}
	    (!bt_uuid_cmp(BT_UUID_GATT_SECONDARY, attr->uuid))) {
   301b0:	f642 0301 	movw	r3, #10241	; 0x2801
   301b4:	6829      	ldr	r1, [r5, #0]
   301b6:	a801      	add	r0, sp, #4
   301b8:	f88d 4004 	strb.w	r4, [sp, #4]
   301bc:	f8ad 3006 	strh.w	r3, [sp, #6]
   301c0:	f000 fe03 	bl	30dca <bt_uuid_cmp>
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   301c4:	2800      	cmp	r0, #0
   301c6:	d0ef      	beq.n	301a8 <bt_gatt_dm_attr_service_val+0x1c>
	return NULL;
   301c8:	4620      	mov	r0, r4
   301ca:	e7ef      	b.n	301ac <bt_gatt_dm_attr_service_val+0x20>

000301cc <bt_gatt_dm_attr_chrc_val>:
{
   301cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, attr->uuid)) {
   301ce:	f642 0303 	movw	r3, #10243	; 0x2803
   301d2:	2400      	movs	r4, #0
{
   301d4:	4605      	mov	r5, r0
	if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, attr->uuid)) {
   301d6:	6801      	ldr	r1, [r0, #0]
   301d8:	a801      	add	r0, sp, #4
   301da:	f88d 4004 	strb.w	r4, [sp, #4]
   301de:	f8ad 3006 	strh.w	r3, [sp, #6]
   301e2:	f000 fdf2 	bl	30dca <bt_uuid_cmp>
   301e6:	b918      	cbnz	r0, 301f0 <bt_gatt_dm_attr_chrc_val+0x24>
		return &((struct bt_gatt_chrc *)attr->uuid)[-1];
   301e8:	6828      	ldr	r0, [r5, #0]
   301ea:	3808      	subs	r0, #8
}
   301ec:	b003      	add	sp, #12
   301ee:	bd30      	pop	{r4, r5, pc}
	return NULL;
   301f0:	4620      	mov	r0, r4
   301f2:	e7fb      	b.n	301ec <bt_gatt_dm_attr_chrc_val+0x20>

000301f4 <bt_gatt_dm_conn_get>:
}
   301f4:	6800      	ldr	r0, [r0, #0]
   301f6:	4770      	bx	lr

000301f8 <bt_gatt_dm_service_get>:
}
   301f8:	301c      	adds	r0, #28
   301fa:	4770      	bx	lr

000301fc <bt_gatt_dm_char_next>:
{
   301fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		prev = dm->attrs;
   301fe:	f100 051c 	add.w	r5, r0, #28
	if (!prev) {
   30202:	b131      	cbz	r1, 30212 <bt_gatt_dm_char_next+0x16>
	if (dm->attrs <= prev) {
   30204:	42a9      	cmp	r1, r5
   30206:	d203      	bcs.n	30210 <bt_gatt_dm_char_next+0x14>
	return NULL;
   30208:	2500      	movs	r5, #0
}
   3020a:	4628      	mov	r0, r5
   3020c:	b003      	add	sp, #12
   3020e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   30210:	460d      	mov	r5, r1
			if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, prev->uuid)) {
   30212:	2600      	movs	r6, #0
   30214:	f642 0703 	movw	r7, #10243	; 0x2803
		const struct bt_gatt_dm_attr *const end =
   30218:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
   3021c:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   30220:	f100 041c 	add.w	r4, r0, #28
		while (++prev < end) {
   30224:	3508      	adds	r5, #8
   30226:	42ac      	cmp	r4, r5
   30228:	d9ee      	bls.n	30208 <bt_gatt_dm_char_next+0xc>
			if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, prev->uuid)) {
   3022a:	6829      	ldr	r1, [r5, #0]
   3022c:	a801      	add	r0, sp, #4
   3022e:	f88d 6004 	strb.w	r6, [sp, #4]
   30232:	f8ad 7006 	strh.w	r7, [sp, #6]
   30236:	f000 fdc8 	bl	30dca <bt_uuid_cmp>
   3023a:	2800      	cmp	r0, #0
   3023c:	d1f2      	bne.n	30224 <bt_gatt_dm_char_next+0x28>
   3023e:	e7e4      	b.n	3020a <bt_gatt_dm_char_next+0xe>

00030240 <bt_gatt_dm_attr_next>:
{
   30240:	4603      	mov	r3, r0
		prev = dm->attrs;
   30242:	f100 021c 	add.w	r2, r0, #28
	if (!prev) {
   30246:	b119      	cbz	r1, 30250 <bt_gatt_dm_attr_next+0x10>
	if (dm->attrs <= prev) {
   30248:	4291      	cmp	r1, r2
   3024a:	d202      	bcs.n	30252 <bt_gatt_dm_attr_next+0x12>
	return NULL;
   3024c:	2000      	movs	r0, #0
}
   3024e:	4770      	bx	lr
		prev = dm->attrs;
   30250:	4611      	mov	r1, r2
		const struct bt_gatt_dm_attr *const end =
   30252:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
		if (++prev < end) {
   30256:	f101 0008 	add.w	r0, r1, #8
		const struct bt_gatt_dm_attr *const end =
   3025a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   3025e:	331c      	adds	r3, #28
	return NULL;
   30260:	4298      	cmp	r0, r3
   30262:	bf28      	it	cs
   30264:	2000      	movcs	r0, #0
   30266:	4770      	bx	lr

00030268 <bt_gatt_dm_desc_next>:
{
   30268:	b513      	push	{r0, r1, r4, lr}
	const struct bt_gatt_dm_attr *curr = bt_gatt_dm_attr_next(dm, prev);
   3026a:	f7ff ffe9 	bl	30240 <bt_gatt_dm_attr_next>
	if (curr && !bt_uuid_cmp(BT_UUID_GATT_CHRC, curr->uuid)) {
   3026e:	4604      	mov	r4, r0
   30270:	b918      	cbnz	r0, 3027a <bt_gatt_dm_desc_next+0x12>
	const struct bt_gatt_dm_attr *curr = bt_gatt_dm_attr_next(dm, prev);
   30272:	2400      	movs	r4, #0
}
   30274:	4620      	mov	r0, r4
   30276:	b002      	add	sp, #8
   30278:	bd10      	pop	{r4, pc}
	if (curr && !bt_uuid_cmp(BT_UUID_GATT_CHRC, curr->uuid)) {
   3027a:	2300      	movs	r3, #0
   3027c:	f88d 3004 	strb.w	r3, [sp, #4]
   30280:	f642 0303 	movw	r3, #10243	; 0x2803
   30284:	6801      	ldr	r1, [r0, #0]
   30286:	a801      	add	r0, sp, #4
   30288:	f8ad 3006 	strh.w	r3, [sp, #6]
   3028c:	f000 fd9d 	bl	30dca <bt_uuid_cmp>
   30290:	2800      	cmp	r0, #0
   30292:	d1ef      	bne.n	30274 <bt_gatt_dm_desc_next+0xc>
   30294:	e7ed      	b.n	30272 <bt_gatt_dm_desc_next+0xa>

00030296 <bt_gatt_dm_desc_by_uuid>:
{
   30296:	b570      	push	{r4, r5, r6, lr}
   30298:	4605      	mov	r5, r0
   3029a:	4616      	mov	r6, r2
	const struct bt_gatt_dm_attr *curr = attr_chrc;
   3029c:	460c      	mov	r4, r1
	while ((curr = bt_gatt_dm_desc_next(dm, curr)) != NULL) {
   3029e:	4621      	mov	r1, r4
   302a0:	4628      	mov	r0, r5
   302a2:	f7ff ffe1 	bl	30268 <bt_gatt_dm_desc_next>
   302a6:	4604      	mov	r4, r0
   302a8:	b128      	cbz	r0, 302b6 <bt_gatt_dm_desc_by_uuid+0x20>
		if (!bt_uuid_cmp(uuid, curr->uuid)) {
   302aa:	4630      	mov	r0, r6
   302ac:	6821      	ldr	r1, [r4, #0]
   302ae:	f000 fd8c 	bl	30dca <bt_uuid_cmp>
   302b2:	2800      	cmp	r0, #0
   302b4:	d1f3      	bne.n	3029e <bt_gatt_dm_desc_by_uuid+0x8>
}
   302b6:	4620      	mov	r0, r4
   302b8:	bd70      	pop	{r4, r5, r6, pc}

000302ba <bt_gatt_dm_data_release>:

	return err;
}

int bt_gatt_dm_data_release(struct bt_gatt_dm *dm)
{
   302ba:	b538      	push	{r3, r4, r5, lr}
	if (!atomic_test_and_clear_bit(dm->state_flags,
   302bc:	f500 759c 	add.w	r5, r0, #312	; 0x138
{
   302c0:	4604      	mov	r4, r0
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   302c2:	f06f 0102 	mvn.w	r1, #2
   302c6:	4628      	mov	r0, r5
   302c8:	f7ff ff28 	bl	3011c <atomic_and>
	if (!atomic_test_and_clear_bit(dm->state_flags,
   302cc:	0783      	lsls	r3, r0, #30
   302ce:	d509      	bpl.n	302e4 <bt_gatt_dm_data_release+0x2a>
				       STATE_ATTRS_RELEASE_PENDING)) {
		return -EALREADY;
	}

	svc_attr_memory_release(dm);
   302d0:	4620      	mov	r0, r4
   302d2:	f7ff ff0c 	bl	300ee <svc_attr_memory_release>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   302d6:	f06f 0101 	mvn.w	r1, #1
   302da:	4628      	mov	r0, r5
   302dc:	f7ff ff1e 	bl	3011c <atomic_and>
	atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);

	return 0;
   302e0:	2000      	movs	r0, #0
}
   302e2:	bd38      	pop	{r3, r4, r5, pc}
		return -EALREADY;
   302e4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   302e8:	e7fb      	b.n	302e2 <bt_gatt_dm_data_release+0x28>

000302ea <adv_data_found>:
{
   302ea:	b510      	push	{r4, lr}
   302ec:	4604      	mov	r4, r0
	switch (data->type) {
   302ee:	7823      	ldrb	r3, [r4, #0]
{
   302f0:	4608      	mov	r0, r1
	switch (data->type) {
   302f2:	2b05      	cmp	r3, #5
   302f4:	d806      	bhi.n	30304 <adv_data_found+0x1a>
   302f6:	2b03      	cmp	r3, #3
   302f8:	d80e      	bhi.n	30318 <adv_data_found+0x2e>
   302fa:	3b02      	subs	r3, #2
   302fc:	2b01      	cmp	r3, #1
   302fe:	d906      	bls.n	3030e <adv_data_found+0x24>
}
   30300:	2001      	movs	r0, #1
   30302:	bd10      	pop	{r4, pc}
	switch (data->type) {
   30304:	3b06      	subs	r3, #6
   30306:	2b01      	cmp	r3, #1
   30308:	d8fa      	bhi.n	30300 <adv_data_found+0x16>
		uuid_check(scan_control, data, BT_UUID_TYPE_128);
   3030a:	2202      	movs	r2, #2
   3030c:	e000      	b.n	30310 <adv_data_found+0x26>
		uuid_check(scan_control, data, BT_UUID_TYPE_16);
   3030e:	2200      	movs	r2, #0
		uuid_check(scan_control, data, BT_UUID_TYPE_128);
   30310:	4621      	mov	r1, r4
   30312:	f7e1 fbe7 	bl	11ae4 <uuid_check>
		break;
   30316:	e7f3      	b.n	30300 <adv_data_found+0x16>
		uuid_check(scan_control, data, BT_UUID_TYPE_32);
   30318:	2201      	movs	r2, #1
   3031a:	e7f9      	b.n	30310 <adv_data_found+0x26>

0003031c <bt_scan_stop>:
	return bt_le_scan_stop();
   3031c:	f7e5 bf32 	b.w	16184 <bt_le_scan_stop>

00030320 <on_sent>:
{
   30320:	4610      	mov	r0, r2
   30322:	b430      	push	{r4, r5}
	data = params->data;
   30324:	6892      	ldr	r2, [r2, #8]
	length = params->length;
   30326:	8983      	ldrh	r3, [r0, #12]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   30328:	f1a0 0428 	sub.w	r4, r0, #40	; 0x28
   3032c:	e8d4 cfef 	ldaex	ip, [r4]
   30330:	f02c 0c04 	bic.w	ip, ip, #4
   30334:	e8c4 cfe5 	stlex	r5, ip, [r4]
   30338:	2d00      	cmp	r5, #0
   3033a:	d1f7      	bne.n	3032c <on_sent+0xc>
	if (nus_c->cb.sent) {
   3033c:	6944      	ldr	r4, [r0, #20]
   3033e:	b11c      	cbz	r4, 30348 <on_sent+0x28>
		nus_c->cb.sent(nus_c, err, data, length);
   30340:	46a4      	mov	ip, r4
}
   30342:	bc30      	pop	{r4, r5}
		nus_c->cb.sent(nus_c, err, data, length);
   30344:	382c      	subs	r0, #44	; 0x2c
   30346:	4760      	bx	ip
}
   30348:	bc30      	pop	{r4, r5}
   3034a:	4770      	bx	lr

0003034c <on_received>:
{
   3034c:	b510      	push	{r4, lr}
   3034e:	460c      	mov	r4, r1
   30350:	4611      	mov	r1, r2
	nus = CONTAINER_OF(params, struct bt_nus_client, tx_notif_params);
   30352:	f1a4 0010 	sub.w	r0, r4, #16
{
   30356:	461a      	mov	r2, r3
	if (!data) {
   30358:	b979      	cbnz	r1, 3037a <on_received+0x2e>
		params->value_handle = 0;
   3035a:	81a1      	strh	r1, [r4, #12]
   3035c:	f1a4 030c 	sub.w	r3, r4, #12
   30360:	e8d3 1fef 	ldaex	r1, [r3]
   30364:	f021 0102 	bic.w	r1, r1, #2
   30368:	e8c3 1fe2 	stlex	r2, r1, [r3]
   3036c:	2a00      	cmp	r2, #0
   3036e:	d1f7      	bne.n	30360 <on_received+0x14>
		if (nus->cb.unsubscribed) {
   30370:	6b63      	ldr	r3, [r4, #52]	; 0x34
   30372:	b103      	cbz	r3, 30376 <on_received+0x2a>
			nus->cb.unsubscribed(nus);
   30374:	4798      	blx	r3
		return BT_GATT_ITER_STOP;
   30376:	2000      	movs	r0, #0
}
   30378:	bd10      	pop	{r4, pc}
	if (nus->cb.received) {
   3037a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   3037c:	b113      	cbz	r3, 30384 <on_received+0x38>
}
   3037e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return nus->cb.received(nus, data, length);
   30382:	4718      	bx	r3
	return BT_GATT_ITER_CONTINUE;
   30384:	2001      	movs	r0, #1
   30386:	e7f7      	b.n	30378 <on_received+0x2c>

00030388 <bt_nus_client_init>:
	if (!nus_c || !nus_c_init) {
   30388:	4602      	mov	r2, r0
{
   3038a:	b530      	push	{r4, r5, lr}
	if (!nus_c || !nus_c_init) {
   3038c:	b198      	cbz	r0, 303b6 <bt_nus_client_init+0x2e>
   3038e:	b191      	cbz	r1, 303b6 <bt_nus_client_init+0x2e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   30390:	3004      	adds	r0, #4
   30392:	e8d0 3fef 	ldaex	r3, [r0]
   30396:	f043 0401 	orr.w	r4, r3, #1
   3039a:	e8c0 4fe5 	stlex	r5, r4, [r0]
   3039e:	2d00      	cmp	r5, #0
   303a0:	d1f7      	bne.n	30392 <bt_nus_client_init+0xa>
	if (atomic_test_and_set_bit(&nus_c->state, NUS_C_INITIALIZED)) {
   303a2:	f013 0001 	ands.w	r0, r3, #1
   303a6:	d109      	bne.n	303bc <bt_nus_client_init+0x34>
   303a8:	680b      	ldr	r3, [r1, #0]
   303aa:	63d3      	str	r3, [r2, #60]	; 0x3c
   303ac:	684b      	ldr	r3, [r1, #4]
   303ae:	6413      	str	r3, [r2, #64]	; 0x40
   303b0:	688b      	ldr	r3, [r1, #8]
   303b2:	6453      	str	r3, [r2, #68]	; 0x44
}
   303b4:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   303b6:	f06f 0015 	mvn.w	r0, #21
   303ba:	e7fb      	b.n	303b4 <bt_nus_client_init+0x2c>
		return -EALREADY;
   303bc:	f06f 0077 	mvn.w	r0, #119	; 0x77
   303c0:	e7f8      	b.n	303b4 <bt_nus_client_init+0x2c>

000303c2 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   303c2:	b538      	push	{r3, r4, r5, lr}
   303c4:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   303c6:	42ab      	cmp	r3, r5
{
   303c8:	4611      	mov	r1, r2
   303ca:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   303cc:	d804      	bhi.n	303d8 <_copy+0x16>
   303ce:	461a      	mov	r2, r3
   303d0:	f006 f8aa 	bl	36528 <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   303d4:	4620      	mov	r0, r4
   303d6:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   303d8:	2400      	movs	r4, #0
   303da:	e7fb      	b.n	303d4 <_copy+0x12>

000303dc <_set>:
__ssp_bos_icheck3(memset, void *, int)
   303dc:	f006 b8c4 	b.w	36568 <memset>

000303e0 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   303e0:	09c3      	lsrs	r3, r0, #7
   303e2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   303e6:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   303ea:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   303ee:	b2c0      	uxtb	r0, r0
   303f0:	4770      	bx	lr

000303f2 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   303f2:	78cb      	ldrb	r3, [r1, #3]
   303f4:	7802      	ldrb	r2, [r0, #0]
   303f6:	4053      	eors	r3, r2
   303f8:	7003      	strb	r3, [r0, #0]
   303fa:	884b      	ldrh	r3, [r1, #2]
   303fc:	7842      	ldrb	r2, [r0, #1]
   303fe:	4053      	eors	r3, r2
   30400:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   30402:	680a      	ldr	r2, [r1, #0]
   30404:	7883      	ldrb	r3, [r0, #2]
   30406:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   3040a:	7083      	strb	r3, [r0, #2]
   3040c:	680a      	ldr	r2, [r1, #0]
   3040e:	78c3      	ldrb	r3, [r0, #3]
   30410:	4053      	eors	r3, r2
   30412:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   30414:	79cb      	ldrb	r3, [r1, #7]
   30416:	7902      	ldrb	r2, [r0, #4]
   30418:	4053      	eors	r3, r2
   3041a:	7103      	strb	r3, [r0, #4]
   3041c:	88cb      	ldrh	r3, [r1, #6]
   3041e:	7942      	ldrb	r2, [r0, #5]
   30420:	4053      	eors	r3, r2
   30422:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   30424:	684a      	ldr	r2, [r1, #4]
   30426:	7983      	ldrb	r3, [r0, #6]
   30428:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   3042c:	7183      	strb	r3, [r0, #6]
   3042e:	684a      	ldr	r2, [r1, #4]
   30430:	79c3      	ldrb	r3, [r0, #7]
   30432:	4053      	eors	r3, r2
   30434:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   30436:	7acb      	ldrb	r3, [r1, #11]
   30438:	7a02      	ldrb	r2, [r0, #8]
   3043a:	4053      	eors	r3, r2
   3043c:	7203      	strb	r3, [r0, #8]
   3043e:	7a42      	ldrb	r2, [r0, #9]
   30440:	894b      	ldrh	r3, [r1, #10]
   30442:	4053      	eors	r3, r2
   30444:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   30446:	688a      	ldr	r2, [r1, #8]
   30448:	7a83      	ldrb	r3, [r0, #10]
   3044a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   3044e:	7283      	strb	r3, [r0, #10]
   30450:	688a      	ldr	r2, [r1, #8]
   30452:	7ac3      	ldrb	r3, [r0, #11]
   30454:	4053      	eors	r3, r2
   30456:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   30458:	7bcb      	ldrb	r3, [r1, #15]
   3045a:	7b02      	ldrb	r2, [r0, #12]
   3045c:	4053      	eors	r3, r2
   3045e:	7303      	strb	r3, [r0, #12]
   30460:	89cb      	ldrh	r3, [r1, #14]
   30462:	7b42      	ldrb	r2, [r0, #13]
   30464:	4053      	eors	r3, r2
   30466:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   30468:	68ca      	ldr	r2, [r1, #12]
   3046a:	7b83      	ldrb	r3, [r0, #14]
   3046c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   30470:	7383      	strb	r3, [r0, #14]
   30472:	68ca      	ldr	r2, [r1, #12]
   30474:	7bc3      	ldrb	r3, [r0, #15]
   30476:	4053      	eors	r3, r2
   30478:	73c3      	strb	r3, [r0, #15]
}
   3047a:	4770      	bx	lr

0003047c <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   3047c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   3047e:	7802      	ldrb	r2, [r0, #0]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   30480:	7ac3      	ldrb	r3, [r0, #11]
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   30482:	f88d 2000 	strb.w	r2, [sp]
   30486:	7942      	ldrb	r2, [r0, #5]
   30488:	f88d 2001 	strb.w	r2, [sp, #1]
   3048c:	7a82      	ldrb	r2, [r0, #10]
   3048e:	f88d 2002 	strb.w	r2, [sp, #2]
   30492:	7bc2      	ldrb	r2, [r0, #15]
   30494:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   30498:	7902      	ldrb	r2, [r0, #4]
   3049a:	f88d 2004 	strb.w	r2, [sp, #4]
   3049e:	7a42      	ldrb	r2, [r0, #9]
   304a0:	f88d 2005 	strb.w	r2, [sp, #5]
   304a4:	7b82      	ldrb	r2, [r0, #14]
   304a6:	f88d 2006 	strb.w	r2, [sp, #6]
   304aa:	78c2      	ldrb	r2, [r0, #3]
   304ac:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   304b0:	7a02      	ldrb	r2, [r0, #8]
   304b2:	f88d 2008 	strb.w	r2, [sp, #8]
   304b6:	7b42      	ldrb	r2, [r0, #13]
   304b8:	f88d 2009 	strb.w	r2, [sp, #9]
   304bc:	7882      	ldrb	r2, [r0, #2]
   304be:	f88d 200a 	strb.w	r2, [sp, #10]
   304c2:	79c2      	ldrb	r2, [r0, #7]
   304c4:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   304c8:	7b02      	ldrb	r2, [r0, #12]
   304ca:	f88d 200c 	strb.w	r2, [sp, #12]
   304ce:	7842      	ldrb	r2, [r0, #1]
   304d0:	f88d 200d 	strb.w	r2, [sp, #13]
   304d4:	7982      	ldrb	r2, [r0, #6]
   304d6:	f88d 200e 	strb.w	r2, [sp, #14]
   304da:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   304de:	2310      	movs	r3, #16
   304e0:	466a      	mov	r2, sp
   304e2:	4619      	mov	r1, r3
   304e4:	f7ff ff6d 	bl	303c2 <_copy>
}
   304e8:	b005      	add	sp, #20
   304ea:	f85d fb04 	ldr.w	pc, [sp], #4

000304ee <mult_row_column>:
{
   304ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   304f0:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   304f2:	7808      	ldrb	r0, [r1, #0]
{
   304f4:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   304f6:	f7ff ff73 	bl	303e0 <_double_byte>
   304fa:	4605      	mov	r5, r0
   304fc:	7860      	ldrb	r0, [r4, #1]
   304fe:	f7ff ff6f 	bl	303e0 <_double_byte>
   30502:	78a2      	ldrb	r2, [r4, #2]
   30504:	7863      	ldrb	r3, [r4, #1]
   30506:	4053      	eors	r3, r2
   30508:	78e2      	ldrb	r2, [r4, #3]
   3050a:	4053      	eors	r3, r2
   3050c:	405d      	eors	r5, r3
   3050e:	4068      	eors	r0, r5
   30510:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   30512:	7860      	ldrb	r0, [r4, #1]
   30514:	7827      	ldrb	r7, [r4, #0]
   30516:	f7ff ff63 	bl	303e0 <_double_byte>
   3051a:	4605      	mov	r5, r0
   3051c:	78a0      	ldrb	r0, [r4, #2]
   3051e:	f7ff ff5f 	bl	303e0 <_double_byte>
   30522:	78a3      	ldrb	r3, [r4, #2]
   30524:	405f      	eors	r7, r3
   30526:	78e3      	ldrb	r3, [r4, #3]
   30528:	405f      	eors	r7, r3
   3052a:	407d      	eors	r5, r7
   3052c:	4068      	eors	r0, r5
   3052e:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   30530:	7863      	ldrb	r3, [r4, #1]
   30532:	7827      	ldrb	r7, [r4, #0]
   30534:	78a0      	ldrb	r0, [r4, #2]
   30536:	405f      	eors	r7, r3
   30538:	f7ff ff52 	bl	303e0 <_double_byte>
   3053c:	4605      	mov	r5, r0
   3053e:	78e0      	ldrb	r0, [r4, #3]
   30540:	f7ff ff4e 	bl	303e0 <_double_byte>
   30544:	78e3      	ldrb	r3, [r4, #3]
   30546:	405f      	eors	r7, r3
   30548:	407d      	eors	r5, r7
   3054a:	4068      	eors	r0, r5
   3054c:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   3054e:	7820      	ldrb	r0, [r4, #0]
   30550:	f7ff ff46 	bl	303e0 <_double_byte>
   30554:	7862      	ldrb	r2, [r4, #1]
   30556:	7823      	ldrb	r3, [r4, #0]
   30558:	4053      	eors	r3, r2
   3055a:	78a2      	ldrb	r2, [r4, #2]
   3055c:	4053      	eors	r3, r2
   3055e:	ea80 0503 	eor.w	r5, r0, r3
   30562:	78e0      	ldrb	r0, [r4, #3]
   30564:	f7ff ff3c 	bl	303e0 <_double_byte>
   30568:	b2ed      	uxtb	r5, r5
   3056a:	4045      	eors	r5, r0
   3056c:	70f5      	strb	r5, [r6, #3]
}
   3056e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00030570 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   30570:	b570      	push	{r4, r5, r6, lr}
   30572:	4614      	mov	r4, r2
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   30574:	4605      	mov	r5, r0
{
   30576:	b088      	sub	sp, #32
	if (out == (uint8_t *) 0) {
   30578:	2800      	cmp	r0, #0
   3057a:	d049      	beq.n	30610 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   3057c:	2900      	cmp	r1, #0
   3057e:	d049      	beq.n	30614 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   30580:	2a00      	cmp	r2, #0
   30582:	d049      	beq.n	30618 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   30584:	2310      	movs	r3, #16
   30586:	460a      	mov	r2, r1
   30588:	4668      	mov	r0, sp
   3058a:	4619      	mov	r1, r3
   3058c:	f7ff ff19 	bl	303c2 <_copy>
	add_round_key(state, s->words);
   30590:	4621      	mov	r1, r4
   30592:	4668      	mov	r0, sp
   30594:	f7ff ff2d 	bl	303f2 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   30598:	3410      	adds	r4, #16
   3059a:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   3059e:	4668      	mov	r0, sp
   305a0:	f7e1 fdd2 	bl	12148 <sub_bytes>
		shift_rows(state);
   305a4:	4668      	mov	r0, sp
   305a6:	f7ff ff69 	bl	3047c <shift_rows>
	mult_row_column(t, s);
   305aa:	4669      	mov	r1, sp
   305ac:	a804      	add	r0, sp, #16
   305ae:	f7ff ff9e 	bl	304ee <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   305b2:	a901      	add	r1, sp, #4
   305b4:	a805      	add	r0, sp, #20
   305b6:	f7ff ff9a 	bl	304ee <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   305ba:	a902      	add	r1, sp, #8
   305bc:	a806      	add	r0, sp, #24
   305be:	f7ff ff96 	bl	304ee <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   305c2:	a903      	add	r1, sp, #12
   305c4:	a807      	add	r0, sp, #28
   305c6:	f7ff ff92 	bl	304ee <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   305ca:	2310      	movs	r3, #16
   305cc:	4668      	mov	r0, sp
   305ce:	4619      	mov	r1, r3
   305d0:	eb0d 0203 	add.w	r2, sp, r3
   305d4:	f7ff fef5 	bl	303c2 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   305d8:	4621      	mov	r1, r4
   305da:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   305dc:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   305de:	f7ff ff08 	bl	303f2 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   305e2:	42b4      	cmp	r4, r6
   305e4:	d1db      	bne.n	3059e <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   305e6:	f7e1 fdaf 	bl	12148 <sub_bytes>
	shift_rows(state);
   305ea:	4668      	mov	r0, sp
   305ec:	f7ff ff46 	bl	3047c <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   305f0:	4621      	mov	r1, r4
   305f2:	4668      	mov	r0, sp
   305f4:	f7ff fefd 	bl	303f2 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   305f8:	2310      	movs	r3, #16
   305fa:	466a      	mov	r2, sp
   305fc:	4619      	mov	r1, r3
   305fe:	4628      	mov	r0, r5
   30600:	f7ff fedf 	bl	303c2 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   30604:	4668      	mov	r0, sp
   30606:	2210      	movs	r2, #16
   30608:	2100      	movs	r1, #0
   3060a:	f7ff fee7 	bl	303dc <_set>

	return TC_CRYPTO_SUCCESS;
   3060e:	2001      	movs	r0, #1
}
   30610:	b008      	add	sp, #32
   30612:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   30614:	4608      	mov	r0, r1
   30616:	e7fb      	b.n	30610 <tc_aes_encrypt+0xa0>
   30618:	4610      	mov	r0, r2
   3061a:	e7f9      	b.n	30610 <tc_aes_encrypt+0xa0>

0003061c <gf_double>:

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   3061c:	460a      	mov	r2, r1
{
   3061e:	b510      	push	{r4, lr}
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   30620:	f912 3b10 	ldrsb.w	r3, [r2], #16

	out += (TC_AES_BLOCK_SIZE - 1);
   30624:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   30626:	2b00      	cmp	r3, #0
   30628:	bfac      	ite	ge
   3062a:	2300      	movge	r3, #0
   3062c:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   3062e:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   30632:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   30636:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   30638:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   3063c:	d002      	beq.n	30644 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   3063e:	7813      	ldrb	r3, [r2, #0]
   30640:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   30642:	e7f4      	b.n	3062e <gf_double+0x12>
	}
}
   30644:	bd10      	pop	{r4, pc}

00030646 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   30646:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   30648:	b120      	cbz	r0, 30654 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   3064a:	2258      	movs	r2, #88	; 0x58
   3064c:	2100      	movs	r1, #0
   3064e:	f7ff fec5 	bl	303dc <_set>
   30652:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   30654:	bd08      	pop	{r3, pc}

00030656 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   30656:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   30658:	4604      	mov	r4, r0
   3065a:	b188      	cbz	r0, 30680 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   3065c:	2210      	movs	r2, #16
   3065e:	2100      	movs	r1, #0
   30660:	f7ff febc 	bl	303dc <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   30664:	2210      	movs	r2, #16
   30666:	f104 0030 	add.w	r0, r4, #48	; 0x30
   3066a:	2100      	movs	r1, #0
   3066c:	f7ff feb6 	bl	303dc <_set>
	s->leftover_offset = 0;
   30670:	2300      	movs	r3, #0

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   30672:	2200      	movs	r2, #0
	s->leftover_offset = 0;
   30674:	6463      	str	r3, [r4, #68]	; 0x44
	s->countdown = MAX_CALLS;
   30676:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   3067a:	2001      	movs	r0, #1
   3067c:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
}
   30680:	bd10      	pop	{r4, pc}

00030682 <tc_cmac_setup>:
{
   30682:	b570      	push	{r4, r5, r6, lr}
   30684:	4604      	mov	r4, r0
   30686:	460d      	mov	r5, r1
   30688:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   3068a:	b310      	cbz	r0, 306d2 <tc_cmac_setup+0x50>
   3068c:	b311      	cbz	r1, 306d4 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   3068e:	2258      	movs	r2, #88	; 0x58
   30690:	2100      	movs	r1, #0
   30692:	f7ff fea3 	bl	303dc <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   30696:	4629      	mov	r1, r5
   30698:	4630      	mov	r0, r6
	s->sched = sched;
   3069a:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   3069c:	f7e1 fd60 	bl	12160 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   306a0:	2210      	movs	r2, #16
   306a2:	2100      	movs	r1, #0
   306a4:	4620      	mov	r0, r4
   306a6:	f7ff fe99 	bl	303dc <_set>
	gf_double (s->K1, s->iv);
   306aa:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   306ae:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   306b0:	4621      	mov	r1, r4
   306b2:	4620      	mov	r0, r4
   306b4:	f7ff ff5c 	bl	30570 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   306b8:	4621      	mov	r1, r4
   306ba:	4628      	mov	r0, r5
   306bc:	f7ff ffae 	bl	3061c <gf_double>
	gf_double (s->K2, s->K1);
   306c0:	4629      	mov	r1, r5
   306c2:	f104 0020 	add.w	r0, r4, #32
   306c6:	f7ff ffa9 	bl	3061c <gf_double>
	tc_cmac_init(s);
   306ca:	4620      	mov	r0, r4
   306cc:	f7ff ffc3 	bl	30656 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   306d0:	2001      	movs	r0, #1
}
   306d2:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   306d4:	4608      	mov	r0, r1
   306d6:	e7fc      	b.n	306d2 <tc_cmac_setup+0x50>

000306d8 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   306d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   306dc:	460e      	mov	r6, r1
   306de:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   306e0:	4604      	mov	r4, r0
   306e2:	2800      	cmp	r0, #0
   306e4:	d060      	beq.n	307a8 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   306e6:	b1fa      	cbz	r2, 30728 <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   306e8:	2900      	cmp	r1, #0
   306ea:	d05d      	beq.n	307a8 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   306ec:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   306f0:	ea53 0102 	orrs.w	r1, r3, r2
   306f4:	d058      	beq.n	307a8 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   306f6:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   306f8:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   306fc:	f142 32ff 	adc.w	r2, r2, #4294967295
   30700:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   30704:	f1b8 0f00 	cmp.w	r8, #0
   30708:	d02c      	beq.n	30764 <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   3070a:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   3070e:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   30712:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   30714:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   30716:	d20a      	bcs.n	3072e <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   30718:	462b      	mov	r3, r5
   3071a:	4632      	mov	r2, r6
   3071c:	4629      	mov	r1, r5
   3071e:	f7ff fe50 	bl	303c2 <_copy>
			s->leftover_offset += data_length;
   30722:	6c63      	ldr	r3, [r4, #68]	; 0x44
   30724:	442b      	add	r3, r5
   30726:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   30728:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   3072a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   3072e:	463b      	mov	r3, r7
   30730:	4632      	mov	r2, r6
   30732:	4639      	mov	r1, r7
   30734:	f7ff fe45 	bl	303c2 <_copy>
		s->leftover_offset = 0;
   30738:	2300      	movs	r3, #0
   3073a:	3d10      	subs	r5, #16
   3073c:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   3073e:	4445      	add	r5, r8
		data += remaining_space;
   30740:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   30742:	1e63      	subs	r3, r4, #1
   30744:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   30748:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   3074c:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   30750:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   30752:	ea82 0200 	eor.w	r2, r2, r0
   30756:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   30758:	d1f6      	bne.n	30748 <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   3075a:	4621      	mov	r1, r4
   3075c:	4620      	mov	r0, r4
   3075e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   30760:	f7ff ff06 	bl	30570 <tc_aes_encrypt>
   30764:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   30768:	2d10      	cmp	r5, #16
   3076a:	d80a      	bhi.n	30782 <tc_cmac_update+0xaa>
	if (data_length > 0) {
   3076c:	2d00      	cmp	r5, #0
   3076e:	d0db      	beq.n	30728 <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   30770:	462b      	mov	r3, r5
   30772:	4632      	mov	r2, r6
   30774:	4629      	mov	r1, r5
   30776:	f104 0030 	add.w	r0, r4, #48	; 0x30
   3077a:	f7ff fe22 	bl	303c2 <_copy>
		s->leftover_offset = data_length;
   3077e:	6465      	str	r5, [r4, #68]	; 0x44
   30780:	e7d2      	b.n	30728 <tc_cmac_update+0x50>
   30782:	1e63      	subs	r3, r4, #1
   30784:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   30786:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   3078a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   3078e:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   30790:	ea82 0200 	eor.w	r2, r2, r0
   30794:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   30796:	d1f6      	bne.n	30786 <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   30798:	4621      	mov	r1, r4
   3079a:	4620      	mov	r0, r4
   3079c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   3079e:	f7ff fee7 	bl	30570 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   307a2:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   307a4:	3d10      	subs	r5, #16
   307a6:	e7df      	b.n	30768 <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   307a8:	2000      	movs	r0, #0
   307aa:	e7be      	b.n	3072a <tc_cmac_update+0x52>

000307ac <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   307ac:	b570      	push	{r4, r5, r6, lr}
   307ae:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   307b0:	4605      	mov	r5, r0
   307b2:	b1f0      	cbz	r0, 307f2 <tc_cmac_final+0x46>
   307b4:	b371      	cbz	r1, 30814 <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   307b6:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   307b8:	2a10      	cmp	r2, #16
   307ba:	d11b      	bne.n	307f4 <tc_cmac_final+0x48>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   307bc:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   307be:	1e63      	subs	r3, r4, #1
   307c0:	3901      	subs	r1, #1
   307c2:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   307c6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   307ca:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   307ce:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   307d0:	ea82 0206 	eor.w	r2, r2, r6
   307d4:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   307d8:	ea82 0206 	eor.w	r2, r2, r6
   307dc:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   307de:	d1f2      	bne.n	307c6 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   307e0:	4621      	mov	r1, r4
   307e2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   307e4:	4628      	mov	r0, r5
   307e6:	f7ff fec3 	bl	30570 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   307ea:	4620      	mov	r0, r4
   307ec:	f7ff ff2b 	bl	30646 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   307f0:	2001      	movs	r0, #1
}
   307f2:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   307f4:	f102 0030 	add.w	r0, r2, #48	; 0x30
   307f8:	2100      	movs	r1, #0
   307fa:	f1c2 0210 	rsb	r2, r2, #16
   307fe:	4420      	add	r0, r4
   30800:	f7ff fdec 	bl	303dc <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   30804:	2280      	movs	r2, #128	; 0x80
   30806:	6c63      	ldr	r3, [r4, #68]	; 0x44
		k = (uint8_t *) s->K2;
   30808:	f104 0120 	add.w	r1, r4, #32
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   3080c:	4423      	add	r3, r4
   3080e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   30812:	e7d4      	b.n	307be <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   30814:	4608      	mov	r0, r1
   30816:	e7ec      	b.n	307f2 <tc_cmac_final+0x46>

00030818 <tc_sha256_update>:
{
   30818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3081a:	460c      	mov	r4, r1
	if (s == (TCSha256State_t) 0 ||
   3081c:	b110      	cbz	r0, 30824 <tc_sha256_update+0xc>
   3081e:	b1f9      	cbz	r1, 30860 <tc_sha256_update+0x48>
	} else if (datalen == 0) {
   30820:	b90a      	cbnz	r2, 30826 <tc_sha256_update+0xe>
		return TC_CRYPTO_SUCCESS;
   30822:	2001      	movs	r0, #1
}
   30824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->leftover_offset = 0;
   30826:	2700      	movs	r7, #0
   30828:	188d      	adds	r5, r1, r2
			compress(s->iv, s->leftover);
   3082a:	f100 0628 	add.w	r6, r0, #40	; 0x28
		s->leftover[s->leftover_offset++] = *(data++);
   3082e:	6e83      	ldr	r3, [r0, #104]	; 0x68
   30830:	1c5a      	adds	r2, r3, #1
   30832:	6682      	str	r2, [r0, #104]	; 0x68
   30834:	f814 1b01 	ldrb.w	r1, [r4], #1
   30838:	4403      	add	r3, r0
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   3083a:	2a3f      	cmp	r2, #63	; 0x3f
		s->leftover[s->leftover_offset++] = *(data++);
   3083c:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   30840:	d90b      	bls.n	3085a <tc_sha256_update+0x42>
			compress(s->iv, s->leftover);
   30842:	4631      	mov	r1, r6
   30844:	f7e1 fce0 	bl	12208 <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   30848:	e9d0 3208 	ldrd	r3, r2, [r0, #32]
   3084c:	f513 7300 	adds.w	r3, r3, #512	; 0x200
   30850:	f142 0200 	adc.w	r2, r2, #0
   30854:	e9c0 3208 	strd	r3, r2, [r0, #32]
			s->leftover_offset = 0;
   30858:	6687      	str	r7, [r0, #104]	; 0x68
	while (datalen-- > 0) {
   3085a:	42a5      	cmp	r5, r4
   3085c:	d1e7      	bne.n	3082e <tc_sha256_update+0x16>
   3085e:	e7e0      	b.n	30822 <tc_sha256_update+0xa>
		return TC_CRYPTO_FAIL;
   30860:	4608      	mov	r0, r1
   30862:	e7df      	b.n	30824 <tc_sha256_update+0xc>

00030864 <tc_sha256_final>:
{
   30864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   30866:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
   30868:	4605      	mov	r5, r0
   3086a:	2800      	cmp	r0, #0
   3086c:	d054      	beq.n	30918 <tc_sha256_final+0xb4>
   3086e:	2900      	cmp	r1, #0
   30870:	d053      	beq.n	3091a <tc_sha256_final+0xb6>
	s->bits_hashed += (s->leftover_offset << 3);
   30872:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   30874:	e9d1 2108 	ldrd	r2, r1, [r1, #32]
   30878:	00d8      	lsls	r0, r3, #3
   3087a:	1812      	adds	r2, r2, r0
   3087c:	f141 0100 	adc.w	r1, r1, #0
   30880:	e9c4 2108 	strd	r2, r1, [r4, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   30884:	2280      	movs	r2, #128	; 0x80
   30886:	1c58      	adds	r0, r3, #1
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   30888:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   3088a:	4423      	add	r3, r4
   3088c:	66a0      	str	r0, [r4, #104]	; 0x68
	s->bits_hashed += (s->leftover_offset << 3);
   3088e:	f04f 0700 	mov.w	r7, #0
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   30892:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		_set(s->leftover + s->leftover_offset, 0x00,
   30896:	f104 0628 	add.w	r6, r4, #40	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   3089a:	d90a      	bls.n	308b2 <tc_sha256_final+0x4e>
		_set(s->leftover + s->leftover_offset, 0x00,
   3089c:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   308a0:	4639      	mov	r1, r7
   308a2:	4430      	add	r0, r6
   308a4:	f7ff fd9a 	bl	303dc <_set>
		compress(s->iv, s->leftover);
   308a8:	4631      	mov	r1, r6
   308aa:	4620      	mov	r0, r4
   308ac:	f7e1 fcac 	bl	12208 <compress>
		s->leftover_offset = 0;
   308b0:	66a7      	str	r7, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
   308b2:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   308b4:	2100      	movs	r1, #0
   308b6:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   308ba:	4430      	add	r0, r6
   308bc:	f7ff fd8e 	bl	303dc <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   308c0:	6a23      	ldr	r3, [r4, #32]
	compress(s->iv, s->leftover);
   308c2:	4631      	mov	r1, r6
   308c4:	ba1a      	rev	r2, r3
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   308c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
   308c8:	6662      	str	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   308ca:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
   308cc:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   308d0:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   308d4:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   308d6:	0e1b      	lsrs	r3, r3, #24
   308d8:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	compress(s->iv, s->leftover);
   308dc:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   308de:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
   308e2:	f7e1 fc91 	bl	12208 <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   308e6:	1d2b      	adds	r3, r5, #4
   308e8:	1f21      	subs	r1, r4, #4
   308ea:	3524      	adds	r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
   308ec:	f851 2f04 	ldr.w	r2, [r1, #4]!
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   308f0:	3304      	adds	r3, #4
		*digest++ = (uint8_t)(t >> 24);
   308f2:	0e10      	lsrs	r0, r2, #24
   308f4:	f803 0c08 	strb.w	r0, [r3, #-8]
		*digest++ = (uint8_t)(t >> 16);
   308f8:	0c10      	lsrs	r0, r2, #16
   308fa:	f803 0c07 	strb.w	r0, [r3, #-7]
		*digest++ = (uint8_t)(t >> 8);
   308fe:	0a10      	lsrs	r0, r2, #8
   30900:	f803 0c06 	strb.w	r0, [r3, #-6]
		*digest++ = (uint8_t)(t);
   30904:	f803 2c05 	strb.w	r2, [r3, #-5]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   30908:	42ab      	cmp	r3, r5
   3090a:	d1ef      	bne.n	308ec <tc_sha256_final+0x88>
	_set(s, 0, sizeof(*s));
   3090c:	4620      	mov	r0, r4
   3090e:	2270      	movs	r2, #112	; 0x70
   30910:	2100      	movs	r1, #0
   30912:	f7ff fd63 	bl	303dc <_set>
	return TC_CRYPTO_SUCCESS;
   30916:	2001      	movs	r0, #1
}
   30918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   3091a:	4608      	mov	r0, r1
   3091c:	e7fc      	b.n	30918 <tc_sha256_final+0xb4>

0003091e <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
   3091e:	b570      	push	{r4, r5, r6, lr}
   30920:	4614      	mov	r4, r2
   30922:	4605      	mov	r5, r0
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
   30924:	1e43      	subs	r3, r0, #1
   30926:	1888      	adds	r0, r1, r2
   30928:	4288      	cmp	r0, r1
   3092a:	d112      	bne.n	30952 <rekey+0x34>
		key[i] = inner_pad ^ new_key[i];
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   3092c:	2c40      	cmp	r4, #64	; 0x40
   3092e:	f1c4 0640 	rsb	r6, r4, #64	; 0x40
   30932:	bf88      	it	hi
   30934:	2600      	movhi	r6, #0
   30936:	f104 0040 	add.w	r0, r4, #64	; 0x40
   3093a:	4632      	mov	r2, r6
   3093c:	215c      	movs	r1, #92	; 0x5c
   3093e:	4428      	add	r0, r5
   30940:	f005 fe12 	bl	36568 <memset>
   30944:	4632      	mov	r2, r6
   30946:	1928      	adds	r0, r5, r4
   30948:	2136      	movs	r1, #54	; 0x36
	}
}
   3094a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   3094e:	f005 be0b 	b.w	36568 <memset>
		key[i] = inner_pad ^ new_key[i];
   30952:	780a      	ldrb	r2, [r1, #0]
   30954:	f082 0236 	eor.w	r2, r2, #54	; 0x36
   30958:	f803 2f01 	strb.w	r2, [r3, #1]!
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
   3095c:	f811 2b01 	ldrb.w	r2, [r1], #1
   30960:	f082 025c 	eor.w	r2, r2, #92	; 0x5c
   30964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	for (i = 0; i < key_size; ++i) {
   30968:	e7de      	b.n	30928 <rekey+0xa>

0003096a <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
   3096a:	b5f0      	push	{r4, r5, r6, r7, lr}
   3096c:	460e      	mov	r6, r1
   3096e:	4614      	mov	r4, r2
	/* Input sanity check */
	if (ctx == (TCHmacState_t) 0 ||
   30970:	4605      	mov	r5, r0
{
   30972:	b0cd      	sub	sp, #308	; 0x134
	if (ctx == (TCHmacState_t) 0 ||
   30974:	b1b8      	cbz	r0, 309a6 <tc_hmac_set_key+0x3c>
   30976:	b341      	cbz	r1, 309ca <tc_hmac_set_key+0x60>
	    key == (const uint8_t *) 0 ||
   30978:	b34a      	cbz	r2, 309ce <tc_hmac_set_key+0x64>
	}

	const uint8_t dummy_key[TC_SHA256_BLOCK_SIZE];
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   3097a:	2a40      	cmp	r2, #64	; 0x40
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
   3097c:	f100 0770 	add.w	r7, r0, #112	; 0x70
	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   30980:	d813      	bhi.n	309aa <tc_hmac_set_key+0x40>
		(void)tc_sha256_init(&dummy_state.hash_state);
   30982:	a810      	add	r0, sp, #64	; 0x40
   30984:	f7e1 fd2a 	bl	123dc <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
   30988:	4622      	mov	r2, r4
   3098a:	4669      	mov	r1, sp
   3098c:	a810      	add	r0, sp, #64	; 0x40
   3098e:	f7ff ff43 	bl	30818 <tc_sha256_update>
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
   30992:	a910      	add	r1, sp, #64	; 0x40
   30994:	a834      	add	r0, sp, #208	; 0xd0
   30996:	f7ff ff65 	bl	30864 <tc_sha256_final>
		rekey(ctx->key, key, key_size);
   3099a:	4622      	mov	r2, r4
   3099c:	4631      	mov	r1, r6
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
				      &ctx->hash_state);
		rekey(ctx->key,
   3099e:	4638      	mov	r0, r7
   309a0:	f7ff ffbd 	bl	3091e <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
   309a4:	2001      	movs	r0, #1
}
   309a6:	b04d      	add	sp, #308	; 0x134
   309a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)tc_sha256_init(&ctx->hash_state);
   309aa:	f7e1 fd17 	bl	123dc <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   309ae:	4622      	mov	r2, r4
   309b0:	4631      	mov	r1, r6
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   309b2:	f105 0490 	add.w	r4, r5, #144	; 0x90
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   309b6:	4628      	mov	r0, r5
   309b8:	f7ff ff2e 	bl	30818 <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   309bc:	4629      	mov	r1, r5
   309be:	4620      	mov	r0, r4
   309c0:	f7ff ff50 	bl	30864 <tc_sha256_final>
		rekey(ctx->key,
   309c4:	2220      	movs	r2, #32
   309c6:	4621      	mov	r1, r4
   309c8:	e7e9      	b.n	3099e <tc_hmac_set_key+0x34>
		return TC_CRYPTO_FAIL;
   309ca:	4608      	mov	r0, r1
   309cc:	e7eb      	b.n	309a6 <tc_hmac_set_key+0x3c>
   309ce:	4610      	mov	r0, r2
   309d0:	e7e9      	b.n	309a6 <tc_hmac_set_key+0x3c>

000309d2 <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{
   309d2:	b510      	push	{r4, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   309d4:	4604      	mov	r4, r0
   309d6:	b140      	cbz	r0, 309ea <tc_hmac_init+0x18>
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
   309d8:	f7e1 fd00 	bl	123dc <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
   309dc:	2240      	movs	r2, #64	; 0x40
   309de:	4620      	mov	r0, r4
   309e0:	f104 0170 	add.w	r1, r4, #112	; 0x70
   309e4:	f7ff ff18 	bl	30818 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   309e8:	2001      	movs	r0, #1
}
   309ea:	bd10      	pop	{r4, pc}

000309ec <tc_hmac_update>:

int tc_hmac_update(TCHmacState_t ctx,
		   const void *data,
		   unsigned int data_length)
{
   309ec:	b508      	push	{r3, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   309ee:	b110      	cbz	r0, 309f6 <tc_hmac_update+0xa>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
   309f0:	f7ff ff12 	bl	30818 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   309f4:	2001      	movs	r0, #1
}
   309f6:	bd08      	pop	{r3, pc}

000309f8 <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{
   309f8:	b570      	push	{r4, r5, r6, lr}
   309fa:	460e      	mov	r6, r1
   309fc:	4614      	mov	r4, r2

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   309fe:	4605      	mov	r5, r0
   30a00:	b1f0      	cbz	r0, 30a40 <tc_hmac_final+0x48>
   30a02:	2920      	cmp	r1, #32
   30a04:	d11c      	bne.n	30a40 <tc_hmac_final+0x48>
	    taglen != TC_SHA256_DIGEST_SIZE ||
   30a06:	b1ea      	cbz	r2, 30a44 <tc_hmac_final+0x4c>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
   30a08:	4611      	mov	r1, r2
   30a0a:	f7ff ff2b 	bl	30864 <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
   30a0e:	4620      	mov	r0, r4
   30a10:	f7e1 fce4 	bl	123dc <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
   30a14:	2240      	movs	r2, #64	; 0x40
   30a16:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   30a1a:	4620      	mov	r0, r4
   30a1c:	f7ff fefc 	bl	30818 <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
   30a20:	4632      	mov	r2, r6
   30a22:	4629      	mov	r1, r5
   30a24:	4620      	mov	r0, r4
   30a26:	f7ff fef7 	bl	30818 <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
   30a2a:	4621      	mov	r1, r4
   30a2c:	4628      	mov	r0, r5
   30a2e:	f7ff ff19 	bl	30864 <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
   30a32:	4620      	mov	r0, r4
   30a34:	22f0      	movs	r2, #240	; 0xf0
   30a36:	2100      	movs	r1, #0
   30a38:	f7ff fcd0 	bl	303dc <_set>

	return TC_CRYPTO_SUCCESS;
   30a3c:	2001      	movs	r0, #1
}
   30a3e:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   30a40:	2000      	movs	r0, #0
   30a42:	e7fc      	b.n	30a3e <tc_hmac_final+0x46>
   30a44:	4610      	mov	r0, r2
   30a46:	e7fa      	b.n	30a3e <tc_hmac_final+0x46>

00030a48 <update>:

/*
 * Assumes: prng != NULL
 */
static void update(TCHmacPrng_t prng, const uint8_t *data, unsigned int datalen, const uint8_t *additional_data, unsigned int additional_datalen)
{
   30a48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30a4c:	4604      	mov	r4, r0
	const uint8_t separator0 = 0x00;
	const uint8_t separator1 = 0x01;
   30a4e:	f04f 0b01 	mov.w	fp, #1
{
   30a52:	461f      	mov	r7, r3
	const uint8_t separator0 = 0x00;
   30a54:	2300      	movs	r3, #0
{
   30a56:	4688      	mov	r8, r1

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   30a58:	f100 06f0 	add.w	r6, r0, #240	; 0xf0
   30a5c:	4631      	mov	r1, r6
{
   30a5e:	4691      	mov	r9, r2
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   30a60:	2220      	movs	r2, #32
	const uint8_t separator0 = 0x00;
   30a62:	f88d 3006 	strb.w	r3, [sp, #6]
{
   30a66:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	const uint8_t separator1 = 0x01;
   30a6a:	f88d b007 	strb.w	fp, [sp, #7]

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   30a6e:	f504 7588 	add.w	r5, r4, #272	; 0x110
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   30a72:	f7ff ff7a 	bl	3096a <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
   30a76:	4620      	mov	r0, r4
   30a78:	f7ff ffab 	bl	309d2 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   30a7c:	2220      	movs	r2, #32
   30a7e:	4629      	mov	r1, r5
   30a80:	4620      	mov	r0, r4
   30a82:	f7ff ffb3 	bl	309ec <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
   30a86:	465a      	mov	r2, fp
   30a88:	4620      	mov	r0, r4
   30a8a:	f10d 0106 	add.w	r1, sp, #6
   30a8e:	f7ff ffad 	bl	309ec <tc_hmac_update>

	if (data && datalen)
   30a92:	f1b8 0f00 	cmp.w	r8, #0
   30a96:	d007      	beq.n	30aa8 <update+0x60>
   30a98:	f1b9 0f00 	cmp.w	r9, #0
   30a9c:	d004      	beq.n	30aa8 <update+0x60>
		(void)tc_hmac_update(&prng->h, data, datalen);
   30a9e:	464a      	mov	r2, r9
   30aa0:	4641      	mov	r1, r8
   30aa2:	4620      	mov	r0, r4
   30aa4:	f7ff ffa2 	bl	309ec <tc_hmac_update>
	if (additional_data && additional_datalen)
   30aa8:	b13f      	cbz	r7, 30aba <update+0x72>
   30aaa:	f1ba 0f00 	cmp.w	sl, #0
   30aae:	d004      	beq.n	30aba <update+0x72>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   30ab0:	4652      	mov	r2, sl
   30ab2:	4639      	mov	r1, r7
   30ab4:	4620      	mov	r0, r4
   30ab6:	f7ff ff99 	bl	309ec <tc_hmac_update>

	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   30aba:	4622      	mov	r2, r4
   30abc:	2120      	movs	r1, #32
   30abe:	4630      	mov	r0, r6
   30ac0:	f7ff ff9a 	bl	309f8 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   30ac4:	2220      	movs	r2, #32
   30ac6:	4631      	mov	r1, r6
   30ac8:	4620      	mov	r0, r4
   30aca:	f7ff ff4e 	bl	3096a <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   30ace:	4620      	mov	r0, r4
   30ad0:	f7ff ff7f 	bl	309d2 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   30ad4:	2220      	movs	r2, #32
   30ad6:	4629      	mov	r1, r5
   30ad8:	4620      	mov	r0, r4
   30ada:	f7ff ff87 	bl	309ec <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   30ade:	4622      	mov	r2, r4
   30ae0:	2120      	movs	r1, #32
   30ae2:	4628      	mov	r0, r5
   30ae4:	f7ff ff88 	bl	309f8 <tc_hmac_final>

	if (data == 0 || datalen == 0)
   30ae8:	f1b8 0f00 	cmp.w	r8, #0
   30aec:	d03a      	beq.n	30b64 <update+0x11c>
   30aee:	f1b9 0f00 	cmp.w	r9, #0
   30af2:	d037      	beq.n	30b64 <update+0x11c>
		return;

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   30af4:	2220      	movs	r2, #32
   30af6:	4631      	mov	r1, r6
   30af8:	4620      	mov	r0, r4
   30afa:	f7ff ff36 	bl	3096a <tc_hmac_set_key>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
   30afe:	4620      	mov	r0, r4
   30b00:	f7ff ff67 	bl	309d2 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   30b04:	2220      	movs	r2, #32
   30b06:	4629      	mov	r1, r5
   30b08:	4620      	mov	r0, r4
   30b0a:	f7ff ff6f 	bl	309ec <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
   30b0e:	2201      	movs	r2, #1
   30b10:	f10d 0107 	add.w	r1, sp, #7
   30b14:	4620      	mov	r0, r4
   30b16:	f7ff ff69 	bl	309ec <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, data, datalen);
   30b1a:	464a      	mov	r2, r9
   30b1c:	4641      	mov	r1, r8
   30b1e:	4620      	mov	r0, r4
   30b20:	f7ff ff64 	bl	309ec <tc_hmac_update>
	if (additional_data && additional_datalen)
   30b24:	b13f      	cbz	r7, 30b36 <update+0xee>
   30b26:	f1ba 0f00 	cmp.w	sl, #0
   30b2a:	d004      	beq.n	30b36 <update+0xee>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   30b2c:	4652      	mov	r2, sl
   30b2e:	4639      	mov	r1, r7
   30b30:	4620      	mov	r0, r4
   30b32:	f7ff ff5b 	bl	309ec <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   30b36:	4622      	mov	r2, r4
   30b38:	2120      	movs	r1, #32
   30b3a:	4630      	mov	r0, r6
   30b3c:	f7ff ff5c 	bl	309f8 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   30b40:	2220      	movs	r2, #32
   30b42:	4631      	mov	r1, r6
   30b44:	4620      	mov	r0, r4
   30b46:	f7ff ff10 	bl	3096a <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   30b4a:	4620      	mov	r0, r4
   30b4c:	f7ff ff41 	bl	309d2 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   30b50:	2220      	movs	r2, #32
   30b52:	4629      	mov	r1, r5
   30b54:	4620      	mov	r0, r4
   30b56:	f7ff ff49 	bl	309ec <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   30b5a:	4622      	mov	r2, r4
   30b5c:	2120      	movs	r1, #32
   30b5e:	4628      	mov	r0, r5
   30b60:	f7ff ff4a 	bl	309f8 <tc_hmac_final>
}
   30b64:	b003      	add	sp, #12
   30b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00030b6a <tc_hmac_prng_init>:

int tc_hmac_prng_init(TCHmacPrng_t prng,
		      const uint8_t *personalization,
		      unsigned int plen)
{
   30b6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   30b6c:	460c      	mov	r4, r1
   30b6e:	4617      	mov	r7, r2

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   30b70:	4605      	mov	r5, r0
   30b72:	b1b0      	cbz	r0, 30ba2 <tc_hmac_prng_init+0x38>
	    personalization == (uint8_t *) 0 ||
   30b74:	b1b9      	cbz	r1, 30ba6 <tc_hmac_prng_init+0x3c>

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
	_set(prng->v, 0x01, sizeof(prng->v));

	update(prng, personalization, plen, 0, 0);
   30b76:	2600      	movs	r6, #0
	_set(prng->key, 0x00, sizeof(prng->key));
   30b78:	2220      	movs	r2, #32
   30b7a:	2100      	movs	r1, #0
   30b7c:	30f0      	adds	r0, #240	; 0xf0
   30b7e:	f7ff fc2d 	bl	303dc <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
   30b82:	2220      	movs	r2, #32
   30b84:	2101      	movs	r1, #1
   30b86:	f505 7088 	add.w	r0, r5, #272	; 0x110
   30b8a:	f7ff fc27 	bl	303dc <_set>
	update(prng, personalization, plen, 0, 0);
   30b8e:	4628      	mov	r0, r5
   30b90:	4633      	mov	r3, r6
   30b92:	463a      	mov	r2, r7
   30b94:	4621      	mov	r1, r4
   30b96:	9600      	str	r6, [sp, #0]
   30b98:	f7ff ff56 	bl	30a48 <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;

	return TC_CRYPTO_SUCCESS;
   30b9c:	2001      	movs	r0, #1
	prng->countdown = 0;
   30b9e:	f8c5 6130 	str.w	r6, [r5, #304]	; 0x130
}
   30ba2:	b003      	add	sp, #12
   30ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   30ba6:	4608      	mov	r0, r1
   30ba8:	e7fb      	b.n	30ba2 <tc_hmac_prng_init+0x38>

00030baa <tc_hmac_prng_reseed>:
int tc_hmac_prng_reseed(TCHmacPrng_t prng,
			const uint8_t *seed,
			unsigned int seedlen,
			const uint8_t *additional_input,
			unsigned int additionallen)
{
   30baa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   30bac:	9c08      	ldr	r4, [sp, #32]

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   30bae:	4605      	mov	r5, r0
   30bb0:	b180      	cbz	r0, 30bd4 <tc_hmac_prng_reseed+0x2a>
   30bb2:	b179      	cbz	r1, 30bd4 <tc_hmac_prng_reseed+0x2a>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
   30bb4:	2a1f      	cmp	r2, #31
   30bb6:	d90d      	bls.n	30bd4 <tc_hmac_prng_reseed+0x2a>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
   30bb8:	b153      	cbz	r3, 30bd0 <tc_hmac_prng_reseed+0x26>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
   30bba:	b16c      	cbz	r4, 30bd8 <tc_hmac_prng_reseed+0x2e>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
		} else {
			/* call update for the seed and additional_input */
			update(prng, seed, seedlen, additional_input, additionallen);
   30bbc:	9400      	str	r4, [sp, #0]
		}
	} else {
		/* call update only for the seed */
		update(prng, seed, seedlen, 0, 0);
   30bbe:	f7ff ff43 	bl	30a48 <update>
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
   30bc2:	f04f 33ff 	mov.w	r3, #4294967295

	return TC_CRYPTO_SUCCESS;
   30bc6:	2001      	movs	r0, #1
	prng->countdown = MAX_GENS;
   30bc8:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
}
   30bcc:	b003      	add	sp, #12
   30bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		update(prng, seed, seedlen, 0, 0);
   30bd0:	9300      	str	r3, [sp, #0]
   30bd2:	e7f4      	b.n	30bbe <tc_hmac_prng_reseed+0x14>
		return TC_CRYPTO_FAIL;
   30bd4:	2000      	movs	r0, #0
   30bd6:	e7f9      	b.n	30bcc <tc_hmac_prng_reseed+0x22>
   30bd8:	4620      	mov	r0, r4
   30bda:	e7f7      	b.n	30bcc <tc_hmac_prng_reseed+0x22>

00030bdc <tc_hmac_prng_generate>:

int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
   30bdc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   30be0:	460d      	mov	r5, r1
   30be2:	4614      	mov	r4, r2
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
   30be4:	4680      	mov	r8, r0
   30be6:	b3d8      	cbz	r0, 30c60 <tc_hmac_prng_generate+0x84>
   30be8:	b3d2      	cbz	r2, 30c60 <tc_hmac_prng_generate+0x84>
	    prng == (TCHmacPrng_t) 0 ||
   30bea:	1e4b      	subs	r3, r1, #1
   30bec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
   30bf0:	d236      	bcs.n	30c60 <tc_hmac_prng_generate+0x84>
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
   30bf2:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   30bf6:	b3ab      	cbz	r3, 30c64 <tc_hmac_prng_generate+0x88>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
   30bf8:	3b01      	subs	r3, #1
   30bfa:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
		/* configure the new prng key into the prng's instance of hmac */
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   30bfe:	f102 09f0 	add.w	r9, r2, #240	; 0xf0

		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   30c02:	f502 7788 	add.w	r7, r2, #272	; 0x110
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   30c06:	2220      	movs	r2, #32
   30c08:	4649      	mov	r1, r9
   30c0a:	4620      	mov	r0, r4
   30c0c:	f7ff fead 	bl	3096a <tc_hmac_set_key>
		(void)tc_hmac_init(&prng->h);
   30c10:	4620      	mov	r0, r4
   30c12:	f7ff fede 	bl	309d2 <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   30c16:	2220      	movs	r2, #32
   30c18:	4639      	mov	r1, r7
   30c1a:	4620      	mov	r0, r4
   30c1c:	f7ff fee6 	bl	309ec <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   30c20:	4622      	mov	r2, r4
   30c22:	2120      	movs	r1, #32
   30c24:	4638      	mov	r0, r7
   30c26:	f7ff fee7 	bl	309f8 <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
   30c2a:	2d20      	cmp	r5, #32
   30c2c:	462e      	mov	r6, r5
   30c2e:	bf28      	it	cs
   30c30:	2620      	movcs	r6, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
   30c32:	4640      	mov	r0, r8
   30c34:	4633      	mov	r3, r6
   30c36:	463a      	mov	r2, r7
   30c38:	4631      	mov	r1, r6
   30c3a:	f7ff fbc2 	bl	303c2 <_copy>

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
   30c3e:	2d20      	cmp	r5, #32
   30c40:	bf38      	it	cc
   30c42:	2520      	movcc	r5, #32
	while (outlen != 0) {
   30c44:	3d20      	subs	r5, #32
		out += bufferlen;
   30c46:	44b0      	add	r8, r6
	while (outlen != 0) {
   30c48:	d1dd      	bne.n	30c06 <tc_hmac_prng_generate+0x2a>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, 0, 0, 0, 0);
   30c4a:	4620      	mov	r0, r4
   30c4c:	462b      	mov	r3, r5
   30c4e:	462a      	mov	r2, r5
   30c50:	4629      	mov	r1, r5
   30c52:	9500      	str	r5, [sp, #0]
   30c54:	f7ff fef8 	bl	30a48 <update>

	return TC_CRYPTO_SUCCESS;
   30c58:	2001      	movs	r0, #1
}
   30c5a:	b003      	add	sp, #12
   30c5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   30c60:	2000      	movs	r0, #0
   30c62:	e7fa      	b.n	30c5a <tc_hmac_prng_generate+0x7e>
		return TC_HMAC_PRNG_RESEED_REQ;
   30c64:	f04f 30ff 	mov.w	r0, #4294967295
   30c68:	e7f7      	b.n	30c5a <tc_hmac_prng_generate+0x7e>

00030c6a <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   30c6a:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   30c6c:	6800      	ldr	r0, [r0, #0]
   30c6e:	f7e1 bc01 	b.w	12474 <z_arm_fatal_error>

00030c72 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   30c72:	2100      	movs	r1, #0
   30c74:	2001      	movs	r0, #1
   30c76:	f7e1 bbfd 	b.w	12474 <z_arm_fatal_error>

00030c7a <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   30c7a:	b508      	push	{r3, lr}
	handler();
   30c7c:	f7e1 fcc2 	bl	12604 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   30c80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   30c84:	f7e1 bd8c 	b.w	127a0 <z_arm_exc_exit>

00030c88 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   30c88:	6e83      	ldr	r3, [r0, #104]	; 0x68
   30c8a:	f383 880b 	msr	PSPLIM, r3
}
   30c8e:	4770      	bx	lr

00030c90 <z_log_msg_static_create.constprop.0>:
   30c90:	2300      	movs	r3, #0
   30c92:	f7df bacf 	b.w	10234 <z_impl_z_log_msg_static_create>

00030c96 <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   30c96:	4770      	bx	lr

00030c98 <z_arm_restore_fp_context>:

void z_arm_restore_fp_context(const struct fpu_ctx_full *buffer)
   30c98:	4770      	bx	lr

00030c9a <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   30c9a:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   30c9e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   30ca2:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   30ca4:	bf08      	it	eq
   30ca6:	f06f 0015 	mvneq.w	r0, #21
   30caa:	4770      	bx	lr

00030cac <mpu_configure_region>:
{
   30cac:	b530      	push	{r4, r5, lr}
	p_attr->rbar = attr->rbar &
   30cae:	890a      	ldrh	r2, [r1, #8]
   30cb0:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
   30cb2:	680b      	ldr	r3, [r1, #0]
		&new_region->attr, new_region->start, new_region->size);
   30cb4:	684c      	ldr	r4, [r1, #4]
   30cb6:	f002 021f 	and.w	r2, r2, #31
{
   30cba:	b085      	sub	sp, #20
   30cbc:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	region_conf.base = new_region->start;
   30cc0:	9300      	str	r3, [sp, #0]
   30cc2:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   30cc6:	f023 031f 	bic.w	r3, r3, #31
   30cca:	1e62      	subs	r2, r4, #1
   30ccc:	4413      	add	r3, r2
   30cce:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   30cd2:	280f      	cmp	r0, #15
   30cd4:	9303      	str	r3, [sp, #12]
   30cd6:	d904      	bls.n	30ce2 <mpu_configure_region+0x36>
}
   30cd8:	b005      	add	sp, #20
   30cda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   30cde:	f7e2 b9a5 	b.w	1302c <region_allocate_and_init.part.0>
	region_init(index, region_conf);
   30ce2:	4669      	mov	r1, sp
   30ce4:	f7e2 f988 	bl	12ff8 <region_init>
}
   30ce8:	b005      	add	sp, #20
   30cea:	bd30      	pop	{r4, r5, pc}

00030cec <_stdout_hook_default>:
}
   30cec:	f04f 30ff 	mov.w	r0, #4294967295
   30cf0:	4770      	bx	lr

00030cf2 <_stdin_hook_default>:
}
   30cf2:	2000      	movs	r0, #0
   30cf4:	4770      	bx	lr

00030cf6 <_read>:
{
   30cf6:	4608      	mov	r0, r1
   30cf8:	4611      	mov	r1, r2
	return z_impl_zephyr_read_stdin(buf, nbytes);
   30cfa:	f7e2 bba7 	b.w	1344c <z_impl_zephyr_read_stdin>

00030cfe <_write>:
{
   30cfe:	4608      	mov	r0, r1
   30d00:	4611      	mov	r1, r2
	return z_impl_zephyr_write_stdout(buf, nbytes);
   30d02:	f7e2 bbb7 	b.w	13474 <z_impl_zephyr_write_stdout>

00030d06 <_close>:
int _close(int file)
   30d06:	f04f 30ff 	mov.w	r0, #4294967295
   30d0a:	4770      	bx	lr

00030d0c <_lseek>:
}
   30d0c:	2000      	movs	r0, #0
   30d0e:	4770      	bx	lr

00030d10 <_isatty>:
}
   30d10:	2802      	cmp	r0, #2
   30d12:	bfcc      	ite	gt
   30d14:	2000      	movgt	r0, #0
   30d16:	2001      	movle	r0, #1
   30d18:	4770      	bx	lr

00030d1a <_kill>:
}
   30d1a:	2000      	movs	r0, #0
   30d1c:	4770      	bx	lr

00030d1e <_getpid>:
}
   30d1e:	2000      	movs	r0, #0
   30d20:	4770      	bx	lr

00030d22 <_fstat>:
	st->st_mode = S_IFCHR;
   30d22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   30d26:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   30d28:	604b      	str	r3, [r1, #4]
}
   30d2a:	4770      	bx	lr

00030d2c <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   30d2c:	f7f7 bd4c 	b.w	287c8 <z_impl_z_errno>

00030d30 <bt_rpa_irk_matches>:
	return 0;
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   30d30:	b530      	push	{r4, r5, lr}
   30d32:	4605      	mov	r5, r0
	memcpy(res, r, 3);
   30d34:	f8b1 2003 	ldrh.w	r2, [r1, #3]
{
   30d38:	b087      	sub	sp, #28
	memcpy(res, r, 3);
   30d3a:	794b      	ldrb	r3, [r1, #5]
   30d3c:	f8ad 2008 	strh.w	r2, [sp, #8]
{
   30d40:	460c      	mov	r4, r1
	(void)memset(res + 3, 0, 13);
   30d42:	220d      	movs	r2, #13
   30d44:	2100      	movs	r1, #0
   30d46:	f10d 000b 	add.w	r0, sp, #11
	memcpy(res, r, 3);
   30d4a:	f88d 300a 	strb.w	r3, [sp, #10]
	(void)memset(res + 3, 0, 13);
   30d4e:	f005 fc0b 	bl	36568 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   30d52:	aa02      	add	r2, sp, #8
   30d54:	4611      	mov	r1, r2
   30d56:	4628      	mov	r0, r5
   30d58:	f000 fa5f 	bl	3121a <bt_encrypt_le>
	if (err) {
   30d5c:	b110      	cbz	r0, 30d64 <bt_rpa_irk_matches+0x34>

	LOG_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
	if (err) {
		return false;
   30d5e:	2000      	movs	r0, #0
	}

	return !memcmp(addr->val, hash, 3);
}
   30d60:	b007      	add	sp, #28
   30d62:	bd30      	pop	{r4, r5, pc}
	memcpy(out, res, 3);
   30d64:	9b02      	ldr	r3, [sp, #8]
	return !memcmp(addr->val, hash, 3);
   30d66:	2203      	movs	r2, #3
	memcpy(out, res, 3);
   30d68:	f8ad 3004 	strh.w	r3, [sp, #4]
	return !memcmp(addr->val, hash, 3);
   30d6c:	4620      	mov	r0, r4
	memcpy(out, res, 3);
   30d6e:	0c1b      	lsrs	r3, r3, #16
	return !memcmp(addr->val, hash, 3);
   30d70:	a901      	add	r1, sp, #4
	memcpy(out, res, 3);
   30d72:	f88d 3006 	strb.w	r3, [sp, #6]
	return !memcmp(addr->val, hash, 3);
   30d76:	f005 fbc7 	bl	36508 <memcmp>
   30d7a:	fab0 f080 	clz	r0, r0
   30d7e:	0940      	lsrs	r0, r0, #5
   30d80:	e7ee      	b.n	30d60 <bt_rpa_irk_matches+0x30>

00030d82 <bt_settings_decode_key>:
{
   30d82:	b570      	push	{r4, r5, r6, lr}
   30d84:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   30d86:	2100      	movs	r1, #0
{
   30d88:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   30d8a:	f7ff f8c3 	bl	2ff14 <settings_name_next>
   30d8e:	280d      	cmp	r0, #13
   30d90:	d118      	bne.n	30dc4 <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   30d92:	7b23      	ldrb	r3, [r4, #12]
   30d94:	2b30      	cmp	r3, #48	; 0x30
   30d96:	d013      	beq.n	30dc0 <bt_settings_decode_key+0x3e>
	} else if (key[12] == '1') {
   30d98:	2b31      	cmp	r3, #49	; 0x31
   30d9a:	d113      	bne.n	30dc4 <bt_settings_decode_key+0x42>
   30d9c:	2301      	movs	r3, #1
		addr->type = BT_ADDR_LE_PUBLIC;
   30d9e:	f805 3b06 	strb.w	r3, [r5], #6
   30da2:	f104 060c 	add.w	r6, r4, #12
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   30da6:	462a      	mov	r2, r5
   30da8:	4620      	mov	r0, r4
   30daa:	2301      	movs	r3, #1
   30dac:	2102      	movs	r1, #2
	for (uint8_t i = 0; i < 6; i++) {
   30dae:	3402      	adds	r4, #2
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   30db0:	f7fe f8dc 	bl	2ef6c <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   30db4:	42b4      	cmp	r4, r6
   30db6:	f105 35ff 	add.w	r5, r5, #4294967295
   30dba:	d1f4      	bne.n	30da6 <bt_settings_decode_key+0x24>
	return 0;
   30dbc:	2000      	movs	r0, #0
}
   30dbe:	bd70      	pop	{r4, r5, r6, pc}
   30dc0:	2300      	movs	r3, #0
   30dc2:	e7ec      	b.n	30d9e <bt_settings_decode_key+0x1c>
		return -EINVAL;
   30dc4:	f06f 0015 	mvn.w	r0, #21
   30dc8:	e7f9      	b.n	30dbe <bt_settings_decode_key+0x3c>

00030dca <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   30dca:	b510      	push	{r4, lr}
   30dcc:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   30dce:	7801      	ldrb	r1, [r0, #0]
   30dd0:	7822      	ldrb	r2, [r4, #0]
{
   30dd2:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   30dd4:	428a      	cmp	r2, r1
   30dd6:	d00f      	beq.n	30df8 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   30dd8:	4669      	mov	r1, sp
   30dda:	f7e2 fe9b 	bl	13b14 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   30dde:	4620      	mov	r0, r4
   30de0:	a905      	add	r1, sp, #20
   30de2:	f7e2 fe97 	bl	13b14 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   30de6:	2210      	movs	r2, #16
   30de8:	f10d 0115 	add.w	r1, sp, #21
   30dec:	f10d 0001 	add.w	r0, sp, #1
   30df0:	f005 fb8a 	bl	36508 <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   30df4:	b00a      	add	sp, #40	; 0x28
   30df6:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   30df8:	2a01      	cmp	r2, #1
   30dfa:	d006      	beq.n	30e0a <bt_uuid_cmp+0x40>
   30dfc:	2a02      	cmp	r2, #2
   30dfe:	d007      	beq.n	30e10 <bt_uuid_cmp+0x46>
   30e00:	b972      	cbnz	r2, 30e20 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   30e02:	8840      	ldrh	r0, [r0, #2]
   30e04:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   30e06:	1ac0      	subs	r0, r0, r3
   30e08:	e7f4      	b.n	30df4 <bt_uuid_cmp+0x2a>
   30e0a:	6840      	ldr	r0, [r0, #4]
   30e0c:	6863      	ldr	r3, [r4, #4]
   30e0e:	e7fa      	b.n	30e06 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   30e10:	2210      	movs	r2, #16
   30e12:	1c61      	adds	r1, r4, #1
   30e14:	3001      	adds	r0, #1
}
   30e16:	b00a      	add	sp, #40	; 0x28
   30e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   30e1c:	f005 bb74 	b.w	36508 <memcmp>
	switch (u1->type) {
   30e20:	f06f 0015 	mvn.w	r0, #21
   30e24:	e7e6      	b.n	30df4 <bt_uuid_cmp+0x2a>

00030e26 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   30e26:	2a04      	cmp	r2, #4
   30e28:	d00a      	beq.n	30e40 <bt_uuid_create+0x1a>
   30e2a:	2a10      	cmp	r2, #16
   30e2c:	d00d      	beq.n	30e4a <bt_uuid_create+0x24>
   30e2e:	2a02      	cmp	r2, #2
   30e30:	f04f 0300 	mov.w	r3, #0
   30e34:	d115      	bne.n	30e62 <bt_uuid_create+0x3c>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   30e36:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   30e38:	880b      	ldrh	r3, [r1, #0]
   30e3a:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   30e3c:	2001      	movs	r0, #1
   30e3e:	4770      	bx	lr
		uuid->type = BT_UUID_TYPE_32;
   30e40:	2301      	movs	r3, #1
   30e42:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   30e44:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   30e46:	6043      	str	r3, [r0, #4]
		break;
   30e48:	e7f8      	b.n	30e3c <bt_uuid_create+0x16>
		uuid->type = BT_UUID_TYPE_128;
   30e4a:	2302      	movs	r3, #2
   30e4c:	f800 3b01 	strb.w	r3, [r0], #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   30e50:	f101 0310 	add.w	r3, r1, #16
   30e54:	f851 2b04 	ldr.w	r2, [r1], #4
   30e58:	4299      	cmp	r1, r3
   30e5a:	f840 2b04 	str.w	r2, [r0], #4
   30e5e:	d1f9      	bne.n	30e54 <bt_uuid_create+0x2e>
   30e60:	e7ec      	b.n	30e3c <bt_uuid_create+0x16>
	switch (data_len) {
   30e62:	4618      	mov	r0, r3
}
   30e64:	4770      	bx	lr

00030e66 <bt_addr_le_create_static>:

#define ADDR_RESOLVED_BITMASK (0x02)

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   30e66:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   30e68:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   30e6a:	2106      	movs	r1, #6
{
   30e6c:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   30e6e:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   30e72:	f7e5 fa37 	bl	162e4 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   30e76:	b918      	cbnz	r0, 30e80 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   30e78:	79a3      	ldrb	r3, [r4, #6]
   30e7a:	f063 033f 	orn	r3, r3, #63	; 0x3f
   30e7e:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   30e80:	bd10      	pop	{r4, pc}

00030e82 <bt_addr_le_copy_resolved>:
   30e82:	680b      	ldr	r3, [r1, #0]
   30e84:	6003      	str	r3, [r0, #0]
   30e86:	888b      	ldrh	r3, [r1, #4]
   30e88:	8083      	strh	r3, [r0, #4]
   30e8a:	798b      	ldrb	r3, [r1, #6]
   30e8c:	7183      	strb	r3, [r0, #6]

void bt_addr_le_copy_resolved(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	bt_addr_le_copy(dst, src);
	/* translate to "regular" address type */
	dst->type &= ~ADDR_RESOLVED_BITMASK;
   30e8e:	7803      	ldrb	r3, [r0, #0]
   30e90:	f023 0302 	bic.w	r3, r3, #2
   30e94:	7003      	strb	r3, [r0, #0]
}
   30e96:	4770      	bx	lr

00030e98 <bt_addr_le_is_resolved>:

bool bt_addr_le_is_resolved(const bt_addr_le_t *addr)
{
	return (addr->type & ADDR_RESOLVED_BITMASK) != 0;
   30e98:	7800      	ldrb	r0, [r0, #0]
}
   30e9a:	f3c0 0040 	ubfx	r0, r0, #1, #1
   30e9e:	4770      	bx	lr

00030ea0 <bt_hci_evt_get_flags>:
   30ea0:	280f      	cmp	r0, #15
   30ea2:	d807      	bhi.n	30eb4 <bt_hci_evt_get_flags+0x14>
   30ea4:	280d      	cmp	r0, #13
   30ea6:	d80b      	bhi.n	30ec0 <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   30ea8:	2805      	cmp	r0, #5
   30eaa:	bf08      	it	eq
   30eac:	2003      	moveq	r0, #3
   30eae:	bf18      	it	ne
   30eb0:	2002      	movne	r0, #2
   30eb2:	4770      	bx	lr
	switch (evt) {
   30eb4:	2813      	cmp	r0, #19
   30eb6:	d003      	beq.n	30ec0 <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   30eb8:	281a      	cmp	r0, #26
   30eba:	bf08      	it	eq
   30ebc:	2001      	moveq	r0, #1
   30ebe:	e7f6      	b.n	30eae <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   30ec0:	2001      	movs	r0, #1
	}
}
   30ec2:	4770      	bx	lr

00030ec4 <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   30ec4:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   30ec8:	b183      	cbz	r3, 30eec <update_sec_level+0x28>
   30eca:	7b5a      	ldrb	r2, [r3, #13]
   30ecc:	07d1      	lsls	r1, r2, #31
   30ece:	d50d      	bpl.n	30eec <update_sec_level+0x28>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   30ed0:	06d2      	lsls	r2, r2, #27
   30ed2:	d50d      	bpl.n	30ef0 <update_sec_level+0x2c>
   30ed4:	7b1b      	ldrb	r3, [r3, #12]
   30ed6:	2b10      	cmp	r3, #16
   30ed8:	bf14      	ite	ne
   30eda:	2303      	movne	r3, #3
   30edc:	2304      	moveq	r3, #4
			conn->sec_level = BT_SECURITY_L3;
   30ede:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   30ee0:	7a80      	ldrb	r0, [r0, #10]
}
   30ee2:	4298      	cmp	r0, r3
   30ee4:	bf8c      	ite	hi
   30ee6:	2000      	movhi	r0, #0
   30ee8:	2001      	movls	r0, #1
   30eea:	4770      	bx	lr
   30eec:	2302      	movs	r3, #2
   30eee:	e7f6      	b.n	30ede <update_sec_level+0x1a>
   30ef0:	2303      	movs	r3, #3
   30ef2:	e7f4      	b.n	30ede <update_sec_level+0x1a>

00030ef4 <hci_vendor_event>:
}
   30ef4:	4770      	bx	lr

00030ef6 <atomic_or>:
{
   30ef6:	4603      	mov	r3, r0
   30ef8:	b510      	push	{r4, lr}
}
   30efa:	e8d3 0fef 	ldaex	r0, [r3]
   30efe:	ea40 0201 	orr.w	r2, r0, r1
   30f02:	e8c3 2fe4 	stlex	r4, r2, [r3]
   30f06:	2c00      	cmp	r4, #0
   30f08:	d1f7      	bne.n	30efa <atomic_or+0x4>
   30f0a:	bd10      	pop	{r4, pc}

00030f0c <bt_addr_le_copy>:
   30f0c:	680b      	ldr	r3, [r1, #0]
   30f0e:	6003      	str	r3, [r0, #0]
   30f10:	888b      	ldrh	r3, [r1, #4]
   30f12:	8083      	strh	r3, [r0, #4]
   30f14:	798b      	ldrb	r3, [r1, #6]
   30f16:	7183      	strb	r3, [r0, #6]
}
   30f18:	4770      	bx	lr

00030f1a <bt_addr_copy>:
   30f1a:	680b      	ldr	r3, [r1, #0]
   30f1c:	6003      	str	r3, [r0, #0]
   30f1e:	888b      	ldrh	r3, [r1, #4]
   30f20:	8083      	strh	r3, [r0, #4]
}
   30f22:	4770      	bx	lr

00030f24 <z_log_msg_static_create.constprop.0>:
   30f24:	2300      	movs	r3, #0
   30f26:	f7df b985 	b.w	10234 <z_impl_z_log_msg_static_create>

00030f2a <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   30f2a:	e8d0 3fef 	ldaex	r3, [r0]
   30f2e:	400b      	ands	r3, r1
   30f30:	e8c0 3fe2 	stlex	r2, r3, [r0]
   30f34:	2a00      	cmp	r2, #0
   30f36:	d1f8      	bne.n	30f2a <atomic_and.isra.0>
}
   30f38:	4770      	bx	lr

00030f3a <sys_put_le64>:
	dst[1] = val >> 8;
   30f3a:	f3c0 2307 	ubfx	r3, r0, #8, #8
   30f3e:	7053      	strb	r3, [r2, #1]
	dst[0] = val;
   30f40:	2300      	movs	r3, #0
   30f42:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   30f44:	0e00      	lsrs	r0, r0, #24
   30f46:	70d0      	strb	r0, [r2, #3]
   30f48:	f3c1 2007 	ubfx	r0, r1, #8, #8
   30f4c:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   30f4e:	7093      	strb	r3, [r2, #2]
   30f50:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   30f52:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   30f54:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   30f56:	71d1      	strb	r1, [r2, #7]
}
   30f58:	4770      	bx	lr

00030f5a <bt_hci_disconnect>:
{
   30f5a:	b570      	push	{r4, r5, r6, lr}
   30f5c:	4606      	mov	r6, r0
   30f5e:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   30f60:	f240 4006 	movw	r0, #1030	; 0x406
   30f64:	2103      	movs	r1, #3
   30f66:	f7e3 fa2d 	bl	143c4 <bt_hci_cmd_create>
	if (!buf) {
   30f6a:	4604      	mov	r4, r0
   30f6c:	b168      	cbz	r0, 30f8a <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   30f6e:	2103      	movs	r1, #3
   30f70:	300c      	adds	r0, #12
   30f72:	f7ed fa91 	bl	1e498 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   30f76:	8006      	strh	r6, [r0, #0]
	disconn->reason = reason;
   30f78:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   30f7a:	4621      	mov	r1, r4
}
   30f7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   30f80:	2200      	movs	r2, #0
   30f82:	f240 4006 	movw	r0, #1030	; 0x406
   30f86:	f7e3 ba6b 	b.w	14460 <bt_hci_cmd_send_sync>
}
   30f8a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   30f8e:	bd70      	pop	{r4, r5, r6, pc}

00030f90 <bt_le_set_data_len>:
{
   30f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   30f92:	4607      	mov	r7, r0
   30f94:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   30f96:	f242 0022 	movw	r0, #8226	; 0x2022
   30f9a:	2106      	movs	r1, #6
{
   30f9c:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   30f9e:	f7e3 fa11 	bl	143c4 <bt_hci_cmd_create>
	if (!buf) {
   30fa2:	4604      	mov	r4, r0
   30fa4:	b178      	cbz	r0, 30fc6 <bt_le_set_data_len+0x36>
   30fa6:	2106      	movs	r1, #6
   30fa8:	300c      	adds	r0, #12
   30faa:	f7ed fa75 	bl	1e498 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   30fae:	883b      	ldrh	r3, [r7, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   30fb0:	8046      	strh	r6, [r0, #2]
	cp->handle = sys_cpu_to_le16(conn->handle);
   30fb2:	8003      	strh	r3, [r0, #0]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   30fb4:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   30fb6:	4621      	mov	r1, r4
}
   30fb8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   30fbc:	2200      	movs	r2, #0
   30fbe:	f242 0022 	movw	r0, #8226	; 0x2022
   30fc2:	f7e3 ba4d 	b.w	14460 <bt_hci_cmd_send_sync>
}
   30fc6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   30fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00030fcc <bt_le_set_phy>:
{
   30fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   30fd0:	4681      	mov	r9, r0
   30fd2:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   30fd4:	f242 0032 	movw	r0, #8242	; 0x2032
   30fd8:	2107      	movs	r1, #7
{
   30fda:	4617      	mov	r7, r2
   30fdc:	461e      	mov	r6, r3
   30fde:	f89d a020 	ldrb.w	sl, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   30fe2:	f7e3 f9ef 	bl	143c4 <bt_hci_cmd_create>
	if (!buf) {
   30fe6:	4605      	mov	r5, r0
   30fe8:	b1a0      	cbz	r0, 31014 <bt_le_set_phy+0x48>
   30fea:	2107      	movs	r1, #7
   30fec:	300c      	adds	r0, #12
   30fee:	f7ed fa53 	bl	1e498 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   30ff2:	f8b9 3000 	ldrh.w	r3, [r9]
	cp->all_phys = all_phys;
   30ff6:	f880 8002 	strb.w	r8, [r0, #2]
	cp->handle = sys_cpu_to_le16(conn->handle);
   30ffa:	8003      	strh	r3, [r0, #0]
	cp->tx_phys = pref_tx_phy;
   30ffc:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   30ffe:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   31000:	f8a0 a005 	strh.w	sl, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   31004:	4629      	mov	r1, r5
}
   31006:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   3100a:	2200      	movs	r2, #0
   3100c:	f242 0032 	movw	r0, #8242	; 0x2032
   31010:	f7e3 ba26 	b.w	14460 <bt_hci_cmd_send_sync>
}
   31014:	f06f 0068 	mvn.w	r0, #104	; 0x68
   31018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0003101c <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   3101c:	68c0      	ldr	r0, [r0, #12]
   3101e:	f7e3 bb69 	b.w	146f4 <bt_hci_le_enh_conn_complete>

00031022 <bt_le_conn_params_valid>:
{
   31022:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   31024:	8803      	ldrh	r3, [r0, #0]
   31026:	8842      	ldrh	r2, [r0, #2]
   31028:	4293      	cmp	r3, r2
   3102a:	d819      	bhi.n	31060 <bt_le_conn_params_valid+0x3e>
   3102c:	2b05      	cmp	r3, #5
   3102e:	d917      	bls.n	31060 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   31030:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   31034:	d814      	bhi.n	31060 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   31036:	8883      	ldrh	r3, [r0, #4]
   31038:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   3103c:	d210      	bcs.n	31060 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   3103e:	f640 4476 	movw	r4, #3190	; 0xc76
   31042:	88c0      	ldrh	r0, [r0, #6]
   31044:	f1a0 010a 	sub.w	r1, r0, #10
   31048:	b289      	uxth	r1, r1
   3104a:	42a1      	cmp	r1, r4
   3104c:	d808      	bhi.n	31060 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   3104e:	3301      	adds	r3, #1
   31050:	b29b      	uxth	r3, r3
   31052:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   31054:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   31058:	bf34      	ite	cc
   3105a:	2001      	movcc	r0, #1
   3105c:	2000      	movcs	r0, #0
}
   3105e:	bd10      	pop	{r4, pc}
		return false;
   31060:	2000      	movs	r0, #0
   31062:	e7fc      	b.n	3105e <bt_le_conn_params_valid+0x3c>

00031064 <le_conn_param_neg_reply>:
{
   31064:	b570      	push	{r4, r5, r6, lr}
   31066:	4606      	mov	r6, r0
   31068:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   3106a:	f242 0021 	movw	r0, #8225	; 0x2021
   3106e:	2103      	movs	r1, #3
   31070:	f7e3 f9a8 	bl	143c4 <bt_hci_cmd_create>
	if (!buf) {
   31074:	4604      	mov	r4, r0
   31076:	b918      	cbnz	r0, 31080 <le_conn_param_neg_reply+0x1c>
}
   31078:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3107c:	f7e2 be7c 	b.w	13d78 <le_conn_param_neg_reply.part.0>
   31080:	2103      	movs	r1, #3
   31082:	300c      	adds	r0, #12
   31084:	f7ed fa08 	bl	1e498 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   31088:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   3108a:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   3108c:	4621      	mov	r1, r4
}
   3108e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   31092:	f242 0021 	movw	r0, #8225	; 0x2021
   31096:	f7e3 bd8d 	b.w	14bb4 <bt_hci_cmd_send>

0003109a <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   3109a:	2000      	movs	r0, #0
   3109c:	4770      	bx	lr

0003109e <bt_addr_le_is_bonded>:
	return 0;
}
#endif

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   3109e:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   310a0:	f7ec fca4 	bl	1d9ec <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   310a4:	b118      	cbz	r0, 310ae <bt_addr_le_is_bonded+0x10>
   310a6:	89c0      	ldrh	r0, [r0, #14]
   310a8:	3800      	subs	r0, #0
   310aa:	bf18      	it	ne
   310ac:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   310ae:	bd08      	pop	{r3, pc}

000310b0 <bt_addr_le_eq>:
	return memcmp(a, b, sizeof(*a));
   310b0:	2207      	movs	r2, #7
{
   310b2:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   310b4:	f005 fa28 	bl	36508 <memcmp>
}
   310b8:	fab0 f080 	clz	r0, r0
   310bc:	0940      	lsrs	r0, r0, #5
   310be:	bd08      	pop	{r3, pc}

000310c0 <bt_addr_copy>:
   310c0:	680b      	ldr	r3, [r1, #0]
   310c2:	6003      	str	r3, [r0, #0]
   310c4:	888b      	ldrh	r3, [r1, #4]
   310c6:	8083      	strh	r3, [r0, #4]
}
   310c8:	4770      	bx	lr

000310ca <bt_addr_le_copy>:
   310ca:	680b      	ldr	r3, [r1, #0]
   310cc:	6003      	str	r3, [r0, #0]
   310ce:	888b      	ldrh	r3, [r1, #4]
   310d0:	8083      	strh	r3, [r0, #4]
   310d2:	798b      	ldrb	r3, [r1, #6]
   310d4:	7183      	strb	r3, [r0, #6]
}
   310d6:	4770      	bx	lr

000310d8 <hci_id_add>:
{
   310d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   310da:	460f      	mov	r7, r1
   310dc:	4614      	mov	r4, r2
	if (id >= CONFIG_BT_ID_MAX) {
   310de:	bb30      	cbnz	r0, 3112e <hci_id_add+0x56>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   310e0:	2127      	movs	r1, #39	; 0x27
   310e2:	f242 0027 	movw	r0, #8231	; 0x2027
   310e6:	f7e3 f96d 	bl	143c4 <bt_hci_cmd_create>
	if (!buf) {
   310ea:	4605      	mov	r5, r0
   310ec:	b310      	cbz	r0, 31134 <hci_id_add+0x5c>
   310ee:	2127      	movs	r1, #39	; 0x27
   310f0:	300c      	adds	r0, #12
   310f2:	f7ed f9d1 	bl	1e498 <net_buf_simple_add>
   310f6:	4622      	mov	r2, r4
   310f8:	4606      	mov	r6, r0
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   310fa:	4639      	mov	r1, r7
   310fc:	f7ff ffe5 	bl	310ca <bt_addr_le_copy>
   31100:	1dc3      	adds	r3, r0, #7
   31102:	f104 0110 	add.w	r1, r4, #16
   31106:	f852 0b04 	ldr.w	r0, [r2], #4
   3110a:	428a      	cmp	r2, r1
   3110c:	f843 0b04 	str.w	r0, [r3], #4
   31110:	d1f9      	bne.n	31106 <hci_id_add+0x2e>
__ssp_bos_icheck3(memset, void *, int)
   31112:	2210      	movs	r2, #16
   31114:	2100      	movs	r1, #0
   31116:	f106 0017 	add.w	r0, r6, #23
   3111a:	f005 fa25 	bl	36568 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   3111e:	4629      	mov	r1, r5
}
   31120:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   31124:	2200      	movs	r2, #0
   31126:	f242 0027 	movw	r0, #8231	; 0x2027
   3112a:	f7e3 b999 	b.w	14460 <bt_hci_cmd_send_sync>
		return -EINVAL;
   3112e:	f06f 0015 	mvn.w	r0, #21
}
   31132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   31134:	f06f 0068 	mvn.w	r0, #104	; 0x68
   31138:	e7fb      	b.n	31132 <hci_id_add+0x5a>

0003113a <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   3113a:	7a03      	ldrb	r3, [r0, #8]
{
   3113c:	4602      	mov	r2, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   3113e:	075b      	lsls	r3, r3, #29
   31140:	d505      	bpl.n	3114e <keys_add_id+0x14>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   31142:	4601      	mov	r1, r0
   31144:	322a      	adds	r2, #42	; 0x2a
   31146:	f811 0b01 	ldrb.w	r0, [r1], #1
   3114a:	f7ff bfc5 	b.w	310d8 <hci_id_add>
}
   3114e:	4770      	bx	lr

00031150 <z_log_msg_static_create.constprop.0>:
   31150:	2300      	movs	r3, #0
   31152:	f7df b86f 	b.w	10234 <z_impl_z_log_msg_static_create>

00031156 <addr_res_enable>:
{
   31156:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   31158:	2101      	movs	r1, #1
{
   3115a:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   3115c:	f242 002d 	movw	r0, #8237	; 0x202d
   31160:	f7e3 f930 	bl	143c4 <bt_hci_cmd_create>
	if (!buf) {
   31164:	4604      	mov	r4, r0
   31166:	b158      	cbz	r0, 31180 <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   31168:	4629      	mov	r1, r5
   3116a:	300c      	adds	r0, #12
   3116c:	f002 f80e 	bl	3318c <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   31170:	4621      	mov	r1, r4
}
   31172:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   31176:	2200      	movs	r2, #0
   31178:	f242 002d 	movw	r0, #8237	; 0x202d
   3117c:	f7e3 b970 	b.w	14460 <bt_hci_cmd_send_sync>
}
   31180:	f06f 0068 	mvn.w	r0, #104	; 0x68
   31184:	bd38      	pop	{r3, r4, r5, pc}

00031186 <bt_lookup_id_addr>:
{
   31186:	b510      	push	{r4, lr}
   31188:	460c      	mov	r4, r1
	CHECKIF(id >= CONFIG_BT_ID_MAX || addr == NULL) {
   3118a:	b930      	cbnz	r0, 3119a <bt_lookup_id_addr+0x14>
   3118c:	b119      	cbz	r1, 31196 <bt_lookup_id_addr+0x10>
		keys = bt_keys_find_irk(id, addr);
   3118e:	f7ec fbdb 	bl	1d948 <bt_keys_find_irk>
		if (keys) {
   31192:	b100      	cbz	r0, 31196 <bt_lookup_id_addr+0x10>
			return &keys->addr;
   31194:	1c44      	adds	r4, r0, #1
}
   31196:	4620      	mov	r0, r4
   31198:	bd10      	pop	{r4, pc}
		return NULL;
   3119a:	2400      	movs	r4, #0
   3119c:	e7fb      	b.n	31196 <bt_lookup_id_addr+0x10>

0003119e <bt_id_set_private_addr>:
{
   3119e:	b507      	push	{r0, r1, r2, lr}
	CHECKIF(id >= CONFIG_BT_ID_MAX) {
   311a0:	b980      	cbnz	r0, 311c4 <bt_id_set_private_addr+0x26>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   311a2:	2106      	movs	r1, #6
   311a4:	4668      	mov	r0, sp
   311a6:	f7e5 f89d 	bl	162e4 <bt_rand>
	if (err) {
   311aa:	b940      	cbnz	r0, 311be <bt_id_set_private_addr+0x20>
	BT_ADDR_SET_NRPA(&nrpa);
   311ac:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   311b0:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   311b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   311b6:	f88d 3005 	strb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   311ba:	f7e4 fa1f 	bl	155fc <set_random_address>
}
   311be:	b003      	add	sp, #12
   311c0:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   311c4:	f06f 0015 	mvn.w	r0, #21
   311c8:	e7f9      	b.n	311be <bt_id_set_private_addr+0x20>

000311ca <bt_id_scan_random_addr_check>:
}
   311ca:	2001      	movs	r0, #1
   311cc:	4770      	bx	lr

000311ce <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   311ce:	7a03      	ldrb	r3, [r0, #8]
   311d0:	07d9      	lsls	r1, r3, #31
   311d2:	d504      	bpl.n	311de <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   311d4:	f023 0301 	bic.w	r3, r3, #1
   311d8:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   311da:	f7e4 bb81 	b.w	158e0 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   311de:	0799      	lsls	r1, r3, #30
   311e0:	d504      	bpl.n	311ec <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   311e2:	f023 0302 	bic.w	r3, r3, #2
   311e6:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   311e8:	f7e4 bb94 	b.w	15914 <bt_id_del>
}
   311ec:	4770      	bx	lr

000311ee <bt_id_init>:
#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
}
   311ee:	2000      	movs	r0, #0
   311f0:	4770      	bx	lr

000311f2 <atomic_and>:
{
   311f2:	4603      	mov	r3, r0
   311f4:	b510      	push	{r4, lr}
}
   311f6:	e8d3 0fef 	ldaex	r0, [r3]
   311fa:	ea00 0201 	and.w	r2, r0, r1
   311fe:	e8c3 2fe4 	stlex	r4, r2, [r3]
   31202:	2c00      	cmp	r4, #0
   31204:	d1f7      	bne.n	311f6 <atomic_and+0x4>
   31206:	bd10      	pop	{r4, pc}

00031208 <bt_addr_le_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   31208:	680b      	ldr	r3, [r1, #0]
   3120a:	6003      	str	r3, [r0, #0]
   3120c:	888b      	ldrh	r3, [r1, #4]
   3120e:	8083      	strh	r3, [r0, #4]
   31210:	798b      	ldrb	r3, [r1, #6]
   31212:	7183      	strb	r3, [r0, #6]
   31214:	4770      	bx	lr

00031216 <bt_le_scan_set_enable>:
	return bt_le_scan_set_enable_legacy(enable);
   31216:	f7e4 bd89 	b.w	15d2c <bt_le_scan_set_enable_legacy>

0003121a <bt_encrypt_le>:
}
#endif /* CONFIG_BT_HOST_CRYPTO_PRNG */

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   3121a:	b530      	push	{r4, r5, lr}
   3121c:	460d      	mov	r5, r1
   3121e:	4614      	mov	r4, r2
	struct tc_aes_key_sched_struct s;
	uint8_t tmp[16];

	CHECKIF(key == NULL || plaintext == NULL || enc_data == NULL) {
   31220:	4601      	mov	r1, r0
{
   31222:	b0b1      	sub	sp, #196	; 0xc4
	CHECKIF(key == NULL || plaintext == NULL || enc_data == NULL) {
   31224:	b310      	cbz	r0, 3126c <bt_encrypt_le+0x52>
   31226:	b30d      	cbz	r5, 3126c <bt_encrypt_le+0x52>
   31228:	b302      	cbz	r2, 3126c <bt_encrypt_le+0x52>
	}

	LOG_DBG("key %s", bt_hex(key, 16));
	LOG_DBG("plaintext %s", bt_hex(plaintext, 16));

	sys_memcpy_swap(tmp, key, 16);
   3122a:	4668      	mov	r0, sp
   3122c:	f7e4 ffd0 	bl	161d0 <sys_memcpy_swap.constprop.0>

	if (tc_aes128_set_encrypt_key(&s, tmp) == TC_CRYPTO_FAIL) {
   31230:	4669      	mov	r1, sp
   31232:	a804      	add	r0, sp, #16
   31234:	f7e0 ff94 	bl	12160 <tc_aes128_set_encrypt_key>
   31238:	b1c0      	cbz	r0, 3126c <bt_encrypt_le+0x52>
		return -EINVAL;
	}

	sys_memcpy_swap(tmp, plaintext, 16);
   3123a:	4629      	mov	r1, r5
   3123c:	4668      	mov	r0, sp
   3123e:	f7e4 ffc7 	bl	161d0 <sys_memcpy_swap.constprop.0>

	if (tc_aes_encrypt(enc_data, tmp, &s) == TC_CRYPTO_FAIL) {
   31242:	4669      	mov	r1, sp
   31244:	4620      	mov	r0, r4
   31246:	aa04      	add	r2, sp, #16
   31248:	f7ff f992 	bl	30570 <tc_aes_encrypt>
   3124c:	b170      	cbz	r0, 3126c <bt_encrypt_le+0x52>
   3124e:	1e63      	subs	r3, r4, #1
   31250:	f104 0210 	add.w	r2, r4, #16
   31254:	3407      	adds	r4, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   31256:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   3125a:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   3125e:	42a3      	cmp	r3, r4
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   31260:	7018      	strb	r0, [r3, #0]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   31262:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   31264:	d1f7      	bne.n	31256 <bt_encrypt_le+0x3c>

	sys_mem_swap(enc_data, 16);

	LOG_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
   31266:	2000      	movs	r0, #0
}
   31268:	b031      	add	sp, #196	; 0xc4
   3126a:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   3126c:	f06f 0015 	mvn.w	r0, #21
   31270:	e7fa      	b.n	31268 <bt_encrypt_le+0x4e>

00031272 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   31272:	2200      	movs	r2, #0
	return list->head;
   31274:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   31276:	b90b      	cbnz	r3, 3127c <sys_slist_find_and_remove+0xa>
   31278:	4618      	mov	r0, r3
   3127a:	4770      	bx	lr
   3127c:	428b      	cmp	r3, r1
   3127e:	d110      	bne.n	312a2 <sys_slist_find_and_remove+0x30>
	return node->next;
   31280:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   31282:	b942      	cbnz	r2, 31296 <sys_slist_find_and_remove+0x24>
   31284:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   31286:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   31288:	4291      	cmp	r1, r2
   3128a:	d100      	bne.n	3128e <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   3128c:	6043      	str	r3, [r0, #4]
	parent->next = child;
   3128e:	2300      	movs	r3, #0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   31290:	2001      	movs	r0, #1
	parent->next = child;
   31292:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   31294:	4770      	bx	lr
	parent->next = child;
   31296:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   31298:	6843      	ldr	r3, [r0, #4]
   3129a:	4299      	cmp	r1, r3
	list->tail = node;
   3129c:	bf08      	it	eq
   3129e:	6042      	streq	r2, [r0, #4]
}
   312a0:	e7f5      	b.n	3128e <sys_slist_find_and_remove+0x1c>
	return node->next;
   312a2:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   312a4:	681b      	ldr	r3, [r3, #0]
   312a6:	e7e6      	b.n	31276 <sys_slist_find_and_remove+0x4>

000312a8 <atomic_and>:
{
   312a8:	4603      	mov	r3, r0
   312aa:	b510      	push	{r4, lr}
}
   312ac:	e8d3 0fef 	ldaex	r0, [r3]
   312b0:	ea00 0201 	and.w	r2, r0, r1
   312b4:	e8c3 2fe4 	stlex	r4, r2, [r3]
   312b8:	2c00      	cmp	r4, #0
   312ba:	d1f7      	bne.n	312ac <atomic_and+0x4>
   312bc:	bd10      	pop	{r4, pc}

000312be <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   312be:	e8d0 0faf 	lda	r0, [r0]
}
   312c2:	4770      	bx	lr

000312c4 <z_log_msg_static_create.constprop.0>:
   312c4:	2300      	movs	r3, #0
   312c6:	f7de bfb5 	b.w	10234 <z_impl_z_log_msg_static_create>

000312ca <tx_complete_work>:
	tx_notify(conn);
   312ca:	3828      	subs	r0, #40	; 0x28
   312cc:	f7e5 b9a2 	b.w	16614 <tx_notify>

000312d0 <bt_conn_reset_rx_state>:
{
   312d0:	b510      	push	{r4, lr}
   312d2:	4604      	mov	r4, r0
	if (!conn->rx) {
   312d4:	6900      	ldr	r0, [r0, #16]
   312d6:	b118      	cbz	r0, 312e0 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   312d8:	f7ec ff58 	bl	1e18c <net_buf_unref>
	conn->rx = NULL;
   312dc:	2300      	movs	r3, #0
   312de:	6123      	str	r3, [r4, #16]
}
   312e0:	bd10      	pop	{r4, pc}

000312e2 <conn_lookup_handle>:
{
   312e2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   312e6:	4607      	mov	r7, r0
   312e8:	460e      	mov	r6, r1
   312ea:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   312ec:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   312ee:	f04f 09c8 	mov.w	r9, #200	; 0xc8
	for (i = 0; i < size; i++) {
   312f2:	42b4      	cmp	r4, r6
   312f4:	d103      	bne.n	312fe <conn_lookup_handle+0x1c>
	return NULL;
   312f6:	2300      	movs	r3, #0
}
   312f8:	4618      	mov	r0, r3
   312fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   312fe:	fb09 7004 	mla	r0, r9, r4, r7
   31302:	f7e5 fc95 	bl	16c30 <bt_conn_ref>
   31306:	4603      	mov	r3, r0
		if (!conn) {
   31308:	b158      	cbz	r0, 31322 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   3130a:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   3130c:	2d01      	cmp	r5, #1
   3130e:	d002      	beq.n	31316 <conn_lookup_handle+0x34>
   31310:	3d07      	subs	r5, #7
   31312:	2d01      	cmp	r5, #1
   31314:	d803      	bhi.n	3131e <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   31316:	881a      	ldrh	r2, [r3, #0]
   31318:	4542      	cmp	r2, r8
   3131a:	d0ed      	beq.n	312f8 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   3131c:	4618      	mov	r0, r3
   3131e:	f7e5 fcb1 	bl	16c84 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   31322:	3401      	adds	r4, #1
   31324:	e7e5      	b.n	312f2 <conn_lookup_handle+0x10>

00031326 <bt_conn_connected>:
{
   31326:	b510      	push	{r4, lr}
   31328:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   3132a:	f7e6 fafd 	bl	17928 <bt_l2cap_connected>
	notify_connected(conn);
   3132e:	4620      	mov	r0, r4
}
   31330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   31334:	f7e5 b938 	b.w	165a8 <notify_connected>

00031338 <bt_conn_ltk_present>:
{
   31338:	b510      	push	{r4, lr}
   3133a:	4604      	mov	r4, r0
	const struct bt_keys *keys = conn->le.keys;
   3133c:	f8d0 00bc 	ldr.w	r0, [r0, #188]	; 0xbc
	if (!keys) {
   31340:	b928      	cbnz	r0, 3134e <bt_conn_ltk_present+0x16>
		keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   31342:	7a20      	ldrb	r0, [r4, #8]
   31344:	f104 0190 	add.w	r1, r4, #144	; 0x90
   31348:	f7ec fb50 	bl	1d9ec <bt_keys_find_addr>
	if (keys) {
   3134c:	b138      	cbz	r0, 3135e <bt_conn_ltk_present+0x26>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   3134e:	78e2      	ldrb	r2, [r4, #3]
			return keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_PERIPH_LTK);
   31350:	89c3      	ldrh	r3, [r0, #14]
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   31352:	b92a      	cbnz	r2, 31360 <bt_conn_ltk_present+0x28>
			return keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_PERIPH_LTK);
   31354:	f013 0f21 	tst.w	r3, #33	; 0x21
			return keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK);
   31358:	bf14      	ite	ne
   3135a:	2001      	movne	r0, #1
   3135c:	2000      	moveq	r0, #0
}
   3135e:	bd10      	pop	{r4, pc}
			return keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK);
   31360:	f013 0f24 	tst.w	r3, #36	; 0x24
   31364:	e7f8      	b.n	31358 <bt_conn_ltk_present+0x20>

00031366 <bt_conn_le_start_encryption>:
{
   31366:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3136a:	4681      	mov	r9, r0
   3136c:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   3136e:	f242 0019 	movw	r0, #8217	; 0x2019
   31372:	211c      	movs	r1, #28
{
   31374:	4690      	mov	r8, r2
   31376:	461f      	mov	r7, r3
   31378:	9e08      	ldr	r6, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   3137a:	f7e3 f823 	bl	143c4 <bt_hci_cmd_create>
	if (!buf) {
   3137e:	4605      	mov	r5, r0
   31380:	b338      	cbz	r0, 313d2 <bt_conn_le_start_encryption+0x6c>
	return net_buf_simple_add(&buf->b, len);
   31382:	211c      	movs	r1, #28
   31384:	300c      	adds	r0, #12
   31386:	f7ed f887 	bl	1e498 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   3138a:	4603      	mov	r3, r0
   3138c:	f8b9 2000 	ldrh.w	r2, [r9]
   31390:	4639      	mov	r1, r7
   31392:	f823 2b02 	strh.w	r2, [r3], #2
   31396:	6822      	ldr	r2, [r4, #0]
   31398:	f8c0 2002 	str.w	r2, [r0, #2]
   3139c:	6862      	ldr	r2, [r4, #4]
	memcpy(cp->ltk, ltk, len);
   3139e:	f100 040c 	add.w	r4, r0, #12
   313a2:	605a      	str	r2, [r3, #4]
   313a4:	f8b8 3000 	ldrh.w	r3, [r8]
   313a8:	4632      	mov	r2, r6
   313aa:	8143      	strh	r3, [r0, #10]
   313ac:	4620      	mov	r0, r4
   313ae:	f005 f8bb 	bl	36528 <memcpy>
	if (len < sizeof(cp->ltk)) {
   313b2:	2e0f      	cmp	r6, #15
   313b4:	d805      	bhi.n	313c2 <bt_conn_le_start_encryption+0x5c>
__ssp_bos_icheck3(memset, void *, int)
   313b6:	2100      	movs	r1, #0
   313b8:	f1c6 0210 	rsb	r2, r6, #16
   313bc:	19a0      	adds	r0, r4, r6
   313be:	f005 f8d3 	bl	36568 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   313c2:	4629      	mov	r1, r5
}
   313c4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   313c8:	2200      	movs	r2, #0
   313ca:	f242 0019 	movw	r0, #8217	; 0x2019
   313ce:	f7e3 b847 	b.w	14460 <bt_hci_cmd_send_sync>
}
   313d2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   313d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000313da <bt_conn_set_security>:
{
   313da:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   313dc:	7b43      	ldrb	r3, [r0, #13]
{
   313de:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   313e0:	2b07      	cmp	r3, #7
{
   313e2:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   313e4:	d122      	bne.n	3142c <bt_conn_set_security+0x52>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   313e6:	7a43      	ldrb	r3, [r0, #9]
   313e8:	428b      	cmp	r3, r1
   313ea:	d215      	bcs.n	31418 <bt_conn_set_security+0x3e>
   313ec:	7a83      	ldrb	r3, [r0, #10]
   313ee:	428b      	cmp	r3, r1
   313f0:	d212      	bcs.n	31418 <bt_conn_set_security+0x3e>
	if (val) {
   313f2:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   313f4:	f100 0004 	add.w	r0, r0, #4
   313f8:	d510      	bpl.n	3141c <bt_conn_set_security+0x42>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   313fa:	e8d0 3fef 	ldaex	r3, [r0]
   313fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   31402:	e8c0 3fe2 	stlex	r2, r3, [r0]
   31406:	2a00      	cmp	r2, #0
   31408:	d1f7      	bne.n	313fa <bt_conn_set_security+0x20>
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   3140a:	f005 057f 	and.w	r5, r5, #127	; 0x7f
		return bt_smp_start_security(conn);
   3140e:	4620      	mov	r0, r4
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   31410:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   31412:	f001 fcf9 	bl	32e08 <bt_smp_start_security>
	if (err) {
   31416:	b930      	cbnz	r0, 31426 <bt_conn_set_security+0x4c>
		return -ENOTCONN;
   31418:	2000      	movs	r0, #0
}
   3141a:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   3141c:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   31420:	f7ff ff42 	bl	312a8 <atomic_and>
   31424:	e7f1      	b.n	3140a <bt_conn_set_security+0x30>
		conn->required_sec_level = conn->sec_level;
   31426:	7a63      	ldrb	r3, [r4, #9]
   31428:	72a3      	strb	r3, [r4, #10]
   3142a:	e7f6      	b.n	3141a <bt_conn_set_security+0x40>
		return -ENOTCONN;
   3142c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   31430:	e7f3      	b.n	3141a <bt_conn_set_security+0x40>

00031432 <bt_conn_get_security>:
}
   31432:	7a40      	ldrb	r0, [r0, #9]
   31434:	4770      	bx	lr

00031436 <conn_le_create_helper>:
{
   31436:	b537      	push	{r0, r1, r2, r4, r5, lr}
   31438:	4605      	mov	r5, r0
   3143a:	460c      	mov	r4, r1
	if (bt_addr_le_is_resolved(peer)) {
   3143c:	f7ff fd2c 	bl	30e98 <bt_addr_le_is_resolved>
		bt_addr_le_copy_resolved(&dst, peer);
   31440:	4629      	mov	r1, r5
	if (bt_addr_le_is_resolved(peer)) {
   31442:	b1a8      	cbz	r0, 31470 <conn_le_create_helper+0x3a>
		bt_addr_le_copy_resolved(&dst, peer);
   31444:	4668      	mov	r0, sp
   31446:	f7ff fd1c 	bl	30e82 <bt_addr_le_copy_resolved>
	conn = bt_conn_add_le(BT_ID_DEFAULT, &dst);
   3144a:	4669      	mov	r1, sp
   3144c:	2000      	movs	r0, #0
   3144e:	f7e5 fef9 	bl	17244 <bt_conn_add_le>
	if (!conn) {
   31452:	b158      	cbz	r0, 3146c <conn_le_create_helper+0x36>
	conn->le.interval_min = param->interval_min;
   31454:	8823      	ldrh	r3, [r4, #0]
   31456:	f8a0 30a8 	strh.w	r3, [r0, #168]	; 0xa8
	conn->le.interval_max = param->interval_max;
   3145a:	8863      	ldrh	r3, [r4, #2]
   3145c:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
	conn->le.latency = param->latency;
   31460:	88a3      	ldrh	r3, [r4, #4]
   31462:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
	conn->le.timeout = param->timeout;
   31466:	88e3      	ldrh	r3, [r4, #6]
   31468:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
}
   3146c:	b003      	add	sp, #12
   3146e:	bd30      	pop	{r4, r5, pc}
		bt_addr_le_copy(&dst, bt_lookup_id_addr(BT_ID_DEFAULT, peer));
   31470:	f7ff fe89 	bl	31186 <bt_lookup_id_addr>
   31474:	4603      	mov	r3, r0
	memcpy(dst, src, sizeof(*dst));
   31476:	6800      	ldr	r0, [r0, #0]
   31478:	9000      	str	r0, [sp, #0]
   3147a:	889a      	ldrh	r2, [r3, #4]
   3147c:	799b      	ldrb	r3, [r3, #6]
   3147e:	f8ad 2004 	strh.w	r2, [sp, #4]
   31482:	f88d 3006 	strb.w	r3, [sp, #6]
}
   31486:	e7e0      	b.n	3144a <conn_le_create_helper+0x14>

00031488 <bt_conn_is_peer_addr_le>:
{
   31488:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   3148a:	7a03      	ldrb	r3, [r0, #8]
{
   3148c:	4604      	mov	r4, r0
	if (id != conn->id) {
   3148e:	428b      	cmp	r3, r1
{
   31490:	4615      	mov	r5, r2
	if (id != conn->id) {
   31492:	d115      	bne.n	314c0 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   31494:	f100 0190 	add.w	r1, r0, #144	; 0x90
   31498:	2207      	movs	r2, #7
   3149a:	4628      	mov	r0, r5
   3149c:	f005 f834 	bl	36508 <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   314a0:	b180      	cbz	r0, 314c4 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   314a2:	78e3      	ldrb	r3, [r4, #3]
   314a4:	2207      	movs	r2, #7
   314a6:	b943      	cbnz	r3, 314ba <bt_conn_is_peer_addr_le+0x32>
   314a8:	f104 019e 	add.w	r1, r4, #158	; 0x9e
   314ac:	4628      	mov	r0, r5
   314ae:	f005 f82b 	bl	36508 <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   314b2:	fab0 f080 	clz	r0, r0
   314b6:	0940      	lsrs	r0, r0, #5
}
   314b8:	bd38      	pop	{r3, r4, r5, pc}
	return memcmp(a, b, sizeof(*a));
   314ba:	f104 0197 	add.w	r1, r4, #151	; 0x97
   314be:	e7f5      	b.n	314ac <bt_conn_is_peer_addr_le+0x24>
		return false;
   314c0:	2000      	movs	r0, #0
   314c2:	e7f9      	b.n	314b8 <bt_conn_is_peer_addr_le+0x30>
		return true;
   314c4:	2001      	movs	r0, #1
   314c6:	e7f7      	b.n	314b8 <bt_conn_is_peer_addr_le+0x30>

000314c8 <bt_conn_get_dst>:
}
   314c8:	3090      	adds	r0, #144	; 0x90
   314ca:	4770      	bx	lr

000314cc <bt_conn_disconnect>:
{
   314cc:	b538      	push	{r3, r4, r5, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   314ce:	7883      	ldrb	r3, [r0, #2]
{
   314d0:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   314d2:	2b01      	cmp	r3, #1
{
   314d4:	460d      	mov	r5, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   314d6:	d103      	bne.n	314e0 <bt_conn_disconnect+0x14>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
   314d8:	2100      	movs	r1, #0
   314da:	3090      	adds	r0, #144	; 0x90
   314dc:	f7e5 ffcc 	bl	17478 <bt_le_set_auto_conn>
	switch (conn->state) {
   314e0:	7b63      	ldrb	r3, [r4, #13]
   314e2:	3b02      	subs	r3, #2
   314e4:	2b06      	cmp	r3, #6
   314e6:	d825      	bhi.n	31534 <bt_conn_disconnect+0x68>
   314e8:	e8df f003 	tbb	[pc, r3]
   314ec:	24242404 	.word	0x24242404
   314f0:	160e      	.short	0x160e
   314f2:	0c          	.byte	0x0c
   314f3:	00          	.byte	0x00
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   314f4:	4620      	mov	r0, r4
   314f6:	2100      	movs	r1, #0
		conn->err = reason;
   314f8:	7325      	strb	r5, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   314fa:	f7e5 fbef 	bl	16cdc <bt_conn_set_state>
			bt_le_scan_update(false);
   314fe:	2000      	movs	r0, #0
   31500:	f7e4 fc90 	bl	15e24 <bt_le_scan_update>
{
   31504:	2000      	movs	r0, #0
}
   31506:	bd38      	pop	{r3, r4, r5, pc}
			k_work_cancel_delayable(&conn->deferred_work);
   31508:	f104 0060 	add.w	r0, r4, #96	; 0x60
   3150c:	f7f8 fde4 	bl	2a0d8 <k_work_cancel_delayable>
}
   31510:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_create_conn_cancel();
   31514:	f7e3 b8d4 	b.w	146c0 <bt_le_create_conn_cancel>
	err = bt_hci_disconnect(conn->handle, reason);
   31518:	4629      	mov	r1, r5
   3151a:	8820      	ldrh	r0, [r4, #0]
   3151c:	f7ff fd1d 	bl	30f5a <bt_hci_disconnect>
	if (err) {
   31520:	2800      	cmp	r0, #0
   31522:	d1f0      	bne.n	31506 <bt_conn_disconnect+0x3a>
	if (conn->state == BT_CONN_CONNECTED) {
   31524:	7b63      	ldrb	r3, [r4, #13]
   31526:	2b07      	cmp	r3, #7
   31528:	d1ec      	bne.n	31504 <bt_conn_disconnect+0x38>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   3152a:	2108      	movs	r1, #8
   3152c:	4620      	mov	r0, r4
   3152e:	f7e5 fbd5 	bl	16cdc <bt_conn_set_state>
   31532:	e7e7      	b.n	31504 <bt_conn_disconnect+0x38>
		return -ENOTCONN;
   31534:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   31538:	e7e5      	b.n	31506 <bt_conn_disconnect+0x3a>

0003153a <bt_conn_le_conn_update>:
{
   3153a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3153c:	4607      	mov	r7, r0
   3153e:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   31540:	f242 0013 	movw	r0, #8211	; 0x2013
   31544:	210e      	movs	r1, #14
   31546:	f7e2 ff3d 	bl	143c4 <bt_hci_cmd_create>
	if (!buf) {
   3154a:	4606      	mov	r6, r0
   3154c:	b1d0      	cbz	r0, 31584 <bt_conn_le_conn_update+0x4a>
   3154e:	210e      	movs	r1, #14
   31550:	300c      	adds	r0, #12
   31552:	f7ec ffa1 	bl	1e498 <net_buf_simple_add>
   31556:	4604      	mov	r4, r0
   31558:	220e      	movs	r2, #14
   3155a:	2100      	movs	r1, #0
   3155c:	f005 f804 	bl	36568 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   31560:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   31562:	4631      	mov	r1, r6
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   31564:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   31566:	882b      	ldrh	r3, [r5, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   31568:	2200      	movs	r2, #0
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   3156a:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   3156c:	886b      	ldrh	r3, [r5, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   3156e:	f242 0013 	movw	r0, #8211	; 0x2013
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   31572:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   31574:	88ab      	ldrh	r3, [r5, #4]
   31576:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   31578:	88eb      	ldrh	r3, [r5, #6]
   3157a:	8123      	strh	r3, [r4, #8]
}
   3157c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   31580:	f7e2 bf6e 	b.w	14460 <bt_hci_cmd_send_sync>
}
   31584:	f06f 0068 	mvn.w	r0, #104	; 0x68
   31588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0003158a <l2cap_connected>:
}
   3158a:	4770      	bx	lr

0003158c <z_log_msg_static_create.constprop.0>:
   3158c:	2300      	movs	r3, #0
   3158e:	f7de be51 	b.w	10234 <z_impl_z_log_msg_static_create>

00031592 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   31592:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   31594:	4605      	mov	r5, r0
   31596:	460f      	mov	r7, r1
   31598:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   3159a:	2300      	movs	r3, #0
   3159c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   315a0:	2104      	movs	r1, #4
   315a2:	2000      	movs	r0, #0
   315a4:	f7e5 fcd8 	bl	16f58 <bt_conn_create_pdu_timeout>
	if (!buf) {
   315a8:	4604      	mov	r4, r0
   315aa:	b920      	cbnz	r0, 315b6 <l2cap_create_le_sig_pdu.constprop.0+0x24>
   315ac:	4628      	mov	r0, r5
}
   315ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   315b2:	f7e6 b97d 	b.w	178b0 <l2cap_create_le_sig_pdu.part.0>
   315b6:	2104      	movs	r1, #4
   315b8:	300c      	adds	r0, #12
   315ba:	f7ec ff6d 	bl	1e498 <net_buf_simple_add>
	hdr->code = code;
   315be:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   315c0:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   315c2:	8046      	strh	r6, [r0, #2]
}
   315c4:	4620      	mov	r0, r4
   315c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000315c8 <l2cap_disconnected>:
static void l2cap_disconnected(struct bt_l2cap_chan *chan)
   315c8:	4770      	bx	lr

000315ca <bt_l2cap_chan_del>:
{
   315ca:	b570      	push	{r4, r5, r6, lr}
   315cc:	4604      	mov	r4, r0
	if (!chan->conn) {
   315ce:	e9d0 3500 	ldrd	r3, r5, [r0]
   315d2:	b123      	cbz	r3, 315de <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   315d4:	686b      	ldr	r3, [r5, #4]
   315d6:	b103      	cbz	r3, 315da <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   315d8:	4798      	blx	r3
	chan->conn = NULL;
   315da:	2300      	movs	r3, #0
   315dc:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   315de:	68e3      	ldr	r3, [r4, #12]
   315e0:	b10b      	cbz	r3, 315e6 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   315e2:	4620      	mov	r0, r4
   315e4:	4798      	blx	r3
	if (ops->released) {
   315e6:	6a2b      	ldr	r3, [r5, #32]
   315e8:	b11b      	cbz	r3, 315f2 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   315ea:	4620      	mov	r0, r4
}
   315ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   315f0:	4718      	bx	r3
}
   315f2:	bd70      	pop	{r4, r5, r6, pc}

000315f4 <bt_l2cap_disconnected>:
{
   315f4:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   315f6:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   315f8:	b130      	cbz	r0, 31608 <bt_l2cap_disconnected+0x14>
	return node->next;
   315fa:	f850 4908 	ldr.w	r4, [r0], #-8
   315fe:	b104      	cbz	r4, 31602 <bt_l2cap_disconnected+0xe>
   31600:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   31602:	f7ff ffe2 	bl	315ca <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   31606:	b904      	cbnz	r4, 3160a <bt_l2cap_disconnected+0x16>
}
   31608:	bd38      	pop	{r3, r4, r5, pc}
   3160a:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   3160c:	b12d      	cbz	r5, 3161a <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   3160e:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   31610:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   31612:	f7ff ffda 	bl	315ca <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   31616:	462c      	mov	r4, r5
   31618:	e7f7      	b.n	3160a <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   3161a:	4620      	mov	r0, r4
}
   3161c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   31620:	f7ff bfd3 	b.w	315ca <bt_l2cap_chan_del>

00031624 <bt_l2cap_security_changed>:
{
   31624:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   31626:	6d43      	ldr	r3, [r0, #84]	; 0x54
   31628:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   3162a:	b1bb      	cbz	r3, 3165c <bt_l2cap_security_changed+0x38>
   3162c:	4618      	mov	r0, r3
	return node->next;
   3162e:	f850 4908 	ldr.w	r4, [r0], #-8
   31632:	b104      	cbz	r4, 31636 <bt_l2cap_security_changed+0x12>
   31634:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   31636:	f853 3c04 	ldr.w	r3, [r3, #-4]
   3163a:	689b      	ldr	r3, [r3, #8]
   3163c:	b10b      	cbz	r3, 31642 <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   3163e:	4629      	mov	r1, r5
   31640:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   31642:	b15c      	cbz	r4, 3165c <bt_l2cap_security_changed+0x38>
   31644:	4620      	mov	r0, r4
   31646:	68a4      	ldr	r4, [r4, #8]
   31648:	6843      	ldr	r3, [r0, #4]
   3164a:	b124      	cbz	r4, 31656 <bt_l2cap_security_changed+0x32>
		if (chan->ops->encrypt_change) {
   3164c:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   3164e:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   31650:	2b00      	cmp	r3, #0
   31652:	d1f4      	bne.n	3163e <bt_l2cap_security_changed+0x1a>
   31654:	e7f6      	b.n	31644 <bt_l2cap_security_changed+0x20>
   31656:	689b      	ldr	r3, [r3, #8]
   31658:	2b00      	cmp	r3, #0
   3165a:	d1f0      	bne.n	3163e <bt_l2cap_security_changed+0x1a>
}
   3165c:	bd38      	pop	{r3, r4, r5, pc}

0003165e <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   3165e:	3104      	adds	r1, #4
   31660:	f7e5 bc7a 	b.w	16f58 <bt_conn_create_pdu_timeout>

00031664 <bt_l2cap_send_cb>:
{
   31664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   31668:	4614      	mov	r4, r2
   3166a:	4605      	mov	r5, r0
   3166c:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   3166e:	f102 000c 	add.w	r0, r2, #12
   31672:	2104      	movs	r1, #4
   31674:	461e      	mov	r6, r3
   31676:	f8dd 8018 	ldr.w	r8, [sp, #24]
   3167a:	f7ec feb1 	bl	1e3e0 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   3167e:	8a22      	ldrh	r2, [r4, #16]
	hdr->cid = sys_cpu_to_le16(cid);
   31680:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   31682:	3a04      	subs	r2, #4
   31684:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   31686:	4643      	mov	r3, r8
   31688:	4632      	mov	r2, r6
   3168a:	4621      	mov	r1, r4
   3168c:	4628      	mov	r0, r5
}
   3168e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   31692:	f7e5 ba15 	b.w	16ac0 <bt_conn_send_cb>

00031696 <l2cap_send_reject.constprop.0>:
static void l2cap_send_reject(struct bt_conn *conn, uint8_t ident,
   31696:	b537      	push	{r0, r1, r2, r4, r5, lr}
   31698:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   3169a:	2202      	movs	r2, #2
   3169c:	2001      	movs	r0, #1
   3169e:	f7ff ff78 	bl	31592 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   316a2:	4604      	mov	r4, r0
   316a4:	b198      	cbz	r0, 316ce <l2cap_send_reject.constprop.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   316a6:	2102      	movs	r1, #2
   316a8:	300c      	adds	r0, #12
   316aa:	f7ec fef5 	bl	1e498 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   316ae:	2300      	movs	r3, #0
   316b0:	4622      	mov	r2, r4
   316b2:	7003      	strb	r3, [r0, #0]
   316b4:	7043      	strb	r3, [r0, #1]
   316b6:	2105      	movs	r1, #5
   316b8:	4628      	mov	r0, r5
   316ba:	9300      	str	r3, [sp, #0]
   316bc:	f7ff ffd2 	bl	31664 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   316c0:	b128      	cbz	r0, 316ce <l2cap_send_reject.constprop.0+0x38>
		net_buf_unref(buf);
   316c2:	4620      	mov	r0, r4
}
   316c4:	b003      	add	sp, #12
   316c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   316ca:	f7ec bd5f 	b.w	1e18c <net_buf_unref>
}
   316ce:	b003      	add	sp, #12
   316d0:	bd30      	pop	{r4, r5, pc}

000316d2 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   316d2:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   316d4:	b128      	cbz	r0, 316e2 <bt_l2cap_le_lookup_tx_cid+0x10>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   316d6:	8b83      	ldrh	r3, [r0, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   316d8:	3808      	subs	r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   316da:	428b      	cmp	r3, r1
   316dc:	d001      	beq.n	316e2 <bt_l2cap_le_lookup_tx_cid+0x10>
	return node->next;
   316de:	6880      	ldr	r0, [r0, #8]
   316e0:	e7f8      	b.n	316d4 <bt_l2cap_le_lookup_tx_cid+0x2>
}
   316e2:	4770      	bx	lr

000316e4 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   316e4:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   316e6:	b128      	cbz	r0, 316f4 <bt_l2cap_le_lookup_rx_cid+0x10>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   316e8:	8983      	ldrh	r3, [r0, #12]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   316ea:	3808      	subs	r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   316ec:	428b      	cmp	r3, r1
   316ee:	d001      	beq.n	316f4 <bt_l2cap_le_lookup_rx_cid+0x10>
	return node->next;
   316f0:	6880      	ldr	r0, [r0, #8]
   316f2:	e7f8      	b.n	316e6 <bt_l2cap_le_lookup_rx_cid+0x2>
}
   316f4:	4770      	bx	lr

000316f6 <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   316f6:	4770      	bx	lr

000316f8 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   316f8:	4603      	mov	r3, r0
	return list->head;
   316fa:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   316fc:	b128      	cbz	r0, 3170a <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   316fe:	6859      	ldr	r1, [r3, #4]
	return node->next;
   31700:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   31702:	4288      	cmp	r0, r1
	list->head = node;
   31704:	601a      	str	r2, [r3, #0]
	list->tail = node;
   31706:	bf08      	it	eq
   31708:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   3170a:	4770      	bx	lr

0003170c <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   3170c:	4603      	mov	r3, r0
	size_t bytes = 0;
   3170e:	2000      	movs	r0, #0

	while (buf) {
   31710:	b903      	cbnz	r3, 31714 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   31712:	4770      	bx	lr
		bytes += buf->len;
   31714:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
   31716:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
   31718:	4410      	add	r0, r2
		buf = buf->frags;
   3171a:	e7f9      	b.n	31710 <net_buf_frags_len+0x4>

0003171c <attr_read_type_cb>:
{
   3171c:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   3171e:	68d4      	ldr	r4, [r2, #12]
   31720:	3102      	adds	r1, #2
   31722:	7823      	ldrb	r3, [r4, #0]
   31724:	b913      	cbnz	r3, 3172c <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   31726:	7021      	strb	r1, [r4, #0]
	return true;
   31728:	2001      	movs	r0, #1
}
   3172a:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   3172c:	428b      	cmp	r3, r1
   3172e:	d0fb      	beq.n	31728 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   31730:	8a03      	ldrh	r3, [r0, #16]
   31732:	3b02      	subs	r3, #2
   31734:	8203      	strh	r3, [r0, #16]
		data->item = NULL;
   31736:	2000      	movs	r0, #0
   31738:	6110      	str	r0, [r2, #16]
		return false;
   3173a:	e7f6      	b.n	3172a <attr_read_type_cb+0xe>

0003173c <att_prepare_write_req>:
}
   3173c:	2006      	movs	r0, #6
   3173e:	4770      	bx	lr

00031740 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   31740:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   31744:	4108      	asrs	r0, r1
}
   31746:	f000 0001 	and.w	r0, r0, #1
   3174a:	4770      	bx	lr

0003174c <att_notify_mult>:
{
   3174c:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   3174e:	6803      	ldr	r3, [r0, #0]
   31750:	8a0a      	ldrh	r2, [r1, #16]
   31752:	6818      	ldr	r0, [r3, #0]
   31754:	68c9      	ldr	r1, [r1, #12]
   31756:	f7e9 fff7 	bl	1b748 <bt_gatt_mult_notification>
}
   3175a:	2000      	movs	r0, #0
   3175c:	bd08      	pop	{r3, pc}

0003175e <att_notify>:
{
   3175e:	b538      	push	{r3, r4, r5, lr}
   31760:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   31762:	f101 000c 	add.w	r0, r1, #12
   31766:	460c      	mov	r4, r1
   31768:	f001 fcf0 	bl	3314c <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   3176c:	682d      	ldr	r5, [r5, #0]
   3176e:	4601      	mov	r1, r0
   31770:	8a23      	ldrh	r3, [r4, #16]
   31772:	6828      	ldr	r0, [r5, #0]
   31774:	68e2      	ldr	r2, [r4, #12]
   31776:	f001 f888 	bl	3288a <bt_gatt_notification>
}
   3177a:	2000      	movs	r0, #0
   3177c:	bd38      	pop	{r3, r4, r5, pc}

0003177e <att_chan_mtu_updated>:
{
   3177e:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   31780:	6805      	ldr	r5, [r0, #0]
	return list->head;
   31782:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   31784:	b352      	cbz	r2, 317dc <att_chan_mtu_updated+0x5e>
	return node->next;
   31786:	6813      	ldr	r3, [r2, #0]
   31788:	b103      	cbz	r3, 3178c <att_chan_mtu_updated+0xe>
   3178a:	3b88      	subs	r3, #136	; 0x88
   3178c:	f1a2 0488 	sub.w	r4, r2, #136	; 0x88
   31790:	2200      	movs	r2, #0
   31792:	4611      	mov	r1, r2
   31794:	e000      	b.n	31798 <att_chan_mtu_updated+0x1a>
   31796:	3b88      	subs	r3, #136	; 0x88
		if (chan == updated_chan) {
   31798:	4284      	cmp	r4, r0
   3179a:	d007      	beq.n	317ac <att_chan_mtu_updated+0x2e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   3179c:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   3179e:	8b64      	ldrh	r4, [r4, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   317a0:	42b1      	cmp	r1, r6
   317a2:	bf38      	it	cc
   317a4:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   317a6:	42a2      	cmp	r2, r4
   317a8:	bf38      	it	cc
   317aa:	4622      	movcc	r2, r4
   317ac:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   317ae:	b12b      	cbz	r3, 317bc <att_chan_mtu_updated+0x3e>
   317b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   317b4:	2b00      	cmp	r3, #0
   317b6:	d1ee      	bne.n	31796 <att_chan_mtu_updated+0x18>
		if (chan == updated_chan) {
   317b8:	4284      	cmp	r4, r0
   317ba:	d1ef      	bne.n	3179c <att_chan_mtu_updated+0x1e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   317bc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   317be:	8b40      	ldrh	r0, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   317c0:	428b      	cmp	r3, r1
   317c2:	d801      	bhi.n	317c8 <att_chan_mtu_updated+0x4a>
   317c4:	4290      	cmp	r0, r2
   317c6:	d90b      	bls.n	317e0 <att_chan_mtu_updated+0x62>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   317c8:	4282      	cmp	r2, r0
   317ca:	bf38      	it	cc
   317cc:	4602      	movcc	r2, r0
   317ce:	4299      	cmp	r1, r3
   317d0:	6828      	ldr	r0, [r5, #0]
   317d2:	bf38      	it	cc
   317d4:	4619      	movcc	r1, r3
}
   317d6:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   317d8:	f7ea b874 	b.w	1b8c4 <bt_gatt_att_max_mtu_changed>
   317dc:	4611      	mov	r1, r2
   317de:	e7ed      	b.n	317bc <att_chan_mtu_updated+0x3e>
}
   317e0:	bc70      	pop	{r4, r5, r6}
   317e2:	4770      	bx	lr

000317e4 <write_cb>:
{
   317e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   317e6:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   317e8:	4601      	mov	r1, r0
{
   317ea:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   317ec:	f44f 7295 	mov.w	r2, #298	; 0x12a
   317f0:	6820      	ldr	r0, [r4, #0]
   317f2:	f000 ff78 	bl	326e6 <bt_gatt_check_perm>
   317f6:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   317f8:	bb00      	cbnz	r0, 3183c <write_cb+0x58>
	if (!data->req) {
   317fa:	7a23      	ldrb	r3, [r4, #8]
   317fc:	b1b3      	cbz	r3, 3182c <write_cb+0x48>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   317fe:	f1a3 0218 	sub.w	r2, r3, #24
   31802:	4253      	negs	r3, r2
   31804:	4153      	adcs	r3, r2
   31806:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   31808:	9301      	str	r3, [sp, #4]
   3180a:	8a63      	ldrh	r3, [r4, #18]
   3180c:	4629      	mov	r1, r5
   3180e:	9300      	str	r3, [sp, #0]
   31810:	68ae      	ldr	r6, [r5, #8]
   31812:	8a23      	ldrh	r3, [r4, #16]
   31814:	68e2      	ldr	r2, [r4, #12]
   31816:	6820      	ldr	r0, [r4, #0]
   31818:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   3181a:	2800      	cmp	r0, #0
   3181c:	db08      	blt.n	31830 <write_cb+0x4c>
   3181e:	8a23      	ldrh	r3, [r4, #16]
   31820:	4298      	cmp	r0, r3
   31822:	d10e      	bne.n	31842 <write_cb+0x5e>
	data->err = 0U;
   31824:	2300      	movs	r3, #0
	return BT_GATT_ITER_CONTINUE;
   31826:	2001      	movs	r0, #1
	data->err = 0U;
   31828:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   3182a:	e008      	b.n	3183e <write_cb+0x5a>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   3182c:	2302      	movs	r3, #2
   3182e:	e7eb      	b.n	31808 <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   31830:	f110 0fff 	cmn.w	r0, #255	; 0xff
   31834:	d305      	bcc.n	31842 <write_cb+0x5e>
		return -err;
   31836:	4240      	negs	r0, r0
   31838:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   3183a:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   3183c:	2000      	movs	r0, #0
}
   3183e:	b002      	add	sp, #8
   31840:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   31842:	200e      	movs	r0, #14
   31844:	e7f9      	b.n	3183a <write_cb+0x56>

00031846 <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   31846:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   31848:	e9cd 2301 	strd	r2, r3, [sp, #4]
   3184c:	2300      	movs	r3, #0
   3184e:	461a      	mov	r2, r3
   31850:	9300      	str	r3, [sp, #0]
   31852:	f7e8 fb59 	bl	19f08 <bt_gatt_foreach_attr_type>
				  user_data);
}
   31856:	b005      	add	sp, #20
   31858:	f85d fb04 	ldr.w	pc, [sp], #4

0003185c <attr_read_group_cb>:
	if (!data->rsp->len) {
   3185c:	68d0      	ldr	r0, [r2, #12]
   3185e:	3104      	adds	r1, #4
   31860:	7803      	ldrb	r3, [r0, #0]
   31862:	b913      	cbnz	r3, 3186a <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   31864:	7001      	strb	r1, [r0, #0]
	return true;
   31866:	2001      	movs	r0, #1
   31868:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   3186a:	428b      	cmp	r3, r1
   3186c:	d0fb      	beq.n	31866 <attr_read_group_cb+0xa>
		data->group = NULL;
   3186e:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   31870:	6891      	ldr	r1, [r2, #8]
   31872:	8a0b      	ldrh	r3, [r1, #16]
   31874:	3b04      	subs	r3, #4
   31876:	820b      	strh	r3, [r1, #16]
		data->group = NULL;
   31878:	6110      	str	r0, [r2, #16]
}
   3187a:	4770      	bx	lr

0003187c <find_info_cb>:
{
   3187c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   3187e:	6893      	ldr	r3, [r2, #8]
{
   31880:	4605      	mov	r5, r0
   31882:	460f      	mov	r7, r1
   31884:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   31886:	6816      	ldr	r6, [r2, #0]
	if (!data->rsp) {
   31888:	b963      	cbnz	r3, 318a4 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   3188a:	6850      	ldr	r0, [r2, #4]
   3188c:	2101      	movs	r1, #1
   3188e:	300c      	adds	r0, #12
   31890:	f7ec fe02 	bl	1e498 <net_buf_simple_add>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   31894:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   31896:	682b      	ldr	r3, [r5, #0]
   31898:	781b      	ldrb	r3, [r3, #0]
   3189a:	2b00      	cmp	r3, #0
   3189c:	bf14      	ite	ne
   3189e:	2302      	movne	r3, #2
   318a0:	2301      	moveq	r3, #1
   318a2:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   318a4:	68a3      	ldr	r3, [r4, #8]
   318a6:	781b      	ldrb	r3, [r3, #0]
   318a8:	2b01      	cmp	r3, #1
   318aa:	d003      	beq.n	318b4 <find_info_cb+0x38>
   318ac:	2b02      	cmp	r3, #2
   318ae:	d019      	beq.n	318e4 <find_info_cb+0x68>
   318b0:	2000      	movs	r0, #0
   318b2:	e016      	b.n	318e2 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   318b4:	682b      	ldr	r3, [r5, #0]
   318b6:	781b      	ldrb	r3, [r3, #0]
   318b8:	2b00      	cmp	r3, #0
   318ba:	d1f9      	bne.n	318b0 <find_info_cb+0x34>
   318bc:	6860      	ldr	r0, [r4, #4]
   318be:	2104      	movs	r1, #4
   318c0:	300c      	adds	r0, #12
   318c2:	f7ec fde9 	bl	1e498 <net_buf_simple_add>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   318c6:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   318c8:	8007      	strh	r7, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   318ca:	682a      	ldr	r2, [r5, #0]
   318cc:	68e3      	ldr	r3, [r4, #12]
   318ce:	8852      	ldrh	r2, [r2, #2]
   318d0:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   318d2:	6863      	ldr	r3, [r4, #4]
   318d4:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   318d6:	8a1b      	ldrh	r3, [r3, #16]
   318d8:	1ac0      	subs	r0, r0, r3
   318da:	2804      	cmp	r0, #4
		if (chan->chan.tx.mtu - data->buf->len >
   318dc:	bf94      	ite	ls
   318de:	2000      	movls	r0, #0
   318e0:	2001      	movhi	r0, #1
}
   318e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   318e4:	682b      	ldr	r3, [r5, #0]
   318e6:	781b      	ldrb	r3, [r3, #0]
   318e8:	2b02      	cmp	r3, #2
   318ea:	d1e1      	bne.n	318b0 <find_info_cb+0x34>
   318ec:	6860      	ldr	r0, [r4, #4]
   318ee:	2112      	movs	r1, #18
   318f0:	300c      	adds	r0, #12
   318f2:	f7ec fdd1 	bl	1e498 <net_buf_simple_add>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   318f6:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   318f8:	8007      	strh	r7, [r0, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   318fa:	682b      	ldr	r3, [r5, #0]
   318fc:	68e2      	ldr	r2, [r4, #12]
   318fe:	1c59      	adds	r1, r3, #1
   31900:	3202      	adds	r2, #2
   31902:	3311      	adds	r3, #17
   31904:	f851 0b04 	ldr.w	r0, [r1], #4
   31908:	4299      	cmp	r1, r3
   3190a:	f842 0b04 	str.w	r0, [r2], #4
   3190e:	d1f9      	bne.n	31904 <find_info_cb+0x88>
		if (chan->chan.tx.mtu - data->buf->len >
   31910:	6863      	ldr	r3, [r4, #4]
   31912:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   31914:	8a1b      	ldrh	r3, [r3, #16]
   31916:	1ac0      	subs	r0, r0, r3
   31918:	2812      	cmp	r0, #18
   3191a:	e7df      	b.n	318dc <find_info_cb+0x60>

0003191c <z_log_msg_static_create.constprop.0>:
   3191c:	2300      	movs	r3, #0
   3191e:	f7de bc89 	b.w	10234 <z_impl_z_log_msg_static_create>

00031922 <chan_req_send>:
{
   31922:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   31924:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   31926:	6888      	ldr	r0, [r1, #8]
   31928:	f7ff fef0 	bl	3170c <net_buf_frags_len>
   3192c:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
{
   3192e:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   31930:	4283      	cmp	r3, r0
   31932:	d30b      	bcc.n	3194c <chan_req_send+0x2a>
	req->buf = NULL;
   31934:	2600      	movs	r6, #0
	chan->req = req;
   31936:	63a9      	str	r1, [r5, #56]	; 0x38
	buf = req->buf;
   31938:	688f      	ldr	r7, [r1, #8]
	return chan_send(chan, buf);
   3193a:	4628      	mov	r0, r5
	req->buf = NULL;
   3193c:	608e      	str	r6, [r1, #8]
	return chan_send(chan, buf);
   3193e:	4639      	mov	r1, r7
   31940:	f7e6 fa96 	bl	17e70 <chan_send>
	if (err) {
   31944:	b108      	cbz	r0, 3194a <chan_req_send+0x28>
		req->buf = buf;
   31946:	60a7      	str	r7, [r4, #8]
		chan->req = NULL;
   31948:	63ae      	str	r6, [r5, #56]	; 0x38
}
   3194a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   3194c:	f06f 0079 	mvn.w	r0, #121	; 0x79
   31950:	e7fb      	b.n	3194a <chan_req_send+0x28>

00031952 <process_queue>:
{
   31952:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   31954:	2200      	movs	r2, #0
{
   31956:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   31958:	2300      	movs	r3, #0
   3195a:	4608      	mov	r0, r1
{
   3195c:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   3195e:	f001 fbe5 	bl	3312c <net_buf_get>
	if (buf) {
   31962:	4605      	mov	r5, r0
   31964:	b158      	cbz	r0, 3197e <process_queue+0x2c>
	return chan_send(chan, buf);
   31966:	4601      	mov	r1, r0
   31968:	4620      	mov	r0, r4
   3196a:	f7e6 fa81 	bl	17e70 <chan_send>
		if (err) {
   3196e:	4604      	mov	r4, r0
   31970:	b118      	cbz	r0, 3197a <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   31972:	4629      	mov	r1, r5
   31974:	4630      	mov	r0, r6
   31976:	f004 fbed 	bl	36154 <k_queue_prepend>
}
   3197a:	4620      	mov	r0, r4
   3197c:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   3197e:	f06f 0401 	mvn.w	r4, #1
   31982:	e7fa      	b.n	3197a <process_queue+0x28>

00031984 <bt_att_chan_send_rsp>:
{
   31984:	b538      	push	{r3, r4, r5, lr}
   31986:	4604      	mov	r4, r0
   31988:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   3198a:	f7e6 fa71 	bl	17e70 <chan_send>
	if (err) {
   3198e:	b130      	cbz	r0, 3199e <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   31990:	4629      	mov	r1, r5
   31992:	f104 003c 	add.w	r0, r4, #60	; 0x3c
}
   31996:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   3199a:	f7ec bbd1 	b.w	1e140 <net_buf_put>
}
   3199e:	bd38      	pop	{r3, r4, r5, pc}

000319a0 <att_chan_read>:
{
   319a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   319a4:	4680      	mov	r8, r0
   319a6:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   319a8:	4610      	mov	r0, r2
{
   319aa:	4699      	mov	r9, r3
   319ac:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   319ae:	f7ff fead 	bl	3170c <net_buf_frags_len>
   319b2:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
{
   319b6:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   319b8:	4283      	cmp	r3, r0
   319ba:	d97a      	bls.n	31ab2 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   319bc:	f8d8 3004 	ldr.w	r3, [r8, #4]
	frag = net_buf_frag_last(buf);
   319c0:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->chan.chan.conn;
   319c2:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   319c4:	f7ec fc3e 	bl	1e244 <net_buf_frag_last>
	size_t len, total = 0;
   319c8:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   319cc:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   319ce:	4630      	mov	r0, r6
   319d0:	f7ff fe9c 	bl	3170c <net_buf_frags_len>
   319d4:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   319d8:	f105 070c 	add.w	r7, r5, #12
   319dc:	1a24      	subs	r4, r4, r0
   319de:	4638      	mov	r0, r7
   319e0:	f001 fbc0 	bl	33164 <net_buf_simple_tailroom>
   319e4:	4284      	cmp	r4, r0
   319e6:	d211      	bcs.n	31a0c <att_chan_read+0x6c>
   319e8:	4630      	mov	r0, r6
   319ea:	f7ff fe8f 	bl	3170c <net_buf_frags_len>
   319ee:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   319f2:	1a24      	subs	r4, r4, r0
		if (!len) {
   319f4:	bb34      	cbnz	r4, 31a44 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   319f6:	7ab0      	ldrb	r0, [r6, #10]
   319f8:	f7ec fa7a 	bl	1def0 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   319fc:	2200      	movs	r2, #0
   319fe:	2300      	movs	r3, #0
   31a00:	f001 fb8f 	bl	33122 <net_buf_alloc_fixed>
			if (!frag) {
   31a04:	4605      	mov	r5, r0
   31a06:	b930      	cbnz	r0, 31a16 <att_chan_read+0x76>
	return total;
   31a08:	4657      	mov	r7, sl
   31a0a:	e02c      	b.n	31a66 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   31a0c:	4638      	mov	r0, r7
   31a0e:	f001 fba9 	bl	33164 <net_buf_simple_tailroom>
   31a12:	4604      	mov	r4, r0
   31a14:	e7ee      	b.n	319f4 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   31a16:	4601      	mov	r1, r0
   31a18:	4630      	mov	r0, r6
   31a1a:	f7ec fc59 	bl	1e2d0 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   31a1e:	4630      	mov	r0, r6
   31a20:	f7ff fe74 	bl	3170c <net_buf_frags_len>
   31a24:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   31a28:	f105 070c 	add.w	r7, r5, #12
   31a2c:	1a24      	subs	r4, r4, r0
   31a2e:	4638      	mov	r0, r7
   31a30:	f001 fb98 	bl	33164 <net_buf_simple_tailroom>
   31a34:	4284      	cmp	r4, r0
   31a36:	d21a      	bcs.n	31a6e <att_chan_read+0xce>
   31a38:	4630      	mov	r0, r6
   31a3a:	f7ff fe67 	bl	3170c <net_buf_frags_len>
   31a3e:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   31a42:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   31a44:	68e9      	ldr	r1, [r5, #12]
   31a46:	8a2a      	ldrh	r2, [r5, #16]
   31a48:	f8cd 9000 	str.w	r9, [sp]
   31a4c:	f8db 7004 	ldr.w	r7, [fp, #4]
   31a50:	440a      	add	r2, r1
   31a52:	9803      	ldr	r0, [sp, #12]
   31a54:	4659      	mov	r1, fp
   31a56:	b2a3      	uxth	r3, r4
   31a58:	47b8      	blx	r7
		if (read < 0) {
   31a5a:	1e07      	subs	r7, r0, #0
   31a5c:	da0c      	bge.n	31a78 <att_chan_read+0xd8>
				return total;
   31a5e:	f1ba 0f00 	cmp.w	sl, #0
   31a62:	bf18      	it	ne
   31a64:	4657      	movne	r7, sl
}
   31a66:	4638      	mov	r0, r7
   31a68:	b005      	add	sp, #20
   31a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31a6e:	4638      	mov	r0, r7
   31a70:	f001 fb78 	bl	33164 <net_buf_simple_tailroom>
   31a74:	4604      	mov	r4, r0
   31a76:	e7e5      	b.n	31a44 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   31a78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   31a7a:	b993      	cbnz	r3, 31aa2 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   31a7c:	4639      	mov	r1, r7
   31a7e:	f105 000c 	add.w	r0, r5, #12
   31a82:	f7ec fd09 	bl	1e498 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   31a86:	4630      	mov	r0, r6
   31a88:	f7ff fe40 	bl	3170c <net_buf_frags_len>
   31a8c:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   31a90:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   31a92:	4283      	cmp	r3, r0
		total += read;
   31a94:	44ba      	add	sl, r7
		offset += read;
   31a96:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   31a9a:	d9b5      	bls.n	31a08 <att_chan_read+0x68>
   31a9c:	42a7      	cmp	r7, r4
   31a9e:	d096      	beq.n	319ce <att_chan_read+0x2e>
   31aa0:	e7b2      	b.n	31a08 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   31aa2:	4639      	mov	r1, r7
   31aa4:	4628      	mov	r0, r5
   31aa6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   31aa8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   31aaa:	4798      	blx	r3
   31aac:	2800      	cmp	r0, #0
   31aae:	d1e5      	bne.n	31a7c <att_chan_read+0xdc>
   31ab0:	e7aa      	b.n	31a08 <att_chan_read+0x68>
		return 0;
   31ab2:	2700      	movs	r7, #0
   31ab4:	e7d7      	b.n	31a66 <att_chan_read+0xc6>

00031ab6 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   31ab6:	2200      	movs	r2, #0
	return list->head;
   31ab8:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   31aba:	b903      	cbnz	r3, 31abe <sys_slist_find_and_remove.isra.0+0x8>
   31abc:	4770      	bx	lr
   31abe:	428b      	cmp	r3, r1
   31ac0:	d10f      	bne.n	31ae2 <sys_slist_find_and_remove.isra.0+0x2c>
	return node->next;
   31ac2:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   31ac4:	b93a      	cbnz	r2, 31ad6 <sys_slist_find_and_remove.isra.0+0x20>
   31ac6:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   31ac8:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   31aca:	4291      	cmp	r1, r2
   31acc:	d100      	bne.n	31ad0 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   31ace:	6043      	str	r3, [r0, #4]
	parent->next = child;
   31ad0:	2300      	movs	r3, #0
   31ad2:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   31ad4:	4770      	bx	lr
	parent->next = child;
   31ad6:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   31ad8:	6843      	ldr	r3, [r0, #4]
   31ada:	4299      	cmp	r1, r3
	list->tail = node;
   31adc:	bf08      	it	eq
   31ade:	6042      	streq	r2, [r0, #4]
}
   31ae0:	e7f6      	b.n	31ad0 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   31ae2:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   31ae4:	681b      	ldr	r3, [r3, #0]
   31ae6:	e7e8      	b.n	31aba <sys_slist_find_and_remove.isra.0+0x4>

00031ae8 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   31ae8:	2301      	movs	r3, #1
   31aea:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   31aec:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   31aee:	e8d0 2fef 	ldaex	r2, [r0]
   31af2:	401a      	ands	r2, r3
   31af4:	e8c0 2fe1 	stlex	r1, r2, [r0]
   31af8:	2900      	cmp	r1, #0
   31afa:	d1f8      	bne.n	31aee <atomic_clear_bit+0x6>
}
   31afc:	4770      	bx	lr

00031afe <att_exec_write_req>:
static uint8_t att_exec_write_req(struct bt_att_chan *chan, struct net_buf *buf)
   31afe:	2006      	movs	r0, #6
   31b00:	4770      	bx	lr

00031b02 <read_cb>:
{
   31b02:	b573      	push	{r0, r1, r4, r5, r6, lr}
	data->err = 0x00;
   31b04:	2300      	movs	r3, #0
{
   31b06:	4605      	mov	r5, r0
	struct bt_att_chan *chan = data->chan;
   31b08:	6816      	ldr	r6, [r2, #0]
{
   31b0a:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   31b0c:	6870      	ldr	r0, [r6, #4]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   31b0e:	4629      	mov	r1, r5
	data->err = 0x00;
   31b10:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   31b12:	2295      	movs	r2, #149	; 0x95
   31b14:	f000 fde7 	bl	326e6 <bt_gatt_check_perm>
   31b18:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   31b1a:	b980      	cbnz	r0, 31b3e <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   31b1c:	e9cd 0000 	strd	r0, r0, [sp]
   31b20:	4629      	mov	r1, r5
   31b22:	4630      	mov	r0, r6
   31b24:	88a3      	ldrh	r3, [r4, #4]
   31b26:	68a2      	ldr	r2, [r4, #8]
   31b28:	f7ff ff3a 	bl	319a0 <att_chan_read>
	if (ret < 0) {
   31b2c:	2800      	cmp	r0, #0
   31b2e:	da09      	bge.n	31b44 <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   31b30:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   31b34:	bf32      	itee	cc
   31b36:	200e      	movcc	r0, #14
		return -err;
   31b38:	4240      	negcs	r0, r0
   31b3a:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(ret);
   31b3c:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   31b3e:	2000      	movs	r0, #0
}
   31b40:	b002      	add	sp, #8
   31b42:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   31b44:	2001      	movs	r0, #1
   31b46:	e7fb      	b.n	31b40 <read_cb+0x3e>

00031b48 <read_vl_cb>:
{
   31b48:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	data->err = 0x00;
   31b4c:	2300      	movs	r3, #0
{
   31b4e:	4606      	mov	r6, r0
	struct bt_att_chan *chan = data->chan;
   31b50:	f8d2 8000 	ldr.w	r8, [r2]
{
   31b54:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   31b56:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   31b5a:	4631      	mov	r1, r6
	data->err = 0x00;
   31b5c:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   31b5e:	2295      	movs	r2, #149	; 0x95
   31b60:	f000 fdc1 	bl	326e6 <bt_gatt_check_perm>
   31b64:	4605      	mov	r5, r0
   31b66:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   31b68:	b9e0      	cbnz	r0, 31ba4 <read_vl_cb+0x5c>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   31b6a:	68a0      	ldr	r0, [r4, #8]
   31b6c:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   31b70:	8a02      	ldrh	r2, [r0, #16]
   31b72:	1a9b      	subs	r3, r3, r2
   31b74:	2b01      	cmp	r3, #1
   31b76:	dd15      	ble.n	31ba4 <read_vl_cb+0x5c>
   31b78:	2102      	movs	r1, #2
   31b7a:	300c      	adds	r0, #12
   31b7c:	f7ec fc8c 	bl	1e498 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   31b80:	e9cd 5500 	strd	r5, r5, [sp]
   31b84:	4607      	mov	r7, r0
   31b86:	88a3      	ldrh	r3, [r4, #4]
   31b88:	4631      	mov	r1, r6
   31b8a:	4640      	mov	r0, r8
   31b8c:	68a2      	ldr	r2, [r4, #8]
   31b8e:	f7ff ff07 	bl	319a0 <att_chan_read>
	if (read < 0) {
   31b92:	1e03      	subs	r3, r0, #0
   31b94:	da0a      	bge.n	31bac <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   31b96:	f113 0fff 	cmn.w	r3, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   31b9a:	bf32      	itee	cc
   31b9c:	230e      	movcc	r3, #14
		return -err;
   31b9e:	425b      	negcs	r3, r3
   31ba0:	b2db      	uxtbcs	r3, r3
		data->err = err_to_att(read);
   31ba2:	7323      	strb	r3, [r4, #12]
		return BT_GATT_ITER_STOP;
   31ba4:	2000      	movs	r0, #0
}
   31ba6:	b002      	add	sp, #8
   31ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return BT_GATT_ITER_CONTINUE;
   31bac:	2001      	movs	r0, #1
	rsp->len = read;
   31bae:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   31bb0:	e7f9      	b.n	31ba6 <read_vl_cb+0x5e>

00031bb2 <bt_att_sent>:
{
   31bb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_att *att = chan->att;
   31bb4:	f850 4c04 	ldr.w	r4, [r0, #-4]
{
   31bb8:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   31bba:	1f07      	subs	r7, r0, #4
	atomic_clear_bit(chan->flags, ATT_PENDING_SENT);
   31bbc:	2104      	movs	r1, #4
   31bbe:	3030      	adds	r0, #48	; 0x30
   31bc0:	f7ff ff92 	bl	31ae8 <atomic_clear_bit>
	if (!att) {
   31bc4:	b304      	cbz	r4, 31c08 <bt_att_sent+0x56>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   31bc6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   31bc8:	b98b      	cbnz	r3, 31bee <bt_att_sent+0x3c>
   31bca:	6863      	ldr	r3, [r4, #4]
   31bcc:	b17b      	cbz	r3, 31bee <bt_att_sent+0x3c>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   31bce:	1d20      	adds	r0, r4, #4
   31bd0:	f7ff fd92 	bl	316f8 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   31bd4:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   31bd6:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   31bd8:	4638      	mov	r0, r7
   31bda:	f7ff fea2 	bl	31922 <chan_req_send>
   31bde:	2800      	cmp	r0, #0
   31be0:	da12      	bge.n	31c08 <bt_att_sent+0x56>
	return list->head;
   31be2:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   31be4:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   31be6:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   31be8:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   31bea:	b903      	cbnz	r3, 31bee <bt_att_sent+0x3c>
	list->tail = node;
   31bec:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   31bee:	4638      	mov	r0, r7
   31bf0:	f105 0138 	add.w	r1, r5, #56	; 0x38
   31bf4:	f7ff fead 	bl	31952 <process_queue>
	if (!err) {
   31bf8:	b130      	cbz	r0, 31c08 <bt_att_sent+0x56>
	(void)process_queue(chan, &att->tx_queue);
   31bfa:	4638      	mov	r0, r7
   31bfc:	f104 010c 	add.w	r1, r4, #12
}
   31c00:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   31c04:	f7ff bea5 	b.w	31952 <process_queue>
}
   31c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00031c0a <att_req_send_process>:
{
   31c0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   31c0e:	6a84      	ldr	r4, [r0, #40]	; 0x28
   31c10:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   31c12:	2c00      	cmp	r4, #0
   31c14:	d03a      	beq.n	31c8c <att_req_send_process+0x82>
	return node->next;
   31c16:	f854 6988 	ldr.w	r6, [r4], #-136
   31c1a:	b106      	cbz	r6, 31c1e <att_req_send_process+0x14>
   31c1c:	3e88      	subs	r6, #136	; 0x88
{
   31c1e:	2300      	movs	r3, #0
		req = get_first_req_matching_chan(&att->reqs, chan);
   31c20:	f108 0704 	add.w	r7, r8, #4
{
   31c24:	461d      	mov	r5, r3
   31c26:	e013      	b.n	31c50 <att_req_send_process+0x46>
		if (!req && prev &&
   31c28:	b1bb      	cbz	r3, 31c5a <att_req_send_process+0x50>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   31c2a:	2103      	movs	r1, #3
   31c2c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   31c30:	f7ff fd86 	bl	31740 <atomic_test_bit>
   31c34:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   31c36:	f103 0034 	add.w	r0, r3, #52	; 0x34
   31c3a:	f7ff fd81 	bl	31740 <atomic_test_bit>
		if (!req && prev &&
   31c3e:	4282      	cmp	r2, r0
   31c40:	d10b      	bne.n	31c5a <att_req_send_process+0x50>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   31c42:	b31e      	cbz	r6, 31c8c <att_req_send_process+0x82>
   31c44:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
   31c48:	b102      	cbz	r2, 31c4c <att_req_send_process+0x42>
   31c4a:	3a88      	subs	r2, #136	; 0x88
{
   31c4c:	4634      	mov	r4, r6
   31c4e:	4616      	mov	r6, r2
		if (chan->req) {
   31c50:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   31c52:	2a00      	cmp	r2, #0
   31c54:	d1f5      	bne.n	31c42 <att_req_send_process+0x38>
		if (!req && prev &&
   31c56:	2d00      	cmp	r5, #0
   31c58:	d0e6      	beq.n	31c28 <att_req_send_process+0x1e>
	sys_snode_t *node = sys_slist_get(reqs);
   31c5a:	4638      	mov	r0, r7
   31c5c:	f7ff fd4c 	bl	316f8 <sys_slist_get>
	if (node) {
   31c60:	4605      	mov	r5, r0
   31c62:	b908      	cbnz	r0, 31c68 <att_req_send_process+0x5e>
   31c64:	4623      	mov	r3, r4
   31c66:	e7ec      	b.n	31c42 <att_req_send_process+0x38>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   31c68:	4601      	mov	r1, r0
   31c6a:	4620      	mov	r0, r4
   31c6c:	f7e6 f98c 	bl	17f88 <bt_att_chan_req_send>
   31c70:	2800      	cmp	r0, #0
   31c72:	da0b      	bge.n	31c8c <att_req_send_process+0x82>
	return list->head;
   31c74:	f8d8 3004 	ldr.w	r3, [r8, #4]
	parent->next = child;
   31c78:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   31c7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   31c7e:	f8c8 5004 	str.w	r5, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   31c82:	2b00      	cmp	r3, #0
   31c84:	d1ee      	bne.n	31c64 <att_req_send_process+0x5a>
	list->tail = node;
   31c86:	f8c8 5008 	str.w	r5, [r8, #8]
}
   31c8a:	e7eb      	b.n	31c64 <att_req_send_process+0x5a>
}
   31c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00031c90 <bt_att_status>:
{
   31c90:	b538      	push	{r3, r4, r5, lr}
   31c92:	4605      	mov	r5, r0
   31c94:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   31c96:	2100      	movs	r1, #0
   31c98:	f7ff fd52 	bl	31740 <atomic_test_bit>
   31c9c:	b1b8      	cbz	r0, 31cce <bt_att_status+0x3e>
	if (!chan->att) {
   31c9e:	f855 0c04 	ldr.w	r0, [r5, #-4]
   31ca2:	b1a0      	cbz	r0, 31cce <bt_att_status+0x3e>
	if (chan->req) {
   31ca4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   31ca6:	b993      	cbnz	r3, 31cce <bt_att_status+0x3e>
	node = sys_slist_get(&chan->att->reqs);
   31ca8:	3004      	adds	r0, #4
   31caa:	f7ff fd25 	bl	316f8 <sys_slist_get>
	if (!node) {
   31cae:	4604      	mov	r4, r0
   31cb0:	b168      	cbz	r0, 31cce <bt_att_status+0x3e>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   31cb2:	4601      	mov	r1, r0
   31cb4:	1f28      	subs	r0, r5, #4
   31cb6:	f7e6 f967 	bl	17f88 <bt_att_chan_req_send>
   31cba:	2800      	cmp	r0, #0
   31cbc:	da07      	bge.n	31cce <bt_att_status+0x3e>
	sys_slist_prepend(&chan->att->reqs, node);
   31cbe:	f855 3c04 	ldr.w	r3, [r5, #-4]
	return list->head;
   31cc2:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   31cc4:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   31cc6:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   31cc8:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   31cca:	b902      	cbnz	r2, 31cce <bt_att_status+0x3e>
	list->tail = node;
   31ccc:	609c      	str	r4, [r3, #8]
}
   31cce:	bd38      	pop	{r3, r4, r5, pc}

00031cd0 <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   31cd0:	2301      	movs	r3, #1
{
   31cd2:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   31cd4:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   31cd8:	e8d0 3fef 	ldaex	r3, [r0]
   31cdc:	ea43 0201 	orr.w	r2, r3, r1
   31ce0:	e8c0 2fe4 	stlex	r4, r2, [r0]
   31ce4:	2c00      	cmp	r4, #0
   31ce6:	d1f7      	bne.n	31cd8 <atomic_test_and_set_bit+0x8>
	return (old & mask) != 0;
   31ce8:	4219      	tst	r1, r3
}
   31cea:	bf14      	ite	ne
   31cec:	2001      	movne	r0, #1
   31cee:	2000      	moveq	r0, #0
   31cf0:	bd10      	pop	{r4, pc}

00031cf2 <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   31cf2:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   31cf4:	6883      	ldr	r3, [r0, #8]
   31cf6:	699b      	ldr	r3, [r3, #24]
   31cf8:	b10b      	cbz	r3, 31cfe <att_sent+0xc>
		chan->ops->sent(chan);
   31cfa:	3004      	adds	r0, #4
   31cfc:	4718      	bx	r3
}
   31cfe:	4770      	bx	lr

00031d00 <att_tx_complete>:
{
   31d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   31d04:	4606      	mov	r6, r0
   31d06:	460d      	mov	r5, r1
	if (!err) {
   31d08:	4614      	mov	r4, r2
   31d0a:	b122      	cbz	r2, 31d16 <att_tx_complete+0x16>
}
   31d0c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	tx_meta_data_free(data);
   31d10:	4608      	mov	r0, r1
   31d12:	f7e5 bfcd 	b.w	17cb0 <tx_meta_data_free>
		att_sent(conn, user_data);
   31d16:	f7ff ffec 	bl	31cf2 <att_sent>
	bt_gatt_complete_func_t func = data->func;
   31d1a:	68af      	ldr	r7, [r5, #8]
	tx_meta_data_free(data);
   31d1c:	4628      	mov	r0, r5
	uint16_t attr_count = data->attr_count;
   31d1e:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   31d22:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   31d26:	f7e5 ffc3 	bl	17cb0 <tx_meta_data_free>
	if (!err && func) {
   31d2a:	b92f      	cbnz	r7, 31d38 <att_tx_complete+0x38>
}
   31d2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   31d30:	4649      	mov	r1, r9
   31d32:	4630      	mov	r0, r6
   31d34:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   31d36:	3401      	adds	r4, #1
   31d38:	b2a3      	uxth	r3, r4
   31d3a:	4543      	cmp	r3, r8
   31d3c:	d3f8      	bcc.n	31d30 <att_tx_complete+0x30>
   31d3e:	e7f5      	b.n	31d2c <att_tx_complete+0x2c>

00031d40 <att_req_sent>:
{
   31d40:	b510      	push	{r4, lr}
   31d42:	460c      	mov	r4, r1
	if (!err) {
   31d44:	b90a      	cbnz	r2, 31d4a <att_req_sent+0xa>
		att_sent(conn, user_data);
   31d46:	f7ff ffd4 	bl	31cf2 <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   31d4a:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   31d4c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   31d4e:	b12b      	cbz	r3, 31d5c <att_req_sent+0x1c>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   31d50:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   31d54:	2300      	movs	r3, #0
   31d56:	3058      	adds	r0, #88	; 0x58
   31d58:	f7f8 f9b8 	bl	2a0cc <k_work_reschedule>
	tx_meta_data_free(user_data);
   31d5c:	4620      	mov	r0, r4
}
   31d5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   31d62:	f7e5 bfa5 	b.w	17cb0 <tx_meta_data_free>

00031d66 <att_cfm_sent>:
{
   31d66:	b510      	push	{r4, lr}
   31d68:	460c      	mov	r4, r1
	if (!err) {
   31d6a:	b90a      	cbnz	r2, 31d70 <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   31d6c:	f7ff ffc1 	bl	31cf2 <att_sent>
		atomic_clear_bit(chan->flags, ATT_PENDING_CFM);
   31d70:	6820      	ldr	r0, [r4, #0]
   31d72:	2101      	movs	r1, #1
   31d74:	3034      	adds	r0, #52	; 0x34
   31d76:	f7ff feb7 	bl	31ae8 <atomic_clear_bit>
	tx_meta_data_free(data);
   31d7a:	4620      	mov	r0, r4
}
   31d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   31d80:	f7e5 bf96 	b.w	17cb0 <tx_meta_data_free>

00031d84 <att_rsp_sent>:
{
   31d84:	b510      	push	{r4, lr}
   31d86:	460c      	mov	r4, r1
	if (!err) {
   31d88:	b90a      	cbnz	r2, 31d8e <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   31d8a:	f7ff ffb2 	bl	31cf2 <att_sent>
		atomic_clear_bit(chan->flags, ATT_PENDING_RSP);
   31d8e:	6820      	ldr	r0, [r4, #0]
   31d90:	2100      	movs	r1, #0
   31d92:	3034      	adds	r0, #52	; 0x34
   31d94:	f7ff fea8 	bl	31ae8 <atomic_clear_bit>
	tx_meta_data_free(data);
   31d98:	4620      	mov	r0, r4
}
   31d9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   31d9e:	f7e5 bf87 	b.w	17cb0 <tx_meta_data_free>

00031da2 <att_indicate>:
{
   31da2:	b570      	push	{r4, r5, r6, lr}
   31da4:	4604      	mov	r4, r0
	return net_buf_simple_pull_le16(&buf->b);
   31da6:	f101 000c 	add.w	r0, r1, #12
   31daa:	460d      	mov	r5, r1
   31dac:	f001 f9ce 	bl	3314c <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   31db0:	6826      	ldr	r6, [r4, #0]
   31db2:	4601      	mov	r1, r0
   31db4:	8a2b      	ldrh	r3, [r5, #16]
   31db6:	68ea      	ldr	r2, [r5, #12]
   31db8:	6830      	ldr	r0, [r6, #0]
   31dba:	f000 fd66 	bl	3288a <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
   31dbe:	211e      	movs	r1, #30
   31dc0:	2200      	movs	r2, #0
   31dc2:	4620      	mov	r0, r4
   31dc4:	f7e6 faa6 	bl	18314 <bt_att_chan_create_pdu>
	if (!buf) {
   31dc8:	4601      	mov	r1, r0
   31dca:	b110      	cbz	r0, 31dd2 <att_indicate+0x30>
	bt_att_chan_send_rsp(chan, buf);
   31dcc:	4620      	mov	r0, r4
   31dce:	f7ff fdd9 	bl	31984 <bt_att_chan_send_rsp>
}
   31dd2:	2000      	movs	r0, #0
   31dd4:	bd70      	pop	{r4, r5, r6, pc}

00031dd6 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   31dd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   31dda:	4688      	mov	r8, r1
   31ddc:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   31dde:	2101      	movs	r1, #1
   31de0:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   31de2:	4605      	mov	r5, r0
   31de4:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   31de6:	f7e6 fa95 	bl	18314 <bt_att_chan_create_pdu>
	if (!buf) {
   31dea:	4604      	mov	r4, r0
   31dec:	b170      	cbz	r0, 31e0c <send_err_rsp.part.0+0x36>
	return net_buf_simple_add(&buf->b, len);
   31dee:	2104      	movs	r1, #4
   31df0:	300c      	adds	r0, #12
   31df2:	f7ec fb51 	bl	1e498 <net_buf_simple_add>
	rsp->request = req;
   31df6:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
   31dfa:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
   31dfe:	70c6      	strb	r6, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   31e00:	4621      	mov	r1, r4
   31e02:	4628      	mov	r0, r5
}
   31e04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   31e08:	f7ff bdbc 	b.w	31984 <bt_att_chan_send_rsp>
}
   31e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00031e10 <att_write_req>:
{
   31e10:	b537      	push	{r0, r1, r2, r4, r5, lr}
   31e12:	460c      	mov	r4, r1
   31e14:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   31e16:	f101 000c 	add.w	r0, r1, #12
   31e1a:	f001 f997 	bl	3314c <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   31e1e:	8a22      	ldrh	r2, [r4, #16]
   31e20:	4603      	mov	r3, r0
   31e22:	9201      	str	r2, [sp, #4]
   31e24:	68e2      	ldr	r2, [r4, #12]
   31e26:	2112      	movs	r1, #18
   31e28:	9200      	str	r2, [sp, #0]
   31e2a:	4628      	mov	r0, r5
   31e2c:	2213      	movs	r2, #19
   31e2e:	f7e6 fb95 	bl	1855c <att_write_rsp.constprop.0>
}
   31e32:	b003      	add	sp, #12
   31e34:	bd30      	pop	{r4, r5, pc}

00031e36 <att_write_cmd>:
{
   31e36:	b537      	push	{r0, r1, r2, r4, r5, lr}
   31e38:	460c      	mov	r4, r1
   31e3a:	4605      	mov	r5, r0
   31e3c:	f101 000c 	add.w	r0, r1, #12
   31e40:	f001 f984 	bl	3314c <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   31e44:	8a22      	ldrh	r2, [r4, #16]
   31e46:	4603      	mov	r3, r0
   31e48:	9201      	str	r2, [sp, #4]
   31e4a:	68e2      	ldr	r2, [r4, #12]
   31e4c:	4628      	mov	r0, r5
   31e4e:	9200      	str	r2, [sp, #0]
   31e50:	2200      	movs	r2, #0
   31e52:	4611      	mov	r1, r2
   31e54:	f7e6 fb82 	bl	1855c <att_write_rsp.constprop.0>
}
   31e58:	b003      	add	sp, #12
   31e5a:	bd30      	pop	{r4, r5, pc}

00031e5c <att_read_blob_req>:
{
   31e5c:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   31e5e:	68ca      	ldr	r2, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   31e60:	210c      	movs	r1, #12
   31e62:	8813      	ldrh	r3, [r2, #0]
   31e64:	8852      	ldrh	r2, [r2, #2]
   31e66:	9200      	str	r2, [sp, #0]
   31e68:	220d      	movs	r2, #13
   31e6a:	f7e6 fd3b 	bl	188e4 <att_read_rsp>
}
   31e6e:	b003      	add	sp, #12
   31e70:	f85d fb04 	ldr.w	pc, [sp], #4

00031e74 <att_read_req>:
{
   31e74:	b507      	push	{r0, r1, r2, lr}
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   31e76:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(req->handle);
   31e78:	68cb      	ldr	r3, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   31e7a:	210a      	movs	r1, #10
   31e7c:	881b      	ldrh	r3, [r3, #0]
   31e7e:	9200      	str	r2, [sp, #0]
   31e80:	220b      	movs	r2, #11
   31e82:	f7e6 fd2f 	bl	188e4 <att_read_rsp>
}
   31e86:	b003      	add	sp, #12
   31e88:	f85d fb04 	ldr.w	pc, [sp], #4

00031e8c <att_mtu_req>:
{
   31e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   31e90:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   31e92:	f850 2b34 	ldr.w	r2, [r0], #52
{
   31e96:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   31e98:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   31e9a:	6816      	ldr	r6, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   31e9c:	f7ff fc50 	bl	31740 <atomic_test_bit>
   31ea0:	4604      	mov	r4, r0
   31ea2:	bb40      	cbnz	r0, 31ef6 <att_mtu_req+0x6a>
	mtu_client = sys_le16_to_cpu(req->mtu);
   31ea4:	68db      	ldr	r3, [r3, #12]
   31ea6:	881f      	ldrh	r7, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   31ea8:	2f16      	cmp	r7, #22
   31eaa:	d926      	bls.n	31efa <att_mtu_req+0x6e>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   31eac:	2202      	movs	r2, #2
   31eae:	4630      	mov	r0, r6
   31eb0:	f7e6 fbb8 	bl	18624 <bt_att_create_pdu>
	if (!pdu) {
   31eb4:	4680      	mov	r8, r0
   31eb6:	b310      	cbz	r0, 31efe <att_mtu_req+0x72>
	return net_buf_simple_add(&buf->b, len);
   31eb8:	2102      	movs	r1, #2
   31eba:	300c      	adds	r0, #12
   31ebc:	f7ec faec 	bl	1e498 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   31ec0:	2364      	movs	r3, #100	; 0x64
   31ec2:	7044      	strb	r4, [r0, #1]
   31ec4:	7003      	strb	r3, [r0, #0]
	bt_att_chan_send_rsp(chan, pdu);
   31ec6:	4641      	mov	r1, r8
   31ec8:	4628      	mov	r0, r5
   31eca:	f7ff fd5b 	bl	31984 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   31ece:	2f64      	cmp	r7, #100	; 0x64
   31ed0:	bf28      	it	cs
   31ed2:	2764      	movcs	r7, #100	; 0x64
   31ed4:	3604      	adds	r6, #4
   31ed6:	836f      	strh	r7, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   31ed8:	856f      	strh	r7, [r5, #42]	; 0x2a
   31eda:	e8d6 3fef 	ldaex	r3, [r6]
   31ede:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   31ee2:	e8c6 3fe2 	stlex	r2, r3, [r6]
   31ee6:	2a00      	cmp	r2, #0
   31ee8:	d1f7      	bne.n	31eda <att_mtu_req+0x4e>
	att_chan_mtu_updated(chan);
   31eea:	4628      	mov	r0, r5
   31eec:	f7ff fc47 	bl	3177e <att_chan_mtu_updated>
	return 0;
   31ef0:	4620      	mov	r0, r4
}
   31ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   31ef6:	2006      	movs	r0, #6
   31ef8:	e7fb      	b.n	31ef2 <att_mtu_req+0x66>
		return BT_ATT_ERR_INVALID_PDU;
   31efa:	2004      	movs	r0, #4
   31efc:	e7f9      	b.n	31ef2 <att_mtu_req+0x66>
		return BT_ATT_ERR_UNLIKELY;
   31efe:	200e      	movs	r0, #14
   31f00:	e7f7      	b.n	31ef2 <att_mtu_req+0x66>

00031f02 <bt_att_get_mtu>:
{
   31f02:	b508      	push	{r3, lr}
	att = att_get(conn);
   31f04:	f7e6 f882 	bl	1800c <att_get>
	if (!att) {
   31f08:	b138      	cbz	r0, 31f1a <bt_att_get_mtu+0x18>
	return list->head;
   31f0a:	6a80      	ldr	r0, [r0, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   31f0c:	b128      	cbz	r0, 31f1a <bt_att_get_mtu+0x18>
	return node->next;
   31f0e:	6803      	ldr	r3, [r0, #0]
   31f10:	b103      	cbz	r3, 31f14 <bt_att_get_mtu+0x12>
   31f12:	3b88      	subs	r3, #136	; 0x88
		if (chan->chan.tx.mtu > mtu) {
   31f14:	f830 0c5e 	ldrh.w	r0, [r0, #-94]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   31f18:	b903      	cbnz	r3, 31f1c <bt_att_get_mtu+0x1a>
}
   31f1a:	bd08      	pop	{r3, pc}
   31f1c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   31f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
   31f22:	4298      	cmp	r0, r3
   31f24:	bf38      	it	cc
   31f26:	4618      	movcc	r0, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   31f28:	2a00      	cmp	r2, #0
   31f2a:	d0f6      	beq.n	31f1a <bt_att_get_mtu+0x18>
   31f2c:	f1a2 0388 	sub.w	r3, r2, #136	; 0x88
   31f30:	e7f4      	b.n	31f1c <bt_att_get_mtu+0x1a>

00031f32 <att_handle_find_info_rsp>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   31f32:	8a0a      	ldrh	r2, [r1, #16]
   31f34:	2300      	movs	r3, #0
   31f36:	68c9      	ldr	r1, [r1, #12]
   31f38:	f7e6 be7e 	b.w	18c38 <att_handle_rsp>

00031f3c <att_handle_find_type_rsp>:
static uint8_t att_handle_find_type_rsp(struct bt_att_chan *chan,
   31f3c:	f7ff bff9 	b.w	31f32 <att_handle_find_info_rsp>

00031f40 <att_handle_read_type_rsp>:
static uint8_t att_handle_read_type_rsp(struct bt_att_chan *chan,
   31f40:	f7ff bff7 	b.w	31f32 <att_handle_find_info_rsp>

00031f44 <att_handle_read_rsp>:
static uint8_t att_handle_read_rsp(struct bt_att_chan *chan,
   31f44:	f7ff bff5 	b.w	31f32 <att_handle_find_info_rsp>

00031f48 <att_handle_read_blob_rsp>:
static uint8_t att_handle_read_blob_rsp(struct bt_att_chan *chan,
   31f48:	f7ff bff3 	b.w	31f32 <att_handle_find_info_rsp>

00031f4c <att_handle_read_mult_rsp>:
static uint8_t att_handle_read_mult_rsp(struct bt_att_chan *chan,
   31f4c:	f7ff bff1 	b.w	31f32 <att_handle_find_info_rsp>

00031f50 <att_handle_read_mult_vl_rsp>:
static uint8_t att_handle_read_mult_vl_rsp(struct bt_att_chan *chan,
   31f50:	f7ff bfef 	b.w	31f32 <att_handle_find_info_rsp>

00031f54 <att_handle_read_group_rsp>:
static uint8_t att_handle_read_group_rsp(struct bt_att_chan *chan,
   31f54:	f7ff bfed 	b.w	31f32 <att_handle_find_info_rsp>

00031f58 <att_handle_write_rsp>:
static uint8_t att_handle_write_rsp(struct bt_att_chan *chan,
   31f58:	f7ff bfeb 	b.w	31f32 <att_handle_find_info_rsp>

00031f5c <att_handle_prepare_write_rsp>:
static uint8_t att_handle_prepare_write_rsp(struct bt_att_chan *chan,
   31f5c:	f7ff bfe9 	b.w	31f32 <att_handle_find_info_rsp>

00031f60 <att_handle_exec_write_rsp>:
static uint8_t att_handle_exec_write_rsp(struct bt_att_chan *chan,
   31f60:	f7ff bfe7 	b.w	31f32 <att_handle_find_info_rsp>

00031f64 <att_confirm>:
static uint8_t att_confirm(struct bt_att_chan *chan, struct net_buf *buf)
   31f64:	f7ff bfe5 	b.w	31f32 <att_handle_find_info_rsp>

00031f68 <att_mtu_rsp>:
{
   31f68:	b570      	push	{r4, r5, r6, lr}
	rsp = (void *)buf->data;
   31f6a:	68ce      	ldr	r6, [r1, #12]
{
   31f6c:	4604      	mov	r4, r0
	mtu = sys_le16_to_cpu(rsp->mtu);
   31f6e:	8833      	ldrh	r3, [r6, #0]
{
   31f70:	460d      	mov	r5, r1
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   31f72:	2b16      	cmp	r3, #22
   31f74:	d806      	bhi.n	31f84 <att_mtu_rsp+0x1c>
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   31f76:	2200      	movs	r2, #0
   31f78:	2304      	movs	r3, #4
   31f7a:	4611      	mov	r1, r2
}
   31f7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(chan, rsp, buf->len, 0);
   31f80:	f7e6 be5a 	b.w	18c38 <att_handle_rsp>
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   31f84:	2b64      	cmp	r3, #100	; 0x64
   31f86:	bf28      	it	cs
   31f88:	2364      	movcs	r3, #100	; 0x64
   31f8a:	8343      	strh	r3, [r0, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   31f8c:	8543      	strh	r3, [r0, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   31f8e:	f7ff fbf6 	bl	3177e <att_chan_mtu_updated>
	return att_handle_rsp(chan, rsp, buf->len, 0);
   31f92:	2300      	movs	r3, #0
   31f94:	4631      	mov	r1, r6
   31f96:	4620      	mov	r0, r4
   31f98:	8a2a      	ldrh	r2, [r5, #16]
   31f9a:	e7ef      	b.n	31f7c <att_mtu_rsp+0x14>

00031f9c <bt_att_encrypt_change>:
{
   31f9c:	b570      	push	{r4, r5, r6, lr}
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   31f9e:	4606      	mov	r6, r0
	if (!att_chan->att) {
   31fa0:	f850 3c04 	ldr.w	r3, [r0, #-4]
{
   31fa4:	4604      	mov	r4, r0
	struct bt_conn *conn = le_chan->chan.conn;
   31fa6:	f856 5904 	ldr.w	r5, [r6], #-4
	if (!att_chan->att) {
   31faa:	2b00      	cmp	r3, #0
   31fac:	d036      	beq.n	3201c <bt_att_encrypt_change+0x80>
	if (hci_status) {
   31fae:	b139      	cbz	r1, 31fc0 <bt_att_encrypt_change+0x24>
		if (att_chan->req && att_chan->req->retrying) {
   31fb0:	6b43      	ldr	r3, [r0, #52]	; 0x34
   31fb2:	2b00      	cmp	r3, #0
   31fb4:	d032      	beq.n	3201c <bt_att_encrypt_change+0x80>
   31fb6:	7c1b      	ldrb	r3, [r3, #16]
   31fb8:	07da      	lsls	r2, r3, #31
   31fba:	d52f      	bpl.n	3201c <bt_att_encrypt_change+0x80>
		return BT_ATT_ERR_AUTHENTICATION;
   31fbc:	2305      	movs	r3, #5
   31fbe:	e020      	b.n	32002 <bt_att_encrypt_change+0x66>
	bt_gatt_encrypt_change(conn);
   31fc0:	4628      	mov	r0, r5
   31fc2:	f7e9 fc93 	bl	1b8ec <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   31fc6:	7a6b      	ldrb	r3, [r5, #9]
   31fc8:	2b01      	cmp	r3, #1
   31fca:	d027      	beq.n	3201c <bt_att_encrypt_change+0x80>
	if (!(att_chan->req && att_chan->req->retrying)) {
   31fcc:	6b65      	ldr	r5, [r4, #52]	; 0x34
   31fce:	b32d      	cbz	r5, 3201c <bt_att_encrypt_change+0x80>
   31fd0:	7c2b      	ldrb	r3, [r5, #16]
   31fd2:	07db      	lsls	r3, r3, #31
   31fd4:	d522      	bpl.n	3201c <bt_att_encrypt_change+0x80>
	if (!req->encode) {
   31fd6:	68eb      	ldr	r3, [r5, #12]
   31fd8:	2b00      	cmp	r3, #0
   31fda:	d0ef      	beq.n	31fbc <bt_att_encrypt_change+0x20>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   31fdc:	4630      	mov	r0, r6
   31fde:	696a      	ldr	r2, [r5, #20]
   31fe0:	7c69      	ldrb	r1, [r5, #17]
   31fe2:	f7e6 f997 	bl	18314 <bt_att_chan_create_pdu>
	if (!buf) {
   31fe6:	4604      	mov	r4, r0
   31fe8:	b150      	cbz	r0, 32000 <bt_att_encrypt_change+0x64>
	if (req->encode(buf, req->len, req->user_data)) {
   31fea:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
   31fee:	68eb      	ldr	r3, [r5, #12]
   31ff0:	4798      	blx	r3
   31ff2:	b168      	cbz	r0, 32010 <bt_att_encrypt_change+0x74>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   31ff4:	69a0      	ldr	r0, [r4, #24]
   31ff6:	f7e5 fe5b 	bl	17cb0 <tx_meta_data_free>
		net_buf_unref(buf);
   31ffa:	4620      	mov	r0, r4
   31ffc:	f7ec f8c6 	bl	1e18c <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   32000:	230e      	movs	r3, #14
		att_handle_rsp(att_chan, NULL, 0, err);
   32002:	2200      	movs	r2, #0
   32004:	4630      	mov	r0, r6
}
   32006:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   3200a:	4611      	mov	r1, r2
   3200c:	f7e6 be14 	b.w	18c38 <att_handle_rsp>
	if (chan_send(att_chan, buf)) {
   32010:	4621      	mov	r1, r4
   32012:	4630      	mov	r0, r6
   32014:	f7e5 ff2c 	bl	17e70 <chan_send>
   32018:	2800      	cmp	r0, #0
   3201a:	d1eb      	bne.n	31ff4 <bt_att_encrypt_change+0x58>
}
   3201c:	bd70      	pop	{r4, r5, r6, pc}

0003201e <bt_att_find_req_by_user_data>:

struct bt_att_req *bt_att_find_req_by_user_data(struct bt_conn *conn, const void *user_data)
{
   3201e:	b510      	push	{r4, lr}
   32020:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan;
	struct bt_att_req *req;

	att = att_get(conn);
   32022:	f7e5 fff3 	bl	1800c <att_get>
	if (!att) {
   32026:	b190      	cbz	r0, 3204e <bt_att_find_req_by_user_data+0x30>
	return list->head;
   32028:	6a83      	ldr	r3, [r0, #40]	; 0x28
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   3202a:	b143      	cbz	r3, 3203e <bt_att_find_req_by_user_data+0x20>
		if (chan->req->user_data == user_data) {
   3202c:	f853 2c50 	ldr.w	r2, [r3, #-80]
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   32030:	3b88      	subs	r3, #136	; 0x88
		if (chan->req->user_data == user_data) {
   32032:	6991      	ldr	r1, [r2, #24]
   32034:	42a1      	cmp	r1, r4
   32036:	d009      	beq.n	3204c <bt_att_find_req_by_user_data+0x2e>
	return node->next;
   32038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   3203c:	e7f5      	b.n	3202a <bt_att_find_req_by_user_data+0xc>
	return list->head;
   3203e:	6840      	ldr	r0, [r0, #4]
			return chan->req;
		}
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->reqs, req, node) {
   32040:	b128      	cbz	r0, 3204e <bt_att_find_req_by_user_data+0x30>
		if (req->user_data == user_data) {
   32042:	6983      	ldr	r3, [r0, #24]
   32044:	42a3      	cmp	r3, r4
   32046:	d002      	beq.n	3204e <bt_att_find_req_by_user_data+0x30>
	return node->next;
   32048:	6800      	ldr	r0, [r0, #0]
   3204a:	e7f9      	b.n	32040 <bt_att_find_req_by_user_data+0x22>
		if (chan->req->user_data == user_data) {
   3204c:	4610      	mov	r0, r2
			return req;
		}
	}

	return NULL;
}
   3204e:	bd10      	pop	{r4, pc}

00032050 <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   32050:	2001      	movs	r0, #1
   32052:	4770      	bx	lr

00032054 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   32054:	b510      	push	{r4, lr}
	struct bt_att *att = att_get(conn);
   32056:	f7e5 ffd9 	bl	1800c <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   3205a:	b150      	cbz	r0, 32072 <bt_att_clear_out_of_sync_sent+0x1e>
	return list->head;
   3205c:	6a84      	ldr	r4, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   3205e:	b144      	cbz	r4, 32072 <bt_att_clear_out_of_sync_sent+0x1e>
   32060:	3c88      	subs	r4, #136	; 0x88
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
   32062:	f104 0034 	add.w	r0, r4, #52	; 0x34
   32066:	2105      	movs	r1, #5
   32068:	f7ff fd3e 	bl	31ae8 <atomic_clear_bit>
	return node->next;
   3206c:	f8d4 4088 	ldr.w	r4, [r4, #136]	; 0x88
   32070:	e7f5      	b.n	3205e <bt_att_clear_out_of_sync_sent+0xa>
	}
}
   32072:	bd10      	pop	{r4, pc}

00032074 <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   32074:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   32076:	2104      	movs	r1, #4
   32078:	f7ff fb34 	bl	316e4 <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   3207c:	b128      	cbz	r0, 3208a <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   3207e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   32082:	2105      	movs	r1, #5
   32084:	3030      	adds	r0, #48	; 0x30
   32086:	f7ff bb5b 	b.w	31740 <atomic_test_bit>
}
   3208a:	bd08      	pop	{r3, pc}

0003208c <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   3208c:	6980      	ldr	r0, [r0, #24]

	data->func = func;
	data->user_data = user_data;
   3208e:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   32092:	2201      	movs	r2, #1
	data->chan_opt = chan_opt;
   32094:	7403      	strb	r3, [r0, #16]
	data->attr_count = 1;
   32096:	8082      	strh	r2, [r0, #4]
}
   32098:	4770      	bx	lr

0003209a <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   3209a:	6010      	str	r0, [r2, #0]
}
   3209c:	2000      	movs	r0, #0
   3209e:	4770      	bx	lr

000320a0 <gatt_ccc_changed>:
{
   320a0:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   320a2:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   320a4:	895a      	ldrh	r2, [r3, #10]
   320a6:	428a      	cmp	r2, r1
   320a8:	d003      	beq.n	320b2 <gatt_ccc_changed+0x12>
		ccc->value = value;
   320aa:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   320ac:	68db      	ldr	r3, [r3, #12]
   320ae:	b103      	cbz	r3, 320b2 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   320b0:	4718      	bx	r3
}
   320b2:	4770      	bx	lr

000320b4 <gatt_indicate_rsp>:
{
   320b4:	b510      	push	{r4, lr}
   320b6:	9c02      	ldr	r4, [sp, #8]
   320b8:	460a      	mov	r2, r1
	if (params->func) {
   320ba:	68a3      	ldr	r3, [r4, #8]
   320bc:	b10b      	cbz	r3, 320c2 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   320be:	4621      	mov	r1, r4
   320c0:	4798      	blx	r3
	params->_ref--;
   320c2:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   320c4:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   320c6:	3b01      	subs	r3, #1
   320c8:	b2db      	uxtb	r3, r3
   320ca:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   320cc:	b122      	cbz	r2, 320d8 <gatt_indicate_rsp+0x24>
   320ce:	b91b      	cbnz	r3, 320d8 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   320d0:	4620      	mov	r0, r4
}
   320d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   320d6:	4710      	bx	r2
}
   320d8:	bd10      	pop	{r4, pc}

000320da <match_uuid>:
	data->attr = attr;
   320da:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   320dc:	8091      	strh	r1, [r2, #4]
}
   320de:	2000      	movs	r0, #0
   320e0:	4770      	bx	lr

000320e2 <gatt_mtu_rsp>:
{
   320e2:	9a00      	ldr	r2, [sp, #0]
	params->func(conn, err, params);
   320e4:	6813      	ldr	r3, [r2, #0]
   320e6:	4718      	bx	r3

000320e8 <gatt_write_rsp>:
{
   320e8:	9a00      	ldr	r2, [sp, #0]
	params->func(conn, err, params);
   320ea:	6813      	ldr	r3, [r2, #0]
   320ec:	4718      	bx	r3

000320ee <ccc_set_cb>:
}
   320ee:	2000      	movs	r0, #0
   320f0:	4770      	bx	lr

000320f2 <gen_hash_m>:
{
   320f2:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   320f4:	6807      	ldr	r7, [r0, #0]
{
   320f6:	4606      	mov	r6, r0
	if (attr->uuid->type != BT_UUID_TYPE_16)
   320f8:	783d      	ldrb	r5, [r7, #0]
{
   320fa:	4614      	mov	r4, r2
   320fc:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   320fe:	b9dd      	cbnz	r5, 32138 <gen_hash_m+0x46>
	switch (u16->val) {
   32100:	887b      	ldrh	r3, [r7, #2]
   32102:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   32106:	d004      	beq.n	32112 <gen_hash_m+0x20>
   32108:	d810      	bhi.n	3212c <gen_hash_m+0x3a>
   3210a:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   3210e:	2b03      	cmp	r3, #3
   32110:	d812      	bhi.n	32138 <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   32112:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   32116:	2202      	movs	r2, #2
   32118:	4620      	mov	r0, r4
   3211a:	f10d 010a 	add.w	r1, sp, #10
   3211e:	f7fe fadb 	bl	306d8 <tc_cmac_update>
   32122:	b968      	cbnz	r0, 32140 <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   32124:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   32128:	65a2      	str	r2, [r4, #88]	; 0x58
   3212a:	e006      	b.n	3213a <gen_hash_m+0x48>
	switch (u16->val) {
   3212c:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   32130:	33ff      	adds	r3, #255	; 0xff
   32132:	b29b      	uxth	r3, r3
   32134:	2b04      	cmp	r3, #4
   32136:	d91e      	bls.n	32176 <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   32138:	2501      	movs	r5, #1
}
   3213a:	4628      	mov	r0, r5
   3213c:	b009      	add	sp, #36	; 0x24
   3213e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   32140:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   32142:	2202      	movs	r2, #2
   32144:	4620      	mov	r0, r4
   32146:	f10d 010a 	add.w	r1, sp, #10
		value = sys_cpu_to_le16(u16->val);
   3214a:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   3214e:	f7fe fac3 	bl	306d8 <tc_cmac_update>
   32152:	2800      	cmp	r0, #0
   32154:	d0e6      	beq.n	32124 <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   32156:	2000      	movs	r0, #0
   32158:	9000      	str	r0, [sp, #0]
   3215a:	aa03      	add	r2, sp, #12
   3215c:	2313      	movs	r3, #19
   3215e:	4631      	mov	r1, r6
   32160:	6877      	ldr	r7, [r6, #4]
   32162:	47b8      	blx	r7
		if (len < 0) {
   32164:	1e02      	subs	r2, r0, #0
   32166:	dbdf      	blt.n	32128 <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   32168:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   3216a:	4620      	mov	r0, r4
   3216c:	f7fe fab4 	bl	306d8 <tc_cmac_update>
   32170:	2800      	cmp	r0, #0
   32172:	d1e1      	bne.n	32138 <gen_hash_m+0x46>
   32174:	e7d6      	b.n	32124 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   32176:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   3217a:	2202      	movs	r2, #2
   3217c:	4620      	mov	r0, r4
   3217e:	f10d 010a 	add.w	r1, sp, #10
   32182:	f7fe faa9 	bl	306d8 <tc_cmac_update>
   32186:	2800      	cmp	r0, #0
   32188:	d0cc      	beq.n	32124 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   3218a:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   3218c:	2202      	movs	r2, #2
		value = sys_cpu_to_le16(u16->val);
   3218e:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   32192:	f10d 010a 	add.w	r1, sp, #10
   32196:	e7e8      	b.n	3216a <gen_hash_m+0x78>

00032198 <bt_addr_le_eq>:
   32198:	2207      	movs	r2, #7
{
   3219a:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   3219c:	f004 f9b4 	bl	36508 <memcmp>
}
   321a0:	fab0 f080 	clz	r0, r0
   321a4:	0940      	lsrs	r0, r0, #5
   321a6:	bd08      	pop	{r3, pc}

000321a8 <ccc_find_cfg>:
{
   321a8:	b510      	push	{r4, lr}
		if (id == ccc->cfg[i].id &&
   321aa:	7803      	ldrb	r3, [r0, #0]
{
   321ac:	4604      	mov	r4, r0
		if (id == ccc->cfg[i].id &&
   321ae:	4293      	cmp	r3, r2
   321b0:	d107      	bne.n	321c2 <ccc_find_cfg+0x1a>
		    bt_addr_le_eq(&ccc->cfg[i].peer, addr)) {
   321b2:	3001      	adds	r0, #1
   321b4:	f7ff fff0 	bl	32198 <bt_addr_le_eq>
			return &ccc->cfg[i];
   321b8:	2800      	cmp	r0, #0
   321ba:	bf14      	ite	ne
   321bc:	4620      	movne	r0, r4
   321be:	2000      	moveq	r0, #0
}
   321c0:	bd10      	pop	{r4, pc}
	return NULL;
   321c2:	2000      	movs	r0, #0
   321c4:	e7fc      	b.n	321c0 <ccc_find_cfg+0x18>

000321c6 <atomic_or>:
{
   321c6:	4603      	mov	r3, r0
   321c8:	b510      	push	{r4, lr}
}
   321ca:	e8d3 0fef 	ldaex	r0, [r3]
   321ce:	ea40 0201 	orr.w	r2, r0, r1
   321d2:	e8c3 2fe4 	stlex	r4, r2, [r3]
   321d6:	2c00      	cmp	r4, #0
   321d8:	d1f7      	bne.n	321ca <atomic_or+0x4>
   321da:	bd10      	pop	{r4, pc}

000321dc <atomic_and>:
{
   321dc:	4603      	mov	r3, r0
   321de:	b510      	push	{r4, lr}
}
   321e0:	e8d3 0fef 	ldaex	r0, [r3]
   321e4:	ea00 0201 	and.w	r2, r0, r1
   321e8:	e8c3 2fe4 	stlex	r4, r2, [r3]
   321ec:	2c00      	cmp	r4, #0
   321ee:	d1f7      	bne.n	321e0 <atomic_and+0x4>
   321f0:	bd10      	pop	{r4, pc}

000321f2 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   321f2:	e8d0 0faf 	lda	r0, [r0]
}
   321f6:	4770      	bx	lr

000321f8 <gatt_exchange_mtu_encode>:
{
   321f8:	b508      	push	{r3, lr}
   321fa:	2102      	movs	r1, #2
   321fc:	300c      	adds	r0, #12
   321fe:	f7ec f94b 	bl	1e498 <net_buf_simple_add>
	req->mtu = sys_cpu_to_le16(mtu);
   32202:	2264      	movs	r2, #100	; 0x64
   32204:	4603      	mov	r3, r0
   32206:	2000      	movs	r0, #0
   32208:	701a      	strb	r2, [r3, #0]
   3220a:	7058      	strb	r0, [r3, #1]
}
   3220c:	bd08      	pop	{r3, pc}

0003220e <read_included_uuid_encode>:
{
   3220e:	b510      	push	{r4, lr}
   32210:	4614      	mov	r4, r2
   32212:	2102      	movs	r1, #2
   32214:	300c      	adds	r0, #12
   32216:	f7ec f93f 	bl	1e498 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
   3221a:	8963      	ldrh	r3, [r4, #10]
   3221c:	8003      	strh	r3, [r0, #0]
}
   3221e:	2000      	movs	r0, #0
   32220:	bd10      	pop	{r4, pc}

00032222 <gatt_find_info_encode>:
{
   32222:	b510      	push	{r4, lr}
   32224:	4614      	mov	r4, r2
   32226:	2104      	movs	r1, #4
   32228:	300c      	adds	r0, #12
   3222a:	f7ec f935 	bl	1e498 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   3222e:	8923      	ldrh	r3, [r4, #8]
   32230:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   32232:	89e3      	ldrh	r3, [r4, #14]
   32234:	8043      	strh	r3, [r0, #2]
}
   32236:	2000      	movs	r0, #0
   32238:	bd10      	pop	{r4, pc}

0003223a <gatt_cancel_encode>:
{
   3223a:	b508      	push	{r3, lr}
   3223c:	2101      	movs	r1, #1
   3223e:	300c      	adds	r0, #12
   32240:	f7ec f92a 	bl	1e498 <net_buf_simple_add>
   32244:	4603      	mov	r3, r0
	req->flags = BT_ATT_FLAG_CANCEL;
   32246:	2000      	movs	r0, #0
   32248:	7018      	strb	r0, [r3, #0]
}
   3224a:	bd08      	pop	{r3, pc}

0003224c <gatt_exec_encode>:
{
   3224c:	b508      	push	{r3, lr}
   3224e:	2101      	movs	r1, #1
   32250:	300c      	adds	r0, #12
   32252:	f7ec f921 	bl	1e498 <net_buf_simple_add>
	req->flags = BT_ATT_FLAG_EXEC;
   32256:	2301      	movs	r3, #1
   32258:	7003      	strb	r3, [r0, #0]
}
   3225a:	2000      	movs	r0, #0
   3225c:	bd08      	pop	{r3, pc}

0003225e <gatt_read_group_encode>:
{
   3225e:	b538      	push	{r3, r4, r5, lr}
   32260:	4615      	mov	r5, r2
   32262:	f100 040c 	add.w	r4, r0, #12
   32266:	2104      	movs	r1, #4
   32268:	4620      	mov	r0, r4
   3226a:	f7ec f915 	bl	1e498 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   3226e:	892b      	ldrh	r3, [r5, #8]
   32270:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   32272:	89eb      	ldrh	r3, [r5, #14]
   32274:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   32276:	7c2b      	ldrb	r3, [r5, #16]
   32278:	b933      	cbnz	r3, 32288 <gatt_read_group_encode+0x2a>
	net_buf_simple_add_le16(&buf->b, val);
   3227a:	f44f 5120 	mov.w	r1, #10240	; 0x2800
   3227e:	4620      	mov	r0, r4
   32280:	f000 ff8b 	bl	3319a <net_buf_simple_add_le16>
}
   32284:	2000      	movs	r0, #0
   32286:	bd38      	pop	{r3, r4, r5, pc}
   32288:	f642 0101 	movw	r1, #10241	; 0x2801
   3228c:	e7f7      	b.n	3227e <gatt_read_group_encode+0x20>

0003228e <gatt_read_type_encode>:
{
   3228e:	b538      	push	{r3, r4, r5, lr}
   32290:	4615      	mov	r5, r2
	return net_buf_simple_add(&buf->b, len);
   32292:	f100 040c 	add.w	r4, r0, #12
   32296:	2104      	movs	r1, #4
   32298:	4620      	mov	r0, r4
   3229a:	f7ec f8fd 	bl	1e498 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   3229e:	892b      	ldrh	r3, [r5, #8]
   322a0:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   322a2:	89eb      	ldrh	r3, [r5, #14]
   322a4:	8043      	strh	r3, [r0, #2]
	switch (params->type) {
   322a6:	7c2b      	ldrb	r3, [r5, #16]
   322a8:	2b02      	cmp	r3, #2
   322aa:	d004      	beq.n	322b6 <gatt_read_type_encode+0x28>
   322ac:	2b03      	cmp	r3, #3
   322ae:	d009      	beq.n	322c4 <gatt_read_type_encode+0x36>
		net_buf_add_le16(buf, BT_UUID_16(params->uuid)->val);
   322b0:	682b      	ldr	r3, [r5, #0]
	net_buf_simple_add_le16(&buf->b, val);
   322b2:	8859      	ldrh	r1, [r3, #2]
   322b4:	e001      	b.n	322ba <gatt_read_type_encode+0x2c>
   322b6:	f642 0102 	movw	r1, #10242	; 0x2802
   322ba:	4620      	mov	r0, r4
   322bc:	f000 ff6d 	bl	3319a <net_buf_simple_add_le16>
}
   322c0:	2000      	movs	r0, #0
   322c2:	bd38      	pop	{r3, r4, r5, pc}
   322c4:	f642 0103 	movw	r1, #10243	; 0x2803
   322c8:	e7f7      	b.n	322ba <gatt_read_type_encode+0x2c>

000322ca <gatt_write_encode>:
{
   322ca:	b530      	push	{r4, r5, lr}
   322cc:	4614      	mov	r4, r2
   322ce:	b085      	sub	sp, #20
   322d0:	4605      	mov	r5, r0
	return net_buf_simple_add(&buf->b, len);
   322d2:	2102      	movs	r1, #2
   322d4:	300c      	adds	r0, #12
   322d6:	f7ec f8df 	bl	1e498 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->handle);
   322da:	88a3      	ldrh	r3, [r4, #4]
	write = net_buf_append_bytes(buf, params->length, params->data,
   322dc:	2200      	movs	r2, #0
	req->handle = sys_cpu_to_le16(params->handle);
   322de:	8003      	strh	r3, [r0, #0]
	write = net_buf_append_bytes(buf, params->length, params->data,
   322e0:	2300      	movs	r3, #0
   322e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
   322e6:	2300      	movs	r3, #0
   322e8:	e9cd 2300 	strd	r2, r3, [sp]
   322ec:	4628      	mov	r0, r5
   322ee:	68a2      	ldr	r2, [r4, #8]
   322f0:	89a1      	ldrh	r1, [r4, #12]
   322f2:	f7ec f811 	bl	1e318 <net_buf_append_bytes>
	if (write != params->length) {
   322f6:	89a3      	ldrh	r3, [r4, #12]
	return 0;
   322f8:	4283      	cmp	r3, r0
}
   322fa:	bf14      	ite	ne
   322fc:	f06f 000b 	mvnne.w	r0, #11
   32300:	2000      	moveq	r0, #0
   32302:	b005      	add	sp, #20
   32304:	bd30      	pop	{r4, r5, pc}

00032306 <gatt_prepare_write_encode>:
{
   32306:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   32308:	4615      	mov	r5, r2
   3230a:	4606      	mov	r6, r0
   3230c:	460c      	mov	r4, r1
   3230e:	300c      	adds	r0, #12
   32310:	2104      	movs	r1, #4
   32312:	f7ec f8c1 	bl	1e498 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->handle);
   32316:	88ab      	ldrh	r3, [r5, #4]
	write = net_buf_append_bytes(buf, len - sizeof(*req),
   32318:	2200      	movs	r2, #0
	req->handle = sys_cpu_to_le16(params->handle);
   3231a:	8003      	strh	r3, [r0, #0]
	req->offset = sys_cpu_to_le16(params->offset);
   3231c:	88eb      	ldrh	r3, [r5, #6]
	write = net_buf_append_bytes(buf, len - sizeof(*req),
   3231e:	3c04      	subs	r4, #4
	req->offset = sys_cpu_to_le16(params->offset);
   32320:	8043      	strh	r3, [r0, #2]
	write = net_buf_append_bytes(buf, len - sizeof(*req),
   32322:	2300      	movs	r3, #0
   32324:	e9cd 3302 	strd	r3, r3, [sp, #8]
   32328:	2300      	movs	r3, #0
   3232a:	e9cd 2300 	strd	r2, r3, [sp]
   3232e:	4621      	mov	r1, r4
   32330:	4630      	mov	r0, r6
   32332:	68aa      	ldr	r2, [r5, #8]
   32334:	f7eb fff0 	bl	1e318 <net_buf_append_bytes>
	return 0;
   32338:	4284      	cmp	r4, r0
}
   3233a:	bf14      	ite	ne
   3233c:	f06f 000b 	mvnne.w	r0, #11
   32340:	2000      	moveq	r0, #0
   32342:	b004      	add	sp, #16
   32344:	bd70      	pop	{r4, r5, r6, pc}

00032346 <bt_addr_le_copy>:
   32346:	680b      	ldr	r3, [r1, #0]
   32348:	6003      	str	r3, [r0, #0]
   3234a:	888b      	ldrh	r3, [r1, #4]
   3234c:	8083      	strh	r3, [r0, #4]
   3234e:	798b      	ldrb	r3, [r1, #6]
   32350:	7183      	strb	r3, [r0, #6]
}
   32352:	4770      	bx	lr

00032354 <gatt_sub_remove>:
{
   32354:	b538      	push	{r3, r4, r5, lr}
   32356:	460c      	mov	r4, r1
	if (params) {
   32358:	4619      	mov	r1, r3
   3235a:	b16b      	cbz	r3, 32378 <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   3235c:	f103 0518 	add.w	r5, r3, #24
   32360:	699b      	ldr	r3, [r3, #24]
Z_GENLIST_REMOVE(slist, snode)
   32362:	b982      	cbnz	r2, 32386 <gatt_sub_remove+0x32>
   32364:	68e2      	ldr	r2, [r4, #12]
	list->head = node;
   32366:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   32368:	4295      	cmp	r5, r2
   3236a:	d100      	bne.n	3236e <gatt_sub_remove+0x1a>
	list->tail = node;
   3236c:	60e3      	str	r3, [r4, #12]
	parent->next = child;
   3236e:	2300      	movs	r3, #0
		params->notify(conn, params, NULL, 0);
   32370:	680d      	ldr	r5, [r1, #0]
   32372:	461a      	mov	r2, r3
   32374:	618b      	str	r3, [r1, #24]
   32376:	47a8      	blx	r5
	if (gatt_sub_is_empty(sub)) {
   32378:	68a3      	ldr	r3, [r4, #8]
   3237a:	b953      	cbnz	r3, 32392 <gatt_sub_remove+0x3e>
		gatt_sub_free(sub);
   3237c:	4620      	mov	r0, r4
}
   3237e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		gatt_sub_free(sub);
   32382:	f7e6 bf7d 	b.w	19280 <gatt_sub_free>
   32386:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   32388:	68e3      	ldr	r3, [r4, #12]
   3238a:	429d      	cmp	r5, r3
	list->tail = node;
   3238c:	bf08      	it	eq
   3238e:	60e2      	streq	r2, [r4, #12]
}
   32390:	e7ed      	b.n	3236e <gatt_sub_remove+0x1a>
}
   32392:	bd38      	pop	{r3, r4, r5, pc}

00032394 <clear_sc_cfg>:
__ssp_bos_icheck3(memset, void *, int)
   32394:	2300      	movs	r3, #0
   32396:	6003      	str	r3, [r0, #0]
   32398:	6043      	str	r3, [r0, #4]
   3239a:	6083      	str	r3, [r0, #8]
}
   3239c:	4770      	bx	lr

0003239e <bt_gatt_attr_read.constprop.0>:
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   3239e:	b538      	push	{r3, r4, r5, lr}
   323a0:	f8bd 4010 	ldrh.w	r4, [sp, #16]
   323a4:	4615      	mov	r5, r2
	if (offset > value_len) {
   323a6:	4294      	cmp	r4, r2
   323a8:	d30a      	bcc.n	323c0 <bt_gatt_attr_read.constprop.0+0x22>
	len = MIN(buf_len, value_len - offset);
   323aa:	1aa4      	subs	r4, r4, r2
   323ac:	428c      	cmp	r4, r1
   323ae:	bfa8      	it	ge
   323b0:	460c      	movge	r4, r1
   323b2:	b2a4      	uxth	r4, r4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   323b4:	4622      	mov	r2, r4
   323b6:	1959      	adds	r1, r3, r5
   323b8:	f004 f8b6 	bl	36528 <memcpy>
}
   323bc:	4620      	mov	r0, r4
   323be:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   323c0:	f06f 0406 	mvn.w	r4, #6
   323c4:	e7fa      	b.n	323bc <bt_gatt_attr_read.constprop.0+0x1e>

000323c6 <bt_gatt_attr_read_ccc>:
{
   323c6:	b530      	push	{r4, r5, lr}
   323c8:	b085      	sub	sp, #20
	cfg = find_ccc_cfg(conn, ccc);
   323ca:	68c9      	ldr	r1, [r1, #12]
{
   323cc:	4614      	mov	r4, r2
   323ce:	461d      	mov	r5, r3
	cfg = find_ccc_cfg(conn, ccc);
   323d0:	f7e6 fe78 	bl	190c4 <find_ccc_cfg>
	if (cfg) {
   323d4:	b100      	cbz	r0, 323d8 <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(cfg->value);
   323d6:	8900      	ldrh	r0, [r0, #8]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   323d8:	2302      	movs	r3, #2
   323da:	f8ad 000e 	strh.w	r0, [sp, #14]
   323de:	9300      	str	r3, [sp, #0]
   323e0:	4629      	mov	r1, r5
   323e2:	4620      	mov	r0, r4
   323e4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   323e8:	f10d 030e 	add.w	r3, sp, #14
   323ec:	f7ff ffd7 	bl	3239e <bt_gatt_attr_read.constprop.0>
}
   323f0:	b005      	add	sp, #20
   323f2:	bd30      	pop	{r4, r5, pc}

000323f4 <bt_gatt_attr_read_service>:
{
   323f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   323f6:	460c      	mov	r4, r1
   323f8:	4619      	mov	r1, r3
	struct bt_uuid *uuid = attr->user_data;
   323fa:	68e3      	ldr	r3, [r4, #12]
{
   323fc:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   323fe:	781c      	ldrb	r4, [r3, #0]
{
   32400:	f8bd 2018 	ldrh.w	r2, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   32404:	b13c      	cbz	r4, 32416 <bt_gatt_attr_read_service+0x22>
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   32406:	2410      	movs	r4, #16
   32408:	3301      	adds	r3, #1
   3240a:	9406      	str	r4, [sp, #24]
}
   3240c:	b004      	add	sp, #16
   3240e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   32412:	f7ff bfc4 	b.w	3239e <bt_gatt_attr_read.constprop.0>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   32416:	885b      	ldrh	r3, [r3, #2]
   32418:	f8ad 300e 	strh.w	r3, [sp, #14]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   3241c:	2302      	movs	r3, #2
   3241e:	9300      	str	r3, [sp, #0]
   32420:	f10d 030e 	add.w	r3, sp, #14
   32424:	f7ff ffbb 	bl	3239e <bt_gatt_attr_read.constprop.0>
}
   32428:	b004      	add	sp, #16
   3242a:	bd10      	pop	{r4, pc}

0003242c <cf_read>:
{
   3242c:	b530      	push	{r4, r5, lr}
   3242e:	461d      	mov	r5, r3
	uint8_t data[1] = {};
   32430:	2300      	movs	r3, #0
{
   32432:	b085      	sub	sp, #20
   32434:	4614      	mov	r4, r2
	uint8_t data[1] = {};
   32436:	f88d 300c 	strb.w	r3, [sp, #12]
	cfg = find_cf_cfg(conn);
   3243a:	f7e6 fe15 	bl	19068 <find_cf_cfg>
	if (cfg) {
   3243e:	b110      	cbz	r0, 32446 <cf_read+0x1a>
		memcpy(data, cfg->data, sizeof(data));
   32440:	7a03      	ldrb	r3, [r0, #8]
   32442:	f88d 300c 	strb.w	r3, [sp, #12]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   32446:	2301      	movs	r3, #1
   32448:	4629      	mov	r1, r5
   3244a:	9300      	str	r3, [sp, #0]
   3244c:	4620      	mov	r0, r4
   3244e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   32452:	ab03      	add	r3, sp, #12
   32454:	f7ff ffa3 	bl	3239e <bt_gatt_attr_read.constprop.0>
}
   32458:	b005      	add	sp, #20
   3245a:	bd30      	pop	{r4, r5, pc}

0003245c <read_name>:
{
   3245c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   32460:	4614      	mov	r4, r2
   32462:	461d      	mov	r5, r3
   32464:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	const char *name = bt_get_name();
   32468:	f7e3 f872 	bl	15550 <bt_get_name>
   3246c:	4606      	mov	r6, r0
				 strlen(name));
   3246e:	f7d6 fed8 	bl	9222 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   32472:	b280      	uxth	r0, r0
   32474:	9006      	str	r0, [sp, #24]
   32476:	4633      	mov	r3, r6
   32478:	463a      	mov	r2, r7
   3247a:	4629      	mov	r1, r5
   3247c:	4620      	mov	r0, r4
}
   3247e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   32482:	f7ff bf8c 	b.w	3239e <bt_gatt_attr_read.constprop.0>

00032486 <read_appearance>:
{
   32486:	b530      	push	{r4, r5, lr}
   32488:	b085      	sub	sp, #20
   3248a:	4614      	mov	r4, r2
   3248c:	461d      	mov	r5, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   3248e:	f7fe fe04 	bl	3109a <bt_get_appearance>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   32492:	2302      	movs	r3, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   32494:	f8ad 000e 	strh.w	r0, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   32498:	9300      	str	r3, [sp, #0]
   3249a:	4629      	mov	r1, r5
   3249c:	4620      	mov	r0, r4
   3249e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   324a2:	f10d 030e 	add.w	r3, sp, #14
   324a6:	f7ff ff7a 	bl	3239e <bt_gatt_attr_read.constprop.0>
}
   324aa:	b005      	add	sp, #20
   324ac:	bd30      	pop	{r4, r5, pc}

000324ae <z_log_msg_static_create.constprop.0>:
   324ae:	2300      	movs	r3, #0
   324b0:	f7dd bec0 	b.w	10234 <z_impl_z_log_msg_static_create>

000324b4 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   324b4:	2a02      	cmp	r2, #2
{
   324b6:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   324b8:	d108      	bne.n	324cc <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   324ba:	2300      	movs	r3, #0
   324bc:	f100 0190 	add.w	r1, r0, #144	; 0x90
   324c0:	461a      	mov	r2, r3
   324c2:	7a00      	ldrb	r0, [r0, #8]
   324c4:	f7e7 f896 	bl	195f4 <sc_save>
}
   324c8:	2002      	movs	r0, #2
   324ca:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   324cc:	f7e6 ffe2 	bl	19494 <sc_clear>
   324d0:	e7fa      	b.n	324c8 <sc_ccc_cfg_write+0x14>

000324d2 <gatt_find_type_encode>:
{
   324d2:	b538      	push	{r3, r4, r5, lr}
   324d4:	4614      	mov	r4, r2
   324d6:	f100 050c 	add.w	r5, r0, #12
   324da:	2106      	movs	r1, #6
   324dc:	4628      	mov	r0, r5
   324de:	f7eb ffdb 	bl	1e498 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   324e2:	8923      	ldrh	r3, [r4, #8]
   324e4:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   324e6:	89e3      	ldrh	r3, [r4, #14]
   324e8:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   324ea:	7c23      	ldrb	r3, [r4, #16]
		uuid_val = BT_UUID_GATT_PRIMARY_VAL;
   324ec:	2b00      	cmp	r3, #0
   324ee:	f642 0301 	movw	r3, #10241	; 0x2801
   324f2:	bf08      	it	eq
   324f4:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
	req->type = sys_cpu_to_le16(uuid_val);
   324f8:	8083      	strh	r3, [r0, #4]
	switch (params->uuid->type) {
   324fa:	6821      	ldr	r1, [r4, #0]
   324fc:	780b      	ldrb	r3, [r1, #0]
   324fe:	b11b      	cbz	r3, 32508 <gatt_find_type_encode+0x36>
   32500:	2b02      	cmp	r3, #2
   32502:	d006      	beq.n	32512 <gatt_find_type_encode+0x40>
}
   32504:	2000      	movs	r0, #0
   32506:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_simple_add_le16(&buf->b, val);
   32508:	4628      	mov	r0, r5
   3250a:	8849      	ldrh	r1, [r1, #2]
   3250c:	f000 fe45 	bl	3319a <net_buf_simple_add_le16>
}
   32510:	e7f8      	b.n	32504 <gatt_find_type_encode+0x32>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   32512:	2210      	movs	r2, #16
   32514:	4628      	mov	r0, r5
   32516:	3101      	adds	r1, #1
   32518:	f000 fe2c 	bl	33174 <net_buf_simple_add_mem>
   3251c:	e7f2      	b.n	32504 <gatt_find_type_encode+0x32>

0003251e <gatt_req_send.constprop.0>:
static int gatt_req_send(struct bt_conn *conn, bt_att_func_t func, void *params,
   3251e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   32522:	4606      	mov	r6, r0
   32524:	460d      	mov	r5, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   32526:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   3252a:	2100      	movs	r1, #0
static int gatt_req_send(struct bt_conn *conn, bt_att_func_t func, void *params,
   3252c:	4690      	mov	r8, r2
   3252e:	461f      	mov	r7, r3
   32530:	f89d a020 	ldrb.w	sl, [sp, #32]
   32534:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   32538:	f7e6 fb42 	bl	18bc0 <bt_att_req_alloc>
	if (!req) {
   3253c:	4604      	mov	r4, r0
   3253e:	b188      	cbz	r0, 32564 <gatt_req_send.constprop.0+0x46>
	req->func = func;
   32540:	6045      	str	r5, [r0, #4]
	req->att_op = op;
   32542:	f880 a011 	strb.w	sl, [r0, #17]
	req->len = len;
   32546:	f8c0 9014 	str.w	r9, [r0, #20]
	req->encode = encode;
   3254a:	60c7      	str	r7, [r0, #12]
	req->user_data = params;
   3254c:	f8c0 8018 	str.w	r8, [r0, #24]
	buf = bt_att_create_pdu(conn, op, len);
   32550:	464a      	mov	r2, r9
   32552:	4651      	mov	r1, sl
   32554:	4630      	mov	r0, r6
   32556:	f7e6 f865 	bl	18624 <bt_att_create_pdu>
   3255a:	4605      	mov	r5, r0
	if (!buf) {
   3255c:	b938      	cbnz	r0, 3256e <gatt_req_send.constprop.0+0x50>
		bt_att_req_free(req);
   3255e:	4620      	mov	r0, r4
   32560:	f7e6 fb52 	bl	18c08 <bt_att_req_free>
		return -ENOMEM;
   32564:	f06f 050b 	mvn.w	r5, #11
}
   32568:	4628      	mov	r0, r5
   3256a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	bt_att_set_tx_meta_data(buf, NULL, NULL, chan_opt);
   3256e:	2200      	movs	r2, #0
   32570:	2301      	movs	r3, #1
   32572:	4611      	mov	r1, r2
   32574:	f7ff fd8a 	bl	3208c <bt_att_set_tx_meta_data>
	err = encode(buf, len, params);
   32578:	4628      	mov	r0, r5
	req->buf = buf;
   3257a:	60a5      	str	r5, [r4, #8]
	err = encode(buf, len, params);
   3257c:	4642      	mov	r2, r8
   3257e:	4649      	mov	r1, r9
   32580:	47b8      	blx	r7
	if (err) {
   32582:	4605      	mov	r5, r0
   32584:	b118      	cbz	r0, 3258e <gatt_req_send.constprop.0+0x70>
		bt_att_req_free(req);
   32586:	4620      	mov	r0, r4
   32588:	f7e6 fb3e 	bl	18c08 <bt_att_req_free>
   3258c:	e7ec      	b.n	32568 <gatt_req_send.constprop.0+0x4a>
	err = bt_att_req_send(conn, req);
   3258e:	4621      	mov	r1, r4
   32590:	4630      	mov	r0, r6
   32592:	f7e6 fca7 	bl	18ee4 <bt_att_req_send>
	if (err) {
   32596:	4605      	mov	r5, r0
   32598:	2800      	cmp	r0, #0
   3259a:	d0e5      	beq.n	32568 <gatt_req_send.constprop.0+0x4a>
   3259c:	e7f3      	b.n	32586 <gatt_req_send.constprop.0+0x68>

0003259e <gatt_write_ccc_buf>:
{
   3259e:	b538      	push	{r3, r4, r5, lr}
   325a0:	4614      	mov	r4, r2
	return net_buf_simple_add(&buf->b, len);
   325a2:	f100 050c 	add.w	r5, r0, #12
   325a6:	2102      	movs	r1, #2
   325a8:	4628      	mov	r0, r5
   325aa:	f7eb ff75 	bl	1e498 <net_buf_simple_add>
	write_req->handle = sys_cpu_to_le16(params->ccc_handle);
   325ae:	89e3      	ldrh	r3, [r4, #14]
   325b0:	8003      	strh	r3, [r0, #0]
	net_buf_simple_add_le16(&buf->b, val);
   325b2:	8a21      	ldrh	r1, [r4, #16]
   325b4:	4628      	mov	r0, r5
   325b6:	f000 fdf0 	bl	3319a <net_buf_simple_add_le16>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   325ba:	2104      	movs	r1, #4
   325bc:	f104 0014 	add.w	r0, r4, #20
   325c0:	f7ff fe01 	bl	321c6 <atomic_or>
}
   325c4:	2000      	movs	r0, #0
   325c6:	bd38      	pop	{r3, r4, r5, pc}

000325c8 <set_change_aware_no_store>:
{
   325c8:	b508      	push	{r3, lr}
		changed = !atomic_test_and_set_bit(cfg->flags, CF_CHANGE_AWARE);
   325ca:	300c      	adds	r0, #12
	if (aware) {
   325cc:	b129      	cbz	r1, 325da <set_change_aware_no_store+0x12>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   325ce:	2101      	movs	r1, #1
   325d0:	f7ff fdf9 	bl	321c6 <atomic_or>
		changed = !atomic_test_and_set_bit(cfg->flags, CF_CHANGE_AWARE);
   325d4:	43c0      	mvns	r0, r0
   325d6:	4008      	ands	r0, r1
}
   325d8:	bd08      	pop	{r3, pc}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   325da:	f06f 0101 	mvn.w	r1, #1
   325de:	f7ff fdfd 	bl	321dc <atomic_and>
	return (old & mask) != 0;
   325e2:	f000 0001 	and.w	r0, r0, #1
   325e6:	e7f7      	b.n	325d8 <set_change_aware_no_store+0x10>

000325e8 <set_change_aware>:
{
   325e8:	b510      	push	{r4, lr}
   325ea:	4604      	mov	r4, r0
	bool changed = set_change_aware_no_store(cfg, aware);
   325ec:	f7ff ffec 	bl	325c8 <set_change_aware_no_store>
	if (changed) {
   325f0:	b138      	cbz	r0, 32602 <set_change_aware+0x1a>
		gatt_delayed_store_enqueue(cfg->id, &cfg->peer, DELAYED_STORE_CF);
   325f2:	4621      	mov	r1, r4
}
   325f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		gatt_delayed_store_enqueue(cfg->id, &cfg->peer, DELAYED_STORE_CF);
   325f8:	2201      	movs	r2, #1
   325fa:	f811 0b01 	ldrb.w	r0, [r1], #1
   325fe:	f7e6 bda3 	b.w	19148 <gatt_delayed_store_enqueue>
}
   32602:	bd10      	pop	{r4, pc}

00032604 <sc_restore_rsp>:
{
   32604:	b538      	push	{r3, r4, r5, lr}
   32606:	4604      	mov	r4, r0
   32608:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   3260a:	f7ff fd21 	bl	32050 <bt_att_fixed_chan_only>
   3260e:	b148      	cbz	r0, 32624 <sc_restore_rsp+0x20>
		cfg = find_cf_cfg(conn);
   32610:	4620      	mov	r0, r4
   32612:	f7e6 fd29 	bl	19068 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   32616:	b128      	cbz	r0, 32624 <sc_restore_rsp+0x20>
   32618:	7a03      	ldrb	r3, [r0, #8]
   3261a:	07db      	lsls	r3, r3, #31
   3261c:	d502      	bpl.n	32624 <sc_restore_rsp+0x20>
			set_change_aware(cfg, true);
   3261e:	2101      	movs	r1, #1
   32620:	f7ff ffe2 	bl	325e8 <set_change_aware>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   32624:	b955      	cbnz	r5, 3263c <sc_restore_rsp+0x38>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   32626:	7a20      	ldrb	r0, [r4, #8]
   32628:	f104 0190 	add.w	r1, r4, #144	; 0x90
   3262c:	f7e6 fcfc 	bl	19028 <find_sc_cfg>
		if (sc_cfg) {
   32630:	b120      	cbz	r0, 3263c <sc_restore_rsp+0x38>
__ssp_bos_icheck3(memset, void *, int)
   32632:	6085      	str	r5, [r0, #8]
}
   32634:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		sc_store(cfg);
   32638:	f7e6 bfa8 	b.w	1958c <sc_store>
}
   3263c:	bd38      	pop	{r3, r4, r5, pc}

0003263e <bt_gatt_attr_value_handle>:
{
   3263e:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   32640:	4604      	mov	r4, r0
   32642:	b910      	cbnz	r0, 3264a <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   32644:	2000      	movs	r0, #0
}
   32646:	b002      	add	sp, #8
   32648:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   3264a:	2300      	movs	r3, #0
   3264c:	f88d 3004 	strb.w	r3, [sp, #4]
   32650:	f642 0303 	movw	r3, #10243	; 0x2803
   32654:	6800      	ldr	r0, [r0, #0]
   32656:	a901      	add	r1, sp, #4
   32658:	f8ad 3006 	strh.w	r3, [sp, #6]
   3265c:	f7fe fbb5 	bl	30dca <bt_uuid_cmp>
   32660:	2800      	cmp	r0, #0
   32662:	d1ef      	bne.n	32644 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   32664:	68e3      	ldr	r3, [r4, #12]
   32666:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   32668:	2800      	cmp	r0, #0
   3266a:	d1ec      	bne.n	32646 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   3266c:	4620      	mov	r0, r4
   3266e:	f7e7 fc03 	bl	19e78 <bt_gatt_attr_get_handle>
   32672:	3001      	adds	r0, #1
   32674:	b280      	uxth	r0, r0
	return handle;
   32676:	e7e6      	b.n	32646 <bt_gatt_attr_value_handle+0x8>

00032678 <bt_gatt_attr_read_chrc>:
{
   32678:	b570      	push	{r4, r5, r6, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   3267a:	68cc      	ldr	r4, [r1, #12]
{
   3267c:	461e      	mov	r6, r3
	pdu.properties = chrc->properties;
   3267e:	79a3      	ldrb	r3, [r4, #6]
{
   32680:	b088      	sub	sp, #32
   32682:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
   32684:	f88d 300c 	strb.w	r3, [sp, #12]
{
   32688:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   3268a:	f7ff ffd8 	bl	3263e <bt_gatt_attr_value_handle>
   3268e:	f8ad 000d 	strh.w	r0, [sp, #13]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   32692:	6824      	ldr	r4, [r4, #0]
   32694:	7823      	ldrb	r3, [r4, #0]
   32696:	b96b      	cbnz	r3, 326b4 <bt_gatt_attr_read_chrc+0x3c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   32698:	8863      	ldrh	r3, [r4, #2]
   3269a:	f8ad 300f 	strh.w	r3, [sp, #15]
		value_len += 2U;
   3269e:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   326a0:	9300      	str	r3, [sp, #0]
   326a2:	4631      	mov	r1, r6
   326a4:	4628      	mov	r0, r5
   326a6:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   326aa:	ab03      	add	r3, sp, #12
   326ac:	f7ff fe77 	bl	3239e <bt_gatt_attr_read.constprop.0>
}
   326b0:	b008      	add	sp, #32
   326b2:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   326b4:	1c63      	adds	r3, r4, #1
   326b6:	f10d 020f 	add.w	r2, sp, #15
   326ba:	3411      	adds	r4, #17
   326bc:	f853 1b04 	ldr.w	r1, [r3], #4
   326c0:	42a3      	cmp	r3, r4
   326c2:	f842 1b04 	str.w	r1, [r2], #4
   326c6:	d1f9      	bne.n	326bc <bt_gatt_attr_read_chrc+0x44>
		value_len += 16U;
   326c8:	2313      	movs	r3, #19
   326ca:	e7e9      	b.n	326a0 <bt_gatt_attr_read_chrc+0x28>

000326cc <bt_gatt_foreach_attr>:
{
   326cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   326ce:	e9cd 2301 	strd	r2, r3, [sp, #4]
   326d2:	2300      	movs	r3, #0
   326d4:	461a      	mov	r2, r3
   326d6:	9300      	str	r3, [sp, #0]
   326d8:	f7e7 fc16 	bl	19f08 <bt_gatt_foreach_attr_type>
}
   326dc:	b005      	add	sp, #20
   326de:	f85d fb04 	ldr.w	pc, [sp], #4

000326e2 <db_hash_process>:
	do_db_hash();
   326e2:	f7e7 bcff 	b.w	1a0e4 <do_db_hash>

000326e6 <bt_gatt_check_perm>:
{
   326e6:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   326e8:	07d4      	lsls	r4, r2, #31
{
   326ea:	4605      	mov	r5, r0
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   326ec:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   326ee:	d504      	bpl.n	326fa <bt_gatt_check_perm+0x14>
   326f0:	f013 0f95 	tst.w	r3, #149	; 0x95
   326f4:	d02b      	beq.n	3274e <bt_gatt_check_perm+0x68>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   326f6:	6848      	ldr	r0, [r1, #4]
   326f8:	b348      	cbz	r0, 3274e <bt_gatt_check_perm+0x68>
	if ((mask & BT_GATT_PERM_WRITE) &&
   326fa:	0790      	lsls	r0, r2, #30
   326fc:	d504      	bpl.n	32708 <bt_gatt_check_perm+0x22>
   326fe:	f413 7f95 	tst.w	r3, #298	; 0x12a
   32702:	d026      	beq.n	32752 <bt_gatt_check_perm+0x6c>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   32704:	6889      	ldr	r1, [r1, #8]
   32706:	b321      	cbz	r1, 32752 <bt_gatt_check_perm+0x6c>
	mask &= attr->perm;
   32708:	ea02 0403 	and.w	r4, r2, r3
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   3270c:	f014 0f3c 	tst.w	r4, #60	; 0x3c
   32710:	d00d      	beq.n	3272e <bt_gatt_check_perm+0x48>
		if (!conn->encrypt) {
   32712:	7aeb      	ldrb	r3, [r5, #11]
   32714:	b92b      	cbnz	r3, 32722 <bt_gatt_check_perm+0x3c>
			if (bt_conn_ltk_present(conn)) {
   32716:	4628      	mov	r0, r5
   32718:	f7fe fe0e 	bl	31338 <bt_conn_ltk_present>
   3271c:	b9d8      	cbnz	r0, 32756 <bt_gatt_check_perm+0x70>
				return BT_ATT_ERR_AUTHENTICATION;
   3271e:	2005      	movs	r0, #5
}
   32720:	bd38      	pop	{r3, r4, r5, pc}
		if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   32722:	f014 0f30 	tst.w	r4, #48	; 0x30
   32726:	d104      	bne.n	32732 <bt_gatt_check_perm+0x4c>
		if (mask & BT_GATT_PERM_LESC_MASK) {
   32728:	f414 7fc0 	tst.w	r4, #384	; 0x180
   3272c:	d107      	bne.n	3273e <bt_gatt_check_perm+0x58>
	return 0;
   3272e:	2000      	movs	r0, #0
   32730:	e7f6      	b.n	32720 <bt_gatt_check_perm+0x3a>
			if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   32732:	4628      	mov	r0, r5
   32734:	f7fe fe7d 	bl	31432 <bt_conn_get_security>
   32738:	2802      	cmp	r0, #2
   3273a:	d8f5      	bhi.n	32728 <bt_gatt_check_perm+0x42>
   3273c:	e7ef      	b.n	3271e <bt_gatt_check_perm+0x38>
			const struct bt_keys *keys = conn->le.keys;
   3273e:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
			if (!keys || (keys->flags & BT_KEYS_SC) == 0) {
   32742:	2b00      	cmp	r3, #0
   32744:	d0eb      	beq.n	3271e <bt_gatt_check_perm+0x38>
   32746:	7b5b      	ldrb	r3, [r3, #13]
   32748:	06db      	lsls	r3, r3, #27
   3274a:	d5e8      	bpl.n	3271e <bt_gatt_check_perm+0x38>
   3274c:	e7ef      	b.n	3272e <bt_gatt_check_perm+0x48>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   3274e:	2002      	movs	r0, #2
   32750:	e7e6      	b.n	32720 <bt_gatt_check_perm+0x3a>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   32752:	2003      	movs	r0, #3
   32754:	e7e4      	b.n	32720 <bt_gatt_check_perm+0x3a>
				return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   32756:	200f      	movs	r0, #15
   32758:	e7e2      	b.n	32720 <bt_gatt_check_perm+0x3a>

0003275a <gatt_discover_next>:
{
   3275a:	b570      	push	{r4, r5, r6, lr}
	if (!last_handle)
   3275c:	460b      	mov	r3, r1
{
   3275e:	4605      	mov	r5, r0
   32760:	4614      	mov	r4, r2
	if (!last_handle)
   32762:	b929      	cbnz	r1, 32770 <gatt_discover_next+0x16>
	if (!bt_gatt_discover(conn, params)) {
   32764:	4621      	mov	r1, r4
   32766:	4628      	mov	r0, r5
   32768:	f7e8 f9cc 	bl	1ab04 <bt_gatt_discover>
   3276c:	b928      	cbnz	r0, 3277a <gatt_discover_next+0x20>
}
   3276e:	bd70      	pop	{r4, r5, r6, pc}
	if (params->start_handle < UINT16_MAX) {
   32770:	f64f 72ff 	movw	r2, #65535	; 0xffff
   32774:	4291      	cmp	r1, r2
   32776:	d107      	bne.n	32788 <gatt_discover_next+0x2e>
	params->start_handle = last_handle;
   32778:	8121      	strh	r1, [r4, #8]
	params->func(conn, NULL, params);
   3277a:	4622      	mov	r2, r4
   3277c:	4628      	mov	r0, r5
   3277e:	6863      	ldr	r3, [r4, #4]
   32780:	2100      	movs	r1, #0
}
   32782:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	params->func(conn, NULL, params);
   32786:	4718      	bx	r3
	if (params->start_handle > params->end_handle) {
   32788:	89e2      	ldrh	r2, [r4, #14]
		params->start_handle++;
   3278a:	3301      	adds	r3, #1
   3278c:	b29b      	uxth	r3, r3
	if (params->start_handle > params->end_handle) {
   3278e:	429a      	cmp	r2, r3
		params->start_handle++;
   32790:	8123      	strh	r3, [r4, #8]
	if (params->start_handle > params->end_handle) {
   32792:	d2e7      	bcs.n	32764 <gatt_discover_next+0xa>
   32794:	e7f1      	b.n	3277a <gatt_discover_next+0x20>

00032796 <gatt_find_type_rsp>:
{
   32796:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3279a:	b089      	sub	sp, #36	; 0x24
   3279c:	4606      	mov	r6, r0
   3279e:	4614      	mov	r4, r2
   327a0:	9f12      	ldr	r7, [sp, #72]	; 0x48
	if (err || (length % sizeof(struct bt_att_handle_group) != 0)) {
   327a2:	b911      	cbnz	r1, 327aa <gatt_find_type_rsp+0x14>
   327a4:	f013 0803 	ands.w	r8, r3, #3
   327a8:	d007      	beq.n	327ba <gatt_find_type_rsp+0x24>
	params->func(conn, NULL, params);
   327aa:	463a      	mov	r2, r7
   327ac:	2100      	movs	r1, #0
   327ae:	4630      	mov	r0, r6
   327b0:	687b      	ldr	r3, [r7, #4]
}
   327b2:	b009      	add	sp, #36	; 0x24
   327b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	params->func(conn, NULL, params);
   327b8:	4718      	bx	r3
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   327ba:	46c1      	mov	r9, r8
			uuid_svc.val = BT_UUID_GATT_PRIMARY_VAL;
   327bc:	f642 0a01 	movw	sl, #10241	; 0x2801
   327c0:	f3c3 0387 	ubfx	r3, r3, #2, #8
   327c4:	eb02 0583 	add.w	r5, r2, r3, lsl #2
	for (uint8_t i = 0U; i < count; i++) {
   327c8:	42ac      	cmp	r4, r5
   327ca:	d107      	bne.n	327dc <gatt_find_type_rsp+0x46>
	gatt_discover_next(conn, end_handle, params);
   327cc:	463a      	mov	r2, r7
   327ce:	4641      	mov	r1, r8
   327d0:	4630      	mov	r0, r6
}
   327d2:	b009      	add	sp, #36	; 0x24
   327d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, end_handle, params);
   327d8:	f7ff bfbf 	b.w	3275a <gatt_discover_next>
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   327dc:	7c3a      	ldrb	r2, [r7, #16]
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   327de:	8863      	ldrh	r3, [r4, #2]
			uuid_svc.val = BT_UUID_GATT_PRIMARY_VAL;
   327e0:	2a00      	cmp	r2, #0
   327e2:	bf14      	ite	ne
   327e4:	4652      	movne	r2, sl
   327e6:	f44f 5220 	moveq.w	r2, #10240	; 0x2800
   327ea:	f8ad 2002 	strh.w	r2, [sp, #2]
		attr = (struct bt_gatt_attr) {
   327ee:	2210      	movs	r2, #16
		value.end_handle = end_handle;
   327f0:	f8ad 3008 	strh.w	r3, [sp, #8]
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   327f4:	fa1f f883 	uxth.w	r8, r3
		value.uuid = params->uuid;
   327f8:	683b      	ldr	r3, [r7, #0]
		start_handle = sys_le16_to_cpu(rsp[i].start_handle);
   327fa:	f8b4 b000 	ldrh.w	fp, [r4]
		attr = (struct bt_gatt_attr) {
   327fe:	2100      	movs	r1, #0
   32800:	eb0d 0002 	add.w	r0, sp, r2
		value.uuid = params->uuid;
   32804:	9301      	str	r3, [sp, #4]
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   32806:	f88d 9000 	strb.w	r9, [sp]
		attr = (struct bt_gatt_attr) {
   3280a:	f003 fead 	bl	36568 <memset>
   3280e:	ab01      	add	r3, sp, #4
   32810:	9306      	str	r3, [sp, #24]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   32812:	463a      	mov	r2, r7
   32814:	4630      	mov	r0, r6
   32816:	687b      	ldr	r3, [r7, #4]
		attr = (struct bt_gatt_attr) {
   32818:	f8cd d00c 	str.w	sp, [sp, #12]
   3281c:	f8ad b01c 	strh.w	fp, [sp, #28]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   32820:	a903      	add	r1, sp, #12
   32822:	4798      	blx	r3
   32824:	3404      	adds	r4, #4
   32826:	2800      	cmp	r0, #0
   32828:	d1ce      	bne.n	327c8 <gatt_find_type_rsp+0x32>
}
   3282a:	b009      	add	sp, #36	; 0x24
   3282c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00032830 <gatt_prepare_write_rsp>:
{
   32830:	b410      	push	{r4}
   32832:	4614      	mov	r4, r2
   32834:	461a      	mov	r2, r3
   32836:	9b01      	ldr	r3, [sp, #4]
	if (err) {
   32838:	b121      	cbz	r1, 32844 <gatt_prepare_write_rsp+0x14>
		params->func(conn, err, params);
   3283a:	681c      	ldr	r4, [r3, #0]
   3283c:	461a      	mov	r2, r3
   3283e:	4623      	mov	r3, r4
}
   32840:	bc10      	pop	{r4}
		params->func(conn, err, params);
   32842:	4718      	bx	r3
   32844:	4621      	mov	r1, r4
}
   32846:	bc10      	pop	{r4}
   32848:	f7e8 bdfe 	b.w	1b448 <gatt_prepare_write_rsp.part.0>

0003284c <bt_gatt_cancel>:
{
   3284c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3284e:	4604      	mov	r4, r0
   32850:	460d      	mov	r5, r1
	k_sched_lock();
   32852:	f7f7 ff41 	bl	2a6d8 <k_sched_lock>
	req = bt_att_find_req_by_user_data(conn, params);
   32856:	4629      	mov	r1, r5
   32858:	4620      	mov	r0, r4
   3285a:	f7ff fbe0 	bl	3201e <bt_att_find_req_by_user_data>
	if (req) {
   3285e:	4601      	mov	r1, r0
   32860:	b920      	cbnz	r0, 3286c <bt_gatt_cancel+0x20>
}
   32862:	b002      	add	sp, #8
   32864:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_sched_unlock();
   32868:	f7f7 bfa2 	b.w	2a7b0 <k_sched_unlock>
		func = req->func;
   3286c:	6846      	ldr	r6, [r0, #4]
		bt_att_req_cancel(conn, req);
   3286e:	4620      	mov	r0, r4
   32870:	f7e6 fb6e 	bl	18f50 <bt_att_req_cancel>
	k_sched_unlock();
   32874:	f7f7 ff9c 	bl	2a7b0 <k_sched_unlock>
	if (func) {
   32878:	b12e      	cbz	r6, 32886 <bt_gatt_cancel+0x3a>
		func(conn, BT_ATT_ERR_UNLIKELY, NULL, 0, params);
   3287a:	2300      	movs	r3, #0
   3287c:	210e      	movs	r1, #14
   3287e:	461a      	mov	r2, r3
   32880:	4620      	mov	r0, r4
   32882:	9500      	str	r5, [sp, #0]
   32884:	47b0      	blx	r6
}
   32886:	b002      	add	sp, #8
   32888:	bd70      	pop	{r4, r5, r6, pc}

0003288a <bt_gatt_notification>:
{
   3288a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3288e:	4606      	mov	r6, r0
   32890:	4688      	mov	r8, r1
   32892:	4691      	mov	r9, r2
   32894:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
   32896:	f7e6 fc29 	bl	190ec <gatt_sub_find>
	if (!sub) {
   3289a:	b320      	cbz	r0, 328e6 <bt_gatt_notification+0x5c>
	return list->head;
   3289c:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   3289e:	b314      	cbz	r4, 328e6 <bt_gatt_notification+0x5c>
	return node->next;
   328a0:	6825      	ldr	r5, [r4, #0]
   328a2:	b105      	cbz	r5, 328a6 <bt_gatt_notification+0x1c>
   328a4:	3d18      	subs	r5, #24
		if (handle != params->value_handle) {
   328a6:	f834 3c0c 	ldrh.w	r3, [r4, #-12]
   328aa:	4543      	cmp	r3, r8
   328ac:	d118      	bne.n	328e0 <bt_gatt_notification+0x56>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   328ae:	3c18      	subs	r4, #24
   328b0:	e007      	b.n	328c2 <bt_gatt_notification+0x38>
   328b2:	462c      	mov	r4, r5
   328b4:	69ad      	ldr	r5, [r5, #24]
   328b6:	89a3      	ldrh	r3, [r4, #12]
   328b8:	b1bd      	cbz	r5, 328ea <bt_gatt_notification+0x60>
		if (handle != params->value_handle) {
   328ba:	4543      	cmp	r3, r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   328bc:	f1a5 0518 	sub.w	r5, r5, #24
		if (handle != params->value_handle) {
   328c0:	d1f7      	bne.n	328b2 <bt_gatt_notification+0x28>
		if (check_subscribe_security_level(conn, params)) {
   328c2:	7a72      	ldrb	r2, [r6, #9]
   328c4:	7ca3      	ldrb	r3, [r4, #18]
   328c6:	429a      	cmp	r2, r3
   328c8:	d30a      	bcc.n	328e0 <bt_gatt_notification+0x56>
			if (params->notify(conn, params, data, length) ==
   328ca:	4653      	mov	r3, sl
   328cc:	464a      	mov	r2, r9
   328ce:	4621      	mov	r1, r4
   328d0:	4630      	mov	r0, r6
   328d2:	6827      	ldr	r7, [r4, #0]
   328d4:	47b8      	blx	r7
   328d6:	b918      	cbnz	r0, 328e0 <bt_gatt_notification+0x56>
				bt_gatt_unsubscribe(conn, params);
   328d8:	4621      	mov	r1, r4
   328da:	4630      	mov	r0, r6
   328dc:	f7e8 fea4 	bl	1b628 <bt_gatt_unsubscribe>
   328e0:	462c      	mov	r4, r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   328e2:	2d00      	cmp	r5, #0
   328e4:	d1e6      	bne.n	328b4 <bt_gatt_notification+0x2a>
}
   328e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (handle != params->value_handle) {
   328ea:	4543      	cmp	r3, r8
   328ec:	d0e9      	beq.n	328c2 <bt_gatt_notification+0x38>
   328ee:	e7fa      	b.n	328e6 <bt_gatt_notification+0x5c>

000328f0 <bt_gatt_change_aware>:
{
   328f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   328f4:	4605      	mov	r5, r0
   328f6:	4688      	mov	r8, r1
	cfg = find_cf_cfg(conn);
   328f8:	f7e6 fbb6 	bl	19068 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   328fc:	4604      	mov	r4, r0
   328fe:	b1e0      	cbz	r0, 3293a <bt_gatt_change_aware+0x4a>
   32900:	7a03      	ldrb	r3, [r0, #8]
   32902:	07db      	lsls	r3, r3, #31
   32904:	d519      	bpl.n	3293a <bt_gatt_change_aware+0x4a>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   32906:	f100 070c 	add.w	r7, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   3290a:	4638      	mov	r0, r7
   3290c:	f7ff fc71 	bl	321f2 <atomic_get>
   32910:	f010 0601 	ands.w	r6, r0, #1
   32914:	d111      	bne.n	3293a <bt_gatt_change_aware+0x4a>
	if (!req) {
   32916:	f1b8 0f00 	cmp.w	r8, #0
   3291a:	d00f      	beq.n	3293c <bt_gatt_change_aware+0x4c>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   3291c:	f06f 0102 	mvn.w	r1, #2
   32920:	4638      	mov	r0, r7
   32922:	f7ff fc5b 	bl	321dc <atomic_and>
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   32926:	f010 0f02 	tst.w	r0, #2
		bt_att_clear_out_of_sync_sent(conn);
   3292a:	4628      	mov	r0, r5
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   3292c:	d009      	beq.n	32942 <bt_gatt_change_aware+0x52>
		bt_att_clear_out_of_sync_sent(conn);
   3292e:	f7ff fb91 	bl	32054 <bt_att_clear_out_of_sync_sent>
		set_change_aware(cfg, true);
   32932:	2101      	movs	r1, #1
   32934:	4620      	mov	r0, r4
   32936:	f7ff fe57 	bl	325e8 <set_change_aware>
		return true;
   3293a:	2601      	movs	r6, #1
}
   3293c:	4630      	mov	r0, r6
   3293e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   32942:	f7ff fb85 	bl	32050 <bt_att_fixed_chan_only>
   32946:	2800      	cmp	r0, #0
   32948:	d0f8      	beq.n	3293c <bt_gatt_change_aware+0x4c>
   3294a:	4628      	mov	r0, r5
   3294c:	f7ff fb92 	bl	32074 <bt_att_out_of_sync_sent_on_fixed>
   32950:	2800      	cmp	r0, #0
   32952:	d0f3      	beq.n	3293c <bt_gatt_change_aware+0x4c>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   32954:	f06f 0102 	mvn.w	r1, #2
   32958:	4638      	mov	r0, r7
   3295a:	f7ff fc3f 	bl	321dc <atomic_and>
		bt_att_clear_out_of_sync_sent(conn);
   3295e:	4628      	mov	r0, r5
   32960:	e7e5      	b.n	3292e <bt_gatt_change_aware+0x3e>

00032962 <delayed_store>:
{
   32962:	b570      	push	{r4, r5, r6, lr}
   32964:	f1a0 0417 	sub.w	r4, r0, #23
   32968:	1c46      	adds	r6, r0, #1
		if (bt_addr_le_is_bonded(el->id, &el->peer)) {
   3296a:	4621      	mov	r1, r4
   3296c:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   32970:	f7fe fb95 	bl	3109e <bt_addr_le_is_bonded>
   32974:	b348      	cbz	r0, 329ca <delayed_store+0x68>
			    atomic_test_and_clear_bit(el->flags, DELAYED_STORE_CCC)) {
   32976:	1de5      	adds	r5, r4, #7
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   32978:	f06f 0101 	mvn.w	r1, #1
   3297c:	4628      	mov	r0, r5
   3297e:	f7ff fc2d 	bl	321dc <atomic_and>
			if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_STORE_ON_WRITE) &&
   32982:	07c2      	lsls	r2, r0, #31
   32984:	d504      	bpl.n	32990 <delayed_store+0x2e>
				bt_gatt_store_ccc(el->id, &el->peer);
   32986:	4621      	mov	r1, r4
   32988:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   3298c:	f7e8 ffe8 	bl	1b960 <bt_gatt_store_ccc>
   32990:	f06f 0102 	mvn.w	r1, #2
   32994:	4628      	mov	r0, r5
   32996:	f7ff fc21 	bl	321dc <atomic_and>
			if (IS_ENABLED(CONFIG_BT_SETTINGS_CF_STORE_ON_WRITE) &&
   3299a:	0783      	lsls	r3, r0, #30
   3299c:	d504      	bpl.n	329a8 <delayed_store+0x46>
				bt_gatt_store_cf(el->id, &el->peer);
   3299e:	4621      	mov	r1, r4
   329a0:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   329a4:	f7e7 f970 	bl	19c88 <bt_gatt_store_cf.isra.0>
			if (atomic_get(el->flags) == 0) {
   329a8:	4628      	mov	r0, r5
   329aa:	f7ff fc22 	bl	321f2 <atomic_get>
   329ae:	b960      	cbnz	r0, 329ca <delayed_store+0x68>
	if (el) {
   329b0:	2c01      	cmp	r4, #1
   329b2:	d00a      	beq.n	329ca <delayed_store+0x68>
   329b4:	6020      	str	r0, [r4, #0]
		el->id = 0;
   329b6:	f804 0c01 	strb.w	r0, [r4, #-1]
   329ba:	f8c4 0003 	str.w	r0, [r4, #3]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   329be:	e8d5 3fef 	ldaex	r3, [r5]
   329c2:	e8c5 0fe2 	stlex	r2, r0, [r5]
   329c6:	2a00      	cmp	r2, #0
   329c8:	d1f9      	bne.n	329be <delayed_store+0x5c>
	for (size_t i = 0; i < ARRAY_SIZE(gatt_delayed_store.peer_list); i++) {
   329ca:	340c      	adds	r4, #12
   329cc:	42a6      	cmp	r6, r4
   329ce:	d1cc      	bne.n	3296a <delayed_store+0x8>
}
   329d0:	bd70      	pop	{r4, r5, r6, pc}

000329d2 <bt_gatt_pairing_complete>:
{
   329d2:	b538      	push	{r3, r4, r5, lr}
   329d4:	4604      	mov	r4, r0
	if (bonded) {
   329d6:	b159      	cbz	r1, 329f0 <bt_gatt_pairing_complete+0x1e>
		bt_gatt_store_ccc(conn->id, &(conn->le.dst));
   329d8:	f100 0590 	add.w	r5, r0, #144	; 0x90
   329dc:	4629      	mov	r1, r5
   329de:	7a00      	ldrb	r0, [r0, #8]
   329e0:	f7e8 ffbe 	bl	1b960 <bt_gatt_store_ccc>
		bt_gatt_store_cf(conn->id, &conn->le.dst);
   329e4:	4629      	mov	r1, r5
   329e6:	7a20      	ldrb	r0, [r4, #8]
}
   329e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_store_cf(conn->id, &conn->le.dst);
   329ec:	f7e7 b94c 	b.w	19c88 <bt_gatt_store_cf.isra.0>
}
   329f0:	bd38      	pop	{r3, r4, r5, pc}

000329f2 <smp_pairing_req>:
}
   329f2:	2007      	movs	r0, #7
   329f4:	4770      	bx	lr

000329f6 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   329f6:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   329fa:	4108      	asrs	r0, r1
}
   329fc:	f000 0001 	and.w	r0, r0, #1
   32a00:	4770      	bx	lr

00032a02 <update_keys_check>:
{
   32a02:	4603      	mov	r3, r0
   32a04:	b510      	push	{r4, lr}
	if (!keys ||
   32a06:	b1d9      	cbz	r1, 32a40 <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   32a08:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   32a0a:	f010 0f24 	tst.w	r0, #36	; 0x24
   32a0e:	d017      	beq.n	32a40 <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   32a10:	7d1a      	ldrb	r2, [r3, #20]
   32a12:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   32a14:	7b09      	ldrb	r1, [r1, #12]
   32a16:	42a2      	cmp	r2, r4
   32a18:	bf28      	it	cs
   32a1a:	4622      	movcs	r2, r4
   32a1c:	4291      	cmp	r1, r2
   32a1e:	d901      	bls.n	32a24 <update_keys_check+0x22>
			return false;
   32a20:	2000      	movs	r0, #0
}
   32a22:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   32a24:	0682      	lsls	r2, r0, #26
   32a26:	d404      	bmi.n	32a32 <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   32a28:	7a18      	ldrb	r0, [r3, #8]
   32a2a:	3800      	subs	r0, #0
   32a2c:	bf18      	it	ne
   32a2e:	2001      	movne	r0, #1
   32a30:	e7f7      	b.n	32a22 <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   32a32:	2105      	movs	r1, #5
   32a34:	1d18      	adds	r0, r3, #4
   32a36:	f7ff ffde 	bl	329f6 <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   32a3a:	2800      	cmp	r0, #0
   32a3c:	d1f4      	bne.n	32a28 <update_keys_check+0x26>
   32a3e:	e7ef      	b.n	32a20 <update_keys_check+0x1e>
	return true;
   32a40:	2001      	movs	r0, #1
   32a42:	e7ee      	b.n	32a22 <update_keys_check+0x20>

00032a44 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   32a44:	2301      	movs	r3, #1
   32a46:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   32a48:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   32a4a:	e8d0 2fef 	ldaex	r2, [r0]
   32a4e:	401a      	ands	r2, r3
   32a50:	e8c0 2fe1 	stlex	r1, r2, [r0]
   32a54:	2900      	cmp	r1, #0
   32a56:	d1f8      	bne.n	32a4a <atomic_clear_bit+0x6>
}
   32a58:	4770      	bx	lr

00032a5a <bt_addr_le_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   32a5a:	680b      	ldr	r3, [r1, #0]
   32a5c:	6003      	str	r3, [r0, #0]
   32a5e:	888b      	ldrh	r3, [r1, #4]
   32a60:	8083      	strh	r3, [r0, #4]
   32a62:	798b      	ldrb	r3, [r1, #6]
   32a64:	7183      	strb	r3, [r0, #6]
   32a66:	4770      	bx	lr

00032a68 <z_log_msg_static_create.constprop.0>:
   32a68:	2300      	movs	r3, #0
   32a6a:	f7dd bbe3 	b.w	10234 <z_impl_z_log_msg_static_create>

00032a6e <smp_chan_get>:
{
   32a6e:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   32a70:	2106      	movs	r1, #6
   32a72:	f7fe fe37 	bl	316e4 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   32a76:	b918      	cbnz	r0, 32a80 <smp_chan_get+0x12>
}
   32a78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   32a7c:	f7e9 b904 	b.w	1bc88 <smp_chan_get.part.0>
   32a80:	38ec      	subs	r0, #236	; 0xec
   32a82:	bd08      	pop	{r3, pc}

00032a84 <smp_signing_info>:
static uint8_t smp_signing_info(struct bt_smp *smp, struct net_buf *buf)
   32a84:	2007      	movs	r0, #7
   32a86:	4770      	bx	lr

00032a88 <atomic_test_and_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   32a88:	2301      	movs	r3, #1
   32a8a:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   32a8e:	43ca      	mvns	r2, r1
{
   32a90:	b530      	push	{r4, r5, lr}
   32a92:	e8d0 3fef 	ldaex	r3, [r0]
   32a96:	ea03 0402 	and.w	r4, r3, r2
   32a9a:	e8c0 4fe5 	stlex	r5, r4, [r0]
   32a9e:	2d00      	cmp	r5, #0
   32aa0:	d1f7      	bne.n	32a92 <atomic_test_and_clear_bit+0xa>
	return (old & mask) != 0;
   32aa2:	4219      	tst	r1, r3
}
   32aa4:	bf14      	ite	ne
   32aa6:	2001      	movne	r0, #1
   32aa8:	2000      	moveq	r0, #0
   32aaa:	bd30      	pop	{r4, r5, pc}

00032aac <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   32aac:	2301      	movs	r3, #1
   32aae:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   32ab0:	e8d0 2fef 	ldaex	r2, [r0]
   32ab4:	431a      	orrs	r2, r3
   32ab6:	e8c0 2fe1 	stlex	r1, r2, [r0]
   32aba:	2900      	cmp	r1, #0
   32abc:	d1f8      	bne.n	32ab0 <atomic_set_bit+0x4>
}
   32abe:	4770      	bx	lr

00032ac0 <smp_keypress_notif>:
{
   32ac0:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   32ac2:	210e      	movs	r1, #14
   32ac4:	f7ff fff2 	bl	32aac <atomic_set_bit>
}
   32ac8:	2000      	movs	r0, #0
   32aca:	bd08      	pop	{r3, pc}

00032acc <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   32acc:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   32ace:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   32ad0:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   32ad2:	4628      	mov	r0, r5
   32ad4:	2104      	movs	r1, #4
   32ad6:	f7ff ff8e 	bl	329f6 <atomic_test_bit>
   32ada:	b168      	cbz	r0, 32af8 <smp_create_pdu.constprop.0+0x2c>
		timeout = K_NO_WAIT;
   32adc:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   32ade:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   32ae0:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   32ae2:	4608      	mov	r0, r1
   32ae4:	f7fe fdbb 	bl	3165e <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   32ae8:	4604      	mov	r4, r0
   32aea:	b940      	cbnz	r0, 32afe <smp_create_pdu.constprop.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   32aec:	2104      	movs	r1, #4
   32aee:	4628      	mov	r0, r5
   32af0:	f7ff ffdc 	bl	32aac <atomic_set_bit>
}
   32af4:	4620      	mov	r0, r4
   32af6:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   32af8:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   32afc:	e7ef      	b.n	32ade <smp_create_pdu.constprop.0+0x12>
	return net_buf_simple_add(&buf->b, len);
   32afe:	2101      	movs	r1, #1
   32b00:	300c      	adds	r0, #12
   32b02:	f7eb fcc9 	bl	1e498 <net_buf_simple_add>
	hdr->code = op;
   32b06:	7006      	strb	r6, [r0, #0]
	return buf;
   32b08:	e7f4      	b.n	32af4 <smp_create_pdu.constprop.0+0x28>

00032b0a <smp_send_pairing_random>:
{
   32b0a:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   32b0c:	2104      	movs	r1, #4
{
   32b0e:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   32b10:	f7ff ffdc 	bl	32acc <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   32b14:	4605      	mov	r5, r0
   32b16:	b1a0      	cbz	r0, 32b42 <smp_send_pairing_random+0x38>
   32b18:	2110      	movs	r1, #16
   32b1a:	300c      	adds	r0, #12
   32b1c:	f7eb fcbc 	bl	1e498 <net_buf_simple_add>
   32b20:	f104 0327 	add.w	r3, r4, #39	; 0x27
   32b24:	f104 0237 	add.w	r2, r4, #55	; 0x37
   32b28:	f853 1b04 	ldr.w	r1, [r3], #4
   32b2c:	4293      	cmp	r3, r2
   32b2e:	f840 1b04 	str.w	r1, [r0], #4
   32b32:	d1f9      	bne.n	32b28 <smp_send_pairing_random+0x1e>
	smp_send(smp, rsp_buf, NULL, NULL);
   32b34:	4620      	mov	r0, r4
   32b36:	2200      	movs	r2, #0
   32b38:	4629      	mov	r1, r5
   32b3a:	f7e9 f877 	bl	1bc2c <smp_send.constprop.0>
	return 0;
   32b3e:	2000      	movs	r0, #0
}
   32b40:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   32b42:	2008      	movs	r0, #8
   32b44:	e7fc      	b.n	32b40 <smp_send_pairing_random+0x36>

00032b46 <smp_pairing_confirm>:
{
   32b46:	b538      	push	{r3, r4, r5, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   32b48:	68cd      	ldr	r5, [r1, #12]
{
   32b4a:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   32b4c:	210b      	movs	r1, #11
   32b4e:	3004      	adds	r0, #4
   32b50:	f7ff ff78 	bl	32a44 <atomic_clear_bit>
   32b54:	462b      	mov	r3, r5
   32b56:	f104 0217 	add.w	r2, r4, #23
   32b5a:	f105 0110 	add.w	r1, r5, #16
   32b5e:	f853 0b04 	ldr.w	r0, [r3], #4
   32b62:	428b      	cmp	r3, r1
   32b64:	f842 0b04 	str.w	r0, [r2], #4
   32b68:	d1f9      	bne.n	32b5e <smp_pairing_confirm+0x18>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   32b6a:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   32b6e:	78db      	ldrb	r3, [r3, #3]
   32b70:	b93b      	cbnz	r3, 32b82 <smp_pairing_confirm+0x3c>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   32b72:	4620      	mov	r0, r4
   32b74:	2104      	movs	r1, #4
   32b76:	f7ff ff99 	bl	32aac <atomic_set_bit>
}
   32b7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return smp_send_pairing_random(smp);
   32b7e:	f7ff bfc4 	b.w	32b0a <smp_send_pairing_random>
}
   32b82:	2000      	movs	r0, #0
   32b84:	bd38      	pop	{r3, r4, r5, pc}

00032b86 <smp_reset>:
{
   32b86:	b570      	push	{r4, r5, r6, lr}
   32b88:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   32b8a:	2500      	movs	r5, #0
	struct bt_conn *conn = smp->chan.chan.conn;
   32b8c:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
   32b90:	1d03      	adds	r3, r0, #4
   32b92:	e8d3 2fef 	ldaex	r2, [r3]
   32b96:	e8c3 5fe1 	stlex	r1, r5, [r3]
   32b9a:	2900      	cmp	r1, #0
   32b9c:	d1f9      	bne.n	32b92 <smp_reset+0xc>
	(void)k_work_cancel_delayable(&smp->work);
   32b9e:	f504 7090 	add.w	r0, r4, #288	; 0x120
   32ba2:	f7f7 fa99 	bl	2a0d8 <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   32ba6:	7225      	strb	r5, [r4, #8]
   32ba8:	e8d4 3fef 	ldaex	r3, [r4]
   32bac:	e8c4 5fe2 	stlex	r2, r5, [r4]
   32bb0:	2a00      	cmp	r2, #0
   32bb2:	d1f9      	bne.n	32ba8 <smp_reset+0x22>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   32bb4:	78f3      	ldrb	r3, [r6, #3]
   32bb6:	b92b      	cbnz	r3, 32bc4 <smp_reset+0x3e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   32bb8:	4620      	mov	r0, r4
}
   32bba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   32bbe:	210b      	movs	r1, #11
   32bc0:	f7ff bf74 	b.w	32aac <atomic_set_bit>
}
   32bc4:	bd70      	pop	{r4, r5, r6, pc}

00032bc6 <smp_c1>:
{
   32bc6:	b5f0      	push	{r4, r5, r6, r7, lr}
   32bc8:	b089      	sub	sp, #36	; 0x24
   32bca:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
   32bce:	4605      	mov	r5, r0
	p1[0] = ia->type;
   32bd0:	7830      	ldrb	r0, [r6, #0]
{
   32bd2:	9c10      	ldr	r4, [sp, #64]	; 0x40
	p1[0] = ia->type;
   32bd4:	f88d 0000 	strb.w	r0, [sp]
	p1[1] = ra->type;
   32bd8:	7838      	ldrb	r0, [r7, #0]
   32bda:	f101 0c10 	add.w	ip, r1, #16
   32bde:	f88d 0001 	strb.w	r0, [sp, #1]
	memcpy(p1 + 2, preq, 7);
   32be2:	6810      	ldr	r0, [r2, #0]
   32be4:	f8cd 0002 	str.w	r0, [sp, #2]
   32be8:	8890      	ldrh	r0, [r2, #4]
   32bea:	7992      	ldrb	r2, [r2, #6]
   32bec:	f8ad 0006 	strh.w	r0, [sp, #6]
   32bf0:	f88d 2008 	strb.w	r2, [sp, #8]
	memcpy(p1 + 9, pres, 7);
   32bf4:	681a      	ldr	r2, [r3, #0]
   32bf6:	4668      	mov	r0, sp
   32bf8:	f8cd 2009 	str.w	r2, [sp, #9]
   32bfc:	889a      	ldrh	r2, [r3, #4]
   32bfe:	799b      	ldrb	r3, [r3, #6]
   32c00:	f8ad 200d 	strh.w	r2, [sp, #13]
   32c04:	4622      	mov	r2, r4
   32c06:	f88d 300f 	strb.w	r3, [sp, #15]
		*r++ = *p++ ^ *q++;
   32c0a:	f811 3b01 	ldrb.w	r3, [r1], #1
   32c0e:	f810 eb01 	ldrb.w	lr, [r0], #1
	while (len--) {
   32c12:	4561      	cmp	r1, ip
		*r++ = *p++ ^ *q++;
   32c14:	ea83 030e 	eor.w	r3, r3, lr
   32c18:	f802 3b01 	strb.w	r3, [r2], #1
	while (len--) {
   32c1c:	d1f5      	bne.n	32c0a <smp_c1+0x44>
	err = bt_encrypt_le(k, enc_data, enc_data);
   32c1e:	4622      	mov	r2, r4
   32c20:	4621      	mov	r1, r4
   32c22:	4628      	mov	r0, r5
   32c24:	f7fe faf9 	bl	3121a <bt_encrypt_le>
	if (err) {
   32c28:	4603      	mov	r3, r0
   32c2a:	bb28      	cbnz	r0, 32c78 <smp_c1+0xb2>
	(void)memset(p2 + 12, 0, 4);
   32c2c:	9307      	str	r3, [sp, #28]
   32c2e:	4623      	mov	r3, r4
	memcpy(p2, ra->a.val, 6);
   32c30:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   32c34:	f8d7 0001 	ldr.w	r0, [r7, #1]
   32c38:	f8ad 2014 	strh.w	r2, [sp, #20]
	memcpy(p2 + 6, ia->a.val, 6);
   32c3c:	f8d6 2001 	ldr.w	r2, [r6, #1]
	memcpy(p2, ra->a.val, 6);
   32c40:	9004      	str	r0, [sp, #16]
	memcpy(p2 + 6, ia->a.val, 6);
   32c42:	f8cd 2016 	str.w	r2, [sp, #22]
   32c46:	f8b6 2005 	ldrh.w	r2, [r6, #5]
   32c4a:	f104 0010 	add.w	r0, r4, #16
   32c4e:	f8ad 201a 	strh.w	r2, [sp, #26]
	(void)memset(p2 + 12, 0, 4);
   32c52:	a904      	add	r1, sp, #16
		*r++ = *p++ ^ *q++;
   32c54:	f813 2b01 	ldrb.w	r2, [r3], #1
   32c58:	f811 6b01 	ldrb.w	r6, [r1], #1
	while (len--) {
   32c5c:	4283      	cmp	r3, r0
		*r++ = *p++ ^ *q++;
   32c5e:	ea82 0206 	eor.w	r2, r2, r6
   32c62:	f803 2c01 	strb.w	r2, [r3, #-1]
	while (len--) {
   32c66:	d1f5      	bne.n	32c54 <smp_c1+0x8e>
	return bt_encrypt_le(k, enc_data, enc_data);
   32c68:	4622      	mov	r2, r4
   32c6a:	4621      	mov	r1, r4
   32c6c:	4628      	mov	r0, r5
}
   32c6e:	b009      	add	sp, #36	; 0x24
   32c70:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_encrypt_le(k, enc_data, enc_data);
   32c74:	f7fe bad1 	b.w	3121a <bt_encrypt_le>
}
   32c78:	b009      	add	sp, #36	; 0x24
   32c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00032c7c <legacy_send_pairing_confirm>:
{
   32c7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   32c7e:	2103      	movs	r1, #3
{
   32c80:	4605      	mov	r5, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   32c82:	f8d0 40ec 	ldr.w	r4, [r0, #236]	; 0xec
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   32c86:	f7ff ff21 	bl	32acc <smp_create_pdu.constprop.0>
	if (!buf) {
   32c8a:	4606      	mov	r6, r0
   32c8c:	b1c0      	cbz	r0, 32cc0 <legacy_send_pairing_confirm+0x44>
   32c8e:	2110      	movs	r1, #16
   32c90:	300c      	adds	r0, #12
   32c92:	f7eb fc01 	bl	1e498 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   32c96:	f104 039e 	add.w	r3, r4, #158	; 0x9e
   32c9a:	3497      	adds	r4, #151	; 0x97
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   32c9c:	9002      	str	r0, [sp, #8]
   32c9e:	9301      	str	r3, [sp, #4]
   32ca0:	9400      	str	r4, [sp, #0]
   32ca2:	f105 0310 	add.w	r3, r5, #16
   32ca6:	f105 0209 	add.w	r2, r5, #9
   32caa:	f105 0127 	add.w	r1, r5, #39	; 0x27
   32cae:	f105 0047 	add.w	r0, r5, #71	; 0x47
   32cb2:	f7ff ff88 	bl	32bc6 <smp_c1>
   32cb6:	4604      	mov	r4, r0
   32cb8:	b128      	cbz	r0, 32cc6 <legacy_send_pairing_confirm+0x4a>
		net_buf_unref(buf);
   32cba:	4630      	mov	r0, r6
   32cbc:	f7eb fa66 	bl	1e18c <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   32cc0:	2008      	movs	r0, #8
}
   32cc2:	b004      	add	sp, #16
   32cc4:	bd70      	pop	{r4, r5, r6, pc}
	smp_send(smp, buf, NULL, NULL);
   32cc6:	4602      	mov	r2, r0
   32cc8:	4631      	mov	r1, r6
   32cca:	4628      	mov	r0, r5
   32ccc:	f7e8 ffae 	bl	1bc2c <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   32cd0:	1d28      	adds	r0, r5, #4
   32cd2:	4621      	mov	r1, r4
   32cd4:	f7ff feb6 	bl	32a44 <atomic_clear_bit>
	return 0;
   32cd8:	4620      	mov	r0, r4
   32cda:	e7f2      	b.n	32cc2 <legacy_send_pairing_confirm+0x46>

00032cdc <bt_smp_request_ltk>:
{
   32cdc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   32ce0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   32ce2:	4604      	mov	r4, r0
   32ce4:	e9cd 2300 	strd	r2, r3, [sp]
	smp = smp_chan_get(conn);
   32ce8:	f7ff fec1 	bl	32a6e <smp_chan_get>
	if (!smp) {
   32cec:	4605      	mov	r5, r0
   32cee:	2800      	cmp	r0, #0
   32cf0:	f000 8085 	beq.w	32dfe <bt_smp_request_ltk+0x122>
	if (ediv == 0U && rand == 0U &&
   32cf4:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   32cf8:	1d06      	adds	r6, r0, #4
	if (ediv == 0U && rand == 0U &&
   32cfa:	f1b8 0f00 	cmp.w	r8, #0
   32cfe:	d12a      	bne.n	32d56 <bt_smp_request_ltk+0x7a>
   32d00:	e9dd 3200 	ldrd	r3, r2, [sp]
   32d04:	4313      	orrs	r3, r2
   32d06:	d126      	bne.n	32d56 <bt_smp_request_ltk+0x7a>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   32d08:	2103      	movs	r1, #3
   32d0a:	4630      	mov	r0, r6
   32d0c:	f7ff fe73 	bl	329f6 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   32d10:	2800      	cmp	r0, #0
   32d12:	d058      	beq.n	32dc6 <bt_smp_request_ltk+0xea>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   32d14:	2101      	movs	r1, #1
   32d16:	4630      	mov	r0, r6
   32d18:	f7ff fe6d 	bl	329f6 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   32d1c:	2800      	cmp	r0, #0
   32d1e:	d052      	beq.n	32dc6 <bt_smp_request_ltk+0xea>
	return MIN(req->max_key_size, rsp->max_key_size);
   32d20:	7d2c      	ldrb	r4, [r5, #20]
   32d22:	7b6b      	ldrb	r3, [r5, #13]
   32d24:	f105 0147 	add.w	r1, r5, #71	; 0x47
   32d28:	429c      	cmp	r4, r3
   32d2a:	bf28      	it	cs
   32d2c:	461c      	movcs	r4, r3
   32d2e:	4622      	mov	r2, r4
   32d30:	4638      	mov	r0, r7
   32d32:	f003 fbf9 	bl	36528 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   32d36:	2c0f      	cmp	r4, #15
   32d38:	d805      	bhi.n	32d46 <bt_smp_request_ltk+0x6a>
__ssp_bos_icheck3(memset, void *, int)
   32d3a:	2100      	movs	r1, #0
   32d3c:	f1c4 0210 	rsb	r2, r4, #16
   32d40:	1938      	adds	r0, r7, r4
   32d42:	f003 fc11 	bl	36568 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   32d46:	4630      	mov	r0, r6
   32d48:	2101      	movs	r1, #1
   32d4a:	f7ff feaf 	bl	32aac <atomic_set_bit>
		return true;
   32d4e:	2001      	movs	r0, #1
}
   32d50:	b003      	add	sp, #12
   32d52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   32d56:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   32d5a:	b9bb      	cbnz	r3, 32d8c <bt_smp_request_ltk+0xb0>
					     &conn->le.dst);
   32d5c:	f104 0990 	add.w	r9, r4, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   32d60:	464a      	mov	r2, r9
   32d62:	2020      	movs	r0, #32
   32d64:	7a21      	ldrb	r1, [r4, #8]
   32d66:	f7ea fdc3 	bl	1d8f0 <bt_keys_find>
   32d6a:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
		if (!conn->le.keys) {
   32d6e:	b930      	cbnz	r0, 32d7e <bt_smp_request_ltk+0xa2>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   32d70:	464a      	mov	r2, r9
   32d72:	2001      	movs	r0, #1
   32d74:	7a21      	ldrb	r1, [r4, #8]
   32d76:	f7ea fdbb 	bl	1d8f0 <bt_keys_find>
   32d7a:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	if (ediv == 0U && rand == 0U &&
   32d7e:	f1b8 0f00 	cmp.w	r8, #0
   32d82:	d103      	bne.n	32d8c <bt_smp_request_ltk+0xb0>
   32d84:	e9dd 3200 	ldrd	r3, r2, [sp]
   32d88:	4313      	orrs	r3, r2
   32d8a:	d020      	beq.n	32dce <bt_smp_request_ltk+0xf2>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   32d8c:	f8d4 80bc 	ldr.w	r8, [r4, #188]	; 0xbc
   32d90:	f1b8 0f00 	cmp.w	r8, #0
   32d94:	d026      	beq.n	32de4 <bt_smp_request_ltk+0x108>
   32d96:	f8b8 300e 	ldrh.w	r3, [r8, #14]
   32d9a:	07db      	lsls	r3, r3, #31
   32d9c:	d522      	bpl.n	32de4 <bt_smp_request_ltk+0x108>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   32d9e:	2208      	movs	r2, #8
   32da0:	4669      	mov	r1, sp
   32da2:	f108 0040 	add.w	r0, r8, #64	; 0x40
   32da6:	f003 fbaf 	bl	36508 <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   32daa:	b9d8      	cbnz	r0, 32de4 <bt_smp_request_ltk+0x108>
	    !memcmp(conn->le.keys->periph_ltk.ediv, &ediv, 2)) {
   32dac:	2202      	movs	r2, #2
   32dae:	a90a      	add	r1, sp, #40	; 0x28
   32db0:	f108 0048 	add.w	r0, r8, #72	; 0x48
   32db4:	f003 fba8 	bl	36508 <memcmp>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   32db8:	b9a0      	cbnz	r0, 32de4 <bt_smp_request_ltk+0x108>
		enc_size = conn->le.keys->enc_size;
   32dba:	f898 400c 	ldrb.w	r4, [r8, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   32dbe:	f108 014a 	add.w	r1, r8, #74	; 0x4a
   32dc2:	4622      	mov	r2, r4
   32dc4:	e7b4      	b.n	32d30 <bt_smp_request_ltk+0x54>
	if (!conn->le.keys) {
   32dc6:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   32dca:	2b00      	cmp	r3, #0
   32dcc:	d0c6      	beq.n	32d5c <bt_smp_request_ltk+0x80>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   32dce:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
	if (ediv == 0U && rand == 0U &&
   32dd2:	2900      	cmp	r1, #0
   32dd4:	d0da      	beq.n	32d8c <bt_smp_request_ltk+0xb0>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   32dd6:	89cb      	ldrh	r3, [r1, #14]
   32dd8:	069a      	lsls	r2, r3, #26
   32dda:	d5d7      	bpl.n	32d8c <bt_smp_request_ltk+0xb0>
		enc_size = conn->le.keys->enc_size;
   32ddc:	7b0c      	ldrb	r4, [r1, #12]
   32dde:	311a      	adds	r1, #26
   32de0:	4622      	mov	r2, r4
   32de2:	e7a5      	b.n	32d30 <bt_smp_request_ltk+0x54>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   32de4:	210f      	movs	r1, #15
   32de6:	4630      	mov	r0, r6
   32de8:	f7ff fe05 	bl	329f6 <atomic_test_bit>
   32dec:	b120      	cbz	r0, 32df8 <bt_smp_request_ltk+0x11c>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   32dee:	2202      	movs	r2, #2
   32df0:	2106      	movs	r1, #6
   32df2:	4620      	mov	r0, r4
   32df4:	f7e4 f9e0 	bl	171b8 <bt_conn_security_changed>
	smp_reset(smp);
   32df8:	4628      	mov	r0, r5
   32dfa:	f7ff fec4 	bl	32b86 <smp_reset>
		return false;
   32dfe:	2000      	movs	r0, #0
   32e00:	e7a6      	b.n	32d50 <bt_smp_request_ltk+0x74>

00032e02 <bt_smp_sign>:
int bt_smp_sign(struct bt_conn *conn, struct net_buf *buf)
   32e02:	f06f 0085 	mvn.w	r0, #133	; 0x85
   32e06:	4770      	bx	lr

00032e08 <bt_smp_start_security>:
{
   32e08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch (conn->role) {
   32e0a:	78c3      	ldrb	r3, [r0, #3]
{
   32e0c:	4604      	mov	r4, r0
	switch (conn->role) {
   32e0e:	2b00      	cmp	r3, #0
   32e10:	d15f      	bne.n	32ed2 <__kernel_ram_size+0x8a>
		smp = smp_chan_get(conn);
   32e12:	f7ff fe2c 	bl	32a6e <smp_chan_get>
		if (!smp) {
   32e16:	4605      	mov	r5, r0
   32e18:	2800      	cmp	r0, #0
   32e1a:	d05d      	beq.n	32ed8 <__kernel_ram_size+0x90>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   32e1c:	1d06      	adds	r6, r0, #4
   32e1e:	2103      	movs	r1, #3
   32e20:	4630      	mov	r0, r6
   32e22:	f7ff fde8 	bl	329f6 <atomic_test_bit>
   32e26:	b120      	cbz	r0, 32e32 <bt_smp_start_security+0x2a>
			return -EBUSY;
   32e28:	f06f 040f 	mvn.w	r4, #15
}
   32e2c:	4620      	mov	r0, r4
   32e2e:	b003      	add	sp, #12
   32e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   32e32:	2101      	movs	r1, #1
   32e34:	4630      	mov	r0, r6
   32e36:	f7ff fdde 	bl	329f6 <atomic_test_bit>
   32e3a:	2800      	cmp	r0, #0
   32e3c:	d1f4      	bne.n	32e28 <bt_smp_start_security+0x20>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   32e3e:	210b      	movs	r1, #11
   32e40:	1d20      	adds	r0, r4, #4
   32e42:	f7ff fdd8 	bl	329f6 <atomic_test_bit>
   32e46:	b128      	cbz	r0, 32e54 <__kernel_ram_size+0xc>
			return smp_send_pairing_req(conn);
   32e48:	4620      	mov	r0, r4
}
   32e4a:	b003      	add	sp, #12
   32e4c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			return smp_send_pairing_req(conn);
   32e50:	f7e9 b948 	b.w	1c0e4 <smp_send_pairing_req>
	if (!conn->le.keys) {
   32e54:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   32e58:	b983      	cbnz	r3, 32e7c <__kernel_ram_size+0x34>
						     conn->id, &conn->le.dst);
   32e5a:	f104 0790 	add.w	r7, r4, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   32e5e:	463a      	mov	r2, r7
   32e60:	2020      	movs	r0, #32
   32e62:	7a21      	ldrb	r1, [r4, #8]
   32e64:	f7ea fd44 	bl	1d8f0 <bt_keys_find>
   32e68:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
		if (!conn->le.keys) {
   32e6c:	b930      	cbnz	r0, 32e7c <__kernel_ram_size+0x34>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   32e6e:	463a      	mov	r2, r7
   32e70:	2004      	movs	r0, #4
   32e72:	7a21      	ldrb	r1, [r4, #8]
   32e74:	f7ea fd3c 	bl	1d8f0 <bt_keys_find>
   32e78:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	if (!conn->le.keys ||
   32e7c:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
   32e80:	2900      	cmp	r1, #0
   32e82:	d0e1      	beq.n	32e48 <__kernel_ram_size>
	    !(conn->le.keys->keys & (BT_KEYS_LTK | BT_KEYS_LTK_P256))) {
   32e84:	89cb      	ldrh	r3, [r1, #14]
	if (!conn->le.keys ||
   32e86:	f013 0f24 	tst.w	r3, #36	; 0x24
   32e8a:	d0dd      	beq.n	32e48 <__kernel_ram_size>
	if (conn->required_sec_level >= BT_SECURITY_L3 &&
   32e8c:	7aa2      	ldrb	r2, [r4, #10]
   32e8e:	2a02      	cmp	r2, #2
   32e90:	d909      	bls.n	32ea6 <__kernel_ram_size+0x5e>
   32e92:	7b48      	ldrb	r0, [r1, #13]
   32e94:	07c0      	lsls	r0, r0, #31
   32e96:	d5d7      	bpl.n	32e48 <__kernel_ram_size>
	if (conn->required_sec_level >= BT_SECURITY_L4 &&
   32e98:	2a03      	cmp	r2, #3
   32e9a:	d004      	beq.n	32ea6 <__kernel_ram_size+0x5e>
	    !((conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
   32e9c:	069b      	lsls	r3, r3, #26
   32e9e:	d5d3      	bpl.n	32e48 <__kernel_ram_size>
   32ea0:	7b0b      	ldrb	r3, [r1, #12]
   32ea2:	2b10      	cmp	r3, #16
   32ea4:	d1d0      	bne.n	32e48 <__kernel_ram_size>
		err = bt_conn_le_start_encryption(conn,
   32ea6:	7b0b      	ldrb	r3, [r1, #12]
   32ea8:	4620      	mov	r0, r4
   32eaa:	9300      	str	r3, [sp, #0]
   32eac:	f101 0218 	add.w	r2, r1, #24
   32eb0:	f101 031a 	add.w	r3, r1, #26
   32eb4:	3110      	adds	r1, #16
   32eb6:	f7fe fa56 	bl	31366 <bt_conn_le_start_encryption>
		if (err) {
   32eba:	4604      	mov	r4, r0
   32ebc:	2800      	cmp	r0, #0
   32ebe:	d1b5      	bne.n	32e2c <bt_smp_start_security+0x24>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   32ec0:	4628      	mov	r0, r5
   32ec2:	210b      	movs	r1, #11
   32ec4:	f7ff fdf2 	bl	32aac <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   32ec8:	2101      	movs	r1, #1
   32eca:	4630      	mov	r0, r6
   32ecc:	f7ff fdee 	bl	32aac <atomic_set_bit>
		return 0;
   32ed0:	e7ac      	b.n	32e2c <bt_smp_start_security+0x24>
		return -EINVAL;
   32ed2:	f06f 0415 	mvn.w	r4, #21
   32ed6:	e7a9      	b.n	32e2c <bt_smp_start_security+0x24>
			return -ENOTCONN;
   32ed8:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   32edc:	e7a6      	b.n	32e2c <bt_smp_start_security+0x24>

00032ede <bt_smp_dhkey_ready>:
{
   32ede:	b570      	push	{r4, r5, r6, lr}
   32ee0:	4604      	mov	r4, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   32ee2:	2008      	movs	r0, #8
   32ee4:	f7e8 fe58 	bl	1bb98 <smp_find>
	if (smp) {
   32ee8:	4605      	mov	r5, r0
   32eea:	b1e8      	cbz	r0, 32f28 <bt_smp_dhkey_ready+0x4a>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   32eec:	1d06      	adds	r6, r0, #4
   32eee:	2108      	movs	r1, #8
   32ef0:	4630      	mov	r0, r6
   32ef2:	f7ff fda7 	bl	32a44 <atomic_clear_bit>
	if (!dhkey) {
   32ef6:	2c00      	cmp	r4, #0
   32ef8:	d03c      	beq.n	32f74 <bt_smp_dhkey_ready+0x96>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   32efa:	2107      	movs	r1, #7
   32efc:	f7ff fda2 	bl	32a44 <atomic_clear_bit>
   32f00:	4623      	mov	r3, r4
   32f02:	f105 0297 	add.w	r2, r5, #151	; 0x97
   32f06:	f104 0120 	add.w	r1, r4, #32
   32f0a:	f853 0b04 	ldr.w	r0, [r3], #4
   32f0e:	428b      	cmp	r3, r1
   32f10:	f842 0b04 	str.w	r0, [r2], #4
   32f14:	d1f9      	bne.n	32f0a <bt_smp_dhkey_ready+0x2c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   32f16:	210a      	movs	r1, #10
   32f18:	4630      	mov	r0, r6
   32f1a:	f7ff fd6c 	bl	329f6 <atomic_test_bit>
   32f1e:	b170      	cbz	r0, 32f3e <bt_smp_dhkey_ready+0x60>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   32f20:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   32f22:	4630      	mov	r0, r6
   32f24:	f7ff fdc2 	bl	32aac <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   32f28:	2007      	movs	r0, #7
   32f2a:	f7e8 fe35 	bl	1bb98 <smp_find>
		if (smp) {
   32f2e:	4604      	mov	r4, r0
   32f30:	b310      	cbz	r0, 32f78 <bt_smp_dhkey_ready+0x9a>
			err = smp_dhkey_generate(smp);
   32f32:	f7e8 ff77 	bl	1be24 <smp_dhkey_generate>
			if (err) {
   32f36:	4601      	mov	r1, r0
   32f38:	b1f0      	cbz	r0, 32f78 <bt_smp_dhkey_ready+0x9a>
				smp_error(smp, err);
   32f3a:	4620      	mov	r0, r4
   32f3c:	e017      	b.n	32f6e <bt_smp_dhkey_ready+0x90>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   32f3e:	2110      	movs	r1, #16
   32f40:	4630      	mov	r0, r6
   32f42:	f7ff fd58 	bl	329f6 <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   32f46:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   32f48:	2800      	cmp	r0, #0
   32f4a:	d1ea      	bne.n	32f22 <bt_smp_dhkey_ready+0x44>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   32f4c:	4630      	mov	r0, r6
   32f4e:	f7ff fd52 	bl	329f6 <atomic_test_bit>
   32f52:	2800      	cmp	r0, #0
   32f54:	d0e8      	beq.n	32f28 <bt_smp_dhkey_ready+0x4a>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   32f56:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   32f5a:	78db      	ldrb	r3, [r3, #3]
   32f5c:	2b00      	cmp	r3, #0
   32f5e:	d1e3      	bne.n	32f28 <bt_smp_dhkey_ready+0x4a>
			return compute_and_send_central_dhcheck(smp);
   32f60:	4628      	mov	r0, r5
   32f62:	f7e9 fbcd 	bl	1c700 <compute_and_send_central_dhcheck>
		if (err) {
   32f66:	4601      	mov	r1, r0
   32f68:	2800      	cmp	r0, #0
   32f6a:	d0dd      	beq.n	32f28 <bt_smp_dhkey_ready+0x4a>
			smp_error(smp, err);
   32f6c:	4628      	mov	r0, r5
   32f6e:	f7e9 ffd1 	bl	1cf14 <smp_error>
   32f72:	e7d9      	b.n	32f28 <bt_smp_dhkey_ready+0x4a>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   32f74:	210b      	movs	r1, #11
   32f76:	e7f9      	b.n	32f6c <bt_smp_dhkey_ready+0x8e>
}
   32f78:	bd70      	pop	{r4, r5, r6, pc}

00032f7a <bt_smp_disconnected>:
{
   32f7a:	b570      	push	{r4, r5, r6, lr}
   32f7c:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   32f7e:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   32f82:	f850 3b34 	ldr.w	r3, [r0], #52
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   32f86:	3ce8      	subs	r4, #232	; 0xe8
	struct bt_keys *keys = chan->conn->le.keys;
   32f88:	f8d3 50bc 	ldr.w	r5, [r3, #188]	; 0xbc
	(void)k_work_cancel_delayable(&smp->work);
   32f8c:	f7f7 f8a4 	bl	2a0d8 <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   32f90:	2103      	movs	r1, #3
   32f92:	4620      	mov	r0, r4
   32f94:	f7ff fd2f 	bl	329f6 <atomic_test_bit>
   32f98:	b1a0      	cbz	r0, 32fc4 <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   32f9a:	2108      	movs	r1, #8
   32f9c:	4630      	mov	r0, r6
   32f9e:	f7e9 ff1b 	bl	1cdd8 <smp_pairing_complete>
	if (keys) {
   32fa2:	b13d      	cbz	r5, 32fb4 <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   32fa4:	89eb      	ldrh	r3, [r5, #14]
   32fa6:	b113      	cbz	r3, 32fae <bt_smp_disconnected+0x34>
   32fa8:	7b6b      	ldrb	r3, [r5, #13]
   32faa:	079b      	lsls	r3, r3, #30
   32fac:	d502      	bpl.n	32fb4 <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   32fae:	4628      	mov	r0, r5
   32fb0:	f7ea fd7e 	bl	1dab0 <bt_keys_clear>
__ssp_bos_icheck3(memset, void *, int)
   32fb4:	4630      	mov	r0, r6
}
   32fb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   32fba:	f44f 72ac 	mov.w	r2, #344	; 0x158
   32fbe:	2100      	movs	r1, #0
   32fc0:	f003 bad2 	b.w	36568 <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   32fc4:	2101      	movs	r1, #1
   32fc6:	4620      	mov	r0, r4
   32fc8:	f7ff fd15 	bl	329f6 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   32fcc:	2800      	cmp	r0, #0
   32fce:	d1e4      	bne.n	32f9a <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   32fd0:	210f      	movs	r1, #15
   32fd2:	4620      	mov	r0, r4
   32fd4:	f7ff fd0f 	bl	329f6 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   32fd8:	2800      	cmp	r0, #0
   32fda:	d1de      	bne.n	32f9a <bt_smp_disconnected+0x20>
   32fdc:	e7e1      	b.n	32fa2 <bt_smp_disconnected+0x28>

00032fde <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   32fde:	b510      	push	{r4, lr}
   32fe0:	1e43      	subs	r3, r0, #1
   32fe2:	f100 0210 	add.w	r2, r0, #16
   32fe6:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   32fe8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   32fec:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   32ff0:	4283      	cmp	r3, r0
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   32ff2:	701c      	strb	r4, [r3, #0]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   32ff4:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   32ff6:	d1f7      	bne.n	32fe8 <sys_mem_swap.constprop.0+0xa>
	}
}
   32ff8:	bd10      	pop	{r4, pc}

00032ffa <bt_crypto_aes_cmac>:
{
   32ffa:	b570      	push	{r4, r5, r6, lr}
   32ffc:	b0c2      	sub	sp, #264	; 0x108
   32ffe:	460d      	mov	r5, r1
   33000:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   33002:	4601      	mov	r1, r0
   33004:	aa16      	add	r2, sp, #88	; 0x58
   33006:	4668      	mov	r0, sp
{
   33008:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   3300a:	f7fd fb3a 	bl	30682 <tc_cmac_setup>
   3300e:	b918      	cbnz	r0, 33018 <bt_crypto_aes_cmac+0x1e>
		return -EIO;
   33010:	f06f 0004 	mvn.w	r0, #4
}
   33014:	b042      	add	sp, #264	; 0x108
   33016:	bd70      	pop	{r4, r5, r6, pc}
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   33018:	4632      	mov	r2, r6
   3301a:	4629      	mov	r1, r5
   3301c:	4668      	mov	r0, sp
   3301e:	f7fd fb5b 	bl	306d8 <tc_cmac_update>
   33022:	2800      	cmp	r0, #0
   33024:	d0f4      	beq.n	33010 <bt_crypto_aes_cmac+0x16>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   33026:	4669      	mov	r1, sp
   33028:	4620      	mov	r0, r4
   3302a:	f7fd fbbf 	bl	307ac <tc_cmac_final>
   3302e:	2800      	cmp	r0, #0
   33030:	d0ee      	beq.n	33010 <bt_crypto_aes_cmac+0x16>
	return 0;
   33032:	2000      	movs	r0, #0
   33034:	e7ee      	b.n	33014 <bt_crypto_aes_cmac+0x1a>

00033036 <bt_crypto_f4>:
{
   33036:	b5f0      	push	{r4, r5, r6, r7, lr}
   33038:	460e      	mov	r6, r1
   3303a:	4614      	mov	r4, r2
   3303c:	461d      	mov	r5, r3
   3303e:	b097      	sub	sp, #92	; 0x5c
	sys_memcpy_swap(m, u, 32);
   33040:	4601      	mov	r1, r0
   33042:	2220      	movs	r2, #32
   33044:	a805      	add	r0, sp, #20
{
   33046:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   33048:	f7ea fe90 	bl	1dd6c <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   3304c:	2220      	movs	r2, #32
   3304e:	4631      	mov	r1, r6
   33050:	a80d      	add	r0, sp, #52	; 0x34
   33052:	f7ea fe8b 	bl	1dd6c <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   33056:	4621      	mov	r1, r4
   33058:	2210      	movs	r2, #16
   3305a:	a801      	add	r0, sp, #4
	m[64] = z;
   3305c:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   33060:	f7ea fe84 	bl	1dd6c <sys_memcpy_swap>
	err = bt_crypto_aes_cmac(xs, m, sizeof(m), res);
   33064:	463b      	mov	r3, r7
   33066:	2241      	movs	r2, #65	; 0x41
   33068:	a905      	add	r1, sp, #20
   3306a:	a801      	add	r0, sp, #4
   3306c:	f7ff ffc5 	bl	32ffa <bt_crypto_aes_cmac>
	if (err) {
   33070:	4604      	mov	r4, r0
   33072:	b910      	cbnz	r0, 3307a <bt_crypto_f4+0x44>
	sys_mem_swap(res, 16);
   33074:	4638      	mov	r0, r7
   33076:	f7ff ffb2 	bl	32fde <sys_mem_swap.constprop.0>
}
   3307a:	4620      	mov	r0, r4
   3307c:	b017      	add	sp, #92	; 0x5c
   3307e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00033080 <bt_crypto_f6>:
{
   33080:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   33084:	4616      	mov	r6, r2
   33086:	461d      	mov	r5, r3
   33088:	b097      	sub	sp, #92	; 0x5c
   3308a:	4604      	mov	r4, r0
   3308c:	e9dd 981f 	ldrd	r9, r8, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   33090:	2210      	movs	r2, #16
   33092:	a805      	add	r0, sp, #20
{
   33094:	9f21      	ldr	r7, [sp, #132]	; 0x84
	sys_memcpy_swap(m, n1, 16);
   33096:	f7ea fe69 	bl	1dd6c <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   3309a:	2210      	movs	r2, #16
   3309c:	4631      	mov	r1, r6
   3309e:	a809      	add	r0, sp, #36	; 0x24
   330a0:	f7ea fe64 	bl	1dd6c <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   330a4:	2210      	movs	r2, #16
   330a6:	4629      	mov	r1, r5
   330a8:	a80d      	add	r0, sp, #52	; 0x34
   330aa:	f7ea fe5f 	bl	1dd6c <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   330ae:	2203      	movs	r2, #3
   330b0:	991e      	ldr	r1, [sp, #120]	; 0x78
   330b2:	a811      	add	r0, sp, #68	; 0x44
   330b4:	f7ea fe5a 	bl	1dd6c <sys_memcpy_swap>
	m[51] = a1->type;
   330b8:	4649      	mov	r1, r9
   330ba:	f811 3b01 	ldrb.w	r3, [r1], #1
	memcpy(m + 52, a1->a.val, 6);
   330be:	f8d9 0001 	ldr.w	r0, [r9, #1]
	m[51] = a1->type;
   330c2:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   330c6:	888b      	ldrh	r3, [r1, #4]
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   330c8:	2206      	movs	r2, #6
	memcpy(m + 52, a1->a.val, 6);
   330ca:	9012      	str	r0, [sp, #72]	; 0x48
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   330cc:	a812      	add	r0, sp, #72	; 0x48
	memcpy(m + 52, a1->a.val, 6);
   330ce:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   330d2:	f7ea fe4b 	bl	1dd6c <sys_memcpy_swap>
	m[58] = a2->type;
   330d6:	4641      	mov	r1, r8
   330d8:	f811 3b01 	ldrb.w	r3, [r1], #1
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   330dc:	2206      	movs	r2, #6
	m[58] = a2->type;
   330de:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   330e2:	f8d8 3001 	ldr.w	r3, [r8, #1]
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   330e6:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
	memcpy(m + 59, a2->a.val, 6);
   330ea:	f8cd 304f 	str.w	r3, [sp, #79]	; 0x4f
   330ee:	888b      	ldrh	r3, [r1, #4]
   330f0:	f8ad 3053 	strh.w	r3, [sp, #83]	; 0x53
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   330f4:	f7ea fe3a 	bl	1dd6c <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   330f8:	4621      	mov	r1, r4
   330fa:	2210      	movs	r2, #16
   330fc:	a801      	add	r0, sp, #4
   330fe:	f7ea fe35 	bl	1dd6c <sys_memcpy_swap>
	err = bt_crypto_aes_cmac(ws, m, sizeof(m), check);
   33102:	463b      	mov	r3, r7
   33104:	2241      	movs	r2, #65	; 0x41
   33106:	a905      	add	r1, sp, #20
   33108:	a801      	add	r0, sp, #4
   3310a:	f7ff ff76 	bl	32ffa <bt_crypto_aes_cmac>
	if (err) {
   3310e:	4604      	mov	r4, r0
   33110:	b910      	cbnz	r0, 33118 <bt_crypto_f6+0x98>
	sys_mem_swap(check, 16);
   33112:	4638      	mov	r0, r7
   33114:	f7ff ff63 	bl	32fde <sys_mem_swap.constprop.0>
}
   33118:	4620      	mov	r0, r4
   3311a:	b017      	add	sp, #92	; 0x5c
   3311c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00033120 <fixed_data_unref>:
}
   33120:	4770      	bx	lr

00033122 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   33122:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   33124:	6849      	ldr	r1, [r1, #4]
   33126:	6809      	ldr	r1, [r1, #0]
   33128:	f7ea bf14 	b.w	1df54 <net_buf_alloc_len>

0003312c <net_buf_get>:
	return z_impl_k_queue_get(queue, timeout);
   3312c:	f7f6 ba52 	b.w	295d4 <z_impl_k_queue_get>

00033130 <net_buf_simple_init_with_data>:
	buf->size  = size;
   33130:	b292      	uxth	r2, r2
	buf->__buf = data;
   33132:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   33134:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   33136:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   33138:	8082      	strh	r2, [r0, #4]
}
   3313a:	4770      	bx	lr

0003313c <net_buf_simple_pull_u8>:
{
   3313c:	b510      	push	{r4, lr}
	val = buf->data[0];
   3313e:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   33140:	2101      	movs	r1, #1
	val = buf->data[0];
   33142:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   33144:	f7eb f96c 	bl	1e420 <net_buf_simple_pull>
}
   33148:	4620      	mov	r0, r4
   3314a:	bd10      	pop	{r4, pc}

0003314c <net_buf_simple_pull_le16>:
{
   3314c:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   3314e:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   33150:	2102      	movs	r1, #2
	val = UNALIGNED_GET((uint16_t *)buf->data);
   33152:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   33154:	f7eb f964 	bl	1e420 <net_buf_simple_pull>
}
   33158:	4620      	mov	r0, r4
   3315a:	bd10      	pop	{r4, pc}

0003315c <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   3315c:	6802      	ldr	r2, [r0, #0]
   3315e:	6880      	ldr	r0, [r0, #8]
}
   33160:	1a10      	subs	r0, r2, r0
   33162:	4770      	bx	lr

00033164 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   33164:	8883      	ldrh	r3, [r0, #4]
   33166:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   33168:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   3316a:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   3316c:	6803      	ldr	r3, [r0, #0]
   3316e:	1a5b      	subs	r3, r3, r1
}
   33170:	1ad0      	subs	r0, r2, r3
   33172:	4770      	bx	lr

00033174 <net_buf_simple_add_mem>:
{
   33174:	b538      	push	{r3, r4, r5, lr}
   33176:	460d      	mov	r5, r1
   33178:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   3317a:	4611      	mov	r1, r2
   3317c:	f7eb f98c 	bl	1e498 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   33180:	4622      	mov	r2, r4
   33182:	4629      	mov	r1, r5
}
   33184:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   33188:	f003 b9ce 	b.w	36528 <memcpy>

0003318c <net_buf_simple_add_u8>:
{
   3318c:	b510      	push	{r4, lr}
   3318e:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   33190:	2101      	movs	r1, #1
   33192:	f7eb f981 	bl	1e498 <net_buf_simple_add>
	*u8 = val;
   33196:	7004      	strb	r4, [r0, #0]
}
   33198:	bd10      	pop	{r4, pc}

0003319a <net_buf_simple_add_le16>:
{
   3319a:	b510      	push	{r4, lr}
   3319c:	460c      	mov	r4, r1
	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
   3319e:	2102      	movs	r1, #2
   331a0:	f7eb f97a 	bl	1e498 <net_buf_simple_add>
	dst[0] = val;
   331a4:	7004      	strb	r4, [r0, #0]
	dst[1] = val >> 8;
   331a6:	0a24      	lsrs	r4, r4, #8
   331a8:	7044      	strb	r4, [r0, #1]
}
   331aa:	bd10      	pop	{r4, pc}

000331ac <offloaded_netdev_if_enable>:
   331ac:	6803      	ldr	r3, [r0, #0]
#include <zephyr/net/net_if.h>
#include <zephyr/net/offloaded_netdev.h>

static inline int offloaded_netdev_if_enable(struct net_if *iface, bool state)
{
	const struct offloaded_if_api *off_if = net_if_get_device(iface)->api;
   331ae:	681b      	ldr	r3, [r3, #0]
   331b0:	689b      	ldr	r3, [r3, #8]

	if (!off_if || !(off_if->enable)) {
   331b2:	b113      	cbz	r3, 331ba <offloaded_netdev_if_enable+0xe>
   331b4:	685b      	ldr	r3, [r3, #4]
   331b6:	b103      	cbz	r3, 331ba <offloaded_netdev_if_enable+0xe>
		return 0;
	}

	return off_if->enable(iface, state);
   331b8:	4718      	bx	r3
}
   331ba:	2000      	movs	r0, #0
   331bc:	4770      	bx	lr

000331be <net_init>:

	return status;
}

static int net_init(void)
{
   331be:	b508      	push	{r3, lr}
	net_if_init();
   331c0:	f7eb fa6a 	bl	1e698 <net_if_init>
	net_if_post_init();
   331c4:	f7eb faa6 	bl	1e714 <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   331c8:	2000      	movs	r0, #0
   331ca:	bd08      	pop	{r3, pc}

000331cc <net_if_l2>:
	if (!iface || !iface->if_dev) {
   331cc:	b110      	cbz	r0, 331d4 <net_if_l2+0x8>
   331ce:	6800      	ldr	r0, [r0, #0]
   331d0:	b100      	cbz	r0, 331d4 <net_if_l2+0x8>
	return iface->if_dev->l2;
   331d2:	6840      	ldr	r0, [r0, #4]
}
   331d4:	4770      	bx	lr

000331d6 <net_if_flag_is_set>:
	if (iface == NULL) {
   331d6:	b130      	cbz	r0, 331e6 <net_if_flag_is_set+0x10>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   331d8:	6803      	ldr	r3, [r0, #0]
   331da:	330c      	adds	r3, #12
   331dc:	e8d3 0faf 	lda	r0, [r3]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   331e0:	4108      	asrs	r0, r1
   331e2:	f000 0001 	and.w	r0, r0, #1
}
   331e6:	4770      	bx	lr

000331e8 <l2_flags_get.isra.0>:
static enum net_l2_flags l2_flags_get(struct net_if *iface)
   331e8:	b510      	push	{r4, lr}
   331ea:	4603      	mov	r3, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   331ec:	f7ff ffee 	bl	331cc <net_if_l2>
   331f0:	b128      	cbz	r0, 331fe <l2_flags_get.isra.0+0x16>
   331f2:	68c2      	ldr	r2, [r0, #12]
   331f4:	b11a      	cbz	r2, 331fe <l2_flags_get.isra.0+0x16>
}
   331f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   331fa:	4618      	mov	r0, r3
   331fc:	4710      	bx	r2
}
   331fe:	bd10      	pop	{r4, pc}

00033200 <net_if_up>:
{
   33200:	b538      	push	{r3, r4, r5, lr}
   33202:	4605      	mov	r5, r0
	k_mutex_lock(&lock, K_FOREVER);
   33204:	f04f 31ff 	mov.w	r1, #4294967295
   33208:	f04f 30ff 	mov.w	r0, #4294967295
   3320c:	f7eb f9b0 	bl	1e570 <k_mutex_lock.constprop.0.isra.0>
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   33210:	2100      	movs	r1, #0
   33212:	4628      	mov	r0, r5
   33214:	f7ff ffdf 	bl	331d6 <net_if_flag_is_set>
   33218:	b9b0      	cbnz	r0, 33248 <net_if_up+0x48>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   3321a:	4628      	mov	r0, r5
   3321c:	f7ff ffd6 	bl	331cc <net_if_l2>
   33220:	4604      	mov	r4, r0
   33222:	b130      	cbz	r0, 33232 <net_if_up+0x32>
   33224:	6884      	ldr	r4, [r0, #8]
   33226:	b124      	cbz	r4, 33232 <net_if_up+0x32>
	status = net_if_l2(iface)->enable(iface, true);
   33228:	2101      	movs	r1, #1
   3322a:	4628      	mov	r0, r5
   3322c:	47a0      	blx	r4
	if (status < 0) {
   3322e:	1e04      	subs	r4, r0, #0
   33230:	db06      	blt.n	33240 <net_if_up+0x40>
	net_if_flag_set(iface, NET_IF_UP);
   33232:	4628      	mov	r0, r5
   33234:	2100      	movs	r1, #0
   33236:	f7eb f94d 	bl	1e4d4 <net_if_flag_set>
	update_operational_state(iface);
   3323a:	4628      	mov	r0, r5
   3323c:	f7eb f9a6 	bl	1e58c <update_operational_state>
	k_mutex_unlock(&lock);
   33240:	f7eb f99e 	bl	1e580 <k_mutex_unlock.constprop.0.isra.0>
}
   33244:	4620      	mov	r0, r4
   33246:	bd38      	pop	{r3, r4, r5, pc}
		status = -EALREADY;
   33248:	f06f 0477 	mvn.w	r4, #119	; 0x77
   3324c:	e7f8      	b.n	33240 <net_if_up+0x40>

0003324e <net_byte_to_hex>:
{
   3324e:	b510      	push	{r4, lr}
   33250:	4604      	mov	r4, r0
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   33252:	0908      	lsrs	r0, r1, #4
		if (i == 0 && !pad && !val) {
   33254:	b1b3      	cbz	r3, 33284 <net_byte_to_hex+0x36>
		if (val < 10) {
   33256:	2809      	cmp	r0, #9
   33258:	d912      	bls.n	33280 <net_byte_to_hex+0x32>
			*ptr++ = (char) (val - 10 + base);
   3325a:	f1a2 030a 	sub.w	r3, r2, #10
   3325e:	4418      	add	r0, r3
   33260:	b2c0      	uxtb	r0, r0
   33262:	f804 0b01 	strb.w	r0, [r4], #1
	*ptr = '\0';
   33266:	2300      	movs	r3, #0
   33268:	f001 010f 	and.w	r1, r1, #15
		if (val < 10) {
   3326c:	2909      	cmp	r1, #9
			*ptr++ = (char) (val - 10 + base);
   3326e:	bf83      	ittte	hi
   33270:	3a0a      	subhi	r2, #10
   33272:	1889      	addhi	r1, r1, r2
   33274:	b2c9      	uxtbhi	r1, r1
			*ptr++ = (char) (val + '0');
   33276:	3130      	addls	r1, #48	; 0x30
   33278:	7021      	strb	r1, [r4, #0]
	*ptr = '\0';
   3327a:	7063      	strb	r3, [r4, #1]
			*ptr++ = (char) (val - 10 + base);
   3327c:	1c60      	adds	r0, r4, #1
}
   3327e:	bd10      	pop	{r4, pc}
			*ptr++ = (char) (val + '0');
   33280:	3030      	adds	r0, #48	; 0x30
   33282:	e7ee      	b.n	33262 <net_byte_to_hex+0x14>
		if (i == 0 && !pad && !val) {
   33284:	2800      	cmp	r0, #0
   33286:	d1e6      	bne.n	33256 <net_byte_to_hex+0x8>
   33288:	e7ed      	b.n	33266 <net_byte_to_hex+0x18>

0003328a <unpack_uint16>:
 */
static int unpack_uint16(struct buf_ctx *buf, uint16_t *val)
{
	NET_DBG(">> cur:%p, end:%p", (void *)buf->cur, (void *)buf->end);

	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   3328a:	e9d0 3200 	ldrd	r3, r2, [r0]
   3328e:	1ad2      	subs	r2, r2, r3
   33290:	2a01      	cmp	r2, #1
   33292:	d90d      	bls.n	332b0 <unpack_uint16+0x26>
		return -EINVAL;
	}

	*val = *(buf->cur++) << 8; /* MSB */
   33294:	1c5a      	adds	r2, r3, #1
   33296:	6002      	str	r2, [r0, #0]
   33298:	781b      	ldrb	r3, [r3, #0]
   3329a:	021b      	lsls	r3, r3, #8
   3329c:	800b      	strh	r3, [r1, #0]
	*val |= *(buf->cur++); /* LSB */
   3329e:	6803      	ldr	r3, [r0, #0]
   332a0:	1c5a      	adds	r2, r3, #1
   332a2:	6002      	str	r2, [r0, #0]
   332a4:	781b      	ldrb	r3, [r3, #0]
   332a6:	880a      	ldrh	r2, [r1, #0]

	NET_DBG("<< val:%04x", *val);

	return 0;
   332a8:	2000      	movs	r0, #0
	*val |= *(buf->cur++); /* LSB */
   332aa:	4313      	orrs	r3, r2
   332ac:	800b      	strh	r3, [r1, #0]
	return 0;
   332ae:	4770      	bx	lr
		return -EINVAL;
   332b0:	f06f 0015 	mvn.w	r0, #21
}
   332b4:	4770      	bx	lr

000332b6 <fixed_header_decode>:
	return 0;
}

int fixed_header_decode(struct buf_ctx *buf, uint8_t *type_and_flags,
			uint32_t *length)
{
   332b6:	b510      	push	{r4, lr}
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   332b8:	e9d0 3400 	ldrd	r3, r4, [r0]
   332bc:	429c      	cmp	r4, r3
   332be:	d020      	beq.n	33302 <fixed_header_decode+0x4c>
	*val = *(buf->cur++);
   332c0:	1c5c      	adds	r4, r3, #1
   332c2:	6004      	str	r4, [r0, #0]
   332c4:	781b      	ldrb	r3, [r3, #0]
   332c6:	700b      	strb	r3, [r1, #0]
	*length = 0U;
   332c8:	2300      	movs	r3, #0
   332ca:	6013      	str	r3, [r2, #0]
		if (buf->cur >= buf->end) {
   332cc:	e9d0 1400 	ldrd	r1, r4, [r0]
   332d0:	42a1      	cmp	r1, r4
   332d2:	d219      	bcs.n	33308 <fixed_header_decode+0x52>
		*length += ((uint32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   332d4:	7809      	ldrb	r1, [r1, #0]
   332d6:	6814      	ldr	r4, [r2, #0]
   332d8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
								<< shift;
   332dc:	4099      	lsls	r1, r3
		*length += ((uint32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   332de:	440c      	add	r4, r1
   332e0:	6014      	str	r4, [r2, #0]
	} while ((*(buf->cur++) & MQTT_LENGTH_CONTINUATION_BIT) != 0U);
   332e2:	6801      	ldr	r1, [r0, #0]
   332e4:	1c4c      	adds	r4, r1, #1
   332e6:	6004      	str	r4, [r0, #0]
   332e8:	f991 1000 	ldrsb.w	r1, [r1]
   332ec:	2900      	cmp	r1, #0
   332ee:	db05      	blt.n	332fc <fixed_header_decode+0x46>
	if (*length > MQTT_MAX_PAYLOAD_SIZE) {
   332f0:	6813      	ldr	r3, [r2, #0]
   332f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   332f6:	d204      	bcs.n	33302 <fixed_header_decode+0x4c>
	return 0;
   332f8:	2000      	movs	r0, #0
   332fa:	e004      	b.n	33306 <fixed_header_decode+0x50>
	} while ((*(buf->cur++) & MQTT_LENGTH_CONTINUATION_BIT) != 0U);
   332fc:	3307      	adds	r3, #7
		if (bytes >= MQTT_MAX_LENGTH_BYTES) {
   332fe:	2b1c      	cmp	r3, #28
   33300:	d1e4      	bne.n	332cc <fixed_header_decode+0x16>
			return -EINVAL;
   33302:	f06f 0015 	mvn.w	r0, #21
	if (err_code != 0) {
		return err_code;
	}

	return packet_length_decode(buf, length);
}
   33306:	bd10      	pop	{r4, pc}
			return -EAGAIN;
   33308:	f06f 000a 	mvn.w	r0, #10
   3330c:	e7fb      	b.n	33306 <fixed_header_decode+0x50>

0003330e <connect_ack_decode>:

int connect_ack_decode(const struct mqtt_client *client, struct buf_ctx *buf,
		       struct mqtt_connack_param *param)
{
   3330e:	b570      	push	{r4, r5, r6, lr}
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   33310:	e9d1 3600 	ldrd	r3, r6, [r1]
   33314:	429e      	cmp	r6, r3
   33316:	d102      	bne.n	3331e <connect_ack_decode+0x10>
		return -EINVAL;
   33318:	f06f 0015 	mvn.w	r0, #21
	}

	param->return_code = (enum mqtt_conn_return_code)ret_code;

	return 0;
}
   3331c:	bd70      	pop	{r4, r5, r6, pc}
	*val = *(buf->cur++);
   3331e:	1c5d      	adds	r5, r3, #1
   33320:	600d      	str	r5, [r1, #0]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   33322:	42ae      	cmp	r6, r5
	*val = *(buf->cur++);
   33324:	781c      	ldrb	r4, [r3, #0]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   33326:	d0f7      	beq.n	33318 <connect_ack_decode+0xa>
	*val = *(buf->cur++);
   33328:	1c9d      	adds	r5, r3, #2
   3332a:	600d      	str	r5, [r1, #0]
   3332c:	7859      	ldrb	r1, [r3, #1]
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   3332e:	f890 305e 	ldrb.w	r3, [r0, #94]	; 0x5e
	return 0;
   33332:	2000      	movs	r0, #0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   33334:	2b04      	cmp	r3, #4
			flags & MQTT_CONNACK_FLAG_SESSION_PRESENT;
   33336:	bf04      	itt	eq
   33338:	f004 0301 	andeq.w	r3, r4, #1
		param->session_present_flag =
   3333c:	7013      	strbeq	r3, [r2, #0]
	param->return_code = (enum mqtt_conn_return_code)ret_code;
   3333e:	7051      	strb	r1, [r2, #1]
	return 0;
   33340:	e7ec      	b.n	3331c <connect_ack_decode+0xe>

00033342 <publish_decode>:

int publish_decode(uint8_t flags, uint32_t var_length, struct buf_ctx *buf,
		   struct mqtt_publish_param *param)
{
   33342:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   33344:	461c      	mov	r4, r3
   33346:	4615      	mov	r5, r2
	int err_code;
	uint32_t var_header_length;

	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   33348:	7da2      	ldrb	r2, [r4, #22]
   3334a:	0043      	lsls	r3, r0, #1
   3334c:	f003 0302 	and.w	r3, r3, #2
   33350:	f022 0203 	bic.w	r2, r2, #3
	param->retain_flag = flags & MQTT_HEADER_RETAIN_MASK;
	param->message.topic.qos = ((flags & MQTT_HEADER_QOS_MASK) >> 1);
   33354:	f3c0 0041 	ubfx	r0, r0, #1, #2
	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   33358:	4313      	orrs	r3, r2
{
   3335a:	460e      	mov	r6, r1
	param->message.topic.qos = ((flags & MQTT_HEADER_QOS_MASK) >> 1);
   3335c:	7220      	strb	r0, [r4, #8]
	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   3335e:	75a3      	strb	r3, [r4, #22]
	err_code = unpack_uint16(buf, &utf8_strlen);
   33360:	4628      	mov	r0, r5
   33362:	f10d 0106 	add.w	r1, sp, #6
   33366:	f7ff ff90 	bl	3328a <unpack_uint16>
	if (err_code != 0) {
   3336a:	b9d8      	cbnz	r0, 333a4 <publish_decode+0x62>
	if ((buf->end - buf->cur) < utf8_strlen) {
   3336c:	e9d5 1200 	ldrd	r1, r2, [r5]
   33370:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   33374:	1a52      	subs	r2, r2, r1
   33376:	429a      	cmp	r2, r3
   33378:	db12      	blt.n	333a0 <publish_decode+0x5e>
	str->size = utf8_strlen;
   3337a:	6063      	str	r3, [r4, #4]
	if (utf8_strlen) {
   3337c:	b173      	cbz	r3, 3339c <publish_decode+0x5a>
		str->utf8 = buf->cur;
   3337e:	682a      	ldr	r2, [r5, #0]
   33380:	6022      	str	r2, [r4, #0]
		buf->cur += utf8_strlen;
   33382:	441a      	add	r2, r3
   33384:	602a      	str	r2, [r5, #0]
		return err_code;
	}

	var_header_length = param->message.topic.topic.size + sizeof(uint16_t);

	if (param->message.topic.qos > MQTT_QOS_0_AT_MOST_ONCE) {
   33386:	7a23      	ldrb	r3, [r4, #8]
	var_header_length = param->message.topic.topic.size + sizeof(uint16_t);
   33388:	6867      	ldr	r7, [r4, #4]
	if (param->message.topic.qos > MQTT_QOS_0_AT_MOST_ONCE) {
   3338a:	b96b      	cbnz	r3, 333a8 <publish_decode+0x66>
	var_header_length = param->message.topic.topic.size + sizeof(uint16_t);
   3338c:	1cbb      	adds	r3, r7, #2
		}

		var_header_length += sizeof(uint16_t);
	}

	if (var_length < var_header_length) {
   3338e:	429e      	cmp	r6, r3
   33390:	d306      	bcc.n	333a0 <publish_decode+0x5e>
			 "than total length (%u)", var_header_length,
			 var_length);
		return -EINVAL;
	}

	param->message.payload.data = NULL;
   33392:	2000      	movs	r0, #0
	param->message.payload.len = var_length - var_header_length;
   33394:	1af6      	subs	r6, r6, r3
	param->message.payload.data = NULL;
   33396:	60e0      	str	r0, [r4, #12]
	param->message.payload.len = var_length - var_header_length;
   33398:	6126      	str	r6, [r4, #16]

	return 0;
   3339a:	e003      	b.n	333a4 <publish_decode+0x62>
		str->utf8 = NULL;
   3339c:	6023      	str	r3, [r4, #0]
	if (err_code != 0) {
   3339e:	e7f2      	b.n	33386 <publish_decode+0x44>
		return -EINVAL;
   333a0:	f06f 0015 	mvn.w	r0, #21
}
   333a4:	b003      	add	sp, #12
   333a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err_code = unpack_uint16(buf, &param->message_id);
   333a8:	4628      	mov	r0, r5
   333aa:	f104 0114 	add.w	r1, r4, #20
   333ae:	f7ff ff6c 	bl	3328a <unpack_uint16>
		if (err_code != 0) {
   333b2:	2800      	cmp	r0, #0
   333b4:	d1f6      	bne.n	333a4 <publish_decode+0x62>
		var_header_length += sizeof(uint16_t);
   333b6:	1d3b      	adds	r3, r7, #4
   333b8:	e7e9      	b.n	3338e <publish_decode+0x4c>

000333ba <publish_ack_decode>:

int publish_ack_decode(struct buf_ctx *buf, struct mqtt_puback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   333ba:	f7ff bf66 	b.w	3328a <unpack_uint16>

000333be <publish_receive_decode>:
}

int publish_receive_decode(struct buf_ctx *buf, struct mqtt_pubrec_param *param)
   333be:	f7ff bf64 	b.w	3328a <unpack_uint16>

000333c2 <publish_release_decode>:
{
	return unpack_uint16(buf, &param->message_id);
}

int publish_release_decode(struct buf_ctx *buf, struct mqtt_pubrel_param *param)
   333c2:	f7ff bf62 	b.w	3328a <unpack_uint16>

000333c6 <publish_complete_decode>:
{
	return unpack_uint16(buf, &param->message_id);
}

int publish_complete_decode(struct buf_ctx *buf,
   333c6:	f7ff bf60 	b.w	3328a <unpack_uint16>

000333ca <subscribe_ack_decode>:
{
	return unpack_uint16(buf, &param->message_id);
}

int subscribe_ack_decode(struct buf_ctx *buf, struct mqtt_suback_param *param)
{
   333ca:	b538      	push	{r3, r4, r5, lr}
   333cc:	4604      	mov	r4, r0
	int err_code;

	err_code = unpack_uint16(buf, &param->message_id);
   333ce:	f7ff ff5c 	bl	3328a <unpack_uint16>
	if (err_code != 0) {
   333d2:	b940      	cbnz	r0, 333e6 <subscribe_ack_decode+0x1c>
		return err_code;
	}

	return unpack_data(buf->end - buf->cur, buf, &param->return_codes);
   333d4:	e9d4 2300 	ldrd	r2, r3, [r4]
   333d8:	1a9b      	subs	r3, r3, r2
	str->len = length;
   333da:	608b      	str	r3, [r1, #8]
	if (length > 0) {
   333dc:	b123      	cbz	r3, 333e8 <subscribe_ack_decode+0x1e>
		str->data = buf->cur;
   333de:	6822      	ldr	r2, [r4, #0]
   333e0:	604a      	str	r2, [r1, #4]
		buf->cur += length;
   333e2:	441a      	add	r2, r3
   333e4:	6022      	str	r2, [r4, #0]
}
   333e6:	bd38      	pop	{r3, r4, r5, pc}
		str->data = NULL;
   333e8:	6048      	str	r0, [r1, #4]
   333ea:	e7fc      	b.n	333e6 <subscribe_ack_decode+0x1c>

000333ec <unsubscribe_ack_decode>:

int unsubscribe_ack_decode(struct buf_ctx *buf,
   333ec:	f7ff bf4d 	b.w	3328a <unpack_uint16>

000333f0 <pack_uint16>:
	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   333f0:	e9d1 3200 	ldrd	r3, r2, [r1]
   333f4:	1ad2      	subs	r2, r2, r3
   333f6:	2a01      	cmp	r2, #1
   333f8:	d909      	bls.n	3340e <pack_uint16+0x1e>
	*(buf->cur++) = (val >> 8) & 0xFF;
   333fa:	1c5a      	adds	r2, r3, #1
   333fc:	600a      	str	r2, [r1, #0]
   333fe:	0a02      	lsrs	r2, r0, #8
   33400:	701a      	strb	r2, [r3, #0]
	*(buf->cur++) = val & 0xFF;
   33402:	680b      	ldr	r3, [r1, #0]
   33404:	1c5a      	adds	r2, r3, #1
   33406:	600a      	str	r2, [r1, #0]
   33408:	7018      	strb	r0, [r3, #0]
	return 0;
   3340a:	2000      	movs	r0, #0
   3340c:	4770      	bx	lr
		return -ENOMEM;
   3340e:	f06f 000b 	mvn.w	r0, #11
}
   33412:	4770      	bx	lr

00033414 <pack_utf8_str>:
{
   33414:	b538      	push	{r3, r4, r5, lr}
   33416:	4605      	mov	r5, r0
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   33418:	e9d1 2300 	ldrd	r2, r3, [r1]
   3341c:	6840      	ldr	r0, [r0, #4]
   3341e:	1a9b      	subs	r3, r3, r2
   33420:	1c82      	adds	r2, r0, #2
   33422:	4293      	cmp	r3, r2
{
   33424:	460c      	mov	r4, r1
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   33426:	d30d      	bcc.n	33444 <pack_utf8_str+0x30>
	(void)pack_uint16(str->size, buf);
   33428:	b280      	uxth	r0, r0
   3342a:	f7ff ffe1 	bl	333f0 <pack_uint16>
   3342e:	e9d5 1200 	ldrd	r1, r2, [r5]
   33432:	6820      	ldr	r0, [r4, #0]
   33434:	f003 f878 	bl	36528 <memcpy>
	return 0;
   33438:	2000      	movs	r0, #0
	buf->cur += str->size;
   3343a:	6823      	ldr	r3, [r4, #0]
   3343c:	686a      	ldr	r2, [r5, #4]
   3343e:	4413      	add	r3, r2
   33440:	6023      	str	r3, [r4, #0]
}
   33442:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   33444:	f06f 000b 	mvn.w	r0, #11
   33448:	e7fb      	b.n	33442 <pack_utf8_str+0x2e>

0003344a <mqtt_encode_fixed_header>:
{
   3344a:	b570      	push	{r4, r5, r6, lr}
	uint32_t length = buf->cur - start;
   3344c:	6814      	ldr	r4, [r2, #0]
   3344e:	1a64      	subs	r4, r4, r1
	if (length > MQTT_MAX_PAYLOAD_SIZE) {
   33450:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   33454:	d227      	bcs.n	334a6 <mqtt_encode_fixed_header+0x5c>
   33456:	4625      	mov	r5, r4
   33458:	2600      	movs	r6, #0
	} while (length > 0);
   3345a:	09ed      	lsrs	r5, r5, #7
   3345c:	4633      	mov	r3, r6
   3345e:	f106 0601 	add.w	r6, r6, #1
   33462:	d1fa      	bne.n	3345a <mqtt_encode_fixed_header+0x10>
	fixed_header_length += sizeof(uint8_t);
   33464:	3302      	adds	r3, #2
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   33466:	6856      	ldr	r6, [r2, #4]
	buf->cur = start - fixed_header_length;
   33468:	b2db      	uxtb	r3, r3
   3346a:	425d      	negs	r5, r3
   3346c:	1acb      	subs	r3, r1, r3
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   3346e:	42b3      	cmp	r3, r6
	buf->cur = start - fixed_header_length;
   33470:	6013      	str	r3, [r2, #0]
	*(buf->cur++) = val;
   33472:	bf1e      	ittt	ne
   33474:	3301      	addne	r3, #1
   33476:	6013      	strne	r3, [r2, #0]
   33478:	5548      	strbne	r0, [r1, r5]
	return 0;
   3347a:	4620      	mov	r0, r4
			*(buf->cur) = length & MQTT_LENGTH_VALUE_MASK;
   3347c:	6813      	ldr	r3, [r2, #0]
   3347e:	f000 017f 	and.w	r1, r0, #127	; 0x7f
   33482:	7019      	strb	r1, [r3, #0]
			if (length > 0) {
   33484:	09c0      	lsrs	r0, r0, #7
   33486:	6813      	ldr	r3, [r2, #0]
   33488:	d105      	bne.n	33496 <mqtt_encode_fixed_header+0x4c>
			buf->cur++;
   3348a:	3301      	adds	r3, #1
	buf->cur = buf->cur - fixed_header_length;
   3348c:	441d      	add	r5, r3
	buf->end = buf->cur + length + fixed_header_length;
   3348e:	4423      	add	r3, r4
	buf->cur = buf->cur - fixed_header_length;
   33490:	6015      	str	r5, [r2, #0]
	buf->end = buf->cur + length + fixed_header_length;
   33492:	6053      	str	r3, [r2, #4]
}
   33494:	bd70      	pop	{r4, r5, r6, pc}
				*(buf->cur) |= MQTT_LENGTH_CONTINUATION_BIT;
   33496:	7819      	ldrb	r1, [r3, #0]
   33498:	f061 017f 	orn	r1, r1, #127	; 0x7f
   3349c:	7019      	strb	r1, [r3, #0]
			buf->cur++;
   3349e:	6813      	ldr	r3, [r2, #0]
   334a0:	3301      	adds	r3, #1
   334a2:	6013      	str	r3, [r2, #0]
	} while (length > 0);
   334a4:	e7ea      	b.n	3347c <mqtt_encode_fixed_header+0x32>
		return -EMSGSIZE;
   334a6:	f06f 0079 	mvn.w	r0, #121	; 0x79
   334aa:	e7f3      	b.n	33494 <mqtt_encode_fixed_header+0x4a>

000334ac <mqtt_message_id_only_enc>:
{
   334ac:	b570      	push	{r4, r5, r6, lr}
   334ae:	4606      	mov	r6, r0
   334b0:	4614      	mov	r4, r2
	if (message_id == 0U) {
   334b2:	4608      	mov	r0, r1
   334b4:	b169      	cbz	r1, 334d2 <mqtt_message_id_only_enc+0x26>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   334b6:	6815      	ldr	r5, [r2, #0]
	err_code = pack_uint16(message_id, buf);
   334b8:	4611      	mov	r1, r2
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   334ba:	3505      	adds	r5, #5
   334bc:	6015      	str	r5, [r2, #0]
	err_code = pack_uint16(message_id, buf);
   334be:	f7ff ff97 	bl	333f0 <pack_uint16>
	if (err_code != 0) {
   334c2:	b940      	cbnz	r0, 334d6 <mqtt_message_id_only_enc+0x2a>
	return mqtt_encode_fixed_header(message_type, start, buf);
   334c4:	4622      	mov	r2, r4
   334c6:	4629      	mov	r1, r5
   334c8:	4630      	mov	r0, r6
}
   334ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   334ce:	f7ff bfbc 	b.w	3344a <mqtt_encode_fixed_header>
		return -EINVAL;
   334d2:	f06f 0015 	mvn.w	r0, #21
}
   334d6:	bd70      	pop	{r4, r5, r6, pc}

000334d8 <publish_encode>:
{
   334d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   334dc:	7d87      	ldrb	r7, [r0, #22]
   334de:	7a04      	ldrb	r4, [r0, #8]
   334e0:	f007 0801 	and.w	r8, r7, #1
{
   334e4:	4605      	mov	r5, r0
   334e6:	4689      	mov	r9, r1
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   334e8:	f3c7 0740 	ubfx	r7, r7, #1, #1
	if ((param->message.topic.qos) && (param->message_id == 0U)) {
   334ec:	b10c      	cbz	r4, 334f2 <publish_encode+0x1a>
   334ee:	8a83      	ldrh	r3, [r0, #20]
   334f0:	b383      	cbz	r3, 33554 <publish_encode+0x7c>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   334f2:	f8d9 6000 	ldr.w	r6, [r9]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   334f6:	4649      	mov	r1, r9
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   334f8:	3605      	adds	r6, #5
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   334fa:	4628      	mov	r0, r5
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   334fc:	f8c9 6000 	str.w	r6, [r9]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   33500:	f7ff ff88 	bl	33414 <pack_utf8_str>
	if (err_code != 0) {
   33504:	b9b0      	cbnz	r0, 33534 <publish_encode+0x5c>
	if (param->message.topic.qos) {
   33506:	7a2b      	ldrb	r3, [r5, #8]
   33508:	b9b3      	cbnz	r3, 33538 <publish_encode+0x60>
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   3350a:	0060      	lsls	r0, r4, #1
   3350c:	f000 0006 	and.w	r0, r0, #6
	buf->cur += param->message.payload.len;
   33510:	692a      	ldr	r2, [r5, #16]
   33512:	f8d9 3000 	ldr.w	r3, [r9]
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   33516:	4338      	orrs	r0, r7
   33518:	ea40 00c8 	orr.w	r0, r0, r8, lsl #3
	buf->cur += param->message.payload.len;
   3351c:	4413      	add	r3, r2
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   3351e:	f040 0030 	orr.w	r0, r0, #48	; 0x30
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   33522:	464a      	mov	r2, r9
   33524:	4631      	mov	r1, r6
	buf->cur += param->message.payload.len;
   33526:	f8c9 3000 	str.w	r3, [r9]
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   3352a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   3352e:	f7ff ff8c 	bl	3344a <mqtt_encode_fixed_header>
	if (err_code != 0) {
   33532:	b140      	cbz	r0, 33546 <publish_encode+0x6e>
}
   33534:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_uint16(param->message_id, buf);
   33538:	4649      	mov	r1, r9
   3353a:	8aa8      	ldrh	r0, [r5, #20]
   3353c:	f7ff ff58 	bl	333f0 <pack_uint16>
		if (err_code != 0) {
   33540:	2800      	cmp	r0, #0
   33542:	d0e2      	beq.n	3350a <publish_encode+0x32>
   33544:	e7f6      	b.n	33534 <publish_encode+0x5c>
	buf->end -= param->message.payload.len;
   33546:	f8d9 3004 	ldr.w	r3, [r9, #4]
   3354a:	692a      	ldr	r2, [r5, #16]
   3354c:	1a9b      	subs	r3, r3, r2
   3354e:	f8c9 3004 	str.w	r3, [r9, #4]
	return 0;
   33552:	e7ef      	b.n	33534 <publish_encode+0x5c>
		return -EINVAL;
   33554:	f06f 0015 	mvn.w	r0, #21
   33558:	e7ec      	b.n	33534 <publish_encode+0x5c>

0003355a <publish_ack_encode>:
{
   3355a:	460a      	mov	r2, r1
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
   3355c:	8801      	ldrh	r1, [r0, #0]
   3355e:	2040      	movs	r0, #64	; 0x40
   33560:	f7ff bfa4 	b.w	334ac <mqtt_message_id_only_enc>

00033564 <subscribe_encode>:
{
   33564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (param->message_id == 0U) {
   33568:	88c3      	ldrh	r3, [r0, #6]
{
   3356a:	4606      	mov	r6, r0
   3356c:	460d      	mov	r5, r1
	if (param->message_id == 0U) {
   3356e:	b33b      	cbz	r3, 335c0 <subscribe_encode+0x5c>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   33570:	680f      	ldr	r7, [r1, #0]
   33572:	3705      	adds	r7, #5
   33574:	600f      	str	r7, [r1, #0]
	err_code = pack_uint16(param->message_id, buf);
   33576:	88c0      	ldrh	r0, [r0, #6]
   33578:	f7ff ff3a 	bl	333f0 <pack_uint16>
	if (err_code != 0) {
   3357c:	4604      	mov	r4, r0
   3357e:	bb08      	cbnz	r0, 335c4 <subscribe_encode+0x60>
   33580:	f04f 080c 	mov.w	r8, #12
	for (i = 0; i < param->list_count; i++) {
   33584:	88b3      	ldrh	r3, [r6, #4]
   33586:	42a3      	cmp	r3, r4
   33588:	dc06      	bgt.n	33598 <subscribe_encode+0x34>
	return mqtt_encode_fixed_header(message_type, start, buf);
   3358a:	462a      	mov	r2, r5
   3358c:	4639      	mov	r1, r7
}
   3358e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   33592:	2082      	movs	r0, #130	; 0x82
   33594:	f7ff bf59 	b.w	3344a <mqtt_encode_fixed_header>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   33598:	fb08 f904 	mul.w	r9, r8, r4
   3359c:	6830      	ldr	r0, [r6, #0]
   3359e:	4629      	mov	r1, r5
   335a0:	4448      	add	r0, r9
   335a2:	f7ff ff37 	bl	33414 <pack_utf8_str>
		if (err_code != 0) {
   335a6:	b980      	cbnz	r0, 335ca <subscribe_encode+0x66>
		err_code = pack_uint8(param->list[i].qos, buf);
   335a8:	6833      	ldr	r3, [r6, #0]
   335aa:	444b      	add	r3, r9
   335ac:	7a1a      	ldrb	r2, [r3, #8]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   335ae:	e9d5 3100 	ldrd	r3, r1, [r5]
   335b2:	4299      	cmp	r1, r3
   335b4:	d00b      	beq.n	335ce <subscribe_encode+0x6a>
	*(buf->cur++) = val;
   335b6:	1c59      	adds	r1, r3, #1
   335b8:	6029      	str	r1, [r5, #0]
	for (i = 0; i < param->list_count; i++) {
   335ba:	3401      	adds	r4, #1
	*(buf->cur++) = val;
   335bc:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < param->list_count; i++) {
   335be:	e7e1      	b.n	33584 <subscribe_encode+0x20>
		return -EINVAL;
   335c0:	f06f 0415 	mvn.w	r4, #21
}
   335c4:	4620      	mov	r0, r4
   335c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   335ca:	4604      	mov	r4, r0
   335cc:	e7fa      	b.n	335c4 <subscribe_encode+0x60>
		return -ENOMEM;
   335ce:	f06f 040b 	mvn.w	r4, #11
   335d2:	e7f7      	b.n	335c4 <subscribe_encode+0x60>

000335d4 <mqtt_read_message_chunk>:
	return err_code;
}

static int mqtt_read_message_chunk(struct mqtt_client *client,
				   struct buf_ctx *buf, uint32_t length)
{
   335d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   335d6:	460d      	mov	r5, r1
	uint32_t remaining;
	int len;

	/* In case all data requested has already been buffered, return. */
	if (length <= (buf->end - buf->cur)) {
   335d8:	e9d1 3100 	ldrd	r3, r1, [r1]
   335dc:	1acb      	subs	r3, r1, r3
   335de:	4293      	cmp	r3, r2
{
   335e0:	4606      	mov	r6, r0
	if (length <= (buf->end - buf->cur)) {
   335e2:	d301      	bcc.n	335e8 <mqtt_read_message_chunk+0x14>
		return 0;
   335e4:	2000      	movs	r0, #0
		NET_ERR("[CID %p]: Message partially received.", client);
		return -EAGAIN;
	}

	return 0;
}
   335e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	remaining = length - (buf->end - buf->cur);
   335e8:	1ad4      	subs	r4, r2, r3
	if ((buf->end + remaining > client->rx_buf + client->rx_buf_size) ||
   335ea:	190f      	adds	r7, r1, r4
   335ec:	e9d0 2313 	ldrd	r2, r3, [r0, #76]	; 0x4c
   335f0:	4413      	add	r3, r2
   335f2:	429f      	cmp	r7, r3
   335f4:	d813      	bhi.n	3361e <mqtt_read_message_chunk+0x4a>
   335f6:	4297      	cmp	r7, r2
   335f8:	d311      	bcc.n	3361e <mqtt_read_message_chunk+0x4a>
	len = mqtt_transport_read(client, buf->end, remaining, false);
   335fa:	2300      	movs	r3, #0
   335fc:	4622      	mov	r2, r4
   335fe:	f7eb fa5f 	bl	1eac0 <mqtt_transport_read>
	if (len < 0) {
   33602:	2800      	cmp	r0, #0
   33604:	dbef      	blt.n	335e6 <mqtt_read_message_chunk+0x12>
	if (len == 0) {
   33606:	d00d      	beq.n	33624 <mqtt_read_message_chunk+0x50>
	client->internal.rx_buf_datalen += len;
   33608:	69f3      	ldr	r3, [r6, #28]
	if (len < remaining) {
   3360a:	42a0      	cmp	r0, r4
	client->internal.rx_buf_datalen += len;
   3360c:	4403      	add	r3, r0
   3360e:	61f3      	str	r3, [r6, #28]
	buf->end += len;
   33610:	686b      	ldr	r3, [r5, #4]
   33612:	4403      	add	r3, r0
   33614:	606b      	str	r3, [r5, #4]
	if (len < remaining) {
   33616:	d2e5      	bcs.n	335e4 <mqtt_read_message_chunk+0x10>
		return -EAGAIN;
   33618:	f06f 000a 	mvn.w	r0, #10
   3361c:	e7e3      	b.n	335e6 <mqtt_read_message_chunk+0x12>
		return -ENOMEM;
   3361e:	f06f 000b 	mvn.w	r0, #11
   33622:	e7e0      	b.n	335e6 <mqtt_read_message_chunk+0x12>
		return -ENOTCONN;
   33624:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   33628:	e7dd      	b.n	335e6 <mqtt_read_message_chunk+0x12>

0003362a <mqtt_handle_rx>:

	return err_code;
}

int mqtt_handle_rx(struct mqtt_client *client)
{
   3362a:	b570      	push	{r4, r5, r6, lr}
	int err_code;
	uint8_t type_and_flags;
	uint32_t var_length;
	struct buf_ctx buf;

	buf.cur = client->rx_buf;
   3362c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   3362e:	69c2      	ldr	r2, [r0, #28]
{
   33630:	b08c      	sub	sp, #48	; 0x30
	buf.cur = client->rx_buf;
   33632:	9302      	str	r3, [sp, #8]
{
   33634:	4605      	mov	r5, r0
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   33636:	4413      	add	r3, r2
	uint8_t chunk_size = MQTT_FIXED_HEADER_MIN_SIZE;
   33638:	2202      	movs	r2, #2
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   3363a:	9303      	str	r3, [sp, #12]
		err_code = mqtt_read_message_chunk(client, buf, chunk_size);
   3363c:	4628      	mov	r0, r5
   3363e:	a902      	add	r1, sp, #8
   33640:	f7ff ffc8 	bl	335d4 <mqtt_read_message_chunk>
		if (err_code < 0) {
   33644:	1e04      	subs	r4, r0, #0
   33646:	db2d      	blt.n	336a4 <mqtt_handle_rx+0x7a>
		buf->cur = client->rx_buf;
   33648:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   3364a:	aa01      	add	r2, sp, #4
   3364c:	f10d 0103 	add.w	r1, sp, #3
   33650:	a802      	add	r0, sp, #8
		buf->cur = client->rx_buf;
   33652:	9302      	str	r3, [sp, #8]
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   33654:	f7ff fe2f 	bl	332b6 <fixed_header_decode>
	} while (err_code == -EAGAIN);
   33658:	f110 0f0b 	cmn.w	r0, #11
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   3365c:	4604      	mov	r4, r0
		chunk_size = 1U;
   3365e:	f04f 0201 	mov.w	r2, #1
	} while (err_code == -EAGAIN);
   33662:	d0eb      	beq.n	3363c <mqtt_handle_rx+0x12>

	err_code = mqtt_read_and_parse_fixed_header(client, &type_and_flags,
						    &var_length, &buf);
	if (err_code < 0) {
   33664:	2800      	cmp	r0, #0
   33666:	db3c      	blt.n	336e2 <mqtt_handle_rx+0xb8>
		return (err_code == -EAGAIN) ? 0 : err_code;
	}

	if ((type_and_flags & 0xF0) == MQTT_PKT_TYPE_PUBLISH) {
   33668:	f89d 6003 	ldrb.w	r6, [sp, #3]
   3366c:	f006 03f0 	and.w	r3, r6, #240	; 0xf0
   33670:	2b30      	cmp	r3, #48	; 0x30
   33672:	d11b      	bne.n	336ac <mqtt_handle_rx+0x82>
	err_code = mqtt_read_message_chunk(client, buf, sizeof(uint16_t));
   33674:	2202      	movs	r2, #2
   33676:	4628      	mov	r0, r5
   33678:	a902      	add	r1, sp, #8
   3367a:	f7ff ffab 	bl	335d4 <mqtt_read_message_chunk>
	if (err_code < 0) {
   3367e:	1e04      	subs	r4, r0, #0
   33680:	db10      	blt.n	336a4 <mqtt_handle_rx+0x7a>
	variable_header_length = *buf->cur << 8; /* MSB */
   33682:	9b02      	ldr	r3, [sp, #8]
	if (qos > MQTT_QOS_0_AT_MOST_ONCE) {
   33684:	f016 0f06 	tst.w	r6, #6
   33688:	881a      	ldrh	r2, [r3, #0]
	err_code = mqtt_read_message_chunk(client, buf,
   3368a:	4628      	mov	r0, r5
   3368c:	ba52      	rev16	r2, r2
   3368e:	b292      	uxth	r2, r2
	variable_header_length += sizeof(uint16_t);
   33690:	bf0c      	ite	eq
   33692:	3202      	addeq	r2, #2
		variable_header_length += sizeof(uint16_t);
   33694:	3204      	addne	r2, #4
	err_code = mqtt_read_message_chunk(client, buf,
   33696:	a902      	add	r1, sp, #8
   33698:	f7ff ff9c 	bl	335d4 <mqtt_read_message_chunk>
	if (err_code < 0) {
   3369c:	ea00 74e0 	and.w	r4, r0, r0, asr #31
							&buf);
	} else {
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
	}

	if (err_code < 0) {
   336a0:	2c00      	cmp	r4, #0
   336a2:	da0a      	bge.n	336ba <mqtt_handle_rx+0x90>
		return (err_code == -EAGAIN) ? 0 : err_code;
   336a4:	f114 0f0b 	cmn.w	r4, #11
   336a8:	d11b      	bne.n	336e2 <mqtt_handle_rx+0xb8>
   336aa:	e019      	b.n	336e0 <mqtt_handle_rx+0xb6>
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
   336ac:	4628      	mov	r0, r5
   336ae:	9a01      	ldr	r2, [sp, #4]
   336b0:	a902      	add	r1, sp, #8
   336b2:	f7ff ff8f 	bl	335d4 <mqtt_read_message_chunk>
   336b6:	4604      	mov	r4, r0
   336b8:	e7f2      	b.n	336a0 <mqtt_handle_rx+0x76>
	evt.result = 0;
   336ba:	2200      	movs	r2, #0
		return (err_code == -EAGAIN) ? 0 : err_code;
	}

	/* At this point, packet is ready to be passed to the application. */
	err_code = mqtt_handle_packet(client, type_and_flags, var_length, &buf);
   336bc:	f89d 0003 	ldrb.w	r0, [sp, #3]
   336c0:	9901      	ldr	r1, [sp, #4]
	evt.result = 0;
   336c2:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	switch (type_and_flags & 0xF0) {
   336c6:	2b60      	cmp	r3, #96	; 0x60
	evt.result = 0;
   336c8:	920b      	str	r2, [sp, #44]	; 0x2c
	switch (type_and_flags & 0xF0) {
   336ca:	d06f      	beq.n	337ac <mqtt_handle_rx+0x182>
   336cc:	d816      	bhi.n	336fc <mqtt_handle_rx+0xd2>
   336ce:	2b40      	cmp	r3, #64	; 0x40
   336d0:	d062      	beq.n	33798 <mqtt_handle_rx+0x16e>
   336d2:	d809      	bhi.n	336e8 <mqtt_handle_rx+0xbe>
   336d4:	2b20      	cmp	r3, #32
   336d6:	d02f      	beq.n	33738 <mqtt_handle_rx+0x10e>
   336d8:	2b30      	cmp	r3, #48	; 0x30
   336da:	d04b      	beq.n	33774 <mqtt_handle_rx+0x14a>
	if (err_code < 0) {
		return err_code;
	}

	client->internal.rx_buf_datalen = 0U;
   336dc:	2300      	movs	r3, #0
   336de:	61eb      	str	r3, [r5, #28]
		return (err_code == -EAGAIN) ? 0 : err_code;
   336e0:	2400      	movs	r4, #0

	return 0;
}
   336e2:	4620      	mov	r0, r4
   336e4:	b00c      	add	sp, #48	; 0x30
   336e6:	bd70      	pop	{r4, r5, r6, pc}
	switch (type_and_flags & 0xF0) {
   336e8:	2b50      	cmp	r3, #80	; 0x50
   336ea:	d1f7      	bne.n	336dc <mqtt_handle_rx+0xb2>
		evt.type = MQTT_EVT_PUBREC;
   336ec:	2304      	movs	r3, #4
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   336ee:	a905      	add	r1, sp, #20
   336f0:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREC;
   336f2:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   336f6:	f7ff fe62 	bl	333be <publish_receive_decode>
   336fa:	e054      	b.n	337a6 <mqtt_handle_rx+0x17c>
	switch (type_and_flags & 0xF0) {
   336fc:	2bb0      	cmp	r3, #176	; 0xb0
   336fe:	d065      	beq.n	337cc <mqtt_handle_rx+0x1a2>
   33700:	d80b      	bhi.n	3371a <mqtt_handle_rx+0xf0>
   33702:	2b70      	cmp	r3, #112	; 0x70
   33704:	d05a      	beq.n	337bc <mqtt_handle_rx+0x192>
   33706:	2b90      	cmp	r3, #144	; 0x90
   33708:	d1e8      	bne.n	336dc <mqtt_handle_rx+0xb2>
		evt.type = MQTT_EVT_SUBACK;
   3370a:	2307      	movs	r3, #7
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   3370c:	a905      	add	r1, sp, #20
   3370e:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_SUBACK;
   33710:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   33714:	f7ff fe59 	bl	333ca <subscribe_ack_decode>
   33718:	e045      	b.n	337a6 <mqtt_handle_rx+0x17c>
	switch (type_and_flags & 0xF0) {
   3371a:	2bd0      	cmp	r3, #208	; 0xd0
   3371c:	d1de      	bne.n	336dc <mqtt_handle_rx+0xb2>
		if (client->unacked_ping <= 0) {
   3371e:	f995 305f 	ldrsb.w	r3, [r5, #95]	; 0x5f
   33722:	2b00      	cmp	r3, #0
			client->unacked_ping--;
   33724:	bfc4      	itt	gt
   33726:	f103 33ff 	addgt.w	r3, r3, #4294967295
   3372a:	b25a      	sxtbgt	r2, r3
		evt.type = MQTT_EVT_PINGRESP;
   3372c:	2309      	movs	r3, #9
   3372e:	f885 205f 	strb.w	r2, [r5, #95]	; 0x5f
   33732:	f88d 3010 	strb.w	r3, [sp, #16]
   33736:	e010      	b.n	3375a <mqtt_handle_rx+0x130>
		evt.type = MQTT_EVT_CONNACK;
   33738:	f88d 2010 	strb.w	r2, [sp, #16]
		err_code = connect_ack_decode(client, buf, &evt.param.connack);
   3373c:	4628      	mov	r0, r5
   3373e:	aa05      	add	r2, sp, #20
   33740:	a902      	add	r1, sp, #8
   33742:	f7ff fde4 	bl	3330e <connect_ack_decode>
		if (err_code == 0) {
   33746:	4604      	mov	r4, r0
   33748:	bb70      	cbnz	r0, 337a8 <mqtt_handle_rx+0x17e>
			if (evt.param.connack.return_code ==
   3374a:	f89d 3015 	ldrb.w	r3, [sp, #21]
   3374e:	b94b      	cbnz	r3, 33764 <mqtt_handle_rx+0x13a>
				MQTT_SET_STATE(client, MQTT_STATE_CONNECTED);
   33750:	69ab      	ldr	r3, [r5, #24]
			evt.result = evt.param.connack.return_code;
   33752:	900b      	str	r0, [sp, #44]	; 0x2c
				MQTT_SET_STATE(client, MQTT_STATE_CONNECTED);
   33754:	f043 0304 	orr.w	r3, r3, #4
   33758:	61ab      	str	r3, [r5, #24]
		event_notify(client, &evt);
   3375a:	4628      	mov	r0, r5
   3375c:	a904      	add	r1, sp, #16
   3375e:	f000 f8fd 	bl	3395c <event_notify>
	if (err_code < 0) {
   33762:	e7bb      	b.n	336dc <mqtt_handle_rx+0xb2>
		event_notify(client, &evt);
   33764:	4628      	mov	r0, r5
   33766:	a904      	add	r1, sp, #16
			evt.result = evt.param.connack.return_code;
   33768:	930b      	str	r3, [sp, #44]	; 0x2c
				err_code = -ECONNREFUSED;
   3376a:	f06f 046e 	mvn.w	r4, #110	; 0x6e
		event_notify(client, &evt);
   3376e:	f000 f8f5 	bl	3395c <event_notify>
	if (err_code < 0) {
   33772:	e7b6      	b.n	336e2 <mqtt_handle_rx+0xb8>
		evt.type = MQTT_EVT_PUBLISH;
   33774:	2302      	movs	r3, #2
		err_code = publish_decode(type_and_flags, var_length, buf,
   33776:	aa02      	add	r2, sp, #8
		evt.type = MQTT_EVT_PUBLISH;
   33778:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_decode(type_and_flags, var_length, buf,
   3377c:	ab05      	add	r3, sp, #20
   3377e:	f7ff fde0 	bl	33342 <publish_decode>
   33782:	4604      	mov	r4, r0
		client->internal.remaining_payload =
   33784:	9b09      	ldr	r3, [sp, #36]	; 0x24
		evt.result = err_code;
   33786:	900b      	str	r0, [sp, #44]	; 0x2c
		client->internal.remaining_payload =
   33788:	622b      	str	r3, [r5, #32]
		event_notify(client, &evt);
   3378a:	4628      	mov	r0, r5
   3378c:	a904      	add	r1, sp, #16
   3378e:	f000 f8e5 	bl	3395c <event_notify>
	if (err_code < 0) {
   33792:	2c00      	cmp	r4, #0
   33794:	daa2      	bge.n	336dc <mqtt_handle_rx+0xb2>
   33796:	e7a4      	b.n	336e2 <mqtt_handle_rx+0xb8>
		evt.type = MQTT_EVT_PUBACK;
   33798:	2303      	movs	r3, #3
		err_code = publish_ack_decode(buf, &evt.param.puback);
   3379a:	a905      	add	r1, sp, #20
   3379c:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBACK;
   3379e:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_ack_decode(buf, &evt.param.puback);
   337a2:	f7ff fe0a 	bl	333ba <publish_ack_decode>
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   337a6:	4604      	mov	r4, r0
		evt.result = err_code;
   337a8:	940b      	str	r4, [sp, #44]	; 0x2c
	if (notify_event == true) {
   337aa:	e7ee      	b.n	3378a <mqtt_handle_rx+0x160>
		evt.type = MQTT_EVT_PUBREL;
   337ac:	2305      	movs	r3, #5
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   337ae:	a905      	add	r1, sp, #20
   337b0:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREL;
   337b2:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   337b6:	f7ff fe04 	bl	333c2 <publish_release_decode>
   337ba:	e7f4      	b.n	337a6 <mqtt_handle_rx+0x17c>
		evt.type = MQTT_EVT_PUBCOMP;
   337bc:	2306      	movs	r3, #6
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   337be:	a905      	add	r1, sp, #20
   337c0:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBCOMP;
   337c2:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   337c6:	f7ff fdfe 	bl	333c6 <publish_complete_decode>
   337ca:	e7ec      	b.n	337a6 <mqtt_handle_rx+0x17c>
		evt.type = MQTT_EVT_UNSUBACK;
   337cc:	2308      	movs	r3, #8
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   337ce:	a905      	add	r1, sp, #20
   337d0:	eb0d 0003 	add.w	r0, sp, r3
		evt.type = MQTT_EVT_UNSUBACK;
   337d4:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   337d8:	f7ff fe08 	bl	333ec <unsubscribe_ack_decode>
   337dc:	e7e3      	b.n	337a6 <mqtt_handle_rx+0x17c>

000337de <mqtt_client_tcp_connect>:
#include <zephyr/net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tcp_connect(struct mqtt_client *client)
{
   337de:	b538      	push	{r3, r4, r5, lr}
	const struct sockaddr *broker = client->broker;
   337e0:	6b45      	ldr	r5, [r0, #52]	; 0x34
{
   337e2:	4604      	mov	r4, r0
	int ret;

	client->transport.tcp.sock = zsock_socket(broker->sa_family, SOCK_STREAM,
   337e4:	8828      	ldrh	r0, [r5, #0]
   337e6:	2206      	movs	r2, #6
   337e8:	2101      	movs	r1, #1
   337ea:	f7dd fa81 	bl	10cf0 <z_impl_zsock_socket>
						  IPPROTO_TCP);
	if (client->transport.tcp.sock < 0) {
   337ee:	2800      	cmp	r0, #0
	client->transport.tcp.sock = zsock_socket(broker->sa_family, SOCK_STREAM,
   337f0:	62a0      	str	r0, [r4, #40]	; 0x28
	if (client->transport.tcp.sock < 0) {
   337f2:	da04      	bge.n	337fe <mqtt_client_tcp_connect+0x20>
	NET_DBG("Connect completed");
	return 0;

error:
	(void)zsock_close(client->transport.tcp.sock);
	return -errno;
   337f4:	f7fd fa9a 	bl	30d2c <__errno>
   337f8:	6800      	ldr	r0, [r0, #0]
   337fa:	4240      	negs	r0, r0
}
   337fc:	bd38      	pop	{r3, r4, r5, pc}
	if (broker->sa_family == AF_INET) {
   337fe:	882b      	ldrh	r3, [r5, #0]
	ret = zsock_connect(client->transport.tcp.sock, client->broker,
   33800:	6b61      	ldr	r1, [r4, #52]	; 0x34
	size_t peer_addr_size = sizeof(struct sockaddr_in6);
   33802:	2b01      	cmp	r3, #1
   33804:	bf0c      	ite	eq
   33806:	2208      	moveq	r2, #8
   33808:	2218      	movne	r2, #24
	return z_impl_zsock_connect(sock, addr, addrlen);
   3380a:	f7fc fa7c 	bl	2fd06 <z_impl_zsock_connect>
	if (ret < 0) {
   3380e:	2800      	cmp	r0, #0
   33810:	da03      	bge.n	3381a <mqtt_client_tcp_connect+0x3c>
	(void)zsock_close(client->transport.tcp.sock);
   33812:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_close(sock);
   33814:	f7fc fa53 	bl	2fcbe <z_impl_zsock_close>
   33818:	e7ec      	b.n	337f4 <mqtt_client_tcp_connect+0x16>
	return 0;
   3381a:	2000      	movs	r0, #0
   3381c:	e7ee      	b.n	337fc <mqtt_client_tcp_connect+0x1e>

0003381e <mqtt_client_tcp_write>:

int mqtt_client_tcp_write(struct mqtt_client *client, const uint8_t *data,
			  uint32_t datalen)
{
   3381e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint32_t offset = 0U;
   33822:	2400      	movs	r4, #0
{
   33824:	4606      	mov	r6, r0
   33826:	460f      	mov	r7, r1
   33828:	4615      	mov	r5, r2
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   3382a:	46a0      	mov	r8, r4
	int ret;

	while (offset < datalen) {
   3382c:	42ac      	cmp	r4, r5
   3382e:	d301      	bcc.n	33834 <mqtt_client_tcp_write+0x16>
		}

		offset += ret;
	}

	return 0;
   33830:	2000      	movs	r0, #0
   33832:	e00d      	b.n	33850 <mqtt_client_tcp_write+0x32>
		ret = zsock_send(client->transport.tcp.sock, data + offset,
   33834:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   33836:	2300      	movs	r3, #0
   33838:	e9cd 8800 	strd	r8, r8, [sp]
   3383c:	1b2a      	subs	r2, r5, r4
   3383e:	1939      	adds	r1, r7, r4
   33840:	f7fc fa8c 	bl	2fd5c <z_impl_zsock_sendto>
		if (ret < 0) {
   33844:	1e03      	subs	r3, r0, #0
   33846:	da06      	bge.n	33856 <mqtt_client_tcp_write+0x38>
			return -errno;
   33848:	f7fd fa70 	bl	30d2c <__errno>
   3384c:	6800      	ldr	r0, [r0, #0]
   3384e:	4240      	negs	r0, r0
}
   33850:	b002      	add	sp, #8
   33852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		offset += ret;
   33856:	441c      	add	r4, r3
   33858:	e7e8      	b.n	3382c <mqtt_client_tcp_write+0xe>

0003385a <mqtt_client_tcp_write_msg>:

int mqtt_client_tcp_write_msg(struct mqtt_client *client,
			      const struct msghdr *message)

{
   3385a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int ret, i;
	size_t offset = 0;
	size_t total_len = 0;
   3385e:	2500      	movs	r5, #0
{
   33860:	4607      	mov	r7, r0

	for (i = 0; i < message->msg_iovlen; i++) {
   33862:	462b      	mov	r3, r5
{
   33864:	460c      	mov	r4, r1
   33866:	68c9      	ldr	r1, [r1, #12]
	for (i = 0; i < message->msg_iovlen; i++) {
   33868:	428b      	cmp	r3, r1
   3386a:	d110      	bne.n	3388e <mqtt_client_tcp_write_msg+0x34>
	size_t offset = 0;
   3386c:	2600      	movs	r6, #0
	return z_impl_zsock_sendmsg(sock, msg, flags);
   3386e:	46b0      	mov	r8, r6
		total_len += message->msg_iov[i].iov_len;
	}

	while (offset < total_len) {
   33870:	42ae      	cmp	r6, r5
   33872:	d216      	bcs.n	338a2 <mqtt_client_tcp_write_msg+0x48>
		ret = zsock_sendmsg(client->transport.tcp.sock, message, 0);
   33874:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   33876:	2200      	movs	r2, #0
   33878:	4621      	mov	r1, r4
   3387a:	f7fc faa3 	bl	2fdc4 <z_impl_zsock_sendmsg>
		if (ret < 0) {
   3387e:	1e03      	subs	r3, r0, #0
   33880:	da0c      	bge.n	3389c <mqtt_client_tcp_write_msg+0x42>
			return -errno;
   33882:	f7fd fa53 	bl	30d2c <__errno>
   33886:	6800      	ldr	r0, [r0, #0]
   33888:	4240      	negs	r0, r0
			message->msg_iov[i].iov_len = 0;
		}
	}

	return 0;
}
   3388a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total_len += message->msg_iov[i].iov_len;
   3388e:	68a2      	ldr	r2, [r4, #8]
   33890:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   33894:	6852      	ldr	r2, [r2, #4]
	for (i = 0; i < message->msg_iovlen; i++) {
   33896:	3301      	adds	r3, #1
		total_len += message->msg_iov[i].iov_len;
   33898:	4415      	add	r5, r2
	for (i = 0; i < message->msg_iovlen; i++) {
   3389a:	e7e5      	b.n	33868 <mqtt_client_tcp_write_msg+0xe>
		offset += ret;
   3389c:	441e      	add	r6, r3
		if (offset >= total_len) {
   3389e:	42b5      	cmp	r5, r6
   338a0:	d817      	bhi.n	338d2 <mqtt_client_tcp_write_msg+0x78>
	return 0;
   338a2:	2000      	movs	r0, #0
   338a4:	e7f1      	b.n	3388a <mqtt_client_tcp_write_msg+0x30>
			ret -= message->msg_iov[i].iov_len;
   338a6:	1a1b      	subs	r3, r3, r0
			message->msg_iov[i].iov_len = 0;
   338a8:	f8c1 8004 	str.w	r8, [r1, #4]
		for (i = 0; i < message->msg_iovlen; i++) {
   338ac:	3201      	adds	r2, #1
   338ae:	68e1      	ldr	r1, [r4, #12]
   338b0:	4291      	cmp	r1, r2
   338b2:	d9dd      	bls.n	33870 <mqtt_client_tcp_write_msg+0x16>
			if (ret < message->msg_iov[i].iov_len) {
   338b4:	68a1      	ldr	r1, [r4, #8]
   338b6:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
   338ba:	6848      	ldr	r0, [r1, #4]
   338bc:	4298      	cmp	r0, r3
   338be:	d9f2      	bls.n	338a6 <mqtt_client_tcp_write_msg+0x4c>
				message->msg_iov[i].iov_len -= ret;
   338c0:	1ac0      	subs	r0, r0, r3
   338c2:	6048      	str	r0, [r1, #4]
					(uint8_t *)message->msg_iov[i].iov_base + ret;
   338c4:	68a0      	ldr	r0, [r4, #8]
   338c6:	f850 1032 	ldr.w	r1, [r0, r2, lsl #3]
   338ca:	4419      	add	r1, r3
				message->msg_iov[i].iov_base =
   338cc:	f840 1032 	str.w	r1, [r0, r2, lsl #3]
				break;
   338d0:	e7ce      	b.n	33870 <mqtt_client_tcp_write_msg+0x16>
		for (i = 0; i < message->msg_iovlen; i++) {
   338d2:	2200      	movs	r2, #0
   338d4:	e7eb      	b.n	338ae <mqtt_client_tcp_write_msg+0x54>

000338d6 <mqtt_client_tcp_read>:

int mqtt_client_tcp_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			 bool shall_block)
{
   338d6:	b513      	push	{r0, r1, r4, lr}

	if (!shall_block) {
		flags |= ZSOCK_MSG_DONTWAIT;
	}

	ret = zsock_recv(client->transport.tcp.sock, data, buflen, flags);
   338d8:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   338da:	2400      	movs	r4, #0
	if (!shall_block) {
   338dc:	f083 0301 	eor.w	r3, r3, #1
   338e0:	e9cd 4400 	strd	r4, r4, [sp]
   338e4:	019b      	lsls	r3, r3, #6
   338e6:	f7fc fa98 	bl	2fe1a <z_impl_zsock_recvfrom>
	if (ret < 0) {
   338ea:	2800      	cmp	r0, #0
   338ec:	da03      	bge.n	338f6 <mqtt_client_tcp_read+0x20>
		return -errno;
   338ee:	f7fd fa1d 	bl	30d2c <__errno>
   338f2:	6800      	ldr	r0, [r0, #0]
   338f4:	4240      	negs	r0, r0
	}

	return ret;
}
   338f6:	b002      	add	sp, #8
   338f8:	bd10      	pop	{r4, pc}

000338fa <mqtt_client_tcp_disconnect>:

int mqtt_client_tcp_disconnect(struct mqtt_client *client)
{
   338fa:	b508      	push	{r3, lr}
	int ret;

	NET_INFO("Closing socket %d", client->transport.tcp.sock);

	ret = zsock_close(client->transport.tcp.sock);
   338fc:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_close(sock);
   338fe:	f7fc f9de 	bl	2fcbe <z_impl_zsock_close>
	if (ret < 0) {
   33902:	2800      	cmp	r0, #0
   33904:	da04      	bge.n	33910 <mqtt_client_tcp_disconnect+0x16>
		return -errno;
   33906:	f7fd fa11 	bl	30d2c <__errno>
   3390a:	6800      	ldr	r0, [r0, #0]
   3390c:	4240      	negs	r0, r0
	}

	return 0;
}
   3390e:	bd08      	pop	{r3, pc}
	return 0;
   33910:	2000      	movs	r0, #0
   33912:	e7fc      	b.n	3390e <mqtt_client_tcp_disconnect+0x14>

00033914 <mqtt_transport_disconnect>:

int mqtt_transport_disconnect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].disconnect(client);
   33914:	f7ff bff1 	b.w	338fa <mqtt_client_tcp_disconnect>

00033918 <k_uptime_get_32>:
{
   33918:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
   3391a:	f002 fcd7 	bl	362cc <z_impl_k_uptime_ticks>
   3391e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   33922:	fba0 0302 	umull	r0, r3, r0, r2
   33926:	fb02 3301 	mla	r3, r2, r1, r3
   3392a:	0bc0      	lsrs	r0, r0, #15
}
   3392c:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   33930:	bd08      	pop	{r3, pc}

00033932 <tx_buf_init>:
	client->internal.remaining_payload = 0U;
}

/** @brief Initialize tx buffer. */
static void tx_buf_init(struct mqtt_client *client, struct buf_ctx *buf)
{
   33932:	b538      	push	{r3, r4, r5, lr}
   33934:	4604      	mov	r4, r0
   33936:	460d      	mov	r5, r1
__ssp_bos_icheck3(memset, void *, int)
   33938:	6d82      	ldr	r2, [r0, #88]	; 0x58
   3393a:	2100      	movs	r1, #0
   3393c:	6d40      	ldr	r0, [r0, #84]	; 0x54
   3393e:	f002 fe13 	bl	36568 <memset>
	memset(client->tx_buf, 0, client->tx_buf_size);
	buf->cur = client->tx_buf;
   33942:	6d63      	ldr	r3, [r4, #84]	; 0x54
   33944:	602b      	str	r3, [r5, #0]
	buf->end = client->tx_buf + client->tx_buf_size;
   33946:	6da2      	ldr	r2, [r4, #88]	; 0x58
   33948:	4413      	add	r3, r2
   3394a:	606b      	str	r3, [r5, #4]
}
   3394c:	bd38      	pop	{r3, r4, r5, pc}

0003394e <verify_tx_state.isra.0>:
{
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
		return -ENOTCONN;
	}

	return 0;
   3394e:	f010 0f04 	tst.w	r0, #4
}
   33952:	bf0c      	ite	eq
   33954:	f06f 007f 	mvneq.w	r0, #127	; 0x7f
   33958:	2000      	movne	r0, #0
   3395a:	4770      	bx	lr

0003395c <event_notify>:
{
   3395c:	b538      	push	{r3, r4, r5, lr}
	if (client->evt_cb != NULL) {
   3395e:	6c83      	ldr	r3, [r0, #72]	; 0x48
{
   33960:	4604      	mov	r4, r0
   33962:	460d      	mov	r5, r1
	if (client->evt_cb != NULL) {
   33964:	b153      	cbz	r3, 3397c <event_notify+0x20>
		mqtt_mutex_unlock(client);
   33966:	f7eb f8b9 	bl	1eadc <mqtt_mutex_unlock>
		client->evt_cb(client, evt);
   3396a:	4620      	mov	r0, r4
   3396c:	4629      	mov	r1, r5
   3396e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   33970:	4798      	blx	r3
		mqtt_mutex_lock(client);
   33972:	4620      	mov	r0, r4
}
   33974:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		mqtt_mutex_lock(client);
   33978:	f7eb b8cc 	b.w	1eb14 <mqtt_mutex_lock>
}
   3397c:	bd38      	pop	{r3, r4, r5, pc}

0003397e <client_disconnect.constprop.0>:
static void client_disconnect(struct mqtt_client *client, int result,
   3397e:	b530      	push	{r4, r5, lr}
   33980:	b089      	sub	sp, #36	; 0x24
   33982:	4604      	mov	r4, r0
   33984:	460d      	mov	r5, r1
	err_code = mqtt_transport_disconnect(client);
   33986:	f7ff ffc5 	bl	33914 <mqtt_transport_disconnect>
	MQTT_STATE_INIT(client);
   3398a:	2100      	movs	r1, #0
		struct mqtt_evt evt = {
   3398c:	221c      	movs	r2, #28
	client->internal.last_activity = 0U;
   3398e:	e9c4 1105 	strd	r1, r1, [r4, #20]
	client->internal.remaining_payload = 0U;
   33992:	e9c4 1107 	strd	r1, r1, [r4, #28]
		struct mqtt_evt evt = {
   33996:	4668      	mov	r0, sp
   33998:	f002 fde6 	bl	36568 <memset>
   3399c:	2301      	movs	r3, #1
		event_notify(client, &evt);
   3399e:	4669      	mov	r1, sp
   339a0:	4620      	mov	r0, r4
		struct mqtt_evt evt = {
   339a2:	f88d 3000 	strb.w	r3, [sp]
   339a6:	9507      	str	r5, [sp, #28]
		event_notify(client, &evt);
   339a8:	f7ff ffd8 	bl	3395c <event_notify>
}
   339ac:	b009      	add	sp, #36	; 0x24
   339ae:	bd30      	pop	{r4, r5, pc}

000339b0 <read_publish_payload>:
	return err_code;
}

static int read_publish_payload(struct mqtt_client *client, void *buffer,
				size_t length, bool shall_block)
{
   339b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   339b4:	460f      	mov	r7, r1
   339b6:	4690      	mov	r8, r2
   339b8:	461e      	mov	r6, r3
	int ret;

	NULL_PARAM_CHECK(client);
   339ba:	4605      	mov	r5, r0
   339bc:	b320      	cbz	r0, 33a08 <read_publish_payload+0x58>

	mqtt_mutex_lock(client);
   339be:	f7eb f8a9 	bl	1eb14 <mqtt_mutex_lock>

	if (client->internal.remaining_payload == 0U) {
   339c2:	6a2c      	ldr	r4, [r5, #32]
   339c4:	b1b4      	cbz	r4, 339f4 <read_publish_payload+0x44>

	if (client->internal.remaining_payload < length) {
		length = client->internal.remaining_payload;
	}

	ret = mqtt_transport_read(client, buffer, length, shall_block);
   339c6:	4544      	cmp	r4, r8
   339c8:	4622      	mov	r2, r4
   339ca:	4633      	mov	r3, r6
   339cc:	bf28      	it	cs
   339ce:	4642      	movcs	r2, r8
   339d0:	4639      	mov	r1, r7
   339d2:	4628      	mov	r0, r5
   339d4:	f7eb f874 	bl	1eac0 <mqtt_transport_read>
   339d8:	4604      	mov	r4, r0
	if (!shall_block && ret == -EAGAIN) {
   339da:	b916      	cbnz	r6, 339e2 <read_publish_payload+0x32>
   339dc:	f110 0f0b 	cmn.w	r0, #11
   339e0:	d008      	beq.n	339f4 <read_publish_payload+0x44>
		goto exit;
	}

	if (ret <= 0) {
   339e2:	2c00      	cmp	r4, #0
   339e4:	dc0c      	bgt.n	33a00 <read_publish_payload+0x50>
		if (ret == 0) {
			ret = -ENOTCONN;
   339e6:	bf08      	it	eq
   339e8:	f06f 047f 	mvneq.w	r4, #127	; 0x7f
		}

		client_disconnect(client, ret, true);
   339ec:	4628      	mov	r0, r5
   339ee:	4621      	mov	r1, r4
   339f0:	f7ff ffc5 	bl	3397e <client_disconnect.constprop.0>
	}

	client->internal.remaining_payload -= ret;

exit:
	mqtt_mutex_unlock(client);
   339f4:	4628      	mov	r0, r5
   339f6:	f7eb f871 	bl	1eadc <mqtt_mutex_unlock>

	return ret;
}
   339fa:	4620      	mov	r0, r4
   339fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	client->internal.remaining_payload -= ret;
   33a00:	6a2b      	ldr	r3, [r5, #32]
   33a02:	1b1b      	subs	r3, r3, r4
   33a04:	622b      	str	r3, [r5, #32]
   33a06:	e7f5      	b.n	339f4 <read_publish_payload+0x44>
	NULL_PARAM_CHECK(client);
   33a08:	f06f 0415 	mvn.w	r4, #21
   33a0c:	e7f5      	b.n	339fa <read_publish_payload+0x4a>

00033a0e <client_write>:
{
   33a0e:	b538      	push	{r3, r4, r5, lr}
   33a10:	4605      	mov	r5, r0
	err_code = mqtt_transport_write(client, data, datalen);
   33a12:	f7eb f83d 	bl	1ea90 <mqtt_transport_write>
	if (err_code < 0) {
   33a16:	1e04      	subs	r4, r0, #0
   33a18:	da05      	bge.n	33a26 <client_write+0x18>
		client_disconnect(client, err_code, true);
   33a1a:	4621      	mov	r1, r4
   33a1c:	4628      	mov	r0, r5
   33a1e:	f7ff ffae 	bl	3397e <client_disconnect.constprop.0>
}
   33a22:	4620      	mov	r0, r4
   33a24:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @retval Current wall clock or sys tick value in milliseconds.
 */
static inline uint32_t mqtt_sys_tick_in_ms_get(void)
{
	return k_uptime_get_32();
   33a26:	f7ff ff77 	bl	33918 <k_uptime_get_32>
	return 0;
   33a2a:	2400      	movs	r4, #0
	client->internal.last_activity = mqtt_sys_tick_in_ms_get();
   33a2c:	6168      	str	r0, [r5, #20]
	return 0;
   33a2e:	e7f8      	b.n	33a22 <client_write+0x14>

00033a30 <mqtt_client_init>:
{
   33a30:	b510      	push	{r4, lr}
	NULL_PARAM_CHECK_VOID(client);
   33a32:	4604      	mov	r4, r0
   33a34:	b190      	cbz	r0, 33a5c <mqtt_client_init+0x2c>
   33a36:	2264      	movs	r2, #100	; 0x64
   33a38:	2100      	movs	r1, #0
   33a3a:	f002 fd95 	bl	36568 <memset>
	return z_impl_k_mutex_init(mutex);
   33a3e:	4620      	mov	r0, r4
   33a40:	f002 fb5d 	bl	360fe <z_impl_k_mutex_init>
	client->protocol_version = MQTT_VERSION_3_1_1;
   33a44:	2304      	movs	r3, #4
   33a46:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	client->clean_session = MQTT_CLEAN_SESSION;
   33a4a:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   33a4e:	f043 0302 	orr.w	r3, r3, #2
   33a52:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	client->keepalive = MQTT_KEEPALIVE;
   33a56:	233c      	movs	r3, #60	; 0x3c
   33a58:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
}
   33a5c:	bd10      	pop	{r4, pc}

00033a5e <mqtt_connect>:
{
   33a5e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   33a60:	4605      	mov	r5, r0
   33a62:	2800      	cmp	r0, #0
   33a64:	d03a      	beq.n	33adc <mqtt_connect+0x7e>
	NULL_PARAM_CHECK(client->client_id.utf8);
   33a66:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   33a68:	b3c3      	cbz	r3, 33adc <mqtt_connect+0x7e>
	mqtt_mutex_lock(client);
   33a6a:	f7eb f853 	bl	1eb14 <mqtt_mutex_lock>
	if ((client->tx_buf == NULL) || (client->rx_buf == NULL)) {
   33a6e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   33a70:	b38b      	cbz	r3, 33ad6 <mqtt_connect+0x78>
   33a72:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   33a74:	b37b      	cbz	r3, 33ad6 <mqtt_connect+0x78>
	err_code = mqtt_transport_connect(client);
   33a76:	4628      	mov	r0, r5
   33a78:	f7eb f800 	bl	1ea7c <mqtt_transport_connect>
	if (err_code < 0) {
   33a7c:	1e04      	subs	r4, r0, #0
   33a7e:	db24      	blt.n	33aca <mqtt_connect+0x6c>
	tx_buf_init(client, &packet);
   33a80:	4669      	mov	r1, sp
   33a82:	4628      	mov	r0, r5
   33a84:	f7ff ff55 	bl	33932 <tx_buf_init>
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   33a88:	69ab      	ldr	r3, [r5, #24]
	err_code = connect_request_encode(client, &packet);
   33a8a:	4669      	mov	r1, sp
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   33a8c:	f043 0302 	orr.w	r3, r3, #2
	err_code = connect_request_encode(client, &packet);
   33a90:	4628      	mov	r0, r5
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   33a92:	61ab      	str	r3, [r5, #24]
	err_code = connect_request_encode(client, &packet);
   33a94:	f7ea ff4c 	bl	1e930 <connect_request_encode>
	if (err_code < 0) {
   33a98:	1e04      	subs	r4, r0, #0
   33a9a:	db13      	blt.n	33ac4 <mqtt_connect+0x66>
	err_code = mqtt_transport_write(client, packet.cur,
   33a9c:	e9dd 1200 	ldrd	r1, r2, [sp]
   33aa0:	4628      	mov	r0, r5
   33aa2:	1a52      	subs	r2, r2, r1
   33aa4:	f7ea fff4 	bl	1ea90 <mqtt_transport_write>
	if (err_code < 0) {
   33aa8:	1e04      	subs	r4, r0, #0
   33aaa:	db0b      	blt.n	33ac4 <mqtt_connect+0x66>
   33aac:	f7ff ff34 	bl	33918 <k_uptime_get_32>
	client->unacked_ping = 0;
   33ab0:	2400      	movs	r4, #0
	client->internal.last_activity = mqtt_sys_tick_in_ms_get();
   33ab2:	6168      	str	r0, [r5, #20]
	client->unacked_ping = 0;
   33ab4:	f885 405f 	strb.w	r4, [r5, #95]	; 0x5f
	mqtt_mutex_unlock(client);
   33ab8:	4628      	mov	r0, r5
   33aba:	f7eb f80f 	bl	1eadc <mqtt_mutex_unlock>
}
   33abe:	4620      	mov	r0, r4
   33ac0:	b003      	add	sp, #12
   33ac2:	bd30      	pop	{r4, r5, pc}
	err_code = mqtt_transport_disconnect(client);
   33ac4:	4628      	mov	r0, r5
   33ac6:	f7ff ff25 	bl	33914 <mqtt_transport_disconnect>
	MQTT_STATE_INIT(client);
   33aca:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   33acc:	e9c5 3305 	strd	r3, r3, [r5, #20]
	client->internal.remaining_payload = 0U;
   33ad0:	e9c5 3307 	strd	r3, r3, [r5, #28]
}
   33ad4:	e7f0      	b.n	33ab8 <mqtt_connect+0x5a>
		err_code = -ENOMEM;
   33ad6:	f06f 040b 	mvn.w	r4, #11
   33ada:	e7f6      	b.n	33aca <mqtt_connect+0x6c>
	NULL_PARAM_CHECK(client);
   33adc:	f06f 0415 	mvn.w	r4, #21
   33ae0:	e7ed      	b.n	33abe <mqtt_connect+0x60>

00033ae2 <mqtt_publish>:
{
   33ae2:	b570      	push	{r4, r5, r6, lr}
   33ae4:	460e      	mov	r6, r1
	NULL_PARAM_CHECK(client);
   33ae6:	4605      	mov	r5, r0
{
   33ae8:	b08e      	sub	sp, #56	; 0x38
	NULL_PARAM_CHECK(client);
   33aea:	2800      	cmp	r0, #0
   33aec:	d03a      	beq.n	33b64 <mqtt_publish+0x82>
	NULL_PARAM_CHECK(param);
   33aee:	2900      	cmp	r1, #0
   33af0:	d038      	beq.n	33b64 <mqtt_publish+0x82>
	mqtt_mutex_lock(client);
   33af2:	f7eb f80f 	bl	1eb14 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   33af6:	4628      	mov	r0, r5
   33af8:	a901      	add	r1, sp, #4
   33afa:	f7ff ff1a 	bl	33932 <tx_buf_init>
	err_code = verify_tx_state(client);
   33afe:	69a8      	ldr	r0, [r5, #24]
   33b00:	f7ff ff25 	bl	3394e <verify_tx_state.isra.0>
	if (err_code < 0) {
   33b04:	1e04      	subs	r4, r0, #0
   33b06:	db22      	blt.n	33b4e <mqtt_publish+0x6c>
	err_code = publish_encode(param, &packet);
   33b08:	4630      	mov	r0, r6
   33b0a:	a901      	add	r1, sp, #4
   33b0c:	f7ff fce4 	bl	334d8 <publish_encode>
	if (err_code < 0) {
   33b10:	1e04      	subs	r4, r0, #0
   33b12:	db1c      	blt.n	33b4e <mqtt_publish+0x6c>
	io_vector[0].iov_base = packet.cur;
   33b14:	9a01      	ldr	r2, [sp, #4]
	io_vector[0].iov_len = packet.end - packet.cur;
   33b16:	9b02      	ldr	r3, [sp, #8]
	io_vector[0].iov_base = packet.cur;
   33b18:	9203      	str	r2, [sp, #12]
	io_vector[0].iov_len = packet.end - packet.cur;
   33b1a:	1a9b      	subs	r3, r3, r2
	memset(&msg, 0, sizeof(msg));
   33b1c:	221c      	movs	r2, #28
	io_vector[0].iov_len = packet.end - packet.cur;
   33b1e:	9304      	str	r3, [sp, #16]
	io_vector[1].iov_base = param->message.payload.data;
   33b20:	68f3      	ldr	r3, [r6, #12]
	memset(&msg, 0, sizeof(msg));
   33b22:	2100      	movs	r1, #0
	io_vector[1].iov_base = param->message.payload.data;
   33b24:	9305      	str	r3, [sp, #20]
	io_vector[1].iov_len = param->message.payload.len;
   33b26:	6933      	ldr	r3, [r6, #16]
	memset(&msg, 0, sizeof(msg));
   33b28:	eb0d 0002 	add.w	r0, sp, r2
	io_vector[1].iov_len = param->message.payload.len;
   33b2c:	9306      	str	r3, [sp, #24]
	memset(&msg, 0, sizeof(msg));
   33b2e:	f002 fd1b 	bl	36568 <memset>
	msg.msg_iov = io_vector;
   33b32:	ab03      	add	r3, sp, #12
   33b34:	9309      	str	r3, [sp, #36]	; 0x24
	msg.msg_iovlen = ARRAY_SIZE(io_vector);
   33b36:	2302      	movs	r3, #2
	err_code = mqtt_transport_write_msg(client, message);
   33b38:	4628      	mov	r0, r5
   33b3a:	a907      	add	r1, sp, #28
	msg.msg_iovlen = ARRAY_SIZE(io_vector);
   33b3c:	930a      	str	r3, [sp, #40]	; 0x28
	err_code = mqtt_transport_write_msg(client, message);
   33b3e:	f7ea ffb3 	bl	1eaa8 <mqtt_transport_write_msg>
	if (err_code < 0) {
   33b42:	1e04      	subs	r4, r0, #0
   33b44:	da09      	bge.n	33b5a <mqtt_publish+0x78>
		client_disconnect(client, err_code, true);
   33b46:	4621      	mov	r1, r4
   33b48:	4628      	mov	r0, r5
   33b4a:	f7ff ff18 	bl	3397e <client_disconnect.constprop.0>
	mqtt_mutex_unlock(client);
   33b4e:	4628      	mov	r0, r5
   33b50:	f7ea ffc4 	bl	1eadc <mqtt_mutex_unlock>
}
   33b54:	4620      	mov	r0, r4
   33b56:	b00e      	add	sp, #56	; 0x38
   33b58:	bd70      	pop	{r4, r5, r6, pc}
   33b5a:	f7ff fedd 	bl	33918 <k_uptime_get_32>
	return 0;
   33b5e:	2400      	movs	r4, #0
	client->internal.last_activity = mqtt_sys_tick_in_ms_get();
   33b60:	6168      	str	r0, [r5, #20]
	return 0;
   33b62:	e7f4      	b.n	33b4e <mqtt_publish+0x6c>
	NULL_PARAM_CHECK(client);
   33b64:	f06f 0415 	mvn.w	r4, #21
   33b68:	e7f4      	b.n	33b54 <mqtt_publish+0x72>

00033b6a <mqtt_publish_qos1_ack>:
{
   33b6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   33b6c:	460e      	mov	r6, r1
	NULL_PARAM_CHECK(client);
   33b6e:	4605      	mov	r5, r0
   33b70:	b1f0      	cbz	r0, 33bb0 <mqtt_publish_qos1_ack+0x46>
	NULL_PARAM_CHECK(param);
   33b72:	b1e9      	cbz	r1, 33bb0 <mqtt_publish_qos1_ack+0x46>
	mqtt_mutex_lock(client);
   33b74:	f7ea ffce 	bl	1eb14 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   33b78:	4628      	mov	r0, r5
   33b7a:	4669      	mov	r1, sp
   33b7c:	f7ff fed9 	bl	33932 <tx_buf_init>
	err_code = verify_tx_state(client);
   33b80:	69a8      	ldr	r0, [r5, #24]
   33b82:	f7ff fee4 	bl	3394e <verify_tx_state.isra.0>
	if (err_code < 0) {
   33b86:	1e04      	subs	r4, r0, #0
   33b88:	db0c      	blt.n	33ba4 <mqtt_publish_qos1_ack+0x3a>
	err_code = publish_ack_encode(param, &packet);
   33b8a:	4669      	mov	r1, sp
   33b8c:	4630      	mov	r0, r6
   33b8e:	f7ff fce4 	bl	3355a <publish_ack_encode>
	if (err_code < 0) {
   33b92:	1e04      	subs	r4, r0, #0
   33b94:	db06      	blt.n	33ba4 <mqtt_publish_qos1_ack+0x3a>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   33b96:	e9dd 1200 	ldrd	r1, r2, [sp]
   33b9a:	4628      	mov	r0, r5
   33b9c:	1a52      	subs	r2, r2, r1
   33b9e:	f7ff ff36 	bl	33a0e <client_write>
   33ba2:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   33ba4:	4628      	mov	r0, r5
   33ba6:	f7ea ff99 	bl	1eadc <mqtt_mutex_unlock>
}
   33baa:	4620      	mov	r0, r4
   33bac:	b002      	add	sp, #8
   33bae:	bd70      	pop	{r4, r5, r6, pc}
	NULL_PARAM_CHECK(client);
   33bb0:	f06f 0415 	mvn.w	r4, #21
   33bb4:	e7f9      	b.n	33baa <mqtt_publish_qos1_ack+0x40>

00033bb6 <mqtt_disconnect>:
{
   33bb6:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   33bb8:	4605      	mov	r5, r0
   33bba:	b308      	cbz	r0, 33c00 <mqtt_disconnect+0x4a>
	mqtt_mutex_lock(client);
   33bbc:	f7ea ffaa 	bl	1eb14 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   33bc0:	4628      	mov	r0, r5
   33bc2:	4669      	mov	r1, sp
   33bc4:	f7ff feb5 	bl	33932 <tx_buf_init>
	err_code = verify_tx_state(client);
   33bc8:	69a8      	ldr	r0, [r5, #24]
   33bca:	f7ff fec0 	bl	3394e <verify_tx_state.isra.0>
	if (err_code < 0) {
   33bce:	1e04      	subs	r4, r0, #0
   33bd0:	db10      	blt.n	33bf4 <mqtt_disconnect+0x3e>
	err_code = disconnect_encode(&packet);
   33bd2:	4668      	mov	r0, sp
   33bd4:	f7ea ff2e 	bl	1ea34 <disconnect_encode>
	if (err_code < 0) {
   33bd8:	1e04      	subs	r4, r0, #0
   33bda:	db0b      	blt.n	33bf4 <mqtt_disconnect+0x3e>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   33bdc:	e9dd 1200 	ldrd	r1, r2, [sp]
   33be0:	4628      	mov	r0, r5
   33be2:	1a52      	subs	r2, r2, r1
   33be4:	f7ff ff13 	bl	33a0e <client_write>
	if (err_code < 0) {
   33be8:	1e04      	subs	r4, r0, #0
   33bea:	db03      	blt.n	33bf4 <mqtt_disconnect+0x3e>
	client_disconnect(client, 0, true);
   33bec:	2100      	movs	r1, #0
   33bee:	4628      	mov	r0, r5
   33bf0:	f7ff fec5 	bl	3397e <client_disconnect.constprop.0>
	mqtt_mutex_unlock(client);
   33bf4:	4628      	mov	r0, r5
   33bf6:	f7ea ff71 	bl	1eadc <mqtt_mutex_unlock>
}
   33bfa:	4620      	mov	r0, r4
   33bfc:	b003      	add	sp, #12
   33bfe:	bd30      	pop	{r4, r5, pc}
	NULL_PARAM_CHECK(client);
   33c00:	f06f 0415 	mvn.w	r4, #21
   33c04:	e7f9      	b.n	33bfa <mqtt_disconnect+0x44>

00033c06 <mqtt_subscribe>:
{
   33c06:	b573      	push	{r0, r1, r4, r5, r6, lr}
   33c08:	460e      	mov	r6, r1
	NULL_PARAM_CHECK(client);
   33c0a:	4605      	mov	r5, r0
   33c0c:	b1f0      	cbz	r0, 33c4c <mqtt_subscribe+0x46>
	NULL_PARAM_CHECK(param);
   33c0e:	b1e9      	cbz	r1, 33c4c <mqtt_subscribe+0x46>
	mqtt_mutex_lock(client);
   33c10:	f7ea ff80 	bl	1eb14 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   33c14:	4628      	mov	r0, r5
   33c16:	4669      	mov	r1, sp
   33c18:	f7ff fe8b 	bl	33932 <tx_buf_init>
	err_code = verify_tx_state(client);
   33c1c:	69a8      	ldr	r0, [r5, #24]
   33c1e:	f7ff fe96 	bl	3394e <verify_tx_state.isra.0>
	if (err_code < 0) {
   33c22:	1e04      	subs	r4, r0, #0
   33c24:	db0c      	blt.n	33c40 <mqtt_subscribe+0x3a>
	err_code = subscribe_encode(param, &packet);
   33c26:	4669      	mov	r1, sp
   33c28:	4630      	mov	r0, r6
   33c2a:	f7ff fc9b 	bl	33564 <subscribe_encode>
	if (err_code < 0) {
   33c2e:	1e04      	subs	r4, r0, #0
   33c30:	db06      	blt.n	33c40 <mqtt_subscribe+0x3a>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   33c32:	e9dd 1200 	ldrd	r1, r2, [sp]
   33c36:	4628      	mov	r0, r5
   33c38:	1a52      	subs	r2, r2, r1
   33c3a:	f7ff fee8 	bl	33a0e <client_write>
   33c3e:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   33c40:	4628      	mov	r0, r5
   33c42:	f7ea ff4b 	bl	1eadc <mqtt_mutex_unlock>
}
   33c46:	4620      	mov	r0, r4
   33c48:	b002      	add	sp, #8
   33c4a:	bd70      	pop	{r4, r5, r6, pc}
	NULL_PARAM_CHECK(client);
   33c4c:	f06f 0415 	mvn.w	r4, #21
   33c50:	e7f9      	b.n	33c46 <mqtt_subscribe+0x40>

00033c52 <mqtt_ping>:
{
   33c52:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   33c54:	4605      	mov	r5, r0
   33c56:	b318      	cbz	r0, 33ca0 <mqtt_ping+0x4e>
	mqtt_mutex_lock(client);
   33c58:	f7ea ff5c 	bl	1eb14 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   33c5c:	4628      	mov	r0, r5
   33c5e:	4669      	mov	r1, sp
   33c60:	f7ff fe67 	bl	33932 <tx_buf_init>
	err_code = verify_tx_state(client);
   33c64:	69a8      	ldr	r0, [r5, #24]
   33c66:	f7ff fe72 	bl	3394e <verify_tx_state.isra.0>
	if (err_code < 0) {
   33c6a:	1e04      	subs	r4, r0, #0
   33c6c:	db12      	blt.n	33c94 <mqtt_ping+0x42>
	err_code = ping_request_encode(&packet);
   33c6e:	4668      	mov	r0, sp
   33c70:	f7ea fef2 	bl	1ea58 <ping_request_encode>
	if (err_code < 0) {
   33c74:	1e04      	subs	r4, r0, #0
   33c76:	db0d      	blt.n	33c94 <mqtt_ping+0x42>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   33c78:	e9dd 1200 	ldrd	r1, r2, [sp]
   33c7c:	4628      	mov	r0, r5
   33c7e:	1a52      	subs	r2, r2, r1
   33c80:	f7ff fec5 	bl	33a0e <client_write>
   33c84:	4604      	mov	r4, r0
	if (client->unacked_ping >= INT8_MAX) {
   33c86:	f995 305f 	ldrsb.w	r3, [r5, #95]	; 0x5f
   33c8a:	2b7f      	cmp	r3, #127	; 0x7f
		client->unacked_ping++;
   33c8c:	bf1c      	itt	ne
   33c8e:	3301      	addne	r3, #1
   33c90:	f885 305f 	strbne.w	r3, [r5, #95]	; 0x5f
	mqtt_mutex_unlock(client);
   33c94:	4628      	mov	r0, r5
   33c96:	f7ea ff21 	bl	1eadc <mqtt_mutex_unlock>
}
   33c9a:	4620      	mov	r0, r4
   33c9c:	b003      	add	sp, #12
   33c9e:	bd30      	pop	{r4, r5, pc}
	NULL_PARAM_CHECK(client);
   33ca0:	f06f 0415 	mvn.w	r4, #21
   33ca4:	e7f9      	b.n	33c9a <mqtt_ping+0x48>

00033ca6 <mqtt_live>:
{
   33ca6:	b538      	push	{r3, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   33ca8:	4604      	mov	r4, r0
   33caa:	b1f0      	cbz	r0, 33cea <mqtt_live+0x44>
	mqtt_mutex_lock(client);
   33cac:	f7ea ff32 	bl	1eb14 <mqtt_mutex_lock>
	elapsed_time = mqtt_elapsed_time_in_ms_get(
   33cb0:	6965      	ldr	r5, [r4, #20]
 *
 * @retval Time elapsed since last_activity time.
 */
static inline uint32_t mqtt_elapsed_time_in_ms_get(uint32_t last_activity)
{
	int32_t diff = k_uptime_get_32() - last_activity;
   33cb2:	f7ff fe31 	bl	33918 <k_uptime_get_32>

	if (diff < 0) {
   33cb6:	1b40      	subs	r0, r0, r5
   33cb8:	d506      	bpl.n	33cc8 <mqtt_live+0x22>
	mqtt_mutex_unlock(client);
   33cba:	4620      	mov	r0, r4
   33cbc:	f7ea ff0e 	bl	1eadc <mqtt_mutex_unlock>
		return -EAGAIN;
   33cc0:	f06f 050a 	mvn.w	r5, #10
}
   33cc4:	4628      	mov	r0, r5
   33cc6:	bd38      	pop	{r3, r4, r5, pc}
	if ((client->keepalive > 0) &&
   33cc8:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
   33ccc:	2b00      	cmp	r3, #0
   33cce:	d0f4      	beq.n	33cba <mqtt_live+0x14>
	    (elapsed_time >= (client->keepalive * 1000))) {
   33cd0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   33cd4:	4353      	muls	r3, r2
	if ((client->keepalive > 0) &&
   33cd6:	4283      	cmp	r3, r0
   33cd8:	d8ef      	bhi.n	33cba <mqtt_live+0x14>
		err_code = mqtt_ping(client);
   33cda:	4620      	mov	r0, r4
   33cdc:	f7ff ffb9 	bl	33c52 <mqtt_ping>
   33ce0:	4605      	mov	r5, r0
	mqtt_mutex_unlock(client);
   33ce2:	4620      	mov	r0, r4
   33ce4:	f7ea fefa 	bl	1eadc <mqtt_mutex_unlock>
	if (ping_sent) {
   33ce8:	e7ec      	b.n	33cc4 <mqtt_live+0x1e>
	NULL_PARAM_CHECK(client);
   33cea:	f06f 0515 	mvn.w	r5, #21
   33cee:	e7e9      	b.n	33cc4 <mqtt_live+0x1e>

00033cf0 <mqtt_keepalive_time_left>:
{
   33cf0:	b538      	push	{r3, r4, r5, lr}
   33cf2:	4604      	mov	r4, r0
					client->internal.last_activity);
   33cf4:	6945      	ldr	r5, [r0, #20]
	int32_t diff = k_uptime_get_32() - last_activity;
   33cf6:	f7ff fe0f 	bl	33918 <k_uptime_get_32>
   33cfa:	1b43      	subs	r3, r0, r5
	uint32_t keepalive_ms = 1000U * client->keepalive;
   33cfc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   33d00:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
		return 0;
   33d04:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   33d08:	4350      	muls	r0, r2
	if (client->keepalive == 0) {
   33d0a:	b11a      	cbz	r2, 33d14 <mqtt_keepalive_time_left+0x24>
	if (keepalive_ms <= elapsed_time) {
   33d0c:	4298      	cmp	r0, r3
   33d0e:	d904      	bls.n	33d1a <mqtt_keepalive_time_left+0x2a>
	return keepalive_ms - elapsed_time;
   33d10:	1ac0      	subs	r0, r0, r3
}
   33d12:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
   33d14:	f04f 30ff 	mov.w	r0, #4294967295
   33d18:	e7fb      	b.n	33d12 <mqtt_keepalive_time_left+0x22>
		return 0;
   33d1a:	2000      	movs	r0, #0
   33d1c:	e7f9      	b.n	33d12 <mqtt_keepalive_time_left+0x22>

00033d1e <mqtt_input>:
{
   33d1e:	b538      	push	{r3, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   33d20:	4605      	mov	r5, r0
   33d22:	b1d0      	cbz	r0, 33d5a <mqtt_input+0x3c>
	mqtt_mutex_lock(client);
   33d24:	f7ea fef6 	bl	1eb14 <mqtt_mutex_lock>
	if (MQTT_HAS_STATE(client, MQTT_STATE_TCP_CONNECTED)) {
   33d28:	69ab      	ldr	r3, [r5, #24]
   33d2a:	079b      	lsls	r3, r3, #30
   33d2c:	d50f      	bpl.n	33d4e <mqtt_input+0x30>
	if (client->internal.remaining_payload > 0) {
   33d2e:	6a2b      	ldr	r3, [r5, #32]
   33d30:	b983      	cbnz	r3, 33d54 <mqtt_input+0x36>
	err_code = mqtt_handle_rx(client);
   33d32:	4628      	mov	r0, r5
   33d34:	f7ff fc79 	bl	3362a <mqtt_handle_rx>
	if (err_code < 0) {
   33d38:	1e04      	subs	r4, r0, #0
   33d3a:	da03      	bge.n	33d44 <mqtt_input+0x26>
		client_disconnect(client, err_code, true);
   33d3c:	4621      	mov	r1, r4
   33d3e:	4628      	mov	r0, r5
   33d40:	f7ff fe1d 	bl	3397e <client_disconnect.constprop.0>
	mqtt_mutex_unlock(client);
   33d44:	4628      	mov	r0, r5
   33d46:	f7ea fec9 	bl	1eadc <mqtt_mutex_unlock>
}
   33d4a:	4620      	mov	r0, r4
   33d4c:	bd38      	pop	{r3, r4, r5, pc}
		err_code = -ENOTCONN;
   33d4e:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   33d52:	e7f7      	b.n	33d44 <mqtt_input+0x26>
		return -EBUSY;
   33d54:	f06f 040f 	mvn.w	r4, #15
   33d58:	e7f4      	b.n	33d44 <mqtt_input+0x26>
	NULL_PARAM_CHECK(client);
   33d5a:	f06f 0415 	mvn.w	r4, #21
   33d5e:	e7f4      	b.n	33d4a <mqtt_input+0x2c>

00033d60 <mqtt_read_publish_payload_blocking>:
}

int mqtt_read_publish_payload_blocking(struct mqtt_client *client, void *buffer,
				       size_t length)
{
	return read_publish_payload(client, buffer, length, true);
   33d60:	2301      	movs	r3, #1
   33d62:	f7ff be25 	b.w	339b0 <read_publish_payload>

00033d66 <mqtt_readall_publish_payload>:
}

int mqtt_readall_publish_payload(struct mqtt_client *client, uint8_t *buffer,
				 size_t length)
{
   33d66:	b570      	push	{r4, r5, r6, lr}
   33d68:	4606      	mov	r6, r0
   33d6a:	460c      	mov	r4, r1
	uint8_t *end = buffer + length;
   33d6c:	188d      	adds	r5, r1, r2

	while (buffer < end) {
   33d6e:	42ac      	cmp	r4, r5
   33d70:	d301      	bcc.n	33d76 <mqtt_readall_publish_payload+0x10>
		}

		buffer += ret;
	}

	return 0;
   33d72:	2000      	movs	r0, #0
}
   33d74:	bd70      	pop	{r4, r5, r6, pc}
		int ret = mqtt_read_publish_payload_blocking(client, buffer,
   33d76:	4621      	mov	r1, r4
   33d78:	4630      	mov	r0, r6
   33d7a:	1b2a      	subs	r2, r5, r4
   33d7c:	f7ff fff0 	bl	33d60 <mqtt_read_publish_payload_blocking>
		if (ret < 0) {
   33d80:	2800      	cmp	r0, #0
   33d82:	dbf7      	blt.n	33d74 <mqtt_readall_publish_payload+0xe>
		} else if (ret == 0) {
   33d84:	d001      	beq.n	33d8a <mqtt_readall_publish_payload+0x24>
		buffer += ret;
   33d86:	4404      	add	r4, r0
   33d88:	e7f1      	b.n	33d6e <mqtt_readall_publish_payload+0x8>
			return -EIO;
   33d8a:	f06f 0004 	mvn.w	r0, #4
   33d8e:	e7f1      	b.n	33d74 <mqtt_readall_publish_payload+0xe>

00033d90 <z_log_msg_static_create.constprop.0>:
   33d90:	2300      	movs	r3, #0
   33d92:	f7dc ba4f 	b.w	10234 <z_impl_z_log_msg_static_create>

00033d96 <set_on_state>:
	__asm__ volatile(
   33d96:	f04f 0320 	mov.w	r3, #32
   33d9a:	f3ef 8211 	mrs	r2, BASEPRI
   33d9e:	f383 8812 	msr	BASEPRI_MAX, r3
   33da2:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   33da6:	6803      	ldr	r3, [r0, #0]
   33da8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   33dac:	f043 0302 	orr.w	r3, r3, #2
   33db0:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   33db2:	f382 8811 	msr	BASEPRI, r2
   33db6:	f3bf 8f6f 	isb	sy
}
   33dba:	4770      	bx	lr

00033dbc <async_start>:
{
   33dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   33dbe:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   33dc0:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   33dc2:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   33dc4:	f04f 0520 	mov.w	r5, #32
   33dc8:	f3ef 8611 	mrs	r6, BASEPRI
   33dcc:	f385 8812 	msr	BASEPRI_MAX, r5
   33dd0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   33dd4:	250c      	movs	r5, #12
   33dd6:	4369      	muls	r1, r5
   33dd8:	440c      	add	r4, r1
   33dda:	6ca5      	ldr	r5, [r4, #72]	; 0x48
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   33ddc:	f005 0c07 	and.w	ip, r5, #7
   33de0:	f1bc 0f01 	cmp.w	ip, #1
   33de4:	d10b      	bne.n	33dfe <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   33de6:	64a7      	str	r7, [r4, #72]	; 0x48
	__asm__ volatile(
   33de8:	f386 8811 	msr	BASEPRI, r6
   33dec:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   33df0:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   33df4:	6843      	ldr	r3, [r0, #4]
   33df6:	585b      	ldr	r3, [r3, r1]
   33df8:	4798      	blx	r3
	return 0;
   33dfa:	2000      	movs	r0, #0
}
   33dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   33dfe:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   33e02:	42af      	cmp	r7, r5
   33e04:	f386 8811 	msr	BASEPRI, r6
   33e08:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   33e0c:	bf0c      	ite	eq
   33e0e:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   33e12:	f04f 30ff 	movne.w	r0, #4294967295
   33e16:	e7f1      	b.n	33dfc <async_start+0x40>

00033e18 <api_start>:
{
   33e18:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   33e1a:	2480      	movs	r4, #128	; 0x80
   33e1c:	9400      	str	r4, [sp, #0]
   33e1e:	f7ff ffcd 	bl	33dbc <async_start>
}
   33e22:	b002      	add	sp, #8
   33e24:	bd10      	pop	{r4, pc}

00033e26 <onoff_started_callback>:
	return &data->mgr[type];
   33e26:	6900      	ldr	r0, [r0, #16]
   33e28:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   33e2a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   33e2e:	2100      	movs	r1, #0
   33e30:	4710      	bx	r2

00033e32 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   33e32:	2000      	movs	r0, #0
   33e34:	f7f1 be5a 	b.w	25aec <nrfx_clock_start>

00033e38 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   33e38:	2000      	movs	r0, #0
   33e3a:	f7f1 beb9 	b.w	25bb0 <nrfx_clock_stop>

00033e3e <blocking_start_callback>:
{
   33e3e:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   33e40:	f7f5 bc32 	b.w	296a8 <z_impl_k_sem_give>

00033e44 <api_stop>:
	return stop(dev, subsys, CTX_API);
   33e44:	2280      	movs	r2, #128	; 0x80
   33e46:	f7eb ba09 	b.w	1f25c <stop>

00033e4a <debug_hook_out_nop>:
}
   33e4a:	2000      	movs	r0, #0
   33e4c:	4770      	bx	lr

00033e4e <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   33e4e:	2000      	movs	r0, #0
   33e50:	4770      	bx	lr

00033e52 <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   33e52:	b538      	push	{r3, r4, r5, lr}
   33e54:	460c      	mov	r4, r1
   33e56:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   33e58:	f7e1 fb72 	bl	15540 <bt_is_ready>
   33e5c:	b128      	cbz	r0, 33e6a <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   33e5e:	4629      	mov	r1, r5
   33e60:	4620      	mov	r0, r4
}
   33e62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   33e66:	f7e0 bba3 	b.w	145b0 <bt_hci_le_rand>
}
   33e6a:	f06f 000a 	mvn.w	r0, #10
   33e6e:	bd38      	pop	{r3, r4, r5, pc}

00033e70 <entropy_psa_crypto_rng_get_entropy>:
}

/* API implementation: get_entropy */
static int entropy_psa_crypto_rng_get_entropy(const struct device *dev,
					      uint8_t *buffer, uint16_t length)
{
   33e70:	4608      	mov	r0, r1
   33e72:	b508      	push	{r3, lr}
	psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;

	ARG_UNUSED(dev);

	status = psa_generate_random(buffer, length);
   33e74:	4611      	mov	r1, r2
   33e76:	f7f1 fd07 	bl	25888 <psa_generate_random>
	if (status != PSA_SUCCESS) {
		return -EIO;
   33e7a:	2800      	cmp	r0, #0
	}

	return 0;
}
   33e7c:	bf18      	it	ne
   33e7e:	f06f 0004 	mvnne.w	r0, #4
   33e82:	bd08      	pop	{r3, pc}

00033e84 <entropy_psa_crypto_rng_init>:
{
   33e84:	b508      	push	{r3, lr}
	status = psa_crypto_init();
   33e86:	f001 f9a0 	bl	351ca <psa_crypto_init>
		return -EIO;
   33e8a:	2800      	cmp	r0, #0
}
   33e8c:	bf18      	it	ne
   33e8e:	f06f 0004 	mvnne.w	r0, #4
   33e92:	bd08      	pop	{r3, pc}

00033e94 <is_regular_addr_valid>:
{
   33e94:	b538      	push	{r3, r4, r5, lr}
   33e96:	4605      	mov	r5, r0
   33e98:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   33e9a:	f001 fa2c 	bl	352f6 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   33e9e:	2d00      	cmp	r5, #0
   33ea0:	db07      	blt.n	33eb2 <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
   33ea2:	42a8      	cmp	r0, r5
   33ea4:	d905      	bls.n	33eb2 <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
   33ea6:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
   33ea8:	4284      	cmp	r4, r0
   33eaa:	bf8c      	ite	hi
   33eac:	2000      	movhi	r0, #0
   33eae:	2001      	movls	r0, #1
}
   33eb0:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   33eb2:	2000      	movs	r0, #0
   33eb4:	e7fc      	b.n	33eb0 <is_regular_addr_valid+0x1c>

00033eb6 <flash_get_page_info>:

#include <zephyr/drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   33eb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   33eb8:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   33eba:	2300      	movs	r3, #0
{
   33ebc:	4616      	mov	r6, r2
	const struct flash_driver_api *api = dev->api;
   33ebe:	6882      	ldr	r2, [r0, #8]
	info->start_offset = 0;
   33ec0:	6023      	str	r3, [r4, #0]
	info->index = 0U;
   33ec2:	60a3      	str	r3, [r4, #8]
{
   33ec4:	460d      	mov	r5, r1

	api->page_layout(dev, &layout, &layout_size);
   33ec6:	6913      	ldr	r3, [r2, #16]
   33ec8:	4669      	mov	r1, sp
   33eca:	aa01      	add	r2, sp, #4
   33ecc:	4798      	blx	r3

	while (layout_size--) {
   33ece:	9b01      	ldr	r3, [sp, #4]
   33ed0:	1e5a      	subs	r2, r3, #1
   33ed2:	9201      	str	r2, [sp, #4]
   33ed4:	b91b      	cbnz	r3, 33ede <flash_get_page_info+0x28>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   33ed6:	f06f 0015 	mvn.w	r0, #21
}
   33eda:	b003      	add	sp, #12
   33edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		info->size = layout->pages_size;
   33ede:	9800      	ldr	r0, [sp, #0]
			index_jmp = index - info->index;
   33ee0:	68a2      	ldr	r2, [r4, #8]
		info->size = layout->pages_size;
   33ee2:	6847      	ldr	r7, [r0, #4]
			index_jmp = (offs - info->start_offset) / info->size;
   33ee4:	6821      	ldr	r1, [r4, #0]
		info->size = layout->pages_size;
   33ee6:	6067      	str	r7, [r4, #4]
		if (offs == 0) {
   33ee8:	b985      	cbnz	r5, 33f0c <flash_get_page_info+0x56>
			index_jmp = index - info->index;
   33eea:	1ab3      	subs	r3, r6, r2
		index_jmp = MIN(index_jmp, layout->pages_count);
   33eec:	f8d0 c000 	ldr.w	ip, [r0]
   33ef0:	4563      	cmp	r3, ip
   33ef2:	bf28      	it	cs
   33ef4:	4663      	movcs	r3, ip
		info->start_offset += (index_jmp * info->size);
   33ef6:	fb03 1107 	mla	r1, r3, r7, r1
		info->index += index_jmp;
   33efa:	441a      	add	r2, r3
		info->start_offset += (index_jmp * info->size);
   33efc:	6021      	str	r1, [r4, #0]
		info->index += index_jmp;
   33efe:	60a2      	str	r2, [r4, #8]
		if (index_jmp < layout->pages_count) {
   33f00:	6802      	ldr	r2, [r0, #0]
   33f02:	429a      	cmp	r2, r3
   33f04:	d806      	bhi.n	33f14 <flash_get_page_info+0x5e>
		layout++;
   33f06:	3008      	adds	r0, #8
   33f08:	9000      	str	r0, [sp, #0]
   33f0a:	e7e0      	b.n	33ece <flash_get_page_info+0x18>
			index_jmp = (offs - info->start_offset) / info->size;
   33f0c:	1a6b      	subs	r3, r5, r1
   33f0e:	fbb3 f3f7 	udiv	r3, r3, r7
   33f12:	e7eb      	b.n	33eec <flash_get_page_info+0x36>
			return 0;
   33f14:	2000      	movs	r0, #0
   33f16:	e7e0      	b.n	33eda <flash_get_page_info+0x24>

00033f18 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   33f18:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   33f1a:	2200      	movs	r2, #0
   33f1c:	f7ff bfcb 	b.w	33eb6 <flash_get_page_info>

00033f20 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   33f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;
   33f24:	2400      	movs	r4, #0

	api->page_layout(dev, &layout, &num_blocks);
   33f26:	6883      	ldr	r3, [r0, #8]
{
   33f28:	b086      	sub	sp, #24
   33f2a:	4688      	mov	r8, r1
   33f2c:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   33f2e:	691b      	ldr	r3, [r3, #16]
   33f30:	aa02      	add	r2, sp, #8
   33f32:	a901      	add	r1, sp, #4
   33f34:	4798      	blx	r3
	size_t block, num_blocks, page = 0, i;
   33f36:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   33f38:	4625      	mov	r5, r4
   33f3a:	9b02      	ldr	r3, [sp, #8]
   33f3c:	42ab      	cmp	r3, r5
   33f3e:	d802      	bhi.n	33f46 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   33f40:	b006      	add	sp, #24
   33f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < l->pages_count; i++) {
   33f46:	2600      	movs	r6, #0
		const struct flash_pages_layout *l = &layout[block];
   33f48:	9f01      	ldr	r7, [sp, #4]
   33f4a:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		page_info.size = l->pages_size;
   33f4e:	687b      	ldr	r3, [r7, #4]
   33f50:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   33f52:	683a      	ldr	r2, [r7, #0]
   33f54:	eb0a 0306 	add.w	r3, sl, r6
   33f58:	42b2      	cmp	r2, r6
   33f5a:	d802      	bhi.n	33f62 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   33f5c:	469a      	mov	sl, r3
   33f5e:	3501      	adds	r5, #1
   33f60:	e7eb      	b.n	33f3a <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   33f62:	4649      	mov	r1, r9
			page_info.start_offset = off;
   33f64:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   33f66:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   33f68:	a803      	add	r0, sp, #12
   33f6a:	47c0      	blx	r8
   33f6c:	2800      	cmp	r0, #0
   33f6e:	d0e7      	beq.n	33f40 <flash_page_foreach+0x20>
			off += page_info.size;
   33f70:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   33f72:	3601      	adds	r6, #1
			off += page_info.size;
   33f74:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   33f76:	e7ec      	b.n	33f52 <flash_page_foreach+0x32>

00033f78 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   33f78:	6843      	ldr	r3, [r0, #4]
}
   33f7a:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   33f7c:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   33f7e:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   33f80:	600b      	str	r3, [r1, #0]
}
   33f82:	4770      	bx	lr

00033f84 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   33f84:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
   33f86:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   33f8a:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
   33f8c:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   33f90:	6098      	str	r0, [r3, #8]
}
   33f92:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   33f94:	60d9      	str	r1, [r3, #12]
   33f96:	4770      	bx	lr

00033f98 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   33f98:	6843      	ldr	r3, [r0, #4]
}
   33f9a:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   33f9c:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   33f9e:	6099      	str	r1, [r3, #8]
}
   33fa0:	4770      	bx	lr

00033fa2 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   33fa2:	6843      	ldr	r3, [r0, #4]
}
   33fa4:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   33fa6:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   33fa8:	60d9      	str	r1, [r3, #12]
}
   33faa:	4770      	bx	lr

00033fac <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   33fac:	6843      	ldr	r3, [r0, #4]
   33fae:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   33fb0:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
   33fb2:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   33fb6:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   33fb8:	6090      	str	r0, [r2, #8]
}
   33fba:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   33fbc:	60d3      	str	r3, [r2, #12]
   33fbe:	4770      	bx	lr

00033fc0 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   33fc0:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   33fc2:	6843      	ldr	r3, [r0, #4]
   33fc4:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   33fc6:	7a05      	ldrb	r5, [r0, #8]
   33fc8:	6844      	ldr	r4, [r0, #4]
   33fca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   33fce:	42a3      	cmp	r3, r4
   33fd0:	d302      	bcc.n	33fd8 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   33fd2:	f06f 0001 	mvn.w	r0, #1
}
   33fd6:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   33fd8:	795c      	ldrb	r4, [r3, #5]
   33fda:	428c      	cmp	r4, r1
   33fdc:	d001      	beq.n	33fe2 <pinctrl_lookup_state+0x22>
		(*state)++;
   33fde:	3308      	adds	r3, #8
   33fe0:	e7f0      	b.n	33fc4 <pinctrl_lookup_state+0x4>
			return 0;
   33fe2:	2000      	movs	r0, #0
   33fe4:	e7f7      	b.n	33fd6 <pinctrl_lookup_state+0x16>

00033fe6 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   33fe6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33fea:	4615      	mov	r5, r2
   33fec:	4681      	mov	r9, r0
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   33fee:	f04f 0801 	mov.w	r8, #1
   33ff2:	b085      	sub	sp, #20
   33ff4:	eb00 0781 	add.w	r7, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   33ff8:	454f      	cmp	r7, r9
   33ffa:	d103      	bne.n	34004 <pinctrl_configure_pins+0x1e>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   33ffc:	2000      	movs	r0, #0
}
   33ffe:	b005      	add	sp, #20
   34000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   34004:	f8d9 3000 	ldr.w	r3, [r9]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   34008:	f003 047f 	and.w	r4, r3, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   3400c:	f3c3 2643 	ubfx	r6, r3, #9, #4
			pin = 0xFFFFFFFFU;
   34010:	2c7f      	cmp	r4, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   34012:	ea4f 4313 	mov.w	r3, r3, lsr #16
			pin = 0xFFFFFFFFU;
   34016:	bf08      	it	eq
   34018:	f04f 34ff 	moveq.w	r4, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
   3401c:	2b19      	cmp	r3, #25
   3401e:	d873      	bhi.n	34108 <pinctrl_configure_pins+0x122>
   34020:	e8df f003 	tbb	[pc, r3]
   34024:	221f190d 	.word	0x221f190d
   34028:	72223325 	.word	0x72223325
   3402c:	38727272 	.word	0x38727272
   34030:	7272725d 	.word	0x7272725d
   34034:	72727272 	.word	0x72727272
   34038:	69607272 	.word	0x69607272
   3403c:	6f6c      	.short	0x6f6c
			NRF_PSEL_UART(reg, TXD) = pin;
   3403e:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   34042:	a803      	add	r0, sp, #12
   34044:	9403      	str	r4, [sp, #12]
   34046:	f7eb fde7 	bl	1fc18 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   3404a:	fa08 f304 	lsl.w	r3, r8, r4
        nrf_gpio_pin_set(pin_number);
   3404e:	f04f 0a01 	mov.w	sl, #1
    p_reg->OUTSET = set_mask;
   34052:	6083      	str	r3, [r0, #8]
   34054:	e003      	b.n	3405e <pinctrl_configure_pins+0x78>
			NRF_PSEL_UART(reg, RXD) = pin;
   34056:	f8c5 4514 	str.w	r4, [r5, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   3405a:	f04f 0a00 	mov.w	sl, #0
        nrf_gpio_pin_set(pin_number);
   3405e:	46d3      	mov	fp, sl
   34060:	e020      	b.n	340a4 <pinctrl_configure_pins+0xbe>
			NRF_PSEL_UART(reg, RTS) = pin;
   34062:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (write != NO_WRITE) {
   34066:	e7ec      	b.n	34042 <pinctrl_configure_pins+0x5c>
			NRF_PSEL_UART(reg, CTS) = pin;
   34068:	f8c5 4510 	str.w	r4, [r5, #1296]	; 0x510
			if (write != NO_WRITE) {
   3406c:	e7f5      	b.n	3405a <pinctrl_configure_pins+0x74>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   3406e:	f04f 0a00 	mov.w	sl, #0
			NRF_PSEL_SPIM(reg, SCK) = pin;
   34072:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   34076:	a803      	add	r0, sp, #12
   34078:	9403      	str	r4, [sp, #12]
   3407a:	f7eb fdcd 	bl	1fc18 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   3407e:	fa08 f304 	lsl.w	r3, r8, r4
    p_reg->OUTCLR = clr_mask;
   34082:	f04f 0b01 	mov.w	fp, #1
   34086:	60c3      	str	r3, [r0, #12]
   34088:	e00c      	b.n	340a4 <pinctrl_configure_pins+0xbe>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   3408a:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
   3408e:	f04f 0a01 	mov.w	sl, #1
   34092:	e7f0      	b.n	34076 <pinctrl_configure_pins+0x90>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   34094:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   34098:	2e00      	cmp	r6, #0
   3409a:	d1de      	bne.n	3405a <pinctrl_configure_pins+0x74>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   3409c:	f04f 0a00 	mov.w	sl, #0
				drive = NRF_DRIVE_S0D1;
   340a0:	2606      	movs	r6, #6
			dir = NRF_GPIO_PIN_DIR_INPUT;
   340a2:	46d3      	mov	fp, sl
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   340a4:	f859 3b04 	ldr.w	r3, [r9], #4
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   340a8:	a803      	add	r0, sp, #12
   340aa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   340ae:	2a00      	cmp	r2, #0
   340b0:	bf1c      	itt	ne
   340b2:	f04f 0b00 	movne.w	fp, #0
   340b6:	f04f 0a01 	movne.w	sl, #1
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   340ba:	9301      	str	r3, [sp, #4]
   340bc:	9403      	str	r4, [sp, #12]
   340be:	f7eb fdab 	bl	1fc18 <nrf_gpio_pin_port_decode>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   340c2:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   340c4:	0236      	lsls	r6, r6, #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   340c6:	f3c3 13c1 	ubfx	r3, r3, #7, #2
   340ca:	ea46 0683 	orr.w	r6, r6, r3, lsl #2
   340ce:	ea46 060b 	orr.w	r6, r6, fp
   340d2:	ea46 064a 	orr.w	r6, r6, sl, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   340d6:	3480      	adds	r4, #128	; 0x80
   340d8:	f840 6024 	str.w	r6, [r0, r4, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   340dc:	e78c      	b.n	33ff8 <pinctrl_configure_pins+0x12>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   340de:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   340e2:	e7d9      	b.n	34098 <pinctrl_configure_pins+0xb2>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   340e4:	f8c5 4560 	str.w	r4, [r5, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   340e8:	f8d9 3000 	ldr.w	r3, [r9]
   340ec:	f3c3 3380 	ubfx	r3, r3, #14, #1
    if (value == 0)
   340f0:	2b00      	cmp	r3, #0
   340f2:	d0cc      	beq.n	3408e <pinctrl_configure_pins+0xa8>
   340f4:	e7a5      	b.n	34042 <pinctrl_configure_pins+0x5c>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   340f6:	f8c5 4564 	str.w	r4, [r5, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   340fa:	e7f5      	b.n	340e8 <pinctrl_configure_pins+0x102>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   340fc:	f8c5 4568 	str.w	r4, [r5, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   34100:	e7f2      	b.n	340e8 <pinctrl_configure_pins+0x102>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   34102:	f8c5 456c 	str.w	r4, [r5, #1388]	; 0x56c
   34106:	e7ef      	b.n	340e8 <pinctrl_configure_pins+0x102>
		switch (NRF_GET_FUN(pins[i])) {
   34108:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3410c:	e777      	b.n	33ffe <pinctrl_configure_pins+0x18>

0003410e <uarte_nrfx_config_get>:
{
   3410e:	460b      	mov	r3, r1
	struct uarte_nrfx_data *data = dev->data;
   34110:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
   34112:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   34116:	e883 0003 	stmia.w	r3, {r0, r1}
}
   3411a:	2000      	movs	r0, #0
   3411c:	4770      	bx	lr

0003411e <uarte_nrfx_err_check>:
	return config->uarte_regs;
   3411e:	6843      	ldr	r3, [r0, #4]
   34120:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   34122:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   34126:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   3412a:	4770      	bx	lr

0003412c <timer_handler>:
static void timer_handler(nrf_timer_event_t event_type, void *p_context) { }
   3412c:	4770      	bx	lr

0003412e <user_callback>:
	if (data->async->user_callback) {
   3412e:	6903      	ldr	r3, [r0, #16]
   34130:	691a      	ldr	r2, [r3, #16]
   34132:	6813      	ldr	r3, [r2, #0]
   34134:	b10b      	cbz	r3, 3413a <user_callback+0xc>
		data->async->user_callback(dev, evt, data->async->user_data);
   34136:	6852      	ldr	r2, [r2, #4]
   34138:	4718      	bx	r3
}
   3413a:	4770      	bx	lr

0003413c <notify_uart_rx_rdy>:
{
   3413c:	b570      	push	{r4, r5, r6, lr}
   3413e:	b086      	sub	sp, #24
	struct uarte_nrfx_data *data = dev->data;
   34140:	6906      	ldr	r6, [r0, #16]
{
   34142:	4604      	mov	r4, r0
   34144:	460d      	mov	r5, r1
	struct uart_event evt = {
   34146:	2214      	movs	r2, #20
   34148:	2100      	movs	r1, #0
   3414a:	a801      	add	r0, sp, #4
   3414c:	f002 fa0c 	bl	36568 <memset>
   34150:	2302      	movs	r3, #2
   34152:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
   34156:	6933      	ldr	r3, [r6, #16]
	user_callback(dev, &evt);
   34158:	4620      	mov	r0, r4
	struct uart_event evt = {
   3415a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   3415c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	user_callback(dev, &evt);
   3415e:	a901      	add	r1, sp, #4
	struct uart_event evt = {
   34160:	e9cd 3503 	strd	r3, r5, [sp, #12]
   34164:	9202      	str	r2, [sp, #8]
	user_callback(dev, &evt);
   34166:	f7ff ffe2 	bl	3412e <user_callback>
}
   3416a:	b006      	add	sp, #24
   3416c:	bd70      	pop	{r4, r5, r6, pc}

0003416e <rx_buf_release>:
{
   3416e:	b570      	push	{r4, r5, r6, lr}
	if (*buf) {
   34170:	680e      	ldr	r6, [r1, #0]
{
   34172:	4605      	mov	r5, r0
   34174:	460c      	mov	r4, r1
   34176:	b086      	sub	sp, #24
	if (*buf) {
   34178:	b17e      	cbz	r6, 3419a <rx_buf_release+0x2c>
		struct uart_event evt = {
   3417a:	2214      	movs	r2, #20
   3417c:	2100      	movs	r1, #0
   3417e:	a801      	add	r0, sp, #4
   34180:	f002 f9f2 	bl	36568 <memset>
   34184:	2304      	movs	r3, #4
		user_callback(dev, &evt);
   34186:	4628      	mov	r0, r5
   34188:	eb0d 0103 	add.w	r1, sp, r3
		struct uart_event evt = {
   3418c:	f88d 3004 	strb.w	r3, [sp, #4]
   34190:	9602      	str	r6, [sp, #8]
		user_callback(dev, &evt);
   34192:	f7ff ffcc 	bl	3412e <user_callback>
		*buf = NULL;
   34196:	2300      	movs	r3, #0
   34198:	6023      	str	r3, [r4, #0]
}
   3419a:	b006      	add	sp, #24
   3419c:	bd70      	pop	{r4, r5, r6, pc}

0003419e <notify_rx_disable>:
{
   3419e:	b510      	push	{r4, lr}
   341a0:	b086      	sub	sp, #24
   341a2:	4604      	mov	r4, r0
	struct uart_event evt = {
   341a4:	2214      	movs	r2, #20
   341a6:	2100      	movs	r1, #0
   341a8:	a801      	add	r0, sp, #4
   341aa:	f002 f9dd 	bl	36568 <memset>
   341ae:	2305      	movs	r3, #5
	user_callback(dev, (struct uart_event *)&evt);
   341b0:	4620      	mov	r0, r4
   341b2:	a901      	add	r1, sp, #4
	struct uart_event evt = {
   341b4:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
   341b8:	f7ff ffb9 	bl	3412e <user_callback>
}
   341bc:	b006      	add	sp, #24
   341be:	bd10      	pop	{r4, pc}

000341c0 <uarte_nrfx_rx_buf_rsp>:
{
   341c0:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   341c2:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   341c4:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   341c6:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   341c8:	f04f 0020 	mov.w	r0, #32
   341cc:	f3ef 8611 	mrs	r6, BASEPRI
   341d0:	f380 8812 	msr	BASEPRI_MAX, r0
   341d4:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
   341d8:	692c      	ldr	r4, [r5, #16]
   341da:	6da0      	ldr	r0, [r4, #88]	; 0x58
   341dc:	b198      	cbz	r0, 34206 <uarte_nrfx_rx_buf_rsp+0x46>
	} else if (data->async->rx_next_buf == NULL) {
   341de:	6e60      	ldr	r0, [r4, #100]	; 0x64
   341e0:	b9a0      	cbnz	r0, 3420c <uarte_nrfx_rx_buf_rsp+0x4c>
		data->async->rx_next_buf = buf;
   341e2:	6661      	str	r1, [r4, #100]	; 0x64
		data->async->rx_next_buf_len = len;
   341e4:	692c      	ldr	r4, [r5, #16]
   341e6:	66a2      	str	r2, [r4, #104]	; 0x68
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   341e8:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   341ec:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
   341f0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   341f4:	f042 0220 	orr.w	r2, r2, #32
   341f8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	__asm__ volatile(
   341fc:	f386 8811 	msr	BASEPRI, r6
   34200:	f3bf 8f6f 	isb	sy
}
   34204:	bd70      	pop	{r4, r5, r6, pc}
		err = -EACCES;
   34206:	f06f 000c 	mvn.w	r0, #12
   3420a:	e7f7      	b.n	341fc <uarte_nrfx_rx_buf_rsp+0x3c>
		err = -EBUSY;
   3420c:	f06f 000f 	mvn.w	r0, #15
   34210:	e7f4      	b.n	341fc <uarte_nrfx_rx_buf_rsp+0x3c>

00034212 <uarte_nrfx_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
   34212:	6903      	ldr	r3, [r0, #16]
	if (!data->async) {
   34214:	6918      	ldr	r0, [r3, #16]
   34216:	b120      	cbz	r0, 34222 <uarte_nrfx_callback_set+0x10>
	data->async->user_callback = callback;
   34218:	6001      	str	r1, [r0, #0]
	data->async->user_data = user_data;
   3421a:	691b      	ldr	r3, [r3, #16]
	return 0;
   3421c:	2000      	movs	r0, #0
	data->async->user_data = user_data;
   3421e:	605a      	str	r2, [r3, #4]
	return 0;
   34220:	4770      	bx	lr
		return -ENOTSUP;
   34222:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   34226:	4770      	bx	lr

00034228 <uarte_nrfx_poll_in>:
{
   34228:	b510      	push	{r4, lr}
	const struct uarte_nrfx_data *data = dev->data;
   3422a:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   3422c:	6843      	ldr	r3, [r0, #4]
	if (data->async) {
   3422e:	6910      	ldr	r0, [r2, #16]
	return config->uarte_regs;
   34230:	681b      	ldr	r3, [r3, #0]
	if (data->async) {
   34232:	b960      	cbnz	r0, 3424e <uarte_nrfx_poll_in+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   34234:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   34238:	b164      	cbz	r4, 34254 <uarte_nrfx_poll_in+0x2c>
	*c = *data->rx_data;
   3423a:	69d2      	ldr	r2, [r2, #28]
   3423c:	7812      	ldrb	r2, [r2, #0]
   3423e:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   34240:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   34244:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   34248:	2201      	movs	r2, #1
   3424a:	601a      	str	r2, [r3, #0]
}
   3424c:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   3424e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   34252:	e7fb      	b.n	3424c <uarte_nrfx_poll_in+0x24>
		return -1;
   34254:	f04f 30ff 	mov.w	r0, #4294967295
   34258:	e7f8      	b.n	3424c <uarte_nrfx_poll_in+0x24>

0003425a <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   3425a:	2a00      	cmp	r2, #0
{
   3425c:	b510      	push	{r4, lr}
   3425e:	4604      	mov	r4, r0
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   34260:	dd10      	ble.n	34284 <uarte_nrfx_fifo_read+0x2a>
	return config->uarte_regs;
   34262:	6843      	ldr	r3, [r0, #4]
   34264:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   34266:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   3426a:	b150      	cbz	r0, 34282 <uarte_nrfx_fifo_read+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3426c:	2000      	movs	r0, #0
	const struct uarte_nrfx_data *data = dev->data;
   3426e:	6922      	ldr	r2, [r4, #16]
   34270:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   34274:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   34278:	2001      	movs	r0, #1
		rx_data[num_rx++] = *data->rx_data;
   3427a:	69d2      	ldr	r2, [r2, #28]
   3427c:	7812      	ldrb	r2, [r2, #0]
   3427e:	700a      	strb	r2, [r1, #0]
   34280:	6018      	str	r0, [r3, #0]
}
   34282:	bd10      	pop	{r4, pc}
	int num_rx = 0;
   34284:	2000      	movs	r0, #0
   34286:	e7fc      	b.n	34282 <uarte_nrfx_fifo_read+0x28>

00034288 <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   34288:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   3428a:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
   3428c:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   3428e:	f04f 0020 	mov.w	r0, #32
   34292:	f3ef 8311 	mrs	r3, BASEPRI
   34296:	f380 8812 	msr	BASEPRI_MAX, r0
   3429a:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   3429e:	2000      	movs	r0, #0
   342a0:	68c9      	ldr	r1, [r1, #12]
   342a2:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   342a4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   342a8:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   342ac:	f383 8811 	msr	BASEPRI, r3
   342b0:	f3bf 8f6f 	isb	sy
}
   342b4:	4770      	bx	lr

000342b6 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   342b6:	2201      	movs	r2, #1
   342b8:	6903      	ldr	r3, [r0, #16]
   342ba:	68db      	ldr	r3, [r3, #12]
   342bc:	739a      	strb	r2, [r3, #14]
}
   342be:	4770      	bx	lr

000342c0 <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
   342c0:	6903      	ldr	r3, [r0, #16]
   342c2:	68db      	ldr	r3, [r3, #12]
   342c4:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   342c6:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   342ca:	b962      	cbnz	r2, 342e6 <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
   342cc:	6842      	ldr	r2, [r0, #4]
   342ce:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   342d0:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   342d4:	b140      	cbz	r0, 342e8 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   342d6:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   342da:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   342de:	d003      	beq.n	342e8 <uarte_nrfx_irq_tx_ready_complete+0x28>
   342e0:	2001      	movs	r0, #1
		data->int_driven->fifo_fill_lock = 0;
   342e2:	6119      	str	r1, [r3, #16]
   342e4:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   342e6:	2000      	movs	r0, #0
}
   342e8:	4770      	bx	lr

000342ea <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   342ea:	6843      	ldr	r3, [r0, #4]
   342ec:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   342ee:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   342f2:	3800      	subs	r0, #0
   342f4:	bf18      	it	ne
   342f6:	2001      	movne	r0, #1
   342f8:	4770      	bx	lr

000342fa <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   342fa:	2210      	movs	r2, #16
	return config->uarte_regs;
   342fc:	6843      	ldr	r3, [r0, #4]
   342fe:	681b      	ldr	r3, [r3, #0]
   34300:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   34304:	4770      	bx	lr

00034306 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   34306:	2210      	movs	r2, #16
	return config->uarte_regs;
   34308:	6843      	ldr	r3, [r0, #4]
   3430a:	681b      	ldr	r3, [r3, #0]
   3430c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   34310:	4770      	bx	lr

00034312 <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   34312:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   34316:	6843      	ldr	r3, [r0, #4]
   34318:	681b      	ldr	r3, [r3, #0]
   3431a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   3431e:	4770      	bx	lr

00034320 <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   34320:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   34324:	6843      	ldr	r3, [r0, #4]
   34326:	681b      	ldr	r3, [r3, #0]
   34328:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   3432c:	4770      	bx	lr

0003432e <uarte_nrfx_irq_is_pending>:
{
   3432e:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   34330:	6843      	ldr	r3, [r0, #4]
{
   34332:	4604      	mov	r4, r0
	return config->uarte_regs;
   34334:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   34336:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   3433a:	025b      	lsls	r3, r3, #9
   3433c:	d405      	bmi.n	3434a <uarte_nrfx_irq_is_pending+0x1c>
   3433e:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   34342:	f010 0010 	ands.w	r0, r0, #16
   34346:	d106      	bne.n	34356 <uarte_nrfx_irq_is_pending+0x28>
}
   34348:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   3434a:	f7ff ffb9 	bl	342c0 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   3434e:	2800      	cmp	r0, #0
   34350:	d0f5      	beq.n	3433e <uarte_nrfx_irq_is_pending+0x10>
		||
   34352:	2001      	movs	r0, #1
   34354:	e7f8      	b.n	34348 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   34356:	4620      	mov	r0, r4
   34358:	f7ff ffc7 	bl	342ea <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   3435c:	3800      	subs	r0, #0
   3435e:	bf18      	it	ne
   34360:	2001      	movne	r0, #1
   34362:	e7f1      	b.n	34348 <uarte_nrfx_irq_is_pending+0x1a>

00034364 <uarte_nrfx_irq_update>:
}
   34364:	2001      	movs	r0, #1
   34366:	4770      	bx	lr

00034368 <uarte_nrfx_irq_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
   34368:	6903      	ldr	r3, [r0, #16]
	data->int_driven->cb = cb;
   3436a:	68d8      	ldr	r0, [r3, #12]
   3436c:	6001      	str	r1, [r0, #0]
	data->int_driven->cb_data = cb_data;
   3436e:	68db      	ldr	r3, [r3, #12]
   34370:	605a      	str	r2, [r3, #4]
}
   34372:	4770      	bx	lr

00034374 <uarte_enable>:
{
   34374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
   34376:	6907      	ldr	r7, [r0, #16]
{
   34378:	4604      	mov	r4, r0
	if (data->async) {
   3437a:	693b      	ldr	r3, [r7, #16]
   3437c:	b92b      	cbnz	r3, 3438a <uarte_enable+0x16>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   3437e:	2208      	movs	r2, #8
	return config->uarte_regs;
   34380:	6863      	ldr	r3, [r4, #4]
   34382:	681b      	ldr	r3, [r3, #0]
   34384:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   34388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		bool disabled = data->async->low_power_mask == 0;
   3438a:	f8d3 50c0 	ldr.w	r5, [r3, #192]	; 0xc0
	const struct uarte_nrfx_config *config = dev->config;
   3438e:	6846      	ldr	r6, [r0, #4]
		data->async->low_power_mask |= mask;
   34390:	4329      	orrs	r1, r5
   34392:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		if (HW_RX_COUNTING_ENABLED(data) && disabled) {
   34396:	693b      	ldr	r3, [r7, #16]
   34398:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
   3439c:	2b00      	cmp	r3, #0
   3439e:	d0ee      	beq.n	3437e <uarte_enable+0xa>
   343a0:	2d00      	cmp	r5, #0
   343a2:	d1ec      	bne.n	3437e <uarte_enable+0xa>
			const nrfx_timer_t *timer = &config->timer;
   343a4:	3610      	adds	r6, #16
			nrfx_timer_enable(timer);
   343a6:	4630      	mov	r0, r6
   343a8:	f7f2 fa66 	bl	26878 <nrfx_timer_enable>
			for (int i = 0; i < data->async->rx_flush_cnt; i++) {
   343ac:	693b      	ldr	r3, [r7, #16]
   343ae:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   343b2:	42ab      	cmp	r3, r5
   343b4:	dde3      	ble.n	3437e <uarte_enable+0xa>
				nrfx_timer_increment(timer);
   343b6:	4630      	mov	r0, r6
   343b8:	f7f2 fae0 	bl	2697c <nrfx_timer_increment>
			for (int i = 0; i < data->async->rx_flush_cnt; i++) {
   343bc:	3501      	adds	r5, #1
   343be:	e7f5      	b.n	343ac <uarte_enable+0x38>

000343c0 <tx_start>:
{
   343c0:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
   343c2:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   343c4:	681c      	ldr	r4, [r3, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   343c6:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   343ca:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   343ce:	2200      	movs	r2, #0
   343d0:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
   343d4:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
   343d8:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   343dc:	685b      	ldr	r3, [r3, #4]
   343de:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
   343e2:	06db      	lsls	r3, r3, #27
   343e4:	d506      	bpl.n	343f4 <tx_start+0x34>
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   343e6:	2101      	movs	r1, #1
   343e8:	f7ff ffc4 	bl	34374 <uarte_enable>
    p_reg->INTENSET = mask;
   343ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   343f0:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   343f4:	2301      	movs	r3, #1
   343f6:	60a3      	str	r3, [r4, #8]
}
   343f8:	bd10      	pop	{r4, pc}

000343fa <uarte_nrfx_rx_disable>:
{
   343fa:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   343fc:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   343fe:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   34400:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
   34402:	692b      	ldr	r3, [r5, #16]
   34404:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   34406:	b1d2      	cbz	r2, 3443e <uarte_nrfx_rx_disable+0x44>
	if (data->async->rx_next_buf != NULL) {
   34408:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   3440a:	b153      	cbz	r3, 34422 <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
   3440c:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
   34410:	f023 0320 	bic.w	r3, r3, #32
   34414:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   34418:	2300      	movs	r3, #0
   3441a:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   3441e:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	k_timer_stop(&data->async->rx_timeout_timer);
   34422:	6928      	ldr	r0, [r5, #16]
   34424:	3080      	adds	r0, #128	; 0x80
	z_impl_k_timer_stop(timer);
   34426:	f001 ff85 	bl	36334 <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
   3442a:	2000      	movs	r0, #0
   3442c:	692b      	ldr	r3, [r5, #16]
   3442e:	f883 00ca 	strb.w	r0, [r3, #202]	; 0xca
	data->async->discard_rx_fifo = true;
   34432:	2301      	movs	r3, #1
   34434:	692a      	ldr	r2, [r5, #16]
   34436:	f882 30cb 	strb.w	r3, [r2, #203]	; 0xcb
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3443a:	6063      	str	r3, [r4, #4]
}
   3443c:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   3443e:	f06f 000d 	mvn.w	r0, #13
   34442:	e7fb      	b.n	3443c <uarte_nrfx_rx_disable+0x42>

00034444 <setup_tx_cache>:
{
   34444:	b508      	push	{r3, lr}
	size_t remaining = data->async->tx_size - data->async->tx_cache_offset;
   34446:	6903      	ldr	r3, [r0, #16]
   34448:	68da      	ldr	r2, [r3, #12]
   3444a:	69d9      	ldr	r1, [r3, #28]
	if (!remaining) {
   3444c:	1a52      	subs	r2, r2, r1
   3444e:	d00f      	beq.n	34470 <setup_tx_cache+0x2c>
	size_t len = MIN(remaining, CONFIG_UART_ASYNC_TX_CACHE_SIZE);
   34450:	2a08      	cmp	r2, #8
   34452:	bf28      	it	cs
   34454:	2208      	movcs	r2, #8
	data->async->xfer_len = len;
   34456:	615a      	str	r2, [r3, #20]
	data->async->xfer_buf = data->async->tx_cache;
   34458:	6903      	ldr	r3, [r0, #16]
   3445a:	6999      	ldr	r1, [r3, #24]
   3445c:	6119      	str	r1, [r3, #16]
	memcpy(data->async->tx_cache, &data->async->tx_buf[data->async->tx_cache_offset], len);
   3445e:	6903      	ldr	r3, [r0, #16]
   34460:	6898      	ldr	r0, [r3, #8]
   34462:	69d9      	ldr	r1, [r3, #28]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   34464:	4401      	add	r1, r0
   34466:	6998      	ldr	r0, [r3, #24]
   34468:	f002 f85e 	bl	36528 <memcpy>
	return true;
   3446c:	2001      	movs	r0, #1
}
   3446e:	bd08      	pop	{r3, pc}
		return false;
   34470:	4610      	mov	r0, r2
   34472:	e7fc      	b.n	3446e <setup_tx_cache+0x2a>

00034474 <rx_flush.isra.0>:
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
   34474:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return config->uarte_regs;
   34476:	6806      	ldr	r6, [r0, #0]
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
   34478:	4614      	mov	r4, r2
	uint8_t *flush_buf = buf ? buf : tmp_buf;
   3447a:	460b      	mov	r3, r1
    return p_reg->RXD.AMOUNT;
   3447c:	f8d6 553c 	ldr.w	r5, [r6, #1340]	; 0x53c
   34480:	b1f1      	cbz	r1, 344c0 <rx_flush.isra.0+0x4c>
__ssp_bos_icheck3(memset, void *, int)
   34482:	2100      	movs	r1, #0
   34484:	4618      	mov	r0, r3
   34486:	f002 f86f 	bl	36568 <memset>
   3448a:	4603      	mov	r3, r0
   3448c:	4601      	mov	r1, r0
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   3448e:	f8c6 1534 	str.w	r1, [r6, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   34492:	2100      	movs	r1, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   34494:	2001      	movs	r0, #1
    p_reg->RXD.MAXCNT = length;
   34496:	f8c6 4538 	str.w	r4, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3449a:	f8c6 1110 	str.w	r1, [r6, #272]	; 0x110
   3449e:	f8d6 2110 	ldr.w	r2, [r6, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   344a2:	62f0      	str	r0, [r6, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   344a4:	f8d6 0110 	ldr.w	r0, [r6, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   344a8:	2800      	cmp	r0, #0
   344aa:	d0fb      	beq.n	344a4 <rx_flush.isra.0+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   344ac:	f8c6 1110 	str.w	r1, [r6, #272]	; 0x110
   344b0:	f8d6 2110 	ldr.w	r2, [r6, #272]	; 0x110
    return p_reg->RXD.AMOUNT;
   344b4:	f8d6 053c 	ldr.w	r0, [r6, #1340]	; 0x53c
	if (!buf) {
   344b8:	b92b      	cbnz	r3, 344c6 <rx_flush.isra.0+0x52>
			return rx_amount;
   344ba:	b2c0      	uxtb	r0, r0
}
   344bc:	b002      	add	sp, #8
   344be:	bd70      	pop	{r4, r5, r6, pc}
		flush_len = sizeof(tmp_buf);
   344c0:	2405      	movs	r4, #5
		flush_buf = tmp_buf;
   344c2:	4669      	mov	r1, sp
   344c4:	e7e3      	b.n	3448e <rx_flush.isra.0+0x1a>
	if (rx_amount != prev_rx_amount) {
   344c6:	4285      	cmp	r5, r0
   344c8:	d1f7      	bne.n	344ba <rx_flush.isra.0+0x46>
   344ca:	191a      	adds	r2, r3, r4
	for (int i = 0; i < flush_len; i++) {
   344cc:	4293      	cmp	r3, r2
   344ce:	d101      	bne.n	344d4 <rx_flush.isra.0+0x60>
	return 0;
   344d0:	2000      	movs	r0, #0
   344d2:	e7f3      	b.n	344bc <rx_flush.isra.0+0x48>
		if (buf[i] != dirty) {
   344d4:	f813 1b01 	ldrb.w	r1, [r3], #1
   344d8:	2900      	cmp	r1, #0
   344da:	d0f7      	beq.n	344cc <rx_flush.isra.0+0x58>
   344dc:	e7ed      	b.n	344ba <rx_flush.isra.0+0x46>

000344de <async_uart_release>:
{
   344de:	b570      	push	{r4, r5, r6, lr}
   344e0:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
   344e2:	6902      	ldr	r2, [r0, #16]
	__asm__ volatile(
   344e4:	f04f 0320 	mov.w	r3, #32
   344e8:	f3ef 8611 	mrs	r6, BASEPRI
   344ec:	f383 8812 	msr	BASEPRI_MAX, r3
   344f0:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
   344f4:	6910      	ldr	r0, [r2, #16]
   344f6:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   344fa:	ea23 0301 	bic.w	r3, r3, r1
   344fe:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
	if (!data->async->low_power_mask) {
   34502:	6915      	ldr	r5, [r2, #16]
   34504:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   34508:	b9eb      	cbnz	r3, 34546 <async_uart_release+0x68>
		if (dir_mask == UARTE_LOW_POWER_RX) {
   3450a:	2902      	cmp	r1, #2
   3450c:	d107      	bne.n	3451e <async_uart_release+0x40>
				rx_flush(dev, data->async->rx_flush_buffer,
   3450e:	2205      	movs	r2, #5
   34510:	6860      	ldr	r0, [r4, #4]
   34512:	f105 01c4 	add.w	r1, r5, #196	; 0xc4
   34516:	f7ff ffad 	bl	34474 <rx_flush.isra.0>
			data->async->rx_flush_cnt =
   3451a:	f885 00c9 	strb.w	r0, [r5, #201]	; 0xc9
	struct uarte_nrfx_data *data = dev->data;
   3451e:	6925      	ldr	r5, [r4, #16]
	if (data->async && HW_RX_COUNTING_ENABLED(data)) {
   34520:	692b      	ldr	r3, [r5, #16]
   34522:	b15b      	cbz	r3, 3453c <async_uart_release+0x5e>
   34524:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
   34528:	b143      	cbz	r3, 3453c <async_uart_release+0x5e>
		nrfx_timer_disable(&config->timer);
   3452a:	6860      	ldr	r0, [r4, #4]
   3452c:	3010      	adds	r0, #16
   3452e:	f7f2 f9c7 	bl	268c0 <nrfx_timer_disable>
		data->async->rx_total_byte_cnt = 0;
   34532:	2300      	movs	r3, #0
   34534:	692a      	ldr	r2, [r5, #16]
   34536:	66d3      	str	r3, [r2, #108]	; 0x6c
		data->async->rx_total_user_byte_cnt = 0;
   34538:	692a      	ldr	r2, [r5, #16]
   3453a:	6713      	str	r3, [r2, #112]	; 0x70
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   3453c:	2200      	movs	r2, #0
	return config->uarte_regs;
   3453e:	6863      	ldr	r3, [r4, #4]
   34540:	681b      	ldr	r3, [r3, #0]
   34542:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   34546:	f386 8811 	msr	BASEPRI, r6
   3454a:	f3bf 8f6f 	isb	sy
}
   3454e:	bd70      	pop	{r4, r5, r6, pc}

00034550 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   34550:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   34552:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   34554:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   34558:	b940      	cbnz	r0, 3456c <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   3455a:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   3455c:	079b      	lsls	r3, r3, #30
   3455e:	d406      	bmi.n	3456e <is_tx_ready.isra.0+0x1e>
   34560:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   34564:	3800      	subs	r0, #0
   34566:	bf18      	it	ne
   34568:	2001      	movne	r0, #1
   3456a:	4770      	bx	lr
   3456c:	2001      	movs	r0, #1
}
   3456e:	4770      	bx	lr

00034570 <start_tx_locked>:
{
   34570:	b510      	push	{r4, lr}
   34572:	4604      	mov	r4, r0
	if (!is_tx_ready(dev)) {
   34574:	6840      	ldr	r0, [r0, #4]
   34576:	f7ff ffeb 	bl	34550 <is_tx_ready.isra.0>
   3457a:	690b      	ldr	r3, [r1, #16]
   3457c:	b918      	cbnz	r0, 34586 <start_tx_locked+0x16>
		data->async->pending_tx = true;
   3457e:	2201      	movs	r2, #1
   34580:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
}
   34584:	bd10      	pop	{r4, pc}
		data->async->pending_tx = false;
   34586:	2200      	movs	r2, #0
   34588:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
		data->async->tx_amount = -1;
   3458c:	f04f 32ff 	mov.w	r2, #4294967295
   34590:	690b      	ldr	r3, [r1, #16]
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   34592:	4620      	mov	r0, r4
		data->async->tx_amount = -1;
   34594:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   34598:	690b      	ldr	r3, [r1, #16]
}
   3459a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   3459e:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
   345a2:	f7ff bf0d 	b.w	343c0 <tx_start>

000345a6 <uarte_nrfx_fifo_fill>:
{
   345a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
   345a8:	6906      	ldr	r6, [r0, #16]
{
   345aa:	4605      	mov	r5, r0
	len = MIN(len, data->int_driven->tx_buff_size);
   345ac:	68f3      	ldr	r3, [r6, #12]
   345ae:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   345b0:	3310      	adds	r3, #16
   345b2:	4294      	cmp	r4, r2
   345b4:	bfa8      	it	ge
   345b6:	4614      	movge	r4, r2
   345b8:	2201      	movs	r2, #1
   345ba:	e8d3 0fef 	ldaex	r0, [r3]
   345be:	2800      	cmp	r0, #0
   345c0:	d103      	bne.n	345ca <uarte_nrfx_fifo_fill+0x24>
   345c2:	e8c3 2fe7 	stlex	r7, r2, [r3]
   345c6:	2f00      	cmp	r7, #0
   345c8:	d1f7      	bne.n	345ba <uarte_nrfx_fifo_fill+0x14>
   345ca:	bf0c      	ite	eq
   345cc:	4613      	moveq	r3, r2
   345ce:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   345d0:	d11f      	bne.n	34612 <uarte_nrfx_fifo_fill+0x6c>
	memcpy(data->int_driven->tx_buffer, tx_data, len);
   345d2:	68f3      	ldr	r3, [r6, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   345d4:	4622      	mov	r2, r4
   345d6:	6898      	ldr	r0, [r3, #8]
   345d8:	f001 ffa6 	bl	36528 <memcpy>
	__asm__ volatile(
   345dc:	f04f 0320 	mov.w	r3, #32
   345e0:	f3ef 8711 	mrs	r7, BASEPRI
   345e4:	f383 8812 	msr	BASEPRI_MAX, r3
   345e8:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   345ec:	6868      	ldr	r0, [r5, #4]
   345ee:	f7ff ffaf 	bl	34550 <is_tx_ready.isra.0>
   345f2:	68f3      	ldr	r3, [r6, #12]
   345f4:	b938      	cbnz	r0, 34606 <uarte_nrfx_fifo_fill+0x60>
		len = 0;
   345f6:	4604      	mov	r4, r0
		data->int_driven->fifo_fill_lock = 0;
   345f8:	6118      	str	r0, [r3, #16]
	__asm__ volatile(
   345fa:	f387 8811 	msr	BASEPRI, r7
   345fe:	f3bf 8f6f 	isb	sy
}
   34602:	4620      	mov	r0, r4
   34604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_start(dev, data->int_driven->tx_buffer, len);
   34606:	4622      	mov	r2, r4
   34608:	4628      	mov	r0, r5
   3460a:	6899      	ldr	r1, [r3, #8]
   3460c:	f7ff fed8 	bl	343c0 <tx_start>
   34610:	e7f3      	b.n	345fa <uarte_nrfx_fifo_fill+0x54>
		return 0;
   34612:	461c      	mov	r4, r3
   34614:	e7f5      	b.n	34602 <uarte_nrfx_fifo_fill+0x5c>

00034616 <endtx_isr.isra.0>:
	return config->uarte_regs;
   34616:	6803      	ldr	r3, [r0, #0]
	__asm__ volatile(
   34618:	f04f 0120 	mov.w	r1, #32
   3461c:	f3ef 8211 	mrs	r2, BASEPRI
   34620:	f381 8812 	msr	BASEPRI_MAX, r1
   34624:	f3bf 8f6f 	isb	sy
   34628:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   3462c:	b131      	cbz	r1, 3463c <endtx_isr.isra.0+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3462e:	2100      	movs	r1, #0
   34630:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   34634:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   34638:	2101      	movs	r1, #1
   3463a:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   3463c:	f382 8811 	msr	BASEPRI, r2
   34640:	f3bf 8f6f 	isb	sy
}
   34644:	4770      	bx	lr

00034646 <uarte_nrfx_isr_int>:
{
   34646:	b570      	push	{r4, r5, r6, lr}
   34648:	4605      	mov	r5, r0
	const struct uarte_nrfx_config *config = dev->config;
   3464a:	6840      	ldr	r0, [r0, #4]
	return config->uarte_regs;
   3464c:	6804      	ldr	r4, [r0, #0]
    return p_reg->INTENSET & mask;
   3464e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   34652:	05da      	lsls	r2, r3, #23
   34654:	d504      	bpl.n	34660 <uarte_nrfx_isr_int+0x1a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   34656:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   3465a:	b10b      	cbz	r3, 34660 <uarte_nrfx_isr_int+0x1a>
		endtx_isr(dev);
   3465c:	f7ff ffdb 	bl	34616 <endtx_isr.isra.0>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   34660:	6843      	ldr	r3, [r0, #4]
   34662:	06db      	lsls	r3, r3, #27
   34664:	d51a      	bpl.n	3469c <uarte_nrfx_isr_int+0x56>
	__asm__ volatile(
   34666:	f04f 0320 	mov.w	r3, #32
   3466a:	f3ef 8211 	mrs	r2, BASEPRI
   3466e:	f383 8812 	msr	BASEPRI_MAX, r3
   34672:	f3bf 8f6f 	isb	sy
   34676:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   3467a:	b113      	cbz	r3, 34682 <uarte_nrfx_isr_int+0x3c>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   3467c:	2300      	movs	r3, #0
   3467e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   34682:	692b      	ldr	r3, [r5, #16]
   34684:	68db      	ldr	r3, [r3, #12]
   34686:	b10b      	cbz	r3, 3468c <uarte_nrfx_isr_int+0x46>
   34688:	691b      	ldr	r3, [r3, #16]
   3468a:	b91b      	cbnz	r3, 34694 <uarte_nrfx_isr_int+0x4e>
    p_reg->INTENCLR = mask;
   3468c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   34690:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
	__asm__ volatile(
   34694:	f382 8811 	msr	BASEPRI, r2
   34698:	f3bf 8f6f 	isb	sy
	struct uarte_nrfx_data *data = dev->data;
   3469c:	692b      	ldr	r3, [r5, #16]
	if (!data->int_driven) {
   3469e:	68d9      	ldr	r1, [r3, #12]
   346a0:	b169      	cbz	r1, 346be <uarte_nrfx_isr_int+0x78>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   346a2:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   346a6:	b15a      	cbz	r2, 346c0 <uarte_nrfx_isr_int+0x7a>
		data->int_driven->fifo_fill_lock = 0;
   346a8:	2200      	movs	r2, #0
   346aa:	610a      	str	r2, [r1, #16]
		if (data->int_driven->disable_tx_irq) {
   346ac:	68d9      	ldr	r1, [r3, #12]
   346ae:	7b89      	ldrb	r1, [r1, #14]
   346b0:	b131      	cbz	r1, 346c0 <uarte_nrfx_isr_int+0x7a>
    p_reg->INTENCLR = mask;
   346b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   346b6:	f8c4 1308 	str.w	r1, [r4, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   346ba:	68db      	ldr	r3, [r3, #12]
   346bc:	739a      	strb	r2, [r3, #14]
}
   346be:	bd70      	pop	{r4, r5, r6, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   346c0:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   346c4:	b122      	cbz	r2, 346d0 <uarte_nrfx_isr_int+0x8a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   346c6:	2200      	movs	r2, #0
   346c8:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   346cc:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
	if (data->int_driven->cb) {
   346d0:	68da      	ldr	r2, [r3, #12]
   346d2:	6813      	ldr	r3, [r2, #0]
   346d4:	2b00      	cmp	r3, #0
   346d6:	d0f2      	beq.n	346be <uarte_nrfx_isr_int+0x78>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   346d8:	4628      	mov	r0, r5
}
   346da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		data->int_driven->cb(dev, data->int_driven->cb_data);
   346de:	6851      	ldr	r1, [r2, #4]
   346e0:	4718      	bx	r3

000346e2 <uarte_2_init>:
#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
#endif

#ifdef CONFIG_UART_2_NRF_UARTE
UART_NRF_UARTE_DEVICE(2);
   346e2:	b510      	push	{r4, lr}
   346e4:	4604      	mov	r4, r0
   346e6:	2200      	movs	r2, #0
   346e8:	2101      	movs	r1, #1
   346ea:	200a      	movs	r0, #10
   346ec:	f7dd ff58 	bl	125a0 <z_arm_irq_priority_set>
   346f0:	200a      	movs	r0, #10
   346f2:	f7dd ff25 	bl	12540 <arch_irq_enable>
   346f6:	4620      	mov	r0, r4
   346f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   346fc:	f7eb bcb2 	b.w	20064 <uarte_instance_init.constprop.0>

00034700 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   34700:	b510      	push	{r4, lr}
   34702:	4604      	mov	r4, r0
   34704:	2200      	movs	r2, #0
   34706:	2101      	movs	r1, #1
   34708:	2008      	movs	r0, #8
   3470a:	f7dd ff49 	bl	125a0 <z_arm_irq_priority_set>
   3470e:	2008      	movs	r0, #8
   34710:	f7dd ff16 	bl	12540 <arch_irq_enable>
   34714:	4620      	mov	r0, r4
   34716:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3471a:	f7eb bca3 	b.w	20064 <uarte_instance_init.constprop.0>

0003471e <rx_timeout>:
{
   3471e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return timer->user_data;
   34720:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (data->async->is_in_irq) {
   34722:	6923      	ldr	r3, [r4, #16]
   34724:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
   34728:	f003 07ff 	and.w	r7, r3, #255	; 0xff
   3472c:	bb5b      	cbnz	r3, 34786 <rx_timeout+0x68>
    p_reg->INTENCLR = mask;
   3472e:	2210      	movs	r2, #16
	const struct device *dev = data->dev;
   34730:	6826      	ldr	r6, [r4, #0]
	const struct uarte_nrfx_config *cfg = dev->config;
   34732:	6870      	ldr	r0, [r6, #4]
	return config->uarte_regs;
   34734:	6803      	ldr	r3, [r0, #0]
   34736:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	if (HW_RX_COUNTING_ENABLED(data)) {
   3473a:	6923      	ldr	r3, [r4, #16]
   3473c:	f893 20cc 	ldrb.w	r2, [r3, #204]	; 0xcc
   34740:	b312      	cbz	r2, 34788 <rx_timeout+0x6a>
		read = nrfx_timer_capture(&cfg->timer, 0);
   34742:	4639      	mov	r1, r7
   34744:	3010      	adds	r0, #16
   34746:	f7f2 f945 	bl	269d4 <nrfx_timer_capture>
	if (read != data->async->rx_total_byte_cnt) {
   3474a:	6923      	ldr	r3, [r4, #16]
   3474c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   3474e:	4282      	cmp	r2, r0
		data->async->rx_total_byte_cnt = read;
   34750:	bf1f      	itttt	ne
   34752:	66d8      	strne	r0, [r3, #108]	; 0x6c
		data->async->rx_timeout_left = data->async->rx_timeout;
   34754:	6923      	ldrne	r3, [r4, #16]
   34756:	6f5a      	ldrne	r2, [r3, #116]	; 0x74
   34758:	67da      	strne	r2, [r3, #124]	; 0x7c
	int32_t len = data->async->rx_total_byte_cnt
   3475a:	6923      	ldr	r3, [r4, #16]
	if (!HW_RX_COUNTING_ENABLED(data) &&
   3475c:	f893 00cc 	ldrb.w	r0, [r3, #204]	; 0xcc
		    - data->async->rx_total_user_byte_cnt;
   34760:	e9d3 211b 	ldrd	r2, r1, [r3, #108]	; 0x6c
   34764:	1a52      	subs	r2, r2, r1
	int32_t len = data->async->rx_total_byte_cnt
   34766:	4615      	mov	r5, r2
	if (!HW_RX_COUNTING_ENABLED(data) &&
   34768:	b988      	cbnz	r0, 3478e <rx_timeout+0x70>
   3476a:	2a00      	cmp	r2, #0
   3476c:	da0f      	bge.n	3478e <rx_timeout+0x70>
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
   3476e:	f8c3 10b8 	str.w	r1, [r3, #184]	; 0xb8
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   34772:	6923      	ldr	r3, [r4, #16]
   34774:	e9d3 0117 	ldrd	r0, r1, [r3, #92]	; 0x5c
   34778:	4281      	cmp	r1, r0
   3477a:	d80e      	bhi.n	3479a <rx_timeout+0x7c>
    p_reg->INTENSET = mask;
   3477c:	2210      	movs	r2, #16
	return config->uarte_regs;
   3477e:	6873      	ldr	r3, [r6, #4]
   34780:	681b      	ldr	r3, [r3, #0]
   34782:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   34786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		read = data->async->rx_cnt.cnt;
   34788:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
   3478c:	e7dd      	b.n	3474a <rx_timeout+0x2c>
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   3478e:	e9d3 0117 	ldrd	r0, r1, [r3, #92]	; 0x5c
   34792:	eb02 0c01 	add.w	ip, r2, r1
   34796:	4584      	cmp	ip, r0
   34798:	d904      	bls.n	347a4 <rx_timeout+0x86>
		len = data->async->rx_buf_len - data->async->rx_offset;
   3479a:	1a45      	subs	r5, r0, r1
	if (len > 0) {
   3479c:	2d00      	cmp	r5, #0
   3479e:	dded      	ble.n	3477c <rx_timeout+0x5e>
		clipped = true;
   347a0:	2701      	movs	r7, #1
   347a2:	e005      	b.n	347b0 <rx_timeout+0x92>
	if (len > 0) {
   347a4:	2a00      	cmp	r2, #0
   347a6:	dde9      	ble.n	3477c <rx_timeout+0x5e>
				< data->async->rx_timeout_slab)) {
   347a8:	e9d3 121e 	ldrd	r1, r2, [r3, #120]	; 0x78
		if (clipped ||
   347ac:	428a      	cmp	r2, r1
   347ae:	da12      	bge.n	347d6 <rx_timeout+0xb8>
			notify_uart_rx_rdy(dev, len);
   347b0:	4629      	mov	r1, r5
   347b2:	4630      	mov	r0, r6
   347b4:	f7ff fcc2 	bl	3413c <notify_uart_rx_rdy>
			data->async->rx_offset += len;
   347b8:	6922      	ldr	r2, [r4, #16]
   347ba:	6e13      	ldr	r3, [r2, #96]	; 0x60
   347bc:	442b      	add	r3, r5
   347be:	6613      	str	r3, [r2, #96]	; 0x60
			data->async->rx_total_user_byte_cnt += len;
   347c0:	6922      	ldr	r2, [r4, #16]
   347c2:	6f13      	ldr	r3, [r2, #112]	; 0x70
   347c4:	442b      	add	r3, r5
   347c6:	6713      	str	r3, [r2, #112]	; 0x70
		if (clipped) {
   347c8:	2f00      	cmp	r7, #0
   347ca:	d0d7      	beq.n	3477c <rx_timeout+0x5e>
			k_timer_stop(&data->async->rx_timeout_timer);
   347cc:	6920      	ldr	r0, [r4, #16]
   347ce:	3080      	adds	r0, #128	; 0x80
   347d0:	f001 fdb0 	bl	36334 <z_impl_k_timer_stop>
}
   347d4:	e7d2      	b.n	3477c <rx_timeout+0x5e>
			data->async->rx_timeout_left -=
   347d6:	1a52      	subs	r2, r2, r1
   347d8:	67da      	str	r2, [r3, #124]	; 0x7c
		if (clipped) {
   347da:	e7cf      	b.n	3477c <rx_timeout+0x5e>

000347dc <uarte_nrfx_tx_abort>:
{
   347dc:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   347de:	6842      	ldr	r2, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   347e0:	6903      	ldr	r3, [r0, #16]
	return config->uarte_regs;
   347e2:	6815      	ldr	r5, [r2, #0]
	if (data->async->tx_buf == NULL) {
   347e4:	691a      	ldr	r2, [r3, #16]
   347e6:	6891      	ldr	r1, [r2, #8]
   347e8:	b151      	cbz	r1, 34800 <uarte_nrfx_tx_abort+0x24>
	data->async->pending_tx = false;
   347ea:	2400      	movs	r4, #0
   347ec:	f882 40cd 	strb.w	r4, [r2, #205]	; 0xcd
	k_timer_stop(&data->async->tx_timeout_timer);
   347f0:	6918      	ldr	r0, [r3, #16]
   347f2:	3020      	adds	r0, #32
	z_impl_k_timer_stop(timer);
   347f4:	f001 fd9e 	bl	36334 <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   347f8:	2301      	movs	r3, #1
	return 0;
   347fa:	4620      	mov	r0, r4
   347fc:	60eb      	str	r3, [r5, #12]
}
   347fe:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   34800:	f06f 000d 	mvn.w	r0, #13
   34804:	e7fb      	b.n	347fe <uarte_nrfx_tx_abort+0x22>

00034806 <tx_timeout>:
	(void) uarte_nrfx_tx_abort(data->dev);
   34806:	6b43      	ldr	r3, [r0, #52]	; 0x34
   34808:	6818      	ldr	r0, [r3, #0]
   3480a:	f7ff bfe7 	b.w	347dc <uarte_nrfx_tx_abort>

0003480e <api_callback_set>:
	return dev->data;
   3480e:	6903      	ldr	r3, [r0, #16]
}
   34810:	2000      	movs	r0, #0
	data->user_data = user_data;
   34812:	e9c3 1219 	strd	r1, r2, [r3, #100]	; 0x64
}
   34816:	4770      	bx	lr

00034818 <user_callback>:
	return dev->data;
   34818:	6902      	ldr	r2, [r0, #16]
	if (data->user_callback) {
   3481a:	6e53      	ldr	r3, [r2, #100]	; 0x64
   3481c:	b10b      	cbz	r3, 34822 <user_callback+0xa>
		data->user_callback(dev, evt, data->user_data);
   3481e:	6e92      	ldr	r2, [r2, #104]	; 0x68
   34820:	4718      	bx	r3
}
   34822:	4770      	bx	lr

00034824 <api_irq_tx_enable>:
	data->int_driven.tx_enabled = true;
   34824:	2201      	movs	r2, #1
	return dev->data;
   34826:	6903      	ldr	r3, [r0, #16]
	data->int_driven.tx_enabled = true;
   34828:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
	if (data->tx_buf == NULL) {
   3482c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   3482e:	b912      	cbnz	r2, 34836 <api_irq_tx_enable+0x12>
		data->int_driven.callback(dev, data->int_driven.user_data);
   34830:	e9d3 2120 	ldrd	r2, r1, [r3, #128]	; 0x80
   34834:	4710      	bx	r2
}
   34836:	4770      	bx	lr

00034838 <api_irq_tx_disable>:
	data->int_driven.tx_enabled = false;
   34838:	2200      	movs	r2, #0
	return dev->data;
   3483a:	6903      	ldr	r3, [r0, #16]
	data->int_driven.tx_enabled = false;
   3483c:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
}
   34840:	4770      	bx	lr

00034842 <api_irq_tx_ready>:
	return dev->data;
   34842:	6903      	ldr	r3, [r0, #16]
	return data->int_driven.tx_enabled && (data->tx_buf == NULL);
   34844:	f893 0194 	ldrb.w	r0, [r3, #404]	; 0x194
   34848:	b118      	cbz	r0, 34852 <api_irq_tx_ready+0x10>
   3484a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   3484c:	fab0 f080 	clz	r0, r0
   34850:	0940      	lsrs	r0, r0, #5
}
   34852:	4770      	bx	lr

00034854 <api_irq_callback_set>:
	return dev->data;
   34854:	6903      	ldr	r3, [r0, #16]
	data->int_driven.user_data = user_data;
   34856:	e9c3 1220 	strd	r1, r2, [r3, #128]	; 0x80
}
   3485a:	4770      	bx	lr

0003485c <api_irq_rx_disable>:
	data->int_driven.rx_enabled = false;
   3485c:	2200      	movs	r2, #0
	return dev->data;
   3485e:	6903      	ldr	r3, [r0, #16]
	data->int_driven.rx_enabled = false;
   34860:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
}
   34864:	4770      	bx	lr

00034866 <api_irq_rx_ready>:
	return dev->data;
   34866:	6903      	ldr	r3, [r0, #16]
	return data->int_driven.rx_enabled &&
   34868:	f893 0195 	ldrb.w	r0, [r3, #405]	; 0x195
   3486c:	b120      	cbz	r0, 34878 <api_irq_rx_ready+0x12>
   3486e:	e9d3 3063 	ldrd	r3, r0, [r3, #396]	; 0x18c
   34872:	1ac0      	subs	r0, r0, r3
   34874:	bf18      	it	ne
   34876:	2001      	movne	r0, #1
}
   34878:	4770      	bx	lr

0003487a <api_irq_tx_complete>:
	return api_irq_tx_ready(dev);
   3487a:	f7ff bfe2 	b.w	34842 <api_irq_tx_ready>

0003487e <api_irq_err_enable>:
	data->int_driven.err_enabled = true;
   3487e:	2201      	movs	r2, #1
	return dev->data;
   34880:	6903      	ldr	r3, [r0, #16]
	data->int_driven.err_enabled = true;
   34882:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
}
   34886:	4770      	bx	lr

00034888 <api_irq_err_disable>:
	data->int_driven.err_enabled = false;
   34888:	2200      	movs	r2, #0
	return dev->data;
   3488a:	6903      	ldr	r3, [r0, #16]
	data->int_driven.err_enabled = false;
   3488c:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
}
   34890:	4770      	bx	lr

00034892 <api_irq_is_pending>:
{
   34892:	b508      	push	{r3, lr}
   34894:	4602      	mov	r2, r0
	return api_irq_rx_ready(dev) || api_irq_tx_ready(dev);
   34896:	f7ff ffe6 	bl	34866 <api_irq_rx_ready>
   3489a:	b930      	cbnz	r0, 348aa <api_irq_is_pending+0x18>
   3489c:	4610      	mov	r0, r2
   3489e:	f7ff ffd0 	bl	34842 <api_irq_tx_ready>
   348a2:	3800      	subs	r0, #0
   348a4:	bf18      	it	ne
   348a6:	2001      	movne	r0, #1
}
   348a8:	bd08      	pop	{r3, pc}
	return api_irq_rx_ready(dev) || api_irq_tx_ready(dev);
   348aa:	2001      	movs	r0, #1
   348ac:	e7fc      	b.n	348a8 <api_irq_is_pending+0x16>

000348ae <api_irq_update>:
}
   348ae:	2001      	movs	r0, #1
   348b0:	4770      	bx	lr

000348b2 <api_configure>:

static int api_configure(const struct device *dev, const struct uart_config *cfg)
{
	const struct lpuart_data *data = get_dev_data(dev);

	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
   348b2:	79ca      	ldrb	r2, [r1, #7]
	return dev->data;
   348b4:	6903      	ldr	r3, [r0, #16]
	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
   348b6:	b922      	cbnz	r2, 348c2 <api_configure+0x10>
		return -ENOTSUP;
	}

	return uart_configure(data->uart, cfg);
   348b8:	6818      	ldr	r0, [r3, #0]
	if (api->configure == NULL) {
   348ba:	6883      	ldr	r3, [r0, #8]
   348bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   348be:	b11b      	cbz	r3, 348c8 <api_configure+0x16>
	return api->configure(dev, cfg);
   348c0:	4718      	bx	r3
		return -ENOTSUP;
   348c2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   348c6:	4770      	bx	lr
		return -ENOSYS;
   348c8:	f06f 0057 	mvn.w	r0, #87	; 0x57
}
   348cc:	4770      	bx	lr

000348ce <api_config_get>:

static int api_config_get(const struct device *dev, struct uart_config *cfg)
{
	const struct lpuart_data *data = get_dev_data(dev);

	return uart_config_get(data->uart, cfg);
   348ce:	6903      	ldr	r3, [r0, #16]
   348d0:	6818      	ldr	r0, [r3, #0]
	if (api->config_get == NULL) {
   348d2:	6883      	ldr	r3, [r0, #8]
   348d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   348d6:	b103      	cbz	r3, 348da <api_config_get+0xc>
	return api->config_get(dev, cfg);
   348d8:	4718      	bx	r3
}
   348da:	f06f 0057 	mvn.w	r0, #87	; 0x57
   348de:	4770      	bx	lr

000348e0 <req_pin_idle>:
{
   348e0:	b513      	push	{r0, r1, r4, lr}
	nrf_gpio_cfg(data->req_pin,
   348e2:	6844      	ldr	r4, [r0, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   348e4:	a801      	add	r0, sp, #4
   348e6:	9401      	str	r4, [sp, #4]
   348e8:	f7eb feac 	bl	20644 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   348ec:	2303      	movs	r3, #3
   348ee:	3480      	adds	r4, #128	; 0x80
   348f0:	f840 3024 	str.w	r3, [r0, r4, lsl #2]
}
   348f4:	b002      	add	sp, #8
   348f6:	bd10      	pop	{r4, pc}

000348f8 <api_fifo_read>:
{
   348f8:	b538      	push	{r3, r4, r5, lr}
   348fa:	4603      	mov	r3, r0
	return dev->data;
   348fc:	691d      	ldr	r5, [r3, #16]
{
   348fe:	4608      	mov	r0, r1
	return data->int_driven.rxlen - data->int_driven.rxrd;
   34900:	e9d5 4363 	ldrd	r4, r3, [r5, #396]	; 0x18c
	if (available) {
   34904:	1ae4      	subs	r4, r4, r3
   34906:	d00d      	beq.n	34924 <api_fifo_read+0x2c>
		cpylen = MIN(available, size);
   34908:	4294      	cmp	r4, r2
   3490a:	bf28      	it	cs
   3490c:	4614      	movcs	r4, r2
		memcpy(rx_data,
   3490e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   34912:	18e9      	adds	r1, r5, r3
   34914:	4622      	mov	r2, r4
   34916:	f001 fe07 	bl	36528 <memcpy>
		data->int_driven.rxrd += cpylen;
   3491a:	f8d5 3190 	ldr.w	r3, [r5, #400]	; 0x190
   3491e:	4423      	add	r3, r4
   34920:	f8c5 3190 	str.w	r3, [r5, #400]	; 0x190
}
   34924:	4620      	mov	r0, r4
   34926:	bd38      	pop	{r3, r4, r5, pc}

00034928 <api_poll_in>:
	return api_fifo_read(dev, p_char, 1) ? 0 : -1;
   34928:	2201      	movs	r2, #1
{
   3492a:	b508      	push	{r3, lr}
	return api_fifo_read(dev, p_char, 1) ? 0 : -1;
   3492c:	f7ff ffe4 	bl	348f8 <api_fifo_read>
   34930:	fab0 f080 	clz	r0, r0
   34934:	0940      	lsrs	r0, r0, #5
}
   34936:	4240      	negs	r0, r0
   34938:	bd08      	pop	{r3, pc}

0003493a <api_irq_rx_enable>:
{
   3493a:	b538      	push	{r3, r4, r5, lr}
	data->int_driven.rx_enabled = true;
   3493c:	2301      	movs	r3, #1
	return dev->data;
   3493e:	6904      	ldr	r4, [r0, #16]
{
   34940:	4605      	mov	r5, r0
	data->int_driven.rx_enabled = true;
   34942:	f884 3195 	strb.w	r3, [r4, #405]	; 0x195
	if (int_driven_rd_available(data)) {
   34946:	e9d4 3263 	ldrd	r3, r2, [r4, #396]	; 0x18c
   3494a:	429a      	cmp	r2, r3
   3494c:	d109      	bne.n	34962 <api_irq_rx_enable+0x28>
	if (!int_driven_rd_available(data) && data->rx_state == RX_BLOCKED) {
   3494e:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
   34952:	2b05      	cmp	r3, #5
   34954:	d10c      	bne.n	34970 <api_irq_rx_enable+0x36>
		int_driven_rx_feed(dev, data);
   34956:	4621      	mov	r1, r4
   34958:	4628      	mov	r0, r5
}
   3495a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		int_driven_rx_feed(dev, data);
   3495e:	f7eb bf1f 	b.w	207a0 <int_driven_rx_feed>
		data->int_driven.callback(dev, data->int_driven.user_data);
   34962:	e9d4 3120 	ldrd	r3, r1, [r4, #128]	; 0x80
   34966:	4798      	blx	r3
	if (!int_driven_rd_available(data) && data->rx_state == RX_BLOCKED) {
   34968:	e9d4 2363 	ldrd	r2, r3, [r4, #396]	; 0x18c
   3496c:	429a      	cmp	r2, r3
   3496e:	d0ee      	beq.n	3494e <api_irq_rx_enable+0x14>
}
   34970:	bd38      	pop	{r3, r4, r5, pc}

00034972 <z_log_msg_static_create.constprop.0>:
   34972:	2300      	movs	r3, #0
   34974:	f7db bc5e 	b.w	10234 <z_impl_z_log_msg_static_create>

00034978 <req_pin_set>:
{
   34978:	b537      	push	{r0, r1, r2, r4, r5, lr}
	nrf_gpio_reconfigure(data->req_pin, &dir, &input, NULL, NULL, NULL);
   3497a:	6845      	ldr	r5, [r0, #4]
{
   3497c:	4604      	mov	r4, r0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3497e:	a801      	add	r0, sp, #4
   34980:	9501      	str	r5, [sp, #4]
   34982:	f7eb fe5f 	bl	20644 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   34986:	eb00 0085 	add.w	r0, r0, r5, lsl #2
   3498a:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    cnf &= ~to_update;
   3498e:	f023 0303 	bic.w	r3, r3, #3
    reg->PIN_CNF[pin_number] = cnf;
   34992:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
	nrfx_gpiote_trigger_disable(data->req_pin);
   34996:	6860      	ldr	r0, [r4, #4]
}
   34998:	b003      	add	sp, #12
   3499a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	nrfx_gpiote_trigger_disable(data->req_pin);
   3499e:	f7f1 bc3d 	b.w	2621c <nrfx_gpiote_trigger_disable>

000349a2 <tx_complete>:
{
   349a2:	b510      	push	{r4, lr}
	if (data->tx_active) {
   349a4:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
{
   349a8:	4604      	mov	r4, r0
	if (data->tx_active) {
   349aa:	b163      	cbz	r3, 349c6 <tx_complete+0x24>
	while (!nrfx_gpiote_in_is_set(data->req_pin)) {
   349ac:	6860      	ldr	r0, [r4, #4]
   349ae:	f7f1 fc81 	bl	262b4 <nrfx_gpiote_in_is_set>
   349b2:	2800      	cmp	r0, #0
   349b4:	d0fa      	beq.n	349ac <tx_complete+0xa>
	req_pin_idle(data);
   349b6:	4620      	mov	r0, r4
   349b8:	f7ff ff92 	bl	348e0 <req_pin_idle>
	data->tx_buf = NULL;
   349bc:	2300      	movs	r3, #0
   349be:	64e3      	str	r3, [r4, #76]	; 0x4c
	data->tx_active = false;
   349c0:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
   349c4:	bd10      	pop	{r4, pc}
		req_pin_set(data);
   349c6:	f7ff ffd7 	bl	34978 <req_pin_set>
   349ca:	e7f4      	b.n	349b6 <tx_complete+0x14>

000349cc <api_rx_disable>:
{
   349cc:	b530      	push	{r4, r5, lr}
	return dev->data;
   349ce:	6904      	ldr	r4, [r0, #16]
{
   349d0:	4605      	mov	r5, r0
	if (data->rx_state == RX_OFF) {
   349d2:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
{
   349d6:	b087      	sub	sp, #28
	if (data->rx_state == RX_OFF) {
   349d8:	b1e3      	cbz	r3, 34a14 <api_rx_disable+0x48>
	data->rx_state = RX_TO_OFF;
   349da:	2306      	movs	r3, #6
	err = uart_rx_disable(data->uart);
   349dc:	6820      	ldr	r0, [r4, #0]
	data->rx_state = RX_TO_OFF;
   349de:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	return api->rx_disable(dev);
   349e2:	6883      	ldr	r3, [r0, #8]
   349e4:	695b      	ldr	r3, [r3, #20]
   349e6:	4798      	blx	r3
	if (err == -EFAULT) {
   349e8:	300e      	adds	r0, #14
   349ea:	d002      	beq.n	349f2 <api_rx_disable+0x26>
	return 0;
   349ec:	2000      	movs	r0, #0
}
   349ee:	b007      	add	sp, #28
   349f0:	bd30      	pop	{r4, r5, pc}
		struct uart_event event = {
   349f2:	2214      	movs	r2, #20
   349f4:	2100      	movs	r1, #0
   349f6:	a801      	add	r0, sp, #4
   349f8:	f001 fdb6 	bl	36568 <memset>
   349fc:	2305      	movs	r3, #5
   349fe:	f88d 3004 	strb.w	r3, [sp, #4]
		data->rx_state = RX_OFF;
   34a02:	2300      	movs	r3, #0
		user_callback(dev, &event);
   34a04:	4628      	mov	r0, r5
		data->rx_state = RX_OFF;
   34a06:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
		data->rx_buf = NULL;
   34a0a:	65a3      	str	r3, [r4, #88]	; 0x58
		user_callback(dev, &event);
   34a0c:	a901      	add	r1, sp, #4
   34a0e:	f7ff ff03 	bl	34818 <user_callback>
   34a12:	e7eb      	b.n	349ec <api_rx_disable+0x20>
		return -EFAULT;
   34a14:	f06f 000d 	mvn.w	r0, #13
   34a18:	e7e9      	b.n	349ee <api_rx_disable+0x22>

00034a1a <api_tx_abort>:
{
   34a1a:	b5f0      	push	{r4, r5, r6, r7, lr}
	return dev->data;
   34a1c:	6905      	ldr	r5, [r0, #16]
{
   34a1e:	4604      	mov	r4, r0
	const uint8_t *buf = data->tx_buf;
   34a20:	6cee      	ldr	r6, [r5, #76]	; 0x4c
{
   34a22:	b087      	sub	sp, #28
	if (data->tx_buf == NULL) {
   34a24:	b336      	cbz	r6, 34a74 <api_tx_abort+0x5a>
   34a26:	f105 0010 	add.w	r0, r5, #16
   34a2a:	f001 fc83 	bl	36334 <z_impl_k_timer_stop>
	__asm__ volatile(
   34a2e:	f04f 0320 	mov.w	r3, #32
   34a32:	f3ef 8711 	mrs	r7, BASEPRI
   34a36:	f383 8812 	msr	BASEPRI_MAX, r3
   34a3a:	f3bf 8f6f 	isb	sy
	tx_complete(data);
   34a3e:	4628      	mov	r0, r5
   34a40:	f7ff ffaf 	bl	349a2 <tx_complete>
	__asm__ volatile(
   34a44:	f387 8811 	msr	BASEPRI, r7
   34a48:	f3bf 8f6f 	isb	sy
	err = uart_tx_abort(data->uart);
   34a4c:	6828      	ldr	r0, [r5, #0]
	return api->tx_abort(dev);
   34a4e:	6883      	ldr	r3, [r0, #8]
   34a50:	689b      	ldr	r3, [r3, #8]
   34a52:	4798      	blx	r3
	if (err != -EFAULT) {
   34a54:	f110 0f0e 	cmn.w	r0, #14
   34a58:	d10e      	bne.n	34a78 <api_tx_abort+0x5e>
	struct uart_event event = {
   34a5a:	2100      	movs	r1, #0
   34a5c:	2214      	movs	r2, #20
   34a5e:	a801      	add	r0, sp, #4
   34a60:	f001 fd82 	bl	36568 <memset>
   34a64:	2301      	movs	r3, #1
	user_callback(dev, &event);
   34a66:	4620      	mov	r0, r4
   34a68:	a901      	add	r1, sp, #4
	struct uart_event event = {
   34a6a:	f88d 3004 	strb.w	r3, [sp, #4]
   34a6e:	9602      	str	r6, [sp, #8]
	user_callback(dev, &event);
   34a70:	f7ff fed2 	bl	34818 <user_callback>
		return -EFAULT;
   34a74:	f06f 000d 	mvn.w	r0, #13
}
   34a78:	b007      	add	sp, #28
   34a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00034a7c <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   34a7c:	4770      	bx	lr

00034a7e <sys_clock_cycle_get_32>:
{
   34a7e:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   34a80:	f7ec fb4e 	bl	21120 <z_nrf_rtc_timer_read>
}
   34a84:	bd08      	pop	{r3, pc}

00034a86 <nrf_modem_os_busywait>:
	z_impl_k_busy_wait(usec_to_wait);
   34a86:	f001 bc23 	b.w	362d0 <z_impl_k_busy_wait>

00034a8a <nrf_modem_os_is_in_isr>:
	return k_is_in_isr();
   34a8a:	f001 bb1c 	b.w	360c6 <k_is_in_isr>

00034a8e <nrf91_iface_enable>:
#else
	ARG_UNUSED(iface);
	ARG_UNUSED(enabled);
	return 0;
#endif /* CONFIG_NRF9160_CONNECTIVITY */
}
   34a8e:	2000      	movs	r0, #0
   34a90:	4770      	bx	lr

00034a92 <nrf91_socket_offload_setsockopt>:
{
   34a92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   34a96:	460e      	mov	r6, r1
   34a98:	4615      	mov	r5, r2
   34a9a:	461c      	mov	r4, r3
	struct nrf_timeval nrf_timeo = { 0 };
   34a9c:	2300      	movs	r3, #0
{
   34a9e:	b086      	sub	sp, #24
	int sd = OBJ_TO_SD(obj);
   34aa0:	f8d0 8000 	ldr.w	r8, [r0]
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0) {
   34aa4:	4629      	mov	r1, r5
   34aa6:	4630      	mov	r0, r6
   34aa8:	aa03      	add	r2, sp, #12
	struct nrf_timeval nrf_timeo = { 0 };
   34aaa:	e9cd 3304 	strd	r3, r3, [sp, #16]
{
   34aae:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0) {
   34ab0:	f7ec ff24 	bl	218fc <z_to_nrf_optname>
   34ab4:	2800      	cmp	r0, #0
   34ab6:	da08      	bge.n	34aca <nrf91_socket_offload_setsockopt+0x38>
		errno = ENOPROTOOPT;
   34ab8:	f7fc f938 	bl	30d2c <__errno>
   34abc:	236d      	movs	r3, #109	; 0x6d
   34abe:	6003      	str	r3, [r0, #0]
		return -1;
   34ac0:	f04f 30ff 	mov.w	r0, #4294967295
}
   34ac4:	b006      	add	sp, #24
   34ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   34aca:	2e01      	cmp	r6, #1
   34acc:	d111      	bne.n	34af2 <nrf91_socket_offload_setsockopt+0x60>
   34ace:	3d14      	subs	r5, #20
   34ad0:	2d01      	cmp	r5, #1
   34ad2:	d806      	bhi.n	34ae2 <nrf91_socket_offload_setsockopt+0x50>
		if (optval != NULL) {
   34ad4:	b12c      	cbz	r4, 34ae2 <nrf91_socket_offload_setsockopt+0x50>
			nrf_optlen = sizeof(struct nrf_timeval);
   34ad6:	2708      	movs	r7, #8
			nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   34ad8:	6823      	ldr	r3, [r4, #0]
   34ada:	9304      	str	r3, [sp, #16]
			nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   34adc:	68a3      	ldr	r3, [r4, #8]
			nrf_optval = &nrf_timeo;
   34ade:	ac04      	add	r4, sp, #16
			nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   34ae0:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   34ae2:	4623      	mov	r3, r4
   34ae4:	4631      	mov	r1, r6
   34ae6:	4640      	mov	r0, r8
   34ae8:	9a03      	ldr	r2, [sp, #12]
   34aea:	9700      	str	r7, [sp, #0]
   34aec:	f7f3 f996 	bl	27e1c <nrf_setsockopt>
	return retval;
   34af0:	e7e8      	b.n	34ac4 <nrf91_socket_offload_setsockopt+0x32>
	} else if ((level == SOL_TLS) && (optname == TLS_SESSION_CACHE)) {
   34af2:	f5b6 7f8d 	cmp.w	r6, #282	; 0x11a
   34af6:	d1f4      	bne.n	34ae2 <nrf91_socket_offload_setsockopt+0x50>
		nrf_optlen = sizeof(nrf_sec_session_cache_t);
   34af8:	2d0c      	cmp	r5, #12
   34afa:	bf08      	it	eq
   34afc:	2704      	moveq	r7, #4
   34afe:	e7f0      	b.n	34ae2 <nrf91_socket_offload_setsockopt+0x50>

00034b00 <nrf91_socket_offload_getsockopt>:
{
   34b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   34b04:	461c      	mov	r4, r3
	struct nrf_timeval nrf_timeo = {0, 0};
   34b06:	2300      	movs	r3, #0
{
   34b08:	b086      	sub	sp, #24
   34b0a:	460f      	mov	r7, r1
   34b0c:	4615      	mov	r5, r2
	struct nrf_timeval nrf_timeo = {0, 0};
   34b0e:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_timeo_size = sizeof(struct nrf_timeval);
   34b12:	2308      	movs	r3, #8
	int sd = OBJ_TO_SD(obj);
   34b14:	6806      	ldr	r6, [r0, #0]
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0) {
   34b16:	4629      	mov	r1, r5
   34b18:	4638      	mov	r0, r7
   34b1a:	eb0d 0203 	add.w	r2, sp, r3
{
   34b1e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	nrf_socklen_t nrf_timeo_size = sizeof(struct nrf_timeval);
   34b22:	9303      	str	r3, [sp, #12]
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0) {
   34b24:	f7ec feea 	bl	218fc <z_to_nrf_optname>
   34b28:	2800      	cmp	r0, #0
   34b2a:	da09      	bge.n	34b40 <nrf91_socket_offload_getsockopt+0x40>
		errno = ENOPROTOOPT;
   34b2c:	f7fc f8fe 	bl	30d2c <__errno>
   34b30:	236d      	movs	r3, #109	; 0x6d
		return -1;
   34b32:	f04f 36ff 	mov.w	r6, #4294967295
		errno = ENOPROTOOPT;
   34b36:	6003      	str	r3, [r0, #0]
}
   34b38:	4630      	mov	r0, r6
   34b3a:	b006      	add	sp, #24
   34b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   34b40:	2f01      	cmp	r7, #1
   34b42:	d11c      	bne.n	34b7e <nrf91_socket_offload_getsockopt+0x7e>
   34b44:	f1a5 0314 	sub.w	r3, r5, #20
   34b48:	2b01      	cmp	r3, #1
   34b4a:	d818      	bhi.n	34b7e <nrf91_socket_offload_getsockopt+0x7e>
		nrf_optlen = &nrf_timeo_size;
   34b4c:	aa03      	add	r2, sp, #12
		nrf_optval = &nrf_timeo;
   34b4e:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   34b50:	4630      	mov	r0, r6
   34b52:	9200      	str	r2, [sp, #0]
   34b54:	4639      	mov	r1, r7
   34b56:	9a02      	ldr	r2, [sp, #8]
   34b58:	f7f3 fa9e 	bl	28098 <nrf_getsockopt>
	if (retval == 0) {
   34b5c:	4606      	mov	r6, r0
   34b5e:	2800      	cmp	r0, #0
   34b60:	d1ea      	bne.n	34b38 <nrf91_socket_offload_getsockopt+0x38>
		if (level == SOL_SOCKET) {
   34b62:	2f01      	cmp	r7, #1
   34b64:	d1e8      	bne.n	34b38 <nrf91_socket_offload_getsockopt+0x38>
			if (optname == SO_ERROR) {
   34b66:	2d04      	cmp	r5, #4
   34b68:	d10c      	bne.n	34b84 <nrf91_socket_offload_getsockopt+0x84>
				if (*(int *)optval != 0) {
   34b6a:	6820      	ldr	r0, [r4, #0]
   34b6c:	2800      	cmp	r0, #0
   34b6e:	d0e3      	beq.n	34b38 <nrf91_socket_offload_getsockopt+0x38>
					nrf_modem_os_errno_set(*(int *)optval);
   34b70:	f7ec fdb2 	bl	216d8 <nrf_modem_os_errno_set>
					*(int *)optval = errno;
   34b74:	f7fc f8da 	bl	30d2c <__errno>
   34b78:	6803      	ldr	r3, [r0, #0]
   34b7a:	6023      	str	r3, [r4, #0]
   34b7c:	e7dc      	b.n	34b38 <nrf91_socket_offload_getsockopt+0x38>
	nrf_socklen_t *nrf_optlen = (nrf_socklen_t *)optlen;
   34b7e:	4642      	mov	r2, r8
   34b80:	4623      	mov	r3, r4
   34b82:	e7e5      	b.n	34b50 <nrf91_socket_offload_getsockopt+0x50>
			} else if ((optname == SO_RCVTIMEO) ||
   34b84:	3d14      	subs	r5, #20
   34b86:	2d01      	cmp	r5, #1
   34b88:	d8d6      	bhi.n	34b38 <nrf91_socket_offload_getsockopt+0x38>
					nrf_timeo.tv_sec;
   34b8a:	9b04      	ldr	r3, [sp, #16]
   34b8c:	e9c4 3000 	strd	r3, r0, [r4]
				((struct timeval *)optval)->tv_usec =
   34b90:	9b05      	ldr	r3, [sp, #20]
   34b92:	60a3      	str	r3, [r4, #8]
				*optlen = sizeof(struct timeval);
   34b94:	2310      	movs	r3, #16
   34b96:	f8c8 3000 	str.w	r3, [r8]
   34b9a:	e7cd      	b.n	34b38 <nrf91_socket_offload_getsockopt+0x38>

00034b9c <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   34b9c:	6800      	ldr	r0, [r0, #0]
   34b9e:	f000 bf27 	b.w	359f0 <nrf_listen>

00034ba2 <nrf91_socket_offload_freeaddrinfo>:
{
   34ba2:	b538      	push	{r3, r4, r5, lr}
   34ba4:	4604      	mov	r4, r0
	while (next != NULL) {
   34ba6:	b904      	cbnz	r4, 34baa <nrf91_socket_offload_freeaddrinfo+0x8>
}
   34ba8:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   34baa:	69a0      	ldr	r0, [r4, #24]
		next = next->ai_next;
   34bac:	6825      	ldr	r5, [r4, #0]
		k_free(this->ai_addr);
   34bae:	f001 fc81 	bl	364b4 <k_free>
		k_free(this);
   34bb2:	4620      	mov	r0, r4
   34bb4:	f001 fc7e 	bl	364b4 <k_free>
		next = next->ai_next;
   34bb8:	462c      	mov	r4, r5
   34bba:	e7f4      	b.n	34ba6 <nrf91_socket_offload_freeaddrinfo+0x4>

00034bbc <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   34bbc:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   34bbe:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   34bc0:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   34bc2:	4603      	mov	r3, r0
{
   34bc4:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   34bc6:	f823 2b04 	strh.w	r2, [r3], #4
   34bca:	f101 0420 	add.w	r4, r1, #32
   34bce:	f101 0210 	add.w	r2, r1, #16
   34bd2:	f852 5b04 	ldr.w	r5, [r2], #4
   34bd6:	42a2      	cmp	r2, r4
   34bd8:	f843 5b04 	str.w	r5, [r3], #4
   34bdc:	d1f9      	bne.n	34bd2 <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (uint8_t)nrf_in->sin6_scope_id;
   34bde:	6a0b      	ldr	r3, [r1, #32]
   34be0:	7503      	strb	r3, [r0, #20]
}
   34be2:	bd30      	pop	{r4, r5, pc}

00034be4 <z_to_nrf_ipv6>:
{
   34be4:	460b      	mov	r3, r1
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   34be6:	2124      	movs	r1, #36	; 0x24
{
   34be8:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   34bea:	7019      	strb	r1, [r3, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   34bec:	8841      	ldrh	r1, [r0, #2]
{
   34bee:	4602      	mov	r2, r0
	nrf_out->sin6_port = ptr->sin6_port;
   34bf0:	8119      	strh	r1, [r3, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   34bf2:	2102      	movs	r1, #2
   34bf4:	1d04      	adds	r4, r0, #4
   34bf6:	6059      	str	r1, [r3, #4]
   34bf8:	f103 0610 	add.w	r6, r3, #16
   34bfc:	f100 0714 	add.w	r7, r0, #20
   34c00:	4635      	mov	r5, r6
   34c02:	6820      	ldr	r0, [r4, #0]
   34c04:	6861      	ldr	r1, [r4, #4]
   34c06:	3408      	adds	r4, #8
   34c08:	c503      	stmia	r5!, {r0, r1}
   34c0a:	42bc      	cmp	r4, r7
   34c0c:	462e      	mov	r6, r5
   34c0e:	d1f7      	bne.n	34c00 <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   34c10:	7d12      	ldrb	r2, [r2, #20]
   34c12:	621a      	str	r2, [r3, #32]
}
   34c14:	bdf0      	pop	{r4, r5, r6, r7, pc}

00034c16 <nrf91_socket_offload_sendto>:
{
   34c16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   34c1a:	4604      	mov	r4, r0
   34c1c:	b08c      	sub	sp, #48	; 0x30
   34c1e:	9812      	ldr	r0, [sp, #72]	; 0x48
   34c20:	460d      	mov	r5, r1
   34c22:	4616      	mov	r6, r2
   34c24:	461f      	mov	r7, r3
	int sd = OBJ_TO_SD(obj);
   34c26:	6824      	ldr	r4, [r4, #0]
	if (to == NULL) {
   34c28:	b930      	cbnz	r0, 34c38 <nrf91_socket_offload_sendto+0x22>
		retval = nrf_sendto(sd, buf, len, flags, NULL,
   34c2a:	9013      	str	r0, [sp, #76]	; 0x4c
   34c2c:	4620      	mov	r0, r4
}
   34c2e:	b00c      	add	sp, #48	; 0x30
   34c30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		retval = nrf_sendto(sd, buf, len, flags, NULL,
   34c34:	f7f2 bfe6 	b.w	27c04 <nrf_sendto>
	} else if (to->sa_family == AF_INET) {
   34c38:	f8b0 c000 	ldrh.w	ip, [r0]
   34c3c:	f1bc 0f01 	cmp.w	ip, #1
   34c40:	d112      	bne.n	34c68 <nrf91_socket_offload_sendto+0x52>
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   34c42:	2510      	movs	r5, #16
	nrf_out->sin_port = ptr->sin_port;
   34c44:	8846      	ldrh	r6, [r0, #2]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   34c46:	6840      	ldr	r0, [r0, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   34c48:	f88d 500c 	strb.w	r5, [sp, #12]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   34c4c:	9006      	str	r0, [sp, #24]
		retval = nrf_sendto(sd, buf, len, flags,
   34c4e:	a803      	add	r0, sp, #12
	nrf_out->sin_port = ptr->sin_port;
   34c50:	f8ad 6014 	strh.w	r6, [sp, #20]
	nrf_out->sin_family = NRF_AF_INET;
   34c54:	f8cd c010 	str.w	ip, [sp, #16]
		retval = nrf_sendto(sd, buf, len, flags,
   34c58:	9501      	str	r5, [sp, #4]
   34c5a:	9000      	str	r0, [sp, #0]
		retval = nrf_sendto(sd, buf, len, flags,
   34c5c:	4620      	mov	r0, r4
   34c5e:	f7f2 ffd1 	bl	27c04 <nrf_sendto>
}
   34c62:	b00c      	add	sp, #48	; 0x30
   34c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (to->sa_family == AF_INET6) {
   34c68:	f1bc 0f02 	cmp.w	ip, #2
   34c6c:	d10b      	bne.n	34c86 <nrf91_socket_offload_sendto+0x70>
		z_to_nrf_ipv6(to, &ipv6);
   34c6e:	f10d 080c 	add.w	r8, sp, #12
   34c72:	4641      	mov	r1, r8
   34c74:	f7ff ffb6 	bl	34be4 <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, flags,
   34c78:	2324      	movs	r3, #36	; 0x24
   34c7a:	4632      	mov	r2, r6
   34c7c:	e9cd 8300 	strd	r8, r3, [sp]
   34c80:	4629      	mov	r1, r5
   34c82:	463b      	mov	r3, r7
   34c84:	e7ea      	b.n	34c5c <nrf91_socket_offload_sendto+0x46>
		errno = EAFNOSUPPORT;
   34c86:	f7fc f851 	bl	30d2c <__errno>
   34c8a:	236a      	movs	r3, #106	; 0x6a
   34c8c:	6003      	str	r3, [r0, #0]
		retval = -1;
   34c8e:	f04f 30ff 	mov.w	r0, #4294967295
	return retval;
   34c92:	e7e6      	b.n	34c62 <nrf91_socket_offload_sendto+0x4c>

00034c94 <nrf91_socket_offload_write>:
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   34c94:	2300      	movs	r3, #0
{
   34c96:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   34c98:	e9cd 3300 	strd	r3, r3, [sp]
   34c9c:	f7ff ffbb 	bl	34c16 <nrf91_socket_offload_sendto>
}
   34ca0:	b003      	add	sp, #12
   34ca2:	f85d fb04 	ldr.w	pc, [sp], #4

00034ca6 <nrf91_socket_offload_connect>:
{
   34ca6:	4603      	mov	r3, r0
   34ca8:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   34caa:	681c      	ldr	r4, [r3, #0]
	if (addr->sa_family == AF_INET) {
   34cac:	880b      	ldrh	r3, [r1, #0]
{
   34cae:	4608      	mov	r0, r1
	if (addr->sa_family == AF_INET) {
   34cb0:	2b01      	cmp	r3, #1
{
   34cb2:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   34cb4:	d10e      	bne.n	34cd4 <nrf91_socket_offload_connect+0x2e>
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   34cb6:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   34cb8:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_family = NRF_AF_INET;
   34cba:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   34cbc:	6843      	ldr	r3, [r0, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   34cbe:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_port = ptr->sin_port;
   34cc2:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   34cc6:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (struct nrf_sockaddr *)&ipv6,
   34cc8:	4620      	mov	r0, r4
   34cca:	a901      	add	r1, sp, #4
   34ccc:	f000 fdad 	bl	3582a <nrf_connect>
}
   34cd0:	b00a      	add	sp, #40	; 0x28
   34cd2:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   34cd4:	2b02      	cmp	r3, #2
   34cd6:	d104      	bne.n	34ce2 <nrf91_socket_offload_connect+0x3c>
		z_to_nrf_ipv6(addr, &ipv6);
   34cd8:	a901      	add	r1, sp, #4
   34cda:	f7ff ff83 	bl	34be4 <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (struct nrf_sockaddr *)&ipv6,
   34cde:	2224      	movs	r2, #36	; 0x24
   34ce0:	e7f2      	b.n	34cc8 <nrf91_socket_offload_connect+0x22>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   34ce2:	4620      	mov	r0, r4
}
   34ce4:	b00a      	add	sp, #40	; 0x28
   34ce6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		retval = nrf_connect(sd, (void *)addr, addrlen);
   34cea:	f000 bd9e 	b.w	3582a <nrf_connect>

00034cee <nrf91_socket_offload_bind>:
{
   34cee:	4603      	mov	r3, r0
   34cf0:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   34cf2:	681c      	ldr	r4, [r3, #0]
	if (addr->sa_family == AF_INET) {
   34cf4:	880b      	ldrh	r3, [r1, #0]
{
   34cf6:	4608      	mov	r0, r1
	if (addr->sa_family == AF_INET) {
   34cf8:	2b01      	cmp	r3, #1
{
   34cfa:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   34cfc:	d10e      	bne.n	34d1c <nrf91_socket_offload_bind+0x2e>
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   34cfe:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   34d00:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_family = NRF_AF_INET;
   34d02:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   34d04:	6843      	ldr	r3, [r0, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   34d06:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_port = ptr->sin_port;
   34d0a:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   34d0e:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   34d10:	4620      	mov	r0, r4
   34d12:	a901      	add	r1, sp, #4
   34d14:	f000 fe23 	bl	3595e <nrf_bind>
}
   34d18:	b00a      	add	sp, #40	; 0x28
   34d1a:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   34d1c:	2b02      	cmp	r3, #2
   34d1e:	d104      	bne.n	34d2a <nrf91_socket_offload_bind+0x3c>
		z_to_nrf_ipv6(addr, &ipv6);
   34d20:	a901      	add	r1, sp, #4
   34d22:	f7ff ff5f 	bl	34be4 <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   34d26:	2224      	movs	r2, #36	; 0x24
   34d28:	e7f2      	b.n	34d10 <nrf91_socket_offload_bind+0x22>
		errno = EAFNOSUPPORT;
   34d2a:	f7fb ffff 	bl	30d2c <__errno>
   34d2e:	236a      	movs	r3, #106	; 0x6a
   34d30:	6003      	str	r3, [r0, #0]
		retval = -1;
   34d32:	f04f 30ff 	mov.w	r0, #4294967295
	return retval;
   34d36:	e7ef      	b.n	34d18 <nrf91_socket_offload_bind+0x2a>

00034d38 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   34d38:	f7f4 ba54 	b.w	291e4 <z_impl_k_mutex_lock>

00034d3c <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   34d3c:	f7f4 bb22 	b.w	29384 <z_impl_k_mutex_unlock>

00034d40 <nrf91_socket_offload_recvfrom>:
{
   34d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34d44:	4605      	mov	r5, r0
	if (ctx->lock) {
   34d46:	6840      	ldr	r0, [r0, #4]
{
   34d48:	b08d      	sub	sp, #52	; 0x34
   34d4a:	460c      	mov	r4, r1
   34d4c:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
   34d50:	4691      	mov	r9, r2
   34d52:	469a      	mov	sl, r3
	if (ctx->lock) {
   34d54:	b108      	cbz	r0, 34d5a <nrf91_socket_offload_recvfrom+0x1a>
		k_mutex_unlock(ctx->lock);
   34d56:	f7ff fff1 	bl	34d3c <k_mutex_unlock.isra.0>
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, flags,
   34d5a:	f8d5 b000 	ldr.w	fp, [r5]
	if (from == NULL || fromlen == NULL) {
   34d5e:	b106      	cbz	r6, 34d62 <nrf91_socket_offload_recvfrom+0x22>
   34d60:	b9af      	cbnz	r7, 34d8e <nrf91_socket_offload_recvfrom+0x4e>
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, flags,
   34d62:	2300      	movs	r3, #0
   34d64:	4621      	mov	r1, r4
   34d66:	e9cd 3300 	strd	r3, r3, [sp]
   34d6a:	464a      	mov	r2, r9
   34d6c:	4653      	mov	r3, sl
   34d6e:	4658      	mov	r0, fp
   34d70:	f000 ff03 	bl	35b7a <nrf_recvfrom>
   34d74:	4604      	mov	r4, r0
	if (ctx->lock) {
   34d76:	6868      	ldr	r0, [r5, #4]
   34d78:	b128      	cbz	r0, 34d86 <nrf91_socket_offload_recvfrom+0x46>
		k_mutex_lock(ctx->lock, K_FOREVER);
   34d7a:	f04f 32ff 	mov.w	r2, #4294967295
   34d7e:	f04f 33ff 	mov.w	r3, #4294967295
   34d82:	f7ff ffd9 	bl	34d38 <k_mutex_lock.constprop.0.isra.0>
}
   34d86:	4620      	mov	r0, r4
   34d88:	b00d      	add	sp, #52	; 0x34
   34d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		struct nrf_sockaddr_in6 cliaddr_storage = { 0 };
   34d8e:	f10d 080c 	add.w	r8, sp, #12
   34d92:	2224      	movs	r2, #36	; 0x24
   34d94:	2100      	movs	r1, #0
   34d96:	4640      	mov	r0, r8
   34d98:	f001 fbe6 	bl	36568 <memset>
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   34d9c:	2224      	movs	r2, #36	; 0x24
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, flags,
   34d9e:	ab02      	add	r3, sp, #8
   34da0:	4621      	mov	r1, r4
   34da2:	e9cd 8300 	strd	r8, r3, [sp]
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   34da6:	9202      	str	r2, [sp, #8]
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, flags,
   34da8:	4653      	mov	r3, sl
   34daa:	464a      	mov	r2, r9
   34dac:	4658      	mov	r0, fp
   34dae:	f000 fee4 	bl	35b7a <nrf_recvfrom>
		if (retval < 0) {
   34db2:	1e04      	subs	r4, r0, #0
   34db4:	dbdf      	blt.n	34d76 <nrf91_socket_offload_recvfrom+0x36>
		if (cliaddr->sa_family == NRF_AF_INET &&
   34db6:	9b04      	ldr	r3, [sp, #16]
   34db8:	2b01      	cmp	r3, #1
   34dba:	d10b      	bne.n	34dd4 <nrf91_socket_offload_recvfrom+0x94>
   34dbc:	9a02      	ldr	r2, [sp, #8]
   34dbe:	2a10      	cmp	r2, #16
   34dc0:	d1d9      	bne.n	34d76 <nrf91_socket_offload_recvfrom+0x36>
	ptr->sin_family = AF_INET;
   34dc2:	8033      	strh	r3, [r6, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   34dc4:	9b06      	ldr	r3, [sp, #24]
	ptr->sin_port = nrf_in->sin_port;
   34dc6:	f8bd 2014 	ldrh.w	r2, [sp, #20]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   34dca:	6073      	str	r3, [r6, #4]
			*fromlen = sizeof(struct sockaddr_in);
   34dcc:	2308      	movs	r3, #8
	ptr->sin_port = nrf_in->sin_port;
   34dce:	8072      	strh	r2, [r6, #2]
			*fromlen = sizeof(struct sockaddr_in6);
   34dd0:	603b      	str	r3, [r7, #0]
   34dd2:	e7d0      	b.n	34d76 <nrf91_socket_offload_recvfrom+0x36>
		} else if (cliaddr->sa_family == NRF_AF_INET6 &&
   34dd4:	2b02      	cmp	r3, #2
   34dd6:	d1ce      	bne.n	34d76 <nrf91_socket_offload_recvfrom+0x36>
   34dd8:	9b02      	ldr	r3, [sp, #8]
   34dda:	2b24      	cmp	r3, #36	; 0x24
   34ddc:	d1cb      	bne.n	34d76 <nrf91_socket_offload_recvfrom+0x36>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   34dde:	4641      	mov	r1, r8
   34de0:	4630      	mov	r0, r6
   34de2:	f7ff feeb 	bl	34bbc <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   34de6:	2318      	movs	r3, #24
   34de8:	e7f2      	b.n	34dd0 <nrf91_socket_offload_recvfrom+0x90>

00034dea <nrf91_socket_offload_read>:
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   34dea:	2300      	movs	r3, #0
{
   34dec:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   34dee:	e9cd 3300 	strd	r3, r3, [sp]
   34df2:	f7ff ffa5 	bl	34d40 <nrf91_socket_offload_recvfrom>
}
   34df6:	b003      	add	sp, #12
   34df8:	f85d fb04 	ldr.w	pc, [sp], #4

00034dfc <nrf91_socket_offload_close>:
{
   34dfc:	b538      	push	{r3, r4, r5, lr}
   34dfe:	4605      	mov	r5, r0
	retval = nrf_close(ctx->nrf_fd);
   34e00:	6800      	ldr	r0, [r0, #0]
   34e02:	f7f2 fecb 	bl	27b9c <nrf_close>
	if (retval == 0) {
   34e06:	4604      	mov	r4, r0
   34e08:	b910      	cbnz	r0, 34e10 <nrf91_socket_offload_close+0x14>
		release_ctx(ctx);
   34e0a:	4628      	mov	r0, r5
   34e0c:	f7ec ff6c 	bl	21ce8 <release_ctx>
}
   34e10:	4620      	mov	r0, r4
   34e12:	bd38      	pop	{r3, r4, r5, pc}

00034e14 <z_log_msg_static_create.constprop.0>:
   34e14:	2300      	movs	r3, #0
   34e16:	f7db ba0d 	b.w	10234 <z_impl_z_log_msg_static_create>

00034e1a <dk_set_leds_state>:
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   34e1a:	ea40 0301 	orr.w	r3, r0, r1
   34e1e:	2b0f      	cmp	r3, #15
   34e20:	d801      	bhi.n	34e26 <dk_set_leds_state+0xc>
   34e22:	f7ed ba85 	b.w	22330 <dk_set_leds_state.part.0>
}
   34e26:	f06f 0015 	mvn.w	r0, #21
   34e2a:	4770      	bx	lr

00034e2c <dk_set_leds>:
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
   34e2c:	210f      	movs	r1, #15
   34e2e:	f7ff bff4 	b.w	34e1a <dk_set_leds_state>

00034e32 <dk_set_led_on>:

int dk_set_led_on(uint8_t led_idx)
{
	return dk_set_led(led_idx, 1);
   34e32:	2101      	movs	r1, #1
   34e34:	f7ed bcea 	b.w	2280c <dk_set_led>

00034e38 <dk_set_led_off>:
}

int dk_set_led_off(uint8_t led_idx)
{
	return dk_set_led(led_idx, 0);
   34e38:	2100      	movs	r1, #0
   34e3a:	f7ed bce7 	b.w	2280c <dk_set_led>

00034e3e <response_handler>:
	write_uart_string(response);
   34e3e:	f7ed be11 	b.w	22a64 <write_uart_string>

00034e42 <is_notification>:
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   34e42:	f1a0 0323 	sub.w	r3, r0, #35	; 0x23
   34e46:	b2db      	uxtb	r3, r3
   34e48:	2b08      	cmp	r3, #8
   34e4a:	bf9d      	ittte	ls
   34e4c:	f240 1005 	movwls	r0, #261	; 0x105
   34e50:	40d8      	lsrls	r0, r3
   34e52:	f000 0001 	andls.w	r0, r0, #1
{
   34e56:	2000      	movhi	r0, #0
}
   34e58:	4770      	bx	lr

00034e5a <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   34e5a:	280d      	cmp	r0, #13
   34e5c:	d004      	beq.n	34e68 <is_lfcr+0xe>
   34e5e:	f1a0 030a 	sub.w	r3, r0, #10
   34e62:	4258      	negs	r0, r3
   34e64:	4158      	adcs	r0, r3
   34e66:	4770      	bx	lr
		return true;
   34e68:	2001      	movs	r0, #1
}
   34e6a:	4770      	bx	lr

00034e6c <skip_command_prefix>:
{
   34e6c:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   34e6e:	6801      	ldr	r1, [r0, #0]
{
   34e70:	4602      	mov	r2, r0
	*cmd += sizeof("AT") - 1;
   34e72:	1c8b      	adds	r3, r1, #2
   34e74:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   34e76:	788c      	ldrb	r4, [r1, #2]
   34e78:	4620      	mov	r0, r4
   34e7a:	f7ff ffee 	bl	34e5a <is_lfcr>
   34e7e:	b910      	cbnz	r0, 34e86 <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   34e80:	b10c      	cbz	r4, 34e86 <skip_command_prefix+0x1a>
	(*cmd)++;
   34e82:	3103      	adds	r1, #3
   34e84:	6011      	str	r1, [r2, #0]
}
   34e86:	bd10      	pop	{r4, pc}

00034e88 <at_parser_params_from_str>:
	return at_parser_max_params_from_str(at_params_str, next_params_str,
   34e88:	6813      	ldr	r3, [r2, #0]
   34e8a:	f7ee b9e9 	b.w	23260 <at_parser_max_params_from_str>

00034e8e <at_params_list_init>:
{
   34e8e:	b538      	push	{r3, r4, r5, lr}
   34e90:	460d      	mov	r5, r1
	if (list == NULL) {
   34e92:	4604      	mov	r4, r0
   34e94:	b140      	cbz	r0, 34ea8 <at_params_list_init+0x1a>
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   34e96:	2110      	movs	r1, #16
   34e98:	4628      	mov	r0, r5
   34e9a:	f001 fb16 	bl	364ca <k_calloc>
   34e9e:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   34ea0:	b128      	cbz	r0, 34eae <at_params_list_init+0x20>
	return 0;
   34ea2:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   34ea4:	6025      	str	r5, [r4, #0]
}
   34ea6:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   34ea8:	f06f 0015 	mvn.w	r0, #21
   34eac:	e7fb      	b.n	34ea6 <at_params_list_init+0x18>
		return -ENOMEM;
   34eae:	f06f 000b 	mvn.w	r0, #11
   34eb2:	e7f8      	b.n	34ea6 <at_params_list_init+0x18>

00034eb4 <at_params_list_free>:

void at_params_list_free(struct at_param_list *list)
{
   34eb4:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   34eb6:	4604      	mov	r4, r0
   34eb8:	b148      	cbz	r0, 34ece <at_params_list_free+0x1a>
   34eba:	6843      	ldr	r3, [r0, #4]
   34ebc:	b13b      	cbz	r3, 34ece <at_params_list_free+0x1a>
		return;
	}

	at_params_list_clear(list);

	list->param_count = 0;
   34ebe:	2500      	movs	r5, #0
	at_params_list_clear(list);
   34ec0:	f7ee fae2 	bl	23488 <at_params_list_clear>
	k_free(list->params);
   34ec4:	6860      	ldr	r0, [r4, #4]
	list->param_count = 0;
   34ec6:	6025      	str	r5, [r4, #0]
	k_free(list->params);
   34ec8:	f001 faf4 	bl	364b4 <k_free>
	list->params = NULL;
   34ecc:	6065      	str	r5, [r4, #4]
}
   34ece:	bd38      	pop	{r3, r4, r5, pc}

00034ed0 <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   34ed0:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   34ed2:	b178      	cbz	r0, 34ef4 <at_params_empty_put+0x24>
   34ed4:	6843      	ldr	r3, [r0, #4]
   34ed6:	b16b      	cbz	r3, 34ef4 <at_params_empty_put+0x24>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   34ed8:	f7ee fa6e 	bl	233b8 <at_params_get>

	if (param == NULL) {
   34edc:	4604      	mov	r4, r0
   34ede:	b148      	cbz	r0, 34ef4 <at_params_empty_put+0x24>
		return -EINVAL;
	}

	at_param_clear(param);
   34ee0:	f7ee faae 	bl	23440 <at_param_clear>

	param->type = AT_PARAM_TYPE_EMPTY;
   34ee4:	2304      	movs	r3, #4
	param->value.int_val = 0;
   34ee6:	2200      	movs	r2, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   34ee8:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   34eea:	2300      	movs	r3, #0

	return 0;
   34eec:	2000      	movs	r0, #0
	param->value.int_val = 0;
   34eee:	e9c4 2302 	strd	r2, r3, [r4, #8]
}
   34ef2:	bd10      	pop	{r4, pc}
		return -EINVAL;
   34ef4:	f06f 0015 	mvn.w	r0, #21
   34ef8:	e7fb      	b.n	34ef2 <at_params_empty_put+0x22>

00034efa <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index, int64_t value)
{
   34efa:	b570      	push	{r4, r5, r6, lr}
   34efc:	4616      	mov	r6, r2
   34efe:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL) {
   34f00:	b168      	cbz	r0, 34f1e <at_params_int_put+0x24>
   34f02:	6843      	ldr	r3, [r0, #4]
   34f04:	b15b      	cbz	r3, 34f1e <at_params_int_put+0x24>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   34f06:	f7ee fa57 	bl	233b8 <at_params_get>

	if (param == NULL) {
   34f0a:	4604      	mov	r4, r0
   34f0c:	b138      	cbz	r0, 34f1e <at_params_int_put+0x24>
		return -EINVAL;
	}

	at_param_clear(param);
   34f0e:	f7ee fa97 	bl	23440 <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_INT;
   34f12:	2301      	movs	r3, #1
	param->value.int_val = value;
	return 0;
   34f14:	2000      	movs	r0, #0
	param->value.int_val = value;
   34f16:	e9c4 6502 	strd	r6, r5, [r4, #8]
	param->type = AT_PARAM_TYPE_NUM_INT;
   34f1a:	7023      	strb	r3, [r4, #0]
}
   34f1c:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   34f1e:	f06f 0015 	mvn.w	r0, #21
   34f22:	e7fb      	b.n	34f1c <at_params_int_put+0x22>

00034f24 <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   34f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34f26:	4617      	mov	r7, r2
   34f28:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   34f2a:	b1c0      	cbz	r0, 34f5e <at_params_string_put+0x3a>
   34f2c:	6843      	ldr	r3, [r0, #4]
   34f2e:	b1b3      	cbz	r3, 34f5e <at_params_string_put+0x3a>
   34f30:	b1aa      	cbz	r2, 34f5e <at_params_string_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   34f32:	f7ee fa41 	bl	233b8 <at_params_get>

	if (param == NULL) {
   34f36:	4604      	mov	r4, r0
   34f38:	b188      	cbz	r0, 34f5e <at_params_string_put+0x3a>
		return -EINVAL;
	}

	char *param_value = (char *)k_malloc(str_len + 1);
   34f3a:	1c68      	adds	r0, r5, #1
   34f3c:	f001 fac1 	bl	364c2 <k_malloc>

	if (param_value == NULL) {
   34f40:	4606      	mov	r6, r0
   34f42:	b178      	cbz	r0, 34f64 <at_params_string_put+0x40>
   34f44:	462a      	mov	r2, r5
   34f46:	4639      	mov	r1, r7
   34f48:	f001 faee 	bl	36528 <memcpy>
		return -ENOMEM;
	}

	memcpy(param_value, str, str_len);

	at_param_clear(param);
   34f4c:	4620      	mov	r0, r4
   34f4e:	f7ee fa77 	bl	23440 <at_param_clear>
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
   34f52:	2302      	movs	r3, #2
	param->value.str_val = param_value;

	return 0;
   34f54:	2000      	movs	r0, #0
	param->size = str_len;
   34f56:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   34f58:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   34f5a:	60a6      	str	r6, [r4, #8]
}
   34f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   34f5e:	f06f 0015 	mvn.w	r0, #21
   34f62:	e7fb      	b.n	34f5c <at_params_string_put+0x38>
		return -ENOMEM;
   34f64:	f06f 000b 	mvn.w	r0, #11
   34f68:	e7f8      	b.n	34f5c <at_params_string_put+0x38>

00034f6a <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const uint32_t *array, size_t array_len)
{
   34f6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34f6c:	4617      	mov	r7, r2
   34f6e:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   34f70:	b1c0      	cbz	r0, 34fa4 <at_params_array_put+0x3a>
   34f72:	6843      	ldr	r3, [r0, #4]
   34f74:	b1b3      	cbz	r3, 34fa4 <at_params_array_put+0x3a>
   34f76:	b1aa      	cbz	r2, 34fa4 <at_params_array_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   34f78:	f7ee fa1e 	bl	233b8 <at_params_get>

	if (param == NULL) {
   34f7c:	4604      	mov	r4, r0
   34f7e:	b188      	cbz	r0, 34fa4 <at_params_array_put+0x3a>
		return -EINVAL;
	}

	uint32_t *param_value = (uint32_t *)k_malloc(array_len);
   34f80:	4628      	mov	r0, r5
   34f82:	f001 fa9e 	bl	364c2 <k_malloc>

	if (param_value == NULL) {
   34f86:	4606      	mov	r6, r0
   34f88:	b178      	cbz	r0, 34faa <at_params_array_put+0x40>
   34f8a:	462a      	mov	r2, r5
   34f8c:	4639      	mov	r1, r7
   34f8e:	f001 facb 	bl	36528 <memcpy>
		return -ENOMEM;
	}

	memcpy(param_value, array, array_len);

	at_param_clear(param);
   34f92:	4620      	mov	r0, r4
   34f94:	f7ee fa54 	bl	23440 <at_param_clear>
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
   34f98:	2303      	movs	r3, #3
	param->value.array_val = param_value;

	return 0;
   34f9a:	2000      	movs	r0, #0
	param->size = array_len;
   34f9c:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   34f9e:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   34fa0:	60a6      	str	r6, [r4, #8]
}
   34fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   34fa4:	f06f 0015 	mvn.w	r0, #21
   34fa8:	e7fb      	b.n	34fa2 <at_params_array_put+0x38>
		return -ENOMEM;
   34faa:	f06f 000b 	mvn.w	r0, #11
   34fae:	e7f8      	b.n	34fa2 <at_params_array_put+0x38>

00034fb0 <at_params_short_get>:
	return 0;
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			int16_t *value)
{
   34fb0:	b510      	push	{r4, lr}
   34fb2:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   34fb4:	b1b0      	cbz	r0, 34fe4 <at_params_short_get+0x34>
   34fb6:	6843      	ldr	r3, [r0, #4]
   34fb8:	b1a3      	cbz	r3, 34fe4 <at_params_short_get+0x34>
   34fba:	b19a      	cbz	r2, 34fe4 <at_params_short_get+0x34>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   34fbc:	f7ee f9fc 	bl	233b8 <at_params_get>

	if (param == NULL) {
   34fc0:	b180      	cbz	r0, 34fe4 <at_params_short_get+0x34>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   34fc2:	7803      	ldrb	r3, [r0, #0]
   34fc4:	2b01      	cmp	r3, #1
   34fc6:	d10d      	bne.n	34fe4 <at_params_short_get+0x34>
		return -EINVAL;
	}

	if ((param->value.int_val > INT16_MAX) || (param->value.int_val < INT16_MIN)) {
   34fc8:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
   34fcc:	f513 4100 	adds.w	r1, r3, #32768	; 0x8000
   34fd0:	f142 0200 	adc.w	r2, r2, #0
   34fd4:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   34fd8:	f172 0200 	sbcs.w	r2, r2, #0
   34fdc:	d202      	bcs.n	34fe4 <at_params_short_get+0x34>
		return -EINVAL;
	}

	*value = (int16_t)param->value.int_val;
	return 0;
   34fde:	2000      	movs	r0, #0
	*value = (int16_t)param->value.int_val;
   34fe0:	8023      	strh	r3, [r4, #0]
}
   34fe2:	bd10      	pop	{r4, pc}
		return -EINVAL;
   34fe4:	f06f 0015 	mvn.w	r0, #21
   34fe8:	e7fb      	b.n	34fe2 <at_params_short_get+0x32>

00034fea <at_params_unsigned_short_get>:

int at_params_unsigned_short_get(const struct at_param_list *list, size_t index,
			uint16_t *value)
{
   34fea:	b510      	push	{r4, lr}
   34fec:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   34fee:	b190      	cbz	r0, 35016 <at_params_unsigned_short_get+0x2c>
   34ff0:	6843      	ldr	r3, [r0, #4]
   34ff2:	b183      	cbz	r3, 35016 <at_params_unsigned_short_get+0x2c>
   34ff4:	b17a      	cbz	r2, 35016 <at_params_unsigned_short_get+0x2c>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   34ff6:	f7ee f9df 	bl	233b8 <at_params_get>

	if (param == NULL) {
   34ffa:	b160      	cbz	r0, 35016 <at_params_unsigned_short_get+0x2c>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   34ffc:	7803      	ldrb	r3, [r0, #0]
   34ffe:	2b01      	cmp	r3, #1
   35000:	d109      	bne.n	35016 <at_params_unsigned_short_get+0x2c>
		return -EINVAL;
	}

	if ((param->value.int_val > UINT16_MAX) || (param->value.int_val < 0)) {
   35002:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
   35006:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   3500a:	f172 0200 	sbcs.w	r2, r2, #0
   3500e:	d202      	bcs.n	35016 <at_params_unsigned_short_get+0x2c>
		return -EINVAL;
	}

	*value = (uint16_t)param->value.int_val;
	return 0;
   35010:	2000      	movs	r0, #0
	*value = (uint16_t)param->value.int_val;
   35012:	8023      	strh	r3, [r4, #0]
}
   35014:	bd10      	pop	{r4, pc}
		return -EINVAL;
   35016:	f06f 0015 	mvn.w	r0, #21
   3501a:	e7fb      	b.n	35014 <at_params_unsigned_short_get+0x2a>

0003501c <at_params_int_get>:

int at_params_int_get(const struct at_param_list *list, size_t index,
		      int32_t *value)
{
   3501c:	b510      	push	{r4, lr}
   3501e:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   35020:	b190      	cbz	r0, 35048 <at_params_int_get+0x2c>
   35022:	6843      	ldr	r3, [r0, #4]
   35024:	b183      	cbz	r3, 35048 <at_params_int_get+0x2c>
   35026:	b17a      	cbz	r2, 35048 <at_params_int_get+0x2c>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   35028:	f7ee f9c6 	bl	233b8 <at_params_get>

	if (param == NULL) {
   3502c:	b160      	cbz	r0, 35048 <at_params_int_get+0x2c>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   3502e:	7803      	ldrb	r3, [r0, #0]
   35030:	2b01      	cmp	r3, #1
   35032:	d109      	bne.n	35048 <at_params_int_get+0x2c>
		return -EINVAL;
	}

	if ((param->value.int_val > INT32_MAX) || (param->value.int_val < INT32_MIN)) {
   35034:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
   35038:	f113 4100 	adds.w	r1, r3, #2147483648	; 0x80000000
   3503c:	f142 0200 	adc.w	r2, r2, #0
   35040:	b912      	cbnz	r2, 35048 <at_params_int_get+0x2c>
		return -EINVAL;
	}

	*value = (int32_t)param->value.int_val;
	return 0;
   35042:	2000      	movs	r0, #0
	*value = (int32_t)param->value.int_val;
   35044:	6023      	str	r3, [r4, #0]
}
   35046:	bd10      	pop	{r4, pc}
		return -EINVAL;
   35048:	f06f 0015 	mvn.w	r0, #21
   3504c:	e7fb      	b.n	35046 <at_params_int_get+0x2a>

0003504e <at_params_int64_get>:
	*value = (uint32_t)param->value.int_val;
	return 0;
}

int at_params_int64_get(const struct at_param_list *list, size_t index, int64_t *value)
{
   3504e:	b510      	push	{r4, lr}
   35050:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   35052:	b170      	cbz	r0, 35072 <at_params_int64_get+0x24>
   35054:	6843      	ldr	r3, [r0, #4]
   35056:	b163      	cbz	r3, 35072 <at_params_int64_get+0x24>
   35058:	b15a      	cbz	r2, 35072 <at_params_int64_get+0x24>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   3505a:	f7ee f9ad 	bl	233b8 <at_params_get>

	if (param == NULL) {
   3505e:	b140      	cbz	r0, 35072 <at_params_int64_get+0x24>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   35060:	7803      	ldrb	r3, [r0, #0]
   35062:	2b01      	cmp	r3, #1
   35064:	d105      	bne.n	35072 <at_params_int64_get+0x24>

	if ((param->value.int_val > INT64_MAX) || (param->value.int_val < INT64_MIN)) {
		return -EINVAL;
	}

	*value = param->value.int_val;
   35066:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
	return 0;
   3506a:	2000      	movs	r0, #0
	*value = param->value.int_val;
   3506c:	e9c4 2300 	strd	r2, r3, [r4]
}
   35070:	bd10      	pop	{r4, pc}
		return -EINVAL;
   35072:	f06f 0015 	mvn.w	r0, #21
   35076:	e7fb      	b.n	35070 <at_params_int64_get+0x22>

00035078 <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   35078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3507a:	4617      	mov	r7, r2
   3507c:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL || len == NULL) {
   3507e:	b1c0      	cbz	r0, 350b2 <at_params_string_get+0x3a>
   35080:	6843      	ldr	r3, [r0, #4]
   35082:	b1b3      	cbz	r3, 350b2 <at_params_string_get+0x3a>
   35084:	b1aa      	cbz	r2, 350b2 <at_params_string_get+0x3a>
   35086:	b1a4      	cbz	r4, 350b2 <at_params_string_get+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   35088:	f7ee f996 	bl	233b8 <at_params_get>

	if (param == NULL) {
   3508c:	4606      	mov	r6, r0
   3508e:	b180      	cbz	r0, 350b2 <at_params_string_get+0x3a>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_STRING) {
   35090:	7803      	ldrb	r3, [r0, #0]
   35092:	2b02      	cmp	r3, #2
   35094:	d10d      	bne.n	350b2 <at_params_string_get+0x3a>
		return -EINVAL;
	}

	size_t param_len = at_param_size(param);
   35096:	f7ee f9af 	bl	233f8 <at_param_size>

	if (*len < param_len) {
   3509a:	6823      	ldr	r3, [r4, #0]
	size_t param_len = at_param_size(param);
   3509c:	4605      	mov	r5, r0
	if (*len < param_len) {
   3509e:	4283      	cmp	r3, r0
   350a0:	d30a      	bcc.n	350b8 <at_params_string_get+0x40>
   350a2:	4602      	mov	r2, r0
   350a4:	68b1      	ldr	r1, [r6, #8]
   350a6:	4638      	mov	r0, r7
   350a8:	f001 fa3e 	bl	36528 <memcpy>
	}

	memcpy(value, param->value.str_val, param_len);
	*len = param_len;

	return 0;
   350ac:	2000      	movs	r0, #0
	*len = param_len;
   350ae:	6025      	str	r5, [r4, #0]
}
   350b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   350b2:	f06f 0015 	mvn.w	r0, #21
   350b6:	e7fb      	b.n	350b0 <at_params_string_get+0x38>
		return -ENOMEM;
   350b8:	f06f 000b 	mvn.w	r0, #11
   350bc:	e7f8      	b.n	350b0 <at_params_string_get+0x38>

000350be <at_params_valid_count_get>:

	return 0;
}

uint32_t at_params_valid_count_get(const struct at_param_list *list)
{
   350be:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   350c0:	4605      	mov	r5, r0
   350c2:	b180      	cbz	r0, 350e6 <at_params_valid_count_get+0x28>
   350c4:	6843      	ldr	r3, [r0, #4]
   350c6:	b173      	cbz	r3, 350e6 <at_params_valid_count_get+0x28>
		return -EINVAL;
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);
   350c8:	2100      	movs	r1, #0
   350ca:	f7ee f975 	bl	233b8 <at_params_get>
	size_t valid_i = 0;
   350ce:	2400      	movs	r4, #0

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   350d0:	b108      	cbz	r0, 350d6 <at_params_valid_count_get+0x18>
   350d2:	7803      	ldrb	r3, [r0, #0]
   350d4:	b90b      	cbnz	r3, 350da <at_params_valid_count_get+0x1c>
		valid_i += 1;
		param = at_params_get(list, valid_i);
	}

	return valid_i;
}
   350d6:	4620      	mov	r0, r4
   350d8:	bd38      	pop	{r3, r4, r5, pc}
		valid_i += 1;
   350da:	3401      	adds	r4, #1
		param = at_params_get(list, valid_i);
   350dc:	4621      	mov	r1, r4
   350de:	4628      	mov	r0, r5
   350e0:	f7ee f96a 	bl	233b8 <at_params_get>
   350e4:	e7f4      	b.n	350d0 <at_params_valid_count_get+0x12>
		return -EINVAL;
   350e6:	f06f 0415 	mvn.w	r4, #21
   350ea:	e7f4      	b.n	350d6 <at_params_valid_count_get+0x18>

000350ec <z_log_msg_static_create.constprop.0>:
   350ec:	2300      	movs	r3, #0
   350ee:	f7db b8a1 	b.w	10234 <z_impl_z_log_msg_static_create>

000350f2 <lte_lc_connect_async>:
{
   350f2:	b508      	push	{r3, lr}
	if (handler) {
   350f4:	b130      	cbz	r0, 35104 <lte_lc_connect_async+0x12>
		event_handler_list_append_handler(handler);
   350f6:	f7ef fa37 	bl	24568 <event_handler_list_append_handler>
}
   350fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return connect_lte(false);
   350fe:	2000      	movs	r0, #0
   35100:	f7ef b968 	b.w	243d4 <connect_lte>
	} else if (event_handler_list_is_empty()) {
   35104:	f7ef fa28 	bl	24558 <event_handler_list_is_empty>
   35108:	2800      	cmp	r0, #0
   3510a:	d0f6      	beq.n	350fa <lte_lc_connect_async+0x8>
}
   3510c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   35110:	f7ee b9e8 	b.w	234e4 <lte_lc_connect_async.part.0>

00035114 <lte_lc_init_and_connect_async>:
{
   35114:	b510      	push	{r4, lr}
   35116:	4604      	mov	r4, r0
	err = init_and_config();
   35118:	f7ef f83c 	bl	24194 <init_and_config>
	if (err) {
   3511c:	b920      	cbnz	r0, 35128 <lte_lc_init_and_connect_async+0x14>
	return lte_lc_connect_async(handler);
   3511e:	4620      	mov	r0, r4
}
   35120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return lte_lc_connect_async(handler);
   35124:	f7ff bfe5 	b.w	350f2 <lte_lc_connect_async>
}
   35128:	f06f 000d 	mvn.w	r0, #13
   3512c:	bd10      	pop	{r4, pc}

0003512e <z_log_msg_static_create.constprop.0>:
   3512e:	2300      	movs	r3, #0
   35130:	f7db b880 	b.w	10234 <z_impl_z_log_msg_static_create>

00035134 <string_to_int>:
{
   35134:	b573      	push	{r0, r1, r4, r5, r6, lr}
   35136:	460c      	mov	r4, r1
   35138:	4605      	mov	r5, r0
   3513a:	4616      	mov	r6, r2
	errno = 0;
   3513c:	f7fb fdf6 	bl	30d2c <__errno>
   35140:	2300      	movs	r3, #0
	temp = strtol(str_buf, &end_ptr, base);
   35142:	4622      	mov	r2, r4
	errno = 0;
   35144:	6003      	str	r3, [r0, #0]
	temp = strtol(str_buf, &end_ptr, base);
   35146:	a901      	add	r1, sp, #4
   35148:	4628      	mov	r0, r5
   3514a:	f7f7 fecd 	bl	2cee8 <strtol>
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   3514e:	9b01      	ldr	r3, [sp, #4]
	temp = strtol(str_buf, &end_ptr, base);
   35150:	4604      	mov	r4, r0
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   35152:	42ab      	cmp	r3, r5
   35154:	d103      	bne.n	3515e <string_to_int+0x2a>
		return -ENODATA;
   35156:	f06f 003c 	mvn.w	r0, #60	; 0x3c
}
   3515a:	b002      	add	sp, #8
   3515c:	bd70      	pop	{r4, r5, r6, pc}
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   3515e:	781b      	ldrb	r3, [r3, #0]
   35160:	2b00      	cmp	r3, #0
   35162:	d1f8      	bne.n	35156 <string_to_int+0x22>
	    ((temp == LONG_MAX || temp == LONG_MIN) && errno == ERANGE)) {
   35164:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
   35168:	3b01      	subs	r3, #1
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   3516a:	3303      	adds	r3, #3
   3516c:	d802      	bhi.n	35174 <string_to_int+0x40>
	return 0;
   3516e:	2000      	movs	r0, #0
	*output = temp;
   35170:	6034      	str	r4, [r6, #0]
	return 0;
   35172:	e7f2      	b.n	3515a <string_to_int+0x26>
	    ((temp == LONG_MAX || temp == LONG_MIN) && errno == ERANGE)) {
   35174:	f7fb fdda 	bl	30d2c <__errno>
   35178:	6803      	ldr	r3, [r0, #0]
   3517a:	2b22      	cmp	r3, #34	; 0x22
   3517c:	d1f7      	bne.n	3516e <string_to_int+0x3a>
   3517e:	e7ea      	b.n	35156 <string_to_int+0x22>

00035180 <string_param_to_int.constprop.0>:
static int string_param_to_int(struct at_param_list *resp_list,
   35180:	b530      	push	{r4, r5, lr}
	size_t len = sizeof(str_buf);
   35182:	2510      	movs	r5, #16
static int string_param_to_int(struct at_param_list *resp_list,
   35184:	b087      	sub	sp, #28
   35186:	4614      	mov	r4, r2
	err = at_params_string_get(resp_list, idx, str_buf, &len);
   35188:	ab01      	add	r3, sp, #4
   3518a:	aa02      	add	r2, sp, #8
	size_t len = sizeof(str_buf);
   3518c:	9501      	str	r5, [sp, #4]
	err = at_params_string_get(resp_list, idx, str_buf, &len);
   3518e:	f7ff ff73 	bl	35078 <at_params_string_get>
	if (err) {
   35192:	b968      	cbnz	r0, 351b0 <string_param_to_int.constprop.0+0x30>
	str_buf[len] = '\0';
   35194:	9b01      	ldr	r3, [sp, #4]
	if (string_to_int(str_buf, base, output)) {
   35196:	4622      	mov	r2, r4
	str_buf[len] = '\0';
   35198:	3318      	adds	r3, #24
   3519a:	446b      	add	r3, sp
   3519c:	f803 0c10 	strb.w	r0, [r3, #-16]
	if (string_to_int(str_buf, base, output)) {
   351a0:	4629      	mov	r1, r5
   351a2:	a802      	add	r0, sp, #8
   351a4:	f7ff ffc6 	bl	35134 <string_to_int>
		return -ENODATA;
   351a8:	2800      	cmp	r0, #0
   351aa:	bf18      	it	ne
   351ac:	f06f 003c 	mvnne.w	r0, #60	; 0x3c
}
   351b0:	b007      	add	sp, #28
   351b2:	bd30      	pop	{r4, r5, pc}

000351b4 <on_modem_shutdown>:

static void on_modem_shutdown(void *ctx)
{
	(void)lte_lc_deinit();
   351b4:	f7ef b9ba 	b.w	2452c <lte_lc_deinit>

000351b8 <z_log_msg_static_create.constprop.0>:
   351b8:	2300      	movs	r3, #0
   351ba:	f7db b83b 	b.w	10234 <z_impl_z_log_msg_static_create>

000351be <on_modem_lib_init>:
	if (ret != 0) {
   351be:	b908      	cbnz	r0, 351c4 <on_modem_lib_init+0x6>
   351c0:	f7f0 bad0 	b.w	25764 <on_modem_lib_init.part.0>
}
   351c4:	4770      	bx	lr

000351c6 <ns_interface_init>:

	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
		"TF-M NS interface init failed");

	return 0;
}
   351c6:	2000      	movs	r0, #0
   351c8:	4770      	bx	lr

000351ca <psa_crypto_init>:
}
   351ca:	2000      	movs	r0, #0
   351cc:	4770      	bx	lr

000351ce <tfm_platform_mem_read>:
#include <tfm_platform_api.h>
#include <tfm_ioctl_core_api.h>

enum tfm_platform_err_t tfm_platform_mem_read(void *destination, uint32_t addr,
					      size_t len, uint32_t *result)
{
   351ce:	b510      	push	{r4, lr}
   351d0:	b088      	sub	sp, #32
   351d2:	461c      	mov	r4, r3
	psa_invec in_vec;
	psa_outvec out_vec;
	struct tfm_read_service_args_t args;
	struct tfm_read_service_out_t out;

	in_vec.base = (const void *)&args;
   351d4:	ab05      	add	r3, sp, #20
   351d6:	9301      	str	r3, [sp, #4]
	in_vec.len = sizeof(args);
   351d8:	230c      	movs	r3, #12
   351da:	9302      	str	r3, [sp, #8]

	out_vec.base = (void *)&out;
	out_vec.len = sizeof(out);
   351dc:	2304      	movs	r3, #4

	args.destination = destination;
	args.addr = addr;
	args.len = len;
   351de:	e9cd 1206 	strd	r1, r2, [sp, #24]
	args.destination = destination;
   351e2:	e9cd 3004 	strd	r3, r0, [sp, #16]

	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_READ_SERVICE, &in_vec,
   351e6:	eb0d 0103 	add.w	r1, sp, r3
   351ea:	aa03      	add	r2, sp, #12
   351ec:	2000      	movs	r0, #0
	out_vec.base = (void *)&out;
   351ee:	f8cd d00c 	str.w	sp, [sp, #12]
	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_READ_SERVICE, &in_vec,
   351f2:	f7f0 fb23 	bl	2583c <tfm_platform_ioctl>
				 &out_vec);

	*result = out.result;
   351f6:	9b00      	ldr	r3, [sp, #0]
   351f8:	6023      	str	r3, [r4, #0]

	return ret;
}
   351fa:	b008      	add	sp, #32
   351fc:	bd10      	pop	{r4, pc}

000351fe <SystemInit>:
    #if (__FPU_USED == 1)
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif
}
   351fe:	4770      	bx	lr

00035200 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   35200:	4700      	bx	r0

00035202 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   35202:	f001 b865 	b.w	362d0 <z_impl_k_busy_wait>

00035206 <nrfx_flag32_is_allocated>:
    return (mask & NRFX_BIT(bitpos)) ? false : true;
   35206:	40c8      	lsrs	r0, r1
   35208:	43c0      	mvns	r0, r0
}
   3520a:	f000 0001 	and.w	r0, r0, #1
   3520e:	4770      	bx	lr

00035210 <nrf_gpio_pin_present_check>:
    switch (port)
   35210:	0943      	lsrs	r3, r0, #5
   35212:	bf0c      	ite	eq
   35214:	f04f 33ff 	moveq.w	r3, #4294967295
   35218:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   3521a:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   3521e:	fa23 f000 	lsr.w	r0, r3, r0
}
   35222:	f000 0001 	and.w	r0, r0, #1
   35226:	4770      	bx	lr

00035228 <pin_is_task_output>:
{
   35228:	b508      	push	{r3, lr}
   3522a:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   3522c:	f7f0 fd46 	bl	25cbc <pin_is_output>
   35230:	b110      	cbz	r0, 35238 <pin_is_task_output+0x10>
   35232:	4610      	mov	r0, r2
   35234:	f7f0 fd2c 	bl	25c90 <pin_in_use_by_te>
}
   35238:	f000 0001 	and.w	r0, r0, #1
   3523c:	bd08      	pop	{r3, pc}

0003523e <nrf_gpio_reconfigure>:
{
   3523e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   35242:	4617      	mov	r7, r2
   35244:	e9dd 5808 	ldrd	r5, r8, [sp, #32]
   35248:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3524a:	a801      	add	r0, sp, #4
{
   3524c:	460c      	mov	r4, r1
   3524e:	461e      	mov	r6, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   35250:	f7f0 fdb8 	bl	25dc4 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   35254:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   35256:	1e39      	subs	r1, r7, #0
   35258:	bf18      	it	ne
   3525a:	2101      	movne	r1, #1
   3525c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   35260:	1e23      	subs	r3, r4, #0
   35262:	bf18      	it	ne
   35264:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   35266:	2e00      	cmp	r6, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   35268:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   3526c:	bf14      	ite	ne
   3526e:	210c      	movne	r1, #12
   35270:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   35272:	2d00      	cmp	r5, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   35274:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   35278:	bf14      	ite	ne
   3527a:	f44f 61e0 	movne.w	r1, #1792	; 0x700
   3527e:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   35280:	f1b8 0f00 	cmp.w	r8, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   35284:	ea43 0301 	orr.w	r3, r3, r1
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   35288:	bf14      	ite	ne
   3528a:	f44f 3140 	movne.w	r1, #196608	; 0x30000
   3528e:	2100      	moveq	r1, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
   35290:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   35294:	430b      	orrs	r3, r1
    cnf &= ~to_update;
   35296:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   3529a:	b104      	cbz	r4, 3529e <nrf_gpio_reconfigure+0x60>
   3529c:	7824      	ldrb	r4, [r4, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   3529e:	b10f      	cbz	r7, 352a4 <nrf_gpio_reconfigure+0x66>
   352a0:	783f      	ldrb	r7, [r7, #0]
   352a2:	007f      	lsls	r7, r7, #1
   352a4:	431c      	orrs	r4, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   352a6:	b10e      	cbz	r6, 352ac <nrf_gpio_reconfigure+0x6e>
   352a8:	7836      	ldrb	r6, [r6, #0]
   352aa:	00b6      	lsls	r6, r6, #2
   352ac:	433c      	orrs	r4, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   352ae:	b18d      	cbz	r5, 352d4 <nrf_gpio_reconfigure+0x96>
   352b0:	7829      	ldrb	r1, [r5, #0]
   352b2:	0209      	lsls	r1, r1, #8
   352b4:	4334      	orrs	r4, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   352b6:	f1b8 0f00 	cmp.w	r8, #0
   352ba:	d003      	beq.n	352c4 <nrf_gpio_reconfigure+0x86>
   352bc:	f898 8000 	ldrb.w	r8, [r8]
   352c0:	ea4f 4808 	mov.w	r8, r8, lsl #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   352c4:	4321      	orrs	r1, r4
   352c6:	ea41 0108 	orr.w	r1, r1, r8
    reg->PIN_CNF[pin_number] = cnf;
   352ca:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
}
   352ce:	b002      	add	sp, #8
   352d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   352d4:	4629      	mov	r1, r5
   352d6:	e7ed      	b.n	352b4 <nrf_gpio_reconfigure+0x76>

000352d8 <nrf_gpio_cfg_sense_set>:
{
   352d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   352da:	f10d 030f 	add.w	r3, sp, #15
   352de:	9301      	str	r3, [sp, #4]
   352e0:	2300      	movs	r3, #0
{
   352e2:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   352e6:	461a      	mov	r2, r3
   352e8:	4619      	mov	r1, r3
   352ea:	9300      	str	r3, [sp, #0]
   352ec:	f7ff ffa7 	bl	3523e <nrf_gpio_reconfigure>
}
   352f0:	b005      	add	sp, #20
   352f2:	f85d fb04 	ldr.w	pc, [sp], #4

000352f6 <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   352f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   352fa:	4770      	bx	lr

000352fc <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   352fc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   35300:	4770      	bx	lr

00035302 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   35302:	f44f 7080 	mov.w	r0, #256	; 0x100
   35306:	4770      	bx	lr

00035308 <rpc_handle_ctrl_message>:
   35308:	2902      	cmp	r1, #2
   3530a:	b510      	push	{r4, lr}
   3530c:	4604      	mov	r4, r0
   3530e:	d005      	beq.n	3531c <rpc_handle_ctrl_message+0x14>
   35310:	2904      	cmp	r1, #4
   35312:	d001      	beq.n	35318 <rpc_handle_ctrl_message+0x10>
   35314:	2901      	cmp	r1, #1
   35316:	d107      	bne.n	35328 <rpc_handle_ctrl_message+0x20>
   35318:	2000      	movs	r0, #0
   3531a:	bd10      	pop	{r4, pc}
   3531c:	6880      	ldr	r0, [r0, #8]
   3531e:	2800      	cmp	r0, #0
   35320:	d0fa      	beq.n	35318 <rpc_handle_ctrl_message+0x10>
   35322:	f7ec fac1 	bl	218a8 <nrf_modem_os_shm_tx_free>
   35326:	e7f7      	b.n	35318 <rpc_handle_ctrl_message+0x10>
   35328:	6880      	ldr	r0, [r0, #8]
   3532a:	b108      	cbz	r0, 35330 <rpc_handle_ctrl_message+0x28>
   3532c:	f7ec fabc 	bl	218a8 <nrf_modem_os_shm_tx_free>
   35330:	4620      	mov	r0, r4
   35332:	f7f1 fbb1 	bl	26a98 <rpc_transport_msg_rx_free>
   35336:	e7ef      	b.n	35318 <rpc_handle_ctrl_message+0x10>

00035338 <rpc_init>:
   35338:	f7f1 bb9c 	b.w	26a74 <rpc_transport_init>

0003533c <rpc_list_preambles_init>:
   3533c:	2200      	movs	r2, #0
   3533e:	b510      	push	{r4, lr}
   35340:	6804      	ldr	r4, [r0, #0]
   35342:	4294      	cmp	r4, r2
   35344:	d100      	bne.n	35348 <rpc_list_preambles_init+0xc>
   35346:	bd10      	pop	{r4, pc}
   35348:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   3534c:	684b      	ldr	r3, [r1, #4]
   3534e:	3201      	adds	r2, #1
   35350:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   35354:	f043 0303 	orr.w	r3, r3, #3
   35358:	604b      	str	r3, [r1, #4]
   3535a:	e7f2      	b.n	35342 <rpc_list_preambles_init+0x6>

0003535c <rpc_transport_ipc_data_rx_resume>:
   3535c:	2004      	movs	r0, #4
   3535e:	f7f1 b923 	b.w	265a8 <nrfx_ipc_receive_event_enable>

00035362 <rpc_transport_ipc_data_rx_suspend>:
   35362:	2004      	movs	r0, #4
   35364:	f7f1 b93e 	b.w	265e4 <nrfx_ipc_receive_event_disable>

00035368 <rpc_transport_ipc_shutdown>:
   35368:	f7f1 b8dc 	b.w	26524 <nrfx_ipc_uninit>

0003536c <rpc_transport_ipc_msg_alloc>:
   3536c:	b538      	push	{r3, r4, r5, lr}
   3536e:	4604      	mov	r4, r0
   35370:	2500      	movs	r5, #0
   35372:	1d03      	adds	r3, r0, #4
   35374:	6822      	ldr	r2, [r4, #0]
   35376:	42aa      	cmp	r2, r5
   35378:	d801      	bhi.n	3537e <rpc_transport_ipc_msg_alloc+0x12>
   3537a:	2300      	movs	r3, #0
   3537c:	e019      	b.n	353b2 <rpc_transport_ipc_msg_alloc+0x46>
   3537e:	f04f 0200 	mov.w	r2, #0
   35382:	e8d3 0fcf 	ldaexb	r0, [r3]
   35386:	2803      	cmp	r0, #3
   35388:	d104      	bne.n	35394 <rpc_transport_ipc_msg_alloc+0x28>
   3538a:	e8c3 2fcc 	stlexb	ip, r2, [r3]
   3538e:	f1bc 0f00 	cmp.w	ip, #0
   35392:	d1f6      	bne.n	35382 <rpc_transport_ipc_msg_alloc+0x16>
   35394:	d002      	beq.n	3539c <rpc_transport_ipc_msg_alloc+0x30>
   35396:	3308      	adds	r3, #8
   35398:	3501      	adds	r5, #1
   3539a:	e7eb      	b.n	35374 <rpc_transport_ipc_msg_alloc+0x8>
   3539c:	eb01 1385 	add.w	r3, r1, r5, lsl #6
   353a0:	4618      	mov	r0, r3
   353a2:	2240      	movs	r2, #64	; 0x40
   353a4:	2100      	movs	r1, #0
   353a6:	f001 f8df 	bl	36568 <memset>
   353aa:	4603      	mov	r3, r0
   353ac:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   353b0:	60a0      	str	r0, [r4, #8]
   353b2:	4618      	mov	r0, r3
   353b4:	bd38      	pop	{r3, r4, r5, pc}

000353b6 <rpc_client_msg_from_rpc_msg_get>:
   353b6:	3008      	adds	r0, #8
   353b8:	4770      	bx	lr

000353ba <rpc_client_msg_alloc>:
   353ba:	b538      	push	{r3, r4, r5, lr}
   353bc:	4605      	mov	r5, r0
   353be:	b920      	cbnz	r0, 353ca <rpc_client_msg_alloc+0x10>
   353c0:	f7f1 fb5e 	bl	26a80 <rpc_transport_msg_alloc>
   353c4:	b980      	cbnz	r0, 353e8 <rpc_client_msg_alloc+0x2e>
   353c6:	2000      	movs	r0, #0
   353c8:	bd38      	pop	{r3, r4, r5, pc}
   353ca:	f7ec fa65 	bl	21898 <nrf_modem_os_shm_tx_alloc>
   353ce:	4604      	mov	r4, r0
   353d0:	2800      	cmp	r0, #0
   353d2:	d0f8      	beq.n	353c6 <rpc_client_msg_alloc+0xc>
   353d4:	f7f1 fb54 	bl	26a80 <rpc_transport_msg_alloc>
   353d8:	b938      	cbnz	r0, 353ea <rpc_client_msg_alloc+0x30>
   353da:	4620      	mov	r0, r4
   353dc:	f7ec fa64 	bl	218a8 <nrf_modem_os_shm_tx_free>
   353e0:	2001      	movs	r0, #1
   353e2:	f7ec fa2f 	bl	21844 <nrf_modem_os_event_notify>
   353e6:	e7ee      	b.n	353c6 <rpc_client_msg_alloc+0xc>
   353e8:	462c      	mov	r4, r5
   353ea:	60c5      	str	r5, [r0, #12]
   353ec:	f840 4f08 	str.w	r4, [r0, #8]!
   353f0:	e7ea      	b.n	353c8 <rpc_client_msg_alloc+0xe>

000353f2 <rpc_client_msg_send>:
   353f2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   353f6:	4610      	mov	r0, r2
   353f8:	f840 1d08 	str.w	r1, [r0, #-8]!
   353fc:	f7f1 bb58 	b.w	26ab0 <rpc_transport_msg_send>

00035400 <rpc_client_msg_rx_free>:
   35400:	3808      	subs	r0, #8
   35402:	f7f1 bb49 	b.w	26a98 <rpc_transport_msg_rx_free>

00035406 <rpc_client_msg_data_rx_free>:
   35406:	f7f1 bb4d 	b.w	26aa4 <rpc_transport_msg_data_rx_free>

0003540a <rpc_client_msg_data_tx_size>:
   3540a:	f7f1 bb3f 	b.w	26a8c <rpc_transport_msg_data_tx_size>

0003540e <rpc_client_msg_data_tx_alloc>:
   3540e:	f7ec ba43 	b.w	21898 <nrf_modem_os_shm_tx_alloc>

00035412 <rpc_client_msg_data_tx_free>:
   35412:	b508      	push	{r3, lr}
   35414:	f7ec fa48 	bl	218a8 <nrf_modem_os_shm_tx_free>
   35418:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   3541c:	2001      	movs	r0, #1
   3541e:	f7ec ba11 	b.w	21844 <nrf_modem_os_event_notify>

00035422 <sockaddr_init>:
   35422:	2904      	cmp	r1, #4
   35424:	b570      	push	{r4, r5, r6, lr}
   35426:	4605      	mov	r5, r0
   35428:	4616      	mov	r6, r2
   3542a:	d003      	beq.n	35434 <sockaddr_init+0x12>
   3542c:	2910      	cmp	r1, #16
   3542e:	d015      	beq.n	3545c <sockaddr_init+0x3a>
   35430:	2400      	movs	r4, #0
   35432:	e011      	b.n	35458 <sockaddr_init+0x36>
   35434:	2010      	movs	r0, #16
   35436:	f7ec fa21 	bl	2187c <nrf_modem_os_alloc>
   3543a:	4604      	mov	r4, r0
   3543c:	2800      	cmp	r0, #0
   3543e:	d0f7      	beq.n	35430 <sockaddr_init+0xe>
   35440:	220f      	movs	r2, #15
   35442:	2100      	movs	r1, #0
   35444:	3001      	adds	r0, #1
   35446:	f001 f88f 	bl	36568 <memset>
   3544a:	2310      	movs	r3, #16
   3544c:	7023      	strb	r3, [r4, #0]
   3544e:	2301      	movs	r3, #1
   35450:	8126      	strh	r6, [r4, #8]
   35452:	6063      	str	r3, [r4, #4]
   35454:	682b      	ldr	r3, [r5, #0]
   35456:	60e3      	str	r3, [r4, #12]
   35458:	4620      	mov	r0, r4
   3545a:	bd70      	pop	{r4, r5, r6, pc}
   3545c:	2024      	movs	r0, #36	; 0x24
   3545e:	f7ec fa0d 	bl	2187c <nrf_modem_os_alloc>
   35462:	4604      	mov	r4, r0
   35464:	2800      	cmp	r0, #0
   35466:	d0e3      	beq.n	35430 <sockaddr_init+0xe>
   35468:	2223      	movs	r2, #35	; 0x23
   3546a:	2100      	movs	r1, #0
   3546c:	3001      	adds	r0, #1
   3546e:	f001 f87b 	bl	36568 <memset>
   35472:	2324      	movs	r3, #36	; 0x24
   35474:	7023      	strb	r3, [r4, #0]
   35476:	2302      	movs	r3, #2
   35478:	4628      	mov	r0, r5
   3547a:	6063      	str	r3, [r4, #4]
   3547c:	8126      	strh	r6, [r4, #8]
   3547e:	f104 0310 	add.w	r3, r4, #16
   35482:	f105 0210 	add.w	r2, r5, #16
   35486:	f850 1b04 	ldr.w	r1, [r0], #4
   3548a:	4290      	cmp	r0, r2
   3548c:	f843 1b04 	str.w	r1, [r3], #4
   35490:	d1f9      	bne.n	35486 <sockaddr_init+0x64>
   35492:	e7e1      	b.n	35458 <sockaddr_init+0x36>

00035494 <sock_pollcb>:
   35494:	b537      	push	{r0, r1, r2, r4, r5, lr}
   35496:	2500      	movs	r5, #0
   35498:	6803      	ldr	r3, [r0, #0]
   3549a:	4604      	mov	r4, r0
   3549c:	9300      	str	r3, [sp, #0]
   3549e:	8f03      	ldrh	r3, [r0, #56]	; 0x38
   354a0:	4668      	mov	r0, sp
   354a2:	f8ad 5006 	strh.w	r5, [sp, #6]
   354a6:	f8ad 3004 	strh.w	r3, [sp, #4]
   354aa:	f000 fccb 	bl	35e44 <nrf_poll_one>
   354ae:	b138      	cbz	r0, 354c0 <sock_pollcb+0x2c>
   354b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   354b2:	4668      	mov	r0, sp
   354b4:	4798      	blx	r3
   354b6:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   354ba:	b10b      	cbz	r3, 354c0 <sock_pollcb+0x2c>
   354bc:	6365      	str	r5, [r4, #52]	; 0x34
   354be:	63a5      	str	r5, [r4, #56]	; 0x38
   354c0:	b003      	add	sp, #12
   354c2:	bd30      	pop	{r4, r5, pc}

000354c4 <sock_has_pkt>:
   354c4:	6840      	ldr	r0, [r0, #4]
   354c6:	3800      	subs	r0, #0
   354c8:	bf18      	it	ne
   354ca:	2001      	movne	r0, #1
   354cc:	4770      	bx	lr

000354ce <sock_pkt_append>:
   354ce:	2300      	movs	r3, #0
   354d0:	600b      	str	r3, [r1, #0]
   354d2:	6883      	ldr	r3, [r0, #8]
   354d4:	b913      	cbnz	r3, 354dc <sock_pkt_append+0xe>
   354d6:	e9c0 1101 	strd	r1, r1, [r0, #4]
   354da:	4770      	bx	lr
   354dc:	6019      	str	r1, [r3, #0]
   354de:	6081      	str	r1, [r0, #8]
   354e0:	4770      	bx	lr

000354e2 <sock_pkt_remove>:
   354e2:	b538      	push	{r3, r4, r5, lr}
   354e4:	4605      	mov	r5, r0
   354e6:	460c      	mov	r4, r1
   354e8:	f7f1 fae8 	bl	26abc <rpc_transport_data_rx_suspend>
   354ec:	68aa      	ldr	r2, [r5, #8]
   354ee:	6823      	ldr	r3, [r4, #0]
   354f0:	4294      	cmp	r4, r2
   354f2:	606b      	str	r3, [r5, #4]
   354f4:	bf08      	it	eq
   354f6:	60ab      	streq	r3, [r5, #8]
   354f8:	2300      	movs	r3, #0
   354fa:	4620      	mov	r0, r4
   354fc:	6023      	str	r3, [r4, #0]
   354fe:	f000 f904 	bl	3570a <pkt_free>
   35502:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   35506:	f7f1 badf 	b.w	26ac8 <rpc_transport_data_rx_resume>

0003550a <sock_pkt_peek_head>:
   3550a:	6840      	ldr	r0, [r0, #4]
   3550c:	4770      	bx	lr

0003550e <sock_is_stream>:
   3550e:	6900      	ldr	r0, [r0, #16]
   35510:	1e43      	subs	r3, r0, #1
   35512:	4258      	negs	r0, r3
   35514:	4158      	adcs	r0, r3
   35516:	4770      	bx	lr

00035518 <sock_is_datagram>:
   35518:	6900      	ldr	r0, [r0, #16]
   3551a:	1e83      	subs	r3, r0, #2
   3551c:	4258      	negs	r0, r3
   3551e:	4158      	adcs	r0, r3
   35520:	4770      	bx	lr

00035522 <sock_is_raw>:
   35522:	6900      	ldr	r0, [r0, #16]
   35524:	1ec3      	subs	r3, r0, #3
   35526:	4258      	negs	r0, r3
   35528:	4158      	adcs	r0, r3
   3552a:	4770      	bx	lr

0003552c <sock_proto_is_secure>:
   3552c:	6940      	ldr	r0, [r0, #20]
   3552e:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   35532:	d005      	beq.n	35540 <sock_proto_is_secure+0x14>
   35534:	f240 1311 	movw	r3, #273	; 0x111
   35538:	1ac3      	subs	r3, r0, r3
   3553a:	4258      	negs	r0, r3
   3553c:	4158      	adcs	r0, r3
   3553e:	4770      	bx	lr
   35540:	2001      	movs	r0, #1
   35542:	4770      	bx	lr

00035544 <sock_is_connecting>:
   35544:	7f00      	ldrb	r0, [r0, #28]
   35546:	f3c0 0080 	ubfx	r0, r0, #2, #1
   3554a:	4770      	bx	lr

0003554c <sock_is_connected>:
   3554c:	7f00      	ldrb	r0, [r0, #28]
   3554e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   35552:	4770      	bx	lr

00035554 <sock_is_attaching>:
   35554:	7f00      	ldrb	r0, [r0, #28]
   35556:	f3c0 1000 	ubfx	r0, r0, #4, #1
   3555a:	4770      	bx	lr

0003555c <sock_is_nonblock>:
   3555c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   3555e:	f000 0001 	and.w	r0, r0, #1
   35562:	4770      	bx	lr

00035564 <sock_is_closed>:
   35564:	7f00      	ldrb	r0, [r0, #28]
   35566:	f000 0001 	and.w	r0, r0, #1
   3556a:	4770      	bx	lr

0003556c <sock_is_local_closed>:
   3556c:	7f00      	ldrb	r0, [r0, #28]
   3556e:	f3c0 0040 	ubfx	r0, r0, #1, #1
   35572:	4770      	bx	lr

00035574 <sock_is_eof>:
   35574:	6903      	ldr	r3, [r0, #16]
   35576:	2b01      	cmp	r3, #1
   35578:	d105      	bne.n	35586 <sock_is_eof+0x12>
   3557a:	6980      	ldr	r0, [r0, #24]
   3557c:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
   35580:	4258      	negs	r0, r3
   35582:	4158      	adcs	r0, r3
   35584:	4770      	bx	lr
   35586:	2000      	movs	r0, #0
   35588:	4770      	bx	lr

0003558a <sock_has_stream_error>:
   3558a:	7f00      	ldrb	r0, [r0, #28]
   3558c:	09c0      	lsrs	r0, r0, #7
   3558e:	4770      	bx	lr

00035590 <sock_has_error>:
   35590:	6983      	ldr	r3, [r0, #24]
   35592:	f033 0380 	bics.w	r3, r3, #128	; 0x80
   35596:	bf14      	ite	ne
   35598:	2001      	movne	r0, #1
   3559a:	2000      	moveq	r0, #0
   3559c:	4770      	bx	lr

0003559e <sock_has_flow_control>:
   3559e:	7f00      	ldrb	r0, [r0, #28]
   355a0:	f3c0 1080 	ubfx	r0, r0, #6, #1
   355a4:	4770      	bx	lr

000355a6 <sock_has_pollcb>:
   355a6:	6b40      	ldr	r0, [r0, #52]	; 0x34
   355a8:	3800      	subs	r0, #0
   355aa:	bf18      	it	ne
   355ac:	2001      	movne	r0, #1
   355ae:	4770      	bx	lr

000355b0 <sock_has_rai_no_data>:
   355b0:	6b00      	ldr	r0, [r0, #48]	; 0x30
   355b2:	f1a0 0332 	sub.w	r3, r0, #50	; 0x32
   355b6:	4258      	negs	r0, r3
   355b8:	4158      	adcs	r0, r3
   355ba:	4770      	bx	lr

000355bc <sock_can_read>:
   355bc:	6840      	ldr	r0, [r0, #4]
   355be:	3800      	subs	r0, #0
   355c0:	bf18      	it	ne
   355c2:	2001      	movne	r0, #1
   355c4:	4770      	bx	lr

000355c6 <sock_can_accept>:
   355c6:	7f40      	ldrb	r0, [r0, #29]
   355c8:	3800      	subs	r0, #0
   355ca:	bf18      	it	ne
   355cc:	2001      	movne	r0, #1
   355ce:	4770      	bx	lr

000355d0 <sock_can_send>:
   355d0:	b510      	push	{r4, lr}
   355d2:	4602      	mov	r2, r0
   355d4:	6904      	ldr	r4, [r0, #16]
   355d6:	f7ff ffa9 	bl	3552c <sock_proto_is_secure>
   355da:	2c01      	cmp	r4, #1
   355dc:	4601      	mov	r1, r0
   355de:	7f13      	ldrb	r3, [r2, #28]
   355e0:	d103      	bne.n	355ea <sock_can_send+0x1a>
   355e2:	071c      	lsls	r4, r3, #28
   355e4:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   355e8:	d50b      	bpl.n	35602 <sock_can_send+0x32>
   355ea:	b931      	cbnz	r1, 355fa <sock_can_send+0x2a>
   355ec:	07d9      	lsls	r1, r3, #31
   355ee:	d40b      	bmi.n	35608 <sock_can_send+0x38>
   355f0:	f3c3 1380 	ubfx	r3, r3, #6, #1
   355f4:	f1c3 0001 	rsb	r0, r3, #1
   355f8:	e003      	b.n	35602 <sock_can_send+0x32>
   355fa:	069a      	lsls	r2, r3, #26
   355fc:	f3c3 1040 	ubfx	r0, r3, #5, #1
   35600:	d4f4      	bmi.n	355ec <sock_can_send+0x1c>
   35602:	f000 0001 	and.w	r0, r0, #1
   35606:	bd10      	pop	{r4, pc}
   35608:	2000      	movs	r0, #0
   3560a:	e7fa      	b.n	35602 <sock_can_send+0x32>

0003560c <sock_rcvtimeo_ms_get>:
   3560c:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
   35610:	ea53 0102 	orrs.w	r1, r3, r2
   35614:	d009      	beq.n	3562a <sock_rcvtimeo_ms_get+0x1e>
   35616:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   3561a:	fbb3 f0f1 	udiv	r0, r3, r1
   3561e:	fb01 0002 	mla	r0, r1, r2, r0
   35622:	2801      	cmp	r0, #1
   35624:	bfb8      	it	lt
   35626:	2001      	movlt	r0, #1
   35628:	4770      	bx	lr
   3562a:	f04f 30ff 	mov.w	r0, #4294967295
   3562e:	4770      	bx	lr

00035630 <sock_sndtimeo_ms_get>:
   35630:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   35634:	ea53 0102 	orrs.w	r1, r3, r2
   35638:	d009      	beq.n	3564e <sock_sndtimeo_ms_get+0x1e>
   3563a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   3563e:	fbb3 f0f1 	udiv	r0, r3, r1
   35642:	fb01 0002 	mla	r0, r1, r2, r0
   35646:	2801      	cmp	r0, #1
   35648:	bfb8      	it	lt
   3564a:	2001      	movlt	r0, #1
   3564c:	4770      	bx	lr
   3564e:	f04f 30ff 	mov.w	r0, #4294967295
   35652:	4770      	bx	lr

00035654 <sock_family_is_valid>:
   35654:	3801      	subs	r0, #1
   35656:	2802      	cmp	r0, #2
   35658:	bf8c      	ite	hi
   3565a:	2000      	movhi	r0, #0
   3565c:	2001      	movls	r0, #1
   3565e:	4770      	bx	lr

00035660 <sock_type_is_valid>:
   35660:	3801      	subs	r0, #1
   35662:	2802      	cmp	r0, #2
   35664:	bf8c      	ite	hi
   35666:	2000      	movhi	r0, #0
   35668:	2001      	movls	r0, #1
   3566a:	4770      	bx	lr

0003566c <sock_proto_supports_type>:
   3566c:	2903      	cmp	r1, #3
   3566e:	d015      	beq.n	3569c <sock_proto_supports_type+0x30>
   35670:	2811      	cmp	r0, #17
   35672:	d00c      	beq.n	3568e <sock_proto_supports_type+0x22>
   35674:	dc04      	bgt.n	35680 <sock_proto_supports_type+0x14>
   35676:	b188      	cbz	r0, 3569c <sock_proto_supports_type+0x30>
   35678:	2806      	cmp	r0, #6
   3567a:	d00a      	beq.n	35692 <sock_proto_supports_type+0x26>
   3567c:	2000      	movs	r0, #0
   3567e:	4770      	bx	lr
   35680:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   35684:	d005      	beq.n	35692 <sock_proto_supports_type+0x26>
   35686:	f240 1311 	movw	r3, #273	; 0x111
   3568a:	4298      	cmp	r0, r3
   3568c:	d1f6      	bne.n	3567c <sock_proto_supports_type+0x10>
   3568e:	2902      	cmp	r1, #2
   35690:	e000      	b.n	35694 <sock_proto_supports_type+0x28>
   35692:	2901      	cmp	r1, #1
   35694:	bf14      	ite	ne
   35696:	2000      	movne	r0, #0
   35698:	2001      	moveq	r0, #1
   3569a:	4770      	bx	lr
   3569c:	2001      	movs	r0, #1
   3569e:	4770      	bx	lr

000356a0 <sock_sockaddr_len_is_valid>:
   356a0:	6843      	ldr	r3, [r0, #4]
   356a2:	2b01      	cmp	r3, #1
   356a4:	d003      	beq.n	356ae <sock_sockaddr_len_is_valid+0xe>
   356a6:	2b02      	cmp	r3, #2
   356a8:	d009      	beq.n	356be <sock_sockaddr_len_is_valid+0x1e>
   356aa:	2000      	movs	r0, #0
   356ac:	4770      	bx	lr
   356ae:	7803      	ldrb	r3, [r0, #0]
   356b0:	2b10      	cmp	r3, #16
   356b2:	d1fa      	bne.n	356aa <sock_sockaddr_len_is_valid+0xa>
   356b4:	2910      	cmp	r1, #16
   356b6:	bf14      	ite	ne
   356b8:	2000      	movne	r0, #0
   356ba:	2001      	moveq	r0, #1
   356bc:	4770      	bx	lr
   356be:	7803      	ldrb	r3, [r0, #0]
   356c0:	2b24      	cmp	r3, #36	; 0x24
   356c2:	d1f2      	bne.n	356aa <sock_sockaddr_len_is_valid+0xa>
   356c4:	2924      	cmp	r1, #36	; 0x24
   356c6:	e7f6      	b.n	356b6 <sock_sockaddr_len_is_valid+0x16>

000356c8 <sock_sockaddr_fam_is_valid>:
   356c8:	68c3      	ldr	r3, [r0, #12]
   356ca:	2b01      	cmp	r3, #1
   356cc:	d003      	beq.n	356d6 <sock_sockaddr_fam_is_valid+0xe>
   356ce:	2b02      	cmp	r3, #2
   356d0:	d007      	beq.n	356e2 <sock_sockaddr_fam_is_valid+0x1a>
   356d2:	2001      	movs	r0, #1
   356d4:	4770      	bx	lr
   356d6:	6848      	ldr	r0, [r1, #4]
   356d8:	2801      	cmp	r0, #1
   356da:	bf14      	ite	ne
   356dc:	2000      	movne	r0, #0
   356de:	2001      	moveq	r0, #1
   356e0:	4770      	bx	lr
   356e2:	6848      	ldr	r0, [r1, #4]
   356e4:	2802      	cmp	r0, #2
   356e6:	e7f8      	b.n	356da <sock_sockaddr_fam_is_valid+0x12>

000356e8 <pkt_has_next>:
   356e8:	b100      	cbz	r0, 356ec <pkt_has_next+0x4>
   356ea:	6800      	ldr	r0, [r0, #0]
   356ec:	3800      	subs	r0, #0
   356ee:	bf18      	it	ne
   356f0:	2001      	movne	r0, #1
   356f2:	4770      	bx	lr

000356f4 <pkt_peek_next>:
   356f4:	b100      	cbz	r0, 356f8 <pkt_peek_next+0x4>
   356f6:	6800      	ldr	r0, [r0, #0]
   356f8:	4770      	bx	lr

000356fa <pkt_bytes_get>:
   356fa:	8943      	ldrh	r3, [r0, #10]
   356fc:	6840      	ldr	r0, [r0, #4]
   356fe:	4418      	add	r0, r3
   35700:	4770      	bx	lr

00035702 <pkt_bytes_left>:
   35702:	8902      	ldrh	r2, [r0, #8]
   35704:	8940      	ldrh	r0, [r0, #10]
   35706:	1a10      	subs	r0, r2, r0
   35708:	4770      	bx	lr

0003570a <pkt_free>:
   3570a:	b510      	push	{r4, lr}
   3570c:	4604      	mov	r4, r0
   3570e:	6840      	ldr	r0, [r0, #4]
   35710:	f7ff fe79 	bl	35406 <rpc_client_msg_data_rx_free>
   35714:	68e0      	ldr	r0, [r4, #12]
   35716:	b108      	cbz	r0, 3571c <pkt_free+0x12>
   35718:	f7ec f8b8 	bl	2188c <nrf_modem_os_free>
   3571c:	4620      	mov	r0, r4
   3571e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   35722:	f7ec b8b3 	b.w	2188c <nrf_modem_os_free>

00035726 <pkt_flush>:
   35726:	b510      	push	{r4, lr}
   35728:	4604      	mov	r4, r0
   3572a:	6820      	ldr	r0, [r4, #0]
   3572c:	b900      	cbnz	r0, 35730 <pkt_flush+0xa>
   3572e:	bd10      	pop	{r4, pc}
   35730:	6862      	ldr	r2, [r4, #4]
   35732:	6803      	ldr	r3, [r0, #0]
   35734:	4290      	cmp	r0, r2
   35736:	6023      	str	r3, [r4, #0]
   35738:	bf08      	it	eq
   3573a:	6063      	streq	r3, [r4, #4]
   3573c:	f7ff ffe5 	bl	3570a <pkt_free>
   35740:	e7f3      	b.n	3572a <pkt_flush+0x4>

00035742 <on_conf_dnssrv_res>:
   35742:	f000 bc71 	b.w	36028 <res_forward>

00035746 <nrf_freeaddrinfo>:
   35746:	b510      	push	{r4, lr}
   35748:	4604      	mov	r4, r0
   3574a:	b160      	cbz	r0, 35766 <nrf_freeaddrinfo+0x20>
   3574c:	6940      	ldr	r0, [r0, #20]
   3574e:	b108      	cbz	r0, 35754 <nrf_freeaddrinfo+0xe>
   35750:	f7ec f89c 	bl	2188c <nrf_modem_os_free>
   35754:	69a0      	ldr	r0, [r4, #24]
   35756:	b108      	cbz	r0, 3575c <nrf_freeaddrinfo+0x16>
   35758:	f7ec f898 	bl	2188c <nrf_modem_os_free>
   3575c:	4620      	mov	r0, r4
   3575e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   35762:	f7ec b893 	b.w	2188c <nrf_modem_os_free>
   35766:	bd10      	pop	{r4, pc}

00035768 <on_getifaddrs_res>:
   35768:	f000 bc5e 	b.w	36028 <res_forward>

0003576c <nrf_socket>:
   3576c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   35770:	4681      	mov	r9, r0
   35772:	460f      	mov	r7, r1
   35774:	4616      	mov	r6, r2
   35776:	f7ff ff6d 	bl	35654 <sock_family_is_valid>
   3577a:	b930      	cbnz	r0, 3578a <nrf_socket+0x1e>
   3577c:	206a      	movs	r0, #106	; 0x6a
   3577e:	f7eb ffab 	bl	216d8 <nrf_modem_os_errno_set>
   35782:	f04f 30ff 	mov.w	r0, #4294967295
   35786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3578a:	4630      	mov	r0, r6
   3578c:	f7f1 ff2c 	bl	275e8 <sock_proto_is_valid>
   35790:	b908      	cbnz	r0, 35796 <nrf_socket+0x2a>
   35792:	207b      	movs	r0, #123	; 0x7b
   35794:	e7f3      	b.n	3577e <nrf_socket+0x12>
   35796:	4638      	mov	r0, r7
   35798:	f7ff ff62 	bl	35660 <sock_type_is_valid>
   3579c:	b908      	cbnz	r0, 357a2 <nrf_socket+0x36>
   3579e:	206b      	movs	r0, #107	; 0x6b
   357a0:	e7ed      	b.n	3577e <nrf_socket+0x12>
   357a2:	4639      	mov	r1, r7
   357a4:	4630      	mov	r0, r6
   357a6:	f7ff ff61 	bl	3566c <sock_proto_supports_type>
   357aa:	2800      	cmp	r0, #0
   357ac:	d0f7      	beq.n	3579e <nrf_socket+0x32>
   357ae:	f7f1 fe91 	bl	274d4 <sock_open>
   357b2:	4605      	mov	r5, r0
   357b4:	b908      	cbnz	r0, 357ba <nrf_socket+0x4e>
   357b6:	2017      	movs	r0, #23
   357b8:	e7e1      	b.n	3577e <nrf_socket+0x12>
   357ba:	2000      	movs	r0, #0
   357bc:	f7ff fdfd 	bl	353ba <rpc_client_msg_alloc>
   357c0:	4604      	mov	r4, r0
   357c2:	b920      	cbnz	r0, 357ce <nrf_socket+0x62>
   357c4:	6828      	ldr	r0, [r5, #0]
   357c6:	f7f1 febd 	bl	27544 <_sock_close>
   357ca:	2069      	movs	r0, #105	; 0x69
   357cc:	e7d7      	b.n	3577e <nrf_socket+0x12>
   357ce:	2300      	movs	r3, #0
   357d0:	220c      	movs	r2, #12
   357d2:	f04f 38ff 	mov.w	r8, #4294967295
   357d6:	7202      	strb	r2, [r0, #8]
   357d8:	7243      	strb	r3, [r0, #9]
   357da:	7283      	strb	r3, [r0, #10]
   357dc:	72c3      	strb	r3, [r0, #11]
   357de:	f880 8010 	strb.w	r8, [r0, #16]
   357e2:	f880 8011 	strb.w	r8, [r0, #17]
   357e6:	f880 8012 	strb.w	r8, [r0, #18]
   357ea:	f880 8013 	strb.w	r8, [r0, #19]
   357ee:	4648      	mov	r0, r9
   357f0:	f7f2 fdec 	bl	283cc <nrf_af_to_rpc_af>
   357f4:	6160      	str	r0, [r4, #20]
   357f6:	4638      	mov	r0, r7
   357f8:	f000 fb8e 	bl	35f18 <nrf_type_to_rpc_type>
   357fc:	4601      	mov	r1, r0
   357fe:	61a0      	str	r0, [r4, #24]
   35800:	4630      	mov	r0, r6
   35802:	f000 fb8a 	bl	35f1a <nrf_proto_to_rpc_proto>
   35806:	4621      	mov	r1, r4
   35808:	61e0      	str	r0, [r4, #28]
   3580a:	f247 0001 	movw	r0, #28673	; 0x7001
   3580e:	e9c5 9703 	strd	r9, r7, [r5, #12]
   35812:	616e      	str	r6, [r5, #20]
   35814:	f000 fbd8 	bl	35fc8 <req_forward>
   35818:	4604      	mov	r4, r0
   3581a:	b120      	cbz	r0, 35826 <nrf_socket+0xba>
   3581c:	4640      	mov	r0, r8
   3581e:	f7f1 fe91 	bl	27544 <_sock_close>
   35822:	4620      	mov	r0, r4
   35824:	e7ab      	b.n	3577e <nrf_socket+0x12>
   35826:	6828      	ldr	r0, [r5, #0]
   35828:	e7ad      	b.n	35786 <nrf_socket+0x1a>

0003582a <nrf_connect>:
   3582a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3582c:	4607      	mov	r7, r0
   3582e:	460d      	mov	r5, r1
   35830:	4616      	mov	r6, r2
   35832:	f7f1 fe75 	bl	27520 <sock_find>
   35836:	4604      	mov	r4, r0
   35838:	b938      	cbnz	r0, 3584a <nrf_connect+0x20>
   3583a:	2009      	movs	r0, #9
   3583c:	f7eb ff4c 	bl	216d8 <nrf_modem_os_errno_set>
   35840:	f04f 35ff 	mov.w	r5, #4294967295
   35844:	4628      	mov	r0, r5
   35846:	b003      	add	sp, #12
   35848:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3584a:	f7ff fe8b 	bl	35564 <sock_is_closed>
   3584e:	b108      	cbz	r0, 35854 <nrf_connect+0x2a>
   35850:	69a0      	ldr	r0, [r4, #24]
   35852:	e7f3      	b.n	3583c <nrf_connect+0x12>
   35854:	4620      	mov	r0, r4
   35856:	f7ff fe79 	bl	3554c <sock_is_connected>
   3585a:	b108      	cbz	r0, 35860 <nrf_connect+0x36>
   3585c:	207f      	movs	r0, #127	; 0x7f
   3585e:	e7ed      	b.n	3583c <nrf_connect+0x12>
   35860:	4620      	mov	r0, r4
   35862:	f7ff fe6f 	bl	35544 <sock_is_connecting>
   35866:	b108      	cbz	r0, 3586c <nrf_connect+0x42>
   35868:	2078      	movs	r0, #120	; 0x78
   3586a:	e7e7      	b.n	3583c <nrf_connect+0x12>
   3586c:	b90d      	cbnz	r5, 35872 <nrf_connect+0x48>
   3586e:	200e      	movs	r0, #14
   35870:	e7e4      	b.n	3583c <nrf_connect+0x12>
   35872:	4631      	mov	r1, r6
   35874:	4628      	mov	r0, r5
   35876:	f7ff ff13 	bl	356a0 <sock_sockaddr_len_is_valid>
   3587a:	b908      	cbnz	r0, 35880 <nrf_connect+0x56>
   3587c:	2016      	movs	r0, #22
   3587e:	e7dd      	b.n	3583c <nrf_connect+0x12>
   35880:	4629      	mov	r1, r5
   35882:	4620      	mov	r0, r4
   35884:	f7ff ff20 	bl	356c8 <sock_sockaddr_fam_is_valid>
   35888:	b908      	cbnz	r0, 3588e <nrf_connect+0x64>
   3588a:	206a      	movs	r0, #106	; 0x6a
   3588c:	e7d6      	b.n	3583c <nrf_connect+0x12>
   3588e:	4620      	mov	r0, r4
   35890:	f7ff fe64 	bl	3555c <sock_is_nonblock>
   35894:	4606      	mov	r6, r0
   35896:	b118      	cbz	r0, 358a0 <nrf_connect+0x76>
   35898:	6966      	ldr	r6, [r4, #20]
   3589a:	3e11      	subs	r6, #17
   3589c:	bf18      	it	ne
   3589e:	2601      	movne	r6, #1
   358a0:	2000      	movs	r0, #0
   358a2:	f7ff fd8a 	bl	353ba <rpc_client_msg_alloc>
   358a6:	4602      	mov	r2, r0
   358a8:	b908      	cbnz	r0, 358ae <nrf_connect+0x84>
   358aa:	2069      	movs	r0, #105	; 0x69
   358ac:	e7c6      	b.n	3583c <nrf_connect+0x12>
   358ae:	2300      	movs	r3, #0
   358b0:	2114      	movs	r1, #20
   358b2:	6107      	str	r7, [r0, #16]
   358b4:	7201      	strb	r1, [r0, #8]
   358b6:	7243      	strb	r3, [r0, #9]
   358b8:	7283      	strb	r3, [r0, #10]
   358ba:	72c3      	strb	r3, [r0, #11]
   358bc:	6869      	ldr	r1, [r5, #4]
   358be:	2901      	cmp	r1, #1
   358c0:	d00e      	beq.n	358e0 <nrf_connect+0xb6>
   358c2:	2902      	cmp	r1, #2
   358c4:	d014      	beq.n	358f0 <nrf_connect+0xc6>
   358c6:	7f23      	ldrb	r3, [r4, #28]
   358c8:	f247 0102 	movw	r1, #28674	; 0x7002
   358cc:	f043 0304 	orr.w	r3, r3, #4
   358d0:	7723      	strb	r3, [r4, #28]
   358d2:	2004      	movs	r0, #4
   358d4:	60d6      	str	r6, [r2, #12]
   358d6:	f7ff fd8c 	bl	353f2 <rpc_client_msg_send>
   358da:	b1ce      	cbz	r6, 35910 <nrf_connect+0xe6>
   358dc:	2077      	movs	r0, #119	; 0x77
   358de:	e7ad      	b.n	3583c <nrf_connect+0x12>
   358e0:	8929      	ldrh	r1, [r5, #8]
   358e2:	75c3      	strb	r3, [r0, #23]
   358e4:	8281      	strh	r1, [r0, #20]
   358e6:	2104      	movs	r1, #4
   358e8:	7581      	strb	r1, [r0, #22]
   358ea:	68eb      	ldr	r3, [r5, #12]
   358ec:	6183      	str	r3, [r0, #24]
   358ee:	e7ea      	b.n	358c6 <nrf_connect+0x9c>
   358f0:	8929      	ldrh	r1, [r5, #8]
   358f2:	75c3      	strb	r3, [r0, #23]
   358f4:	8281      	strh	r1, [r0, #20]
   358f6:	2110      	movs	r1, #16
   358f8:	186b      	adds	r3, r5, r1
   358fa:	7581      	strb	r1, [r0, #22]
   358fc:	3520      	adds	r5, #32
   358fe:	f100 0118 	add.w	r1, r0, #24
   35902:	f853 0b04 	ldr.w	r0, [r3], #4
   35906:	42ab      	cmp	r3, r5
   35908:	f841 0b04 	str.w	r0, [r1], #4
   3590c:	d1f9      	bne.n	35902 <nrf_connect+0xd8>
   3590e:	e7da      	b.n	358c6 <nrf_connect+0x9c>
   35910:	4620      	mov	r0, r4
   35912:	f7ff fe8d 	bl	35630 <sock_sndtimeo_ms_get>
   35916:	9001      	str	r0, [sp, #4]
   35918:	4620      	mov	r0, r4
   3591a:	f7ff fe13 	bl	35544 <sock_is_connecting>
   3591e:	b918      	cbnz	r0, 35928 <nrf_connect+0xfe>
   35920:	69a5      	ldr	r5, [r4, #24]
   35922:	b185      	cbz	r5, 35946 <nrf_connect+0x11c>
   35924:	4628      	mov	r0, r5
   35926:	e789      	b.n	3583c <nrf_connect+0x12>
   35928:	2002      	movs	r0, #2
   3592a:	a901      	add	r1, sp, #4
   3592c:	f7eb fe12 	bl	21554 <nrf_modem_os_timedwait>
   35930:	f110 0f0b 	cmn.w	r0, #11
   35934:	d005      	beq.n	35942 <nrf_connect+0x118>
   35936:	2800      	cmp	r0, #0
   35938:	d0ee      	beq.n	35918 <nrf_connect+0xee>
   3593a:	2800      	cmp	r0, #0
   3593c:	bfb8      	it	lt
   3593e:	4240      	neglt	r0, r0
   35940:	e77c      	b.n	3583c <nrf_connect+0x12>
   35942:	2074      	movs	r0, #116	; 0x74
   35944:	e77a      	b.n	3583c <nrf_connect+0x12>
   35946:	4620      	mov	r0, r4
   35948:	f7ff fdf0 	bl	3552c <sock_proto_is_secure>
   3594c:	2800      	cmp	r0, #0
   3594e:	f43f af79 	beq.w	35844 <nrf_connect+0x1a>
   35952:	4620      	mov	r0, r4
   35954:	9901      	ldr	r1, [sp, #4]
   35956:	f7f2 fcc1 	bl	282dc <tls_attach>
   3595a:	4605      	mov	r5, r0
   3595c:	e772      	b.n	35844 <nrf_connect+0x1a>

0003595e <nrf_bind>:
   3595e:	b538      	push	{r3, r4, r5, lr}
   35960:	4605      	mov	r5, r0
   35962:	460c      	mov	r4, r1
   35964:	f7f1 fddc 	bl	27520 <sock_find>
   35968:	b930      	cbnz	r0, 35978 <nrf_bind+0x1a>
   3596a:	2009      	movs	r0, #9
   3596c:	f7eb feb4 	bl	216d8 <nrf_modem_os_errno_set>
   35970:	f04f 33ff 	mov.w	r3, #4294967295
   35974:	4618      	mov	r0, r3
   35976:	bd38      	pop	{r3, r4, r5, pc}
   35978:	b90c      	cbnz	r4, 3597e <nrf_bind+0x20>
   3597a:	200e      	movs	r0, #14
   3597c:	e7f6      	b.n	3596c <nrf_bind+0xe>
   3597e:	4621      	mov	r1, r4
   35980:	f7ff fea2 	bl	356c8 <sock_sockaddr_fam_is_valid>
   35984:	b908      	cbnz	r0, 3598a <nrf_bind+0x2c>
   35986:	206a      	movs	r0, #106	; 0x6a
   35988:	e7f0      	b.n	3596c <nrf_bind+0xe>
   3598a:	2000      	movs	r0, #0
   3598c:	f7ff fd15 	bl	353ba <rpc_client_msg_alloc>
   35990:	4601      	mov	r1, r0
   35992:	b908      	cbnz	r0, 35998 <nrf_bind+0x3a>
   35994:	2069      	movs	r0, #105	; 0x69
   35996:	e7e9      	b.n	3596c <nrf_bind+0xe>
   35998:	2300      	movs	r3, #0
   3599a:	2214      	movs	r2, #20
   3599c:	6105      	str	r5, [r0, #16]
   3599e:	7202      	strb	r2, [r0, #8]
   359a0:	7243      	strb	r3, [r0, #9]
   359a2:	7283      	strb	r3, [r0, #10]
   359a4:	72c3      	strb	r3, [r0, #11]
   359a6:	6862      	ldr	r2, [r4, #4]
   359a8:	2a01      	cmp	r2, #1
   359aa:	d009      	beq.n	359c0 <nrf_bind+0x62>
   359ac:	2a02      	cmp	r2, #2
   359ae:	d00f      	beq.n	359d0 <nrf_bind+0x72>
   359b0:	f247 0005 	movw	r0, #28677	; 0x7005
   359b4:	f000 fb08 	bl	35fc8 <req_forward>
   359b8:	4603      	mov	r3, r0
   359ba:	2800      	cmp	r0, #0
   359bc:	d0da      	beq.n	35974 <nrf_bind+0x16>
   359be:	e7d5      	b.n	3596c <nrf_bind+0xe>
   359c0:	8922      	ldrh	r2, [r4, #8]
   359c2:	75c3      	strb	r3, [r0, #23]
   359c4:	8282      	strh	r2, [r0, #20]
   359c6:	2204      	movs	r2, #4
   359c8:	7582      	strb	r2, [r0, #22]
   359ca:	68e3      	ldr	r3, [r4, #12]
   359cc:	6183      	str	r3, [r0, #24]
   359ce:	e7ef      	b.n	359b0 <nrf_bind+0x52>
   359d0:	8922      	ldrh	r2, [r4, #8]
   359d2:	75c3      	strb	r3, [r0, #23]
   359d4:	8282      	strh	r2, [r0, #20]
   359d6:	2210      	movs	r2, #16
   359d8:	18a3      	adds	r3, r4, r2
   359da:	7582      	strb	r2, [r0, #22]
   359dc:	3420      	adds	r4, #32
   359de:	f100 0218 	add.w	r2, r0, #24
   359e2:	f853 0b04 	ldr.w	r0, [r3], #4
   359e6:	42a3      	cmp	r3, r4
   359e8:	f842 0b04 	str.w	r0, [r2], #4
   359ec:	d1f9      	bne.n	359e2 <nrf_bind+0x84>
   359ee:	e7df      	b.n	359b0 <nrf_bind+0x52>

000359f0 <nrf_listen>:
   359f0:	b538      	push	{r3, r4, r5, lr}
   359f2:	4605      	mov	r5, r0
   359f4:	460c      	mov	r4, r1
   359f6:	f7f1 fd93 	bl	27520 <sock_find>
   359fa:	b930      	cbnz	r0, 35a0a <nrf_listen+0x1a>
   359fc:	2009      	movs	r0, #9
   359fe:	f7eb fe6b 	bl	216d8 <nrf_modem_os_errno_set>
   35a02:	f04f 33ff 	mov.w	r3, #4294967295
   35a06:	4618      	mov	r0, r3
   35a08:	bd38      	pop	{r3, r4, r5, pc}
   35a0a:	f7ff fd80 	bl	3550e <sock_is_stream>
   35a0e:	b908      	cbnz	r0, 35a14 <nrf_listen+0x24>
   35a10:	205f      	movs	r0, #95	; 0x5f
   35a12:	e7f4      	b.n	359fe <nrf_listen+0xe>
   35a14:	2000      	movs	r0, #0
   35a16:	f7ff fcd0 	bl	353ba <rpc_client_msg_alloc>
   35a1a:	4601      	mov	r1, r0
   35a1c:	b908      	cbnz	r0, 35a22 <nrf_listen+0x32>
   35a1e:	2069      	movs	r0, #105	; 0x69
   35a20:	e7ed      	b.n	359fe <nrf_listen+0xe>
   35a22:	2300      	movs	r3, #0
   35a24:	2204      	movs	r2, #4
   35a26:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   35a2a:	7243      	strb	r3, [r0, #9]
   35a2c:	7283      	strb	r3, [r0, #10]
   35a2e:	72c3      	strb	r3, [r0, #11]
   35a30:	6105      	str	r5, [r0, #16]
   35a32:	7202      	strb	r2, [r0, #8]
   35a34:	6144      	str	r4, [r0, #20]
   35a36:	f247 0008 	movw	r0, #28680	; 0x7008
   35a3a:	f000 fac5 	bl	35fc8 <req_forward>
   35a3e:	4603      	mov	r3, r0
   35a40:	2800      	cmp	r0, #0
   35a42:	d0e0      	beq.n	35a06 <nrf_listen+0x16>
   35a44:	e7db      	b.n	359fe <nrf_listen+0xe>

00035a46 <nrf_accept>:
   35a46:	2300      	movs	r3, #0
   35a48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   35a4c:	b08d      	sub	sp, #52	; 0x34
   35a4e:	4606      	mov	r6, r0
   35a50:	4688      	mov	r8, r1
   35a52:	4614      	mov	r4, r2
   35a54:	e9cd 3301 	strd	r3, r3, [sp, #4]
   35a58:	f7f1 fd62 	bl	27520 <sock_find>
   35a5c:	4605      	mov	r5, r0
   35a5e:	b938      	cbnz	r0, 35a70 <nrf_accept+0x2a>
   35a60:	2009      	movs	r0, #9
   35a62:	f7eb fe39 	bl	216d8 <nrf_modem_os_errno_set>
   35a66:	f04f 30ff 	mov.w	r0, #4294967295
   35a6a:	b00d      	add	sp, #52	; 0x34
   35a6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   35a70:	f1b8 0f00 	cmp.w	r8, #0
   35a74:	d002      	beq.n	35a7c <nrf_accept+0x36>
   35a76:	b91c      	cbnz	r4, 35a80 <nrf_accept+0x3a>
   35a78:	200e      	movs	r0, #14
   35a7a:	e7f2      	b.n	35a62 <nrf_accept+0x1c>
   35a7c:	2c00      	cmp	r4, #0
   35a7e:	d1fb      	bne.n	35a78 <nrf_accept+0x32>
   35a80:	4628      	mov	r0, r5
   35a82:	f7ff fd44 	bl	3550e <sock_is_stream>
   35a86:	b908      	cbnz	r0, 35a8c <nrf_accept+0x46>
   35a88:	205f      	movs	r0, #95	; 0x5f
   35a8a:	e7ea      	b.n	35a62 <nrf_accept+0x1c>
   35a8c:	4628      	mov	r0, r5
   35a8e:	f7ff fd65 	bl	3555c <sock_is_nonblock>
   35a92:	b128      	cbz	r0, 35aa0 <nrf_accept+0x5a>
   35a94:	4628      	mov	r0, r5
   35a96:	f7ff fd96 	bl	355c6 <sock_can_accept>
   35a9a:	b908      	cbnz	r0, 35aa0 <nrf_accept+0x5a>
   35a9c:	200b      	movs	r0, #11
   35a9e:	e7e0      	b.n	35a62 <nrf_accept+0x1c>
   35aa0:	f7f1 fd18 	bl	274d4 <sock_open>
   35aa4:	4607      	mov	r7, r0
   35aa6:	b908      	cbnz	r0, 35aac <nrf_accept+0x66>
   35aa8:	2017      	movs	r0, #23
   35aaa:	e7da      	b.n	35a62 <nrf_accept+0x1c>
   35aac:	2000      	movs	r0, #0
   35aae:	f7ff fc84 	bl	353ba <rpc_client_msg_alloc>
   35ab2:	4605      	mov	r5, r0
   35ab4:	b920      	cbnz	r0, 35ac0 <nrf_accept+0x7a>
   35ab6:	6838      	ldr	r0, [r7, #0]
   35ab8:	f7f1 fd44 	bl	27544 <_sock_close>
   35abc:	2069      	movs	r0, #105	; 0x69
   35abe:	e7d0      	b.n	35a62 <nrf_accept+0x1c>
   35ac0:	6106      	str	r6, [r0, #16]
   35ac2:	a901      	add	r1, sp, #4
   35ac4:	9702      	str	r7, [sp, #8]
   35ac6:	f000 faab 	bl	36020 <req_cookie_set>
   35aca:	4629      	mov	r1, r5
   35acc:	f247 000c 	movw	r0, #28684	; 0x700c
   35ad0:	f000 fa7a 	bl	35fc8 <req_forward>
   35ad4:	4606      	mov	r6, r0
   35ad6:	b120      	cbz	r0, 35ae2 <nrf_accept+0x9c>
   35ad8:	6838      	ldr	r0, [r7, #0]
   35ada:	f7f1 fd33 	bl	27544 <_sock_close>
   35ade:	4630      	mov	r0, r6
   35ae0:	e7bf      	b.n	35a62 <nrf_accept+0x1c>
   35ae2:	9d01      	ldr	r5, [sp, #4]
   35ae4:	f1b8 0f00 	cmp.w	r8, #0
   35ae8:	d006      	beq.n	35af8 <nrf_accept+0xb2>
   35aea:	b12c      	cbz	r4, 35af8 <nrf_accept+0xb2>
   35aec:	8beb      	ldrh	r3, [r5, #30]
   35aee:	2b04      	cmp	r3, #4
   35af0:	d007      	beq.n	35b02 <nrf_accept+0xbc>
   35af2:	2b10      	cmp	r3, #16
   35af4:	d01e      	beq.n	35b34 <nrf_accept+0xee>
   35af6:	6026      	str	r6, [r4, #0]
   35af8:	4628      	mov	r0, r5
   35afa:	f7ff fc81 	bl	35400 <rpc_client_msg_rx_free>
   35afe:	6838      	ldr	r0, [r7, #0]
   35b00:	e7b3      	b.n	35a6a <nrf_accept+0x24>
   35b02:	2310      	movs	r3, #16
   35b04:	9003      	str	r0, [sp, #12]
   35b06:	f88d 300c 	strb.w	r3, [sp, #12]
   35b0a:	2301      	movs	r3, #1
   35b0c:	6826      	ldr	r6, [r4, #0]
   35b0e:	9005      	str	r0, [sp, #20]
   35b10:	2e10      	cmp	r6, #16
   35b12:	bf28      	it	cs
   35b14:	2610      	movcs	r6, #16
   35b16:	9304      	str	r3, [sp, #16]
   35b18:	7f2b      	ldrb	r3, [r5, #28]
   35b1a:	7f6a      	ldrb	r2, [r5, #29]
   35b1c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   35b20:	f8ad 3014 	strh.w	r3, [sp, #20]
   35b24:	6a2b      	ldr	r3, [r5, #32]
   35b26:	9306      	str	r3, [sp, #24]
   35b28:	4632      	mov	r2, r6
   35b2a:	4640      	mov	r0, r8
   35b2c:	a903      	add	r1, sp, #12
   35b2e:	f000 fcfb 	bl	36528 <memcpy>
   35b32:	e7e0      	b.n	35af6 <nrf_accept+0xb0>
   35b34:	f04f 0924 	mov.w	r9, #36	; 0x24
   35b38:	4601      	mov	r1, r0
   35b3a:	464a      	mov	r2, r9
   35b3c:	a803      	add	r0, sp, #12
   35b3e:	f000 fd13 	bl	36568 <memset>
   35b42:	2302      	movs	r3, #2
   35b44:	f88d 900c 	strb.w	r9, [sp, #12]
   35b48:	9304      	str	r3, [sp, #16]
   35b4a:	7f2b      	ldrb	r3, [r5, #28]
   35b4c:	7f6a      	ldrb	r2, [r5, #29]
   35b4e:	ae07      	add	r6, sp, #28
   35b50:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   35b54:	f8ad 3014 	strh.w	r3, [sp, #20]
   35b58:	f105 0c30 	add.w	ip, r5, #48	; 0x30
   35b5c:	f105 0320 	add.w	r3, r5, #32
   35b60:	4632      	mov	r2, r6
   35b62:	6818      	ldr	r0, [r3, #0]
   35b64:	6859      	ldr	r1, [r3, #4]
   35b66:	3308      	adds	r3, #8
   35b68:	c203      	stmia	r2!, {r0, r1}
   35b6a:	4563      	cmp	r3, ip
   35b6c:	4616      	mov	r6, r2
   35b6e:	d1f7      	bne.n	35b60 <nrf_accept+0x11a>
   35b70:	6826      	ldr	r6, [r4, #0]
   35b72:	2e24      	cmp	r6, #36	; 0x24
   35b74:	bf28      	it	cs
   35b76:	2624      	movcs	r6, #36	; 0x24
   35b78:	e7d6      	b.n	35b28 <nrf_accept+0xe2>

00035b7a <nrf_recvfrom>:
   35b7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35b7e:	b085      	sub	sp, #20
   35b80:	4690      	mov	r8, r2
   35b82:	e9dd b70e 	ldrd	fp, r7, [sp, #56]	; 0x38
   35b86:	461e      	mov	r6, r3
   35b88:	9101      	str	r1, [sp, #4]
   35b8a:	f403 7a80 	and.w	sl, r3, #256	; 0x100
   35b8e:	f7f1 fcc7 	bl	27520 <sock_find>
   35b92:	4604      	mov	r4, r0
   35b94:	b940      	cbnz	r0, 35ba8 <nrf_recvfrom+0x2e>
   35b96:	2009      	movs	r0, #9
   35b98:	f7eb fd9e 	bl	216d8 <nrf_modem_os_errno_set>
   35b9c:	f04f 39ff 	mov.w	r9, #4294967295
   35ba0:	4648      	mov	r0, r9
   35ba2:	b005      	add	sp, #20
   35ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35ba8:	f436 79a1 	bics.w	r9, r6, #322	; 0x142
   35bac:	d001      	beq.n	35bb2 <nrf_recvfrom+0x38>
   35bae:	205f      	movs	r0, #95	; 0x5f
   35bb0:	e7f2      	b.n	35b98 <nrf_recvfrom+0x1e>
   35bb2:	f1bb 0f00 	cmp.w	fp, #0
   35bb6:	d002      	beq.n	35bbe <nrf_recvfrom+0x44>
   35bb8:	b91f      	cbnz	r7, 35bc2 <nrf_recvfrom+0x48>
   35bba:	200e      	movs	r0, #14
   35bbc:	e7ec      	b.n	35b98 <nrf_recvfrom+0x1e>
   35bbe:	2f00      	cmp	r7, #0
   35bc0:	d1fb      	bne.n	35bba <nrf_recvfrom+0x40>
   35bc2:	4620      	mov	r0, r4
   35bc4:	f7ff fca3 	bl	3550e <sock_is_stream>
   35bc8:	b128      	cbz	r0, 35bd6 <nrf_recvfrom+0x5c>
   35bca:	4620      	mov	r0, r4
   35bcc:	f7ff fcbe 	bl	3554c <sock_is_connected>
   35bd0:	b908      	cbnz	r0, 35bd6 <nrf_recvfrom+0x5c>
   35bd2:	2080      	movs	r0, #128	; 0x80
   35bd4:	e7e0      	b.n	35b98 <nrf_recvfrom+0x1e>
   35bd6:	f1ba 0f00 	cmp.w	sl, #0
   35bda:	d117      	bne.n	35c0c <nrf_recvfrom+0x92>
   35bdc:	4620      	mov	r0, r4
   35bde:	f7ff fcbd 	bl	3555c <sock_is_nonblock>
   35be2:	b9a8      	cbnz	r0, 35c10 <nrf_recvfrom+0x96>
   35be4:	f3c6 1580 	ubfx	r5, r6, #6, #1
   35be8:	4620      	mov	r0, r4
   35bea:	f7ff fd0f 	bl	3560c <sock_rcvtimeo_ms_get>
   35bee:	9003      	str	r0, [sp, #12]
   35bf0:	4620      	mov	r0, r4
   35bf2:	f7ff fcb7 	bl	35564 <sock_is_closed>
   35bf6:	b1b8      	cbz	r0, 35c28 <nrf_recvfrom+0xae>
   35bf8:	4620      	mov	r0, r4
   35bfa:	f7ff fc63 	bl	354c4 <sock_has_pkt>
   35bfe:	bb78      	cbnz	r0, 35c60 <nrf_recvfrom+0xe6>
   35c00:	4620      	mov	r0, r4
   35c02:	f7ff fcc5 	bl	35590 <sock_has_error>
   35c06:	b1c0      	cbz	r0, 35c3a <nrf_recvfrom+0xc0>
   35c08:	69a0      	ldr	r0, [r4, #24]
   35c0a:	e7c5      	b.n	35b98 <nrf_recvfrom+0x1e>
   35c0c:	2500      	movs	r5, #0
   35c0e:	e7eb      	b.n	35be8 <nrf_recvfrom+0x6e>
   35c10:	2501      	movs	r5, #1
   35c12:	e7e9      	b.n	35be8 <nrf_recvfrom+0x6e>
   35c14:	2002      	movs	r0, #2
   35c16:	a903      	add	r1, sp, #12
   35c18:	f7eb fc9c 	bl	21554 <nrf_modem_os_timedwait>
   35c1c:	2800      	cmp	r0, #0
   35c1e:	d0e7      	beq.n	35bf0 <nrf_recvfrom+0x76>
   35c20:	2800      	cmp	r0, #0
   35c22:	bfb8      	it	lt
   35c24:	4240      	neglt	r0, r0
   35c26:	e7b7      	b.n	35b98 <nrf_recvfrom+0x1e>
   35c28:	4620      	mov	r0, r4
   35c2a:	f7ff fc4b 	bl	354c4 <sock_has_pkt>
   35c2e:	2800      	cmp	r0, #0
   35c30:	d1e2      	bne.n	35bf8 <nrf_recvfrom+0x7e>
   35c32:	2d00      	cmp	r5, #0
   35c34:	d0ee      	beq.n	35c14 <nrf_recvfrom+0x9a>
   35c36:	200b      	movs	r0, #11
   35c38:	e7ae      	b.n	35b98 <nrf_recvfrom+0x1e>
   35c3a:	4620      	mov	r0, r4
   35c3c:	f7ff fc9a 	bl	35574 <sock_is_eof>
   35c40:	2800      	cmp	r0, #0
   35c42:	d1ad      	bne.n	35ba0 <nrf_recvfrom+0x26>
   35c44:	4620      	mov	r0, r4
   35c46:	f7ff fc91 	bl	3556c <sock_is_local_closed>
   35c4a:	b148      	cbz	r0, 35c60 <nrf_recvfrom+0xe6>
   35c4c:	4620      	mov	r0, r4
   35c4e:	f7ff fc5e 	bl	3550e <sock_is_stream>
   35c52:	2800      	cmp	r0, #0
   35c54:	d1a4      	bne.n	35ba0 <nrf_recvfrom+0x26>
   35c56:	4620      	mov	r0, r4
   35c58:	f7ff fc5e 	bl	35518 <sock_is_datagram>
   35c5c:	2800      	cmp	r0, #0
   35c5e:	d19a      	bne.n	35b96 <nrf_recvfrom+0x1c>
   35c60:	4620      	mov	r0, r4
   35c62:	f7ff fc52 	bl	3550a <sock_pkt_peek_head>
   35c66:	4605      	mov	r5, r0
   35c68:	f1bb 0f00 	cmp.w	fp, #0
   35c6c:	d00a      	beq.n	35c84 <nrf_recvfrom+0x10a>
   35c6e:	68c1      	ldr	r1, [r0, #12]
   35c70:	b369      	cbz	r1, 35cce <nrf_recvfrom+0x154>
   35c72:	780a      	ldrb	r2, [r1, #0]
   35c74:	683b      	ldr	r3, [r7, #0]
   35c76:	4658      	mov	r0, fp
   35c78:	429a      	cmp	r2, r3
   35c7a:	bf28      	it	cs
   35c7c:	461a      	movcs	r2, r3
   35c7e:	603a      	str	r2, [r7, #0]
   35c80:	f000 fc52 	bl	36528 <memcpy>
   35c84:	f006 0602 	and.w	r6, r6, #2
   35c88:	4628      	mov	r0, r5
   35c8a:	f7ff fd3a 	bl	35702 <pkt_bytes_left>
   35c8e:	4540      	cmp	r0, r8
   35c90:	d81f      	bhi.n	35cd2 <nrf_recvfrom+0x158>
   35c92:	4628      	mov	r0, r5
   35c94:	f7ff fd35 	bl	35702 <pkt_bytes_left>
   35c98:	4607      	mov	r7, r0
   35c9a:	2f00      	cmp	r7, #0
   35c9c:	d080      	beq.n	35ba0 <nrf_recvfrom+0x26>
   35c9e:	9b01      	ldr	r3, [sp, #4]
   35ca0:	4628      	mov	r0, r5
   35ca2:	eb03 0b09 	add.w	fp, r3, r9
   35ca6:	f7ff fd28 	bl	356fa <pkt_bytes_get>
   35caa:	463a      	mov	r2, r7
   35cac:	4601      	mov	r1, r0
   35cae:	4658      	mov	r0, fp
   35cb0:	f000 fc3a 	bl	36528 <memcpy>
   35cb4:	4620      	mov	r0, r4
   35cb6:	44b9      	add	r9, r7
   35cb8:	f7ff fc2e 	bl	35518 <sock_is_datagram>
   35cbc:	b158      	cbz	r0, 35cd6 <nrf_recvfrom+0x15c>
   35cbe:	2e00      	cmp	r6, #0
   35cc0:	f47f af6e 	bne.w	35ba0 <nrf_recvfrom+0x26>
   35cc4:	4629      	mov	r1, r5
   35cc6:	4620      	mov	r0, r4
   35cc8:	f7ff fc0b 	bl	354e2 <sock_pkt_remove>
   35ccc:	e768      	b.n	35ba0 <nrf_recvfrom+0x26>
   35cce:	6039      	str	r1, [r7, #0]
   35cd0:	e7d8      	b.n	35c84 <nrf_recvfrom+0x10a>
   35cd2:	4647      	mov	r7, r8
   35cd4:	e7e1      	b.n	35c9a <nrf_recvfrom+0x120>
   35cd6:	4620      	mov	r0, r4
   35cd8:	f7ff fc23 	bl	35522 <sock_is_raw>
   35cdc:	2800      	cmp	r0, #0
   35cde:	d1ee      	bne.n	35cbe <nrf_recvfrom+0x144>
   35ce0:	b956      	cbnz	r6, 35cf8 <nrf_recvfrom+0x17e>
   35ce2:	896b      	ldrh	r3, [r5, #10]
   35ce4:	4628      	mov	r0, r5
   35ce6:	443b      	add	r3, r7
   35ce8:	816b      	strh	r3, [r5, #10]
   35cea:	f7ff fd0a 	bl	35702 <pkt_bytes_left>
   35cee:	b918      	cbnz	r0, 35cf8 <nrf_recvfrom+0x17e>
   35cf0:	4629      	mov	r1, r5
   35cf2:	4620      	mov	r0, r4
   35cf4:	f7ff fbf5 	bl	354e2 <sock_pkt_remove>
   35cf8:	45b8      	cmp	r8, r7
   35cfa:	f43f af51 	beq.w	35ba0 <nrf_recvfrom+0x26>
   35cfe:	f1ba 0f00 	cmp.w	sl, #0
   35d02:	d10a      	bne.n	35d1a <nrf_recvfrom+0x1a0>
   35d04:	b976      	cbnz	r6, 35d24 <nrf_recvfrom+0x1aa>
   35d06:	4620      	mov	r0, r4
   35d08:	f7ff fbff 	bl	3550a <sock_pkt_peek_head>
   35d0c:	e00d      	b.n	35d2a <nrf_recvfrom+0x1b0>
   35d0e:	4620      	mov	r0, r4
   35d10:	f7ff fc28 	bl	35564 <sock_is_closed>
   35d14:	2800      	cmp	r0, #0
   35d16:	f47f af43 	bne.w	35ba0 <nrf_recvfrom+0x26>
   35d1a:	b16e      	cbz	r6, 35d38 <nrf_recvfrom+0x1be>
   35d1c:	4628      	mov	r0, r5
   35d1e:	f7ff fce3 	bl	356e8 <pkt_has_next>
   35d22:	b170      	cbz	r0, 35d42 <nrf_recvfrom+0x1c8>
   35d24:	4628      	mov	r0, r5
   35d26:	f7ff fce5 	bl	356f4 <pkt_peek_next>
   35d2a:	4605      	mov	r5, r0
   35d2c:	2800      	cmp	r0, #0
   35d2e:	f43f af37 	beq.w	35ba0 <nrf_recvfrom+0x26>
   35d32:	eba8 0807 	sub.w	r8, r8, r7
   35d36:	e7a7      	b.n	35c88 <nrf_recvfrom+0x10e>
   35d38:	4620      	mov	r0, r4
   35d3a:	f7ff fbc3 	bl	354c4 <sock_has_pkt>
   35d3e:	2800      	cmp	r0, #0
   35d40:	d1e1      	bne.n	35d06 <nrf_recvfrom+0x18c>
   35d42:	2002      	movs	r0, #2
   35d44:	a903      	add	r1, sp, #12
   35d46:	f7eb fc05 	bl	21554 <nrf_modem_os_timedwait>
   35d4a:	2800      	cmp	r0, #0
   35d4c:	d0df      	beq.n	35d0e <nrf_recvfrom+0x194>
   35d4e:	f1b9 0f00 	cmp.w	r9, #0
   35d52:	f47f af25 	bne.w	35ba0 <nrf_recvfrom+0x26>
   35d56:	e763      	b.n	35c20 <nrf_recvfrom+0xa6>

00035d58 <rpc_ip_deinit>:
   35d58:	b508      	push	{r3, lr}
   35d5a:	f7f1 fc09 	bl	27570 <sock_shutdown>
   35d5e:	2000      	movs	r0, #0
   35d60:	bd08      	pop	{r3, pc}

00035d62 <tls_setopt_role>:
   35d62:	b508      	push	{r3, lr}
   35d64:	b109      	cbz	r1, 35d6a <tls_setopt_role+0x8>
   35d66:	2a04      	cmp	r2, #4
   35d68:	d005      	beq.n	35d76 <tls_setopt_role+0x14>
   35d6a:	2016      	movs	r0, #22
   35d6c:	f7eb fcb4 	bl	216d8 <nrf_modem_os_errno_set>
   35d70:	f04f 30ff 	mov.w	r0, #4294967295
   35d74:	e006      	b.n	35d84 <tls_setopt_role+0x22>
   35d76:	780b      	ldrb	r3, [r1, #0]
   35d78:	b12b      	cbz	r3, 35d86 <tls_setopt_role+0x24>
   35d7a:	2b01      	cmp	r3, #1
   35d7c:	d1f5      	bne.n	35d6a <tls_setopt_role+0x8>
   35d7e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
   35d82:	2000      	movs	r0, #0
   35d84:	bd08      	pop	{r3, pc}
   35d86:	2302      	movs	r3, #2
   35d88:	e7f9      	b.n	35d7e <tls_setopt_role+0x1c>

00035d8a <tls_setopt_taglist>:
   35d8a:	b510      	push	{r4, lr}
   35d8c:	1e54      	subs	r4, r2, #1
   35d8e:	2c1b      	cmp	r4, #27
   35d90:	d802      	bhi.n	35d98 <tls_setopt_taglist+0xe>
   35d92:	f012 0403 	ands.w	r4, r2, #3
   35d96:	d005      	beq.n	35da4 <tls_setopt_taglist+0x1a>
   35d98:	2016      	movs	r0, #22
   35d9a:	f7eb fc9d 	bl	216d8 <nrf_modem_os_errno_set>
   35d9e:	f04f 30ff 	mov.w	r0, #4294967295
   35da2:	bd10      	pop	{r4, pc}
   35da4:	0893      	lsrs	r3, r2, #2
   35da6:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
   35daa:	3048      	adds	r0, #72	; 0x48
   35dac:	f000 fbbc 	bl	36528 <memcpy>
   35db0:	4620      	mov	r0, r4
   35db2:	e7f6      	b.n	35da2 <tls_setopt_taglist+0x18>

00035db4 <tls_setopt_sess_cache>:
   35db4:	b508      	push	{r3, lr}
   35db6:	b109      	cbz	r1, 35dbc <tls_setopt_sess_cache+0x8>
   35db8:	2a04      	cmp	r2, #4
   35dba:	d005      	beq.n	35dc8 <tls_setopt_sess_cache+0x14>
   35dbc:	2016      	movs	r0, #22
   35dbe:	f7eb fc8b 	bl	216d8 <nrf_modem_os_errno_set>
   35dc2:	f04f 30ff 	mov.w	r0, #4294967295
   35dc6:	bd08      	pop	{r3, pc}
   35dc8:	780b      	ldrb	r3, [r1, #0]
   35dca:	3b00      	subs	r3, #0
   35dcc:	bf18      	it	ne
   35dce:	2301      	movne	r3, #1
   35dd0:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
   35dd4:	2000      	movs	r0, #0
   35dd6:	e7f6      	b.n	35dc6 <tls_setopt_sess_cache+0x12>

00035dd8 <tls_setopt_peer_verify>:
   35dd8:	b508      	push	{r3, lr}
   35dda:	b109      	cbz	r1, 35de0 <tls_setopt_peer_verify+0x8>
   35ddc:	2a04      	cmp	r2, #4
   35dde:	d005      	beq.n	35dec <tls_setopt_peer_verify+0x14>
   35de0:	2016      	movs	r0, #22
   35de2:	f7eb fc79 	bl	216d8 <nrf_modem_os_errno_set>
   35de6:	f04f 30ff 	mov.w	r0, #4294967295
   35dea:	bd08      	pop	{r3, pc}
   35dec:	680b      	ldr	r3, [r1, #0]
   35dee:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
   35df2:	2000      	movs	r0, #0
   35df4:	e7f9      	b.n	35dea <tls_setopt_peer_verify+0x12>

00035df6 <tls_setopt_hostname>:
   35df6:	b570      	push	{r4, r5, r6, lr}
   35df8:	4605      	mov	r5, r0
   35dfa:	4614      	mov	r4, r2
   35dfc:	460e      	mov	r6, r1
   35dfe:	b931      	cbnz	r1, 35e0e <tls_setopt_hostname+0x18>
   35e00:	b192      	cbz	r2, 35e28 <tls_setopt_hostname+0x32>
   35e02:	2016      	movs	r0, #22
   35e04:	f7eb fc68 	bl	216d8 <nrf_modem_os_errno_set>
   35e08:	f04f 30ff 	mov.w	r0, #4294967295
   35e0c:	bd70      	pop	{r4, r5, r6, pc}
   35e0e:	2a00      	cmp	r2, #0
   35e10:	d0f7      	beq.n	35e02 <tls_setopt_hostname+0xc>
   35e12:	6c00      	ldr	r0, [r0, #64]	; 0x40
   35e14:	b108      	cbz	r0, 35e1a <tls_setopt_hostname+0x24>
   35e16:	f7eb fd39 	bl	2188c <nrf_modem_os_free>
   35e1a:	1c60      	adds	r0, r4, #1
   35e1c:	f7eb fd2e 	bl	2187c <nrf_modem_os_alloc>
   35e20:	6428      	str	r0, [r5, #64]	; 0x40
   35e22:	b938      	cbnz	r0, 35e34 <tls_setopt_hostname+0x3e>
   35e24:	2069      	movs	r0, #105	; 0x69
   35e26:	e7ed      	b.n	35e04 <tls_setopt_hostname+0xe>
   35e28:	6c00      	ldr	r0, [r0, #64]	; 0x40
   35e2a:	b108      	cbz	r0, 35e30 <tls_setopt_hostname+0x3a>
   35e2c:	f7eb fd2e 	bl	2188c <nrf_modem_os_free>
   35e30:	2000      	movs	r0, #0
   35e32:	e7eb      	b.n	35e0c <tls_setopt_hostname+0x16>
   35e34:	4622      	mov	r2, r4
   35e36:	4631      	mov	r1, r6
   35e38:	f000 fb76 	bl	36528 <memcpy>
   35e3c:	2200      	movs	r2, #0
   35e3e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   35e40:	551a      	strb	r2, [r3, r4]
   35e42:	e7f5      	b.n	35e30 <tls_setopt_hostname+0x3a>

00035e44 <nrf_poll_one>:
   35e44:	b538      	push	{r3, r4, r5, lr}
   35e46:	4604      	mov	r4, r0
   35e48:	6800      	ldr	r0, [r0, #0]
   35e4a:	f7f1 fb69 	bl	27520 <sock_find>
   35e4e:	4605      	mov	r5, r0
   35e50:	b928      	cbnz	r0, 35e5e <nrf_poll_one+0x1a>
   35e52:	2001      	movs	r0, #1
   35e54:	88e3      	ldrh	r3, [r4, #6]
   35e56:	f043 0320 	orr.w	r3, r3, #32
   35e5a:	80e3      	strh	r3, [r4, #6]
   35e5c:	bd38      	pop	{r3, r4, r5, pc}
   35e5e:	f7ff fb85 	bl	3556c <sock_is_local_closed>
   35e62:	2800      	cmp	r0, #0
   35e64:	d1f5      	bne.n	35e52 <nrf_poll_one+0xe>
   35e66:	4628      	mov	r0, r5
   35e68:	f7ff fb92 	bl	35590 <sock_has_error>
   35e6c:	b1f8      	cbz	r0, 35eae <nrf_poll_one+0x6a>
   35e6e:	88e3      	ldrh	r3, [r4, #6]
   35e70:	f043 0308 	orr.w	r3, r3, #8
   35e74:	80e3      	strh	r3, [r4, #6]
   35e76:	88a3      	ldrh	r3, [r4, #4]
   35e78:	07da      	lsls	r2, r3, #31
   35e7a:	d507      	bpl.n	35e8c <nrf_poll_one+0x48>
   35e7c:	4628      	mov	r0, r5
   35e7e:	f7ff fb9d 	bl	355bc <sock_can_read>
   35e82:	b1e8      	cbz	r0, 35ec0 <nrf_poll_one+0x7c>
   35e84:	88e3      	ldrh	r3, [r4, #6]
   35e86:	f043 0301 	orr.w	r3, r3, #1
   35e8a:	80e3      	strh	r3, [r4, #6]
   35e8c:	88a3      	ldrh	r3, [r4, #4]
   35e8e:	075b      	lsls	r3, r3, #29
   35e90:	d507      	bpl.n	35ea2 <nrf_poll_one+0x5e>
   35e92:	4628      	mov	r0, r5
   35e94:	f7ff fb9c 	bl	355d0 <sock_can_send>
   35e98:	b118      	cbz	r0, 35ea2 <nrf_poll_one+0x5e>
   35e9a:	88e3      	ldrh	r3, [r4, #6]
   35e9c:	f043 0304 	orr.w	r3, r3, #4
   35ea0:	80e3      	strh	r3, [r4, #6]
   35ea2:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
   35ea6:	3800      	subs	r0, #0
   35ea8:	bf18      	it	ne
   35eaa:	2001      	movne	r0, #1
   35eac:	e7d6      	b.n	35e5c <nrf_poll_one+0x18>
   35eae:	4628      	mov	r0, r5
   35eb0:	f7ff fb60 	bl	35574 <sock_is_eof>
   35eb4:	2800      	cmp	r0, #0
   35eb6:	d0de      	beq.n	35e76 <nrf_poll_one+0x32>
   35eb8:	88e3      	ldrh	r3, [r4, #6]
   35eba:	f043 0310 	orr.w	r3, r3, #16
   35ebe:	e7d9      	b.n	35e74 <nrf_poll_one+0x30>
   35ec0:	4628      	mov	r0, r5
   35ec2:	f7ff fb80 	bl	355c6 <sock_can_accept>
   35ec6:	2800      	cmp	r0, #0
   35ec8:	d1dc      	bne.n	35e84 <nrf_poll_one+0x40>
   35eca:	4628      	mov	r0, r5
   35ecc:	f7ff fb52 	bl	35574 <sock_is_eof>
   35ed0:	2800      	cmp	r0, #0
   35ed2:	d1d7      	bne.n	35e84 <nrf_poll_one+0x40>
   35ed4:	e7da      	b.n	35e8c <nrf_poll_one+0x48>

00035ed6 <nrf_fcntl>:
   35ed6:	b538      	push	{r3, r4, r5, lr}
   35ed8:	460d      	mov	r5, r1
   35eda:	4614      	mov	r4, r2
   35edc:	f7f1 fb20 	bl	27520 <sock_find>
   35ee0:	b928      	cbnz	r0, 35eee <nrf_fcntl+0x18>
   35ee2:	2009      	movs	r0, #9
   35ee4:	f7eb fbf8 	bl	216d8 <nrf_modem_os_errno_set>
   35ee8:	f04f 30ff 	mov.w	r0, #4294967295
   35eec:	e006      	b.n	35efc <nrf_fcntl+0x26>
   35eee:	2d03      	cmp	r5, #3
   35ef0:	d003      	beq.n	35efa <nrf_fcntl+0x24>
   35ef2:	2d04      	cmp	r5, #4
   35ef4:	d003      	beq.n	35efe <nrf_fcntl+0x28>
   35ef6:	2016      	movs	r0, #22
   35ef8:	e7f4      	b.n	35ee4 <nrf_fcntl+0xe>
   35efa:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   35efc:	bd38      	pop	{r3, r4, r5, pc}
   35efe:	2c01      	cmp	r4, #1
   35f00:	d8f9      	bhi.n	35ef6 <nrf_fcntl+0x20>
   35f02:	63c4      	str	r4, [r0, #60]	; 0x3c
   35f04:	2000      	movs	r0, #0
   35f06:	e7f9      	b.n	35efc <nrf_fcntl+0x26>

00035f08 <rpc_af_to_nrf_af>:
   35f08:	1f43      	subs	r3, r0, #5
   35f0a:	2b00      	cmp	r3, #0
   35f0c:	d803      	bhi.n	35f16 <rpc_af_to_nrf_af+0xe>
   35f0e:	e8df f003 	tbb	[pc, r3]
   35f12:	01          	.byte	0x01
   35f13:	00          	.byte	0x00
   35f14:	2003      	movs	r0, #3
   35f16:	4770      	bx	lr

00035f18 <nrf_type_to_rpc_type>:
   35f18:	4770      	bx	lr

00035f1a <nrf_proto_to_rpc_proto>:
   35f1a:	2829      	cmp	r0, #41	; 0x29
   35f1c:	d015      	beq.n	35f4a <nrf_proto_to_rpc_proto+0x30>
   35f1e:	dc05      	bgt.n	35f2c <nrf_proto_to_rpc_proto+0x12>
   35f20:	2806      	cmp	r0, #6
   35f22:	d014      	beq.n	35f4e <nrf_proto_to_rpc_proto+0x34>
   35f24:	2811      	cmp	r0, #17
   35f26:	d014      	beq.n	35f52 <nrf_proto_to_rpc_proto+0x38>
   35f28:	b148      	cbz	r0, 35f3e <nrf_proto_to_rpc_proto+0x24>
   35f2a:	4770      	bx	lr
   35f2c:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   35f30:	d00d      	beq.n	35f4e <nrf_proto_to_rpc_proto+0x34>
   35f32:	f240 1311 	movw	r3, #273	; 0x111
   35f36:	4298      	cmp	r0, r3
   35f38:	d00b      	beq.n	35f52 <nrf_proto_to_rpc_proto+0x38>
   35f3a:	28ff      	cmp	r0, #255	; 0xff
   35f3c:	d10c      	bne.n	35f58 <nrf_proto_to_rpc_proto+0x3e>
   35f3e:	2901      	cmp	r1, #1
   35f40:	d009      	beq.n	35f56 <nrf_proto_to_rpc_proto+0x3c>
   35f42:	2902      	cmp	r1, #2
   35f44:	bf08      	it	eq
   35f46:	2002      	moveq	r0, #2
   35f48:	4770      	bx	lr
   35f4a:	2006      	movs	r0, #6
   35f4c:	4770      	bx	lr
   35f4e:	2001      	movs	r0, #1
   35f50:	4770      	bx	lr
   35f52:	2002      	movs	r0, #2
   35f54:	4770      	bx	lr
   35f56:	4608      	mov	r0, r1
   35f58:	4770      	bx	lr

00035f5a <nrf_sol_to_rpc_sol>:
   35f5a:	2829      	cmp	r0, #41	; 0x29
   35f5c:	d011      	beq.n	35f82 <nrf_sol_to_rpc_sol+0x28>
   35f5e:	dc0a      	bgt.n	35f76 <nrf_sol_to_rpc_sol+0x1c>
   35f60:	2801      	cmp	r0, #1
   35f62:	d010      	beq.n	35f86 <nrf_sol_to_rpc_sol+0x2c>
   35f64:	2806      	cmp	r0, #6
   35f66:	d010      	beq.n	35f8a <nrf_sol_to_rpc_sol+0x30>
   35f68:	2800      	cmp	r0, #0
   35f6a:	bf08      	it	eq
   35f6c:	2004      	moveq	r0, #4
   35f6e:	bf18      	it	ne
   35f70:	f04f 30ff 	movne.w	r0, #4294967295
   35f74:	4770      	bx	lr
   35f76:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   35f7a:	d008      	beq.n	35f8e <nrf_sol_to_rpc_sol+0x34>
   35f7c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   35f80:	e7f5      	b.n	35f6e <nrf_sol_to_rpc_sol+0x14>
   35f82:	2006      	movs	r0, #6
   35f84:	4770      	bx	lr
   35f86:	2008      	movs	r0, #8
   35f88:	4770      	bx	lr
   35f8a:	2001      	movs	r0, #1
   35f8c:	4770      	bx	lr
   35f8e:	f44f 7080 	mov.w	r0, #256	; 0x100
   35f92:	4770      	bx	lr

00035f94 <rpc_error_to_nrf_gai_errno>:
   35f94:	b508      	push	{r3, lr}
   35f96:	1f03      	subs	r3, r0, #4
   35f98:	2b09      	cmp	r3, #9
   35f9a:	d80f      	bhi.n	35fbc <rpc_error_to_nrf_gai_errno+0x28>
   35f9c:	e8df f003 	tbb	[pc, r3]
   35fa0:	0e051108 	.word	0x0e051108
   35fa4:	0e0e0e0e 	.word	0x0e0e0e0e
   35fa8:	050e      	.short	0x050e
   35faa:	f06f 0001 	mvn.w	r0, #1
   35fae:	bd08      	pop	{r3, pc}
   35fb0:	2073      	movs	r0, #115	; 0x73
   35fb2:	f7eb fb91 	bl	216d8 <nrf_modem_os_errno_set>
   35fb6:	f06f 000a 	mvn.w	r0, #10
   35fba:	e7f8      	b.n	35fae <rpc_error_to_nrf_gai_errno+0x1a>
   35fbc:	f7f2 fa1a 	bl	283f4 <rpc_error_to_nrf_errno>
   35fc0:	e7f7      	b.n	35fb2 <rpc_error_to_nrf_gai_errno+0x1e>
   35fc2:	f06f 0063 	mvn.w	r0, #99	; 0x63
   35fc6:	e7f2      	b.n	35fae <rpc_error_to_nrf_gai_errno+0x1a>

00035fc8 <req_forward>:
   35fc8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   35fca:	2300      	movs	r3, #0
   35fcc:	460a      	mov	r2, r1
   35fce:	f04f 31ff 	mov.w	r1, #4294967295
   35fd2:	9303      	str	r3, [sp, #12]
   35fd4:	68d6      	ldr	r6, [r2, #12]
   35fd6:	ad02      	add	r5, sp, #8
   35fd8:	9302      	str	r3, [sp, #8]
   35fda:	9101      	str	r1, [sp, #4]
   35fdc:	b18e      	cbz	r6, 36002 <req_forward+0x3a>
   35fde:	4635      	mov	r5, r6
   35fe0:	b281      	uxth	r1, r0
   35fe2:	602b      	str	r3, [r5, #0]
   35fe4:	2004      	movs	r0, #4
   35fe6:	f7ff fa04 	bl	353f2 <rpc_client_msg_send>
   35fea:	682b      	ldr	r3, [r5, #0]
   35fec:	b15b      	cbz	r3, 36006 <req_forward+0x3e>
   35fee:	6958      	ldr	r0, [r3, #20]
   35ff0:	f7f2 fa00 	bl	283f4 <rpc_error_to_nrf_errno>
   35ff4:	4604      	mov	r4, r0
   35ff6:	b106      	cbz	r6, 35ffa <req_forward+0x32>
   35ff8:	b178      	cbz	r0, 3601a <req_forward+0x52>
   35ffa:	6828      	ldr	r0, [r5, #0]
   35ffc:	f7ff fa00 	bl	35400 <rpc_client_msg_rx_free>
   36000:	e00b      	b.n	3601a <req_forward+0x52>
   36002:	60d5      	str	r5, [r2, #12]
   36004:	e7ec      	b.n	35fe0 <req_forward+0x18>
   36006:	2002      	movs	r0, #2
   36008:	a901      	add	r1, sp, #4
   3600a:	f7eb faa3 	bl	21554 <nrf_modem_os_timedwait>
   3600e:	2800      	cmp	r0, #0
   36010:	d0eb      	beq.n	35fea <req_forward+0x22>
   36012:	ea80 74e0 	eor.w	r4, r0, r0, asr #31
   36016:	eba4 74e0 	sub.w	r4, r4, r0, asr #31
   3601a:	4620      	mov	r0, r4
   3601c:	b004      	add	sp, #16
   3601e:	bd70      	pop	{r4, r5, r6, pc}

00036020 <req_cookie_set>:
   36020:	60c1      	str	r1, [r0, #12]
   36022:	4770      	bx	lr

00036024 <res_cookie_get>:
   36024:	68c0      	ldr	r0, [r0, #12]
   36026:	4770      	bx	lr

00036028 <res_forward>:
   36028:	68c3      	ldr	r3, [r0, #12]
   3602a:	6018      	str	r0, [r3, #0]
   3602c:	2001      	movs	r0, #1
   3602e:	4770      	bx	lr

00036030 <rpc_dfu_event_handler>:
   36030:	b510      	push	{r4, lr}
   36032:	4604      	mov	r4, r0
   36034:	6800      	ldr	r0, [r0, #0]
   36036:	b108      	cbz	r0, 3603c <rpc_dfu_event_handler+0xc>
   36038:	f7ff f9e5 	bl	35406 <rpc_client_msg_data_rx_free>
   3603c:	68e0      	ldr	r0, [r4, #12]
   3603e:	b108      	cbz	r0, 36044 <rpc_dfu_event_handler+0x14>
   36040:	6004      	str	r4, [r0, #0]
   36042:	2001      	movs	r0, #1
   36044:	bd10      	pop	{r4, pc}

00036046 <rpc_at_deinit>:
   36046:	2000      	movs	r0, #0
   36048:	4770      	bx	lr

0003604a <rpc_delta_dfu_deinit>:
   3604a:	2000      	movs	r0, #0
   3604c:	4770      	bx	lr

0003604e <rpc_delta_dfu_init>:
   3604e:	2000      	movs	r0, #0
   36050:	4770      	bx	lr

00036052 <nrf_modem_is_initialized>:
   36052:	f7f2 bb31 	b.w	286b8 <nrf_modem_state_is_initialized>

00036056 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   36056:	4770      	bx	lr

00036058 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   36058:	b140      	cbz	r0, 3606c <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   3605a:	68c3      	ldr	r3, [r0, #12]
   3605c:	7858      	ldrb	r0, [r3, #1]
   3605e:	f010 0001 	ands.w	r0, r0, #1
   36062:	bf1e      	ittt	ne
   36064:	7818      	ldrbne	r0, [r3, #0]
   36066:	fab0 f080 	clzne	r0, r0
   3606a:	0940      	lsrne	r0, r0, #5
}
   3606c:	4770      	bx	lr

0003606e <z_early_memset>:
__ssp_bos_icheck3(memset, void *, int)
   3606e:	f000 ba7b 	b.w	36568 <memset>

00036072 <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   36072:	f000 ba59 	b.w	36528 <memcpy>

00036076 <k_heap_init>:
{
   36076:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   36078:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   3607c:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   36080:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   36082:	f7d7 bf55 	b.w	df30 <sys_heap_init>

00036086 <k_heap_alloc>:
{
   36086:	b507      	push	{r0, r1, r2, lr}
	void *ret = k_heap_aligned_alloc(h, sizeof(void *), bytes, timeout);
   36088:	e9cd 2300 	strd	r2, r3, [sp]
   3608c:	460a      	mov	r2, r1
   3608e:	2104      	movs	r1, #4
   36090:	f7f2 fd4e 	bl	28b30 <k_heap_aligned_alloc>
}
   36094:	b003      	add	sp, #12
   36096:	f85d fb04 	ldr.w	pc, [sp], #4

0003609a <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   3609a:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
   3609e:	4313      	orrs	r3, r2
   360a0:	f013 0303 	ands.w	r3, r3, #3
   360a4:	d10c      	bne.n	360c0 <create_free_list+0x26>
	slab->free_list = NULL;
   360a6:	6183      	str	r3, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   360a8:	68c1      	ldr	r1, [r0, #12]
   360aa:	4299      	cmp	r1, r3
   360ac:	d801      	bhi.n	360b2 <create_free_list+0x18>
	return 0;
   360ae:	2000      	movs	r0, #0
   360b0:	4770      	bx	lr
		*(char **)p = slab->free_list;
   360b2:	6981      	ldr	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   360b4:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   360b6:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   360b8:	6901      	ldr	r1, [r0, #16]
		slab->free_list = p;
   360ba:	6182      	str	r2, [r0, #24]
		p += slab->block_size;
   360bc:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   360be:	e7f3      	b.n	360a8 <create_free_list+0xe>
		return -EINVAL;
   360c0:	f06f 0015 	mvn.w	r0, #21
}
   360c4:	4770      	bx	lr

000360c6 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   360c6:	f3ef 8005 	mrs	r0, IPSR
}
   360ca:	3800      	subs	r0, #0
   360cc:	bf18      	it	ne
   360ce:	2001      	movne	r0, #1
   360d0:	4770      	bx	lr

000360d2 <z_impl_k_thread_name_set>:
}
   360d2:	f06f 0057 	mvn.w	r0, #87	; 0x57
   360d6:	4770      	bx	lr

000360d8 <k_thread_name_get>:
}
   360d8:	2000      	movs	r0, #0
   360da:	4770      	bx	lr

000360dc <z_impl_k_thread_start>:
	z_sched_start(thread);
   360dc:	f7f4 baaa 	b.w	2a634 <z_sched_start>

000360e0 <z_pm_save_idle_exit>:
{
   360e0:	b508      	push	{r3, lr}
	pm_system_resume();
   360e2:	f7da fc79 	bl	109d8 <pm_system_resume>
}
   360e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   360ea:	f7fe bcc7 	b.w	34a7c <sys_clock_idle_exit>

000360ee <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   360ee:	f990 300e 	ldrsb.w	r3, [r0, #14]
   360f2:	428b      	cmp	r3, r1
   360f4:	d001      	beq.n	360fa <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   360f6:	f7f4 bd8d 	b.w	2ac14 <z_set_prio>
}
   360fa:	2000      	movs	r0, #0
   360fc:	4770      	bx	lr

000360fe <z_impl_k_mutex_init>:
{
   360fe:	4603      	mov	r3, r0
	mutex->owner = NULL;
   36100:	2000      	movs	r0, #0
   36102:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   36106:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   3610a:	4770      	bx	lr

0003610c <z_queue_node_peek>:
{
   3610c:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   3610e:	4604      	mov	r4, r0
   36110:	b130      	cbz	r0, 36120 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   36112:	6802      	ldr	r2, [r0, #0]
   36114:	0793      	lsls	r3, r2, #30
   36116:	d003      	beq.n	36120 <z_queue_node_peek+0x14>
		ret = anode->data;
   36118:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   3611a:	b109      	cbz	r1, 36120 <z_queue_node_peek+0x14>
			k_free(anode);
   3611c:	f000 f9ca 	bl	364b4 <k_free>
}
   36120:	4620      	mov	r0, r4
   36122:	bd10      	pop	{r4, pc}

00036124 <z_impl_k_queue_init>:
	list->head = NULL;
   36124:	2300      	movs	r3, #0
	list->tail = NULL;
   36126:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   3612a:	6083      	str	r3, [r0, #8]
   3612c:	f100 030c 	add.w	r3, r0, #12
   36130:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   36134:	f100 0314 	add.w	r3, r0, #20
   36138:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   3613c:	4770      	bx	lr

0003613e <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   3613e:	2301      	movs	r3, #1
{
   36140:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   36142:	9300      	str	r3, [sp, #0]
   36144:	2300      	movs	r3, #0
{
   36146:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   36148:	4619      	mov	r1, r3
   3614a:	f7f3 f9a9 	bl	294a0 <queue_insert>
}
   3614e:	b003      	add	sp, #12
   36150:	f85d fb04 	ldr.w	pc, [sp], #4

00036154 <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false, false);
   36154:	2300      	movs	r3, #0
{
   36156:	b507      	push	{r0, r1, r2, lr}
   36158:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   3615a:	9300      	str	r3, [sp, #0]
   3615c:	4619      	mov	r1, r3
   3615e:	f7f3 f99f 	bl	294a0 <queue_insert>
}
   36162:	b003      	add	sp, #12
   36164:	f85d fb04 	ldr.w	pc, [sp], #4

00036168 <z_impl_k_queue_peek_head>:
	return true;
}

void *z_impl_k_queue_peek_head(struct k_queue *queue)
{
	void *ret = z_queue_node_peek(sys_sflist_peek_head(&queue->data_q), false);
   36168:	2100      	movs	r1, #0
   3616a:	6800      	ldr	r0, [r0, #0]
   3616c:	f7ff bfce 	b.w	3610c <z_queue_node_peek>

00036170 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   36170:	b15a      	cbz	r2, 3618a <z_impl_k_sem_init+0x1a>
   36172:	428a      	cmp	r2, r1
   36174:	d309      	bcc.n	3618a <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   36176:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   3617a:	e9c0 1202 	strd	r1, r2, [r0, #8]
   3617e:	e9c0 0000 	strd	r0, r0, [r0]
   36182:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   36186:	2000      	movs	r0, #0
   36188:	4770      	bx	lr
		return -EINVAL;
   3618a:	f06f 0015 	mvn.w	r0, #21
}
   3618e:	4770      	bx	lr

00036190 <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
   36190:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
   36192:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   36194:	408b      	lsls	r3, r1
   36196:	ea22 0303 	bic.w	r3, r2, r3
   3619a:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   3619c:	fa22 f001 	lsr.w	r0, r2, r1
}
   361a0:	f000 0001 	and.w	r0, r0, #1
   361a4:	4770      	bx	lr

000361a6 <unschedule_locked>:
{
   361a6:	b510      	push	{r4, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   361a8:	2103      	movs	r1, #3
{
   361aa:	4604      	mov	r4, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   361ac:	300c      	adds	r0, #12
   361ae:	f7ff ffef 	bl	36190 <flag_test_and_clear>
   361b2:	b130      	cbz	r0, 361c2 <unschedule_locked+0x1c>
		ret = z_abort_timeout(&dwork->timeout) == 0;
   361b4:	f104 0010 	add.w	r0, r4, #16
   361b8:	f7f5 fb5a 	bl	2b870 <z_abort_timeout>
   361bc:	fab0 f080 	clz	r0, r0
   361c0:	0940      	lsrs	r0, r0, #5
}
   361c2:	bd10      	pop	{r4, pc}

000361c4 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   361c4:	b120      	cbz	r0, 361d0 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   361c6:	2200      	movs	r2, #0
   361c8:	3090      	adds	r0, #144	; 0x90
   361ca:	4611      	mov	r1, r2
   361cc:	f7f5 b9c0 	b.w	2b550 <z_sched_wake>
}
   361d0:	4770      	bx	lr

000361d2 <cancel_async_locked>:
{
   361d2:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   361d4:	68c3      	ldr	r3, [r0, #12]
{
   361d6:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   361d8:	f3c3 0640 	ubfx	r6, r3, #1, #1
   361dc:	079b      	lsls	r3, r3, #30
   361de:	d416      	bmi.n	3620e <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   361e0:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   361e2:	2102      	movs	r1, #2
   361e4:	300c      	adds	r0, #12
   361e6:	f7ff ffd3 	bl	36190 <flag_test_and_clear>
   361ea:	b180      	cbz	r0, 3620e <cancel_async_locked+0x3c>
	return list->head;
   361ec:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   361f0:	b16a      	cbz	r2, 3620e <cancel_async_locked+0x3c>
   361f2:	4294      	cmp	r4, r2
   361f4:	d11d      	bne.n	36232 <cancel_async_locked+0x60>
	return node->next;
   361f6:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   361f8:	b99e      	cbnz	r6, 36222 <cancel_async_locked+0x50>
   361fa:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
	list->head = node;
   361fe:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
Z_GENLIST_REMOVE(slist, snode)
   36202:	429c      	cmp	r4, r3
   36204:	d101      	bne.n	3620a <cancel_async_locked+0x38>
	list->tail = node;
   36206:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
	parent->next = child;
   3620a:	2300      	movs	r3, #0
   3620c:	6023      	str	r3, [r4, #0]
	return *flagp;
   3620e:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   36210:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   36214:	bf1e      	ittt	ne
   36216:	f043 0302 	orrne.w	r3, r3, #2
   3621a:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   3621c:	f040 0002 	orrne.w	r0, r0, #2
}
   36220:	bd70      	pop	{r4, r5, r6, pc}
   36222:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   36224:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
   36228:	4294      	cmp	r4, r2
	list->tail = node;
   3622a:	bf08      	it	eq
   3622c:	f8c5 608c 	streq.w	r6, [r5, #140]	; 0x8c
}
   36230:	e7eb      	b.n	3620a <cancel_async_locked+0x38>
	return node->next;
   36232:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   36234:	6812      	ldr	r2, [r2, #0]
   36236:	e7db      	b.n	361f0 <cancel_async_locked+0x1e>

00036238 <k_work_submit_to_queue>:
{
   36238:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   3623a:	f7f3 fd49 	bl	29cd0 <z_work_submit_to_queue>
	if (ret > 0) {
   3623e:	1e04      	subs	r4, r0, #0
   36240:	dd09      	ble.n	36256 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   36242:	f04f 0320 	mov.w	r3, #32
   36246:	f3ef 8011 	mrs	r0, BASEPRI
   3624a:	f383 8812 	msr	BASEPRI_MAX, r3
   3624e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   36252:	f000 f80d 	bl	36270 <z_reschedule_irqlock>
}
   36256:	4620      	mov	r0, r4
   36258:	bd10      	pop	{r4, pc}

0003625a <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   3625a:	f7f3 bcf3 	b.w	29c44 <k_work_busy_get>

0003625e <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   3625e:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   36262:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   36266:	4283      	cmp	r3, r0
		return b2 - b1;
   36268:	bf14      	ite	ne
   3626a:	1ac0      	subne	r0, r0, r3
	return 0;
   3626c:	2000      	moveq	r0, #0
}
   3626e:	4770      	bx	lr

00036270 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   36270:	4603      	mov	r3, r0
   36272:	b920      	cbnz	r0, 3627e <z_reschedule_irqlock+0xe>
   36274:	f3ef 8205 	mrs	r2, IPSR
   36278:	b90a      	cbnz	r2, 3627e <z_reschedule_irqlock+0xe>
   3627a:	f7dc b9e3 	b.w	12644 <arch_swap>
	__asm__ volatile(
   3627e:	f383 8811 	msr	BASEPRI, r3
   36282:	f3bf 8f6f 	isb	sy
}
   36286:	4770      	bx	lr

00036288 <z_reschedule_unlocked>:
	__asm__ volatile(
   36288:	f04f 0320 	mov.w	r3, #32
   3628c:	f3ef 8011 	mrs	r0, BASEPRI
   36290:	f383 8812 	msr	BASEPRI_MAX, r3
   36294:	f3bf 8f6f 	isb	sy
   36298:	f7ff bfea 	b.w	36270 <z_reschedule_irqlock>

0003629c <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
   3629c:	2101      	movs	r1, #1
   3629e:	3818      	subs	r0, #24
   362a0:	f7f4 be1e 	b.w	2aee0 <z_sched_wake_thread>

000362a4 <z_unpend_all>:
{
   362a4:	b538      	push	{r3, r4, r5, lr}
   362a6:	4605      	mov	r5, r0
	int need_sched = 0;
   362a8:	2000      	movs	r0, #0
	return list->head == list;
   362aa:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   362ac:	42a5      	cmp	r5, r4
   362ae:	d000      	beq.n	362b2 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   362b0:	b904      	cbnz	r4, 362b4 <z_unpend_all+0x10>
}
   362b2:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   362b4:	4620      	mov	r0, r4
   362b6:	f7f4 fdc7 	bl	2ae48 <z_unpend_thread>
		z_ready_thread(thread);
   362ba:	4620      	mov	r0, r4
   362bc:	f7f4 f8ea 	bl	2a494 <z_ready_thread>
		need_sched = 1;
   362c0:	2001      	movs	r0, #1
   362c2:	e7f2      	b.n	362aa <z_unpend_all+0x6>

000362c4 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   362c4:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   362c6:	f7f5 fc13 	bl	2baf0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   362ca:	bd08      	pop	{r3, pc}

000362cc <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   362cc:	f7f5 bc10 	b.w	2baf0 <sys_clock_tick_get>

000362d0 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   362d0:	b108      	cbz	r0, 362d6 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   362d2:	f7d9 b8e7 	b.w	f4a4 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   362d6:	4770      	bx	lr

000362d8 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   362d8:	f1b1 3fff 	cmp.w	r1, #4294967295
   362dc:	bf08      	it	eq
   362de:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   362e2:	b538      	push	{r3, r4, r5, lr}
   362e4:	460c      	mov	r4, r1
   362e6:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   362e8:	d014      	beq.n	36314 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   362ea:	4308      	orrs	r0, r1
   362ec:	d103      	bne.n	362f6 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   362ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   362f2:	f7f5 bbfd 	b.w	2baf0 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   362f6:	f06f 0001 	mvn.w	r0, #1
   362fa:	f04f 33ff 	mov.w	r3, #4294967295
   362fe:	1b40      	subs	r0, r0, r5
   36300:	eb63 0101 	sbc.w	r1, r3, r1
   36304:	2900      	cmp	r1, #0
   36306:	da04      	bge.n	36312 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   36308:	f7f5 fbf2 	bl	2baf0 <sys_clock_tick_get>
   3630c:	1940      	adds	r0, r0, r5
   3630e:	eb41 0104 	adc.w	r1, r1, r4
}
   36312:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   36314:	f04f 30ff 	mov.w	r0, #4294967295
   36318:	4601      	mov	r1, r0
   3631a:	e7fa      	b.n	36312 <sys_clock_timeout_end_calc+0x3a>

0003631c <k_timer_init>:
	timer->status = 0U;
   3631c:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   3631e:	e9c0 1208 	strd	r1, r2, [r0, #32]
   36322:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   36326:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   3632a:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   3632e:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   36330:	6343      	str	r3, [r0, #52]	; 0x34
}
   36332:	4770      	bx	lr

00036334 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   36334:	b510      	push	{r4, lr}
   36336:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   36338:	f7f5 fa9a 	bl	2b870 <z_abort_timeout>

	if (inactive) {
   3633c:	b9b0      	cbnz	r0, 3636c <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   3633e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   36340:	b10b      	cbz	r3, 36346 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   36342:	4620      	mov	r0, r4
   36344:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   36346:	f104 0018 	add.w	r0, r4, #24
   3634a:	f7f4 fe21 	bl	2af90 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   3634e:	b168      	cbz	r0, 3636c <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   36350:	f7f4 f8a0 	bl	2a494 <z_ready_thread>
   36354:	f04f 0320 	mov.w	r3, #32
   36358:	f3ef 8011 	mrs	r0, BASEPRI
   3635c:	f383 8812 	msr	BASEPRI_MAX, r3
   36360:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   36364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   36368:	f7ff bf82 	b.w	36270 <z_reschedule_irqlock>
   3636c:	bd10      	pop	{r4, pc}

0003636e <add_event>:
{
   3636e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   36370:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   36372:	e9d0 1300 	ldrd	r1, r3, [r0]
   36376:	4288      	cmp	r0, r1
   36378:	4604      	mov	r4, r0
   3637a:	d105      	bne.n	36388 <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   3637c:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   3637e:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   36382:	601d      	str	r5, [r3, #0]
	list->tail = node;
   36384:	6065      	str	r5, [r4, #4]
   36386:	e01d      	b.n	363c4 <add_event+0x56>
	if ((pending == NULL) ||
   36388:	2b00      	cmp	r3, #0
   3638a:	d0f7      	beq.n	3637c <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   3638c:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   3638e:	b100      	cbz	r0, 36392 <add_event+0x24>
   36390:	3860      	subs	r0, #96	; 0x60
   36392:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   36396:	4639      	mov	r1, r7
   36398:	f7ff ff61 	bl	3625e <z_sched_prio_cmp>
	if ((pending == NULL) ||
   3639c:	2800      	cmp	r0, #0
   3639e:	dced      	bgt.n	3637c <add_event+0xe>
	return list->head == list;
   363a0:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   363a2:	42b4      	cmp	r4, r6
   363a4:	d0ea      	beq.n	3637c <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   363a6:	2e00      	cmp	r6, #0
   363a8:	d0e8      	beq.n	3637c <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   363aa:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   363ac:	b101      	cbz	r1, 363b0 <add_event+0x42>
   363ae:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   363b0:	4638      	mov	r0, r7
   363b2:	f7ff ff54 	bl	3625e <z_sched_prio_cmp>
   363b6:	2800      	cmp	r0, #0
   363b8:	dd05      	ble.n	363c6 <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   363ba:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   363bc:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   363c0:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   363c2:	6075      	str	r5, [r6, #4]
}
   363c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   363c6:	6863      	ldr	r3, [r4, #4]
   363c8:	429e      	cmp	r6, r3
   363ca:	d0d7      	beq.n	3637c <add_event+0xe>
   363cc:	6836      	ldr	r6, [r6, #0]
   363ce:	e7ea      	b.n	363a6 <add_event+0x38>

000363d0 <signal_poll_event>:
{
   363d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   363d4:	6884      	ldr	r4, [r0, #8]
{
   363d6:	4605      	mov	r5, r0
   363d8:	460e      	mov	r6, r1
	if (poller != NULL) {
   363da:	b144      	cbz	r4, 363ee <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   363dc:	7863      	ldrb	r3, [r4, #1]
   363de:	2b01      	cmp	r3, #1
   363e0:	d12e      	bne.n	36440 <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   363e2:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   363e6:	f013 0302 	ands.w	r3, r3, #2
   363ea:	d10a      	bne.n	36402 <signal_poll_event+0x32>
		poller->is_polling = false;
   363ec:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   363ee:	2000      	movs	r0, #0
	event->state |= state;
   363f0:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   363f2:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   363f4:	f3c3 3286 	ubfx	r2, r3, #14, #7
   363f8:	4316      	orrs	r6, r2
   363fa:	f366 3394 	bfi	r3, r6, #14, #7
   363fe:	60eb      	str	r3, [r5, #12]
	return retcode;
   36400:	e03e      	b.n	36480 <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   36402:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   36406:	f1b3 3fff 	cmp.w	r3, #4294967295
   3640a:	bf08      	it	eq
   3640c:	f112 0f02 	cmneq.w	r2, #2
   36410:	d032      	beq.n	36478 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   36412:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   36416:	4640      	mov	r0, r8
   36418:	f7f4 fd16 	bl	2ae48 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   3641c:	2e08      	cmp	r6, #8
   3641e:	bf0c      	ite	eq
   36420:	f06f 0303 	mvneq.w	r3, #3
   36424:	2300      	movne	r3, #0
   36426:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   36428:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   3642c:	06db      	lsls	r3, r3, #27
   3642e:	d109      	bne.n	36444 <signal_poll_event+0x74>
   36430:	f854 7c48 	ldr.w	r7, [r4, #-72]
   36434:	b937      	cbnz	r7, 36444 <signal_poll_event+0x74>
	z_ready_thread(thread);
   36436:	4640      	mov	r0, r8
   36438:	f7f4 f82c 	bl	2a494 <z_ready_thread>
		poller->is_polling = false;
   3643c:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   3643e:	e7d6      	b.n	363ee <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   36440:	2b02      	cmp	r3, #2
   36442:	d001      	beq.n	36448 <signal_poll_event+0x78>
		poller->is_polling = false;
   36444:	2300      	movs	r3, #0
   36446:	e7d1      	b.n	363ec <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   36448:	7823      	ldrb	r3, [r4, #0]
   3644a:	2b00      	cmp	r3, #0
   3644c:	d0cf      	beq.n	363ee <signal_poll_event+0x1e>
   3644e:	f854 7c04 	ldr.w	r7, [r4, #-4]
   36452:	2f00      	cmp	r7, #0
   36454:	d0f2      	beq.n	3643c <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   36456:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   3645a:	f1a4 0914 	sub.w	r9, r4, #20
   3645e:	f104 0014 	add.w	r0, r4, #20
   36462:	f7f5 fa05 	bl	2b870 <z_abort_timeout>
		z_work_submit_to_queue(work_q, &twork->work);
   36466:	4649      	mov	r1, r9
   36468:	4638      	mov	r0, r7
		twork->poll_result = 0;
   3646a:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   3646e:	f7f3 fc2f 	bl	29cd0 <z_work_submit_to_queue>
		poller->is_polling = false;
   36472:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   36476:	e7ba      	b.n	363ee <signal_poll_event+0x1e>
		poller->is_polling = false;
   36478:	2300      	movs	r3, #0
		return -EAGAIN;
   3647a:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   3647e:	7023      	strb	r3, [r4, #0]
}
   36480:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00036484 <z_handle_obj_poll_events>:
{
   36484:	4603      	mov	r3, r0
	return list->head == list;
   36486:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   36488:	4283      	cmp	r3, r0
   3648a:	d008      	beq.n	3649e <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   3648c:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   36490:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   36492:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   36494:	2300      	movs	r3, #0
	node->prev = NULL;
   36496:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   3649a:	f7ff bf99 	b.w	363d0 <signal_poll_event>
}
   3649e:	4770      	bx	lr

000364a0 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   364a0:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   364a2:	e9c0 0000 	strd	r0, r0, [r0]
   364a6:	6083      	str	r3, [r0, #8]
}
   364a8:	4770      	bx	lr

000364aa <z_impl_k_poll_signal_check>:
	*signaled = sig->signaled;
   364aa:	6883      	ldr	r3, [r0, #8]
   364ac:	600b      	str	r3, [r1, #0]
	*result = sig->result;
   364ae:	68c3      	ldr	r3, [r0, #12]
   364b0:	6013      	str	r3, [r2, #0]
}
   364b2:	4770      	bx	lr

000364b4 <k_free>:
	if (ptr != NULL) {
   364b4:	b120      	cbz	r0, 364c0 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   364b6:	1f01      	subs	r1, r0, #4
   364b8:	f850 0c04 	ldr.w	r0, [r0, #-4]
   364bc:	f7f2 bbd8 	b.w	28c70 <k_heap_free>
}
   364c0:	4770      	bx	lr

000364c2 <k_malloc>:
{
   364c2:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   364c4:	2004      	movs	r0, #4
   364c6:	f7f5 bfc7 	b.w	2c458 <k_aligned_alloc>

000364ca <k_calloc>:
{
   364ca:	b570      	push	{r4, r5, r6, lr}
	return __builtin_mul_overflow(a, b, result);
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_mul_overflow(a, b, result);
   364cc:	fba0 5401 	umull	r5, r4, r0, r1
   364d0:	b924      	cbnz	r4, 364dc <k_calloc+0x12>
	ret = k_malloc(bounds);
   364d2:	4628      	mov	r0, r5
   364d4:	f7ff fff5 	bl	364c2 <k_malloc>
	if (ret != NULL) {
   364d8:	4606      	mov	r6, r0
   364da:	b910      	cbnz	r0, 364e2 <k_calloc+0x18>
		return NULL;
   364dc:	2600      	movs	r6, #0
}
   364de:	4630      	mov	r0, r6
   364e0:	bd70      	pop	{r4, r5, r6, pc}
__ssp_bos_icheck3(memset, void *, int)
   364e2:	462a      	mov	r2, r5
   364e4:	4621      	mov	r1, r4
   364e6:	f000 f83f 	bl	36568 <memset>
   364ea:	e7f8      	b.n	364de <k_calloc+0x14>

000364ec <memchr>:
   364ec:	b2c9      	uxtb	r1, r1
   364ee:	4603      	mov	r3, r0
   364f0:	4402      	add	r2, r0
   364f2:	b510      	push	{r4, lr}
   364f4:	4293      	cmp	r3, r2
   364f6:	4618      	mov	r0, r3
   364f8:	d101      	bne.n	364fe <memchr+0x12>
   364fa:	2000      	movs	r0, #0
   364fc:	e003      	b.n	36506 <memchr+0x1a>
   364fe:	7804      	ldrb	r4, [r0, #0]
   36500:	3301      	adds	r3, #1
   36502:	428c      	cmp	r4, r1
   36504:	d1f6      	bne.n	364f4 <memchr+0x8>
   36506:	bd10      	pop	{r4, pc}

00036508 <memcmp>:
   36508:	3901      	subs	r1, #1
   3650a:	4402      	add	r2, r0
   3650c:	b510      	push	{r4, lr}
   3650e:	4290      	cmp	r0, r2
   36510:	d101      	bne.n	36516 <memcmp+0xe>
   36512:	2000      	movs	r0, #0
   36514:	e005      	b.n	36522 <memcmp+0x1a>
   36516:	7803      	ldrb	r3, [r0, #0]
   36518:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   3651c:	42a3      	cmp	r3, r4
   3651e:	d001      	beq.n	36524 <memcmp+0x1c>
   36520:	1b18      	subs	r0, r3, r4
   36522:	bd10      	pop	{r4, pc}
   36524:	3001      	adds	r0, #1
   36526:	e7f2      	b.n	3650e <memcmp+0x6>

00036528 <memcpy>:
   36528:	440a      	add	r2, r1
   3652a:	1e43      	subs	r3, r0, #1
   3652c:	4291      	cmp	r1, r2
   3652e:	d100      	bne.n	36532 <memcpy+0xa>
   36530:	4770      	bx	lr
   36532:	b510      	push	{r4, lr}
   36534:	f811 4b01 	ldrb.w	r4, [r1], #1
   36538:	4291      	cmp	r1, r2
   3653a:	f803 4f01 	strb.w	r4, [r3, #1]!
   3653e:	d1f9      	bne.n	36534 <memcpy+0xc>
   36540:	bd10      	pop	{r4, pc}

00036542 <__memcpy_chk>:
   36542:	429a      	cmp	r2, r3
   36544:	b508      	push	{r3, lr}
   36546:	d901      	bls.n	3654c <__memcpy_chk+0xa>
   36548:	f7dd f82c 	bl	135a4 <__chk_fail>
   3654c:	4281      	cmp	r1, r0
   3654e:	d804      	bhi.n	3655a <__memcpy_chk+0x18>
   36550:	188b      	adds	r3, r1, r2
   36552:	4298      	cmp	r0, r3
   36554:	d3f8      	bcc.n	36548 <__memcpy_chk+0x6>
   36556:	4281      	cmp	r1, r0
   36558:	d102      	bne.n	36560 <__memcpy_chk+0x1e>
   3655a:	1883      	adds	r3, r0, r2
   3655c:	4299      	cmp	r1, r3
   3655e:	d3f3      	bcc.n	36548 <__memcpy_chk+0x6>
   36560:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   36564:	f7ff bfe0 	b.w	36528 <memcpy>

00036568 <memset>:
   36568:	4402      	add	r2, r0
   3656a:	4603      	mov	r3, r0
   3656c:	4293      	cmp	r3, r2
   3656e:	d100      	bne.n	36572 <memset+0xa>
   36570:	4770      	bx	lr
   36572:	f803 1b01 	strb.w	r1, [r3], #1
   36576:	e7f9      	b.n	3656c <memset+0x4>

00036578 <__cvt>:
   36578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3657c:	b089      	sub	sp, #36	; 0x24
   3657e:	2b00      	cmp	r3, #0
   36580:	461d      	mov	r5, r3
   36582:	4614      	mov	r4, r2
   36584:	bfba      	itte	lt
   36586:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
   3658a:	4614      	movlt	r4, r2
   3658c:	2300      	movge	r3, #0
   3658e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   36590:	bfbc      	itt	lt
   36592:	461d      	movlt	r5, r3
   36594:	232d      	movlt	r3, #45	; 0x2d
   36596:	e9dd 9815 	ldrd	r9, r8, [sp, #84]	; 0x54
   3659a:	e9dd 6b12 	ldrd	r6, fp, [sp, #72]	; 0x48
   3659e:	f028 0a20 	bic.w	sl, r8, #32
   365a2:	7013      	strb	r3, [r2, #0]
   365a4:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   365a8:	d005      	beq.n	365b6 <__cvt+0x3e>
   365aa:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
   365ae:	d100      	bne.n	365b2 <__cvt+0x3a>
   365b0:	3601      	adds	r6, #1
   365b2:	2302      	movs	r3, #2
   365b4:	e000      	b.n	365b8 <__cvt+0x40>
   365b6:	2303      	movs	r3, #3
   365b8:	aa07      	add	r2, sp, #28
   365ba:	9204      	str	r2, [sp, #16]
   365bc:	aa06      	add	r2, sp, #24
   365be:	e9cd 3600 	strd	r3, r6, [sp]
   365c2:	e9cd 9202 	strd	r9, r2, [sp, #8]
   365c6:	462b      	mov	r3, r5
   365c8:	4622      	mov	r2, r4
   365ca:	f7d4 f9bd 	bl	a948 <_dtoa_r>
   365ce:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
   365d2:	4607      	mov	r7, r0
   365d4:	d119      	bne.n	3660a <__cvt+0x92>
   365d6:	f01b 0f01 	tst.w	fp, #1
   365da:	d00e      	beq.n	365fa <__cvt+0x82>
   365dc:	eb07 0806 	add.w	r8, r7, r6
   365e0:	2200      	movs	r2, #0
   365e2:	2300      	movs	r3, #0
   365e4:	4620      	mov	r0, r4
   365e6:	4629      	mov	r1, r5
   365e8:	f7d2 fa86 	bl	8af8 <__aeabi_dcmpeq>
   365ec:	b108      	cbz	r0, 365f2 <__cvt+0x7a>
   365ee:	f8cd 801c 	str.w	r8, [sp, #28]
   365f2:	2230      	movs	r2, #48	; 0x30
   365f4:	9b07      	ldr	r3, [sp, #28]
   365f6:	4543      	cmp	r3, r8
   365f8:	d321      	bcc.n	3663e <__cvt+0xc6>
   365fa:	9b07      	ldr	r3, [sp, #28]
   365fc:	4638      	mov	r0, r7
   365fe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   36600:	1bdb      	subs	r3, r3, r7
   36602:	6013      	str	r3, [r2, #0]
   36604:	b009      	add	sp, #36	; 0x24
   36606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3660a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   3660e:	d0e2      	beq.n	365d6 <__cvt+0x5e>
   36610:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   36614:	eb00 0806 	add.w	r8, r0, r6
   36618:	d1e2      	bne.n	365e0 <__cvt+0x68>
   3661a:	7803      	ldrb	r3, [r0, #0]
   3661c:	2b30      	cmp	r3, #48	; 0x30
   3661e:	d10a      	bne.n	36636 <__cvt+0xbe>
   36620:	2200      	movs	r2, #0
   36622:	2300      	movs	r3, #0
   36624:	4620      	mov	r0, r4
   36626:	4629      	mov	r1, r5
   36628:	f7d2 fa66 	bl	8af8 <__aeabi_dcmpeq>
   3662c:	b918      	cbnz	r0, 36636 <__cvt+0xbe>
   3662e:	f1c6 0601 	rsb	r6, r6, #1
   36632:	f8c9 6000 	str.w	r6, [r9]
   36636:	f8d9 3000 	ldr.w	r3, [r9]
   3663a:	4498      	add	r8, r3
   3663c:	e7d0      	b.n	365e0 <__cvt+0x68>
   3663e:	1c59      	adds	r1, r3, #1
   36640:	9107      	str	r1, [sp, #28]
   36642:	701a      	strb	r2, [r3, #0]
   36644:	e7d6      	b.n	365f4 <__cvt+0x7c>

00036646 <__exponent>:
   36646:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   36648:	2900      	cmp	r1, #0
   3664a:	7002      	strb	r2, [r0, #0]
   3664c:	bfba      	itte	lt
   3664e:	4249      	neglt	r1, r1
   36650:	232d      	movlt	r3, #45	; 0x2d
   36652:	232b      	movge	r3, #43	; 0x2b
   36654:	2909      	cmp	r1, #9
   36656:	7043      	strb	r3, [r0, #1]
   36658:	dd28      	ble.n	366ac <__exponent+0x66>
   3665a:	f10d 0307 	add.w	r3, sp, #7
   3665e:	270a      	movs	r7, #10
   36660:	461d      	mov	r5, r3
   36662:	461a      	mov	r2, r3
   36664:	3b01      	subs	r3, #1
   36666:	fbb1 f6f7 	udiv	r6, r1, r7
   3666a:	fb07 1416 	mls	r4, r7, r6, r1
   3666e:	3430      	adds	r4, #48	; 0x30
   36670:	f802 4c01 	strb.w	r4, [r2, #-1]
   36674:	460c      	mov	r4, r1
   36676:	4631      	mov	r1, r6
   36678:	2c63      	cmp	r4, #99	; 0x63
   3667a:	dcf2      	bgt.n	36662 <__exponent+0x1c>
   3667c:	3130      	adds	r1, #48	; 0x30
   3667e:	1e94      	subs	r4, r2, #2
   36680:	f803 1c01 	strb.w	r1, [r3, #-1]
   36684:	1c41      	adds	r1, r0, #1
   36686:	4623      	mov	r3, r4
   36688:	42ab      	cmp	r3, r5
   3668a:	d30a      	bcc.n	366a2 <__exponent+0x5c>
   3668c:	f10d 0309 	add.w	r3, sp, #9
   36690:	1a9b      	subs	r3, r3, r2
   36692:	42ac      	cmp	r4, r5
   36694:	bf88      	it	hi
   36696:	2300      	movhi	r3, #0
   36698:	3302      	adds	r3, #2
   3669a:	4403      	add	r3, r0
   3669c:	1a18      	subs	r0, r3, r0
   3669e:	b003      	add	sp, #12
   366a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   366a2:	f813 6b01 	ldrb.w	r6, [r3], #1
   366a6:	f801 6f01 	strb.w	r6, [r1, #1]!
   366aa:	e7ed      	b.n	36688 <__exponent+0x42>
   366ac:	2330      	movs	r3, #48	; 0x30
   366ae:	3130      	adds	r1, #48	; 0x30
   366b0:	7083      	strb	r3, [r0, #2]
   366b2:	1d03      	adds	r3, r0, #4
   366b4:	70c1      	strb	r1, [r0, #3]
   366b6:	e7f1      	b.n	3669c <__exponent+0x56>

000366b8 <_printf_common>:
   366b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   366bc:	4616      	mov	r6, r2
   366be:	4698      	mov	r8, r3
   366c0:	688a      	ldr	r2, [r1, #8]
   366c2:	4607      	mov	r7, r0
   366c4:	690b      	ldr	r3, [r1, #16]
   366c6:	460c      	mov	r4, r1
   366c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
   366cc:	4293      	cmp	r3, r2
   366ce:	bfb8      	it	lt
   366d0:	4613      	movlt	r3, r2
   366d2:	6033      	str	r3, [r6, #0]
   366d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   366d8:	b10a      	cbz	r2, 366de <_printf_common+0x26>
   366da:	3301      	adds	r3, #1
   366dc:	6033      	str	r3, [r6, #0]
   366de:	6823      	ldr	r3, [r4, #0]
   366e0:	0699      	lsls	r1, r3, #26
   366e2:	bf42      	ittt	mi
   366e4:	6833      	ldrmi	r3, [r6, #0]
   366e6:	3302      	addmi	r3, #2
   366e8:	6033      	strmi	r3, [r6, #0]
   366ea:	6825      	ldr	r5, [r4, #0]
   366ec:	f015 0506 	ands.w	r5, r5, #6
   366f0:	d106      	bne.n	36700 <_printf_common+0x48>
   366f2:	f104 0a19 	add.w	sl, r4, #25
   366f6:	68e3      	ldr	r3, [r4, #12]
   366f8:	6832      	ldr	r2, [r6, #0]
   366fa:	1a9b      	subs	r3, r3, r2
   366fc:	42ab      	cmp	r3, r5
   366fe:	dc2b      	bgt.n	36758 <_printf_common+0xa0>
   36700:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   36704:	6822      	ldr	r2, [r4, #0]
   36706:	3b00      	subs	r3, #0
   36708:	bf18      	it	ne
   3670a:	2301      	movne	r3, #1
   3670c:	0692      	lsls	r2, r2, #26
   3670e:	d430      	bmi.n	36772 <_printf_common+0xba>
   36710:	f104 0243 	add.w	r2, r4, #67	; 0x43
   36714:	4641      	mov	r1, r8
   36716:	4638      	mov	r0, r7
   36718:	47c8      	blx	r9
   3671a:	3001      	adds	r0, #1
   3671c:	d023      	beq.n	36766 <_printf_common+0xae>
   3671e:	6823      	ldr	r3, [r4, #0]
   36720:	341a      	adds	r4, #26
   36722:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   36726:	f003 0306 	and.w	r3, r3, #6
   3672a:	2b04      	cmp	r3, #4
   3672c:	bf0a      	itet	eq
   3672e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
   36732:	2500      	movne	r5, #0
   36734:	6833      	ldreq	r3, [r6, #0]
   36736:	f04f 0600 	mov.w	r6, #0
   3673a:	bf08      	it	eq
   3673c:	1aed      	subeq	r5, r5, r3
   3673e:	f854 3c12 	ldr.w	r3, [r4, #-18]
   36742:	bf08      	it	eq
   36744:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   36748:	4293      	cmp	r3, r2
   3674a:	bfc4      	itt	gt
   3674c:	1a9b      	subgt	r3, r3, r2
   3674e:	18ed      	addgt	r5, r5, r3
   36750:	42b5      	cmp	r5, r6
   36752:	d11a      	bne.n	3678a <_printf_common+0xd2>
   36754:	2000      	movs	r0, #0
   36756:	e008      	b.n	3676a <_printf_common+0xb2>
   36758:	2301      	movs	r3, #1
   3675a:	4652      	mov	r2, sl
   3675c:	4641      	mov	r1, r8
   3675e:	4638      	mov	r0, r7
   36760:	47c8      	blx	r9
   36762:	3001      	adds	r0, #1
   36764:	d103      	bne.n	3676e <_printf_common+0xb6>
   36766:	f04f 30ff 	mov.w	r0, #4294967295
   3676a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3676e:	3501      	adds	r5, #1
   36770:	e7c1      	b.n	366f6 <_printf_common+0x3e>
   36772:	18e1      	adds	r1, r4, r3
   36774:	1c5a      	adds	r2, r3, #1
   36776:	2030      	movs	r0, #48	; 0x30
   36778:	3302      	adds	r3, #2
   3677a:	4422      	add	r2, r4
   3677c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   36780:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   36784:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   36788:	e7c2      	b.n	36710 <_printf_common+0x58>
   3678a:	2301      	movs	r3, #1
   3678c:	4622      	mov	r2, r4
   3678e:	4641      	mov	r1, r8
   36790:	4638      	mov	r0, r7
   36792:	47c8      	blx	r9
   36794:	3001      	adds	r0, #1
   36796:	d0e6      	beq.n	36766 <_printf_common+0xae>
   36798:	3601      	adds	r6, #1
   3679a:	e7d9      	b.n	36750 <_printf_common+0x98>

0003679c <__sread>:
   3679c:	b510      	push	{r4, lr}
   3679e:	460c      	mov	r4, r1
   367a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   367a4:	f7f7 ff12 	bl	2e5cc <_read_r>
   367a8:	2800      	cmp	r0, #0
   367aa:	bfab      	itete	ge
   367ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   367ae:	89a3      	ldrhlt	r3, [r4, #12]
   367b0:	181b      	addge	r3, r3, r0
   367b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   367b6:	bfac      	ite	ge
   367b8:	6563      	strge	r3, [r4, #84]	; 0x54
   367ba:	81a3      	strhlt	r3, [r4, #12]
   367bc:	bd10      	pop	{r4, pc}

000367be <__seofread>:
   367be:	2000      	movs	r0, #0
   367c0:	4770      	bx	lr

000367c2 <__swrite>:
   367c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   367c6:	461f      	mov	r7, r3
   367c8:	898b      	ldrh	r3, [r1, #12]
   367ca:	4605      	mov	r5, r0
   367cc:	460c      	mov	r4, r1
   367ce:	05db      	lsls	r3, r3, #23
   367d0:	4616      	mov	r6, r2
   367d2:	d505      	bpl.n	367e0 <__swrite+0x1e>
   367d4:	2302      	movs	r3, #2
   367d6:	2200      	movs	r2, #0
   367d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   367dc:	f7f6 ff3a 	bl	2d654 <_lseek_r>
   367e0:	89a3      	ldrh	r3, [r4, #12]
   367e2:	4632      	mov	r2, r6
   367e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   367e8:	4628      	mov	r0, r5
   367ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   367ee:	81a3      	strh	r3, [r4, #12]
   367f0:	463b      	mov	r3, r7
   367f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   367f6:	f7f6 bcd7 	b.w	2d1a8 <_write_r>

000367fa <__sseek>:
   367fa:	b510      	push	{r4, lr}
   367fc:	460c      	mov	r4, r1
   367fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   36802:	f7f6 ff27 	bl	2d654 <_lseek_r>
   36806:	1c43      	adds	r3, r0, #1
   36808:	89a3      	ldrh	r3, [r4, #12]
   3680a:	bf15      	itete	ne
   3680c:	6560      	strne	r0, [r4, #84]	; 0x54
   3680e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   36812:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   36816:	81a3      	strheq	r3, [r4, #12]
   36818:	bf18      	it	ne
   3681a:	81a3      	strhne	r3, [r4, #12]
   3681c:	bd10      	pop	{r4, pc}

0003681e <__sclose>:
   3681e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   36822:	f7f6 bcd3 	b.w	2d1cc <_close_r>

00036826 <strchr>:
   36826:	b2c9      	uxtb	r1, r1
   36828:	4603      	mov	r3, r0
   3682a:	4618      	mov	r0, r3
   3682c:	f813 2b01 	ldrb.w	r2, [r3], #1
   36830:	b112      	cbz	r2, 36838 <strchr+0x12>
   36832:	428a      	cmp	r2, r1
   36834:	d1f9      	bne.n	3682a <strchr+0x4>
   36836:	4770      	bx	lr
   36838:	2900      	cmp	r1, #0
   3683a:	bf18      	it	ne
   3683c:	2000      	movne	r0, #0
   3683e:	4770      	bx	lr

00036840 <strcpy>:
   36840:	4603      	mov	r3, r0
   36842:	f811 2b01 	ldrb.w	r2, [r1], #1
   36846:	f803 2b01 	strb.w	r2, [r3], #1
   3684a:	2a00      	cmp	r2, #0
   3684c:	d1f9      	bne.n	36842 <strcpy+0x2>
   3684e:	4770      	bx	lr

00036850 <strncmp>:
   36850:	b510      	push	{r4, lr}
   36852:	b16a      	cbz	r2, 36870 <strncmp+0x20>
   36854:	3901      	subs	r1, #1
   36856:	1884      	adds	r4, r0, r2
   36858:	f810 2b01 	ldrb.w	r2, [r0], #1
   3685c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   36860:	429a      	cmp	r2, r3
   36862:	d103      	bne.n	3686c <strncmp+0x1c>
   36864:	42a0      	cmp	r0, r4
   36866:	d001      	beq.n	3686c <strncmp+0x1c>
   36868:	2a00      	cmp	r2, #0
   3686a:	d1f5      	bne.n	36858 <strncmp+0x8>
   3686c:	1ad0      	subs	r0, r2, r3
   3686e:	bd10      	pop	{r4, pc}
   36870:	4610      	mov	r0, r2
   36872:	e7fc      	b.n	3686e <strncmp+0x1e>

00036874 <strncpy>:
   36874:	3901      	subs	r1, #1
   36876:	4603      	mov	r3, r0
   36878:	b510      	push	{r4, lr}
   3687a:	b132      	cbz	r2, 3688a <strncpy+0x16>
   3687c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   36880:	3a01      	subs	r2, #1
   36882:	f803 4b01 	strb.w	r4, [r3], #1
   36886:	2c00      	cmp	r4, #0
   36888:	d1f7      	bne.n	3687a <strncpy+0x6>
   3688a:	441a      	add	r2, r3
   3688c:	2100      	movs	r1, #0
   3688e:	4293      	cmp	r3, r2
   36890:	d100      	bne.n	36894 <strncpy+0x20>
   36892:	bd10      	pop	{r4, pc}
   36894:	f803 1b01 	strb.w	r1, [r3], #1
   36898:	e7f9      	b.n	3688e <strncpy+0x1a>

0003689a <strnlen>:
   3689a:	4602      	mov	r2, r0
   3689c:	4401      	add	r1, r0
   3689e:	b510      	push	{r4, lr}
   368a0:	428a      	cmp	r2, r1
   368a2:	4613      	mov	r3, r2
   368a4:	d003      	beq.n	368ae <strnlen+0x14>
   368a6:	781c      	ldrb	r4, [r3, #0]
   368a8:	3201      	adds	r2, #1
   368aa:	2c00      	cmp	r4, #0
   368ac:	d1f8      	bne.n	368a0 <strnlen+0x6>
   368ae:	1a18      	subs	r0, r3, r0
   368b0:	bd10      	pop	{r4, pc}

000368b2 <strstr>:
   368b2:	780a      	ldrb	r2, [r1, #0]
   368b4:	b570      	push	{r4, r5, r6, lr}
   368b6:	b96a      	cbnz	r2, 368d4 <strstr+0x22>
   368b8:	bd70      	pop	{r4, r5, r6, pc}
   368ba:	429a      	cmp	r2, r3
   368bc:	d109      	bne.n	368d2 <strstr+0x20>
   368be:	460c      	mov	r4, r1
   368c0:	4605      	mov	r5, r0
   368c2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   368c6:	2b00      	cmp	r3, #0
   368c8:	d0f6      	beq.n	368b8 <strstr+0x6>
   368ca:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   368ce:	429e      	cmp	r6, r3
   368d0:	d0f7      	beq.n	368c2 <strstr+0x10>
   368d2:	3001      	adds	r0, #1
   368d4:	7803      	ldrb	r3, [r0, #0]
   368d6:	2b00      	cmp	r3, #0
   368d8:	d1ef      	bne.n	368ba <strstr+0x8>
   368da:	4618      	mov	r0, r3
   368dc:	e7ec      	b.n	368b8 <strstr+0x6>

000368de <sulp>:
   368de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   368e2:	4690      	mov	r8, r2
   368e4:	460f      	mov	r7, r1
   368e6:	f7f7 f9e3 	bl	2dcb0 <__ulp>
   368ea:	4604      	mov	r4, r0
   368ec:	460d      	mov	r5, r1
   368ee:	f1b8 0f00 	cmp.w	r8, #0
   368f2:	d011      	beq.n	36918 <sulp+0x3a>
   368f4:	f3c7 530a 	ubfx	r3, r7, #20, #11
   368f8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   368fc:	2b00      	cmp	r3, #0
   368fe:	dd0b      	ble.n	36918 <sulp+0x3a>
   36900:	051b      	lsls	r3, r3, #20
   36902:	2400      	movs	r4, #0
   36904:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   36908:	4622      	mov	r2, r4
   3690a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   3690e:	462b      	mov	r3, r5
   36910:	f7d1 fe8a 	bl	8628 <__aeabi_dmul>
   36914:	4604      	mov	r4, r0
   36916:	460d      	mov	r5, r1
   36918:	4620      	mov	r0, r4
   3691a:	4629      	mov	r1, r5
   3691c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00036920 <_strtol_r>:
   36920:	f7f6 ba64 	b.w	2cdec <_strtol_l.constprop.0>

00036924 <_strtoul_r>:
   36924:	f7f6 bb88 	b.w	2d038 <_strtoul_l.constprop.0>

00036928 <_vsniprintf_r>:
   36928:	b530      	push	{r4, r5, lr}
   3692a:	4614      	mov	r4, r2
   3692c:	b09b      	sub	sp, #108	; 0x6c
   3692e:	4605      	mov	r5, r0
   36930:	461a      	mov	r2, r3
   36932:	2c00      	cmp	r4, #0
   36934:	da05      	bge.n	36942 <_vsniprintf_r+0x1a>
   36936:	238b      	movs	r3, #139	; 0x8b
   36938:	6003      	str	r3, [r0, #0]
   3693a:	f04f 30ff 	mov.w	r0, #4294967295
   3693e:	b01b      	add	sp, #108	; 0x6c
   36940:	bd30      	pop	{r4, r5, pc}
   36942:	f44f 7302 	mov.w	r3, #520	; 0x208
   36946:	9100      	str	r1, [sp, #0]
   36948:	9104      	str	r1, [sp, #16]
   3694a:	4669      	mov	r1, sp
   3694c:	f8ad 300c 	strh.w	r3, [sp, #12]
   36950:	bf14      	ite	ne
   36952:	f104 33ff 	addne.w	r3, r4, #4294967295
   36956:	4623      	moveq	r3, r4
   36958:	9302      	str	r3, [sp, #8]
   3695a:	9305      	str	r3, [sp, #20]
   3695c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   36960:	f8ad 300e 	strh.w	r3, [sp, #14]
   36964:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   36966:	f7f7 fa65 	bl	2de34 <_svfiprintf_r>
   3696a:	1c43      	adds	r3, r0, #1
   3696c:	bfbc      	itt	lt
   3696e:	238b      	movlt	r3, #139	; 0x8b
   36970:	602b      	strlt	r3, [r5, #0]
   36972:	2c00      	cmp	r4, #0
   36974:	d0e3      	beq.n	3693e <_vsniprintf_r+0x16>
   36976:	9b00      	ldr	r3, [sp, #0]
   36978:	2200      	movs	r2, #0
   3697a:	701a      	strb	r2, [r3, #0]
   3697c:	e7df      	b.n	3693e <_vsniprintf_r+0x16>

0003697e <quorem>:
   3697e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36982:	6903      	ldr	r3, [r0, #16]
   36984:	4607      	mov	r7, r0
   36986:	690c      	ldr	r4, [r1, #16]
   36988:	42a3      	cmp	r3, r4
   3698a:	f2c0 8083 	blt.w	36a94 <quorem+0x116>
   3698e:	3c01      	subs	r4, #1
   36990:	f100 0514 	add.w	r5, r0, #20
   36994:	f101 0814 	add.w	r8, r1, #20
   36998:	00a3      	lsls	r3, r4, #2
   3699a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   3699e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   369a2:	9300      	str	r3, [sp, #0]
   369a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   369a8:	9301      	str	r3, [sp, #4]
   369aa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   369ae:	3301      	adds	r3, #1
   369b0:	429a      	cmp	r2, r3
   369b2:	fbb2 f6f3 	udiv	r6, r2, r3
   369b6:	d331      	bcc.n	36a1c <quorem+0x9e>
   369b8:	f04f 0a00 	mov.w	sl, #0
   369bc:	46c4      	mov	ip, r8
   369be:	46ae      	mov	lr, r5
   369c0:	46d3      	mov	fp, sl
   369c2:	f85c 3b04 	ldr.w	r3, [ip], #4
   369c6:	b298      	uxth	r0, r3
   369c8:	45e1      	cmp	r9, ip
   369ca:	ea4f 4313 	mov.w	r3, r3, lsr #16
   369ce:	fb06 a000 	mla	r0, r6, r0, sl
   369d2:	ea4f 4210 	mov.w	r2, r0, lsr #16
   369d6:	b280      	uxth	r0, r0
   369d8:	fb06 2303 	mla	r3, r6, r3, r2
   369dc:	f8de 2000 	ldr.w	r2, [lr]
   369e0:	b292      	uxth	r2, r2
   369e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   369e6:	eba2 0200 	sub.w	r2, r2, r0
   369ea:	b29b      	uxth	r3, r3
   369ec:	f8de 0000 	ldr.w	r0, [lr]
   369f0:	445a      	add	r2, fp
   369f2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
   369f6:	b292      	uxth	r2, r2
   369f8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
   369fc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   36a00:	ea4f 4b23 	mov.w	fp, r3, asr #16
   36a04:	f84e 2b04 	str.w	r2, [lr], #4
   36a08:	d2db      	bcs.n	369c2 <quorem+0x44>
   36a0a:	9b00      	ldr	r3, [sp, #0]
   36a0c:	58eb      	ldr	r3, [r5, r3]
   36a0e:	b92b      	cbnz	r3, 36a1c <quorem+0x9e>
   36a10:	9b01      	ldr	r3, [sp, #4]
   36a12:	3b04      	subs	r3, #4
   36a14:	429d      	cmp	r5, r3
   36a16:	461a      	mov	r2, r3
   36a18:	d330      	bcc.n	36a7c <quorem+0xfe>
   36a1a:	613c      	str	r4, [r7, #16]
   36a1c:	4638      	mov	r0, r7
   36a1e:	f000 f9c3 	bl	36da8 <__mcmp>
   36a22:	2800      	cmp	r0, #0
   36a24:	db26      	blt.n	36a74 <quorem+0xf6>
   36a26:	4629      	mov	r1, r5
   36a28:	2000      	movs	r0, #0
   36a2a:	f858 2b04 	ldr.w	r2, [r8], #4
   36a2e:	f8d1 c000 	ldr.w	ip, [r1]
   36a32:	fa1f fe82 	uxth.w	lr, r2
   36a36:	45c1      	cmp	r9, r8
   36a38:	fa1f f38c 	uxth.w	r3, ip
   36a3c:	ea4f 4212 	mov.w	r2, r2, lsr #16
   36a40:	eba3 030e 	sub.w	r3, r3, lr
   36a44:	4403      	add	r3, r0
   36a46:	ebc2 4223 	rsb	r2, r2, r3, asr #16
   36a4a:	b29b      	uxth	r3, r3
   36a4c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
   36a50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   36a54:	ea4f 4022 	mov.w	r0, r2, asr #16
   36a58:	f841 3b04 	str.w	r3, [r1], #4
   36a5c:	d2e5      	bcs.n	36a2a <quorem+0xac>
   36a5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   36a62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   36a66:	b922      	cbnz	r2, 36a72 <quorem+0xf4>
   36a68:	3b04      	subs	r3, #4
   36a6a:	429d      	cmp	r5, r3
   36a6c:	461a      	mov	r2, r3
   36a6e:	d30b      	bcc.n	36a88 <quorem+0x10a>
   36a70:	613c      	str	r4, [r7, #16]
   36a72:	3601      	adds	r6, #1
   36a74:	4630      	mov	r0, r6
   36a76:	b003      	add	sp, #12
   36a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36a7c:	6812      	ldr	r2, [r2, #0]
   36a7e:	3b04      	subs	r3, #4
   36a80:	2a00      	cmp	r2, #0
   36a82:	d1ca      	bne.n	36a1a <quorem+0x9c>
   36a84:	3c01      	subs	r4, #1
   36a86:	e7c5      	b.n	36a14 <quorem+0x96>
   36a88:	6812      	ldr	r2, [r2, #0]
   36a8a:	3b04      	subs	r3, #4
   36a8c:	2a00      	cmp	r2, #0
   36a8e:	d1ef      	bne.n	36a70 <quorem+0xf2>
   36a90:	3c01      	subs	r4, #1
   36a92:	e7ea      	b.n	36a6a <quorem+0xec>
   36a94:	2000      	movs	r0, #0
   36a96:	e7ee      	b.n	36a76 <quorem+0xf8>

00036a98 <rshift>:
   36a98:	6903      	ldr	r3, [r0, #16]
   36a9a:	114a      	asrs	r2, r1, #5
   36a9c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   36aa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   36aa4:	dc04      	bgt.n	36ab0 <rshift+0x18>
   36aa6:	2300      	movs	r3, #0
   36aa8:	6103      	str	r3, [r0, #16]
   36aaa:	2300      	movs	r3, #0
   36aac:	6143      	str	r3, [r0, #20]
   36aae:	e031      	b.n	36b14 <rshift+0x7c>
   36ab0:	f100 0414 	add.w	r4, r0, #20
   36ab4:	f011 011f 	ands.w	r1, r1, #31
   36ab8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   36abc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   36ac0:	d10c      	bne.n	36adc <rshift+0x44>
   36ac2:	f100 0710 	add.w	r7, r0, #16
   36ac6:	4629      	mov	r1, r5
   36ac8:	42b1      	cmp	r1, r6
   36aca:	d331      	bcc.n	36b30 <rshift+0x98>
   36acc:	1a9b      	subs	r3, r3, r2
   36ace:	1eea      	subs	r2, r5, #3
   36ad0:	009b      	lsls	r3, r3, #2
   36ad2:	4296      	cmp	r6, r2
   36ad4:	bf38      	it	cc
   36ad6:	2300      	movcc	r3, #0
   36ad8:	4423      	add	r3, r4
   36ada:	e015      	b.n	36b08 <rshift+0x70>
   36adc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   36ae0:	f1c1 0820 	rsb	r8, r1, #32
   36ae4:	f105 0e04 	add.w	lr, r5, #4
   36ae8:	46a1      	mov	r9, r4
   36aea:	40cf      	lsrs	r7, r1
   36aec:	4576      	cmp	r6, lr
   36aee:	46f4      	mov	ip, lr
   36af0:	d812      	bhi.n	36b18 <rshift+0x80>
   36af2:	1a9a      	subs	r2, r3, r2
   36af4:	3501      	adds	r5, #1
   36af6:	0092      	lsls	r2, r2, #2
   36af8:	3a04      	subs	r2, #4
   36afa:	42ae      	cmp	r6, r5
   36afc:	bf38      	it	cc
   36afe:	2200      	movcc	r2, #0
   36b00:	18a3      	adds	r3, r4, r2
   36b02:	50a7      	str	r7, [r4, r2]
   36b04:	b107      	cbz	r7, 36b08 <rshift+0x70>
   36b06:	3304      	adds	r3, #4
   36b08:	1b1a      	subs	r2, r3, r4
   36b0a:	42a3      	cmp	r3, r4
   36b0c:	ea4f 02a2 	mov.w	r2, r2, asr #2
   36b10:	6102      	str	r2, [r0, #16]
   36b12:	d0ca      	beq.n	36aaa <rshift+0x12>
   36b14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   36b18:	f8dc c000 	ldr.w	ip, [ip]
   36b1c:	fa0c fc08 	lsl.w	ip, ip, r8
   36b20:	ea4c 0707 	orr.w	r7, ip, r7
   36b24:	f849 7b04 	str.w	r7, [r9], #4
   36b28:	f85e 7b04 	ldr.w	r7, [lr], #4
   36b2c:	40cf      	lsrs	r7, r1
   36b2e:	e7dd      	b.n	36aec <rshift+0x54>
   36b30:	f851 cb04 	ldr.w	ip, [r1], #4
   36b34:	f847 cf04 	str.w	ip, [r7, #4]!
   36b38:	e7c6      	b.n	36ac8 <rshift+0x30>

00036b3a <__hexdig_fun>:
   36b3a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   36b3e:	2b09      	cmp	r3, #9
   36b40:	d802      	bhi.n	36b48 <__hexdig_fun+0xe>
   36b42:	3820      	subs	r0, #32
   36b44:	b2c0      	uxtb	r0, r0
   36b46:	4770      	bx	lr
   36b48:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   36b4c:	2b05      	cmp	r3, #5
   36b4e:	d801      	bhi.n	36b54 <__hexdig_fun+0x1a>
   36b50:	3847      	subs	r0, #71	; 0x47
   36b52:	e7f7      	b.n	36b44 <__hexdig_fun+0xa>
   36b54:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   36b58:	2b05      	cmp	r3, #5
   36b5a:	d801      	bhi.n	36b60 <__hexdig_fun+0x26>
   36b5c:	3827      	subs	r0, #39	; 0x27
   36b5e:	e7f1      	b.n	36b44 <__hexdig_fun+0xa>
   36b60:	2000      	movs	r0, #0
   36b62:	4770      	bx	lr

00036b64 <L_shift>:
   36b64:	f1c2 0208 	rsb	r2, r2, #8
   36b68:	0092      	lsls	r2, r2, #2
   36b6a:	b570      	push	{r4, r5, r6, lr}
   36b6c:	f1c2 0620 	rsb	r6, r2, #32
   36b70:	6843      	ldr	r3, [r0, #4]
   36b72:	6804      	ldr	r4, [r0, #0]
   36b74:	fa03 f506 	lsl.w	r5, r3, r6
   36b78:	40d3      	lsrs	r3, r2
   36b7a:	432c      	orrs	r4, r5
   36b7c:	6004      	str	r4, [r0, #0]
   36b7e:	f840 3f04 	str.w	r3, [r0, #4]!
   36b82:	4288      	cmp	r0, r1
   36b84:	d3f4      	bcc.n	36b70 <L_shift+0xc>
   36b86:	bd70      	pop	{r4, r5, r6, pc}

00036b88 <__match>:
   36b88:	6803      	ldr	r3, [r0, #0]
   36b8a:	3301      	adds	r3, #1
   36b8c:	b530      	push	{r4, r5, lr}
   36b8e:	f811 4b01 	ldrb.w	r4, [r1], #1
   36b92:	b914      	cbnz	r4, 36b9a <__match+0x12>
   36b94:	6003      	str	r3, [r0, #0]
   36b96:	2001      	movs	r0, #1
   36b98:	bd30      	pop	{r4, r5, pc}
   36b9a:	f813 2b01 	ldrb.w	r2, [r3], #1
   36b9e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   36ba2:	2d19      	cmp	r5, #25
   36ba4:	bf98      	it	ls
   36ba6:	3220      	addls	r2, #32
   36ba8:	42a2      	cmp	r2, r4
   36baa:	d0f0      	beq.n	36b8e <__match+0x6>
   36bac:	2000      	movs	r0, #0
   36bae:	e7f3      	b.n	36b98 <__match+0x10>

00036bb0 <__hexnan>:
   36bb0:	680b      	ldr	r3, [r1, #0]
   36bb2:	6801      	ldr	r1, [r0, #0]
   36bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36bb8:	115e      	asrs	r6, r3, #5
   36bba:	f013 031f 	ands.w	r3, r3, #31
   36bbe:	f04f 0500 	mov.w	r5, #0
   36bc2:	b087      	sub	sp, #28
   36bc4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   36bc8:	4682      	mov	sl, r0
   36bca:	4690      	mov	r8, r2
   36bcc:	46ab      	mov	fp, r5
   36bce:	bf18      	it	ne
   36bd0:	3604      	addne	r6, #4
   36bd2:	9301      	str	r3, [sp, #4]
   36bd4:	9502      	str	r5, [sp, #8]
   36bd6:	1f37      	subs	r7, r6, #4
   36bd8:	f846 5c04 	str.w	r5, [r6, #-4]
   36bdc:	46b9      	mov	r9, r7
   36bde:	463c      	mov	r4, r7
   36be0:	1c4b      	adds	r3, r1, #1
   36be2:	784a      	ldrb	r2, [r1, #1]
   36be4:	9303      	str	r3, [sp, #12]
   36be6:	b342      	cbz	r2, 36c3a <__hexnan+0x8a>
   36be8:	4610      	mov	r0, r2
   36bea:	9105      	str	r1, [sp, #20]
   36bec:	9204      	str	r2, [sp, #16]
   36bee:	f7ff ffa4 	bl	36b3a <__hexdig_fun>
   36bf2:	2800      	cmp	r0, #0
   36bf4:	d151      	bne.n	36c9a <__hexnan+0xea>
   36bf6:	9a04      	ldr	r2, [sp, #16]
   36bf8:	9905      	ldr	r1, [sp, #20]
   36bfa:	2a20      	cmp	r2, #32
   36bfc:	d818      	bhi.n	36c30 <__hexnan+0x80>
   36bfe:	9b02      	ldr	r3, [sp, #8]
   36c00:	459b      	cmp	fp, r3
   36c02:	dd13      	ble.n	36c2c <__hexnan+0x7c>
   36c04:	454c      	cmp	r4, r9
   36c06:	d206      	bcs.n	36c16 <__hexnan+0x66>
   36c08:	2d07      	cmp	r5, #7
   36c0a:	dc04      	bgt.n	36c16 <__hexnan+0x66>
   36c0c:	462a      	mov	r2, r5
   36c0e:	4649      	mov	r1, r9
   36c10:	4620      	mov	r0, r4
   36c12:	f7ff ffa7 	bl	36b64 <L_shift>
   36c16:	4544      	cmp	r4, r8
   36c18:	d951      	bls.n	36cbe <__hexnan+0x10e>
   36c1a:	2300      	movs	r3, #0
   36c1c:	f1a4 0904 	sub.w	r9, r4, #4
   36c20:	f8cd b008 	str.w	fp, [sp, #8]
   36c24:	f844 3c04 	str.w	r3, [r4, #-4]
   36c28:	461d      	mov	r5, r3
   36c2a:	464c      	mov	r4, r9
   36c2c:	9903      	ldr	r1, [sp, #12]
   36c2e:	e7d7      	b.n	36be0 <__hexnan+0x30>
   36c30:	2a29      	cmp	r2, #41	; 0x29
   36c32:	d156      	bne.n	36ce2 <__hexnan+0x132>
   36c34:	3102      	adds	r1, #2
   36c36:	f8ca 1000 	str.w	r1, [sl]
   36c3a:	f1bb 0f00 	cmp.w	fp, #0
   36c3e:	d050      	beq.n	36ce2 <__hexnan+0x132>
   36c40:	454c      	cmp	r4, r9
   36c42:	d206      	bcs.n	36c52 <__hexnan+0xa2>
   36c44:	2d07      	cmp	r5, #7
   36c46:	dc04      	bgt.n	36c52 <__hexnan+0xa2>
   36c48:	462a      	mov	r2, r5
   36c4a:	4649      	mov	r1, r9
   36c4c:	4620      	mov	r0, r4
   36c4e:	f7ff ff89 	bl	36b64 <L_shift>
   36c52:	4544      	cmp	r4, r8
   36c54:	d935      	bls.n	36cc2 <__hexnan+0x112>
   36c56:	f1a8 0204 	sub.w	r2, r8, #4
   36c5a:	4623      	mov	r3, r4
   36c5c:	f853 1b04 	ldr.w	r1, [r3], #4
   36c60:	429f      	cmp	r7, r3
   36c62:	f842 1f04 	str.w	r1, [r2, #4]!
   36c66:	d2f9      	bcs.n	36c5c <__hexnan+0xac>
   36c68:	1b3b      	subs	r3, r7, r4
   36c6a:	3e03      	subs	r6, #3
   36c6c:	3401      	adds	r4, #1
   36c6e:	2200      	movs	r2, #0
   36c70:	f023 0303 	bic.w	r3, r3, #3
   36c74:	3304      	adds	r3, #4
   36c76:	42b4      	cmp	r4, r6
   36c78:	bf88      	it	hi
   36c7a:	2304      	movhi	r3, #4
   36c7c:	4443      	add	r3, r8
   36c7e:	f843 2b04 	str.w	r2, [r3], #4
   36c82:	429f      	cmp	r7, r3
   36c84:	d2fb      	bcs.n	36c7e <__hexnan+0xce>
   36c86:	683b      	ldr	r3, [r7, #0]
   36c88:	b91b      	cbnz	r3, 36c92 <__hexnan+0xe2>
   36c8a:	4547      	cmp	r7, r8
   36c8c:	d127      	bne.n	36cde <__hexnan+0x12e>
   36c8e:	2301      	movs	r3, #1
   36c90:	603b      	str	r3, [r7, #0]
   36c92:	2005      	movs	r0, #5
   36c94:	b007      	add	sp, #28
   36c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36c9a:	3501      	adds	r5, #1
   36c9c:	f10b 0b01 	add.w	fp, fp, #1
   36ca0:	2d08      	cmp	r5, #8
   36ca2:	dd05      	ble.n	36cb0 <__hexnan+0x100>
   36ca4:	4544      	cmp	r4, r8
   36ca6:	d9c1      	bls.n	36c2c <__hexnan+0x7c>
   36ca8:	2300      	movs	r3, #0
   36caa:	3c04      	subs	r4, #4
   36cac:	2501      	movs	r5, #1
   36cae:	6023      	str	r3, [r4, #0]
   36cb0:	6822      	ldr	r2, [r4, #0]
   36cb2:	f000 000f 	and.w	r0, r0, #15
   36cb6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
   36cba:	6020      	str	r0, [r4, #0]
   36cbc:	e7b6      	b.n	36c2c <__hexnan+0x7c>
   36cbe:	2508      	movs	r5, #8
   36cc0:	e7b4      	b.n	36c2c <__hexnan+0x7c>
   36cc2:	9b01      	ldr	r3, [sp, #4]
   36cc4:	2b00      	cmp	r3, #0
   36cc6:	d0de      	beq.n	36c86 <__hexnan+0xd6>
   36cc8:	f1c3 0320 	rsb	r3, r3, #32
   36ccc:	f04f 32ff 	mov.w	r2, #4294967295
   36cd0:	40da      	lsrs	r2, r3
   36cd2:	f856 3c04 	ldr.w	r3, [r6, #-4]
   36cd6:	4013      	ands	r3, r2
   36cd8:	f846 3c04 	str.w	r3, [r6, #-4]
   36cdc:	e7d3      	b.n	36c86 <__hexnan+0xd6>
   36cde:	3f04      	subs	r7, #4
   36ce0:	e7d1      	b.n	36c86 <__hexnan+0xd6>
   36ce2:	2004      	movs	r0, #4
   36ce4:	e7d6      	b.n	36c94 <__hexnan+0xe4>

00036ce6 <__ascii_mbtowc>:
   36ce6:	b082      	sub	sp, #8
   36ce8:	b901      	cbnz	r1, 36cec <__ascii_mbtowc+0x6>
   36cea:	a901      	add	r1, sp, #4
   36cec:	b142      	cbz	r2, 36d00 <__ascii_mbtowc+0x1a>
   36cee:	b14b      	cbz	r3, 36d04 <__ascii_mbtowc+0x1e>
   36cf0:	7813      	ldrb	r3, [r2, #0]
   36cf2:	600b      	str	r3, [r1, #0]
   36cf4:	7812      	ldrb	r2, [r2, #0]
   36cf6:	1e10      	subs	r0, r2, #0
   36cf8:	bf18      	it	ne
   36cfa:	2001      	movne	r0, #1
   36cfc:	b002      	add	sp, #8
   36cfe:	4770      	bx	lr
   36d00:	4610      	mov	r0, r2
   36d02:	e7fb      	b.n	36cfc <__ascii_mbtowc+0x16>
   36d04:	f06f 0001 	mvn.w	r0, #1
   36d08:	e7f8      	b.n	36cfc <__ascii_mbtowc+0x16>

00036d0a <__hi0bits>:
   36d0a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   36d0e:	4603      	mov	r3, r0
   36d10:	bf36      	itet	cc
   36d12:	0403      	lslcc	r3, r0, #16
   36d14:	2000      	movcs	r0, #0
   36d16:	2010      	movcc	r0, #16
   36d18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   36d1c:	bf3c      	itt	cc
   36d1e:	021b      	lslcc	r3, r3, #8
   36d20:	3008      	addcc	r0, #8
   36d22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   36d26:	bf3c      	itt	cc
   36d28:	011b      	lslcc	r3, r3, #4
   36d2a:	3004      	addcc	r0, #4
   36d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   36d30:	d303      	bcc.n	36d3a <__hi0bits+0x30>
   36d32:	2b00      	cmp	r3, #0
   36d34:	db0a      	blt.n	36d4c <__hi0bits+0x42>
   36d36:	3001      	adds	r0, #1
   36d38:	4770      	bx	lr
   36d3a:	009b      	lsls	r3, r3, #2
   36d3c:	d501      	bpl.n	36d42 <__hi0bits+0x38>
   36d3e:	3002      	adds	r0, #2
   36d40:	4770      	bx	lr
   36d42:	005b      	lsls	r3, r3, #1
   36d44:	d501      	bpl.n	36d4a <__hi0bits+0x40>
   36d46:	3003      	adds	r0, #3
   36d48:	4770      	bx	lr
   36d4a:	2020      	movs	r0, #32
   36d4c:	4770      	bx	lr

00036d4e <__lo0bits>:
   36d4e:	6803      	ldr	r3, [r0, #0]
   36d50:	4602      	mov	r2, r0
   36d52:	f013 0007 	ands.w	r0, r3, #7
   36d56:	d00b      	beq.n	36d70 <__lo0bits+0x22>
   36d58:	07d9      	lsls	r1, r3, #31
   36d5a:	d421      	bmi.n	36da0 <__lo0bits+0x52>
   36d5c:	0798      	lsls	r0, r3, #30
   36d5e:	bf47      	ittee	mi
   36d60:	085b      	lsrmi	r3, r3, #1
   36d62:	2001      	movmi	r0, #1
   36d64:	089b      	lsrpl	r3, r3, #2
   36d66:	2002      	movpl	r0, #2
   36d68:	bf4c      	ite	mi
   36d6a:	6013      	strmi	r3, [r2, #0]
   36d6c:	6013      	strpl	r3, [r2, #0]
   36d6e:	4770      	bx	lr
   36d70:	b299      	uxth	r1, r3
   36d72:	b909      	cbnz	r1, 36d78 <__lo0bits+0x2a>
   36d74:	0c1b      	lsrs	r3, r3, #16
   36d76:	2010      	movs	r0, #16
   36d78:	b2d9      	uxtb	r1, r3
   36d7a:	b909      	cbnz	r1, 36d80 <__lo0bits+0x32>
   36d7c:	3008      	adds	r0, #8
   36d7e:	0a1b      	lsrs	r3, r3, #8
   36d80:	0719      	lsls	r1, r3, #28
   36d82:	bf04      	itt	eq
   36d84:	091b      	lsreq	r3, r3, #4
   36d86:	3004      	addeq	r0, #4
   36d88:	0799      	lsls	r1, r3, #30
   36d8a:	bf04      	itt	eq
   36d8c:	089b      	lsreq	r3, r3, #2
   36d8e:	3002      	addeq	r0, #2
   36d90:	07d9      	lsls	r1, r3, #31
   36d92:	d403      	bmi.n	36d9c <__lo0bits+0x4e>
   36d94:	085b      	lsrs	r3, r3, #1
   36d96:	f100 0001 	add.w	r0, r0, #1
   36d9a:	d003      	beq.n	36da4 <__lo0bits+0x56>
   36d9c:	6013      	str	r3, [r2, #0]
   36d9e:	4770      	bx	lr
   36da0:	2000      	movs	r0, #0
   36da2:	4770      	bx	lr
   36da4:	2020      	movs	r0, #32
   36da6:	4770      	bx	lr

00036da8 <__mcmp>:
   36da8:	4603      	mov	r3, r0
   36daa:	690a      	ldr	r2, [r1, #16]
   36dac:	6900      	ldr	r0, [r0, #16]
   36dae:	1a80      	subs	r0, r0, r2
   36db0:	b530      	push	{r4, r5, lr}
   36db2:	d10e      	bne.n	36dd2 <__mcmp+0x2a>
   36db4:	3314      	adds	r3, #20
   36db6:	3114      	adds	r1, #20
   36db8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   36dbc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   36dc0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   36dc4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   36dc8:	4295      	cmp	r5, r2
   36dca:	d003      	beq.n	36dd4 <__mcmp+0x2c>
   36dcc:	d205      	bcs.n	36dda <__mcmp+0x32>
   36dce:	f04f 30ff 	mov.w	r0, #4294967295
   36dd2:	bd30      	pop	{r4, r5, pc}
   36dd4:	42a3      	cmp	r3, r4
   36dd6:	d3f3      	bcc.n	36dc0 <__mcmp+0x18>
   36dd8:	e7fb      	b.n	36dd2 <__mcmp+0x2a>
   36dda:	2001      	movs	r0, #1
   36ddc:	e7f9      	b.n	36dd2 <__mcmp+0x2a>

00036dde <__ratio>:
   36dde:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36de2:	b085      	sub	sp, #20
   36de4:	e9cd 1000 	strd	r1, r0, [sp]
   36de8:	a902      	add	r1, sp, #8
   36dea:	f7f6 ff81 	bl	2dcf0 <__b2d>
   36dee:	468b      	mov	fp, r1
   36df0:	4606      	mov	r6, r0
   36df2:	460f      	mov	r7, r1
   36df4:	9800      	ldr	r0, [sp, #0]
   36df6:	a903      	add	r1, sp, #12
   36df8:	f7f6 ff7a 	bl	2dcf0 <__b2d>
   36dfc:	9b01      	ldr	r3, [sp, #4]
   36dfe:	4689      	mov	r9, r1
   36e00:	460d      	mov	r5, r1
   36e02:	6919      	ldr	r1, [r3, #16]
   36e04:	4604      	mov	r4, r0
   36e06:	9b00      	ldr	r3, [sp, #0]
   36e08:	4630      	mov	r0, r6
   36e0a:	691b      	ldr	r3, [r3, #16]
   36e0c:	1ac9      	subs	r1, r1, r3
   36e0e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   36e12:	1a9b      	subs	r3, r3, r2
   36e14:	eb03 1341 	add.w	r3, r3, r1, lsl #5
   36e18:	2b00      	cmp	r3, #0
   36e1a:	bfdb      	ittet	le
   36e1c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   36e20:	462a      	movle	r2, r5
   36e22:	463a      	movgt	r2, r7
   36e24:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
   36e28:	bfc8      	it	gt
   36e2a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
   36e2e:	4622      	mov	r2, r4
   36e30:	464b      	mov	r3, r9
   36e32:	4659      	mov	r1, fp
   36e34:	f7d1 fd22 	bl	887c <__aeabi_ddiv>
   36e38:	b005      	add	sp, #20
   36e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00036e3e <__copybits>:
   36e3e:	3901      	subs	r1, #1
   36e40:	f102 0314 	add.w	r3, r2, #20
   36e44:	1149      	asrs	r1, r1, #5
   36e46:	b570      	push	{r4, r5, r6, lr}
   36e48:	3101      	adds	r1, #1
   36e4a:	6914      	ldr	r4, [r2, #16]
   36e4c:	1f05      	subs	r5, r0, #4
   36e4e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   36e52:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   36e56:	42a3      	cmp	r3, r4
   36e58:	d30c      	bcc.n	36e74 <__copybits+0x36>
   36e5a:	1aa3      	subs	r3, r4, r2
   36e5c:	3211      	adds	r2, #17
   36e5e:	3b11      	subs	r3, #17
   36e60:	f023 0303 	bic.w	r3, r3, #3
   36e64:	42a2      	cmp	r2, r4
   36e66:	bf88      	it	hi
   36e68:	2300      	movhi	r3, #0
   36e6a:	4418      	add	r0, r3
   36e6c:	2300      	movs	r3, #0
   36e6e:	4288      	cmp	r0, r1
   36e70:	d305      	bcc.n	36e7e <__copybits+0x40>
   36e72:	bd70      	pop	{r4, r5, r6, pc}
   36e74:	f853 6b04 	ldr.w	r6, [r3], #4
   36e78:	f845 6f04 	str.w	r6, [r5, #4]!
   36e7c:	e7eb      	b.n	36e56 <__copybits+0x18>
   36e7e:	f840 3b04 	str.w	r3, [r0], #4
   36e82:	e7f4      	b.n	36e6e <__copybits+0x30>

00036e84 <__any_on>:
   36e84:	f100 0214 	add.w	r2, r0, #20
   36e88:	114b      	asrs	r3, r1, #5
   36e8a:	6900      	ldr	r0, [r0, #16]
   36e8c:	4298      	cmp	r0, r3
   36e8e:	b510      	push	{r4, lr}
   36e90:	db11      	blt.n	36eb6 <__any_on+0x32>
   36e92:	dd0a      	ble.n	36eaa <__any_on+0x26>
   36e94:	f011 011f 	ands.w	r1, r1, #31
   36e98:	d007      	beq.n	36eaa <__any_on+0x26>
   36e9a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   36e9e:	fa24 f001 	lsr.w	r0, r4, r1
   36ea2:	fa00 f101 	lsl.w	r1, r0, r1
   36ea6:	428c      	cmp	r4, r1
   36ea8:	d10b      	bne.n	36ec2 <__any_on+0x3e>
   36eaa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   36eae:	4293      	cmp	r3, r2
   36eb0:	d803      	bhi.n	36eba <__any_on+0x36>
   36eb2:	2000      	movs	r0, #0
   36eb4:	bd10      	pop	{r4, pc}
   36eb6:	4603      	mov	r3, r0
   36eb8:	e7f7      	b.n	36eaa <__any_on+0x26>
   36eba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   36ebe:	2900      	cmp	r1, #0
   36ec0:	d0f5      	beq.n	36eae <__any_on+0x2a>
   36ec2:	2001      	movs	r0, #1
   36ec4:	e7f6      	b.n	36eb4 <__any_on+0x30>

00036ec6 <_calloc_r>:
   36ec6:	b538      	push	{r3, r4, r5, lr}
   36ec8:	fb02 f501 	mul.w	r5, r2, r1
   36ecc:	4629      	mov	r1, r5
   36ece:	f7f5 fb77 	bl	2c5c0 <_malloc_r>
   36ed2:	4604      	mov	r4, r0
   36ed4:	b118      	cbz	r0, 36ede <_calloc_r+0x18>
   36ed6:	462a      	mov	r2, r5
   36ed8:	2100      	movs	r1, #0
   36eda:	f7ff fb45 	bl	36568 <memset>
   36ede:	4620      	mov	r0, r4
   36ee0:	bd38      	pop	{r3, r4, r5, pc}

00036ee2 <_realloc_r>:
   36ee2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   36ee4:	4607      	mov	r7, r0
   36ee6:	4615      	mov	r5, r2
   36ee8:	460c      	mov	r4, r1
   36eea:	b921      	cbnz	r1, 36ef6 <_realloc_r+0x14>
   36eec:	4611      	mov	r1, r2
   36eee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   36ef2:	f7f5 bb65 	b.w	2c5c0 <_malloc_r>
   36ef6:	b922      	cbnz	r2, 36f02 <_realloc_r+0x20>
   36ef8:	f7f5 fb18 	bl	2c52c <_free_r>
   36efc:	2400      	movs	r4, #0
   36efe:	4620      	mov	r0, r4
   36f00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   36f02:	f000 fa11 	bl	37328 <_malloc_usable_size_r>
   36f06:	42a8      	cmp	r0, r5
   36f08:	d2f9      	bcs.n	36efe <_realloc_r+0x1c>
   36f0a:	4629      	mov	r1, r5
   36f0c:	4638      	mov	r0, r7
   36f0e:	f7f5 fb57 	bl	2c5c0 <_malloc_r>
   36f12:	4606      	mov	r6, r0
   36f14:	2800      	cmp	r0, #0
   36f16:	d0f1      	beq.n	36efc <_realloc_r+0x1a>
   36f18:	4621      	mov	r1, r4
   36f1a:	462a      	mov	r2, r5
   36f1c:	f7ff fb04 	bl	36528 <memcpy>
   36f20:	4621      	mov	r1, r4
   36f22:	4638      	mov	r0, r7
   36f24:	4634      	mov	r4, r6
   36f26:	f7f5 fb01 	bl	2c52c <_free_r>
   36f2a:	e7e8      	b.n	36efe <_realloc_r+0x1c>

00036f2c <__ssputs_r>:
   36f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   36f30:	461f      	mov	r7, r3
   36f32:	688e      	ldr	r6, [r1, #8]
   36f34:	4682      	mov	sl, r0
   36f36:	460c      	mov	r4, r1
   36f38:	42be      	cmp	r6, r7
   36f3a:	4690      	mov	r8, r2
   36f3c:	680b      	ldr	r3, [r1, #0]
   36f3e:	d82d      	bhi.n	36f9c <__ssputs_r+0x70>
   36f40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   36f44:	f412 6f90 	tst.w	r2, #1152	; 0x480
   36f48:	d026      	beq.n	36f98 <__ssputs_r+0x6c>
   36f4a:	6965      	ldr	r5, [r4, #20]
   36f4c:	6909      	ldr	r1, [r1, #16]
   36f4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   36f52:	eba3 0901 	sub.w	r9, r3, r1
   36f56:	1c7b      	adds	r3, r7, #1
   36f58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   36f5c:	444b      	add	r3, r9
   36f5e:	106d      	asrs	r5, r5, #1
   36f60:	429d      	cmp	r5, r3
   36f62:	bf38      	it	cc
   36f64:	461d      	movcc	r5, r3
   36f66:	0553      	lsls	r3, r2, #21
   36f68:	d527      	bpl.n	36fba <__ssputs_r+0x8e>
   36f6a:	4629      	mov	r1, r5
   36f6c:	f7f5 fb28 	bl	2c5c0 <_malloc_r>
   36f70:	4606      	mov	r6, r0
   36f72:	b360      	cbz	r0, 36fce <__ssputs_r+0xa2>
   36f74:	464a      	mov	r2, r9
   36f76:	6921      	ldr	r1, [r4, #16]
   36f78:	f7ff fad6 	bl	36528 <memcpy>
   36f7c:	89a3      	ldrh	r3, [r4, #12]
   36f7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   36f82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   36f86:	81a3      	strh	r3, [r4, #12]
   36f88:	6126      	str	r6, [r4, #16]
   36f8a:	444e      	add	r6, r9
   36f8c:	6165      	str	r5, [r4, #20]
   36f8e:	eba5 0509 	sub.w	r5, r5, r9
   36f92:	6026      	str	r6, [r4, #0]
   36f94:	463e      	mov	r6, r7
   36f96:	60a5      	str	r5, [r4, #8]
   36f98:	42be      	cmp	r6, r7
   36f9a:	d900      	bls.n	36f9e <__ssputs_r+0x72>
   36f9c:	463e      	mov	r6, r7
   36f9e:	4632      	mov	r2, r6
   36fa0:	4641      	mov	r1, r8
   36fa2:	6820      	ldr	r0, [r4, #0]
   36fa4:	f000 f9a6 	bl	372f4 <memmove>
   36fa8:	68a3      	ldr	r3, [r4, #8]
   36faa:	2000      	movs	r0, #0
   36fac:	1b9b      	subs	r3, r3, r6
   36fae:	60a3      	str	r3, [r4, #8]
   36fb0:	6823      	ldr	r3, [r4, #0]
   36fb2:	4433      	add	r3, r6
   36fb4:	6023      	str	r3, [r4, #0]
   36fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   36fba:	462a      	mov	r2, r5
   36fbc:	f7ff ff91 	bl	36ee2 <_realloc_r>
   36fc0:	4606      	mov	r6, r0
   36fc2:	2800      	cmp	r0, #0
   36fc4:	d1e0      	bne.n	36f88 <__ssputs_r+0x5c>
   36fc6:	6921      	ldr	r1, [r4, #16]
   36fc8:	4650      	mov	r0, sl
   36fca:	f7f5 faaf 	bl	2c52c <_free_r>
   36fce:	230c      	movs	r3, #12
   36fd0:	f04f 30ff 	mov.w	r0, #4294967295
   36fd4:	f8ca 3000 	str.w	r3, [sl]
   36fd8:	89a3      	ldrh	r3, [r4, #12]
   36fda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   36fde:	81a3      	strh	r3, [r4, #12]
   36fe0:	e7e9      	b.n	36fb6 <__ssputs_r+0x8a>

00036fe2 <_sungetc_r>:
   36fe2:	b538      	push	{r3, r4, r5, lr}
   36fe4:	1c4b      	adds	r3, r1, #1
   36fe6:	4614      	mov	r4, r2
   36fe8:	d103      	bne.n	36ff2 <_sungetc_r+0x10>
   36fea:	f04f 35ff 	mov.w	r5, #4294967295
   36fee:	4628      	mov	r0, r5
   36ff0:	bd38      	pop	{r3, r4, r5, pc}
   36ff2:	8993      	ldrh	r3, [r2, #12]
   36ff4:	b2cd      	uxtb	r5, r1
   36ff6:	f023 0320 	bic.w	r3, r3, #32
   36ffa:	8193      	strh	r3, [r2, #12]
   36ffc:	6853      	ldr	r3, [r2, #4]
   36ffe:	6b52      	ldr	r2, [r2, #52]	; 0x34
   37000:	b18a      	cbz	r2, 37026 <_sungetc_r+0x44>
   37002:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   37004:	429a      	cmp	r2, r3
   37006:	dd08      	ble.n	3701a <_sungetc_r+0x38>
   37008:	6823      	ldr	r3, [r4, #0]
   3700a:	1e5a      	subs	r2, r3, #1
   3700c:	6022      	str	r2, [r4, #0]
   3700e:	f803 5c01 	strb.w	r5, [r3, #-1]
   37012:	6863      	ldr	r3, [r4, #4]
   37014:	3301      	adds	r3, #1
   37016:	6063      	str	r3, [r4, #4]
   37018:	e7e9      	b.n	36fee <_sungetc_r+0xc>
   3701a:	4621      	mov	r1, r4
   3701c:	f000 f872 	bl	37104 <__submore>
   37020:	2800      	cmp	r0, #0
   37022:	d0f1      	beq.n	37008 <_sungetc_r+0x26>
   37024:	e7e1      	b.n	36fea <_sungetc_r+0x8>
   37026:	6921      	ldr	r1, [r4, #16]
   37028:	6822      	ldr	r2, [r4, #0]
   3702a:	b141      	cbz	r1, 3703e <_sungetc_r+0x5c>
   3702c:	4291      	cmp	r1, r2
   3702e:	d206      	bcs.n	3703e <_sungetc_r+0x5c>
   37030:	f812 1c01 	ldrb.w	r1, [r2, #-1]
   37034:	42a9      	cmp	r1, r5
   37036:	d102      	bne.n	3703e <_sungetc_r+0x5c>
   37038:	3a01      	subs	r2, #1
   3703a:	6022      	str	r2, [r4, #0]
   3703c:	e7ea      	b.n	37014 <_sungetc_r+0x32>
   3703e:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
   37042:	f104 0344 	add.w	r3, r4, #68	; 0x44
   37046:	6363      	str	r3, [r4, #52]	; 0x34
   37048:	2303      	movs	r3, #3
   3704a:	63a3      	str	r3, [r4, #56]	; 0x38
   3704c:	4623      	mov	r3, r4
   3704e:	f803 5f46 	strb.w	r5, [r3, #70]!
   37052:	6023      	str	r3, [r4, #0]
   37054:	2301      	movs	r3, #1
   37056:	e7de      	b.n	37016 <_sungetc_r+0x34>

00037058 <__ssrefill_r>:
   37058:	b510      	push	{r4, lr}
   3705a:	460c      	mov	r4, r1
   3705c:	6b49      	ldr	r1, [r1, #52]	; 0x34
   3705e:	b169      	cbz	r1, 3707c <__ssrefill_r+0x24>
   37060:	f104 0344 	add.w	r3, r4, #68	; 0x44
   37064:	4299      	cmp	r1, r3
   37066:	d001      	beq.n	3706c <__ssrefill_r+0x14>
   37068:	f7f5 fa60 	bl	2c52c <_free_r>
   3706c:	2000      	movs	r0, #0
   3706e:	6c23      	ldr	r3, [r4, #64]	; 0x40
   37070:	6360      	str	r0, [r4, #52]	; 0x34
   37072:	6063      	str	r3, [r4, #4]
   37074:	b113      	cbz	r3, 3707c <__ssrefill_r+0x24>
   37076:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   37078:	6023      	str	r3, [r4, #0]
   3707a:	bd10      	pop	{r4, pc}
   3707c:	6923      	ldr	r3, [r4, #16]
   3707e:	f04f 30ff 	mov.w	r0, #4294967295
   37082:	6023      	str	r3, [r4, #0]
   37084:	2300      	movs	r3, #0
   37086:	6063      	str	r3, [r4, #4]
   37088:	89a3      	ldrh	r3, [r4, #12]
   3708a:	f043 0320 	orr.w	r3, r3, #32
   3708e:	81a3      	strh	r3, [r4, #12]
   37090:	e7f3      	b.n	3707a <__ssrefill_r+0x22>

00037092 <__sccl>:
   37092:	b570      	push	{r4, r5, r6, lr}
   37094:	780b      	ldrb	r3, [r1, #0]
   37096:	4604      	mov	r4, r0
   37098:	3801      	subs	r0, #1
   3709a:	2b5e      	cmp	r3, #94	; 0x5e
   3709c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
   370a0:	bf13      	iteet	ne
   370a2:	1c4a      	addne	r2, r1, #1
   370a4:	1c8a      	addeq	r2, r1, #2
   370a6:	784b      	ldrbeq	r3, [r1, #1]
   370a8:	2100      	movne	r1, #0
   370aa:	bf08      	it	eq
   370ac:	2101      	moveq	r1, #1
   370ae:	f800 1f01 	strb.w	r1, [r0, #1]!
   370b2:	42a8      	cmp	r0, r5
   370b4:	d1fb      	bne.n	370ae <__sccl+0x1c>
   370b6:	b90b      	cbnz	r3, 370bc <__sccl+0x2a>
   370b8:	1e50      	subs	r0, r2, #1
   370ba:	bd70      	pop	{r4, r5, r6, pc}
   370bc:	f081 0101 	eor.w	r1, r1, #1
   370c0:	4610      	mov	r0, r2
   370c2:	54e1      	strb	r1, [r4, r3]
   370c4:	4602      	mov	r2, r0
   370c6:	f812 5b01 	ldrb.w	r5, [r2], #1
   370ca:	2d2d      	cmp	r5, #45	; 0x2d
   370cc:	d005      	beq.n	370da <__sccl+0x48>
   370ce:	2d5d      	cmp	r5, #93	; 0x5d
   370d0:	d016      	beq.n	37100 <__sccl+0x6e>
   370d2:	2d00      	cmp	r5, #0
   370d4:	d0f1      	beq.n	370ba <__sccl+0x28>
   370d6:	462b      	mov	r3, r5
   370d8:	e7f2      	b.n	370c0 <__sccl+0x2e>
   370da:	7846      	ldrb	r6, [r0, #1]
   370dc:	2e5d      	cmp	r6, #93	; 0x5d
   370de:	d0fa      	beq.n	370d6 <__sccl+0x44>
   370e0:	42b3      	cmp	r3, r6
   370e2:	dcf8      	bgt.n	370d6 <__sccl+0x44>
   370e4:	3002      	adds	r0, #2
   370e6:	461a      	mov	r2, r3
   370e8:	3201      	adds	r2, #1
   370ea:	4296      	cmp	r6, r2
   370ec:	54a1      	strb	r1, [r4, r2]
   370ee:	dcfb      	bgt.n	370e8 <__sccl+0x56>
   370f0:	1af2      	subs	r2, r6, r3
   370f2:	1c5d      	adds	r5, r3, #1
   370f4:	3a01      	subs	r2, #1
   370f6:	42b3      	cmp	r3, r6
   370f8:	bfa8      	it	ge
   370fa:	2200      	movge	r2, #0
   370fc:	18ab      	adds	r3, r5, r2
   370fe:	e7e1      	b.n	370c4 <__sccl+0x32>
   37100:	4610      	mov	r0, r2
   37102:	e7da      	b.n	370ba <__sccl+0x28>

00037104 <__submore>:
   37104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   37108:	460c      	mov	r4, r1
   3710a:	6b49      	ldr	r1, [r1, #52]	; 0x34
   3710c:	f104 0344 	add.w	r3, r4, #68	; 0x44
   37110:	4299      	cmp	r1, r3
   37112:	d11a      	bne.n	3714a <__submore+0x46>
   37114:	f44f 6180 	mov.w	r1, #1024	; 0x400
   37118:	f7f5 fa52 	bl	2c5c0 <_malloc_r>
   3711c:	b918      	cbnz	r0, 37126 <__submore+0x22>
   3711e:	f04f 30ff 	mov.w	r0, #4294967295
   37122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   37126:	f44f 6380 	mov.w	r3, #1024	; 0x400
   3712a:	6360      	str	r0, [r4, #52]	; 0x34
   3712c:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   37130:	63a3      	str	r3, [r4, #56]	; 0x38
   37132:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   37136:	7083      	strb	r3, [r0, #2]
   37138:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   3713c:	7043      	strb	r3, [r0, #1]
   3713e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   37142:	7003      	strb	r3, [r0, #0]
   37144:	6020      	str	r0, [r4, #0]
   37146:	2000      	movs	r0, #0
   37148:	e7eb      	b.n	37122 <__submore+0x1e>
   3714a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   3714c:	0077      	lsls	r7, r6, #1
   3714e:	463a      	mov	r2, r7
   37150:	f7ff fec7 	bl	36ee2 <_realloc_r>
   37154:	4605      	mov	r5, r0
   37156:	2800      	cmp	r0, #0
   37158:	d0e1      	beq.n	3711e <__submore+0x1a>
   3715a:	eb00 0806 	add.w	r8, r0, r6
   3715e:	4601      	mov	r1, r0
   37160:	4632      	mov	r2, r6
   37162:	4640      	mov	r0, r8
   37164:	f7ff f9e0 	bl	36528 <memcpy>
   37168:	f8c4 8000 	str.w	r8, [r4]
   3716c:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
   37170:	e7e9      	b.n	37146 <__submore+0x42>

00037172 <__ascii_wctomb>:
   37172:	4603      	mov	r3, r0
   37174:	4608      	mov	r0, r1
   37176:	b141      	cbz	r1, 3718a <__ascii_wctomb+0x18>
   37178:	2aff      	cmp	r2, #255	; 0xff
   3717a:	d904      	bls.n	37186 <__ascii_wctomb+0x14>
   3717c:	228a      	movs	r2, #138	; 0x8a
   3717e:	f04f 30ff 	mov.w	r0, #4294967295
   37182:	601a      	str	r2, [r3, #0]
   37184:	4770      	bx	lr
   37186:	2001      	movs	r0, #1
   37188:	700a      	strb	r2, [r1, #0]
   3718a:	4770      	bx	lr

0003718c <__sflush_r>:
   3718c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   37190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   37192:	0717      	lsls	r7, r2, #28
   37194:	4605      	mov	r5, r0
   37196:	460c      	mov	r4, r1
   37198:	d456      	bmi.n	37248 <__sflush_r+0xbc>
   3719a:	684b      	ldr	r3, [r1, #4]
   3719c:	2b00      	cmp	r3, #0
   3719e:	dc02      	bgt.n	371a6 <__sflush_r+0x1a>
   371a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   371a2:	2b00      	cmp	r3, #0
   371a4:	dd3d      	ble.n	37222 <__sflush_r+0x96>
   371a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   371a8:	2e00      	cmp	r6, #0
   371aa:	d03a      	beq.n	37222 <__sflush_r+0x96>
   371ac:	2300      	movs	r3, #0
   371ae:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   371b2:	682f      	ldr	r7, [r5, #0]
   371b4:	6a21      	ldr	r1, [r4, #32]
   371b6:	602b      	str	r3, [r5, #0]
   371b8:	d025      	beq.n	37206 <__sflush_r+0x7a>
   371ba:	6d62      	ldr	r2, [r4, #84]	; 0x54
   371bc:	89a3      	ldrh	r3, [r4, #12]
   371be:	0758      	lsls	r0, r3, #29
   371c0:	d505      	bpl.n	371ce <__sflush_r+0x42>
   371c2:	6863      	ldr	r3, [r4, #4]
   371c4:	1ad2      	subs	r2, r2, r3
   371c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   371c8:	b10b      	cbz	r3, 371ce <__sflush_r+0x42>
   371ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
   371cc:	1ad2      	subs	r2, r2, r3
   371ce:	6a21      	ldr	r1, [r4, #32]
   371d0:	2300      	movs	r3, #0
   371d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   371d4:	4628      	mov	r0, r5
   371d6:	47b0      	blx	r6
   371d8:	1c41      	adds	r1, r0, #1
   371da:	d024      	beq.n	37226 <__sflush_r+0x9a>
   371dc:	2300      	movs	r3, #0
   371de:	6063      	str	r3, [r4, #4]
   371e0:	6923      	ldr	r3, [r4, #16]
   371e2:	6023      	str	r3, [r4, #0]
   371e4:	89a3      	ldrh	r3, [r4, #12]
   371e6:	04da      	lsls	r2, r3, #19
   371e8:	d500      	bpl.n	371ec <__sflush_r+0x60>
   371ea:	6560      	str	r0, [r4, #84]	; 0x54
   371ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
   371ee:	602f      	str	r7, [r5, #0]
   371f0:	b1b9      	cbz	r1, 37222 <__sflush_r+0x96>
   371f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
   371f6:	4299      	cmp	r1, r3
   371f8:	d002      	beq.n	37200 <__sflush_r+0x74>
   371fa:	4628      	mov	r0, r5
   371fc:	f7f5 f996 	bl	2c52c <_free_r>
   37200:	2300      	movs	r3, #0
   37202:	6363      	str	r3, [r4, #52]	; 0x34
   37204:	e00d      	b.n	37222 <__sflush_r+0x96>
   37206:	2301      	movs	r3, #1
   37208:	4628      	mov	r0, r5
   3720a:	47b0      	blx	r6
   3720c:	1c46      	adds	r6, r0, #1
   3720e:	4602      	mov	r2, r0
   37210:	d1d4      	bne.n	371bc <__sflush_r+0x30>
   37212:	682b      	ldr	r3, [r5, #0]
   37214:	2b00      	cmp	r3, #0
   37216:	d0d1      	beq.n	371bc <__sflush_r+0x30>
   37218:	2b1d      	cmp	r3, #29
   3721a:	d001      	beq.n	37220 <__sflush_r+0x94>
   3721c:	2b16      	cmp	r3, #22
   3721e:	d129      	bne.n	37274 <__sflush_r+0xe8>
   37220:	602f      	str	r7, [r5, #0]
   37222:	2000      	movs	r0, #0
   37224:	e02d      	b.n	37282 <__sflush_r+0xf6>
   37226:	682a      	ldr	r2, [r5, #0]
   37228:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   3722c:	b142      	cbz	r2, 37240 <__sflush_r+0xb4>
   3722e:	2a1d      	cmp	r2, #29
   37230:	d001      	beq.n	37236 <__sflush_r+0xaa>
   37232:	2a16      	cmp	r2, #22
   37234:	d120      	bne.n	37278 <__sflush_r+0xec>
   37236:	2300      	movs	r3, #0
   37238:	6063      	str	r3, [r4, #4]
   3723a:	6923      	ldr	r3, [r4, #16]
   3723c:	6023      	str	r3, [r4, #0]
   3723e:	e7d5      	b.n	371ec <__sflush_r+0x60>
   37240:	6062      	str	r2, [r4, #4]
   37242:	6922      	ldr	r2, [r4, #16]
   37244:	6022      	str	r2, [r4, #0]
   37246:	e7ce      	b.n	371e6 <__sflush_r+0x5a>
   37248:	690f      	ldr	r7, [r1, #16]
   3724a:	2f00      	cmp	r7, #0
   3724c:	d0e9      	beq.n	37222 <__sflush_r+0x96>
   3724e:	0793      	lsls	r3, r2, #30
   37250:	680e      	ldr	r6, [r1, #0]
   37252:	600f      	str	r7, [r1, #0]
   37254:	bf0c      	ite	eq
   37256:	694b      	ldreq	r3, [r1, #20]
   37258:	2300      	movne	r3, #0
   3725a:	1bf6      	subs	r6, r6, r7
   3725c:	608b      	str	r3, [r1, #8]
   3725e:	2e00      	cmp	r6, #0
   37260:	dddf      	ble.n	37222 <__sflush_r+0x96>
   37262:	4633      	mov	r3, r6
   37264:	463a      	mov	r2, r7
   37266:	6a21      	ldr	r1, [r4, #32]
   37268:	4628      	mov	r0, r5
   3726a:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
   3726e:	47e0      	blx	ip
   37270:	2800      	cmp	r0, #0
   37272:	dc07      	bgt.n	37284 <__sflush_r+0xf8>
   37274:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   37278:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3727c:	f04f 30ff 	mov.w	r0, #4294967295
   37280:	81a3      	strh	r3, [r4, #12]
   37282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   37284:	4407      	add	r7, r0
   37286:	1a36      	subs	r6, r6, r0
   37288:	e7e9      	b.n	3725e <__sflush_r+0xd2>

0003728a <__sfmoreglue>:
   3728a:	b570      	push	{r4, r5, r6, lr}
   3728c:	2368      	movs	r3, #104	; 0x68
   3728e:	1e4d      	subs	r5, r1, #1
   37290:	460e      	mov	r6, r1
   37292:	435d      	muls	r5, r3
   37294:	f105 0174 	add.w	r1, r5, #116	; 0x74
   37298:	f7f5 f992 	bl	2c5c0 <_malloc_r>
   3729c:	4604      	mov	r4, r0
   3729e:	b140      	cbz	r0, 372b2 <__sfmoreglue+0x28>
   372a0:	2100      	movs	r1, #0
   372a2:	f105 0268 	add.w	r2, r5, #104	; 0x68
   372a6:	e9c0 1600 	strd	r1, r6, [r0]
   372aa:	300c      	adds	r0, #12
   372ac:	60a0      	str	r0, [r4, #8]
   372ae:	f7ff f95b 	bl	36568 <memset>
   372b2:	4620      	mov	r0, r4
   372b4:	bd70      	pop	{r4, r5, r6, pc}

000372b6 <_fwalk_reent>:
   372b6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   372ba:	4606      	mov	r6, r0
   372bc:	4688      	mov	r8, r1
   372be:	f100 0448 	add.w	r4, r0, #72	; 0x48
   372c2:	2700      	movs	r7, #0
   372c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   372c8:	f1b9 0901 	subs.w	r9, r9, #1
   372cc:	d505      	bpl.n	372da <_fwalk_reent+0x24>
   372ce:	6824      	ldr	r4, [r4, #0]
   372d0:	2c00      	cmp	r4, #0
   372d2:	d1f7      	bne.n	372c4 <_fwalk_reent+0xe>
   372d4:	4638      	mov	r0, r7
   372d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   372da:	89ab      	ldrh	r3, [r5, #12]
   372dc:	2b01      	cmp	r3, #1
   372de:	d907      	bls.n	372f0 <_fwalk_reent+0x3a>
   372e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   372e4:	3301      	adds	r3, #1
   372e6:	d003      	beq.n	372f0 <_fwalk_reent+0x3a>
   372e8:	4629      	mov	r1, r5
   372ea:	4630      	mov	r0, r6
   372ec:	47c0      	blx	r8
   372ee:	4307      	orrs	r7, r0
   372f0:	3568      	adds	r5, #104	; 0x68
   372f2:	e7e9      	b.n	372c8 <_fwalk_reent+0x12>

000372f4 <memmove>:
   372f4:	4288      	cmp	r0, r1
   372f6:	b510      	push	{r4, lr}
   372f8:	eb01 0402 	add.w	r4, r1, r2
   372fc:	d902      	bls.n	37304 <memmove+0x10>
   372fe:	4284      	cmp	r4, r0
   37300:	4623      	mov	r3, r4
   37302:	d807      	bhi.n	37314 <memmove+0x20>
   37304:	1e43      	subs	r3, r0, #1
   37306:	42a1      	cmp	r1, r4
   37308:	d008      	beq.n	3731c <memmove+0x28>
   3730a:	f811 2b01 	ldrb.w	r2, [r1], #1
   3730e:	f803 2f01 	strb.w	r2, [r3, #1]!
   37312:	e7f8      	b.n	37306 <memmove+0x12>
   37314:	4402      	add	r2, r0
   37316:	4601      	mov	r1, r0
   37318:	428a      	cmp	r2, r1
   3731a:	d100      	bne.n	3731e <memmove+0x2a>
   3731c:	bd10      	pop	{r4, pc}
   3731e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   37322:	f802 4d01 	strb.w	r4, [r2, #-1]!
   37326:	e7f7      	b.n	37318 <memmove+0x24>

00037328 <_malloc_usable_size_r>:
   37328:	f851 3c04 	ldr.w	r3, [r1, #-4]
   3732c:	1f18      	subs	r0, r3, #4
   3732e:	2b00      	cmp	r3, #0
   37330:	bfbc      	itt	lt
   37332:	580b      	ldrlt	r3, [r1, r0]
   37334:	18c0      	addlt	r0, r0, r3
   37336:	4770      	bx	lr

00037338 <__sfputc_r>:
   37338:	6893      	ldr	r3, [r2, #8]
   3733a:	3b01      	subs	r3, #1
   3733c:	2b00      	cmp	r3, #0
   3733e:	6093      	str	r3, [r2, #8]
   37340:	b410      	push	{r4}
   37342:	da07      	bge.n	37354 <__sfputc_r+0x1c>
   37344:	6994      	ldr	r4, [r2, #24]
   37346:	42a3      	cmp	r3, r4
   37348:	db01      	blt.n	3734e <__sfputc_r+0x16>
   3734a:	290a      	cmp	r1, #10
   3734c:	d102      	bne.n	37354 <__sfputc_r+0x1c>
   3734e:	bc10      	pop	{r4}
   37350:	f7f7 bbac 	b.w	2eaac <__swbuf_r>
   37354:	6813      	ldr	r3, [r2, #0]
   37356:	1c58      	adds	r0, r3, #1
   37358:	6010      	str	r0, [r2, #0]
   3735a:	4608      	mov	r0, r1
   3735c:	7019      	strb	r1, [r3, #0]
   3735e:	bc10      	pop	{r4}
   37360:	4770      	bx	lr

00037362 <__sfputs_r>:
   37362:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   37364:	4606      	mov	r6, r0
   37366:	460f      	mov	r7, r1
   37368:	4614      	mov	r4, r2
   3736a:	18d5      	adds	r5, r2, r3
   3736c:	42ac      	cmp	r4, r5
   3736e:	d101      	bne.n	37374 <__sfputs_r+0x12>
   37370:	2000      	movs	r0, #0
   37372:	e007      	b.n	37384 <__sfputs_r+0x22>
   37374:	463a      	mov	r2, r7
   37376:	f814 1b01 	ldrb.w	r1, [r4], #1
   3737a:	4630      	mov	r0, r6
   3737c:	f7ff ffdc 	bl	37338 <__sfputc_r>
   37380:	1c43      	adds	r3, r0, #1
   37382:	d1f3      	bne.n	3736c <__sfputs_r+0xa>
   37384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00037386 <abort>:
   37386:	2006      	movs	r0, #6
   37388:	b508      	push	{r3, lr}
   3738a:	f7f7 fc8d 	bl	2eca8 <raise>
   3738e:	2001      	movs	r0, #1
   37390:	f7dc f888 	bl	134a4 <_exit>

00037394 <__swhatbuf_r>:
   37394:	b570      	push	{r4, r5, r6, lr}
   37396:	460c      	mov	r4, r1
   37398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   3739c:	b096      	sub	sp, #88	; 0x58
   3739e:	4615      	mov	r5, r2
   373a0:	2900      	cmp	r1, #0
   373a2:	461e      	mov	r6, r3
   373a4:	da0c      	bge.n	373c0 <__swhatbuf_r+0x2c>
   373a6:	89a3      	ldrh	r3, [r4, #12]
   373a8:	2100      	movs	r1, #0
   373aa:	f013 0f80 	tst.w	r3, #128	; 0x80
   373ae:	bf14      	ite	ne
   373b0:	2340      	movne	r3, #64	; 0x40
   373b2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
   373b6:	2000      	movs	r0, #0
   373b8:	6031      	str	r1, [r6, #0]
   373ba:	602b      	str	r3, [r5, #0]
   373bc:	b016      	add	sp, #88	; 0x58
   373be:	bd70      	pop	{r4, r5, r6, pc}
   373c0:	466a      	mov	r2, sp
   373c2:	f7f7 fc8b 	bl	2ecdc <_fstat_r>
   373c6:	2800      	cmp	r0, #0
   373c8:	dbed      	blt.n	373a6 <__swhatbuf_r+0x12>
   373ca:	9901      	ldr	r1, [sp, #4]
   373cc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
   373d0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
   373d4:	4259      	negs	r1, r3
   373d6:	4159      	adcs	r1, r3
   373d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   373dc:	e7eb      	b.n	373b6 <__swhatbuf_r+0x22>

000373de <_raise_r>:
   373de:	291f      	cmp	r1, #31
   373e0:	b538      	push	{r3, r4, r5, lr}
   373e2:	4605      	mov	r5, r0
   373e4:	460c      	mov	r4, r1
   373e6:	d904      	bls.n	373f2 <_raise_r+0x14>
   373e8:	2316      	movs	r3, #22
   373ea:	6003      	str	r3, [r0, #0]
   373ec:	f04f 30ff 	mov.w	r0, #4294967295
   373f0:	bd38      	pop	{r3, r4, r5, pc}
   373f2:	6c42      	ldr	r2, [r0, #68]	; 0x44
   373f4:	b112      	cbz	r2, 373fc <_raise_r+0x1e>
   373f6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   373fa:	b94b      	cbnz	r3, 37410 <_raise_r+0x32>
   373fc:	4628      	mov	r0, r5
   373fe:	f000 f816 	bl	3742e <_getpid_r>
   37402:	4622      	mov	r2, r4
   37404:	4601      	mov	r1, r0
   37406:	4628      	mov	r0, r5
   37408:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   3740c:	f7f7 bc54 	b.w	2ecb8 <_kill_r>
   37410:	2b01      	cmp	r3, #1
   37412:	d00a      	beq.n	3742a <_raise_r+0x4c>
   37414:	1c59      	adds	r1, r3, #1
   37416:	d103      	bne.n	37420 <_raise_r+0x42>
   37418:	2316      	movs	r3, #22
   3741a:	6003      	str	r3, [r0, #0]
   3741c:	2001      	movs	r0, #1
   3741e:	e7e7      	b.n	373f0 <_raise_r+0x12>
   37420:	2100      	movs	r1, #0
   37422:	4620      	mov	r0, r4
   37424:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
   37428:	4798      	blx	r3
   3742a:	2000      	movs	r0, #0
   3742c:	e7e0      	b.n	373f0 <_raise_r+0x12>

0003742e <_getpid_r>:
   3742e:	f7f9 bc76 	b.w	30d1e <_getpid>
	...
