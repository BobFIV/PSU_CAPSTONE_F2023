
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   0:	f0 3f 00 20 59 1d 00 00 81 5d 00 00 2d 1d 00 00     .?. Y....]..-...
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
  10:	2d 1d 00 00 2d 1d 00 00 2d 1d 00 00 2d 1d 00 00     -...-...-...-...
	...

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
  2c:	31 1a 00 00 2d 1d 00 00 00 00 00 00 2d 1d 00 00     1...-.......-...
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
  3c:	2d 1d 00 00                                         -...

00000040 <_irq_vector_table>:
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
  40:	91 1a 00 00 91 1a 00 00 91 1a 00 00 91 1a 00 00     ................
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
  50:	91 1a 00 00 91 1a 00 00 91 1a 00 00 91 1a 00 00     ................
		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
				*(const char **)buf = s;
  60:	91 1a 00 00 91 1a 00 00 91 1a 00 00 91 1a 00 00     ................
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
  70:	91 1a 00 00 91 1a 00 00 91 1a 00 00 91 1a 00 00     ................
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
  80:	91 1a 00 00 91 1a 00 00 91 1a 00 00 91 1a 00 00     ................
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
  90:	91 1a 00 00 91 1a 00 00 91 1a 00 00 91 1a 00 00     ................
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
					str_ptr_arg[s_idx] = arg_idx;
  a0:	91 1a 00 00 91 1a 00 00 91 1a 00 00 91 1a 00 00     ................
					if (is_ro) {
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
						s_ro_cnt++;
					} else {
						s_rw_cnt++;
  b0:	91 1a 00 00 91 1a 00 00 91 1a 00 00 91 1a 00 00     ................
			switch (*fmt) {
  c0:	91 1a 00 00 91 1a 00 00 91 1a 00 00 91 1a 00 00     ................
  d0:	91 1a 00 00 91 1a 00 00 91 1a 00 00 91 1a 00 00     ................
  e0:	91 1a 00 00 91 1a 00 00 91 1a 00 00 91 1a 00 00     ................
  f0:	91 1a 00 00 91 1a 00 00 91 1a 00 00 91 1a 00 00     ................
 100:	91 1a 00 00 91 1a 00 00 91 1a 00 00 91 1a 00 00     ................
 110:	91 1a 00 00 91 1a 00 00 91 1a 00 00 91 1a 00 00     ................
				align = VA_STACK_ALIGN(void *);
 120:	91 1a 00 00 91 1a 00 00 91 1a 00 00 91 1a 00 00     ................
			switch (*fmt) {
 130:	91 1a 00 00 91 1a 00 00 91 1a 00 00 91 1a 00 00     ................
 140:	91 1a 00 00                                         ....

Disassembly of section text:

00000144 <__aeabi_uldivmod>:
		buf = (void *) ROUND_UP(buf, align);
     144:	b953      	cbnz	r3, 15c <__aeabi_uldivmod+0x18>
     146:	b94a      	cbnz	r2, 15c <__aeabi_uldivmod+0x18>
     148:	2900      	cmp	r1, #0
     14a:	bf08      	it	eq
     14c:	2800      	cmpeq	r0, #0
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     14e:	bf1c      	itt	ne
     150:	f04f 31ff 	movne.w	r1, #4294967295
     154:	f04f 30ff 	movne.w	r0, #4294967295
     158:	f000 b80c 	b.w	174 <__aeabi_idiv0>
     15c:	f1ad 0c08 	sub.w	ip, sp, #8
		if (is_str_arg) {
     160:	e96d ce04 	strd	ip, lr, [sp, #-16]!
				s_idx++;
			}
			buf += sizeof(char *);

			is_str_arg = false;
		} else if (size == sizeof(int)) {
     164:	f000 f808 	bl	178 <__udivmoddi4>
			int v = va_arg(ap, int);
     168:	f8dd e004 	ldr.w	lr, [sp, #4]

			if (buf0 != NULL) {
				*(int *)buf = v;
			}
			buf += sizeof(int);
     16c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     170:	b004      	add	sp, #16
				arg_idx--;
     172:	4770      	bx	lr

00000174 <__aeabi_idiv0>:
     174:	4770      	bx	lr
     176:	bf00      	nop

00000178 <__udivmoddi4>:
				parsing = false;
     178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
				continue;
     17c:	4686      	mov	lr, r0
				if (fmt[-1] == 'l') {
     17e:	468c      	mov	ip, r1
     180:	4608      	mov	r0, r1
     182:	9e08      	ldr	r6, [sp, #32]
     184:	4615      	mov	r5, r2
					if (fmt[-2] == 'l') {
     186:	4674      	mov	r4, lr
     188:	4619      	mov	r1, r3
     18a:	2b00      	cmp	r3, #0
				parsing = false;
     18c:	f040 80c1 	bne.w	312 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x12>
					if (fmt[-2] == 'l') {
     190:	4285      	cmp	r5, r0
						align = VA_STACK_ALIGN(long long);
     192:	fab2 f282 	clz	r2, r2
				size = sizeof(void *);
     196:	d945      	bls.n	224 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x24>
     198:	b14a      	cbz	r2, 1ae <__udivmoddi4+0x36>
					v.ld = va_arg(ap, long double);
     19a:	f1c2 0320 	rsb	r3, r2, #32
     19e:	fa00 fc02 	lsl.w	ip, r0, r2
				buf = (void *) ROUND_UP(buf, align);
     1a2:	4095      	lsls	r5, r2
     1a4:	4094      	lsls	r4, r2
     1a6:	fa2e f303 	lsr.w	r3, lr, r3
					v.ld = va_arg(ap, long double);
     1aa:	ea43 0c0c 	orr.w	ip, r3, ip
					if (BUF_OFFSET + size > len) {
     1ae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1b2:	b2a8      	uxth	r0, r5
     1b4:	0c23      	lsrs	r3, r4, #16
     1b6:	fbbc f8fe 	udiv	r8, ip, lr
						*(long double *)buf = v.ld;
     1ba:	fb0e cc18 	mls	ip, lr, r8, ip
				parsing = false;
     1be:	fb08 f900 	mul.w	r9, r8, r0
			switch (*fmt) {
     1c2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     1c6:	4599      	cmp	r9, r3
			if (*++fmt == '\0') {
     1c8:	d928      	bls.n	21c <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x1c>
     1ca:	18eb      	adds	r3, r5, r3
     1cc:	f108 37ff 	add.w	r7, r8, #4294967295
			if (!parsing) {
     1d0:	d204      	bcs.n	1dc <__udivmoddi4+0x64>
     1d2:	4599      	cmp	r9, r3
     1d4:	d902      	bls.n	1dc <__udivmoddi4+0x64>
     1d6:	f1a8 0702 	sub.w	r7, r8, #2
				if (*fmt == '%') {
     1da:	442b      	add	r3, r5
					parsing = true;
     1dc:	eba3 0309 	sub.w	r3, r3, r9
					arg_idx++;
     1e0:	b2a4      	uxth	r4, r4
     1e2:	fbb3 fcfe 	udiv	ip, r3, lr
				align = VA_STACK_ALIGN(size_t);
     1e6:	fb0e 331c 	mls	r3, lr, ip, r3
     1ea:	fb0c f000 	mul.w	r0, ip, r0
			switch (*fmt) {
     1ee:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
				parsing = false;
     1f2:	42a0      	cmp	r0, r4
     1f4:	d914      	bls.n	220 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x20>

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
     1f6:	192c      	adds	r4, r5, r4
     1f8:	f10c 33ff 	add.w	r3, ip, #4294967295
					return -EINVAL;
     1fc:	d204      	bcs.n	208 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x8>
     1fe:	42a0      	cmp	r0, r4
			long long v = va_arg(ap, long long);
     200:	d902      	bls.n	208 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x8>
     202:	f1ac 0302 	sub.w	r3, ip, #2
     206:	442c      	add	r4, r5
     208:	1a24      	subs	r4, r4, r0
     20a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16

			if (buf0 != NULL) {
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
     20e:	b11e      	cbz	r6, 218 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x18>
				}
			}
			buf += sizeof(long long);
     210:	40d4      	lsrs	r4, r2
     212:	2300      	movs	r3, #0
     214:	6034      	str	r4, [r6, #0]
		if (is_str_arg) {
     216:	6073      	str	r3, [r6, #4]
		} else if (size == sizeof(int)) {
     218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			int v = va_arg(ap, int);
     21c:	4647      	mov	r7, r8
     21e:	e7dd      	b.n	1dc <__udivmoddi4+0x64>
			if (buf0 != NULL) {
     220:	4663      	mov	r3, ip
		} else if (size == sizeof(long long)) {
     222:	e7f1      	b.n	208 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x8>
     224:	bb92      	cbnz	r2, 28c <CONFIG_PM_PARTITION_SIZE_PROVISION+0xc>
			long long v = va_arg(ap, long long);
     226:	1b43      	subs	r3, r0, r5
     228:	2101      	movs	r1, #1
     22a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     22e:	b2af      	uxth	r7, r5
     230:	0c20      	lsrs	r0, r4, #16
			if (buf0 != NULL) {
     232:	fbb3 fcfe 	udiv	ip, r3, lr
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     236:	fb0e 331c 	mls	r3, lr, ip, r3
			s = va_arg(ap, char *);
     23a:	fb0c f807 	mul.w	r8, ip, r7
     23e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
			if (is_ro && !do_ro) {
     242:	4598      	cmp	r8, r3
     244:	d961      	bls.n	30a <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xa>
     246:	18eb      	adds	r3, r5, r3
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     248:	f10c 30ff 	add.w	r0, ip, #4294967295
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     24c:	d204      	bcs.n	258 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x58>
     24e:	4598      	cmp	r8, r3
     250:	d902      	bls.n	258 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x58>
     252:	f1ac 0002 	sub.w	r0, ip, #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     256:	442b      	add	r3, r5
     258:	eba3 0308 	sub.w	r3, r3, r8
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     25c:	b2a4      	uxth	r4, r4
				if (buf0 != NULL) {
     25e:	fbb3 fcfe 	udiv	ip, r3, lr
					str_ptr_pos[s_idx] = s_ptr_idx;
     262:	fb0e 331c 	mls	r3, lr, ip, r3
     266:	fb0c f707 	mul.w	r7, ip, r7
     26a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     26e:	42a7      	cmp	r7, r4
					str_ptr_arg[s_idx] = arg_idx;
     270:	d94d      	bls.n	30e <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xe>
     272:	192c      	adds	r4, r5, r4
					if (is_ro) {
     274:	f10c 33ff 	add.w	r3, ip, #4294967295
     278:	d204      	bcs.n	284 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4>
     27a:	42a7      	cmp	r7, r4
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     27c:	d902      	bls.n	284 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4>
     27e:	f1ac 0302 	sub.w	r3, ip, #2
     282:	442c      	add	r4, r5
						s_ro_cnt++;
     284:	1be4      	subs	r4, r4, r7
     286:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
					if (BUF_OFFSET + size > len) {
     28a:	e7c0      	b.n	20e <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0xe>
     28c:	f1c2 0320 	rsb	r3, r2, #32
			switch (*fmt) {
     290:	4095      	lsls	r5, r2
			buf += sizeof(char *);
     292:	4094      	lsls	r4, r2
					if (BUF_OFFSET + size > len) {
     294:	fa20 f103 	lsr.w	r1, r0, r3
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     298:	fa2e f303 	lsr.w	r3, lr, r3
     29c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
				} else if (is_ro) {
     2a0:	4090      	lsls	r0, r2
     2a2:	b2af      	uxth	r7, r5
					len += 1;
     2a4:	4303      	orrs	r3, r0
     2a6:	fbb1 fcfe 	udiv	ip, r1, lr
					len += 2;
     2aa:	fb0e 101c 	mls	r0, lr, ip, r1
				} else if (rws_pos_en) {
     2ae:	0c19      	lsrs	r1, r3, #16
					len += strlen(s) + 1 + 1;
     2b0:	fb0c f807 	mul.w	r8, ip, r7
     2b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     2b8:	4588      	cmp	r8, r1
     2ba:	d922      	bls.n	302 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x2>
     2bc:	1869      	adds	r1, r5, r1
     2be:	f10c 30ff 	add.w	r0, ip, #4294967295
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     2c2:	d204      	bcs.n	2ce <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4e>
     2c4:	4588      	cmp	r8, r1
     2c6:	d902      	bls.n	2ce <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4e>
     2c8:	f1ac 0002 	sub.w	r0, ip, #2
	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     2cc:	4429      	add	r1, r5
     2ce:	eba1 0108 	sub.w	r1, r1, r8
     2d2:	b29b      	uxth	r3, r3
     2d4:	fbb1 fcfe 	udiv	ip, r1, lr
     2d8:	fb0e 111c 	mls	r1, lr, ip, r1
	*(char **)buf0 = NULL;

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);

	if (rws_pos_en) {
     2dc:	fb0c f707 	mul.w	r7, ip, r7
	*(char **)buf0 = NULL;
     2e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     2e4:	429f      	cmp	r7, r3
     2e6:	d90e      	bls.n	306 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x6>
	if (rws_pos_en) {
     2e8:	18eb      	adds	r3, r5, r3
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     2ea:	f10c 31ff 	add.w	r1, ip, #4294967295
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
     2ee:	d204      	bcs.n	2fa <CONFIG_PM_PARTITION_SIZE_PROVISION+0x7a>
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
     2f0:	429f      	cmp	r7, r3
     2f2:	d902      	bls.n	2fa <CONFIG_PM_PARTITION_SIZE_PROVISION+0x7a>
     2f4:	f1ac 0102 	sub.w	r1, ip, #2
		for (i = 0; i < s_idx; i++) {
     2f8:	442b      	add	r3, r5
			}

			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;

			/* make sure it fits */
			if (BUF_OFFSET + 1 > len) {
     2fa:	1bdb      	subs	r3, r3, r7
     2fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
		for (i = 0; i < s_idx; i++) {
     300:	e793      	b.n	22a <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x2a>
			continue;
		}

		if (rws_pos_en) {
			size = 0;
			*buf++ = str_ptr_arg[i];
     302:	4660      	mov	r0, ip
     304:	e7e3      	b.n	2ce <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4e>
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
     306:	4661      	mov	r1, ip
     308:	e7f7      	b.n	2fa <CONFIG_PM_PARTITION_SIZE_PROVISION+0x7a>
     30a:	4660      	mov	r0, ip
     30c:	e7a4      	b.n	258 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x58>
     30e:	4663      	mov	r3, ip
			*buf++ = str_ptr_arg[i];
     310:	e7b8      	b.n	284 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4>
     312:	4283      	cmp	r3, r0
	for (i = 0; i < s_idx; i++) {
     314:	d906      	bls.n	324 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x24>
     316:	b916      	cbnz	r6, 31e <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x1e>
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
     318:	2100      	movs	r1, #0
     31a:	4608      	mov	r0, r1
		pkg_hdr->desc.str_cnt = s_rw_cnt;
     31c:	e77c      	b.n	218 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x18>
		pkg_hdr->desc.rw_str_cnt = 0;
     31e:	e9c6 e000 	strd	lr, r0, [r6]
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     322:	e7f9      	b.n	318 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x18>
     324:	fab3 f783 	clz	r7, r3
			if (BUF_OFFSET + 1 > len) {
     328:	b98f      	cbnz	r7, 34e <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x4e>
     32a:	4283      	cmp	r3, r0
     32c:	d301      	bcc.n	332 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x32>
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     32e:	4572      	cmp	r2, lr
     330:	d808      	bhi.n	344 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x44>
			if (BUF_OFFSET + 1 > len) {
     332:	ebbe 0402 	subs.w	r4, lr, r2
			*buf++ = pos;
     336:	eb60 0303 	sbc.w	r3, r0, r3
		for (i = 0; i < s_idx; i++) {
     33a:	2001      	movs	r0, #1
     33c:	469c      	mov	ip, r3
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     33e:	b91e      	cbnz	r6, 348 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x48>
     340:	2100      	movs	r1, #0
     342:	e769      	b.n	218 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x18>
     344:	4638      	mov	r0, r7
     346:	e7fa      	b.n	33e <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x3e>
     348:	e9c6 4c00 	strd	r4, ip, [r6]
		if (rws_pos_en) {
     34c:	e7f8      	b.n	340 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x40>
     34e:	f1c7 0c20 	rsb	ip, r7, #32
			*buf++ = str_ptr_arg[i];
     352:	40bb      	lsls	r3, r7
     354:	fa0e f507 	lsl.w	r5, lr, r7
			size = 0;
     358:	fa22 f40c 	lsr.w	r4, r2, ip
		if (BUF_OFFSET + 1 + size > len) {
     35c:	fa2e f10c 	lsr.w	r1, lr, ip
     360:	40ba      	lsls	r2, r7
     362:	431c      	orrs	r4, r3
     364:	fa20 f30c 	lsr.w	r3, r0, ip
		*buf++ = str_ptr_pos[i];
     368:	40b8      	lsls	r0, r7
		memcpy(buf, s, size);
     36a:	ea4f 4914 	mov.w	r9, r4, lsr #16
		*buf++ = str_ptr_pos[i];
     36e:	4301      	orrs	r1, r0
		memcpy(buf, s, size);
     370:	fa1f fe84 	uxth.w	lr, r4
     374:	fbb3 f8f9 	udiv	r8, r3, r9
		buf += size;
     378:	fb09 3018 	mls	r0, r9, r8, r3
	for (i = 0; i < s_idx; i++) {
     37c:	0c0b      	lsrs	r3, r1, #16
     37e:	fb08 fa0e 	mul.w	sl, r8, lr
     382:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     386:	459a      	cmp	sl, r3
     388:	d940      	bls.n	40c <CONFIG_FLASH_SIZE+0xc>
     38a:	18e3      	adds	r3, r4, r3
     38c:	f108 30ff 	add.w	r0, r8, #4294967295
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     390:	d204      	bcs.n	39c <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x9c>
			size = strlen(s) + 1;
     392:	459a      	cmp	sl, r3
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     394:	d902      	bls.n	39c <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x9c>
     396:	f1a8 0002 	sub.w	r0, r8, #2
			size = strlen(s) + 1;
     39a:	4423      	add	r3, r4
     39c:	eba3 030a 	sub.w	r3, r3, sl
		return -EFAULT;
     3a0:	b289      	uxth	r1, r1
     3a2:	fbb3 f8f9 	udiv	r8, r3, r9
     3a6:	fb09 3318 	mls	r3, r9, r8, r3
     3aa:	fb08 fe0e 	mul.w	lr, r8, lr
     3ae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     3b2:	458e      	cmp	lr, r1
     3b4:	d92c      	bls.n	410 <CONFIG_FLASH_SIZE+0x10>
     3b6:	1861      	adds	r1, r4, r1
     3b8:	f108 33ff 	add.w	r3, r8, #4294967295
     3bc:	d204      	bcs.n	3c8 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xc8>
     3be:	458e      	cmp	lr, r1
     3c0:	d902      	bls.n	3c8 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xc8>
     3c2:	f1a8 0302 	sub.w	r3, r8, #2
     3c6:	4421      	add	r1, r4
     3c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     3cc:	eba1 010e 	sub.w	r1, r1, lr
     3d0:	fba0 9802 	umull	r9, r8, r0, r2
     3d4:	4541      	cmp	r1, r8
     3d6:	46ce      	mov	lr, r9
     3d8:	4643      	mov	r3, r8
     3da:	d302      	bcc.n	3e2 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xe2>
     3dc:	d106      	bne.n	3ec <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xec>
     3de:	454d      	cmp	r5, r9
     3e0:	d204      	bcs.n	3ec <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xec>
     3e2:	3801      	subs	r0, #1
     3e4:	ebb9 0e02 	subs.w	lr, r9, r2
     3e8:	eb68 0304 	sbc.w	r3, r8, r4
     3ec:	2e00      	cmp	r6, #0
     3ee:	d0a7      	beq.n	340 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x40>
     3f0:	ebb5 020e 	subs.w	r2, r5, lr
     3f4:	eb61 0103 	sbc.w	r1, r1, r3
     3f8:	fa01 fc0c 	lsl.w	ip, r1, ip
     3fc:	fa22 f307 	lsr.w	r3, r2, r7
     400:	40f9      	lsrs	r1, r7
     402:	ea4c 0303 	orr.w	r3, ip, r3
     406:	e9c6 3100 	strd	r3, r1, [r6]
     40a:	e799      	b.n	340 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x40>
     40c:	4640      	mov	r0, r8
     40e:	e7c5      	b.n	39c <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x9c>
     410:	4643      	mov	r3, r8
     412:	e7d9      	b.n	3c8 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xc8>

00000414 <main>:
    __ASSERT(0, "Bootloader serial process was terminated unexpectedly.\n");
}
#endif

void main(void)
{
     414:	b5f0      	push	{r4, r5, r6, r7, lr}
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_set(NRF_WDT_Type *        p_reg,
                                                  nrf_wdt_rr_register_t rr_register)
{
    p_reg->RR[rr_register] = NRF_WDT_RR_VALUE;
     416:	4b28      	ldr	r3, [pc, #160]	; (4b8 <FIH_LABEL_FIH_CALL_END_216+0x64>)
     418:	4a28      	ldr	r2, [pc, #160]	; (4bc <FIH_LABEL_FIH_CALL_END_216+0x68>)
     41a:	b085      	sub	sp, #20
     41c:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
     420:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
     424:	f8c3 2608 	str.w	r2, [r3, #1544]	; 0x608
     428:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
     42c:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
     430:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
     434:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
     438:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
#ifdef CONFIG_MCUBOOT_INDICATION_LED
    /* LED init */
    led_init();
#endif

    os_heap_init();
     43c:	f004 ff00 	bl	5240 <os_heap_init>

00000440 <FIH_LABEL_FIH_CALL_START_196>:
    rc = boot_console_init();
    int timeout_in_ms = CONFIG_BOOT_SERIAL_WAIT_FOR_DFU_TIMEOUT;
    uint32_t start = k_uptime_get_32();
#endif

    FIH_CALL(boot_go, fih_rc, &rsp);
     440:	f000 fa10 	bl	864 <fih_cfi_get_and_increment>
     444:	4605      	mov	r5, r0
     446:	a801      	add	r0, sp, #4
     448:	f000 fc58 	bl	cfc <boot_go>
     44c:	4604      	mov	r4, r0
     44e:	4628      	mov	r0, r5
     450:	f000 fa18 	bl	884 <fih_cfi_validate>

00000454 <FIH_LABEL_FIH_CALL_END_216>:
        timeout_in_ms = 1;
    }
    boot_serial_check_start(&boot_funcs,timeout_in_ms);
#endif

    if (FIH_NOT_EQ(fih_rc, FIH_SUCCESS)) {
     454:	4b1a      	ldr	r3, [pc, #104]	; (4c0 <FIH_LABEL_FIH_CALL_END_216+0x6c>)
     456:	681b      	ldr	r3, [r3, #0]
     458:	42a3      	cmp	r3, r4
     45a:	d001      	beq.n	460 <FIH_LABEL_FIH_CALL_END_216+0xc>
         * recovery mode
         */
        boot_serial_enter();
#endif

        FIH_PANIC;
     45c:	f005 f808 	bl	5470 <fih_panic_loop>
/* There is only one instance of MCUBoot */
#define PROTECT_SIZE (PM_MCUBOOT_PRIMARY_ADDRESS - PM_MCUBOOT_ADDRESS)
#define PROTECT_ADDR PM_MCUBOOT_ADDRESS
#endif

    rc = fprotect_area(PROTECT_ADDR, PROTECT_SIZE);
     460:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     464:	2000      	movs	r0, #0
     466:	f002 fbfd 	bl	2c64 <fprotect_area>

    if (rc != 0) {
     46a:	4604      	mov	r4, r0
     46c:	b100      	cbz	r0, 470 <FIH_LABEL_FIH_CALL_END_216+0x1c>
        BOOT_LOG_ERR("Protect mcuboot flash failed, cancel startup.");
        while (1)
     46e:	e7fe      	b.n	46e <FIH_LABEL_FIH_CALL_END_216+0x1a>
    rc = flash_device_base(rsp->br_flash_dev_id, &flash_base);
     470:	4669      	mov	r1, sp
     472:	f89d 0008 	ldrb.w	r0, [sp, #8]
     476:	f004 feb9 	bl	51ec <flash_device_base>
    vt = (struct arm_vector_table *)(flash_base +
     47a:	9b00      	ldr	r3, [sp, #0]
     47c:	9d03      	ldr	r5, [sp, #12]
     47e:	441d      	add	r5, r3
                                     rsp->br_hdr->ih_hdr_size);
     480:	9b01      	ldr	r3, [sp, #4]
     482:	891e      	ldrh	r6, [r3, #8]
        sys_clock_disable();
     484:	f002 fbd6 	bl	2c34 <sys_clock_disable>
                                     rsp->br_image_off +
     488:	19af      	adds	r7, r5, r6
    nrf_cleanup_peripheral();
     48a:	f000 fe13 	bl	10b4 <nrf_cleanup_peripheral>
    cleanup_arm_nvic(); /* cleanup NVIC registers */
     48e:	f000 fdf5 	bl	107c <cleanup_arm_nvic>
    z_arm_clear_arm_mpu_config();
     492:	f001 fca3 	bl	1ddc <z_arm_clear_arm_mpu_config>
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
     496:	f384 880b 	msr	PSPLIM, r4
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
     49a:	f384 880a 	msr	MSPLIM, r4
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
     49e:	59ab      	ldr	r3, [r5, r6]
     4a0:	f383 8808 	msr	MSP, r3
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
     4a4:	f384 8814 	msr	CONTROL, r4
  __ASM volatile ("isb 0xF":::"memory");
     4a8:	f3bf 8f6f 	isb	sy
     4ac:	f3bf 8f6f 	isb	sy
    ((void (*)(void))vt->reset)();
     4b0:	687b      	ldr	r3, [r7, #4]
     4b2:	4798      	blx	r3
    do_boot(&rsp);

    mcuboot_status_change(MCUBOOT_STATUS_BOOT_FAILED);

    BOOT_LOG_ERR("Never should get here");
    while (1)
     4b4:	e7fe      	b.n	4b4 <FIH_LABEL_FIH_CALL_END_216+0x60>
     4b6:	bf00      	nop
     4b8:	50018000 	.word	0x50018000
     4bc:	6e524635 	.word	0x6e524635
     4c0:	20000008 	.word	0x20000008

000004c4 <bootutil_img_validate>:
fih_ret
bootutil_img_validate(struct enc_key_data *enc_state, int image_index,
                      struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *seed,
                      int seed_len, uint8_t *out_hash)
{
     4c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     4c8:	461d      	mov	r5, r3
    uint32_t off;
    uint16_t len;
    uint16_t type;
    int sha256_valid = 0;
#ifdef EXPECTED_SIG_TLV
    FIH_DECLARE(valid_signature, FIH_FAILURE);
     4ca:	4b84      	ldr	r3, [pc, #528]	; (6dc <FIH_LABEL_FIH_CALL_END_1022+0x14>)
{
     4cc:	b0db      	sub	sp, #364	; 0x16c
     4ce:	4614      	mov	r4, r2
     4d0:	e9dd 7866 	ldrd	r7, r8, [sp, #408]	; 0x198
    FIH_DECLARE(valid_signature, FIH_FAILURE);
     4d4:	681e      	ldr	r6, [r3, #0]
{
     4d6:	f8dd b190 	ldr.w	fp, [sp, #400]	; 0x190
     4da:	f8dd a1a0 	ldr.w	sl, [sp, #416]	; 0x1a0
}

/* Enable and disable cc310 to reduce power consumption */
static inline void cc310_sha256_init(nrf_cc310_bl_hash_context_sha256_t * ctx)
{
    cc310_init();
     4de:	f000 fd97 	bl	1010 <cc310_init>
    NRF_CRYPTOCELL->ENABLE=1;
     4e2:	2201      	movs	r2, #1
     4e4:	4b7e      	ldr	r3, [pc, #504]	; (6e0 <FIH_LABEL_FIH_CALL_END_1022+0x18>)
    nrf_cc310_enable();
    nrf_cc310_bl_hash_sha256_init(ctx);
     4e6:	a83a      	add	r0, sp, #232	; 0xe8
    NRF_CRYPTOCELL->ENABLE=1;
     4e8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    nrf_cc310_bl_hash_sha256_init(ctx);
     4ec:	f003 fdb8 	bl	4060 <nrf_cc310_bl_hash_sha256_init>
    if (seed && (seed_len > 0)) {
     4f0:	b13f      	cbz	r7, 502 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1a>
     4f2:	f1b8 0f00 	cmp.w	r8, #0
     4f6:	dd04      	ble.n	502 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1a>

static inline int bootutil_sha256_update(bootutil_sha256_context *ctx,
                                          const void *data,
                                          uint32_t data_len)
{
    cc310_sha256_update(ctx, data, data_len);
     4f8:	4642      	mov	r2, r8
     4fa:	4639      	mov	r1, r7
     4fc:	a83a      	add	r0, sp, #232	; 0xe8
     4fe:	f005 faba 	bl	5a76 <cc310_sha256_update>
    for (off = 0; off < size; off += blk_sz) {
     502:	f04f 0800 	mov.w	r8, #0
    size += hdr->ih_protect_tlv_size;
     506:	8963      	ldrh	r3, [r4, #10]
    size = hdr_size = hdr->ih_hdr_size;
     508:	8927      	ldrh	r7, [r4, #8]
     50a:	441f      	add	r7, r3
    size += hdr->ih_protect_tlv_size;
     50c:	68e3      	ldr	r3, [r4, #12]
     50e:	441f      	add	r7, r3
    for (off = 0; off < size; off += blk_sz) {
     510:	4547      	cmp	r7, r8
     512:	d857      	bhi.n	5c4 <FIH_LABEL_FIH_CALL_END_526+0xe>
}

static inline void cc310_sha256_finalize(bootutil_sha256_context *ctx,
                                          uint8_t *output)
{
    nrf_cc310_bl_hash_sha256_finalize(ctx,
     514:	a90d      	add	r1, sp, #52	; 0x34
     516:	a83a      	add	r0, sp, #232	; 0xe8
     518:	f003 fe14 	bl	4144 <nrf_cc310_bl_hash_sha256_finalize>
    NRF_CRYPTOCELL->ENABLE=0;
     51c:	2200      	movs	r2, #0
     51e:	4b70      	ldr	r3, [pc, #448]	; (6e0 <FIH_LABEL_FIH_CALL_END_1022+0x18>)
     520:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
     524:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
            tmp_buf_sz, hash, seed, seed_len);
    if (rc) {
        goto out;
    }

    if (out_hash) {
     528:	f1ba 0f00 	cmp.w	sl, #0
     52c:	d004      	beq.n	538 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x50>
        memcpy(out_hash, hash, 32);
     52e:	2220      	movs	r2, #32
     530:	4650      	mov	r0, sl
     532:	a90d      	add	r1, sp, #52	; 0x34
     534:	f005 fc42 	bl	5dbc <memcpy>
    }

    rc = bootutil_tlv_iter_begin(&it, hdr, fap, IMAGE_TLV_ANY, false);
     538:	2300      	movs	r3, #0
     53a:	462a      	mov	r2, r5
     53c:	9300      	str	r3, [sp, #0]
     53e:	4621      	mov	r1, r4
     540:	f64f 73ff 	movw	r3, #65535	; 0xffff
     544:	a807      	add	r0, sp, #28
     546:	f004 fe7c 	bl	5242 <bootutil_tlv_iter_begin>
    if (rc) {
     54a:	4680      	mov	r8, r0
     54c:	2800      	cmp	r0, #0
     54e:	d14a      	bne.n	5e6 <FIH_LABEL_FIH_CALL_END_526+0x30>
        goto out;
    }

    if (it.tlv_end > bootutil_max_image_size(fap)) {
     550:	4628      	mov	r0, r5
     552:	9c0c      	ldr	r4, [sp, #48]	; 0x30
     554:	f004 ff7d 	bl	5452 <bootutil_max_image_size>
     558:	4284      	cmp	r4, r0
     55a:	d844      	bhi.n	5e6 <FIH_LABEL_FIH_CALL_END_526+0x30>
    int key_id = -1;
     55c:	f04f 34ff 	mov.w	r4, #4294967295
             * can be multiple signatures, each preceded by a key.
             */
#endif /* !MCUBOOT_HW_KEY */
        } else if (type == EXPECTED_SIG_TLV) {
            /* Ignore this signature if it is out of bounds. */
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     560:	f8df b184 	ldr.w	fp, [pc, #388]	; 6e8 <FIH_LABEL_FIH_CALL_END_1022+0x20>
     564:	f8df 9178 	ldr.w	r9, [pc, #376]	; 6e0 <FIH_LABEL_FIH_CALL_END_1022+0x18>
        rc = bootutil_tlv_iter_next(&it, &off, &len, &type);
     568:	f10d 0316 	add.w	r3, sp, #22
     56c:	aa05      	add	r2, sp, #20
     56e:	a906      	add	r1, sp, #24
     570:	a807      	add	r0, sp, #28
     572:	f004 feb4 	bl	52de <bootutil_tlv_iter_next>
        if (rc < 0) {
     576:	2800      	cmp	r0, #0
     578:	db35      	blt.n	5e6 <FIH_LABEL_FIH_CALL_END_526+0x30>
        } else if (rc > 0) {
     57a:	f040 80a6 	bne.w	6ca <FIH_LABEL_FIH_CALL_END_1022+0x2>
        if (type == IMAGE_TLV_SHA256) {
     57e:	f8bd 7016 	ldrh.w	r7, [sp, #22]
     582:	2f10      	cmp	r7, #16
     584:	d139      	bne.n	5fa <FIH_LABEL_FIH_CALL_END_526+0x44>
            if (len != sizeof(hash)) {
     586:	f8bd 8014 	ldrh.w	r8, [sp, #20]
     58a:	f1b8 0f20 	cmp.w	r8, #32
     58e:	d12a      	bne.n	5e6 <FIH_LABEL_FIH_CALL_END_526+0x30>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, sizeof(hash));
     590:	4643      	mov	r3, r8
     592:	4628      	mov	r0, r5
     594:	9906      	ldr	r1, [sp, #24]
     596:	aa3a      	add	r2, sp, #232	; 0xe8
     598:	f005 fb73 	bl	5c82 <flash_area_read>
            if (rc) {
     59c:	bb18      	cbnz	r0, 5e6 <FIH_LABEL_FIH_CALL_END_526+0x30>

0000059e <FIH_LABEL_FIH_CALL_START_502>:
            FIH_CALL(boot_fih_memequal, fih_rc, hash, buf, sizeof(hash));
     59e:	f000 f961 	bl	864 <fih_cfi_get_and_increment>
     5a2:	4642      	mov	r2, r8
     5a4:	4607      	mov	r7, r0
     5a6:	a93a      	add	r1, sp, #232	; 0xe8
     5a8:	a80d      	add	r0, sp, #52	; 0x34
     5aa:	f000 f923 	bl	7f4 <boot_fih_memequal>
     5ae:	4680      	mov	r8, r0
     5b0:	4638      	mov	r0, r7
     5b2:	f000 f967 	bl	884 <fih_cfi_validate>

000005b6 <FIH_LABEL_FIH_CALL_END_526>:
            if (FIH_NOT_EQ(fih_rc, FIH_SUCCESS)) {
     5b6:	4b4b      	ldr	r3, [pc, #300]	; (6e4 <FIH_LABEL_FIH_CALL_END_1022+0x1c>)
     5b8:	681b      	ldr	r3, [r3, #0]
     5ba:	4543      	cmp	r3, r8
     5bc:	d113      	bne.n	5e6 <FIH_LABEL_FIH_CALL_END_526+0x30>
            sha256_valid = 1;
     5be:	f04f 0801 	mov.w	r8, #1
     5c2:	e7d1      	b.n	568 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x80>
        if (blk_sz > tmp_buf_sz) {
     5c4:	9b65      	ldr	r3, [sp, #404]	; 0x194
        blk_sz = size - off;
     5c6:	eba7 0908 	sub.w	r9, r7, r8
     5ca:	4599      	cmp	r9, r3
     5cc:	bf28      	it	cs
     5ce:	4699      	movcs	r9, r3
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
     5d0:	465a      	mov	r2, fp
     5d2:	464b      	mov	r3, r9
     5d4:	4641      	mov	r1, r8
     5d6:	4628      	mov	r0, r5
     5d8:	f005 fb53 	bl	5c82 <flash_area_read>
        if (rc) {
     5dc:	b130      	cbz	r0, 5ec <FIH_LABEL_FIH_CALL_END_526+0x36>
     5de:	2200      	movs	r2, #0
     5e0:	4b3f      	ldr	r3, [pc, #252]	; (6e0 <FIH_LABEL_FIH_CALL_END_1022+0x18>)
     5e2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    }
#endif

out:
    if (rc) {
        FIH_SET(fih_rc, FIH_FAILURE);
     5e6:	4b3d      	ldr	r3, [pc, #244]	; (6dc <FIH_LABEL_FIH_CALL_END_1022+0x14>)
     5e8:	681e      	ldr	r6, [r3, #0]
     5ea:	e071      	b.n	6d0 <FIH_LABEL_FIH_CALL_END_1022+0x8>
     5ec:	464a      	mov	r2, r9
     5ee:	4659      	mov	r1, fp
     5f0:	a83a      	add	r0, sp, #232	; 0xe8
     5f2:	f005 fa40 	bl	5a76 <cc310_sha256_update>
    for (off = 0; off < size; off += blk_sz) {
     5f6:	44c8      	add	r8, r9
     5f8:	e78a      	b.n	510 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x28>
        } else if (type == IMAGE_TLV_KEYHASH) {
     5fa:	2f01      	cmp	r7, #1
     5fc:	d13f      	bne.n	67e <FIH_LABEL_FIH_CALL_END_526+0xc8>
            if (len > 32) {
     5fe:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     602:	2b20      	cmp	r3, #32
     604:	d8ef      	bhi.n	5e6 <FIH_LABEL_FIH_CALL_END_526+0x30>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     606:	4628      	mov	r0, r5
     608:	9906      	ldr	r1, [sp, #24]
     60a:	aa3a      	add	r2, sp, #232	; 0xe8
     60c:	f005 fb39 	bl	5c82 <flash_area_read>
            if (rc) {
     610:	4604      	mov	r4, r0
     612:	2800      	cmp	r0, #0
     614:	d1e7      	bne.n	5e6 <FIH_LABEL_FIH_CALL_END_526+0x30>
            key_id = bootutil_find_key(buf, len);
     616:	f89d 3014 	ldrb.w	r3, [sp, #20]
    if (keyhash_len > 32) {
     61a:	2b20      	cmp	r3, #32
            key_id = bootutil_find_key(buf, len);
     61c:	9302      	str	r3, [sp, #8]
    if (keyhash_len > 32) {
     61e:	d80a      	bhi.n	636 <FIH_LABEL_FIH_CALL_END_526+0x80>
    for (i = 0; i < bootutil_key_cnt; i++) {
     620:	f8db 3000 	ldr.w	r3, [fp]
     624:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 6ec <FIH_LABEL_FIH_CALL_END_1022+0x24>
     628:	9303      	str	r3, [sp, #12]
     62a:	9b03      	ldr	r3, [sp, #12]
     62c:	429c      	cmp	r4, r3
     62e:	db05      	blt.n	63c <FIH_LABEL_FIH_CALL_END_526+0x86>
     630:	2300      	movs	r3, #0
     632:	f8c9 3500 	str.w	r3, [r9, #1280]	; 0x500
                key_id = -1;
     636:	f04f 34ff 	mov.w	r4, #4294967295
     63a:	e795      	b.n	568 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x80>
    cc310_init();
     63c:	f000 fce8 	bl	1010 <cc310_init>
    NRF_CRYPTOCELL->ENABLE=1;
     640:	f8c9 7500 	str.w	r7, [r9, #1280]	; 0x500
    nrf_cc310_bl_hash_sha256_init(ctx);
     644:	a81d      	add	r0, sp, #116	; 0x74
     646:	f003 fd0b 	bl	4060 <nrf_cc310_bl_hash_sha256_init>
        bootutil_sha256_update(&sha256_ctx, key->key, *key->len);
     64a:	f8da 2004 	ldr.w	r2, [sl, #4]
     64e:	a81d      	add	r0, sp, #116	; 0x74
     650:	6812      	ldr	r2, [r2, #0]
     652:	f85a 1b08 	ldr.w	r1, [sl], #8
     656:	f005 fa0e 	bl	5a76 <cc310_sha256_update>
    nrf_cc310_bl_hash_sha256_finalize(ctx,
     65a:	a915      	add	r1, sp, #84	; 0x54
     65c:	a81d      	add	r0, sp, #116	; 0x74
     65e:	f003 fd71 	bl	4144 <nrf_cc310_bl_hash_sha256_finalize>
    NRF_CRYPTOCELL->ENABLE=0;
     662:	2200      	movs	r2, #0
     664:	f8c9 2500 	str.w	r2, [r9, #1280]	; 0x500
        if (!memcmp(hash, keyhash, keyhash_len)) {
     668:	9a02      	ldr	r2, [sp, #8]
     66a:	a93a      	add	r1, sp, #232	; 0xe8
     66c:	a815      	add	r0, sp, #84	; 0x54
     66e:	f005 fb95 	bl	5d9c <memcmp>
     672:	b910      	cbnz	r0, 67a <FIH_LABEL_FIH_CALL_END_526+0xc4>
     674:	f8c9 0500 	str.w	r0, [r9, #1280]	; 0x500
            return i;
     678:	e776      	b.n	568 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x80>
    for (i = 0; i < bootutil_key_cnt; i++) {
     67a:	3401      	adds	r4, #1
     67c:	e7d5      	b.n	62a <FIH_LABEL_FIH_CALL_END_526+0x74>
        } else if (type == EXPECTED_SIG_TLV) {
     67e:	2f22      	cmp	r7, #34	; 0x22
     680:	f47f af72 	bne.w	568 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x80>
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     684:	1c63      	adds	r3, r4, #1
     686:	f43f af6f 	beq.w	568 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x80>
     68a:	f8db 3000 	ldr.w	r3, [fp]
     68e:	42a3      	cmp	r3, r4
     690:	ddd1      	ble.n	636 <FIH_LABEL_FIH_CALL_END_526+0x80>
            if (!EXPECTED_SIG_LEN(len) || len > sizeof(buf)) {
     692:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     696:	2b80      	cmp	r3, #128	; 0x80
     698:	d8a5      	bhi.n	5e6 <FIH_LABEL_FIH_CALL_END_526+0x30>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     69a:	4628      	mov	r0, r5
     69c:	9906      	ldr	r1, [sp, #24]
     69e:	aa3a      	add	r2, sp, #232	; 0xe8
     6a0:	f005 faef 	bl	5c82 <flash_area_read>
            if (rc) {
     6a4:	2800      	cmp	r0, #0
     6a6:	d19e      	bne.n	5e6 <FIH_LABEL_FIH_CALL_END_526+0x30>

000006a8 <FIH_LABEL_FIH_CALL_START_994>:
            FIH_CALL(bootutil_verify_sig, valid_signature, hash, sizeof(hash),
     6a8:	f000 f8dc 	bl	864 <fih_cfi_get_and_increment>
     6ac:	b2e4      	uxtb	r4, r4
     6ae:	4607      	mov	r7, r0
     6b0:	2120      	movs	r1, #32
     6b2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     6b6:	aa3a      	add	r2, sp, #232	; 0xe8
     6b8:	9400      	str	r4, [sp, #0]
     6ba:	a80d      	add	r0, sp, #52	; 0x34
     6bc:	f000 f818 	bl	6f0 <bootutil_verify_sig>
     6c0:	4606      	mov	r6, r0
     6c2:	4638      	mov	r0, r7
     6c4:	f000 f8de 	bl	884 <fih_cfi_validate>

000006c8 <FIH_LABEL_FIH_CALL_END_1022>:
            key_id = -1;
     6c8:	e7b5      	b.n	636 <FIH_LABEL_FIH_CALL_END_526+0x80>
    if (rc) {
     6ca:	f1b8 0f00 	cmp.w	r8, #0
     6ce:	d08a      	beq.n	5e6 <FIH_LABEL_FIH_CALL_END_526+0x30>
    }

    FIH_RET(fih_rc);
     6d0:	f000 f8d0 	bl	874 <fih_cfi_decrement>
}
     6d4:	4630      	mov	r0, r6
     6d6:	b05b      	add	sp, #364	; 0x16c
     6d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     6dc:	20000004 	.word	0x20000004
     6e0:	50840000 	.word	0x50840000
     6e4:	20000008 	.word	0x20000008
     6e8:	00006978 	.word	0x00006978
     6ec:	0000697c 	.word	0x0000697c

000006f0 <bootutil_verify_sig>:
#include "bootutil/crypto/ecdsa_p256.h"

fih_ret
bootutil_verify_sig(uint8_t *hash, uint32_t hlen, uint8_t *sig, size_t slen,
                    uint8_t key_id)
{
     6f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     6f4:	b096      	sub	sp, #88	; 0x58
     6f6:	4616      	mov	r6, r2
     6f8:	461d      	mov	r5, r3
     6fa:	f89d 2078 	ldrb.w	r2, [sp, #120]	; 0x78
    bootutil_ecdsa_p256_context ctx;
    FIH_DECLARE(fih_rc, FIH_FAILURE);
    uint8_t *pubkey;
    uint8_t *end;

    pubkey = (uint8_t *)bootutil_keys[key_id].key;
     6fe:	4b38      	ldr	r3, [pc, #224]	; (7e0 <bootutil_verify_sig+0xf0>)
{
     700:	4607      	mov	r7, r0
    pubkey = (uint8_t *)bootutil_keys[key_id].key;
     702:	f853 1032 	ldr.w	r1, [r3, r2, lsl #3]
    end = pubkey + *bootutil_keys[key_id].len;
     706:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
     70a:	685b      	ldr	r3, [r3, #4]
    pubkey = (uint8_t *)bootutil_keys[key_id].key;
     70c:	9101      	str	r1, [sp, #4]
    end = pubkey + *bootutil_keys[key_id].len;
     70e:	6818      	ldr	r0, [r3, #0]
    FIH_DECLARE(fih_rc, FIH_FAILURE);
     710:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 7f0 <bootutil_verify_sig+0x100>
{
    size_t len;
    mbedtls_asn1_buf alg;
    mbedtls_asn1_buf param;

    if (mbedtls_asn1_get_tag(cp, end, &len,
     714:	4401      	add	r1, r0
     716:	2330      	movs	r3, #48	; 0x30
     718:	aa02      	add	r2, sp, #8
     71a:	a801      	add	r0, sp, #4
     71c:	f8d8 9000 	ldr.w	r9, [r8]
     720:	f005 f937 	bl	5992 <mbedtls_asn1_get_tag>
     724:	2800      	cmp	r0, #0
     726:	d151      	bne.n	7cc <bootutil_verify_sig+0xdc>
        MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE)) {
        return -1;
    }
    end = *cp + len;
     728:	e9dd 4301 	ldrd	r4, r3, [sp, #4]
     72c:	441c      	add	r4, r3

    /* ECParameters (RFC5480) */
    if (mbedtls_asn1_get_alg(cp, end, &alg, &param)) {
     72e:	4621      	mov	r1, r4
     730:	ab06      	add	r3, sp, #24
     732:	aa03      	add	r2, sp, #12
     734:	a801      	add	r0, sp, #4
     736:	f005 f954 	bl	59e2 <mbedtls_asn1_get_alg>
     73a:	2800      	cmp	r0, #0
     73c:	d146      	bne.n	7cc <bootutil_verify_sig+0xdc>
        return -2;
    }
    /* id-ecPublicKey (RFC5480) */
    if (alg.MBEDTLS_CONTEXT_MEMBER(len) != sizeof(ec_pubkey_oid) - 1 ||
     73e:	9a04      	ldr	r2, [sp, #16]
     740:	2a07      	cmp	r2, #7
     742:	d143      	bne.n	7cc <bootutil_verify_sig+0xdc>
        memcmp(alg.MBEDTLS_CONTEXT_MEMBER(p), ec_pubkey_oid, sizeof(ec_pubkey_oid) - 1)) {
     744:	4927      	ldr	r1, [pc, #156]	; (7e4 <bootutil_verify_sig+0xf4>)
     746:	9805      	ldr	r0, [sp, #20]
     748:	f005 fb28 	bl	5d9c <memcmp>
    if (alg.MBEDTLS_CONTEXT_MEMBER(len) != sizeof(ec_pubkey_oid) - 1 ||
     74c:	2800      	cmp	r0, #0
     74e:	d13d      	bne.n	7cc <bootutil_verify_sig+0xdc>
        return -3;
    }
    /* namedCurve (RFC5480) */
    if (param.MBEDTLS_CONTEXT_MEMBER(len) != sizeof(ec_secp256r1_oid) - 1 ||
     750:	9a07      	ldr	r2, [sp, #28]
     752:	2a08      	cmp	r2, #8
     754:	d13a      	bne.n	7cc <bootutil_verify_sig+0xdc>
        memcmp(param.MBEDTLS_CONTEXT_MEMBER(p), ec_secp256r1_oid, sizeof(ec_secp256r1_oid) - 1)) {
     756:	4924      	ldr	r1, [pc, #144]	; (7e8 <bootutil_verify_sig+0xf8>)
     758:	9808      	ldr	r0, [sp, #32]
     75a:	f005 fb1f 	bl	5d9c <memcmp>
    if (param.MBEDTLS_CONTEXT_MEMBER(len) != sizeof(ec_secp256r1_oid) - 1 ||
     75e:	bba8      	cbnz	r0, 7cc <bootutil_verify_sig+0xdc>
        return -4;
    }
    /* ECPoint (RFC5480) */
    if (mbedtls_asn1_get_bitstring_null(cp, end, &len)) {
     760:	4621      	mov	r1, r4
     762:	aa02      	add	r2, sp, #8
     764:	a801      	add	r0, sp, #4
     766:	f005 f928 	bl	59ba <mbedtls_asn1_get_bitstring_null>
     76a:	bb78      	cbnz	r0, 7cc <bootutil_verify_sig+0xdc>
        return -6;
    }
    if (*cp + len != end) {
     76c:	e9dd a301 	ldrd	sl, r3, [sp, #4]
     770:	eb0a 0203 	add.w	r2, sl, r3
     774:	4294      	cmp	r4, r2
     776:	d129      	bne.n	7cc <bootutil_verify_sig+0xdc>
        return -7;
    }

    if (len != 2 * NUM_ECC_BYTES + 1) {
     778:	2b41      	cmp	r3, #65	; 0x41
     77a:	d127      	bne.n	7cc <bootutil_verify_sig+0xdc>
    (void)ctx;
    (void)pk_len;
    (void)hash_len;
    uint8_t dsig[2 * NUM_ECC_BYTES];

    if (bootutil_decode_sig(dsig, sig, sig + sig_len)) {
     77c:	4435      	add	r5, r6
    rc = mbedtls_asn1_get_tag(&cp, end, &len,
     77e:	2330      	movs	r3, #48	; 0x30
     780:	4629      	mov	r1, r5
     782:	aa03      	add	r2, sp, #12
     784:	a802      	add	r0, sp, #8
     786:	9602      	str	r6, [sp, #8]
     788:	f005 f903 	bl	5992 <mbedtls_asn1_get_tag>
    if (rc) {
     78c:	b9e0      	cbnz	r0, 7c8 <bootutil_verify_sig+0xd8>
    if (cp + len > end) {
     78e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
     792:	4413      	add	r3, r2
     794:	429d      	cmp	r5, r3
     796:	d317      	bcc.n	7c8 <bootutil_verify_sig+0xd8>
    rc = bootutil_read_bigint(signature, &cp, end);
     798:	462a      	mov	r2, r5
     79a:	a902      	add	r1, sp, #8
     79c:	a806      	add	r0, sp, #24
     79e:	f004 fdea 	bl	5376 <bootutil_read_bigint>
    if (rc) {
     7a2:	b988      	cbnz	r0, 7c8 <bootutil_verify_sig+0xd8>
    rc = bootutil_read_bigint(signature + NUM_ECC_BYTES, &cp, end);
     7a4:	462a      	mov	r2, r5
     7a6:	a902      	add	r1, sp, #8
     7a8:	a80e      	add	r0, sp, #56	; 0x38
     7aa:	f004 fde4 	bl	5376 <bootutil_read_bigint>
    if (rc) {
     7ae:	b958      	cbnz	r0, 7c8 <bootutil_verify_sig+0xd8>
        return -1;
    }

    /* Only support uncompressed keys. */
    if (pk[0] != 0x04) {
     7b0:	f89a 3000 	ldrb.w	r3, [sl]
     7b4:	2b04      	cmp	r3, #4
     7b6:	d107      	bne.n	7c8 <bootutil_verify_sig+0xd8>
        return -1;
    }
    pk++;

    return cc310_ecdsa_verify_secp256r1(hash, pk, dsig, BOOTUTIL_CRYPTO_ECDSA_P256_HASH_SIZE);
     7b8:	2320      	movs	r3, #32
     7ba:	4638      	mov	r0, r7
     7bc:	aa06      	add	r2, sp, #24
     7be:	f10a 0101 	add.w	r1, sl, #1
     7c2:	f000 fc3d 	bl	1040 <cc310_ecdsa_verify_secp256r1>
 * value that is not FIH_SUCCESS
 */
__attribute__((always_inline)) inline
fih_ret fih_ret_encode_zero_equality(int x)
{
    if (x) {
     7c6:	b138      	cbz	r0, 7d8 <bootutil_verify_sig+0xe8>
        return FIH_FAILURE;
     7c8:	f8d8 9000 	ldr.w	r9, [r8]
    }

out:
    bootutil_ecdsa_p256_drop(&ctx);

    FIH_RET(fih_rc);
     7cc:	f000 f852 	bl	874 <fih_cfi_decrement>
}
     7d0:	4648      	mov	r0, r9
     7d2:	b016      	add	sp, #88	; 0x58
     7d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    } else {
        return FIH_SUCCESS;
     7d8:	4b04      	ldr	r3, [pc, #16]	; (7ec <bootutil_verify_sig+0xfc>)
     7da:	f8d3 9000 	ldr.w	r9, [r3]
    if (FIH_NOT_EQ(fih_rc, FIH_SUCCESS)) {
     7de:	e7f5      	b.n	7cc <bootutil_verify_sig+0xdc>
     7e0:	0000697c 	.word	0x0000697c
     7e4:	00006d2d 	.word	0x00006d2d
     7e8:	00006d24 	.word	0x00006d24
     7ec:	20000008 	.word	0x20000008
     7f0:	20000004 	.word	0x20000004

000007f4 <boot_fih_memequal>:
{
    return memcmp(s1, s2, n);
}
#else
fih_ret boot_fih_memequal(const void *s1, const void *s2, size_t n)
{
     7f4:	b570      	push	{r4, r5, r6, lr}
    size_t i;
    uint8_t *s1_p = (uint8_t*) s1;
    uint8_t *s2_p = (uint8_t*) s2;
    FIH_DECLARE(ret, FIH_FAILURE);
     7f6:	4b09      	ldr	r3, [pc, #36]	; (81c <CONFIG_ISR_STACK_SIZE+0x1c>)
{
     7f8:	4604      	mov	r4, r0
    FIH_DECLARE(ret, FIH_FAILURE);
     7fa:	681d      	ldr	r5, [r3, #0]

    for (i = 0; i < n; i++) {
     7fc:	2300      	movs	r3, #0
     7fe:	4293      	cmp	r3, r2
     800:	d105      	bne.n	80e <CONFIG_ISR_STACK_SIZE+0xe>
        if (s1_p[i] != s2_p[i]) {
            goto out;
        }
    }
    if (i == n) {
        ret = FIH_SUCCESS;
     802:	4b07      	ldr	r3, [pc, #28]	; (820 <CONFIG_ISR_STACK_SIZE+0x20>)
     804:	681d      	ldr	r5, [r3, #0]
    }

out:
    FIH_RET(ret);
     806:	f000 f835 	bl	874 <fih_cfi_decrement>
}
     80a:	4628      	mov	r0, r5
     80c:	bd70      	pop	{r4, r5, r6, pc}
        if (s1_p[i] != s2_p[i]) {
     80e:	5ce6      	ldrb	r6, [r4, r3]
     810:	5cc8      	ldrb	r0, [r1, r3]
     812:	4286      	cmp	r6, r0
     814:	d1f7      	bne.n	806 <CONFIG_ISR_STACK_SIZE+0x6>
    for (i = 0; i < n; i++) {
     816:	3301      	adds	r3, #1
     818:	e7f1      	b.n	7fe <boot_fih_memequal+0xa>
     81a:	bf00      	nop
     81c:	20000004 	.word	0x20000004
     820:	20000008 	.word	0x20000008

00000824 <boot_find_status>:
 *
 * @returns 0 on success, -1 on errors
 */
int
boot_find_status(int image_index, const struct flash_area **fap)
{
     824:	b51f      	push	{r0, r1, r2, r3, r4, lr}
     */

    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
        uint8_t magic[BOOT_MAGIC_SZ];

        if (flash_area_open(areas[i], fap)) {
     826:	2003      	movs	r0, #3
{
     828:	460c      	mov	r4, r1
        if (flash_area_open(areas[i], fap)) {
     82a:	f001 f80b 	bl	1844 <flash_area_open>
     82e:	b950      	cbnz	r0, 846 <boot_find_status+0x22>
            break;
        }

        if (flash_area_read(*fap, boot_magic_off(*fap), magic, BOOT_MAGIC_SZ)) {
     830:	6820      	ldr	r0, [r4, #0]
     832:	2310      	movs	r3, #16
}

static inline uint32_t
boot_magic_off(const struct flash_area *fap)
{
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
     834:	6881      	ldr	r1, [r0, #8]
     836:	466a      	mov	r2, sp
     838:	3910      	subs	r1, #16
     83a:	f005 fa22 	bl	5c82 <flash_area_read>
     83e:	b128      	cbz	r0, 84c <boot_find_status+0x28>

        if (BOOT_MAGIC_GOOD == boot_magic_decode(magic)) {
            return 0;
        }

        flash_area_close(*fap);
     840:	6820      	ldr	r0, [r4, #0]
     842:	f005 fa1d 	bl	5c80 <flash_area_close>
    }

    /* If we got here, no magic was found */
    fap = NULL;
    return -1;
     846:	f04f 30ff 	mov.w	r0, #4294967295
     84a:	e006      	b.n	85a <boot_find_status+0x36>
    if (memcmp(magic, BOOT_IMG_MAGIC, BOOT_MAGIC_SZ) == 0) {
     84c:	2210      	movs	r2, #16
     84e:	4668      	mov	r0, sp
     850:	4903      	ldr	r1, [pc, #12]	; (860 <boot_find_status+0x3c>)
     852:	f005 faa3 	bl	5d9c <memcmp>
     856:	2800      	cmp	r0, #0
     858:	d1f2      	bne.n	840 <boot_find_status+0x1c>
}
     85a:	b004      	add	sp, #16
     85c:	bd10      	pop	{r4, pc}
     85e:	bf00      	nop
     860:	00006d0c 	.word	0x00006d0c

00000864 <fih_cfi_get_and_increment>:

/* Increment the CFI counter by one, and return the value before the increment.
 */
fih_int fih_cfi_get_and_increment(void)
{
    fih_int saved = _fih_cfi_ctr;
     864:	4b02      	ldr	r3, [pc, #8]	; (870 <fih_cfi_get_and_increment+0xc>)
     866:	6818      	ldr	r0, [r3, #0]
    _fih_cfi_ctr = fih_int_encode(fih_int_decode(saved) + 1);
     868:	1c42      	adds	r2, r0, #1
     86a:	601a      	str	r2, [r3, #0]
    return saved;
}
     86c:	4770      	bx	lr
     86e:	bf00      	nop
     870:	200001d0 	.word	0x200001d0

00000874 <fih_cfi_decrement>:
/* Decrement the global CFI counter by one, so that it has the same value as
 * before the cfi_precall
 */
void fih_cfi_decrement(void)
{
    _fih_cfi_ctr = fih_int_encode(fih_int_decode(_fih_cfi_ctr) - 1);
     874:	4a02      	ldr	r2, [pc, #8]	; (880 <fih_cfi_decrement+0xc>)
     876:	6813      	ldr	r3, [r2, #0]
     878:	3b01      	subs	r3, #1
     87a:	6013      	str	r3, [r2, #0]
}
     87c:	4770      	bx	lr
     87e:	bf00      	nop
     880:	200001d0 	.word	0x200001d0

00000884 <fih_cfi_validate>:
    if (fih_int_decode(saved) != fih_int_decode(_fih_cfi_ctr)) {
     884:	4b03      	ldr	r3, [pc, #12]	; (894 <fih_cfi_validate+0x10>)
     886:	681b      	ldr	r3, [r3, #0]
     888:	4283      	cmp	r3, r0
     88a:	d001      	beq.n	890 <fih_cfi_validate+0xc>
        FIH_PANIC;
     88c:	f004 bdf0 	b.w	5470 <fih_panic_loop>
}
     890:	4770      	bx	lr
     892:	bf00      	nop
     894:	200001d0 	.word	0x200001d0

00000898 <boot_validate_slot.isra.0>:
 *         FIH_SUCCESS                      if image was successfully validated
 *         FIH_NO_BOOTABLE_IMAGE            if no bootloable image was found
 *         FIH_FAILURE                      on any errors
 */
static fih_ret
boot_validate_slot(struct boot_loader_state *state, int slot,
     898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                   struct boot_status *bs)
{
    const struct flash_area *fap;
    struct image_header *hdr;
    int area_id;
    FIH_DECLARE(fih_rc, FIH_FAILURE);
     89c:	4b3d      	ldr	r3, [pc, #244]	; (994 <FIH_LABEL_FIH_CALL_END_509+0x68>)
boot_validate_slot(struct boot_loader_state *state, int slot,
     89e:	b08b      	sub	sp, #44	; 0x2c
     8a0:	4606      	mov	r6, r0
    int rc;

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     8a2:	2000      	movs	r0, #0
boot_validate_slot(struct boot_loader_state *state, int slot,
     8a4:	460d      	mov	r5, r1
    FIH_DECLARE(fih_rc, FIH_FAILURE);
     8a6:	681c      	ldr	r4, [r3, #0]
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     8a8:	f004 fca6 	bl	51f8 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     8ac:	a908      	add	r1, sp, #32
     8ae:	b2c0      	uxtb	r0, r0
     8b0:	f000 ffc8 	bl	1844 <flash_area_open>
    if (rc != 0) {
     8b4:	b128      	cbz	r0, 8c2 <boot_validate_slot.isra.0+0x2a>
#endif

out:
    flash_area_close(fap);

    FIH_RET(fih_rc);
     8b6:	f7ff ffdd 	bl	874 <fih_cfi_decrement>
}
     8ba:	4620      	mov	r0, r4
     8bc:	b00b      	add	sp, #44	; 0x2c
     8be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     8c2:	4629      	mov	r1, r5
     8c4:	f004 fc98 	bl	51f8 <flash_area_id_from_multi_image_slot>
     ((swap_type) == BOOT_SWAP_TYPE_PERM))

static inline struct image_header*
boot_img_hdr(struct boot_loader_state *state, size_t slot)
{
    return &BOOT_IMG(state, slot).hdr;
     8c8:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
    rc = flash_area_open(area_id, &fap);
     8cc:	a909      	add	r1, sp, #36	; 0x24
     8ce:	b2c0      	uxtb	r0, r0
     8d0:	fb0b 6b05 	mla	fp, fp, r5, r6
     8d4:	f000 ffb6 	bl	1844 <flash_area_open>
    if (rc != 0) {
     8d8:	2800      	cmp	r0, #0
     8da:	d03f      	beq.n	95c <FIH_LABEL_FIH_CALL_END_509+0x30>
        (hdr->ih_flags & IMAGE_F_NON_BOOTABLE)) {
     8dc:	272c      	movs	r7, #44	; 0x2c
     8de:	436f      	muls	r7, r5
     8e0:	eb06 0807 	add.w	r8, r6, r7
     8e4:	f8d8 4010 	ldr.w	r4, [r8, #16]
    if (boot_check_header_erased(state, slot) == 0 ||
     8e8:	f014 0410 	ands.w	r4, r4, #16
     8ec:	d147      	bne.n	97e <FIH_LABEL_FIH_CALL_END_509+0x52>

000008ee <FIH_LABEL_FIH_CALL_START_421>:
        FIH_CALL(boot_image_check, fih_rc, state, hdr, fap, bs);
     8ee:	f7ff ffb9 	bl	864 <fih_cfi_get_and_increment>
     8f2:	9b08      	ldr	r3, [sp, #32]
     8f4:	4681      	mov	r9, r0
     8f6:	9307      	str	r3, [sp, #28]

000008f8 <FIH_LABEL_FIH_CALL_START_453>:
    FIH_CALL(bootutil_img_validate, fih_rc, BOOT_CURR_ENC(state), image_index,
     8f8:	f7ff ffb4 	bl	864 <fih_cfi_get_and_increment>
     8fc:	f44f 7280 	mov.w	r2, #256	; 0x100
     900:	9201      	str	r2, [sp, #4]
     902:	4a25      	ldr	r2, [pc, #148]	; (998 <FIH_LABEL_FIH_CALL_END_509+0x6c>)
     904:	4621      	mov	r1, r4
     906:	4682      	mov	sl, r0
     908:	e9cd 4403 	strd	r4, r4, [sp, #12]
     90c:	9b07      	ldr	r3, [sp, #28]
     90e:	9402      	str	r4, [sp, #8]
     910:	9200      	str	r2, [sp, #0]
     912:	4620      	mov	r0, r4
     914:	465a      	mov	r2, fp
     916:	f7ff fdd5 	bl	4c4 <bootutil_img_validate>
     91a:	4604      	mov	r4, r0
     91c:	4650      	mov	r0, sl
     91e:	f7ff ffb1 	bl	884 <fih_cfi_validate>

00000922 <FIH_LABEL_FIH_CALL_END_487>:
    FIH_RET(fih_rc);
     922:	f7ff ffa7 	bl	874 <fih_cfi_decrement>
        FIH_CALL(boot_image_check, fih_rc, state, hdr, fap, bs);
     926:	4648      	mov	r0, r9
     928:	f7ff ffac 	bl	884 <fih_cfi_validate>

0000092c <FIH_LABEL_FIH_CALL_END_509>:
    if (hdr->ih_magic != IMAGE_MAGIC) {
     92c:	4b1b      	ldr	r3, [pc, #108]	; (99c <FIH_LABEL_FIH_CALL_END_509+0x70>)
     92e:	59f2      	ldr	r2, [r6, r7]
    if (!boot_is_header_valid(hdr, fap) || FIH_NOT_EQ(fih_rc, FIH_SUCCESS)) {
     930:	9808      	ldr	r0, [sp, #32]
    if (hdr->ih_magic != IMAGE_MAGIC) {
     932:	429a      	cmp	r2, r3
     934:	d10c      	bne.n	950 <FIH_LABEL_FIH_CALL_END_509+0x24>
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
     936:	f8d8 200c 	ldr.w	r2, [r8, #12]
     93a:	f8b8 3008 	ldrh.w	r3, [r8, #8]
    if (a > UINT32_MAX - b) {
     93e:	189b      	adds	r3, r3, r2
     940:	d206      	bcs.n	950 <FIH_LABEL_FIH_CALL_END_509+0x24>
    if (size >= flash_area_get_size(fap)) {
     942:	6882      	ldr	r2, [r0, #8]
     944:	4293      	cmp	r3, r2
     946:	d203      	bcs.n	950 <FIH_LABEL_FIH_CALL_END_509+0x24>
    if (!boot_is_header_valid(hdr, fap) || FIH_NOT_EQ(fih_rc, FIH_SUCCESS)) {
     948:	4b15      	ldr	r3, [pc, #84]	; (9a0 <FIH_LABEL_FIH_CALL_END_509+0x74>)
     94a:	681b      	ldr	r3, [r3, #0]
     94c:	42a3      	cmp	r3, r4
     94e:	d01d      	beq.n	98c <FIH_LABEL_FIH_CALL_END_509+0x60>
        if ((slot != BOOT_PRIMARY_SLOT) || ARE_SLOTS_EQUIVALENT()) {
     950:	b1d5      	cbz	r5, 988 <FIH_LABEL_FIH_CALL_END_509+0x5c>
            flash_area_erase(fap, 0, flash_area_get_size(fap));
     952:	2100      	movs	r1, #0
     954:	6882      	ldr	r2, [r0, #8]
     956:	f005 f9be 	bl	5cd6 <flash_area_erase>
     95a:	e015      	b.n	988 <FIH_LABEL_FIH_CALL_END_509+0x5c>
    erased_val = flash_area_erased_val(fap);
     95c:	9809      	ldr	r0, [sp, #36]	; 0x24
     95e:	f005 f9d7 	bl	5d10 <flash_area_erased_val>
     962:	4604      	mov	r4, r0
    flash_area_close(fap);
     964:	9809      	ldr	r0, [sp, #36]	; 0x24
     966:	f005 f98b 	bl	5c80 <flash_area_close>
    for (i = 0; i < len; i++) {
     96a:	f10b 33ff 	add.w	r3, fp, #4294967295
     96e:	f10b 0203 	add.w	r2, fp, #3
        if (val != p[i]) {
     972:	f813 1f01 	ldrb.w	r1, [r3, #1]!
     976:	42a1      	cmp	r1, r4
     978:	d1b0      	bne.n	8dc <boot_validate_slot.isra.0+0x44>
    for (i = 0; i < len; i++) {
     97a:	4293      	cmp	r3, r2
     97c:	d1f9      	bne.n	972 <FIH_LABEL_FIH_CALL_END_509+0x46>
        if (slot != BOOT_PRIMARY_SLOT) {
     97e:	b11d      	cbz	r5, 988 <FIH_LABEL_FIH_CALL_END_509+0x5c>
            swap_erase_trailer_sectors(state, fap);
     980:	4630      	mov	r0, r6
     982:	9908      	ldr	r1, [sp, #32]
     984:	f004 fe49 	bl	561a <swap_erase_trailer_sectors>
        fih_rc = FIH_NO_BOOTABLE_IMAGE;
     988:	4b06      	ldr	r3, [pc, #24]	; (9a4 <FIH_LABEL_FIH_CALL_END_509+0x78>)
     98a:	681c      	ldr	r4, [r3, #0]
    flash_area_close(fap);
     98c:	9808      	ldr	r0, [sp, #32]
     98e:	f005 f977 	bl	5c80 <flash_area_close>
     992:	e790      	b.n	8b6 <boot_validate_slot.isra.0+0x1e>
     994:	20000004 	.word	0x20000004
     998:	20000ee4 	.word	0x20000ee4
     99c:	96f3b83d 	.word	0x96f3b83d
     9a0:	20000008 	.word	0x20000008
     9a4:	20000000 	.word	0x20000000

000009a8 <boot_swap_image.isra.0>:
 *                                  function on return.
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
boot_swap_image(struct boot_loader_state *state, struct boot_status *bs)
     9a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
     9aa:	460d      	mov	r5, r1
    uint8_t image_index;
    int rc;

    /* FIXME: just do this if asked by user? */

    size = copy_size = 0;
     9ac:	2100      	movs	r1, #0
boot_swap_image(struct boot_loader_state *state, struct boot_status *bs)
     9ae:	4604      	mov	r4, r0
    image_index = BOOT_CURR_IMG(state);

    if (boot_status_is_reset(bs)) {
     9b0:	4628      	mov	r0, r5
    size = copy_size = 0;
     9b2:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (boot_status_is_reset(bs)) {
     9b6:	f004 fdef 	bl	5598 <boot_status_is_reset>
     9ba:	b1e8      	cbz	r0, 9f8 <boot_swap_image.isra.0+0x50>
        /*
         * No swap ever happened, so need to find the largest image which
         * will be used to determine the amount of sectors to swap.
         */
        hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
     9bc:	4e15      	ldr	r6, [pc, #84]	; (a14 <boot_swap_image.isra.0+0x6c>)
     9be:	6823      	ldr	r3, [r4, #0]
     9c0:	42b3      	cmp	r3, r6
     9c2:	d103      	bne.n	9cc <boot_swap_image.isra.0+0x24>
            rc = boot_read_image_size(state, BOOT_PRIMARY_SLOT, &copy_size);
     9c4:	4620      	mov	r0, r4
     9c6:	aa03      	add	r2, sp, #12
     9c8:	f004 fd7b 	bl	54c2 <boot_read_image_size.constprop.0.isra.0>
            memset(bs->enckey[0], 0xff, BOOT_ENC_KEY_ALIGN_SIZE);
        }
#endif

        hdr = boot_img_hdr(state, BOOT_SECONDARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
     9cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     9ce:	42b3      	cmp	r3, r6
     9d0:	d104      	bne.n	9dc <boot_swap_image.isra.0+0x34>
            rc = boot_read_image_size(state, BOOT_SECONDARY_SLOT, &size);
     9d2:	2101      	movs	r1, #1
     9d4:	4620      	mov	r0, r4
     9d6:	aa02      	add	r2, sp, #8
     9d8:	f004 fd73 	bl	54c2 <boot_read_image_size.constprop.0.isra.0>
        } else {
            memset(bs->enckey[1], 0xff, BOOT_ENC_KEY_ALIGN_SIZE);
        }
#endif

        if (size > copy_size) {
     9dc:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
     9e0:	4293      	cmp	r3, r2
            copy_size = size;
     9e2:	bf88      	it	hi
     9e4:	9303      	strhi	r3, [sp, #12]
        }

        bs->swap_size = copy_size;
     9e6:	9b03      	ldr	r3, [sp, #12]
     9e8:	60ab      	str	r3, [r5, #8]
        }
#endif
        flash_area_close(fap);
    }

    swap_run(state, bs, copy_size);
     9ea:	4629      	mov	r1, r5
     9ec:	4620      	mov	r0, r4
     9ee:	9a03      	ldr	r2, [sp, #12]
     9f0:	f000 fa2c 	bl	e4c <swap_run>
#endif
    rc = BOOT_HOOK_CALL(boot_copy_region_post_hook, 0, BOOT_CURR_IMG(state),
                        BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT), size);

    return 0;
}
     9f4:	b004      	add	sp, #16
     9f6:	bd70      	pop	{r4, r5, r6, pc}
        rc = boot_find_status(image_index, &fap);
     9f8:	a901      	add	r1, sp, #4
     9fa:	f7ff ff13 	bl	824 <boot_find_status>
        rc = boot_read_swap_size(fap, &bs->swap_size);
     9fe:	9801      	ldr	r0, [sp, #4]
     a00:	f105 0108 	add.w	r1, r5, #8
     a04:	f004 fd00 	bl	5408 <boot_read_swap_size>
        copy_size = bs->swap_size;
     a08:	68ab      	ldr	r3, [r5, #8]
        flash_area_close(fap);
     a0a:	9801      	ldr	r0, [sp, #4]
        copy_size = bs->swap_size;
     a0c:	9303      	str	r3, [sp, #12]
        flash_area_close(fap);
     a0e:	f005 f937 	bl	5c80 <flash_area_close>
     a12:	e7ea      	b.n	9ea <boot_swap_image.isra.0+0x42>
     a14:	96f3b83d 	.word	0x96f3b83d

00000a18 <boot_copy_region>:
{
     a18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a1c:	4688      	mov	r8, r1
     a1e:	4691      	mov	r9, r2
     a20:	469a      	mov	sl, r3
    bytes_copied = 0;
     a22:	2600      	movs	r6, #0
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     a24:	f8df b070 	ldr.w	fp, [pc, #112]	; a98 <boot_copy_region+0x80>
     a28:	4c19      	ldr	r4, [pc, #100]	; (a90 <boot_copy_region+0x78>)
     a2a:	4d1a      	ldr	r5, [pc, #104]	; (a94 <boot_copy_region+0x7c>)
    while (bytes_copied < sz) {
     a2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     a2e:	429e      	cmp	r6, r3
     a30:	d301      	bcc.n	a36 <boot_copy_region+0x1e>
    return 0;
     a32:	2000      	movs	r0, #0
     a34:	e00f      	b.n	a56 <boot_copy_region+0x3e>
        if (sz - bytes_copied > sizeof buf) {
     a36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     a38:	4640      	mov	r0, r8
        if (sz - bytes_copied > sizeof buf) {
     a3a:	1b9f      	subs	r7, r3, r6
     a3c:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
     a40:	bf28      	it	cs
     a42:	f44f 6780 	movcs.w	r7, #1024	; 0x400
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     a46:	4a14      	ldr	r2, [pc, #80]	; (a98 <boot_copy_region+0x80>)
     a48:	463b      	mov	r3, r7
     a4a:	eb06 010a 	add.w	r1, r6, sl
     a4e:	f005 f918 	bl	5c82 <flash_area_read>
        if (rc != 0) {
     a52:	b110      	cbz	r0, a5a <boot_copy_region+0x42>
            return BOOT_EFLASH;
     a54:	2001      	movs	r0, #1
}
     a56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = flash_area_write(fap_dst, off_dst + bytes_copied, buf, chunk_sz);
     a5a:	990a      	ldr	r1, [sp, #40]	; 0x28
     a5c:	463b      	mov	r3, r7
     a5e:	465a      	mov	r2, fp
     a60:	4648      	mov	r0, r9
     a62:	1871      	adds	r1, r6, r1
     a64:	f005 f922 	bl	5cac <flash_area_write>
        if (rc != 0) {
     a68:	2800      	cmp	r0, #0
     a6a:	d1f3      	bne.n	a54 <boot_copy_region+0x3c>
     a6c:	f8c4 5600 	str.w	r5, [r4, #1536]	; 0x600
        bytes_copied += chunk_sz;
     a70:	443e      	add	r6, r7
     a72:	f8c4 5604 	str.w	r5, [r4, #1540]	; 0x604
     a76:	f8c4 5608 	str.w	r5, [r4, #1544]	; 0x608
     a7a:	f8c4 560c 	str.w	r5, [r4, #1548]	; 0x60c
     a7e:	f8c4 5610 	str.w	r5, [r4, #1552]	; 0x610
     a82:	f8c4 5614 	str.w	r5, [r4, #1556]	; 0x614
     a86:	f8c4 5618 	str.w	r5, [r4, #1560]	; 0x618
     a8a:	f8c4 561c 	str.w	r5, [r4, #1564]	; 0x61c
        MCUBOOT_WATCHDOG_FEED();
     a8e:	e7cd      	b.n	a2c <boot_copy_region+0x14>
     a90:	50018000 	.word	0x50018000
     a94:	6e524635 	.word	0x6e524635
     a98:	200009d4 	.word	0x200009d4

00000a9c <context_boot_go>:
#endif
}

fih_ret
context_boot_go(struct boot_loader_state *state, struct boot_rsp *rsp)
{
     a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     aa0:	460e      	mov	r6, r1

        /* Open primary and secondary image areas for the duration
         * of this call.
         */
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     aa2:	2100      	movs	r1, #0
        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     aa4:	4b90      	ldr	r3, [pc, #576]	; (ce8 <FIH_LABEL_FIH_CALL_END_2260+0x40>)
{
     aa6:	b086      	sub	sp, #24
        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     aa8:	6243      	str	r3, [r0, #36]	; 0x24
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors =
     aaa:	4b90      	ldr	r3, [pc, #576]	; (cec <FIH_LABEL_FIH_CALL_END_2260+0x44>)
{
     aac:	4604      	mov	r4, r0
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors =
     aae:	6503      	str	r3, [r0, #80]	; 0x50
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     ab0:	4608      	mov	r0, r1
     ab2:	f004 fba1 	bl	51f8 <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     ab6:	f104 0120 	add.w	r1, r4, #32
     aba:	b2c0      	uxtb	r0, r0
     abc:	f000 fec2 	bl	1844 <flash_area_open>
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     ac0:	2101      	movs	r1, #1
     ac2:	2000      	movs	r0, #0
     ac4:	f004 fb98 	bl	51f8 <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     ac8:	f104 014c 	add.w	r1, r4, #76	; 0x4c
     acc:	b2c0      	uxtb	r0, r0
     ace:	f000 feb9 	bl	1844 <flash_area_open>
    rc = boot_read_sectors(state);
     ad2:	4620      	mov	r0, r4
     ad4:	f004 fd36 	bl	5544 <boot_read_sectors>
    if (rc != 0) {
     ad8:	2800      	cmp	r0, #0
     ada:	d149      	bne.n	b70 <context_boot_go+0xd4>
    rc = boot_read_image_headers(state, false, NULL);
     adc:	2200      	movs	r2, #0
     ade:	4620      	mov	r0, r4
     ae0:	4611      	mov	r1, r2
     ae2:	f004 fcd8 	bl	5496 <boot_read_image_headers>
    if (rc != 0) {
     ae6:	2800      	cmp	r0, #0
     ae8:	d159      	bne.n	b9e <context_boot_go+0x102>
    if (boot_slots_compatible(state)) {
     aea:	4620      	mov	r0, r4
     aec:	f004 fec1 	bl	5872 <boot_slots_compatible>
     af0:	2800      	cmp	r0, #0
     af2:	d054      	beq.n	b9e <context_boot_go+0x102>
        boot_status_reset(bs);
     af4:	a802      	add	r0, sp, #8
     af6:	f004 fd46 	bl	5586 <boot_status_reset>
        rc = swap_read_status(state, bs);
     afa:	4601      	mov	r1, r0
     afc:	4620      	mov	r0, r4
     afe:	f004 fde1 	bl	56c4 <swap_read_status>
        if (rc != 0) {
     b02:	2800      	cmp	r0, #0
     b04:	d14b      	bne.n	b9e <context_boot_go+0x102>
        rc = boot_read_image_headers(state, !boot_status_is_reset(bs), bs);
     b06:	a802      	add	r0, sp, #8
     b08:	f004 fd46 	bl	5598 <boot_status_is_reset>
     b0c:	f080 0101 	eor.w	r1, r0, #1
     b10:	aa02      	add	r2, sp, #8
     b12:	4620      	mov	r0, r4
     b14:	b2c9      	uxtb	r1, r1
     b16:	f004 fcbe 	bl	5496 <boot_read_image_headers>
        if (rc != 0) {
     b1a:	4602      	mov	r2, r0
     b1c:	2800      	cmp	r0, #0
     b1e:	d13e      	bne.n	b9e <context_boot_go+0x102>
        if (!boot_status_is_reset(bs)) {
     b20:	a802      	add	r0, sp, #8
     b22:	f004 fd39 	bl	5598 <boot_status_is_reset>
     b26:	4605      	mov	r5, r0
     b28:	bbe8      	cbnz	r0, ba6 <context_boot_go+0x10a>
    rc = boot_swap_image(state, bs);
     b2a:	4620      	mov	r0, r4
     b2c:	a902      	add	r1, sp, #8
     b2e:	f7ff ff3b 	bl	9a8 <boot_swap_image.isra.0>
    BOOT_SWAP_TYPE(state) = bs->swap_type;
     b32:	f89d 300f 	ldrb.w	r3, [sp, #15]
     b36:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if (bs->swap_type == BOOT_SWAP_TYPE_REVERT ||
     b3a:	3b03      	subs	r3, #3
     b3c:	2b01      	cmp	r3, #1
     b3e:	d806      	bhi.n	b4e <context_boot_go+0xb2>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     b40:	4628      	mov	r0, r5
     b42:	f004 fe0e 	bl	5762 <swap_set_image_ok>
        if (rc != 0) {
     b46:	b110      	cbz	r0, b4e <context_boot_go+0xb2>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     b48:	23ff      	movs	r3, #255	; 0xff
     b4a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if (BOOT_IS_UPGRADE(bs->swap_type)) {
     b4e:	f89d 300f 	ldrb.w	r3, [sp, #15]
     b52:	3b02      	subs	r3, #2
     b54:	2b02      	cmp	r3, #2
     b56:	d806      	bhi.n	b66 <context_boot_go+0xca>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
     b58:	2000      	movs	r0, #0
     b5a:	f004 fdf0 	bl	573e <swap_set_copy_done>
        if (rc != 0) {
     b5e:	b110      	cbz	r0, b66 <context_boot_go+0xca>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     b60:	23ff      	movs	r3, #255	; 0xff
     b62:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
     b66:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     b6a:	2bff      	cmp	r3, #255	; 0xff
     b6c:	d112      	bne.n	b94 <context_boot_go+0xf8>
        while (1) {}
     b6e:	e7fe      	b.n	b6e <context_boot_go+0xd2>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     b70:	2301      	movs	r3, #1
        if (rc == BOOT_EFLASH)
     b72:	4298      	cmp	r0, r3
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     b74:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        if (rc == BOOT_EFLASH)
     b78:	d1b0      	bne.n	adc <context_boot_go+0x40>
#endif

        /* Determine swap type and complete swap if it has been aborted. */
        boot_prepare_image_for_update(state, &bs);

        if (BOOT_IS_UPGRADE(BOOT_SWAP_TYPE(state))) {
     b7a:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
#endif /* (BOOT_IMAGE_NUMBER > 1) */

        /* Set the previously determined swap type */
        bs.swap_type = BOOT_SWAP_TYPE(state);

        switch (BOOT_SWAP_TYPE(state)) {
     b7e:	2b04      	cmp	r3, #4
        bs.swap_type = BOOT_SWAP_TYPE(state);
     b80:	f88d 300f 	strb.w	r3, [sp, #15]
        switch (BOOT_SWAP_TYPE(state)) {
     b84:	d845      	bhi.n	c12 <FIH_LABEL_FIH_CALL_END_2015+0x10>
     b86:	2b01      	cmp	r3, #1
     b88:	d849      	bhi.n	c1e <FIH_LABEL_FIH_CALL_END_2015+0x1c>
     b8a:	d05b      	beq.n	c44 <FIH_LABEL_FIH_CALL_END_2015+0x42>
            }
#endif /* !MCUBOOT_OVERWRITE_ONLY */
            break;

        default:
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     b8c:	23ff      	movs	r3, #255	; 0xff
     b8e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     b92:	e057      	b.n	c44 <FIH_LABEL_FIH_CALL_END_2015+0x42>
            rc = boot_read_image_headers(state, false, bs);
     b94:	2100      	movs	r1, #0
     b96:	4620      	mov	r0, r4
     b98:	aa02      	add	r2, sp, #8
     b9a:	f004 fc7c 	bl	5496 <boot_read_image_headers>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     b9e:	2301      	movs	r3, #1
                    BOOT_SWAP_TYPE(state) = bs->swap_type;
     ba0:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     ba4:	e7e9      	b.n	b7a <context_boot_go+0xde>
            if (bs->swap_type == BOOT_SWAP_TYPE_NONE) {
     ba6:	f89d 700f 	ldrb.w	r7, [sp, #15]
     baa:	2f01      	cmp	r7, #1
     bac:	d11e      	bne.n	bec <FIH_LABEL_FIH_CALL_START_1992>
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     bae:	4610      	mov	r0, r2
     bb0:	f002 f8ec 	bl	2d8c <boot_swap_type_multi>
    if (BOOT_IS_UPGRADE(swap_type)) {
     bb4:	1e83      	subs	r3, r0, #2
     bb6:	2b02      	cmp	r3, #2
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     bb8:	4605      	mov	r5, r0
    if (BOOT_IS_UPGRADE(swap_type)) {
     bba:	d814      	bhi.n	be6 <FIH_LABEL_FIH_CALL_END_1952+0x14>

00000bbc <FIH_LABEL_FIH_CALL_START_1929>:
        FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_SECONDARY_SLOT, bs);
     bbc:	f7ff fe52 	bl	864 <fih_cfi_get_and_increment>
     bc0:	4639      	mov	r1, r7
     bc2:	4680      	mov	r8, r0
     bc4:	4620      	mov	r0, r4
     bc6:	f7ff fe67 	bl	898 <boot_validate_slot.isra.0>
     bca:	4607      	mov	r7, r0
     bcc:	4640      	mov	r0, r8
     bce:	f7ff fe59 	bl	884 <fih_cfi_validate>

00000bd2 <FIH_LABEL_FIH_CALL_END_1952>:
        if (FIH_NOT_EQ(fih_rc, FIH_SUCCESS)) {
     bd2:	4b47      	ldr	r3, [pc, #284]	; (cf0 <FIH_LABEL_FIH_CALL_END_2260+0x48>)
     bd4:	681b      	ldr	r3, [r3, #0]
     bd6:	429f      	cmp	r7, r3
     bd8:	d005      	beq.n	be6 <FIH_LABEL_FIH_CALL_END_1952+0x14>
            if (FIH_EQ(fih_rc, FIH_NO_BOOTABLE_IMAGE)) {
     bda:	4b46      	ldr	r3, [pc, #280]	; (cf4 <FIH_LABEL_FIH_CALL_END_2260+0x4c>)
     bdc:	681d      	ldr	r5, [r3, #0]
                swap_type = BOOT_SWAP_TYPE_NONE;
     bde:	42af      	cmp	r7, r5
     be0:	bf14      	ite	ne
     be2:	2505      	movne	r5, #5
     be4:	2501      	moveq	r5, #1
                BOOT_SWAP_TYPE(state) = boot_validated_swap_type(state, bs);
     be6:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
     bea:	e7c6      	b.n	b7a <context_boot_go+0xde>

00000bec <FIH_LABEL_FIH_CALL_START_1992>:
                FIH_CALL(boot_validate_slot, fih_rc,
     bec:	f7ff fe3a 	bl	864 <fih_cfi_get_and_increment>
     bf0:	2101      	movs	r1, #1
     bf2:	4607      	mov	r7, r0
     bf4:	4620      	mov	r0, r4
     bf6:	f7ff fe4f 	bl	898 <boot_validate_slot.isra.0>
     bfa:	4605      	mov	r5, r0
     bfc:	4638      	mov	r0, r7
     bfe:	f7ff fe41 	bl	884 <fih_cfi_validate>

00000c02 <FIH_LABEL_FIH_CALL_END_2015>:
                if (FIH_NOT_EQ(fih_rc, FIH_SUCCESS)) {
     c02:	4b3b      	ldr	r3, [pc, #236]	; (cf0 <FIH_LABEL_FIH_CALL_END_2260+0x48>)
     c04:	681b      	ldr	r3, [r3, #0]
     c06:	429d      	cmp	r5, r3
                    BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_FAIL;
     c08:	bf14      	ite	ne
     c0a:	2305      	movne	r3, #5
                    BOOT_SWAP_TYPE(state) = bs->swap_type;
     c0c:	f89d 300f 	ldrbeq.w	r3, [sp, #15]
     c10:	e7c6      	b.n	ba0 <context_boot_go+0x104>
        switch (BOOT_SWAP_TYPE(state)) {
     c12:	2b05      	cmp	r3, #5
     c14:	d1ba      	bne.n	b8c <context_boot_go+0xf0>
            rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     c16:	2000      	movs	r0, #0
     c18:	f004 fda3 	bl	5762 <swap_set_image_ok>
     c1c:	e010      	b.n	c40 <FIH_LABEL_FIH_CALL_END_2015+0x3e>
        rc = boot_swap_image(state, bs);
     c1e:	4620      	mov	r0, r4
     c20:	a902      	add	r1, sp, #8
     c22:	f7ff fec1 	bl	9a8 <boot_swap_image.isra.0>
    swap_type = BOOT_SWAP_TYPE(state);
     c26:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    if (swap_type == BOOT_SWAP_TYPE_REVERT ||
     c2a:	1eda      	subs	r2, r3, #3
     c2c:	2a01      	cmp	r2, #1
     c2e:	d82d      	bhi.n	c8c <FIH_LABEL_FIH_CALL_END_2015+0x8a>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     c30:	2000      	movs	r0, #0
     c32:	f004 fd96 	bl	5762 <swap_set_image_ok>
        if (rc != 0) {
     c36:	2800      	cmp	r0, #0
     c38:	d1a8      	bne.n	b8c <context_boot_go+0xf0>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
     c3a:	2000      	movs	r0, #0
     c3c:	f004 fd7f 	bl	573e <swap_set_copy_done>
        if (rc != 0) {
     c40:	2800      	cmp	r0, #0
     c42:	d1a3      	bne.n	b8c <context_boot_go+0xf0>
        }

        if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
     c44:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     c48:	2bff      	cmp	r3, #255	; 0xff
     c4a:	d101      	bne.n	c50 <FIH_LABEL_FIH_CALL_END_2015+0x4e>
            BOOT_LOG_ERR("panic!");
            assert(0);

            /* Loop forever... */
            FIH_PANIC;
     c4c:	f004 fc10 	bl	5470 <fih_panic_loop>

    /* Iterate over all the images. At this point all required update operations
     * have finished. By the end of the loop each image in the primary slot will
     * have been re-validated.
     */
    FIH_SET(fih_cnt, 0);
     c50:	2100      	movs	r1, #0
        if (FIH_EQ(tmp_img_mask, true)) {
            ++fih_cnt;
            continue;
        }
#endif
        if (BOOT_SWAP_TYPE(state) != BOOT_SWAP_TYPE_NONE) {
     c52:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     c56:	4f28      	ldr	r7, [pc, #160]	; (cf8 <FIH_LABEL_FIH_CALL_END_2260+0x50>)
     c58:	2b01      	cmp	r3, #1
    FIH_SET(fih_cnt, 0);
     c5a:	9101      	str	r1, [sp, #4]
        if (BOOT_SWAP_TYPE(state) != BOOT_SWAP_TYPE_NONE) {
     c5c:	d019      	beq.n	c92 <FIH_LABEL_FIH_CALL_START_2238>
            /* Attempt to read an image header from each slot. Ensure that image
             * headers in slots are aligned with headers in boot_data.
             */
            rc = boot_read_image_headers(state, false, &bs);
     c5e:	4620      	mov	r0, r4
     c60:	aa02      	add	r2, sp, #8
     c62:	f004 fc18 	bl	5496 <boot_read_image_headers>
            if (rc != 0) {
     c66:	b1a0      	cbz	r0, c92 <FIH_LABEL_FIH_CALL_START_2238>
             * is meant to prevent FI attack.
             */
            if (FIH_NOT_EQ(fih_rc, FIH_SUCCESS) ||
                FIH_EQ(fih_rc, FIH_FAILURE) ||
                FIH_EQ(fih_rc, FIH_NO_BOOTABLE_IMAGE)) {
                FIH_SET(fih_rc, FIH_FAILURE);
     c68:	683d      	ldr	r5, [r7, #0]
     * easily recover them.
     */
#if defined(MCUBOOT_ENC_IMAGES) || defined(MCUBOOT_SWAP_SAVE_ENCTLV)
    like_mbedtls_zeroize(&bs, sizeof(bs));
#else
    memset(&bs, 0, sizeof(struct boot_status));
     c6a:	2210      	movs	r2, #16
     c6c:	2100      	movs	r1, #0
     c6e:	a802      	add	r0, sp, #8
     c70:	f005 f8af 	bl	5dd2 <memset>
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
     c74:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
     c76:	f005 f803 	bl	5c80 <flash_area_close>
     c7a:	6a20      	ldr	r0, [r4, #32]
     c7c:	f005 f800 	bl	5c80 <flash_area_close>
#endif

    close_all_flash_areas(state);
    FIH_RET(fih_rc);
     c80:	f7ff fdf8 	bl	874 <fih_cfi_decrement>
}
     c84:	4628      	mov	r0, r5
     c86:	b006      	add	sp, #24
     c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (BOOT_IS_UPGRADE(swap_type)) {
     c8c:	2b02      	cmp	r3, #2
     c8e:	d1d9      	bne.n	c44 <FIH_LABEL_FIH_CALL_END_2015+0x42>
     c90:	e7d3      	b.n	c3a <FIH_LABEL_FIH_CALL_END_2015+0x38>

00000c92 <FIH_LABEL_FIH_CALL_START_2238>:
            FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_PRIMARY_SLOT, NULL);
     c92:	f7ff fde7 	bl	864 <fih_cfi_get_and_increment>
     c96:	2100      	movs	r1, #0
     c98:	4680      	mov	r8, r0
     c9a:	4620      	mov	r0, r4
     c9c:	f7ff fdfc 	bl	898 <boot_validate_slot.isra.0>
     ca0:	4605      	mov	r5, r0
     ca2:	4640      	mov	r0, r8
     ca4:	f7ff fdee 	bl	884 <fih_cfi_validate>

00000ca8 <FIH_LABEL_FIH_CALL_END_2260>:
            if (FIH_NOT_EQ(fih_rc, FIH_SUCCESS) ||
     ca8:	f8df 8044 	ldr.w	r8, [pc, #68]	; cf0 <FIH_LABEL_FIH_CALL_END_2260+0x48>
     cac:	f8d8 3000 	ldr.w	r3, [r8]
     cb0:	429d      	cmp	r5, r3
     cb2:	d1d9      	bne.n	c68 <FIH_LABEL_FIH_CALL_END_2015+0x66>
     cb4:	683b      	ldr	r3, [r7, #0]
     cb6:	429d      	cmp	r5, r3
     cb8:	d0d6      	beq.n	c68 <FIH_LABEL_FIH_CALL_END_2015+0x66>
                FIH_EQ(fih_rc, FIH_NO_BOOTABLE_IMAGE)) {
     cba:	4b0e      	ldr	r3, [pc, #56]	; (cf4 <FIH_LABEL_FIH_CALL_END_2260+0x4c>)
                FIH_EQ(fih_rc, FIH_FAILURE) ||
     cbc:	681b      	ldr	r3, [r3, #0]
     cbe:	429d      	cmp	r5, r3
     cc0:	d0d2      	beq.n	c68 <FIH_LABEL_FIH_CALL_END_2015+0x66>
        ++fih_cnt;
     cc2:	9b01      	ldr	r3, [sp, #4]
     cc4:	3301      	adds	r3, #1
     cc6:	9301      	str	r3, [sp, #4]
    if(FIH_NOT_EQ(fih_cnt, BOOT_IMAGE_NUMBER)) {
     cc8:	9b01      	ldr	r3, [sp, #4]
     cca:	2b01      	cmp	r3, #1
     ccc:	d001      	beq.n	cd2 <FIH_LABEL_FIH_CALL_END_2260+0x2a>
        FIH_PANIC;
     cce:	f004 fbcf 	bl	5470 <fih_panic_loop>
    rsp->br_flash_dev_id = flash_area_get_device_id(BOOT_IMG_AREA(state, active_slot));
     cd2:	6a20      	ldr	r0, [r4, #32]
     cd4:	f004 fa99 	bl	520a <flash_area_get_device_id>
     cd8:	7130      	strb	r0, [r6, #4]
 */
int flash_area_sector_from_off(off_t off, struct flash_sector *sector);

static inline uint32_t flash_area_get_off(const struct flash_area *fa)
{
	return (uint32_t)fa->fa_off;
     cda:	6a23      	ldr	r3, [r4, #32]
    rsp->br_image_off = boot_img_slot_off(state, active_slot);
     cdc:	685b      	ldr	r3, [r3, #4]
    rsp->br_hdr = boot_img_hdr(state, active_slot);
     cde:	6034      	str	r4, [r6, #0]
    fih_rc = FIH_SUCCESS;
     ce0:	f8d8 5000 	ldr.w	r5, [r8]
    rsp->br_image_off = boot_img_slot_off(state, active_slot);
     ce4:	60b3      	str	r3, [r6, #8]
    fih_rc = FIH_SUCCESS;
     ce6:	e7c0      	b.n	c6a <FIH_LABEL_FIH_CALL_END_2015+0x68>
     ce8:	200005d4 	.word	0x200005d4
     cec:	200001d4 	.word	0x200001d4
     cf0:	20000008 	.word	0x20000008
     cf4:	20000000 	.word	0x20000000
     cf8:	20000004 	.word	0x20000004

00000cfc <boot_go>:
 *
 * @return                      FIH_SUCCESS on success; nonzero on failure.
 */
fih_ret
boot_go(struct boot_rsp *rsp)
{
     cfc:	b570      	push	{r4, r5, r6, lr}
void boot_state_clear(struct boot_loader_state *state)
{
    if (state != NULL) {
        memset(state, 0, sizeof(struct boot_loader_state));
    } else {
        memset(&boot_data, 0, sizeof(struct boot_loader_state));
     cfe:	4e0b      	ldr	r6, [pc, #44]	; (d2c <FIH_LABEL_FIH_CALL_END_2929+0xa>)
{
     d00:	4604      	mov	r4, r0
        memset(&boot_data, 0, sizeof(struct boot_loader_state));
     d02:	2260      	movs	r2, #96	; 0x60
     d04:	2100      	movs	r1, #0
     d06:	4630      	mov	r0, r6
     d08:	f005 f863 	bl	5dd2 <memset>

00000d0c <FIH_LABEL_FIH_CALL_START_2906>:
    FIH_CALL(context_boot_go, fih_rc, &boot_data, rsp);
     d0c:	f7ff fdaa 	bl	864 <fih_cfi_get_and_increment>
     d10:	4621      	mov	r1, r4
     d12:	4605      	mov	r5, r0
     d14:	4630      	mov	r0, r6
     d16:	f7ff fec1 	bl	a9c <context_boot_go>
     d1a:	4604      	mov	r4, r0
     d1c:	4628      	mov	r0, r5
     d1e:	f7ff fdb1 	bl	884 <fih_cfi_validate>

00000d22 <FIH_LABEL_FIH_CALL_END_2929>:
    FIH_RET(fih_rc);
     d22:	f7ff fda7 	bl	874 <fih_cfi_decrement>
}
     d26:	4620      	mov	r0, r4
     d28:	bd70      	pop	{r4, r5, r6, pc}
     d2a:	bf00      	nop
     d2c:	20000dd4 	.word	0x20000dd4

00000d30 <boot_read_image_header>:
}

int
boot_read_image_header(struct boot_loader_state *state, int slot,
                       struct image_header *out_hdr, struct boot_status *bs)
{
     d30:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
     d34:	4606      	mov	r6, r0
     d36:	460c      	mov	r4, r1
     d38:	4617      	mov	r7, r2
#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    off = 0;
    if (bs && !boot_status_is_reset(bs)) {
     d3a:	461d      	mov	r5, r3
     d3c:	b90b      	cbnz	r3, d42 <boot_read_image_header+0x12>
    off = 0;
     d3e:	2600      	movs	r6, #0
     d40:	e028      	b.n	d94 <boot_read_image_header+0x64>
    if (bs && !boot_status_is_reset(bs)) {
     d42:	4618      	mov	r0, r3
     d44:	f004 fc28 	bl	5598 <boot_status_is_reset>
     d48:	2800      	cmp	r0, #0
     d4a:	d1f8      	bne.n	d3e <boot_read_image_header+0xe>
	boot_find_status(BOOT_CURR_IMG(state), &fap);
     d4c:	4669      	mov	r1, sp
     d4e:	f7ff fd69 	bl	824 <boot_find_status>
        if (fap == NULL || boot_read_swap_size(fap, &swap_size)) {
     d52:	9800      	ldr	r0, [sp, #0]
     d54:	b938      	cbnz	r0, d66 <boot_read_image_header+0x36>
            rc = BOOT_EFLASH;
     d56:	2401      	movs	r4, #1
    }

    rc = 0;

done:
    flash_area_close(fap);
     d58:	9800      	ldr	r0, [sp, #0]
     d5a:	f004 ff91 	bl	5c80 <flash_area_close>
    return rc;
}
     d5e:	4620      	mov	r0, r4
     d60:	b002      	add	sp, #8
     d62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (fap == NULL || boot_read_swap_size(fap, &swap_size)) {
     d66:	a901      	add	r1, sp, #4
     d68:	f004 fb4e 	bl	5408 <boot_read_swap_size>
     d6c:	2800      	cmp	r0, #0
     d6e:	d1f2      	bne.n	d56 <boot_read_image_header+0x26>
        flash_area_close(fap);
     d70:	9800      	ldr	r0, [sp, #0]
     d72:	f004 ff85 	bl	5c80 <flash_area_close>
        last_idx = find_last_idx(state, swap_size);
     d76:	4630      	mov	r0, r6
     d78:	9901      	ldr	r1, [sp, #4]
     d7a:	f004 fd10 	bl	579e <find_last_idx>
	return fs->fs_off;
}

static inline uint32_t flash_sector_get_size(const struct flash_sector *fs)
{
	return fs->fs_size;
     d7e:	6a73      	ldr	r3, [r6, #36]	; 0x24
     d80:	685e      	ldr	r6, [r3, #4]
        if (bs->op == BOOT_STATUS_OP_MOVE && slot == 0 && bs->idx > last_idx) {
     d82:	796b      	ldrb	r3, [r5, #5]
     d84:	2b01      	cmp	r3, #1
     d86:	d121      	bne.n	dcc <boot_read_image_header+0x9c>
     d88:	2c00      	cmp	r4, #0
     d8a:	d1d8      	bne.n	d3e <boot_read_image_header+0xe>
     d8c:	682b      	ldr	r3, [r5, #0]
    off = 0;
     d8e:	4283      	cmp	r3, r0
     d90:	bf98      	it	ls
     d92:	2600      	movls	r6, #0
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     d94:	4621      	mov	r1, r4
     d96:	2000      	movs	r0, #0
     d98:	f004 fa2e 	bl	51f8 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     d9c:	4669      	mov	r1, sp
     d9e:	b2c0      	uxtb	r0, r0
     da0:	f000 fd50 	bl	1844 <flash_area_open>
    if (rc != 0) {
     da4:	2800      	cmp	r0, #0
     da6:	d1d6      	bne.n	d56 <boot_read_image_header+0x26>
    rc = flash_area_read(fap, off, out_hdr, sizeof *out_hdr);
     da8:	2320      	movs	r3, #32
     daa:	463a      	mov	r2, r7
     dac:	4631      	mov	r1, r6
     dae:	9800      	ldr	r0, [sp, #0]
     db0:	f004 ff67 	bl	5c82 <flash_area_read>
    if (rc != 0) {
     db4:	4604      	mov	r4, r0
     db6:	2800      	cmp	r0, #0
     db8:	d1cd      	bne.n	d56 <boot_read_image_header+0x26>
    if (bs != NULL && out_hdr->ih_magic != IMAGE_MAGIC) {
     dba:	2d00      	cmp	r5, #0
     dbc:	d0cc      	beq.n	d58 <boot_read_image_header+0x28>
     dbe:	683c      	ldr	r4, [r7, #0]
     dc0:	4b0d      	ldr	r3, [pc, #52]	; (df8 <boot_read_image_header+0xc8>)
     dc2:	1ae4      	subs	r4, r4, r3
     dc4:	bf18      	it	ne
     dc6:	f04f 34ff 	movne.w	r4, #4294967295
     dca:	e7c5      	b.n	d58 <boot_read_image_header+0x28>
        } else if (bs->op == BOOT_STATUS_OP_SWAP) {
     dcc:	2b02      	cmp	r3, #2
     dce:	d1b6      	bne.n	d3e <boot_read_image_header+0xe>
            if (bs->idx > 1 && bs->idx <= last_idx) {
     dd0:	682b      	ldr	r3, [r5, #0]
     dd2:	2b01      	cmp	r3, #1
     dd4:	d905      	bls.n	de2 <boot_read_image_header+0xb2>
     dd6:	4283      	cmp	r3, r0
     dd8:	d8b1      	bhi.n	d3e <boot_read_image_header+0xe>
                slot = (slot == 0) ? 1 : 0;
     dda:	fab4 f484 	clz	r4, r4
     dde:	0964      	lsrs	r4, r4, #5
     de0:	e7ad      	b.n	d3e <boot_read_image_header+0xe>
            } else if (bs->idx == 1) {
     de2:	d1ac      	bne.n	d3e <boot_read_image_header+0xe>
                if (slot == 0) {
     de4:	2c00      	cmp	r4, #0
     de6:	d0d5      	beq.n	d94 <boot_read_image_header+0x64>
                } else if (slot == 1 && bs->state == 2) {
     de8:	2c01      	cmp	r4, #1
     dea:	d1a8      	bne.n	d3e <boot_read_image_header+0xe>
     dec:	792c      	ldrb	r4, [r5, #4]
     dee:	3c02      	subs	r4, #2
     df0:	bf18      	it	ne
     df2:	2401      	movne	r4, #1
     df4:	e7a3      	b.n	d3e <boot_read_image_header+0xe>
     df6:	bf00      	nop
     df8:	96f3b83d 	.word	0x96f3b83d

00000dfc <fixup_revert>:
 * upgrade (by initializing the secondary slot).
 */
void
fixup_revert(const struct boot_loader_state *state, struct boot_status *bs,
        const struct flash_area *fap_sec)
{
     dfc:	b573      	push	{r0, r1, r4, r5, r6, lr}
#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    /* No fixup required */
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
     dfe:	684b      	ldr	r3, [r1, #4]
{
     e00:	4614      	mov	r4, r2
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
     e02:	4a11      	ldr	r2, [pc, #68]	; (e48 <fixup_revert+0x4c>)
     e04:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
     e08:	4293      	cmp	r3, r2
{
     e0a:	4606      	mov	r6, r0
     e0c:	460d      	mov	r5, r1
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
     e0e:	d118      	bne.n	e42 <fixup_revert+0x46>
        bs->op != BOOT_STATUS_OP_MOVE ||
     e10:	680b      	ldr	r3, [r1, #0]
     e12:	2b01      	cmp	r3, #1
     e14:	d115      	bne.n	e42 <fixup_revert+0x46>
        bs->idx != BOOT_STATUS_IDX_0) {
        return;
    }

    rc = boot_read_swap_state(fap_sec, &swap_state);
     e16:	4669      	mov	r1, sp
     e18:	4620      	mov	r0, r4
     e1a:	f001 ff61 	bl	2ce0 <boot_read_swap_state>
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Secondary image", &swap_state);

    if (swap_state.magic == BOOT_MAGIC_UNSET) {
     e1e:	f89d 3000 	ldrb.w	r3, [sp]
     e22:	2b03      	cmp	r3, #3
     e24:	d10d      	bne.n	e42 <fixup_revert+0x46>
        rc = swap_erase_trailer_sectors(state, fap_sec);
     e26:	4621      	mov	r1, r4
     e28:	4630      	mov	r0, r6
     e2a:	f004 fbf6 	bl	561a <swap_erase_trailer_sectors>
        assert(rc == 0);

        rc = boot_write_image_ok(fap_sec);
     e2e:	4620      	mov	r0, r4
     e30:	f005 fa97 	bl	6362 <boot_write_image_ok>
        assert(rc == 0);

        rc = boot_write_swap_size(fap_sec, bs->swap_size);
     e34:	4620      	mov	r0, r4
     e36:	68a9      	ldr	r1, [r5, #8]
     e38:	f004 fafc 	bl	5434 <boot_write_swap_size>
        assert(rc == 0);

        rc = boot_write_magic(fap_sec);
     e3c:	4620      	mov	r0, r4
     e3e:	f001 ff2f 	bl	2ca0 <boot_write_magic>
        assert(rc == 0);
    }
}
     e42:	b002      	add	sp, #8
     e44:	bd70      	pop	{r4, r5, r6, pc}
     e46:	bf00      	nop
     e48:	04000100 	.word	0x04000100

00000e4c <swap_run>:

void
swap_run(struct boot_loader_state *state, struct boot_status *bs,
         uint32_t copy_size)
{
     e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e50:	4605      	mov	r5, r0
     e52:	b089      	sub	sp, #36	; 0x24
     e54:	460c      	mov	r4, r1
    const struct flash_area *fap_sec;
    int rc;

    BOOT_LOG_INF("Starting swap using move algorithm.");

    last_idx = find_last_idx(state, copy_size);
     e56:	4611      	mov	r1, r2
     e58:	f004 fca1 	bl	579e <find_last_idx>
     e5c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     e5e:	9003      	str	r0, [sp, #12]
    sector_sz = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, 0);

    /*
     * When starting a new swap upgrade, check that there is enough space.
     */
    if (boot_status_is_reset(bs)) {
     e60:	4620      	mov	r0, r4
     e62:	685e      	ldr	r6, [r3, #4]
     e64:	f004 fb98 	bl	5598 <boot_status_is_reset>
     e68:	b190      	cbz	r0, e90 <swap_run+0x44>
        sz = 0;
        trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
     e6a:	6de8      	ldr	r0, [r5, #92]	; 0x5c
     e6c:	f004 faaf 	bl	53ce <boot_trailer_sz>
        sz = 0;
     e70:	2200      	movs	r2, #0
        first_trailer_idx = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT) - 1;
     e72:	6aab      	ldr	r3, [r5, #40]	; 0x28
     e74:	3b01      	subs	r3, #1

        while (1) {
            sz += sector_sz;
     e76:	4432      	add	r2, r6
            if  (sz >= trailer_sz) {
     e78:	4290      	cmp	r0, r2
     e7a:	d901      	bls.n	e80 <swap_run+0x34>
                break;
            }
            first_trailer_idx--;
     e7c:	3b01      	subs	r3, #1
            sz += sector_sz;
     e7e:	e7fa      	b.n	e76 <swap_run+0x2a>
        }

        if (last_idx >= first_trailer_idx) {
     e80:	9a03      	ldr	r2, [sp, #12]
     e82:	429a      	cmp	r2, r3
     e84:	d304      	bcc.n	e90 <swap_run+0x44>
            BOOT_LOG_WRN("Not enough free space to run swap upgrade");
            BOOT_LOG_WRN("required %d bytes but only %d are available",
                         (last_idx + 1) * sector_sz,
                         first_trailer_idx * sector_sz);
            bs->swap_type = BOOT_SWAP_TYPE_NONE;
     e86:	2301      	movs	r3, #1
     e88:	71e3      	strb	r3, [r4, #7]
        idx++;
    }

    flash_area_close(fap_pri);
    flash_area_close(fap_sec);
}
     e8a:	b009      	add	sp, #36	; 0x24
     e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index), &fap_pri);
     e90:	a906      	add	r1, sp, #24
     e92:	2003      	movs	r0, #3
     e94:	f000 fcd6 	bl	1844 <flash_area_open>
    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index), &fap_sec);
     e98:	a907      	add	r1, sp, #28
     e9a:	2009      	movs	r0, #9
     e9c:	f000 fcd2 	bl	1844 <flash_area_open>
    fixup_revert(state, bs, fap_sec);
     ea0:	4621      	mov	r1, r4
     ea2:	4628      	mov	r0, r5
     ea4:	9a07      	ldr	r2, [sp, #28]
     ea6:	f7ff ffa9 	bl	dfc <fixup_revert>
    if (bs->op == BOOT_STATUS_OP_MOVE) {
     eaa:	7963      	ldrb	r3, [r4, #5]
     eac:	2b01      	cmp	r3, #1
     eae:	d14b      	bne.n	f48 <swap_run+0xfc>
    last_idx = find_last_idx(state, copy_size);
     eb0:	9f03      	ldr	r7, [sp, #12]
    BOOT_STATUS_ASSERT(rc == 0);
     eb2:	f8df b158 	ldr.w	fp, [pc, #344]	; 100c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xc>
     eb6:	e041      	b.n	f3c <swap_run+0xf0>
            if (idx <= (last_idx - bs->idx + 1)) {
     eb8:	6822      	ldr	r2, [r4, #0]
     eba:	9903      	ldr	r1, [sp, #12]
     ebc:	f1c2 0301 	rsb	r3, r2, #1
     ec0:	440b      	add	r3, r1
     ec2:	429f      	cmp	r7, r3
     ec4:	d839      	bhi.n	f3a <swap_run+0xee>

static inline uint32_t
boot_img_sector_off(const struct boot_loader_state *state, size_t slot,
                    size_t sector)
{
    return flash_sector_get_off(&BOOT_IMG(state, slot).sectors[sector]) -
     ec6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    if (bs->idx == BOOT_STATUS_IDX_0) {
     ec8:	2a01      	cmp	r2, #1
	return fs->fs_off;
     eca:	6819      	ldr	r1, [r3, #0]
     ecc:	f853 0037 	ldr.w	r0, [r3, r7, lsl #3]
     ed0:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
     ed4:	f853 3c08 	ldr.w	r3, [r3, #-8]
     ed8:	eba0 0901 	sub.w	r9, r0, r1
     edc:	eba3 0a01 	sub.w	sl, r3, r1
     ee0:	d111      	bne.n	f06 <swap_run+0xba>
                boot_move_sector_up(idx, sector_sz, state, bs, fap_pri, fap_sec);
     ee2:	9b07      	ldr	r3, [sp, #28]
     ee4:	9304      	str	r3, [sp, #16]
        if (bs->source != BOOT_STATUS_SOURCE_PRIMARY_SLOT) {
     ee6:	68e3      	ldr	r3, [r4, #12]
     ee8:	2b02      	cmp	r3, #2
     eea:	d008      	beq.n	efe <swap_run+0xb2>
            rc = swap_erase_trailer_sectors(state, fap_pri);
     eec:	4641      	mov	r1, r8
     eee:	4628      	mov	r0, r5
     ef0:	f004 fb93 	bl	561a <swap_erase_trailer_sectors>
            rc = swap_status_init(state, fap_pri, bs);
     ef4:	4622      	mov	r2, r4
     ef6:	4641      	mov	r1, r8
     ef8:	4628      	mov	r0, r5
     efa:	f004 fbc4 	bl	5686 <swap_status_init>
        rc = swap_erase_trailer_sectors(state, fap_sec);
     efe:	4628      	mov	r0, r5
     f00:	9904      	ldr	r1, [sp, #16]
     f02:	f004 fb8a 	bl	561a <swap_erase_trailer_sectors>
    rc = boot_erase_region(fap_pri, new_off, sz);
     f06:	4632      	mov	r2, r6
     f08:	4649      	mov	r1, r9
     f0a:	4640      	mov	r0, r8
     f0c:	f004 fb83 	bl	5616 <boot_erase_region>
    rc = boot_copy_region(state, fap_pri, fap_pri, old_off, new_off, sz);
     f10:	4653      	mov	r3, sl
     f12:	4642      	mov	r2, r8
     f14:	4641      	mov	r1, r8
     f16:	4628      	mov	r0, r5
     f18:	e9cd 9600 	strd	r9, r6, [sp]
     f1c:	f7ff fd7c 	bl	a18 <boot_copy_region>
    rc = boot_write_status(state, bs);
     f20:	4621      	mov	r1, r4
     f22:	4628      	mov	r0, r5
     f24:	f004 fb45 	bl	55b2 <boot_write_status>
    bs->idx++;
     f28:	6823      	ldr	r3, [r4, #0]
     f2a:	3301      	adds	r3, #1
     f2c:	6023      	str	r3, [r4, #0]
    BOOT_STATUS_ASSERT(rc == 0);
     f2e:	b120      	cbz	r0, f3a <swap_run+0xee>
     f30:	f8db 3000 	ldr.w	r3, [fp]
     f34:	3301      	adds	r3, #1
     f36:	f8cb 3000 	str.w	r3, [fp]
            idx--;
     f3a:	3f01      	subs	r7, #1
                boot_move_sector_up(idx, sector_sz, state, bs, fap_pri, fap_sec);
     f3c:	f8dd 8018 	ldr.w	r8, [sp, #24]
        while (idx > 0) {
     f40:	2f00      	cmp	r7, #0
     f42:	d1b9      	bne.n	eb8 <swap_run+0x6c>
        bs->idx = BOOT_STATUS_IDX_0;
     f44:	2301      	movs	r3, #1
     f46:	6023      	str	r3, [r4, #0]
    bs->op = BOOT_STATUS_OP_SWAP;
     f48:	2302      	movs	r3, #2
    idx = 1;
     f4a:	2701      	movs	r7, #1
    bs->op = BOOT_STATUS_OP_SWAP;
     f4c:	7163      	strb	r3, [r4, #5]
    while (idx <= last_idx) {
     f4e:	9b03      	ldr	r3, [sp, #12]
            boot_swap_sectors(idx, sector_sz, state, bs, fap_pri, fap_sec);
     f50:	f8dd 9018 	ldr.w	r9, [sp, #24]
    while (idx <= last_idx) {
     f54:	42bb      	cmp	r3, r7
     f56:	d206      	bcs.n	f66 <swap_run+0x11a>
    flash_area_close(fap_pri);
     f58:	4648      	mov	r0, r9
     f5a:	f004 fe91 	bl	5c80 <flash_area_close>
    flash_area_close(fap_sec);
     f5e:	9807      	ldr	r0, [sp, #28]
     f60:	f004 fe8e 	bl	5c80 <flash_area_close>
     f64:	e791      	b.n	e8a <swap_run+0x3e>
        if (idx >= bs->idx) {
     f66:	6823      	ldr	r3, [r4, #0]
     f68:	429f      	cmp	r7, r3
     f6a:	d34d      	bcc.n	1008 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x8>
     f6c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     f6e:	00fb      	lsls	r3, r7, #3
     f70:	f852 1037 	ldr.w	r1, [r2, r7, lsl #3]
     f74:	3b08      	subs	r3, #8
     f76:	f8d2 b000 	ldr.w	fp, [r2]
     f7a:	9104      	str	r1, [sp, #16]
     f7c:	58d1      	ldr	r1, [r2, r3]
     f7e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
            boot_swap_sectors(idx, sector_sz, state, bs, fap_pri, fap_sec);
     f80:	f8dd a01c 	ldr.w	sl, [sp, #28]
     f84:	58d0      	ldr	r0, [r2, r3]
     f86:	6813      	ldr	r3, [r2, #0]
     f88:	eba0 0803 	sub.w	r8, r0, r3
    if (bs->state == BOOT_STATUS_STATE_0) {
     f8c:	7923      	ldrb	r3, [r4, #4]
     f8e:	2b01      	cmp	r3, #1
     f90:	d138      	bne.n	1004 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4>
     f92:	eba1 010b 	sub.w	r1, r1, fp
        rc = boot_erase_region(fap_pri, pri_off, sz);
     f96:	4632      	mov	r2, r6
     f98:	4648      	mov	r0, r9
     f9a:	9105      	str	r1, [sp, #20]
     f9c:	f004 fb3b 	bl	5616 <boot_erase_region>
        rc = boot_copy_region(state, fap_sec, fap_pri, sec_off, pri_off, sz);
     fa0:	9905      	ldr	r1, [sp, #20]
     fa2:	4643      	mov	r3, r8
     fa4:	464a      	mov	r2, r9
     fa6:	9100      	str	r1, [sp, #0]
     fa8:	4628      	mov	r0, r5
     faa:	4651      	mov	r1, sl
     fac:	9601      	str	r6, [sp, #4]
     fae:	f7ff fd33 	bl	a18 <boot_copy_region>
        rc = boot_write_status(state, bs);
     fb2:	4621      	mov	r1, r4
     fb4:	4628      	mov	r0, r5
     fb6:	f004 fafc 	bl	55b2 <boot_write_status>
        bs->state = BOOT_STATUS_STATE_1;
     fba:	2302      	movs	r3, #2
     fbc:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
     fbe:	b118      	cbz	r0, fc8 <swap_run+0x17c>
     fc0:	4a12      	ldr	r2, [pc, #72]	; (100c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xc>)
     fc2:	6813      	ldr	r3, [r2, #0]
     fc4:	3301      	adds	r3, #1
     fc6:	6013      	str	r3, [r2, #0]
        rc = boot_erase_region(fap_sec, sec_off, sz);
     fc8:	4632      	mov	r2, r6
     fca:	4641      	mov	r1, r8
     fcc:	4650      	mov	r0, sl
     fce:	f004 fb22 	bl	5616 <boot_erase_region>
        rc = boot_copy_region(state, fap_pri, fap_sec, pri_up_off, sec_off, sz);
     fd2:	9b04      	ldr	r3, [sp, #16]
     fd4:	4652      	mov	r2, sl
     fd6:	eba3 030b 	sub.w	r3, r3, fp
     fda:	4649      	mov	r1, r9
     fdc:	4628      	mov	r0, r5
     fde:	e9cd 8600 	strd	r8, r6, [sp]
     fe2:	f7ff fd19 	bl	a18 <boot_copy_region>
        rc = boot_write_status(state, bs);
     fe6:	4621      	mov	r1, r4
     fe8:	4628      	mov	r0, r5
     fea:	f004 fae2 	bl	55b2 <boot_write_status>
        bs->idx++;
     fee:	6823      	ldr	r3, [r4, #0]
     ff0:	3301      	adds	r3, #1
     ff2:	6023      	str	r3, [r4, #0]
        bs->state = BOOT_STATUS_STATE_0;
     ff4:	2301      	movs	r3, #1
     ff6:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
     ff8:	b130      	cbz	r0, 1008 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x8>
     ffa:	4a04      	ldr	r2, [pc, #16]	; (100c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xc>)
     ffc:	6813      	ldr	r3, [r2, #0]
     ffe:	3301      	adds	r3, #1
    1000:	6013      	str	r3, [r2, #0]
    1002:	e001      	b.n	1008 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x8>
    if (bs->state == BOOT_STATUS_STATE_1) {
    1004:	2b02      	cmp	r3, #2
    1006:	d0df      	beq.n	fc8 <swap_run+0x17c>
        idx++;
    1008:	3701      	adds	r7, #1
    100a:	e7a0      	b.n	f4e <swap_run+0x102>
    100c:	20000e34 	.word	0x20000e34

00001010 <cc310_init>:
 */

#include "cc310_glue.h"

int cc310_init(void)
{
    1010:	b570      	push	{r4, r5, r6, lr}
    /* Only initialize once */
    static bool initialized;

    if (!initialized) {
    1012:	4d09      	ldr	r5, [pc, #36]	; (1038 <cc310_init+0x28>)
    1014:	782b      	ldrb	r3, [r5, #0]
    1016:	b10b      	cbz	r3, 101c <cc310_init+0xc>
        }
        initialized = true;
        nrf_cc310_disable();
    }

    return 0;
    1018:	2000      	movs	r0, #0
}
    101a:	bd70      	pop	{r4, r5, r6, pc}
    NRF_CRYPTOCELL->ENABLE=1;
    101c:	2601      	movs	r6, #1
    101e:	4c07      	ldr	r4, [pc, #28]	; (103c <cc310_init+0x2c>)
    1020:	f8c4 6500 	str.w	r6, [r4, #1280]	; 0x500
        if (nrf_cc310_bl_init() != 0) {
    1024:	f003 f8be 	bl	41a4 <nrf_cc310_bl_init>
    1028:	b918      	cbnz	r0, 1032 <cc310_init+0x22>
        initialized = true;
    102a:	702e      	strb	r6, [r5, #0]
    NRF_CRYPTOCELL->ENABLE=0;
    102c:	f8c4 0500 	str.w	r0, [r4, #1280]	; 0x500
}
    1030:	e7f2      	b.n	1018 <cc310_init+0x8>
            return -1;
    1032:	f04f 30ff 	mov.w	r0, #4294967295
    1036:	e7f0      	b.n	101a <cc310_init+0xa>
    1038:	20000fe4 	.word	0x20000fe4
    103c:	50840000 	.word	0x50840000

00001040 <cc310_ecdsa_verify_secp256r1>:

int cc310_ecdsa_verify_secp256r1(uint8_t *hash,
                                 uint8_t *public_key,
                                 uint8_t *signature,
                                 size_t hash_len)
{
    1040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1044:	b0ac      	sub	sp, #176	; 0xb0
    1046:	461f      	mov	r7, r3
    1048:	4606      	mov	r6, r0
    104a:	460c      	mov	r4, r1
    104c:	4615      	mov	r5, r2
        int rc;
        nrf_cc310_bl_ecdsa_verify_context_secp256r1_t ctx;
        cc310_init();
    104e:	f7ff ffdf 	bl	1010 <cc310_init>
    NRF_CRYPTOCELL->ENABLE=1;
    1052:	2301      	movs	r3, #1
    1054:	f8df 8020 	ldr.w	r8, [pc, #32]	; 1078 <cc310_ecdsa_verify_secp256r1+0x38>
        nrf_cc310_enable();
        rc = nrf_cc310_bl_ecdsa_verify_secp256r1(&ctx,
    1058:	462a      	mov	r2, r5
    105a:	f8c8 3500 	str.w	r3, [r8, #1280]	; 0x500
    105e:	4621      	mov	r1, r4
    1060:	4633      	mov	r3, r6
    1062:	9700      	str	r7, [sp, #0]
    1064:	a803      	add	r0, sp, #12
    1066:	f005 faa1 	bl	65ac <nrf_cc310_bl_ecdsa_verify_secp256r1>
    NRF_CRYPTOCELL->ENABLE=0;
    106a:	2300      	movs	r3, #0
    106c:	f8c8 3500 	str.w	r3, [r8, #1280]	; 0x500
                                                 (nrf_cc310_bl_ecc_signature_secp256r1_t  *) signature,
                                                 hash,
                                                 hash_len);
        nrf_cc310_disable();
        return rc;
}
    1070:	b02c      	add	sp, #176	; 0xb0
    1072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1076:	bf00      	nop
    1078:	50840000 	.word	0x50840000

0000107c <cleanup_arm_nvic>:
    107c:	f3bf 8f6f 	isb	sy
  __ASM volatile ("cpsid i" : : : "memory");
    1080:	b672      	cpsid	i
    1082:	2300      	movs	r3, #0
	__ISB();
	__disable_irq();

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    1084:	f04f 30ff 	mov.w	r0, #4294967295
    1088:	4a09      	ldr	r2, [pc, #36]	; (10b0 <cleanup_arm_nvic+0x34>)
    108a:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    108e:	3301      	adds	r3, #1
    1090:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    1092:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    1096:	d1f8      	bne.n	108a <cleanup_arm_nvic+0xe>
    1098:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    109a:	f04f 30ff 	mov.w	r0, #4294967295
    109e:	4a04      	ldr	r2, [pc, #16]	; (10b0 <cleanup_arm_nvic+0x34>)
    10a0:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    10a4:	3301      	adds	r3, #1
    10a6:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    10a8:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    10ac:	d1f8      	bne.n	10a0 <cleanup_arm_nvic+0x24>
	}
}
    10ae:	4770      	bx	lr
    10b0:	e000e100 	.word	0xe000e100

000010b4 <nrf_cleanup_peripheral>:
{
    nrf_clock_int_disable(NRF_CLOCK, 0xFFFFFFFF);
}

void nrf_cleanup_peripheral(void)
{
    10b4:	b538      	push	{r3, r4, r5, lr}
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    10b6:	2201      	movs	r2, #1
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    10b8:	f04f 34ff 	mov.w	r4, #4294967295
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
}

NRF_STATIC_INLINE void nrf_uarte_disable(NRF_UARTE_Type * p_reg)
{
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    10bc:	2500      	movs	r5, #0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    10be:	4b1a      	ldr	r3, [pc, #104]	; (1128 <nrf_cleanup_peripheral+0x74>)
#if defined(NRF_UARTE0)
    nrf_uarte_disable(NRF_UARTE0);
    nrf_uarte_int_disable(NRF_UARTE0, 0xFFFFFFFF);
#if defined(NRF_DPPIC)
    /* Clear all SUBSCRIBE configurations. */
    memset((uint8_t *)NRF_UARTE0 + NRF_UARTE_SUBSCRIBE_CONF_OFFS, 0, NRF_UARTE_SUBSCRIBE_CONF_SIZE);
    10c0:	4629      	mov	r1, r5
    10c2:	605a      	str	r2, [r3, #4]
    p_reg->EVTENCLR = mask;
    10c4:	f8c3 4348 	str.w	r4, [r3, #840]	; 0x348
    p_reg->INTENCLR = mask;
    10c8:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    10cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    10d0:	605a      	str	r2, [r3, #4]
    p_reg->EVTENCLR = mask;
    10d2:	f8c3 4348 	str.w	r4, [r3, #840]	; 0x348
    p_reg->INTENCLR = mask;
    10d6:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    10da:	f5a3 4350 	sub.w	r3, r3, #53248	; 0xd000
    10de:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
    10e2:	2280      	movs	r2, #128	; 0x80
    p_reg->INTENCLR = mask;
    10e4:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    10e8:	4810      	ldr	r0, [pc, #64]	; (112c <nrf_cleanup_peripheral+0x78>)
    10ea:	f004 fe72 	bl	5dd2 <memset>
    /* Clear all PUBLISH configurations. */
    memset((uint8_t *)NRF_UARTE0 + NRF_UARTE_PUBLISH_CONF_OFFS, 0, NRF_UARTE_PUBLISH_CONF_SIZE);
    10ee:	2280      	movs	r2, #128	; 0x80
    10f0:	4629      	mov	r1, r5
    10f2:	480f      	ldr	r0, [pc, #60]	; (1130 <nrf_cleanup_peripheral+0x7c>)
    10f4:	f004 fe6d 	bl	5dd2 <memset>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    10f8:	4b0e      	ldr	r3, [pc, #56]	; (1134 <nrf_cleanup_peripheral+0x80>)
#if defined(NRF_UARTE1)
    nrf_uarte_disable(NRF_UARTE1);
    nrf_uarte_int_disable(NRF_UARTE1, 0xFFFFFFFF);
#if defined(NRF_DPPIC)
    /* Clear all SUBSCRIBE configurations. */
    memset((uint8_t *)NRF_UARTE1 + NRF_UARTE_SUBSCRIBE_CONF_OFFS, 0, NRF_UARTE_SUBSCRIBE_CONF_SIZE);
    10fa:	2280      	movs	r2, #128	; 0x80
    10fc:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
    1100:	4629      	mov	r1, r5
    p_reg->INTENCLR = mask;
    1102:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    1106:	480c      	ldr	r0, [pc, #48]	; (1138 <nrf_cleanup_peripheral+0x84>)
    1108:	f004 fe63 	bl	5dd2 <memset>
    /* Clear all PUBLISH configurations. */
    memset((uint8_t *)NRF_UARTE1 + NRF_UARTE_PUBLISH_CONF_OFFS, 0, NRF_UARTE_PUBLISH_CONF_SIZE);
    110c:	2280      	movs	r2, #128	; 0x80
    110e:	4629      	mov	r1, r5
    1110:	480a      	ldr	r0, [pc, #40]	; (113c <nrf_cleanup_peripheral+0x88>)
    1112:	f004 fe5e 	bl	5dd2 <memset>
    return ((p_reg->CHEN & (DPPIC_CHEN_CH0_Enabled << (DPPIC_CHEN_CH0_Pos + channel))) != 0);
}

NRF_STATIC_INLINE void nrf_dppi_channels_disable_all(NRF_DPPIC_Type * p_reg)
{
    p_reg->CHENCLR = 0xFFFFFFFFuL;
    1116:	4b0a      	ldr	r3, [pc, #40]	; (1140 <nrf_cleanup_peripheral+0x8c>)
    1118:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_clock_int_disable(NRF_CLOCK_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    111c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1120:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
#endif
#if defined(NRF_DPPIC)
    nrf_dppi_channels_disable_all(NRF_DPPIC);
#endif
    nrf_cleanup_clock();
}
    1124:	bd38      	pop	{r3, r4, r5, pc}
    1126:	bf00      	nop
    1128:	50014000 	.word	0x50014000
    112c:	50008080 	.word	0x50008080
    1130:	50008180 	.word	0x50008180
    1134:	50009000 	.word	0x50009000
    1138:	50009080 	.word	0x50009080
    113c:	50009180 	.word	0x50009180
    1140:	50017000 	.word	0x50017000

00001144 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
    1144:	4b01      	ldr	r3, [pc, #4]	; (114c <char_out+0x8>)
    1146:	681b      	ldr	r3, [r3, #0]
    1148:	4718      	bx	r3
    114a:	bf00      	nop
    114c:	2000000c 	.word	0x2000000c

00001150 <__printk_hook_install>:
	_char_out = fn;
    1150:	4b01      	ldr	r3, [pc, #4]	; (1158 <__printk_hook_install+0x8>)
    1152:	6018      	str	r0, [r3, #0]
}
    1154:	4770      	bx	lr
    1156:	bf00      	nop
    1158:	2000000c 	.word	0x2000000c

0000115c <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    115c:	b507      	push	{r0, r1, r2, lr}
    115e:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    1160:	2100      	movs	r1, #0
    1162:	4602      	mov	r2, r0
    1164:	9100      	str	r1, [sp, #0]
    1166:	4803      	ldr	r0, [pc, #12]	; (1174 <vprintk+0x18>)
    1168:	f000 f914 	bl	1394 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    116c:	b003      	add	sp, #12
    116e:	f85d fb04 	ldr.w	pc, [sp], #4
    1172:	bf00      	nop
    1174:	00001145 	.word	0x00001145

00001178 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    1178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    117c:	8b05      	ldrh	r5, [r0, #24]
{
    117e:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    1180:	0728      	lsls	r0, r5, #28
{
    1182:	4690      	mov	r8, r2
	if (processing) {
    1184:	d411      	bmi.n	11aa <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    1186:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1188:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    118c:	f040 80cd 	bne.w	132a <process_event+0x1b2>
			evt = process_recheck(mgr);
    1190:	4620      	mov	r0, r4
    1192:	f004 fc9a 	bl	5aca <process_recheck>
		}

		if (evt == EVT_NOP) {
    1196:	b178      	cbz	r0, 11b8 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    1198:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    119a:	8b21      	ldrh	r1, [r4, #24]
    119c:	2804      	cmp	r0, #4
    119e:	d811      	bhi.n	11c4 <process_event+0x4c>
    11a0:	e8df f000 	tbb	[pc, r0]
    11a4:	856d10c3 	.word	0x856d10c3
    11a8:	95          	.byte	0x95
    11a9:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    11aa:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    11ac:	bf0c      	ite	eq
    11ae:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    11b2:	f045 0520 	orrne.w	r5, r5, #32
    11b6:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    11b8:	f388 8811 	msr	BASEPRI, r8
    11bc:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    11c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    11c4:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    11c8:	45aa      	cmp	sl, r5
    11ca:	f000 80a6 	beq.w	131a <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    11ce:	2700      	movs	r7, #0
    11d0:	46b9      	mov	r9, r7
    11d2:	463e      	mov	r6, r7
    11d4:	68a3      	ldr	r3, [r4, #8]
    11d6:	2b00      	cmp	r3, #0
    11d8:	f000 80bd 	beq.w	1356 <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    11dc:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    11e0:	8321      	strh	r1, [r4, #24]
    11e2:	f388 8811 	msr	BASEPRI, r8
    11e6:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    11ea:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    11ec:	2900      	cmp	r1, #0
    11ee:	f000 80bb 	beq.w	1368 <process_event+0x1f0>
	return node->next;
    11f2:	680d      	ldr	r5, [r1, #0]
    11f4:	2900      	cmp	r1, #0
    11f6:	f000 80b7 	beq.w	1368 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    11fa:	4633      	mov	r3, r6
    11fc:	4652      	mov	r2, sl
    11fe:	4620      	mov	r0, r4
    1200:	f8d1 8004 	ldr.w	r8, [r1, #4]
    1204:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1206:	2d00      	cmp	r5, #0
    1208:	d076      	beq.n	12f8 <process_event+0x180>
    120a:	682b      	ldr	r3, [r5, #0]
    120c:	4629      	mov	r1, r5
    120e:	461d      	mov	r5, r3
    1210:	e7f0      	b.n	11f4 <process_event+0x7c>
    1212:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    1216:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    1218:	2a01      	cmp	r2, #1
    121a:	d81b      	bhi.n	1254 <process_event+0xdc>
	list->head = NULL;
    121c:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    121e:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    1222:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    1224:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1226:	b289      	uxth	r1, r1
	list->tail = NULL;
    1228:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    122c:	d109      	bne.n	1242 <process_event+0xca>
    122e:	463b      	mov	r3, r7
    1230:	e003      	b.n	123a <process_event+0xc2>
				mgr->refs += 1U;
    1232:	8b62      	ldrh	r2, [r4, #26]
    1234:	3201      	adds	r2, #1
    1236:	8362      	strh	r2, [r4, #26]
	return node->next;
    1238:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    123a:	2b00      	cmp	r3, #0
    123c:	d1f9      	bne.n	1232 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    123e:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
    1242:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    1244:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1246:	f004 fc40 	bl	5aca <process_recheck>
    124a:	2800      	cmp	r0, #0
    124c:	d07b      	beq.n	1346 <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    124e:	f041 0120 	orr.w	r1, r1, #32
    1252:	e077      	b.n	1344 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    1254:	2b04      	cmp	r3, #4
    1256:	d10a      	bne.n	126e <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1258:	f021 0107 	bic.w	r1, r1, #7
    125c:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
    125e:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    1260:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1262:	f004 fc32 	bl	5aca <process_recheck>
    1266:	b110      	cbz	r0, 126e <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1268:	f041 0120 	orr.w	r1, r1, #32
    126c:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    126e:	8b21      	ldrh	r1, [r4, #24]
    1270:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1274:	45aa      	cmp	sl, r5
    1276:	d050      	beq.n	131a <process_event+0x1a2>
    1278:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    127a:	46b9      	mov	r9, r7
    127c:	e7aa      	b.n	11d4 <process_event+0x5c>
			transit = mgr->transitions->start;
    127e:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1280:	f021 0107 	bic.w	r1, r1, #7
    1284:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    1288:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    128a:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    128e:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    1290:	d12d      	bne.n	12ee <process_event+0x176>
		    || (transit != NULL)) {
    1292:	f1b9 0f00 	cmp.w	r9, #0
    1296:	d040      	beq.n	131a <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1298:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    129c:	8321      	strh	r1, [r4, #24]
    129e:	f388 8811 	msr	BASEPRI, r8
    12a2:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    12a6:	4620      	mov	r0, r4
    12a8:	4939      	ldr	r1, [pc, #228]	; (1390 <process_event+0x218>)
    12aa:	47c8      	blx	r9
    12ac:	e029      	b.n	1302 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    12ae:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    12b2:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    12b4:	f041 0104 	orr.w	r1, r1, #4
    12b8:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    12ba:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    12bc:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    12c0:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    12c2:	d0e6      	beq.n	1292 <process_event+0x11a>
    12c4:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    12c6:	f04f 0a04 	mov.w	sl, #4
		res = 0;
    12ca:	463e      	mov	r6, r7
    12cc:	e782      	b.n	11d4 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    12ce:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    12d2:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    12d4:	f041 0105 	orr.w	r1, r1, #5
    12d8:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    12da:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    12dc:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    12e0:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    12e2:	d0d6      	beq.n	1292 <process_event+0x11a>
    12e4:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    12e6:	f04f 0a05 	mov.w	sl, #5
		res = 0;
    12ea:	463e      	mov	r6, r7
    12ec:	e772      	b.n	11d4 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    12ee:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    12f0:	f04f 0a06 	mov.w	sl, #6
		res = 0;
    12f4:	463e      	mov	r6, r7
    12f6:	e76d      	b.n	11d4 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    12f8:	462b      	mov	r3, r5
    12fa:	e787      	b.n	120c <process_event+0x94>
			if (transit != NULL) {
    12fc:	f1b9 0f00 	cmp.w	r9, #0
    1300:	d1d1      	bne.n	12a6 <process_event+0x12e>
	__asm__ volatile(
    1302:	f04f 0320 	mov.w	r3, #32
    1306:	f3ef 8811 	mrs	r8, BASEPRI
    130a:	f383 8812 	msr	BASEPRI_MAX, r3
    130e:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    1312:	8b23      	ldrh	r3, [r4, #24]
    1314:	f023 0308 	bic.w	r3, r3, #8
    1318:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    131a:	8b25      	ldrh	r5, [r4, #24]
    131c:	06ea      	lsls	r2, r5, #27
    131e:	d52e      	bpl.n	137e <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1320:	f025 0310 	bic.w	r3, r5, #16
    1324:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    1326:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    132a:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    132c:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    132e:	2e00      	cmp	r6, #0
    1330:	f6bf af6f 	bge.w	1212 <process_event+0x9a>
	list->head = NULL;
    1334:	2300      	movs	r3, #0
		*clients = mgr->clients;
    1336:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    1338:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    133c:	f021 0107 	bic.w	r1, r1, #7
    1340:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1344:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1346:	8b21      	ldrh	r1, [r4, #24]
    1348:	f04f 0900 	mov.w	r9, #0
    134c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1350:	45aa      	cmp	sl, r5
    1352:	f47f af3f 	bne.w	11d4 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    1356:	2f00      	cmp	r7, #0
    1358:	d09b      	beq.n	1292 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    135a:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    135e:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    1360:	f388 8811 	msr	BASEPRI, r8
    1364:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    1368:	2f00      	cmp	r7, #0
    136a:	d0c7      	beq.n	12fc <process_event+0x184>
	return node->next;
    136c:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    136e:	4639      	mov	r1, r7
    1370:	4633      	mov	r3, r6
    1372:	4652      	mov	r2, sl
    1374:	4620      	mov	r0, r4
    1376:	f004 fbd4 	bl	5b22 <notify_one>
	list->head = node;
    137a:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    137c:	e7f4      	b.n	1368 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    137e:	06ab      	lsls	r3, r5, #26
    1380:	f57f af1a 	bpl.w	11b8 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1384:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1388:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    138a:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    138e:	e6ff      	b.n	1190 <process_event+0x18>
    1390:	00005b4f 	.word	0x00005b4f

00001394 <z_cbvprintf_impl>:
 *
 * @return printed byte count if CONFIG_CBPRINTF_LIBC_SUBSTS is set
 */
int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fmt,
		     va_list ap, uint32_t flags)
{
    1394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1398:	4682      	mov	sl, r0
	size_t count = 0;
    139a:	f04f 0900 	mov.w	r9, #0
{
    139e:	b08d      	sub	sp, #52	; 0x34
    13a0:	461d      	mov	r5, r3

	const bool tagged_ap = (flags & Z_CBVPRINTF_PROCESS_FLAG_TAGGED_ARGS)
			       == Z_CBVPRINTF_PROCESS_FLAG_TAGGED_ARGS;

	/* we pre-increment in the loop  afterwards */
	fmt--;
    13a2:	1e53      	subs	r3, r2, #1
{
    13a4:	9101      	str	r1, [sp, #4]
	fmt--;
    13a6:	9303      	str	r3, [sp, #12]

start:
	while (*++fmt != '%') {
    13a8:	9b03      	ldr	r3, [sp, #12]
    13aa:	7858      	ldrb	r0, [r3, #1]
    13ac:	1c5c      	adds	r4, r3, #1
    13ae:	2825      	cmp	r0, #37	; 0x25
    13b0:	d119      	bne.n	13e6 <z_cbvprintf_impl+0x52>
	min_width = -1;
	precision = -1;
	prefix = "";
	padding_mode = 0;
	length_mod = 0;
	special = 0;
    13b2:	2000      	movs	r0, #0
	precision = -1;
    13b4:	f04f 38ff 	mov.w	r8, #4294967295

	for (fmt++ ; ; fmt++) {
    13b8:	461e      	mov	r6, r3
	min_width = -1;
    13ba:	4644      	mov	r4, r8
	length_mod = 0;
    13bc:	4603      	mov	r3, r0
	for (fmt++ ; ; fmt++) {
    13be:	3602      	adds	r6, #2
	padding_mode = 0;
    13c0:	9002      	str	r0, [sp, #8]
		switch (*fmt) {
    13c2:	7831      	ldrb	r1, [r6, #0]
    13c4:	9603      	str	r6, [sp, #12]
    13c6:	2939      	cmp	r1, #57	; 0x39
    13c8:	d855      	bhi.n	1476 <z_cbvprintf_impl+0xe2>
    13ca:	291f      	cmp	r1, #31
    13cc:	d814      	bhi.n	13f8 <z_cbvprintf_impl+0x64>
    13ce:	2900      	cmp	r1, #0
    13d0:	f000 81ee 	beq.w	17b0 <z_cbvprintf_impl+0x41c>
			precision = 0;
			break;
		}

		default:
			OUTC('%');
    13d4:	9901      	ldr	r1, [sp, #4]
    13d6:	2025      	movs	r0, #37	; 0x25
    13d8:	47d0      	blx	sl
			OUTC(*fmt);
    13da:	9901      	ldr	r1, [sp, #4]
    13dc:	7830      	ldrb	r0, [r6, #0]
    13de:	47d0      	blx	sl
    13e0:	f109 0902 	add.w	r9, r9, #2
			goto start;
    13e4:	e7e0      	b.n	13a8 <z_cbvprintf_impl+0x14>
		if (*fmt == '\0') {
    13e6:	2800      	cmp	r0, #0
    13e8:	f000 81e2 	beq.w	17b0 <z_cbvprintf_impl+0x41c>
		OUTC(*fmt);
    13ec:	9901      	ldr	r1, [sp, #4]
    13ee:	47d0      	blx	sl
    13f0:	f109 0901 	add.w	r9, r9, #1
	while (*++fmt != '%') {
    13f4:	9403      	str	r4, [sp, #12]
    13f6:	e7d7      	b.n	13a8 <z_cbvprintf_impl+0x14>
		switch (*fmt) {
    13f8:	f1a1 0220 	sub.w	r2, r1, #32
    13fc:	2a19      	cmp	r2, #25
    13fe:	d8e9      	bhi.n	13d4 <z_cbvprintf_impl+0x40>
    1400:	a701      	add	r7, pc, #4	; (adr r7, 1408 <z_cbvprintf_impl+0x74>)
    1402:	f857 f022 	ldr.w	pc, [r7, r2, lsl #2]
    1406:	bf00      	nop
    1408:	00001471 	.word	0x00001471
    140c:	000013d5 	.word	0x000013d5
    1410:	000013d5 	.word	0x000013d5
    1414:	00001471 	.word	0x00001471
    1418:	000013d5 	.word	0x000013d5
    141c:	000014f1 	.word	0x000014f1
    1420:	000013d5 	.word	0x000013d5
    1424:	000013d5 	.word	0x000013d5
    1428:	000013d5 	.word	0x000013d5
    142c:	000013d5 	.word	0x000013d5
    1430:	0000153d 	.word	0x0000153d
    1434:	00001471 	.word	0x00001471
    1438:	000013d5 	.word	0x000013d5
    143c:	00001551 	.word	0x00001551
    1440:	000014fd 	.word	0x000014fd
    1444:	000013d5 	.word	0x000013d5
    1448:	0000150b 	.word	0x0000150b
    144c:	0000152b 	.word	0x0000152b
    1450:	0000152b 	.word	0x0000152b
    1454:	0000152b 	.word	0x0000152b
    1458:	0000152b 	.word	0x0000152b
    145c:	0000152b 	.word	0x0000152b
    1460:	0000152b 	.word	0x0000152b
    1464:	0000152b 	.word	0x0000152b
    1468:	0000152b 	.word	0x0000152b
    146c:	0000152b 	.word	0x0000152b
    1470:	4608      	mov	r0, r1
    1472:	3601      	adds	r6, #1
    1474:	e7a5      	b.n	13c2 <z_cbvprintf_impl+0x2e>
    1476:	2958      	cmp	r1, #88	; 0x58
    1478:	f000 80eb 	beq.w	1652 <z_cbvprintf_impl+0x2be>
    147c:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
    1480:	b2d7      	uxtb	r7, r2
    1482:	2f17      	cmp	r7, #23
    1484:	d8a6      	bhi.n	13d4 <z_cbvprintf_impl+0x40>
    1486:	2a17      	cmp	r2, #23
    1488:	d8a4      	bhi.n	13d4 <z_cbvprintf_impl+0x40>
    148a:	a701      	add	r7, pc, #4	; (adr r7, 1490 <z_cbvprintf_impl+0xfc>)
    148c:	f857 f022 	ldr.w	pc, [r7, r2, lsl #2]
    1490:	000016f9 	.word	0x000016f9
    1494:	00001577 	.word	0x00001577
    1498:	000013d5 	.word	0x000013d5
    149c:	000013d5 	.word	0x000013d5
    14a0:	000013d5 	.word	0x000013d5
    14a4:	00001557 	.word	0x00001557
    14a8:	00001577 	.word	0x00001577
    14ac:	000013d5 	.word	0x000013d5
    14b0:	000013d5 	.word	0x000013d5
    14b4:	00001557 	.word	0x00001557
    14b8:	000013d5 	.word	0x000013d5
    14bc:	000013d5 	.word	0x000013d5
    14c0:	000013d5 	.word	0x000013d5
    14c4:	0000162d 	.word	0x0000162d
    14c8:	000013d5 	.word	0x000013d5
    14cc:	000013d5 	.word	0x000013d5
    14d0:	000016cd 	.word	0x000016cd
    14d4:	000013d5 	.word	0x000013d5
    14d8:	00001577 	.word	0x00001577
    14dc:	000013d5 	.word	0x000013d5
    14e0:	000013d5 	.word	0x000013d5
    14e4:	0000162d 	.word	0x0000162d
    14e8:	000013d5 	.word	0x000013d5
    14ec:	00001557 	.word	0x00001557
			OUTC('%');
    14f0:	2025      	movs	r0, #37	; 0x25
    14f2:	9901      	ldr	r1, [sp, #4]
    14f4:	47d0      	blx	sl
    14f6:	f109 0901 	add.w	r9, r9, #1
			goto start;
    14fa:	e755      	b.n	13a8 <z_cbvprintf_impl+0x14>
			padding_mode &= (char)~PAD_ZERO;
    14fc:	9a02      	ldr	r2, [sp, #8]
			precision = 0;
    14fe:	f04f 0800 	mov.w	r8, #0
			padding_mode &= (char)~PAD_ZERO;
    1502:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    1506:	9202      	str	r2, [sp, #8]
			continue;
    1508:	e7b3      	b.n	1472 <z_cbvprintf_impl+0xde>
			if (min_width < 0 && precision < 0 && !padding_mode) {
    150a:	2c00      	cmp	r4, #0
    150c:	da0d      	bge.n	152a <z_cbvprintf_impl+0x196>
    150e:	f1b8 0f00 	cmp.w	r8, #0
    1512:	da0d      	bge.n	1530 <z_cbvprintf_impl+0x19c>
    1514:	9a02      	ldr	r2, [sp, #8]
    1516:	2a00      	cmp	r2, #0
    1518:	f000 8142 	beq.w	17a0 <z_cbvprintf_impl+0x40c>
				min_width = 10 * min_width + *fmt - '0';
    151c:	220a      	movs	r2, #10
				if (min_width < 0) {
    151e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
				min_width = 10 * min_width + *fmt - '0';
    1522:	fb02 1404 	mla	r4, r2, r4, r1
    1526:	3c30      	subs	r4, #48	; 0x30
    1528:	e7a3      	b.n	1472 <z_cbvprintf_impl+0xde>
			if (precision >= 0) {
    152a:	f1b8 0f00 	cmp.w	r8, #0
    152e:	dbf5      	blt.n	151c <z_cbvprintf_impl+0x188>
				precision = 10 * precision + *fmt - '0';
    1530:	220a      	movs	r2, #10
    1532:	fb02 1208 	mla	r2, r2, r8, r1
    1536:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
    153a:	e79a      	b.n	1472 <z_cbvprintf_impl+0xde>
			if (precision >= 0) {
    153c:	f1b8 0f00 	cmp.w	r8, #0
				precision = va_arg(ap, int);
    1540:	f855 2b04 	ldr.w	r2, [r5], #4
			if (precision >= 0) {
    1544:	f280 812e 	bge.w	17a4 <z_cbvprintf_impl+0x410>
				if (min_width < 0) {
    1548:	2a00      	cmp	r2, #0
    154a:	f280 812d 	bge.w	17a8 <z_cbvprintf_impl+0x414>
					min_width = -min_width;
    154e:	4254      	negs	r4, r2
		switch (*fmt) {
    1550:	2202      	movs	r2, #2
				padding_mode = PAD_ZERO;
    1552:	9202      	str	r2, [sp, #8]
    1554:	e78d      	b.n	1472 <z_cbvprintf_impl+0xde>
			if (*fmt == 'h' && length_mod == 'h') {
    1556:	2968      	cmp	r1, #104	; 0x68
    1558:	d103      	bne.n	1562 <z_cbvprintf_impl+0x1ce>
    155a:	2b68      	cmp	r3, #104	; 0x68
    155c:	d106      	bne.n	156c <z_cbvprintf_impl+0x1d8>
				length_mod = 'H';
    155e:	2348      	movs	r3, #72	; 0x48
    1560:	e787      	b.n	1472 <z_cbvprintf_impl+0xde>
			} else if (*fmt == 'l' && length_mod == 'l') {
    1562:	296c      	cmp	r1, #108	; 0x6c
    1564:	d102      	bne.n	156c <z_cbvprintf_impl+0x1d8>
    1566:	2b6c      	cmp	r3, #108	; 0x6c
    1568:	f000 8120 	beq.w	17ac <z_cbvprintf_impl+0x418>
			} else if (length_mod == '\0') {
    156c:	2b00      	cmp	r3, #0
    156e:	f47f af31 	bne.w	13d4 <z_cbvprintf_impl+0x40>
		switch (*fmt) {
    1572:	460b      	mov	r3, r1
    1574:	e77d      	b.n	1472 <z_cbvprintf_impl+0xde>
			if (length_mod == 'z') {
    1576:	2b7a      	cmp	r3, #122	; 0x7a
    1578:	d106      	bne.n	1588 <z_cbvprintf_impl+0x1f4>
			} else if (*fmt == 'u') {
    157a:	2975      	cmp	r1, #117	; 0x75
				precision = va_arg(ap, int);
    157c:	f855 6b04 	ldr.w	r6, [r5], #4
			} else if (*fmt == 'u') {
    1580:	d114      	bne.n	15ac <z_cbvprintf_impl+0x218>
				d = va_arg(ap, unsigned int);
    1582:	f04f 0b00 	mov.w	fp, #0
			if (*fmt != 'u' && (int_value_type)d < 0) {
    1586:	e00c      	b.n	15a2 <z_cbvprintf_impl+0x20e>
			} else if (length_mod == 'l') {
    1588:	2b6c      	cmp	r3, #108	; 0x6c
    158a:	d0f6      	beq.n	157a <z_cbvprintf_impl+0x1e6>
			} else if (length_mod == 'L') {
    158c:	2b4c      	cmp	r3, #76	; 0x4c
    158e:	d1f4      	bne.n	157a <z_cbvprintf_impl+0x1e6>
					unsigned long long llu =
    1590:	3507      	adds	r5, #7
    1592:	f025 0307 	bic.w	r3, r5, #7
				if (*fmt == 'u') {
    1596:	2975      	cmp	r1, #117	; 0x75
					unsigned long long llu =
    1598:	f103 0508 	add.w	r5, r3, #8
    159c:	e9d3 6b00 	ldrd	r6, fp, [r3]
				if (*fmt == 'u') {
    15a0:	d106      	bne.n	15b0 <z_cbvprintf_impl+0x21c>
			} else if (special == ' ') {
    15a2:	2820      	cmp	r0, #32
    15a4:	d13b      	bne.n	161e <z_cbvprintf_impl+0x28a>
				prefix = " ";
    15a6:	4f84      	ldr	r7, [pc, #528]	; (17b8 <z_cbvprintf_impl+0x424>)
				min_width--;
    15a8:	3c01      	subs	r4, #1
    15aa:	e009      	b.n	15c0 <z_cbvprintf_impl+0x22c>
				d = va_arg(ap, int);
    15ac:	ea4f 7be6 	mov.w	fp, r6, asr #31
			if (*fmt != 'u' && (int_value_type)d < 0) {
    15b0:	f1bb 0f00 	cmp.w	fp, #0
    15b4:	daf5      	bge.n	15a2 <z_cbvprintf_impl+0x20e>
				d = -d;
    15b6:	4276      	negs	r6, r6
				prefix = "-";
    15b8:	4f80      	ldr	r7, [pc, #512]	; (17bc <z_cbvprintf_impl+0x428>)
				d = -d;
    15ba:	eb6b 0b4b 	sbc.w	fp, fp, fp, lsl #1
				min_width--;
    15be:	3c01      	subs	r4, #1
	int i = 0;
    15c0:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
    15c4:	9305      	str	r3, [sp, #20]
    15c6:	2300      	movs	r3, #0
    15c8:	9304      	str	r3, [sp, #16]
		unsigned int c = num % base;
    15ca:	4630      	mov	r0, r6
    15cc:	4659      	mov	r1, fp
    15ce:	220a      	movs	r2, #10
    15d0:	2300      	movs	r3, #0
    15d2:	f7fe fdb7 	bl	144 <__aeabi_uldivmod>
    15d6:	9b04      	ldr	r3, [sp, #16]
    15d8:	468e      	mov	lr, r1
		buftop[--i] = c + '0';
    15da:	1e59      	subs	r1, r3, #1
    15dc:	9104      	str	r1, [sp, #16]
    15de:	9905      	ldr	r1, [sp, #20]
    15e0:	46b4      	mov	ip, r6
    15e2:	3230      	adds	r2, #48	; 0x30
    15e4:	f801 2d01 	strb.w	r2, [r1, #-1]!
    15e8:	465a      	mov	r2, fp
	} while (num);
    15ea:	f1bc 0f0a 	cmp.w	ip, #10
    15ee:	f172 0200 	sbcs.w	r2, r2, #0
		num /= base;
    15f2:	4606      	mov	r6, r0
    15f4:	46f3      	mov	fp, lr
		buftop[--i] = c + '0';
    15f6:	9105      	str	r1, [sp, #20]
	} while (num);
    15f8:	d2e7      	bcs.n	15ca <z_cbvprintf_impl+0x236>
	return -i;
    15fa:	f1c3 0b01 	rsb	fp, r3, #1
			data = buf + sizeof(buf) - data_len;
    15fe:	3330      	adds	r3, #48	; 0x30
			data = buf + sizeof(buf) - data_len;
    1600:	eb0d 0603 	add.w	r6, sp, r3
		}

		if (precision < 0 && (padding_mode & PAD_ZERO)) {
    1604:	f1b8 0f00 	cmp.w	r8, #0
			data = buf + sizeof(buf) - data_len;
    1608:	f1a6 0604 	sub.w	r6, r6, #4
		if (precision < 0 && (padding_mode & PAD_ZERO)) {
    160c:	da6d      	bge.n	16ea <z_cbvprintf_impl+0x356>
    160e:	9b02      	ldr	r3, [sp, #8]
    1610:	07d9      	lsls	r1, r3, #31
    1612:	d47c      	bmi.n	170e <z_cbvprintf_impl+0x37a>
			precision = min_width;
		}
		min_width -= data_len;
		precision -= data_len;
    1614:	eba8 030b 	sub.w	r3, r8, fp
		min_width -= data_len;
    1618:	eba4 040b 	sub.w	r4, r4, fp
    161c:	e013      	b.n	1646 <z_cbvprintf_impl+0x2b2>
			} else if (special == '+') {
    161e:	282b      	cmp	r0, #43	; 0x2b
				prefix = "+";
    1620:	bf0a      	itet	eq
    1622:	4f67      	ldreq	r7, [pc, #412]	; (17c0 <z_cbvprintf_impl+0x42c>)
	prefix = "";
    1624:	4f67      	ldrne	r7, [pc, #412]	; (17c4 <z_cbvprintf_impl+0x430>)
				min_width--;
    1626:	f104 34ff 	addeq.w	r4, r4, #4294967295
    162a:	e7c9      	b.n	15c0 <z_cbvprintf_impl+0x22c>
			if (*fmt == 'p') {
    162c:	2970      	cmp	r1, #112	; 0x70
    162e:	d10f      	bne.n	1650 <z_cbvprintf_impl+0x2bc>
				x = (uintptr_t)va_arg(ap, void *);
    1630:	f855 2b04 	ldr.w	r2, [r5], #4
    1634:	2300      	movs	r3, #0
				if (x == (uint_value_type)0) {
    1636:	b9fa      	cbnz	r2, 1678 <z_cbvprintf_impl+0x2e4>
		precision -= data_len;
    1638:	f06f 0304 	mvn.w	r3, #4
					data_len = 5;
    163c:	f04f 0b05 	mov.w	fp, #5
					data = "(nil)";
    1640:	4e61      	ldr	r6, [pc, #388]	; (17c8 <z_cbvprintf_impl+0x434>)
		min_width -= data_len;
    1642:	3c05      	subs	r4, #5
	prefix = "";
    1644:	4f5f      	ldr	r7, [pc, #380]	; (17c4 <z_cbvprintf_impl+0x430>)
		if (precision > 0) {
			min_width -= precision;
		}

		if (!(padding_mode & PAD_TAIL)) {
    1646:	9a02      	ldr	r2, [sp, #8]
    1648:	0792      	lsls	r2, r2, #30
    164a:	d46f      	bmi.n	172c <z_cbvprintf_impl+0x398>
    164c:	46a0      	mov	r8, r4
    164e:	e065      	b.n	171c <z_cbvprintf_impl+0x388>
		switch (*fmt) {
    1650:	2178      	movs	r1, #120	; 0x78
			} else if (length_mod == 'l') {
    1652:	2b6c      	cmp	r3, #108	; 0x6c
    1654:	d103      	bne.n	165e <z_cbvprintf_impl+0x2ca>
				x = va_arg(ap, unsigned int);
    1656:	2300      	movs	r3, #0
    1658:	f855 2b04 	ldr.w	r2, [r5], #4
    165c:	e008      	b.n	1670 <z_cbvprintf_impl+0x2dc>
			} else if (length_mod == 'L') {
    165e:	2b4c      	cmp	r3, #76	; 0x4c
    1660:	d1f9      	bne.n	1656 <z_cbvprintf_impl+0x2c2>
				unsigned long long llx =
    1662:	3507      	adds	r5, #7
    1664:	f025 0307 	bic.w	r3, r5, #7
    1668:	461d      	mov	r5, r3
    166a:	685b      	ldr	r3, [r3, #4]
    166c:	f855 2b08 	ldr.w	r2, [r5], #8
			if (special == '#') {
    1670:	2823      	cmp	r0, #35	; 0x23
    1672:	d125      	bne.n	16c0 <z_cbvprintf_impl+0x32c>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
    1674:	0688      	lsls	r0, r1, #26
    1676:	d521      	bpl.n	16bc <z_cbvprintf_impl+0x328>
    1678:	4f54      	ldr	r7, [pc, #336]	; (17cc <z_cbvprintf_impl+0x438>)
				min_width -= 2;
    167a:	3c02      	subs	r4, #2
	int i = 0;
    167c:	2600      	movs	r6, #0
			data_len = convert_value(x, 16, ALPHA(*fmt),
    167e:	f001 0160 	and.w	r1, r1, #96	; 0x60
    1682:	f1a1 0b39 	sub.w	fp, r1, #57	; 0x39
	int i = 0;
    1686:	f10d 0e2d 	add.w	lr, sp, #45	; 0x2d
		unsigned int c = num % base;
    168a:	f002 010f 	and.w	r1, r2, #15
		if (c >= 10) {
    168e:	2909      	cmp	r1, #9
			c += alpha;
    1690:	bf88      	it	hi
    1692:	4459      	addhi	r1, fp
		buftop[--i] = c + '0';
    1694:	3130      	adds	r1, #48	; 0x30
    1696:	f80e 1d01 	strb.w	r1, [lr, #-1]!
	} while (num);
    169a:	2a10      	cmp	r2, #16
		num /= base;
    169c:	ea4f 1112 	mov.w	r1, r2, lsr #4
    16a0:	ea41 7103 	orr.w	r1, r1, r3, lsl #28
    16a4:	ea4f 1013 	mov.w	r0, r3, lsr #4
	} while (num);
    16a8:	f173 0300 	sbcs.w	r3, r3, #0
		buftop[--i] = c + '0';
    16ac:	f106 3cff 	add.w	ip, r6, #4294967295
	} while (num);
    16b0:	d208      	bcs.n	16c4 <z_cbvprintf_impl+0x330>
	return -i;
    16b2:	f1c6 0b01 	rsb	fp, r6, #1
			data = buf + sizeof(buf) - data_len;
    16b6:	f106 0330 	add.w	r3, r6, #48	; 0x30
    16ba:	e7a1      	b.n	1600 <z_cbvprintf_impl+0x26c>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
    16bc:	4f44      	ldr	r7, [pc, #272]	; (17d0 <z_cbvprintf_impl+0x43c>)
    16be:	e7dc      	b.n	167a <z_cbvprintf_impl+0x2e6>
	prefix = "";
    16c0:	4f40      	ldr	r7, [pc, #256]	; (17c4 <z_cbvprintf_impl+0x430>)
    16c2:	e7db      	b.n	167c <z_cbvprintf_impl+0x2e8>
		buftop[--i] = c + '0';
    16c4:	4666      	mov	r6, ip
		num /= base;
    16c6:	460a      	mov	r2, r1
    16c8:	4603      	mov	r3, r0
    16ca:	e7de      	b.n	168a <z_cbvprintf_impl+0x2f6>
			data = va_arg(ap, char *);
    16cc:	f855 6b04 	ldr.w	r6, [r5], #4
			data_len = strlen(data);
    16d0:	4630      	mov	r0, r6
    16d2:	f004 fb5c 	bl	5d8e <strlen>
			if (precision >= 0 && data_len > precision) {
    16d6:	f1b8 0f00 	cmp.w	r8, #0
			data_len = strlen(data);
    16da:	4683      	mov	fp, r0
			if (precision >= 0 && data_len > precision) {
    16dc:	db02      	blt.n	16e4 <z_cbvprintf_impl+0x350>
    16de:	4540      	cmp	r0, r8
    16e0:	bfa8      	it	ge
    16e2:	46c3      	movge	fp, r8
			precision = 0;
    16e4:	f04f 0800 	mov.w	r8, #0
	prefix = "";
    16e8:	4f36      	ldr	r7, [pc, #216]	; (17c4 <z_cbvprintf_impl+0x430>)
		precision -= data_len;
    16ea:	eba8 030b 	sub.w	r3, r8, fp
		if (precision > 0) {
    16ee:	2b00      	cmp	r3, #0
    16f0:	dd92      	ble.n	1618 <z_cbvprintf_impl+0x284>
			min_width -= precision;
    16f2:	eba4 0408 	sub.w	r4, r4, r8
    16f6:	e7a6      	b.n	1646 <z_cbvprintf_impl+0x2b2>
			buf[0] = c;
    16f8:	f855 3b04 	ldr.w	r3, [r5], #4
			data_len = 1;
    16fc:	f04f 0b01 	mov.w	fp, #1
			buf[0] = c;
    1700:	f88d 3018 	strb.w	r3, [sp, #24]
		min_width -= data_len;
    1704:	3c01      	subs	r4, #1
		precision -= data_len;
    1706:	f04f 33ff 	mov.w	r3, #4294967295
			data = buf;
    170a:	ae06      	add	r6, sp, #24
    170c:	e79a      	b.n	1644 <z_cbvprintf_impl+0x2b0>
    170e:	46a0      	mov	r8, r4
    1710:	e7eb      	b.n	16ea <z_cbvprintf_impl+0x356>
    1712:	9302      	str	r3, [sp, #8]
			while (--min_width >= 0) {
				OUTC(' ');
    1714:	2020      	movs	r0, #32
    1716:	9901      	ldr	r1, [sp, #4]
    1718:	47d0      	blx	sl
    171a:	9b02      	ldr	r3, [sp, #8]
			while (--min_width >= 0) {
    171c:	f1b8 0801 	subs.w	r8, r8, #1
    1720:	d5f7      	bpl.n	1712 <z_cbvprintf_impl+0x37e>
    1722:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
    1726:	3c01      	subs	r4, #1
    1728:	4491      	add	r9, r2
    172a:	1aa4      	subs	r4, r4, r2
    172c:	46b8      	mov	r8, r7
    172e:	e006      	b.n	173e <z_cbvprintf_impl+0x3aa>
    1730:	9304      	str	r3, [sp, #16]
    1732:	9202      	str	r2, [sp, #8]
			}
		}
		while (*prefix) {
			OUTC(*prefix++);
    1734:	9901      	ldr	r1, [sp, #4]
    1736:	47d0      	blx	sl
    1738:	9a02      	ldr	r2, [sp, #8]
    173a:	9b04      	ldr	r3, [sp, #16]
    173c:	4690      	mov	r8, r2
		while (*prefix) {
    173e:	4642      	mov	r2, r8
    1740:	f812 0b01 	ldrb.w	r0, [r2], #1
    1744:	2800      	cmp	r0, #0
    1746:	d1f3      	bne.n	1730 <z_cbvprintf_impl+0x39c>
    1748:	461a      	mov	r2, r3
		}
		while (--precision >= 0) {
    174a:	3a01      	subs	r2, #1
    174c:	d515      	bpl.n	177a <z_cbvprintf_impl+0x3e6>
    174e:	2b00      	cmp	r3, #0
    1750:	bfac      	ite	ge
    1752:	ebc7 0703 	rsbge	r7, r7, r3
    1756:	427f      	neglt	r7, r7
    1758:	465b      	mov	r3, fp
			OUTC('0');
		}
		while (--data_len >= 0) {
    175a:	3b01      	subs	r3, #1
    175c:	d515      	bpl.n	178a <z_cbvprintf_impl+0x3f6>
    175e:	f1bb 0f00 	cmp.w	fp, #0
    1762:	bfa8      	it	ge
    1764:	445f      	addge	r7, fp
    1766:	4626      	mov	r6, r4
    1768:	444f      	add	r7, r9
			OUTC(*data++);
		}
		while (--min_width >= 0) {
    176a:	3e01      	subs	r6, #1
    176c:	d514      	bpl.n	1798 <z_cbvprintf_impl+0x404>
    176e:	2c00      	cmp	r4, #0
    1770:	bfa8      	it	ge
    1772:	193f      	addge	r7, r7, r4
    1774:	eb07 0908 	add.w	r9, r7, r8
    1778:	e616      	b.n	13a8 <z_cbvprintf_impl+0x14>
    177a:	9304      	str	r3, [sp, #16]
    177c:	9202      	str	r2, [sp, #8]
			OUTC('0');
    177e:	2030      	movs	r0, #48	; 0x30
    1780:	9901      	ldr	r1, [sp, #4]
    1782:	47d0      	blx	sl
    1784:	9b04      	ldr	r3, [sp, #16]
    1786:	9a02      	ldr	r2, [sp, #8]
    1788:	e7df      	b.n	174a <z_cbvprintf_impl+0x3b6>
    178a:	9302      	str	r3, [sp, #8]
			OUTC(*data++);
    178c:	9901      	ldr	r1, [sp, #4]
    178e:	f816 0b01 	ldrb.w	r0, [r6], #1
    1792:	47d0      	blx	sl
    1794:	9b02      	ldr	r3, [sp, #8]
    1796:	e7e0      	b.n	175a <z_cbvprintf_impl+0x3c6>
			OUTC(' ');
    1798:	9901      	ldr	r1, [sp, #4]
    179a:	2020      	movs	r0, #32
    179c:	47d0      	blx	sl
    179e:	e7e4      	b.n	176a <z_cbvprintf_impl+0x3d6>
				padding_mode = PAD_ZERO;
    17a0:	2201      	movs	r2, #1
    17a2:	e6d6      	b.n	1552 <z_cbvprintf_impl+0x1be>
				precision = va_arg(ap, int);
    17a4:	4690      	mov	r8, r2
    17a6:	e664      	b.n	1472 <z_cbvprintf_impl+0xde>
    17a8:	4614      	mov	r4, r2
    17aa:	e662      	b.n	1472 <z_cbvprintf_impl+0xde>
				length_mod = 'L';
    17ac:	234c      	movs	r3, #76	; 0x4c
    17ae:	e660      	b.n	1472 <z_cbvprintf_impl+0xde>
		}

		goto start;
	}
}
    17b0:	4648      	mov	r0, r9
    17b2:	b00d      	add	sp, #52	; 0x34
    17b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    17b8:	00006da3 	.word	0x00006da3
    17bc:	00006da1 	.word	0x00006da1
    17c0:	00006da5 	.word	0x00006da5
    17c4:	00006ed0 	.word	0x00006ed0
    17c8:	00006dad 	.word	0x00006dad
    17cc:	00006da7 	.word	0x00006da7
    17d0:	00006daa 	.word	0x00006daa

000017d4 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    17d4:	4604      	mov	r4, r0
    17d6:	b508      	push	{r3, lr}
	__asm__ volatile(
    17d8:	f04f 0220 	mov.w	r2, #32
    17dc:	f3ef 8311 	mrs	r3, BASEPRI
    17e0:	f382 8812 	msr	BASEPRI_MAX, r2
    17e4:	f3bf 8f6f 	isb	sy
	sys_cache_instr_disable();
#endif /* CONFIG_ICACHE */
#endif /* CONFIG_ARCH_CACHE */

	if (IS_ENABLED(CONFIG_SYSTEM_TIMER_HAS_DISABLE_SUPPORT)) {
		sys_clock_disable();
    17e8:	f001 fa24 	bl	2c34 <sys_clock_disable>
	}

	sys_arch_reboot(type);
    17ec:	4620      	mov	r0, r4
    17ee:	f000 fae3 	bl	1db8 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    17f2:	4803      	ldr	r0, [pc, #12]	; (1800 <sys_reboot+0x2c>)
    17f4:	f004 f95c 	bl	5ab0 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    17f8:	f000 f888 	bl	190c <arch_cpu_idle>
    17fc:	e7fc      	b.n	17f8 <sys_reboot+0x24>
    17fe:	bf00      	nop
    1800:	00006db3 	.word	0x00006db3

00001804 <nordicsemi_nrf91_init>:
    1804:	f04f 0220 	mov.w	r2, #32
    1808:	f3ef 8311 	mrs	r3, BASEPRI
    180c:	f382 8812 	msr	BASEPRI_MAX, r2
    1810:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    1814:	2101      	movs	r1, #1
    1816:	4a04      	ldr	r2, [pc, #16]	; (1828 <nordicsemi_nrf91_init+0x24>)
    1818:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    181c:	f383 8811 	msr	BASEPRI, r3
    1820:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1824:	2000      	movs	r0, #0
    1826:	4770      	bx	lr
    1828:	50039000 	.word	0x50039000

0000182c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    182c:	b120      	cbz	r0, 1838 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    182e:	4b03      	ldr	r3, [pc, #12]	; (183c <arch_busy_wait+0x10>)
    1830:	0180      	lsls	r0, r0, #6
    1832:	f043 0301 	orr.w	r3, r3, #1
    1836:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    1838:	4770      	bx	lr
    183a:	bf00      	nop
    183c:	00006970 	.word	0x00006970

00001840 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    1840:	f001 baee 	b.w	2e20 <SystemInit>

00001844 <flash_area_open>:
		user_cb(&flash_map[i], user_data);
	}
}

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
    1844:	b570      	push	{r4, r5, r6, lr}
	const struct flash_area *area;

	if (flash_map == NULL) {
    1846:	4b11      	ldr	r3, [pc, #68]	; (188c <flash_area_open+0x48>)
{
    1848:	460d      	mov	r5, r1
	if (flash_map == NULL) {
    184a:	681c      	ldr	r4, [r3, #0]
    184c:	b1dc      	cbz	r4, 1886 <flash_area_open+0x42>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    184e:	4b10      	ldr	r3, [pc, #64]	; (1890 <flash_area_open+0x4c>)
    1850:	6819      	ldr	r1, [r3, #0]
    1852:	2300      	movs	r3, #0
    1854:	428b      	cmp	r3, r1
    1856:	db02      	blt.n	185e <flash_area_open+0x1a>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
    1858:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;

	return 0;
}
    185c:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
    185e:	4622      	mov	r2, r4
    1860:	f812 6b10 	ldrb.w	r6, [r2], #16
    1864:	4286      	cmp	r6, r0
    1866:	d002      	beq.n	186e <flash_area_open+0x2a>
	for (int i = 0; i < flash_map_entries; i++) {
    1868:	4614      	mov	r4, r2
    186a:	3301      	adds	r3, #1
    186c:	e7f2      	b.n	1854 <flash_area_open+0x10>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
    186e:	68e0      	ldr	r0, [r4, #12]
    1870:	b910      	cbnz	r0, 1878 <flash_area_open+0x34>
		return -ENODEV;
    1872:	f06f 0012 	mvn.w	r0, #18
    1876:	e7f1      	b.n	185c <flash_area_open+0x18>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    1878:	f004 fe6e 	bl	6558 <z_device_is_ready>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
    187c:	2800      	cmp	r0, #0
    187e:	d0f8      	beq.n	1872 <flash_area_open+0x2e>
	return 0;
    1880:	2000      	movs	r0, #0
	*fap = area;
    1882:	602c      	str	r4, [r5, #0]
	return 0;
    1884:	e7ea      	b.n	185c <flash_area_open+0x18>
		return -EACCES;
    1886:	f06f 000c 	mvn.w	r0, #12
    188a:	e7e7      	b.n	185c <flash_area_open+0x18>
    188c:	20000010 	.word	0x20000010
    1890:	00006988 	.word	0x00006988

00001894 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
    1894:	b570      	push	{r4, r5, r6, lr}
    1896:	b088      	sub	sp, #32
    1898:	4605      	mov	r5, r0
    189a:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
    189c:	b2c0      	uxtb	r0, r0
    189e:	4669      	mov	r1, sp
{
    18a0:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
    18a2:	f7ff ffcf 	bl	1844 <flash_area_open>
	if (rc < 0 || fa == NULL) {
    18a6:	2800      	cmp	r0, #0
    18a8:	db1b      	blt.n	18e2 <flash_area_get_sectors+0x4e>
    18aa:	9800      	ldr	r0, [sp, #0]
    18ac:	b1c8      	cbz	r0, 18e2 <flash_area_get_sectors+0x4e>
	cb_data->area_off = fa->fa_off;
    18ae:	6843      	ldr	r3, [r0, #4]
	cb_data->ret_len = *cnt;
    18b0:	6822      	ldr	r2, [r4, #0]
	cb_data->area_off = fa->fa_off;
    18b2:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
    18b4:	6883      	ldr	r3, [r0, #8]
	cb_data->area_idx = idx;
    18b6:	9501      	str	r5, [sp, #4]
	cb_data->ret = ret;
    18b8:	e9cd 3603 	strd	r3, r6, [sp, #12]
	cb_data->ret_idx = 0U;
    18bc:	2300      	movs	r3, #0
	cb_data->status = 0;
    18be:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
    18c2:	9305      	str	r3, [sp, #20]
	flash_dev = fa->fa_dev;
    18c4:	68c5      	ldr	r5, [r0, #12]
	flash_area_close(fa);
    18c6:	f004 f9db 	bl	5c80 <flash_area_close>
	if (flash_dev == NULL) {
    18ca:	b16d      	cbz	r5, 18e8 <flash_area_get_sectors+0x54>
	flash_page_foreach(flash_dev, cb, cb_data);
    18cc:	4628      	mov	r0, r5
    18ce:	4908      	ldr	r1, [pc, #32]	; (18f0 <flash_area_get_sectors+0x5c>)
    18d0:	aa01      	add	r2, sp, #4
    18d2:	f004 fb9c 	bl	600e <flash_page_foreach>
	if (cb_data->status == 0) {
    18d6:	9807      	ldr	r0, [sp, #28]
    18d8:	b908      	cbnz	r0, 18de <flash_area_get_sectors+0x4a>
		*cnt = cb_data->ret_idx;
    18da:	9b05      	ldr	r3, [sp, #20]
    18dc:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    18de:	b008      	add	sp, #32
    18e0:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    18e2:	f06f 0015 	mvn.w	r0, #21
    18e6:	e7fa      	b.n	18de <flash_area_get_sectors+0x4a>
		return -ENODEV;
    18e8:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    18ec:	e7f7      	b.n	18de <flash_area_get_sectors+0x4a>
    18ee:	bf00      	nop
    18f0:	00005d1f 	.word	0x00005d1f

000018f4 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    18f4:	4801      	ldr	r0, [pc, #4]	; (18fc <nrf_cc3xx_platform_abort_init+0x8>)
    18f6:	f002 b8fb 	b.w	3af0 <nrf_cc3xx_platform_set_abort>
    18fa:	bf00      	nop
    18fc:	00006a6c 	.word	0x00006a6c

00001900 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1900:	4901      	ldr	r1, [pc, #4]	; (1908 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    1902:	2210      	movs	r2, #16
	str	r2, [r1]
    1904:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    1906:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1908:	e000ed10 	.word	0xe000ed10

0000190c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    190c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    190e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1910:	f380 8811 	msr	BASEPRI, r0
	isb
    1914:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    1918:	f3bf 8f4f 	dsb	sy
    191c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    191e:	b662      	cpsie	i
	isb
    1920:	f3bf 8f6f 	isb	sy

	bx	lr
    1924:	4770      	bx	lr
    1926:	bf00      	nop

00001928 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1928:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    192a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    192c:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    1930:	f3bf 8f4f 	dsb	sy
    1934:	bf20      	wfe

	msr	BASEPRI, r0
    1936:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    193a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    193c:	4770      	bx	lr
    193e:	bf00      	nop

00001940 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1940:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1942:	2800      	cmp	r0, #0
    1944:	db07      	blt.n	1956 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1946:	2301      	movs	r3, #1
    1948:	0941      	lsrs	r1, r0, #5
    194a:	4a03      	ldr	r2, [pc, #12]	; (1958 <arch_irq_enable+0x18>)
    194c:	f000 001f 	and.w	r0, r0, #31
    1950:	4083      	lsls	r3, r0
    1952:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    1956:	4770      	bx	lr
    1958:	e000e100 	.word	0xe000e100

0000195c <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    195c:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    195e:	2800      	cmp	r0, #0
    1960:	db0c      	blt.n	197c <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1962:	2201      	movs	r2, #1
    1964:	4906      	ldr	r1, [pc, #24]	; (1980 <arch_irq_disable+0x24>)
    1966:	0943      	lsrs	r3, r0, #5
    1968:	f000 001f 	and.w	r0, r0, #31
    196c:	4082      	lsls	r2, r0
    196e:	3320      	adds	r3, #32
    1970:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    1974:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1978:	f3bf 8f6f 	isb	sy
}
    197c:	4770      	bx	lr
    197e:	bf00      	nop
    1980:	e000e100 	.word	0xe000e100

00001984 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    1984:	4b05      	ldr	r3, [pc, #20]	; (199c <arch_irq_is_enabled+0x18>)
    1986:	0942      	lsrs	r2, r0, #5
    1988:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    198c:	2301      	movs	r3, #1
    198e:	f000 001f 	and.w	r0, r0, #31
    1992:	fa03 f000 	lsl.w	r0, r3, r0
}
    1996:	4010      	ands	r0, r2
    1998:	4770      	bx	lr
    199a:	bf00      	nop
    199c:	e000e100 	.word	0xe000e100

000019a0 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    19a0:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    19a2:	2800      	cmp	r0, #0
		prio += _IRQ_PRIO_OFFSET;
    19a4:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    19a8:	bfac      	ite	ge
    19aa:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    19ae:	4b06      	ldrlt	r3, [pc, #24]	; (19c8 <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    19b0:	ea4f 1141 	mov.w	r1, r1, lsl #5
    19b4:	b2c9      	uxtb	r1, r1
    19b6:	bfab      	itete	ge
    19b8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    19bc:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    19c0:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    19c4:	5419      	strblt	r1, [r3, r0]
}
    19c6:	4770      	bx	lr
    19c8:	e000ed14 	.word	0xe000ed14

000019cc <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    19cc:	bf30      	wfi
    b z_SysNmiOnReset
    19ce:	f7ff bffd 	b.w	19cc <z_SysNmiOnReset>
    19d2:	bf00      	nop

000019d4 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    19d4:	4a14      	ldr	r2, [pc, #80]	; (1a28 <z_arm_prep_c+0x54>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    19d6:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    19d8:	4b14      	ldr	r3, [pc, #80]	; (1a2c <z_arm_prep_c+0x58>)
    19da:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    19de:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    19e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    19e4:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    19e8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    19ec:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    19f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    19f4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    19f8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    19fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
    1a00:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    1a04:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
    1a08:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1a0c:	f3bf 8f6f 	isb	sy
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_set_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
    1a10:	2300      	movs	r3, #0
    1a12:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1a16:	f001 ff11 	bl	383c <z_bss_zero>
	z_data_copy();
    1a1a:	f001 ff53 	bl	38c4 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1a1e:	f000 f98f 	bl	1d40 <z_arm_interrupt_init>
	z_cstart();
    1a22:	f001 ff17 	bl	3854 <z_cstart>
    1a26:	bf00      	nop
    1a28:	00000000 	.word	0x00000000
    1a2c:	e000ed00 	.word	0xe000ed00

00001a30 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    1a30:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1a34:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1a36:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1a3a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1a3e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1a40:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1a44:	2902      	cmp	r1, #2
    beq _oops
    1a46:	d0ff      	beq.n	1a48 <_oops>

00001a48 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1a48:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    1a4a:	f004 f991 	bl	5d70 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    1a4e:	bd01      	pop	{r0, pc}

00001a50 <z_arm_switch_to_main_no_multithreading>:

#if !defined(CONFIG_MULTITHREADING) && defined(CONFIG_CPU_CORTEX_M)

FUNC_NORETURN void z_arm_switch_to_main_no_multithreading(
	k_thread_entry_t main_entry, void *p1, void *p2, void *p3)
{
    1a50:	4604      	mov	r4, r0
    1a52:	4608      	mov	r0, r1
    1a54:	4611      	mov	r1, r2
    1a56:	461a      	mov	r2, r3
    1a58:	2300      	movs	r3, #0
    1a5a:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    1a5e:	f383 880b 	msr	PSPLIM, r3
	 */
	register void *p1_inreg __asm__("r0") = p1;
	register void *p2_inreg __asm__("r1") = p2;
	register void *p3_inreg __asm__("r2") = p3;

	__asm__ volatile (
    1a62:	4b0a      	ldr	r3, [pc, #40]	; (1a8c <loop+0x2>)
    1a64:	2520      	movs	r5, #32
    1a66:	f5a3 5620 	sub.w	r6, r3, #10240	; 0x2800
    1a6a:	f386 880b 	msr	PSPLIM, r6
    1a6e:	f383 8809 	msr	PSP, r3
    1a72:	b663      	cpsie	if
    1a74:	f04f 0300 	mov.w	r3, #0
    1a78:	f383 8811 	msr	BASEPRI, r3
    1a7c:	f3bf 8f6f 	isb	sy
    1a80:	47a0      	blx	r4
    1a82:	f385 8811 	msr	BASEPRI, r5
    1a86:	f3bf 8f6f 	isb	sy

00001a8a <loop>:
    1a8a:	e7fe      	b.n	1a8a <loop>
	, [_psplim]"r" (psplim)
#endif
	:
	);

	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    1a8c:	20003ff0 	.word	0x20003ff0

00001a90 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1a90:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1a92:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1a96:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1a9a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    1a9e:	4904      	ldr	r1, [pc, #16]	; (1ab0 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1aa0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1aa2:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1aa4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1aa6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    1aaa:	4902      	ldr	r1, [pc, #8]	; (1ab4 <_isr_wrapper+0x24>)
	bx r1
    1aac:	4708      	bx	r1
    1aae:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
    1ab0:	000066d4 	.word	0x000066d4
	ldr r1, =z_arm_int_exit
    1ab4:	00001ab9 	.word	0x00001ab9

00001ab8 <z_arm_exc_exit>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    1ab8:	4770      	bx	lr
    1aba:	bf00      	nop

00001abc <usage_fault.constprop.0>:
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1abc:	4b15      	ldr	r3, [pc, #84]	; (1b14 <usage_fault.constprop.0+0x58>)
    1abe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    1ac0:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1ac4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    1ac6:	bf14      	ite	ne
    1ac8:	201e      	movne	r0, #30
    1aca:	201d      	moveq	r0, #29
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    1acc:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    1ad0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    1ad2:	bf18      	it	ne
    1ad4:	201f      	movne	r0, #31
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    1ad6:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1ada:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_STACK_CHK_FAIL;
    1adc:	bf18      	it	ne
    1ade:	2002      	movne	r0, #2
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    1ae0:	f412 2f00 	tst.w	r2, #524288	; 0x80000
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1ae4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    1ae6:	bf18      	it	ne
    1ae8:	2021      	movne	r0, #33	; 0x21
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    1aea:	f412 2f80 	tst.w	r2, #262144	; 0x40000
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1aee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    1af0:	bf18      	it	ne
    1af2:	2022      	movne	r0, #34	; 0x22
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    1af4:	f412 3f00 	tst.w	r2, #131072	; 0x20000
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1af8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    1afa:	bf18      	it	ne
    1afc:	2023      	movne	r0, #35	; 0x23
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    1afe:	f412 3f80 	tst.w	r2, #65536	; 0x10000
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1b02:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	return reason;
}
    1b04:	bf18      	it	ne
    1b06:	2024      	movne	r0, #36	; 0x24
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1b08:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    1b0c:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    1b10:	629a      	str	r2, [r3, #40]	; 0x28
}
    1b12:	4770      	bx	lr
    1b14:	e000ed00 	.word	0xe000ed00

00001b18 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    1b18:	b510      	push	{r4, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1b1a:	4b19      	ldr	r3, [pc, #100]	; (1b80 <bus_fault.constprop.0+0x68>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    1b1c:	4602      	mov	r2, r0
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1b1e:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1b20:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    1b22:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    1b26:	bf14      	ite	ne
    1b28:	2017      	movne	r0, #23
    1b2a:	2016      	moveq	r0, #22
		reason = K_ERR_ARM_BUS_UNSTACKING;
    1b2c:	f414 6f00 	tst.w	r4, #2048	; 0x800
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1b30:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_UNSTACKING;
    1b32:	bf18      	it	ne
    1b34:	2018      	movne	r0, #24
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1b36:	05a4      	lsls	r4, r4, #22
    1b38:	d509      	bpl.n	1b4e <bus_fault.constprop.0+0x36>
		STORE_xFAR(bfar, SCB->BFAR);
    1b3a:	6b98      	ldr	r0, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1b3c:	6a98      	ldr	r0, [r3, #40]	; 0x28
    1b3e:	0400      	lsls	r0, r0, #16
    1b40:	d504      	bpl.n	1b4c <bus_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
    1b42:	b11a      	cbz	r2, 1b4c <bus_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1b44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1b46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    1b4a:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    1b4c:	2019      	movs	r0, #25
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1b4e:	4b0c      	ldr	r3, [pc, #48]	; (1b80 <bus_fault.constprop.0+0x68>)
    1b50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    1b52:	f412 6f80 	tst.w	r2, #1024	; 0x400
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1b56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    1b58:	bf18      	it	ne
    1b5a:	201a      	movne	r0, #26
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1b5c:	05d2      	lsls	r2, r2, #23
    1b5e:	d40c      	bmi.n	1b7a <bus_fault.constprop.0+0x62>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
    1b62:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    1b66:	bf18      	it	ne
    1b68:	201c      	movne	r0, #28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1b6a:	4a05      	ldr	r2, [pc, #20]	; (1b80 <bus_fault.constprop.0+0x68>)
    1b6c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1b6e:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    1b72:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1b74:	2300      	movs	r3, #0
    1b76:	700b      	strb	r3, [r1, #0]
}
    1b78:	bd10      	pop	{r4, pc}
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    1b7a:	201b      	movs	r0, #27
    1b7c:	e7f5      	b.n	1b6a <bus_fault.constprop.0+0x52>
    1b7e:	bf00      	nop
    1b80:	e000ed00 	.word	0xe000ed00

00001b84 <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    1b84:	b510      	push	{r4, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1b86:	4b1c      	ldr	r3, [pc, #112]	; (1bf8 <mem_manage_fault.constprop.0+0x74>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    1b88:	4602      	mov	r2, r0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1b8a:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1b8c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    1b8e:	f010 0f10 	tst.w	r0, #16
    1b92:	bf14      	ite	ne
    1b94:	2011      	movne	r0, #17
    1b96:	2010      	moveq	r0, #16
		reason = K_ERR_ARM_MEM_UNSTACKING;
    1b98:	f014 0f08 	tst.w	r4, #8
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1b9c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_UNSTACKING;
    1b9e:	bf18      	it	ne
    1ba0:	2012      	movne	r0, #18
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1ba2:	07a4      	lsls	r4, r4, #30
    1ba4:	d509      	bpl.n	1bba <mem_manage_fault.constprop.0+0x36>
		uint32_t temp = SCB->MMFAR;
    1ba6:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1ba8:	6a98      	ldr	r0, [r3, #40]	; 0x28
    1baa:	0600      	lsls	r0, r0, #24
    1bac:	d504      	bpl.n	1bb8 <mem_manage_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
    1bae:	b11a      	cbz	r2, 1bb8 <mem_manage_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1bb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1bb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    1bb6:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    1bb8:	2013      	movs	r0, #19
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1bba:	4b0f      	ldr	r3, [pc, #60]	; (1bf8 <mem_manage_fault.constprop.0+0x74>)
    1bbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    1bbe:	f012 0f01 	tst.w	r2, #1
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1bc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    1bc4:	bf18      	it	ne
    1bc6:	2014      	movne	r0, #20
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    1bc8:	f012 0f20 	tst.w	r2, #32
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1bcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    1bce:	bf18      	it	ne
    1bd0:	2015      	movne	r0, #21
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1bd2:	06d4      	lsls	r4, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    1bd4:	bf58      	it	pl
    1bd6:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1bd8:	4b07      	ldr	r3, [pc, #28]	; (1bf8 <mem_manage_fault.constprop.0+0x74>)
    1bda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1bdc:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    1bde:	bf42      	ittt	mi
    1be0:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    1be2:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    1be6:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1be8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1bea:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    1bee:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1bf0:	2300      	movs	r3, #0
    1bf2:	700b      	strb	r3, [r1, #0]
}
    1bf4:	bd10      	pop	{r4, pc}
    1bf6:	bf00      	nop
    1bf8:	e000ed00 	.word	0xe000ed00

00001bfc <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    1bfc:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1bfe:	4b44      	ldr	r3, [pc, #272]	; (1d10 <z_arm_fault+0x114>)
{
    1c00:	4606      	mov	r6, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1c02:	685b      	ldr	r3, [r3, #4]
    1c04:	2500      	movs	r5, #0
{
    1c06:	b08a      	sub	sp, #40	; 0x28
    1c08:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1c0c:	f385 8811 	msr	BASEPRI, r5
    1c10:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1c14:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
    1c18:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
    1c1c:	d111      	bne.n	1c42 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    1c1e:	f002 000c 	and.w	r0, r2, #12
    1c22:	2808      	cmp	r0, #8
    1c24:	d00d      	beq.n	1c42 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1c26:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    1c28:	bf4c      	ite	mi
    1c2a:	460e      	movmi	r6, r1
			*nested_exc = true;
    1c2c:	2501      	movpl	r5, #1
	*recoverable = false;
    1c2e:	2200      	movs	r2, #0
	switch (fault) {
    1c30:	3b03      	subs	r3, #3
	*recoverable = false;
    1c32:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    1c36:	2b03      	cmp	r3, #3
    1c38:	d805      	bhi.n	1c46 <z_arm_fault+0x4a>
    1c3a:	e8df f003 	tbb	[pc, r3]
    1c3e:	5c1e      	.short	0x5c1e
    1c40:	5960      	.short	0x5960
		return NULL;
    1c42:	462e      	mov	r6, r5
    1c44:	e7f3      	b.n	1c2e <z_arm_fault+0x32>
    1c46:	2400      	movs	r4, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    1c48:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1c4c:	b99b      	cbnz	r3, 1c76 <z_arm_fault+0x7a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1c4e:	2220      	movs	r2, #32
    1c50:	4631      	mov	r1, r6
    1c52:	a802      	add	r0, sp, #8
    1c54:	f004 f8b2 	bl	5dbc <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    1c58:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1c5a:	2d00      	cmp	r5, #0
    1c5c:	d053      	beq.n	1d06 <z_arm_fault+0x10a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1c5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1c62:	b922      	cbnz	r2, 1c6e <z_arm_fault+0x72>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1c64:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1c68:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1c6c:	9309      	str	r3, [sp, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
    1c6e:	4620      	mov	r0, r4
    1c70:	a902      	add	r1, sp, #8
    1c72:	f004 f87b 	bl	5d6c <z_arm_fatal_error>
}
    1c76:	b00a      	add	sp, #40	; 0x28
    1c78:	bd70      	pop	{r4, r5, r6, pc}
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1c7a:	4b25      	ldr	r3, [pc, #148]	; (1d10 <z_arm_fault+0x114>)
    1c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1c7e:	0791      	lsls	r1, r2, #30
    1c80:	d4e1      	bmi.n	1c46 <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    1c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1c84:	2a00      	cmp	r2, #0
    1c86:	dbde      	blt.n	1c46 <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1c8a:	0052      	lsls	r2, r2, #1
    1c8c:	d5db      	bpl.n	1c46 <z_arm_fault+0x4a>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    1c8e:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    1c90:	69b1      	ldr	r1, [r6, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    1c92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    1c96:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    1c98:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1c9c:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    1ca0:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    1ca2:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    1ca6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    1caa:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    1cac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1cb0:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    1cb4:	f64d 7202 	movw	r2, #57090	; 0xdf02
    1cb8:	4291      	cmp	r1, r2
    1cba:	d009      	beq.n	1cd0 <z_arm_fault+0xd4>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    1cbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1cbe:	b2d2      	uxtb	r2, r2
    1cc0:	b142      	cbz	r2, 1cd4 <z_arm_fault+0xd8>
			reason = mem_manage_fault(esf, 1, recoverable);
    1cc2:	2001      	movs	r0, #1
    1cc4:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    1cc8:	f7ff ff5c 	bl	1b84 <mem_manage_fault.constprop.0>
		reason = usage_fault(esf);
    1ccc:	4604      	mov	r4, r0
		break;
    1cce:	e7bb      	b.n	1c48 <z_arm_fault+0x4c>
			reason = esf->basic.r0;
    1cd0:	6834      	ldr	r4, [r6, #0]
    1cd2:	e7b9      	b.n	1c48 <z_arm_fault+0x4c>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    1cd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1cd6:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    1cda:	d005      	beq.n	1ce8 <z_arm_fault+0xec>
			reason = bus_fault(esf, 1, recoverable);
    1cdc:	2001      	movs	r0, #1
    1cde:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    1ce2:	f7ff ff19 	bl	1b18 <bus_fault.constprop.0>
    1ce6:	e7f1      	b.n	1ccc <z_arm_fault+0xd0>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    1ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1cea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    1cee:	d3aa      	bcc.n	1c46 <z_arm_fault+0x4a>
		reason = usage_fault(esf);
    1cf0:	f7ff fee4 	bl	1abc <usage_fault.constprop.0>
    1cf4:	e7ea      	b.n	1ccc <z_arm_fault+0xd0>
		reason = mem_manage_fault(esf, 0, recoverable);
    1cf6:	2000      	movs	r0, #0
    1cf8:	f10d 0107 	add.w	r1, sp, #7
    1cfc:	e7e4      	b.n	1cc8 <z_arm_fault+0xcc>
		reason = bus_fault(esf, 0, recoverable);
    1cfe:	2000      	movs	r0, #0
    1d00:	f10d 0107 	add.w	r1, sp, #7
    1d04:	e7ed      	b.n	1ce2 <z_arm_fault+0xe6>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1d06:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1d0a:	f023 0301 	bic.w	r3, r3, #1
    1d0e:	e7ad      	b.n	1c6c <z_arm_fault+0x70>
    1d10:	e000ed00 	.word	0xe000ed00

00001d14 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1d14:	4b04      	ldr	r3, [pc, #16]	; (1d28 <z_arm_fault_init+0x14>)
    1d16:	695a      	ldr	r2, [r3, #20]
    1d18:	f042 0210 	orr.w	r2, r2, #16
    1d1c:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    1d1e:	695a      	ldr	r2, [r3, #20]
    1d20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    1d24:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    1d26:	4770      	bx	lr
    1d28:	e000ed00 	.word	0xe000ed00

00001d2c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    1d2c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1d30:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    1d34:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    1d36:	4672      	mov	r2, lr
	bl z_arm_fault
    1d38:	f7ff ff60 	bl	1bfc <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    1d3c:	bd01      	pop	{r0, pc}
    1d3e:	bf00      	nop

00001d40 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    1d40:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1d42:	2120      	movs	r1, #32
    1d44:	4803      	ldr	r0, [pc, #12]	; (1d54 <z_arm_interrupt_init+0x14>)
    1d46:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1d48:	3301      	adds	r3, #1
    1d4a:	2b41      	cmp	r3, #65	; 0x41
    1d4c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1d50:	d1f9      	bne.n	1d46 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1d52:	4770      	bx	lr
    1d54:	e000e100 	.word	0xe000e100

00001d58 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    1d58:	2000      	movs	r0, #0
    msr CONTROL, r0
    1d5a:	f380 8814 	msr	CONTROL, r0
    isb
    1d5e:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    1d62:	2000      	movs	r0, #0
    msr MSPLIM, r0
    1d64:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    1d68:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    1d6c:	f7ff fd68 	bl	1840 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    1d70:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    1d72:	490e      	ldr	r1, [pc, #56]	; (1dac <__start+0x54>)
    str r0, [r1]
    1d74:	6008      	str	r0, [r1, #0]
    dsb
    1d76:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1d7a:	480d      	ldr	r0, [pc, #52]	; (1db0 <__start+0x58>)
    msr msp, r0
    1d7c:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    1d80:	f000 f83e 	bl	1e00 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1d84:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1d86:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    1d8a:	480a      	ldr	r0, [pc, #40]	; (1db4 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    1d8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1d90:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1d92:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1d96:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1d9a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1d9c:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1d9e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    1da2:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1da6:	f7ff fe15 	bl	19d4 <z_arm_prep_c>
    1daa:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    1dac:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1db0:	20003ff0 	.word	0x20003ff0
    ldr r0, =z_interrupt_stacks
    1db4:	20000ff0 	.word	0x20000ff0

00001db8 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    1db8:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    1dbc:	4905      	ldr	r1, [pc, #20]	; (1dd4 <sys_arch_reboot+0x1c>)
    1dbe:	4b06      	ldr	r3, [pc, #24]	; (1dd8 <sys_arch_reboot+0x20>)
    1dc0:	68ca      	ldr	r2, [r1, #12]
    1dc2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1dc6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1dc8:	60cb      	str	r3, [r1, #12]
    1dca:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    1dce:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    1dd0:	e7fd      	b.n	1dce <sys_arch_reboot+0x16>
    1dd2:	bf00      	nop
    1dd4:	e000ed00 	.word	0xe000ed00
    1dd8:	05fa0004 	.word	0x05fa0004

00001ddc <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    1ddc:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    1dde:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    1de0:	4906      	ldr	r1, [pc, #24]	; (1dfc <z_arm_clear_arm_mpu_config+0x20>)
    1de2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
    1de6:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
    1dea:	4293      	cmp	r3, r2
    1dec:	db00      	blt.n	1df0 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    1dee:	4770      	bx	lr
  mpu->RNR = rnr;
    1df0:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
    1df4:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    1df8:	3301      	adds	r3, #1
    1dfa:	e7f6      	b.n	1dea <z_arm_clear_arm_mpu_config+0xe>
    1dfc:	e000ed00 	.word	0xe000ed00

00001e00 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    1e00:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    1e02:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    1e04:	2400      	movs	r4, #0
    1e06:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    1e0a:	f7ff ffe7 	bl	1ddc <z_arm_clear_arm_mpu_config>
    1e0e:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    1e10:	f04f 30ff 	mov.w	r0, #4294967295
    1e14:	4a0c      	ldr	r2, [pc, #48]	; (1e48 <z_arm_init_arch_hw_at_boot+0x48>)
    1e16:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    1e1a:	3301      	adds	r3, #1
    1e1c:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    1e1e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    1e22:	d1f8      	bne.n	1e16 <z_arm_init_arch_hw_at_boot+0x16>
    1e24:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1e26:	f04f 30ff 	mov.w	r0, #4294967295
    1e2a:	4a07      	ldr	r2, [pc, #28]	; (1e48 <z_arm_init_arch_hw_at_boot+0x48>)
    1e2c:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1e30:	3301      	adds	r3, #1
    1e32:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1e34:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1e38:	d1f8      	bne.n	1e2c <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    1e3a:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    1e3c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1e40:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    1e44:	bd10      	pop	{r4, pc}
    1e46:	bf00      	nop
    1e48:	e000e100 	.word	0xe000e100

00001e4c <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    1e4c:	4b01      	ldr	r3, [pc, #4]	; (1e54 <__stdout_hook_install+0x8>)
    1e4e:	6018      	str	r0, [r3, #0]
}
    1e50:	4770      	bx	lr
    1e52:	bf00      	nop
    1e54:	20000014 	.word	0x20000014

00001e58 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    1e58:	4b08      	ldr	r3, [pc, #32]	; (1e7c <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1e5a:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    1e5c:	1ac3      	subs	r3, r0, r3
{
    1e5e:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1e60:	4907      	ldr	r1, [pc, #28]	; (1e80 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    1e62:	109b      	asrs	r3, r3, #2
{
    1e64:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1e66:	4359      	muls	r1, r3
    1e68:	2240      	movs	r2, #64	; 0x40
    1e6a:	4806      	ldr	r0, [pc, #24]	; (1e84 <onoff_stop+0x2c>)
    1e6c:	f003 ffd9 	bl	5e22 <stop>
	notify(mgr, res);
    1e70:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1e72:	4601      	mov	r1, r0
	notify(mgr, res);
    1e74:	4620      	mov	r0, r4
}
    1e76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    1e7a:	4718      	bx	r3
    1e7c:	20000e4c 	.word	0x20000e4c
    1e80:	b6db6db7 	.word	0xb6db6db7
    1e84:	0000665c 	.word	0x0000665c

00001e88 <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1e88:	2340      	movs	r3, #64	; 0x40
{
    1e8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    1e8c:	4c0b      	ldr	r4, [pc, #44]	; (1ebc <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1e8e:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
    1e90:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1e92:	460b      	mov	r3, r1
{
    1e94:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1e96:	490a      	ldr	r1, [pc, #40]	; (1ec0 <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
    1e98:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1e9a:	4361      	muls	r1, r4
{
    1e9c:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1e9e:	4a09      	ldr	r2, [pc, #36]	; (1ec4 <onoff_start+0x3c>)
    1ea0:	4809      	ldr	r0, [pc, #36]	; (1ec8 <onoff_start+0x40>)
    1ea2:	f003 ffea 	bl	5e7a <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    1ea6:	1e01      	subs	r1, r0, #0
    1ea8:	da05      	bge.n	1eb6 <onoff_start+0x2e>
		notify(mgr, err);
    1eaa:	4630      	mov	r0, r6
    1eac:	462b      	mov	r3, r5
	}
}
    1eae:	b002      	add	sp, #8
    1eb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    1eb4:	4718      	bx	r3
}
    1eb6:	b002      	add	sp, #8
    1eb8:	bd70      	pop	{r4, r5, r6, pc}
    1eba:	bf00      	nop
    1ebc:	20000e4c 	.word	0x20000e4c
    1ec0:	b6db6db7 	.word	0xb6db6db7
    1ec4:	00005eeb 	.word	0x00005eeb
    1ec8:	0000665c 	.word	0x0000665c

00001ecc <generic_hfclk_stop>:
{
    1ecc:	b510      	push	{r4, lr}
	__asm__ volatile(
    1ece:	f04f 0320 	mov.w	r3, #32
    1ed2:	f3ef 8411 	mrs	r4, BASEPRI
    1ed6:	f383 8812 	msr	BASEPRI_MAX, r3
    1eda:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    1ede:	4a07      	ldr	r2, [pc, #28]	; (1efc <generic_hfclk_stop+0x30>)
    1ee0:	6813      	ldr	r3, [r2, #0]
    1ee2:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
    1ee6:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
    1ee8:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    1eea:	d402      	bmi.n	1ef2 <generic_hfclk_stop+0x26>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    1eec:	2001      	movs	r0, #1
    1eee:	f004 fb27 	bl	6540 <nrfx_clock_stop>
	__asm__ volatile(
    1ef2:	f384 8811 	msr	BASEPRI, r4
    1ef6:	f3bf 8f6f 	isb	sy
}
    1efa:	bd10      	pop	{r4, pc}
    1efc:	20000e9c 	.word	0x20000e9c

00001f00 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    1f00:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1f02:	2200      	movs	r2, #0
    1f04:	2101      	movs	r1, #1
{
    1f06:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1f08:	2005      	movs	r0, #5
    1f0a:	f7ff fd49 	bl	19a0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    1f0e:	480f      	ldr	r0, [pc, #60]	; (1f4c <clk_init+0x4c>)
    1f10:	f001 f88a 	bl	3028 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    1f14:	4b0e      	ldr	r3, [pc, #56]	; (1f50 <clk_init+0x50>)
    1f16:	4298      	cmp	r0, r3
    1f18:	d115      	bne.n	1f46 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    1f1a:	f004 fac3 	bl	64a4 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    1f1e:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    1f20:	490c      	ldr	r1, [pc, #48]	; (1f54 <clk_init+0x54>)
    1f22:	4630      	mov	r0, r6
    1f24:	f003 fe22 	bl	5b6c <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    1f28:	2800      	cmp	r0, #0
    1f2a:	db0b      	blt.n	1f44 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1f2c:	2501      	movs	r5, #1
    1f2e:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
    1f30:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    1f32:	4908      	ldr	r1, [pc, #32]	; (1f54 <clk_init+0x54>)
    1f34:	f104 001c 	add.w	r0, r4, #28
    1f38:	f003 fe18 	bl	5b6c <onoff_manager_init>
		if (err < 0) {
    1f3c:	2800      	cmp	r0, #0
    1f3e:	db01      	blt.n	1f44 <clk_init+0x44>
	}

	return 0;
    1f40:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1f42:	64e5      	str	r5, [r4, #76]	; 0x4c
}
    1f44:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    1f46:	f06f 0004 	mvn.w	r0, #4
    1f4a:	e7fb      	b.n	1f44 <clk_init+0x44>
    1f4c:	00001f8d 	.word	0x00001f8d
    1f50:	0bad0000 	.word	0x0bad0000
    1f54:	00006a74 	.word	0x00006a74

00001f58 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    1f58:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    1f5a:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    1f5c:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    1f5e:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    1f60:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    1f62:	4808      	ldr	r0, [pc, #32]	; (1f84 <clkstarted_handle.constprop.0+0x2c>)
    1f64:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    1f66:	3340      	adds	r3, #64	; 0x40
    1f68:	4418      	add	r0, r3
	void *user_data = sub_data->user_data;
    1f6a:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    1f6e:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    1f70:	f003 ff44 	bl	5dfc <set_on_state>
	if (callback) {
    1f74:	b12d      	cbz	r5, 1f82 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    1f76:	4632      	mov	r2, r6
    1f78:	462b      	mov	r3, r5
}
    1f7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    1f7e:	4802      	ldr	r0, [pc, #8]	; (1f88 <clkstarted_handle.constprop.0+0x30>)
    1f80:	4718      	bx	r3
}
    1f82:	bd70      	pop	{r4, r5, r6, pc}
    1f84:	20000e4c 	.word	0x20000e4c
    1f88:	0000665c 	.word	0x0000665c

00001f8c <clock_event_handler>:
	switch (event) {
    1f8c:	b110      	cbz	r0, 1f94 <clock_event_handler+0x8>
    1f8e:	2801      	cmp	r0, #1
    1f90:	d004      	beq.n	1f9c <clock_event_handler+0x10>
    1f92:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    1f94:	4b03      	ldr	r3, [pc, #12]	; (1fa4 <clock_event_handler+0x18>)
    1f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1f98:	075b      	lsls	r3, r3, #29
    1f9a:	d101      	bne.n	1fa0 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1f9c:	f7ff bfdc 	b.w	1f58 <clkstarted_handle.constprop.0>
}
    1fa0:	4770      	bx	lr
    1fa2:	bf00      	nop
    1fa4:	20000e4c 	.word	0x20000e4c

00001fa8 <generic_hfclk_start>:
{
    1fa8:	b508      	push	{r3, lr}
	__asm__ volatile(
    1faa:	f04f 0320 	mov.w	r3, #32
    1fae:	f3ef 8111 	mrs	r1, BASEPRI
    1fb2:	f383 8812 	msr	BASEPRI_MAX, r3
    1fb6:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    1fba:	4a12      	ldr	r2, [pc, #72]	; (2004 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4>)
    1fbc:	6813      	ldr	r3, [r2, #0]
    1fbe:	f043 0002 	orr.w	r0, r3, #2
    1fc2:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    1fc4:	07da      	lsls	r2, r3, #31
    1fc6:	d408      	bmi.n	1fda <generic_hfclk_start+0x32>
	__asm__ volatile(
    1fc8:	f381 8811 	msr	BASEPRI, r1
    1fcc:	f3bf 8f6f 	isb	sy
}
    1fd0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    1fd4:	2001      	movs	r0, #1
    1fd6:	f004 ba73 	b.w	64c0 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    1fda:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1fde:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    1fe2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    1fe6:	07d3      	lsls	r3, r2, #31
    1fe8:	d5ee      	bpl.n	1fc8 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    1fea:	4807      	ldr	r0, [pc, #28]	; (2008 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x8>)
    1fec:	f003 ff06 	bl	5dfc <set_on_state>
    1ff0:	f381 8811 	msr	BASEPRI, r1
    1ff4:	f3bf 8f6f 	isb	sy
}
    1ff8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    1ffc:	2000      	movs	r0, #0
    1ffe:	f7ff bfab 	b.w	1f58 <clkstarted_handle.constprop.0>
    2002:	bf00      	nop
    2004:	20000e9c 	.word	0x20000e9c
    2008:	20000e8c 	.word	0x20000e8c

0000200c <z_nrf_clock_control_lf_on>:
{
    200c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2010:	2201      	movs	r2, #1
    2012:	4607      	mov	r7, r0
    2014:	4934      	ldr	r1, [pc, #208]	; (20e8 <z_nrf_clock_control_lf_on+0xdc>)
    2016:	e8d1 3fef 	ldaex	r3, [r1]
    201a:	e8c1 2fe0 	stlex	r0, r2, [r1]
    201e:	2800      	cmp	r0, #0
    2020:	d1f9      	bne.n	2016 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    2022:	b933      	cbnz	r3, 2032 <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    2024:	4931      	ldr	r1, [pc, #196]	; (20ec <z_nrf_clock_control_lf_on+0xe0>)
		err = onoff_request(mgr, &cli);
    2026:	4832      	ldr	r0, [pc, #200]	; (20f0 <z_nrf_clock_control_lf_on+0xe4>)
    2028:	604b      	str	r3, [r1, #4]
    202a:	60cb      	str	r3, [r1, #12]
    202c:	608a      	str	r2, [r1, #8]
    202e:	f003 fdb0 	bl	5b92 <onoff_request>
	switch (start_mode) {
    2032:	1e7b      	subs	r3, r7, #1
    2034:	2b01      	cmp	r3, #1
    2036:	d82d      	bhi.n	2094 <z_nrf_clock_control_lf_on+0x88>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    2038:	2f01      	cmp	r7, #1
    203a:	d107      	bne.n	204c <z_nrf_clock_control_lf_on+0x40>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    203c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2040:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    2044:	f003 0303 	and.w	r3, r3, #3
    2048:	2b02      	cmp	r3, #2
    204a:	d023      	beq.n	2094 <z_nrf_clock_control_lf_on+0x88>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    204c:	f004 faa3 	bl	6596 <k_is_in_isr>
    2050:	4605      	mov	r5, r0
    2052:	bb08      	cbnz	r0, 2098 <z_nrf_clock_control_lf_on+0x8c>
	return !z_sys_post_kernel;
    2054:	4b27      	ldr	r3, [pc, #156]	; (20f4 <z_nrf_clock_control_lf_on+0xe8>)
    2056:	781b      	ldrb	r3, [r3, #0]
    2058:	b1f3      	cbz	r3, 2098 <z_nrf_clock_control_lf_on+0x8c>
    p_reg->INTENCLR = mask;
    205a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    205e:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
    2060:	4606      	mov	r6, r0
    2062:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2066:	f04f 2450 	mov.w	r4, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    206a:	f04f 0800 	mov.w	r8, #0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    206e:	f8df 9088 	ldr.w	r9, [pc, #136]	; 20f8 <z_nrf_clock_control_lf_on+0xec>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2072:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2076:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    207a:	03d2      	lsls	r2, r2, #15
    207c:	d516      	bpl.n	20ac <z_nrf_clock_control_lf_on+0xa0>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    207e:	f003 0303 	and.w	r3, r3, #3
    2082:	2b02      	cmp	r3, #2
    2084:	d001      	beq.n	208a <z_nrf_clock_control_lf_on+0x7e>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    2086:	2f01      	cmp	r7, #1
    2088:	d110      	bne.n	20ac <z_nrf_clock_control_lf_on+0xa0>
	if (isr_mode) {
    208a:	b33d      	cbz	r5, 20dc <z_nrf_clock_control_lf_on+0xd0>
    208c:	f386 8811 	msr	BASEPRI, r6
    2090:	f3bf 8f6f 	isb	sy
}
    2094:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm__ volatile(
    2098:	f04f 0320 	mov.w	r3, #32
    209c:	f3ef 8611 	mrs	r6, BASEPRI
    20a0:	f383 8812 	msr	BASEPRI_MAX, r3
    20a4:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    20a8:	2501      	movs	r5, #1
    20aa:	e7dc      	b.n	2066 <z_nrf_clock_control_lf_on+0x5a>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    20ac:	4630      	mov	r0, r6
    20ae:	f7ff fc3b 	bl	1928 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    20b2:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    20b6:	b2db      	uxtb	r3, r3
    20b8:	2b01      	cmp	r3, #1
    20ba:	d1da      	bne.n	2072 <z_nrf_clock_control_lf_on+0x66>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    20bc:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    20c0:	2a00      	cmp	r2, #0
    20c2:	d0d6      	beq.n	2072 <z_nrf_clock_control_lf_on+0x66>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    20c4:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    20c8:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    20cc:	2202      	movs	r2, #2
    20ce:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
    20d2:	2220      	movs	r2, #32
    20d4:	f8c9 2180 	str.w	r2, [r9, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    20d8:	60a3      	str	r3, [r4, #8]
}
    20da:	e7ca      	b.n	2072 <z_nrf_clock_control_lf_on+0x66>
    p_reg->INTENSET = mask;
    20dc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    20e0:	2202      	movs	r2, #2
    20e2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    20e6:	e7d5      	b.n	2094 <z_nrf_clock_control_lf_on+0x88>
    20e8:	20000e48 	.word	0x20000e48
    20ec:	20000e38 	.word	0x20000e38
    20f0:	20000e68 	.word	0x20000e68
    20f4:	20000fe9 	.word	0x20000fe9
    20f8:	e000e100 	.word	0xe000e100

000020fc <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
    20fc:	b508      	push	{r3, lr}
    20fe:	4807      	ldr	r0, [pc, #28]	; (211c <uart_console_init+0x20>)
    2100:	f004 fa2a 	bl	6558 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    2104:	b138      	cbz	r0, 2116 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
    2106:	4806      	ldr	r0, [pc, #24]	; (2120 <uart_console_init+0x24>)
    2108:	f7ff fea0 	bl	1e4c <__stdout_hook_install>
	__printk_hook_install(console_out);
    210c:	4804      	ldr	r0, [pc, #16]	; (2120 <uart_console_init+0x24>)
    210e:	f7ff f81f 	bl	1150 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    2112:	2000      	movs	r0, #0
}
    2114:	bd08      	pop	{r3, pc}
		return -ENODEV;
    2116:	f06f 0012 	mvn.w	r0, #18
    211a:	e7fb      	b.n	2114 <uart_console_init+0x18>
    211c:	000066a4 	.word	0x000066a4
    2120:	00002125 	.word	0x00002125

00002124 <console_out>:
	if ('\n' == c) {
    2124:	280a      	cmp	r0, #10
{
    2126:	b538      	push	{r3, r4, r5, lr}
    2128:	4604      	mov	r4, r0
    212a:	4d07      	ldr	r5, [pc, #28]	; (2148 <console_out+0x24>)
	if ('\n' == c) {
    212c:	d104      	bne.n	2138 <console_out+0x14>
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    212e:	68ab      	ldr	r3, [r5, #8]
    2130:	210d      	movs	r1, #13
    2132:	4628      	mov	r0, r5
    2134:	685b      	ldr	r3, [r3, #4]
    2136:	4798      	blx	r3
    2138:	68ab      	ldr	r3, [r5, #8]
    213a:	4803      	ldr	r0, [pc, #12]	; (2148 <console_out+0x24>)
    213c:	685b      	ldr	r3, [r3, #4]
    213e:	b2e1      	uxtb	r1, r4
    2140:	4798      	blx	r3
}
    2142:	4620      	mov	r0, r4
    2144:	bd38      	pop	{r3, r4, r5, pc}
    2146:	bf00      	nop
    2148:	000066a4 	.word	0x000066a4

0000214c <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
    214c:	4b02      	ldr	r3, [pc, #8]	; (2158 <flash_nrf_pages_layout+0xc>)
    214e:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    2150:	2301      	movs	r3, #1
    2152:	6013      	str	r3, [r2, #0]
}
    2154:	4770      	bx	lr
    2156:	bf00      	nop
    2158:	20000ea0 	.word	0x20000ea0

0000215c <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
    215c:	4800      	ldr	r0, [pc, #0]	; (2160 <flash_nrf_get_parameters+0x4>)
    215e:	4770      	bx	lr
    2160:	00006ac8 	.word	0x00006ac8

00002164 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
    2164:	b510      	push	{r4, lr}
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
    2166:	f004 f9f3 	bl	6550 <nrfx_nvmc_flash_page_count_get>
    216a:	4c03      	ldr	r4, [pc, #12]	; (2178 <nrf_flash_init+0x14>)
    216c:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
    216e:	f004 f9ec 	bl	654a <nrfx_nvmc_flash_page_size_get>
    2172:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
    2174:	2000      	movs	r0, #0
    2176:	bd10      	pop	{r4, pc}
    2178:	20000ea0 	.word	0x20000ea0

0000217c <flash_nrf_write>:
{
    217c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    217e:	460e      	mov	r6, r1
	if (is_regular_addr_valid(addr, len)) {
    2180:	4619      	mov	r1, r3
    2182:	4630      	mov	r0, r6
{
    2184:	4617      	mov	r7, r2
    2186:	461d      	mov	r5, r3
	if (is_regular_addr_valid(addr, len)) {
    2188:	f003 febf 	bl	5f0a <is_regular_addr_valid>
    218c:	b1b8      	cbz	r0, 21be <flash_nrf_write+0x42>
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
    218e:	ea46 0405 	orr.w	r4, r6, r5
    2192:	f014 0403 	ands.w	r4, r4, #3
    2196:	d112      	bne.n	21be <flash_nrf_write+0x42>
	if (!len) {
    2198:	b14d      	cbz	r5, 21ae <flash_nrf_write+0x32>
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
    219a:	192b      	adds	r3, r5, r4
    219c:	2b03      	cmp	r3, #3
    219e:	eba6 0004 	sub.w	r0, r6, r4
    21a2:	d806      	bhi.n	21b2 <flash_nrf_write+0x36>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    21a4:	4a07      	ldr	r2, [pc, #28]	; (21c4 <flash_nrf_write+0x48>)
    21a6:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
    21aa:	07db      	lsls	r3, r3, #31
    21ac:	d5fb      	bpl.n	21a6 <flash_nrf_write+0x2a>
	return ret;
    21ae:	2000      	movs	r0, #0
}
    21b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_word_write(w_ctx->flash_addr,
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
    21b2:	1b3b      	subs	r3, r7, r4
		nrfx_nvmc_word_write(w_ctx->flash_addr,
    21b4:	6819      	ldr	r1, [r3, #0]
    21b6:	f001 faf5 	bl	37a4 <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
    21ba:	3c04      	subs	r4, #4
}
    21bc:	e7ed      	b.n	219a <flash_nrf_write+0x1e>
		return -EINVAL;
    21be:	f06f 0015 	mvn.w	r0, #21
    21c2:	e7f5      	b.n	21b0 <flash_nrf_write+0x34>
    21c4:	50039000 	.word	0x50039000

000021c8 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    21c8:	b530      	push	{r4, r5, lr}
	return port->config;
    21ca:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    21cc:	f001 041f 	and.w	r4, r1, #31
    21d0:	7b05      	ldrb	r5, [r0, #12]
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    21d2:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    21d6:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    21d8:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    21dc:	d105      	bne.n	21ea <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    21de:	4620      	mov	r0, r4
    21e0:	f001 f9b8 	bl	3554 <nrfx_gpiote_trigger_disable>

		return 0;
    21e4:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    21e6:	b005      	add	sp, #20
    21e8:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    21ea:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    21ec:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    21f0:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    21f4:	d114      	bne.n	2220 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    21f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    21fa:	bf0c      	ite	eq
    21fc:	2304      	moveq	r3, #4
    21fe:	2305      	movne	r3, #5
    2200:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2204:	2300      	movs	r3, #0
    2206:	4620      	mov	r0, r4
    2208:	4619      	mov	r1, r3
    220a:	aa02      	add	r2, sp, #8
    220c:	f000 ffd8 	bl	31c0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2210:	4b1c      	ldr	r3, [pc, #112]	; (2284 <gpio_nrfx_pin_interrupt_configure+0xbc>)
    2212:	4298      	cmp	r0, r3
    2214:	d133      	bne.n	227e <gpio_nrfx_pin_interrupt_configure+0xb6>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    2216:	2101      	movs	r1, #1
    2218:	4620      	mov	r0, r4
    221a:	f001 f957 	bl	34cc <nrfx_gpiote_trigger_enable>
	return 0;
    221e:	e7e1      	b.n	21e4 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    2220:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    2224:	d020      	beq.n	2268 <gpio_nrfx_pin_interrupt_configure+0xa0>
    2226:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    222a:	bf14      	ite	ne
    222c:	2301      	movne	r3, #1
    222e:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    2230:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    2234:	6883      	ldr	r3, [r0, #8]
    2236:	40cb      	lsrs	r3, r1
    2238:	07d9      	lsls	r1, r3, #31
    223a:	d4e3      	bmi.n	2204 <gpio_nrfx_pin_interrupt_configure+0x3c>
    223c:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    2240:	d1e0      	bne.n	2204 <gpio_nrfx_pin_interrupt_configure+0x3c>

NRF_STATIC_INLINE nrf_gpio_pin_dir_t nrf_gpio_pin_dir_get(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    2242:	4a11      	ldr	r2, [pc, #68]	; (2288 <gpio_nrfx_pin_interrupt_configure+0xc0>)
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    2244:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    2248:	3380      	adds	r3, #128	; 0x80
    224a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    224e:	07db      	lsls	r3, r3, #31
    2250:	d4d8      	bmi.n	2204 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2252:	f10d 0507 	add.w	r5, sp, #7
    2256:	4629      	mov	r1, r5
    2258:	4620      	mov	r0, r4
    225a:	f001 f8e3 	bl	3424 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    225e:	4b0b      	ldr	r3, [pc, #44]	; (228c <gpio_nrfx_pin_interrupt_configure+0xc4>)
    2260:	4298      	cmp	r0, r3
    2262:	d003      	beq.n	226c <gpio_nrfx_pin_interrupt_configure+0xa4>
		trigger_config.p_in_channel = &ch;
    2264:	9503      	str	r5, [sp, #12]
    2266:	e7cd      	b.n	2204 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    2268:	2303      	movs	r3, #3
    226a:	e7e1      	b.n	2230 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    226c:	4628      	mov	r0, r5
    226e:	f001 f927 	bl	34c0 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    2272:	4b04      	ldr	r3, [pc, #16]	; (2284 <gpio_nrfx_pin_interrupt_configure+0xbc>)
    2274:	4298      	cmp	r0, r3
    2276:	d0f5      	beq.n	2264 <gpio_nrfx_pin_interrupt_configure+0x9c>
				return -ENOMEM;
    2278:	f06f 000b 	mvn.w	r0, #11
    227c:	e7b3      	b.n	21e6 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    227e:	f06f 0015 	mvn.w	r0, #21
    2282:	e7b0      	b.n	21e6 <gpio_nrfx_pin_interrupt_configure+0x1e>
    2284:	0bad0000 	.word	0x0bad0000
    2288:	50842500 	.word	0x50842500
    228c:	0bad0004 	.word	0x0bad0004

00002290 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    2290:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    2292:	f001 f905 	bl	34a0 <nrfx_gpiote_is_init>
    2296:	4604      	mov	r4, r0
    2298:	b968      	cbnz	r0, 22b6 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    229a:	f001 f8d9 	bl	3450 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    229e:	4b08      	ldr	r3, [pc, #32]	; (22c0 <gpio_nrfx_init+0x30>)
    22a0:	4298      	cmp	r0, r3
    22a2:	d10a      	bne.n	22ba <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    22a4:	4621      	mov	r1, r4
    22a6:	4807      	ldr	r0, [pc, #28]	; (22c4 <gpio_nrfx_init+0x34>)
    22a8:	f001 f8b6 	bl	3418 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    22ac:	4622      	mov	r2, r4
    22ae:	2105      	movs	r1, #5
    22b0:	200d      	movs	r0, #13
    22b2:	f7ff fb75 	bl	19a0 <z_arm_irq_priority_set>
		return 0;
    22b6:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    22b8:	bd10      	pop	{r4, pc}
		return -EIO;
    22ba:	f06f 0004 	mvn.w	r0, #4
    22be:	e7fb      	b.n	22b8 <gpio_nrfx_init+0x28>
    22c0:	0bad0000 	.word	0x0bad0000
    22c4:	000022c9 	.word	0x000022c9

000022c8 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    22c8:	0943      	lsrs	r3, r0, #5
{
    22ca:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    22cc:	d107      	bne.n	22de <nrfx_gpio_handler+0x16>
	return list->head;
    22ce:	4b0b      	ldr	r3, [pc, #44]	; (22fc <nrfx_gpio_handler+0x34>)
    22d0:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    22d2:	b121      	cbz	r1, 22de <nrfx_gpio_handler+0x16>
	gpio_fire_callbacks(list, port, BIT(pin));
    22d4:	2501      	movs	r5, #1
	return node->next;
    22d6:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    22d8:	4e09      	ldr	r6, [pc, #36]	; (2300 <nrfx_gpio_handler+0x38>)
    22da:	4085      	lsls	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    22dc:	b901      	cbnz	r1, 22e0 <nrfx_gpio_handler+0x18>
}
    22de:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
    22e0:	688a      	ldr	r2, [r1, #8]
    22e2:	402a      	ands	r2, r5
    22e4:	d002      	beq.n	22ec <nrfx_gpio_handler+0x24>
			cb->handler(port, cb, cb->pin_mask & pins);
    22e6:	4630      	mov	r0, r6
    22e8:	684b      	ldr	r3, [r1, #4]
    22ea:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    22ec:	b11c      	cbz	r4, 22f6 <nrfx_gpio_handler+0x2e>
    22ee:	6823      	ldr	r3, [r4, #0]
    22f0:	4621      	mov	r1, r4
    22f2:	461c      	mov	r4, r3
    22f4:	e7f2      	b.n	22dc <nrfx_gpio_handler+0x14>
    22f6:	4623      	mov	r3, r4
    22f8:	e7fa      	b.n	22f0 <nrfx_gpio_handler+0x28>
    22fa:	bf00      	nop
    22fc:	20000ea8 	.word	0x20000ea8
    2300:	00006674 	.word	0x00006674

00002304 <gpio_nrfx_pin_configure>:
{
    2304:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    2308:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    230a:	f001 051f 	and.w	r5, r1, #31
    230e:	7b3b      	ldrb	r3, [r7, #12]
{
    2310:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2312:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    2316:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2318:	4628      	mov	r0, r5
    231a:	f10d 0103 	add.w	r1, sp, #3
    231e:	f001 f881 	bl	3424 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    2322:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2326:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    2328:	d10b      	bne.n	2342 <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    232a:	4628      	mov	r0, r5
    232c:	f001 f93a 	bl	35a4 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    2330:	4b3c      	ldr	r3, [pc, #240]	; (2424 <gpio_nrfx_pin_configure+0x120>)
    2332:	4598      	cmp	r8, r3
    2334:	d103      	bne.n	233e <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    2336:	f89d 0003 	ldrb.w	r0, [sp, #3]
    233a:	f001 f8bb 	bl	34b4 <nrfx_gpiote_channel_free>
		return 0;
    233e:	2000      	movs	r0, #0
    2340:	e00c      	b.n	235c <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    2342:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2344:	4628      	mov	r0, r5
    2346:	4619      	mov	r1, r3
    2348:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
    234a:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    234e:	f000 ff37 	bl	31c0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2352:	4b34      	ldr	r3, [pc, #208]	; (2424 <gpio_nrfx_pin_configure+0x120>)
    2354:	4298      	cmp	r0, r3
    2356:	d004      	beq.n	2362 <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    2358:	f06f 0015 	mvn.w	r0, #21
}
    235c:	b004      	add	sp, #16
    235e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    2362:	4580      	cmp	r8, r0
    2364:	d103      	bne.n	236e <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    2366:	f89d 0003 	ldrb.w	r0, [sp, #3]
    236a:	f001 f8a3 	bl	34b4 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    236e:	03a3      	lsls	r3, r4, #14
    2370:	d549      	bpl.n	2406 <gpio_nrfx_pin_configure+0x102>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    2372:	f240 3306 	movw	r3, #774	; 0x306
    2376:	4023      	ands	r3, r4
    2378:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    237c:	d019      	beq.n	23b2 <gpio_nrfx_pin_configure+0xae>
    237e:	d80c      	bhi.n	239a <gpio_nrfx_pin_configure+0x96>
    2380:	2b06      	cmp	r3, #6
    2382:	d017      	beq.n	23b4 <gpio_nrfx_pin_configure+0xb0>
    2384:	d804      	bhi.n	2390 <gpio_nrfx_pin_configure+0x8c>
    2386:	b1ab      	cbz	r3, 23b4 <gpio_nrfx_pin_configure+0xb0>
    2388:	2b02      	cmp	r3, #2
    238a:	d1e5      	bne.n	2358 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    238c:	2304      	movs	r3, #4
    238e:	e011      	b.n	23b4 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    2390:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    2394:	d1e0      	bne.n	2358 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    2396:	2301      	movs	r3, #1
    2398:	e00c      	b.n	23b4 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    239a:	f240 2202 	movw	r2, #514	; 0x202
    239e:	4293      	cmp	r3, r2
    23a0:	d026      	beq.n	23f0 <gpio_nrfx_pin_configure+0xec>
    23a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    23a6:	d025      	beq.n	23f4 <gpio_nrfx_pin_configure+0xf0>
    23a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    23ac:	d1d4      	bne.n	2358 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    23ae:	2302      	movs	r3, #2
    23b0:	e000      	b.n	23b4 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    23b2:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    23b4:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    23b8:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    23bc:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    23c0:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    23c2:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
    23c6:	bf4c      	ite	mi
    23c8:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
    23ca:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    23ce:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    23d0:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    23d4:	d510      	bpl.n	23f8 <gpio_nrfx_pin_configure+0xf4>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    23d6:	2301      	movs	r3, #1
    23d8:	687a      	ldr	r2, [r7, #4]
    23da:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    23dc:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    23de:	2200      	movs	r2, #0
    23e0:	4628      	mov	r0, r5
    23e2:	a901      	add	r1, sp, #4
    23e4:	f000 ff98 	bl	3318 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    23e8:	4b0e      	ldr	r3, [pc, #56]	; (2424 <gpio_nrfx_pin_configure+0x120>)
    23ea:	4298      	cmp	r0, r3
    23ec:	d0a7      	beq.n	233e <gpio_nrfx_pin_configure+0x3a>
    23ee:	e7b3      	b.n	2358 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    23f0:	2305      	movs	r3, #5
    23f2:	e7df      	b.n	23b4 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    23f4:	2303      	movs	r3, #3
    23f6:	e7dd      	b.n	23b4 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    23f8:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    23fa:	bf41      	itttt	mi
    23fc:	2301      	movmi	r3, #1
    23fe:	687a      	ldrmi	r2, [r7, #4]
    2400:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    2402:	60d3      	strmi	r3, [r2, #12]
}
    2404:	e7eb      	b.n	23de <gpio_nrfx_pin_configure+0xda>
	if (flags & GPIO_PULL_UP) {
    2406:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2408:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    240c:	bf4c      	ite	mi
    240e:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
    2410:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2414:	461a      	mov	r2, r3
    2416:	4628      	mov	r0, r5
    2418:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
    241a:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    241e:	f000 fecf 	bl	31c0 <nrfx_gpiote_input_configure>
    2422:	e7e1      	b.n	23e8 <gpio_nrfx_pin_configure+0xe4>
    2424:	0bad0000 	.word	0x0bad0000

00002428 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    2428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    242c:	2701      	movs	r7, #1
    p_reg->OUTSET = set_mask;
    242e:	4e3f      	ldr	r6, [pc, #252]	; (252c <pinctrl_configure_pins+0x104>)
    2430:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    2434:	4281      	cmp	r1, r0
    2436:	d102      	bne.n	243e <pinctrl_configure_pins+0x16>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    2438:	2000      	movs	r0, #0
}
    243a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    243e:	6805      	ldr	r5, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
    2440:	f005 037f 	and.w	r3, r5, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    2444:	f3c5 2443 	ubfx	r4, r5, #9, #4
			pin = 0xFFFFFFFFU;
    2448:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
    244a:	ea4f 4515 	mov.w	r5, r5, lsr #16
			pin = 0xFFFFFFFFU;
    244e:	bf08      	it	eq
    2450:	f04f 33ff 	moveq.w	r3, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
    2454:	2d19      	cmp	r5, #25
    2456:	d866      	bhi.n	2526 <pinctrl_configure_pins+0xfe>
    2458:	e8df f005 	tbb	[pc, r5]
    245c:	1e1b160d 	.word	0x1e1b160d
    2460:	651e2d21 	.word	0x651e2d21
    2464:	31656565 	.word	0x31656565
    2468:	65656551 	.word	0x65656551
    246c:	65656565 	.word	0x65656565
    2470:	5c546565 	.word	0x5c546565
    2474:	625f      	.short	0x625f
			NRF_PSEL_UART(reg, TXD) = pin;
    2476:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
    247a:	f003 051f 	and.w	r5, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    247e:	fa07 f505 	lsl.w	r5, r7, r5
    p_reg->OUTSET = set_mask;
    2482:	60b5      	str	r5, [r6, #8]
}
    2484:	2501      	movs	r5, #1
    2486:	e002      	b.n	248e <pinctrl_configure_pins+0x66>
			NRF_PSEL_UART(reg, RXD) = pin;
    2488:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    248c:	2500      	movs	r5, #0
    248e:	46ac      	mov	ip, r5
    2490:	e01c      	b.n	24cc <pinctrl_configure_pins+0xa4>
			NRF_PSEL_UART(reg, RTS) = pin;
    2492:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
    2496:	e7f0      	b.n	247a <pinctrl_configure_pins+0x52>
			NRF_PSEL_UART(reg, CTS) = pin;
    2498:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
    249c:	e7f6      	b.n	248c <pinctrl_configure_pins+0x64>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    249e:	2500      	movs	r5, #0
			NRF_PSEL_SPIM(reg, SCK) = pin;
    24a0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
    24a4:	f003 0c1f 	and.w	ip, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    24a8:	fa07 fc0c 	lsl.w	ip, r7, ip
    p_reg->OUTCLR = clr_mask;
    24ac:	f8c6 c00c 	str.w	ip, [r6, #12]
}
    24b0:	f04f 0c01 	mov.w	ip, #1
    24b4:	e00a      	b.n	24cc <pinctrl_configure_pins+0xa4>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    24b6:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
    24ba:	2501      	movs	r5, #1
    24bc:	e7f2      	b.n	24a4 <pinctrl_configure_pins+0x7c>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    24be:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    24c2:	2c00      	cmp	r4, #0
    24c4:	d1e2      	bne.n	248c <pinctrl_configure_pins+0x64>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    24c6:	2500      	movs	r5, #0
				drive = NRF_DRIVE_S0D1;
    24c8:	2406      	movs	r4, #6
			dir = NRF_GPIO_PIN_DIR_INPUT;
    24ca:	46ac      	mov	ip, r5
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    24cc:	f850 eb04 	ldr.w	lr, [r0], #4
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    24d0:	0224      	lsls	r4, r4, #8
    24d2:	f40e 5800 	and.w	r8, lr, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    24d6:	f1b8 0f00 	cmp.w	r8, #0
    24da:	bf1c      	itt	ne
    24dc:	f04f 0c00 	movne.w	ip, #0
    24e0:	2501      	movne	r5, #1
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    24e2:	f3ce 1ec1 	ubfx	lr, lr, #7, #2
    24e6:	ea44 048e 	orr.w	r4, r4, lr, lsl #2
    *p_pin = pin_number & 0x1F;
    24ea:	f003 031f 	and.w	r3, r3, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    24ee:	ea44 040c 	orr.w	r4, r4, ip
    24f2:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    24f6:	3380      	adds	r3, #128	; 0x80
    24f8:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    24fc:	e79a      	b.n	2434 <pinctrl_configure_pins+0xc>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    24fe:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    2502:	e7de      	b.n	24c2 <pinctrl_configure_pins+0x9a>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
    2504:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
    2508:	6805      	ldr	r5, [r0, #0]
    250a:	f3c5 3580 	ubfx	r5, r5, #14, #1
    if (value == 0)
    250e:	2d00      	cmp	r5, #0
    2510:	d0d3      	beq.n	24ba <pinctrl_configure_pins+0x92>
    2512:	e7b2      	b.n	247a <pinctrl_configure_pins+0x52>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
    2514:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    2518:	e7f6      	b.n	2508 <pinctrl_configure_pins+0xe0>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
    251a:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    251e:	e7f3      	b.n	2508 <pinctrl_configure_pins+0xe0>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
    2520:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
    2524:	e7f0      	b.n	2508 <pinctrl_configure_pins+0xe0>
		switch (NRF_GET_FUN(pins[i])) {
    2526:	f06f 0085 	mvn.w	r0, #133	; 0x85
    252a:	e786      	b.n	243a <pinctrl_configure_pins+0x12>
    252c:	50842500 	.word	0x50842500

00002530 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    2530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2532:	4604      	mov	r4, r0
    2534:	460d      	mov	r5, r1
	struct uarte_nrfx_data *data = dev->data;
    2536:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2538:	f004 f82d 	bl	6596 <k_is_in_isr>
    253c:	b990      	cbnz	r0, 2564 <uarte_nrfx_poll_out+0x34>
	return !z_sys_post_kernel;
    253e:	4b2c      	ldr	r3, [pc, #176]	; (25f0 <uarte_nrfx_poll_out+0xc0>)
    2540:	781b      	ldrb	r3, [r3, #0]
    2542:	b17b      	cbz	r3, 2564 <uarte_nrfx_poll_out+0x34>
{
    2544:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    2546:	6860      	ldr	r0, [r4, #4]
    2548:	f003 fe10 	bl	616c <is_tx_ready.isra.0>
    254c:	b9e0      	cbnz	r0, 2588 <uarte_nrfx_poll_out+0x58>
    254e:	2001      	movs	r0, #1
    2550:	f003 ff4c 	bl	63ec <nrfx_busy_wait>
    2554:	3e01      	subs	r6, #1
    2556:	d1f6      	bne.n	2546 <uarte_nrfx_poll_out+0x16>
    2558:	e7f4      	b.n	2544 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
    255a:	f386 8811 	msr	BASEPRI, r6
    255e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    2562:	e7ef      	b.n	2544 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
    2564:	f04f 0320 	mov.w	r3, #32
    2568:	f3ef 8611 	mrs	r6, BASEPRI
    256c:	f383 8812 	msr	BASEPRI_MAX, r3
    2570:	f3bf 8f6f 	isb	sy
	unsigned int key;

	if (isr_mode) {
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    2574:	6860      	ldr	r0, [r4, #4]
    2576:	4631      	mov	r1, r6
    2578:	f003 fdf8 	bl	616c <is_tx_ready.isra.0>
    257c:	b990      	cbnz	r0, 25a4 <uarte_nrfx_poll_out+0x74>
	__asm__ volatile(
    257e:	f386 8811 	msr	BASEPRI, r6
    2582:	f3bf 8f6f 	isb	sy
}
    2586:	e7ed      	b.n	2564 <uarte_nrfx_poll_out+0x34>
	__asm__ volatile(
    2588:	f04f 0320 	mov.w	r3, #32
    258c:	f3ef 8611 	mrs	r6, BASEPRI
    2590:	f383 8812 	msr	BASEPRI_MAX, r3
    2594:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    2598:	6860      	ldr	r0, [r4, #4]
    259a:	4631      	mov	r1, r6
    259c:	f003 fde6 	bl	616c <is_tx_ready.isra.0>
    25a0:	2800      	cmp	r0, #0
    25a2:	d0da      	beq.n	255a <uarte_nrfx_poll_out+0x2a>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	*data->char_out = c;
    25a4:	693b      	ldr	r3, [r7, #16]
    25a6:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
    25a8:	6862      	ldr	r2, [r4, #4]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    25aa:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
    25ac:	6813      	ldr	r3, [r2, #0]
    25ae:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    25b2:	2001      	movs	r0, #1
    25b4:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    25b8:	2000      	movs	r0, #0
    25ba:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    25be:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
    25c2:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    25c6:	6852      	ldr	r2, [r2, #4]
    25c8:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
    25cc:	06d2      	lsls	r2, r2, #27
    25ce:	d508      	bpl.n	25e2 <uarte_nrfx_poll_out+0xb2>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    25d0:	2008      	movs	r0, #8
	return config->uarte_regs;
    25d2:	6862      	ldr	r2, [r4, #4]
    25d4:	6812      	ldr	r2, [r2, #0]
    25d6:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
    25da:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    25de:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    25e2:	2201      	movs	r2, #1
    25e4:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    25e6:	f381 8811 	msr	BASEPRI, r1
    25ea:	f3bf 8f6f 	isb	sy
	tx_start(dev, data->char_out, 1);

	irq_unlock(key);
}
    25ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    25f0:	20000fe9 	.word	0x20000fe9

000025f4 <uarte_nrfx_configure>:
{
    25f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (cfg->stop_bits) {
    25f6:	794b      	ldrb	r3, [r1, #5]
    25f8:	2b01      	cmp	r3, #1
    25fa:	d026      	beq.n	264a <uarte_nrfx_configure+0x56>
    25fc:	2b03      	cmp	r3, #3
    25fe:	d121      	bne.n	2644 <uarte_nrfx_configure+0x50>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    2600:	2510      	movs	r5, #16
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    2602:	798b      	ldrb	r3, [r1, #6]
    2604:	2b03      	cmp	r3, #3
    2606:	d11d      	bne.n	2644 <uarte_nrfx_configure+0x50>
	switch (cfg->flow_ctrl) {
    2608:	79ce      	ldrb	r6, [r1, #7]
    260a:	b10e      	cbz	r6, 2610 <uarte_nrfx_configure+0x1c>
    260c:	2e01      	cmp	r6, #1
    260e:	d119      	bne.n	2644 <uarte_nrfx_configure+0x50>
	switch (cfg->parity) {
    2610:	790a      	ldrb	r2, [r1, #4]
    2612:	b112      	cbz	r2, 261a <uarte_nrfx_configure+0x26>
    2614:	2a02      	cmp	r2, #2
    2616:	d115      	bne.n	2644 <uarte_nrfx_configure+0x50>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    2618:	220e      	movs	r2, #14
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    261a:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    261c:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
    261e:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    2622:	6827      	ldr	r7, [r4, #0]
	switch (baudrate) {
    2624:	d067      	beq.n	26f6 <uarte_nrfx_configure+0x102>
    2626:	d82d      	bhi.n	2684 <uarte_nrfx_configure+0x90>
    2628:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    262c:	d066      	beq.n	26fc <uarte_nrfx_configure+0x108>
    262e:	d816      	bhi.n	265e <uarte_nrfx_configure+0x6a>
    2630:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    2634:	d064      	beq.n	2700 <uarte_nrfx_configure+0x10c>
    2636:	d80a      	bhi.n	264e <uarte_nrfx_configure+0x5a>
    2638:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    263c:	d063      	beq.n	2706 <uarte_nrfx_configure+0x112>
    263e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    2642:	d063      	beq.n	270c <uarte_nrfx_configure+0x118>
		return -ENOTSUP;
    2644:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2648:	e054      	b.n	26f4 <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
    264a:	2500      	movs	r5, #0
    264c:	e7d9      	b.n	2602 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    264e:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    2652:	d05e      	beq.n	2712 <uarte_nrfx_configure+0x11e>
    2654:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    2658:	d1f4      	bne.n	2644 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    265a:	4b38      	ldr	r3, [pc, #224]	; (273c <uarte_nrfx_configure+0x148>)
    265c:	e03c      	b.n	26d8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    265e:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    2662:	d059      	beq.n	2718 <uarte_nrfx_configure+0x124>
    2664:	d807      	bhi.n	2676 <uarte_nrfx_configure+0x82>
    2666:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    266a:	d057      	beq.n	271c <uarte_nrfx_configure+0x128>
    266c:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    2670:	d1e8      	bne.n	2644 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    2672:	4b33      	ldr	r3, [pc, #204]	; (2740 <uarte_nrfx_configure+0x14c>)
    2674:	e030      	b.n	26d8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2676:	f647 2412 	movw	r4, #31250	; 0x7a12
    267a:	42a3      	cmp	r3, r4
    267c:	d1e2      	bne.n	2644 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    267e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    2682:	e029      	b.n	26d8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2684:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    2688:	d04a      	beq.n	2720 <uarte_nrfx_configure+0x12c>
    268a:	d813      	bhi.n	26b4 <uarte_nrfx_configure+0xc0>
    268c:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    2690:	d049      	beq.n	2726 <uarte_nrfx_configure+0x132>
    2692:	d809      	bhi.n	26a8 <uarte_nrfx_configure+0xb4>
    2694:	f64d 24c0 	movw	r4, #56000	; 0xdac0
    2698:	42a3      	cmp	r3, r4
    269a:	d046      	beq.n	272a <uarte_nrfx_configure+0x136>
    269c:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    26a0:	d1d0      	bne.n	2644 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    26a2:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    26a6:	e017      	b.n	26d8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    26a8:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    26ac:	d1ca      	bne.n	2644 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    26ae:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    26b2:	e011      	b.n	26d8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    26b4:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    26b8:	d03a      	beq.n	2730 <uarte_nrfx_configure+0x13c>
    26ba:	d808      	bhi.n	26ce <uarte_nrfx_configure+0xda>
    26bc:	4c21      	ldr	r4, [pc, #132]	; (2744 <uarte_nrfx_configure+0x150>)
    26be:	42a3      	cmp	r3, r4
    26c0:	d039      	beq.n	2736 <uarte_nrfx_configure+0x142>
    26c2:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    26c6:	d1bd      	bne.n	2644 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    26c8:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    26cc:	e004      	b.n	26d8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    26ce:	4c1e      	ldr	r4, [pc, #120]	; (2748 <uarte_nrfx_configure+0x154>)
    26d0:	42a3      	cmp	r3, r4
    26d2:	d1b7      	bne.n	2644 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    26d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    26d8:	6904      	ldr	r4, [r0, #16]
    p_reg->BAUDRATE = baudrate;
    26da:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
	return config->uarte_regs;
    26de:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->hwfc;
    26e0:	4335      	orrs	r5, r6
    26e2:	681b      	ldr	r3, [r3, #0]
    26e4:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    26e6:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
	data->uart_config = *cfg;
    26ea:	1d23      	adds	r3, r4, #4
    26ec:	c903      	ldmia	r1, {r0, r1}
    26ee:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
    26f2:	2000      	movs	r0, #0
}
    26f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    26f6:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    26fa:	e7ed      	b.n	26d8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    26fc:	4b13      	ldr	r3, [pc, #76]	; (274c <uarte_nrfx_configure+0x158>)
    26fe:	e7eb      	b.n	26d8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    2700:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    2704:	e7e8      	b.n	26d8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    2706:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    270a:	e7e5      	b.n	26d8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    270c:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    2710:	e7e2      	b.n	26d8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    2712:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    2716:	e7df      	b.n	26d8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    2718:	4b0d      	ldr	r3, [pc, #52]	; (2750 <uarte_nrfx_configure+0x15c>)
    271a:	e7dd      	b.n	26d8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    271c:	4b0d      	ldr	r3, [pc, #52]	; (2754 <uarte_nrfx_configure+0x160>)
    271e:	e7db      	b.n	26d8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    2720:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    2724:	e7d8      	b.n	26d8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    2726:	4b0c      	ldr	r3, [pc, #48]	; (2758 <uarte_nrfx_configure+0x164>)
    2728:	e7d6      	b.n	26d8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    272a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    272e:	e7d3      	b.n	26d8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    2730:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    2734:	e7d0      	b.n	26d8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    2736:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    273a:	e7cd      	b.n	26d8 <uarte_nrfx_configure+0xe4>
    273c:	0013b000 	.word	0x0013b000
    2740:	004ea000 	.word	0x004ea000
    2744:	0003d090 	.word	0x0003d090
    2748:	000f4240 	.word	0x000f4240
    274c:	00275000 	.word	0x00275000
    2750:	0075c000 	.word	0x0075c000
    2754:	003af000 	.word	0x003af000
    2758:	013a9000 	.word	0x013a9000

0000275c <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    275c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    2760:	2100      	movs	r1, #0
	const struct uarte_nrfx_config *config = dev->config;
    2762:	6847      	ldr	r7, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    2764:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
    2766:	683c      	ldr	r4, [r7, #0]
static int uarte_instance_init(const struct device *dev,
    2768:	4680      	mov	r8, r0
    276a:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
    276e:	6030      	str	r0, [r6, #0]

	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    2770:	f8d7 900c 	ldr.w	r9, [r7, #12]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    2774:	aa01      	add	r2, sp, #4
    2776:	4648      	mov	r0, r9
    2778:	f003 fcc2 	bl	6100 <pinctrl_lookup_state>
	if (ret < 0) {
    277c:	1e05      	subs	r5, r0, #0
    277e:	db4d      	blt.n	281c <CONFIG_MAIN_STACK_SIZE+0x1c>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    2780:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    2782:	f8d9 2000 	ldr.w	r2, [r9]
    2786:	7919      	ldrb	r1, [r3, #4]
    2788:	6818      	ldr	r0, [r3, #0]
    278a:	f7ff fe4d 	bl	2428 <pinctrl_configure_pins>
	if (err < 0) {
    278e:	1e05      	subs	r5, r0, #0
    2790:	db44      	blt.n	281c <CONFIG_MAIN_STACK_SIZE+0x1c>
		return err;
	}

	err = uarte_nrfx_configure(dev, &data->uart_config);
    2792:	4640      	mov	r0, r8
    2794:	1d31      	adds	r1, r6, #4
    2796:	f7ff ff2d 	bl	25f4 <uarte_nrfx_configure>
	if (err) {
    279a:	4605      	mov	r5, r0
    279c:	2800      	cmp	r0, #0
    279e:	d13d      	bne.n	281c <CONFIG_MAIN_STACK_SIZE+0x1c>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    27a0:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    27a2:	0799      	lsls	r1, r3, #30
    27a4:	d513      	bpl.n	27ce <uarte_instance_init.constprop.0+0x72>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    27a6:	f106 0018 	add.w	r0, r6, #24
    27aa:	f000 fc81 	bl	30b0 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    27ae:	4b1f      	ldr	r3, [pc, #124]	; (282c <CONFIG_MAIN_STACK_SIZE+0x2c>)
    27b0:	4298      	cmp	r0, r3
    27b2:	d137      	bne.n	2824 <CONFIG_MAIN_STACK_SIZE+0x24>
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    27b4:	7e33      	ldrb	r3, [r6, #24]
    27b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    27ba:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    27be:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    27c2:	2301      	movs	r3, #1
    27c4:	7e32      	ldrb	r2, [r6, #24]
    27c6:	4093      	lsls	r3, r2
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    27c8:	4a19      	ldr	r2, [pc, #100]	; (2830 <CONFIG_MAIN_STACK_SIZE+0x30>)
    27ca:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    27ce:	2308      	movs	r3, #8
    27d0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    27d4:	7a3b      	ldrb	r3, [r7, #8]
    27d6:	b953      	cbnz	r3, 27ee <uarte_instance_init.constprop.0+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    27d8:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    27dc:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    27e0:	6973      	ldr	r3, [r6, #20]
    27e2:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    27e6:	2301      	movs	r3, #1
    27e8:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    27ec:	6023      	str	r3, [r4, #0]
			nrf_uarte_rx_buffer_set(uarte, data->rx_data, 1);
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    27ee:	687b      	ldr	r3, [r7, #4]
    27f0:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    27f2:	bf5c      	itt	pl
    27f4:	f44f 7380 	movpl.w	r3, #256	; 0x100
    27f8:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    27fc:	687b      	ldr	r3, [r7, #4]
    27fe:	06db      	lsls	r3, r3, #27
    2800:	bf44      	itt	mi
    2802:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    2806:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    280a:	6933      	ldr	r3, [r6, #16]
    280c:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    2810:	2300      	movs	r3, #0
    2812:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2816:	2301      	movs	r3, #1
    2818:	60a3      	str	r3, [r4, #8]
    281a:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    281c:	4628      	mov	r0, r5
    281e:	b003      	add	sp, #12
    2820:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    2824:	f06f 0504 	mvn.w	r5, #4
    2828:	e7f8      	b.n	281c <CONFIG_MAIN_STACK_SIZE+0x1c>
    282a:	bf00      	nop
    282c:	0bad0000 	.word	0x0bad0000
    2830:	50017000 	.word	0x50017000

00002834 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    2834:	2301      	movs	r3, #1
    2836:	4083      	lsls	r3, r0
{
    2838:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    283a:	43dc      	mvns	r4, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    283c:	4a0b      	ldr	r2, [pc, #44]	; (286c <compare_int_lock+0x38>)
    283e:	e8d2 1fef 	ldaex	r1, [r2]
    2842:	ea01 0504 	and.w	r5, r1, r4
    2846:	e8c2 5fe6 	stlex	r6, r5, [r2]
    284a:	2e00      	cmp	r6, #0
    284c:	d1f7      	bne.n	283e <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    284e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2852:	4082      	lsls	r2, r0
    2854:	4806      	ldr	r0, [pc, #24]	; (2870 <compare_int_lock+0x3c>)
    2856:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    285a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    285e:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    2862:	420b      	tst	r3, r1
}
    2864:	bf14      	ite	ne
    2866:	2001      	movne	r0, #1
    2868:	2000      	moveq	r0, #0
    286a:	bd70      	pop	{r4, r5, r6, pc}
    286c:	20000eb8 	.word	0x20000eb8
    2870:	50015000 	.word	0x50015000

00002874 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    2874:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    2876:	490e      	ldr	r1, [pc, #56]	; (28b0 <sys_clock_timeout_handler+0x3c>)
	return absolute_time & COUNTER_MAX;
    2878:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    287c:	e9d1 3400 	ldrd	r3, r4, [r1]
    2880:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
    2882:	18c3      	adds	r3, r0, r3
    2884:	f144 0400 	adc.w	r4, r4, #0
    2888:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    288c:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    2890:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    2894:	d209      	bcs.n	28aa <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    2896:	4b07      	ldr	r3, [pc, #28]	; (28b4 <sys_clock_timeout_handler+0x40>)
    2898:	681b      	ldr	r3, [r3, #0]
    289a:	0a1a      	lsrs	r2, r3, #8
    289c:	061b      	lsls	r3, r3, #24
    289e:	199c      	adds	r4, r3, r6
    28a0:	4b05      	ldr	r3, [pc, #20]	; (28b8 <sys_clock_timeout_handler+0x44>)
    28a2:	f142 0500 	adc.w	r5, r2, #0
    28a6:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
    28aa:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
    28ac:	f001 b86a 	b.w	3984 <sys_clock_announce>
    28b0:	20000138 	.word	0x20000138
    28b4:	20000ebc 	.word	0x20000ebc
    28b8:	20000140 	.word	0x20000140

000028bc <compare_int_unlock>:
	if (key) {
    28bc:	b1d9      	cbz	r1, 28f6 <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
    28be:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    28c0:	4a0d      	ldr	r2, [pc, #52]	; (28f8 <compare_int_unlock+0x3c>)
    28c2:	4083      	lsls	r3, r0
    28c4:	e8d2 cfef 	ldaex	ip, [r2]
    28c8:	ea4c 0c03 	orr.w	ip, ip, r3
    28cc:	e8c2 cfe1 	stlex	r1, ip, [r2]
    28d0:	2900      	cmp	r1, #0
    28d2:	d1f7      	bne.n	28c4 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    28d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
    28d8:	4a08      	ldr	r2, [pc, #32]	; (28fc <compare_int_unlock+0x40>)
    28da:	4083      	lsls	r3, r0
    28dc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    28e0:	4b07      	ldr	r3, [pc, #28]	; (2900 <compare_int_unlock+0x44>)
    28e2:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    28e6:	40c3      	lsrs	r3, r0
    28e8:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    28ea:	bf42      	ittt	mi
    28ec:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
    28f0:	4b04      	ldrmi	r3, [pc, #16]	; (2904 <compare_int_unlock+0x48>)
    28f2:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    28f6:	4770      	bx	lr
    28f8:	20000eb8 	.word	0x20000eb8
    28fc:	50015000 	.word	0x50015000
    2900:	20000eb4 	.word	0x20000eb4
    2904:	e000e100 	.word	0xe000e100

00002908 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    2908:	4b0d      	ldr	r3, [pc, #52]	; (2940 <z_nrf_rtc_timer_read+0x38>)
    290a:	6818      	ldr	r0, [r3, #0]
    290c:	0a01      	lsrs	r1, r0, #8
    290e:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    2910:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    2914:	4b0b      	ldr	r3, [pc, #44]	; (2944 <z_nrf_rtc_timer_read+0x3c>)
    2916:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    291a:	1818      	adds	r0, r3, r0
    291c:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    2920:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    2924:	d20a      	bcs.n	293c <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    2926:	4b08      	ldr	r3, [pc, #32]	; (2948 <z_nrf_rtc_timer_read+0x40>)
    2928:	e9d3 2300 	ldrd	r2, r3, [r3]
    292c:	4290      	cmp	r0, r2
    292e:	eb71 0303 	sbcs.w	r3, r1, r3
    2932:	d203      	bcs.n	293c <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    2934:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    2938:	f141 0100 	adc.w	r1, r1, #0
}
    293c:	4770      	bx	lr
    293e:	bf00      	nop
    2940:	20000ebc 	.word	0x20000ebc
    2944:	50015000 	.word	0x50015000
    2948:	20000140 	.word	0x20000140

0000294c <compare_set>:
{
    294c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2950:	4616      	mov	r6, r2
    2952:	461f      	mov	r7, r3
    2954:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
    2956:	f7ff ff6d 	bl	2834 <compare_int_lock>
    295a:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    295c:	f7ff ffd4 	bl	2908 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    2960:	42b0      	cmp	r0, r6
    2962:	eb71 0307 	sbcs.w	r3, r1, r7
    2966:	d251      	bcs.n	2a0c <compare_set+0xc0>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    2968:	4b38      	ldr	r3, [pc, #224]	; (2a4c <compare_set+0x100>)
    296a:	1a30      	subs	r0, r6, r0
    296c:	eb67 0101 	sbc.w	r1, r7, r1
    2970:	4298      	cmp	r0, r3
    2972:	f171 0100 	sbcs.w	r1, r1, #0
    2976:	d266      	bcs.n	2a46 <compare_set+0xfa>
		if (target_time != cc_data[chan].target_time) {
    2978:	4b35      	ldr	r3, [pc, #212]	; (2a50 <compare_set+0x104>)
    297a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    297e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    2982:	429f      	cmp	r7, r3
    2984:	bf08      	it	eq
    2986:	4296      	cmpeq	r6, r2
    2988:	d04a      	beq.n	2a20 <compare_set+0xd4>
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    298a:	f44f 3980 	mov.w	r9, #65536	; 0x10000
    p_reg->EVTENCLR = mask;
    298e:	4931      	ldr	r1, [pc, #196]	; (2a54 <compare_set+0x108>)
    2990:	fa09 f904 	lsl.w	r9, r9, r4
	event_clear(chan);
    2994:	4620      	mov	r0, r4
	return absolute_time & COUNTER_MAX;
    2996:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
    299a:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
    299e:	f003 fc4c 	bl	623a <event_clear>
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    29a2:	f04f 0a03 	mov.w	sl, #3
	uint32_t cc_val = req_cc;
    29a6:	4658      	mov	r0, fp
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    29a8:	f104 0550 	add.w	r5, r4, #80	; 0x50
    29ac:	00ad      	lsls	r5, r5, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    29ae:	b2ad      	uxth	r5, r5
    29b0:	f105 2550 	add.w	r5, r5, #1342197760	; 0x50005000
    p_reg->CC[ch] = cc_val;
    29b4:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    29b8:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 2a5c <compare_set+0x110>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    29bc:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
    p_reg->CC[ch] = cc_val;
    29c0:	9301      	str	r3, [sp, #4]
    29c2:	9a01      	ldr	r2, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    29c4:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    29c8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    p_reg->EVTENSET = mask;
    29cc:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
    29d0:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    29d4:	eba0 0008 	sub.w	r0, r0, r8
    29d8:	3803      	subs	r0, #3
    29da:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    29de:	4560      	cmp	r0, ip
    29e0:	d91e      	bls.n	2a20 <compare_set+0xd4>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    29e2:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
    29e4:	b168      	cbz	r0, 2a02 <compare_set+0xb6>
     return p_reg->COUNTER;
    29e6:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    29ea:	eba8 000b 	sub.w	r0, r8, fp
    29ee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    29f2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    29f6:	d913      	bls.n	2a20 <compare_set+0xd4>
					event_clear(chan);
    29f8:	4620      	mov	r0, r4
    29fa:	f003 fc1e 	bl	623a <event_clear>
    29fe:	f8df c05c 	ldr.w	ip, [pc, #92]	; 2a5c <compare_set+0x110>
			cc_val = now + cc_inc;
    2a02:	eb0a 0008 	add.w	r0, sl, r8
			cc_inc++;
    2a06:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
    2a0a:	e7da      	b.n	29c2 <compare_set+0x76>
		atomic_or(&force_isr_mask, BIT(chan));
    2a0c:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2a0e:	4a12      	ldr	r2, [pc, #72]	; (2a58 <compare_set+0x10c>)
    2a10:	40a3      	lsls	r3, r4
    2a12:	e8d2 0fef 	ldaex	r0, [r2]
    2a16:	4318      	orrs	r0, r3
    2a18:	e8c2 0fe1 	stlex	r1, r0, [r2]
    2a1c:	2900      	cmp	r1, #0
    2a1e:	d1f8      	bne.n	2a12 <compare_set+0xc6>
	return ret;
    2a20:	2500      	movs	r5, #0
	cc_data[chan].target_time = target_time;
    2a22:	490b      	ldr	r1, [pc, #44]	; (2a50 <compare_set+0x104>)
	cc_data[chan].callback = handler;
    2a24:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    2a26:	0123      	lsls	r3, r4, #4
    2a28:	eb01 1204 	add.w	r2, r1, r4, lsl #4
	cc_data[chan].callback = handler;
    2a2c:	50c8      	str	r0, [r1, r3]
	cc_data[chan].target_time = target_time;
    2a2e:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].user_context = user_data;
    2a32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2a34:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
    2a36:	4620      	mov	r0, r4
    2a38:	9900      	ldr	r1, [sp, #0]
    2a3a:	f7ff ff3f 	bl	28bc <compare_int_unlock>
}
    2a3e:	4628      	mov	r0, r5
    2a40:	b003      	add	sp, #12
    2a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    2a46:	f06f 0515 	mvn.w	r5, #21
    2a4a:	e7f4      	b.n	2a36 <compare_set+0xea>
    2a4c:	00800001 	.word	0x00800001
    2a50:	20000128 	.word	0x20000128
    2a54:	50015000 	.word	0x50015000
    2a58:	20000eb4 	.word	0x20000eb4
    2a5c:	007ffffd 	.word	0x007ffffd

00002a60 <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
    2a60:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->PRESCALER = val;
    2a62:	2500      	movs	r5, #0
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    2a64:	f04f 30ff 	mov.w	r0, #4294967295
    2a68:	f04f 31ff 	mov.w	r1, #4294967295
    p_reg->INTENCLR = mask;
    2a6c:	4c18      	ldr	r4, [pc, #96]	; (2ad0 <sys_clock_driver_init+0x70>)
    2a6e:	4b19      	ldr	r3, [pc, #100]	; (2ad4 <sys_clock_driver_init+0x74>)
    p_reg->INTENSET = mask;
    2a70:	2602      	movs	r6, #2
    p_reg->INTENCLR = mask;
    2a72:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    2a76:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    2a7a:	4b17      	ldr	r3, [pc, #92]	; (2ad8 <sys_clock_driver_init+0x78>)
    p_reg->PRESCALER = val;
    2a7c:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    2a80:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    2a84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2a88:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2a8c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    2a90:	4b12      	ldr	r3, [pc, #72]	; (2adc <sys_clock_driver_init+0x7c>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    2a92:	2101      	movs	r1, #1
    2a94:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    2a98:	2015      	movs	r0, #21
    2a9a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    2a9e:	462a      	mov	r2, r5
    2aa0:	f7fe ff7e 	bl	19a0 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    2aa4:	2015      	movs	r0, #21
    2aa6:	f7fe ff4b 	bl	1940 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    2aaa:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    2aac:	4a0c      	ldr	r2, [pc, #48]	; (2ae0 <sys_clock_driver_init+0x80>)
    2aae:	60a3      	str	r3, [r4, #8]
    2ab0:	6023      	str	r3, [r4, #0]
    2ab2:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    2ab4:	4b0b      	ldr	r3, [pc, #44]	; (2ae4 <sys_clock_driver_init+0x84>)
    2ab6:	4a0c      	ldr	r2, [pc, #48]	; (2ae8 <sys_clock_driver_init+0x88>)
    2ab8:	9300      	str	r3, [sp, #0]
    2aba:	4628      	mov	r0, r5
    2abc:	2300      	movs	r3, #0
    2abe:	9501      	str	r5, [sp, #4]
    2ac0:	f7ff ff44 	bl	294c <compare_set>

	z_nrf_clock_control_lf_on(mode);
    2ac4:	4630      	mov	r0, r6
    2ac6:	f7ff faa1 	bl	200c <z_nrf_clock_control_lf_on>

	return 0;
}
    2aca:	4628      	mov	r0, r5
    2acc:	b002      	add	sp, #8
    2ace:	bd70      	pop	{r4, r5, r6, pc}
    2ad0:	50015000 	.word	0x50015000
    2ad4:	000f0003 	.word	0x000f0003
    2ad8:	20000128 	.word	0x20000128
    2adc:	e000e100 	.word	0xe000e100
    2ae0:	20000eb8 	.word	0x20000eb8
    2ae4:	00002875 	.word	0x00002875
    2ae8:	007fffff 	.word	0x007fffff

00002aec <rtc_nrf_isr>:
{
    2aec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    2af0:	4b2e      	ldr	r3, [pc, #184]	; (2bac <rtc_nrf_isr+0xc0>)
    2af2:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    2af6:	0790      	lsls	r0, r2, #30
    2af8:	d50b      	bpl.n	2b12 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2afa:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    2afe:	b142      	cbz	r2, 2b12 <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2b00:	2200      	movs	r2, #0
    2b02:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
    2b06:	4a2a      	ldr	r2, [pc, #168]	; (2bb0 <rtc_nrf_isr+0xc4>)
    2b08:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    2b0c:	6813      	ldr	r3, [r2, #0]
    2b0e:	3301      	adds	r3, #1
    2b10:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    2b12:	4a26      	ldr	r2, [pc, #152]	; (2bac <rtc_nrf_isr+0xc0>)
    2b14:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    2b18:	03d9      	lsls	r1, r3, #15
    2b1a:	d527      	bpl.n	2b6c <rtc_nrf_isr+0x80>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2b1c:	4b25      	ldr	r3, [pc, #148]	; (2bb4 <rtc_nrf_isr+0xc8>)
    2b1e:	e8d3 1fef 	ldaex	r1, [r3]
    2b22:	f021 0001 	bic.w	r0, r1, #1
    2b26:	e8c3 0fe4 	stlex	r4, r0, [r3]
    2b2a:	2c00      	cmp	r4, #0
    2b2c:	d1f7      	bne.n	2b1e <rtc_nrf_isr+0x32>
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    2b2e:	07cb      	lsls	r3, r1, #31
    2b30:	d402      	bmi.n	2b38 <rtc_nrf_isr+0x4c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2b32:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
    2b36:	b1cb      	cbz	r3, 2b6c <rtc_nrf_isr+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2b38:	2500      	movs	r5, #0
    2b3a:	4c1c      	ldr	r4, [pc, #112]	; (2bac <rtc_nrf_isr+0xc0>)
    2b3c:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    2b40:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
    2b44:	f7ff fee0 	bl	2908 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    2b48:	f04f 0320 	mov.w	r3, #32
    2b4c:	f3ef 8211 	mrs	r2, BASEPRI
    2b50:	f383 8812 	msr	BASEPRI_MAX, r3
    2b54:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    2b58:	4b17      	ldr	r3, [pc, #92]	; (2bb8 <rtc_nrf_isr+0xcc>)
    2b5a:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    2b5e:	42b0      	cmp	r0, r6
    2b60:	41b9      	sbcs	r1, r7
    2b62:	d206      	bcs.n	2b72 <rtc_nrf_isr+0x86>
	__asm__ volatile(
    2b64:	f382 8811 	msr	BASEPRI, r2
    2b68:	f3bf 8f6f 	isb	sy
}
    2b6c:	b003      	add	sp, #12
    2b6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    2b72:	f04f 38ff 	mov.w	r8, #4294967295
			user_context = cc_data[chan].user_context;
    2b76:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    2b7a:	f04f 39ff 	mov.w	r9, #4294967295
			cc_data[chan].callback = NULL;
    2b7e:	601d      	str	r5, [r3, #0]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    2b80:	e9c3 8902 	strd	r8, r9, [r3, #8]
    p_reg->EVTENCLR = mask;
    2b84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2b88:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2b8c:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    2b90:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    2b94:	f382 8811 	msr	BASEPRI, r2
    2b98:	f3bf 8f6f 	isb	sy
		if (handler) {
    2b9c:	2900      	cmp	r1, #0
    2b9e:	d0e5      	beq.n	2b6c <rtc_nrf_isr+0x80>
			handler(chan, expire_time, user_context);
    2ba0:	9000      	str	r0, [sp, #0]
    2ba2:	4632      	mov	r2, r6
    2ba4:	463b      	mov	r3, r7
    2ba6:	4628      	mov	r0, r5
    2ba8:	4788      	blx	r1
    2baa:	e7df      	b.n	2b6c <rtc_nrf_isr+0x80>
    2bac:	50015000 	.word	0x50015000
    2bb0:	20000ebc 	.word	0x20000ebc
    2bb4:	20000eb4 	.word	0x20000eb4
    2bb8:	20000128 	.word	0x20000128

00002bbc <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
    2bbc:	1c43      	adds	r3, r0, #1
{
    2bbe:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
    2bc0:	d021      	beq.n	2c06 <sys_clock_set_timeout+0x4a>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    2bc2:	2801      	cmp	r0, #1
    2bc4:	dd21      	ble.n	2c0a <sys_clock_set_timeout+0x4e>
    2bc6:	4a12      	ldr	r2, [pc, #72]	; (2c10 <sys_clock_set_timeout+0x54>)
    2bc8:	4b12      	ldr	r3, [pc, #72]	; (2c14 <sys_clock_set_timeout+0x58>)
    2bca:	4290      	cmp	r0, r2
    2bcc:	bfd4      	ite	le
    2bce:	4604      	movle	r4, r0
    2bd0:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    2bd2:	f7ff fe99 	bl	2908 <z_nrf_rtc_timer_read>
    2bd6:	4b10      	ldr	r3, [pc, #64]	; (2c18 <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
    2bd8:	490e      	ldr	r1, [pc, #56]	; (2c14 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    2bda:	e9d3 2300 	ldrd	r2, r3, [r3]
    2bde:	1a80      	subs	r0, r0, r2
		cyc = 0;
    2be0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2be4:	bf28      	it	cs
    2be6:	2400      	movcs	r4, #0
	cyc += unannounced;
    2be8:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    2bea:	428c      	cmp	r4, r1
    2bec:	bf28      	it	cs
    2bee:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
    2bf0:	2000      	movs	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    2bf2:	490a      	ldr	r1, [pc, #40]	; (2c1c <sys_clock_set_timeout+0x60>)
	uint64_t target_time = cyc + last_count;
    2bf4:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    2bf6:	9001      	str	r0, [sp, #4]
    2bf8:	9100      	str	r1, [sp, #0]
    2bfa:	f143 0300 	adc.w	r3, r3, #0
    2bfe:	f7ff fea5 	bl	294c <compare_set>
}
    2c02:	b002      	add	sp, #8
    2c04:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
    2c06:	4c03      	ldr	r4, [pc, #12]	; (2c14 <sys_clock_set_timeout+0x58>)
    2c08:	e7e3      	b.n	2bd2 <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    2c0a:	2401      	movs	r4, #1
    2c0c:	e7e1      	b.n	2bd2 <sys_clock_set_timeout+0x16>
    2c0e:	bf00      	nop
    2c10:	007ffffe 	.word	0x007ffffe
    2c14:	007fffff 	.word	0x007fffff
    2c18:	20000138 	.word	0x20000138
    2c1c:	00002875 	.word	0x00002875

00002c20 <sys_clock_elapsed>:
{
    2c20:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    2c22:	f7ff fe71 	bl	2908 <z_nrf_rtc_timer_read>
    2c26:	4b02      	ldr	r3, [pc, #8]	; (2c30 <sys_clock_elapsed+0x10>)
    2c28:	681b      	ldr	r3, [r3, #0]
}
    2c2a:	1ac0      	subs	r0, r0, r3
    2c2c:	bd08      	pop	{r3, pc}
    2c2e:	bf00      	nop
    2c30:	20000138 	.word	0x20000138

00002c34 <sys_clock_disable>:
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    2c34:	2301      	movs	r3, #1
{
    2c36:	b510      	push	{r4, lr}
    2c38:	4c07      	ldr	r4, [pc, #28]	; (2c58 <sys_clock_disable+0x24>)
	irq_disable(RTC_IRQn);
    2c3a:	2015      	movs	r0, #21
    2c3c:	6063      	str	r3, [r4, #4]
    2c3e:	f7fe fe8d 	bl	195c <arch_irq_disable>
    2c42:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->INTENCLR = mask;
    2c46:	4b05      	ldr	r3, [pc, #20]	; (2c5c <sys_clock_disable+0x28>)
    2c48:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    2c4c:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    2c50:	4b03      	ldr	r3, [pc, #12]	; (2c60 <sys_clock_disable+0x2c>)
    2c52:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
    2c56:	bd10      	pop	{r4, pc}
    2c58:	50015000 	.word	0x50015000
    2c5c:	000f0003 	.word	0x000f0003
    2c60:	e000e100 	.word	0xe000e100

00002c64 <fprotect_area>:

#define SPU_BLOCK_SIZE CONFIG_FPROTECT_BLOCK_SIZE

int fprotect_area(uint32_t start, size_t length)
{
	if (start % SPU_BLOCK_SIZE != 0 ||
    2c64:	ea40 0301 	orr.w	r3, r0, r1
    2c68:	f3c3 030e 	ubfx	r3, r3, #0, #15
{
    2c6c:	b530      	push	{r4, r5, lr}
	if (start % SPU_BLOCK_SIZE != 0 ||
    2c6e:	b98b      	cbnz	r3, 2c94 <fprotect_area+0x30>
                                               uint32_t       permissions,
                                               bool           lock_conf)
{
    NRFX_ASSERT(!(p_reg->FLASHREGION[region_id].PERM & SPU_FLASHREGION_PERM_LOCK_Msk));

    p_reg->FLASHREGION[region_id].PERM = permissions         |
    2c70:	f240 1515 	movw	r5, #277	; 0x115
    2c74:	4c09      	ldr	r4, [pc, #36]	; (2c9c <fprotect_area+0x38>)
		length % SPU_BLOCK_SIZE != 0) {
		return -EINVAL;
	}

	for (uint32_t i = 0; i < length / SPU_BLOCK_SIZE; i++) {
    2c76:	0bc9      	lsrs	r1, r1, #15
		nrf_spu_flashregion_set(NRF_SPU_S,
    2c78:	f3c0 30c7 	ubfx	r0, r0, #15, #8
	for (uint32_t i = 0; i < length / SPU_BLOCK_SIZE; i++) {
    2c7c:	4299      	cmp	r1, r3
    2c7e:	d101      	bne.n	2c84 <fprotect_area+0x20>
				NRF_SPU_MEM_PERM_EXECUTE |
				NRF_SPU_MEM_PERM_READ,
				true);
	}

	return 0;
    2c80:	2000      	movs	r0, #0
}
    2c82:	bd30      	pop	{r4, r5, pc}
		nrf_spu_flashregion_set(NRF_SPU_S,
    2c84:	18c2      	adds	r2, r0, r3
    2c86:	b2d2      	uxtb	r2, r2
    2c88:	f502 72c0 	add.w	r2, r2, #384	; 0x180
    2c8c:	f844 5022 	str.w	r5, [r4, r2, lsl #2]
	for (uint32_t i = 0; i < length / SPU_BLOCK_SIZE; i++) {
    2c90:	3301      	adds	r3, #1
    2c92:	e7f3      	b.n	2c7c <fprotect_area+0x18>
		return -EINVAL;
    2c94:	f06f 0015 	mvn.w	r0, #21
    2c98:	e7f3      	b.n	2c82 <fprotect_area+0x1e>
    2c9a:	bf00      	nop
    2c9c:	50003000 	.word	0x50003000

00002ca0 <boot_write_magic>:
    return rc;
}

int
boot_write_magic(const struct flash_area *fap)
{
    2ca0:	b530      	push	{r4, r5, lr}
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
    2ca2:	6881      	ldr	r1, [r0, #8]
    2ca4:	b085      	sub	sp, #20
    2ca6:	3910      	subs	r1, #16
     * returned by boot_magic_off() is the start of magic which is not the
     * start of the flash write boundary and thus writes to the magic will fail.
     * To account for this change, write to magic is first padded with 0xFF
     * before writing to the trailer.
     */
    pad_off = ALIGN_DOWN(off, BOOT_MAX_ALIGN);
    2ca8:	f021 0407 	bic.w	r4, r1, #7
{
    2cac:	4605      	mov	r5, r0

    erased_val = flash_area_erased_val(fap);
    2cae:	f003 f82f 	bl	5d10 <flash_area_erased_val>

    memset(&magic[0], erased_val, sizeof(magic));
    2cb2:	2210      	movs	r2, #16
    erased_val = flash_area_erased_val(fap);
    2cb4:	4601      	mov	r1, r0
    memset(&magic[0], erased_val, sizeof(magic));
    2cb6:	4668      	mov	r0, sp
    2cb8:	f003 f88b 	bl	5dd2 <memset>
    memcpy(&magic[BOOT_MAGIC_ALIGN_SIZE - BOOT_MAGIC_SZ], BOOT_IMG_MAGIC, BOOT_MAGIC_SZ);
    2cbc:	2210      	movs	r2, #16
    2cbe:	4668      	mov	r0, sp
    2cc0:	4906      	ldr	r1, [pc, #24]	; (2cdc <boot_write_magic+0x3c>)
    2cc2:	f003 f87b 	bl	5dbc <memcpy>

    BOOT_LOG_DBG("writing magic; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off));
    rc = flash_area_write(fap, pad_off, &magic[0], BOOT_MAGIC_ALIGN_SIZE);
    2cc6:	2310      	movs	r3, #16
    2cc8:	466a      	mov	r2, sp
    2cca:	4621      	mov	r1, r4
    2ccc:	4628      	mov	r0, r5
    2cce:	f002 ffed 	bl	5cac <flash_area_write>
    if (rc != 0) {
        return BOOT_EFLASH;
    }

    return 0;
}
    2cd2:	3800      	subs	r0, #0
    2cd4:	bf18      	it	ne
    2cd6:	2001      	movne	r0, #1
    2cd8:	b005      	add	sp, #20
    2cda:	bd30      	pop	{r4, r5, pc}
    2cdc:	00006d0c 	.word	0x00006d0c

00002ce0 <boot_read_swap_state>:
{
    2ce0:	b530      	push	{r4, r5, lr}
    2ce2:	460d      	mov	r5, r1
    2ce4:	6881      	ldr	r1, [r0, #8]
    2ce6:	b087      	sub	sp, #28
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    2ce8:	2310      	movs	r3, #16
    2cea:	aa02      	add	r2, sp, #8
    2cec:	3910      	subs	r1, #16
{
    2cee:	4604      	mov	r4, r0
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    2cf0:	f002 ffc7 	bl	5c82 <flash_area_read>
    if (rc < 0) {
    2cf4:	2800      	cmp	r0, #0
    2cf6:	da02      	bge.n	2cfe <boot_read_swap_state+0x1e>
        return BOOT_EFLASH;
    2cf8:	2001      	movs	r0, #1
}
    2cfa:	b007      	add	sp, #28
    2cfc:	bd30      	pop	{r4, r5, pc}
    if (bootutil_buffer_is_erased(fap, magic, BOOT_MAGIC_SZ)) {
    2cfe:	2210      	movs	r2, #16
    2d00:	4620      	mov	r0, r4
    2d02:	a902      	add	r1, sp, #8
    2d04:	f003 fac8 	bl	6298 <bootutil_buffer_is_erased>
    2d08:	2800      	cmp	r0, #0
    2d0a:	d13a      	bne.n	2d82 <boot_read_swap_state+0xa2>
    if (memcmp(magic, BOOT_IMG_MAGIC, BOOT_MAGIC_SZ) == 0) {
    2d0c:	2210      	movs	r2, #16
    2d0e:	491e      	ldr	r1, [pc, #120]	; (2d88 <boot_read_swap_state+0xa8>)
    2d10:	a802      	add	r0, sp, #8
    2d12:	f003 f843 	bl	5d9c <memcmp>
    return BOOT_MAGIC_BAD;
    2d16:	2800      	cmp	r0, #0
        state->magic = boot_magic_decode(magic);
    2d18:	bf0c      	ite	eq
    2d1a:	2301      	moveq	r3, #1
    2d1c:	2302      	movne	r3, #2
        state->magic = BOOT_MAGIC_UNSET;
    2d1e:	702b      	strb	r3, [r5, #0]
    off = boot_swap_info_off(fap);
    2d20:	4620      	mov	r0, r4
    2d22:	f003 faa5 	bl	6270 <boot_swap_info_off>
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    2d26:	2301      	movs	r3, #1
    off = boot_swap_info_off(fap);
    2d28:	4601      	mov	r1, r0
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    2d2a:	f10d 0207 	add.w	r2, sp, #7
    2d2e:	4620      	mov	r0, r4
    2d30:	f002 ffa7 	bl	5c82 <flash_area_read>
    if (rc < 0) {
    2d34:	2800      	cmp	r0, #0
    2d36:	dbdf      	blt.n	2cf8 <boot_read_swap_state+0x18>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    2d38:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
    2d3c:	4620      	mov	r0, r4
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    2d3e:	f003 020f 	and.w	r2, r3, #15
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    2d42:	091b      	lsrs	r3, r3, #4
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    2d44:	706a      	strb	r2, [r5, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    2d46:	712b      	strb	r3, [r5, #4]
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
    2d48:	2201      	movs	r2, #1
    2d4a:	f10d 0107 	add.w	r1, sp, #7
    2d4e:	f003 faa3 	bl	6298 <bootutil_buffer_is_erased>
    2d52:	b910      	cbnz	r0, 2d5a <boot_read_swap_state+0x7a>
    2d54:	786b      	ldrb	r3, [r5, #1]
    2d56:	2b04      	cmp	r3, #4
    2d58:	d903      	bls.n	2d62 <boot_read_swap_state+0x82>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
    2d5a:	2301      	movs	r3, #1
    2d5c:	706b      	strb	r3, [r5, #1]
        state->image_num = 0;
    2d5e:	2300      	movs	r3, #0
    2d60:	712b      	strb	r3, [r5, #4]
}

static inline uint32_t
boot_image_ok_off(const struct flash_area *fap)
{
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    2d62:	68a2      	ldr	r2, [r4, #8]
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
    2d64:	4620      	mov	r0, r4
    2d66:	3a18      	subs	r2, #24
    2d68:	f022 0207 	bic.w	r2, r2, #7
    2d6c:	3a08      	subs	r2, #8
    2d6e:	1ca9      	adds	r1, r5, #2
    2d70:	f003 faa5 	bl	62be <boot_read_flag>
    if (rc) {
    2d74:	2800      	cmp	r0, #0
    2d76:	d1bf      	bne.n	2cf8 <boot_read_swap_state+0x18>
    return boot_read_image_ok(fap, &state->image_ok);
    2d78:	4620      	mov	r0, r4
    2d7a:	1ce9      	adds	r1, r5, #3
    2d7c:	f003 faf8 	bl	6370 <boot_read_image_ok>
    2d80:	e7bb      	b.n	2cfa <boot_read_swap_state+0x1a>
    2d82:	2303      	movs	r3, #3
    2d84:	e7cb      	b.n	2d1e <boot_read_swap_state+0x3e>
    2d86:	bf00      	nop
    2d88:	00006d0c 	.word	0x00006d0c

00002d8c <boot_swap_type_multi>:
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
}

int
boot_swap_type_multi(int image_index)
{
    2d8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

    rc = BOOT_HOOK_CALL(boot_read_swap_state_primary_slot_hook,
                        BOOT_HOOK_REGULAR, image_index, &primary_slot);
    if (rc == BOOT_HOOK_REGULAR)
    {
        rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    2d8e:	2003      	movs	r0, #3
    2d90:	4669      	mov	r1, sp
    2d92:	f003 faf3 	bl	637c <boot_read_swap_state_by_id>
                                        &primary_slot);
    }
    if (rc) {
    2d96:	bb98      	cbnz	r0, 2e00 <boot_swap_type_multi+0x74>
        return BOOT_SWAP_TYPE_PANIC;
    }

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    2d98:	2009      	movs	r0, #9
    2d9a:	a902      	add	r1, sp, #8
    2d9c:	f003 faee 	bl	637c <boot_read_swap_state_by_id>
                                    &secondary_slot);
    if (rc == BOOT_EFLASH) {
    2da0:	2801      	cmp	r0, #1
    2da2:	d12b      	bne.n	2dfc <boot_swap_type_multi+0x70>
        BOOT_LOG_INF("Secondary image of image pair (%d.) "
                     "is unreachable. Treat it as empty", image_index);
        secondary_slot.magic = BOOT_MAGIC_UNSET;
    2da4:	2303      	movs	r3, #3
    2da6:	f88d 3008 	strb.w	r3, [sp, #8]
        secondary_slot.swap_type = BOOT_SWAP_TYPE_NONE;
        secondary_slot.copy_done = BOOT_FLAG_UNSET;
        secondary_slot.image_ok = BOOT_FLAG_UNSET;
    2daa:	f88d 300b 	strb.w	r3, [sp, #11]
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
        table = boot_swap_tables + i;

        if (boot_magic_compatible_check(table->magic_primary_slot,
                                        primary_slot.magic) &&
            boot_magic_compatible_check(table->magic_secondary_slot,
    2dae:	2400      	movs	r4, #0
        if (boot_magic_compatible_check(table->magic_primary_slot,
    2db0:	f89d 5000 	ldrb.w	r5, [sp]
            boot_magic_compatible_check(table->magic_secondary_slot,
    2db4:	f89d 6008 	ldrb.w	r6, [sp, #8]
    2db8:	4a18      	ldr	r2, [pc, #96]	; (2e1c <boot_swap_type_multi+0x90>)
        if (boot_magic_compatible_check(table->magic_primary_slot,
    2dba:	4629      	mov	r1, r5
    2dbc:	7810      	ldrb	r0, [r2, #0]
    2dbe:	f003 fa5d 	bl	627c <boot_magic_compatible_check>
    2dc2:	b318      	cbz	r0, 2e0c <boot_swap_type_multi+0x80>
            boot_magic_compatible_check(table->magic_secondary_slot,
    2dc4:	4631      	mov	r1, r6
    2dc6:	7850      	ldrb	r0, [r2, #1]
    2dc8:	f003 fa58 	bl	627c <boot_magic_compatible_check>
                                        primary_slot.magic) &&
    2dcc:	b1f0      	cbz	r0, 2e0c <boot_swap_type_multi+0x80>
                                        secondary_slot.magic) &&
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    2dce:	7893      	ldrb	r3, [r2, #2]
                                        secondary_slot.magic) &&
    2dd0:	2b04      	cmp	r3, #4
    2dd2:	d003      	beq.n	2ddc <boot_swap_type_multi+0x50>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    2dd4:	f89d 1003 	ldrb.w	r1, [sp, #3]
    2dd8:	4299      	cmp	r1, r3
    2dda:	d117      	bne.n	2e0c <boot_swap_type_multi+0x80>
                table->image_ok_primary_slot == primary_slot.image_ok) &&
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    2ddc:	78d3      	ldrb	r3, [r2, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    2dde:	2b04      	cmp	r3, #4
    2de0:	d003      	beq.n	2dea <boot_swap_type_multi+0x5e>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    2de2:	f89d 100b 	ldrb.w	r1, [sp, #11]
    2de6:	4299      	cmp	r1, r3
    2de8:	d110      	bne.n	2e0c <boot_swap_type_multi+0x80>
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    2dea:	7913      	ldrb	r3, [r2, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    2dec:	2b04      	cmp	r3, #4
    2dee:	d109      	bne.n	2e04 <boot_swap_type_multi+0x78>
            BOOT_LOG_INF("Swap type: %s",
                         table->swap_type == BOOT_SWAP_TYPE_TEST   ? "test"   :
                         table->swap_type == BOOT_SWAP_TYPE_PERM   ? "perm"   :
                         table->swap_type == BOOT_SWAP_TYPE_REVERT ? "revert" :
                         "BUG; can't happen");
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
    2df0:	7950      	ldrb	r0, [r2, #5]
    2df2:	1e83      	subs	r3, r0, #2
    2df4:	2b02      	cmp	r3, #2
    2df6:	d803      	bhi.n	2e00 <boot_swap_type_multi+0x74>
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
}
    2df8:	b004      	add	sp, #16
    2dfa:	bd70      	pop	{r4, r5, r6, pc}
    } else if (rc) {
    2dfc:	2800      	cmp	r0, #0
    2dfe:	d0d6      	beq.n	2dae <boot_swap_type_multi+0x22>
        return BOOT_SWAP_TYPE_PANIC;
    2e00:	20ff      	movs	r0, #255	; 0xff
    2e02:	e7f9      	b.n	2df8 <boot_swap_type_multi+0x6c>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    2e04:	f89d 1002 	ldrb.w	r1, [sp, #2]
    2e08:	4299      	cmp	r1, r3
    2e0a:	d0f1      	beq.n	2df0 <boot_swap_type_multi+0x64>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    2e0c:	3401      	adds	r4, #1
    2e0e:	2c03      	cmp	r4, #3
    2e10:	f102 0206 	add.w	r2, r2, #6
    2e14:	d1d1      	bne.n	2dba <boot_swap_type_multi+0x2e>
    return BOOT_SWAP_TYPE_NONE;
    2e16:	2001      	movs	r0, #1
    2e18:	e7ee      	b.n	2df8 <boot_swap_type_multi+0x6c>
    2e1a:	bf00      	nop
    2e1c:	00006e62 	.word	0x00006e62

00002e20 <SystemInit>:
         || defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            #if defined(NRF_TRUSTZONE_NONSECURE)
                uint32_t var1 = (*((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul))) & 0x00000FFFul;
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
            #else
                uint32_t var1 = (*((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul))) & 0x00000FFFul;
    2e20:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
{
    SystemCoreClock = __SYSTEM_CLOCK_DEFAULT;
}

void SystemInit(void)
{
    2e24:	b508      	push	{r3, lr}
    2e26:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    2e2a:	f8d2 2134 	ldr.w	r2, [r2, #308]	; 0x134
  __ASM volatile ("dsb 0xF":::"memory");
    2e2e:	f3bf 8f4f 	dsb	sy
                uint32_t var1 = (*((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul))) & 0x00000FFFul;
    2e32:	f3c3 030b 	ubfx	r3, r3, #0, #12
                }
            }
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            __DSB();
            if (var1 == 0x09)
    2e36:	2b09      	cmp	r3, #9
        #endif
        
        /* Workaround for Errata 6 "POWER: SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_6()){
            NRF_POWER_S->EVENTS_SLEEPENTER = (POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos);
    2e38:	bf01      	itttt	eq
    2e3a:	f04f 2350 	moveq.w	r3, #1342197760	; 0x50005000
    2e3e:	2200      	moveq	r2, #0
    2e40:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
            NRF_POWER_S->EVENTS_SLEEPEXIT = (POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos);
    2e44:	f8c3 2118 	streq.w	r2, [r3, #280]	; 0x118
        }
        
        /* Workaround for Errata 14 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_14()){
    2e48:	f003 fabd 	bl	63c6 <nrf91_errata_14>
    2e4c:	b128      	cbz	r0, 2e5a <SystemInit+0x3a>
            *((volatile uint32_t *)0x50004A38) = 0x01ul;
    2e4e:	2201      	movs	r2, #1
    2e50:	4b53      	ldr	r3, [pc, #332]	; (2fa0 <SystemInit+0x180>)
    2e52:	f8c3 2a38 	str.w	r2, [r3, #2616]	; 0xa38
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    2e56:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
         || defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            #if defined(NRF_TRUSTZONE_NONSECURE)
                uint32_t var1 = (*((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul))) & 0x00000FFFul;
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
            #else
                uint32_t var1 = (*((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul))) & 0x00000FFFul;
    2e5a:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
    2e5e:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    2e62:	f8d2 2134 	ldr.w	r2, [r2, #308]	; 0x134
    2e66:	f3bf 8f4f 	dsb	sy
                uint32_t var1 = (*((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul))) & 0x00000FFFul;
    2e6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
                }
            }
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            __DSB();
            if (var1 == 0x09)
    2e6e:	2b09      	cmp	r3, #9
    2e70:	d105      	bne.n	2e7e <SystemInit+0x5e>
            {
                switch(var2)
    2e72:	2a01      	cmp	r2, #1
        }

        /* Workaround for Errata 15 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_15()){
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    2e74:	bf1e      	ittt	ne
    2e76:	2201      	movne	r2, #1
    2e78:	4b49      	ldrne	r3, [pc, #292]	; (2fa0 <SystemInit+0x180>)
    2e7a:	f8c3 2578 	strne.w	r2, [r3, #1400]	; 0x578
        }

        /* Workaround for Errata 20 "RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_20()){
    2e7e:	f003 faa2 	bl	63c6 <nrf91_errata_14>
    2e82:	b118      	cbz	r0, 2e8c <SystemInit+0x6c>
            *((volatile uint32_t *)0x5003AEE4) = 0xE;
    2e84:	220e      	movs	r2, #14
    2e86:	4b47      	ldr	r3, [pc, #284]	; (2fa4 <SystemInit+0x184>)
    2e88:	f8c3 2ee4 	str.w	r2, [r3, #3812]	; 0xee4
                uint32_t var1 = (*((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul))) & 0x00000FFFul;
    2e8c:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
    2e90:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    2e94:	f8d2 2134 	ldr.w	r2, [r2, #308]	; 0x134
    2e98:	f3bf 8f4f 	dsb	sy
                uint32_t var1 = (*((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul))) & 0x00000FFFul;
    2e9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
            if (var1 == 0x09)
    2ea0:	2b09      	cmp	r3, #9
    2ea2:	d106      	bne.n	2eb2 <SystemInit+0x92>
        }

        /* Workaround for Errata 31 "XOSC32k Startup Failure" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_31()){
            *((volatile uint32_t *)0x5000470Cul) = 0x0;
    2ea4:	2200      	movs	r2, #0
    2ea6:	4b3e      	ldr	r3, [pc, #248]	; (2fa0 <SystemInit+0x180>)
    2ea8:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
            *((volatile uint32_t *)0x50004710ul) = 0x1;
    2eac:	2201      	movs	r2, #1
    2eae:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710
{
    2eb2:	2200      	movs	r2, #0
    2eb4:	00d3      	lsls	r3, r2, #3
        #endif

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
            
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    2eb6:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }
    #endif
    
    bool is_empty_word(uint32_t const volatile * word)
    {
        uint32_t val = *word;
    2eba:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    2ebe:	f3bf 8f4f 	dsb	sy
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    2ec2:	3101      	adds	r1, #1
    2ec4:	d008      	beq.n	2ed8 <SystemInit+0xb8>
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    2ec6:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    2eca:	3201      	adds	r2, #1
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    2ecc:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    2ed0:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    2ed4:	600b      	str	r3, [r1, #0]
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    2ed6:	d1ed      	bne.n	2eb4 <SystemInit+0x94>
            uint32_t HFXOSRC_readout = NRF_UICR_S->HFXOSRC;
    2ed8:	4b33      	ldr	r3, [pc, #204]	; (2fa8 <SystemInit+0x188>)
    2eda:	69da      	ldr	r2, [r3, #28]
    2edc:	f3bf 8f4f 	dsb	sy
            if ((HFXOSRC_readout & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    2ee0:	07d1      	lsls	r1, r2, #31
    2ee2:	d545      	bpl.n	2f70 <SystemInit+0x150>
    2ee4:	f3bf 8f4f 	dsb	sy
                while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    2ee8:	4b30      	ldr	r3, [pc, #192]	; (2fac <SystemInit+0x18c>)
    2eea:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    2eee:	2a01      	cmp	r2, #1
    2ef0:	d1fb      	bne.n	2eea <SystemInit+0xca>
                NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen;
    2ef2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
                while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    2ef6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    2efa:	2a01      	cmp	r2, #1
    2efc:	d1fb      	bne.n	2ef6 <SystemInit+0xd6>
            uint32_t HFXOSRC_readout = NRF_UICR_S->HFXOSRC;
    2efe:	4b2a      	ldr	r3, [pc, #168]	; (2fa8 <SystemInit+0x188>)
    2f00:	69da      	ldr	r2, [r3, #28]
    2f02:	f3bf 8f4f 	dsb	sy
            if ((HFXOSRC_readout & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    2f06:	07d2      	lsls	r2, r2, #31
    2f08:	d50a      	bpl.n	2f20 <SystemInit+0x100>
                    uicr_erased_value = NRF_UICR_S->HFXOSRC;
    2f0a:	69da      	ldr	r2, [r3, #28]
                    uicr_new_value = (uicr_erased_value & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
    2f0c:	f022 0201 	bic.w	r2, r2, #1
                    NRF_UICR_S->HFXOSRC = uicr_new_value;
    2f10:	61da      	str	r2, [r3, #28]
    2f12:	f3bf 8f4f 	dsb	sy
                    while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    2f16:	4a25      	ldr	r2, [pc, #148]	; (2fac <SystemInit+0x18c>)
    2f18:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    2f1c:	2b01      	cmp	r3, #1
    2f1e:	d1fb      	bne.n	2f18 <SystemInit+0xf8>
        uint32_t val = *word;
    2f20:	4a21      	ldr	r2, [pc, #132]	; (2fa8 <SystemInit+0x188>)
    2f22:	6a13      	ldr	r3, [r2, #32]
    2f24:	f3bf 8f4f 	dsb	sy
            if (is_empty_word(&NRF_UICR_S->HFXOCNT)) {
    2f28:	3301      	adds	r3, #1
    2f2a:	d10c      	bne.n	2f46 <SystemInit+0x126>
                    uicr_erased_value = NRF_UICR_S->HFXOCNT;
    2f2c:	6a13      	ldr	r3, [r2, #32]
                    uicr_new_value = (uicr_erased_value & ~UICR_HFXOCNT_HFXOCNT_Msk) | 0x20;
    2f2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    2f32:	f043 0320 	orr.w	r3, r3, #32
                    NRF_UICR_S->HFXOCNT = uicr_new_value;
    2f36:	6213      	str	r3, [r2, #32]
    2f38:	f3bf 8f4f 	dsb	sy
                    while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    2f3c:	4a1b      	ldr	r2, [pc, #108]	; (2fac <SystemInit+0x18c>)
    2f3e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    2f42:	2b01      	cmp	r3, #1
    2f44:	d1fb      	bne.n	2f3e <SystemInit+0x11e>
                NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
    2f46:	2200      	movs	r2, #0
    2f48:	4b18      	ldr	r3, [pc, #96]	; (2fac <SystemInit+0x18c>)
    2f4a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
                while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    2f4e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    2f52:	2a01      	cmp	r2, #1
    2f54:	d1fb      	bne.n	2f4e <SystemInit+0x12e>
    2f56:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2f5a:	4915      	ldr	r1, [pc, #84]	; (2fb0 <SystemInit+0x190>)
    2f5c:	4b15      	ldr	r3, [pc, #84]	; (2fb4 <SystemInit+0x194>)
    2f5e:	68ca      	ldr	r2, [r1, #12]
    2f60:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2f64:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2f66:	60cb      	str	r3, [r1, #12]
    2f68:	f3bf 8f4f 	dsb	sy
    __NOP();
    2f6c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2f6e:	e7fd      	b.n	2f6c <SystemInit+0x14c>
        uint32_t val = *word;
    2f70:	6a1b      	ldr	r3, [r3, #32]
    2f72:	f3bf 8f4f 	dsb	sy
            if (is_empty_word(&NRF_UICR_S->HFXOCNT)) {
    2f76:	3301      	adds	r3, #1
    2f78:	d0b4      	beq.n	2ee4 <SystemInit+0xc4>
        SCB->NSACR |= (3UL << 10);
    2f7a:	4b0d      	ldr	r3, [pc, #52]	; (2fb0 <SystemInit+0x190>)
    2f7c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    2f80:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
    2f84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
    2f88:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2f8c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
    2f90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    2f94:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2f98:	f3bf 8f6f 	isb	sy
}
    2f9c:	bd08      	pop	{r3, pc}
    2f9e:	bf00      	nop
    2fa0:	50004000 	.word	0x50004000
    2fa4:	5003a000 	.word	0x5003a000
    2fa8:	00ff8000 	.word	0x00ff8000
    2fac:	50039000 	.word	0x50039000
    2fb0:	e000ed00 	.word	0xe000ed00
    2fb4:	05fa0004 	.word	0x05fa0004

00002fb8 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    2fb8:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    2fba:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    2fbc:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    2fbe:	fab2 f382 	clz	r3, r2
    2fc2:	f1c3 031f 	rsb	r3, r3, #31
    2fc6:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    2fc8:	fa05 f403 	lsl.w	r4, r5, r3
    2fcc:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2fd0:	e8d0 6fef 	ldaex	r6, [r0]
    2fd4:	4296      	cmp	r6, r2
    2fd6:	d104      	bne.n	2fe2 <nrfx_flag32_alloc+0x2a>
    2fd8:	e8c0 4fec 	stlex	ip, r4, [r0]
    2fdc:	f1bc 0f00 	cmp.w	ip, #0
    2fe0:	d1f6      	bne.n	2fd0 <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    2fe2:	d1eb      	bne.n	2fbc <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    2fe4:	4801      	ldr	r0, [pc, #4]	; (2fec <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
    2fe6:	700b      	strb	r3, [r1, #0]
}
    2fe8:	bd70      	pop	{r4, r5, r6, pc}
    2fea:	bf00      	nop
    2fec:	0bad0000 	.word	0x0bad0000

00002ff0 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    2ff0:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    2ff2:	6803      	ldr	r3, [r0, #0]
    2ff4:	40cb      	lsrs	r3, r1
    2ff6:	07db      	lsls	r3, r3, #31
    2ff8:	d410      	bmi.n	301c <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    2ffa:	2301      	movs	r3, #1
    2ffc:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    2ffe:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    3000:	ea43 0102 	orr.w	r1, r3, r2
    3004:	e8d0 4fef 	ldaex	r4, [r0]
    3008:	4294      	cmp	r4, r2
    300a:	d104      	bne.n	3016 <nrfx_flag32_free+0x26>
    300c:	e8c0 1fec 	stlex	ip, r1, [r0]
    3010:	f1bc 0f00 	cmp.w	ip, #0
    3014:	d1f6      	bne.n	3004 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    3016:	d1f2      	bne.n	2ffe <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    3018:	4801      	ldr	r0, [pc, #4]	; (3020 <nrfx_flag32_free+0x30>)
}
    301a:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    301c:	4801      	ldr	r0, [pc, #4]	; (3024 <nrfx_flag32_free+0x34>)
    301e:	e7fc      	b.n	301a <nrfx_flag32_free+0x2a>
    3020:	0bad0000 	.word	0x0bad0000
    3024:	0bad0004 	.word	0x0bad0004

00003028 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    3028:	4b04      	ldr	r3, [pc, #16]	; (303c <nrfx_clock_init+0x14>)
    302a:	791a      	ldrb	r2, [r3, #4]
    302c:	b922      	cbnz	r2, 3038 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    302e:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    3030:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    3032:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    3034:	4802      	ldr	r0, [pc, #8]	; (3040 <nrfx_clock_init+0x18>)
    3036:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    3038:	4802      	ldr	r0, [pc, #8]	; (3044 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    303a:	4770      	bx	lr
    303c:	20000ec0 	.word	0x20000ec0
    3040:	0bad0000 	.word	0x0bad0000
    3044:	0bad000c 	.word	0x0bad000c

00003048 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3048:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    304c:	b510      	push	{r4, lr}
    304e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    3052:	b152      	cbz	r2, 306a <nrfx_power_clock_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3054:	2000      	movs	r0, #0
    3056:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    305a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    305e:	2201      	movs	r2, #1
    3060:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    3064:	4b11      	ldr	r3, [pc, #68]	; (30ac <nrfx_power_clock_irq_handler+0x64>)
    3066:	681b      	ldr	r3, [r3, #0]
    3068:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    306a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    306e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    3072:	b18a      	cbz	r2, 3098 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3074:	2200      	movs	r2, #0
    3076:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    307a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    307e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3082:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    3086:	f002 0203 	and.w	r2, r2, #3
    308a:	2a01      	cmp	r2, #1
    308c:	f04f 0102 	mov.w	r1, #2
    3090:	d103      	bne.n	309a <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    3092:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3096:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    3098:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    309a:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    309e:	4b03      	ldr	r3, [pc, #12]	; (30ac <nrfx_power_clock_irq_handler+0x64>)
    30a0:	2001      	movs	r0, #1
}
    30a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    30a6:	681b      	ldr	r3, [r3, #0]
    30a8:	4718      	bx	r3
    30aa:	bf00      	nop
    30ac:	20000ec0 	.word	0x20000ec0

000030b0 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    30b0:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
    30b2:	4801      	ldr	r0, [pc, #4]	; (30b8 <nrfx_dppi_channel_alloc+0x8>)
    30b4:	f7ff bf80 	b.w	2fb8 <nrfx_flag32_alloc>
    30b8:	20000050 	.word	0x20000050

000030bc <nrf_gpio_cfg_sense_set>:
    uint32_t cnf = reg->PIN_CNF[pin_number];
    30bc:	4a06      	ldr	r2, [pc, #24]	; (30d8 <nrf_gpio_cfg_sense_set+0x1c>)
    *p_pin = pin_number & 0x1F;
    30be:	f000 001f 	and.w	r0, r0, #31
    30c2:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
    30c6:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    cnf &= ~to_update;
    30ca:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    30ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    30d2:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    30d6:	4770      	bx	lr
    30d8:	50842500 	.word	0x50842500

000030dc <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    30dc:	4b03      	ldr	r3, [pc, #12]	; (30ec <pin_in_use_by_te+0x10>)
    30de:	3008      	adds	r0, #8
    30e0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    30e4:	f3c0 1040 	ubfx	r0, r0, #5, #1
    30e8:	4770      	bx	lr
    30ea:	bf00      	nop
    30ec:	20000054 	.word	0x20000054

000030f0 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    30f0:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    30f2:	4c0d      	ldr	r4, [pc, #52]	; (3128 <call_handler+0x38>)
    30f4:	f100 0308 	add.w	r3, r0, #8
    30f8:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
    30fc:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    30fe:	05da      	lsls	r2, r3, #23
{
    3100:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3102:	d507      	bpl.n	3114 <call_handler+0x24>
    3104:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    3108:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    310c:	6852      	ldr	r2, [r2, #4]
    310e:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    3112:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    3114:	68a3      	ldr	r3, [r4, #8]
    3116:	b12b      	cbz	r3, 3124 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    3118:	4631      	mov	r1, r6
    311a:	4628      	mov	r0, r5
    311c:	68e2      	ldr	r2, [r4, #12]
    }
}
    311e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    3122:	4718      	bx	r3
}
    3124:	bd70      	pop	{r4, r5, r6, pc}
    3126:	bf00      	nop
    3128:	20000054 	.word	0x20000054

0000312c <release_handler>:
{
    312c:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    312e:	4a13      	ldr	r2, [pc, #76]	; (317c <release_handler+0x50>)
    3130:	3008      	adds	r0, #8
    3132:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    3136:	05d9      	lsls	r1, r3, #23
    3138:	d51c      	bpl.n	3174 <release_handler+0x48>
    313a:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    313e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    3142:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    3146:	2000      	movs	r0, #0
    3148:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    314c:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    3150:	f413 7f80 	tst.w	r3, #256	; 0x100
    3154:	d003      	beq.n	315e <release_handler+0x32>
    3156:	f3c3 2343 	ubfx	r3, r3, #9, #4
    315a:	4299      	cmp	r1, r3
    315c:	d00a      	beq.n	3174 <release_handler+0x48>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    315e:	3001      	adds	r0, #1
    3160:	2820      	cmp	r0, #32
    3162:	d1f3      	bne.n	314c <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    3164:	2300      	movs	r3, #0
    3166:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    316a:	4805      	ldr	r0, [pc, #20]	; (3180 <release_handler+0x54>)
}
    316c:	f85d 4b04 	ldr.w	r4, [sp], #4
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    3170:	f7ff bf3e 	b.w	2ff0 <nrfx_flag32_free>
}
    3174:	f85d 4b04 	ldr.w	r4, [sp], #4
    3178:	4770      	bx	lr
    317a:	bf00      	nop
    317c:	20000054 	.word	0x20000054
    3180:	200000a8 	.word	0x200000a8

00003184 <pin_handler_trigger_uninit>:
{
    3184:	b538      	push	{r3, r4, r5, lr}
    3186:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    3188:	f7ff ffa8 	bl	30dc <pin_in_use_by_te>
    318c:	4c0b      	ldr	r4, [pc, #44]	; (31bc <pin_handler_trigger_uninit+0x38>)
    318e:	f102 0508 	add.w	r5, r2, #8
    3192:	b160      	cbz	r0, 31ae <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    3194:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3196:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    319a:	0b5b      	lsrs	r3, r3, #13
    319c:	009b      	lsls	r3, r3, #2
    319e:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    31a2:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    31a6:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF53_SERIES) || defined(NRF91_SERIES)
    p_reg->CONFIG[idx] = 0;
    31aa:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
    31ae:	4610      	mov	r0, r2
    31b0:	f7ff ffbc 	bl	312c <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    31b4:	2300      	movs	r3, #0
    31b6:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    31ba:	bd38      	pop	{r3, r4, r5, pc}
    31bc:	20000054 	.word	0x20000054

000031c0 <nrfx_gpiote_input_configure>:
{
    31c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    31c4:	4604      	mov	r4, r0
    31c6:	461d      	mov	r5, r3
    if (p_input_config)
    31c8:	b309      	cbz	r1, 320e <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    31ca:	4f4e      	ldr	r7, [pc, #312]	; (3304 <nrfx_gpiote_input_configure+0x144>)
    31cc:	f100 0808 	add.w	r8, r0, #8
    31d0:	f837 6018 	ldrh.w	r6, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    31d4:	07b3      	lsls	r3, r6, #30
    31d6:	d506      	bpl.n	31e6 <nrfx_gpiote_input_configure+0x26>
    31d8:	f7ff ff80 	bl	30dc <pin_in_use_by_te>
    31dc:	b118      	cbz	r0, 31e6 <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
    31de:	484a      	ldr	r0, [pc, #296]	; (3308 <nrfx_gpiote_input_configure+0x148>)
}
    31e0:	b002      	add	sp, #8
    31e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32_t cnf = reg->PIN_CNF[pin_number];
    31e6:	4849      	ldr	r0, [pc, #292]	; (330c <nrfx_gpiote_input_configure+0x14c>)
    *p_pin = pin_number & 0x1F;
    31e8:	f004 031f 	and.w	r3, r4, #31
    31ec:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
    31f0:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    31f4:	7809      	ldrb	r1, [r1, #0]
    cnf &= ~to_update;
    31f6:	f023 030f 	bic.w	r3, r3, #15
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    31fa:	f026 0602 	bic.w	r6, r6, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    31fe:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    3202:	f046 0601 	orr.w	r6, r6, #1
    reg->PIN_CNF[pin_number] = cnf;
    3206:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    320a:	f827 6018 	strh.w	r6, [r7, r8, lsl #1]
    if (p_trigger_config)
    320e:	b19a      	cbz	r2, 3238 <nrfx_gpiote_input_configure+0x78>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3210:	4e3c      	ldr	r6, [pc, #240]	; (3304 <nrfx_gpiote_input_configure+0x144>)
    3212:	f104 0708 	add.w	r7, r4, #8
    3216:	f836 1017 	ldrh.w	r1, [r6, r7, lsl #1]
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    321a:	7813      	ldrb	r3, [r2, #0]
        if (pin_is_output(pin))
    321c:	f011 0f02 	tst.w	r1, #2
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    3220:	6850      	ldr	r0, [r2, #4]
        if (pin_is_output(pin))
    3222:	d00c      	beq.n	323e <nrfx_gpiote_input_configure+0x7e>
            if (use_evt)
    3224:	2800      	cmp	r0, #0
    3226:	d1da      	bne.n	31de <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    3228:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
    322c:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    3230:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
    3234:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_handler_config)
    3238:	bbd5      	cbnz	r5, 32b0 <nrfx_gpiote_input_configure+0xf0>
        err = NRFX_SUCCESS;
    323a:	4835      	ldr	r0, [pc, #212]	; (3310 <nrfx_gpiote_input_configure+0x150>)
    323c:	e7d0      	b.n	31e0 <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    323e:	f021 0120 	bic.w	r1, r1, #32
    3242:	04c9      	lsls	r1, r1, #19
    3244:	0cc9      	lsrs	r1, r1, #19
    3246:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
            if (use_evt)
    324a:	2800      	cmp	r0, #0
    324c:	d0ec      	beq.n	3228 <nrfx_gpiote_input_configure+0x68>
                if (!edge)
    324e:	2b03      	cmp	r3, #3
    3250:	d8c5      	bhi.n	31de <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
    3252:	6852      	ldr	r2, [r2, #4]
    3254:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    3258:	4662      	mov	r2, ip
    325a:	0092      	lsls	r2, r2, #2
    325c:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    3260:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    3264:	b923      	cbnz	r3, 3270 <nrfx_gpiote_input_configure+0xb0>
    p_reg->CONFIG[idx] = 0;
    3266:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
    326a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
#endif
}
    326e:	e7db      	b.n	3228 <nrfx_gpiote_input_configure+0x68>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3270:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    3274:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
    3278:	f020 0003 	bic.w	r0, r0, #3
    327c:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    3280:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    3284:	f041 0120 	orr.w	r1, r1, #32
    3288:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
    328c:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    3290:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3294:	0220      	lsls	r0, r4, #8
    3296:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    329a:	f400 50f8 	and.w	r0, r0, #7936	; 0x1f00
    329e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    32a2:	ea40 000e 	orr.w	r0, r0, lr
    32a6:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    32aa:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
    32ae:	e7bb      	b.n	3228 <nrfx_gpiote_input_configure+0x68>
    release_handler(pin);
    32b0:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    32b2:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    32b6:	f7ff ff39 	bl	312c <release_handler>
    if (!handler)
    32ba:	2e00      	cmp	r6, #0
    32bc:	d0bd      	beq.n	323a <nrfx_gpiote_input_configure+0x7a>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    32be:	4d11      	ldr	r5, [pc, #68]	; (3304 <nrfx_gpiote_input_configure+0x144>)
    32c0:	e9d5 2300 	ldrd	r2, r3, [r5]
    32c4:	4296      	cmp	r6, r2
    32c6:	d101      	bne.n	32cc <nrfx_gpiote_input_configure+0x10c>
    32c8:	429f      	cmp	r7, r3
    32ca:	d018      	beq.n	32fe <nrfx_gpiote_input_configure+0x13e>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    32cc:	4811      	ldr	r0, [pc, #68]	; (3314 <nrfx_gpiote_input_configure+0x154>)
    32ce:	f10d 0107 	add.w	r1, sp, #7
    32d2:	f7ff fe71 	bl	2fb8 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    32d6:	4b0e      	ldr	r3, [pc, #56]	; (3310 <nrfx_gpiote_input_configure+0x150>)
    32d8:	4298      	cmp	r0, r3
    32da:	d181      	bne.n	31e0 <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
    32dc:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].p_context = p_context;
    32e0:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    32e4:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    32e6:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    32e8:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
    32ec:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    32f0:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    32f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    32f8:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    32fc:	e79d      	b.n	323a <nrfx_gpiote_input_configure+0x7a>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    32fe:	2200      	movs	r2, #0
    3300:	e7ee      	b.n	32e0 <nrfx_gpiote_input_configure+0x120>
    3302:	bf00      	nop
    3304:	20000054 	.word	0x20000054
    3308:	0bad0004 	.word	0x0bad0004
    330c:	50842500 	.word	0x50842500
    3310:	0bad0000 	.word	0x0bad0000
    3314:	200000a8 	.word	0x200000a8

00003318 <nrfx_gpiote_output_configure>:
{
    3318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    331a:	4604      	mov	r4, r0
    if (p_config)
    331c:	b379      	cbz	r1, 337e <nrfx_gpiote_output_configure+0x66>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    331e:	4e3a      	ldr	r6, [pc, #232]	; (3408 <nrfx_gpiote_output_configure+0xf0>)
    3320:	f100 0708 	add.w	r7, r0, #8
    3324:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    3328:	07ab      	lsls	r3, r5, #30
    332a:	d404      	bmi.n	3336 <nrfx_gpiote_output_configure+0x1e>
    332c:	f7ff fed6 	bl	30dc <pin_in_use_by_te>
    3330:	b108      	cbz	r0, 3336 <nrfx_gpiote_output_configure+0x1e>
{
    3332:	4836      	ldr	r0, [pc, #216]	; (340c <nrfx_gpiote_output_configure+0xf4>)
}
    3334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    3336:	f015 0f1c 	tst.w	r5, #28
    333a:	784b      	ldrb	r3, [r1, #1]
    333c:	d122      	bne.n	3384 <nrfx_gpiote_output_configure+0x6c>
    *p_pin = pin_number & 0x1F;
    333e:	f004 001f 	and.w	r0, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
    3342:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 3410 <nrfx_gpiote_output_configure+0xf8>
    3346:	f100 0e80 	add.w	lr, r0, #128	; 0x80
    334a:	f85c c02e 	ldr.w	ip, [ip, lr, lsl #2]
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    334e:	f891 e002 	ldrb.w	lr, [r1, #2]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    3352:	005b      	lsls	r3, r3, #1
    cnf &= ~to_update;
    3354:	f42c 6ce1 	bic.w	ip, ip, #1800	; 0x708
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    3358:	7809      	ldrb	r1, [r1, #0]
    335a:	ea43 038e 	orr.w	r3, r3, lr, lsl #2
    cnf &= ~to_update;
    335e:	f02c 0c07 	bic.w	ip, ip, #7
    3362:	ea43 030c 	orr.w	r3, r3, ip
    3366:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    336a:	4929      	ldr	r1, [pc, #164]	; (3410 <nrfx_gpiote_output_configure+0xf8>)
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    336c:	f043 0301 	orr.w	r3, r3, #1
    reg->PIN_CNF[pin_number] = cnf;
    3370:	3080      	adds	r0, #128	; 0x80
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    3372:	f045 0503 	orr.w	r5, r5, #3
    3376:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
    337a:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    if (p_task_config)
    337e:	b922      	cbnz	r2, 338a <nrfx_gpiote_output_configure+0x72>
    return NRFX_SUCCESS;
    3380:	4824      	ldr	r0, [pc, #144]	; (3414 <nrfx_gpiote_output_configure+0xfc>)
    3382:	e7d7      	b.n	3334 <nrfx_gpiote_output_configure+0x1c>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    3384:	2b01      	cmp	r3, #1
    3386:	d1da      	bne.n	333e <nrfx_gpiote_output_configure+0x26>
    3388:	e7d3      	b.n	3332 <nrfx_gpiote_output_configure+0x1a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    338a:	4e1f      	ldr	r6, [pc, #124]	; (3408 <nrfx_gpiote_output_configure+0xf0>)
    338c:	f104 0708 	add.w	r7, r4, #8
    3390:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    3394:	0783      	lsls	r3, r0, #30
    3396:	d5cc      	bpl.n	3332 <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
    3398:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
    339c:	2300      	movs	r3, #0
    339e:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    33a0:	f020 0020 	bic.w	r0, r0, #32
    33a4:	0089      	lsls	r1, r1, #2
    33a6:	f101 41a0 	add.w	r1, r1, #1342177280	; 0x50000000
    33aa:	04c0      	lsls	r0, r0, #19
    33ac:	f501 4150 	add.w	r1, r1, #53248	; 0xd000
    33b0:	0cc0      	lsrs	r0, r0, #19
    33b2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    33b6:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
    33ba:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    33be:	7855      	ldrb	r5, [r2, #1]
    33c0:	2d00      	cmp	r5, #0
    33c2:	d0dd      	beq.n	3380 <nrfx_gpiote_output_configure+0x68>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    33c4:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    33c8:	7892      	ldrb	r2, [r2, #2]
    33ca:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
    33ce:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    33d2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    33d6:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    33da:	0223      	lsls	r3, r4, #8
    33dc:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    33e0:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    33e2:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    33e6:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    33ea:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    33ec:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    33ee:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    33f2:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    33f6:	4313      	orrs	r3, r2
    33f8:	f040 0020 	orr.w	r0, r0, #32
    33fc:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    3400:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    3404:	e7bc      	b.n	3380 <nrfx_gpiote_output_configure+0x68>
    3406:	bf00      	nop
    3408:	20000054 	.word	0x20000054
    340c:	0bad0004 	.word	0x0bad0004
    3410:	50842500 	.word	0x50842500
    3414:	0bad0000 	.word	0x0bad0000

00003418 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    3418:	4b01      	ldr	r3, [pc, #4]	; (3420 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    341a:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    341e:	4770      	bx	lr
    3420:	20000054 	.word	0x20000054

00003424 <nrfx_gpiote_channel_get>:
{
    3424:	b508      	push	{r3, lr}
    3426:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    3428:	f7ff fe58 	bl	30dc <pin_in_use_by_te>
    342c:	b138      	cbz	r0, 343e <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    342e:	4b05      	ldr	r3, [pc, #20]	; (3444 <nrfx_gpiote_channel_get+0x20>)
    3430:	3208      	adds	r2, #8
    3432:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
    3436:	4804      	ldr	r0, [pc, #16]	; (3448 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3438:	0b5b      	lsrs	r3, r3, #13
    343a:	700b      	strb	r3, [r1, #0]
}
    343c:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    343e:	4803      	ldr	r0, [pc, #12]	; (344c <nrfx_gpiote_channel_get+0x28>)
    3440:	e7fc      	b.n	343c <nrfx_gpiote_channel_get+0x18>
    3442:	bf00      	nop
    3444:	20000054 	.word	0x20000054
    3448:	0bad0000 	.word	0x0bad0000
    344c:	0bad0004 	.word	0x0bad0004

00003450 <nrfx_gpiote_init>:
{
    3450:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    3452:	4c0f      	ldr	r4, [pc, #60]	; (3490 <nrfx_gpiote_init+0x40>)
    3454:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
    3458:	b9bd      	cbnz	r5, 348a <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    345a:	2240      	movs	r2, #64	; 0x40
    345c:	4629      	mov	r1, r5
    345e:	f104 0010 	add.w	r0, r4, #16
    3462:	f002 fcb6 	bl	5dd2 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    3466:	200d      	movs	r0, #13
    3468:	f7fe fa6a 	bl	1940 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    346c:	4b09      	ldr	r3, [pc, #36]	; (3494 <nrfx_gpiote_init+0x44>)
    return err_code;
    346e:	480a      	ldr	r0, [pc, #40]	; (3498 <nrfx_gpiote_init+0x48>)
    3470:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    3474:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    3478:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    347c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    3480:	2301      	movs	r3, #1
    3482:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    3486:	6563      	str	r3, [r4, #84]	; 0x54
}
    3488:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    348a:	4804      	ldr	r0, [pc, #16]	; (349c <nrfx_gpiote_init+0x4c>)
    348c:	e7fc      	b.n	3488 <nrfx_gpiote_init+0x38>
    348e:	bf00      	nop
    3490:	20000054 	.word	0x20000054
    3494:	5000d000 	.word	0x5000d000
    3498:	0bad0000 	.word	0x0bad0000
    349c:	0bad0005 	.word	0x0bad0005

000034a0 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    34a0:	4b03      	ldr	r3, [pc, #12]	; (34b0 <nrfx_gpiote_is_init+0x10>)
    34a2:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
    34a6:	3800      	subs	r0, #0
    34a8:	bf18      	it	ne
    34aa:	2001      	movne	r0, #1
    34ac:	4770      	bx	lr
    34ae:	bf00      	nop
    34b0:	20000054 	.word	0x20000054

000034b4 <nrfx_gpiote_channel_free>:
{
    34b4:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    34b6:	4801      	ldr	r0, [pc, #4]	; (34bc <nrfx_gpiote_channel_free+0x8>)
    34b8:	f7ff bd9a 	b.w	2ff0 <nrfx_flag32_free>
    34bc:	200000a4 	.word	0x200000a4

000034c0 <nrfx_gpiote_channel_alloc>:
{
    34c0:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    34c2:	4801      	ldr	r0, [pc, #4]	; (34c8 <nrfx_gpiote_channel_alloc+0x8>)
    34c4:	f7ff bd78 	b.w	2fb8 <nrfx_flag32_alloc>
    34c8:	200000a4 	.word	0x200000a4

000034cc <nrfx_gpiote_trigger_enable>:
{
    34cc:	4602      	mov	r2, r0
    34ce:	b510      	push	{r4, lr}
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    34d0:	f7ff fe04 	bl	30dc <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    34d4:	4b1c      	ldr	r3, [pc, #112]	; (3548 <nrfx_gpiote_trigger_enable+0x7c>)
    34d6:	f102 0408 	add.w	r4, r2, #8
    34da:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    34de:	b1e0      	cbz	r0, 351a <nrfx_gpiote_trigger_enable+0x4e>
    34e0:	f013 0402 	ands.w	r4, r3, #2
    34e4:	d119      	bne.n	351a <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    34e6:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    34e8:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    34ea:	f102 40a0 	add.w	r0, r2, #1342177280	; 0x50000000
    34ee:	f500 4051 	add.w	r0, r0, #53504	; 0xd100
    34f2:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    34f6:	6004      	str	r4, [r0, #0]
    34f8:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    34fc:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    34fe:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    3502:	f040 0001 	orr.w	r0, r0, #1
    3506:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    350a:	b129      	cbz	r1, 3518 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    350c:	2201      	movs	r2, #1
    350e:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    3512:	4a0e      	ldr	r2, [pc, #56]	; (354c <nrfx_gpiote_trigger_enable+0x80>)
    3514:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    3518:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    351a:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    351e:	2b04      	cmp	r3, #4
    3520:	d00e      	beq.n	3540 <nrfx_gpiote_trigger_enable+0x74>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    3522:	2b05      	cmp	r3, #5
    3524:	d00e      	beq.n	3544 <nrfx_gpiote_trigger_enable+0x78>
    return p_reg->IN;
    3526:	4b0a      	ldr	r3, [pc, #40]	; (3550 <nrfx_gpiote_trigger_enable+0x84>)
    3528:	6919      	ldr	r1, [r3, #16]
    *p_pin = pin_number & 0x1F;
    352a:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    352e:	40d9      	lsrs	r1, r3
    3530:	f001 0101 	and.w	r1, r1, #1
    3534:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    3536:	4610      	mov	r0, r2
}
    3538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    353c:	f7ff bdbe 	b.w	30bc <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    3540:	2103      	movs	r1, #3
    3542:	e7f8      	b.n	3536 <nrfx_gpiote_trigger_enable+0x6a>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    3544:	2102      	movs	r1, #2
    3546:	e7f6      	b.n	3536 <nrfx_gpiote_trigger_enable+0x6a>
    3548:	20000054 	.word	0x20000054
    354c:	5000d000 	.word	0x5000d000
    3550:	50842500 	.word	0x50842500

00003554 <nrfx_gpiote_trigger_disable>:
{
    3554:	b508      	push	{r3, lr}
    3556:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3558:	f7ff fdc0 	bl	30dc <pin_in_use_by_te>
    355c:	b1c0      	cbz	r0, 3590 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    355e:	4b0f      	ldr	r3, [pc, #60]	; (359c <nrfx_gpiote_trigger_disable+0x48>)
    3560:	f102 0108 	add.w	r1, r2, #8
    3564:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3568:	0799      	lsls	r1, r3, #30
    356a:	d411      	bmi.n	3590 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    356c:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    356e:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    3570:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    3572:	490b      	ldr	r1, [pc, #44]	; (35a0 <nrfx_gpiote_trigger_disable+0x4c>)
    3574:	009b      	lsls	r3, r3, #2
    3576:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    357a:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    357e:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    3582:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    3586:	f022 0203 	bic.w	r2, r2, #3
    358a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    358e:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3590:	2100      	movs	r1, #0
}
    3592:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3596:	4610      	mov	r0, r2
    3598:	f7ff bd90 	b.w	30bc <nrf_gpio_cfg_sense_set>
    359c:	20000054 	.word	0x20000054
    35a0:	5000d000 	.word	0x5000d000

000035a4 <nrfx_gpiote_pin_uninit>:
{
    35a4:	b510      	push	{r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    35a6:	4b0c      	ldr	r3, [pc, #48]	; (35d8 <nrfx_gpiote_pin_uninit+0x34>)
    35a8:	f100 0208 	add.w	r2, r0, #8
    35ac:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
    35b0:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    35b2:	07db      	lsls	r3, r3, #31
    35b4:	d50d      	bpl.n	35d2 <nrfx_gpiote_pin_uninit+0x2e>
    nrfx_gpiote_trigger_disable(pin);
    35b6:	f7ff ffcd 	bl	3554 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    35ba:	4620      	mov	r0, r4
    35bc:	f7ff fde2 	bl	3184 <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
    35c0:	2202      	movs	r2, #2
    35c2:	4b06      	ldr	r3, [pc, #24]	; (35dc <nrfx_gpiote_pin_uninit+0x38>)
    *p_pin = pin_number & 0x1F;
    35c4:	f004 041f 	and.w	r4, r4, #31
    reg->PIN_CNF[pin_number] = cnf;
    35c8:	3480      	adds	r4, #128	; 0x80
    35ca:	4805      	ldr	r0, [pc, #20]	; (35e0 <nrfx_gpiote_pin_uninit+0x3c>)
    35cc:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
}
    35d0:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    35d2:	4804      	ldr	r0, [pc, #16]	; (35e4 <nrfx_gpiote_pin_uninit+0x40>)
    35d4:	e7fc      	b.n	35d0 <nrfx_gpiote_pin_uninit+0x2c>
    35d6:	bf00      	nop
    35d8:	20000054 	.word	0x20000054
    35dc:	50842500 	.word	0x50842500
    35e0:	0bad0000 	.word	0x0bad0000
    35e4:	0bad0004 	.word	0x0bad0004

000035e8 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    35e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
    35ec:	2500      	movs	r5, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    35ee:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    35f0:	462c      	mov	r4, r5
{
    35f2:	4b4d      	ldr	r3, [pc, #308]	; (3728 <nrfx_gpiote_irq_handler+0x140>)
    return p_reg->INTENSET & mask;
    35f4:	484d      	ldr	r0, [pc, #308]	; (372c <nrfx_gpiote_irq_handler+0x144>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    35f6:	494e      	ldr	r1, [pc, #312]	; (3730 <nrfx_gpiote_irq_handler+0x148>)
{
    35f8:	b085      	sub	sp, #20
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    35fa:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    35fc:	b136      	cbz	r6, 360c <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    35fe:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    3602:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3604:	bf1e      	ittt	ne
    3606:	601c      	strne	r4, [r3, #0]
    3608:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    360a:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    360c:	3304      	adds	r3, #4
    360e:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    3610:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3614:	d1f1      	bne.n	35fa <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3616:	4f45      	ldr	r7, [pc, #276]	; (372c <nrfx_gpiote_irq_handler+0x144>)
    3618:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    361c:	b193      	cbz	r3, 3644 <nrfx_gpiote_irq_handler+0x5c>
        *p_masks = gpio_regs[i]->LATCH;
    361e:	4e45      	ldr	r6, [pc, #276]	; (3734 <nrfx_gpiote_irq_handler+0x14c>)
    3620:	6a33      	ldr	r3, [r6, #32]
    3622:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
    3624:	6233      	str	r3, [r6, #32]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    3626:	f04f 0a01 	mov.w	sl, #1
    362a:	f10d 090c 	add.w	r9, sp, #12
            while (latch[i])
    362e:	9803      	ldr	r0, [sp, #12]
    3630:	b970      	cbnz	r0, 3650 <nrfx_gpiote_irq_handler+0x68>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3632:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
    3636:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    363a:	6a33      	ldr	r3, [r6, #32]
    363c:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
    363e:	6233      	str	r3, [r6, #32]
        if (latch[port_idx])
    3640:	2b00      	cmp	r3, #0
    3642:	d1f0      	bne.n	3626 <nrfx_gpiote_irq_handler+0x3e>
        mask &= ~NRFX_BIT(ch);
    3644:	2401      	movs	r4, #1
    while (mask)
    3646:	2d00      	cmp	r5, #0
    3648:	d156      	bne.n	36f8 <nrfx_gpiote_irq_handler+0x110>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    364a:	b005      	add	sp, #20
    364c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
    3650:	fa90 fba0 	rbit	fp, r0
    3654:	fabb fb8b 	clz	fp, fp
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3658:	4a37      	ldr	r2, [pc, #220]	; (3738 <nrfx_gpiote_irq_handler+0x150>)
    365a:	f10b 0308 	add.w	r3, fp, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    365e:	ea4f 0cdb 	mov.w	ip, fp, lsr #3
    3662:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    bit = BITMASK_RELBIT_GET(bit);
    3666:	f00b 0407 	and.w	r4, fp, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    366a:	f819 300c 	ldrb.w	r3, [r9, ip]
    366e:	fa0a f404 	lsl.w	r4, sl, r4
    3672:	ea23 0304 	bic.w	r3, r3, r4
    3676:	f809 300c 	strb.w	r3, [r9, ip]
    367a:	eb06 038b 	add.w	r3, r6, fp, lsl #2
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    367e:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    3682:	f3c1 0282 	ubfx	r2, r1, #2, #3
    if (is_level(trigger))
    3686:	06c9      	lsls	r1, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3688:	4690      	mov	r8, r2
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    368a:	f3c4 4401 	ubfx	r4, r4, #16, #2
    if (is_level(trigger))
    368e:	d518      	bpl.n	36c2 <nrfx_gpiote_irq_handler+0xda>
        call_handler(pin, trigger);
    3690:	4611      	mov	r1, r2
    3692:	4658      	mov	r0, fp
    3694:	9301      	str	r3, [sp, #4]
    3696:	f7ff fd2b 	bl	30f0 <call_handler>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    369a:	9b01      	ldr	r3, [sp, #4]
    369c:	b2e4      	uxtb	r4, r4
    369e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
        if (nrf_gpio_pin_sense_get(pin) == sense)
    36a2:	f3c3 4301 	ubfx	r3, r3, #16, #2
    36a6:	429c      	cmp	r4, r3
    36a8:	d107      	bne.n	36ba <nrfx_gpiote_irq_handler+0xd2>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    36aa:	2100      	movs	r1, #0
    36ac:	4658      	mov	r0, fp
    36ae:	f7ff fd05 	bl	30bc <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    36b2:	4621      	mov	r1, r4
    36b4:	4658      	mov	r0, fp
    36b6:	f7ff fd01 	bl	30bc <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
    36ba:	fa0a f00b 	lsl.w	r0, sl, fp
    36be:	6230      	str	r0, [r6, #32]
}
    36c0:	e7b5      	b.n	362e <nrfx_gpiote_irq_handler+0x46>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    36c2:	2c02      	cmp	r4, #2
    36c4:	d10c      	bne.n	36e0 <nrfx_gpiote_irq_handler+0xf8>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    36c6:	2103      	movs	r1, #3
    36c8:	4658      	mov	r0, fp
    36ca:	f7ff fcf7 	bl	30bc <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    36ce:	f008 0305 	and.w	r3, r8, #5
    36d2:	2b01      	cmp	r3, #1
    36d4:	d1f1      	bne.n	36ba <nrfx_gpiote_irq_handler+0xd2>
            call_handler(pin, trigger);
    36d6:	4641      	mov	r1, r8
    36d8:	4658      	mov	r0, fp
    36da:	f7ff fd09 	bl	30f0 <call_handler>
    36de:	e7ec      	b.n	36ba <nrfx_gpiote_irq_handler+0xd2>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    36e0:	2102      	movs	r1, #2
    36e2:	4658      	mov	r0, fp
    36e4:	9201      	str	r2, [sp, #4]
    36e6:	f7ff fce9 	bl	30bc <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    36ea:	9a01      	ldr	r2, [sp, #4]
    36ec:	2a03      	cmp	r2, #3
    36ee:	d0f2      	beq.n	36d6 <nrfx_gpiote_irq_handler+0xee>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    36f0:	2c03      	cmp	r4, #3
    36f2:	d1e2      	bne.n	36ba <nrfx_gpiote_irq_handler+0xd2>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    36f4:	428a      	cmp	r2, r1
    36f6:	e7ed      	b.n	36d4 <nrfx_gpiote_irq_handler+0xec>
        uint32_t ch = NRF_CTZ(mask);
    36f8:	fa95 f3a5 	rbit	r3, r5
    36fc:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    3700:	fa04 f203 	lsl.w	r2, r4, r3
    3704:	009b      	lsls	r3, r3, #2
    3706:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    370a:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    370e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    3712:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    3716:	f3c0 2004 	ubfx	r0, r0, #8, #5
    371a:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
    371e:	ea25 0502 	bic.w	r5, r5, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    3722:	f7ff fce5 	bl	30f0 <call_handler>
    3726:	e78e      	b.n	3646 <nrfx_gpiote_irq_handler+0x5e>
    3728:	5000d100 	.word	0x5000d100
    372c:	5000d000 	.word	0x5000d000
    3730:	5000d120 	.word	0x5000d120
    3734:	50842500 	.word	0x50842500
    3738:	20000054 	.word	0x20000054

0000373c <nvmc_readonly_mode_set>:

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
    373c:	2200      	movs	r2, #0
    373e:	4b03      	ldr	r3, [pc, #12]	; (374c <nvmc_readonly_mode_set+0x10>)
    3740:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    3744:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_READONLY);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_READONLY);
#endif
}
    3748:	4770      	bx	lr
    374a:	bf00      	nop
    374c:	50039000 	.word	0x50039000

00003750 <nvmc_word_write>:
    return (bool)(p_reg->READYNEXT & NVMC_READYNEXT_READYNEXT_Msk);
    3750:	4a04      	ldr	r2, [pc, #16]	; (3764 <nvmc_word_write+0x14>)
    3752:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
}

static void nvmc_word_write(uint32_t addr, uint32_t value)
{
#if defined(NRF91_SERIES)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    3756:	07db      	lsls	r3, r3, #31
    3758:	d5fb      	bpl.n	3752 <nvmc_word_write+0x2>
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
#endif

    *(volatile uint32_t *)addr = value;
    375a:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    375c:	f3bf 8f5f 	dmb	sy
    __DMB();
}
    3760:	4770      	bx	lr
    3762:	bf00      	nop
    3764:	50039000 	.word	0x50039000

00003768 <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    3768:	b508      	push	{r3, lr}
    return !(addr % flash_page_size_get());
    376a:	f3c0 030b 	ubfx	r3, r0, #0, #12
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
    376e:	b983      	cbnz	r3, 3792 <nrfx_nvmc_page_erase+0x2a>
    p_reg->CONFIGNS = (uint32_t)mode;
    3770:	2202      	movs	r2, #2
    3772:	4b09      	ldr	r3, [pc, #36]	; (3798 <nrfx_nvmc_page_erase+0x30>)
    3774:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    3778:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF53_SERIES) || defined(NRF91_SERIES)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
    377c:	f04f 32ff 	mov.w	r2, #4294967295
    3780:	6002      	str	r2, [r0, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    3782:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    3786:	07d2      	lsls	r2, r2, #31
    3788:	d5fb      	bpl.n	3782 <nrfx_nvmc_page_erase+0x1a>
    {}
    nvmc_readonly_mode_set();
    378a:	f7ff ffd7 	bl	373c <nvmc_readonly_mode_set>

    return NRFX_SUCCESS;
    378e:	4803      	ldr	r0, [pc, #12]	; (379c <nrfx_nvmc_page_erase+0x34>)
}
    3790:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_ADDR;
    3792:	4803      	ldr	r0, [pc, #12]	; (37a0 <nrfx_nvmc_page_erase+0x38>)
    3794:	e7fc      	b.n	3790 <nrfx_nvmc_page_erase+0x28>
    3796:	bf00      	nop
    3798:	50039000 	.word	0x50039000
    379c:	0bad0000 	.word	0x0bad0000
    37a0:	0bad000a 	.word	0x0bad000a

000037a4 <nrfx_nvmc_word_write>:
    p_reg->CONFIGNS = (uint32_t)mode;
    37a4:	2201      	movs	r2, #1

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
    37a6:	b508      	push	{r3, lr}
    37a8:	4b05      	ldr	r3, [pc, #20]	; (37c0 <nrfx_nvmc_word_write+0x1c>)
    37aa:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    37ae:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
    37b2:	f7ff ffcd 	bl	3750 <nvmc_word_write>

    nvmc_readonly_mode_set();
}
    37b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nvmc_readonly_mode_set();
    37ba:	f7ff bfbf 	b.w	373c <nvmc_readonly_mode_set>
    37be:	bf00      	nop
    37c0:	50039000 	.word	0x50039000

000037c4 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    37c4:	4b10      	ldr	r3, [pc, #64]	; (3808 <z_sys_init_run_level+0x44>)
{
    37c6:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    37c8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    37cc:	3001      	adds	r0, #1
    37ce:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    37d2:	42a6      	cmp	r6, r4
    37d4:	d800      	bhi.n	37d8 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
    37d6:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
    37d8:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
    37dc:	b18d      	cbz	r5, 3802 <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
    37de:	4628      	mov	r0, r5
    37e0:	4798      	blx	r3
			if (rc != 0) {
    37e2:	b138      	cbz	r0, 37f4 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    37e4:	2800      	cmp	r0, #0
    37e6:	bfb8      	it	lt
    37e8:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
    37ea:	28ff      	cmp	r0, #255	; 0xff
    37ec:	bfa8      	it	ge
    37ee:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    37f0:	68eb      	ldr	r3, [r5, #12]
    37f2:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    37f4:	68ea      	ldr	r2, [r5, #12]
    37f6:	7853      	ldrb	r3, [r2, #1]
    37f8:	f043 0301 	orr.w	r3, r3, #1
    37fc:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    37fe:	3408      	adds	r4, #8
    3800:	e7e7      	b.n	37d2 <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
    3802:	4798      	blx	r3
    3804:	e7fb      	b.n	37fe <z_sys_init_run_level+0x3a>
    3806:	bf00      	nop
    3808:	00006b80 	.word	0x00006b80

0000380c <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    380c:	2201      	movs	r2, #1
{
    380e:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    3810:	4b08      	ldr	r3, [pc, #32]	; (3834 <bg_thread_main+0x28>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    3812:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    3814:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    3816:	f7ff ffd5 	bl	37c4 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    381a:	f000 f91b 	bl	3a54 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    381e:	2004      	movs	r0, #4
    3820:	f7ff ffd0 	bl	37c4 <z_sys_init_run_level>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
    3824:	f7fc fdf6 	bl	414 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    3828:	4a03      	ldr	r2, [pc, #12]	; (3838 <bg_thread_main+0x2c>)
    382a:	7b13      	ldrb	r3, [r2, #12]
    382c:	f023 0301 	bic.w	r3, r3, #1
    3830:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    3832:	bd08      	pop	{r3, pc}
    3834:	20000fe9 	.word	0x20000fe9
    3838:	20000148 	.word	0x20000148

0000383c <z_bss_zero>:
{
    383c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    383e:	4803      	ldr	r0, [pc, #12]	; (384c <z_bss_zero+0x10>)
    3840:	4a03      	ldr	r2, [pc, #12]	; (3850 <z_bss_zero+0x14>)
    3842:	2100      	movs	r1, #0
    3844:	1a12      	subs	r2, r2, r0
    3846:	f002 fea2 	bl	658e <z_early_memset>
}
    384a:	bd08      	pop	{r3, pc}
    384c:	20000128 	.word	0x20000128
    3850:	20000fec 	.word	0x20000fec

00003854 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
    3854:	b508      	push	{r3, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    3856:	2000      	movs	r0, #0
    3858:	f7ff ffb4 	bl	37c4 <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    385c:	4b16      	ldr	r3, [pc, #88]	; (38b8 <z_cstart+0x64>)
	uint32_t msp =
    385e:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    3862:	f382 8808 	msr	MSP, r2
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    3866:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    386a:	2500      	movs	r5, #0
    386c:	23e0      	movs	r3, #224	; 0xe0
    386e:	4c13      	ldr	r4, [pc, #76]	; (38bc <z_cstart+0x68>)
    3870:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    3874:	77e5      	strb	r5, [r4, #31]
    3876:	7625      	strb	r5, [r4, #24]
    3878:	7665      	strb	r5, [r4, #25]
    387a:	76a5      	strb	r5, [r4, #26]
    387c:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    3880:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3882:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    3886:	6263      	str	r3, [r4, #36]	; 0x24
    3888:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    388c:	f7fe fa42 	bl	1d14 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    3890:	f7fe f836 	bl	1900 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    3894:	f04f 33ff 	mov.w	r3, #4294967295
    3898:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    389a:	62e3      	str	r3, [r4, #44]	; 0x2c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    389c:	f002 fe5b 	bl	6556 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    38a0:	2001      	movs	r0, #1
    38a2:	f7ff ff8f 	bl	37c4 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    38a6:	2002      	movs	r0, #2
    38a8:	f7ff ff8c 	bl	37c4 <z_sys_init_run_level>
#else
#ifdef ARCH_SWITCH_TO_MAIN_NO_MULTITHREADING
	/* Custom ARCH-specific routine to switch to main()
	 * in the case of no multi-threading.
	 */
	ARCH_SWITCH_TO_MAIN_NO_MULTITHREADING(bg_thread_main,
    38ac:	462b      	mov	r3, r5
    38ae:	462a      	mov	r2, r5
    38b0:	4629      	mov	r1, r5
    38b2:	4803      	ldr	r0, [pc, #12]	; (38c0 <z_cstart+0x6c>)
    38b4:	f7fe f8cc 	bl	1a50 <z_arm_switch_to_main_no_multithreading>
    38b8:	20000ff0 	.word	0x20000ff0
    38bc:	e000ed00 	.word	0xe000ed00
    38c0:	0000380d 	.word	0x0000380d

000038c4 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    38c4:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    38c6:	4806      	ldr	r0, [pc, #24]	; (38e0 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    38c8:	4a06      	ldr	r2, [pc, #24]	; (38e4 <z_data_copy+0x20>)
    38ca:	4907      	ldr	r1, [pc, #28]	; (38e8 <z_data_copy+0x24>)
    38cc:	1a12      	subs	r2, r2, r0
    38ce:	f002 fe60 	bl	6592 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    38d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    38d6:	4a05      	ldr	r2, [pc, #20]	; (38ec <z_data_copy+0x28>)
    38d8:	4905      	ldr	r1, [pc, #20]	; (38f0 <z_data_copy+0x2c>)
    38da:	4806      	ldr	r0, [pc, #24]	; (38f4 <z_data_copy+0x30>)
    38dc:	f002 be59 	b.w	6592 <z_early_memcpy>
    38e0:	20000000 	.word	0x20000000
    38e4:	20000122 	.word	0x20000122
    38e8:	00006ed4 	.word	0x00006ed4
    38ec:	00000000 	.word	0x00000000
    38f0:	00006ed4 	.word	0x00006ed4
    38f4:	20000000 	.word	0x20000000

000038f8 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    38f8:	4b03      	ldr	r3, [pc, #12]	; (3908 <elapsed+0x10>)
    38fa:	681b      	ldr	r3, [r3, #0]
    38fc:	b90b      	cbnz	r3, 3902 <elapsed+0xa>
    38fe:	f7ff b98f 	b.w	2c20 <sys_clock_elapsed>
}
    3902:	2000      	movs	r0, #0
    3904:	4770      	bx	lr
    3906:	bf00      	nop
    3908:	20000ec8 	.word	0x20000ec8

0000390c <next_timeout>:

static int32_t next_timeout(void)
{
    390c:	b510      	push	{r4, lr}
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    390e:	4b0e      	ldr	r3, [pc, #56]	; (3948 <next_timeout+0x3c>)
    3910:	681c      	ldr	r4, [r3, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3912:	429c      	cmp	r4, r3
    3914:	d104      	bne.n	3920 <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    3916:	f7ff ffef 	bl	38f8 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    391a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
    391e:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    3920:	f7ff ffea 	bl	38f8 <elapsed>
	if ((to == NULL) ||
    3924:	2c00      	cmp	r4, #0
    3926:	d0f8      	beq.n	391a <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    3928:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    392c:	1a1b      	subs	r3, r3, r0
    392e:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    3932:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    3936:	f172 0100 	sbcs.w	r1, r2, #0
    393a:	daee      	bge.n	391a <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    393c:	2a00      	cmp	r2, #0
    393e:	bfac      	ite	ge
    3940:	4618      	movge	r0, r3
    3942:	2000      	movlt	r0, #0
	return ret;
    3944:	e7eb      	b.n	391e <next_timeout+0x12>
    3946:	bf00      	nop
    3948:	200000b0 	.word	0x200000b0

0000394c <remove_timeout>:
{
    394c:	b530      	push	{r4, r5, lr}
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    394e:	b170      	cbz	r0, 396e <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    3950:	4b0b      	ldr	r3, [pc, #44]	; (3980 <remove_timeout+0x34>)
    3952:	685b      	ldr	r3, [r3, #4]
    3954:	4298      	cmp	r0, r3
    3956:	d00a      	beq.n	396e <remove_timeout+0x22>
    3958:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    395a:	b143      	cbz	r3, 396e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    395c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    3960:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    3964:	1912      	adds	r2, r2, r4
    3966:	eb41 0105 	adc.w	r1, r1, r5
    396a:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    396e:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    3972:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    3974:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    3976:	2300      	movs	r3, #0
	node->prev = NULL;
    3978:	e9c0 3300 	strd	r3, r3, [r0]
}
    397c:	bd30      	pop	{r4, r5, pc}
    397e:	bf00      	nop
    3980:	200000b0 	.word	0x200000b0

00003984 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
    3984:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
    3988:	f04f 0320 	mov.w	r3, #32
    398c:	f3ef 8711 	mrs	r7, BASEPRI
    3990:	f383 8812 	msr	BASEPRI_MAX, r3
    3994:	f3bf 8f6f 	isb	sy
	return list->head == list;
    3998:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 3a50 <sys_clock_announce+0xcc>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    399c:	4e2a      	ldr	r6, [pc, #168]	; (3a48 <sys_clock_announce+0xc4>)
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
		t->dticks = 0;
    399e:	f04f 0a00 	mov.w	sl, #0
	announce_remaining = ticks;
    39a2:	6030      	str	r0, [r6, #0]
    39a4:	f8d9 0000 	ldr.w	r0, [r9]
		t->dticks = 0;
    39a8:	f04f 0b00 	mov.w	fp, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
    39ac:	4548      	cmp	r0, r9
    39ae:	bf08      	it	eq
    39b0:	2000      	moveq	r0, #0
		curr_tick += dt;
    39b2:	4c26      	ldr	r4, [pc, #152]	; (3a4c <sys_clock_announce+0xc8>)
    39b4:	463d      	mov	r5, r7
    39b6:	e9d4 1e00 	ldrd	r1, lr, [r4]
	     (t != NULL) && (t->dticks <= announce_remaining);
    39ba:	6833      	ldr	r3, [r6, #0]
    39bc:	b388      	cbz	r0, 3a22 <sys_clock_announce+0x9e>
    39be:	e9d0 8704 	ldrd	r8, r7, [r0, #16]
    39c2:	ea4f 7ce3 	mov.w	ip, r3, asr #31
    39c6:	4543      	cmp	r3, r8
    39c8:	eb7c 0207 	sbcs.w	r2, ip, r7
    39cc:	da06      	bge.n	39dc <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
    39ce:	ebb8 0203 	subs.w	r2, r8, r3
    39d2:	eb67 070c 	sbc.w	r7, r7, ip
    39d6:	e9c0 2704 	strd	r2, r7, [r0, #16]
    39da:	e022      	b.n	3a22 <sys_clock_announce+0x9e>
		curr_tick += dt;
    39dc:	eb18 0101 	adds.w	r1, r8, r1
    39e0:	eb4e 73e8 	adc.w	r3, lr, r8, asr #31
		t->dticks = 0;
    39e4:	e9c0 ab04 	strd	sl, fp, [r0, #16]
		curr_tick += dt;
    39e8:	e9c4 1300 	strd	r1, r3, [r4]
		remove_timeout(t);
    39ec:	f7ff ffae 	bl	394c <remove_timeout>
	__asm__ volatile(
    39f0:	f385 8811 	msr	BASEPRI, r5
    39f4:	f3bf 8f6f 	isb	sy
		t->fn(t);
    39f8:	6883      	ldr	r3, [r0, #8]
    39fa:	4798      	blx	r3
	__asm__ volatile(
    39fc:	f04f 0320 	mov.w	r3, #32
    3a00:	f3ef 8511 	mrs	r5, BASEPRI
    3a04:	f383 8812 	msr	BASEPRI_MAX, r3
    3a08:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    3a0c:	6833      	ldr	r3, [r6, #0]
	return list->head == list;
    3a0e:	f8d9 0000 	ldr.w	r0, [r9]
    3a12:	eba3 0308 	sub.w	r3, r3, r8
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3a16:	4548      	cmp	r0, r9
	k.key = arch_irq_lock();
    3a18:	462f      	mov	r7, r5
    3a1a:	6033      	str	r3, [r6, #0]
    3a1c:	d1ca      	bne.n	39b4 <sys_clock_announce+0x30>
		curr_tick += dt;
    3a1e:	e9d4 1e00 	ldrd	r1, lr, [r4]
	}

	curr_tick += announce_remaining;
    3a22:	1859      	adds	r1, r3, r1
    3a24:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
    3a28:	e9c4 1300 	strd	r1, r3, [r4]
	announce_remaining = 0;
    3a2c:	2400      	movs	r4, #0
    3a2e:	6034      	str	r4, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    3a30:	f7ff ff6c 	bl	390c <next_timeout>
    3a34:	4621      	mov	r1, r4
    3a36:	f7ff f8c1 	bl	2bbc <sys_clock_set_timeout>
	__asm__ volatile(
    3a3a:	f385 8811 	msr	BASEPRI, r5
    3a3e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
    3a42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3a46:	bf00      	nop
    3a48:	20000ec8 	.word	0x20000ec8
    3a4c:	200001c8 	.word	0x200001c8
    3a50:	200000b0 	.word	0x200000b0

00003a54 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    3a54:	4801      	ldr	r0, [pc, #4]	; (3a5c <boot_banner+0x8>)
    3a56:	f002 b82b 	b.w	5ab0 <printk>
    3a5a:	bf00      	nop
    3a5c:	00006ea1 	.word	0x00006ea1

00003a60 <nrf_cc3xx_platform_init_no_rng>:
    3a60:	b510      	push	{r4, lr}
    3a62:	4c0a      	ldr	r4, [pc, #40]	; (3a8c <nrf_cc3xx_platform_init_no_rng+0x2c>)
    3a64:	6823      	ldr	r3, [r4, #0]
    3a66:	b11b      	cbz	r3, 3a70 <nrf_cc3xx_platform_init_no_rng+0x10>
    3a68:	2301      	movs	r3, #1
    3a6a:	6023      	str	r3, [r4, #0]
    3a6c:	2000      	movs	r0, #0
    3a6e:	bd10      	pop	{r4, pc}
    3a70:	f000 f850 	bl	3b14 <CC_LibInitNoRng>
    3a74:	2800      	cmp	r0, #0
    3a76:	d0f7      	beq.n	3a68 <nrf_cc3xx_platform_init_no_rng+0x8>
    3a78:	3801      	subs	r0, #1
    3a7a:	2806      	cmp	r0, #6
    3a7c:	d803      	bhi.n	3a86 <nrf_cc3xx_platform_init_no_rng+0x26>
    3a7e:	4b04      	ldr	r3, [pc, #16]	; (3a90 <nrf_cc3xx_platform_init_no_rng+0x30>)
    3a80:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    3a84:	bd10      	pop	{r4, pc}
    3a86:	4803      	ldr	r0, [pc, #12]	; (3a94 <nrf_cc3xx_platform_init_no_rng+0x34>)
    3a88:	bd10      	pop	{r4, pc}
    3a8a:	bf00      	nop
    3a8c:	20000ecc 	.word	0x20000ecc
    3a90:	00006b98 	.word	0x00006b98
    3a94:	ffff8ffe 	.word	0xffff8ffe

00003a98 <nrf_cc3xx_platform_abort>:
    3a98:	f3bf 8f4f 	dsb	sy
    3a9c:	4905      	ldr	r1, [pc, #20]	; (3ab4 <nrf_cc3xx_platform_abort+0x1c>)
    3a9e:	4b06      	ldr	r3, [pc, #24]	; (3ab8 <nrf_cc3xx_platform_abort+0x20>)
    3aa0:	68ca      	ldr	r2, [r1, #12]
    3aa2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    3aa6:	4313      	orrs	r3, r2
    3aa8:	60cb      	str	r3, [r1, #12]
    3aaa:	f3bf 8f4f 	dsb	sy
    3aae:	bf00      	nop
    3ab0:	e7fd      	b.n	3aae <nrf_cc3xx_platform_abort+0x16>
    3ab2:	bf00      	nop
    3ab4:	e000ed00 	.word	0xe000ed00
    3ab8:	05fa0004 	.word	0x05fa0004

00003abc <CC_PalAbort>:
    3abc:	b430      	push	{r4, r5}
    3abe:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    3ac2:	2500      	movs	r5, #0
    3ac4:	4b07      	ldr	r3, [pc, #28]	; (3ae4 <CC_PalAbort+0x28>)
    3ac6:	4c08      	ldr	r4, [pc, #32]	; (3ae8 <CC_PalAbort+0x2c>)
    3ac8:	4908      	ldr	r1, [pc, #32]	; (3aec <CC_PalAbort+0x30>)
    3aca:	6849      	ldr	r1, [r1, #4]
    3acc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    3ad0:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    3ad4:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    3ad8:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    3adc:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
    3ae0:	bc30      	pop	{r4, r5}
    3ae2:	4708      	bx	r1
    3ae4:	50841000 	.word	0x50841000
    3ae8:	50840000 	.word	0x50840000
    3aec:	200000b8 	.word	0x200000b8

00003af0 <nrf_cc3xx_platform_set_abort>:
    3af0:	4b02      	ldr	r3, [pc, #8]	; (3afc <nrf_cc3xx_platform_set_abort+0xc>)
    3af2:	e9d0 1200 	ldrd	r1, r2, [r0]
    3af6:	e9c3 1200 	strd	r1, r2, [r3]
    3afa:	4770      	bx	lr
    3afc:	200000b8 	.word	0x200000b8

00003b00 <mbedtls_platform_zeroize>:
    3b00:	b138      	cbz	r0, 3b12 <mbedtls_platform_zeroize+0x12>
    3b02:	b131      	cbz	r1, 3b12 <mbedtls_platform_zeroize+0x12>
    3b04:	2200      	movs	r2, #0
    3b06:	4401      	add	r1, r0
    3b08:	4603      	mov	r3, r0
    3b0a:	3001      	adds	r0, #1
    3b0c:	4288      	cmp	r0, r1
    3b0e:	701a      	strb	r2, [r3, #0]
    3b10:	d1fa      	bne.n	3b08 <mbedtls_platform_zeroize+0x8>
    3b12:	4770      	bx	lr

00003b14 <CC_LibInitNoRng>:
    3b14:	b538      	push	{r3, r4, r5, lr}
    3b16:	f000 f82f 	bl	3b78 <CC_HalInit>
    3b1a:	b120      	cbz	r0, 3b26 <CC_LibInitNoRng+0x12>
    3b1c:	2403      	movs	r4, #3
    3b1e:	f000 f863 	bl	3be8 <CC_PalTerminate>
    3b22:	4620      	mov	r0, r4
    3b24:	bd38      	pop	{r3, r4, r5, pc}
    3b26:	f000 f831 	bl	3b8c <CC_PalInit>
    3b2a:	b998      	cbnz	r0, 3b54 <CC_LibInitNoRng+0x40>
    3b2c:	f000 f8ac 	bl	3c88 <CC_PalPowerSaveModeSelect>
    3b30:	b998      	cbnz	r0, 3b5a <CC_LibInitNoRng+0x46>
    3b32:	4d0f      	ldr	r5, [pc, #60]	; (3b70 <CC_LibInitNoRng+0x5c>)
    3b34:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    3b38:	0e1b      	lsrs	r3, r3, #24
    3b3a:	2bf0      	cmp	r3, #240	; 0xf0
    3b3c:	d108      	bne.n	3b50 <CC_LibInitNoRng+0x3c>
    3b3e:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    3b42:	4b0c      	ldr	r3, [pc, #48]	; (3b74 <CC_LibInitNoRng+0x60>)
    3b44:	429a      	cmp	r2, r3
    3b46:	d00a      	beq.n	3b5e <CC_LibInitNoRng+0x4a>
    3b48:	2407      	movs	r4, #7
    3b4a:	f000 f817 	bl	3b7c <CC_HalTerminate>
    3b4e:	e7e6      	b.n	3b1e <CC_LibInitNoRng+0xa>
    3b50:	2406      	movs	r4, #6
    3b52:	e7fa      	b.n	3b4a <CC_LibInitNoRng+0x36>
    3b54:	2404      	movs	r4, #4
    3b56:	4620      	mov	r0, r4
    3b58:	bd38      	pop	{r3, r4, r5, pc}
    3b5a:	2400      	movs	r4, #0
    3b5c:	e7f5      	b.n	3b4a <CC_LibInitNoRng+0x36>
    3b5e:	2001      	movs	r0, #1
    3b60:	f000 f892 	bl	3c88 <CC_PalPowerSaveModeSelect>
    3b64:	4604      	mov	r4, r0
    3b66:	2800      	cmp	r0, #0
    3b68:	d1f7      	bne.n	3b5a <CC_LibInitNoRng+0x46>
    3b6a:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    3b6e:	e7d8      	b.n	3b22 <CC_LibInitNoRng+0xe>
    3b70:	50841000 	.word	0x50841000
    3b74:	20e00000 	.word	0x20e00000

00003b78 <CC_HalInit>:
    3b78:	2000      	movs	r0, #0
    3b7a:	4770      	bx	lr

00003b7c <CC_HalTerminate>:
    3b7c:	2000      	movs	r0, #0
    3b7e:	4770      	bx	lr

00003b80 <CC_HalMaskInterrupt>:
    3b80:	4b01      	ldr	r3, [pc, #4]	; (3b88 <CC_HalMaskInterrupt+0x8>)
    3b82:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    3b86:	4770      	bx	lr
    3b88:	50841000 	.word	0x50841000

00003b8c <CC_PalInit>:
    3b8c:	b510      	push	{r4, lr}
    3b8e:	4811      	ldr	r0, [pc, #68]	; (3bd4 <CC_PalInit+0x48>)
    3b90:	f000 f848 	bl	3c24 <CC_PalMutexCreate>
    3b94:	b100      	cbz	r0, 3b98 <CC_PalInit+0xc>
    3b96:	bd10      	pop	{r4, pc}
    3b98:	480f      	ldr	r0, [pc, #60]	; (3bd8 <CC_PalInit+0x4c>)
    3b9a:	f000 f843 	bl	3c24 <CC_PalMutexCreate>
    3b9e:	2800      	cmp	r0, #0
    3ba0:	d1f9      	bne.n	3b96 <CC_PalInit+0xa>
    3ba2:	4c0e      	ldr	r4, [pc, #56]	; (3bdc <CC_PalInit+0x50>)
    3ba4:	4620      	mov	r0, r4
    3ba6:	f000 f83d 	bl	3c24 <CC_PalMutexCreate>
    3baa:	2800      	cmp	r0, #0
    3bac:	d1f3      	bne.n	3b96 <CC_PalInit+0xa>
    3bae:	4b0c      	ldr	r3, [pc, #48]	; (3be0 <CC_PalInit+0x54>)
    3bb0:	480c      	ldr	r0, [pc, #48]	; (3be4 <CC_PalInit+0x58>)
    3bb2:	601c      	str	r4, [r3, #0]
    3bb4:	f000 f836 	bl	3c24 <CC_PalMutexCreate>
    3bb8:	4601      	mov	r1, r0
    3bba:	2800      	cmp	r0, #0
    3bbc:	d1eb      	bne.n	3b96 <CC_PalInit+0xa>
    3bbe:	f000 f82d 	bl	3c1c <CC_PalDmaInit>
    3bc2:	4604      	mov	r4, r0
    3bc4:	b108      	cbz	r0, 3bca <CC_PalInit+0x3e>
    3bc6:	4620      	mov	r0, r4
    3bc8:	bd10      	pop	{r4, pc}
    3bca:	f000 f83f 	bl	3c4c <CC_PalPowerSaveModeInit>
    3bce:	4620      	mov	r0, r4
    3bd0:	e7fa      	b.n	3bc8 <CC_PalInit+0x3c>
    3bd2:	bf00      	nop
    3bd4:	200000d0 	.word	0x200000d0
    3bd8:	200000cc 	.word	0x200000cc
    3bdc:	200000c8 	.word	0x200000c8
    3be0:	200000c0 	.word	0x200000c0
    3be4:	200000c4 	.word	0x200000c4

00003be8 <CC_PalTerminate>:
    3be8:	b508      	push	{r3, lr}
    3bea:	4808      	ldr	r0, [pc, #32]	; (3c0c <CC_PalTerminate+0x24>)
    3bec:	f000 f824 	bl	3c38 <CC_PalMutexDestroy>
    3bf0:	4807      	ldr	r0, [pc, #28]	; (3c10 <CC_PalTerminate+0x28>)
    3bf2:	f000 f821 	bl	3c38 <CC_PalMutexDestroy>
    3bf6:	4807      	ldr	r0, [pc, #28]	; (3c14 <CC_PalTerminate+0x2c>)
    3bf8:	f000 f81e 	bl	3c38 <CC_PalMutexDestroy>
    3bfc:	4806      	ldr	r0, [pc, #24]	; (3c18 <CC_PalTerminate+0x30>)
    3bfe:	f000 f81b 	bl	3c38 <CC_PalMutexDestroy>
    3c02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    3c06:	f000 b80b 	b.w	3c20 <CC_PalDmaTerminate>
    3c0a:	bf00      	nop
    3c0c:	200000d0 	.word	0x200000d0
    3c10:	200000cc 	.word	0x200000cc
    3c14:	200000c8 	.word	0x200000c8
    3c18:	200000c4 	.word	0x200000c4

00003c1c <CC_PalDmaInit>:
    3c1c:	2000      	movs	r0, #0
    3c1e:	4770      	bx	lr

00003c20 <CC_PalDmaTerminate>:
    3c20:	4770      	bx	lr
    3c22:	bf00      	nop

00003c24 <CC_PalMutexCreate>:
    3c24:	b508      	push	{r3, lr}
    3c26:	4b03      	ldr	r3, [pc, #12]	; (3c34 <CC_PalMutexCreate+0x10>)
    3c28:	6802      	ldr	r2, [r0, #0]
    3c2a:	681b      	ldr	r3, [r3, #0]
    3c2c:	6810      	ldr	r0, [r2, #0]
    3c2e:	4798      	blx	r3
    3c30:	2000      	movs	r0, #0
    3c32:	bd08      	pop	{r3, pc}
    3c34:	200000e8 	.word	0x200000e8

00003c38 <CC_PalMutexDestroy>:
    3c38:	b508      	push	{r3, lr}
    3c3a:	4b03      	ldr	r3, [pc, #12]	; (3c48 <CC_PalMutexDestroy+0x10>)
    3c3c:	6802      	ldr	r2, [r0, #0]
    3c3e:	685b      	ldr	r3, [r3, #4]
    3c40:	6810      	ldr	r0, [r2, #0]
    3c42:	4798      	blx	r3
    3c44:	2000      	movs	r0, #0
    3c46:	bd08      	pop	{r3, pc}
    3c48:	200000e8 	.word	0x200000e8

00003c4c <CC_PalPowerSaveModeInit>:
    3c4c:	b570      	push	{r4, r5, r6, lr}
    3c4e:	4c09      	ldr	r4, [pc, #36]	; (3c74 <CC_PalPowerSaveModeInit+0x28>)
    3c50:	4d09      	ldr	r5, [pc, #36]	; (3c78 <CC_PalPowerSaveModeInit+0x2c>)
    3c52:	6920      	ldr	r0, [r4, #16]
    3c54:	68ab      	ldr	r3, [r5, #8]
    3c56:	4798      	blx	r3
    3c58:	b118      	cbz	r0, 3c62 <CC_PalPowerSaveModeInit+0x16>
    3c5a:	4b08      	ldr	r3, [pc, #32]	; (3c7c <CC_PalPowerSaveModeInit+0x30>)
    3c5c:	4808      	ldr	r0, [pc, #32]	; (3c80 <CC_PalPowerSaveModeInit+0x34>)
    3c5e:	685b      	ldr	r3, [r3, #4]
    3c60:	4798      	blx	r3
    3c62:	2100      	movs	r1, #0
    3c64:	4a07      	ldr	r2, [pc, #28]	; (3c84 <CC_PalPowerSaveModeInit+0x38>)
    3c66:	68eb      	ldr	r3, [r5, #12]
    3c68:	6011      	str	r1, [r2, #0]
    3c6a:	6920      	ldr	r0, [r4, #16]
    3c6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3c70:	4718      	bx	r3
    3c72:	bf00      	nop
    3c74:	200000d4 	.word	0x200000d4
    3c78:	200000e8 	.word	0x200000e8
    3c7c:	200000b8 	.word	0x200000b8
    3c80:	00006bb4 	.word	0x00006bb4
    3c84:	20000ed0 	.word	0x20000ed0

00003c88 <CC_PalPowerSaveModeSelect>:
    3c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c8a:	4d1a      	ldr	r5, [pc, #104]	; (3cf4 <CC_PalPowerSaveModeSelect+0x6c>)
    3c8c:	4e1a      	ldr	r6, [pc, #104]	; (3cf8 <CC_PalPowerSaveModeSelect+0x70>)
    3c8e:	4604      	mov	r4, r0
    3c90:	68b2      	ldr	r2, [r6, #8]
    3c92:	6928      	ldr	r0, [r5, #16]
    3c94:	4790      	blx	r2
    3c96:	b9e8      	cbnz	r0, 3cd4 <CC_PalPowerSaveModeSelect+0x4c>
    3c98:	4f18      	ldr	r7, [pc, #96]	; (3cfc <CC_PalPowerSaveModeSelect+0x74>)
    3c9a:	683b      	ldr	r3, [r7, #0]
    3c9c:	b14c      	cbz	r4, 3cb2 <CC_PalPowerSaveModeSelect+0x2a>
    3c9e:	b1a3      	cbz	r3, 3cca <CC_PalPowerSaveModeSelect+0x42>
    3ca0:	2b01      	cmp	r3, #1
    3ca2:	d019      	beq.n	3cd8 <CC_PalPowerSaveModeSelect+0x50>
    3ca4:	3b01      	subs	r3, #1
    3ca6:	603b      	str	r3, [r7, #0]
    3ca8:	6928      	ldr	r0, [r5, #16]
    3caa:	68f3      	ldr	r3, [r6, #12]
    3cac:	4798      	blx	r3
    3cae:	2000      	movs	r0, #0
    3cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3cb2:	b943      	cbnz	r3, 3cc6 <CC_PalPowerSaveModeSelect+0x3e>
    3cb4:	2101      	movs	r1, #1
    3cb6:	4a12      	ldr	r2, [pc, #72]	; (3d00 <CC_PalPowerSaveModeSelect+0x78>)
    3cb8:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    3cbc:	4911      	ldr	r1, [pc, #68]	; (3d04 <CC_PalPowerSaveModeSelect+0x7c>)
    3cbe:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
    3cc2:	2a00      	cmp	r2, #0
    3cc4:	d1fb      	bne.n	3cbe <CC_PalPowerSaveModeSelect+0x36>
    3cc6:	3301      	adds	r3, #1
    3cc8:	603b      	str	r3, [r7, #0]
    3cca:	68f3      	ldr	r3, [r6, #12]
    3ccc:	6928      	ldr	r0, [r5, #16]
    3cce:	4798      	blx	r3
    3cd0:	2000      	movs	r0, #0
    3cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3cd4:	480c      	ldr	r0, [pc, #48]	; (3d08 <CC_PalPowerSaveModeSelect+0x80>)
    3cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3cd8:	4a0a      	ldr	r2, [pc, #40]	; (3d04 <CC_PalPowerSaveModeSelect+0x7c>)
    3cda:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    3cde:	2b00      	cmp	r3, #0
    3ce0:	d1fb      	bne.n	3cda <CC_PalPowerSaveModeSelect+0x52>
    3ce2:	4a07      	ldr	r2, [pc, #28]	; (3d00 <CC_PalPowerSaveModeSelect+0x78>)
    3ce4:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    3ce8:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    3cec:	f7ff ff48 	bl	3b80 <CC_HalMaskInterrupt>
    3cf0:	683b      	ldr	r3, [r7, #0]
    3cf2:	e7d7      	b.n	3ca4 <CC_PalPowerSaveModeSelect+0x1c>
    3cf4:	200000d4 	.word	0x200000d4
    3cf8:	200000e8 	.word	0x200000e8
    3cfc:	20000ed0 	.word	0x20000ed0
    3d00:	50840000 	.word	0x50840000
    3d04:	50841000 	.word	0x50841000
    3d08:	ffff8fe9 	.word	0xffff8fe9

00003d0c <mutex_free>:
    3d0c:	b510      	push	{r4, lr}
    3d0e:	4604      	mov	r4, r0
    3d10:	b150      	cbz	r0, 3d28 <mutex_free+0x1c>
    3d12:	6863      	ldr	r3, [r4, #4]
    3d14:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    3d18:	d005      	beq.n	3d26 <mutex_free+0x1a>
    3d1a:	4a06      	ldr	r2, [pc, #24]	; (3d34 <mutex_free+0x28>)
    3d1c:	4293      	cmp	r3, r2
    3d1e:	d002      	beq.n	3d26 <mutex_free+0x1a>
    3d20:	2300      	movs	r3, #0
    3d22:	6062      	str	r2, [r4, #4]
    3d24:	6023      	str	r3, [r4, #0]
    3d26:	bd10      	pop	{r4, pc}
    3d28:	4b03      	ldr	r3, [pc, #12]	; (3d38 <mutex_free+0x2c>)
    3d2a:	4804      	ldr	r0, [pc, #16]	; (3d3c <mutex_free+0x30>)
    3d2c:	685b      	ldr	r3, [r3, #4]
    3d2e:	4798      	blx	r3
    3d30:	e7ef      	b.n	3d12 <mutex_free+0x6>
    3d32:	bf00      	nop
    3d34:	a95c5f2c 	.word	0xa95c5f2c
    3d38:	200000b8 	.word	0x200000b8
    3d3c:	00006bd4 	.word	0x00006bd4

00003d40 <mutex_lock>:
    3d40:	b1c8      	cbz	r0, 3d76 <mutex_lock+0x36>
    3d42:	6843      	ldr	r3, [r0, #4]
    3d44:	4a0d      	ldr	r2, [pc, #52]	; (3d7c <mutex_lock+0x3c>)
    3d46:	4293      	cmp	r3, r2
    3d48:	d013      	beq.n	3d72 <mutex_lock+0x32>
    3d4a:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    3d4e:	d00e      	beq.n	3d6e <mutex_lock+0x2e>
    3d50:	2301      	movs	r3, #1
    3d52:	e850 2f00 	ldrex	r2, [r0]
    3d56:	4619      	mov	r1, r3
    3d58:	e840 1c00 	strex	ip, r1, [r0]
    3d5c:	f09c 0f00 	teq	ip, #0
    3d60:	d1f7      	bne.n	3d52 <mutex_lock+0x12>
    3d62:	2a01      	cmp	r2, #1
    3d64:	d0f5      	beq.n	3d52 <mutex_lock+0x12>
    3d66:	f3bf 8f5f 	dmb	sy
    3d6a:	2000      	movs	r0, #0
    3d6c:	4770      	bx	lr
    3d6e:	4804      	ldr	r0, [pc, #16]	; (3d80 <mutex_lock+0x40>)
    3d70:	4770      	bx	lr
    3d72:	4804      	ldr	r0, [pc, #16]	; (3d84 <mutex_lock+0x44>)
    3d74:	4770      	bx	lr
    3d76:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    3d7a:	4770      	bx	lr
    3d7c:	a95c5f2c 	.word	0xa95c5f2c
    3d80:	ffff8fe9 	.word	0xffff8fe9
    3d84:	ffff8fea 	.word	0xffff8fea

00003d88 <mutex_unlock>:
    3d88:	4603      	mov	r3, r0
    3d8a:	b180      	cbz	r0, 3dae <mutex_unlock+0x26>
    3d8c:	6842      	ldr	r2, [r0, #4]
    3d8e:	4909      	ldr	r1, [pc, #36]	; (3db4 <mutex_unlock+0x2c>)
    3d90:	428a      	cmp	r2, r1
    3d92:	d00a      	beq.n	3daa <mutex_unlock+0x22>
    3d94:	f012 5f68 	tst.w	r2, #973078528	; 0x3a000000
    3d98:	d005      	beq.n	3da6 <mutex_unlock+0x1e>
    3d9a:	f3bf 8f5f 	dmb	sy
    3d9e:	2200      	movs	r2, #0
    3da0:	4610      	mov	r0, r2
    3da2:	601a      	str	r2, [r3, #0]
    3da4:	4770      	bx	lr
    3da6:	4804      	ldr	r0, [pc, #16]	; (3db8 <mutex_unlock+0x30>)
    3da8:	4770      	bx	lr
    3daa:	4804      	ldr	r0, [pc, #16]	; (3dbc <mutex_unlock+0x34>)
    3dac:	4770      	bx	lr
    3dae:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    3db2:	4770      	bx	lr
    3db4:	a95c5f2c 	.word	0xa95c5f2c
    3db8:	ffff8fe9 	.word	0xffff8fe9
    3dbc:	ffff8fea 	.word	0xffff8fea

00003dc0 <mutex_init>:
    3dc0:	b510      	push	{r4, lr}
    3dc2:	4604      	mov	r4, r0
    3dc4:	b120      	cbz	r0, 3dd0 <mutex_init+0x10>
    3dc6:	2300      	movs	r3, #0
    3dc8:	4a03      	ldr	r2, [pc, #12]	; (3dd8 <mutex_init+0x18>)
    3dca:	6023      	str	r3, [r4, #0]
    3dcc:	6062      	str	r2, [r4, #4]
    3dce:	bd10      	pop	{r4, pc}
    3dd0:	4802      	ldr	r0, [pc, #8]	; (3ddc <mutex_init+0x1c>)
    3dd2:	f7ff fe73 	bl	3abc <CC_PalAbort>
    3dd6:	e7f6      	b.n	3dc6 <mutex_init+0x6>
    3dd8:	3a00003a 	.word	0x3a00003a
    3ddc:	00006bfc 	.word	0x00006bfc

00003de0 <verify_context_ecdsa_verify_secp256r1>:
    3de0:	b130      	cbz	r0, 3df0 <verify_context_ecdsa_verify_secp256r1+0x10>
    3de2:	6802      	ldr	r2, [r0, #0]
    3de4:	4b03      	ldr	r3, [pc, #12]	; (3df4 <verify_context_ecdsa_verify_secp256r1+0x14>)
    3de6:	4804      	ldr	r0, [pc, #16]	; (3df8 <verify_context_ecdsa_verify_secp256r1+0x18>)
    3de8:	429a      	cmp	r2, r3
    3dea:	bf08      	it	eq
    3dec:	2000      	moveq	r0, #0
    3dee:	4770      	bx	lr
    3df0:	4802      	ldr	r0, [pc, #8]	; (3dfc <verify_context_ecdsa_verify_secp256r1+0x1c>)
    3df2:	4770      	bx	lr
    3df4:	bbaa55dd 	.word	0xbbaa55dd
    3df8:	00f00882 	.word	0x00f00882
    3dfc:	00f00871 	.word	0x00f00871

00003e00 <nrf_cc310_bl_ecdsa_verify_init_secp256r1>:
    3e00:	b538      	push	{r3, r4, r5, lr}
    3e02:	460d      	mov	r5, r1
    3e04:	4604      	mov	r4, r0
    3e06:	b1b0      	cbz	r0, 3e36 <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x36>
    3e08:	22a0      	movs	r2, #160	; 0xa0
    3e0a:	2100      	movs	r1, #0
    3e0c:	3004      	adds	r0, #4
    3e0e:	f002 fbe6 	bl	65de <SaSi_PalMemSet>
    3e12:	b195      	cbz	r5, 3e3a <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x3a>
    3e14:	2208      	movs	r2, #8
    3e16:	4629      	mov	r1, r5
    3e18:	f104 0064 	add.w	r0, r4, #100	; 0x64
    3e1c:	f002 fbe5 	bl	65ea <CRYS_COMMON_ReverseMemcpy32>
    3e20:	2208      	movs	r2, #8
    3e22:	f105 0120 	add.w	r1, r5, #32
    3e26:	f104 0084 	add.w	r0, r4, #132	; 0x84
    3e2a:	f002 fbde 	bl	65ea <CRYS_COMMON_ReverseMemcpy32>
    3e2e:	2000      	movs	r0, #0
    3e30:	4b03      	ldr	r3, [pc, #12]	; (3e40 <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x40>)
    3e32:	6023      	str	r3, [r4, #0]
    3e34:	bd38      	pop	{r3, r4, r5, pc}
    3e36:	4803      	ldr	r0, [pc, #12]	; (3e44 <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x44>)
    3e38:	e7fc      	b.n	3e34 <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x34>
    3e3a:	4803      	ldr	r0, [pc, #12]	; (3e48 <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x48>)
    3e3c:	e7fa      	b.n	3e34 <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x34>
    3e3e:	bf00      	nop
    3e40:	bbaa55dd 	.word	0xbbaa55dd
    3e44:	00f00871 	.word	0x00f00871
    3e48:	00f00883 	.word	0x00f00883

00003e4c <nrf_cc310_bl_ecdsa_verify_hash_secp256r1>:
    3e4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    3e50:	4605      	mov	r5, r0
    3e52:	460e      	mov	r6, r1
    3e54:	4699      	mov	r9, r3
    3e56:	4611      	mov	r1, r2
    3e58:	f7ff ffc2 	bl	3de0 <verify_context_ecdsa_verify_secp256r1>
    3e5c:	4604      	mov	r4, r0
    3e5e:	2800      	cmp	r0, #0
    3e60:	f040 8084 	bne.w	3f6c <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x120>
    3e64:	2e00      	cmp	r6, #0
    3e66:	f000 8085 	beq.w	3f74 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x128>
    3e6a:	2900      	cmp	r1, #0
    3e6c:	f000 8084 	beq.w	3f78 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x12c>
    3e70:	f1b9 0f20 	cmp.w	r9, #32
    3e74:	f040 8082 	bne.w	3f7c <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x130>
    3e78:	f105 0444 	add.w	r4, r5, #68	; 0x44
    3e7c:	2208      	movs	r2, #8
    3e7e:	f105 0804 	add.w	r8, r5, #4
    3e82:	4620      	mov	r0, r4
    3e84:	f002 fbb1 	bl	65ea <CRYS_COMMON_ReverseMemcpy32>
    3e88:	f105 0724 	add.w	r7, r5, #36	; 0x24
    3e8c:	2208      	movs	r2, #8
    3e8e:	4631      	mov	r1, r6
    3e90:	4640      	mov	r0, r8
    3e92:	f002 fbaa 	bl	65ea <CRYS_COMMON_ReverseMemcpy32>
    3e96:	f106 0120 	add.w	r1, r6, #32
    3e9a:	2208      	movs	r2, #8
    3e9c:	4638      	mov	r0, r7
    3e9e:	f002 fba4 	bl	65ea <CRYS_COMMON_ReverseMemcpy32>
    3ea2:	a902      	add	r1, sp, #8
    3ea4:	f841 9d04 	str.w	r9, [r1, #-4]!
    3ea8:	f44f 7080 	mov.w	r0, #256	; 0x100
    3eac:	f002 fb91 	bl	65d2 <PkaInitAndMutexLock>
    3eb0:	2800      	cmp	r0, #0
    3eb2:	d165      	bne.n	3f80 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x134>
    3eb4:	f44f 7380 	mov.w	r3, #256	; 0x100
    3eb8:	4a32      	ldr	r2, [pc, #200]	; (3f84 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x138>)
    3eba:	2101      	movs	r1, #1
    3ebc:	6013      	str	r3, [r2, #0]
    3ebe:	6093      	str	r3, [r2, #8]
    3ec0:	2308      	movs	r3, #8
    3ec2:	4a31      	ldr	r2, [pc, #196]	; (3f88 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x13c>)
    3ec4:	f000 fb34 	bl	4530 <PkaCopyDataIntoPkaReg>
    3ec8:	2101      	movs	r1, #1
    3eca:	2305      	movs	r3, #5
    3ecc:	4608      	mov	r0, r1
    3ece:	4a2f      	ldr	r2, [pc, #188]	; (3f8c <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x140>)
    3ed0:	f000 fb2e 	bl	4530 <PkaCopyDataIntoPkaReg>
    3ed4:	2308      	movs	r3, #8
    3ed6:	4642      	mov	r2, r8
    3ed8:	2101      	movs	r1, #1
    3eda:	201c      	movs	r0, #28
    3edc:	f000 fb28 	bl	4530 <PkaCopyDataIntoPkaReg>
    3ee0:	2308      	movs	r3, #8
    3ee2:	463a      	mov	r2, r7
    3ee4:	2101      	movs	r1, #1
    3ee6:	2003      	movs	r0, #3
    3ee8:	f000 fb22 	bl	4530 <PkaCopyDataIntoPkaReg>
    3eec:	4622      	mov	r2, r4
    3eee:	2308      	movs	r3, #8
    3ef0:	2101      	movs	r1, #1
    3ef2:	2002      	movs	r0, #2
    3ef4:	f000 fb1c 	bl	4530 <PkaCopyDataIntoPkaReg>
    3ef8:	2308      	movs	r3, #8
    3efa:	4a25      	ldr	r2, [pc, #148]	; (3f90 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x144>)
    3efc:	2101      	movs	r1, #1
    3efe:	201a      	movs	r0, #26
    3f00:	f000 fb16 	bl	4530 <PkaCopyDataIntoPkaReg>
    3f04:	2305      	movs	r3, #5
    3f06:	4a23      	ldr	r2, [pc, #140]	; (3f94 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x148>)
    3f08:	2101      	movs	r1, #1
    3f0a:	201b      	movs	r0, #27
    3f0c:	f000 fb10 	bl	4530 <PkaCopyDataIntoPkaReg>
    3f10:	2308      	movs	r3, #8
    3f12:	4a21      	ldr	r2, [pc, #132]	; (3f98 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x14c>)
    3f14:	2101      	movs	r1, #1
    3f16:	2014      	movs	r0, #20
    3f18:	f000 fb0a 	bl	4530 <PkaCopyDataIntoPkaReg>
    3f1c:	2308      	movs	r3, #8
    3f1e:	4a1f      	ldr	r2, [pc, #124]	; (3f9c <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x150>)
    3f20:	2101      	movs	r1, #1
    3f22:	2015      	movs	r0, #21
    3f24:	f000 fb04 	bl	4530 <PkaCopyDataIntoPkaReg>
    3f28:	2308      	movs	r3, #8
    3f2a:	f105 0264 	add.w	r2, r5, #100	; 0x64
    3f2e:	2101      	movs	r1, #1
    3f30:	2016      	movs	r0, #22
    3f32:	f000 fafd 	bl	4530 <PkaCopyDataIntoPkaReg>
    3f36:	2308      	movs	r3, #8
    3f38:	f105 0284 	add.w	r2, r5, #132	; 0x84
    3f3c:	2101      	movs	r1, #1
    3f3e:	2017      	movs	r0, #23
    3f40:	f000 faf6 	bl	4530 <PkaCopyDataIntoPkaReg>
    3f44:	2308      	movs	r3, #8
    3f46:	4a16      	ldr	r2, [pc, #88]	; (3fa0 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x154>)
    3f48:	2101      	movs	r1, #1
    3f4a:	200b      	movs	r0, #11
    3f4c:	f000 faf0 	bl	4530 <PkaCopyDataIntoPkaReg>
    3f50:	f000 fb4a 	bl	45e8 <PkaEcdsaVerify>
    3f54:	4604      	mov	r4, r0
    3f56:	9801      	ldr	r0, [sp, #4]
    3f58:	f000 fad8 	bl	450c <PkaFinishAndMutexUnlock>
    3f5c:	4b11      	ldr	r3, [pc, #68]	; (3fa4 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x158>)
    3f5e:	2c00      	cmp	r4, #0
    3f60:	bf18      	it	ne
    3f62:	461c      	movne	r4, r3
    3f64:	21a4      	movs	r1, #164	; 0xa4
    3f66:	4628      	mov	r0, r5
    3f68:	f002 fb3b 	bl	65e2 <SaSi_PalMemSetZero>
    3f6c:	4620      	mov	r0, r4
    3f6e:	b003      	add	sp, #12
    3f70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3f74:	4c0c      	ldr	r4, [pc, #48]	; (3fa8 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x15c>)
    3f76:	e7f9      	b.n	3f6c <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x120>
    3f78:	4c0c      	ldr	r4, [pc, #48]	; (3fac <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x160>)
    3f7a:	e7f7      	b.n	3f6c <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x120>
    3f7c:	4c0c      	ldr	r4, [pc, #48]	; (3fb0 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x164>)
    3f7e:	e7f5      	b.n	3f6c <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x120>
    3f80:	4c08      	ldr	r4, [pc, #32]	; (3fa4 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x158>)
    3f82:	e7ef      	b.n	3f64 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x118>
    3f84:	50841090 	.word	0x50841090
    3f88:	00006c60 	.word	0x00006c60
    3f8c:	00006cd8 	.word	0x00006cd8
    3f90:	00006c20 	.word	0x00006c20
    3f94:	00006cc4 	.word	0x00006cc4
    3f98:	00006c84 	.word	0x00006c84
    3f9c:	00006ca4 	.word	0x00006ca4
    3fa0:	00006c40 	.word	0x00006c40
    3fa4:	00f00884 	.word	0x00f00884
    3fa8:	00f00876 	.word	0x00f00876
    3fac:	00f00880 	.word	0x00f00880
    3fb0:	00f00881 	.word	0x00f00881

00003fb4 <set_digest_in_hw_sha256>:
    3fb4:	69c2      	ldr	r2, [r0, #28]
    3fb6:	4b0c      	ldr	r3, [pc, #48]	; (3fe8 <set_digest_in_hw_sha256+0x34>)
    3fb8:	601a      	str	r2, [r3, #0]
    3fba:	6982      	ldr	r2, [r0, #24]
    3fbc:	f843 2c04 	str.w	r2, [r3, #-4]
    3fc0:	6942      	ldr	r2, [r0, #20]
    3fc2:	f843 2c08 	str.w	r2, [r3, #-8]
    3fc6:	6902      	ldr	r2, [r0, #16]
    3fc8:	f843 2c0c 	str.w	r2, [r3, #-12]
    3fcc:	68c2      	ldr	r2, [r0, #12]
    3fce:	f843 2c10 	str.w	r2, [r3, #-16]
    3fd2:	6882      	ldr	r2, [r0, #8]
    3fd4:	f843 2c14 	str.w	r2, [r3, #-20]
    3fd8:	6842      	ldr	r2, [r0, #4]
    3fda:	f843 2c18 	str.w	r2, [r3, #-24]
    3fde:	6802      	ldr	r2, [r0, #0]
    3fe0:	f843 2c1c 	str.w	r2, [r3, #-28]
    3fe4:	4770      	bx	lr
    3fe6:	bf00      	nop
    3fe8:	5084165c 	.word	0x5084165c

00003fec <read_digest_in_hw_sha256>:
    3fec:	4b0c      	ldr	r3, [pc, #48]	; (4020 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x20>)
    3fee:	681b      	ldr	r3, [r3, #0]
    3ff0:	61c3      	str	r3, [r0, #28]
    3ff2:	4b0c      	ldr	r3, [pc, #48]	; (4024 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x24>)
    3ff4:	681b      	ldr	r3, [r3, #0]
    3ff6:	6183      	str	r3, [r0, #24]
    3ff8:	4b0b      	ldr	r3, [pc, #44]	; (4028 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x28>)
    3ffa:	681b      	ldr	r3, [r3, #0]
    3ffc:	6143      	str	r3, [r0, #20]
    3ffe:	4b0b      	ldr	r3, [pc, #44]	; (402c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2c>)
    4000:	681b      	ldr	r3, [r3, #0]
    4002:	6103      	str	r3, [r0, #16]
    4004:	4b0a      	ldr	r3, [pc, #40]	; (4030 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x30>)
    4006:	681b      	ldr	r3, [r3, #0]
    4008:	60c3      	str	r3, [r0, #12]
    400a:	4b0a      	ldr	r3, [pc, #40]	; (4034 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x34>)
    400c:	681b      	ldr	r3, [r3, #0]
    400e:	6083      	str	r3, [r0, #8]
    4010:	4b09      	ldr	r3, [pc, #36]	; (4038 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x38>)
    4012:	681b      	ldr	r3, [r3, #0]
    4014:	6043      	str	r3, [r0, #4]
    4016:	4b09      	ldr	r3, [pc, #36]	; (403c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3c>)
    4018:	681b      	ldr	r3, [r3, #0]
    401a:	6003      	str	r3, [r0, #0]
    401c:	4770      	bx	lr
    401e:	bf00      	nop
    4020:	5084165c 	.word	0x5084165c
    4024:	50841658 	.word	0x50841658
    4028:	50841654 	.word	0x50841654
    402c:	50841650 	.word	0x50841650
    4030:	5084164c 	.word	0x5084164c
    4034:	50841648 	.word	0x50841648
    4038:	50841644 	.word	0x50841644
    403c:	50841640 	.word	0x50841640

00004040 <verify_context_hash_sha256>:
    4040:	b130      	cbz	r0, 4050 <verify_context_hash_sha256+0x10>
    4042:	6802      	ldr	r2, [r0, #0]
    4044:	4b03      	ldr	r3, [pc, #12]	; (4054 <verify_context_hash_sha256+0x14>)
    4046:	4804      	ldr	r0, [pc, #16]	; (4058 <verify_context_hash_sha256+0x18>)
    4048:	429a      	cmp	r2, r3
    404a:	bf08      	it	eq
    404c:	2000      	moveq	r0, #0
    404e:	4770      	bx	lr
    4050:	4802      	ldr	r0, [pc, #8]	; (405c <verify_context_hash_sha256+0x1c>)
    4052:	4770      	bx	lr
    4054:	bbaa55dd 	.word	0xbbaa55dd
    4058:	00f00202 	.word	0x00f00202
    405c:	00f00200 	.word	0x00f00200

00004060 <nrf_cc310_bl_hash_sha256_init>:
    4060:	b538      	push	{r3, r4, r5, lr}
    4062:	4604      	mov	r4, r0
    4064:	b168      	cbz	r0, 4082 <nrf_cc310_bl_hash_sha256_init+0x22>
    4066:	1d05      	adds	r5, r0, #4
    4068:	2170      	movs	r1, #112	; 0x70
    406a:	4628      	mov	r0, r5
    406c:	f002 fab9 	bl	65e2 <SaSi_PalMemSetZero>
    4070:	4628      	mov	r0, r5
    4072:	2220      	movs	r2, #32
    4074:	4904      	ldr	r1, [pc, #16]	; (4088 <nrf_cc310_bl_hash_sha256_init+0x28>)
    4076:	f002 fab0 	bl	65da <SaSi_PalMemCopy>
    407a:	2000      	movs	r0, #0
    407c:	4b03      	ldr	r3, [pc, #12]	; (408c <nrf_cc310_bl_hash_sha256_init+0x2c>)
    407e:	6023      	str	r3, [r4, #0]
    4080:	bd38      	pop	{r3, r4, r5, pc}
    4082:	4803      	ldr	r0, [pc, #12]	; (4090 <nrf_cc310_bl_hash_sha256_init+0x30>)
    4084:	e7fc      	b.n	4080 <nrf_cc310_bl_hash_sha256_init+0x20>
    4086:	bf00      	nop
    4088:	00006cec 	.word	0x00006cec
    408c:	bbaa55dd 	.word	0xbbaa55dd
    4090:	00f00200 	.word	0x00f00200

00004094 <nrf_cc310_bl_hash_sha256_update>:
    4094:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4098:	b085      	sub	sp, #20
    409a:	4615      	mov	r5, r2
    409c:	466f      	mov	r7, sp
    409e:	4b27      	ldr	r3, [pc, #156]	; (413c <nrf_cc310_bl_hash_sha256_update+0xa8>)
    40a0:	4604      	mov	r4, r0
    40a2:	460e      	mov	r6, r1
    40a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    40a6:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    40aa:	b92d      	cbnz	r5, 40b8 <nrf_cc310_bl_hash_sha256_update+0x24>
    40ac:	f04f 0900 	mov.w	r9, #0
    40b0:	4648      	mov	r0, r9
    40b2:	b005      	add	sp, #20
    40b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    40b8:	4620      	mov	r0, r4
    40ba:	f7ff ffc1 	bl	4040 <verify_context_hash_sha256>
    40be:	4681      	mov	r9, r0
    40c0:	2800      	cmp	r0, #0
    40c2:	d1f5      	bne.n	40b0 <nrf_cc310_bl_hash_sha256_update+0x1c>
    40c4:	1d23      	adds	r3, r4, #4
    40c6:	9301      	str	r3, [sp, #4]
    40c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    40ca:	bba3      	cbnz	r3, 4136 <nrf_cc310_bl_hash_sha256_update+0xa2>
    40cc:	6f23      	ldr	r3, [r4, #112]	; 0x70
    40ce:	b18b      	cbz	r3, 40f4 <nrf_cc310_bl_hash_sha256_update+0x60>
    40d0:	f1c3 0840 	rsb	r8, r3, #64	; 0x40
    40d4:	45a8      	cmp	r8, r5
    40d6:	bf28      	it	cs
    40d8:	46a8      	movcs	r8, r5
    40da:	f104 0030 	add.w	r0, r4, #48	; 0x30
    40de:	4631      	mov	r1, r6
    40e0:	4418      	add	r0, r3
    40e2:	4642      	mov	r2, r8
    40e4:	f002 fa79 	bl	65da <SaSi_PalMemCopy>
    40e8:	6f23      	ldr	r3, [r4, #112]	; 0x70
    40ea:	4446      	add	r6, r8
    40ec:	4443      	add	r3, r8
    40ee:	6723      	str	r3, [r4, #112]	; 0x70
    40f0:	eba5 0508 	sub.w	r5, r5, r8
    40f4:	6f22      	ldr	r2, [r4, #112]	; 0x70
    40f6:	2a40      	cmp	r2, #64	; 0x40
    40f8:	d106      	bne.n	4108 <nrf_cc310_bl_hash_sha256_update+0x74>
    40fa:	f104 0130 	add.w	r1, r4, #48	; 0x30
    40fe:	4638      	mov	r0, r7
    4100:	f000 fbb4 	bl	486c <nrf_cc310_bl_hash_update_internal>
    4104:	2300      	movs	r3, #0
    4106:	6723      	str	r3, [r4, #112]	; 0x70
    4108:	f005 083f 	and.w	r8, r5, #63	; 0x3f
    410c:	f035 053f 	bics.w	r5, r5, #63	; 0x3f
    4110:	d005      	beq.n	411e <nrf_cc310_bl_hash_sha256_update+0x8a>
    4112:	4631      	mov	r1, r6
    4114:	462a      	mov	r2, r5
    4116:	4638      	mov	r0, r7
    4118:	f000 fba8 	bl	486c <nrf_cc310_bl_hash_update_internal>
    411c:	442e      	add	r6, r5
    411e:	f1b8 0f00 	cmp.w	r8, #0
    4122:	d0c3      	beq.n	40ac <nrf_cc310_bl_hash_sha256_update+0x18>
    4124:	4642      	mov	r2, r8
    4126:	4631      	mov	r1, r6
    4128:	f104 0030 	add.w	r0, r4, #48	; 0x30
    412c:	f002 fa55 	bl	65da <SaSi_PalMemCopy>
    4130:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
    4134:	e7bc      	b.n	40b0 <nrf_cc310_bl_hash_sha256_update+0x1c>
    4136:	f8df 9008 	ldr.w	r9, [pc, #8]	; 4140 <nrf_cc310_bl_hash_sha256_update+0xac>
    413a:	e7b9      	b.n	40b0 <nrf_cc310_bl_hash_sha256_update+0x1c>
    413c:	00006960 	.word	0x00006960
    4140:	00f0020c 	.word	0x00f0020c

00004144 <nrf_cc310_bl_hash_sha256_finalize>:
    4144:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    4148:	4604      	mov	r4, r0
    414a:	466f      	mov	r7, sp
    414c:	4b13      	ldr	r3, [pc, #76]	; (419c <nrf_cc310_bl_hash_sha256_finalize+0x58>)
    414e:	460e      	mov	r6, r1
    4150:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    4152:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    4156:	4620      	mov	r0, r4
    4158:	f7ff ff72 	bl	4040 <verify_context_hash_sha256>
    415c:	4680      	mov	r8, r0
    415e:	b9b0      	cbnz	r0, 418e <nrf_cc310_bl_hash_sha256_finalize+0x4a>
    4160:	b1ce      	cbz	r6, 4196 <nrf_cc310_bl_hash_sha256_finalize+0x52>
    4162:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4164:	1d25      	adds	r5, r4, #4
    4166:	9501      	str	r5, [sp, #4]
    4168:	b93b      	cbnz	r3, 417a <nrf_cc310_bl_hash_sha256_finalize+0x36>
    416a:	2301      	movs	r3, #1
    416c:	6f22      	ldr	r2, [r4, #112]	; 0x70
    416e:	6263      	str	r3, [r4, #36]	; 0x24
    4170:	f104 0130 	add.w	r1, r4, #48	; 0x30
    4174:	4638      	mov	r0, r7
    4176:	f000 fb79 	bl	486c <nrf_cc310_bl_hash_update_internal>
    417a:	462b      	mov	r3, r5
    417c:	3e04      	subs	r6, #4
    417e:	3424      	adds	r4, #36	; 0x24
    4180:	f853 2b04 	ldr.w	r2, [r3], #4
    4184:	ba12      	rev	r2, r2
    4186:	42a3      	cmp	r3, r4
    4188:	f846 2f04 	str.w	r2, [r6, #4]!
    418c:	d1f8      	bne.n	4180 <nrf_cc310_bl_hash_sha256_finalize+0x3c>
    418e:	4640      	mov	r0, r8
    4190:	b004      	add	sp, #16
    4192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4196:	f8df 8008 	ldr.w	r8, [pc, #8]	; 41a0 <nrf_cc310_bl_hash_sha256_finalize+0x5c>
    419a:	e7f8      	b.n	418e <nrf_cc310_bl_hash_sha256_finalize+0x4a>
    419c:	00006960 	.word	0x00006960
    41a0:	00f00205 	.word	0x00f00205

000041a4 <nrf_cc310_bl_init>:
    41a4:	4b08      	ldr	r3, [pc, #32]	; (41c8 <nrf_cc310_bl_init+0x24>)
    41a6:	681b      	ldr	r3, [r3, #0]
    41a8:	0e1b      	lsrs	r3, r3, #24
    41aa:	2bf0      	cmp	r3, #240	; 0xf0
    41ac:	d108      	bne.n	41c0 <nrf_cc310_bl_init+0x1c>
    41ae:	4b07      	ldr	r3, [pc, #28]	; (41cc <nrf_cc310_bl_init+0x28>)
    41b0:	681a      	ldr	r2, [r3, #0]
    41b2:	4b07      	ldr	r3, [pc, #28]	; (41d0 <nrf_cc310_bl_init+0x2c>)
    41b4:	429a      	cmp	r2, r3
    41b6:	d105      	bne.n	41c4 <nrf_cc310_bl_init+0x20>
    41b8:	2000      	movs	r0, #0
    41ba:	4b06      	ldr	r3, [pc, #24]	; (41d4 <nrf_cc310_bl_init+0x30>)
    41bc:	6018      	str	r0, [r3, #0]
    41be:	4770      	bx	lr
    41c0:	2005      	movs	r0, #5
    41c2:	4770      	bx	lr
    41c4:	2006      	movs	r0, #6
    41c6:	4770      	bx	lr
    41c8:	50841928 	.word	0x50841928
    41cc:	50841a24 	.word	0x50841a24
    41d0:	20e00000 	.word	0x20e00000
    41d4:	50841a0c 	.word	0x50841a0c

000041d8 <PkaSetRegsMapTab>:
    41d8:	2200      	movs	r2, #0
    41da:	b530      	push	{r4, r5, lr}
    41dc:	4613      	mov	r3, r2
    41de:	f640 75fc 	movw	r5, #4092	; 0xffc
    41e2:	0049      	lsls	r1, r1, #1
    41e4:	3802      	subs	r0, #2
    41e6:	f102 54a1 	add.w	r4, r2, #337641472	; 0x14200000
    41ea:	f504 3482 	add.w	r4, r4, #66560	; 0x10400
    41ee:	4290      	cmp	r0, r2
    41f0:	ea4f 0484 	mov.w	r4, r4, lsl #2
    41f4:	f102 0201 	add.w	r2, r2, #1
    41f8:	bfca      	itet	gt
    41fa:	6023      	strgt	r3, [r4, #0]
    41fc:	6025      	strle	r5, [r4, #0]
    41fe:	185b      	addgt	r3, r3, r1
    4200:	2a1e      	cmp	r2, #30
    4202:	d1f0      	bne.n	41e6 <PkaSetRegsMapTab+0xe>
    4204:	4a03      	ldr	r2, [pc, #12]	; (4214 <PkaSetRegsMapTab+0x3c>)
    4206:	6013      	str	r3, [r2, #0]
    4208:	440b      	add	r3, r1
    420a:	6053      	str	r3, [r2, #4]
    420c:	4b02      	ldr	r3, [pc, #8]	; (4218 <PkaSetRegsMapTab+0x40>)
    420e:	4a03      	ldr	r2, [pc, #12]	; (421c <PkaSetRegsMapTab+0x44>)
    4210:	601a      	str	r2, [r3, #0]
    4212:	bd30      	pop	{r4, r5, pc}
    4214:	50841078 	.word	0x50841078
    4218:	50841084 	.word	0x50841084
    421c:	000ff820 	.word	0x000ff820

00004220 <PkaGetRegEffectiveSizeInBits>:
    4220:	4b1e      	ldr	r3, [pc, #120]	; (429c <PkaGetRegEffectiveSizeInBits+0x7c>)
    4222:	b530      	push	{r4, r5, lr}
    4224:	461a      	mov	r2, r3
    4226:	b085      	sub	sp, #20
    4228:	6819      	ldr	r1, [r3, #0]
    422a:	9100      	str	r1, [sp, #0]
    422c:	9900      	ldr	r1, [sp, #0]
    422e:	07cc      	lsls	r4, r1, #31
    4230:	d5fa      	bpl.n	4228 <PkaGetRegEffectiveSizeInBits+0x8>
    4232:	f100 50a1 	add.w	r0, r0, #337641472	; 0x14200000
    4236:	f500 3082 	add.w	r0, r0, #66560	; 0x10400
    423a:	0080      	lsls	r0, r0, #2
    423c:	6801      	ldr	r1, [r0, #0]
    423e:	6813      	ldr	r3, [r2, #0]
    4240:	9301      	str	r3, [sp, #4]
    4242:	9b01      	ldr	r3, [sp, #4]
    4244:	07d8      	lsls	r0, r3, #31
    4246:	d5fa      	bpl.n	423e <PkaGetRegEffectiveSizeInBits+0x1e>
    4248:	4b15      	ldr	r3, [pc, #84]	; (42a0 <PkaGetRegEffectiveSizeInBits+0x80>)
    424a:	4c16      	ldr	r4, [pc, #88]	; (42a4 <PkaGetRegEffectiveSizeInBits+0x84>)
    424c:	6818      	ldr	r0, [r3, #0]
    424e:	2320      	movs	r3, #32
    4250:	301f      	adds	r0, #31
    4252:	fb90 f0f3 	sdiv	r0, r0, r3
    4256:	4d14      	ldr	r5, [pc, #80]	; (42a8 <PkaGetRegEffectiveSizeInBits+0x88>)
    4258:	3801      	subs	r0, #1
    425a:	2800      	cmp	r0, #0
    425c:	da10      	bge.n	4280 <PkaGetRegEffectiveSizeInBits+0x60>
    425e:	2300      	movs	r3, #0
    4260:	3001      	adds	r0, #1
    4262:	0140      	lsls	r0, r0, #5
    4264:	b153      	cbz	r3, 427c <PkaGetRegEffectiveSizeInBits+0x5c>
    4266:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    426a:	f1a0 0120 	sub.w	r1, r0, #32
    426e:	4213      	tst	r3, r2
    4270:	d104      	bne.n	427c <PkaGetRegEffectiveSizeInBits+0x5c>
    4272:	3801      	subs	r0, #1
    4274:	4288      	cmp	r0, r1
    4276:	ea4f 0252 	mov.w	r2, r2, lsr #1
    427a:	d1f8      	bne.n	426e <PkaGetRegEffectiveSizeInBits+0x4e>
    427c:	b005      	add	sp, #20
    427e:	bd30      	pop	{r4, r5, pc}
    4280:	6813      	ldr	r3, [r2, #0]
    4282:	9303      	str	r3, [sp, #12]
    4284:	9b03      	ldr	r3, [sp, #12]
    4286:	07db      	lsls	r3, r3, #31
    4288:	d5fa      	bpl.n	4280 <PkaGetRegEffectiveSizeInBits+0x60>
    428a:	1843      	adds	r3, r0, r1
    428c:	6023      	str	r3, [r4, #0]
    428e:	682b      	ldr	r3, [r5, #0]
    4290:	9302      	str	r3, [sp, #8]
    4292:	9b02      	ldr	r3, [sp, #8]
    4294:	2b00      	cmp	r3, #0
    4296:	d1e3      	bne.n	4260 <PkaGetRegEffectiveSizeInBits+0x40>
    4298:	3801      	subs	r0, #1
    429a:	e7de      	b.n	425a <PkaGetRegEffectiveSizeInBits+0x3a>
    429c:	508410b4 	.word	0x508410b4
    42a0:	508410ac 	.word	0x508410ac
    42a4:	508410e4 	.word	0x508410e4
    42a8:	508410dc 	.word	0x508410dc

000042ac <PkaGetNextMsBit>:
    42ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    42ae:	681d      	ldr	r5, [r3, #0]
    42b0:	b085      	sub	sp, #20
    42b2:	f001 041f 	and.w	r4, r1, #31
    42b6:	b90d      	cbnz	r5, 42bc <PkaGetNextMsBit+0x10>
    42b8:	2c1f      	cmp	r4, #31
    42ba:	d128      	bne.n	430e <PkaGetNextMsBit+0x62>
    42bc:	4d17      	ldr	r5, [pc, #92]	; (431c <PkaGetNextMsBit+0x70>)
    42be:	462e      	mov	r6, r5
    42c0:	682f      	ldr	r7, [r5, #0]
    42c2:	9701      	str	r7, [sp, #4]
    42c4:	9f01      	ldr	r7, [sp, #4]
    42c6:	07ff      	lsls	r7, r7, #31
    42c8:	d5fa      	bpl.n	42c0 <PkaGetNextMsBit+0x14>
    42ca:	f100 50a1 	add.w	r0, r0, #337641472	; 0x14200000
    42ce:	f500 3082 	add.w	r0, r0, #66560	; 0x10400
    42d2:	0080      	lsls	r0, r0, #2
    42d4:	6800      	ldr	r0, [r0, #0]
    42d6:	6835      	ldr	r5, [r6, #0]
    42d8:	9503      	str	r5, [sp, #12]
    42da:	9d03      	ldr	r5, [sp, #12]
    42dc:	07ed      	lsls	r5, r5, #31
    42de:	d5fa      	bpl.n	42d6 <PkaGetNextMsBit+0x2a>
    42e0:	2c1f      	cmp	r4, #31
    42e2:	eb00 1061 	add.w	r0, r0, r1, asr #5
    42e6:	bf18      	it	ne
    42e8:	43c9      	mvnne	r1, r1
    42ea:	4d0d      	ldr	r5, [pc, #52]	; (4320 <PkaGetNextMsBit+0x74>)
    42ec:	bf18      	it	ne
    42ee:	f001 011f 	andne.w	r1, r1, #31
    42f2:	6028      	str	r0, [r5, #0]
    42f4:	480b      	ldr	r0, [pc, #44]	; (4324 <PkaGetNextMsBit+0x78>)
    42f6:	6800      	ldr	r0, [r0, #0]
    42f8:	9002      	str	r0, [sp, #8]
    42fa:	9802      	ldr	r0, [sp, #8]
    42fc:	bf1c      	itt	ne
    42fe:	fa00 f101 	lslne.w	r1, r0, r1
    4302:	6011      	strne	r1, [r2, #0]
    4304:	f04f 0100 	mov.w	r1, #0
    4308:	bf08      	it	eq
    430a:	6010      	streq	r0, [r2, #0]
    430c:	6019      	str	r1, [r3, #0]
    430e:	6810      	ldr	r0, [r2, #0]
    4310:	0043      	lsls	r3, r0, #1
    4312:	0fc0      	lsrs	r0, r0, #31
    4314:	6013      	str	r3, [r2, #0]
    4316:	b005      	add	sp, #20
    4318:	bdf0      	pop	{r4, r5, r6, r7, pc}
    431a:	bf00      	nop
    431c:	508410b4 	.word	0x508410b4
    4320:	508410e4 	.word	0x508410e4
    4324:	508410dc 	.word	0x508410dc

00004328 <PkaSetRegsSizesTab>:
    4328:	4b0c      	ldr	r3, [pc, #48]	; (435c <PkaSetRegsSizesTab+0x34>)
    432a:	0189      	lsls	r1, r1, #6
    432c:	6018      	str	r0, [r3, #0]
    432e:	303f      	adds	r0, #63	; 0x3f
    4330:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
    4334:	3040      	adds	r0, #64	; 0x40
    4336:	6058      	str	r0, [r3, #4]
    4338:	6099      	str	r1, [r3, #8]
    433a:	4809      	ldr	r0, [pc, #36]	; (4360 <PkaSetRegsSizesTab+0x38>)
    433c:	60d9      	str	r1, [r3, #12]
    433e:	6119      	str	r1, [r3, #16]
    4340:	6159      	str	r1, [r3, #20]
    4342:	6199      	str	r1, [r3, #24]
    4344:	331c      	adds	r3, #28
    4346:	b082      	sub	sp, #8
    4348:	6019      	str	r1, [r3, #0]
    434a:	6802      	ldr	r2, [r0, #0]
    434c:	9201      	str	r2, [sp, #4]
    434e:	9a01      	ldr	r2, [sp, #4]
    4350:	07d2      	lsls	r2, r2, #31
    4352:	d5fa      	bpl.n	434a <PkaSetRegsSizesTab+0x22>
    4354:	6019      	str	r1, [r3, #0]
    4356:	b002      	add	sp, #8
    4358:	4770      	bx	lr
    435a:	bf00      	nop
    435c:	50841090 	.word	0x50841090
    4360:	508410b4 	.word	0x508410b4

00004364 <PkaInitPka>:
    4364:	b538      	push	{r3, r4, r5, lr}
    4366:	f1a0 0320 	sub.w	r3, r0, #32
    436a:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
    436e:	4605      	mov	r5, r0
    4370:	d82c      	bhi.n	43cc <PkaInitPka+0x68>
    4372:	288f      	cmp	r0, #143	; 0x8f
    4374:	d826      	bhi.n	43c4 <PkaInitPka+0x60>
    4376:	f100 0347 	add.w	r3, r0, #71	; 0x47
    437a:	f100 0466 	add.w	r4, r0, #102	; 0x66
    437e:	06db      	lsls	r3, r3, #27
    4380:	ea4f 1454 	mov.w	r4, r4, lsr #5
    4384:	d000      	beq.n	4388 <PkaInitPka+0x24>
    4386:	3401      	adds	r4, #1
    4388:	0164      	lsls	r4, r4, #5
    438a:	343f      	adds	r4, #63	; 0x3f
    438c:	09a4      	lsrs	r4, r4, #6
    438e:	3401      	adds	r4, #1
    4390:	b111      	cbz	r1, 4398 <PkaInitPka+0x34>
    4392:	42a1      	cmp	r1, r4
    4394:	d31a      	bcc.n	43cc <PkaInitPka+0x68>
    4396:	460c      	mov	r4, r1
    4398:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    439c:	00e3      	lsls	r3, r4, #3
    439e:	fbb0 f0f3 	udiv	r0, r0, r3
    43a2:	2820      	cmp	r0, #32
    43a4:	bf28      	it	cs
    43a6:	2020      	movcs	r0, #32
    43a8:	b102      	cbz	r2, 43ac <PkaInitPka+0x48>
    43aa:	6010      	str	r0, [r2, #0]
    43ac:	2201      	movs	r2, #1
    43ae:	4b08      	ldr	r3, [pc, #32]	; (43d0 <PkaInitPka+0x6c>)
    43b0:	4621      	mov	r1, r4
    43b2:	601a      	str	r2, [r3, #0]
    43b4:	f7ff ff10 	bl	41d8 <PkaSetRegsMapTab>
    43b8:	4628      	mov	r0, r5
    43ba:	4621      	mov	r1, r4
    43bc:	f7ff ffb4 	bl	4328 <PkaSetRegsSizesTab>
    43c0:	2000      	movs	r0, #0
    43c2:	bd38      	pop	{r3, r4, r5, pc}
    43c4:	f100 041f 	add.w	r4, r0, #31
    43c8:	0964      	lsrs	r4, r4, #5
    43ca:	e7dd      	b.n	4388 <PkaInitPka+0x24>
    43cc:	4801      	ldr	r0, [pc, #4]	; (43d4 <PkaInitPka+0x70>)
    43ce:	e7f8      	b.n	43c2 <PkaInitPka+0x5e>
    43d0:	5084181c 	.word	0x5084181c
    43d4:	00f02122 	.word	0x00f02122

000043d8 <PkaClearBlockOfRegs>:
    43d8:	4b46      	ldr	r3, [pc, #280]	; (44f4 <PkaClearBlockOfRegs+0x11c>)
    43da:	b5f0      	push	{r4, r5, r6, r7, lr}
    43dc:	461d      	mov	r5, r3
    43de:	b089      	sub	sp, #36	; 0x24
    43e0:	681c      	ldr	r4, [r3, #0]
    43e2:	9401      	str	r4, [sp, #4]
    43e4:	9c01      	ldr	r4, [sp, #4]
    43e6:	07e4      	lsls	r4, r4, #31
    43e8:	d5fa      	bpl.n	43e0 <PkaClearBlockOfRegs+0x8>
    43ea:	4b43      	ldr	r3, [pc, #268]	; (44f8 <PkaClearBlockOfRegs+0x120>)
    43ec:	2400      	movs	r4, #0
    43ee:	4413      	add	r3, r2
    43f0:	009b      	lsls	r3, r3, #2
    43f2:	681a      	ldr	r2, [r3, #0]
    43f4:	180b      	adds	r3, r1, r0
    43f6:	2b1e      	cmp	r3, #30
    43f8:	bf88      	it	hi
    43fa:	f1c0 011e 	rsbhi	r1, r0, #30
    43fe:	321f      	adds	r2, #31
    4400:	180b      	adds	r3, r1, r0
    4402:	0952      	lsrs	r2, r2, #5
    4404:	4353      	muls	r3, r2
    4406:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    440a:	bf84      	itt	hi
    440c:	f44f 6180 	movhi.w	r1, #1024	; 0x400
    4410:	fbb1 f1f2 	udivhi	r1, r1, r2
    4414:	4627      	mov	r7, r4
    4416:	bf88      	it	hi
    4418:	1a09      	subhi	r1, r1, r0
    441a:	f8df e0e4 	ldr.w	lr, [pc, #228]	; 4500 <PkaClearBlockOfRegs+0x128>
    441e:	f100 50a1 	add.w	r0, r0, #337641472	; 0x14200000
    4422:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 4504 <PkaClearBlockOfRegs+0x12c>
    4426:	f500 3082 	add.w	r0, r0, #66560	; 0x10400
    442a:	42a1      	cmp	r1, r4
    442c:	dc33      	bgt.n	4496 <PkaClearBlockOfRegs+0xbe>
    442e:	682b      	ldr	r3, [r5, #0]
    4430:	9304      	str	r3, [sp, #16]
    4432:	9b04      	ldr	r3, [sp, #16]
    4434:	07db      	lsls	r3, r3, #31
    4436:	d5fa      	bpl.n	442e <PkaClearBlockOfRegs+0x56>
    4438:	4b30      	ldr	r3, [pc, #192]	; (44fc <PkaClearBlockOfRegs+0x124>)
    443a:	681b      	ldr	r3, [r3, #0]
    443c:	6829      	ldr	r1, [r5, #0]
    443e:	9105      	str	r1, [sp, #20]
    4440:	9905      	ldr	r1, [sp, #20]
    4442:	07cf      	lsls	r7, r1, #31
    4444:	d5fa      	bpl.n	443c <PkaClearBlockOfRegs+0x64>
    4446:	4c2e      	ldr	r4, [pc, #184]	; (4500 <PkaClearBlockOfRegs+0x128>)
    4448:	492e      	ldr	r1, [pc, #184]	; (4504 <PkaClearBlockOfRegs+0x12c>)
    444a:	6023      	str	r3, [r4, #0]
    444c:	2300      	movs	r3, #0
    444e:	461e      	mov	r6, r3
    4450:	4293      	cmp	r3, r2
    4452:	f103 0001 	add.w	r0, r3, #1
    4456:	d140      	bne.n	44da <PkaClearBlockOfRegs+0x102>
    4458:	4619      	mov	r1, r3
    445a:	2600      	movs	r6, #0
    445c:	f020 0201 	bic.w	r2, r0, #1
    4460:	4828      	ldr	r0, [pc, #160]	; (4504 <PkaClearBlockOfRegs+0x12c>)
    4462:	428a      	cmp	r2, r1
    4464:	d83c      	bhi.n	44e0 <PkaClearBlockOfRegs+0x108>
    4466:	6829      	ldr	r1, [r5, #0]
    4468:	9106      	str	r1, [sp, #24]
    446a:	9906      	ldr	r1, [sp, #24]
    446c:	07ce      	lsls	r6, r1, #31
    446e:	d5fa      	bpl.n	4466 <PkaClearBlockOfRegs+0x8e>
    4470:	4925      	ldr	r1, [pc, #148]	; (4508 <PkaClearBlockOfRegs+0x130>)
    4472:	6809      	ldr	r1, [r1, #0]
    4474:	6828      	ldr	r0, [r5, #0]
    4476:	9007      	str	r0, [sp, #28]
    4478:	9807      	ldr	r0, [sp, #28]
    447a:	07c0      	lsls	r0, r0, #31
    447c:	d5fa      	bpl.n	4474 <PkaClearBlockOfRegs+0x9c>
    447e:	6021      	str	r1, [r4, #0]
    4480:	2100      	movs	r1, #0
    4482:	460c      	mov	r4, r1
    4484:	481f      	ldr	r0, [pc, #124]	; (4504 <PkaClearBlockOfRegs+0x12c>)
    4486:	428b      	cmp	r3, r1
    4488:	d12d      	bne.n	44e6 <PkaClearBlockOfRegs+0x10e>
    448a:	2000      	movs	r0, #0
    448c:	491d      	ldr	r1, [pc, #116]	; (4504 <PkaClearBlockOfRegs+0x12c>)
    448e:	429a      	cmp	r2, r3
    4490:	d82c      	bhi.n	44ec <PkaClearBlockOfRegs+0x114>
    4492:	b009      	add	sp, #36	; 0x24
    4494:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4496:	682b      	ldr	r3, [r5, #0]
    4498:	9302      	str	r3, [sp, #8]
    449a:	9b02      	ldr	r3, [sp, #8]
    449c:	07db      	lsls	r3, r3, #31
    449e:	d5fa      	bpl.n	4496 <PkaClearBlockOfRegs+0xbe>
    44a0:	1903      	adds	r3, r0, r4
    44a2:	009b      	lsls	r3, r3, #2
    44a4:	681b      	ldr	r3, [r3, #0]
    44a6:	682e      	ldr	r6, [r5, #0]
    44a8:	9603      	str	r6, [sp, #12]
    44aa:	9e03      	ldr	r6, [sp, #12]
    44ac:	07f6      	lsls	r6, r6, #31
    44ae:	d5fa      	bpl.n	44a6 <PkaClearBlockOfRegs+0xce>
    44b0:	f8ce 3000 	str.w	r3, [lr]
    44b4:	2300      	movs	r3, #0
    44b6:	4293      	cmp	r3, r2
    44b8:	f103 0301 	add.w	r3, r3, #1
    44bc:	d106      	bne.n	44cc <PkaClearBlockOfRegs+0xf4>
    44be:	4616      	mov	r6, r2
    44c0:	f023 0301 	bic.w	r3, r3, #1
    44c4:	42b3      	cmp	r3, r6
    44c6:	d804      	bhi.n	44d2 <PkaClearBlockOfRegs+0xfa>
    44c8:	3401      	adds	r4, #1
    44ca:	e7ae      	b.n	442a <PkaClearBlockOfRegs+0x52>
    44cc:	f8cc 7000 	str.w	r7, [ip]
    44d0:	e7f1      	b.n	44b6 <PkaClearBlockOfRegs+0xde>
    44d2:	f8cc 7000 	str.w	r7, [ip]
    44d6:	3601      	adds	r6, #1
    44d8:	e7f4      	b.n	44c4 <PkaClearBlockOfRegs+0xec>
    44da:	600e      	str	r6, [r1, #0]
    44dc:	4603      	mov	r3, r0
    44de:	e7b7      	b.n	4450 <PkaClearBlockOfRegs+0x78>
    44e0:	6006      	str	r6, [r0, #0]
    44e2:	3101      	adds	r1, #1
    44e4:	e7bd      	b.n	4462 <PkaClearBlockOfRegs+0x8a>
    44e6:	6004      	str	r4, [r0, #0]
    44e8:	3101      	adds	r1, #1
    44ea:	e7cc      	b.n	4486 <PkaClearBlockOfRegs+0xae>
    44ec:	6008      	str	r0, [r1, #0]
    44ee:	3301      	adds	r3, #1
    44f0:	e7cd      	b.n	448e <PkaClearBlockOfRegs+0xb6>
    44f2:	bf00      	nop
    44f4:	508410b4 	.word	0x508410b4
    44f8:	14210424 	.word	0x14210424
    44fc:	5084107c 	.word	0x5084107c
    4500:	508410d4 	.word	0x508410d4
    4504:	508410d8 	.word	0x508410d8
    4508:	50841078 	.word	0x50841078

0000450c <PkaFinishAndMutexUnlock>:
    450c:	b508      	push	{r3, lr}
    450e:	b140      	cbz	r0, 4522 <PkaFinishAndMutexUnlock+0x16>
    4510:	2820      	cmp	r0, #32
    4512:	4601      	mov	r1, r0
    4514:	f04f 0207 	mov.w	r2, #7
    4518:	bf28      	it	cs
    451a:	2120      	movcs	r1, #32
    451c:	2000      	movs	r0, #0
    451e:	f7ff ff5b 	bl	43d8 <PkaClearBlockOfRegs>
    4522:	2200      	movs	r2, #0
    4524:	4b01      	ldr	r3, [pc, #4]	; (452c <PkaFinishAndMutexUnlock+0x20>)
    4526:	601a      	str	r2, [r3, #0]
    4528:	bd08      	pop	{r3, pc}
    452a:	bf00      	nop
    452c:	5084181c 	.word	0x5084181c

00004530 <PkaCopyDataIntoPkaReg>:
    4530:	b5f0      	push	{r4, r5, r6, r7, lr}
    4532:	4d29      	ldr	r5, [pc, #164]	; (45d8 <PkaCopyDataIntoPkaReg+0xa8>)
    4534:	b085      	sub	sp, #20
    4536:	462c      	mov	r4, r5
    4538:	682e      	ldr	r6, [r5, #0]
    453a:	9600      	str	r6, [sp, #0]
    453c:	9e00      	ldr	r6, [sp, #0]
    453e:	07f6      	lsls	r6, r6, #31
    4540:	d5fa      	bpl.n	4538 <PkaCopyDataIntoPkaReg+0x8>
    4542:	f100 50a1 	add.w	r0, r0, #337641472	; 0x14200000
    4546:	f500 3082 	add.w	r0, r0, #66560	; 0x10400
    454a:	0080      	lsls	r0, r0, #2
    454c:	6805      	ldr	r5, [r0, #0]
    454e:	6820      	ldr	r0, [r4, #0]
    4550:	9001      	str	r0, [sp, #4]
    4552:	9801      	ldr	r0, [sp, #4]
    4554:	07c7      	lsls	r7, r0, #31
    4556:	d5fa      	bpl.n	454e <PkaCopyDataIntoPkaReg+0x1e>
    4558:	4820      	ldr	r0, [pc, #128]	; (45dc <PkaCopyDataIntoPkaReg+0xac>)
    455a:	4f21      	ldr	r7, [pc, #132]	; (45e0 <PkaCopyDataIntoPkaReg+0xb0>)
    455c:	6005      	str	r5, [r0, #0]
    455e:	eb02 0683 	add.w	r6, r2, r3, lsl #2
    4562:	42b2      	cmp	r2, r6
    4564:	d129      	bne.n	45ba <PkaCopyDataIntoPkaReg+0x8a>
    4566:	2700      	movs	r7, #0
    4568:	1c5a      	adds	r2, r3, #1
    456a:	4e1d      	ldr	r6, [pc, #116]	; (45e0 <PkaCopyDataIntoPkaReg+0xb0>)
    456c:	f022 0201 	bic.w	r2, r2, #1
    4570:	429a      	cmp	r2, r3
    4572:	d827      	bhi.n	45c4 <PkaCopyDataIntoPkaReg+0x94>
    4574:	6823      	ldr	r3, [r4, #0]
    4576:	9302      	str	r3, [sp, #8]
    4578:	9b02      	ldr	r3, [sp, #8]
    457a:	07de      	lsls	r6, r3, #31
    457c:	d5fa      	bpl.n	4574 <PkaCopyDataIntoPkaReg+0x44>
    457e:	4b19      	ldr	r3, [pc, #100]	; (45e4 <PkaCopyDataIntoPkaReg+0xb4>)
    4580:	440b      	add	r3, r1
    4582:	009b      	lsls	r3, r3, #2
    4584:	681b      	ldr	r3, [r3, #0]
    4586:	331f      	adds	r3, #31
    4588:	095b      	lsrs	r3, r3, #5
    458a:	429a      	cmp	r2, r3
    458c:	d213      	bcs.n	45b6 <PkaCopyDataIntoPkaReg+0x86>
    458e:	6821      	ldr	r1, [r4, #0]
    4590:	9103      	str	r1, [sp, #12]
    4592:	9903      	ldr	r1, [sp, #12]
    4594:	07c9      	lsls	r1, r1, #31
    4596:	d5fa      	bpl.n	458e <PkaCopyDataIntoPkaReg+0x5e>
    4598:	2100      	movs	r1, #0
    459a:	4415      	add	r5, r2
    459c:	6005      	str	r5, [r0, #0]
    459e:	4608      	mov	r0, r1
    45a0:	1a9b      	subs	r3, r3, r2
    45a2:	4a0f      	ldr	r2, [pc, #60]	; (45e0 <PkaCopyDataIntoPkaReg+0xb0>)
    45a4:	428b      	cmp	r3, r1
    45a6:	d810      	bhi.n	45ca <PkaCopyDataIntoPkaReg+0x9a>
    45a8:	2000      	movs	r0, #0
    45aa:	1c5a      	adds	r2, r3, #1
    45ac:	490c      	ldr	r1, [pc, #48]	; (45e0 <PkaCopyDataIntoPkaReg+0xb0>)
    45ae:	f022 0201 	bic.w	r2, r2, #1
    45b2:	429a      	cmp	r2, r3
    45b4:	d80c      	bhi.n	45d0 <PkaCopyDataIntoPkaReg+0xa0>
    45b6:	b005      	add	sp, #20
    45b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    45ba:	f852 cb04 	ldr.w	ip, [r2], #4
    45be:	f8c7 c000 	str.w	ip, [r7]
    45c2:	e7ce      	b.n	4562 <PkaCopyDataIntoPkaReg+0x32>
    45c4:	6037      	str	r7, [r6, #0]
    45c6:	3301      	adds	r3, #1
    45c8:	e7d2      	b.n	4570 <PkaCopyDataIntoPkaReg+0x40>
    45ca:	6010      	str	r0, [r2, #0]
    45cc:	3101      	adds	r1, #1
    45ce:	e7e9      	b.n	45a4 <PkaCopyDataIntoPkaReg+0x74>
    45d0:	6008      	str	r0, [r1, #0]
    45d2:	3301      	adds	r3, #1
    45d4:	e7ed      	b.n	45b2 <PkaCopyDataIntoPkaReg+0x82>
    45d6:	bf00      	nop
    45d8:	508410b4 	.word	0x508410b4
    45dc:	508410d4 	.word	0x508410d4
    45e0:	508410d8 	.word	0x508410d8
    45e4:	14210424 	.word	0x14210424

000045e8 <PkaEcdsaVerify>:
    45e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    45ec:	4b81      	ldr	r3, [pc, #516]	; (47f4 <PkaEcdsaVerify+0x20c>)
    45ee:	b0a0      	sub	sp, #128	; 0x80
    45f0:	681d      	ldr	r5, [r3, #0]
    45f2:	6898      	ldr	r0, [r3, #8]
    45f4:	3320      	adds	r3, #32
    45f6:	461e      	mov	r6, r3
    45f8:	681a      	ldr	r2, [r3, #0]
    45fa:	9201      	str	r2, [sp, #4]
    45fc:	9a01      	ldr	r2, [sp, #4]
    45fe:	07d7      	lsls	r7, r2, #31
    4600:	d5fa      	bpl.n	45f8 <PkaEcdsaVerify+0x10>
    4602:	4b7d      	ldr	r3, [pc, #500]	; (47f8 <PkaEcdsaVerify+0x210>)
    4604:	4a7d      	ldr	r2, [pc, #500]	; (47fc <PkaEcdsaVerify+0x214>)
    4606:	601a      	str	r2, [r3, #0]
    4608:	6832      	ldr	r2, [r6, #0]
    460a:	9202      	str	r2, [sp, #8]
    460c:	9a02      	ldr	r2, [sp, #8]
    460e:	07d4      	lsls	r4, r2, #31
    4610:	d5fa      	bpl.n	4608 <PkaEcdsaVerify+0x20>
    4612:	4a7b      	ldr	r2, [pc, #492]	; (4800 <PkaEcdsaVerify+0x218>)
    4614:	601a      	str	r2, [r3, #0]
    4616:	4a7b      	ldr	r2, [pc, #492]	; (4804 <PkaEcdsaVerify+0x21c>)
    4618:	4614      	mov	r4, r2
    461a:	6811      	ldr	r1, [r2, #0]
    461c:	9103      	str	r1, [sp, #12]
    461e:	9903      	ldr	r1, [sp, #12]
    4620:	07c9      	lsls	r1, r1, #31
    4622:	d5fa      	bpl.n	461a <PkaEcdsaVerify+0x32>
    4624:	4a78      	ldr	r2, [pc, #480]	; (4808 <PkaEcdsaVerify+0x220>)
    4626:	6811      	ldr	r1, [r2, #0]
    4628:	f3c1 2140 	ubfx	r1, r1, #9, #1
    462c:	6837      	ldr	r7, [r6, #0]
    462e:	9704      	str	r7, [sp, #16]
    4630:	9f04      	ldr	r7, [sp, #16]
    4632:	07ff      	lsls	r7, r7, #31
    4634:	d5fa      	bpl.n	462c <PkaEcdsaVerify+0x44>
    4636:	4f75      	ldr	r7, [pc, #468]	; (480c <PkaEcdsaVerify+0x224>)
    4638:	601f      	str	r7, [r3, #0]
    463a:	6827      	ldr	r7, [r4, #0]
    463c:	9705      	str	r7, [sp, #20]
    463e:	9f05      	ldr	r7, [sp, #20]
    4640:	07ff      	lsls	r7, r7, #31
    4642:	d5fa      	bpl.n	463a <PkaEcdsaVerify+0x52>
    4644:	6817      	ldr	r7, [r2, #0]
    4646:	2900      	cmp	r1, #0
    4648:	f000 80cf 	beq.w	47ea <PkaEcdsaVerify+0x202>
    464c:	05b9      	lsls	r1, r7, #22
    464e:	f140 80cc 	bpl.w	47ea <PkaEcdsaVerify+0x202>
    4652:	6831      	ldr	r1, [r6, #0]
    4654:	9106      	str	r1, [sp, #24]
    4656:	9906      	ldr	r1, [sp, #24]
    4658:	07cf      	lsls	r7, r1, #31
    465a:	d5fa      	bpl.n	4652 <PkaEcdsaVerify+0x6a>
    465c:	496c      	ldr	r1, [pc, #432]	; (4810 <PkaEcdsaVerify+0x228>)
    465e:	6019      	str	r1, [r3, #0]
    4660:	6821      	ldr	r1, [r4, #0]
    4662:	9107      	str	r1, [sp, #28]
    4664:	9907      	ldr	r1, [sp, #28]
    4666:	07c9      	lsls	r1, r1, #31
    4668:	d5fa      	bpl.n	4660 <PkaEcdsaVerify+0x78>
    466a:	6811      	ldr	r1, [r2, #0]
    466c:	f3c1 2140 	ubfx	r1, r1, #9, #1
    4670:	6837      	ldr	r7, [r6, #0]
    4672:	9708      	str	r7, [sp, #32]
    4674:	9f08      	ldr	r7, [sp, #32]
    4676:	07ff      	lsls	r7, r7, #31
    4678:	d5fa      	bpl.n	4670 <PkaEcdsaVerify+0x88>
    467a:	4f66      	ldr	r7, [pc, #408]	; (4814 <PkaEcdsaVerify+0x22c>)
    467c:	601f      	str	r7, [r3, #0]
    467e:	6827      	ldr	r7, [r4, #0]
    4680:	9709      	str	r7, [sp, #36]	; 0x24
    4682:	9f09      	ldr	r7, [sp, #36]	; 0x24
    4684:	07ff      	lsls	r7, r7, #31
    4686:	d5fa      	bpl.n	467e <PkaEcdsaVerify+0x96>
    4688:	6812      	ldr	r2, [r2, #0]
    468a:	2900      	cmp	r1, #0
    468c:	f000 80af 	beq.w	47ee <PkaEcdsaVerify+0x206>
    4690:	0591      	lsls	r1, r2, #22
    4692:	f140 80ac 	bpl.w	47ee <PkaEcdsaVerify+0x206>
    4696:	6832      	ldr	r2, [r6, #0]
    4698:	920a      	str	r2, [sp, #40]	; 0x28
    469a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    469c:	07d2      	lsls	r2, r2, #31
    469e:	d5fa      	bpl.n	4696 <PkaEcdsaVerify+0xae>
    46a0:	4a56      	ldr	r2, [pc, #344]	; (47fc <PkaEcdsaVerify+0x214>)
    46a2:	601a      	str	r2, [r3, #0]
    46a4:	6832      	ldr	r2, [r6, #0]
    46a6:	920b      	str	r2, [sp, #44]	; 0x2c
    46a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    46aa:	07d7      	lsls	r7, r2, #31
    46ac:	d5fa      	bpl.n	46a4 <PkaEcdsaVerify+0xbc>
    46ae:	4a5a      	ldr	r2, [pc, #360]	; (4818 <PkaEcdsaVerify+0x230>)
    46b0:	601a      	str	r2, [r3, #0]
    46b2:	6831      	ldr	r1, [r6, #0]
    46b4:	910c      	str	r1, [sp, #48]	; 0x30
    46b6:	990c      	ldr	r1, [sp, #48]	; 0x30
    46b8:	07cc      	lsls	r4, r1, #31
    46ba:	d5fa      	bpl.n	46b2 <PkaEcdsaVerify+0xca>
    46bc:	4957      	ldr	r1, [pc, #348]	; (481c <PkaEcdsaVerify+0x234>)
    46be:	6019      	str	r1, [r3, #0]
    46c0:	6831      	ldr	r1, [r6, #0]
    46c2:	910d      	str	r1, [sp, #52]	; 0x34
    46c4:	990d      	ldr	r1, [sp, #52]	; 0x34
    46c6:	07c9      	lsls	r1, r1, #31
    46c8:	d5fa      	bpl.n	46c0 <PkaEcdsaVerify+0xd8>
    46ca:	4955      	ldr	r1, [pc, #340]	; (4820 <PkaEcdsaVerify+0x238>)
    46cc:	6019      	str	r1, [r3, #0]
    46ce:	6831      	ldr	r1, [r6, #0]
    46d0:	910e      	str	r1, [sp, #56]	; 0x38
    46d2:	990e      	ldr	r1, [sp, #56]	; 0x38
    46d4:	07cf      	lsls	r7, r1, #31
    46d6:	d5fa      	bpl.n	46ce <PkaEcdsaVerify+0xe6>
    46d8:	4952      	ldr	r1, [pc, #328]	; (4824 <PkaEcdsaVerify+0x23c>)
    46da:	6019      	str	r1, [r3, #0]
    46dc:	6831      	ldr	r1, [r6, #0]
    46de:	910f      	str	r1, [sp, #60]	; 0x3c
    46e0:	990f      	ldr	r1, [sp, #60]	; 0x3c
    46e2:	07cc      	lsls	r4, r1, #31
    46e4:	d5fa      	bpl.n	46dc <PkaEcdsaVerify+0xf4>
    46e6:	4950      	ldr	r1, [pc, #320]	; (4828 <PkaEcdsaVerify+0x240>)
    46e8:	6019      	str	r1, [r3, #0]
    46ea:	4b50      	ldr	r3, [pc, #320]	; (482c <PkaEcdsaVerify+0x244>)
    46ec:	461e      	mov	r6, r3
    46ee:	6819      	ldr	r1, [r3, #0]
    46f0:	9110      	str	r1, [sp, #64]	; 0x40
    46f2:	9910      	ldr	r1, [sp, #64]	; 0x40
    46f4:	07c9      	lsls	r1, r1, #31
    46f6:	d5fa      	bpl.n	46ee <PkaEcdsaVerify+0x106>
    46f8:	4c3f      	ldr	r4, [pc, #252]	; (47f8 <PkaEcdsaVerify+0x210>)
    46fa:	4b4d      	ldr	r3, [pc, #308]	; (4830 <PkaEcdsaVerify+0x248>)
    46fc:	6023      	str	r3, [r4, #0]
    46fe:	6833      	ldr	r3, [r6, #0]
    4700:	9311      	str	r3, [sp, #68]	; 0x44
    4702:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4704:	07db      	lsls	r3, r3, #31
    4706:	d5fa      	bpl.n	46fe <PkaEcdsaVerify+0x116>
    4708:	4b4a      	ldr	r3, [pc, #296]	; (4834 <PkaEcdsaVerify+0x24c>)
    470a:	6023      	str	r3, [r4, #0]
    470c:	6833      	ldr	r3, [r6, #0]
    470e:	9312      	str	r3, [sp, #72]	; 0x48
    4710:	9b12      	ldr	r3, [sp, #72]	; 0x48
    4712:	07df      	lsls	r7, r3, #31
    4714:	d5fa      	bpl.n	470c <PkaEcdsaVerify+0x124>
    4716:	4b48      	ldr	r3, [pc, #288]	; (4838 <PkaEcdsaVerify+0x250>)
    4718:	6023      	str	r3, [r4, #0]
    471a:	4b3a      	ldr	r3, [pc, #232]	; (4804 <PkaEcdsaVerify+0x21c>)
    471c:	4698      	mov	r8, r3
    471e:	6819      	ldr	r1, [r3, #0]
    4720:	9113      	str	r1, [sp, #76]	; 0x4c
    4722:	9913      	ldr	r1, [sp, #76]	; 0x4c
    4724:	07c9      	lsls	r1, r1, #31
    4726:	d5fa      	bpl.n	471e <PkaEcdsaVerify+0x136>
    4728:	4f32      	ldr	r7, [pc, #200]	; (47f4 <PkaEcdsaVerify+0x20c>)
    472a:	6038      	str	r0, [r7, #0]
    472c:	6833      	ldr	r3, [r6, #0]
    472e:	9314      	str	r3, [sp, #80]	; 0x50
    4730:	9b14      	ldr	r3, [sp, #80]	; 0x50
    4732:	07db      	lsls	r3, r3, #31
    4734:	d5fa      	bpl.n	472c <PkaEcdsaVerify+0x144>
    4736:	6022      	str	r2, [r4, #0]
    4738:	6833      	ldr	r3, [r6, #0]
    473a:	9315      	str	r3, [sp, #84]	; 0x54
    473c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    473e:	07d8      	lsls	r0, r3, #31
    4740:	d5fa      	bpl.n	4738 <PkaEcdsaVerify+0x150>
    4742:	4b3e      	ldr	r3, [pc, #248]	; (483c <PkaEcdsaVerify+0x254>)
    4744:	6023      	str	r3, [r4, #0]
    4746:	6833      	ldr	r3, [r6, #0]
    4748:	9316      	str	r3, [sp, #88]	; 0x58
    474a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    474c:	07d9      	lsls	r1, r3, #31
    474e:	d5fa      	bpl.n	4746 <PkaEcdsaVerify+0x15e>
    4750:	4b3b      	ldr	r3, [pc, #236]	; (4840 <PkaEcdsaVerify+0x258>)
    4752:	6023      	str	r3, [r4, #0]
    4754:	6833      	ldr	r3, [r6, #0]
    4756:	9317      	str	r3, [sp, #92]	; 0x5c
    4758:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    475a:	07da      	lsls	r2, r3, #31
    475c:	d5fa      	bpl.n	4754 <PkaEcdsaVerify+0x16c>
    475e:	4b39      	ldr	r3, [pc, #228]	; (4844 <PkaEcdsaVerify+0x25c>)
    4760:	6023      	str	r3, [r4, #0]
    4762:	6833      	ldr	r3, [r6, #0]
    4764:	9318      	str	r3, [sp, #96]	; 0x60
    4766:	9b18      	ldr	r3, [sp, #96]	; 0x60
    4768:	07db      	lsls	r3, r3, #31
    476a:	d5fa      	bpl.n	4762 <PkaEcdsaVerify+0x17a>
    476c:	4b36      	ldr	r3, [pc, #216]	; (4848 <PkaEcdsaVerify+0x260>)
    476e:	6023      	str	r3, [r4, #0]
    4770:	6833      	ldr	r3, [r6, #0]
    4772:	9319      	str	r3, [sp, #100]	; 0x64
    4774:	9b19      	ldr	r3, [sp, #100]	; 0x64
    4776:	07d8      	lsls	r0, r3, #31
    4778:	d5fa      	bpl.n	4770 <PkaEcdsaVerify+0x188>
    477a:	4b34      	ldr	r3, [pc, #208]	; (484c <PkaEcdsaVerify+0x264>)
    477c:	6023      	str	r3, [r4, #0]
    477e:	6833      	ldr	r3, [r6, #0]
    4780:	931a      	str	r3, [sp, #104]	; 0x68
    4782:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    4784:	07d9      	lsls	r1, r3, #31
    4786:	d5fa      	bpl.n	477e <PkaEcdsaVerify+0x196>
    4788:	4b31      	ldr	r3, [pc, #196]	; (4850 <PkaEcdsaVerify+0x268>)
    478a:	6023      	str	r3, [r4, #0]
    478c:	6833      	ldr	r3, [r6, #0]
    478e:	931b      	str	r3, [sp, #108]	; 0x6c
    4790:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    4792:	07da      	lsls	r2, r3, #31
    4794:	d5fa      	bpl.n	478c <PkaEcdsaVerify+0x1a4>
    4796:	4b2f      	ldr	r3, [pc, #188]	; (4854 <PkaEcdsaVerify+0x26c>)
    4798:	6023      	str	r3, [r4, #0]
    479a:	f000 fc1d 	bl	4fd8 <PkaSum2ScalarMullt>
    479e:	bb08      	cbnz	r0, 47e4 <PkaEcdsaVerify+0x1fc>
    47a0:	f8d8 3000 	ldr.w	r3, [r8]
    47a4:	931c      	str	r3, [sp, #112]	; 0x70
    47a6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    47a8:	07db      	lsls	r3, r3, #31
    47aa:	d5f9      	bpl.n	47a0 <PkaEcdsaVerify+0x1b8>
    47ac:	603d      	str	r5, [r7, #0]
    47ae:	6833      	ldr	r3, [r6, #0]
    47b0:	931d      	str	r3, [sp, #116]	; 0x74
    47b2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    47b4:	07d9      	lsls	r1, r3, #31
    47b6:	d5fa      	bpl.n	47ae <PkaEcdsaVerify+0x1c6>
    47b8:	4b27      	ldr	r3, [pc, #156]	; (4858 <PkaEcdsaVerify+0x270>)
    47ba:	6023      	str	r3, [r4, #0]
    47bc:	6833      	ldr	r3, [r6, #0]
    47be:	931e      	str	r3, [sp, #120]	; 0x78
    47c0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    47c2:	07da      	lsls	r2, r3, #31
    47c4:	d5fa      	bpl.n	47bc <PkaEcdsaVerify+0x1d4>
    47c6:	4b25      	ldr	r3, [pc, #148]	; (485c <PkaEcdsaVerify+0x274>)
    47c8:	6023      	str	r3, [r4, #0]
    47ca:	f8d8 3000 	ldr.w	r3, [r8]
    47ce:	931f      	str	r3, [sp, #124]	; 0x7c
    47d0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    47d2:	07db      	lsls	r3, r3, #31
    47d4:	d5f9      	bpl.n	47ca <PkaEcdsaVerify+0x1e2>
    47d6:	4b0c      	ldr	r3, [pc, #48]	; (4808 <PkaEcdsaVerify+0x220>)
    47d8:	681b      	ldr	r3, [r3, #0]
    47da:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    47de:	4b20      	ldr	r3, [pc, #128]	; (4860 <PkaEcdsaVerify+0x278>)
    47e0:	bf08      	it	eq
    47e2:	4618      	moveq	r0, r3
    47e4:	b020      	add	sp, #128	; 0x80
    47e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    47ea:	481e      	ldr	r0, [pc, #120]	; (4864 <PkaEcdsaVerify+0x27c>)
    47ec:	e7fa      	b.n	47e4 <PkaEcdsaVerify+0x1fc>
    47ee:	481e      	ldr	r0, [pc, #120]	; (4868 <PkaEcdsaVerify+0x280>)
    47f0:	e7f8      	b.n	47e4 <PkaEcdsaVerify+0x1fc>
    47f2:	bf00      	nop
    47f4:	50841090 	.word	0x50841090
    47f8:	50841080 	.word	0x50841080
    47fc:	51021000 	.word	0x51021000
    4800:	29721fc0 	.word	0x29721fc0
    4804:	508410b4 	.word	0x508410b4
    4808:	50841088 	.word	0x50841088
    480c:	2901cfc0 	.word	0x2901cfc0
    4810:	290e1fc0 	.word	0x290e1fc0
    4814:	29003fc0 	.word	0x29003fc0
    4818:	49020140 	.word	0x49020140
    481c:	a8843100 	.word	0xa8843100
    4820:	49160000 	.word	0x49160000
    4824:	a1080140 	.word	0xa1080140
    4828:	88084480 	.word	0x88084480
    482c:	508410b0 	.word	0x508410b0
    4830:	887044c0 	.word	0x887044c0
    4834:	417a0780 	.word	0x417a0780
    4838:	417e07c0 	.word	0x417e07c0
    483c:	496a0000 	.word	0x496a0000
    4840:	49160680 	.word	0x49160680
    4844:	496e0040 	.word	0x496e0040
    4848:	21000200 	.word	0x21000200
    484c:	21208200 	.word	0x21208200
    4850:	21208240 	.word	0x21208240
    4854:	21248280 	.word	0x21248280
    4858:	a161a140 	.word	0xa161a140
    485c:	5161c800 	.word	0x5161c800
    4860:	00f10803 	.word	0x00f10803
    4864:	00f10801 	.word	0x00f10801
    4868:	00f10802 	.word	0x00f10802

0000486c <nrf_cc310_bl_hash_update_internal>:
    486c:	4b32      	ldr	r3, [pc, #200]	; (4938 <nrf_cc310_bl_hash_update_internal+0xcc>)
    486e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4872:	4680      	mov	r8, r0
    4874:	4692      	mov	sl, r2
    4876:	4699      	mov	r9, r3
    4878:	6844      	ldr	r4, [r0, #4]
    487a:	681a      	ldr	r2, [r3, #0]
    487c:	2a00      	cmp	r2, #0
    487e:	d1fc      	bne.n	487a <nrf_cc310_bl_hash_update_internal+0xe>
    4880:	4b2e      	ldr	r3, [pc, #184]	; (493c <nrf_cc310_bl_hash_update_internal+0xd0>)
    4882:	469b      	mov	fp, r3
    4884:	681a      	ldr	r2, [r3, #0]
    4886:	2a00      	cmp	r2, #0
    4888:	d1fc      	bne.n	4884 <nrf_cc310_bl_hash_update_internal+0x18>
    488a:	f04f 30ff 	mov.w	r0, #4294967295
    488e:	9101      	str	r1, [sp, #4]
    4890:	f000 fc94 	bl	51bc <SaSi_HalClearInterruptBit>
    4894:	2080      	movs	r0, #128	; 0x80
    4896:	f000 fc97 	bl	51c8 <SaSi_HalMaskInterrupt>
    489a:	2301      	movs	r3, #1
    489c:	2007      	movs	r0, #7
    489e:	4a28      	ldr	r2, [pc, #160]	; (4940 <nrf_cc310_bl_hash_update_internal+0xd4>)
    48a0:	4d28      	ldr	r5, [pc, #160]	; (4944 <nrf_cc310_bl_hash_update_internal+0xd8>)
    48a2:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
    48a6:	602b      	str	r3, [r5, #0]
    48a8:	f8c2 013c 	str.w	r0, [r2, #316]	; 0x13c
    48ac:	6013      	str	r3, [r2, #0]
    48ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
    48b0:	4f25      	ldr	r7, [pc, #148]	; (4948 <nrf_cc310_bl_hash_update_internal+0xdc>)
    48b2:	4e26      	ldr	r6, [pc, #152]	; (494c <nrf_cc310_bl_hash_update_internal+0xe0>)
    48b4:	603b      	str	r3, [r7, #0]
    48b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    48b8:	4620      	mov	r0, r4
    48ba:	6033      	str	r3, [r6, #0]
    48bc:	f8d8 3000 	ldr.w	r3, [r8]
    48c0:	f842 3c04 	str.w	r3, [r2, #-4]
    48c4:	f8d8 3008 	ldr.w	r3, [r8, #8]
    48c8:	4798      	blx	r3
    48ca:	9901      	ldr	r1, [sp, #4]
    48cc:	f8d9 3000 	ldr.w	r3, [r9]
    48d0:	2b00      	cmp	r3, #0
    48d2:	d1fb      	bne.n	48cc <nrf_cc310_bl_hash_update_internal+0x60>
    48d4:	f1ba 0f00 	cmp.w	sl, #0
    48d8:	d120      	bne.n	491c <nrf_cc310_bl_hash_update_internal+0xb0>
    48da:	2204      	movs	r2, #4
    48dc:	4b1c      	ldr	r3, [pc, #112]	; (4950 <nrf_cc310_bl_hash_update_internal+0xe4>)
    48de:	601a      	str	r2, [r3, #0]
    48e0:	f8d9 3000 	ldr.w	r3, [r9]
    48e4:	2b00      	cmp	r3, #0
    48e6:	d1fb      	bne.n	48e0 <nrf_cc310_bl_hash_update_internal+0x74>
    48e8:	f8db a000 	ldr.w	sl, [fp]
    48ec:	f1ba 0f00 	cmp.w	sl, #0
    48f0:	d1fa      	bne.n	48e8 <nrf_cc310_bl_hash_update_internal+0x7c>
    48f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
    48f6:	4620      	mov	r0, r4
    48f8:	4798      	blx	r3
    48fa:	683b      	ldr	r3, [r7, #0]
    48fc:	6263      	str	r3, [r4, #36]	; 0x24
    48fe:	6833      	ldr	r3, [r6, #0]
    4900:	62a3      	str	r3, [r4, #40]	; 0x28
    4902:	4b14      	ldr	r3, [pc, #80]	; (4954 <nrf_cc310_bl_hash_update_internal+0xe8>)
    4904:	f8c3 a000 	str.w	sl, [r3]
    4908:	f8c3 a144 	str.w	sl, [r3, #324]	; 0x144
    490c:	f8d9 3000 	ldr.w	r3, [r9]
    4910:	2b00      	cmp	r3, #0
    4912:	d1fb      	bne.n	490c <nrf_cc310_bl_hash_update_internal+0xa0>
    4914:	602b      	str	r3, [r5, #0]
    4916:	b003      	add	sp, #12
    4918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    491c:	6a23      	ldr	r3, [r4, #32]
    491e:	2040      	movs	r0, #64	; 0x40
    4920:	2b01      	cmp	r3, #1
    4922:	bf04      	itt	eq
    4924:	4a0b      	ldreq	r2, [pc, #44]	; (4954 <nrf_cc310_bl_hash_update_internal+0xe8>)
    4926:	6013      	streq	r3, [r2, #0]
    4928:	4b0b      	ldr	r3, [pc, #44]	; (4958 <nrf_cc310_bl_hash_update_internal+0xec>)
    492a:	6019      	str	r1, [r3, #0]
    492c:	f8c3 a004 	str.w	sl, [r3, #4]
    4930:	f000 fc50 	bl	51d4 <SaSi_HalWaitInterrupt>
    4934:	e7d4      	b.n	48e0 <nrf_cc310_bl_hash_update_internal+0x74>
    4936:	bf00      	nop
    4938:	50841910 	.word	0x50841910
    493c:	50841c20 	.word	0x50841c20
    4940:	50841900 	.word	0x50841900
    4944:	50841818 	.word	0x50841818
    4948:	508417cc 	.word	0x508417cc
    494c:	508417d0 	.word	0x508417d0
    4950:	508417c8 	.word	0x508417c8
    4954:	50841684 	.word	0x50841684
    4958:	50841c28 	.word	0x50841c28

0000495c <PkaDoubleMdf2Mdf>:
    495c:	4b54      	ldr	r3, [pc, #336]	; (4ab0 <PkaDoubleMdf2Mdf+0x154>)
    495e:	b510      	push	{r4, lr}
    4960:	4619      	mov	r1, r3
    4962:	b098      	sub	sp, #96	; 0x60
    4964:	681a      	ldr	r2, [r3, #0]
    4966:	9201      	str	r2, [sp, #4]
    4968:	9a01      	ldr	r2, [sp, #4]
    496a:	07d2      	lsls	r2, r2, #31
    496c:	d5fa      	bpl.n	4964 <PkaDoubleMdf2Mdf+0x8>
    496e:	4b51      	ldr	r3, [pc, #324]	; (4ab4 <PkaDoubleMdf2Mdf+0x158>)
    4970:	4a51      	ldr	r2, [pc, #324]	; (4ab8 <PkaDoubleMdf2Mdf+0x15c>)
    4972:	601a      	str	r2, [r3, #0]
    4974:	680a      	ldr	r2, [r1, #0]
    4976:	9202      	str	r2, [sp, #8]
    4978:	9a02      	ldr	r2, [sp, #8]
    497a:	07d4      	lsls	r4, r2, #31
    497c:	d5fa      	bpl.n	4974 <PkaDoubleMdf2Mdf+0x18>
    497e:	4a4f      	ldr	r2, [pc, #316]	; (4abc <PkaDoubleMdf2Mdf+0x160>)
    4980:	601a      	str	r2, [r3, #0]
    4982:	680a      	ldr	r2, [r1, #0]
    4984:	9203      	str	r2, [sp, #12]
    4986:	9a03      	ldr	r2, [sp, #12]
    4988:	07d0      	lsls	r0, r2, #31
    498a:	d5fa      	bpl.n	4982 <PkaDoubleMdf2Mdf+0x26>
    498c:	484c      	ldr	r0, [pc, #304]	; (4ac0 <PkaDoubleMdf2Mdf+0x164>)
    498e:	6018      	str	r0, [r3, #0]
    4990:	680a      	ldr	r2, [r1, #0]
    4992:	9204      	str	r2, [sp, #16]
    4994:	9a04      	ldr	r2, [sp, #16]
    4996:	07d2      	lsls	r2, r2, #31
    4998:	d5fa      	bpl.n	4990 <PkaDoubleMdf2Mdf+0x34>
    499a:	4a4a      	ldr	r2, [pc, #296]	; (4ac4 <PkaDoubleMdf2Mdf+0x168>)
    499c:	601a      	str	r2, [r3, #0]
    499e:	680a      	ldr	r2, [r1, #0]
    49a0:	9205      	str	r2, [sp, #20]
    49a2:	9a05      	ldr	r2, [sp, #20]
    49a4:	07d4      	lsls	r4, r2, #31
    49a6:	d5fa      	bpl.n	499e <PkaDoubleMdf2Mdf+0x42>
    49a8:	4a47      	ldr	r2, [pc, #284]	; (4ac8 <PkaDoubleMdf2Mdf+0x16c>)
    49aa:	601a      	str	r2, [r3, #0]
    49ac:	680a      	ldr	r2, [r1, #0]
    49ae:	9206      	str	r2, [sp, #24]
    49b0:	9a06      	ldr	r2, [sp, #24]
    49b2:	07d2      	lsls	r2, r2, #31
    49b4:	d5fa      	bpl.n	49ac <PkaDoubleMdf2Mdf+0x50>
    49b6:	4a45      	ldr	r2, [pc, #276]	; (4acc <PkaDoubleMdf2Mdf+0x170>)
    49b8:	601a      	str	r2, [r3, #0]
    49ba:	680a      	ldr	r2, [r1, #0]
    49bc:	9207      	str	r2, [sp, #28]
    49be:	9a07      	ldr	r2, [sp, #28]
    49c0:	07d4      	lsls	r4, r2, #31
    49c2:	d5fa      	bpl.n	49ba <PkaDoubleMdf2Mdf+0x5e>
    49c4:	4a42      	ldr	r2, [pc, #264]	; (4ad0 <PkaDoubleMdf2Mdf+0x174>)
    49c6:	601a      	str	r2, [r3, #0]
    49c8:	680a      	ldr	r2, [r1, #0]
    49ca:	9208      	str	r2, [sp, #32]
    49cc:	9a08      	ldr	r2, [sp, #32]
    49ce:	07d2      	lsls	r2, r2, #31
    49d0:	d5fa      	bpl.n	49c8 <PkaDoubleMdf2Mdf+0x6c>
    49d2:	4a40      	ldr	r2, [pc, #256]	; (4ad4 <PkaDoubleMdf2Mdf+0x178>)
    49d4:	601a      	str	r2, [r3, #0]
    49d6:	680a      	ldr	r2, [r1, #0]
    49d8:	9209      	str	r2, [sp, #36]	; 0x24
    49da:	9a09      	ldr	r2, [sp, #36]	; 0x24
    49dc:	07d4      	lsls	r4, r2, #31
    49de:	d5fa      	bpl.n	49d6 <PkaDoubleMdf2Mdf+0x7a>
    49e0:	4a3d      	ldr	r2, [pc, #244]	; (4ad8 <PkaDoubleMdf2Mdf+0x17c>)
    49e2:	601a      	str	r2, [r3, #0]
    49e4:	680a      	ldr	r2, [r1, #0]
    49e6:	920a      	str	r2, [sp, #40]	; 0x28
    49e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    49ea:	07d2      	lsls	r2, r2, #31
    49ec:	d5fa      	bpl.n	49e4 <PkaDoubleMdf2Mdf+0x88>
    49ee:	4a3b      	ldr	r2, [pc, #236]	; (4adc <PkaDoubleMdf2Mdf+0x180>)
    49f0:	601a      	str	r2, [r3, #0]
    49f2:	680a      	ldr	r2, [r1, #0]
    49f4:	920b      	str	r2, [sp, #44]	; 0x2c
    49f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    49f8:	07d4      	lsls	r4, r2, #31
    49fa:	d5fa      	bpl.n	49f2 <PkaDoubleMdf2Mdf+0x96>
    49fc:	4a38      	ldr	r2, [pc, #224]	; (4ae0 <PkaDoubleMdf2Mdf+0x184>)
    49fe:	601a      	str	r2, [r3, #0]
    4a00:	680a      	ldr	r2, [r1, #0]
    4a02:	920c      	str	r2, [sp, #48]	; 0x30
    4a04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4a06:	07d2      	lsls	r2, r2, #31
    4a08:	d5fa      	bpl.n	4a00 <PkaDoubleMdf2Mdf+0xa4>
    4a0a:	4a36      	ldr	r2, [pc, #216]	; (4ae4 <PkaDoubleMdf2Mdf+0x188>)
    4a0c:	601a      	str	r2, [r3, #0]
    4a0e:	680a      	ldr	r2, [r1, #0]
    4a10:	920d      	str	r2, [sp, #52]	; 0x34
    4a12:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    4a14:	07d4      	lsls	r4, r2, #31
    4a16:	d5fa      	bpl.n	4a0e <PkaDoubleMdf2Mdf+0xb2>
    4a18:	4a33      	ldr	r2, [pc, #204]	; (4ae8 <PkaDoubleMdf2Mdf+0x18c>)
    4a1a:	601a      	str	r2, [r3, #0]
    4a1c:	680a      	ldr	r2, [r1, #0]
    4a1e:	920e      	str	r2, [sp, #56]	; 0x38
    4a20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4a22:	07d2      	lsls	r2, r2, #31
    4a24:	d5fa      	bpl.n	4a1c <PkaDoubleMdf2Mdf+0xc0>
    4a26:	4a31      	ldr	r2, [pc, #196]	; (4aec <PkaDoubleMdf2Mdf+0x190>)
    4a28:	601a      	str	r2, [r3, #0]
    4a2a:	680a      	ldr	r2, [r1, #0]
    4a2c:	920f      	str	r2, [sp, #60]	; 0x3c
    4a2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    4a30:	07d4      	lsls	r4, r2, #31
    4a32:	d5fa      	bpl.n	4a2a <PkaDoubleMdf2Mdf+0xce>
    4a34:	4a2e      	ldr	r2, [pc, #184]	; (4af0 <PkaDoubleMdf2Mdf+0x194>)
    4a36:	601a      	str	r2, [r3, #0]
    4a38:	680a      	ldr	r2, [r1, #0]
    4a3a:	9210      	str	r2, [sp, #64]	; 0x40
    4a3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    4a3e:	07d2      	lsls	r2, r2, #31
    4a40:	d5fa      	bpl.n	4a38 <PkaDoubleMdf2Mdf+0xdc>
    4a42:	4a2c      	ldr	r2, [pc, #176]	; (4af4 <PkaDoubleMdf2Mdf+0x198>)
    4a44:	601a      	str	r2, [r3, #0]
    4a46:	4b1a      	ldr	r3, [pc, #104]	; (4ab0 <PkaDoubleMdf2Mdf+0x154>)
    4a48:	4619      	mov	r1, r3
    4a4a:	681c      	ldr	r4, [r3, #0]
    4a4c:	9411      	str	r4, [sp, #68]	; 0x44
    4a4e:	9c11      	ldr	r4, [sp, #68]	; 0x44
    4a50:	07e4      	lsls	r4, r4, #31
    4a52:	d5fa      	bpl.n	4a4a <PkaDoubleMdf2Mdf+0xee>
    4a54:	4b17      	ldr	r3, [pc, #92]	; (4ab4 <PkaDoubleMdf2Mdf+0x158>)
    4a56:	6018      	str	r0, [r3, #0]
    4a58:	6808      	ldr	r0, [r1, #0]
    4a5a:	9012      	str	r0, [sp, #72]	; 0x48
    4a5c:	9812      	ldr	r0, [sp, #72]	; 0x48
    4a5e:	07c4      	lsls	r4, r0, #31
    4a60:	d5fa      	bpl.n	4a58 <PkaDoubleMdf2Mdf+0xfc>
    4a62:	601a      	str	r2, [r3, #0]
    4a64:	680a      	ldr	r2, [r1, #0]
    4a66:	9213      	str	r2, [sp, #76]	; 0x4c
    4a68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    4a6a:	07d0      	lsls	r0, r2, #31
    4a6c:	d5fa      	bpl.n	4a64 <PkaDoubleMdf2Mdf+0x108>
    4a6e:	4a12      	ldr	r2, [pc, #72]	; (4ab8 <PkaDoubleMdf2Mdf+0x15c>)
    4a70:	601a      	str	r2, [r3, #0]
    4a72:	680a      	ldr	r2, [r1, #0]
    4a74:	9214      	str	r2, [sp, #80]	; 0x50
    4a76:	9a14      	ldr	r2, [sp, #80]	; 0x50
    4a78:	07d2      	lsls	r2, r2, #31
    4a7a:	d5fa      	bpl.n	4a72 <PkaDoubleMdf2Mdf+0x116>
    4a7c:	4a1e      	ldr	r2, [pc, #120]	; (4af8 <PkaDoubleMdf2Mdf+0x19c>)
    4a7e:	601a      	str	r2, [r3, #0]
    4a80:	680a      	ldr	r2, [r1, #0]
    4a82:	9215      	str	r2, [sp, #84]	; 0x54
    4a84:	9a15      	ldr	r2, [sp, #84]	; 0x54
    4a86:	07d4      	lsls	r4, r2, #31
    4a88:	d5fa      	bpl.n	4a80 <PkaDoubleMdf2Mdf+0x124>
    4a8a:	4a1c      	ldr	r2, [pc, #112]	; (4afc <PkaDoubleMdf2Mdf+0x1a0>)
    4a8c:	601a      	str	r2, [r3, #0]
    4a8e:	680a      	ldr	r2, [r1, #0]
    4a90:	9216      	str	r2, [sp, #88]	; 0x58
    4a92:	9a16      	ldr	r2, [sp, #88]	; 0x58
    4a94:	07d0      	lsls	r0, r2, #31
    4a96:	d5fa      	bpl.n	4a8e <PkaDoubleMdf2Mdf+0x132>
    4a98:	4a19      	ldr	r2, [pc, #100]	; (4b00 <PkaDoubleMdf2Mdf+0x1a4>)
    4a9a:	601a      	str	r2, [r3, #0]
    4a9c:	680a      	ldr	r2, [r1, #0]
    4a9e:	9217      	str	r2, [sp, #92]	; 0x5c
    4aa0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    4aa2:	07d2      	lsls	r2, r2, #31
    4aa4:	d5fa      	bpl.n	4a9c <PkaDoubleMdf2Mdf+0x140>
    4aa6:	4a17      	ldr	r2, [pc, #92]	; (4b04 <PkaDoubleMdf2Mdf+0x1a8>)
    4aa8:	601a      	str	r2, [r3, #0]
    4aaa:	b018      	add	sp, #96	; 0x60
    4aac:	bd10      	pop	{r4, pc}
    4aae:	bf00      	nop
    4ab0:	508410b0 	.word	0x508410b0
    4ab4:	50841080 	.word	0x50841080
    4ab8:	21659300 	.word	0x21659300
    4abc:	90310400 	.word	0x90310400
    4ac0:	90659640 	.word	0x90659640
    4ac4:	21618300 	.word	0x21618300
    4ac8:	2130c300 	.word	0x2130c300
    4acc:	9064c300 	.word	0x9064c300
    4ad0:	90618100 	.word	0x90618100
    4ad4:	21104600 	.word	0x21104600
    4ad8:	21118100 	.word	0x21118100
    4adc:	21444100 	.word	0x21444100
    4ae0:	2920c300 	.word	0x2920c300
    4ae4:	c810460c 	.word	0xc810460c
    4ae8:	21318600 	.word	0x21318600
    4aec:	2160c300 	.word	0x2160c300
    4af0:	2928c140 	.word	0x2928c140
    4af4:	21659640 	.word	0x21659640
    4af8:	90311300 	.word	0x90311300
    4afc:	29259640 	.word	0x29259640
    4b00:	c8144659 	.word	0xc8144659
    4b04:	49320440 	.word	0x49320440

00004b08 <PkaDoubleMdf2Jcb>:
    4b08:	4b49      	ldr	r3, [pc, #292]	; (4c30 <PkaDoubleMdf2Jcb+0x128>)
    4b0a:	b510      	push	{r4, lr}
    4b0c:	4619      	mov	r1, r3
    4b0e:	b094      	sub	sp, #80	; 0x50
    4b10:	681a      	ldr	r2, [r3, #0]
    4b12:	9200      	str	r2, [sp, #0]
    4b14:	9a00      	ldr	r2, [sp, #0]
    4b16:	07d2      	lsls	r2, r2, #31
    4b18:	d5fa      	bpl.n	4b10 <PkaDoubleMdf2Jcb+0x8>
    4b1a:	4b46      	ldr	r3, [pc, #280]	; (4c34 <PkaDoubleMdf2Jcb+0x12c>)
    4b1c:	4a46      	ldr	r2, [pc, #280]	; (4c38 <PkaDoubleMdf2Jcb+0x130>)
    4b1e:	601a      	str	r2, [r3, #0]
    4b20:	680a      	ldr	r2, [r1, #0]
    4b22:	9201      	str	r2, [sp, #4]
    4b24:	9a01      	ldr	r2, [sp, #4]
    4b26:	07d4      	lsls	r4, r2, #31
    4b28:	d5fa      	bpl.n	4b20 <PkaDoubleMdf2Jcb+0x18>
    4b2a:	4a44      	ldr	r2, [pc, #272]	; (4c3c <PkaDoubleMdf2Jcb+0x134>)
    4b2c:	601a      	str	r2, [r3, #0]
    4b2e:	680a      	ldr	r2, [r1, #0]
    4b30:	9202      	str	r2, [sp, #8]
    4b32:	9a02      	ldr	r2, [sp, #8]
    4b34:	07d0      	lsls	r0, r2, #31
    4b36:	d5fa      	bpl.n	4b2e <PkaDoubleMdf2Jcb+0x26>
    4b38:	4841      	ldr	r0, [pc, #260]	; (4c40 <PkaDoubleMdf2Jcb+0x138>)
    4b3a:	6018      	str	r0, [r3, #0]
    4b3c:	680a      	ldr	r2, [r1, #0]
    4b3e:	9203      	str	r2, [sp, #12]
    4b40:	9a03      	ldr	r2, [sp, #12]
    4b42:	07d2      	lsls	r2, r2, #31
    4b44:	d5fa      	bpl.n	4b3c <PkaDoubleMdf2Jcb+0x34>
    4b46:	4a3f      	ldr	r2, [pc, #252]	; (4c44 <PkaDoubleMdf2Jcb+0x13c>)
    4b48:	601a      	str	r2, [r3, #0]
    4b4a:	680a      	ldr	r2, [r1, #0]
    4b4c:	9204      	str	r2, [sp, #16]
    4b4e:	9a04      	ldr	r2, [sp, #16]
    4b50:	07d4      	lsls	r4, r2, #31
    4b52:	d5fa      	bpl.n	4b4a <PkaDoubleMdf2Jcb+0x42>
    4b54:	4a3c      	ldr	r2, [pc, #240]	; (4c48 <PkaDoubleMdf2Jcb+0x140>)
    4b56:	601a      	str	r2, [r3, #0]
    4b58:	680a      	ldr	r2, [r1, #0]
    4b5a:	9205      	str	r2, [sp, #20]
    4b5c:	9a05      	ldr	r2, [sp, #20]
    4b5e:	07d2      	lsls	r2, r2, #31
    4b60:	d5fa      	bpl.n	4b58 <PkaDoubleMdf2Jcb+0x50>
    4b62:	4a3a      	ldr	r2, [pc, #232]	; (4c4c <PkaDoubleMdf2Jcb+0x144>)
    4b64:	601a      	str	r2, [r3, #0]
    4b66:	680a      	ldr	r2, [r1, #0]
    4b68:	9206      	str	r2, [sp, #24]
    4b6a:	9a06      	ldr	r2, [sp, #24]
    4b6c:	07d4      	lsls	r4, r2, #31
    4b6e:	d5fa      	bpl.n	4b66 <PkaDoubleMdf2Jcb+0x5e>
    4b70:	4a37      	ldr	r2, [pc, #220]	; (4c50 <PkaDoubleMdf2Jcb+0x148>)
    4b72:	601a      	str	r2, [r3, #0]
    4b74:	680a      	ldr	r2, [r1, #0]
    4b76:	9207      	str	r2, [sp, #28]
    4b78:	9a07      	ldr	r2, [sp, #28]
    4b7a:	07d2      	lsls	r2, r2, #31
    4b7c:	d5fa      	bpl.n	4b74 <PkaDoubleMdf2Jcb+0x6c>
    4b7e:	4a35      	ldr	r2, [pc, #212]	; (4c54 <PkaDoubleMdf2Jcb+0x14c>)
    4b80:	601a      	str	r2, [r3, #0]
    4b82:	680a      	ldr	r2, [r1, #0]
    4b84:	9208      	str	r2, [sp, #32]
    4b86:	9a08      	ldr	r2, [sp, #32]
    4b88:	07d4      	lsls	r4, r2, #31
    4b8a:	d5fa      	bpl.n	4b82 <PkaDoubleMdf2Jcb+0x7a>
    4b8c:	4a32      	ldr	r2, [pc, #200]	; (4c58 <PkaDoubleMdf2Jcb+0x150>)
    4b8e:	601a      	str	r2, [r3, #0]
    4b90:	680a      	ldr	r2, [r1, #0]
    4b92:	9209      	str	r2, [sp, #36]	; 0x24
    4b94:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4b96:	07d2      	lsls	r2, r2, #31
    4b98:	d5fa      	bpl.n	4b90 <PkaDoubleMdf2Jcb+0x88>
    4b9a:	4a30      	ldr	r2, [pc, #192]	; (4c5c <PkaDoubleMdf2Jcb+0x154>)
    4b9c:	601a      	str	r2, [r3, #0]
    4b9e:	680a      	ldr	r2, [r1, #0]
    4ba0:	920a      	str	r2, [sp, #40]	; 0x28
    4ba2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4ba4:	07d4      	lsls	r4, r2, #31
    4ba6:	d5fa      	bpl.n	4b9e <PkaDoubleMdf2Jcb+0x96>
    4ba8:	4a2d      	ldr	r2, [pc, #180]	; (4c60 <PkaDoubleMdf2Jcb+0x158>)
    4baa:	601a      	str	r2, [r3, #0]
    4bac:	680a      	ldr	r2, [r1, #0]
    4bae:	920b      	str	r2, [sp, #44]	; 0x2c
    4bb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4bb2:	07d2      	lsls	r2, r2, #31
    4bb4:	d5fa      	bpl.n	4bac <PkaDoubleMdf2Jcb+0xa4>
    4bb6:	4a2b      	ldr	r2, [pc, #172]	; (4c64 <PkaDoubleMdf2Jcb+0x15c>)
    4bb8:	601a      	str	r2, [r3, #0]
    4bba:	680a      	ldr	r2, [r1, #0]
    4bbc:	920c      	str	r2, [sp, #48]	; 0x30
    4bbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4bc0:	07d4      	lsls	r4, r2, #31
    4bc2:	d5fa      	bpl.n	4bba <PkaDoubleMdf2Jcb+0xb2>
    4bc4:	4a28      	ldr	r2, [pc, #160]	; (4c68 <PkaDoubleMdf2Jcb+0x160>)
    4bc6:	601a      	str	r2, [r3, #0]
    4bc8:	680a      	ldr	r2, [r1, #0]
    4bca:	920d      	str	r2, [sp, #52]	; 0x34
    4bcc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    4bce:	07d2      	lsls	r2, r2, #31
    4bd0:	d5fa      	bpl.n	4bc8 <PkaDoubleMdf2Jcb+0xc0>
    4bd2:	4a26      	ldr	r2, [pc, #152]	; (4c6c <PkaDoubleMdf2Jcb+0x164>)
    4bd4:	601a      	str	r2, [r3, #0]
    4bd6:	680a      	ldr	r2, [r1, #0]
    4bd8:	920e      	str	r2, [sp, #56]	; 0x38
    4bda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4bdc:	07d4      	lsls	r4, r2, #31
    4bde:	d5fa      	bpl.n	4bd6 <PkaDoubleMdf2Jcb+0xce>
    4be0:	4a23      	ldr	r2, [pc, #140]	; (4c70 <PkaDoubleMdf2Jcb+0x168>)
    4be2:	601a      	str	r2, [r3, #0]
    4be4:	680a      	ldr	r2, [r1, #0]
    4be6:	920f      	str	r2, [sp, #60]	; 0x3c
    4be8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    4bea:	07d2      	lsls	r2, r2, #31
    4bec:	d5fa      	bpl.n	4be4 <PkaDoubleMdf2Jcb+0xdc>
    4bee:	4a21      	ldr	r2, [pc, #132]	; (4c74 <PkaDoubleMdf2Jcb+0x16c>)
    4bf0:	601a      	str	r2, [r3, #0]
    4bf2:	4b0f      	ldr	r3, [pc, #60]	; (4c30 <PkaDoubleMdf2Jcb+0x128>)
    4bf4:	4619      	mov	r1, r3
    4bf6:	681c      	ldr	r4, [r3, #0]
    4bf8:	9410      	str	r4, [sp, #64]	; 0x40
    4bfa:	9c10      	ldr	r4, [sp, #64]	; 0x40
    4bfc:	07e4      	lsls	r4, r4, #31
    4bfe:	d5fa      	bpl.n	4bf6 <PkaDoubleMdf2Jcb+0xee>
    4c00:	4b0c      	ldr	r3, [pc, #48]	; (4c34 <PkaDoubleMdf2Jcb+0x12c>)
    4c02:	6018      	str	r0, [r3, #0]
    4c04:	6808      	ldr	r0, [r1, #0]
    4c06:	9011      	str	r0, [sp, #68]	; 0x44
    4c08:	9811      	ldr	r0, [sp, #68]	; 0x44
    4c0a:	07c4      	lsls	r4, r0, #31
    4c0c:	d5fa      	bpl.n	4c04 <PkaDoubleMdf2Jcb+0xfc>
    4c0e:	601a      	str	r2, [r3, #0]
    4c10:	680a      	ldr	r2, [r1, #0]
    4c12:	9212      	str	r2, [sp, #72]	; 0x48
    4c14:	9a12      	ldr	r2, [sp, #72]	; 0x48
    4c16:	07d0      	lsls	r0, r2, #31
    4c18:	d5fa      	bpl.n	4c10 <PkaDoubleMdf2Jcb+0x108>
    4c1a:	4a17      	ldr	r2, [pc, #92]	; (4c78 <PkaDoubleMdf2Jcb+0x170>)
    4c1c:	601a      	str	r2, [r3, #0]
    4c1e:	680a      	ldr	r2, [r1, #0]
    4c20:	9213      	str	r2, [sp, #76]	; 0x4c
    4c22:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    4c24:	07d2      	lsls	r2, r2, #31
    4c26:	d5fa      	bpl.n	4c1e <PkaDoubleMdf2Jcb+0x116>
    4c28:	4a14      	ldr	r2, [pc, #80]	; (4c7c <PkaDoubleMdf2Jcb+0x174>)
    4c2a:	601a      	str	r2, [r3, #0]
    4c2c:	b014      	add	sp, #80	; 0x50
    4c2e:	bd10      	pop	{r4, pc}
    4c30:	508410b0 	.word	0x508410b0
    4c34:	50841080 	.word	0x50841080
    4c38:	21659080 	.word	0x21659080
    4c3c:	90090400 	.word	0x90090400
    4c40:	90659640 	.word	0x90659640
    4c44:	21618080 	.word	0x21618080
    4c48:	21082080 	.word	0x21082080
    4c4c:	90642080 	.word	0x90642080
    4c50:	90618100 	.word	0x90618100
    4c54:	21104600 	.word	0x21104600
    4c58:	21118100 	.word	0x21118100
    4c5c:	21444100 	.word	0x21444100
    4c60:	29202080 	.word	0x29202080
    4c64:	c8104602 	.word	0xc8104602
    4c68:	21098600 	.word	0x21098600
    4c6c:	21602080 	.word	0x21602080
    4c70:	29282140 	.word	0x29282140
    4c74:	21659640 	.word	0x21659640
    4c78:	29259640 	.word	0x29259640
    4c7c:	c8144659 	.word	0xc8144659

00004c80 <PkaAddJcbAfn2Mdf>:
    4c80:	4b50      	ldr	r3, [pc, #320]	; (4dc4 <PkaAddJcbAfn2Mdf+0x144>)
    4c82:	b510      	push	{r4, lr}
    4c84:	461c      	mov	r4, r3
    4c86:	b096      	sub	sp, #88	; 0x58
    4c88:	681a      	ldr	r2, [r3, #0]
    4c8a:	9201      	str	r2, [sp, #4]
    4c8c:	9a01      	ldr	r2, [sp, #4]
    4c8e:	07d2      	lsls	r2, r2, #31
    4c90:	d5fa      	bpl.n	4c88 <PkaAddJcbAfn2Mdf+0x8>
    4c92:	4b4d      	ldr	r3, [pc, #308]	; (4dc8 <PkaAddJcbAfn2Mdf+0x148>)
    4c94:	4a4d      	ldr	r2, [pc, #308]	; (4dcc <PkaAddJcbAfn2Mdf+0x14c>)
    4c96:	601a      	str	r2, [r3, #0]
    4c98:	6822      	ldr	r2, [r4, #0]
    4c9a:	9202      	str	r2, [sp, #8]
    4c9c:	9a02      	ldr	r2, [sp, #8]
    4c9e:	07d2      	lsls	r2, r2, #31
    4ca0:	d5fa      	bpl.n	4c98 <PkaAddJcbAfn2Mdf+0x18>
    4ca2:	4a4b      	ldr	r2, [pc, #300]	; (4dd0 <PkaAddJcbAfn2Mdf+0x150>)
    4ca4:	601a      	str	r2, [r3, #0]
    4ca6:	4a4b      	ldr	r2, [pc, #300]	; (4dd4 <PkaAddJcbAfn2Mdf+0x154>)
    4ca8:	ea42 4080 	orr.w	r0, r2, r0, lsl #18
    4cac:	6822      	ldr	r2, [r4, #0]
    4cae:	9203      	str	r2, [sp, #12]
    4cb0:	9a03      	ldr	r2, [sp, #12]
    4cb2:	07d2      	lsls	r2, r2, #31
    4cb4:	d5fa      	bpl.n	4cac <PkaAddJcbAfn2Mdf+0x2c>
    4cb6:	6018      	str	r0, [r3, #0]
    4cb8:	6822      	ldr	r2, [r4, #0]
    4cba:	9204      	str	r2, [sp, #16]
    4cbc:	9a04      	ldr	r2, [sp, #16]
    4cbe:	07d0      	lsls	r0, r2, #31
    4cc0:	d5fa      	bpl.n	4cb8 <PkaAddJcbAfn2Mdf+0x38>
    4cc2:	4a45      	ldr	r2, [pc, #276]	; (4dd8 <PkaAddJcbAfn2Mdf+0x158>)
    4cc4:	601a      	str	r2, [r3, #0]
    4cc6:	f5a2 0280 	sub.w	r2, r2, #4194304	; 0x400000
    4cca:	ea42 4181 	orr.w	r1, r2, r1, lsl #18
    4cce:	6822      	ldr	r2, [r4, #0]
    4cd0:	9205      	str	r2, [sp, #20]
    4cd2:	9a05      	ldr	r2, [sp, #20]
    4cd4:	07d2      	lsls	r2, r2, #31
    4cd6:	d5fa      	bpl.n	4cce <PkaAddJcbAfn2Mdf+0x4e>
    4cd8:	6019      	str	r1, [r3, #0]
    4cda:	6822      	ldr	r2, [r4, #0]
    4cdc:	9206      	str	r2, [sp, #24]
    4cde:	9a06      	ldr	r2, [sp, #24]
    4ce0:	07d0      	lsls	r0, r2, #31
    4ce2:	d5fa      	bpl.n	4cda <PkaAddJcbAfn2Mdf+0x5a>
    4ce4:	4a3d      	ldr	r2, [pc, #244]	; (4ddc <PkaAddJcbAfn2Mdf+0x15c>)
    4ce6:	601a      	str	r2, [r3, #0]
    4ce8:	6822      	ldr	r2, [r4, #0]
    4cea:	9207      	str	r2, [sp, #28]
    4cec:	9a07      	ldr	r2, [sp, #28]
    4cee:	07d1      	lsls	r1, r2, #31
    4cf0:	d5fa      	bpl.n	4ce8 <PkaAddJcbAfn2Mdf+0x68>
    4cf2:	4a3b      	ldr	r2, [pc, #236]	; (4de0 <PkaAddJcbAfn2Mdf+0x160>)
    4cf4:	601a      	str	r2, [r3, #0]
    4cf6:	6822      	ldr	r2, [r4, #0]
    4cf8:	9208      	str	r2, [sp, #32]
    4cfa:	9a08      	ldr	r2, [sp, #32]
    4cfc:	07d2      	lsls	r2, r2, #31
    4cfe:	d5fa      	bpl.n	4cf6 <PkaAddJcbAfn2Mdf+0x76>
    4d00:	4a38      	ldr	r2, [pc, #224]	; (4de4 <PkaAddJcbAfn2Mdf+0x164>)
    4d02:	601a      	str	r2, [r3, #0]
    4d04:	6822      	ldr	r2, [r4, #0]
    4d06:	9209      	str	r2, [sp, #36]	; 0x24
    4d08:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4d0a:	07d0      	lsls	r0, r2, #31
    4d0c:	d5fa      	bpl.n	4d04 <PkaAddJcbAfn2Mdf+0x84>
    4d0e:	4a36      	ldr	r2, [pc, #216]	; (4de8 <PkaAddJcbAfn2Mdf+0x168>)
    4d10:	601a      	str	r2, [r3, #0]
    4d12:	6822      	ldr	r2, [r4, #0]
    4d14:	920a      	str	r2, [sp, #40]	; 0x28
    4d16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4d18:	07d1      	lsls	r1, r2, #31
    4d1a:	d5fa      	bpl.n	4d12 <PkaAddJcbAfn2Mdf+0x92>
    4d1c:	4a33      	ldr	r2, [pc, #204]	; (4dec <PkaAddJcbAfn2Mdf+0x16c>)
    4d1e:	601a      	str	r2, [r3, #0]
    4d20:	6822      	ldr	r2, [r4, #0]
    4d22:	920b      	str	r2, [sp, #44]	; 0x2c
    4d24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4d26:	07d2      	lsls	r2, r2, #31
    4d28:	d5fa      	bpl.n	4d20 <PkaAddJcbAfn2Mdf+0xa0>
    4d2a:	4a31      	ldr	r2, [pc, #196]	; (4df0 <PkaAddJcbAfn2Mdf+0x170>)
    4d2c:	601a      	str	r2, [r3, #0]
    4d2e:	6822      	ldr	r2, [r4, #0]
    4d30:	920c      	str	r2, [sp, #48]	; 0x30
    4d32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4d34:	07d0      	lsls	r0, r2, #31
    4d36:	d5fa      	bpl.n	4d2e <PkaAddJcbAfn2Mdf+0xae>
    4d38:	4a2e      	ldr	r2, [pc, #184]	; (4df4 <PkaAddJcbAfn2Mdf+0x174>)
    4d3a:	601a      	str	r2, [r3, #0]
    4d3c:	6822      	ldr	r2, [r4, #0]
    4d3e:	920d      	str	r2, [sp, #52]	; 0x34
    4d40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    4d42:	07d1      	lsls	r1, r2, #31
    4d44:	d5fa      	bpl.n	4d3c <PkaAddJcbAfn2Mdf+0xbc>
    4d46:	4a2c      	ldr	r2, [pc, #176]	; (4df8 <PkaAddJcbAfn2Mdf+0x178>)
    4d48:	601a      	str	r2, [r3, #0]
    4d4a:	6822      	ldr	r2, [r4, #0]
    4d4c:	920e      	str	r2, [sp, #56]	; 0x38
    4d4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4d50:	07d2      	lsls	r2, r2, #31
    4d52:	d5fa      	bpl.n	4d4a <PkaAddJcbAfn2Mdf+0xca>
    4d54:	4a29      	ldr	r2, [pc, #164]	; (4dfc <PkaAddJcbAfn2Mdf+0x17c>)
    4d56:	601a      	str	r2, [r3, #0]
    4d58:	6822      	ldr	r2, [r4, #0]
    4d5a:	920f      	str	r2, [sp, #60]	; 0x3c
    4d5c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    4d5e:	07d0      	lsls	r0, r2, #31
    4d60:	d5fa      	bpl.n	4d58 <PkaAddJcbAfn2Mdf+0xd8>
    4d62:	4a27      	ldr	r2, [pc, #156]	; (4e00 <PkaAddJcbAfn2Mdf+0x180>)
    4d64:	601a      	str	r2, [r3, #0]
    4d66:	6821      	ldr	r1, [r4, #0]
    4d68:	9110      	str	r1, [sp, #64]	; 0x40
    4d6a:	9910      	ldr	r1, [sp, #64]	; 0x40
    4d6c:	07c9      	lsls	r1, r1, #31
    4d6e:	d5fa      	bpl.n	4d66 <PkaAddJcbAfn2Mdf+0xe6>
    4d70:	601a      	str	r2, [r3, #0]
    4d72:	4b14      	ldr	r3, [pc, #80]	; (4dc4 <PkaAddJcbAfn2Mdf+0x144>)
    4d74:	461a      	mov	r2, r3
    4d76:	6819      	ldr	r1, [r3, #0]
    4d78:	9111      	str	r1, [sp, #68]	; 0x44
    4d7a:	9911      	ldr	r1, [sp, #68]	; 0x44
    4d7c:	07c8      	lsls	r0, r1, #31
    4d7e:	d5fa      	bpl.n	4d76 <PkaAddJcbAfn2Mdf+0xf6>
    4d80:	4b11      	ldr	r3, [pc, #68]	; (4dc8 <PkaAddJcbAfn2Mdf+0x148>)
    4d82:	4920      	ldr	r1, [pc, #128]	; (4e04 <PkaAddJcbAfn2Mdf+0x184>)
    4d84:	6019      	str	r1, [r3, #0]
    4d86:	6811      	ldr	r1, [r2, #0]
    4d88:	9112      	str	r1, [sp, #72]	; 0x48
    4d8a:	9912      	ldr	r1, [sp, #72]	; 0x48
    4d8c:	07c9      	lsls	r1, r1, #31
    4d8e:	d5fa      	bpl.n	4d86 <PkaAddJcbAfn2Mdf+0x106>
    4d90:	491d      	ldr	r1, [pc, #116]	; (4e08 <PkaAddJcbAfn2Mdf+0x188>)
    4d92:	6019      	str	r1, [r3, #0]
    4d94:	6811      	ldr	r1, [r2, #0]
    4d96:	9113      	str	r1, [sp, #76]	; 0x4c
    4d98:	9913      	ldr	r1, [sp, #76]	; 0x4c
    4d9a:	07cc      	lsls	r4, r1, #31
    4d9c:	d5fa      	bpl.n	4d94 <PkaAddJcbAfn2Mdf+0x114>
    4d9e:	490b      	ldr	r1, [pc, #44]	; (4dcc <PkaAddJcbAfn2Mdf+0x14c>)
    4da0:	6019      	str	r1, [r3, #0]
    4da2:	6811      	ldr	r1, [r2, #0]
    4da4:	9114      	str	r1, [sp, #80]	; 0x50
    4da6:	9914      	ldr	r1, [sp, #80]	; 0x50
    4da8:	07c8      	lsls	r0, r1, #31
    4daa:	d5fa      	bpl.n	4da2 <PkaAddJcbAfn2Mdf+0x122>
    4dac:	4917      	ldr	r1, [pc, #92]	; (4e0c <PkaAddJcbAfn2Mdf+0x18c>)
    4dae:	6019      	str	r1, [r3, #0]
    4db0:	6811      	ldr	r1, [r2, #0]
    4db2:	9115      	str	r1, [sp, #84]	; 0x54
    4db4:	9915      	ldr	r1, [sp, #84]	; 0x54
    4db6:	07c9      	lsls	r1, r1, #31
    4db8:	d5fa      	bpl.n	4db0 <PkaAddJcbAfn2Mdf+0x130>
    4dba:	4a15      	ldr	r2, [pc, #84]	; (4e10 <PkaAddJcbAfn2Mdf+0x190>)
    4dbc:	601a      	str	r2, [r3, #0]
    4dbe:	b016      	add	sp, #88	; 0x58
    4dc0:	bd10      	pop	{r4, pc}
    4dc2:	bf00      	nop
    4dc4:	508410b0 	.word	0x508410b0
    4dc8:	50841080 	.word	0x50841080
    4dcc:	90410440 	.word	0x90410440
    4dd0:	29298600 	.word	0x29298600
    4dd4:	c80110d8 	.word	0xc80110d8
    4dd8:	90411440 	.word	0x90411440
    4ddc:	29211440 	.word	0x29211440
    4de0:	21651440 	.word	0x21651440
    4de4:	90403400 	.word	0x90403400
    4de8:	900c3100 	.word	0x900c3100
    4dec:	900c40c0 	.word	0x900c40c0
    4df0:	292030c0 	.word	0x292030c0
    4df4:	900d9640 	.word	0x900d9640
    4df8:	90604100 	.word	0x90604100
    4dfc:	c8451603 	.word	0xc8451603
    4e00:	21118600 	.word	0x21118600
    4e04:	21604100 	.word	0x21604100
    4e08:	c8444659 	.word	0xc8444659
    4e0c:	90451440 	.word	0x90451440
    4e10:	902d1440 	.word	0x902d1440

00004e14 <PkaJcb2Afn>:
    4e14:	4826      	ldr	r0, [pc, #152]	; (4eb0 <PkaJcb2Afn+0x9c>)
    4e16:	b570      	push	{r4, r5, r6, lr}
    4e18:	4605      	mov	r5, r0
    4e1a:	b088      	sub	sp, #32
    4e1c:	6804      	ldr	r4, [r0, #0]
    4e1e:	9400      	str	r4, [sp, #0]
    4e20:	9c00      	ldr	r4, [sp, #0]
    4e22:	07e6      	lsls	r6, r4, #31
    4e24:	d5fa      	bpl.n	4e1c <PkaJcb2Afn+0x8>
    4e26:	4c23      	ldr	r4, [pc, #140]	; (4eb4 <PkaJcb2Afn+0xa0>)
    4e28:	4823      	ldr	r0, [pc, #140]	; (4eb8 <PkaJcb2Afn+0xa4>)
    4e2a:	6004      	str	r4, [r0, #0]
    4e2c:	4c23      	ldr	r4, [pc, #140]	; (4ebc <PkaJcb2Afn+0xa8>)
    4e2e:	ea44 4383 	orr.w	r3, r4, r3, lsl #18
    4e32:	682c      	ldr	r4, [r5, #0]
    4e34:	9401      	str	r4, [sp, #4]
    4e36:	9c01      	ldr	r4, [sp, #4]
    4e38:	07e4      	lsls	r4, r4, #31
    4e3a:	d5fa      	bpl.n	4e32 <PkaJcb2Afn+0x1e>
    4e3c:	6003      	str	r3, [r0, #0]
    4e3e:	0193      	lsls	r3, r2, #6
    4e40:	ea43 4282 	orr.w	r2, r3, r2, lsl #18
    4e44:	f042 4410 	orr.w	r4, r2, #2415919104	; 0x90000000
    4e48:	f444 44c0 	orr.w	r4, r4, #24576	; 0x6000
    4e4c:	682b      	ldr	r3, [r5, #0]
    4e4e:	9302      	str	r3, [sp, #8]
    4e50:	9b02      	ldr	r3, [sp, #8]
    4e52:	07de      	lsls	r6, r3, #31
    4e54:	d5fa      	bpl.n	4e4c <PkaJcb2Afn+0x38>
    4e56:	6004      	str	r4, [r0, #0]
    4e58:	682b      	ldr	r3, [r5, #0]
    4e5a:	9303      	str	r3, [sp, #12]
    4e5c:	9b03      	ldr	r3, [sp, #12]
    4e5e:	07db      	lsls	r3, r3, #31
    4e60:	d5fa      	bpl.n	4e58 <PkaJcb2Afn+0x44>
    4e62:	4b17      	ldr	r3, [pc, #92]	; (4ec0 <PkaJcb2Afn+0xac>)
    4e64:	6003      	str	r3, [r0, #0]
    4e66:	018b      	lsls	r3, r1, #6
    4e68:	ea43 4181 	orr.w	r1, r3, r1, lsl #18
    4e6c:	f041 4310 	orr.w	r3, r1, #2415919104	; 0x90000000
    4e70:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
    4e74:	682e      	ldr	r6, [r5, #0]
    4e76:	9604      	str	r6, [sp, #16]
    4e78:	9e04      	ldr	r6, [sp, #16]
    4e7a:	07f6      	lsls	r6, r6, #31
    4e7c:	d5fa      	bpl.n	4e74 <PkaJcb2Afn+0x60>
    4e7e:	6003      	str	r3, [r0, #0]
    4e80:	682b      	ldr	r3, [r5, #0]
    4e82:	9305      	str	r3, [sp, #20]
    4e84:	9b05      	ldr	r3, [sp, #20]
    4e86:	07de      	lsls	r6, r3, #31
    4e88:	d5fa      	bpl.n	4e80 <PkaJcb2Afn+0x6c>
    4e8a:	6004      	str	r4, [r0, #0]
    4e8c:	f041 4158 	orr.w	r1, r1, #3623878656	; 0xd8000000
    4e90:	682b      	ldr	r3, [r5, #0]
    4e92:	9306      	str	r3, [sp, #24]
    4e94:	9b06      	ldr	r3, [sp, #24]
    4e96:	07dc      	lsls	r4, r3, #31
    4e98:	d5fa      	bpl.n	4e90 <PkaJcb2Afn+0x7c>
    4e9a:	6001      	str	r1, [r0, #0]
    4e9c:	f042 4258 	orr.w	r2, r2, #3623878656	; 0xd8000000
    4ea0:	682b      	ldr	r3, [r5, #0]
    4ea2:	9307      	str	r3, [sp, #28]
    4ea4:	9b07      	ldr	r3, [sp, #28]
    4ea6:	07db      	lsls	r3, r3, #31
    4ea8:	d5fa      	bpl.n	4ea0 <PkaJcb2Afn+0x8c>
    4eaa:	6002      	str	r2, [r0, #0]
    4eac:	b008      	add	sp, #32
    4eae:	bd70      	pop	{r4, r5, r6, pc}
    4eb0:	508410b0 	.word	0x508410b0
    4eb4:	290221c0 	.word	0x290221c0
    4eb8:	50841080 	.word	0x50841080
    4ebc:	98007180 	.word	0x98007180
    4ec0:	90186180 	.word	0x90186180

00004ec4 <PkaAddAff>:
    4ec4:	4b35      	ldr	r3, [pc, #212]	; (4f9c <PkaAddAff+0xd8>)
    4ec6:	b08e      	sub	sp, #56	; 0x38
    4ec8:	4619      	mov	r1, r3
    4eca:	681a      	ldr	r2, [r3, #0]
    4ecc:	9200      	str	r2, [sp, #0]
    4ece:	9a00      	ldr	r2, [sp, #0]
    4ed0:	07d2      	lsls	r2, r2, #31
    4ed2:	d5fa      	bpl.n	4eca <PkaAddAff+0x6>
    4ed4:	4b32      	ldr	r3, [pc, #200]	; (4fa0 <PkaAddAff+0xdc>)
    4ed6:	4a33      	ldr	r2, [pc, #204]	; (4fa4 <PkaAddAff+0xe0>)
    4ed8:	601a      	str	r2, [r3, #0]
    4eda:	680a      	ldr	r2, [r1, #0]
    4edc:	9201      	str	r2, [sp, #4]
    4ede:	9a01      	ldr	r2, [sp, #4]
    4ee0:	07d0      	lsls	r0, r2, #31
    4ee2:	d5fa      	bpl.n	4eda <PkaAddAff+0x16>
    4ee4:	4a30      	ldr	r2, [pc, #192]	; (4fa8 <PkaAddAff+0xe4>)
    4ee6:	601a      	str	r2, [r3, #0]
    4ee8:	680a      	ldr	r2, [r1, #0]
    4eea:	9202      	str	r2, [sp, #8]
    4eec:	9a02      	ldr	r2, [sp, #8]
    4eee:	07d2      	lsls	r2, r2, #31
    4ef0:	d5fa      	bpl.n	4ee8 <PkaAddAff+0x24>
    4ef2:	4a2e      	ldr	r2, [pc, #184]	; (4fac <PkaAddAff+0xe8>)
    4ef4:	601a      	str	r2, [r3, #0]
    4ef6:	680a      	ldr	r2, [r1, #0]
    4ef8:	9203      	str	r2, [sp, #12]
    4efa:	9a03      	ldr	r2, [sp, #12]
    4efc:	07d0      	lsls	r0, r2, #31
    4efe:	d5fa      	bpl.n	4ef6 <PkaAddAff+0x32>
    4f00:	4a2b      	ldr	r2, [pc, #172]	; (4fb0 <PkaAddAff+0xec>)
    4f02:	601a      	str	r2, [r3, #0]
    4f04:	680a      	ldr	r2, [r1, #0]
    4f06:	9204      	str	r2, [sp, #16]
    4f08:	9a04      	ldr	r2, [sp, #16]
    4f0a:	07d2      	lsls	r2, r2, #31
    4f0c:	d5fa      	bpl.n	4f04 <PkaAddAff+0x40>
    4f0e:	4a29      	ldr	r2, [pc, #164]	; (4fb4 <PkaAddAff+0xf0>)
    4f10:	601a      	str	r2, [r3, #0]
    4f12:	680a      	ldr	r2, [r1, #0]
    4f14:	9205      	str	r2, [sp, #20]
    4f16:	9a05      	ldr	r2, [sp, #20]
    4f18:	07d0      	lsls	r0, r2, #31
    4f1a:	d5fa      	bpl.n	4f12 <PkaAddAff+0x4e>
    4f1c:	4a26      	ldr	r2, [pc, #152]	; (4fb8 <PkaAddAff+0xf4>)
    4f1e:	601a      	str	r2, [r3, #0]
    4f20:	680a      	ldr	r2, [r1, #0]
    4f22:	9206      	str	r2, [sp, #24]
    4f24:	9a06      	ldr	r2, [sp, #24]
    4f26:	07d2      	lsls	r2, r2, #31
    4f28:	d5fa      	bpl.n	4f20 <PkaAddAff+0x5c>
    4f2a:	4a24      	ldr	r2, [pc, #144]	; (4fbc <PkaAddAff+0xf8>)
    4f2c:	601a      	str	r2, [r3, #0]
    4f2e:	680a      	ldr	r2, [r1, #0]
    4f30:	9207      	str	r2, [sp, #28]
    4f32:	9a07      	ldr	r2, [sp, #28]
    4f34:	07d0      	lsls	r0, r2, #31
    4f36:	d5fa      	bpl.n	4f2e <PkaAddAff+0x6a>
    4f38:	4a21      	ldr	r2, [pc, #132]	; (4fc0 <PkaAddAff+0xfc>)
    4f3a:	601a      	str	r2, [r3, #0]
    4f3c:	680a      	ldr	r2, [r1, #0]
    4f3e:	9208      	str	r2, [sp, #32]
    4f40:	9a08      	ldr	r2, [sp, #32]
    4f42:	07d2      	lsls	r2, r2, #31
    4f44:	d5fa      	bpl.n	4f3c <PkaAddAff+0x78>
    4f46:	4a1f      	ldr	r2, [pc, #124]	; (4fc4 <PkaAddAff+0x100>)
    4f48:	601a      	str	r2, [r3, #0]
    4f4a:	680a      	ldr	r2, [r1, #0]
    4f4c:	9209      	str	r2, [sp, #36]	; 0x24
    4f4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4f50:	07d0      	lsls	r0, r2, #31
    4f52:	d5fa      	bpl.n	4f4a <PkaAddAff+0x86>
    4f54:	4a1c      	ldr	r2, [pc, #112]	; (4fc8 <PkaAddAff+0x104>)
    4f56:	601a      	str	r2, [r3, #0]
    4f58:	680a      	ldr	r2, [r1, #0]
    4f5a:	920a      	str	r2, [sp, #40]	; 0x28
    4f5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4f5e:	07d2      	lsls	r2, r2, #31
    4f60:	d5fa      	bpl.n	4f58 <PkaAddAff+0x94>
    4f62:	4a1a      	ldr	r2, [pc, #104]	; (4fcc <PkaAddAff+0x108>)
    4f64:	601a      	str	r2, [r3, #0]
    4f66:	6808      	ldr	r0, [r1, #0]
    4f68:	900b      	str	r0, [sp, #44]	; 0x2c
    4f6a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    4f6c:	07c0      	lsls	r0, r0, #31
    4f6e:	d5fa      	bpl.n	4f66 <PkaAddAff+0xa2>
    4f70:	601a      	str	r2, [r3, #0]
    4f72:	680a      	ldr	r2, [r1, #0]
    4f74:	920c      	str	r2, [sp, #48]	; 0x30
    4f76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4f78:	07d0      	lsls	r0, r2, #31
    4f7a:	d5fa      	bpl.n	4f72 <PkaAddAff+0xae>
    4f7c:	4a14      	ldr	r2, [pc, #80]	; (4fd0 <PkaAddAff+0x10c>)
    4f7e:	601a      	str	r2, [r3, #0]
    4f80:	680a      	ldr	r2, [r1, #0]
    4f82:	920d      	str	r2, [sp, #52]	; 0x34
    4f84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    4f86:	07d2      	lsls	r2, r2, #31
    4f88:	d5fa      	bpl.n	4f80 <PkaAddAff+0xbc>
    4f8a:	4a12      	ldr	r2, [pc, #72]	; (4fd4 <PkaAddAff+0x110>)
    4f8c:	210e      	movs	r1, #14
    4f8e:	601a      	str	r2, [r3, #0]
    4f90:	2000      	movs	r0, #0
    4f92:	230d      	movs	r3, #13
    4f94:	220f      	movs	r2, #15
    4f96:	b00e      	add	sp, #56	; 0x38
    4f98:	f7ff bf3c 	b.w	4e14 <PkaJcb2Afn>
    4f9c:	508410b0 	.word	0x508410b0
    4fa0:	50841080 	.word	0x50841080
    4fa4:	29014380 	.word	0x29014380
    4fa8:	21396340 	.word	0x21396340
    4fac:	29017080 	.word	0x29017080
    4fb0:	21542080 	.word	0x21542080
    4fb4:	9034d100 	.word	0x9034d100
    4fb8:	903440c0 	.word	0x903440c0
    4fbc:	292030c0 	.word	0x292030c0
    4fc0:	900d53c0 	.word	0x900d53c0
    4fc4:	90384100 	.word	0x90384100
    4fc8:	c8082383 	.word	0xc8082383
    4fcc:	2110e380 	.word	0x2110e380
    4fd0:	21384100 	.word	0x21384100
    4fd4:	c80843cf 	.word	0xc80843cf

00004fd8 <PkaSum2ScalarMullt>:
    4fd8:	2301      	movs	r3, #1
    4fda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4fde:	b092      	sub	sp, #72	; 0x48
    4fe0:	e9cd 3303 	strd	r3, r3, [sp, #12]
    4fe4:	4b62      	ldr	r3, [pc, #392]	; (5170 <PkaSum2ScalarMullt+0x198>)
    4fe6:	461d      	mov	r5, r3
    4fe8:	681a      	ldr	r2, [r3, #0]
    4fea:	9205      	str	r2, [sp, #20]
    4fec:	9a05      	ldr	r2, [sp, #20]
    4fee:	07d2      	lsls	r2, r2, #31
    4ff0:	d5fa      	bpl.n	4fe8 <PkaSum2ScalarMullt+0x10>
    4ff2:	4b60      	ldr	r3, [pc, #384]	; (5174 <PkaSum2ScalarMullt+0x19c>)
    4ff4:	4c60      	ldr	r4, [pc, #384]	; (5178 <PkaSum2ScalarMullt+0x1a0>)
    4ff6:	6023      	str	r3, [r4, #0]
    4ff8:	4b60      	ldr	r3, [pc, #384]	; (517c <PkaSum2ScalarMullt+0x1a4>)
    4ffa:	4619      	mov	r1, r3
    4ffc:	681a      	ldr	r2, [r3, #0]
    4ffe:	9206      	str	r2, [sp, #24]
    5000:	9a06      	ldr	r2, [sp, #24]
    5002:	07d7      	lsls	r7, r2, #31
    5004:	d5fa      	bpl.n	4ffc <PkaSum2ScalarMullt+0x24>
    5006:	4b5e      	ldr	r3, [pc, #376]	; (5180 <PkaSum2ScalarMullt+0x1a8>)
    5008:	681a      	ldr	r2, [r3, #0]
    500a:	04d6      	lsls	r6, r2, #19
    500c:	f100 80a8 	bmi.w	5160 <PkaSum2ScalarMullt+0x188>
    5010:	682a      	ldr	r2, [r5, #0]
    5012:	9207      	str	r2, [sp, #28]
    5014:	9a07      	ldr	r2, [sp, #28]
    5016:	07d0      	lsls	r0, r2, #31
    5018:	d5fa      	bpl.n	5010 <PkaSum2ScalarMullt+0x38>
    501a:	4a5a      	ldr	r2, [pc, #360]	; (5184 <PkaSum2ScalarMullt+0x1ac>)
    501c:	6022      	str	r2, [r4, #0]
    501e:	680a      	ldr	r2, [r1, #0]
    5020:	9208      	str	r2, [sp, #32]
    5022:	9a08      	ldr	r2, [sp, #32]
    5024:	07d2      	lsls	r2, r2, #31
    5026:	d5fa      	bpl.n	501e <PkaSum2ScalarMullt+0x46>
    5028:	681e      	ldr	r6, [r3, #0]
    502a:	f3c6 3600 	ubfx	r6, r6, #12, #1
    502e:	2e00      	cmp	r6, #0
    5030:	f040 8098 	bne.w	5164 <PkaSum2ScalarMullt+0x18c>
    5034:	2012      	movs	r0, #18
    5036:	f7ff f8f3 	bl	4220 <PkaGetRegEffectiveSizeInBits>
    503a:	4607      	mov	r7, r0
    503c:	2013      	movs	r0, #19
    503e:	f7ff f8ef 	bl	4220 <PkaGetRegEffectiveSizeInBits>
    5042:	4287      	cmp	r7, r0
    5044:	bf8c      	ite	hi
    5046:	2012      	movhi	r0, #18
    5048:	2013      	movls	r0, #19
    504a:	f7ff f8e9 	bl	4220 <PkaGetRegEffectiveSizeInBits>
    504e:	1e47      	subs	r7, r0, #1
    5050:	f7ff ff38 	bl	4ec4 <PkaAddAff>
    5054:	ab03      	add	r3, sp, #12
    5056:	aa01      	add	r2, sp, #4
    5058:	4639      	mov	r1, r7
    505a:	2012      	movs	r0, #18
    505c:	f7ff f926 	bl	42ac <PkaGetNextMsBit>
    5060:	ab04      	add	r3, sp, #16
    5062:	4680      	mov	r8, r0
    5064:	aa02      	add	r2, sp, #8
    5066:	4639      	mov	r1, r7
    5068:	2013      	movs	r0, #19
    506a:	f7ff f91f 	bl	42ac <PkaGetNextMsBit>
    506e:	eb00 0048 	add.w	r0, r0, r8, lsl #1
    5072:	2802      	cmp	r0, #2
    5074:	d032      	beq.n	50dc <PkaSum2ScalarMullt+0x104>
    5076:	2803      	cmp	r0, #3
    5078:	d03e      	beq.n	50f8 <PkaSum2ScalarMullt+0x120>
    507a:	2801      	cmp	r0, #1
    507c:	d174      	bne.n	5168 <PkaSum2ScalarMullt+0x190>
    507e:	682b      	ldr	r3, [r5, #0]
    5080:	9309      	str	r3, [sp, #36]	; 0x24
    5082:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5084:	07db      	lsls	r3, r3, #31
    5086:	d5fa      	bpl.n	507e <PkaSum2ScalarMullt+0xa6>
    5088:	4b3f      	ldr	r3, [pc, #252]	; (5188 <PkaSum2ScalarMullt+0x1b0>)
    508a:	6023      	str	r3, [r4, #0]
    508c:	682b      	ldr	r3, [r5, #0]
    508e:	930a      	str	r3, [sp, #40]	; 0x28
    5090:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5092:	07d8      	lsls	r0, r3, #31
    5094:	d5fa      	bpl.n	508c <PkaSum2ScalarMullt+0xb4>
    5096:	4b3d      	ldr	r3, [pc, #244]	; (518c <PkaSum2ScalarMullt+0x1b4>)
    5098:	6023      	str	r3, [r4, #0]
    509a:	682b      	ldr	r3, [r5, #0]
    509c:	930f      	str	r3, [sp, #60]	; 0x3c
    509e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    50a0:	07d9      	lsls	r1, r3, #31
    50a2:	d5fa      	bpl.n	509a <PkaSum2ScalarMullt+0xc2>
    50a4:	4b3a      	ldr	r3, [pc, #232]	; (5190 <PkaSum2ScalarMullt+0x1b8>)
    50a6:	6023      	str	r3, [r4, #0]
    50a8:	682b      	ldr	r3, [r5, #0]
    50aa:	9310      	str	r3, [sp, #64]	; 0x40
    50ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
    50ae:	07da      	lsls	r2, r3, #31
    50b0:	d5fa      	bpl.n	50a8 <PkaSum2ScalarMullt+0xd0>
    50b2:	4b38      	ldr	r3, [pc, #224]	; (5194 <PkaSum2ScalarMullt+0x1bc>)
    50b4:	6023      	str	r3, [r4, #0]
    50b6:	682b      	ldr	r3, [r5, #0]
    50b8:	9311      	str	r3, [sp, #68]	; 0x44
    50ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
    50bc:	07db      	lsls	r3, r3, #31
    50be:	d5fa      	bpl.n	50b6 <PkaSum2ScalarMullt+0xde>
    50c0:	4b35      	ldr	r3, [pc, #212]	; (5198 <PkaSum2ScalarMullt+0x1c0>)
    50c2:	6023      	str	r3, [r4, #0]
    50c4:	3f01      	subs	r7, #1
    50c6:	d525      	bpl.n	5114 <PkaSum2ScalarMullt+0x13c>
    50c8:	2310      	movs	r3, #16
    50ca:	2219      	movs	r2, #25
    50cc:	2118      	movs	r1, #24
    50ce:	2000      	movs	r0, #0
    50d0:	f7ff fea0 	bl	4e14 <PkaJcb2Afn>
    50d4:	4630      	mov	r0, r6
    50d6:	b012      	add	sp, #72	; 0x48
    50d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    50dc:	682b      	ldr	r3, [r5, #0]
    50de:	930b      	str	r3, [sp, #44]	; 0x2c
    50e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    50e2:	07d9      	lsls	r1, r3, #31
    50e4:	d5fa      	bpl.n	50dc <PkaSum2ScalarMullt+0x104>
    50e6:	4b2d      	ldr	r3, [pc, #180]	; (519c <PkaSum2ScalarMullt+0x1c4>)
    50e8:	6023      	str	r3, [r4, #0]
    50ea:	682b      	ldr	r3, [r5, #0]
    50ec:	930c      	str	r3, [sp, #48]	; 0x30
    50ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    50f0:	07da      	lsls	r2, r3, #31
    50f2:	d5fa      	bpl.n	50ea <PkaSum2ScalarMullt+0x112>
    50f4:	4b2a      	ldr	r3, [pc, #168]	; (51a0 <PkaSum2ScalarMullt+0x1c8>)
    50f6:	e7cf      	b.n	5098 <PkaSum2ScalarMullt+0xc0>
    50f8:	682b      	ldr	r3, [r5, #0]
    50fa:	930d      	str	r3, [sp, #52]	; 0x34
    50fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    50fe:	07db      	lsls	r3, r3, #31
    5100:	d5fa      	bpl.n	50f8 <PkaSum2ScalarMullt+0x120>
    5102:	4b28      	ldr	r3, [pc, #160]	; (51a4 <PkaSum2ScalarMullt+0x1cc>)
    5104:	6023      	str	r3, [r4, #0]
    5106:	682b      	ldr	r3, [r5, #0]
    5108:	930e      	str	r3, [sp, #56]	; 0x38
    510a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    510c:	07d8      	lsls	r0, r3, #31
    510e:	d5fa      	bpl.n	5106 <PkaSum2ScalarMullt+0x12e>
    5110:	4b25      	ldr	r3, [pc, #148]	; (51a8 <PkaSum2ScalarMullt+0x1d0>)
    5112:	e7c1      	b.n	5098 <PkaSum2ScalarMullt+0xc0>
    5114:	ab03      	add	r3, sp, #12
    5116:	aa01      	add	r2, sp, #4
    5118:	4639      	mov	r1, r7
    511a:	2012      	movs	r0, #18
    511c:	f7ff f8c6 	bl	42ac <PkaGetNextMsBit>
    5120:	ab04      	add	r3, sp, #16
    5122:	4604      	mov	r4, r0
    5124:	aa02      	add	r2, sp, #8
    5126:	4639      	mov	r1, r7
    5128:	2013      	movs	r0, #19
    512a:	f7ff f8bf 	bl	42ac <PkaGetNextMsBit>
    512e:	eb10 0444 	adds.w	r4, r0, r4, lsl #1
    5132:	d102      	bne.n	513a <PkaSum2ScalarMullt+0x162>
    5134:	f7ff fc12 	bl	495c <PkaDoubleMdf2Mdf>
    5138:	e7c4      	b.n	50c4 <PkaSum2ScalarMullt+0xec>
    513a:	f7ff fce5 	bl	4b08 <PkaDoubleMdf2Jcb>
    513e:	2c02      	cmp	r4, #2
    5140:	d008      	beq.n	5154 <PkaSum2ScalarMullt+0x17c>
    5142:	2c03      	cmp	r4, #3
    5144:	d009      	beq.n	515a <PkaSum2ScalarMullt+0x182>
    5146:	2c01      	cmp	r4, #1
    5148:	d110      	bne.n	516c <PkaSum2ScalarMullt+0x194>
    514a:	2117      	movs	r1, #23
    514c:	2016      	movs	r0, #22
    514e:	f7ff fd97 	bl	4c80 <PkaAddJcbAfn2Mdf>
    5152:	e7b7      	b.n	50c4 <PkaSum2ScalarMullt+0xec>
    5154:	2115      	movs	r1, #21
    5156:	2014      	movs	r0, #20
    5158:	e7f9      	b.n	514e <PkaSum2ScalarMullt+0x176>
    515a:	210f      	movs	r1, #15
    515c:	200e      	movs	r0, #14
    515e:	e7f6      	b.n	514e <PkaSum2ScalarMullt+0x176>
    5160:	4e12      	ldr	r6, [pc, #72]	; (51ac <PkaSum2ScalarMullt+0x1d4>)
    5162:	e7b7      	b.n	50d4 <PkaSum2ScalarMullt+0xfc>
    5164:	4e12      	ldr	r6, [pc, #72]	; (51b0 <PkaSum2ScalarMullt+0x1d8>)
    5166:	e7b5      	b.n	50d4 <PkaSum2ScalarMullt+0xfc>
    5168:	4e12      	ldr	r6, [pc, #72]	; (51b4 <PkaSum2ScalarMullt+0x1dc>)
    516a:	e7b3      	b.n	50d4 <PkaSum2ScalarMullt+0xfc>
    516c:	4e12      	ldr	r6, [pc, #72]	; (51b8 <PkaSum2ScalarMullt+0x1e0>)
    516e:	e7b1      	b.n	50d4 <PkaSum2ScalarMullt+0xfc>
    5170:	508410b0 	.word	0x508410b0
    5174:	514a0800 	.word	0x514a0800
    5178:	50841080 	.word	0x50841080
    517c:	508410b4 	.word	0x508410b4
    5180:	50841088 	.word	0x50841088
    5184:	514e0800 	.word	0x514e0800
    5188:	495a0600 	.word	0x495a0600
    518c:	495e0640 	.word	0x495e0640
    5190:	41420400 	.word	0x41420400
    5194:	49421400 	.word	0x49421400
    5198:	492e0440 	.word	0x492e0440
    519c:	49520600 	.word	0x49520600
    51a0:	49560640 	.word	0x49560640
    51a4:	493a0600 	.word	0x493a0600
    51a8:	493e0640 	.word	0x493e0640
    51ac:	00f10806 	.word	0x00f10806
    51b0:	00f10807 	.word	0x00f10807
    51b4:	00f10804 	.word	0x00f10804
    51b8:	00f10805 	.word	0x00f10805

000051bc <SaSi_HalClearInterruptBit>:
    51bc:	4b01      	ldr	r3, [pc, #4]	; (51c4 <SaSi_HalClearInterruptBit+0x8>)
    51be:	6018      	str	r0, [r3, #0]
    51c0:	4770      	bx	lr
    51c2:	bf00      	nop
    51c4:	50841a08 	.word	0x50841a08

000051c8 <SaSi_HalMaskInterrupt>:
    51c8:	4b01      	ldr	r3, [pc, #4]	; (51d0 <SaSi_HalMaskInterrupt+0x8>)
    51ca:	6018      	str	r0, [r3, #0]
    51cc:	4770      	bx	lr
    51ce:	bf00      	nop
    51d0:	50841a04 	.word	0x50841a04

000051d4 <SaSi_HalWaitInterrupt>:
    51d4:	4a03      	ldr	r2, [pc, #12]	; (51e4 <SaSi_HalWaitInterrupt+0x10>)
    51d6:	6813      	ldr	r3, [r2, #0]
    51d8:	4218      	tst	r0, r3
    51da:	d0fc      	beq.n	51d6 <SaSi_HalWaitInterrupt+0x2>
    51dc:	4a02      	ldr	r2, [pc, #8]	; (51e8 <SaSi_HalWaitInterrupt+0x14>)
    51de:	6010      	str	r0, [r2, #0]
    51e0:	4618      	mov	r0, r3
    51e2:	4770      	bx	lr
    51e4:	50841a00 	.word	0x50841a00
    51e8:	50841a08 	.word	0x50841a08

000051ec <flash_device_base>:

static const struct device *flash_dev = DEVICE_DT_GET(FLASH_DEVICE_NODE);

int flash_device_base(uint8_t fd_id, uintptr_t *ret)
{
    if (fd_id != FLASH_DEVICE_ID) {
    51ec:	b908      	cbnz	r0, 51f2 <flash_device_base+0x6>
        BOOT_LOG_ERR("invalid flash ID %d; expected %d",
                     fd_id, FLASH_DEVICE_ID);
        return -EINVAL;
    }
    *ret = FLASH_DEVICE_BASE;
    51ee:	6008      	str	r0, [r1, #0]
    return 0;
    51f0:	4770      	bx	lr
        return -EINVAL;
    51f2:	f06f 0015 	mvn.w	r0, #21
}
    51f6:	4770      	bx	lr

000051f8 <flash_area_id_from_multi_image_slot>:
 * MCUBoot uses continuous numbering for the primary slot, the secondary slot,
 * and the scratch while zephyr might number it differently.
 */
int flash_area_id_from_multi_image_slot(int image_index, int slot)
{
    switch (slot) {
    51f8:	b129      	cbz	r1, 5206 <flash_area_id_from_multi_image_slot+0xe>
#if defined(CONFIG_BOOT_SWAP_USING_SCRATCH)
    case 2: return FLASH_AREA_IMAGE_SCRATCH;
#endif
    }

    return -EINVAL; /* flash_area_open will fail on that */
    51fa:	2901      	cmp	r1, #1
    51fc:	bf0c      	ite	eq
    51fe:	2009      	moveq	r0, #9
    5200:	f06f 0015 	mvnne.w	r0, #21
    5204:	4770      	bx	lr
    case 0: return FLASH_AREA_IMAGE_PRIMARY(image_index);
    5206:	2003      	movs	r0, #3
}
    5208:	4770      	bx	lr

0000520a <flash_area_get_device_id>:

uint8_t flash_area_get_device_id(const struct flash_area *fa)
{
	(void)fa;
	return FLASH_DEVICE_ID;
}
    520a:	2000      	movs	r0, #0
    520c:	4770      	bx	lr

0000520e <flash_area_get_sector>:
    return ERASED_VAL;
}

int flash_area_get_sector(const struct flash_area *fap, off_t off,
                          struct flash_sector *fsp)
{
    520e:	b530      	push	{r4, r5, lr}
    struct flash_pages_info fpi;
    int rc;

    if (off >= fap->fa_size) {
    5210:	6883      	ldr	r3, [r0, #8]
{
    5212:	4604      	mov	r4, r0
    if (off >= fap->fa_size) {
    5214:	428b      	cmp	r3, r1
{
    5216:	4615      	mov	r5, r2
    5218:	b085      	sub	sp, #20
    if (off >= fap->fa_size) {
    521a:	d90e      	bls.n	523a <flash_area_get_sector+0x2c>
        return -ERANGE;
    }

    rc = flash_get_page_info_by_offs(fap->fa_dev, fap->fa_off + off,
    521c:	6863      	ldr	r3, [r4, #4]
    521e:	68c0      	ldr	r0, [r0, #12]
    5220:	4419      	add	r1, r3
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
    5222:	aa01      	add	r2, sp, #4
    5224:	f000 feef 	bl	6006 <z_impl_flash_get_page_info_by_offs>
            &fpi);

    if (rc == 0) {
    5228:	b928      	cbnz	r0, 5236 <flash_area_get_sector+0x28>
        fsp->fs_off = fpi.start_offset - fap->fa_off;
    522a:	6862      	ldr	r2, [r4, #4]
    522c:	9b01      	ldr	r3, [sp, #4]
    522e:	1a9b      	subs	r3, r3, r2
    5230:	602b      	str	r3, [r5, #0]
        fsp->fs_size = fpi.size;
    5232:	9b02      	ldr	r3, [sp, #8]
    5234:	606b      	str	r3, [r5, #4]
    }

    return rc;
}
    5236:	b005      	add	sp, #20
    5238:	bd30      	pop	{r4, r5, pc}
        return -ERANGE;
    523a:	f06f 0021 	mvn.w	r0, #33	; 0x21
    523e:	e7fa      	b.n	5236 <flash_area_get_sector+0x28>

00005240 <os_heap_init>:
    mbedtls_memory_buffer_alloc_init(mempool, sizeof(mempool));
}
#else
void os_heap_init(void)
{
}
    5240:	4770      	bx	lr

00005242 <bootutil_tlv_iter_begin>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_begin(struct image_tlv_iter *it, const struct image_header *hdr,
                        const struct flash_area *fap, uint16_t type, bool prot)
{
    5242:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5246:	460e      	mov	r6, r1
    5248:	4617      	mov	r7, r2
    524a:	4699      	mov	r9, r3
    uint32_t off_;
    struct image_tlv_info info;

    if (it == NULL || hdr == NULL || fap == NULL) {
    524c:	4604      	mov	r4, r0
    524e:	b928      	cbnz	r0, 525c <bootutil_tlv_iter_begin+0x1a>
        return -1;
    5250:	f04f 38ff 	mov.w	r8, #4294967295
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    // position on first TLV
    it->tlv_off = off_ + sizeof(info);
    return 0;
}
    5254:	4640      	mov	r0, r8
    5256:	b003      	add	sp, #12
    5258:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (it == NULL || hdr == NULL || fap == NULL) {
    525c:	2900      	cmp	r1, #0
    525e:	d0f7      	beq.n	5250 <bootutil_tlv_iter_begin+0xe>
    5260:	2a00      	cmp	r2, #0
    5262:	d0f5      	beq.n	5250 <bootutil_tlv_iter_begin+0xe>
    off_ = BOOT_TLV_OFF(hdr);
    5264:	68cb      	ldr	r3, [r1, #12]
    5266:	890d      	ldrh	r5, [r1, #8]
    if (LOAD_IMAGE_DATA(hdr, fap, off_, &info, sizeof(info))) {
    5268:	4638      	mov	r0, r7
    off_ = BOOT_TLV_OFF(hdr);
    526a:	441d      	add	r5, r3
    if (LOAD_IMAGE_DATA(hdr, fap, off_, &info, sizeof(info))) {
    526c:	2304      	movs	r3, #4
    526e:	4629      	mov	r1, r5
    5270:	eb0d 0203 	add.w	r2, sp, r3
    5274:	f000 fd05 	bl	5c82 <flash_area_read>
    5278:	4680      	mov	r8, r0
    527a:	2800      	cmp	r0, #0
    527c:	d1e8      	bne.n	5250 <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    527e:	f646 1208 	movw	r2, #26888	; 0x6908
    5282:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    5286:	8973      	ldrh	r3, [r6, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    5288:	4291      	cmp	r1, r2
    528a:	d125      	bne.n	52d8 <bootutil_tlv_iter_begin+0x96>
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    528c:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    5290:	4299      	cmp	r1, r3
    5292:	d1dd      	bne.n	5250 <bootutil_tlv_iter_begin+0xe>
        if (LOAD_IMAGE_DATA(hdr, fap, off_ + info.it_tlv_tot,
    5294:	2304      	movs	r3, #4
    5296:	4638      	mov	r0, r7
    5298:	eb0d 0203 	add.w	r2, sp, r3
    529c:	4429      	add	r1, r5
    529e:	f000 fcf0 	bl	5c82 <flash_area_read>
    52a2:	2800      	cmp	r0, #0
    52a4:	d1d4      	bne.n	5250 <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    52a6:	f646 1307 	movw	r3, #26887	; 0x6907
    52aa:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    52ae:	429a      	cmp	r2, r3
    52b0:	d1ce      	bne.n	5250 <bootutil_tlv_iter_begin+0xe>
    it->fap = fap;
    52b2:	e9c4 6700 	strd	r6, r7, [r4]
    it->prot = prot;
    52b6:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    it->type = type;
    52ba:	f8a4 9008 	strh.w	r9, [r4, #8]
    it->prot = prot;
    52be:	72a3      	strb	r3, [r4, #10]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    52c0:	8973      	ldrh	r3, [r6, #10]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    52c2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    52c6:	442b      	add	r3, r5
    52c8:	60e3      	str	r3, [r4, #12]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    52ca:	8973      	ldrh	r3, [r6, #10]
    52cc:	4413      	add	r3, r2
    52ce:	442b      	add	r3, r5
    it->tlv_off = off_ + sizeof(info);
    52d0:	3504      	adds	r5, #4
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    52d2:	6163      	str	r3, [r4, #20]
    it->tlv_off = off_ + sizeof(info);
    52d4:	6125      	str	r5, [r4, #16]
    return 0;
    52d6:	e7bd      	b.n	5254 <bootutil_tlv_iter_begin+0x12>
    } else if (hdr->ih_protect_tlv_size != 0) {
    52d8:	2b00      	cmp	r3, #0
    52da:	d0e4      	beq.n	52a6 <bootutil_tlv_iter_begin+0x64>
    52dc:	e7b8      	b.n	5250 <bootutil_tlv_iter_begin+0xe>

000052de <bootutil_tlv_iter_next>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_next(struct image_tlv_iter *it, uint32_t *off, uint16_t *len,
                       uint16_t *type)
{
    52de:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    52e2:	460e      	mov	r6, r1
    52e4:	4617      	mov	r7, r2
    52e6:	461d      	mov	r5, r3
    struct image_tlv tlv;
    int rc;

    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    52e8:	4604      	mov	r4, r0
    52ea:	b920      	cbnz	r0, 52f6 <bootutil_tlv_iter_next+0x18>
        return -1;
    52ec:	f04f 30ff 	mov.w	r0, #4294967295

        it->tlv_off += sizeof(tlv) + tlv.it_len;
    }

    return 1;
}
    52f0:	b002      	add	sp, #8
    52f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    52f6:	6803      	ldr	r3, [r0, #0]
    52f8:	2b00      	cmp	r3, #0
    52fa:	d0f7      	beq.n	52ec <bootutil_tlv_iter_next+0xe>
    52fc:	6843      	ldr	r3, [r0, #4]
    52fe:	2b00      	cmp	r3, #0
    5300:	d0f4      	beq.n	52ec <bootutil_tlv_iter_next+0xe>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    5302:	f64f 78ff 	movw	r8, #65535	; 0xffff
    while (it->tlv_off < it->tlv_end) {
    5306:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    530a:	429a      	cmp	r2, r3
    530c:	d216      	bcs.n	533c <bootutil_tlv_iter_next+0x5e>
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
    530e:	6823      	ldr	r3, [r4, #0]
    5310:	895b      	ldrh	r3, [r3, #10]
    5312:	b123      	cbz	r3, 531e <bootutil_tlv_iter_next+0x40>
    5314:	68e3      	ldr	r3, [r4, #12]
    5316:	4293      	cmp	r3, r2
            it->tlv_off += sizeof(struct image_tlv_info);
    5318:	bf04      	itt	eq
    531a:	3304      	addeq	r3, #4
    531c:	6123      	streq	r3, [r4, #16]
        rc = LOAD_IMAGE_DATA(it->hdr, it->fap, it->tlv_off, &tlv, sizeof tlv);
    531e:	2304      	movs	r3, #4
    5320:	6921      	ldr	r1, [r4, #16]
    5322:	6860      	ldr	r0, [r4, #4]
    5324:	eb0d 0203 	add.w	r2, sp, r3
    5328:	f000 fcab 	bl	5c82 <flash_area_read>
        if (rc) {
    532c:	2800      	cmp	r0, #0
    532e:	d1dd      	bne.n	52ec <bootutil_tlv_iter_next+0xe>
        if (it->prot && it->tlv_off >= it->prot_end) {
    5330:	7aa3      	ldrb	r3, [r4, #10]
    5332:	b12b      	cbz	r3, 5340 <bootutil_tlv_iter_next+0x62>
    5334:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
    5338:	429a      	cmp	r2, r3
    533a:	d301      	bcc.n	5340 <bootutil_tlv_iter_next+0x62>
            return 1;
    533c:	2001      	movs	r0, #1
    533e:	e7d7      	b.n	52f0 <bootutil_tlv_iter_next+0x12>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    5340:	8923      	ldrh	r3, [r4, #8]
        it->tlv_off += sizeof(tlv) + tlv.it_len;
    5342:	f8bd 1006 	ldrh.w	r1, [sp, #6]
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    5346:	4543      	cmp	r3, r8
    5348:	f101 0204 	add.w	r2, r1, #4
    534c:	d003      	beq.n	5356 <bootutil_tlv_iter_next+0x78>
    534e:	f8bd c004 	ldrh.w	ip, [sp, #4]
    5352:	459c      	cmp	ip, r3
    5354:	d10b      	bne.n	536e <bootutil_tlv_iter_next+0x90>
            if (type != NULL) {
    5356:	b115      	cbz	r5, 535e <bootutil_tlv_iter_next+0x80>
                *type = tlv.it_type;
    5358:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    535c:	802b      	strh	r3, [r5, #0]
            *off = it->tlv_off + sizeof(tlv);
    535e:	6923      	ldr	r3, [r4, #16]
    5360:	3304      	adds	r3, #4
    5362:	6033      	str	r3, [r6, #0]
            *len = tlv.it_len;
    5364:	8039      	strh	r1, [r7, #0]
            it->tlv_off += sizeof(tlv) + tlv.it_len;
    5366:	6923      	ldr	r3, [r4, #16]
    5368:	4413      	add	r3, r2
    536a:	6123      	str	r3, [r4, #16]
            return 0;
    536c:	e7c0      	b.n	52f0 <bootutil_tlv_iter_next+0x12>
        it->tlv_off += sizeof(tlv) + tlv.it_len;
    536e:	6923      	ldr	r3, [r4, #16]
    5370:	4413      	add	r3, r2
    5372:	6123      	str	r3, [r4, #16]
    5374:	e7c7      	b.n	5306 <bootutil_tlv_iter_next+0x28>

00005376 <bootutil_read_bigint>:
{
    5376:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5378:	460c      	mov	r4, r1
    537a:	4606      	mov	r6, r0
    537c:	4611      	mov	r1, r2
    if (mbedtls_asn1_get_tag(cp, end, &len, MBEDTLS_ASN1_INTEGER)) {
    537e:	2302      	movs	r3, #2
    5380:	4620      	mov	r0, r4
    5382:	aa01      	add	r2, sp, #4
    5384:	f000 fb05 	bl	5992 <mbedtls_asn1_get_tag>
    5388:	4605      	mov	r5, r0
    538a:	b9e8      	cbnz	r0, 53c8 <bootutil_read_bigint+0x52>
    if (len >= NUM_ECC_BYTES) {
    538c:	9a01      	ldr	r2, [sp, #4]
    538e:	2a1f      	cmp	r2, #31
    5390:	d90e      	bls.n	53b0 <bootutil_read_bigint+0x3a>
        memcpy(i, *cp + len - NUM_ECC_BYTES, NUM_ECC_BYTES);
    5392:	f1a2 0120 	sub.w	r1, r2, #32
    5396:	4630      	mov	r0, r6
    5398:	2220      	movs	r2, #32
    539a:	6823      	ldr	r3, [r4, #0]
    539c:	4419      	add	r1, r3
        memcpy(i + NUM_ECC_BYTES - len, *cp, len);
    539e:	f000 fd0d 	bl	5dbc <memcpy>
    *cp += len;
    53a2:	6823      	ldr	r3, [r4, #0]
    53a4:	9a01      	ldr	r2, [sp, #4]
    53a6:	4413      	add	r3, r2
    53a8:	6023      	str	r3, [r4, #0]
}
    53aa:	4628      	mov	r0, r5
    53ac:	b002      	add	sp, #8
    53ae:	bd70      	pop	{r4, r5, r6, pc}
        memset(i, 0, NUM_ECC_BYTES - len);
    53b0:	4601      	mov	r1, r0
    53b2:	f1c2 0220 	rsb	r2, r2, #32
    53b6:	4630      	mov	r0, r6
    53b8:	f000 fd0b 	bl	5dd2 <memset>
        memcpy(i + NUM_ECC_BYTES - len, *cp, len);
    53bc:	9a01      	ldr	r2, [sp, #4]
    53be:	6821      	ldr	r1, [r4, #0]
    53c0:	f1c2 0020 	rsb	r0, r2, #32
    53c4:	4430      	add	r0, r6
    53c6:	e7ea      	b.n	539e <bootutil_read_bigint+0x28>
        return -3;
    53c8:	f06f 0502 	mvn.w	r5, #2
    53cc:	e7ed      	b.n	53aa <bootutil_read_bigint+0x34>

000053ce <boot_trailer_sz>:
    return BOOT_STATUS_MAX_ENTRIES * boot_status_entry_sz(min_write_sz);
    53ce:	f44f 73c0 	mov.w	r3, #384	; 0x180
    53d2:	4358      	muls	r0, r3
}
    53d4:	3030      	adds	r0, #48	; 0x30
    53d6:	4770      	bx	lr

000053d8 <boot_status_entries>:
	return fa->fa_id;
    53d8:	780b      	ldrb	r3, [r1, #0]
    if (flash_area_get_id(fap) == FLASH_AREA_IMAGE_PRIMARY(image_index) ||
    53da:	2b03      	cmp	r3, #3
    53dc:	d006      	beq.n	53ec <boot_status_entries+0x14>
        return BOOT_STATUS_STATE_COUNT * BOOT_STATUS_MAX_ENTRIES;
    53de:	2b09      	cmp	r3, #9
    53e0:	bf14      	ite	ne
    53e2:	f04f 30ff 	movne.w	r0, #4294967295
    53e6:	f44f 70c0 	moveq.w	r0, #384	; 0x180
    53ea:	4770      	bx	lr
    53ec:	f44f 70c0 	mov.w	r0, #384	; 0x180
}
    53f0:	4770      	bx	lr

000053f2 <boot_status_off>:
{
    53f2:	b510      	push	{r4, lr}
    53f4:	4604      	mov	r4, r0
    elem_sz = flash_area_align(fap);
    53f6:	f000 fc84 	bl	5d02 <flash_area_align>
}
    53fa:	f44f 72c0 	mov.w	r2, #384	; 0x180
    return flash_area_get_size(fap) - off_from_end;
    53fe:	68a3      	ldr	r3, [r4, #8]
    5400:	3b30      	subs	r3, #48	; 0x30
}
    5402:	fb02 3010 	mls	r0, r2, r0, r3
    5406:	bd10      	pop	{r4, pc}

00005408 <boot_read_swap_size>:

int
boot_read_swap_size(const struct flash_area *fap, uint32_t *swap_size)
{
    5408:	b570      	push	{r4, r5, r6, lr}
    540a:	460d      	mov	r5, r1
    540c:	4604      	mov	r4, r0
}

static inline uint32_t
boot_swap_size_off(const struct flash_area *fap)
{
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    540e:	f000 ff2f 	bl	6270 <boot_swap_info_off>
    uint32_t off;
    int rc;

    off = boot_swap_size_off(fap);
    rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
    5412:	462a      	mov	r2, r5
    5414:	f1a0 0108 	sub.w	r1, r0, #8
    5418:	2304      	movs	r3, #4
    541a:	4620      	mov	r0, r4

    return rc;
}
    541c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
    5420:	f000 bc2f 	b.w	5c82 <flash_area_read>

00005424 <boot_write_copy_done>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    5424:	6881      	ldr	r1, [r0, #8]

    off = boot_copy_done_off(fap);
    BOOT_LOG_DBG("writing copy_done; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off));
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    5426:	2201      	movs	r2, #1
    5428:	3918      	subs	r1, #24
    542a:	f021 0107 	bic.w	r1, r1, #7
    542e:	3908      	subs	r1, #8
    5430:	f000 bf8d 	b.w	634e <boot_write_trailer_flag>

00005434 <boot_write_swap_size>:
}

int
boot_write_swap_size(const struct flash_area *fap, uint32_t swap_size)
{
    5434:	b513      	push	{r0, r1, r4, lr}
    5436:	4604      	mov	r4, r0
    5438:	9101      	str	r1, [sp, #4]
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    543a:	f000 ff19 	bl	6270 <boot_swap_info_off>

    off = boot_swap_size_off(fap);
    BOOT_LOG_DBG("writing swap_size; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)flash_area_get_off(fap) + off);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_size, 4);
    543e:	2304      	movs	r3, #4
    5440:	f1a0 0108 	sub.w	r1, r0, #8
    5444:	eb0d 0203 	add.w	r2, sp, r3
    5448:	4620      	mov	r0, r4
    544a:	f000 ff54 	bl	62f6 <boot_write_trailer>
}
    544e:	b002      	add	sp, #8
    5450:	bd10      	pop	{r4, pc}

00005452 <bootutil_max_image_size>:
    return 0;
}
#endif

uint32_t bootutil_max_image_size(const struct flash_area *fap)
{
    5452:	b513      	push	{r0, r1, r4, lr}
    5454:	4604      	mov	r4, r0
#if defined(MCUBOOT_SWAP_USING_SCRATCH) || defined(MCUBOOT_SINGLE_APPLICATION_SLOT)
    return boot_status_off(fap);
#elif defined(MCUBOOT_SWAP_USING_MOVE)
    struct flash_sector sector;
    /* get the last sector offset */
    int rc = flash_area_get_sector(fap, boot_status_off(fap), &sector);
    5456:	f7ff ffcc 	bl	53f2 <boot_status_off>
    545a:	466a      	mov	r2, sp
    545c:	4601      	mov	r1, r0
    545e:	4620      	mov	r0, r4
    5460:	f7ff fed5 	bl	520e <flash_area_get_sector>
    if (rc) {
    5464:	b910      	cbnz	r0, 546c <bootutil_max_image_size+0x1a>
	return fs->fs_off;
    5466:	9800      	ldr	r0, [sp, #0]
#elif defined(MCUBOOT_DIRECT_XIP)
    return boot_swap_info_off(fap);
#elif defined(MCUBOOT_RAM_LOAD)
    return boot_swap_info_off(fap);
#endif
}
    5468:	b002      	add	sp, #8
    546a:	bd10      	pop	{r4, pc}
        return 0; /* Returning of zero here should cause any check which uses
    546c:	2000      	movs	r0, #0
    546e:	e7fb      	b.n	5468 <bootutil_max_image_size+0x16>

00005470 <fih_panic_loop>:
 */
__attribute__((used))
__attribute__((noinline))
void fih_panic_loop(void)
{
    __asm volatile ("b fih_panic_loop");
    5470:	f7ff bffe 	b.w	5470 <fih_panic_loop>
    __asm volatile ("b fih_panic_loop");
    5474:	f7ff bffc 	b.w	5470 <fih_panic_loop>
    __asm volatile ("b fih_panic_loop");
    5478:	f7ff bffa 	b.w	5470 <fih_panic_loop>
    __asm volatile ("b fih_panic_loop");
    547c:	f7ff bff8 	b.w	5470 <fih_panic_loop>
    __asm volatile ("b fih_panic_loop");
    5480:	f7ff bff6 	b.w	5470 <fih_panic_loop>
    __asm volatile ("b fih_panic_loop");
    5484:	f7ff bff4 	b.w	5470 <fih_panic_loop>
    __asm volatile ("b fih_panic_loop");
    5488:	f7ff bff2 	b.w	5470 <fih_panic_loop>
    __asm volatile ("b fih_panic_loop");
    548c:	f7ff bff0 	b.w	5470 <fih_panic_loop>
    __asm volatile ("b fih_panic_loop");
    5490:	f7ff bfee 	b.w	5470 <fih_panic_loop>
}
    5494:	4770      	bx	lr

00005496 <boot_read_image_headers>:
{
    5496:	b570      	push	{r4, r5, r6, lr}
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    5498:	4613      	mov	r3, r2
{
    549a:	460e      	mov	r6, r1
    549c:	4615      	mov	r5, r2
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    549e:	2100      	movs	r1, #0
    54a0:	4602      	mov	r2, r0
{
    54a2:	4604      	mov	r4, r0
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    54a4:	f7fb fc44 	bl	d30 <boot_read_image_header>
        if (rc != 0) {
    54a8:	b950      	cbnz	r0, 54c0 <boot_read_image_headers+0x2a>
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    54aa:	462b      	mov	r3, r5
    54ac:	2101      	movs	r1, #1
    54ae:	4620      	mov	r0, r4
    54b0:	f104 022c 	add.w	r2, r4, #44	; 0x2c
    54b4:	f7fb fc3c 	bl	d30 <boot_read_image_header>
        if (rc != 0) {
    54b8:	b110      	cbz	r0, 54c0 <boot_read_image_headers+0x2a>
                return 0;
    54ba:	2e00      	cmp	r6, #0
    54bc:	bf08      	it	eq
    54be:	2000      	moveq	r0, #0
}
    54c0:	bd70      	pop	{r4, r5, r6, pc}

000054c2 <boot_read_image_size.constprop.0.isra.0>:
boot_read_image_size(struct boot_loader_state *state, int slot, uint32_t *size)
    54c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    54c4:	4604      	mov	r4, r0
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    54c6:	2000      	movs	r0, #0
boot_read_image_size(struct boot_loader_state *state, int slot, uint32_t *size)
    54c8:	460d      	mov	r5, r1
    54ca:	4616      	mov	r6, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    54cc:	f7ff fe94 	bl	51f8 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    54d0:	4669      	mov	r1, sp
    54d2:	b2c0      	uxtb	r0, r0
    54d4:	f7fc f9b6 	bl	1844 <flash_area_open>
    if (rc != 0) {
    54d8:	bb30      	cbnz	r0, 5528 <boot_read_image_size.constprop.0.isra.0+0x66>
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    54da:	232c      	movs	r3, #44	; 0x2c
    54dc:	fb03 4405 	mla	r4, r3, r5, r4
    54e0:	68e3      	ldr	r3, [r4, #12]
    54e2:	8925      	ldrh	r5, [r4, #8]
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    54e4:	9800      	ldr	r0, [sp, #0]
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    54e6:	441d      	add	r5, r3
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    54e8:	2304      	movs	r3, #4
    54ea:	4629      	mov	r1, r5
    54ec:	eb0d 0203 	add.w	r2, sp, r3
    54f0:	f000 fbc7 	bl	5c82 <flash_area_read>
    54f4:	b9c0      	cbnz	r0, 5528 <boot_read_image_size.constprop.0.isra.0+0x66>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    54f6:	f646 1308 	movw	r3, #26888	; 0x6908
    54fa:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    protect_tlv_size = boot_img_hdr(state, slot)->ih_protect_tlv_size;
    54fe:	8964      	ldrh	r4, [r4, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    5500:	429a      	cmp	r2, r3
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    5502:	9800      	ldr	r0, [sp, #0]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    5504:	d115      	bne.n	5532 <boot_read_image_size.constprop.0.isra.0+0x70>
        if (protect_tlv_size != info.it_tlv_tot) {
    5506:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    550a:	429c      	cmp	r4, r3
    550c:	d10c      	bne.n	5528 <boot_read_image_size.constprop.0.isra.0+0x66>
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    550e:	2304      	movs	r3, #4
    5510:	1961      	adds	r1, r4, r5
    5512:	eb0d 0203 	add.w	r2, sp, r3
    5516:	f000 fbb4 	bl	5c82 <flash_area_read>
    551a:	b928      	cbnz	r0, 5528 <boot_read_image_size.constprop.0.isra.0+0x66>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    551c:	f646 1307 	movw	r3, #26887	; 0x6907
    5520:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    5524:	429a      	cmp	r2, r3
    5526:	d007      	beq.n	5538 <boot_read_image_size.constprop.0.isra.0+0x76>
    flash_area_close(fap);
    5528:	9800      	ldr	r0, [sp, #0]
    552a:	f000 fba9 	bl	5c80 <flash_area_close>
}
    552e:	b002      	add	sp, #8
    5530:	bd70      	pop	{r4, r5, r6, pc}
    } else if (protect_tlv_size != 0) {
    5532:	2c00      	cmp	r4, #0
    5534:	d0f2      	beq.n	551c <boot_read_image_size.constprop.0.isra.0+0x5a>
    5536:	e7f7      	b.n	5528 <boot_read_image_size.constprop.0.isra.0+0x66>
    *size = off + protect_tlv_size + info.it_tlv_tot;
    5538:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    553c:	4421      	add	r1, r4
    553e:	4429      	add	r1, r5
    5540:	6031      	str	r1, [r6, #0]
    rc = 0;
    5542:	e7f1      	b.n	5528 <boot_read_image_size.constprop.0.isra.0+0x66>

00005544 <boot_read_sectors>:
{
    5544:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    5546:	2580      	movs	r5, #128	; 0x80
{
    5548:	4604      	mov	r4, r0
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    554a:	6a42      	ldr	r2, [r0, #36]	; 0x24
    554c:	a901      	add	r1, sp, #4
    554e:	2003      	movs	r0, #3
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    5550:	9501      	str	r5, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    5552:	f7fc f99f 	bl	1894 <flash_area_get_sectors>
    if (rc != 0) {
    5556:	b958      	cbnz	r0, 5570 <boot_read_sectors+0x2c>
    *out_num_sectors = num_sectors;
    5558:	9b01      	ldr	r3, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    555a:	2009      	movs	r0, #9
    555c:	6d22      	ldr	r2, [r4, #80]	; 0x50
    *out_num_sectors = num_sectors;
    555e:	62a3      	str	r3, [r4, #40]	; 0x28
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    5560:	a901      	add	r1, sp, #4
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    5562:	9501      	str	r5, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    5564:	f7fc f996 	bl	1894 <flash_area_get_sectors>
    if (rc != 0) {
    5568:	4605      	mov	r5, r0
    556a:	b128      	cbz	r0, 5578 <boot_read_sectors+0x34>
        return BOOT_EFLASH_SEC;
    556c:	2509      	movs	r5, #9
    556e:	e000      	b.n	5572 <boot_read_sectors+0x2e>
        return BOOT_EFLASH;
    5570:	2501      	movs	r5, #1
}
    5572:	4628      	mov	r0, r5
    5574:	b003      	add	sp, #12
    5576:	bd30      	pop	{r4, r5, pc}
    *out_num_sectors = num_sectors;
    5578:	9b01      	ldr	r3, [sp, #4]
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    557a:	6a20      	ldr	r0, [r4, #32]
    *out_num_sectors = num_sectors;
    557c:	6563      	str	r3, [r4, #84]	; 0x54
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    557e:	f000 fbc0 	bl	5d02 <flash_area_align>
    BOOT_WRITE_SZ(state) = boot_write_sz(state);
    5582:	65e0      	str	r0, [r4, #92]	; 0x5c
    return 0;
    5584:	e7f5      	b.n	5572 <boot_read_sectors+0x2e>

00005586 <boot_status_reset>:
    bs->idx = BOOT_STATUS_IDX_0;
    5586:	2301      	movs	r3, #1
    5588:	6003      	str	r3, [r0, #0]
    bs->state = BOOT_STATUS_STATE_0;
    558a:	f103 2301 	add.w	r3, r3, #16777472	; 0x1000100
    558e:	6043      	str	r3, [r0, #4]
    bs->swap_size = 0;
    5590:	2300      	movs	r3, #0
    bs->source = 0;
    5592:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
    5596:	4770      	bx	lr

00005598 <boot_status_is_reset>:
            bs->idx == BOOT_STATUS_IDX_0 &&
    5598:	7943      	ldrb	r3, [r0, #5]
    559a:	2b01      	cmp	r3, #1
    559c:	d107      	bne.n	55ae <boot_status_is_reset+0x16>
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    559e:	6803      	ldr	r3, [r0, #0]
    55a0:	2b01      	cmp	r3, #1
    55a2:	d104      	bne.n	55ae <boot_status_is_reset+0x16>
            bs->idx == BOOT_STATUS_IDX_0 &&
    55a4:	7900      	ldrb	r0, [r0, #4]
    55a6:	1e43      	subs	r3, r0, #1
    55a8:	4258      	negs	r0, r3
    55aa:	4158      	adcs	r0, r3
    55ac:	4770      	bx	lr
    55ae:	2000      	movs	r0, #0
}
    55b0:	4770      	bx	lr

000055b2 <boot_write_status>:
{
    55b2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    55b4:	4606      	mov	r6, r0
    55b6:	460d      	mov	r5, r1
    rc = flash_area_open(area_id, &fap);
    55b8:	2003      	movs	r0, #3
    55ba:	a901      	add	r1, sp, #4
    55bc:	f7fc f942 	bl	1844 <flash_area_open>
    if (rc != 0) {
    55c0:	bb38      	cbnz	r0, 5612 <boot_write_status+0x60>
    off = boot_status_off(fap) +
    55c2:	9801      	ldr	r0, [sp, #4]
    55c4:	f7ff ff15 	bl	53f2 <boot_status_off>
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    55c8:	6df1      	ldr	r1, [r6, #92]	; 0x5c
    off = boot_status_off(fap) +
    55ca:	4604      	mov	r4, r0
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    55cc:	4628      	mov	r0, r5
    55ce:	f000 f93d 	bl	584c <boot_status_internal_off>
    off = boot_status_off(fap) +
    55d2:	4404      	add	r4, r0
    align = flash_area_align(fap);
    55d4:	9801      	ldr	r0, [sp, #4]
    55d6:	f000 fb94 	bl	5d02 <flash_area_align>
    55da:	4606      	mov	r6, r0
    erased_val = flash_area_erased_val(fap);
    55dc:	9801      	ldr	r0, [sp, #4]
    55de:	f000 fb97 	bl	5d10 <flash_area_erased_val>
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    55e2:	2208      	movs	r2, #8
    erased_val = flash_area_erased_val(fap);
    55e4:	4601      	mov	r1, r0
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    55e6:	eb0d 0002 	add.w	r0, sp, r2
    55ea:	f000 fbf2 	bl	5dd2 <memset>
    buf[0] = bs->state;
    55ee:	792b      	ldrb	r3, [r5, #4]
    rc = flash_area_write(fap, off, buf, align);
    55f0:	4621      	mov	r1, r4
    buf[0] = bs->state;
    55f2:	f88d 3008 	strb.w	r3, [sp, #8]
    rc = flash_area_write(fap, off, buf, align);
    55f6:	9801      	ldr	r0, [sp, #4]
    55f8:	4633      	mov	r3, r6
    55fa:	aa02      	add	r2, sp, #8
    55fc:	f000 fb56 	bl	5cac <flash_area_write>
    if (rc != 0) {
    5600:	1e04      	subs	r4, r0, #0
    flash_area_close(fap);
    5602:	9801      	ldr	r0, [sp, #4]
    if (rc != 0) {
    5604:	bf18      	it	ne
    5606:	2401      	movne	r4, #1
    flash_area_close(fap);
    5608:	f000 fb3a 	bl	5c80 <flash_area_close>
}
    560c:	4620      	mov	r0, r4
    560e:	b004      	add	sp, #16
    5610:	bd70      	pop	{r4, r5, r6, pc}
        return BOOT_EFLASH;
    5612:	2401      	movs	r4, #1
    5614:	e7fa      	b.n	560c <boot_write_status+0x5a>

00005616 <boot_erase_region>:
    return flash_area_erase(fap, off, sz);
    5616:	f000 bb5e 	b.w	5cd6 <flash_area_erase>

0000561a <swap_erase_trailer_sectors>:

#if defined(MCUBOOT_SWAP_USING_SCRATCH) || defined(MCUBOOT_SWAP_USING_MOVE)
int
swap_erase_trailer_sectors(const struct boot_loader_state *state,
                           const struct flash_area *fap)
{
    561a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    561e:	460e      	mov	r6, r1
    int rc;

    BOOT_LOG_DBG("erasing trailer; fa_id=%d", flash_area_get_id(fap));

    image_index = BOOT_CURR_IMG(state);
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    5620:	2100      	movs	r1, #0
{
    5622:	4607      	mov	r7, r0
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    5624:	4608      	mov	r0, r1
    5626:	f7ff fde7 	bl	51f8 <flash_area_id_from_multi_image_slot>
    562a:	4604      	mov	r4, r0
            BOOT_PRIMARY_SLOT);
    fa_id_secondary = flash_area_id_from_multi_image_slot(image_index,
    562c:	2101      	movs	r1, #1
    562e:	2000      	movs	r0, #0
    5630:	f7ff fde2 	bl	51f8 <flash_area_id_from_multi_image_slot>
            BOOT_SECONDARY_SLOT);

    if (flash_area_get_id(fap) == fa_id_primary) {
    5634:	7833      	ldrb	r3, [r6, #0]
    5636:	429c      	cmp	r4, r3
    5638:	d021      	beq.n	567e <swap_erase_trailer_sectors+0x64>
        slot = BOOT_PRIMARY_SLOT;
    } else if (flash_area_get_id(fap) == fa_id_secondary) {
    563a:	4298      	cmp	r0, r3
    563c:	d121      	bne.n	5682 <swap_erase_trailer_sectors+0x68>
        slot = BOOT_SECONDARY_SLOT;
    563e:	2501      	movs	r5, #1
    return BOOT_IMG(state, slot).num_sectors;
    5640:	232c      	movs	r3, #44	; 0x2c
    5642:	fb03 7505 	mla	r5, r3, r5, r7
        return BOOT_EFLASH;
    }

    /* delete starting from last sector and moving to beginning */
    sector = boot_img_num_sectors(state, slot) - 1;
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    5646:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    sector = boot_img_num_sectors(state, slot) - 1;
    5648:	6aac      	ldr	r4, [r5, #40]	; 0x28
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    564a:	f7ff fec0 	bl	53ce <boot_trailer_sz>
    total_sz = 0;
    564e:	f04f 0800 	mov.w	r8, #0
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    5652:	4607      	mov	r7, r0
    sector = boot_img_num_sectors(state, slot) - 1;
    5654:	3c01      	subs	r4, #1
    return flash_sector_get_size(&BOOT_IMG(state, slot).sectors[sector]);
    5656:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    do {
        sz = boot_img_sector_size(state, slot, sector);
        off = boot_img_sector_off(state, slot, sector);
        rc = boot_erase_region(fap, off, sz);
    5658:	4630      	mov	r0, r6
    565a:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
    return flash_sector_get_off(&BOOT_IMG(state, slot).sectors[sector]) -
    565e:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
	return fs->fs_size;
    5662:	f8d2 9004 	ldr.w	r9, [r2, #4]
    5666:	681b      	ldr	r3, [r3, #0]
    5668:	464a      	mov	r2, r9
    566a:	1ac9      	subs	r1, r1, r3
        assert(rc == 0);

        sector--;
        total_sz += sz;
    566c:	44c8      	add	r8, r9
        rc = boot_erase_region(fap, off, sz);
    566e:	f7ff ffd2 	bl	5616 <boot_erase_region>
    } while (total_sz < trailer_sz);
    5672:	45b8      	cmp	r8, r7
        sector--;
    5674:	f104 34ff 	add.w	r4, r4, #4294967295
    } while (total_sz < trailer_sz);
    5678:	d3ed      	bcc.n	5656 <swap_erase_trailer_sectors+0x3c>

    return rc;
}
    567a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        slot = BOOT_PRIMARY_SLOT;
    567e:	2500      	movs	r5, #0
    5680:	e7de      	b.n	5640 <swap_erase_trailer_sectors+0x26>
        return BOOT_EFLASH;
    5682:	2001      	movs	r0, #1
    5684:	e7f9      	b.n	567a <swap_erase_trailer_sectors+0x60>

00005686 <swap_status_init>:

int
swap_status_init(const struct boot_loader_state *state,
                 const struct flash_area *fap,
                 const struct boot_status *bs)
{
    5686:	b537      	push	{r0, r1, r2, r4, r5, lr}
    5688:	4615      	mov	r5, r2
    568a:	460c      	mov	r4, r1

    image_index = BOOT_CURR_IMG(state);

    BOOT_LOG_DBG("initializing status; fa_id=%d", flash_area_get_id(fap));

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    568c:	2009      	movs	r0, #9
    568e:	4669      	mov	r1, sp
    5690:	f000 fe74 	bl	637c <boot_read_swap_state_by_id>
            &swap_state);
    assert(rc == 0);

    if (bs->swap_type != BOOT_SWAP_TYPE_NONE) {
    5694:	79e9      	ldrb	r1, [r5, #7]
    5696:	2901      	cmp	r1, #1
    5698:	d003      	beq.n	56a2 <swap_status_init+0x1c>
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
    569a:	2200      	movs	r2, #0
    569c:	4620      	mov	r0, r4
    569e:	f000 fe81 	bl	63a4 <boot_write_swap_info>
        assert(rc == 0);
    }

    if (swap_state.image_ok == BOOT_FLAG_SET) {
    56a2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    56a6:	2b01      	cmp	r3, #1
    56a8:	d102      	bne.n	56b0 <swap_status_init+0x2a>
        rc = boot_write_image_ok(fap);
    56aa:	4620      	mov	r0, r4
    56ac:	f000 fe59 	bl	6362 <boot_write_image_ok>
        assert(rc == 0);
    }

    rc = boot_write_swap_size(fap, bs->swap_size);
    56b0:	68a9      	ldr	r1, [r5, #8]
    56b2:	4620      	mov	r0, r4
    56b4:	f7ff febe 	bl	5434 <boot_write_swap_size>

    rc = boot_write_enc_key(fap, 1, bs);
    assert(rc == 0);
#endif

    rc = boot_write_magic(fap);
    56b8:	4620      	mov	r0, r4
    56ba:	f7fd faf1 	bl	2ca0 <boot_write_magic>
    assert(rc == 0);

    return 0;
}
    56be:	2000      	movs	r0, #0
    56c0:	b003      	add	sp, #12
    56c2:	bd30      	pop	{r4, r5, pc}

000056c4 <swap_read_status>:

int
swap_read_status(struct boot_loader_state *state, struct boot_status *bs)
{
    56c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    56c6:	460d      	mov	r5, r1
    56c8:	4606      	mov	r6, r0
    uint32_t off;
    uint8_t swap_info;
    int area_id;
    int rc;

    bs->source = swap_status_source(state);
    56ca:	f000 f8fa 	bl	58c2 <swap_status_source>
    56ce:	4604      	mov	r4, r0
    56d0:	60e8      	str	r0, [r5, #12]
    switch (bs->source) {
    56d2:	b358      	cbz	r0, 572c <swap_read_status+0x68>
    56d4:	2802      	cmp	r0, #2
    56d6:	d12e      	bne.n	5736 <swap_read_status+0x72>
    default:
        assert(0);
        return BOOT_EBADARGS;
    }

    rc = flash_area_open(area_id, &fap);
    56d8:	2003      	movs	r0, #3
    56da:	a901      	add	r1, sp, #4
    56dc:	f7fc f8b2 	bl	1844 <flash_area_open>
    if (rc != 0) {
    56e0:	bb58      	cbnz	r0, 573a <swap_read_status+0x76>
        return BOOT_EFLASH;
    }

    rc = swap_read_status_bytes(fap, state, bs);
    56e2:	462a      	mov	r2, r5
    56e4:	4631      	mov	r1, r6
    56e6:	9801      	ldr	r0, [sp, #4]
    56e8:	f000 f863 	bl	57b2 <swap_read_status_bytes>
    if (rc == 0) {
    56ec:	4604      	mov	r4, r0
    56ee:	b9d0      	cbnz	r0, 5726 <swap_read_status+0x62>
        off = boot_swap_info_off(fap);
    56f0:	9801      	ldr	r0, [sp, #4]
    56f2:	f000 fdbd 	bl	6270 <boot_swap_info_off>
        rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    56f6:	2301      	movs	r3, #1
        off = boot_swap_info_off(fap);
    56f8:	4601      	mov	r1, r0
        rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    56fa:	f10d 0203 	add.w	r2, sp, #3
    56fe:	9801      	ldr	r0, [sp, #4]
    5700:	f000 fabf 	bl	5c82 <flash_area_read>
        if (rc != 0) {
    5704:	4604      	mov	r4, r0
    5706:	b9a0      	cbnz	r0, 5732 <swap_read_status+0x6e>
            rc = BOOT_EFLASH;
            goto done;
        }

        if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info)) {
    5708:	2201      	movs	r2, #1
    570a:	9801      	ldr	r0, [sp, #4]
    570c:	f10d 0103 	add.w	r1, sp, #3
    5710:	f000 fdc2 	bl	6298 <bootutil_buffer_is_erased>
    5714:	b110      	cbz	r0, 571c <swap_read_status+0x58>
            BOOT_SET_SWAP_INFO(swap_info, 0, BOOT_SWAP_TYPE_NONE);
    5716:	2301      	movs	r3, #1
    5718:	f88d 3003 	strb.w	r3, [sp, #3]
            rc = 0;
        }

        /* Extract the swap type info */
        bs->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    571c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5720:	f003 030f 	and.w	r3, r3, #15
    5724:	71eb      	strb	r3, [r5, #7]
    }

done:
    flash_area_close(fap);
    5726:	9801      	ldr	r0, [sp, #4]
    5728:	f000 faaa 	bl	5c80 <flash_area_close>

    return rc;
}
    572c:	4620      	mov	r0, r4
    572e:	b002      	add	sp, #8
    5730:	bd70      	pop	{r4, r5, r6, pc}
            rc = BOOT_EFLASH;
    5732:	2401      	movs	r4, #1
    5734:	e7f7      	b.n	5726 <swap_read_status+0x62>
    switch (bs->source) {
    5736:	2407      	movs	r4, #7
    5738:	e7f8      	b.n	572c <swap_read_status+0x68>
        return BOOT_EFLASH;
    573a:	2401      	movs	r4, #1
    573c:	e7f6      	b.n	572c <swap_read_status+0x68>

0000573e <swap_set_copy_done>:

int
swap_set_copy_done(uint8_t image_index)
{
    573e:	b513      	push	{r0, r1, r4, lr}
    const struct flash_area *fap;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    5740:	2003      	movs	r0, #3
    5742:	a901      	add	r1, sp, #4
    5744:	f7fc f87e 	bl	1844 <flash_area_open>
            &fap);
    if (rc != 0) {
    5748:	b948      	cbnz	r0, 575e <swap_set_copy_done+0x20>
        return BOOT_EFLASH;
    }

    rc = boot_write_copy_done(fap);
    574a:	9801      	ldr	r0, [sp, #4]
    574c:	f7ff fe6a 	bl	5424 <boot_write_copy_done>
    5750:	4604      	mov	r4, r0
    flash_area_close(fap);
    5752:	9801      	ldr	r0, [sp, #4]
    5754:	f000 fa94 	bl	5c80 <flash_area_close>
    return rc;
}
    5758:	4620      	mov	r0, r4
    575a:	b002      	add	sp, #8
    575c:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    575e:	2401      	movs	r4, #1
    5760:	e7fa      	b.n	5758 <swap_set_copy_done+0x1a>

00005762 <swap_set_image_ok>:

int
swap_set_image_ok(uint8_t image_index)
{
    5762:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const struct flash_area *fap;
    struct boot_swap_state state;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    5764:	2003      	movs	r0, #3
    5766:	a901      	add	r1, sp, #4
    5768:	f7fc f86c 	bl	1844 <flash_area_open>
            &fap);
    if (rc != 0) {
    576c:	b9a8      	cbnz	r0, 579a <swap_set_image_ok+0x38>
        return BOOT_EFLASH;
    }

    rc = boot_read_swap_state(fap, &state);
    576e:	9801      	ldr	r0, [sp, #4]
    5770:	a902      	add	r1, sp, #8
    5772:	f7fd fab5 	bl	2ce0 <boot_read_swap_state>
    if (rc != 0) {
    5776:	4604      	mov	r4, r0
    5778:	b968      	cbnz	r0, 5796 <swap_set_image_ok+0x34>
        rc = BOOT_EFLASH;
        goto out;
    }

    if (state.image_ok == BOOT_FLAG_UNSET) {
    577a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    577e:	2b03      	cmp	r3, #3
    5780:	d103      	bne.n	578a <swap_set_image_ok+0x28>
        rc = boot_write_image_ok(fap);
    5782:	9801      	ldr	r0, [sp, #4]
    5784:	f000 fded 	bl	6362 <boot_write_image_ok>
    5788:	4604      	mov	r4, r0
    }

out:
    flash_area_close(fap);
    578a:	9801      	ldr	r0, [sp, #4]
    578c:	f000 fa78 	bl	5c80 <flash_area_close>
    return rc;
}
    5790:	4620      	mov	r0, r4
    5792:	b004      	add	sp, #16
    5794:	bd10      	pop	{r4, pc}
        rc = BOOT_EFLASH;
    5796:	2401      	movs	r4, #1
    5798:	e7f7      	b.n	578a <swap_set_image_ok+0x28>
        return BOOT_EFLASH;
    579a:	2401      	movs	r4, #1
    579c:	e7f8      	b.n	5790 <swap_set_image_ok+0x2e>

0000579e <find_last_idx>:
    579e:	6a43      	ldr	r3, [r0, #36]	; 0x24
    last_idx = 0;
    57a0:	2000      	movs	r0, #0
    57a2:	685a      	ldr	r2, [r3, #4]
    sz = 0;
    57a4:	4603      	mov	r3, r0
        sz += sector_sz;
    57a6:	4413      	add	r3, r2
        if (sz >= swap_size) {
    57a8:	428b      	cmp	r3, r1
        last_idx++;
    57aa:	f100 0001 	add.w	r0, r0, #1
        if (sz >= swap_size) {
    57ae:	d3fa      	bcc.n	57a6 <find_last_idx+0x8>
}
    57b0:	4770      	bx	lr

000057b2 <swap_read_status_bytes>:
{
    57b2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    57b6:	4607      	mov	r7, r0
    57b8:	460c      	mov	r4, r1
    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
    57ba:	4601      	mov	r1, r0
    57bc:	2000      	movs	r0, #0
{
    57be:	4616      	mov	r6, r2
    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
    57c0:	f7ff fe0a 	bl	53d8 <boot_status_entries>
    if (max_entries < 0) {
    57c4:	1e05      	subs	r5, r0, #0
    57c6:	db3d      	blt.n	5844 <swap_read_status_bytes+0x92>
    off = boot_status_off(fap);
    57c8:	4638      	mov	r0, r7
    write_sz = BOOT_WRITE_SZ(state);
    57ca:	6de4      	ldr	r4, [r4, #92]	; 0x5c
    off = boot_status_off(fap);
    57cc:	f7ff fe11 	bl	53f2 <boot_status_off>
    for (i = max_entries; i > 0; i--) {
    57d0:	fa5f f984 	uxtb.w	r9, r4
    found_idx = -1;
    57d4:	f04f 34ff 	mov.w	r4, #4294967295
    57d8:	1e6b      	subs	r3, r5, #1
    57da:	fb09 0803 	mla	r8, r9, r3, r0
    for (i = max_entries; i > 0; i--) {
    57de:	b965      	cbnz	r5, 57fa <swap_read_status_bytes+0x48>
    if (found_idx == -1) {
    57e0:	1c63      	adds	r3, r4, #1
    57e2:	d006      	beq.n	57f2 <swap_read_status_bytes+0x40>
    } else if (found_idx < move_entries) {
    57e4:	2c7f      	cmp	r4, #127	; 0x7f
    57e6:	dc22      	bgt.n	582e <swap_read_status_bytes+0x7c>
        bs->state = (found_idx % BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_STATE_0;;
    57e8:	f240 1301 	movw	r3, #257	; 0x101
        bs->idx = (found_idx  / BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_IDX_0;
    57ec:	3401      	adds	r4, #1
    57ee:	6034      	str	r4, [r6, #0]
        bs->state = (found_idx % BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_STATE_0;;
    57f0:	80b3      	strh	r3, [r6, #4]
}
    57f2:	4628      	mov	r0, r5
    57f4:	b002      	add	sp, #8
    57f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = flash_area_read(fap, off + (i - 1) * write_sz, &status, 1);
    57fa:	2301      	movs	r3, #1
    57fc:	4641      	mov	r1, r8
    57fe:	4638      	mov	r0, r7
    5800:	f10d 0207 	add.w	r2, sp, #7
    5804:	f000 fa3d 	bl	5c82 <flash_area_read>
        if (rc < 0) {
    5808:	2800      	cmp	r0, #0
        rc = flash_area_read(fap, off + (i - 1) * write_sz, &status, 1);
    580a:	f105 3aff 	add.w	sl, r5, #4294967295
        if (rc < 0) {
    580e:	db1b      	blt.n	5848 <swap_read_status_bytes+0x96>
        if (bootutil_buffer_is_erased(fap, &status, 1)) {
    5810:	2201      	movs	r2, #1
    5812:	4638      	mov	r0, r7
    5814:	f10d 0107 	add.w	r1, sp, #7
    5818:	f000 fd3e 	bl	6298 <bootutil_buffer_is_erased>
    581c:	b918      	cbnz	r0, 5826 <swap_read_status_bytes+0x74>
            if (found_idx == -1) {
    581e:	f1b4 3fff 	cmp.w	r4, #4294967295
    5822:	bf08      	it	eq
    5824:	462c      	moveq	r4, r5
    5826:	4655      	mov	r5, sl
    5828:	eba8 0809 	sub.w	r8, r8, r9
    582c:	e7d7      	b.n	57de <swap_read_status_bytes+0x2c>
        bs->op = BOOT_STATUS_OP_SWAP;
    582e:	2302      	movs	r3, #2
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
    5830:	3c80      	subs	r4, #128	; 0x80
        bs->op = BOOT_STATUS_OP_SWAP;
    5832:	7173      	strb	r3, [r6, #5]
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
    5834:	1063      	asrs	r3, r4, #1
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
    5836:	f004 0401 	and.w	r4, r4, #1
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
    583a:	3301      	adds	r3, #1
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
    583c:	3401      	adds	r4, #1
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
    583e:	6033      	str	r3, [r6, #0]
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
    5840:	7134      	strb	r4, [r6, #4]
    5842:	e7d6      	b.n	57f2 <swap_read_status_bytes+0x40>
        return BOOT_EBADARGS;
    5844:	2507      	movs	r5, #7
    5846:	e7d4      	b.n	57f2 <swap_read_status_bytes+0x40>
            return BOOT_EFLASH;
    5848:	2501      	movs	r5, #1
    584a:	e7d2      	b.n	57f2 <swap_read_status_bytes+0x40>

0000584c <boot_status_internal_off>:
{
    584c:	b510      	push	{r4, lr}
            BOOT_STATUS_MOVE_STATE_COUNT : BOOT_STATUS_SWAP_STATE_COUNT);
    584e:	7943      	ldrb	r3, [r0, #5]
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    5850:	7902      	ldrb	r2, [r0, #4]
            BOOT_STATUS_MOVE_STATE_COUNT : BOOT_STATUS_SWAP_STATE_COUNT);
    5852:	2b01      	cmp	r3, #1
               0 : (BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT * elem_sz)) +
    5854:	bf06      	itte	eq
    5856:	2300      	moveq	r3, #0
    idx_sz = elem_sz * ((bs->op == BOOT_STATUS_OP_MOVE) ?
    5858:	460c      	moveq	r4, r1
               0 : (BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT * elem_sz)) +
    585a:	01cb      	lslne	r3, r1, #7
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    585c:	f102 32ff 	add.w	r2, r2, #4294967295
    off = ((bs->op == BOOT_STATUS_OP_MOVE) ?
    5860:	fb01 3302 	mla	r3, r1, r2, r3
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    5864:	6802      	ldr	r2, [r0, #0]
    idx_sz = elem_sz * ((bs->op == BOOT_STATUS_OP_MOVE) ?
    5866:	bf18      	it	ne
    5868:	004c      	lslne	r4, r1, #1
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    586a:	3a01      	subs	r2, #1
}
    586c:	fb04 3002 	mla	r0, r4, r2, r3
    5870:	bd10      	pop	{r4, pc}

00005872 <boot_slots_compatible>:
{
    5872:	b530      	push	{r4, r5, lr}
    return BOOT_IMG(state, slot).num_sectors;
    5874:	6a81      	ldr	r1, [r0, #40]	; 0x28
    5876:	6d42      	ldr	r2, [r0, #84]	; 0x54
    if ((num_sectors_pri != num_sectors_sec) &&
    5878:	428a      	cmp	r2, r1
    587a:	d002      	beq.n	5882 <boot_slots_compatible+0x10>
            (num_sectors_pri != (num_sectors_sec + 1))) {
    587c:	1c53      	adds	r3, r2, #1
    if ((num_sectors_pri != num_sectors_sec) &&
    587e:	428b      	cmp	r3, r1
    5880:	d11b      	bne.n	58ba <boot_slots_compatible+0x48>
    if (num_sectors_pri > BOOT_MAX_IMG_SECTORS) {
    5882:	2980      	cmp	r1, #128	; 0x80
    5884:	d819      	bhi.n	58ba <boot_slots_compatible+0x48>
    for (i = 0; i < num_sectors_sec; i++) {
    5886:	2300      	movs	r3, #0
    size_t sector_sz_pri = 0;
    5888:	461c      	mov	r4, r3
    for (i = 0; i < num_sectors_sec; i++) {
    588a:	429a      	cmp	r2, r3
    588c:	d109      	bne.n	58a2 <boot_slots_compatible+0x30>
    if (num_sectors_pri > num_sectors_sec) {
    588e:	4291      	cmp	r1, r2
    5890:	d915      	bls.n	58be <boot_slots_compatible+0x4c>
    5892:	6a43      	ldr	r3, [r0, #36]	; 0x24
    5894:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
        if (sector_sz_pri != boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i)) {
    5898:	6858      	ldr	r0, [r3, #4]
    589a:	1b03      	subs	r3, r0, r4
    589c:	4258      	negs	r0, r3
    589e:	4158      	adcs	r0, r3
}
    58a0:	bd30      	pop	{r4, r5, pc}
    58a2:	6a44      	ldr	r4, [r0, #36]	; 0x24
    58a4:	6d05      	ldr	r5, [r0, #80]	; 0x50
    58a6:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
    58aa:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
    58ae:	6864      	ldr	r4, [r4, #4]
        if (sector_sz_pri != sector_sz_sec) {
    58b0:	686d      	ldr	r5, [r5, #4]
    58b2:	42ac      	cmp	r4, r5
    58b4:	d101      	bne.n	58ba <boot_slots_compatible+0x48>
    for (i = 0; i < num_sectors_sec; i++) {
    58b6:	3301      	adds	r3, #1
    58b8:	e7e7      	b.n	588a <boot_slots_compatible+0x18>
        return 0;
    58ba:	2000      	movs	r0, #0
    58bc:	e7f0      	b.n	58a0 <boot_slots_compatible+0x2e>
    return 1;
    58be:	2001      	movs	r0, #1
    58c0:	e7ee      	b.n	58a0 <boot_slots_compatible+0x2e>

000058c2 <swap_status_source>:
{
    58c2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    58c4:	2003      	movs	r0, #3
    58c6:	4669      	mov	r1, sp
    58c8:	f000 fd58 	bl	637c <boot_read_swap_state_by_id>
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    58cc:	2009      	movs	r0, #9
    58ce:	a902      	add	r1, sp, #8
    58d0:	f000 fd54 	bl	637c <boot_read_swap_state_by_id>
    if (state_primary_slot.magic == BOOT_MAGIC_GOOD &&
    58d4:	f89d 3000 	ldrb.w	r3, [sp]
    58d8:	2b01      	cmp	r3, #1
    58da:	d10c      	bne.n	58f6 <swap_status_source+0x34>
    58dc:	f89d 3002 	ldrb.w	r3, [sp, #2]
    58e0:	2b03      	cmp	r3, #3
    58e2:	d108      	bne.n	58f6 <swap_status_source+0x34>
            state_primary_slot.copy_done == BOOT_FLAG_UNSET &&
    58e4:	f89d 0008 	ldrb.w	r0, [sp, #8]
    58e8:	3801      	subs	r0, #1
    58ea:	bf18      	it	ne
    58ec:	2001      	movne	r0, #1
    58ee:	0040      	lsls	r0, r0, #1
}
    58f0:	b005      	add	sp, #20
    58f2:	f85d fb04 	ldr.w	pc, [sp], #4
    return BOOT_STATUS_SOURCE_NONE;
    58f6:	2000      	movs	r0, #0
    58f8:	e7fa      	b.n	58f0 <swap_status_source+0x2e>

000058fa <mbedtls_asn1_get_len>:
 * ASN.1 DER decoding routines
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
    58fa:	b570      	push	{r4, r5, r6, lr}
    if( ( end - *p ) < 1 )
    58fc:	6803      	ldr	r3, [r0, #0]
    58fe:	1acd      	subs	r5, r1, r3
    5900:	2d00      	cmp	r5, #0
    5902:	dc02      	bgt.n	590a <mbedtls_asn1_get_len+0x10>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    5904:	f06f 005f 	mvn.w	r0, #95	; 0x5f

    if( *len > (size_t) ( end - *p ) )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    return( 0 );
}
    5908:	bd70      	pop	{r4, r5, r6, pc}
    if( ( **p & 0x80 ) == 0 )
    590a:	f993 6000 	ldrsb.w	r6, [r3]
    590e:	781c      	ldrb	r4, [r3, #0]
    5910:	2e00      	cmp	r6, #0
    5912:	db0a      	blt.n	592a <mbedtls_asn1_get_len+0x30>
        *len = *(*p)++;
    5914:	1c5c      	adds	r4, r3, #1
    5916:	6004      	str	r4, [r0, #0]
    5918:	781b      	ldrb	r3, [r3, #0]
    591a:	6013      	str	r3, [r2, #0]
    if( *len > (size_t) ( end - *p ) )
    591c:	6803      	ldr	r3, [r0, #0]
    591e:	1ac9      	subs	r1, r1, r3
    5920:	6813      	ldr	r3, [r2, #0]
    5922:	428b      	cmp	r3, r1
    5924:	d8ee      	bhi.n	5904 <mbedtls_asn1_get_len+0xa>
    return( 0 );
    5926:	2000      	movs	r0, #0
    5928:	e7ee      	b.n	5908 <mbedtls_asn1_get_len+0xe>
        switch( **p & 0x7F )
    592a:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    592e:	3c01      	subs	r4, #1
    5930:	2c03      	cmp	r4, #3
    5932:	d82b      	bhi.n	598c <mbedtls_asn1_get_len+0x92>
    5934:	e8df f004 	tbb	[pc, r4]
    5938:	21140a02 	.word	0x21140a02
            if( ( end - *p ) < 2 )
    593c:	2d01      	cmp	r5, #1
    593e:	d0e1      	beq.n	5904 <mbedtls_asn1_get_len+0xa>
            *len = (*p)[1];
    5940:	785b      	ldrb	r3, [r3, #1]
    5942:	6013      	str	r3, [r2, #0]
            (*p) += 2;
    5944:	6803      	ldr	r3, [r0, #0]
    5946:	3302      	adds	r3, #2
            (*p) += 5;
    5948:	6003      	str	r3, [r0, #0]
            break;
    594a:	e7e7      	b.n	591c <mbedtls_asn1_get_len+0x22>
            if( ( end - *p ) < 3 )
    594c:	2d02      	cmp	r5, #2
    594e:	ddd9      	ble.n	5904 <mbedtls_asn1_get_len+0xa>
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
    5950:	f8b3 3001 	ldrh.w	r3, [r3, #1]
    5954:	ba5b      	rev16	r3, r3
    5956:	b29b      	uxth	r3, r3
    5958:	6013      	str	r3, [r2, #0]
            (*p) += 3;
    595a:	6803      	ldr	r3, [r0, #0]
    595c:	3303      	adds	r3, #3
    595e:	e7f3      	b.n	5948 <mbedtls_asn1_get_len+0x4e>
            if( ( end - *p ) < 4 )
    5960:	2d03      	cmp	r5, #3
    5962:	ddcf      	ble.n	5904 <mbedtls_asn1_get_len+0xa>
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    5964:	789c      	ldrb	r4, [r3, #2]
            *len = ( (size_t)(*p)[1] << 16 ) |
    5966:	785d      	ldrb	r5, [r3, #1]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    5968:	0224      	lsls	r4, r4, #8
    596a:	78db      	ldrb	r3, [r3, #3]
            *len = ( (size_t)(*p)[1] << 16 ) |
    596c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    5970:	4323      	orrs	r3, r4
            *len = ( (size_t)(*p)[1] << 16 ) |
    5972:	6013      	str	r3, [r2, #0]
            (*p) += 4;
    5974:	6803      	ldr	r3, [r0, #0]
    5976:	3304      	adds	r3, #4
    5978:	e7e6      	b.n	5948 <mbedtls_asn1_get_len+0x4e>
            if( ( end - *p ) < 5 )
    597a:	2d04      	cmp	r5, #4
    597c:	ddc2      	ble.n	5904 <mbedtls_asn1_get_len+0xa>
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    597e:	f8d3 3001 	ldr.w	r3, [r3, #1]
    5982:	ba1b      	rev	r3, r3
    5984:	6013      	str	r3, [r2, #0]
            (*p) += 5;
    5986:	6803      	ldr	r3, [r0, #0]
    5988:	3305      	adds	r3, #5
    598a:	e7dd      	b.n	5948 <mbedtls_asn1_get_len+0x4e>
        switch( **p & 0x7F )
    598c:	f06f 0063 	mvn.w	r0, #99	; 0x63
    5990:	e7ba      	b.n	5908 <mbedtls_asn1_get_len+0xe>

00005992 <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
    5992:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
    5994:	6804      	ldr	r4, [r0, #0]
    5996:	1b0e      	subs	r6, r1, r4
    5998:	2e00      	cmp	r6, #0
    599a:	dd07      	ble.n	59ac <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
    599c:	7826      	ldrb	r6, [r4, #0]
    599e:	429e      	cmp	r6, r3
    59a0:	d108      	bne.n	59b4 <mbedtls_asn1_get_tag+0x22>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
    59a2:	3401      	adds	r4, #1
    59a4:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
}
    59a6:	bc70      	pop	{r4, r5, r6}
    return( mbedtls_asn1_get_len( p, end, len ) );
    59a8:	f7ff bfa7 	b.w	58fa <mbedtls_asn1_get_len>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    59ac:	f06f 005f 	mvn.w	r0, #95	; 0x5f
}
    59b0:	bc70      	pop	{r4, r5, r6}
    59b2:	4770      	bx	lr
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
    59b4:	f06f 0061 	mvn.w	r0, #97	; 0x61
    59b8:	e7fa      	b.n	59b0 <mbedtls_asn1_get_tag+0x1e>

000059ba <mbedtls_asn1_get_bitstring_null>:
/*
 * Get a bit string without unused bits
 */
int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
                             size_t *len )
{
    59ba:	b538      	push	{r3, r4, r5, lr}
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;

    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
    59bc:	2303      	movs	r3, #3
{
    59be:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
    59c0:	f7ff ffe7 	bl	5992 <mbedtls_asn1_get_tag>
    59c4:	b918      	cbnz	r0, 59ce <mbedtls_asn1_get_bitstring_null+0x14>
        return( ret );

    if( *len == 0 )
    59c6:	6813      	ldr	r3, [r2, #0]
    59c8:	b913      	cbnz	r3, 59d0 <mbedtls_asn1_get_bitstring_null+0x16>
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
    59ca:	f06f 0067 	mvn.w	r0, #103	; 0x67
    if( **p != 0 )
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
    ++( *p );

    return( 0 );
}
    59ce:	bd38      	pop	{r3, r4, r5, pc}
    --( *len );
    59d0:	3b01      	subs	r3, #1
    59d2:	6013      	str	r3, [r2, #0]
    if( **p != 0 )
    59d4:	6823      	ldr	r3, [r4, #0]
    59d6:	781a      	ldrb	r2, [r3, #0]
    59d8:	2a00      	cmp	r2, #0
    59da:	d1f6      	bne.n	59ca <mbedtls_asn1_get_bitstring_null+0x10>
    ++( *p );
    59dc:	3301      	adds	r3, #1
    59de:	6023      	str	r3, [r4, #0]
    return( 0 );
    59e0:	e7f5      	b.n	59ce <mbedtls_asn1_get_bitstring_null+0x14>

000059e2 <mbedtls_asn1_get_alg>:
}

int mbedtls_asn1_get_alg( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
{
    59e2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    59e6:	4690      	mov	r8, r2
    59e8:	461f      	mov	r7, r3
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
    59ea:	aa01      	add	r2, sp, #4
    59ec:	2330      	movs	r3, #48	; 0x30
{
    59ee:	4605      	mov	r5, r0
    59f0:	460e      	mov	r6, r1
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
    59f2:	f7ff ffce 	bl	5992 <mbedtls_asn1_get_tag>
    59f6:	4604      	mov	r4, r0
    59f8:	b9f0      	cbnz	r0, 5a38 <mbedtls_asn1_get_alg+0x56>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( ( end - *p ) < 1 )
    59fa:	682b      	ldr	r3, [r5, #0]
    59fc:	1af6      	subs	r6, r6, r3
    59fe:	2e00      	cmp	r6, #0
    5a00:	dd34      	ble.n	5a6c <mbedtls_asn1_get_alg+0x8a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    alg->tag = **p;
    5a02:	4642      	mov	r2, r8
    5a04:	781b      	ldrb	r3, [r3, #0]
    end = *p + len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
    5a06:	4628      	mov	r0, r5
    alg->tag = **p;
    5a08:	f842 3b04 	str.w	r3, [r2], #4
    end = *p + len;
    5a0c:	682e      	ldr	r6, [r5, #0]
    5a0e:	9b01      	ldr	r3, [sp, #4]
    5a10:	441e      	add	r6, r3
    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
    5a12:	4631      	mov	r1, r6
    5a14:	2306      	movs	r3, #6
    5a16:	f7ff ffbc 	bl	5992 <mbedtls_asn1_get_tag>
    5a1a:	4604      	mov	r4, r0
    5a1c:	b960      	cbnz	r0, 5a38 <mbedtls_asn1_get_alg+0x56>
        return( ret );

    alg->p = *p;
    5a1e:	682b      	ldr	r3, [r5, #0]
    *p += alg->len;
    5a20:	f8d8 2004 	ldr.w	r2, [r8, #4]
    alg->p = *p;
    5a24:	f8c8 3008 	str.w	r3, [r8, #8]
    *p += alg->len;
    5a28:	1899      	adds	r1, r3, r2

    if( *p == end )
    5a2a:	42b1      	cmp	r1, r6
    *p += alg->len;
    5a2c:	6029      	str	r1, [r5, #0]
    if( *p == end )
    5a2e:	d107      	bne.n	5a40 <mbedtls_asn1_get_alg+0x5e>
    {
        mbedtls_platform_zeroize( params, sizeof(mbedtls_asn1_buf) );
    5a30:	210c      	movs	r1, #12
    5a32:	4638      	mov	r0, r7
    5a34:	f7fe f864 	bl	3b00 <mbedtls_platform_zeroize>

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
    5a38:	4620      	mov	r0, r4
    5a3a:	b002      	add	sp, #8
    5a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    params->tag = **p;
    5a40:	5c9b      	ldrb	r3, [r3, r2]
    5a42:	463a      	mov	r2, r7
    5a44:	f842 3b04 	str.w	r3, [r2], #4
    (*p)++;
    5a48:	682b      	ldr	r3, [r5, #0]
    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
    5a4a:	4631      	mov	r1, r6
    (*p)++;
    5a4c:	3301      	adds	r3, #1
    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
    5a4e:	4628      	mov	r0, r5
    (*p)++;
    5a50:	602b      	str	r3, [r5, #0]
    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
    5a52:	f7ff ff52 	bl	58fa <mbedtls_asn1_get_len>
    5a56:	b960      	cbnz	r0, 5a72 <mbedtls_asn1_get_alg+0x90>
    params->p = *p;
    5a58:	682b      	ldr	r3, [r5, #0]
    *p += params->len;
    5a5a:	687a      	ldr	r2, [r7, #4]
    params->p = *p;
    5a5c:	60bb      	str	r3, [r7, #8]
    *p += params->len;
    5a5e:	4413      	add	r3, r2
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    5a60:	42b3      	cmp	r3, r6
    5a62:	bf18      	it	ne
    5a64:	f06f 0465 	mvnne.w	r4, #101	; 0x65
    *p += params->len;
    5a68:	602b      	str	r3, [r5, #0]
    if( *p != end )
    5a6a:	e7e5      	b.n	5a38 <mbedtls_asn1_get_alg+0x56>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    5a6c:	f06f 045f 	mvn.w	r4, #95	; 0x5f
    5a70:	e7e2      	b.n	5a38 <mbedtls_asn1_get_alg+0x56>
    5a72:	4604      	mov	r4, r0
    5a74:	e7e0      	b.n	5a38 <mbedtls_asn1_get_alg+0x56>

00005a76 <cc310_sha256_update>:
{
    5a76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if ((uint32_t) data < CONFIG_SRAM_BASE_ADDRESS) {
    5a78:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
{
    5a7c:	4605      	mov	r5, r0
    5a7e:	4614      	mov	r4, r2
    5a80:	af00      	add	r7, sp, #0
    if ((uint32_t) data < CONFIG_SRAM_BASE_ADDRESS) {
    5a82:	d210      	bcs.n	5aa6 <cc310_sha256_update+0x30>
    5a84:	466e      	mov	r6, sp
        uint8_t stack_buffer[data_len];
    5a86:	1dd3      	adds	r3, r2, #7
    5a88:	f023 0307 	bic.w	r3, r3, #7
    5a8c:	ebad 0d03 	sub.w	sp, sp, r3
        memcpy(stack_buffer, data, block_len);
    5a90:	4668      	mov	r0, sp
    5a92:	f000 f993 	bl	5dbc <memcpy>
        nrf_cc310_bl_hash_sha256_update(ctx, stack_buffer, block_len);
    5a96:	4669      	mov	r1, sp
    5a98:	4622      	mov	r2, r4
    5a9a:	4628      	mov	r0, r5
    5a9c:	f7fe fafa 	bl	4094 <nrf_cc310_bl_hash_sha256_update>
    5aa0:	46b5      	mov	sp, r6
};
    5aa2:	46bd      	mov	sp, r7
    5aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        nrf_cc310_bl_hash_sha256_update(ctx, data, data_len);
    5aa6:	f7fe faf5 	bl	4094 <nrf_cc310_bl_hash_sha256_update>
};
    5aaa:	e7fa      	b.n	5aa2 <cc310_sha256_update+0x2c>

00005aac <arch_printk_char_out>:
}
    5aac:	2000      	movs	r0, #0
    5aae:	4770      	bx	lr

00005ab0 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    5ab0:	b40f      	push	{r0, r1, r2, r3}
    5ab2:	b507      	push	{r0, r1, r2, lr}
    5ab4:	a904      	add	r1, sp, #16
    5ab6:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    5aba:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    5abc:	f7fb fb4e 	bl	115c <vprintk>

	va_end(ap);
}
    5ac0:	b003      	add	sp, #12
    5ac2:	f85d eb04 	ldr.w	lr, [sp], #4
    5ac6:	b004      	add	sp, #16
    5ac8:	4770      	bx	lr

00005aca <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    5aca:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    5acc:	f013 0307 	ands.w	r3, r3, #7
    5ad0:	d105      	bne.n	5ade <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    5ad2:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    5ad4:	2b00      	cmp	r3, #0
    5ad6:	bf0c      	ite	eq
    5ad8:	2000      	moveq	r0, #0
    5ada:	2003      	movne	r0, #3
    5adc:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    5ade:	2b02      	cmp	r3, #2
    5ae0:	d105      	bne.n	5aee <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    5ae2:	8b40      	ldrh	r0, [r0, #26]
    5ae4:	fab0 f080 	clz	r0, r0
    5ae8:	0940      	lsrs	r0, r0, #5
    5aea:	0080      	lsls	r0, r0, #2
    5aec:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    5aee:	2b01      	cmp	r3, #1
    5af0:	d105      	bne.n	5afe <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    5af2:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    5af4:	2b00      	cmp	r3, #0
    5af6:	bf0c      	ite	eq
    5af8:	2000      	moveq	r0, #0
    5afa:	2005      	movne	r0, #5
    5afc:	4770      	bx	lr
	int evt = EVT_NOP;
    5afe:	2000      	movs	r0, #0
}
    5b00:	4770      	bx	lr

00005b02 <validate_args>:
{
    5b02:	b510      	push	{r4, lr}
    5b04:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    5b06:	b100      	cbz	r0, 5b0a <validate_args+0x8>
    5b08:	b911      	cbnz	r1, 5b10 <validate_args+0xe>
		return -EINVAL;
    5b0a:	f06f 0015 	mvn.w	r0, #21
}
    5b0e:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    5b10:	1d08      	adds	r0, r1, #4
    5b12:	f000 f896 	bl	5c42 <sys_notify_validate>
	if ((rv == 0)
    5b16:	2800      	cmp	r0, #0
    5b18:	d1f9      	bne.n	5b0e <validate_args+0xc>
	    && ((cli->notify.flags
    5b1a:	68a3      	ldr	r3, [r4, #8]
    5b1c:	2b03      	cmp	r3, #3
    5b1e:	d9f6      	bls.n	5b0e <validate_args+0xc>
    5b20:	e7f3      	b.n	5b0a <validate_args+0x8>

00005b22 <notify_one>:
{
    5b22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5b26:	460d      	mov	r5, r1
    5b28:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    5b2a:	4619      	mov	r1, r3
    5b2c:	1d28      	adds	r0, r5, #4
{
    5b2e:	4690      	mov	r8, r2
    5b30:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    5b32:	f000 f897 	bl	5c64 <sys_notify_finalize>
	if (cb) {
    5b36:	4604      	mov	r4, r0
    5b38:	b138      	cbz	r0, 5b4a <notify_one+0x28>
		cb(mgr, cli, state, res);
    5b3a:	4633      	mov	r3, r6
    5b3c:	4642      	mov	r2, r8
    5b3e:	4629      	mov	r1, r5
    5b40:	4638      	mov	r0, r7
    5b42:	46a4      	mov	ip, r4
}
    5b44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    5b48:	4760      	bx	ip
}
    5b4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005b4e <transition_complete>:
{
    5b4e:	b410      	push	{r4}
	__asm__ volatile(
    5b50:	f04f 0420 	mov.w	r4, #32
    5b54:	f3ef 8211 	mrs	r2, BASEPRI
    5b58:	f384 8812 	msr	BASEPRI_MAX, r4
    5b5c:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    5b60:	6141      	str	r1, [r0, #20]
}
    5b62:	f85d 4b04 	ldr.w	r4, [sp], #4
	process_event(mgr, EVT_COMPLETE, key);
    5b66:	2101      	movs	r1, #1
    5b68:	f7fb bb06 	b.w	1178 <process_event>

00005b6c <onoff_manager_init>:
{
    5b6c:	b538      	push	{r3, r4, r5, lr}
    5b6e:	460c      	mov	r4, r1
	if ((mgr == NULL)
    5b70:	4605      	mov	r5, r0
    5b72:	b158      	cbz	r0, 5b8c <onoff_manager_init+0x20>
	    || (transitions == NULL)
    5b74:	b151      	cbz	r1, 5b8c <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    5b76:	680b      	ldr	r3, [r1, #0]
    5b78:	b143      	cbz	r3, 5b8c <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    5b7a:	684b      	ldr	r3, [r1, #4]
    5b7c:	b133      	cbz	r3, 5b8c <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    5b7e:	221c      	movs	r2, #28
    5b80:	2100      	movs	r1, #0
    5b82:	f000 f926 	bl	5dd2 <memset>
	return 0;
    5b86:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    5b88:	612c      	str	r4, [r5, #16]
}
    5b8a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    5b8c:	f06f 0015 	mvn.w	r0, #21
    5b90:	e7fb      	b.n	5b8a <onoff_manager_init+0x1e>

00005b92 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    5b92:	b570      	push	{r4, r5, r6, lr}
    5b94:	4605      	mov	r5, r0
    5b96:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    5b98:	f7ff ffb3 	bl	5b02 <validate_args>

	if (rv < 0) {
    5b9c:	1e04      	subs	r4, r0, #0
    5b9e:	db15      	blt.n	5bcc <onoff_request+0x3a>
    5ba0:	f04f 0320 	mov.w	r3, #32
    5ba4:	f3ef 8211 	mrs	r2, BASEPRI
    5ba8:	f383 8812 	msr	BASEPRI_MAX, r3
    5bac:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    5bb0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5bb4:	8b6b      	ldrh	r3, [r5, #26]
    5bb6:	8b2c      	ldrh	r4, [r5, #24]
    5bb8:	428b      	cmp	r3, r1
    5bba:	f004 0407 	and.w	r4, r4, #7
    5bbe:	d107      	bne.n	5bd0 <onoff_request+0x3e>
	__asm__ volatile(
    5bc0:	f382 8811 	msr	BASEPRI, r2
    5bc4:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    5bc8:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    5bcc:	4620      	mov	r0, r4
    5bce:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    5bd0:	2c02      	cmp	r4, #2
    5bd2:	d10c      	bne.n	5bee <onoff_request+0x5c>
		mgr->refs += 1U;
    5bd4:	3301      	adds	r3, #1
    5bd6:	836b      	strh	r3, [r5, #26]
    5bd8:	f382 8811 	msr	BASEPRI, r2
    5bdc:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    5be0:	2300      	movs	r3, #0
    5be2:	4622      	mov	r2, r4
    5be4:	4631      	mov	r1, r6
    5be6:	4628      	mov	r0, r5
    5be8:	f7ff ff9b 	bl	5b22 <notify_one>
    5bec:	e7ee      	b.n	5bcc <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    5bee:	2c06      	cmp	r4, #6
    5bf0:	d814      	bhi.n	5c1c <onoff_request+0x8a>
    5bf2:	e8df f004 	tbb	[pc, r4]
    5bf6:	1304      	.short	0x1304
    5bf8:	1a041313 	.word	0x1a041313
    5bfc:	04          	.byte	0x04
    5bfd:	00          	.byte	0x00
	parent->next = child;
    5bfe:	2300      	movs	r3, #0
    5c00:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    5c02:	686b      	ldr	r3, [r5, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    5c04:	b93b      	cbnz	r3, 5c16 <onoff_request+0x84>
	list->head = node;
    5c06:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    5c0a:	b9ac      	cbnz	r4, 5c38 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    5c0c:	2102      	movs	r1, #2
    5c0e:	4628      	mov	r0, r5
    5c10:	f7fb fab2 	bl	1178 <process_event>
    5c14:	e7da      	b.n	5bcc <onoff_request+0x3a>
	parent->next = child;
    5c16:	601e      	str	r6, [r3, #0]
	list->tail = node;
    5c18:	606e      	str	r6, [r5, #4]
}
    5c1a:	e7f6      	b.n	5c0a <onoff_request+0x78>
    5c1c:	f382 8811 	msr	BASEPRI, r2
    5c20:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    5c24:	f06f 0404 	mvn.w	r4, #4
    5c28:	e7d0      	b.n	5bcc <onoff_request+0x3a>
    5c2a:	f382 8811 	msr	BASEPRI, r2
    5c2e:	f3bf 8f6f 	isb	sy
    5c32:	f06f 0485 	mvn.w	r4, #133	; 0x85
    5c36:	e7c9      	b.n	5bcc <onoff_request+0x3a>
    5c38:	f382 8811 	msr	BASEPRI, r2
    5c3c:	f3bf 8f6f 	isb	sy
		if (notify) {
    5c40:	e7c4      	b.n	5bcc <onoff_request+0x3a>

00005c42 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    5c42:	4603      	mov	r3, r0
    5c44:	b158      	cbz	r0, 5c5e <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    5c46:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    5c48:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    5c4c:	2a01      	cmp	r2, #1
    5c4e:	d003      	beq.n	5c58 <sys_notify_validate+0x16>
    5c50:	2a03      	cmp	r2, #3
    5c52:	d104      	bne.n	5c5e <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    5c54:	6802      	ldr	r2, [r0, #0]
    5c56:	b112      	cbz	r2, 5c5e <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    5c58:	2000      	movs	r0, #0
    5c5a:	6098      	str	r0, [r3, #8]
    5c5c:	4770      	bx	lr
    5c5e:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    5c62:	4770      	bx	lr

00005c64 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    5c64:	6842      	ldr	r2, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    5c66:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
    5c68:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    5c6c:	2a03      	cmp	r2, #3
    5c6e:	f04f 0200 	mov.w	r2, #0
	notify->result = res;
    5c72:	6081      	str	r1, [r0, #8]
	sys_notify_generic_callback rv = NULL;
    5c74:	bf14      	ite	ne
    5c76:	4610      	movne	r0, r2
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    5c78:	6800      	ldreq	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    5c7a:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    5c7c:	4770      	bx	lr

00005c7e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    5c7e:	4770      	bx	lr

00005c80 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
    5c80:	4770      	bx	lr

00005c82 <flash_area_read>:


static inline bool is_in_flash_area_bounds(const struct flash_area *fa,
					   off_t off, size_t len)
{
	return (off >= 0) && ((off + len) <= fa->fa_size);
    5c82:	2900      	cmp	r1, #0

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
    5c84:	b430      	push	{r4, r5}
    5c86:	4604      	mov	r4, r0
    5c88:	4618      	mov	r0, r3
    5c8a:	db0b      	blt.n	5ca4 <flash_area_read+0x22>
    5c8c:	68a5      	ldr	r5, [r4, #8]
    5c8e:	4408      	add	r0, r1
    5c90:	42a8      	cmp	r0, r5
    5c92:	d807      	bhi.n	5ca4 <flash_area_read+0x22>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_read(fa->fa_dev, fa->fa_off + off, dst, len);
    5c94:	68e0      	ldr	r0, [r4, #12]
    5c96:	6864      	ldr	r4, [r4, #4]
    5c98:	4421      	add	r1, r4
				    size_t len)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->read(dev, offset, data, len);
    5c9a:	6884      	ldr	r4, [r0, #8]
    5c9c:	6824      	ldr	r4, [r4, #0]
    5c9e:	46a4      	mov	ip, r4
}
    5ca0:	bc30      	pop	{r4, r5}
    5ca2:	4760      	bx	ip
    5ca4:	f06f 0015 	mvn.w	r0, #21
    5ca8:	bc30      	pop	{r4, r5}
    5caa:	4770      	bx	lr

00005cac <flash_area_write>:
    5cac:	2900      	cmp	r1, #0

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
    5cae:	b430      	push	{r4, r5}
    5cb0:	4604      	mov	r4, r0
    5cb2:	4618      	mov	r0, r3
    5cb4:	db0b      	blt.n	5cce <flash_area_write+0x22>
    5cb6:	68a5      	ldr	r5, [r4, #8]
    5cb8:	4408      	add	r0, r1
    5cba:	42a8      	cmp	r0, r5
    5cbc:	d807      	bhi.n	5cce <flash_area_write+0x22>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_write(fa->fa_dev, fa->fa_off + off, (void *)src, len);
    5cbe:	68e0      	ldr	r0, [r4, #12]
    5cc0:	6864      	ldr	r4, [r4, #4]
    5cc2:	4421      	add	r1, r4
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;
	int rc;

	rc = api->write(dev, offset, data, len);
    5cc4:	6884      	ldr	r4, [r0, #8]
    5cc6:	6864      	ldr	r4, [r4, #4]
    5cc8:	46a4      	mov	ip, r4
}
    5cca:	bc30      	pop	{r4, r5}
    5ccc:	4760      	bx	ip
    5cce:	f06f 0015 	mvn.w	r0, #21
    5cd2:	bc30      	pop	{r4, r5}
    5cd4:	4770      	bx	lr

00005cd6 <flash_area_erase>:
    5cd6:	2900      	cmp	r1, #0

int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
    5cd8:	4603      	mov	r3, r0
    5cda:	b410      	push	{r4}
    5cdc:	4610      	mov	r0, r2
    5cde:	db0b      	blt.n	5cf8 <flash_area_erase+0x22>
    5ce0:	689c      	ldr	r4, [r3, #8]
    5ce2:	4408      	add	r0, r1
    5ce4:	42a0      	cmp	r0, r4
    5ce6:	d807      	bhi.n	5cf8 <flash_area_erase+0x22>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_erase(fa->fa_dev, fa->fa_off + off, len);
    5ce8:	68d8      	ldr	r0, [r3, #12]
    5cea:	685b      	ldr	r3, [r3, #4]
    5cec:	4419      	add	r1, r3
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;
	int rc;

	rc = api->erase(dev, offset, size);
    5cee:	6883      	ldr	r3, [r0, #8]
}
    5cf0:	f85d 4b04 	ldr.w	r4, [sp], #4
    5cf4:	689b      	ldr	r3, [r3, #8]
    5cf6:	4718      	bx	r3
    5cf8:	f06f 0015 	mvn.w	r0, #21
    5cfc:	f85d 4b04 	ldr.w	r4, [sp], #4
    5d00:	4770      	bx	lr

00005d02 <flash_area_align>:

uint32_t flash_area_align(const struct flash_area *fa)
{
    5d02:	b508      	push	{r3, lr}
	return flash_get_write_block_size(fa->fa_dev);
    5d04:	68c0      	ldr	r0, [r0, #12]
static inline size_t z_impl_flash_get_write_block_size(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev)->write_block_size;
    5d06:	6883      	ldr	r3, [r0, #8]
    5d08:	68db      	ldr	r3, [r3, #12]
    5d0a:	4798      	blx	r3
}
    5d0c:	6800      	ldr	r0, [r0, #0]
    5d0e:	bd08      	pop	{r3, pc}

00005d10 <flash_area_erased_val>:
{
	return fa->fa_dev;
}

uint8_t flash_area_erased_val(const struct flash_area *fa)
{
    5d10:	b508      	push	{r3, lr}
	const struct flash_parameters *param;

	param = flash_get_parameters(fa->fa_dev);
    5d12:	68c0      	ldr	r0, [r0, #12]
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    5d14:	6883      	ldr	r3, [r0, #8]
    5d16:	68db      	ldr	r3, [r3, #12]
    5d18:	4798      	blx	r3

	return param->erase_value;
}
    5d1a:	7900      	ldrb	r0, [r0, #4]
    5d1c:	bd08      	pop	{r3, pc}

00005d1e <get_sectors_cb>:
{
    5d1e:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
    5d20:	684c      	ldr	r4, [r1, #4]
    5d22:	6803      	ldr	r3, [r0, #0]
    5d24:	42a3      	cmp	r3, r4
    5d26:	d201      	bcs.n	5d2c <get_sectors_cb+0xe>
		*bail_value = true;
    5d28:	2001      	movs	r0, #1
}
    5d2a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (info->start_offset >= data->area_off + data->area_len) {
    5d2c:	688a      	ldr	r2, [r1, #8]
    5d2e:	4422      	add	r2, r4
    5d30:	4293      	cmp	r3, r2
    5d32:	d301      	bcc.n	5d38 <get_sectors_cb+0x1a>
		*bail_value = false;
    5d34:	2000      	movs	r0, #0
    5d36:	e7f8      	b.n	5d2a <get_sectors_cb+0xc>
	} else if (data->ret_idx >= data->ret_len) {
    5d38:	694e      	ldr	r6, [r1, #20]
    5d3a:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
    5d3e:	42b5      	cmp	r5, r6
    5d40:	d303      	bcc.n	5d4a <get_sectors_cb+0x2c>
		data->status = -ENOMEM;
    5d42:	f06f 030b 	mvn.w	r3, #11
    5d46:	618b      	str	r3, [r1, #24]
		return true;
    5d48:	e7f4      	b.n	5d34 <get_sectors_cb+0x16>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
    5d4a:	1b1b      	subs	r3, r3, r4
    5d4c:	f842 3035 	str.w	r3, [r2, r5, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
    5d50:	6843      	ldr	r3, [r0, #4]
    5d52:	6908      	ldr	r0, [r1, #16]
    5d54:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
    5d58:	6053      	str	r3, [r2, #4]
	data->ret_idx++;
    5d5a:	690b      	ldr	r3, [r1, #16]
    5d5c:	3301      	adds	r3, #1
    5d5e:	610b      	str	r3, [r1, #16]
	return true;
    5d60:	e7e2      	b.n	5d28 <get_sectors_cb+0xa>

00005d62 <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
    5d62:	2000      	movs	r0, #0
{
    5d64:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    5d66:	f7fb fd35 	bl	17d4 <sys_reboot>

00005d6a <nrf_cc3xx_platform_mutex_init>:
/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
	// No thread-safe mutexes are required
}
    5d6a:	4770      	bx	lr

00005d6c <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    5d6c:	f000 bbff 	b.w	656e <z_fatal_error>

00005d70 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    5d70:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    5d72:	6800      	ldr	r0, [r0, #0]
    5d74:	f000 bbfb 	b.w	656e <z_fatal_error>

00005d78 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    5d78:	2100      	movs	r1, #0
    5d7a:	2001      	movs	r0, #1
    5d7c:	f7ff bff6 	b.w	5d6c <z_arm_fatal_error>

00005d80 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    5d80:	b508      	push	{r3, lr}
	handler();
    5d82:	f7fb fe23 	bl	19cc <z_SysNmiOnReset>
	z_arm_int_exit();
}
    5d86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    5d8a:	f7fb be95 	b.w	1ab8 <z_arm_exc_exit>

00005d8e <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    5d8e:	4603      	mov	r3, r0
	size_t n = 0;
    5d90:	2000      	movs	r0, #0

	while (*s != '\0') {
    5d92:	5c1a      	ldrb	r2, [r3, r0]
    5d94:	b902      	cbnz	r2, 5d98 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    5d96:	4770      	bx	lr
		n++;
    5d98:	3001      	adds	r0, #1
    5d9a:	e7fa      	b.n	5d92 <strlen+0x4>

00005d9c <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    5d9c:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    5d9e:	b15a      	cbz	r2, 5db8 <memcmp+0x1c>
    5da0:	3901      	subs	r1, #1
    5da2:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    5da4:	f810 2b01 	ldrb.w	r2, [r0], #1
    5da8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    5dac:	42a0      	cmp	r0, r4
    5dae:	d001      	beq.n	5db4 <memcmp+0x18>
    5db0:	429a      	cmp	r2, r3
    5db2:	d0f7      	beq.n	5da4 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    5db4:	1ad0      	subs	r0, r2, r3
}
    5db6:	bd10      	pop	{r4, pc}
		return 0;
    5db8:	4610      	mov	r0, r2
    5dba:	e7fc      	b.n	5db6 <memcmp+0x1a>

00005dbc <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    5dbc:	b510      	push	{r4, lr}
    5dbe:	1e43      	subs	r3, r0, #1
    5dc0:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    5dc2:	4291      	cmp	r1, r2
    5dc4:	d100      	bne.n	5dc8 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    5dc6:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    5dc8:	f811 4b01 	ldrb.w	r4, [r1], #1
    5dcc:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    5dd0:	e7f7      	b.n	5dc2 <memcpy+0x6>

00005dd2 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    5dd2:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
    5dd4:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    5dd6:	4402      	add	r2, r0
    5dd8:	4293      	cmp	r3, r2
    5dda:	d100      	bne.n	5dde <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    5ddc:	4770      	bx	lr
		*(d_byte++) = c_byte;
    5dde:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    5de2:	e7f9      	b.n	5dd8 <memset+0x6>

00005de4 <_stdout_hook_default>:
}
    5de4:	f04f 30ff 	mov.w	r0, #4294967295
    5de8:	4770      	bx	lr

00005dea <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    5dea:	220c      	movs	r2, #12
    5dec:	6903      	ldr	r3, [r0, #16]
    5dee:	b2c9      	uxtb	r1, r1
    5df0:	fb01 3302 	mla	r3, r1, r2, r3
    5df4:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    5df6:	f000 0007 	and.w	r0, r0, #7
    5dfa:	4770      	bx	lr

00005dfc <set_on_state>:
	__asm__ volatile(
    5dfc:	f04f 0320 	mov.w	r3, #32
    5e00:	f3ef 8211 	mrs	r2, BASEPRI
    5e04:	f383 8812 	msr	BASEPRI_MAX, r3
    5e08:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    5e0c:	6803      	ldr	r3, [r0, #0]
    5e0e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    5e12:	f043 0302 	orr.w	r3, r3, #2
    5e16:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    5e18:	f382 8811 	msr	BASEPRI, r2
    5e1c:	f3bf 8f6f 	isb	sy
}
    5e20:	4770      	bx	lr

00005e22 <stop>:
{
    5e22:	b570      	push	{r4, r5, r6, lr}
    5e24:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
    5e26:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
    5e28:	f04f 0420 	mov.w	r4, #32
    5e2c:	f3ef 8511 	mrs	r5, BASEPRI
    5e30:	f384 8812 	msr	BASEPRI_MAX, r4
    5e34:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    5e38:	260c      	movs	r6, #12
    5e3a:	fb06 3401 	mla	r4, r6, r1, r3
    5e3e:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    5e40:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    5e44:	d008      	beq.n	5e58 <stop+0x36>
    5e46:	42a2      	cmp	r2, r4
    5e48:	d006      	beq.n	5e58 <stop+0x36>
	__asm__ volatile(
    5e4a:	f385 8811 	msr	BASEPRI, r5
    5e4e:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    5e52:	f04f 30ff 	mov.w	r0, #4294967295
}
    5e56:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    5e58:	2201      	movs	r2, #1
    5e5a:	4371      	muls	r1, r6
    5e5c:	440b      	add	r3, r1
    5e5e:	641a      	str	r2, [r3, #64]	; 0x40
    5e60:	f385 8811 	msr	BASEPRI, r5
    5e64:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    5e68:	6843      	ldr	r3, [r0, #4]
    5e6a:	440b      	add	r3, r1
    5e6c:	685b      	ldr	r3, [r3, #4]
    5e6e:	4798      	blx	r3
	return 0;
    5e70:	2000      	movs	r0, #0
    5e72:	e7f0      	b.n	5e56 <stop+0x34>

00005e74 <api_stop>:
	return stop(dev, subsys, CTX_API);
    5e74:	2280      	movs	r2, #128	; 0x80
    5e76:	f7ff bfd4 	b.w	5e22 <stop>

00005e7a <async_start>:
{
    5e7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5e7c:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    5e7e:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    5e80:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    5e82:	f04f 0520 	mov.w	r5, #32
    5e86:	f3ef 8611 	mrs	r6, BASEPRI
    5e8a:	f385 8812 	msr	BASEPRI_MAX, r5
    5e8e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    5e92:	250c      	movs	r5, #12
    5e94:	4369      	muls	r1, r5
    5e96:	440c      	add	r4, r1
    5e98:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    5e9a:	f005 0c07 	and.w	ip, r5, #7
    5e9e:	f1bc 0f01 	cmp.w	ip, #1
    5ea2:	d10b      	bne.n	5ebc <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    5ea4:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
    5ea6:	f386 8811 	msr	BASEPRI, r6
    5eaa:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    5eae:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    5eb2:	6843      	ldr	r3, [r0, #4]
    5eb4:	585b      	ldr	r3, [r3, r1]
    5eb6:	4798      	blx	r3
	return 0;
    5eb8:	2000      	movs	r0, #0
}
    5eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    5ebc:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    5ec0:	42af      	cmp	r7, r5
    5ec2:	f386 8811 	msr	BASEPRI, r6
    5ec6:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    5eca:	bf0c      	ite	eq
    5ecc:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    5ed0:	f04f 30ff 	movne.w	r0, #4294967295
    5ed4:	e7f1      	b.n	5eba <async_start+0x40>

00005ed6 <api_start>:
{
    5ed6:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    5ed8:	2480      	movs	r4, #128	; 0x80
    5eda:	9400      	str	r4, [sp, #0]
    5edc:	f7ff ffcd 	bl	5e7a <async_start>
}
    5ee0:	b002      	add	sp, #8
    5ee2:	bd10      	pop	{r4, pc}

00005ee4 <api_blocking_start>:
}
    5ee4:	f06f 0085 	mvn.w	r0, #133	; 0x85
    5ee8:	4770      	bx	lr

00005eea <onoff_started_callback>:
{
    5eea:	b410      	push	{r4}
	notify(mgr, 0);
    5eec:	241c      	movs	r4, #28
	return &data->mgr[type];
    5eee:	6900      	ldr	r0, [r0, #16]
    5ef0:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    5ef2:	fb03 0004 	mla	r0, r3, r4, r0
    5ef6:	2100      	movs	r1, #0
}
    5ef8:	f85d 4b04 	ldr.w	r4, [sp], #4
	notify(mgr, 0);
    5efc:	4710      	bx	r2

00005efe <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    5efe:	2000      	movs	r0, #0
    5f00:	f000 bade 	b.w	64c0 <nrfx_clock_start>

00005f04 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    5f04:	2000      	movs	r0, #0
    5f06:	f000 bb1b 	b.w	6540 <nrfx_clock_stop>

00005f0a <is_regular_addr_valid>:
{
    5f0a:	b538      	push	{r3, r4, r5, lr}
    5f0c:	4605      	mov	r5, r0
    5f0e:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
    5f10:	f000 fb18 	bl	6544 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
    5f14:	2d00      	cmp	r5, #0
    5f16:	db07      	blt.n	5f28 <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
    5f18:	42a8      	cmp	r0, r5
    5f1a:	d905      	bls.n	5f28 <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
    5f1c:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
    5f1e:	4284      	cmp	r4, r0
    5f20:	bf8c      	ite	hi
    5f22:	2000      	movhi	r0, #0
    5f24:	2001      	movls	r0, #1
}
    5f26:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
    5f28:	2000      	movs	r0, #0
    5f2a:	e7fc      	b.n	5f26 <is_regular_addr_valid+0x1c>

00005f2c <flash_nrf_erase>:
{
    5f2c:	b570      	push	{r4, r5, r6, lr}
    5f2e:	460c      	mov	r4, r1
    5f30:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    5f32:	f000 fb0a 	bl	654a <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
    5f36:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    5f38:	4606      	mov	r6, r0
	if (is_regular_addr_valid(addr, size)) {
    5f3a:	4620      	mov	r0, r4
    5f3c:	f7ff ffe5 	bl	5f0a <is_regular_addr_valid>
    5f40:	b1b8      	cbz	r0, 5f72 <flash_nrf_erase+0x46>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    5f42:	fbb4 f3f6 	udiv	r3, r4, r6
    5f46:	fb06 4313 	mls	r3, r6, r3, r4
    5f4a:	b993      	cbnz	r3, 5f72 <flash_nrf_erase+0x46>
    5f4c:	fbb5 f3f6 	udiv	r3, r5, r6
    5f50:	fb06 5313 	mls	r3, r6, r3, r5
    5f54:	b96b      	cbnz	r3, 5f72 <flash_nrf_erase+0x46>
		if (!n_pages) {
    5f56:	42ae      	cmp	r6, r5
    5f58:	d901      	bls.n	5f5e <flash_nrf_erase+0x32>
			return 0;
    5f5a:	2000      	movs	r0, #0
}
    5f5c:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    5f5e:	f000 faf4 	bl	654a <nrfx_nvmc_flash_page_size_get>
    5f62:	4606      	mov	r6, r0
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
    5f64:	4620      	mov	r0, r4
    5f66:	f7fd fbff 	bl	3768 <nrfx_nvmc_page_erase>
	} while (e_ctx->len > 0);
    5f6a:	1bad      	subs	r5, r5, r6
    5f6c:	4434      	add	r4, r6
    5f6e:	d1f9      	bne.n	5f64 <flash_nrf_erase+0x38>
    5f70:	e7f3      	b.n	5f5a <flash_nrf_erase+0x2e>
			return -EINVAL;
    5f72:	f06f 0015 	mvn.w	r0, #21
    5f76:	e7f1      	b.n	5f5c <flash_nrf_erase+0x30>

00005f78 <flash_nrf_read>:
{
    5f78:	b570      	push	{r4, r5, r6, lr}
    5f7a:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
    5f7c:	4619      	mov	r1, r3
    5f7e:	4628      	mov	r0, r5
{
    5f80:	4616      	mov	r6, r2
    5f82:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    5f84:	f7ff ffc1 	bl	5f0a <is_regular_addr_valid>
    5f88:	b138      	cbz	r0, 5f9a <flash_nrf_read+0x22>
	if (!len) {
    5f8a:	b124      	cbz	r4, 5f96 <flash_nrf_read+0x1e>
	memcpy(data, (void *)addr, len);
    5f8c:	4622      	mov	r2, r4
    5f8e:	4629      	mov	r1, r5
    5f90:	4630      	mov	r0, r6
    5f92:	f7ff ff13 	bl	5dbc <memcpy>
		return 0;
    5f96:	2000      	movs	r0, #0
}
    5f98:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    5f9a:	f06f 0015 	mvn.w	r0, #21
    5f9e:	e7fb      	b.n	5f98 <flash_nrf_read+0x20>

00005fa0 <flash_get_page_info>:

#include <zephyr/drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
    5fa0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5fa4:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
    5fa6:	2300      	movs	r3, #0
{
    5fa8:	4690      	mov	r8, r2
	const struct flash_driver_api *api = dev->api;
    5faa:	6882      	ldr	r2, [r0, #8]
	info->start_offset = 0;
    5fac:	6023      	str	r3, [r4, #0]
	info->index = 0U;
    5fae:	60a3      	str	r3, [r4, #8]
{
    5fb0:	460d      	mov	r5, r1

	api->page_layout(dev, &layout, &layout_size);
    5fb2:	6913      	ldr	r3, [r2, #16]
    5fb4:	4669      	mov	r1, sp
    5fb6:	aa01      	add	r2, sp, #4
    5fb8:	4798      	blx	r3

	while (layout_size--) {
    5fba:	9b01      	ldr	r3, [sp, #4]
    5fbc:	1e5a      	subs	r2, r3, #1
    5fbe:	9201      	str	r2, [sp, #4]
    5fc0:	b923      	cbnz	r3, 5fcc <flash_get_page_info+0x2c>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
    5fc2:	f06f 0015 	mvn.w	r0, #21
}
    5fc6:	b002      	add	sp, #8
    5fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info->size = layout->pages_size;
    5fcc:	9800      	ldr	r0, [sp, #0]
			index_jmp = index - info->index;
    5fce:	68a2      	ldr	r2, [r4, #8]
		info->size = layout->pages_size;
    5fd0:	6847      	ldr	r7, [r0, #4]
			index_jmp = (offs - info->start_offset) / info->size;
    5fd2:	6821      	ldr	r1, [r4, #0]
		info->size = layout->pages_size;
    5fd4:	6067      	str	r7, [r4, #4]
		if (offs == 0) {
    5fd6:	b985      	cbnz	r5, 5ffa <flash_get_page_info+0x5a>
			index_jmp = index - info->index;
    5fd8:	eba8 0302 	sub.w	r3, r8, r2
		index_jmp = MIN(index_jmp, layout->pages_count);
    5fdc:	6806      	ldr	r6, [r0, #0]
    5fde:	42b3      	cmp	r3, r6
    5fe0:	bf28      	it	cs
    5fe2:	4633      	movcs	r3, r6
		info->start_offset += (index_jmp * info->size);
    5fe4:	fb03 1107 	mla	r1, r3, r7, r1
		info->index += index_jmp;
    5fe8:	441a      	add	r2, r3
		info->start_offset += (index_jmp * info->size);
    5fea:	6021      	str	r1, [r4, #0]
		info->index += index_jmp;
    5fec:	60a2      	str	r2, [r4, #8]
		if (index_jmp < layout->pages_count) {
    5fee:	6802      	ldr	r2, [r0, #0]
    5ff0:	429a      	cmp	r2, r3
    5ff2:	d806      	bhi.n	6002 <flash_get_page_info+0x62>
		layout++;
    5ff4:	3008      	adds	r0, #8
    5ff6:	9000      	str	r0, [sp, #0]
    5ff8:	e7df      	b.n	5fba <flash_get_page_info+0x1a>
			index_jmp = (offs - info->start_offset) / info->size;
    5ffa:	1a6b      	subs	r3, r5, r1
    5ffc:	fbb3 f3f7 	udiv	r3, r3, r7
    6000:	e7ec      	b.n	5fdc <flash_get_page_info+0x3c>
			return 0;
    6002:	2000      	movs	r0, #0
    6004:	e7df      	b.n	5fc6 <flash_get_page_info+0x26>

00006006 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
    6006:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
    6008:	2200      	movs	r2, #0
    600a:	f7ff bfc9 	b.w	5fa0 <flash_get_page_info>

0000600e <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
    600e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;
    6012:	2400      	movs	r4, #0

	api->page_layout(dev, &layout, &num_blocks);
    6014:	6883      	ldr	r3, [r0, #8]
{
    6016:	b086      	sub	sp, #24
    6018:	4688      	mov	r8, r1
    601a:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
    601c:	691b      	ldr	r3, [r3, #16]
    601e:	aa02      	add	r2, sp, #8
    6020:	a901      	add	r1, sp, #4
    6022:	4798      	blx	r3
	size_t block, num_blocks, page = 0, i;
    6024:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
    6026:	4625      	mov	r5, r4
    6028:	9b02      	ldr	r3, [sp, #8]
    602a:	42ab      	cmp	r3, r5
    602c:	d802      	bhi.n	6034 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
    602e:	b006      	add	sp, #24
    6030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < l->pages_count; i++) {
    6034:	2600      	movs	r6, #0
		const struct flash_pages_layout *l = &layout[block];
    6036:	9f01      	ldr	r7, [sp, #4]
    6038:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		page_info.size = l->pages_size;
    603c:	687b      	ldr	r3, [r7, #4]
    603e:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    6040:	683a      	ldr	r2, [r7, #0]
    6042:	eb0a 0306 	add.w	r3, sl, r6
    6046:	42b2      	cmp	r2, r6
    6048:	d802      	bhi.n	6050 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
    604a:	469a      	mov	sl, r3
    604c:	3501      	adds	r5, #1
    604e:	e7eb      	b.n	6028 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
    6050:	4649      	mov	r1, r9
			page_info.start_offset = off;
    6052:	9403      	str	r4, [sp, #12]
			page_info.index = page;
    6054:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
    6056:	a803      	add	r0, sp, #12
    6058:	47c0      	blx	r8
    605a:	2800      	cmp	r0, #0
    605c:	d0e7      	beq.n	602e <flash_page_foreach+0x20>
			off += page_info.size;
    605e:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    6060:	3601      	adds	r6, #1
			off += page_info.size;
    6062:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
    6064:	e7ec      	b.n	6040 <flash_page_foreach+0x32>

00006066 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6066:	6843      	ldr	r3, [r0, #4]
}
    6068:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    606a:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    606c:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    606e:	600b      	str	r3, [r1, #0]
}
    6070:	4770      	bx	lr

00006072 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6072:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
    6074:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6078:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
    607a:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    607e:	6098      	str	r0, [r3, #8]
}
    6080:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    6082:	60d9      	str	r1, [r3, #12]
    6084:	4770      	bx	lr

00006086 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6086:	6843      	ldr	r3, [r0, #4]
}
    6088:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    608a:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    608c:	6099      	str	r1, [r3, #8]
}
    608e:	4770      	bx	lr

00006090 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6090:	6843      	ldr	r3, [r0, #4]
}
    6092:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6094:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    6096:	60d9      	str	r1, [r3, #12]
}
    6098:	4770      	bx	lr

0000609a <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    609a:	6843      	ldr	r3, [r0, #4]
    609c:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    609e:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
    60a0:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    60a4:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    60a6:	6090      	str	r0, [r2, #8]
}
    60a8:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    60aa:	60d3      	str	r3, [r2, #12]
    60ac:	4770      	bx	lr

000060ae <gpio_nrfx_manage_callback>:
{
    60ae:	b510      	push	{r4, lr}
	return port->data;
    60b0:	6903      	ldr	r3, [r0, #16]
	return list->head;
    60b2:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    60b4:	b1f8      	cbz	r0, 60f6 <gpio_nrfx_manage_callback+0x48>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    60b6:	4288      	cmp	r0, r1
    60b8:	d119      	bne.n	60ee <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
    60ba:	689c      	ldr	r4, [r3, #8]
	return node->next;
    60bc:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    60be:	42a1      	cmp	r1, r4
	list->head = node;
    60c0:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    60c2:	d100      	bne.n	60c6 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    60c4:	6098      	str	r0, [r3, #8]
	parent->next = child;
    60c6:	2000      	movs	r0, #0
    60c8:	6008      	str	r0, [r1, #0]
	if (set) {
    60ca:	b12a      	cbz	r2, 60d8 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
    60cc:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    60ce:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    60d0:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    60d2:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    60d4:	b902      	cbnz	r2, 60d8 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
    60d6:	6099      	str	r1, [r3, #8]
	return 0;
    60d8:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    60da:	e010      	b.n	60fe <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    60dc:	4281      	cmp	r1, r0
    60de:	d106      	bne.n	60ee <gpio_nrfx_manage_callback+0x40>
	return node->next;
    60e0:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    60e2:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    60e4:	6898      	ldr	r0, [r3, #8]
    60e6:	4281      	cmp	r1, r0
    60e8:	d1ed      	bne.n	60c6 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    60ea:	609c      	str	r4, [r3, #8]
}
    60ec:	e7eb      	b.n	60c6 <gpio_nrfx_manage_callback+0x18>
	return node->next;
    60ee:	4604      	mov	r4, r0
    60f0:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    60f2:	2800      	cmp	r0, #0
    60f4:	d1f2      	bne.n	60dc <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
    60f6:	2a00      	cmp	r2, #0
    60f8:	d1e8      	bne.n	60cc <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
    60fa:	f06f 0015 	mvn.w	r0, #21
}
    60fe:	bd10      	pop	{r4, pc}

00006100 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    6100:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    6102:	6843      	ldr	r3, [r0, #4]
    6104:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    6106:	7a05      	ldrb	r5, [r0, #8]
    6108:	6844      	ldr	r4, [r0, #4]
    610a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    610e:	42a3      	cmp	r3, r4
    6110:	d302      	bcc.n	6118 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
    6112:	f06f 0001 	mvn.w	r0, #1
}
    6116:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    6118:	795c      	ldrb	r4, [r3, #5]
    611a:	428c      	cmp	r4, r1
    611c:	d001      	beq.n	6122 <pinctrl_lookup_state+0x22>
		(*state)++;
    611e:	3308      	adds	r3, #8
    6120:	e7f0      	b.n	6104 <pinctrl_lookup_state+0x4>
			return 0;
    6122:	2000      	movs	r0, #0
    6124:	e7f7      	b.n	6116 <pinctrl_lookup_state+0x16>

00006126 <uarte_nrfx_config_get>:
{
    6126:	460b      	mov	r3, r1
	struct uarte_nrfx_data *data = dev->data;
    6128:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
    612a:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    612e:	e883 0003 	stmia.w	r3, {r0, r1}
}
    6132:	2000      	movs	r0, #0
    6134:	4770      	bx	lr

00006136 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    6136:	6843      	ldr	r3, [r0, #4]
    6138:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    613a:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    613e:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    6142:	4770      	bx	lr

00006144 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    6144:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    6146:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    6148:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    614a:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    614e:	b150      	cbz	r0, 6166 <uarte_nrfx_poll_in+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6150:	2000      	movs	r0, #0
	*c = *data->rx_data;
    6152:	6952      	ldr	r2, [r2, #20]
    6154:	7812      	ldrb	r2, [r2, #0]
    6156:	700a      	strb	r2, [r1, #0]
    6158:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    615c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6160:	2201      	movs	r2, #1
    6162:	601a      	str	r2, [r3, #0]
	return 0;
    6164:	4770      	bx	lr
		return -1;
    6166:	f04f 30ff 	mov.w	r0, #4294967295
}
    616a:	4770      	bx	lr

0000616c <is_tx_ready.isra.0>:
	return config->uarte_regs;
    616c:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    616e:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6170:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    6174:	b940      	cbnz	r0, 6188 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    6176:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    6178:	079b      	lsls	r3, r3, #30
    617a:	d406      	bmi.n	618a <is_tx_ready.isra.0+0x1e>
    617c:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    6180:	3800      	subs	r0, #0
    6182:	bf18      	it	ne
    6184:	2001      	movne	r0, #1
    6186:	4770      	bx	lr
    6188:	2001      	movs	r0, #1
}
    618a:	4770      	bx	lr

0000618c <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    618c:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    618e:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    6190:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    6194:	05c9      	lsls	r1, r1, #23
    6196:	d518      	bpl.n	61ca <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6198:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    619c:	b1a9      	cbz	r1, 61ca <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    619e:	f04f 0020 	mov.w	r0, #32
    61a2:	f3ef 8111 	mrs	r1, BASEPRI
    61a6:	f380 8812 	msr	BASEPRI_MAX, r0
    61aa:	f3bf 8f6f 	isb	sy
    61ae:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    61b2:	b130      	cbz	r0, 61c2 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    61b4:	2000      	movs	r0, #0
    61b6:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    61ba:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    61be:	2001      	movs	r0, #1
    61c0:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
    61c2:	f381 8811 	msr	BASEPRI, r1
    61c6:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    61ca:	6852      	ldr	r2, [r2, #4]
    61cc:	06d2      	lsls	r2, r2, #27
    61ce:	d515      	bpl.n	61fc <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
    61d0:	f04f 0120 	mov.w	r1, #32
    61d4:	f3ef 8211 	mrs	r2, BASEPRI
    61d8:	f381 8812 	msr	BASEPRI_MAX, r1
    61dc:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    61e0:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    61e4:	b111      	cbz	r1, 61ec <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    61e6:	2100      	movs	r1, #0
    61e8:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    61ec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    61f0:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    61f4:	f382 8811 	msr	BASEPRI, r2
    61f8:	f3bf 8f6f 	isb	sy
}
    61fc:	4770      	bx	lr

000061fe <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    61fe:	b510      	push	{r4, lr}
    6200:	4604      	mov	r4, r0
    6202:	2200      	movs	r2, #0
    6204:	2101      	movs	r1, #1
    6206:	2009      	movs	r0, #9
    6208:	f7fb fbca 	bl	19a0 <z_arm_irq_priority_set>
    620c:	2009      	movs	r0, #9
    620e:	f7fb fb97 	bl	1940 <arch_irq_enable>
    6212:	4620      	mov	r0, r4
    6214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6218:	f7fc baa0 	b.w	275c <uarte_instance_init.constprop.0>

0000621c <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
    621c:	b510      	push	{r4, lr}
    621e:	4604      	mov	r4, r0
    6220:	2200      	movs	r2, #0
    6222:	2101      	movs	r1, #1
    6224:	2008      	movs	r0, #8
    6226:	f7fb fbbb 	bl	19a0 <z_arm_irq_priority_set>
    622a:	2008      	movs	r0, #8
    622c:	f7fb fb88 	bl	1940 <arch_irq_enable>
    6230:	4620      	mov	r0, r4
    6232:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6236:	f7fc ba91 	b.w	275c <uarte_instance_init.constprop.0>

0000623a <event_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    623a:	2200      	movs	r2, #0
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    623c:	f100 0350 	add.w	r3, r0, #80	; 0x50
    6240:	009b      	lsls	r3, r3, #2
    6242:	b29b      	uxth	r3, r3
    6244:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    6248:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    624c:	601a      	str	r2, [r3, #0]
    624e:	681b      	ldr	r3, [r3, #0]
}
    6250:	4770      	bx	lr

00006252 <k_sys_fatal_error_handler>:

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    6252:	2000      	movs	r0, #0
{
    6254:	b508      	push	{r3, lr}
		sys_arch_reboot(0);
    6256:	f7fb fdaf 	bl	1db8 <sys_arch_reboot>

0000625a <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    625a:	f7fd bc01 	b.w	3a60 <nrf_cc3xx_platform_init_no_rng>

0000625e <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(void)
{
    625e:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    6260:	f7fb fb48 	bl	18f4 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    6264:	f7ff fd81 	bl	5d6a <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal();
	return res;
}
    6268:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    626c:	f7fd bbf8 	b.w	3a60 <nrf_cc3xx_platform_init_no_rng>

00006270 <boot_swap_info_off>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    6270:	6880      	ldr	r0, [r0, #8]
    6272:	3818      	subs	r0, #24
    6274:	f020 0007 	bic.w	r0, r0, #7
}
    6278:	3810      	subs	r0, #16
    627a:	4770      	bx	lr

0000627c <boot_magic_compatible_check>:
    switch (tbl_val) {
    627c:	2804      	cmp	r0, #4
    627e:	d009      	beq.n	6294 <boot_magic_compatible_check+0x18>
    6280:	2805      	cmp	r0, #5
    6282:	d103      	bne.n	628c <boot_magic_compatible_check+0x10>
        return val != BOOT_MAGIC_GOOD;
    6284:	1e48      	subs	r0, r1, #1
    6286:	bf18      	it	ne
    6288:	2001      	movne	r0, #1
    628a:	4770      	bx	lr
        return tbl_val == val;
    628c:	1a43      	subs	r3, r0, r1
    628e:	4258      	negs	r0, r3
    6290:	4158      	adcs	r0, r3
    6292:	4770      	bx	lr
    switch (tbl_val) {
    6294:	2001      	movs	r0, #1
}
    6296:	4770      	bx	lr

00006298 <bootutil_buffer_is_erased>:
{
    6298:	b538      	push	{r3, r4, r5, lr}
    629a:	4615      	mov	r5, r2
    if (buffer == NULL || len == 0) {
    629c:	460c      	mov	r4, r1
    629e:	b161      	cbz	r1, 62ba <bootutil_buffer_is_erased+0x22>
    62a0:	b15a      	cbz	r2, 62ba <bootutil_buffer_is_erased+0x22>
    erased_val = flash_area_erased_val(area);
    62a2:	f7ff fd35 	bl	5d10 <flash_area_erased_val>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
    62a6:	4621      	mov	r1, r4
    62a8:	4425      	add	r5, r4
        if (u8b[i] != erased_val) {
    62aa:	f811 3b01 	ldrb.w	r3, [r1], #1
    62ae:	4283      	cmp	r3, r0
    62b0:	d103      	bne.n	62ba <bootutil_buffer_is_erased+0x22>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
    62b2:	42a9      	cmp	r1, r5
    62b4:	d1f9      	bne.n	62aa <bootutil_buffer_is_erased+0x12>
    return true;
    62b6:	2001      	movs	r0, #1
}
    62b8:	bd38      	pop	{r3, r4, r5, pc}
        return false;
    62ba:	2000      	movs	r0, #0
    62bc:	e7fc      	b.n	62b8 <bootutil_buffer_is_erased+0x20>

000062be <boot_read_flag>:
{
    62be:	b538      	push	{r3, r4, r5, lr}
    62c0:	460c      	mov	r4, r1
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    62c2:	2301      	movs	r3, #1
{
    62c4:	4611      	mov	r1, r2
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    62c6:	4622      	mov	r2, r4
{
    62c8:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    62ca:	f7ff fcda 	bl	5c82 <flash_area_read>
    if (rc < 0) {
    62ce:	2800      	cmp	r0, #0
    62d0:	db0f      	blt.n	62f2 <boot_read_flag+0x34>
    if (bootutil_buffer_is_erased(fap, flag, sizeof *flag)) {
    62d2:	2201      	movs	r2, #1
    62d4:	4621      	mov	r1, r4
    62d6:	4628      	mov	r0, r5
    62d8:	f7ff ffde 	bl	6298 <bootutil_buffer_is_erased>
    62dc:	b938      	cbnz	r0, 62ee <boot_read_flag+0x30>
    if (flag != BOOT_FLAG_SET) {
    62de:	7823      	ldrb	r3, [r4, #0]
    return BOOT_FLAG_SET;
    62e0:	2b01      	cmp	r3, #1
        *flag = boot_flag_decode(*flag);
    62e2:	bf14      	ite	ne
    62e4:	2302      	movne	r3, #2
    62e6:	2301      	moveq	r3, #1
    62e8:	2000      	movs	r0, #0
    62ea:	7023      	strb	r3, [r4, #0]
}
    62ec:	bd38      	pop	{r3, r4, r5, pc}
    62ee:	2303      	movs	r3, #3
    62f0:	e7fa      	b.n	62e8 <boot_read_flag+0x2a>
        return BOOT_EFLASH;
    62f2:	2001      	movs	r0, #1
    62f4:	e7fa      	b.n	62ec <boot_read_flag+0x2e>

000062f6 <boot_write_trailer>:
{
    62f6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    62fa:	461d      	mov	r5, r3
    62fc:	4606      	mov	r6, r0
    62fe:	460f      	mov	r7, r1
    6300:	4690      	mov	r8, r2
    align = flash_area_align(fap);
    6302:	f7ff fcfe 	bl	5d02 <flash_area_align>
    align = ALIGN_UP(inlen, align);
    6306:	1e6c      	subs	r4, r5, #1
    6308:	4404      	add	r4, r0
    630a:	4240      	negs	r0, r0
    630c:	4004      	ands	r4, r0
    if (align > BOOT_MAX_ALIGN) {
    630e:	2c08      	cmp	r4, #8
    6310:	d81a      	bhi.n	6348 <boot_write_trailer+0x52>
    erased_val = flash_area_erased_val(fap);
    6312:	4630      	mov	r0, r6
    6314:	f7ff fcfc 	bl	5d10 <flash_area_erased_val>
    6318:	4681      	mov	r9, r0
    memcpy(buf, inbuf, inlen);
    631a:	462a      	mov	r2, r5
    631c:	4641      	mov	r1, r8
    631e:	4668      	mov	r0, sp
    6320:	f7ff fd4c 	bl	5dbc <memcpy>
    memset(&buf[inlen], erased_val, align - inlen);
    6324:	4649      	mov	r1, r9
    6326:	1b62      	subs	r2, r4, r5
    6328:	eb0d 0005 	add.w	r0, sp, r5
    632c:	f7ff fd51 	bl	5dd2 <memset>
    rc = flash_area_write(fap, off, buf, align);
    6330:	4623      	mov	r3, r4
    6332:	466a      	mov	r2, sp
    6334:	4639      	mov	r1, r7
    6336:	4630      	mov	r0, r6
    6338:	f7ff fcb8 	bl	5cac <flash_area_write>
    if (rc != 0) {
    633c:	3800      	subs	r0, #0
    633e:	bf18      	it	ne
    6340:	2001      	movne	r0, #1
}
    6342:	b003      	add	sp, #12
    6344:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
    6348:	f04f 30ff 	mov.w	r0, #4294967295
    634c:	e7f9      	b.n	6342 <boot_write_trailer+0x4c>

0000634e <boot_write_trailer_flag>:
{
    634e:	b507      	push	{r0, r1, r2, lr}
    return boot_write_trailer(fap, off, buf, 1);
    6350:	2301      	movs	r3, #1
    const uint8_t buf[1] = { flag_val };
    6352:	f88d 2004 	strb.w	r2, [sp, #4]
    return boot_write_trailer(fap, off, buf, 1);
    6356:	aa01      	add	r2, sp, #4
    6358:	f7ff ffcd 	bl	62f6 <boot_write_trailer>
}
    635c:	b003      	add	sp, #12
    635e:	f85d fb04 	ldr.w	pc, [sp], #4

00006362 <boot_write_image_ok>:
    6362:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    6364:	2201      	movs	r2, #1
    6366:	3918      	subs	r1, #24
    6368:	f021 0107 	bic.w	r1, r1, #7
    636c:	f7ff bfef 	b.w	634e <boot_write_trailer_flag>

00006370 <boot_read_image_ok>:
    6370:	6882      	ldr	r2, [r0, #8]
    6372:	3a18      	subs	r2, #24
    return boot_read_flag(fap, image_ok, boot_image_ok_off(fap));
    6374:	f022 0207 	bic.w	r2, r2, #7
    6378:	f7ff bfa1 	b.w	62be <boot_read_flag>

0000637c <boot_read_swap_state_by_id>:
{
    637c:	b513      	push	{r0, r1, r4, lr}
    637e:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
    6380:	b2c0      	uxtb	r0, r0
    6382:	a901      	add	r1, sp, #4
    6384:	f7fb fa5e 	bl	1844 <flash_area_open>
    if (rc != 0) {
    6388:	b950      	cbnz	r0, 63a0 <boot_read_swap_state_by_id+0x24>
    rc = boot_read_swap_state(fap, state);
    638a:	4621      	mov	r1, r4
    638c:	9801      	ldr	r0, [sp, #4]
    638e:	f7fc fca7 	bl	2ce0 <boot_read_swap_state>
    6392:	4604      	mov	r4, r0
    flash_area_close(fap);
    6394:	9801      	ldr	r0, [sp, #4]
    6396:	f7ff fc73 	bl	5c80 <flash_area_close>
}
    639a:	4620      	mov	r0, r4
    639c:	b002      	add	sp, #8
    639e:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    63a0:	2401      	movs	r4, #1
    63a2:	e7fa      	b.n	639a <boot_read_swap_state_by_id+0x1e>

000063a4 <boot_write_swap_info>:
{
    63a4:	b513      	push	{r0, r1, r4, lr}
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    63a6:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
{
    63aa:	4604      	mov	r4, r0
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    63ac:	f88d 1007 	strb.w	r1, [sp, #7]
    off = boot_swap_info_off(fap);
    63b0:	f7ff ff5e 	bl	6270 <boot_swap_info_off>
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
    63b4:	2301      	movs	r3, #1
    off = boot_swap_info_off(fap);
    63b6:	4601      	mov	r1, r0
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
    63b8:	f10d 0207 	add.w	r2, sp, #7
    63bc:	4620      	mov	r0, r4
    63be:	f7ff ff9a 	bl	62f6 <boot_write_trailer>
}
    63c2:	b002      	add	sp, #8
    63c4:	bd10      	pop	{r4, pc}

000063c6 <nrf91_errata_14>:
                uint32_t var1 = (*((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul))) & 0x00000FFFul;
    63c6:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
    63ca:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    63ce:	f8d2 0134 	ldr.w	r0, [r2, #308]	; 0x134
  __ASM volatile ("dsb 0xF":::"memory");
    63d2:	f3bf 8f4f 	dsb	sy
                uint32_t var1 = (*((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul))) & 0x00000FFFul;
    63d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
            if (var1 == 0x09)
    63da:	2b09      	cmp	r3, #9
    63dc:	d103      	bne.n	63e6 <nrf91_errata_14+0x20>
                switch(var2)
    63de:	1e43      	subs	r3, r0, #1
    63e0:	4258      	negs	r0, r3
    63e2:	4158      	adcs	r0, r3
    63e4:	4770      	bx	lr
                        return false;
    63e6:	2000      	movs	r0, #0
}
    63e8:	4770      	bx	lr

000063ea <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    63ea:	4700      	bx	r0

000063ec <nrfx_busy_wait>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_BUSY_WAIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_busy_wait(usec_to_wait);
    63ec:	f000 b8d9 	b.w	65a2 <z_impl_k_busy_wait>

000063f0 <clock_stop>:
{
    63f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    63f2:	4604      	mov	r4, r0
    63f4:	b118      	cbz	r0, 63fe <clock_stop+0xe>
    63f6:	2801      	cmp	r0, #1
    63f8:	d020      	beq.n	643c <clock_stop+0x4c>
}
    63fa:	b003      	add	sp, #12
    63fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    63fe:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6402:	2202      	movs	r2, #2
    6404:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6408:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    640c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6410:	2201      	movs	r2, #1
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    6412:	4607      	mov	r7, r0
    6414:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    6416:	2301      	movs	r3, #1
    6418:	f242 7510 	movw	r5, #10000	; 0x2710
    641c:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
    6420:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
    6424:	b1bc      	cbz	r4, 6456 <clock_stop+0x66>
    6426:	2c01      	cmp	r4, #1
    6428:	d1e7      	bne.n	63fa <clock_stop+0xa>
            if (p_clk_src != NULL)
    642a:	b38f      	cbz	r7, 6490 <clock_stop+0xa0>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    642c:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    6430:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    6434:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    6436:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    643a:	e014      	b.n	6466 <clock_stop+0x76>
    p_reg->INTENCLR = mask;
    643c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6440:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    6442:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6446:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    644a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    644e:	f10d 0707 	add.w	r7, sp, #7
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6452:	6058      	str	r0, [r3, #4]
    6454:	e7df      	b.n	6416 <clock_stop+0x26>
            if (p_clk_src != NULL)
    6456:	b18f      	cbz	r7, 647c <clock_stop+0x8c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6458:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    645c:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    6460:	703b      	strb	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6462:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    6466:	03da      	lsls	r2, r3, #15
    6468:	d5c7      	bpl.n	63fa <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    646a:	f89d 0007 	ldrb.w	r0, [sp, #7]
    646e:	2801      	cmp	r0, #1
    6470:	d1c3      	bne.n	63fa <clock_stop+0xa>
    6472:	f7ff ffbb 	bl	63ec <nrfx_busy_wait>
    6476:	3d01      	subs	r5, #1
    6478:	d1d4      	bne.n	6424 <clock_stop+0x34>
    647a:	e7be      	b.n	63fa <clock_stop+0xa>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    647c:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    6480:	03d9      	lsls	r1, r3, #15
    6482:	d5ba      	bpl.n	63fa <clock_stop+0xa>
    6484:	2001      	movs	r0, #1
    6486:	f7ff ffb1 	bl	63ec <nrfx_busy_wait>
    648a:	3d01      	subs	r5, #1
    648c:	d1f6      	bne.n	647c <clock_stop+0x8c>
    648e:	e7b4      	b.n	63fa <clock_stop+0xa>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    6490:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    6494:	03db      	lsls	r3, r3, #15
    6496:	d5b0      	bpl.n	63fa <clock_stop+0xa>
    6498:	2001      	movs	r0, #1
    649a:	f7ff ffa7 	bl	63ec <nrfx_busy_wait>
    649e:	3d01      	subs	r5, #1
    64a0:	d1f6      	bne.n	6490 <clock_stop+0xa0>
    64a2:	e7aa      	b.n	63fa <clock_stop+0xa>

000064a4 <nrfx_clock_enable>:
{
    64a4:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    64a6:	2005      	movs	r0, #5
    64a8:	f7fb fa6c 	bl	1984 <arch_irq_is_enabled>
    64ac:	b910      	cbnz	r0, 64b4 <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    64ae:	2005      	movs	r0, #5
    64b0:	f7fb fa46 	bl	1940 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    64b4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    64b8:	2201      	movs	r2, #1
    64ba:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    64be:	bd08      	pop	{r3, pc}

000064c0 <nrfx_clock_start>:
{
    64c0:	b508      	push	{r3, lr}
    switch (domain)
    64c2:	b110      	cbz	r0, 64ca <nrfx_clock_start+0xa>
    64c4:	2801      	cmp	r0, #1
    64c6:	d030      	beq.n	652a <nrfx_clock_start+0x6a>
}
    64c8:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    64ca:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    64ce:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    64d2:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    64d6:	03c9      	lsls	r1, r1, #15
    64d8:	d40e      	bmi.n	64f8 <nrfx_clock_start+0x38>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    64da:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    64de:	07db      	lsls	r3, r3, #31
    64e0:	d513      	bpl.n	650a <nrfx_clock_start+0x4a>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    64e2:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    64e6:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    64ea:	3b01      	subs	r3, #1
    64ec:	2b01      	cmp	r3, #1
    64ee:	d809      	bhi.n	6504 <nrfx_clock_start+0x44>
    p_reg->INTENSET = mask;
    64f0:	2302      	movs	r3, #2
    64f2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    64f6:	e7e7      	b.n	64c8 <nrfx_clock_start+0x8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    64f8:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    64fc:	2b02      	cmp	r3, #2
    64fe:	d005      	beq.n	650c <nrfx_clock_start+0x4c>
    6500:	2b01      	cmp	r3, #1
    6502:	d002      	beq.n	650a <nrfx_clock_start+0x4a>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    6504:	2000      	movs	r0, #0
    6506:	f7ff ff73 	bl	63f0 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    650a:	2301      	movs	r3, #1
    p_reg->LFCLKSRC = (uint32_t)(source);
    650c:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    6510:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6514:	2300      	movs	r3, #0
    6516:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    651a:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    651e:	2302      	movs	r3, #2
    6520:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6524:	2301      	movs	r3, #1
    6526:	6093      	str	r3, [r2, #8]
}
    6528:	e7ce      	b.n	64c8 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    652a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    652e:	2200      	movs	r2, #0
    6530:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    6534:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    6538:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    653c:	6018      	str	r0, [r3, #0]
}
    653e:	e7c3      	b.n	64c8 <nrfx_clock_start+0x8>

00006540 <nrfx_clock_stop>:
    clock_stop(domain);
    6540:	f7ff bf56 	b.w	63f0 <clock_stop>

00006544 <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
    6544:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    6548:	4770      	bx	lr

0000654a <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
    654a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    654e:	4770      	bx	lr

00006550 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
    6550:	f44f 7080 	mov.w	r0, #256	; 0x100
    6554:	4770      	bx	lr

00006556 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
    6556:	4770      	bx	lr

00006558 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    6558:	b140      	cbz	r0, 656c <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    655a:	68c3      	ldr	r3, [r0, #12]
    655c:	7858      	ldrb	r0, [r3, #1]
    655e:	f010 0001 	ands.w	r0, r0, #1
    6562:	bf1e      	ittt	ne
    6564:	7818      	ldrbne	r0, [r3, #0]
    6566:	fab0 f080 	clzne	r0, r0
    656a:	0940      	lsrne	r0, r0, #5
}
    656c:	4770      	bx	lr

0000656e <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    656e:	b510      	push	{r4, lr}
	__asm__ volatile(
    6570:	f04f 0320 	mov.w	r3, #32
    6574:	f3ef 8411 	mrs	r4, BASEPRI
    6578:	f383 8812 	msr	BASEPRI_MAX, r3
    657c:	f3bf 8f6f 	isb	sy

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    6580:	f7ff fe67 	bl	6252 <k_sys_fatal_error_handler>
	__asm__ volatile(
    6584:	f384 8811 	msr	BASEPRI, r4
    6588:	f3bf 8f6f 	isb	sy
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    658c:	bd10      	pop	{r4, pc}

0000658e <z_early_memset>:
	(void) memset(dst, c, n);
    658e:	f7ff bc20 	b.w	5dd2 <memset>

00006592 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    6592:	f7ff bc13 	b.w	5dbc <memcpy>

00006596 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    6596:	f3ef 8005 	mrs	r0, IPSR
}

bool k_is_in_isr(void)
{
	return arch_is_in_isr();
}
    659a:	3800      	subs	r0, #0
    659c:	bf18      	it	ne
    659e:	2001      	movne	r0, #1
    65a0:	4770      	bx	lr

000065a2 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    65a2:	b108      	cbz	r0, 65a8 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    65a4:	f7fb b942 	b.w	182c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    65a8:	4770      	bx	lr

000065aa <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    65aa:	4770      	bx	lr

000065ac <nrf_cc310_bl_ecdsa_verify_secp256r1>:
    65ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    65b0:	9f06      	ldr	r7, [sp, #24]
    65b2:	4604      	mov	r4, r0
    65b4:	4615      	mov	r5, r2
    65b6:	461e      	mov	r6, r3
    65b8:	f7fd fc22 	bl	3e00 <nrf_cc310_bl_ecdsa_verify_init_secp256r1>
    65bc:	b938      	cbnz	r0, 65ce <nrf_cc310_bl_ecdsa_verify_secp256r1+0x22>
    65be:	463b      	mov	r3, r7
    65c0:	4632      	mov	r2, r6
    65c2:	4629      	mov	r1, r5
    65c4:	4620      	mov	r0, r4
    65c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    65ca:	f7fd bc3f 	b.w	3e4c <nrf_cc310_bl_ecdsa_verify_hash_secp256r1>
    65ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000065d2 <PkaInitAndMutexLock>:
    65d2:	460a      	mov	r2, r1
    65d4:	2100      	movs	r1, #0
    65d6:	f7fd bec5 	b.w	4364 <PkaInitPka>

000065da <SaSi_PalMemCopy>:
    65da:	f7ff bbef 	b.w	5dbc <memcpy>

000065de <SaSi_PalMemSet>:
    65de:	f7ff bbf8 	b.w	5dd2 <memset>

000065e2 <SaSi_PalMemSetZero>:
    65e2:	460a      	mov	r2, r1
    65e4:	2100      	movs	r1, #0
    65e6:	f7ff bbf4 	b.w	5dd2 <memset>

000065ea <CRYS_COMMON_ReverseMemcpy32>:
    65ea:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    65ee:	3804      	subs	r0, #4
    65f0:	428a      	cmp	r2, r1
    65f2:	d101      	bne.n	65f8 <CRYS_COMMON_ReverseMemcpy32+0xe>
    65f4:	2000      	movs	r0, #0
    65f6:	4770      	bx	lr
    65f8:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    65fc:	ba1b      	rev	r3, r3
    65fe:	f840 3f04 	str.w	r3, [r0, #4]!
    6602:	e7f5      	b.n	65f0 <CRYS_COMMON_ReverseMemcpy32+0x6>
